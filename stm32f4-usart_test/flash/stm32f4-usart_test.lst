
stm32f4-usart_test.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <pinMode>:
 static const uint8_t MISO = 12;
 static const uint8_t SCK  = 13; // PB7
 static const uint8_t LED_BUILTIN = 14;
 */

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 8000188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 800018a:	f3c0 4503 	ubfx	r5, r0, #16, #4
 800018e:	4c0d      	ldr	r4, [pc, #52]	; (80001c4 <pinMode+0x3c>)
 static const uint8_t MISO = 12;
 static const uint8_t SCK  = 13; // PB7
 static const uint8_t LED_BUILTIN = 14;
 */

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 8000190:	460f      	mov	r7, r1
 8000192:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 8000194:	2101      	movs	r1, #1
 8000196:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 800019a:	eb04 0485 	add.w	r4, r4, r5, lsl #2

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 800019e:	f000 fbe3 	bl	8000968 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001a2:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 80001a4:	b2b6      	uxth	r6, r6
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001a6:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80001aa:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 80001ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 80001b0:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80001b2:	2302      	movs	r3, #2
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 80001b4:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
 80001b6:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80001ba:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 80001be:	f000 fa15 	bl	80005ec <GPIO_Init>
}
 80001c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80001c4:	20000000 	.word	0x20000000

080001c8 <GPIOMode>:


void GPIOMode(uint32_t periph, GPIO_TypeDef * port, uint16_t pins,
		GPIOMode_TypeDef mode, GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype,
		GPIOPuPd_TypeDef pupd) {
 80001c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80001ca:	460c      	mov	r4, r1

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
 80001cc:	2101      	movs	r1, #1
}


void GPIOMode(uint32_t periph, GPIO_TypeDef * port, uint16_t pins,
		GPIOMode_TypeDef mode, GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype,
		GPIOPuPd_TypeDef pupd) {
 80001ce:	461e      	mov	r6, r3
 80001d0:	4615      	mov	r5, r2

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
 80001d2:	f000 fbc9 	bl	8000968 <RCC_AHB1PeriphClockCmd>
	//
	GPIO_InitStructure.GPIO_Pin = pins;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80001d6:	f89d 301c 	ldrb.w	r3, [sp, #28]

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
	//
	GPIO_InitStructure.GPIO_Pin = pins;
 80001da:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80001dc:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80001e0:	f89d 3020 	ldrb.w	r3, [sp, #32]
	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(periph, ENABLE);
	//
	GPIO_InitStructure.GPIO_Pin = pins;
	GPIO_InitStructure.GPIO_Mode = mode;
 80001e4:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80001e8:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 80001ec:	f89d 3018 	ldrb.w	r3, [sp, #24]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80001f0:	4620      	mov	r0, r4
 80001f2:	4669      	mov	r1, sp
	//
	GPIO_InitStructure.GPIO_Pin = pins;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
 80001f4:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80001f8:	f000 f9f8 	bl	80005ec <GPIO_Init>
}
 80001fc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

080001fe <digitalWrite>:

/*
 static void turnOffPWM(uint8_t timer) {
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
 80001fe:	4603      	mov	r3, r0
 8000200:	4a06      	ldr	r2, [pc, #24]	; (800021c <digitalWrite+0x1e>)
 8000202:	0c00      	lsrs	r0, r0, #16
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 8000204:	f000 000f 	and.w	r0, r0, #15
 8000208:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800020c:	6a90      	ldr	r0, [r2, #40]	; 0x28
/*
 static void turnOffPWM(uint8_t timer) {
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
	if (bit) {
 800020e:	b111      	cbz	r1, 8000216 <digitalWrite+0x18>
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 8000210:	b299      	uxth	r1, r3
 8000212:	f000 ba5c 	b.w	80006ce <GPIO_SetBits>
	} else {
		GPIO_ResetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 8000216:	b299      	uxth	r1, r3
 8000218:	f000 ba5b 	b.w	80006d2 <GPIO_ResetBits>
 800021c:	20000000 	.word	0x20000000

08000220 <portWrite>:
	}
}

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 8000220:	f000 ba5e 	b.w	80006e0 <GPIO_Write>

08000224 <digitalRead>:
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
	uint8_t mode = (port->MODER) >> (pin * 2);
 8000224:	6802      	ldr	r2, [r0, #0]

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
 8000226:	b508      	push	{r3, lr}
	uint8_t mode = (port->MODER) >> (pin * 2);
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 800022e:	b2db      	uxtb	r3, r3
 8000230:	2b01      	cmp	r3, #1
 8000232:	d105      	bne.n	8000240 <digitalRead+0x1c>
		return (GPIO_ReadOutputDataBit(port, pin) ? SET : RESET);
 8000234:	f000 fa42 	bl	80006bc <GPIO_ReadOutputDataBit>
 8000238:	3000      	adds	r0, #0
 800023a:	bf18      	it	ne
 800023c:	2001      	movne	r0, #1
 800023e:	bd08      	pop	{r3, pc}
	return (GPIO_ReadInputDataBit(port, pin) ? SET : RESET);
 8000240:	f000 fa33 	bl	80006aa <GPIO_ReadInputDataBit>
 8000244:	3000      	adds	r0, #0
 8000246:	bf18      	it	ne
 8000248:	2001      	movne	r0, #1
}
 800024a:	bd08      	pop	{r3, pc}

0800024c <SysTick_Handler>:
 */
//#include "stm32f4xx_it.h"
#include "systick.h"

void SysTick_Handler(void) {
	SysTick_counts++; /* increment timeTicks counter */
 800024c:	4b02      	ldr	r3, [pc, #8]	; (8000258 <SysTick_Handler+0xc>)
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	3201      	adds	r2, #1
 8000252:	601a      	str	r2, [r3, #0]
}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	20000098 	.word	0x20000098

0800025c <delay>:

void delay(const uint32_t dlyTicks) {
	uint32_t currTicks = SysTick_counts;
 800025c:	4b03      	ldr	r3, [pc, #12]	; (800026c <delay+0x10>)
 800025e:	681a      	ldr	r2, [r3, #0]

	while ((SysTick_counts - currTicks) < dlyTicks)
 8000260:	6819      	ldr	r1, [r3, #0]
 8000262:	1a89      	subs	r1, r1, r2
 8000264:	4281      	cmp	r1, r0
 8000266:	d3fb      	bcc.n	8000260 <delay+0x4>
		;
}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	20000098 	.word	0x20000098

08000270 <SysTick_Init>:

void SysTick_Start() {
	SysTick_Init(1000);
}

void SysTick_Init(uint32 ticks) {
 8000270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000272:	4604      	mov	r4, r0
	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 8000274:	4668      	mov	r0, sp
 8000276:	f000 fb07 	bl	8000888 <RCC_GetClocksFreq>
	SysTick_Config(RCC_Clocks.HCLK_Frequency / ticks);
 800027a:	9b01      	ldr	r3, [sp, #4]
 800027c:	fbb3 f4f4 	udiv	r4, r3, r4
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000280:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 8000284:	d20a      	bcs.n	800029c <SysTick_Init+0x2c>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <SysTick_Init+0x30>)
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000288:	4a06      	ldr	r2, [pc, #24]	; (80002a4 <SysTick_Init+0x34>)
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800028a:	3c01      	subs	r4, #1
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800028c:	21f0      	movs	r1, #240	; 0xf0
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800028e:	605c      	str	r4, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000290:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000298:	2207      	movs	r2, #7
 800029a:	601a      	str	r2, [r3, #0]
}
 800029c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 800029e:	bf00      	nop
 80002a0:	e000e010 	.word	0xe000e010
 80002a4:	e000ed00 	.word	0xe000ed00

080002a8 <SysTick_Start>:
	while ((SysTick_counts - currTicks) < dlyTicks)
		;
}

void SysTick_Start() {
	SysTick_Init(1000);
 80002a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ac:	e7e0      	b.n	8000270 <SysTick_Init>

080002ae <systicks>:
	RCC_GetClocksFreq(&RCC_Clocks);
	SysTick_Config(RCC_Clocks.HCLK_Frequency / ticks);
}

uint32 systicks() {
	return SysTick_counts;
 80002ae:	4b01      	ldr	r3, [pc, #4]	; (80002b4 <systicks+0x6>)
 80002b0:	6818      	ldr	r0, [r3, #0]
}
 80002b2:	4770      	bx	lr
 80002b4:	20000098 	.word	0x20000098

080002b8 <usart_begin>:

#include "favorites.h"
#include "gpio_digital.h"
#include "usart.h"

void usart_begin(uint32 baud) {
 80002b8:	b5f0      	push	{r4, r5, r6, r7, lr}
//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
//	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
 80002ba:	2101      	movs	r1, #1

#include "favorites.h"
#include "gpio_digital.h"
#include "usart.h"

void usart_begin(uint32 baud) {
 80002bc:	b087      	sub	sp, #28
//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
//	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
	GPIOMode(GPIOB, GPIO_Pin_10 | GPIO_Pin_11, ALTFUNC, FASTSPEED, PUSHPULL, PULLUP);
 80002be:	4e1f      	ldr	r6, [pc, #124]	; (800033c <usart_begin+0x84>)

#include "favorites.h"
#include "gpio_digital.h"
#include "usart.h"

void usart_begin(uint32 baud) {
 80002c0:	4607      	mov	r7, r0
//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
//	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
 80002c2:	2002      	movs	r0, #2
 80002c4:	f000 fb50 	bl	8000968 <RCC_AHB1PeriphClockCmd>
	GPIOMode(GPIOB, GPIO_Pin_10 | GPIO_Pin_11, ALTFUNC, FASTSPEED, PUSHPULL, PULLUP);
 80002c8:	2202      	movs	r2, #2
 80002ca:	2400      	movs	r4, #0
 80002cc:	4613      	mov	r3, r2
 80002ce:	2501      	movs	r5, #1
 80002d0:	4630      	mov	r0, r6
 80002d2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80002d6:	e88d 0030 	stmia.w	sp, {r4, r5}
 80002da:	f7ff ff75 	bl	80001c8 <GPIOMode>
	/* USART3 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, (FunctionalState) ENABLE);
 80002de:	4629      	mov	r1, r5
 80002e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80002e4:	f000 fb64 	bl	80009b0 <RCC_APB1PeriphClockCmd>

	digitalWrite(PD12, LOW);
 80002e8:	208c      	movs	r0, #140	; 0x8c
 80002ea:	4621      	mov	r1, r4
 80002ec:	f7ff ff87 	bl	80001fe <digitalWrite>
	digitalWrite(PD15, LOW);
 80002f0:	208f      	movs	r0, #143	; 0x8f
 80002f2:	4621      	mov	r1, r4
 80002f4:	f7ff ff83 	bl	80001fe <digitalWrite>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3 ); // TX -- PB10
 80002f8:	4630      	mov	r0, r6
 80002fa:	210a      	movs	r1, #10
 80002fc:	2207      	movs	r2, #7
 80002fe:	f000 f9f5 	bl	80006ec <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3 ); // RX -- PB11
 8000302:	4630      	mov	r0, r6
 8000304:	210b      	movs	r1, #11
 8000306:	2207      	movs	r2, #7
 8000308:	f000 f9f0 	bl	80006ec <GPIO_PinAFConfig>

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 800030c:	f8ad 400c 	strh.w	r4, [sp, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8000310:	f8ad 400e 	strh.w	r4, [sp, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8000314:	f8ad 4010 	strh.w	r4, [sp, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000318:	f8ad 4014 	strh.w	r4, [sp, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 800031c:	4c08      	ldr	r4, [pc, #32]	; (8000340 <usart_begin+0x88>)
	digitalWrite(PD15, LOW);

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3 ); // TX -- PB10
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3 ); // RX -- PB11

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 800031e:	9702      	str	r7, [sp, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000320:	230c      	movs	r3, #12

	USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000322:	4620      	mov	r0, r4
 8000324:	a902      	add	r1, sp, #8
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000326:	f8ad 3012 	strh.w	r3, [sp, #18]

	USART_Init(USART3, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 800032a:	f000 fc73 	bl	8000c14 <USART_Init>
	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART1 interrupts are globally enabled
	 NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	 */

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART3, (FunctionalState) ENABLE);
 800032e:	4620      	mov	r0, r4
 8000330:	4629      	mov	r1, r5
 8000332:	f000 fcec 	bl	8000d0e <USART_Cmd>

}
 8000336:	b007      	add	sp, #28
 8000338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800033a:	bf00      	nop
 800033c:	40020400 	.word	0x40020400
 8000340:	40004800 	.word	0x40004800

08000344 <usart_write>:
 *
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */

size_t usart_write(uint8 ch) {
 8000344:	b508      	push	{r3, lr}
	while (!(USART3->SR & 0x00000040))
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <usart_write+0x24>)
 *
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */

size_t usart_write(uint8 ch) {
 8000348:	4601      	mov	r1, r0
	while (!(USART3->SR & 0x00000040))
 800034a:	881a      	ldrh	r2, [r3, #0]
 800034c:	0652      	lsls	r2, r2, #25
 800034e:	d5fc      	bpl.n	800034a <usart_write+0x6>
	;
	USART_SendData(USART3, (uint16) ch);
 8000350:	4805      	ldr	r0, [pc, #20]	; (8000368 <usart_write+0x24>)
 8000352:	f000 fd09 	bl	8000d68 <USART_SendData>
	/* Loop until the end of transmission */
	while (USART_GetFlagStatus(USART3, USART_FLAG_TC )
 8000356:	4804      	ldr	r0, [pc, #16]	; (8000368 <usart_write+0x24>)
 8000358:	2140      	movs	r1, #64	; 0x40
 800035a:	f000 fdb2 	bl	8000ec2 <USART_GetFlagStatus>
 800035e:	2800      	cmp	r0, #0
 8000360:	d0f9      	beq.n	8000356 <usart_write+0x12>
			== RESET) {
	}
	return 1;
}
 8000362:	2001      	movs	r0, #1
 8000364:	bd08      	pop	{r3, pc}
 8000366:	bf00      	nop
 8000368:	40004800 	.word	0x40004800

0800036c <usart_print>:


size_t usart_print(const char * s) {
 800036c:	b538      	push	{r3, r4, r5, lr}
 800036e:	4605      	mov	r5, r0
	size_t n = 0;
 8000370:	2400      	movs	r4, #0
	while ( *s ) {
 8000372:	e002      	b.n	800037a <usart_print+0xe>
		usart_write(*s);
 8000374:	f7ff ffe6 	bl	8000344 <usart_write>
		s++;
		n++;
 8000378:	3401      	adds	r4, #1
}


size_t usart_print(const char * s) {
	size_t n = 0;
	while ( *s ) {
 800037a:	5d28      	ldrb	r0, [r5, r4]
 800037c:	2800      	cmp	r0, #0
 800037e:	d1f9      	bne.n	8000374 <usart_print+0x8>
		usart_write(*s);
		s++;
		n++;
	}
	return n;
}
 8000380:	4620      	mov	r0, r4
 8000382:	bd38      	pop	{r3, r4, r5, pc}

08000384 <usart_printNumber>:


size_t usart_printNumber(uint32 val) {
 8000384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t n = 0;
	uint8 base = 10;
	uint32 divider = 1000000000;
	uint8 msd = 0;
 8000388:	2300      	movs	r3, #0
	}
	return n;
}


size_t usart_printNumber(uint32 val) {
 800038a:	240a      	movs	r4, #10
	size_t n = 0;
	uint8 base = 10;
	uint32 divider = 1000000000;
 800038c:	4f0c      	ldr	r7, [pc, #48]	; (80003c0 <usart_printNumber+0x3c>)
	}
	return n;
}


size_t usart_printNumber(uint32 val) {
 800038e:	4680      	mov	r8, r0
	size_t n = 0;
 8000390:	461d      	mov	r5, r3
	uint8 base = 10;
	uint32 divider = 1000000000;
	uint8 msd = 0;
	uint8 digit;
	while ( divider > 0 ) {
		digit = val / divider % base;
 8000392:	4626      	mov	r6, r4
 8000394:	fbb8 f2f7 	udiv	r2, r8, r7
 8000398:	fbb2 f0f6 	udiv	r0, r2, r6
 800039c:	fb06 2010 	mls	r0, r6, r0, r2
 80003a0:	b2c0      	uxtb	r0, r0
		if ( digit || msd ) {
 80003a2:	b900      	cbnz	r0, 80003a6 <usart_printNumber+0x22>
 80003a4:	b12b      	cbz	r3, 80003b2 <usart_printNumber+0x2e>
			usart_write('0'+(digit>10 ? digit+7 : digit));
 80003a6:	3030      	adds	r0, #48	; 0x30
 80003a8:	b2c0      	uxtb	r0, r0
 80003aa:	f7ff ffcb 	bl	8000344 <usart_write>
			msd = 1;
			n++;
 80003ae:	3501      	adds	r5, #1
	uint8 digit;
	while ( divider > 0 ) {
		digit = val / divider % base;
		if ( digit || msd ) {
			usart_write('0'+(digit>10 ? digit+7 : digit));
			msd = 1;
 80003b0:	2301      	movs	r3, #1
	size_t n = 0;
	uint8 base = 10;
	uint32 divider = 1000000000;
	uint8 msd = 0;
	uint8 digit;
	while ( divider > 0 ) {
 80003b2:	3c01      	subs	r4, #1
		if ( digit || msd ) {
			usart_write('0'+(digit>10 ? digit+7 : digit));
			msd = 1;
			n++;
		}
		divider /= base;
 80003b4:	fbb7 f7f6 	udiv	r7, r7, r6
	size_t n = 0;
	uint8 base = 10;
	uint32 divider = 1000000000;
	uint8 msd = 0;
	uint8 digit;
	while ( divider > 0 ) {
 80003b8:	d1ec      	bne.n	8000394 <usart_printNumber+0x10>
			n++;
		}
		divider /= base;
	}
	return n;
}
 80003ba:	4628      	mov	r0, r5
 80003bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80003c0:	3b9aca00 	.word	0x3b9aca00

080003c4 <usart_printFloat>:

size_t usart_printFloat(float val, uint8 prec) {
 80003c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003c8:	460f      	mov	r7, r1
	size_t n = 0;
	if ( val < 0 ) {
 80003ca:	2100      	movs	r1, #0
		divider /= base;
	}
	return n;
}

size_t usart_printFloat(float val, uint8 prec) {
 80003cc:	4604      	mov	r4, r0
	size_t n = 0;
	if ( val < 0 ) {
 80003ce:	f001 f929 	bl	8001624 <__aeabi_fcmplt>
 80003d2:	b130      	cbz	r0, 80003e2 <usart_printFloat+0x1e>
		usart_write('-');
 80003d4:	202d      	movs	r0, #45	; 0x2d
 80003d6:	f7ff ffb5 	bl	8000344 <usart_write>
		val = -val;
 80003da:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
		n++;
 80003de:	2501      	movs	r5, #1
 80003e0:	e000      	b.n	80003e4 <usart_printFloat+0x20>
	}
	return n;
}

size_t usart_printFloat(float val, uint8 prec) {
	size_t n = 0;
 80003e2:	2500      	movs	r5, #0
	if ( val < 0 ) {
		usart_write('-');
		val = -val;
		n++;
	}
	uint32 intpart = (uint32)val;
 80003e4:	4620      	mov	r0, r4
 80003e6:	f001 f945 	bl	8001674 <__aeabi_f2uiz>
 80003ea:	4680      	mov	r8, r0
	val -= intpart;
 80003ec:	f000 ff24 	bl	8001238 <__aeabi_ui2f>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4620      	mov	r0, r4
 80003f4:	f000 fe6e 	bl	80010d4 <__aeabi_fsub>
 80003f8:	4606      	mov	r6, r0
	n += usart_printNumber(intpart);
 80003fa:	4640      	mov	r0, r8
 80003fc:	f7ff ffc2 	bl	8000384 <usart_printNumber>
	int i;
	if ( val > 0 ) {
 8000400:	2100      	movs	r1, #0
		val = -val;
		n++;
	}
	uint32 intpart = (uint32)val;
	val -= intpart;
	n += usart_printNumber(intpart);
 8000402:	1944      	adds	r4, r0, r5
	int i;
	if ( val > 0 ) {
 8000404:	4630      	mov	r0, r6
 8000406:	f001 f92b 	bl	8001660 <__aeabi_fcmpgt>
 800040a:	b1d8      	cbz	r0, 8000444 <usart_printFloat+0x80>
		usart_write('.');
 800040c:	202e      	movs	r0, #46	; 0x2e
 800040e:	f7ff ff99 	bl	8000344 <usart_write>
		n++;
		for(i = 0; i < prec; i++) {
 8000412:	2500      	movs	r5, #0
 8000414:	e012      	b.n	800043c <usart_printFloat+0x78>
			val *= 10;
 8000416:	490d      	ldr	r1, [pc, #52]	; (800044c <usart_printFloat+0x88>)
 8000418:	4630      	mov	r0, r6
 800041a:	f000 ff65 	bl	80012e8 <__aeabi_fmul>
 800041e:	4606      	mov	r6, r0
			usart_printNumber((uint32)val);
 8000420:	f001 f928 	bl	8001674 <__aeabi_f2uiz>
 8000424:	4680      	mov	r8, r0
 8000426:	f7ff ffad 	bl	8000384 <usart_printNumber>
			val -= (uint32)val;
 800042a:	4640      	mov	r0, r8
 800042c:	f000 ff04 	bl	8001238 <__aeabi_ui2f>
 8000430:	4601      	mov	r1, r0
 8000432:	4630      	mov	r0, r6
 8000434:	f000 fe4e 	bl	80010d4 <__aeabi_fsub>
	n += usart_printNumber(intpart);
	int i;
	if ( val > 0 ) {
		usart_write('.');
		n++;
		for(i = 0; i < prec; i++) {
 8000438:	3501      	adds	r5, #1
			val *= 10;
			usart_printNumber((uint32)val);
			val -= (uint32)val;
 800043a:	4606      	mov	r6, r0
	n += usart_printNumber(intpart);
	int i;
	if ( val > 0 ) {
		usart_write('.');
		n++;
		for(i = 0; i < prec; i++) {
 800043c:	42bd      	cmp	r5, r7
 800043e:	dbea      	blt.n	8000416 <usart_printFloat+0x52>
	val -= intpart;
	n += usart_printNumber(intpart);
	int i;
	if ( val > 0 ) {
		usart_write('.');
		n++;
 8000440:	3701      	adds	r7, #1
 8000442:	19e4      	adds	r4, r4, r7
			val -= (uint32)val;
			n++;
		}
	}
	return n;
}
 8000444:	4620      	mov	r0, r4
 8000446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800044a:	bf00      	nop
 800044c:	41200000 	.word	0x41200000

08000450 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000450:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000454:	4b02      	ldr	r3, [pc, #8]	; (8000460 <NVIC_PriorityGroupConfig+0x10>)
 8000456:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800045a:	60d8      	str	r0, [r3, #12]
}
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	e000ed00 	.word	0xe000ed00

08000464 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000464:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000466:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000468:	b30b      	cbz	r3, 80004ae <NVIC_Init+0x4a>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800046a:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <NVIC_Init+0x64>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800046c:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800046e:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000470:	7884      	ldrb	r4, [r0, #2]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000472:	43db      	mvns	r3, r3
 8000474:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 8000478:	f1c3 0104 	rsb	r1, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800047c:	b2c9      	uxtb	r1, r1
 800047e:	fa12 f101 	lsls.w	r1, r2, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8000482:	220f      	movs	r2, #15
 8000484:	411a      	asrs	r2, r3
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000486:	7803      	ldrb	r3, [r0, #0]
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000488:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800048a:	4022      	ands	r2, r4
 800048c:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800048e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000492:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8000496:	0112      	lsls	r2, r2, #4
 8000498:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800049a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800049e:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80004a0:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004a2:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80004a4:	f003 031f 	and.w	r3, r3, #31
 80004a8:	fa12 f303 	lsls.w	r3, r2, r3
 80004ac:	e007      	b.n	80004be <NVIC_Init+0x5a>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004ae:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80004b0:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004b2:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80004b4:	f003 031f 	and.w	r3, r3, #31
 80004b8:	fa12 f303 	lsls.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004bc:	3120      	adds	r1, #32
 80004be:	4a03      	ldr	r2, [pc, #12]	; (80004cc <NVIC_Init+0x68>)
 80004c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	bf00      	nop
 80004c8:	e000ed00 	.word	0xe000ed00
 80004cc:	e000e100 	.word	0xe000e100

080004d0 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80004d0:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80004d4:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80004d8:	4b01      	ldr	r3, [pc, #4]	; (80004e0 <NVIC_SetVectorTable+0x10>)
 80004da:	4301      	orrs	r1, r0
 80004dc:	6099      	str	r1, [r3, #8]
}
 80004de:	4770      	bx	lr
 80004e0:	e000ed00 	.word	0xe000ed00

080004e4 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 80004e4:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80004e6:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80004e8:	b109      	cbz	r1, 80004ee <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 80004ea:	4310      	orrs	r0, r2
 80004ec:	e001      	b.n	80004f2 <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80004ee:	ea22 0000 	bic.w	r0, r2, r0
 80004f2:	6118      	str	r0, [r3, #16]
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	e000ed00 	.word	0xe000ed00

080004fc <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80004fe:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000500:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000502:	bf0c      	ite	eq
 8000504:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000508:	f022 0204 	bicne.w	r2, r2, #4
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	4770      	bx	lr
 8000510:	e000e010 	.word	0xe000e010

08000514 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000514:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000516:	4b2c      	ldr	r3, [pc, #176]	; (80005c8 <GPIO_DeInit+0xb4>)
 8000518:	4298      	cmp	r0, r3
 800051a:	d105      	bne.n	8000528 <GPIO_DeInit+0x14>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800051c:	2001      	movs	r0, #1
 800051e:	4601      	mov	r1, r0
 8000520:	f000 fa5e 	bl	80009e0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000524:	2001      	movs	r0, #1
 8000526:	e048      	b.n	80005ba <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOB)
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <GPIO_DeInit+0xb8>)
 800052a:	4298      	cmp	r0, r3
 800052c:	d105      	bne.n	800053a <GPIO_DeInit+0x26>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800052e:	2002      	movs	r0, #2
 8000530:	2101      	movs	r1, #1
 8000532:	f000 fa55 	bl	80009e0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8000536:	2002      	movs	r0, #2
 8000538:	e03f      	b.n	80005ba <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOC)
 800053a:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <GPIO_DeInit+0xbc>)
 800053c:	4298      	cmp	r0, r3
 800053e:	d105      	bne.n	800054c <GPIO_DeInit+0x38>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000540:	2004      	movs	r0, #4
 8000542:	2101      	movs	r1, #1
 8000544:	f000 fa4c 	bl	80009e0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8000548:	2004      	movs	r0, #4
 800054a:	e036      	b.n	80005ba <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOD)
 800054c:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <GPIO_DeInit+0xc0>)
 800054e:	4298      	cmp	r0, r3
 8000550:	d105      	bne.n	800055e <GPIO_DeInit+0x4a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000552:	2008      	movs	r0, #8
 8000554:	2101      	movs	r1, #1
 8000556:	f000 fa43 	bl	80009e0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800055a:	2008      	movs	r0, #8
 800055c:	e02d      	b.n	80005ba <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOE)
 800055e:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <GPIO_DeInit+0xc4>)
 8000560:	4298      	cmp	r0, r3
 8000562:	d105      	bne.n	8000570 <GPIO_DeInit+0x5c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000564:	2010      	movs	r0, #16
 8000566:	2101      	movs	r1, #1
 8000568:	f000 fa3a 	bl	80009e0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800056c:	2010      	movs	r0, #16
 800056e:	e024      	b.n	80005ba <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOF)
 8000570:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <GPIO_DeInit+0xc8>)
 8000572:	4298      	cmp	r0, r3
 8000574:	d105      	bne.n	8000582 <GPIO_DeInit+0x6e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000576:	2020      	movs	r0, #32
 8000578:	2101      	movs	r1, #1
 800057a:	f000 fa31 	bl	80009e0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800057e:	2020      	movs	r0, #32
 8000580:	e01b      	b.n	80005ba <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOG)
 8000582:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <GPIO_DeInit+0xcc>)
 8000584:	4298      	cmp	r0, r3
 8000586:	d105      	bne.n	8000594 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000588:	2040      	movs	r0, #64	; 0x40
 800058a:	2101      	movs	r1, #1
 800058c:	f000 fa28 	bl	80009e0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000590:	2040      	movs	r0, #64	; 0x40
 8000592:	e012      	b.n	80005ba <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOH)
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <GPIO_DeInit+0xd0>)
 8000596:	4298      	cmp	r0, r3
 8000598:	d105      	bne.n	80005a6 <GPIO_DeInit+0x92>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800059a:	2080      	movs	r0, #128	; 0x80
 800059c:	2101      	movs	r1, #1
 800059e:	f000 fa1f 	bl	80009e0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80005a2:	2080      	movs	r0, #128	; 0x80
 80005a4:	e009      	b.n	80005ba <GPIO_DeInit+0xa6>
  }
  else
  {
    if (GPIOx == GPIOI)
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <GPIO_DeInit+0xd4>)
 80005a8:	4298      	cmp	r0, r3
 80005aa:	d10b      	bne.n	80005c4 <GPIO_DeInit+0xb0>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80005ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80005b0:	2101      	movs	r1, #1
 80005b2:	f000 fa15 	bl	80009e0 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80005b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80005ba:	2100      	movs	r1, #0
    }
  }
}
 80005bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80005c0:	f000 ba0e 	b.w	80009e0 <RCC_AHB1PeriphResetCmd>
 80005c4:	bd08      	pop	{r3, pc}
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000
 80005cc:	40020400 	.word	0x40020400
 80005d0:	40020800 	.word	0x40020800
 80005d4:	40020c00 	.word	0x40020c00
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40021400 	.word	0x40021400
 80005e0:	40021800 	.word	0x40021800
 80005e4:	40021c00 	.word	0x40021c00
 80005e8:	40022000 	.word	0x40022000

080005ec <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80005ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80005f0:	2300      	movs	r3, #0
 80005f2:	f8d1 8000 	ldr.w	r8, [r1]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005f6:	461a      	mov	r2, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 80005f8:	f04f 0c01 	mov.w	ip, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80005fc:	2703      	movs	r7, #3

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 80005fe:	fa0c f402 	lsl.w	r4, ip, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000602:	ea04 0508 	and.w	r5, r4, r8

    if (currentpin == pos)
 8000606:	42a5      	cmp	r5, r4
 8000608:	d12e      	bne.n	8000668 <GPIO_Init+0x7c>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800060a:	6806      	ldr	r6, [r0, #0]
 800060c:	fa17 f403 	lsls.w	r4, r7, r3
 8000610:	43e4      	mvns	r4, r4
 8000612:	4026      	ands	r6, r4
 8000614:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000616:	790e      	ldrb	r6, [r1, #4]
 8000618:	f8d0 9000 	ldr.w	r9, [r0]
 800061c:	fa06 fa03 	lsl.w	sl, r6, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000620:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000622:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000626:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000628:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800062c:	d814      	bhi.n	8000658 <GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800062e:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000630:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000634:	4026      	ands	r6, r4
 8000636:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000638:	6886      	ldr	r6, [r0, #8]
 800063a:	fa09 f903 	lsl.w	r9, r9, r3
 800063e:	ea49 0606 	orr.w	r6, r9, r6
 8000642:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000644:	6846      	ldr	r6, [r0, #4]
 8000646:	ea26 0505 	bic.w	r5, r6, r5
 800064a:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800064c:	798d      	ldrb	r5, [r1, #6]
 800064e:	6846      	ldr	r6, [r0, #4]
 8000650:	4095      	lsls	r5, r2
 8000652:	b2ad      	uxth	r5, r5
 8000654:	4335      	orrs	r5, r6
 8000656:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000658:	68c5      	ldr	r5, [r0, #12]
 800065a:	402c      	ands	r4, r5
 800065c:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800065e:	79cc      	ldrb	r4, [r1, #7]
 8000660:	68c5      	ldr	r5, [r0, #12]
 8000662:	409c      	lsls	r4, r3
 8000664:	432c      	orrs	r4, r5
 8000666:	60c4      	str	r4, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000668:	3201      	adds	r2, #1
 800066a:	3302      	adds	r3, #2
 800066c:	2a10      	cmp	r2, #16
 800066e:	d1c6      	bne.n	80005fe <GPIO_Init+0x12>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000674 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000678:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800067a:	2300      	movs	r3, #0
 800067c:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800067e:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000680:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000682:	71c3      	strb	r3, [r0, #7]
}
 8000684:	4770      	bx	lr

08000686 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000686:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8000688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068c:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 800068e:	9b01      	ldr	r3, [sp, #4]
 8000690:	430b      	orrs	r3, r1
 8000692:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000694:	9b01      	ldr	r3, [sp, #4]
 8000696:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000698:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800069a:	9b01      	ldr	r3, [sp, #4]
 800069c:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800069e:	69c3      	ldr	r3, [r0, #28]
 80006a0:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80006a2:	69c3      	ldr	r3, [r0, #28]
 80006a4:	9301      	str	r3, [sp, #4]
}
 80006a6:	b002      	add	sp, #8
 80006a8:	4770      	bx	lr

080006aa <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80006aa:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 80006ac:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80006ae:	bf0c      	ite	eq
 80006b0:	2000      	moveq	r0, #0
 80006b2:	2001      	movne	r0, #1
 80006b4:	4770      	bx	lr

080006b6 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80006b6:	6900      	ldr	r0, [r0, #16]
}
 80006b8:	b280      	uxth	r0, r0
 80006ba:	4770      	bx	lr

080006bc <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80006bc:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 80006be:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80006c0:	bf0c      	ite	eq
 80006c2:	2000      	moveq	r0, #0
 80006c4:	2001      	movne	r0, #1
 80006c6:	4770      	bx	lr

080006c8 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 80006c8:	6940      	ldr	r0, [r0, #20]
}
 80006ca:	b280      	uxth	r0, r0
 80006cc:	4770      	bx	lr

080006ce <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80006ce:	8301      	strh	r1, [r0, #24]
}
 80006d0:	4770      	bx	lr

080006d2 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80006d2:	8341      	strh	r1, [r0, #26]
}
 80006d4:	4770      	bx	lr

080006d6 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80006d6:	b10a      	cbz	r2, 80006dc <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80006d8:	8301      	strh	r1, [r0, #24]
 80006da:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80006dc:	8341      	strh	r1, [r0, #26]
 80006de:	4770      	bx	lr

080006e0 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80006e0:	6141      	str	r1, [r0, #20]
}
 80006e2:	4770      	bx	lr

080006e4 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80006e4:	6943      	ldr	r3, [r0, #20]
 80006e6:	404b      	eors	r3, r1
 80006e8:	6143      	str	r3, [r0, #20]
}
 80006ea:	4770      	bx	lr

080006ec <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80006ec:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80006f0:	08c9      	lsrs	r1, r1, #3
 80006f2:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80006f4:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80006f6:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80006f8:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80006fc:	240f      	movs	r4, #15
 80006fe:	409c      	lsls	r4, r3
 8000700:	ea25 0404 	bic.w	r4, r5, r4
 8000704:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000708:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800070c:	fa12 f303 	lsls.w	r3, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000710:	431c      	orrs	r4, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000712:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
 8000716:	bd30      	pop	{r4, r5, pc}

08000718 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <RCC_DeInit+0x2c>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	f042 0201 	orr.w	r2, r2, #1
 8000720:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000726:	6819      	ldr	r1, [r3, #0]
 8000728:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800072c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000730:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000732:	4905      	ldr	r1, [pc, #20]	; (8000748 <RCC_DeInit+0x30>)
 8000734:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000736:	6819      	ldr	r1, [r3, #0]
 8000738:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800073c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800073e:	60da      	str	r2, [r3, #12]
}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	24003010 	.word	0x24003010

0800074c <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800074c:	4b02      	ldr	r3, [pc, #8]	; (8000758 <RCC_HSEConfig+0xc>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000752:	7018      	strb	r0, [r3, #0]
}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40023802 	.word	0x40023802

0800075c <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <RCC_AdjustHSICalibrationValue+0x10>)
 800075e:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000760:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000764:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8000768:	601a      	str	r2, [r3, #0]
}
 800076a:	4770      	bx	lr
 800076c:	40023800 	.word	0x40023800

08000770 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000770:	4b01      	ldr	r3, [pc, #4]	; (8000778 <RCC_HSICmd+0x8>)
 8000772:	6018      	str	r0, [r3, #0]
}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	42470000 	.word	0x42470000

0800077c <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <RCC_LSEConfig+0x1c>)
 800077e:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000780:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000782:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000784:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000786:	d002      	beq.n	800078e <RCC_LSEConfig+0x12>
 8000788:	2804      	cmp	r0, #4
 800078a:	d104      	bne.n	8000796 <RCC_LSEConfig+0x1a>
 800078c:	e001      	b.n	8000792 <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800078e:	7018      	strb	r0, [r3, #0]
      break;
 8000790:	4770      	bx	lr
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000792:	2205      	movs	r2, #5
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	4770      	bx	lr
 8000798:	40023870 	.word	0x40023870

0800079c <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800079c:	4b01      	ldr	r3, [pc, #4]	; (80007a4 <RCC_LSICmd+0x8>)
 800079e:	6018      	str	r0, [r3, #0]
}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	42470e80 	.word	0x42470e80

080007a8 <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80007a8:	4301      	orrs	r1, r0
 80007aa:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 80007ae:	9900      	ldr	r1, [sp, #0]
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	3b01      	subs	r3, #1
 80007b4:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80007b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007bc:	4b01      	ldr	r3, [pc, #4]	; (80007c4 <RCC_PLLConfig+0x1c>)
 80007be:	6059      	str	r1, [r3, #4]
                 (PLLQ << 24);
}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80007c8:	4b01      	ldr	r3, [pc, #4]	; (80007d0 <RCC_PLLCmd+0x8>)
 80007ca:	6018      	str	r0, [r3, #0]
}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	42470060 	.word	0x42470060

080007d4 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80007d4:	0180      	lsls	r0, r0, #6
 80007d6:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <RCC_PLLI2SConfig+0x10>)
 80007d8:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 80007dc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80007e8:	4b01      	ldr	r3, [pc, #4]	; (80007f0 <RCC_PLLI2SCmd+0x8>)
 80007ea:	6018      	str	r0, [r3, #0]
}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	42470068 	.word	0x42470068

080007f4 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80007f4:	4b01      	ldr	r3, [pc, #4]	; (80007fc <RCC_ClockSecuritySystemCmd+0x8>)
 80007f6:	6018      	str	r0, [r3, #0]
}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	4247004c 	.word	0x4247004c

08000800 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <RCC_MCO1Config+0x10>)
 8000802:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8000804:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000808:	4302      	orrs	r2, r0
 800080a:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800080c:	609a      	str	r2, [r3, #8]
}
 800080e:	4770      	bx	lr
 8000810:	40023800 	.word	0x40023800

08000814 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <RCC_MCO2Config+0x10>)
 8000816:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8000818:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800081c:	4302      	orrs	r2, r0
 800081e:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000820:	609a      	str	r2, [r3, #8]
}
 8000822:	4770      	bx	lr
 8000824:	40023800 	.word	0x40023800

08000828 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <RCC_SYSCLKConfig+0x10>)
 800082a:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800082c:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000830:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000832:	609a      	str	r2, [r3, #8]
}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800083c:	4b02      	ldr	r3, [pc, #8]	; (8000848 <RCC_GetSYSCLKSource+0xc>)
 800083e:	6898      	ldr	r0, [r3, #8]
}
 8000840:	f000 000c 	and.w	r0, r0, #12
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800

0800084c <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <RCC_HCLKConfig+0x10>)
 800084e:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000850:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000854:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000856:	609a      	str	r2, [r3, #8]
}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <RCC_PCLK1Config+0x10>)
 8000862:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000864:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000868:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800086a:	609a      	str	r2, [r3, #8]
}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <RCC_PCLK2Config+0x10>)
 8000876:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000878:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800087c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000880:	609a      	str	r2, [r3, #8]
}
 8000882:	4770      	bx	lr
 8000884:	40023800 	.word	0x40023800

08000888 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <RCC_GetClocksFreq+0x7c>)
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8000890:	2a04      	cmp	r2, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000892:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8000894:	d003      	beq.n	800089e <RCC_GetClocksFreq+0x16>
 8000896:	2a08      	cmp	r2, #8
 8000898:	d003      	beq.n	80008a2 <RCC_GetClocksFreq+0x1a>
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <RCC_GetClocksFreq+0x80>)
 800089c:	e018      	b.n	80008d0 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800089e:	4b1b      	ldr	r3, [pc, #108]	; (800090c <RCC_GetClocksFreq+0x84>)
 80008a0:	e016      	b.n	80008d0 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80008a2:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80008a4:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80008a6:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80008aa:	6859      	ldr	r1, [r3, #4]
 80008ac:	bf14      	ite	ne
 80008ae:	4b17      	ldrne	r3, [pc, #92]	; (800090c <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80008b0:	4b15      	ldreq	r3, [pc, #84]	; (8000908 <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80008b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80008b6:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <RCC_GetClocksFreq+0x7c>)
 80008bc:	6852      	ldr	r2, [r2, #4]
 80008be:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80008c2:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80008c6:	3201      	adds	r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80008c8:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80008ca:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80008cc:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80008d0:	490c      	ldr	r1, [pc, #48]	; (8000904 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80008d2:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80008d4:	688b      	ldr	r3, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 80008d6:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <RCC_GetClocksFreq+0x88>)
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80008d8:	6804      	ldr	r4, [r0, #0]
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 80008da:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 80008de:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80008e0:	fa34 f303 	lsrs.w	r3, r4, r3
 80008e4:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80008e6:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 80008e8:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 80008ec:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80008ee:	fa33 f404 	lsrs.w	r4, r3, r4
 80008f2:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80008f4:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 80008f6:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 80008fa:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80008fc:	40d3      	lsrs	r3, r2
 80008fe:	60c3      	str	r3, [r0, #12]
}
 8000900:	bd10      	pop	{r4, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	00f42400 	.word	0x00f42400
 800090c:	007a1200 	.word	0x007a1200
 8000910:	20000074 	.word	0x20000074

08000914 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000914:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8000918:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <RCC_RTCCLKConfig+0x2c>)
 800091e:	d108      	bne.n	8000932 <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000920:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000922:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8000926:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800092a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800092e:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8000930:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8000932:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000934:	0500      	lsls	r0, r0, #20
 8000936:	ea42 5010 	orr.w	r0, r2, r0, lsr #20
 800093a:	6718      	str	r0, [r3, #112]	; 0x70
}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000944:	4b01      	ldr	r3, [pc, #4]	; (800094c <RCC_RTCCLKCmd+0x8>)
 8000946:	6018      	str	r0, [r3, #0]
}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	42470e3c 	.word	0x42470e3c

08000950 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000950:	4b01      	ldr	r3, [pc, #4]	; (8000958 <RCC_BackupResetCmd+0x8>)
 8000952:	6018      	str	r0, [r3, #0]
}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	42470e40 	.word	0x42470e40

0800095c <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 800095c:	4b01      	ldr	r3, [pc, #4]	; (8000964 <RCC_I2SCLKConfig+0x8>)
 800095e:	6018      	str	r0, [r3, #0]
}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	4247015c 	.word	0x4247015c

08000968 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800096a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800096c:	b109      	cbz	r1, 8000972 <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800096e:	4310      	orrs	r0, r2
 8000970:	e001      	b.n	8000976 <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000972:	ea22 0000 	bic.w	r0, r2, r0
 8000976:	6318      	str	r0, [r3, #48]	; 0x30
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000984:	b109      	cbz	r1, 800098a <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000986:	4310      	orrs	r0, r2
 8000988:	e001      	b.n	800098e <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800098a:	ea22 0000 	bic.w	r0, r2, r0
 800098e:	6358      	str	r0, [r3, #52]	; 0x34
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800099a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800099c:	b109      	cbz	r1, 80009a2 <RCC_AHB3PeriphClockCmd+0xa>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800099e:	4310      	orrs	r0, r2
 80009a0:	e001      	b.n	80009a6 <RCC_AHB3PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 80009a2:	ea22 0000 	bic.w	r0, r2, r0
 80009a6:	6398      	str	r0, [r3, #56]	; 0x38
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80009b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009b4:	b109      	cbz	r1, 80009ba <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80009b6:	4310      	orrs	r0, r2
 80009b8:	e001      	b.n	80009be <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80009ba:	ea22 0000 	bic.w	r0, r2, r0
 80009be:	6418      	str	r0, [r3, #64]	; 0x40
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80009ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009cc:	b109      	cbz	r1, 80009d2 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80009ce:	4310      	orrs	r0, r2
 80009d0:	e001      	b.n	80009d6 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80009d2:	ea22 0000 	bic.w	r0, r2, r0
 80009d6:	6458      	str	r0, [r3, #68]	; 0x44
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80009e2:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009e4:	b109      	cbz	r1, 80009ea <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80009e6:	4310      	orrs	r0, r2
 80009e8:	e001      	b.n	80009ee <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 80009ea:	ea22 0000 	bic.w	r0, r2, r0
 80009ee:	6118      	str	r0, [r3, #16]
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80009fa:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009fc:	b109      	cbz	r1, 8000a02 <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80009fe:	4310      	orrs	r0, r2
 8000a00:	e001      	b.n	8000a06 <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8000a02:	ea22 0000 	bic.w	r0, r2, r0
 8000a06:	6158      	str	r0, [r3, #20]
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <RCC_AHB3PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000a12:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a14:	b109      	cbz	r1, 8000a1a <RCC_AHB3PeriphResetCmd+0xa>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000a16:	4310      	orrs	r0, r2
 8000a18:	e001      	b.n	8000a1e <RCC_AHB3PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8000a1a:	ea22 0000 	bic.w	r0, r2, r0
 8000a1e:	6198      	str	r0, [r3, #24]
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800

08000a28 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000a2a:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a2c:	b109      	cbz	r1, 8000a32 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000a2e:	4310      	orrs	r0, r2
 8000a30:	e001      	b.n	8000a36 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000a32:	ea22 0000 	bic.w	r0, r2, r0
 8000a36:	6218      	str	r0, [r3, #32]
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a44:	b109      	cbz	r1, 8000a4a <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000a46:	4310      	orrs	r0, r2
 8000a48:	e001      	b.n	8000a4e <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000a4a:	ea22 0000 	bic.w	r0, r2, r0
 8000a4e:	6258      	str	r0, [r3, #36]	; 0x24
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <RCC_AHB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000a5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a5c:	b109      	cbz	r1, 8000a62 <RCC_AHB1PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000a5e:	4310      	orrs	r0, r2
 8000a60:	e001      	b.n	8000a66 <RCC_AHB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8000a62:	ea22 0000 	bic.w	r0, r2, r0
 8000a66:	6518      	str	r0, [r3, #80]	; 0x50
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000a72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a74:	b109      	cbz	r1, 8000a7a <RCC_AHB2PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000a76:	4310      	orrs	r0, r2
 8000a78:	e001      	b.n	8000a7e <RCC_AHB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8000a7a:	ea22 0000 	bic.w	r0, r2, r0
 8000a7e:	6558      	str	r0, [r3, #84]	; 0x54
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <RCC_AHB3PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000a8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a8c:	b109      	cbz	r1, 8000a92 <RCC_AHB3PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000a8e:	4310      	orrs	r0, r2
 8000a90:	e001      	b.n	8000a96 <RCC_AHB3PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8000a92:	ea22 0000 	bic.w	r0, r2, r0
 8000a96:	6598      	str	r0, [r3, #88]	; 0x58
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <RCC_APB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000aa2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000aa4:	b109      	cbz	r1, 8000aaa <RCC_APB1PeriphClockLPModeCmd+0xa>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000aa6:	4310      	orrs	r0, r2
 8000aa8:	e001      	b.n	8000aae <RCC_APB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8000aaa:	ea22 0000 	bic.w	r0, r2, r0
 8000aae:	6618      	str	r0, [r3, #96]	; 0x60
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <RCC_APB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000aba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000abc:	b109      	cbz	r1, 8000ac2 <RCC_APB2PeriphClockLPModeCmd+0xa>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000abe:	4310      	orrs	r0, r2
 8000ac0:	e001      	b.n	8000ac6 <RCC_APB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8000ac2:	ea22 0000 	bic.w	r0, r2, r0
 8000ac6:	6658      	str	r0, [r3, #100]	; 0x64
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000ad2:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ad4:	b109      	cbz	r1, 8000ada <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000ad6:	4310      	orrs	r0, r2
 8000ad8:	e001      	b.n	8000ade <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000ada:	ea22 0000 	bic.w	r0, r2, r0
 8000ade:	7018      	strb	r0, [r3, #0]
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	4002380d 	.word	0x4002380d

08000ae8 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000ae8:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <RCC_GetFlagStatus+0x24>)
 8000aee:	d101      	bne.n	8000af4 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8000af0:	6813      	ldr	r3, [r2, #0]
 8000af2:	e003      	b.n	8000afc <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000af4:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8000af6:	bf0c      	ite	eq
 8000af8:	6f13      	ldreq	r3, [r2, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000afa:	6f53      	ldrne	r3, [r2, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000afc:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000b00:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000b04:	f000 0001 	and.w	r0, r0, #1
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000b10:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t startupcounter = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000b16:	2031      	movs	r0, #49	; 0x31
 8000b18:	f7ff ffe6 	bl	8000ae8 <RCC_GetFlagStatus>
    startupcounter++;
 8000b1c:	9b01      	ldr	r3, [sp, #4]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000b22:	9b01      	ldr	r3, [sp, #4]
 8000b24:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000b28:	d001      	beq.n	8000b2e <RCC_WaitForHSEStartUp+0x1e>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d0f3      	beq.n	8000b16 <RCC_WaitForHSEStartUp+0x6>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000b2e:	2031      	movs	r0, #49	; 0x31
 8000b30:	f7ff ffda 	bl	8000ae8 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }
  return (status);
}
 8000b34:	3000      	adds	r0, #0
 8000b36:	bf18      	it	ne
 8000b38:	2001      	movne	r0, #1
 8000b3a:	bd0e      	pop	{r1, r2, r3, pc}

08000b3c <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000b3c:	4b02      	ldr	r3, [pc, #8]	; (8000b48 <RCC_ClearFlag+0xc>)
 8000b3e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000b40:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000b44:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000b46:	4770      	bx	lr
 8000b48:	40023800 	.word	0x40023800

08000b4c <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <RCC_GetITStatus+0x10>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8000b50:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000b52:	bf0c      	ite	eq
 8000b54:	2000      	moveq	r0, #0
 8000b56:	2001      	movne	r0, #1
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000b60:	4b01      	ldr	r3, [pc, #4]	; (8000b68 <RCC_ClearITPendingBit+0x8>)
 8000b62:	7018      	strb	r0, [r3, #0]
}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	4002380e 	.word	0x4002380e

08000b6c <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8000b6c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <USART_DeInit+0x90>)
 8000b70:	4298      	cmp	r0, r3
 8000b72:	d105      	bne.n	8000b80 <USART_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000b74:	2010      	movs	r0, #16
 8000b76:	2101      	movs	r1, #1
 8000b78:	f7ff ff62 	bl	8000a40 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000b7c:	2010      	movs	r0, #16
 8000b7e:	e037      	b.n	8000bf0 <USART_DeInit+0x84>
  }
  else if (USARTx == USART2)
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <USART_DeInit+0x94>)
 8000b82:	4298      	cmp	r0, r3
 8000b84:	d107      	bne.n	8000b96 <USART_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000b86:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	f7ff ff4c 	bl	8000a28 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000b90:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b94:	e009      	b.n	8000baa <USART_DeInit+0x3e>
  }
  else if (USARTx == USART3)
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <USART_DeInit+0x98>)
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	d10b      	bne.n	8000bb4 <USART_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8000b9c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	f7ff ff41 	bl	8000a28 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000ba6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000baa:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8000bac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000bb0:	f7ff bf3a 	b.w	8000a28 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <USART_DeInit+0x9c>)
 8000bb6:	4298      	cmp	r0, r3
 8000bb8:	d107      	bne.n	8000bca <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8000bba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	f7ff ff32 	bl	8000a28 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000bc4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000bc8:	e7ef      	b.n	8000baa <USART_DeInit+0x3e>
  }
  else if (USARTx == UART5)
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <USART_DeInit+0xa0>)
 8000bcc:	4298      	cmp	r0, r3
 8000bce:	d107      	bne.n	8000be0 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8000bd0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	f7ff ff27 	bl	8000a28 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000bda:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000bde:	e7e4      	b.n	8000baa <USART_DeInit+0x3e>
  }     
  else
  {
    if (USARTx == USART6)
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <USART_DeInit+0xa4>)
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d109      	bne.n	8000bfa <USART_DeInit+0x8e>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8000be6:	2020      	movs	r0, #32
 8000be8:	2101      	movs	r1, #1
 8000bea:	f7ff ff29 	bl	8000a40 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000bee:	2020      	movs	r0, #32
 8000bf0:	2100      	movs	r1, #0
    }
  }
}
 8000bf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000bf6:	f7ff bf23 	b.w	8000a40 <RCC_APB2PeriphResetCmd>
 8000bfa:	bd08      	pop	{r3, pc}
 8000bfc:	40011000 	.word	0x40011000
 8000c00:	40004400 	.word	0x40004400
 8000c04:	40004800 	.word	0x40004800
 8000c08:	40004c00 	.word	0x40004c00
 8000c0c:	40005000 	.word	0x40005000
 8000c10:	40011400 	.word	0x40011400

08000c14 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000c14:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000c16:	88ca      	ldrh	r2, [r1, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000c18:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000c1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000c1e:	b530      	push	{r4, r5, lr}
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000c20:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000c22:	460d      	mov	r5, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000c24:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000c26:	8983      	ldrh	r3, [r0, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000c28:	8909      	ldrh	r1, [r1, #8]
 8000c2a:	88aa      	ldrh	r2, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000c2c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000c30:	430a      	orrs	r2, r1
 8000c32:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000c34:	f023 030c 	bic.w	r3, r3, #12
 8000c38:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000c3a:	430a      	orrs	r2, r1

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000c3c:	0c1b      	lsrs	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000c3e:	b292      	uxth	r2, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000c40:	4313      	orrs	r3, r2
 8000c42:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000c44:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000c46:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000c48:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000c4e:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000c50:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000c52:	8283      	strh	r3, [r0, #20]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000c54:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000c56:	4668      	mov	r0, sp
 8000c58:	f7ff fe16 	bl	8000888 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <USART_Init+0xb4>)
 8000c5e:	429c      	cmp	r4, r3
 8000c60:	d003      	beq.n	8000c6a <USART_Init+0x56>
 8000c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c66:	429c      	cmp	r4, r3
 8000c68:	d101      	bne.n	8000c6e <USART_Init+0x5a>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000c6a:	9b03      	ldr	r3, [sp, #12]
 8000c6c:	e000      	b.n	8000c70 <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000c6e:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000c70:	89a2      	ldrh	r2, [r4, #12]
 8000c72:	b212      	sxth	r2, r2
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	f04f 0119 	mov.w	r1, #25
 8000c7a:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000c7c:	fb01 f103 	mul.w	r1, r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000c80:	da01      	bge.n	8000c86 <USART_Init+0x72>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000c82:	0052      	lsls	r2, r2, #1
 8000c84:	e000      	b.n	8000c88 <USART_Init+0x74>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000c86:	0092      	lsls	r2, r2, #2
  }
  tmpreg = (integerdivider / 100) << 4;
 8000c88:	2364      	movs	r3, #100	; 0x64
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000c8a:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8000c8e:	fbb1 f2f3 	udiv	r2, r1, r3
 8000c92:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000c94:	0910      	lsrs	r0, r2, #4
 8000c96:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000c9a:	89a0      	ldrh	r0, [r4, #12]
 8000c9c:	b200      	sxth	r0, r0
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	da06      	bge.n	8000cb0 <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000ca2:	00c9      	lsls	r1, r1, #3
 8000ca4:	3132      	adds	r1, #50	; 0x32
 8000ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	e005      	b.n	8000cbc <USART_Init+0xa8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000cb0:	0109      	lsls	r1, r1, #4
 8000cb2:	3132      	adds	r1, #50	; 0x32
 8000cb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cb8:	f003 030f 	and.w	r3, r3, #15
 8000cbc:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000cbe:	b292      	uxth	r2, r2
 8000cc0:	8122      	strh	r2, [r4, #8]
}
 8000cc2:	b005      	add	sp, #20
 8000cc4:	bd30      	pop	{r4, r5, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40011000 	.word	0x40011000

08000ccc <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000ccc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000cd0:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000cd2:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8000cd8:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8000cda:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000cdc:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8000cde:	8183      	strh	r3, [r0, #12]
}
 8000ce0:	4770      	bx	lr

08000ce2 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000ce2:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000ce4:	8a02      	ldrh	r2, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8000ce6:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000ce8:	884c      	ldrh	r4, [r1, #2]
 8000cea:	4323      	orrs	r3, r4
 8000cec:	888c      	ldrh	r4, [r1, #4]
 8000cee:	88c9      	ldrh	r1, [r1, #6]
 8000cf0:	4323      	orrs	r3, r4
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000cf2:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000cf4:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8000cf6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000cfa:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	8203      	strh	r3, [r0, #16]
}
 8000d00:	bd10      	pop	{r4, pc}

08000d02 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8000d02:	2300      	movs	r3, #0
 8000d04:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8000d06:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8000d08:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8000d0a:	80c3      	strh	r3, [r0, #6]
}
 8000d0c:	4770      	bx	lr

08000d0e <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000d0e:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d10:	b119      	cbz	r1, 8000d1a <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d18:	e003      	b.n	8000d22 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000d1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d1e:	041b      	lsls	r3, r3, #16
 8000d20:	0c1b      	lsrs	r3, r3, #16
 8000d22:	8183      	strh	r3, [r0, #12]
 8000d24:	4770      	bx	lr

08000d26 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8000d26:	8b03      	ldrh	r3, [r0, #24]
 8000d28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000d2c:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8000d2e:	8b03      	ldrh	r3, [r0, #24]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	430b      	orrs	r3, r1
 8000d34:	8303      	strh	r3, [r0, #24]
}
 8000d36:	4770      	bx	lr

08000d38 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000d38:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d3a:	b129      	cbz	r1, 8000d48 <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	e001      	b.n	8000d4c <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8000d48:	045b      	lsls	r3, r3, #17
 8000d4a:	0c5b      	lsrs	r3, r3, #17
 8000d4c:	8183      	strh	r3, [r0, #12]
 8000d4e:	4770      	bx	lr

08000d50 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8000d50:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d52:	b119      	cbz	r1, 8000d5c <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d5a:	e003      	b.n	8000d64 <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8000d5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d60:	041b      	lsls	r3, r3, #16
 8000d62:	0c1b      	lsrs	r3, r3, #16
 8000d64:	8283      	strh	r3, [r0, #20]
 8000d66:	4770      	bx	lr

08000d68 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000d68:	05c9      	lsls	r1, r1, #23
 8000d6a:	0dc9      	lsrs	r1, r1, #23
 8000d6c:	8081      	strh	r1, [r0, #4]
}
 8000d6e:	4770      	bx	lr

08000d70 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000d70:	8880      	ldrh	r0, [r0, #4]
 8000d72:	05c0      	lsls	r0, r0, #23
}
 8000d74:	0dc0      	lsrs	r0, r0, #23
 8000d76:	4770      	bx	lr

08000d78 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8000d78:	8a03      	ldrh	r3, [r0, #16]
 8000d7a:	f023 030f 	bic.w	r3, r3, #15
 8000d7e:	041b      	lsls	r3, r3, #16
 8000d80:	0c1b      	lsrs	r3, r3, #16
 8000d82:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8000d84:	8a03      	ldrh	r3, [r0, #16]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	430b      	orrs	r3, r1
 8000d8a:	8203      	strh	r3, [r0, #16]
}
 8000d8c:	4770      	bx	lr

08000d8e <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8000d8e:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8000d90:	b119      	cbz	r1, 8000d9a <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	e003      	b.n	8000da2 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8000d9a:	f023 0302 	bic.w	r3, r3, #2
 8000d9e:	041b      	lsls	r3, r3, #16
 8000da0:	0c1b      	lsrs	r3, r3, #16
 8000da2:	8183      	strh	r3, [r0, #12]
 8000da4:	4770      	bx	lr

08000da6 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8000da6:	8983      	ldrh	r3, [r0, #12]
 8000da8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dac:	041b      	lsls	r3, r3, #16
 8000dae:	0c1b      	lsrs	r3, r3, #16
 8000db0:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8000db2:	8983      	ldrh	r3, [r0, #12]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	430b      	orrs	r3, r1
 8000db8:	8183      	strh	r3, [r0, #12]
}
 8000dba:	4770      	bx	lr

08000dbc <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8000dbc:	8a03      	ldrh	r3, [r0, #16]
 8000dbe:	f023 0320 	bic.w	r3, r3, #32
 8000dc2:	041b      	lsls	r3, r3, #16
 8000dc4:	0c1b      	lsrs	r3, r3, #16
 8000dc6:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8000dc8:	8a03      	ldrh	r3, [r0, #16]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	8203      	strh	r3, [r0, #16]
}
 8000dd0:	4770      	bx	lr

08000dd2 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8000dd2:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000dd4:	b119      	cbz	r1, 8000dde <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	e003      	b.n	8000de6 <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8000dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000de2:	041b      	lsls	r3, r3, #16
 8000de4:	0c1b      	lsrs	r3, r3, #16
 8000de6:	8203      	strh	r3, [r0, #16]
 8000de8:	4770      	bx	lr

08000dea <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8000dea:	8983      	ldrh	r3, [r0, #12]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	8183      	strh	r3, [r0, #12]
}
 8000df4:	4770      	bx	lr

08000df6 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8000df6:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000df8:	b119      	cbz	r1, 8000e02 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	f043 0308 	orr.w	r3, r3, #8
 8000e00:	e003      	b.n	8000e0a <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8000e02:	f023 0308 	bic.w	r3, r3, #8
 8000e06:	041b      	lsls	r3, r3, #16
 8000e08:	0c1b      	lsrs	r3, r3, #16
 8000e0a:	8283      	strh	r3, [r0, #20]
 8000e0c:	4770      	bx	lr

08000e0e <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8000e0e:	8b03      	ldrh	r3, [r0, #24]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8000e14:	8b03      	ldrh	r3, [r0, #24]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000e1c:	8303      	strh	r3, [r0, #24]
}
 8000e1e:	4770      	bx	lr

08000e20 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8000e20:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e22:	b119      	cbz	r1, 8000e2c <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	f043 0320 	orr.w	r3, r3, #32
 8000e2a:	e003      	b.n	8000e34 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8000e2c:	f023 0320 	bic.w	r3, r3, #32
 8000e30:	041b      	lsls	r3, r3, #16
 8000e32:	0c1b      	lsrs	r3, r3, #16
 8000e34:	8283      	strh	r3, [r0, #20]
 8000e36:	4770      	bx	lr

08000e38 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8000e38:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e3a:	b119      	cbz	r1, 8000e44 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	f043 0310 	orr.w	r3, r3, #16
 8000e42:	e003      	b.n	8000e4c <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8000e44:	f023 0310 	bic.w	r3, r3, #16
 8000e48:	041b      	lsls	r3, r3, #16
 8000e4a:	0c1b      	lsrs	r3, r3, #16
 8000e4c:	8283      	strh	r3, [r0, #20]
 8000e4e:	4770      	bx	lr

08000e50 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8000e50:	8a83      	ldrh	r3, [r0, #20]
 8000e52:	f023 0304 	bic.w	r3, r3, #4
 8000e56:	041b      	lsls	r3, r3, #16
 8000e58:	0c1b      	lsrs	r3, r3, #16
 8000e5a:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8000e5c:	8a83      	ldrh	r3, [r0, #20]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	430b      	orrs	r3, r1
 8000e62:	8283      	strh	r3, [r0, #20]
}
 8000e64:	4770      	bx	lr

08000e66 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8000e66:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8000e68:	b119      	cbz	r1, 8000e72 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	e003      	b.n	8000e7a <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8000e72:	f023 0302 	bic.w	r3, r3, #2
 8000e76:	041b      	lsls	r3, r3, #16
 8000e78:	0c1b      	lsrs	r3, r3, #16
 8000e7a:	8283      	strh	r3, [r0, #20]
 8000e7c:	4770      	bx	lr

08000e7e <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000e7e:	8a83      	ldrh	r3, [r0, #20]
 8000e80:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8000e82:	b10a      	cbz	r2, 8000e88 <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000e84:	4319      	orrs	r1, r3
 8000e86:	e001      	b.n	8000e8c <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8000e88:	ea23 0101 	bic.w	r1, r3, r1
 8000e8c:	8281      	strh	r1, [r0, #20]
 8000e8e:	4770      	bx	lr

08000e90 <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000e90:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000e94:	b510      	push	{r4, lr}

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000e96:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 8000e9a:	2401      	movs	r4, #1
 8000e9c:	fa14 f101 	lsls.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000ea0:	42a3      	cmp	r3, r4
 8000ea2:	d101      	bne.n	8000ea8 <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8000ea4:	300c      	adds	r0, #12
 8000ea6:	e004      	b.n	8000eb2 <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d101      	bne.n	8000eb0 <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8000eac:	3010      	adds	r0, #16
 8000eae:	e000      	b.n	8000eb2 <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000eb0:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000eb2:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8000eb4:	b10a      	cbz	r2, 8000eba <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000eb6:	4319      	orrs	r1, r3
 8000eb8:	e001      	b.n	8000ebe <USART_ITConfig+0x2e>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000eba:	ea23 0101 	bic.w	r1, r3, r1
 8000ebe:	6001      	str	r1, [r0, #0]
 8000ec0:	bd10      	pop	{r4, pc}

08000ec2 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000ec2:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 8000ec4:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8000ec6:	bf0c      	ite	eq
 8000ec8:	2000      	moveq	r0, #0
 8000eca:	2001      	movne	r0, #1
 8000ecc:	4770      	bx	lr

08000ece <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8000ece:	43c9      	mvns	r1, r1
 8000ed0:	b289      	uxth	r1, r1
 8000ed2:	8001      	strh	r1, [r0, #0]
}
 8000ed4:	4770      	bx	lr

08000ed6 <USART_GetITStatus>:
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8000ed6:	2201      	movs	r2, #1
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000ed8:	b510      	push	{r4, lr}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000eda:	f001 031f 	and.w	r3, r1, #31
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000ede:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8000ee2:	409a      	lsls	r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000ee4:	2c01      	cmp	r4, #1
 8000ee6:	d101      	bne.n	8000eec <USART_GetITStatus+0x16>
  {
    itmask &= USARTx->CR1;
 8000ee8:	8983      	ldrh	r3, [r0, #12]
 8000eea:	e003      	b.n	8000ef4 <USART_GetITStatus+0x1e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000eec:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8000eee:	bf0c      	ite	eq
 8000ef0:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000ef2:	8a83      	ldrhne	r3, [r0, #20]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8000ef8:	8802      	ldrh	r2, [r0, #0]
 8000efa:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000efc:	b143      	cbz	r3, 8000f10 <USART_GetITStatus+0x3a>
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 8000efe:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8000f00:	2301      	movs	r3, #1
 8000f02:	fa13 f101 	lsls.w	r1, r3, r1
  *            @arg USART_IT_NE:   Noise Error interrupt
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
 8000f06:	4211      	tst	r1, r2
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 8000f08:	bf0c      	ite	eq
 8000f0a:	2000      	moveq	r0, #0
 8000f0c:	2001      	movne	r0, #1
 8000f0e:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8000f10:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8000f12:	bd10      	pop	{r4, pc}

08000f14 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000f14:	0a09      	lsrs	r1, r1, #8
 8000f16:	2301      	movs	r3, #1
 8000f18:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	8003      	strh	r3, [r0, #0]
}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <_delay_ms>:
  volatile uint32 i;				\
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32 t) {
 8000f24:	b082      	sub	sp, #8
	while (t-- > 0) {
		__delay();
 8000f26:	2200      	movs	r2, #0
 8000f28:	f242 730f 	movw	r3, #9999	; 0x270f
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32 t) {
	while (t-- > 0) {
 8000f2c:	e009      	b.n	8000f42 <_delay_ms+0x1e>
		__delay();
 8000f2e:	9201      	str	r2, [sp, #4]
 8000f30:	e003      	b.n	8000f3a <_delay_ms+0x16>
 8000f32:	bf00      	nop
 8000f34:	9901      	ldr	r1, [sp, #4]
 8000f36:	3101      	adds	r1, #1
 8000f38:	9101      	str	r1, [sp, #4]
 8000f3a:	9901      	ldr	r1, [sp, #4]
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d9f8      	bls.n	8000f32 <_delay_ms+0xe>
 8000f40:	3801      	subs	r0, #1
  for (i = 0; i < 10000; ++i)				\
    __asm__ __volatile__ ("nop\n\t":::"memory");	\
} while (0)

inline void _delay_ms(uint32 t) {
	while (t-- > 0) {
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d1f3      	bne.n	8000f2e <_delay_ms+0xa>
		__delay();
	}
}
 8000f46:	b002      	add	sp, #8
 8000f48:	4770      	bx	lr
 8000f4a:	1790      	.short	0x1790
 8000f4c:	00000800 	.word	0x00000800
 8000f50:	00982000 	.word	0x00982000
 8000f54:	00982000 	.word	0x00982000
 8000f58:	009c2000 	.word	0x009c2000
 8000f5c:	2000      	.short	0x2000

08000f5e <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000f5e:	4770      	bx	lr

08000f60 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000f60:	e7fe      	b.n	8000f60 <HardFault_Handler>

08000f62 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000f62:	e7fe      	b.n	8000f62 <MemManage_Handler>

08000f64 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000f64:	e7fe      	b.n	8000f64 <BusFault_Handler>

08000f66 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000f66:	e7fe      	b.n	8000f66 <UsageFault_Handler>

08000f68 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8000f68:	4770      	bx	lr

08000f6a <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8000f6a:	4770      	bx	lr

08000f6c <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8000f6c:	4770      	bx	lr
	...

08000f70 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f70:	4b33      	ldr	r3, [pc, #204]	; (8001040 <SystemInit+0xd0>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	f042 0201 	orr.w	r2, r2, #1
 8000f78:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f7e:	6819      	ldr	r1, [r3, #0]
 8000f80:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000f84:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000f88:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000f8a:	492e      	ldr	r1, [pc, #184]	; (8001044 <SystemInit+0xd4>)
 8000f8c:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f8e:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f90:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f92:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000f96:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f98:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000f9a:	9200      	str	r2, [sp, #0]
 8000f9c:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000fa4:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000fac:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 8000fae:	9a00      	ldr	r2, [sp, #0]
 8000fb0:	3201      	adds	r2, #1
 8000fb2:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000fb4:	9a01      	ldr	r2, [sp, #4]
 8000fb6:	b91a      	cbnz	r2, 8000fc0 <SystemInit+0x50>
 8000fb8:	9a00      	ldr	r2, [sp, #0]
 8000fba:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000fbe:	d1f2      	bne.n	8000fa6 <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <SystemInit+0xd0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000fc8:	bf18      	it	ne
 8000fca:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000fcc:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000fce:	9b01      	ldr	r3, [sp, #4]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d12e      	bne.n	8001032 <SystemInit+0xc2>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <SystemInit+0xd0>)
 8000fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fdc:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000fde:	4a1a      	ldr	r2, [pc, #104]	; (8001048 <SystemInit+0xd8>)
 8000fe0:	6811      	ldr	r1, [r2, #0]
 8000fe2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000fe6:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ff2:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000ffa:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <SystemInit+0xdc>)
 8000ffe:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001006:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001008:	6819      	ldr	r1, [r3, #0]
 800100a:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <SystemInit+0xd0>)
 800100c:	0189      	lsls	r1, r1, #6
 800100e:	d5fb      	bpl.n	8001008 <SystemInit+0x98>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <SystemInit+0xe0>)
 8001012:	f240 6105 	movw	r1, #1541	; 0x605
 8001016:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001018:	6893      	ldr	r3, [r2, #8]
 800101a:	f023 0303 	bic.w	r3, r3, #3
 800101e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001020:	6893      	ldr	r3, [r2, #8]
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001028:	6893      	ldr	r3, [r2, #8]
 800102a:	f003 030c 	and.w	r3, r3, #12
 800102e:	2b08      	cmp	r3, #8
 8001030:	d1fa      	bne.n	8001028 <SystemInit+0xb8>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <SystemInit+0xe4>)
 8001034:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001038:	609a      	str	r2, [r3, #8]
#endif
}
 800103a:	b002      	add	sp, #8
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	24003010 	.word	0x24003010
 8001048:	40007000 	.word	0x40007000
 800104c:	07405419 	.word	0x07405419
 8001050:	40023c00 	.word	0x40023c00
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <SystemCoreClockUpdate+0x64>)
 800105a:	4a19      	ldr	r2, [pc, #100]	; (80010c0 <SystemCoreClockUpdate+0x68>)
 800105c:	6899      	ldr	r1, [r3, #8]
 800105e:	f001 010c 	and.w	r1, r1, #12

  switch (tmp)
 8001062:	2904      	cmp	r1, #4
 8001064:	d003      	beq.n	800106e <SystemCoreClockUpdate+0x16>
 8001066:	2908      	cmp	r1, #8
 8001068:	d003      	beq.n	8001072 <SystemCoreClockUpdate+0x1a>
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <SystemCoreClockUpdate+0x6c>)
 800106c:	e019      	b.n	80010a2 <SystemCoreClockUpdate+0x4a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <SystemCoreClockUpdate+0x70>)
 8001070:	e017      	b.n	80010a2 <SystemCoreClockUpdate+0x4a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001072:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001074:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8001076:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800107a:	6859      	ldr	r1, [r3, #4]
 800107c:	bf14      	ite	ne
 800107e:	4b12      	ldrne	r3, [pc, #72]	; (80010c8 <SystemCoreClockUpdate+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001080:	4b10      	ldreq	r3, [pc, #64]	; (80010c4 <SystemCoreClockUpdate+0x6c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001082:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001086:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800108a:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <SystemCoreClockUpdate+0x64>)
 800108c:	6852      	ldr	r2, [r2, #4]
 800108e:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001092:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001096:	3201      	adds	r2, #1
 8001098:	0052      	lsls	r2, r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800109a:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 800109c:	fbb3 f3f2 	udiv	r3, r3, r2
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <SystemCoreClockUpdate+0x68>)
 80010a2:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SystemCoreClockUpdate+0x64>)
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SystemCoreClockUpdate+0x68>)
 80010aa:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80010ae:	189a      	adds	r2, r3, r2
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80010b0:	6819      	ldr	r1, [r3, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80010b2:	7912      	ldrb	r2, [r2, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80010b4:	fa31 f202 	lsrs.w	r2, r1, r2
 80010b8:	601a      	str	r2, [r3, #0]
}
 80010ba:	4770      	bx	lr
 80010bc:	40023800 	.word	0x40023800
 80010c0:	20000084 	.word	0x20000084
 80010c4:	00f42400 	.word	0x00f42400
 80010c8:	007a1200 	.word	0x007a1200

080010cc <__aeabi_frsub>:
 80010cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80010d0:	e002      	b.n	80010d8 <__addsf3>
 80010d2:	bf00      	nop

080010d4 <__aeabi_fsub>:
 80010d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080010d8 <__addsf3>:
 80010d8:	0042      	lsls	r2, r0, #1
 80010da:	bf1f      	itttt	ne
 80010dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80010e0:	ea92 0f03 	teqne	r2, r3
 80010e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80010e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010ec:	d06a      	beq.n	80011c4 <__addsf3+0xec>
 80010ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80010f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80010f6:	bfc1      	itttt	gt
 80010f8:	18d2      	addgt	r2, r2, r3
 80010fa:	4041      	eorgt	r1, r0
 80010fc:	4048      	eorgt	r0, r1
 80010fe:	4041      	eorgt	r1, r0
 8001100:	bfb8      	it	lt
 8001102:	425b      	neglt	r3, r3
 8001104:	2b19      	cmp	r3, #25
 8001106:	bf88      	it	hi
 8001108:	4770      	bxhi	lr
 800110a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800110e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001112:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001116:	bf18      	it	ne
 8001118:	4240      	negne	r0, r0
 800111a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800111e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001122:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001126:	bf18      	it	ne
 8001128:	4249      	negne	r1, r1
 800112a:	ea92 0f03 	teq	r2, r3
 800112e:	d03f      	beq.n	80011b0 <__addsf3+0xd8>
 8001130:	f1a2 0201 	sub.w	r2, r2, #1
 8001134:	fa41 fc03 	asr.w	ip, r1, r3
 8001138:	eb10 000c 	adds.w	r0, r0, ip
 800113c:	f1c3 0320 	rsb	r3, r3, #32
 8001140:	fa01 f103 	lsl.w	r1, r1, r3
 8001144:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8001148:	d502      	bpl.n	8001150 <__addsf3+0x78>
 800114a:	4249      	negs	r1, r1
 800114c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8001150:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8001154:	d313      	bcc.n	800117e <__addsf3+0xa6>
 8001156:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800115a:	d306      	bcc.n	800116a <__addsf3+0x92>
 800115c:	0840      	lsrs	r0, r0, #1
 800115e:	ea4f 0131 	mov.w	r1, r1, rrx
 8001162:	f102 0201 	add.w	r2, r2, #1
 8001166:	2afe      	cmp	r2, #254	; 0xfe
 8001168:	d251      	bcs.n	800120e <__addsf3+0x136>
 800116a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800116e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001172:	bf08      	it	eq
 8001174:	f020 0001 	biceq.w	r0, r0, #1
 8001178:	ea40 0003 	orr.w	r0, r0, r3
 800117c:	4770      	bx	lr
 800117e:	0049      	lsls	r1, r1, #1
 8001180:	eb40 0000 	adc.w	r0, r0, r0
 8001184:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8001188:	f1a2 0201 	sub.w	r2, r2, #1
 800118c:	d1ed      	bne.n	800116a <__addsf3+0x92>
 800118e:	fab0 fc80 	clz	ip, r0
 8001192:	f1ac 0c08 	sub.w	ip, ip, #8
 8001196:	ebb2 020c 	subs.w	r2, r2, ip
 800119a:	fa00 f00c 	lsl.w	r0, r0, ip
 800119e:	bfaa      	itet	ge
 80011a0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80011a4:	4252      	neglt	r2, r2
 80011a6:	4318      	orrge	r0, r3
 80011a8:	bfbc      	itt	lt
 80011aa:	40d0      	lsrlt	r0, r2
 80011ac:	4318      	orrlt	r0, r3
 80011ae:	4770      	bx	lr
 80011b0:	f092 0f00 	teq	r2, #0
 80011b4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80011b8:	bf06      	itte	eq
 80011ba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80011be:	3201      	addeq	r2, #1
 80011c0:	3b01      	subne	r3, #1
 80011c2:	e7b5      	b.n	8001130 <__addsf3+0x58>
 80011c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011cc:	bf18      	it	ne
 80011ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80011d2:	d021      	beq.n	8001218 <__addsf3+0x140>
 80011d4:	ea92 0f03 	teq	r2, r3
 80011d8:	d004      	beq.n	80011e4 <__addsf3+0x10c>
 80011da:	f092 0f00 	teq	r2, #0
 80011de:	bf08      	it	eq
 80011e0:	4608      	moveq	r0, r1
 80011e2:	4770      	bx	lr
 80011e4:	ea90 0f01 	teq	r0, r1
 80011e8:	bf1c      	itt	ne
 80011ea:	2000      	movne	r0, #0
 80011ec:	4770      	bxne	lr
 80011ee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80011f2:	d104      	bne.n	80011fe <__addsf3+0x126>
 80011f4:	0040      	lsls	r0, r0, #1
 80011f6:	bf28      	it	cs
 80011f8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80011fc:	4770      	bx	lr
 80011fe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8001202:	bf3c      	itt	cc
 8001204:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8001208:	4770      	bxcc	lr
 800120a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800120e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8001212:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001216:	4770      	bx	lr
 8001218:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800121c:	bf16      	itet	ne
 800121e:	4608      	movne	r0, r1
 8001220:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8001224:	4601      	movne	r1, r0
 8001226:	0242      	lsls	r2, r0, #9
 8001228:	bf06      	itte	eq
 800122a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800122e:	ea90 0f01 	teqeq	r0, r1
 8001232:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8001236:	4770      	bx	lr

08001238 <__aeabi_ui2f>:
 8001238:	f04f 0300 	mov.w	r3, #0
 800123c:	e004      	b.n	8001248 <__aeabi_i2f+0x8>
 800123e:	bf00      	nop

08001240 <__aeabi_i2f>:
 8001240:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8001244:	bf48      	it	mi
 8001246:	4240      	negmi	r0, r0
 8001248:	ea5f 0c00 	movs.w	ip, r0
 800124c:	bf08      	it	eq
 800124e:	4770      	bxeq	lr
 8001250:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8001254:	4601      	mov	r1, r0
 8001256:	f04f 0000 	mov.w	r0, #0
 800125a:	e01c      	b.n	8001296 <__aeabi_l2f+0x2a>

0800125c <__aeabi_ul2f>:
 800125c:	ea50 0201 	orrs.w	r2, r0, r1
 8001260:	bf08      	it	eq
 8001262:	4770      	bxeq	lr
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	e00a      	b.n	8001280 <__aeabi_l2f+0x14>
 800126a:	bf00      	nop

0800126c <__aeabi_l2f>:
 800126c:	ea50 0201 	orrs.w	r2, r0, r1
 8001270:	bf08      	it	eq
 8001272:	4770      	bxeq	lr
 8001274:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8001278:	d502      	bpl.n	8001280 <__aeabi_l2f+0x14>
 800127a:	4240      	negs	r0, r0
 800127c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001280:	ea5f 0c01 	movs.w	ip, r1
 8001284:	bf02      	ittt	eq
 8001286:	4684      	moveq	ip, r0
 8001288:	4601      	moveq	r1, r0
 800128a:	2000      	moveq	r0, #0
 800128c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8001290:	bf08      	it	eq
 8001292:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8001296:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800129a:	fabc f28c 	clz	r2, ip
 800129e:	3a08      	subs	r2, #8
 80012a0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80012a4:	db10      	blt.n	80012c8 <__aeabi_l2f+0x5c>
 80012a6:	fa01 fc02 	lsl.w	ip, r1, r2
 80012aa:	4463      	add	r3, ip
 80012ac:	fa00 fc02 	lsl.w	ip, r0, r2
 80012b0:	f1c2 0220 	rsb	r2, r2, #32
 80012b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80012b8:	fa20 f202 	lsr.w	r2, r0, r2
 80012bc:	eb43 0002 	adc.w	r0, r3, r2
 80012c0:	bf08      	it	eq
 80012c2:	f020 0001 	biceq.w	r0, r0, #1
 80012c6:	4770      	bx	lr
 80012c8:	f102 0220 	add.w	r2, r2, #32
 80012cc:	fa01 fc02 	lsl.w	ip, r1, r2
 80012d0:	f1c2 0220 	rsb	r2, r2, #32
 80012d4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80012d8:	fa21 f202 	lsr.w	r2, r1, r2
 80012dc:	eb43 0002 	adc.w	r0, r3, r2
 80012e0:	bf08      	it	eq
 80012e2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80012e6:	4770      	bx	lr

080012e8 <__aeabi_fmul>:
 80012e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80012ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80012f0:	bf1e      	ittt	ne
 80012f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80012f6:	ea92 0f0c 	teqne	r2, ip
 80012fa:	ea93 0f0c 	teqne	r3, ip
 80012fe:	d06f      	beq.n	80013e0 <__aeabi_fmul+0xf8>
 8001300:	441a      	add	r2, r3
 8001302:	ea80 0c01 	eor.w	ip, r0, r1
 8001306:	0240      	lsls	r0, r0, #9
 8001308:	bf18      	it	ne
 800130a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800130e:	d01e      	beq.n	800134e <__aeabi_fmul+0x66>
 8001310:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001314:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8001318:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800131c:	fba0 3101 	umull	r3, r1, r0, r1
 8001320:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001324:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001328:	bf3e      	ittt	cc
 800132a:	0049      	lslcc	r1, r1, #1
 800132c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8001330:	005b      	lslcc	r3, r3, #1
 8001332:	ea40 0001 	orr.w	r0, r0, r1
 8001336:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800133a:	2afd      	cmp	r2, #253	; 0xfd
 800133c:	d81d      	bhi.n	800137a <__aeabi_fmul+0x92>
 800133e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001342:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001346:	bf08      	it	eq
 8001348:	f020 0001 	biceq.w	r0, r0, #1
 800134c:	4770      	bx	lr
 800134e:	f090 0f00 	teq	r0, #0
 8001352:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001356:	bf08      	it	eq
 8001358:	0249      	lsleq	r1, r1, #9
 800135a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800135e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8001362:	3a7f      	subs	r2, #127	; 0x7f
 8001364:	bfc2      	ittt	gt
 8001366:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800136a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800136e:	4770      	bxgt	lr
 8001370:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	3a01      	subs	r2, #1
 800137a:	dc5d      	bgt.n	8001438 <__aeabi_fmul+0x150>
 800137c:	f112 0f19 	cmn.w	r2, #25
 8001380:	bfdc      	itt	le
 8001382:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8001386:	4770      	bxle	lr
 8001388:	f1c2 0200 	rsb	r2, r2, #0
 800138c:	0041      	lsls	r1, r0, #1
 800138e:	fa21 f102 	lsr.w	r1, r1, r2
 8001392:	f1c2 0220 	rsb	r2, r2, #32
 8001396:	fa00 fc02 	lsl.w	ip, r0, r2
 800139a:	ea5f 0031 	movs.w	r0, r1, rrx
 800139e:	f140 0000 	adc.w	r0, r0, #0
 80013a2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80013a6:	bf08      	it	eq
 80013a8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80013ac:	4770      	bx	lr
 80013ae:	f092 0f00 	teq	r2, #0
 80013b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80013b6:	bf02      	ittt	eq
 80013b8:	0040      	lsleq	r0, r0, #1
 80013ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80013be:	3a01      	subeq	r2, #1
 80013c0:	d0f9      	beq.n	80013b6 <__aeabi_fmul+0xce>
 80013c2:	ea40 000c 	orr.w	r0, r0, ip
 80013c6:	f093 0f00 	teq	r3, #0
 80013ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80013ce:	bf02      	ittt	eq
 80013d0:	0049      	lsleq	r1, r1, #1
 80013d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80013d6:	3b01      	subeq	r3, #1
 80013d8:	d0f9      	beq.n	80013ce <__aeabi_fmul+0xe6>
 80013da:	ea41 010c 	orr.w	r1, r1, ip
 80013de:	e78f      	b.n	8001300 <__aeabi_fmul+0x18>
 80013e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80013e4:	ea92 0f0c 	teq	r2, ip
 80013e8:	bf18      	it	ne
 80013ea:	ea93 0f0c 	teqne	r3, ip
 80013ee:	d00a      	beq.n	8001406 <__aeabi_fmul+0x11e>
 80013f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80013f4:	bf18      	it	ne
 80013f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80013fa:	d1d8      	bne.n	80013ae <__aeabi_fmul+0xc6>
 80013fc:	ea80 0001 	eor.w	r0, r0, r1
 8001400:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001404:	4770      	bx	lr
 8001406:	f090 0f00 	teq	r0, #0
 800140a:	bf17      	itett	ne
 800140c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8001410:	4608      	moveq	r0, r1
 8001412:	f091 0f00 	teqne	r1, #0
 8001416:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800141a:	d014      	beq.n	8001446 <__aeabi_fmul+0x15e>
 800141c:	ea92 0f0c 	teq	r2, ip
 8001420:	d101      	bne.n	8001426 <__aeabi_fmul+0x13e>
 8001422:	0242      	lsls	r2, r0, #9
 8001424:	d10f      	bne.n	8001446 <__aeabi_fmul+0x15e>
 8001426:	ea93 0f0c 	teq	r3, ip
 800142a:	d103      	bne.n	8001434 <__aeabi_fmul+0x14c>
 800142c:	024b      	lsls	r3, r1, #9
 800142e:	bf18      	it	ne
 8001430:	4608      	movne	r0, r1
 8001432:	d108      	bne.n	8001446 <__aeabi_fmul+0x15e>
 8001434:	ea80 0001 	eor.w	r0, r0, r1
 8001438:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800143c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001440:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001444:	4770      	bx	lr
 8001446:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800144a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800144e:	4770      	bx	lr

08001450 <__aeabi_fdiv>:
 8001450:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001454:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001458:	bf1e      	ittt	ne
 800145a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800145e:	ea92 0f0c 	teqne	r2, ip
 8001462:	ea93 0f0c 	teqne	r3, ip
 8001466:	d069      	beq.n	800153c <__aeabi_fdiv+0xec>
 8001468:	eba2 0203 	sub.w	r2, r2, r3
 800146c:	ea80 0c01 	eor.w	ip, r0, r1
 8001470:	0249      	lsls	r1, r1, #9
 8001472:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001476:	d037      	beq.n	80014e8 <__aeabi_fdiv+0x98>
 8001478:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800147c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001480:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001484:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001488:	428b      	cmp	r3, r1
 800148a:	bf38      	it	cc
 800148c:	005b      	lslcc	r3, r3, #1
 800148e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001492:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001496:	428b      	cmp	r3, r1
 8001498:	bf24      	itt	cs
 800149a:	1a5b      	subcs	r3, r3, r1
 800149c:	ea40 000c 	orrcs.w	r0, r0, ip
 80014a0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80014a4:	bf24      	itt	cs
 80014a6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80014aa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80014ae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80014b2:	bf24      	itt	cs
 80014b4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80014b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80014bc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80014c0:	bf24      	itt	cs
 80014c2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80014c6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	bf18      	it	ne
 80014ce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80014d2:	d1e0      	bne.n	8001496 <__aeabi_fdiv+0x46>
 80014d4:	2afd      	cmp	r2, #253	; 0xfd
 80014d6:	f63f af50 	bhi.w	800137a <__aeabi_fmul+0x92>
 80014da:	428b      	cmp	r3, r1
 80014dc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80014e0:	bf08      	it	eq
 80014e2:	f020 0001 	biceq.w	r0, r0, #1
 80014e6:	4770      	bx	lr
 80014e8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80014ec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80014f0:	327f      	adds	r2, #127	; 0x7f
 80014f2:	bfc2      	ittt	gt
 80014f4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80014f8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80014fc:	4770      	bxgt	lr
 80014fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	3a01      	subs	r2, #1
 8001508:	e737      	b.n	800137a <__aeabi_fmul+0x92>
 800150a:	f092 0f00 	teq	r2, #0
 800150e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001512:	bf02      	ittt	eq
 8001514:	0040      	lsleq	r0, r0, #1
 8001516:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800151a:	3a01      	subeq	r2, #1
 800151c:	d0f9      	beq.n	8001512 <__aeabi_fdiv+0xc2>
 800151e:	ea40 000c 	orr.w	r0, r0, ip
 8001522:	f093 0f00 	teq	r3, #0
 8001526:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800152a:	bf02      	ittt	eq
 800152c:	0049      	lsleq	r1, r1, #1
 800152e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001532:	3b01      	subeq	r3, #1
 8001534:	d0f9      	beq.n	800152a <__aeabi_fdiv+0xda>
 8001536:	ea41 010c 	orr.w	r1, r1, ip
 800153a:	e795      	b.n	8001468 <__aeabi_fdiv+0x18>
 800153c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001540:	ea92 0f0c 	teq	r2, ip
 8001544:	d108      	bne.n	8001558 <__aeabi_fdiv+0x108>
 8001546:	0242      	lsls	r2, r0, #9
 8001548:	f47f af7d 	bne.w	8001446 <__aeabi_fmul+0x15e>
 800154c:	ea93 0f0c 	teq	r3, ip
 8001550:	f47f af70 	bne.w	8001434 <__aeabi_fmul+0x14c>
 8001554:	4608      	mov	r0, r1
 8001556:	e776      	b.n	8001446 <__aeabi_fmul+0x15e>
 8001558:	ea93 0f0c 	teq	r3, ip
 800155c:	d104      	bne.n	8001568 <__aeabi_fdiv+0x118>
 800155e:	024b      	lsls	r3, r1, #9
 8001560:	f43f af4c 	beq.w	80013fc <__aeabi_fmul+0x114>
 8001564:	4608      	mov	r0, r1
 8001566:	e76e      	b.n	8001446 <__aeabi_fmul+0x15e>
 8001568:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800156c:	bf18      	it	ne
 800156e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001572:	d1ca      	bne.n	800150a <__aeabi_fdiv+0xba>
 8001574:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001578:	f47f af5c 	bne.w	8001434 <__aeabi_fmul+0x14c>
 800157c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001580:	f47f af3c 	bne.w	80013fc <__aeabi_fmul+0x114>
 8001584:	e75f      	b.n	8001446 <__aeabi_fmul+0x15e>
 8001586:	bf00      	nop

08001588 <__gesf2>:
 8001588:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800158c:	e006      	b.n	800159c <__cmpsf2+0x4>
 800158e:	bf00      	nop

08001590 <__lesf2>:
 8001590:	f04f 0c01 	mov.w	ip, #1
 8001594:	e002      	b.n	800159c <__cmpsf2+0x4>
 8001596:	bf00      	nop

08001598 <__cmpsf2>:
 8001598:	f04f 0c01 	mov.w	ip, #1
 800159c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80015a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80015a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80015a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80015ac:	bf18      	it	ne
 80015ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80015b2:	d011      	beq.n	80015d8 <__cmpsf2+0x40>
 80015b4:	b001      	add	sp, #4
 80015b6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80015ba:	bf18      	it	ne
 80015bc:	ea90 0f01 	teqne	r0, r1
 80015c0:	bf58      	it	pl
 80015c2:	ebb2 0003 	subspl.w	r0, r2, r3
 80015c6:	bf88      	it	hi
 80015c8:	17c8      	asrhi	r0, r1, #31
 80015ca:	bf38      	it	cc
 80015cc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80015d0:	bf18      	it	ne
 80015d2:	f040 0001 	orrne.w	r0, r0, #1
 80015d6:	4770      	bx	lr
 80015d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80015dc:	d102      	bne.n	80015e4 <__cmpsf2+0x4c>
 80015de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80015e2:	d105      	bne.n	80015f0 <__cmpsf2+0x58>
 80015e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80015e8:	d1e4      	bne.n	80015b4 <__cmpsf2+0x1c>
 80015ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80015ee:	d0e1      	beq.n	80015b4 <__cmpsf2+0x1c>
 80015f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop

080015f8 <__aeabi_cfrcmple>:
 80015f8:	4684      	mov	ip, r0
 80015fa:	4608      	mov	r0, r1
 80015fc:	4661      	mov	r1, ip
 80015fe:	e7ff      	b.n	8001600 <__aeabi_cfcmpeq>

08001600 <__aeabi_cfcmpeq>:
 8001600:	b50f      	push	{r0, r1, r2, r3, lr}
 8001602:	f7ff ffc9 	bl	8001598 <__cmpsf2>
 8001606:	2800      	cmp	r0, #0
 8001608:	bf48      	it	mi
 800160a:	f110 0f00 	cmnmi.w	r0, #0
 800160e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001610 <__aeabi_fcmpeq>:
 8001610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001614:	f7ff fff4 	bl	8001600 <__aeabi_cfcmpeq>
 8001618:	bf0c      	ite	eq
 800161a:	2001      	moveq	r0, #1
 800161c:	2000      	movne	r0, #0
 800161e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001622:	bf00      	nop

08001624 <__aeabi_fcmplt>:
 8001624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001628:	f7ff ffea 	bl	8001600 <__aeabi_cfcmpeq>
 800162c:	bf34      	ite	cc
 800162e:	2001      	movcc	r0, #1
 8001630:	2000      	movcs	r0, #0
 8001632:	f85d fb08 	ldr.w	pc, [sp], #8
 8001636:	bf00      	nop

08001638 <__aeabi_fcmple>:
 8001638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800163c:	f7ff ffe0 	bl	8001600 <__aeabi_cfcmpeq>
 8001640:	bf94      	ite	ls
 8001642:	2001      	movls	r0, #1
 8001644:	2000      	movhi	r0, #0
 8001646:	f85d fb08 	ldr.w	pc, [sp], #8
 800164a:	bf00      	nop

0800164c <__aeabi_fcmpge>:
 800164c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001650:	f7ff ffd2 	bl	80015f8 <__aeabi_cfrcmple>
 8001654:	bf94      	ite	ls
 8001656:	2001      	movls	r0, #1
 8001658:	2000      	movhi	r0, #0
 800165a:	f85d fb08 	ldr.w	pc, [sp], #8
 800165e:	bf00      	nop

08001660 <__aeabi_fcmpgt>:
 8001660:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001664:	f7ff ffc8 	bl	80015f8 <__aeabi_cfrcmple>
 8001668:	bf34      	ite	cc
 800166a:	2001      	movcc	r0, #1
 800166c:	2000      	movcs	r0, #0
 800166e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001672:	bf00      	nop

08001674 <__aeabi_f2uiz>:
 8001674:	0042      	lsls	r2, r0, #1
 8001676:	d20e      	bcs.n	8001696 <__aeabi_f2uiz+0x22>
 8001678:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800167c:	d30b      	bcc.n	8001696 <__aeabi_f2uiz+0x22>
 800167e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001682:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001686:	d409      	bmi.n	800169c <__aeabi_f2uiz+0x28>
 8001688:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800168c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001690:	fa23 f002 	lsr.w	r0, r3, r2
 8001694:	4770      	bx	lr
 8001696:	f04f 0000 	mov.w	r0, #0
 800169a:	4770      	bx	lr
 800169c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80016a0:	d101      	bne.n	80016a6 <__aeabi_f2uiz+0x32>
 80016a2:	0242      	lsls	r2, r0, #9
 80016a4:	d102      	bne.n	80016ac <__aeabi_f2uiz+0x38>
 80016a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016aa:	4770      	bx	lr
 80016ac:	f04f 0000 	mov.w	r0, #0
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop

080016b4 <main>:

#include "armcore/portpin.h"
//#include "usart.h"
#include "armcore/delay.h"

int main(void) {
 80016b4:	b508      	push	{r3, lr}
/*
	begin(& usart3, 38400);
	print(&usart3, "Hi!\n\n");
*/
	pinMode(PD12 | PD13 | PD14 | PD15, GPIO_Mode_OUT);
 80016b6:	f44f 209e 	mov.w	r0, #323584	; 0x4f000
 80016ba:	2101      	movs	r1, #1
 80016bc:	f7fe fd64 	bl	8000188 <pinMode>
	uint16_t count = 0;
	uint32_t dval = 900;
	uint32_t intval = 24;

	while (1) {
		digitalWrite(PD15, SET);
 80016c0:	2101      	movs	r1, #1
 80016c2:	f44f 2090 	mov.w	r0, #294912	; 0x48000
 80016c6:	f7fe fd9a 	bl	80001fe <digitalWrite>
		digitalWrite(PD12 | PD13 | PD14, RESET);
 80016ca:	2100      	movs	r1, #0
 80016cc:	f44f 208e 	mov.w	r0, #290816	; 0x47000
 80016d0:	f7fe fd95 	bl	80001fe <digitalWrite>
		_delay_ms(intval);
 80016d4:	2018      	movs	r0, #24
 80016d6:	f7ff fc25 	bl	8000f24 <_delay_ms>
		digitalWrite(PD12, SET);
 80016da:	2101      	movs	r1, #1
 80016dc:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 80016e0:	f7fe fd8d 	bl	80001fe <digitalWrite>
		digitalWrite(PD13 | PD14 | PD15, RESET);
 80016e4:	2100      	movs	r1, #0
 80016e6:	f44f 209c 	mov.w	r0, #319488	; 0x4e000
 80016ea:	f7fe fd88 	bl	80001fe <digitalWrite>
		_delay_ms(intval);
 80016ee:	2018      	movs	r0, #24
 80016f0:	f7ff fc18 	bl	8000f24 <_delay_ms>
		digitalWrite(PD13, SET);
 80016f4:	2101      	movs	r1, #1
 80016f6:	f44f 2084 	mov.w	r0, #270336	; 0x42000
 80016fa:	f7fe fd80 	bl	80001fe <digitalWrite>
		digitalWrite(PD12 | PD14 | PD15, RESET);
 80016fe:	2100      	movs	r1, #0
 8001700:	f44f 209a 	mov.w	r0, #315392	; 0x4d000
 8001704:	f7fe fd7b 	bl	80001fe <digitalWrite>
		_delay_ms(intval);
 8001708:	2018      	movs	r0, #24
 800170a:	f7ff fc0b 	bl	8000f24 <_delay_ms>
		digitalWrite(PD14, SET);
 800170e:	2101      	movs	r1, #1
 8001710:	f44f 2088 	mov.w	r0, #278528	; 0x44000
 8001714:	f7fe fd73 	bl	80001fe <digitalWrite>
		digitalWrite(PD12 | PD13 | PD15, RESET);
 8001718:	2100      	movs	r1, #0
 800171a:	f44f 2096 	mov.w	r0, #307200	; 0x4b000
 800171e:	f7fe fd6e 	bl	80001fe <digitalWrite>
		_delay_ms(intval);
 8001722:	2018      	movs	r0, #24
 8001724:	f7ff fbfe 	bl	8000f24 <_delay_ms>
		//
		digitalWrite(PD15, SET);
 8001728:	2101      	movs	r1, #1
 800172a:	f44f 2090 	mov.w	r0, #294912	; 0x48000
 800172e:	f7fe fd66 	bl	80001fe <digitalWrite>
		digitalWrite(PD12 | PD13 | PD14, RESET);
 8001732:	2100      	movs	r1, #0
 8001734:	f44f 208e 	mov.w	r0, #290816	; 0x47000
 8001738:	f7fe fd61 	bl	80001fe <digitalWrite>
		_delay_ms(450);
 800173c:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001740:	f7ff fbf0 	bl	8000f24 <_delay_ms>
 8001744:	e7bc      	b.n	80016c0 <main+0xc>
	...

08001748 <Reset_Handler>:
 8001748:	2100      	movs	r1, #0
 800174a:	e003      	b.n	8001754 <LoopCopyDataInit>

0800174c <CopyDataInit>:
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <LoopFillZerobss+0x10>)
 800174e:	585b      	ldr	r3, [r3, r1]
 8001750:	5043      	str	r3, [r0, r1]
 8001752:	3104      	adds	r1, #4

08001754 <LoopCopyDataInit>:
 8001754:	4809      	ldr	r0, [pc, #36]	; (800177c <LoopFillZerobss+0x14>)
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <LoopFillZerobss+0x18>)
 8001758:	1842      	adds	r2, r0, r1
 800175a:	429a      	cmp	r2, r3
 800175c:	d3f6      	bcc.n	800174c <CopyDataInit>
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <LoopFillZerobss+0x1c>)
 8001760:	e002      	b.n	8001768 <LoopFillZerobss>

08001762 <FillZerobss>:
 8001762:	2300      	movs	r3, #0
 8001764:	f842 3b04 	str.w	r3, [r2], #4

08001768 <LoopFillZerobss>:
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <LoopFillZerobss+0x20>)
 800176a:	429a      	cmp	r2, r3
 800176c:	d3f9      	bcc.n	8001762 <FillZerobss>
 800176e:	f7ff fbff 	bl	8000f70 <SystemInit>
 8001772:	f7ff ff9f 	bl	80016b4 <main>
 8001776:	4770      	bx	lr
 8001778:	08001790 	.word	0x08001790
 800177c:	20000000 	.word	0x20000000
 8001780:	20000098 	.word	0x20000098
 8001784:	20000098 	.word	0x20000098
 8001788:	2000009c 	.word	0x2000009c

0800178c <ADC_IRQHandler>:
 800178c:	e7fe      	b.n	800178c <ADC_IRQHandler>
	...
