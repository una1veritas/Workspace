汎用非決定性有限オートマトンプログラム
nfa.c （Version 20211007.1）

1. コンパイル

nfa.c ファイルを GCC 等の C コンパイラで実行ファイルにコンパイルします。
例） Linux, Mac OS, Windows 10 Msys2/Mingw64 あるいは WSL 等で
gcc を使って実行ファイル nfa.exe ファイルにコンパイルする

% gcc -o nfa.exe nfa.c
% ls
nfa.c  nfa.exe
%

2. コマンドの実行

(1) 引数なしで実行すると、ヘルプの見方とともに、サンプルの定義（{a, b, c} 上の文字列で
abb を含むなら受理）で動作する。
$ ./nfa.exe
define M by built-in example: "0a01,0b0,0c0,1a0,1b02,1c0,2a0,2b03,2c0,3a3,3b3,3c3" "0" "3"
(Use 'command -h' to get a help message.)

nfa(
states = {0, 1, 2, 3}
alphabet = {a, b, c},
delta = 
state symbol| next
------------+------
  0  ,  a   | {0, 1} 
  0  ,  b   | {0} 
  0  ,  c   | {0} 
  1  ,  a   | {0} 
  1  ,  b   | {0, 2} 
  1  ,  c   | {0} 
  2  ,  a   | {0} 
  2  ,  b   | {0, 3} 
  2  ,  c   | {0} 
  3  ,  a   | {3} 
  3  ,  b   | {3} 
  3  ,  c   | {3} 
------------+------
initial state = 0
accepting states = {3}
)
run on 'acabaccababbacbbac' :
     -> {0}, -a-> {0, 1}, -c-> {0}, -a-> {0, 1}, -b-> {0, 2}, -a-> {0, 1}, -c-> {0}, -c-> {0}, -a-> {0, 1}, -b-> {0, 2}, -a-> {0, 1}, -b-> {0, 2}, -b-> {0, 3}, -a-> {0, 1, 3}, -c-> {0, 3}, -b-> {0, 3}, -b-> {0, 3}, -a-> {0, 1, 3}, -c-> {0, 3}, 
accepted.
bye.

(2) -h をつけて実行すると、ヘルプ情報を表示する。
$ ./nfa.exe -h
usage: command "transition triples" "initial state" "final states" ("input string")
example: dfa.exe "0a01,0b0,0c0,1a0,1b02,1c0,2a0,2b03,2c0,3a3,3b3,3c3" "0" "3"

(3) 第１引数にコンマ区切りの遷移関数の定義列、第２引数に初期状態、第３引数に受理状態の列、
またオプションで第４引数に入力文字列を与えると、定義と遷移の列を表示し、結果を表示して終了する。
状態またはアルファベットに特殊な文字を使用しないならば、引数をダブルクオートでかこむ必要はない。
第４引数を省略すると、キーボードで改行を打つまでの入力を、行ごとに計算し結果を表示する。
空文字列を入力すると、プログラムを終了する。

遷移関数の定義は列は、
[遷移元の状態を表す文字][読む文字][遷移先の状態を表す文字（複数可能）]
をコンマで区切って並べた列である。
受理状態の列は、受理状態の集合に含まれる状態を表す文字を並べ文字列とする。


