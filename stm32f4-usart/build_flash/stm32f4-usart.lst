
stm32f4-usart.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <delay_us>:
  * @brief  wait micro second
  * @param  wait_time : time to wait in micro second
  * @retval None
  */
void delay_us(uint16_t waittime)
{
 8000188:	b510      	push	{r4, lr}
 800018a:	4604      	mov	r4, r0
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);
 800018c:	2001      	movs	r0, #1
 800018e:	4601      	mov	r1, r0
 8000190:	f001 f914 	bl	80013bc <RCC_APB1PeriphClockCmd>

  /* Time base configuration */
  TIM_TimeBaseStructureMicro.TIM_Period = ((waittime+1) * 1)-1;
 8000194:	4b11      	ldr	r3, [pc, #68]	; (80001dc <delay_us+0x54>)
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMicro);
 8000196:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800019a:	4619      	mov	r1, r3
{
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);

  /* Time base configuration */
  TIM_TimeBaseStructureMicro.TIM_Period = ((waittime+1) * 1)-1;
 800019c:	605c      	str	r4, [r3, #4]
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMicro);
 800019e:	f001 fadf 	bl	8001760 <TIM_TimeBaseInit>

  TIM_SelectOnePulseMode(TIM_NUM, TIM_OPMode_Single);
 80001a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001a6:	2108      	movs	r1, #8
 80001a8:	f001 fb70 	bl	800188c <TIM_SelectOnePulseMode>

  TIM_SetCounter(TIM_NUM,2);
 80001ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001b0:	2102      	movs	r1, #2
 80001b2:	f001 fb37 	bl	8001824 <TIM_SetCounter>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, ENABLE);
 80001b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001ba:	2101      	movs	r1, #1
 80001bc:	f001 fb7e 	bl	80018bc <TIM_Cmd>

  while (TIM_GetCounter(TIM_NUM)){};
 80001c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001c4:	f001 fb32 	bl	800182c <TIM_GetCounter>
 80001c8:	4601      	mov	r1, r0
 80001ca:	2800      	cmp	r0, #0
 80001cc:	d1f8      	bne.n	80001c0 <delay_us+0x38>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 80001ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

}
 80001d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TIM_Cmd(TIM_NUM, ENABLE);

  while (TIM_GetCounter(TIM_NUM)){};

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 80001d6:	f001 bb71 	b.w	80018bc <TIM_Cmd>
 80001da:	bf00      	nop
 80001dc:	20000000 	.word	0x20000000

080001e0 <delay_ms>:
  * @brief  wait millisecond
  * @param  wait_time : time to wait in millisecond
  * @retval None
  */
void delay_ms(uint16_t waittime)
{
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4604      	mov	r4, r0
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);
 80001e4:	2001      	movs	r0, #1
 80001e6:	4601      	mov	r1, r0
 80001e8:	f001 f8e8 	bl	80013bc <RCC_APB1PeriphClockCmd>

  /* Time base configuration */
  TIM_TimeBaseStructureMili.TIM_Period = ((waittime+1) * 1)-1;
 80001ec:	4b11      	ldr	r3, [pc, #68]	; (8000234 <delay_ms+0x54>)
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMili);
 80001ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001f2:	f103 010c 	add.w	r1, r3, #12
{
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);

  /* Time base configuration */
  TIM_TimeBaseStructureMili.TIM_Period = ((waittime+1) * 1)-1;
 80001f6:	611c      	str	r4, [r3, #16]
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMili);
 80001f8:	f001 fab2 	bl	8001760 <TIM_TimeBaseInit>

  TIM_SelectOnePulseMode(TIM_NUM, TIM_OPMode_Single);
 80001fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000200:	2108      	movs	r1, #8
 8000202:	f001 fb43 	bl	800188c <TIM_SelectOnePulseMode>

  TIM_SetCounter(TIM_NUM,2);
 8000206:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800020a:	2102      	movs	r1, #2
 800020c:	f001 fb0a 	bl	8001824 <TIM_SetCounter>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, ENABLE);
 8000210:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000214:	2101      	movs	r1, #1
 8000216:	f001 fb51 	bl	80018bc <TIM_Cmd>

  while (TIM_GetCounter(TIM_NUM)){};
 800021a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800021e:	f001 fb05 	bl	800182c <TIM_GetCounter>
 8000222:	4601      	mov	r1, r0
 8000224:	2800      	cmp	r0, #0
 8000226:	d1f8      	bne.n	800021a <delay_ms+0x3a>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 8000228:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
}
 800022c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TIM_Cmd(TIM_NUM, ENABLE);

  while (TIM_GetCounter(TIM_NUM)){};

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 8000230:	f001 bb44 	b.w	80018bc <TIM_Cmd>
 8000234:	20000000 	.word	0x20000000

08000238 <TIM5_timer_start>:
/**
  * @brief  millisecond
  * @param  none
  * @retval None
  */
void TIM5_timer_start(void) {
 8000238:	b530      	push	{r4, r5, lr}
	// TIM_TimeBaseInitTypeDef's order is {uint16_t TIM_Prescaler, uint16_t TIM_CounterMode, uint16_t TIM_Period, uint16_t TIM_ClockDivision, uint8_t TIM_RepetitionCounter}
	TIM_TimeBaseInitTypeDef  TimeBaseStructure = {
 800023a:	f647 63ac 	movw	r3, #32428	; 0x7eac
 800023e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000242:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
/**
  * @brief  millisecond
  * @param  none
  * @retval None
  */
void TIM5_timer_start(void) {
 8000246:	b085      	sub	sp, #20
	// TIM_TimeBaseInitTypeDef's order is {uint16_t TIM_Prescaler, uint16_t TIM_CounterMode, uint16_t TIM_Period, uint16_t TIM_ClockDivision, uint8_t TIM_RepetitionCounter}
	TIM_TimeBaseInitTypeDef  TimeBaseStructure = {
 8000248:	ad01      	add	r5, sp, #4

  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5 , ENABLE);

  /* Time base configuration */
  TIM_TimeBaseInit(TIM5, &TimeBaseStructure);
 800024a:	f44f 6440 	mov.w	r4, #3072	; 0xc00
  * @param  none
  * @retval None
  */
void TIM5_timer_start(void) {
	// TIM_TimeBaseInitTypeDef's order is {uint16_t TIM_Prescaler, uint16_t TIM_CounterMode, uint16_t TIM_Period, uint16_t TIM_ClockDivision, uint8_t TIM_RepetitionCounter}
	TIM_TimeBaseInitTypeDef  TimeBaseStructure = {
 800024e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5 , ENABLE);

  /* Time base configuration */
  TIM_TimeBaseInit(TIM5, &TimeBaseStructure);
 8000252:	f2c4 0400 	movt	r4, #16384	; 0x4000
			TIM_CKD_DIV1,
			0
	};

  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5 , ENABLE);
 8000256:	2008      	movs	r0, #8
 8000258:	2101      	movs	r1, #1
 800025a:	f001 f8af 	bl	80013bc <RCC_APB1PeriphClockCmd>

  /* Time base configuration */
  TIM_TimeBaseInit(TIM5, &TimeBaseStructure);
 800025e:	4629      	mov	r1, r5
 8000260:	4620      	mov	r0, r4
 8000262:	f001 fa7d 	bl	8001760 <TIM_TimeBaseInit>
//  TIM_SelectOnePulseMode(TIM5, TIM_OPMode_Repetitive);
//  TIM_SetCounter(TIM5,0);
  TIM_ITConfig(TIM5, TIM_IT_Update, ENABLE);
 8000266:	2101      	movs	r1, #1
 8000268:	460a      	mov	r2, r1
 800026a:	4620      	mov	r0, r4
 800026c:	f001 ff6e 	bl	800214c <TIM_ITConfig>

  /* TIM enable counter */
  TIM_Cmd(TIM5, ENABLE);
 8000270:	2101      	movs	r1, #1
 8000272:	4620      	mov	r0, r4
 8000274:	f001 fb22 	bl	80018bc <TIM_Cmd>

  __counter_micros = 0;
 8000278:	f640 12d4 	movw	r2, #2516	; 0x9d4
  __counter_millis = 0;
 800027c:	f640 13d8 	movw	r3, #2520	; 0x9d8
  TIM_ITConfig(TIM5, TIM_IT_Update, ENABLE);

  /* TIM enable counter */
  TIM_Cmd(TIM5, ENABLE);

  __counter_micros = 0;
 8000280:	f2c2 0200 	movt	r2, #8192	; 0x2000
  __counter_millis = 0;
 8000284:	f2c2 0300 	movt	r3, #8192	; 0x2000
  TIM_ITConfig(TIM5, TIM_IT_Update, ENABLE);

  /* TIM enable counter */
  TIM_Cmd(TIM5, ENABLE);

  __counter_micros = 0;
 8000288:	2100      	movs	r1, #0
 800028a:	6011      	str	r1, [r2, #0]
  __counter_millis = 0;
 800028c:	6019      	str	r1, [r3, #0]
}
 800028e:	b005      	add	sp, #20
 8000290:	bd30      	pop	{r4, r5, pc}
 8000292:	bf00      	nop

08000294 <micros>:

uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM5);
 8000294:	f44f 6040 	mov.w	r0, #3072	; 0xc00

  __counter_micros = 0;
  __counter_millis = 0;
}

uint32_t micros(void) {
 8000298:	b508      	push	{r3, lr}
	return __counter_micros + TIM_GetCounter(TIM5);
 800029a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800029e:	f001 fac5 	bl	800182c <TIM_GetCounter>
 80002a2:	f640 13d4 	movw	r3, #2516	; 0x9d4
 80002a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002aa:	681b      	ldr	r3, [r3, #0]
}
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	bd08      	pop	{r3, pc}

080002b0 <millis>:

uint32_t millis(void) {
	return __counter_millis;
 80002b0:	f640 13d8 	movw	r3, #2520	; 0x9d8
 80002b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002b8:	6818      	ldr	r0, [r3, #0]
}
 80002ba:	4770      	bx	lr

080002bc <delay_millis>:
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM5);
}

uint32_t millis(void) {
	return __counter_millis;
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <delay_millis+0x10>)
 80002be:	681a      	ldr	r2, [r3, #0]
}

void delay_millis(uint32_t w) {
	uint32_t wtill = millis() + w;
 80002c0:	1882      	adds	r2, r0, r2
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM5);
}

uint32_t millis(void) {
	return __counter_millis;
 80002c2:	6819      	ldr	r1, [r3, #0]
}

void delay_millis(uint32_t w) {
	uint32_t wtill = millis() + w;
	while ( millis() < wtill);
 80002c4:	428a      	cmp	r2, r1
 80002c6:	d8fc      	bhi.n	80002c2 <delay_millis+0x6>
}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	200009d8 	.word	0x200009d8

080002d0 <delay_micros>:

void delay_micros(uint32_t w) {
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4604      	mov	r4, r0
	uint32_t wtill = micros() + w;
 80002d4:	f7ff ffde 	bl	8000294 <micros>
 80002d8:	1904      	adds	r4, r0, r4
	while ( micros() < wtill);
 80002da:	f7ff ffdb 	bl	8000294 <micros>
 80002de:	4284      	cmp	r4, r0
 80002e0:	d8fb      	bhi.n	80002da <delay_micros+0xa>
}
 80002e2:	bd10      	pop	{r4, pc}

080002e4 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void) {
    if( TIM_GetITStatus( TIM5, TIM_IT_Update) != RESET) {
 80002e4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
void delay_micros(uint32_t w) {
	uint32_t wtill = micros() + w;
	while ( micros() < wtill);
}

void TIM5_IRQHandler(void) {
 80002e8:	b508      	push	{r3, lr}
    if( TIM_GetITStatus( TIM5, TIM_IT_Update) != RESET) {
 80002ea:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80002ee:	2101      	movs	r1, #1
 80002f0:	f001 ff42 	bl	8002178 <TIM_GetITStatus>
 80002f4:	b178      	cbz	r0, 8000316 <TIM5_IRQHandler+0x32>
        TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 80002f6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80002fa:	2101      	movs	r1, #1
 80002fc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000300:	f001 ff46 	bl	8002190 <TIM_ClearITPendingBit>
        __counter_micros += 1000;
 8000304:	4a04      	ldr	r2, [pc, #16]	; (8000318 <TIM5_IRQHandler+0x34>)
        __counter_millis += 1;
 8000306:	4b05      	ldr	r3, [pc, #20]	; (800031c <TIM5_IRQHandler+0x38>)
}

void TIM5_IRQHandler(void) {
    if( TIM_GetITStatus( TIM5, TIM_IT_Update) != RESET) {
        TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
        __counter_micros += 1000;
 8000308:	6811      	ldr	r1, [r2, #0]
 800030a:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 800030e:	6011      	str	r1, [r2, #0]
        __counter_millis += 1;
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	3201      	adds	r2, #1
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	bd08      	pop	{r3, pc}
 8000318:	200009d4 	.word	0x200009d4
 800031c:	200009d8 	.word	0x200009d8

08000320 <pinMode>:
	}
	return 16;
}
*/

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 8000320:	b5f0      	push	{r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 8000322:	f240 0418 	movw	r4, #24
 8000326:	f3c0 2503 	ubfx	r5, r0, #8, #4
 800032a:	f2c2 0400 	movt	r4, #8192	; 0x2000
	}
	return 16;
}
*/

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 800032e:	b083      	sub	sp, #12
 8000330:	460f      	mov	r7, r1
 8000332:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 8000334:	2101      	movs	r1, #1
 8000336:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800033a:	f001 f815 	bl	8001368 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 800033e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000342:	2301      	movs	r3, #1
 8000344:	f006 060f 	and.w	r6, r6, #15
 8000348:	fa13 f606 	lsls.w	r6, r3, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800034c:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 800034e:	b2b6      	uxth	r6, r6
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000350:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000354:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 8000358:	6aa0      	ldr	r0, [r4, #40]	; 0x28

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 800035a:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800035c:	2302      	movs	r3, #2
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 800035e:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
 8000360:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000364:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 8000368:	f000 fdea 	bl	8000f40 <GPIO_Init>
}
 800036c:	b003      	add	sp, #12
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000370 <digitalWrite>:

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <digitalWrite+0x28>)
 8000372:	f3c0 2203 	ubfx	r2, r0, #8, #4
 8000376:	eb03 0382 	add.w	r3, r3, r2, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800037a:	f000 000f 	and.w	r0, r0, #15
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
 800037e:	b929      	cbnz	r1, 800038c <digitalWrite+0x1c>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000380:	2101      	movs	r1, #1
 8000382:	4081      	lsls	r1, r0
void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000384:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000386:	b289      	uxth	r1, r1
 8000388:	f000 be68 	b.w	800105c <GPIO_ResetBits>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800038c:	2101      	movs	r1, #1
 800038e:	4081      	lsls	r1, r0
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000390:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000392:	b289      	uxth	r1, r1
 8000394:	f000 be60 	b.w	8001058 <GPIO_SetBits>
 8000398:	20000018 	.word	0x20000018

0800039c <digitalRead>:
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 800039c:	b508      	push	{r3, lr}
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 800039e:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <digitalRead+0x44>)
 80003a0:	f3c0 2203 	ubfx	r2, r0, #8, #4
 80003a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80003a8:	f000 010f 	and.w	r1, r0, #15
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 80003ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80003ae:	2301      	movs	r3, #1
 80003b0:	fa13 f101 	lsls.w	r1, r3, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 80003b4:	6802      	ldr	r2, [r0, #0]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80003b6:	b289      	uxth	r1, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 80003b8:	fa11 f303 	lsls.w	r3, r1, r3
 80003bc:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d005      	beq.n	80003d2 <digitalRead+0x36>
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
 80003c6:	f000 fe33 	bl	8001030 <GPIO_ReadInputDataBit>
 80003ca:	3000      	adds	r0, #0
 80003cc:	bf18      	it	ne
 80003ce:	2001      	movne	r0, #1
}
 80003d0:	bd08      	pop	{r3, pc}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
	if (mode == GPIO_Mode_OUT)
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
 80003d2:	f000 fe37 	bl	8001044 <GPIO_ReadOutputDataBit>
 80003d6:	3000      	adds	r0, #0
 80003d8:	bf18      	it	ne
 80003da:	2001      	movne	r0, #1
 80003dc:	bd08      	pop	{r3, pc}
 80003de:	bf00      	nop
 80003e0:	20000018 	.word	0x20000018

080003e4 <PinPort>:
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
 80003e4:	f240 0318 	movw	r3, #24
 80003e8:	f3c0 2003 	ubfx	r0, r0, #8, #4
 80003ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003f0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
}
 80003f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80003f6:	4770      	bx	lr

080003f8 <PinBit>:

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80003f8:	2301      	movs	r3, #1
 80003fa:	f000 000f 	and.w	r0, r0, #15
 80003fe:	fa13 f000 	lsls.w	r0, r3, r0
}
 8000402:	b280      	uxth	r0, r0
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop

08000408 <PinSource>:

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}
 8000408:	f000 000f 	and.w	r0, r0, #15
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop

08000410 <GPIOMode>:

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ( port == GPIOB ) {
 8000414:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8000418:	f2c4 0602 	movt	r6, #16386	; 0x4002
 800041c:	42b0      	cmp	r0, r6
uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 800041e:	b082      	sub	sp, #8
 8000420:	4604      	mov	r4, r0
 8000422:	460d      	mov	r5, r1
 8000424:	4617      	mov	r7, r2
 8000426:	4698      	mov	r8, r3
	if ( port == GPIOB ) {
 8000428:	d047      	beq.n	80004ba <GPIOMode+0xaa>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
 800042a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800042e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000432:	4298      	cmp	r0, r3
 8000434:	d046      	beq.n	80004c4 <GPIOMode+0xb4>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
 8000436:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800043a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800043e:	4298      	cmp	r0, r3
 8000440:	d045      	beq.n	80004ce <GPIOMode+0xbe>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
 8000442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000446:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800044a:	4298      	cmp	r0, r3
 800044c:	d044      	beq.n	80004d8 <GPIOMode+0xc8>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
 800044e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000452:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000456:	4298      	cmp	r0, r3
 8000458:	d043      	beq.n	80004e2 <GPIOMode+0xd2>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
 800045a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800045e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000462:	4298      	cmp	r0, r3
 8000464:	d042      	beq.n	80004ec <GPIOMode+0xdc>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	} else if ( port == GPIOH ) {
 8000466:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800046a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800046e:	4298      	cmp	r0, r3
 8000470:	d041      	beq.n	80004f6 <GPIOMode+0xe6>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
 8000472:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000476:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800047a:	4298      	cmp	r0, r3
 800047c:	d040      	beq.n	8000500 <GPIOMode+0xf0>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
	} else if ( port == GPIOA ) {
 800047e:	2300      	movs	r3, #0
 8000480:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000484:	4298      	cmp	r0, r3
 8000486:	d013      	beq.n	80004b0 <GPIOMode+0xa0>

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 8000488:	f89d 3020 	ldrb.w	r3, [sp, #32]
	}
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
 800048c:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 800048e:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8000492:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
 8000496:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 800049a:	4620      	mov	r0, r4
 800049c:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 800049e:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 80004a2:	f88d 8005 	strb.w	r8, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80004a6:	f000 fd4b 	bl	8000f40 <GPIO_Init>
}
 80004aa:	b002      	add	sp, #8
 80004ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ( port == GPIOH ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
	} else if ( port == GPIOA ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80004b0:	2001      	movs	r0, #1
 80004b2:	4601      	mov	r1, r0
 80004b4:	f000 ff58 	bl	8001368 <RCC_AHB1PeriphClockCmd>
 80004b8:	e7e6      	b.n	8000488 <GPIOMode+0x78>
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80004ba:	2002      	movs	r0, #2
 80004bc:	2101      	movs	r1, #1
 80004be:	f000 ff53 	bl	8001368 <RCC_AHB1PeriphClockCmd>
 80004c2:	e7e1      	b.n	8000488 <GPIOMode+0x78>
	} else if ( port == GPIOC ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80004c4:	2004      	movs	r0, #4
 80004c6:	2101      	movs	r1, #1
 80004c8:	f000 ff4e 	bl	8001368 <RCC_AHB1PeriphClockCmd>
 80004cc:	e7dc      	b.n	8000488 <GPIOMode+0x78>
	} else if ( port == GPIOD ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80004ce:	2008      	movs	r0, #8
 80004d0:	2101      	movs	r1, #1
 80004d2:	f000 ff49 	bl	8001368 <RCC_AHB1PeriphClockCmd>
 80004d6:	e7d7      	b.n	8000488 <GPIOMode+0x78>
	} else if ( port == GPIOE ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80004d8:	2010      	movs	r0, #16
 80004da:	2101      	movs	r1, #1
 80004dc:	f000 ff44 	bl	8001368 <RCC_AHB1PeriphClockCmd>
 80004e0:	e7d2      	b.n	8000488 <GPIOMode+0x78>
	} else if ( port == GPIOF ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80004e2:	2020      	movs	r0, #32
 80004e4:	2101      	movs	r1, #1
 80004e6:	f000 ff3f 	bl	8001368 <RCC_AHB1PeriphClockCmd>
 80004ea:	e7cd      	b.n	8000488 <GPIOMode+0x78>
	} else if ( port == GPIOG ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80004ec:	2040      	movs	r0, #64	; 0x40
 80004ee:	2101      	movs	r1, #1
 80004f0:	f000 ff3a 	bl	8001368 <RCC_AHB1PeriphClockCmd>
 80004f4:	e7c8      	b.n	8000488 <GPIOMode+0x78>
	} else if ( port == GPIOH ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80004f6:	2080      	movs	r0, #128	; 0x80
 80004f8:	2101      	movs	r1, #1
 80004fa:	f000 ff35 	bl	8001368 <RCC_AHB1PeriphClockCmd>
 80004fe:	e7c3      	b.n	8000488 <GPIOMode+0x78>
	} else if ( port == GPIOI ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000500:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000504:	2101      	movs	r1, #1
 8000506:	f000 ff2f 	bl	8001368 <RCC_AHB1PeriphClockCmd>
 800050a:	e7bd      	b.n	8000488 <GPIOMode+0x78>

0800050c <GPIOWrite>:
	GPIO_Init(port, &GPIO_InitStructure);
}


inline void GPIOWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 800050c:	f000 bdae 	b.w	800106c <GPIO_Write>

08000510 <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 8000510:	f640 13dc 	movw	r3, #2524	; 0x9dc
 8000514:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	3201      	adds	r2, #1
 800051c:	601a      	str	r2, [r3, #0]
}
 800051e:	4770      	bx	lr

08000520 <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <SysTick_delay+0x10>)
 8000522:	681a      	ldr	r2, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 8000524:	6819      	ldr	r1, [r3, #0]
 8000526:	1a89      	subs	r1, r1, r2
 8000528:	4281      	cmp	r1, r0
 800052a:	d3fb      	bcc.n	8000524 <SysTick_delay+0x4>
		;
}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	200009dc 	.word	0x200009dc

08000534 <SysTick_Start>:

void SysTick_Start(void) {
 8000534:	b500      	push	{lr}
 8000536:	b085      	sub	sp, #20
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 8000538:	4668      	mov	r0, sp
 800053a:	f000 fe91 	bl	8001260 <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8000544:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8000548:	fba3 2101 	umull	r2, r1, r3, r1
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800054c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000550:	f2ce 0300 	movt	r3, #57344	; 0xe000
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000554:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000558:	0989      	lsrs	r1, r1, #6
 800055a:	f2ce 0200 	movt	r2, #57344	; 0xe000
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800055e:	3901      	subs	r1, #1
 8000560:	6059      	str	r1, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000562:	21f0      	movs	r1, #240	; 0xf0
 8000564:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800056c:	2207      	movs	r2, #7
 800056e:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 8000570:	b005      	add	sp, #20
 8000572:	bd00      	pop	{pc}

08000574 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 8000574:	f640 13dc 	movw	r3, #2524	; 0x9dc
 8000578:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800057c:	6818      	ldr	r0, [r3, #0]
}
 800057e:	4770      	bx	lr

08000580 <buffer_clear>:
};

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 8000586:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 800058a:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 800058e:	4770      	bx	lr

08000590 <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 8000590:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000598:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 800059c:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d001      	beq.n	80005a8 <buffer_is_full+0x10>
		return 1;
	}
	return 0;
 80005a4:	2000      	movs	r0, #0
}
 80005a6:	4770      	bx	lr

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
 80005a8:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
	if ( (r->head == r->tail) && (r->count > 0) ) {
		return 1;
 80005ac:	3000      	adds	r0, #0
 80005ae:	bf18      	it	ne
 80005b0:	2001      	movne	r0, #1
 80005b2:	4770      	bx	lr

080005b4 <buffer_enque>:
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 80005b4:	4603      	mov	r3, r0
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 80005b6:	f8b0 0100 	ldrh.w	r0, [r0, #256]	; 0x100
		return 1;
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 80005ba:	b430      	push	{r4, r5}
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 80005bc:	f9b3 4102 	ldrsh.w	r4, [r3, #258]	; 0x102
 80005c0:	b202      	sxth	r2, r0
 80005c2:	4294      	cmp	r4, r2
 80005c4:	d013      	beq.n	80005ee <buffer_enque+0x3a>
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
 80005c6:	3001      	adds	r0, #1
	r->count++;
	r->head %= USART_BUFFER_SIZE;
 80005c8:	b200      	sxth	r0, r0
 80005ca:	17c4      	asrs	r4, r0, #31
 80005cc:	0e64      	lsrs	r4, r4, #25

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 80005ce:	f8b3 5104 	ldrh.w	r5, [r3, #260]	; 0x104
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
 80005d2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	r->count++;
	r->head %= USART_BUFFER_SIZE;
 80005d6:	1900      	adds	r0, r0, r4
 80005d8:	f000 007f 	and.w	r0, r0, #127	; 0x7f

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 80005dc:	1c6a      	adds	r2, r5, #1
	r->head %= USART_BUFFER_SIZE;
 80005de:	1b04      	subs	r4, r0, r4

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 80005e0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 80005e4:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	return w;
}
 80005e8:	4608      	mov	r0, r1
 80005ea:	bc30      	pop	{r4, r5}
 80005ec:	4770      	bx	lr
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 80005ee:	f8b3 4104 	ldrh.w	r4, [r3, #260]	; 0x104
 80005f2:	2c00      	cmp	r4, #0
 80005f4:	d0e7      	beq.n	80005c6 <buffer_enque+0x12>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
 80005f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005fa:	e7f5      	b.n	80005e8 <buffer_enque+0x34>

080005fc <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 80005fc:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8000600:	4603      	mov	r3, r0
 8000602:	b410      	push	{r4}
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
 8000604:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
 8000608:	b90a      	cbnz	r2, 800060e <buffer_deque+0x12>
		return 0xffff;
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 800060a:	bc10      	pop	{r4}
 800060c:	4770      	bx	lr

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 800060e:	f8b3 0102 	ldrh.w	r0, [r3, #258]	; 0x102
 8000612:	1c44      	adds	r4, r0, #1
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000614:	b224      	sxth	r4, r4
 8000616:	17e1      	asrs	r1, r4, #31
 8000618:	0e49      	lsrs	r1, r1, #25
 800061a:	1864      	adds	r4, r4, r1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 800061c:	b200      	sxth	r0, r0
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 800061e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
	r->count--;
 8000622:	3a01      	subs	r2, #1
	r->tail %= USART_BUFFER_SIZE;
 8000624:	1a61      	subs	r1, r4, r1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8000626:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	r->count--;
 800062a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 800062e:	f8a3 1102 	strh.w	r1, [r3, #258]	; 0x102
 8000632:	e7ea      	b.n	800060a <buffer_deque+0xe>

08000634 <usart_begin>:
	return w;
}

void usart_begin(USARTSerial usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000638:	460e      	mov	r6, r1
 800063a:	b08b      	sub	sp, #44	; 0x2c
 800063c:	4615      	mov	r5, r2
 800063e:	469b      	mov	fp, r3
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	switch(usx) {
 8000640:	2804      	cmp	r0, #4
 8000642:	f200 8094 	bhi.w	800076e <usart_begin+0x13a>
 8000646:	e8df f010 	tbh	[pc, r0, lsl #1]
 800064a:	009e      	.short	0x009e
 800064c:	00b600aa 	.word	0x00b600aa
 8000650:	000500c3 	.word	0x000500c3
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
	break;
	case UART5Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8000654:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000658:	2101      	movs	r1, #1
 800065a:	f000 feaf 	bl	80013bc <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		break;
 800065e:	f04f 0904 	mov.w	r9, #4
 8000662:	2335      	movs	r3, #53	; 0x35
 8000664:	9303      	str	r3, [sp, #12]
 8000666:	464f      	mov	r7, r9
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
	break;
	case UART5Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
 8000668:	f04f 0808 	mov.w	r8, #8
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		break;
	}
	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
 800066c:	4630      	mov	r0, r6
 800066e:	f7ff feb9 	bl	80003e4 <PinPort>
 8000672:	4682      	mov	sl, r0
 8000674:	4630      	mov	r0, r6
 8000676:	f7ff febf 	bl	80003f8 <PinBit>
 800067a:	2202      	movs	r2, #2
 800067c:	2400      	movs	r4, #0
 800067e:	4601      	mov	r1, r0
 8000680:	4613      	mov	r3, r2
 8000682:	4650      	mov	r0, sl
 8000684:	9400      	str	r4, [sp, #0]
 8000686:	9401      	str	r4, [sp, #4]
 8000688:	f7ff fec2 	bl	8000410 <GPIOMode>
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
 800068c:	4628      	mov	r0, r5
 800068e:	f7ff fea9 	bl	80003e4 <PinPort>
 8000692:	4682      	mov	sl, r0
 8000694:	4628      	mov	r0, r5
 8000696:	f7ff feaf 	bl	80003f8 <PinBit>
 800069a:	2202      	movs	r2, #2
 800069c:	4613      	mov	r3, r2
 800069e:	4601      	mov	r1, r0
 80006a0:	4650      	mov	r0, sl
 80006a2:	9400      	str	r4, [sp, #0]
 80006a4:	9401      	str	r4, [sp, #4]
 80006a6:	f7ff feb3 	bl	8000410 <GPIOMode>

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
 80006aa:	4630      	mov	r0, r6
 80006ac:	f7ff fe9a 	bl	80003e4 <PinPort>
 80006b0:	4682      	mov	sl, r0
 80006b2:	4630      	mov	r0, r6
 80006b4:	f7ff fea8 	bl	8000408 <PinSource>
 80006b8:	4642      	mov	r2, r8
 80006ba:	4601      	mov	r1, r0
 80006bc:	4650      	mov	r0, sl
 80006be:	f000 fcdb 	bl	8001078 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );
 80006c2:	4628      	mov	r0, r5
 80006c4:	f7ff fe8e 	bl	80003e4 <PinPort>
 80006c8:	4682      	mov	sl, r0
 80006ca:	4628      	mov	r0, r5
 80006cc:	f7ff fe9c 	bl	8000408 <PinSource>
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(usartx[usx], &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80006d0:	4e46      	ldr	r6, [pc, #280]	; (80007ec <usart_begin+0x1b8>)
	}
	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );
 80006d2:	4642      	mov	r2, r8
 80006d4:	4601      	mov	r1, r0
 80006d6:	4650      	mov	r0, sl
 80006d8:	f000 fcce 	bl	8001078 <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 80006dc:	230c      	movs	r3, #12

	USART_Init(usartx[usx], &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80006de:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 80006e2:	f8ad 301e 	strh.w	r3, [sp, #30]

	USART_Init(usartx[usx], &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80006e6:	a905      	add	r1, sp, #20
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 80006e8:	f8cd b014 	str.w	fp, [sp, #20]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 80006ec:	f8ad 4018 	strh.w	r4, [sp, #24]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 80006f0:	f8ad 401a 	strh.w	r4, [sp, #26]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 80006f4:	f8ad 401c 	strh.w	r4, [sp, #28]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 80006f8:	f8ad 4020 	strh.w	r4, [sp, #32]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(usartx[usx], &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80006fc:	f001 febe 	bl	800247c <USART_Init>

	USART_ITConfig(usartx[usx], USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000700:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
 8000704:	2201      	movs	r2, #1
 8000706:	f240 5125 	movw	r1, #1317	; 0x525
 800070a:	f002 f821 	bl	8002750 <USART_ITConfig>
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
 800070e:	f240 7127 	movw	r1, #1831	; 0x727
 8000712:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
 8000716:	4622      	mov	r2, r4
 8000718:	f002 f81a 	bl	8002750 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 800071c:	9a03      	ldr	r2, [sp, #12]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 800071e:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000722:	2501      	movs	r5, #1
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000724:	a809      	add	r0, sp, #36	; 0x24
	USART_Init(usartx[usx], &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(usartx[usx], USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 8000726:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 800072a:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 800072e:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000732:	f000 fb09 	bl	8000d48 <NVIC_Init>
	//
	buffer_clear(&rxring[usx]);
 8000736:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073a:	fb03 f909 	mul.w	r9, r3, r9
	buffer_clear(&txring[usx]);
 800073e:	4a2c      	ldr	r2, [pc, #176]	; (80007f0 <usart_begin+0x1bc>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
 8000740:	4b2c      	ldr	r3, [pc, #176]	; (80007f4 <usart_begin+0x1c0>)
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usartx[usx], ENABLE);
 8000742:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
 8000746:	444b      	add	r3, r9
	buffer_clear(&txring[usx]);
 8000748:	4491      	add	r9, r2
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usartx[usx], ENABLE);
 800074a:	4629      	mov	r1, r5
};

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 800074c:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	r->tail = 0;
 8000750:	f8a3 4102 	strh.w	r4, [r3, #258]	; 0x102
	r->count = 0;
 8000754:	f8a3 4104 	strh.w	r4, [r3, #260]	; 0x104
};

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000758:	f8a9 4100 	strh.w	r4, [r9, #256]	; 0x100
	r->tail = 0;
 800075c:	f8a9 4102 	strh.w	r4, [r9, #258]	; 0x102
	r->count = 0;
 8000760:	f8a9 4104 	strh.w	r4, [r9, #260]	; 0x104
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usartx[usx], ENABLE);
 8000764:	f001 ff1a 	bl	800259c <USART_Cmd>
}
 8000768:	b00b      	add	sp, #44	; 0x2c
 800076a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		irq = UART5_IRQn;
		break;
	case USART6Serial:
	default:
		usx = USART6Serial;
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 800076e:	2020      	movs	r0, #32
 8000770:	2101      	movs	r1, #1
 8000772:	f000 fe31 	bl	80013d8 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		break;
 8000776:	f04f 0905 	mov.w	r9, #5
 800077a:	2247      	movs	r2, #71	; 0x47
 800077c:	9203      	str	r2, [sp, #12]
 800077e:	464f      	mov	r7, r9
		break;
	case USART6Serial:
	default:
		usx = USART6Serial;
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
 8000780:	f04f 0808 	mov.w	r8, #8
		irq = USART6_IRQn;
		break;
 8000784:	e772      	b.n	800066c <usart_begin+0x38>
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	switch(usx) {
	case USART1Serial:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000786:	2010      	movs	r0, #16
 8000788:	2101      	movs	r1, #1
 800078a:	f000 fe25 	bl	80013d8 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
	break;
 800078e:	f04f 0900 	mov.w	r9, #0
 8000792:	2325      	movs	r3, #37	; 0x25
 8000794:	9303      	str	r3, [sp, #12]
 8000796:	464f      	mov	r7, r9
	IRQn_Type irq = USART1_IRQn;

	switch(usx) {
	case USART1Serial:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
 8000798:	f04f 0807 	mov.w	r8, #7
		irq = USART1_IRQn;
	break;
 800079c:	e766      	b.n	800066c <usart_begin+0x38>
	case USART2Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 800079e:	2101      	movs	r1, #1
 80007a0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
	break;
 80007a4:	4689      	mov	r9, r1
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
	break;
	case USART2Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80007a6:	f000 fe09 	bl	80013bc <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
	break;
 80007aa:	2226      	movs	r2, #38	; 0x26
 80007ac:	9203      	str	r2, [sp, #12]
 80007ae:	464f      	mov	r7, r9
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
	break;
	case USART2Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
 80007b0:	f04f 0807 	mov.w	r8, #7
		irq = USART2_IRQn;
	break;
 80007b4:	e75a      	b.n	800066c <usart_begin+0x38>
	case USART3Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 80007b6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80007ba:	2101      	movs	r1, #1
 80007bc:	f000 fdfe 	bl	80013bc <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
	break;
 80007c0:	f04f 0902 	mov.w	r9, #2
 80007c4:	2327      	movs	r3, #39	; 0x27
 80007c6:	9303      	str	r3, [sp, #12]
 80007c8:	464f      	mov	r7, r9
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
	break;
	case USART3Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
 80007ca:	f04f 0807 	mov.w	r8, #7
		irq = USART3_IRQn;
	break;
 80007ce:	e74d      	b.n	800066c <usart_begin+0x38>
	case UART4Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 80007d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80007d4:	2101      	movs	r1, #1
 80007d6:	f000 fdf1 	bl	80013bc <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
	break;
 80007da:	f04f 0903 	mov.w	r9, #3
 80007de:	2234      	movs	r2, #52	; 0x34
 80007e0:	9203      	str	r2, [sp, #12]
 80007e2:	464f      	mov	r7, r9
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
	break;
	case UART4Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
 80007e4:	f04f 0808 	mov.w	r8, #8
		irq = UART4_IRQn;
	break;
 80007e8:	e740      	b.n	800066c <usart_begin+0x38>
 80007ea:	bf00      	nop
 80007ec:	2000008c 	.word	0x2000008c
 80007f0:	200009e0 	.word	0x200009e0
 80007f4:	20001004 	.word	0x20001004

080007f8 <usart_bare_write>:
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usartx[usx], ENABLE);
}

void usart_bare_write(USARTSerial usx, const uint16_t w) {
 80007f8:	b570      	push	{r4, r5, r6, lr}
 80007fa:	4d09      	ldr	r5, [pc, #36]	; (8000820 <usart_bare_write+0x28>)
 80007fc:	4604      	mov	r4, r0
 80007fe:	460e      	mov	r6, r1
	while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET) ;
 8000800:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	f001 ffbf 	bl	8002788 <USART_GetFlagStatus>
 800080a:	2800      	cmp	r0, #0
 800080c:	d0f8      	beq.n	8000800 <usart_bare_write+0x8>
	USART_SendData(usartx[usx], w) ;
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <usart_bare_write+0x28>)
 8000810:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000814:	4631      	mov	r1, r6
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}
 8000816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	USART_Cmd(usartx[usx], ENABLE);
}

void usart_bare_write(USARTSerial usx, const uint16_t w) {
	while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET) ;
	USART_SendData(usartx[usx], w) ;
 800081a:	f001 bef3 	b.w	8002604 <USART_SendData>
 800081e:	bf00      	nop
 8000820:	2000008c 	.word	0x2000008c

08000824 <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USARTSerial usx, const uint16_t w) {
 8000824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <usart_write+0x58>)
 8000828:	f44f 7483 	mov.w	r4, #262	; 0x106
 800082c:	fb04 3400 	mla	r4, r4, r0, r3
	while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET) ;
	USART_SendData(usartx[usx], w) ;
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USARTSerial usx, const uint16_t w) {
 8000830:	4605      	mov	r5, r0
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000832:	f9b4 2100 	ldrsh.w	r2, [r4, #256]	; 0x100
 8000836:	f9b4 3102 	ldrsh.w	r3, [r4, #258]	; 0x102
 800083a:	429a      	cmp	r2, r3
	while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET) ;
	USART_SendData(usartx[usx], w) ;
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USARTSerial usx, const uint16_t w) {
 800083c:	460f      	mov	r7, r1
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 800083e:	d014      	beq.n	800086a <usart_write+0x46>

void usart_write(USARTSerial usx, const uint16_t w) {
//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_us(833);
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
 8000840:	4e0f      	ldr	r6, [pc, #60]	; (8000880 <usart_write+0x5c>)
 8000842:	2200      	movs	r2, #0
 8000844:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 8000848:	f240 7127 	movw	r1, #1831	; 0x727
 800084c:	f001 ff80 	bl	8002750 <USART_ITConfig>
	buffer_enque(&txring[usx], w);
 8000850:	4639      	mov	r1, r7
 8000852:	4620      	mov	r0, r4
 8000854:	f7ff feae 	bl	80005b4 <buffer_enque>
	USART_ITConfig(usartx[usx], USART_IT_TXE, ENABLE);
 8000858:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 800085c:	f240 7127 	movw	r1, #1831	; 0x727
 8000860:	2201      	movs	r2, #1
}
 8000862:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_us(833);
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(usartx[usx], USART_IT_TXE, ENABLE);
 8000866:	f001 bf73 	b.w	8002750 <USART_ITConfig>
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 800086a:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0e6      	beq.n	8000840 <usart_write+0x1c>
}

void usart_write(USARTSerial usx, const uint16_t w) {
//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_us(833);
 8000872:	f240 3041 	movw	r0, #833	; 0x341
 8000876:	f7ff fc87 	bl	8000188 <delay_us>
 800087a:	e7e1      	b.n	8000840 <usart_write+0x1c>
 800087c:	200009e0 	.word	0x200009e0
 8000880:	2000008c 	.word	0x2000008c

08000884 <usart_print>:
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(usartx[usx], USART_IT_TXE, ENABLE);
}

void usart_print(USARTSerial usx, const char * s) {
 8000884:	b538      	push	{r3, r4, r5, lr}
 8000886:	460c      	mov	r4, r1
	while (*s)
 8000888:	7809      	ldrb	r1, [r1, #0]
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(usartx[usx], USART_IT_TXE, ENABLE);
}

void usart_print(USARTSerial usx, const char * s) {
 800088a:	4605      	mov	r5, r0
	while (*s)
 800088c:	b131      	cbz	r1, 800089c <usart_print+0x18>
		usart_write(usx, (uint16_t) *s++);
 800088e:	4628      	mov	r0, r5
 8000890:	f7ff ffc8 	bl	8000824 <usart_write>
	buffer_enque(&txring[usx], w);
	USART_ITConfig(usartx[usx], USART_IT_TXE, ENABLE);
}

void usart_print(USARTSerial usx, const char * s) {
	while (*s)
 8000894:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000898:	2900      	cmp	r1, #0
 800089a:	d1f8      	bne.n	800088e <usart_print+0xa>
 800089c:	bd38      	pop	{r3, r4, r5, pc}
 800089e:	bf00      	nop

080008a0 <usart_bare_read>:
		usart_write(usx, (uint16_t) *s++);
}

uint16_t usart_bare_read(USARTSerial usx) {
	return USART_ReceiveData(usartx[usx]);
 80008a0:	f240 038c 	movw	r3, #140	; 0x8c
 80008a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80008ac:	f001 beae 	b.w	800260c <USART_ReceiveData>

080008b0 <usart_read>:
}

uint16_t usart_read(USARTSerial usx) {
 80008b0:	b508      	push	{r3, lr}
	uint16_t w = buffer_deque(&rxring[usx]);
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <usart_read+0x1c>)
 80008b4:	f44f 7283 	mov.w	r2, #262	; 0x106
 80008b8:	fb02 3000 	mla	r0, r2, r0, r3
 80008bc:	f7ff fe9e 	bl	80005fc <buffer_deque>
	if ( w == 0xffff ) return 0; // buffer is empty
 80008c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	return w;
}
 80008c4:	4298      	cmp	r0, r3
 80008c6:	bf08      	it	eq
 80008c8:	2000      	moveq	r0, #0
 80008ca:	bd08      	pop	{r3, pc}
 80008cc:	20001004 	.word	0x20001004

080008d0 <usart_flush>:

void usart_flush(USARTSerial usx) {
 80008d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USART_ITConfig(usartx[usx], USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
 80008d2:	4d2c      	ldr	r5, [pc, #176]	; (8000984 <usart_flush+0xb4>)
	uint16_t w = buffer_deque(&rxring[usx]);
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}

void usart_flush(USARTSerial usx) {
 80008d4:	4604      	mov	r4, r0
	USART_ITConfig(usartx[usx], USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
 80008d6:	2200      	movs	r2, #0
 80008d8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80008dc:	f240 5125 	movw	r1, #1317	; 0x525
 80008e0:	f001 ff36 	bl	8002750 <USART_ITConfig>
	buffer_clear(&rxring[usx]);
 80008e4:	f44f 7783 	mov.w	r7, #262	; 0x106
 80008e8:	4b27      	ldr	r3, [pc, #156]	; (8000988 <usart_flush+0xb8>)
	USART_ClearITPendingBit(usartx[usx], USART_IT_RXNE );
 80008ea:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
	return w;
}

void usart_flush(USARTSerial usx) {
	USART_ITConfig(usartx[usx], USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
 80008ee:	fb07 f704 	mul.w	r7, r7, r4
 80008f2:	18fb      	adds	r3, r7, r3
};

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 80008f4:	2600      	movs	r6, #0
 80008f6:	f8a3 6100 	strh.w	r6, [r3, #256]	; 0x100
	r->tail = 0;
 80008fa:	f8a3 6102 	strh.w	r6, [r3, #258]	; 0x102
	r->count = 0;
 80008fe:	f8a3 6104 	strh.w	r6, [r3, #260]	; 0x104
}

void usart_flush(USARTSerial usx) {
	USART_ITConfig(usartx[usx], USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
	USART_ClearITPendingBit(usartx[usx], USART_IT_RXNE );
 8000902:	f240 5125 	movw	r1, #1317	; 0x525
 8000906:	f001 ff6d 	bl	80027e4 <USART_ClearITPendingBit>
	USART_ITConfig(usartx[usx], USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 800090a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800090e:	f240 5125 	movw	r1, #1317	; 0x525
 8000912:	2201      	movs	r2, #1
 8000914:	f001 ff1c 	bl	8002750 <USART_ITConfig>
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
 8000918:	4632      	mov	r2, r6
 800091a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800091e:	f240 7127 	movw	r1, #1831	; 0x727
 8000922:	f001 ff15 	bl	8002750 <USART_ITConfig>
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <usart_flush+0xbc>)
	while ( buffer_count(&txring[usx]) > 0 ) {
 8000928:	19df      	adds	r7, r3, r7
 800092a:	f8b7 6104 	ldrh.w	r6, [r7, #260]	; 0x104
 800092e:	b1de      	cbz	r6, 8000968 <usart_flush+0x98>
		while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET);
 8000930:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	f001 ff27 	bl	8002788 <USART_GetFlagStatus>
 800093a:	2800      	cmp	r0, #0
 800093c:	d0f8      	beq.n	8000930 <usart_flush+0x60>
		USART_SendData(usartx[usx], buffer_deque(&txring[usx]));
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <usart_flush+0xb4>)
 8000940:	4638      	mov	r0, r7
 8000942:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 8000946:	f7ff fe59 	bl	80005fc <buffer_deque>
 800094a:	4601      	mov	r1, r0
 800094c:	4630      	mov	r0, r6
 800094e:	f001 fe59 	bl	8002604 <USART_SendData>
		while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TC ) == RESET);
 8000952:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000956:	2140      	movs	r1, #64	; 0x40
 8000958:	f001 ff16 	bl	8002788 <USART_GetFlagStatus>
 800095c:	2800      	cmp	r0, #0
 800095e:	d0f8      	beq.n	8000952 <usart_flush+0x82>
	USART_ITConfig(usartx[usx], USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
	USART_ClearITPendingBit(usartx[usx], USART_IT_RXNE );
	USART_ITConfig(usartx[usx], USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
	while ( buffer_count(&txring[usx]) > 0 ) {
 8000960:	f8b7 6104 	ldrh.w	r6, [r7, #260]	; 0x104
 8000964:	2e00      	cmp	r6, #0
 8000966:	d1e3      	bne.n	8000930 <usart_flush+0x60>
		while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET);
		USART_SendData(usartx[usx], buffer_deque(&txring[usx]));
		while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(usartx[usx], USART_IT_TXE );
 8000968:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800096c:	f240 7127 	movw	r1, #1831	; 0x727
 8000970:	f001 ff38 	bl	80027e4 <USART_ClearITPendingBit>
};

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000974:	f8a7 6100 	strh.w	r6, [r7, #256]	; 0x100
	r->tail = 0;
 8000978:	f8a7 6102 	strh.w	r6, [r7, #258]	; 0x102
	r->count = 0;
 800097c:	f8a7 6104 	strh.w	r6, [r7, #260]	; 0x104
		USART_SendData(usartx[usx], buffer_deque(&txring[usx]));
		while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(usartx[usx], USART_IT_TXE );
	buffer_clear(&txring[usx]);
}
 8000980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000982:	bf00      	nop
 8000984:	2000008c 	.word	0x2000008c
 8000988:	20001004 	.word	0x20001004
 800098c:	200009e0 	.word	0x200009e0

08000990 <usart_peek>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <usart_peek+0x2c>)
	USART_ClearITPendingBit(usartx[usx], USART_IT_TXE );
	buffer_clear(&txring[usx]);
}

uint16_t usart_peek(USARTSerial usx) {
	if ( ! buffer_count(&rxring[usx]) == 0 )
 8000992:	f44f 7283 	mov.w	r2, #262	; 0x106
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000996:	fb02 3200 	mla	r2, r2, r0, r3
	USART_ClearITPendingBit(usartx[usx], USART_IT_TXE );
	buffer_clear(&txring[usx]);
}

uint16_t usart_peek(USARTSerial usx) {
	if ( ! buffer_count(&rxring[usx]) == 0 )
 800099a:	f8b2 1104 	ldrh.w	r1, [r2, #260]	; 0x104
 800099e:	b911      	cbnz	r1, 80009a6 <usart_peek+0x16>
		return rxring[usx].buf[rxring[usx].tail];
	return 0xffff;
 80009a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 80009a4:	4770      	bx	lr
	buffer_clear(&txring[usx]);
}

uint16_t usart_peek(USARTSerial usx) {
	if ( ! buffer_count(&rxring[usx]) == 0 )
		return rxring[usx].buf[rxring[usx].tail];
 80009a6:	f9b2 2102 	ldrsh.w	r2, [r2, #258]	; 0x102
 80009aa:	eb00 1180 	add.w	r1, r0, r0, lsl #6
 80009ae:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80009b2:	1880      	adds	r0, r0, r2
 80009b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20001004 	.word	0x20001004

080009c0 <usart_available>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 80009c0:	f241 0304 	movw	r3, #4100	; 0x1004
 80009c4:	f44f 7283 	mov.w	r2, #262	; 0x106
 80009c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009cc:	fb02 3300 	mla	r3, r2, r0, r3
	return 0xffff;
}

uint16_t usart_available(USARTSerial usx) {
	return buffer_count(&rxring[usx]);
}
 80009d0:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <USART1_IRQHandler>:


// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 80009d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
}


// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 80009dc:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 80009de:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80009e2:	f240 5125 	movw	r1, #1317	; 0x525
 80009e6:	f001 fed9 	bl	800279c <USART_GetITStatus>
 80009ea:	2800      	cmp	r0, #0
 80009ec:	d12b      	bne.n	8000a46 <USART1_IRQHandler+0x6e>
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 80009ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80009f2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80009f6:	f240 7127 	movw	r1, #1831	; 0x727
 80009fa:	f001 fecf 	bl	800279c <USART_GetITStatus>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	d020      	beq.n	8000a44 <USART1_IRQHandler+0x6c>
		if (txring[USART1Serial].count == 0) {
 8000a02:	4816      	ldr	r0, [pc, #88]	; (8000a5c <USART1_IRQHandler+0x84>)
 8000a04:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8000a08:	b152      	cbz	r2, 8000a20 <USART1_IRQHandler+0x48>
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
 8000a0a:	f7ff fdf7 	bl	80005fc <buffer_deque>
 8000a0e:	4601      	mov	r1, r0
 8000a10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a14:	f2c4 0001 	movt	r0, #16385	; 0x4001
		}
	}
}
 8000a18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
 8000a1c:	f001 bdf2 	b.w	8002604 <USART_SendData>
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 8000a20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a24:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000a28:	f240 7127 	movw	r1, #1831	; 0x727
 8000a2c:	f001 fe90 	bl	8002750 <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000a30:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a34:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000a38:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
		}
	}
}
 8000a3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000a40:	f001 bed0 	b.w	80027e4 <USART_ClearITPendingBit>
 8000a44:	bd08      	pop	{r3, pc}

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
 8000a46:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a4a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000a4e:	f001 fddd 	bl	800260c <USART_ReceiveData>
 8000a52:	4601      	mov	r1, r0
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <USART1_IRQHandler+0x88>)
 8000a56:	f7ff fdad 	bl	80005b4 <buffer_enque>
 8000a5a:	e7c8      	b.n	80009ee <USART1_IRQHandler+0x16>
 8000a5c:	200009e0 	.word	0x200009e0
 8000a60:	20001004 	.word	0x20001004

08000a64 <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void) {
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8000a64:	f44f 4088 	mov.w	r0, #17408	; 0x4400
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
		}
	}
}

void USART2_IRQHandler(void) {
 8000a68:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8000a6a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000a6e:	f240 5125 	movw	r1, #1317	; 0x525
 8000a72:	f001 fe93 	bl	800279c <USART_GetITStatus>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	d12d      	bne.n	8000ad6 <USART2_IRQHandler+0x72>
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
 8000a7a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000a7e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000a82:	f240 7127 	movw	r1, #1831	; 0x727
 8000a86:	f001 fe89 	bl	800279c <USART_GetITStatus>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	d022      	beq.n	8000ad4 <USART2_IRQHandler+0x70>
		if (txring[USART2Serial].count == 0) {
 8000a8e:	4817      	ldr	r0, [pc, #92]	; (8000aec <USART2_IRQHandler+0x88>)
 8000a90:	f8b0 220a 	ldrh.w	r2, [r0, #522]	; 0x20a
 8000a94:	b162      	cbz	r2, 8000ab0 <USART2_IRQHandler+0x4c>
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
 8000a96:	f500 7083 	add.w	r0, r0, #262	; 0x106
 8000a9a:	f7ff fdaf 	bl	80005fc <buffer_deque>
 8000a9e:	4601      	mov	r1, r0
 8000aa0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000aa4:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 8000aa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
 8000aac:	f001 bdaa 	b.w	8002604 <USART_SendData>
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
 8000ab0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000ab4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000ab8:	f240 7127 	movw	r1, #1831	; 0x727
 8000abc:	f001 fe48 	bl	8002750 <USART_ITConfig>
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000ac0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000ac4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000ac8:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
		}
	}
}
 8000acc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000ad0:	f001 be88 	b.w	80027e4 <USART_ClearITPendingBit>
 8000ad4:	bd08      	pop	{r3, pc}
	}
}

void USART2_IRQHandler(void) {
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
 8000ad6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000ada:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000ade:	f001 fd95 	bl	800260c <USART_ReceiveData>
 8000ae2:	4601      	mov	r1, r0
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <USART2_IRQHandler+0x8c>)
 8000ae6:	f7ff fd65 	bl	80005b4 <buffer_enque>
 8000aea:	e7c6      	b.n	8000a7a <USART2_IRQHandler+0x16>
 8000aec:	200009e0 	.word	0x200009e0
 8000af0:	2000110a 	.word	0x2000110a

08000af4 <USART3_IRQHandler>:
		}
	}
}

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8000af4:	f44f 4090 	mov.w	r0, #18432	; 0x4800
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
		}
	}
}

void USART3_IRQHandler(void) {
 8000af8:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8000afa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000afe:	f240 5125 	movw	r1, #1317	; 0x525
 8000b02:	f001 fe4b 	bl	800279c <USART_GetITStatus>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	d12d      	bne.n	8000b66 <USART3_IRQHandler+0x72>
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8000b0a:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000b0e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000b12:	f240 7127 	movw	r1, #1831	; 0x727
 8000b16:	f001 fe41 	bl	800279c <USART_GetITStatus>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	d022      	beq.n	8000b64 <USART3_IRQHandler+0x70>
		if (txring[USART3Serial].count == 0) {
 8000b1e:	4817      	ldr	r0, [pc, #92]	; (8000b7c <USART3_IRQHandler+0x88>)
 8000b20:	f8b0 2310 	ldrh.w	r2, [r0, #784]	; 0x310
 8000b24:	b162      	cbz	r2, 8000b40 <USART3_IRQHandler+0x4c>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
 8000b26:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 8000b2a:	f7ff fd67 	bl	80005fc <buffer_deque>
 8000b2e:	4601      	mov	r1, r0
 8000b30:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000b34:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 8000b38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
 8000b3c:	f001 bd62 	b.w	8002604 <USART_SendData>
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8000b40:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000b44:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000b48:	f240 7127 	movw	r1, #1831	; 0x727
 8000b4c:	f001 fe00 	bl	8002750 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000b50:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000b54:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000b58:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
		}
	}
}
 8000b5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000b60:	f001 be40 	b.w	80027e4 <USART_ClearITPendingBit>
 8000b64:	bd08      	pop	{r3, pc}
	}
}

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
 8000b66:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000b6a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000b6e:	f001 fd4d 	bl	800260c <USART_ReceiveData>
 8000b72:	4601      	mov	r1, r0
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <USART3_IRQHandler+0x8c>)
 8000b76:	f7ff fd1d 	bl	80005b4 <buffer_enque>
 8000b7a:	e7c6      	b.n	8000b0a <USART3_IRQHandler+0x16>
 8000b7c:	200009e0 	.word	0x200009e0
 8000b80:	20001210 	.word	0x20001210

08000b84 <UART4_IRQHandler>:
		}
	}
}

void UART4_IRQHandler(void) {
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 8000b84:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
		}
	}
}

void UART4_IRQHandler(void) {
 8000b88:	b508      	push	{r3, lr}
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 8000b8a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000b8e:	f240 5125 	movw	r1, #1317	; 0x525
 8000b92:	f001 fe03 	bl	800279c <USART_GetITStatus>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d12d      	bne.n	8000bf6 <UART4_IRQHandler+0x72>
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
 8000b9a:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8000b9e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000ba2:	f240 7127 	movw	r1, #1831	; 0x727
 8000ba6:	f001 fdf9 	bl	800279c <USART_GetITStatus>
 8000baa:	2800      	cmp	r0, #0
 8000bac:	d022      	beq.n	8000bf4 <UART4_IRQHandler+0x70>
		if (txring[UART4Serial].count == 0) {
 8000bae:	4817      	ldr	r0, [pc, #92]	; (8000c0c <UART4_IRQHandler+0x88>)
 8000bb0:	f8b0 2416 	ldrh.w	r2, [r0, #1046]	; 0x416
 8000bb4:	b162      	cbz	r2, 8000bd0 <UART4_IRQHandler+0x4c>
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
 8000bb6:	f200 3012 	addw	r0, r0, #786	; 0x312
 8000bba:	f7ff fd1f 	bl	80005fc <buffer_deque>
 8000bbe:	4601      	mov	r1, r0
 8000bc0:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8000bc4:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 8000bc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
 8000bcc:	f001 bd1a 	b.w	8002604 <USART_SendData>
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
 8000bd0:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8000bd4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000bd8:	f240 7127 	movw	r1, #1831	; 0x727
 8000bdc:	f001 fdb8 	bl	8002750 <USART_ITConfig>
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8000be0:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8000be4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000be8:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
		}
	}
}
 8000bec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8000bf0:	f001 bdf8 	b.w	80027e4 <USART_ClearITPendingBit>
 8000bf4:	bd08      	pop	{r3, pc}
	}
}

void UART4_IRQHandler(void) {
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
 8000bf6:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8000bfa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000bfe:	f001 fd05 	bl	800260c <USART_ReceiveData>
 8000c02:	4601      	mov	r1, r0
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <UART4_IRQHandler+0x8c>)
 8000c06:	f7ff fcd5 	bl	80005b4 <buffer_enque>
 8000c0a:	e7c6      	b.n	8000b9a <UART4_IRQHandler+0x16>
 8000c0c:	200009e0 	.word	0x200009e0
 8000c10:	20001316 	.word	0x20001316

08000c14 <UART5_IRQHandler>:
		}
	}
}

void UART5_IRQHandler(void) {
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
 8000c14:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
		}
	}
}

void UART5_IRQHandler(void) {
 8000c18:	b508      	push	{r3, lr}
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
 8000c1a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000c1e:	f240 5125 	movw	r1, #1317	; 0x525
 8000c22:	f001 fdbb 	bl	800279c <USART_GetITStatus>
 8000c26:	2800      	cmp	r0, #0
 8000c28:	d12d      	bne.n	8000c86 <UART5_IRQHandler+0x72>
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8000c2a:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000c2e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000c32:	f240 7127 	movw	r1, #1831	; 0x727
 8000c36:	f001 fdb1 	bl	800279c <USART_GetITStatus>
 8000c3a:	2800      	cmp	r0, #0
 8000c3c:	d022      	beq.n	8000c84 <UART5_IRQHandler+0x70>
		if (txring[UART5Serial].count == 0) {
 8000c3e:	4817      	ldr	r0, [pc, #92]	; (8000c9c <UART5_IRQHandler+0x88>)
 8000c40:	f8b0 251c 	ldrh.w	r2, [r0, #1308]	; 0x51c
 8000c44:	b162      	cbz	r2, 8000c60 <UART5_IRQHandler+0x4c>
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
 8000c46:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 8000c4a:	f7ff fcd7 	bl	80005fc <buffer_deque>
 8000c4e:	4601      	mov	r1, r0
 8000c50:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8000c54:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 8000c58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
 8000c5c:	f001 bcd2 	b.w	8002604 <USART_SendData>
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
 8000c60:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8000c64:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000c68:	f240 7127 	movw	r1, #1831	; 0x727
 8000c6c:	f001 fd70 	bl	8002750 <USART_ITConfig>
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
 8000c70:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8000c74:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000c78:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
		}
	}
}
 8000c7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
 8000c80:	f001 bdb0 	b.w	80027e4 <USART_ClearITPendingBit>
 8000c84:	bd08      	pop	{r3, pc}
	}
}

void UART5_IRQHandler(void) {
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
 8000c86:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8000c8a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000c8e:	f001 fcbd 	bl	800260c <USART_ReceiveData>
 8000c92:	4601      	mov	r1, r0
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <UART5_IRQHandler+0x8c>)
 8000c96:	f7ff fc8d 	bl	80005b4 <buffer_enque>
 8000c9a:	e7c6      	b.n	8000c2a <UART5_IRQHandler+0x16>
 8000c9c:	200009e0 	.word	0x200009e0
 8000ca0:	2000141c 	.word	0x2000141c

08000ca4 <USART6_IRQHandler>:
		}
	}
}

void USART6_IRQHandler(void) {
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
 8000ca4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
		}
	}
}

void USART6_IRQHandler(void) {
 8000ca8:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
 8000caa:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000cae:	f240 5125 	movw	r1, #1317	; 0x525
 8000cb2:	f001 fd73 	bl	800279c <USART_GetITStatus>
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	d12d      	bne.n	8000d16 <USART6_IRQHandler+0x72>
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
 8000cba:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000cbe:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000cc2:	f240 7127 	movw	r1, #1831	; 0x727
 8000cc6:	f001 fd69 	bl	800279c <USART_GetITStatus>
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	d022      	beq.n	8000d14 <USART6_IRQHandler+0x70>
		if (txring[USART6Serial].count == 0) {
 8000cce:	4817      	ldr	r0, [pc, #92]	; (8000d2c <USART6_IRQHandler+0x88>)
 8000cd0:	f8b0 2622 	ldrh.w	r2, [r0, #1570]	; 0x622
 8000cd4:	b162      	cbz	r2, 8000cf0 <USART6_IRQHandler+0x4c>
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
 8000cd6:	f200 501e 	addw	r0, r0, #1310	; 0x51e
 8000cda:	f7ff fc8f 	bl	80005fc <buffer_deque>
 8000cde:	4601      	mov	r1, r0
 8000ce0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000ce4:	f2c4 0001 	movt	r0, #16385	; 0x4001
		}
	}
}
 8000ce8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
 8000cec:	f001 bc8a 	b.w	8002604 <USART_SendData>
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
 8000cf0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000cf4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000cf8:	f240 7127 	movw	r1, #1831	; 0x727
 8000cfc:	f001 fd28 	bl	8002750 <USART_ITConfig>
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
 8000d00:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000d04:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000d08:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
		}
	}
}
 8000d0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
 8000d10:	f001 bd68 	b.w	80027e4 <USART_ClearITPendingBit>
 8000d14:	bd08      	pop	{r3, pc}
	}
}

void USART6_IRQHandler(void) {
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
 8000d16:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000d1a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000d1e:	f001 fc75 	bl	800260c <USART_ReceiveData>
 8000d22:	4601      	mov	r1, r0
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <USART6_IRQHandler+0x8c>)
 8000d26:	f7ff fc45 	bl	80005b4 <buffer_enque>
 8000d2a:	e7c6      	b.n	8000cba <USART6_IRQHandler+0x16>
 8000d2c:	200009e0 	.word	0x200009e0
 8000d30:	20001522 	.word	0x20001522

08000d34 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000d34:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000d38:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000d3c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000d40:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000d44:	60d8      	str	r0, [r3, #12]
}
 8000d46:	4770      	bx	lr

08000d48 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000d48:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000d4a:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000d4c:	b97b      	cbnz	r3, 8000d6e <NVIC_Init+0x26>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d4e:	7802      	ldrb	r2, [r0, #0]
 8000d50:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000d54:	0951      	lsrs	r1, r2, #5
 8000d56:	f2ce 0300 	movt	r3, #57344	; 0xe000
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d5a:	f002 021f 	and.w	r2, r2, #31
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d5e:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa10 f202 	lsls.w	r2, r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d66:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000d6a:	bc30      	pop	{r4, r5}
 8000d6c:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000d6e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000d72:	f2ce 0300 	movt	r3, #57344	; 0xe000
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000d76:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000d78:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000d7a:	7884      	ldrb	r4, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d7c:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000d7e:	43d2      	mvns	r2, r2
 8000d80:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8000d84:	f1c2 0104 	rsb	r1, r2, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000d88:	b2c9      	uxtb	r1, r1
 8000d8a:	fa15 f101 	lsls.w	r1, r5, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8000d8e:	250f      	movs	r5, #15
 8000d90:	fa55 f202 	asrs.w	r2, r5, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000d94:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000d96:	4022      	ands	r2, r4
 8000d98:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d9a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000d9e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000da6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000daa:	7802      	ldrb	r2, [r0, #0]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000dac:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000db0:	0951      	lsrs	r1, r2, #5
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000db2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000db6:	f002 021f 	and.w	r2, r2, #31
 8000dba:	2001      	movs	r0, #1
 8000dbc:	fa10 f202 	lsls.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000dc0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8000dc4:	e7d1      	b.n	8000d6a <NVIC_Init+0x22>
 8000dc6:	bf00      	nop

08000dc8 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000dc8:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8000dcc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000dd0:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000dd4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000dd8:	4301      	orrs	r1, r0
 8000dda:	6099      	str	r1, [r3, #8]
}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000de0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000de4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000de8:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000dea:	b919      	cbnz	r1, 8000df4 <NVIC_SystemLPConfig+0x14>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000dec:	ea22 0000 	bic.w	r0, r2, r0
 8000df0:	6118      	str	r0, [r3, #16]
 8000df2:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000df4:	4310      	orrs	r0, r2
 8000df6:	6118      	str	r0, [r3, #16]
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000dfc:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000e00:	f2ce 0300 	movt	r3, #57344	; 0xe000
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000e04:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	bf0c      	ite	eq
 8000e0a:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000e0e:	f022 0204 	bicne.w	r2, r2, #4
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000e18:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e20:	4298      	cmp	r0, r3
 8000e22:	d03c      	beq.n	8000e9e <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8000e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e2c:	4298      	cmp	r0, r3
 8000e2e:	d040      	beq.n	8000eb2 <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8000e30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	d044      	beq.n	8000ec6 <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8000e3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e44:	4298      	cmp	r0, r3
 8000e46:	d048      	beq.n	8000eda <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 8000e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e50:	4298      	cmp	r0, r3
 8000e52:	d04c      	beq.n	8000eee <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8000e54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e5c:	4298      	cmp	r0, r3
 8000e5e:	d050      	beq.n	8000f02 <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 8000e60:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	d054      	beq.n	8000f16 <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 8000e6c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e74:	4298      	cmp	r0, r3
 8000e76:	d058      	beq.n	8000f2a <GPIO_DeInit+0x112>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOI)
 8000e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e80:	4298      	cmp	r0, r3
 8000e82:	d000      	beq.n	8000e86 <GPIO_DeInit+0x6e>
 8000e84:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000e86:	2101      	movs	r1, #1
 8000e88:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e8c:	f000 fab2 	bl	80013f4 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000e90:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e94:	2100      	movs	r1, #0
    }
  }
}
 8000e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000e9a:	f000 baab 	b.w	80013f4 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	4601      	mov	r1, r0
 8000ea2:	f000 faa7 	bl	80013f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000eae:	f000 baa1 	b.w	80013f4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	f000 fa9d 	bl	80013f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8000eba:	2002      	movs	r0, #2
 8000ebc:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000ebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8000ec2:	f000 ba97 	b.w	80013f4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000ec6:	2004      	movs	r0, #4
 8000ec8:	2101      	movs	r1, #1
 8000eca:	f000 fa93 	bl	80013f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8000ece:	2004      	movs	r0, #4
 8000ed0:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000ed2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8000ed6:	f000 ba8d 	b.w	80013f4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000eda:	2008      	movs	r0, #8
 8000edc:	2101      	movs	r1, #1
 8000ede:	f000 fa89 	bl	80013f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8000ee2:	2008      	movs	r0, #8
 8000ee4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000ee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8000eea:	f000 ba83 	b.w	80013f4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000eee:	2010      	movs	r0, #16
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	f000 fa7f 	bl	80013f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000ef6:	2010      	movs	r0, #16
 8000ef8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000efe:	f000 ba79 	b.w	80013f4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000f02:	2020      	movs	r0, #32
 8000f04:	2101      	movs	r1, #1
 8000f06:	f000 fa75 	bl	80013f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000f0a:	2020      	movs	r0, #32
 8000f0c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000f0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000f12:	f000 ba6f 	b.w	80013f4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000f16:	2040      	movs	r0, #64	; 0x40
 8000f18:	2101      	movs	r1, #1
 8000f1a:	f000 fa6b 	bl	80013f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000f1e:	2040      	movs	r0, #64	; 0x40
 8000f20:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000f22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000f26:	f000 ba65 	b.w	80013f4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000f2a:	2080      	movs	r0, #128	; 0x80
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	f000 fa61 	bl	80013f4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000f32:	2080      	movs	r0, #128	; 0x80
 8000f34:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000f36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000f3a:	f000 ba5b 	b.w	80013f4 <RCC_AHB1PeriphResetCmd>
 8000f3e:	bf00      	nop

08000f40 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f40:	2300      	movs	r3, #0
 8000f42:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f46:	680a      	ldr	r2, [r1, #0]
 8000f48:	461c      	mov	r4, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000f4a:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000f4c:	f04f 0803 	mov.w	r8, #3
 8000f50:	e003      	b.n	8000f5a <GPIO_Init+0x1a>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f52:	3401      	adds	r4, #1
 8000f54:	3302      	adds	r3, #2
 8000f56:	2c10      	cmp	r4, #16
 8000f58:	d02b      	beq.n	8000fb2 <GPIO_Init+0x72>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000f5a:	fa17 f504 	lsls.w	r5, r7, r4
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000f5e:	ea05 0602 	and.w	r6, r5, r2

    if (currentpin == pos)
 8000f62:	42ae      	cmp	r6, r5
 8000f64:	d1f5      	bne.n	8000f52 <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000f66:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000f6a:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000f6e:	fa08 f503 	lsl.w	r5, r8, r3
 8000f72:	43ed      	mvns	r5, r5
 8000f74:	ea05 0909 	and.w	r9, r5, r9
 8000f78:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000f7c:	f8d0 9000 	ldr.w	r9, [r0]
 8000f80:	fa0c fa03 	lsl.w	sl, ip, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000f84:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000f88:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000f8c:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000f90:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000f94:	d910      	bls.n	8000fb8 <GPIO_Init+0x78>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000f96:	68c6      	ldr	r6, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000f98:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000f9c:	4035      	ands	r5, r6
 8000f9e:	60c5      	str	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000fa0:	68c6      	ldr	r6, [r0, #12]
 8000fa2:	fa0c f503 	lsl.w	r5, ip, r3
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000fa6:	3401      	adds	r4, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000fa8:	4335      	orrs	r5, r6
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000faa:	3302      	adds	r3, #2
 8000fac:	2c10      	cmp	r4, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000fae:	60c5      	str	r5, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000fb0:	d1d3      	bne.n	8000f5a <GPIO_Init+0x1a>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000fb2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8000fb6:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000fb8:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000fbc:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000fc0:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000fc4:	ea05 0a0a 	and.w	sl, r5, sl
 8000fc8:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000fcc:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8000fd0:	fa09 f903 	lsl.w	r9, r9, r3
 8000fd4:	ea49 090a 	orr.w	r9, r9, sl
 8000fd8:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000fdc:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8000fe0:	ea29 0606 	bic.w	r6, r9, r6
 8000fe4:	6046      	str	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000fe6:	6846      	ldr	r6, [r0, #4]
 8000fe8:	fa0c fc04 	lsl.w	ip, ip, r4
 8000fec:	fa1f fc8c 	uxth.w	ip, ip
 8000ff0:	ea4c 0606 	orr.w	r6, ip, r6
 8000ff4:	6046      	str	r6, [r0, #4]
 8000ff6:	e7ce      	b.n	8000f96 <GPIO_Init+0x56>

08000ff8 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000ff8:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000ffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffe:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001000:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001002:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001004:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001006:	71c3      	strb	r3, [r0, #7]
}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800100c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 800100e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001012:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8001014:	9b01      	ldr	r3, [sp, #4]
 8001016:	430b      	orrs	r3, r1
 8001018:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800101a:	9b01      	ldr	r3, [sp, #4]
 800101c:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800101e:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001020:	9b01      	ldr	r3, [sp, #4]
 8001022:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001024:	69c3      	ldr	r3, [r0, #28]
 8001026:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001028:	69c3      	ldr	r3, [r0, #28]
 800102a:	9301      	str	r3, [sp, #4]
}
 800102c:	b002      	add	sp, #8
 800102e:	4770      	bx	lr

08001030 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001030:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 8001032:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001034:	bf0c      	ite	eq
 8001036:	2000      	moveq	r0, #0
 8001038:	2001      	movne	r0, #1
 800103a:	4770      	bx	lr

0800103c <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800103c:	6900      	ldr	r0, [r0, #16]
}
 800103e:	b280      	uxth	r0, r0
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001044:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 8001046:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001048:	bf0c      	ite	eq
 800104a:	2000      	moveq	r0, #0
 800104c:	2001      	movne	r0, #1
 800104e:	4770      	bx	lr

08001050 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8001050:	6940      	ldr	r0, [r0, #20]
}
 8001052:	b280      	uxth	r0, r0
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8001058:	8301      	strh	r1, [r0, #24]
}
 800105a:	4770      	bx	lr

0800105c <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800105c:	8341      	strh	r1, [r0, #26]
}
 800105e:	4770      	bx	lr

08001060 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001060:	b90a      	cbnz	r2, 8001066 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8001062:	8341      	strh	r1, [r0, #26]
 8001064:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001066:	8301      	strh	r1, [r0, #24]
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop

0800106c <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800106c:	6141      	str	r1, [r0, #20]
}
 800106e:	4770      	bx	lr

08001070 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8001070:	6943      	ldr	r3, [r0, #20]
 8001072:	404b      	eors	r3, r1
 8001074:	6143      	str	r3, [r0, #20]
}
 8001076:	4770      	bx	lr

08001078 <GPIO_PinAFConfig>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001078:	08cb      	lsrs	r3, r1, #3
 800107a:	3308      	adds	r3, #8
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800107c:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001080:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001082:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001084:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8001088:	240f      	movs	r4, #15
 800108a:	408c      	lsls	r4, r1
 800108c:	ea25 0404 	bic.w	r4, r5, r4
 8001090:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001094:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001098:	fa12 f101 	lsls.w	r1, r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800109c:	430c      	orrs	r4, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800109e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
 80010a2:	bc30      	pop	{r4, r5}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80010ac:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010b0:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010b2:	6819      	ldr	r1, [r3, #0]
 80010b4:	f041 0101 	orr.w	r1, r1, #1
 80010b8:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010ba:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010bc:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80010be:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010c2:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80010c6:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010ca:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80010ce:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80010d0:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010d2:	6819      	ldr	r1, [r3, #0]
 80010d4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80010d8:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80010da:	60da      	str	r2, [r3, #12]
}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80010e0:	f643 0302 	movw	r3, #14338	; 0x3802
 80010e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80010ec:	7018      	strb	r0, [r3, #0]
}
 80010ee:	4770      	bx	lr

080010f0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80010f0:	b082      	sub	sp, #8

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80010f2:	f44f 5160 	mov.w	r1, #14336	; 0x3800
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80010fa:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80010fe:	680a      	ldr	r2, [r1, #0]
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8001100:	9b01      	ldr	r3, [sp, #4]
 8001102:	3301      	adds	r3, #1
 8001104:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8001106:	9b01      	ldr	r3, [sp, #4]
 8001108:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800110c:	d001      	beq.n	8001112 <RCC_WaitForHSEStartUp+0x22>
 800110e:	0393      	lsls	r3, r2, #14
 8001110:	d5f5      	bpl.n	80010fe <RCC_WaitForHSEStartUp+0xe>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001112:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001116:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800111a:	6818      	ldr	r0, [r3, #0]
  else
  {
    status = ERROR;
  }
  return (status);
}
 800111c:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8001120:	b002      	add	sp, #8
 8001122:	4770      	bx	lr

08001124 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8001124:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001128:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800112c:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800112e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8001132:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8001136:	601a      	str	r2, [r3, #0]
}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800113c:	2300      	movs	r3, #0
 800113e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001142:	6018      	str	r0, [r3, #0]
}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001148:	f643 0370 	movw	r3, #14448	; 0x3870
 800114c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001150:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001152:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001154:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001156:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001158:	d004      	beq.n	8001164 <RCC_LSEConfig+0x1c>
 800115a:	2804      	cmp	r0, #4
 800115c:	d101      	bne.n	8001162 <RCC_LSEConfig+0x1a>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800115e:	2205      	movs	r2, #5
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8001164:	7018      	strb	r0, [r3, #0]
      break;
 8001166:	4770      	bx	lr

08001168 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8001168:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 800116c:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001170:	6018      	str	r0, [r3, #0]
}
 8001172:	4770      	bx	lr

08001174 <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001174:	4301      	orrs	r1, r0
 8001176:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 800117a:	9900      	ldr	r1, [sp, #0]
 800117c:	085b      	lsrs	r3, r3, #1
 800117e:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8001182:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001186:	3b01      	subs	r3, #1
 8001188:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800118c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8001190:	6042      	str	r2, [r0, #4]
                 (PLLQ << 24);
}
 8001192:	4770      	bx	lr

08001194 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001194:	2360      	movs	r3, #96	; 0x60
 8001196:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800119a:	6018      	str	r0, [r3, #0]
}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80011a0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011a4:	0180      	lsls	r0, r0, #6
 80011a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011aa:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 80011ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 80011b2:	4770      	bx	lr

080011b4 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80011b4:	2368      	movs	r3, #104	; 0x68
 80011b6:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80011ba:	6018      	str	r0, [r3, #0]
}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80011c0:	234c      	movs	r3, #76	; 0x4c
 80011c2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80011c6:	6018      	str	r0, [r3, #0]
}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop

080011cc <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 80011cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011d4:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 80011d6:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 80011da:	4302      	orrs	r2, r0
 80011dc:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80011de:	609a      	str	r2, [r3, #8]
}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop

080011e4 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 80011e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011ec:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 80011ee:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 80011f2:	4302      	orrs	r2, r0
 80011f4:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80011f6:	609a      	str	r2, [r3, #8]
}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop

080011fc <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80011fc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001200:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001204:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8001206:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800120a:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800120c:	609a      	str	r2, [r3, #8]
}
 800120e:	4770      	bx	lr

08001210 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8001210:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001214:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001218:	6898      	ldr	r0, [r3, #8]
}
 800121a:	f000 000c 	and.w	r0, r0, #12
 800121e:	4770      	bx	lr

08001220 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8001220:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001224:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001228:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800122a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800122e:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001230:	609a      	str	r2, [r3, #8]
}
 8001232:	4770      	bx	lr

08001234 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001234:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001238:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800123c:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800123e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001242:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001244:	609a      	str	r2, [r3, #8]
}
 8001246:	4770      	bx	lr

08001248 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001248:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800124c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001250:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8001252:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001256:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800125a:	609a      	str	r2, [r3, #8]
}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop

08001260 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001260:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001264:	f2c4 0302 	movt	r3, #16386	; 0x4002
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001268:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8001270:	2a04      	cmp	r2, #4
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001272:	bf02      	ittt	eq
 8001274:	f44f 5290 	moveq.w	r2, #4608	; 0x1200
 8001278:	f2c0 027a 	movteq	r2, #122	; 0x7a
 800127c:	6002      	streq	r2, [r0, #0]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 800127e:	d006      	beq.n	800128e <RCC_GetClocksFreq+0x2e>
 8001280:	2a08      	cmp	r2, #8
 8001282:	d01e      	beq.n	80012c2 <RCC_GetClocksFreq+0x62>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001284:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8001288:	f2c0 02f4 	movt	r2, #244	; 0xf4
 800128c:	6002      	str	r2, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800128e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001292:	f2c4 0302 	movt	r3, #16386	; 0x4002
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8001296:	491c      	ldr	r1, [pc, #112]	; (8001308 <RCC_GetClocksFreq+0xa8>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001298:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 4;
 800129a:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 800129e:	5d0c      	ldrb	r4, [r1, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80012a0:	40e2      	lsrs	r2, r4
 80012a2:	6042      	str	r2, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80012a4:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 10;
 80012a6:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 80012aa:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80012ac:	fa32 f404 	lsrs.w	r4, r2, r4
 80012b0:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80012b2:	689b      	ldr	r3, [r3, #8]
  tmp = tmp >> 13;
 80012b4:	f3c3 3342 	ubfx	r3, r3, #13, #3
  presc = APBAHBPrescTable[tmp];
 80012b8:	5ccb      	ldrb	r3, [r1, r3]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80012ba:	40da      	lsrs	r2, r3
 80012bc:	60c2      	str	r2, [r0, #12]
}
 80012be:	bc10      	pop	{r4}
 80012c0:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80012c2:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012c4:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
 80012c6:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80012ca:	685c      	ldr	r4, [r3, #4]
 80012cc:	bf15      	itete	ne
 80012ce:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80012d2:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80012d6:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80012da:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80012e2:	fbb3 f2f1 	udiv	r2, r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80012e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80012ee:	f3c4 1488 	ubfx	r4, r4, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80012f8:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80012fa:	fb02 f204 	mul.w	r2, r2, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80012fe:	005b      	lsls	r3, r3, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001300:	fbb2 f2f3 	udiv	r2, r2, r3
 8001304:	6002      	str	r2, [r0, #0]
      break;
 8001306:	e7c2      	b.n	800128e <RCC_GetClocksFreq+0x2e>
 8001308:	200000a4 	.word	0x200000a4

0800130c <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 800130c:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8001310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001314:	d10c      	bne.n	8001330 <RCC_RTCCLKConfig+0x24>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001316:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800131a:	f2c4 0302 	movt	r3, #16386	; 0x4002

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800131e:	f020 4170 	bic.w	r1, r0, #4026531840	; 0xf0000000
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001322:	689a      	ldr	r2, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001324:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8001328:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800132c:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 800132e:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8001330:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001334:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001338:	0500      	lsls	r0, r0, #20
 800133a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800133c:	0d00      	lsrs	r0, r0, #20
 800133e:	4310      	orrs	r0, r2
 8001340:	6718      	str	r0, [r3, #112]	; 0x70
}
 8001342:	4770      	bx	lr

08001344 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001344:	f640 633c 	movw	r3, #3644	; 0xe3c
 8001348:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800134c:	6018      	str	r0, [r3, #0]
}
 800134e:	4770      	bx	lr

08001350 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8001350:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8001354:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001358:	6018      	str	r0, [r3, #0]
}
 800135a:	4770      	bx	lr

0800135c <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 800135c:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8001360:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001364:	6018      	str	r0, [r3, #0]
}
 8001366:	4770      	bx	lr

08001368 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001368:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800136c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001372:	b919      	cbnz	r1, 800137c <RCC_AHB1PeriphClockCmd+0x14>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001374:	ea22 0000 	bic.w	r0, r2, r0
 8001378:	6318      	str	r0, [r3, #48]	; 0x30
 800137a:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800137c:	4310      	orrs	r0, r2
 800137e:	6318      	str	r0, [r3, #48]	; 0x30
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop

08001384 <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001384:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001388:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800138c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800138e:	b919      	cbnz	r1, 8001398 <RCC_AHB2PeriphClockCmd+0x14>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8001390:	ea22 0000 	bic.w	r0, r2, r0
 8001394:	6358      	str	r0, [r3, #52]	; 0x34
 8001396:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001398:	4310      	orrs	r0, r2
 800139a:	6358      	str	r0, [r3, #52]	; 0x34
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80013a0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013aa:	b919      	cbnz	r1, 80013b4 <RCC_AHB3PeriphClockCmd+0x14>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 80013ac:	ea22 0000 	bic.w	r0, r2, r0
 80013b0:	6398      	str	r0, [r3, #56]	; 0x38
 80013b2:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80013b4:	4310      	orrs	r0, r2
 80013b6:	6398      	str	r0, [r3, #56]	; 0x38
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop

080013bc <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80013bc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013c6:	b919      	cbnz	r1, 80013d0 <RCC_APB1PeriphClockCmd+0x14>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80013c8:	ea22 0000 	bic.w	r0, r2, r0
 80013cc:	6418      	str	r0, [r3, #64]	; 0x40
 80013ce:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80013d0:	4310      	orrs	r0, r2
 80013d2:	6418      	str	r0, [r3, #64]	; 0x40
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop

080013d8 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80013d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013e2:	b919      	cbnz	r1, 80013ec <RCC_APB2PeriphClockCmd+0x14>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80013e4:	ea22 0000 	bic.w	r0, r2, r0
 80013e8:	6458      	str	r0, [r3, #68]	; 0x44
 80013ea:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80013ec:	4310      	orrs	r0, r2
 80013ee:	6458      	str	r0, [r3, #68]	; 0x44
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop

080013f4 <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80013f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013fc:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013fe:	b919      	cbnz	r1, 8001408 <RCC_AHB1PeriphResetCmd+0x14>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8001400:	ea22 0000 	bic.w	r0, r2, r0
 8001404:	6118      	str	r0, [r3, #16]
 8001406:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001408:	4310      	orrs	r0, r2
 800140a:	6118      	str	r0, [r3, #16]
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop

08001410 <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001410:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001414:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001418:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800141a:	b919      	cbnz	r1, 8001424 <RCC_AHB2PeriphResetCmd+0x14>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 800141c:	ea22 0000 	bic.w	r0, r2, r0
 8001420:	6158      	str	r0, [r3, #20]
 8001422:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001424:	4310      	orrs	r0, r2
 8001426:	6158      	str	r0, [r3, #20]
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop

0800142c <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800142c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001430:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001434:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001436:	b919      	cbnz	r1, 8001440 <RCC_AHB3PeriphResetCmd+0x14>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8001438:	ea22 0000 	bic.w	r0, r2, r0
 800143c:	6198      	str	r0, [r3, #24]
 800143e:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001440:	4310      	orrs	r0, r2
 8001442:	6198      	str	r0, [r3, #24]
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001448:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800144c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001450:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001452:	b919      	cbnz	r1, 800145c <RCC_APB1PeriphResetCmd+0x14>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001454:	ea22 0000 	bic.w	r0, r2, r0
 8001458:	6218      	str	r0, [r3, #32]
 800145a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800145c:	4310      	orrs	r0, r2
 800145e:	6218      	str	r0, [r3, #32]
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop

08001464 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001464:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001468:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800146c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800146e:	b919      	cbnz	r1, 8001478 <RCC_APB2PeriphResetCmd+0x14>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001470:	ea22 0000 	bic.w	r0, r2, r0
 8001474:	6258      	str	r0, [r3, #36]	; 0x24
 8001476:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001478:	4310      	orrs	r0, r2
 800147a:	6258      	str	r0, [r3, #36]	; 0x24
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001480:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001484:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001488:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800148a:	b919      	cbnz	r1, 8001494 <RCC_AHB1PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 800148c:	ea22 0000 	bic.w	r0, r2, r0
 8001490:	6518      	str	r0, [r3, #80]	; 0x50
 8001492:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001494:	4310      	orrs	r0, r2
 8001496:	6518      	str	r0, [r3, #80]	; 0x50
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop

0800149c <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800149c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014a6:	b919      	cbnz	r1, 80014b0 <RCC_AHB2PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 80014a8:	ea22 0000 	bic.w	r0, r2, r0
 80014ac:	6558      	str	r0, [r3, #84]	; 0x54
 80014ae:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 80014b0:	4310      	orrs	r0, r2
 80014b2:	6558      	str	r0, [r3, #84]	; 0x54
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop

080014b8 <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 80014b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014c2:	b919      	cbnz	r1, 80014cc <RCC_AHB3PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 80014c4:	ea22 0000 	bic.w	r0, r2, r0
 80014c8:	6598      	str	r0, [r3, #88]	; 0x58
 80014ca:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 80014cc:	4310      	orrs	r0, r2
 80014ce:	6598      	str	r0, [r3, #88]	; 0x58
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop

080014d4 <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80014d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014de:	b919      	cbnz	r1, 80014e8 <RCC_APB1PeriphClockLPModeCmd+0x14>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 80014e0:	ea22 0000 	bic.w	r0, r2, r0
 80014e4:	6618      	str	r0, [r3, #96]	; 0x60
 80014e6:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80014e8:	4310      	orrs	r0, r2
 80014ea:	6618      	str	r0, [r3, #96]	; 0x60
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop

080014f0 <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80014f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014fa:	b919      	cbnz	r1, 8001504 <RCC_APB2PeriphClockLPModeCmd+0x14>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 80014fc:	ea22 0000 	bic.w	r0, r2, r0
 8001500:	6658      	str	r0, [r3, #100]	; 0x64
 8001502:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001504:	4310      	orrs	r0, r2
 8001506:	6658      	str	r0, [r3, #100]	; 0x64
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop

0800150c <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800150c:	f643 030d 	movw	r3, #14349	; 0x380d
 8001510:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001514:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001516:	b919      	cbnz	r1, 8001520 <RCC_ITConfig+0x14>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001518:	ea22 0000 	bic.w	r0, r2, r0
 800151c:	7018      	strb	r0, [r3, #0]
 800151e:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001520:	4310      	orrs	r0, r2
 8001522:	7018      	strb	r0, [r3, #0]
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop

08001528 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001528:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 800152a:	2b01      	cmp	r3, #1
 800152c:	d00e      	beq.n	800154c <RCC_GetFlagStatus+0x24>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800152e:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8001530:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001534:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001538:	bf0c      	ite	eq
 800153a:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800153c:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800153e:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001542:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8001546:	f000 0001 	and.w	r0, r0, #1
 800154a:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800154c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001550:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	e7f2      	b.n	800153e <RCC_GetFlagStatus+0x16>

08001558 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001558:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800155c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001560:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001562:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001566:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop

0800156c <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800156c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001570:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001574:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8001576:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8001578:	bf0c      	ite	eq
 800157a:	2000      	moveq	r0, #0
 800157c:	2001      	movne	r0, #1
 800157e:	4770      	bx	lr

08001580 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001580:	f643 030e 	movw	r3, #14350	; 0x380e
 8001584:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001588:	7018      	strb	r0, [r3, #0]
}
 800158a:	4770      	bx	lr

0800158c <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800158c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800158e:	2300      	movs	r3, #0
 8001590:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001594:	4298      	cmp	r0, r3
 8001596:	d05b      	beq.n	8001650 <TIM_DeInit+0xc4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 8001598:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800159c:	d062      	beq.n	8001664 <TIM_DeInit+0xd8>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 800159e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80015a6:	4298      	cmp	r0, r3
 80015a8:	d066      	beq.n	8001678 <TIM_DeInit+0xec>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 80015aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80015b2:	4298      	cmp	r0, r3
 80015b4:	d06a      	beq.n	800168c <TIM_DeInit+0x100>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 80015b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80015be:	4298      	cmp	r0, r3
 80015c0:	d06e      	beq.n	80016a0 <TIM_DeInit+0x114>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 80015c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80015ca:	4298      	cmp	r0, r3
 80015cc:	d072      	beq.n	80016b4 <TIM_DeInit+0x128>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 80015ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80015d6:	4298      	cmp	r0, r3
 80015d8:	d076      	beq.n	80016c8 <TIM_DeInit+0x13c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 80015da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015de:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015e2:	4298      	cmp	r0, r3
 80015e4:	d07a      	beq.n	80016dc <TIM_DeInit+0x150>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 80015e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015ee:	4298      	cmp	r0, r3
 80015f0:	d07e      	beq.n	80016f0 <TIM_DeInit+0x164>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 80015f2:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80015f6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015fa:	4298      	cmp	r0, r3
 80015fc:	f000 8084 	beq.w	8001708 <TIM_DeInit+0x17c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 8001600:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001604:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001608:	4298      	cmp	r0, r3
 800160a:	f000 8089 	beq.w	8001720 <TIM_DeInit+0x194>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 800160e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001612:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001616:	4298      	cmp	r0, r3
 8001618:	f000 808e 	beq.w	8001738 <TIM_DeInit+0x1ac>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 800161c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001620:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001624:	4298      	cmp	r0, r3
 8001626:	f000 8091 	beq.w	800174c <TIM_DeInit+0x1c0>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 800162a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800162e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001632:	4298      	cmp	r0, r3
 8001634:	d000      	beq.n	8001638 <TIM_DeInit+0xac>
 8001636:	bd08      	pop	{r3, pc}
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8001638:	2101      	movs	r1, #1
 800163a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800163e:	f7ff ff03 	bl	8001448 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8001642:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001646:	2100      	movs	r1, #0
    }   
  }
}
 8001648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800164c:	f7ff befc 	b.w	8001448 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001650:	2001      	movs	r0, #1
 8001652:	4601      	mov	r1, r0
 8001654:	f7ff ff06 	bl	8001464 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001658:	2001      	movs	r0, #1
 800165a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800165c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001660:	f7ff bf00 	b.w	8001464 <RCC_APB2PeriphResetCmd>
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001664:	2001      	movs	r0, #1
 8001666:	4601      	mov	r1, r0
 8001668:	f7ff feee 	bl	8001448 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800166c:	2001      	movs	r0, #1
 800166e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001670:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8001674:	f7ff bee8 	b.w	8001448 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001678:	2002      	movs	r0, #2
 800167a:	2101      	movs	r1, #1
 800167c:	f7ff fee4 	bl	8001448 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001680:	2002      	movs	r0, #2
 8001682:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001684:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001688:	f7ff bede 	b.w	8001448 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800168c:	2004      	movs	r0, #4
 800168e:	2101      	movs	r1, #1
 8001690:	f7ff feda 	bl	8001448 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001694:	2004      	movs	r0, #4
 8001696:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800169c:	f7ff bed4 	b.w	8001448 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80016a0:	2008      	movs	r0, #8
 80016a2:	2101      	movs	r1, #1
 80016a4:	f7ff fed0 	bl	8001448 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80016a8:	2008      	movs	r0, #8
 80016aa:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80016ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80016b0:	f7ff beca 	b.w	8001448 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80016b4:	2010      	movs	r0, #16
 80016b6:	2101      	movs	r1, #1
 80016b8:	f7ff fec6 	bl	8001448 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80016bc:	2010      	movs	r0, #16
 80016be:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80016c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80016c4:	f7ff bec0 	b.w	8001448 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80016c8:	2020      	movs	r0, #32
 80016ca:	2101      	movs	r1, #1
 80016cc:	f7ff febc 	bl	8001448 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80016d0:	2020      	movs	r0, #32
 80016d2:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80016d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80016d8:	f7ff beb6 	b.w	8001448 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80016dc:	2002      	movs	r0, #2
 80016de:	2101      	movs	r1, #1
 80016e0:	f7ff fec0 	bl	8001464 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80016e4:	2002      	movs	r0, #2
 80016e6:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80016e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80016ec:	f7ff beba 	b.w	8001464 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80016f0:	2101      	movs	r1, #1
 80016f2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80016f6:	f7ff feb5 	bl	8001464 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80016fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80016fe:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001700:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8001704:	f7ff beae 	b.w	8001464 <RCC_APB2PeriphResetCmd>
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8001708:	2101      	movs	r1, #1
 800170a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800170e:	f7ff fea9 	bl	8001464 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8001712:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001716:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001718:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800171c:	f7ff bea2 	b.w	8001464 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001720:	2101      	movs	r1, #1
 8001722:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001726:	f7ff fe9d 	bl	8001464 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800172a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800172e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001730:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8001734:	f7ff be96 	b.w	8001464 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8001738:	2040      	movs	r0, #64	; 0x40
 800173a:	2101      	movs	r1, #1
 800173c:	f7ff fe84 	bl	8001448 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001740:	2040      	movs	r0, #64	; 0x40
 8001742:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001744:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001748:	f7ff be7e 	b.w	8001448 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 800174c:	2080      	movs	r0, #128	; 0x80
 800174e:	2101      	movs	r1, #1
 8001750:	f7ff fe7a 	bl	8001448 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8001754:	2080      	movs	r0, #128	; 0x80
 8001756:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001758:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800175c:	f7ff be74 	b.w	8001448 <RCC_APB1PeriphResetCmd>

08001760 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001760:	2300      	movs	r3, #0
 8001762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001766:	f2c4 0301 	movt	r3, #16385	; 0x4001
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800176a:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800176c:	f2c4 0201 	movt	r2, #16385	; 0x4001
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001770:	8804      	ldrh	r4, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001772:	4298      	cmp	r0, r3
 8001774:	bf18      	it	ne
 8001776:	4290      	cmpne	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001778:	b2a4      	uxth	r4, r4

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800177a:	bf14      	ite	ne
 800177c:	2300      	movne	r3, #0
 800177e:	2301      	moveq	r3, #1
 8001780:	d008      	beq.n	8001794 <TIM_TimeBaseInit+0x34>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001782:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001786:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800178a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800178e:	bf18      	it	ne
 8001790:	4290      	cmpne	r0, r2
 8001792:	d123      	bne.n	80017dc <TIM_TimeBaseInit+0x7c>
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001794:	f64f 758f 	movw	r5, #65423	; 0xff8f
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001798:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800179a:	4025      	ands	r5, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800179c:	ea45 0402 	orr.w	r4, r5, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80017a0:	f44f 56a0 	mov.w	r6, #5120	; 0x1400
 80017a4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80017a8:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80017ac:	f2c4 0600 	movt	r6, #16384	; 0x4000
 80017b0:	42b0      	cmp	r0, r6
 80017b2:	bf18      	it	ne
 80017b4:	42a8      	cmpne	r0, r5
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80017b6:	bf1f      	itttt	ne
 80017b8:	890d      	ldrhne	r5, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80017ba:	f64f 42ff 	movwne	r2, #64767	; 0xfcff
 80017be:	4022      	andne	r2, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80017c0:	ea42 0405 	orrne.w	r4, r2, r5
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80017c4:	684d      	ldr	r5, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80017c6:	880a      	ldrh	r2, [r1, #0]
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80017c8:	8004      	strh	r4, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80017ca:	62c5      	str	r5, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80017cc:	8502      	strh	r2, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80017ce:	b10b      	cbz	r3, 80017d4 <TIM_TimeBaseInit+0x74>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80017d0:	7a8b      	ldrb	r3, [r1, #10]
 80017d2:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80017d4:	2301      	movs	r3, #1
 80017d6:	8283      	strh	r3, [r0, #20]
}
 80017d8:	bc70      	pop	{r4, r5, r6}
 80017da:	4770      	bx	lr

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80017dc:	f44f 6540 	mov.w	r5, #3072	; 0xc00
 80017e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017e4:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80017e8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80017ec:	4290      	cmp	r0, r2
 80017ee:	bf18      	it	ne
 80017f0:	42a8      	cmpne	r0, r5
 80017f2:	d1d5      	bne.n	80017a0 <TIM_TimeBaseInit+0x40>
 80017f4:	e7ce      	b.n	8001794 <TIM_TimeBaseInit+0x34>
 80017f6:	bf00      	nop

080017f8 <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80017f8:	2300      	movs	r3, #0
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80017fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017fe:	6041      	str	r1, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001800:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001802:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001804:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001806:	7283      	strb	r3, [r0, #10]
}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop

0800180c <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800180c:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800180e:	8282      	strh	r2, [r0, #20]
}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop

08001814 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8001814:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800181a:	041b      	lsls	r3, r3, #16
 800181c:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800181e:	430b      	orrs	r3, r1

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8001820:	8003      	strh	r3, [r0, #0]
}
 8001822:	4770      	bx	lr

08001824 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8001824:	6241      	str	r1, [r0, #36]	; 0x24
}
 8001826:	4770      	bx	lr

08001828 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8001828:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 800182a:	4770      	bx	lr

0800182c <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800182c:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 800182e:	4770      	bx	lr

08001830 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8001830:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8001832:	b280      	uxth	r0, r0
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop

08001838 <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001838:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800183a:	b929      	cbnz	r1, 8001848 <TIM_UpdateDisableConfig+0x10>
    TIMx->CR1 |= TIM_CR1_UDIS;
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800183c:	f023 0302 	bic.w	r3, r3, #2
 8001840:	041b      	lsls	r3, r3, #16
 8001842:	0c1b      	lsrs	r3, r3, #16
 8001844:	8003      	strh	r3, [r0, #0]
 8001846:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001848:	b29b      	uxth	r3, r3
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	8003      	strh	r3, [r0, #0]
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop

08001854 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8001854:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8001856:	b929      	cbnz	r1, 8001864 <TIM_UpdateRequestConfig+0x10>
    TIMx->CR1 |= TIM_CR1_URS;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8001858:	f023 0304 	bic.w	r3, r3, #4
 800185c:	041b      	lsls	r3, r3, #16
 800185e:	0c1b      	lsrs	r3, r3, #16
 8001860:	8003      	strh	r3, [r0, #0]
 8001862:	4770      	bx	lr
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8001864:	b29b      	uxth	r3, r3
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	8003      	strh	r3, [r0, #0]
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop

08001870 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001870:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001872:	b929      	cbnz	r1, 8001880 <TIM_ARRPreloadConfig+0x10>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8001874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001878:	041b      	lsls	r3, r3, #16
 800187a:	0c1b      	lsrs	r3, r3, #16
 800187c:	8003      	strh	r3, [r0, #0]
 800187e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001880:	b29b      	uxth	r3, r3
 8001882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001886:	8003      	strh	r3, [r0, #0]
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop

0800188c <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800188c:	8803      	ldrh	r3, [r0, #0]
 800188e:	f023 0308 	bic.w	r3, r3, #8
 8001892:	041b      	lsls	r3, r3, #16
 8001894:	0c1b      	lsrs	r3, r3, #16
 8001896:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8001898:	8803      	ldrh	r3, [r0, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	430b      	orrs	r3, r1
 800189e:	8003      	strh	r3, [r0, #0]
}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop

080018a4 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 80018a4:	8803      	ldrh	r3, [r0, #0]
 80018a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018aa:	041b      	lsls	r3, r3, #16
 80018ac:	0c1b      	lsrs	r3, r3, #16
 80018ae:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 80018b0:	8803      	ldrh	r3, [r0, #0]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	430b      	orrs	r3, r1
 80018b6:	8003      	strh	r3, [r0, #0]
}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop

080018bc <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80018bc:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80018be:	b929      	cbnz	r1, 80018cc <TIM_Cmd+0x10>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80018c0:	f023 0301 	bic.w	r3, r3, #1
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	8003      	strh	r3, [r0, #0]
 80018ca:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	8003      	strh	r3, [r0, #0]
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop

080018d8 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80018d8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80018dc:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80018de:	898d      	ldrh	r5, [r1, #12]
 80018e0:	884f      	ldrh	r7, [r1, #2]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80018e2:	f8b1 c000 	ldrh.w	ip, [r1]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80018e6:	f024 0401 	bic.w	r4, r4, #1
 80018ea:	0424      	lsls	r4, r4, #16
 80018ec:	0c24      	lsrs	r4, r4, #16
 80018ee:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018f0:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018f2:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80018f4:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80018f6:	432f      	orrs	r7, r5
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80018f8:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80018fc:	2500      	movs	r5, #0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80018fe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001902:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8001906:	0412      	lsls	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8001908:	041b      	lsls	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800190a:	f2c4 0601 	movt	r6, #16385	; 0x4001
 800190e:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8001912:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8001914:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001916:	b2bf      	uxth	r7, r7
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001918:	42a8      	cmp	r0, r5
 800191a:	bf18      	it	ne
 800191c:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800191e:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001920:	ea42 020c 	orr.w	r2, r2, ip
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001924:	ea47 0303 	orr.w	r3, r7, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001928:	d116      	bne.n	8001958 <TIM_OC1Init+0x80>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800192a:	f64f 75f7 	movw	r5, #65527	; 0xfff7
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800192e:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001932:	f8b1 8012 	ldrh.w	r8, [r1, #18]
 8001936:	8a0f      	ldrh	r7, [r1, #16]
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001938:	888e      	ldrh	r6, [r1, #4]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800193a:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800193c:	ea45 0c0c 	orr.w	ip, r5, ip
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8001940:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8001944:	f64f 45ff 	movw	r5, #64767	; 0xfcff
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001948:	ea48 0707 	orr.w	r7, r8, r7
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800194c:	4025      	ands	r5, r4
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800194e:	ea0c 0303 	and.w	r3, ip, r3
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001952:	b2bc      	uxth	r4, r7
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001954:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001956:	432c      	orrs	r4, r5
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001958:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800195a:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800195c:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800195e:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001960:	8403      	strh	r3, [r0, #32]
}
 8001962:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001966:	4770      	bx	lr

08001968 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001968:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800196c:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800196e:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001970:	f8b1 c000 	ldrh.w	ip, [r1]
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001974:	884f      	ldrh	r7, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001976:	f024 0410 	bic.w	r4, r4, #16
 800197a:	0424      	lsls	r4, r4, #16
 800197c:	0c24      	lsrs	r4, r4, #16
 800197e:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001980:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001982:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001984:	8b03      	ldrh	r3, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8001986:	f022 0220 	bic.w	r2, r2, #32
 800198a:	0412      	lsls	r2, r2, #16
 800198c:	0c12      	lsrs	r2, r2, #16
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800198e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 8001992:	041b      	lsls	r3, r3, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001994:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001998:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800199c:	2500      	movs	r5, #0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800199e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80019a0:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80019a4:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80019a8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80019ac:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80019b0:	42a8      	cmp	r0, r5
 80019b2:	bf18      	it	ne
 80019b4:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019b6:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80019b8:	b29b      	uxth	r3, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80019ba:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80019bc:	d119      	bne.n	80019f2 <TIM_OC2Init+0x8a>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80019be:	f64f 767f 	movw	r6, #65407	; 0xff7f
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80019c2:	f8b1 900e 	ldrh.w	r9, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80019c6:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80019ca:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80019ce:	8a4f      	ldrh	r7, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80019d0:	4016      	ands	r6, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80019d2:	f24f 35ff 	movw	r5, #62463	; 0xf3ff
 80019d6:	4025      	ands	r5, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80019d8:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80019dc:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 80019e0:	4032      	ands	r2, r6
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80019e2:	ea45 0488 	orr.w	r4, r5, r8, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80019e6:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80019ea:	ea44 0487 	orr.w	r4, r4, r7, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80019ee:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80019f0:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80019f2:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019f4:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80019f6:	8303      	strh	r3, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80019f8:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019fa:	8402      	strh	r2, [r0, #32]
}
 80019fc:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop

08001a04 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001a04:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001a08:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001a0a:	898d      	ldrh	r5, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001a0c:	f8b1 c002 	ldrh.w	ip, [r1, #2]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001a10:	880f      	ldrh	r7, [r1, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001a12:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8001a16:	0424      	lsls	r4, r4, #16
 8001a18:	0c24      	lsrs	r4, r4, #16
 8001a1a:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a1c:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a1e:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a20:	8b83      	ldrh	r3, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001a22:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a26:	0412      	lsls	r2, r2, #16
 8001a28:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001a2a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8001a2e:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001a32:	2500      	movs	r5, #0
 8001a34:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8001a38:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001a3a:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8001a3e:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8001a42:	0c1b      	lsrs	r3, r3, #16
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001a44:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001a48:	42a8      	cmp	r0, r5
 8001a4a:	bf18      	it	ne
 8001a4c:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a4e:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001a50:	ea43 0307 	orr.w	r3, r3, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001a54:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001a56:	d119      	bne.n	8001a8c <TIM_OC3Init+0x88>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001a58:	f24f 76ff 	movw	r6, #63487	; 0xf7ff
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001a5c:	f8b1 900e 	ldrh.w	r9, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001a60:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001a64:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001a68:	8a4f      	ldrh	r7, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001a6a:	4016      	ands	r6, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8001a6c:	f64c 75ff 	movw	r5, #53247	; 0xcfff
 8001a70:	4025      	ands	r5, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001a72:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001a76:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8001a7a:	4032      	ands	r2, r6
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001a7c:	ea45 1408 	orr.w	r4, r5, r8, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001a80:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001a84:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001a88:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001a8a:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001a8c:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a8e:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a90:	8383      	strh	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001a92:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a94:	8402      	strh	r2, [r0, #32]
}
 8001a96:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001a9a:	4770      	bx	lr

08001a9c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001a9c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001a9e:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001aa0:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001aa2:	f8b1 c000 	ldrh.w	ip, [r1]
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001aa6:	884f      	ldrh	r7, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001aa8:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001aac:	0424      	lsls	r4, r4, #16
 8001aae:	0c24      	lsrs	r4, r4, #16
 8001ab0:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ab2:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ab4:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ab6:	8b83      	ldrh	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001ab8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001abc:	0412      	lsls	r2, r2, #16
 8001abe:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001ac0:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001ac4:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001ac8:	2500      	movs	r5, #0
 8001aca:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8001ace:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8001ad2:	f2c4 0601 	movt	r6, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001ad6:	041b      	lsls	r3, r3, #16
 8001ad8:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001ada:	42a8      	cmp	r0, r5
 8001adc:	bf18      	it	ne
 8001ade:	42b0      	cmpne	r0, r6
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001ae0:	bf08      	it	eq
 8001ae2:	8a0e      	ldrheq	r6, [r1, #16]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001ae4:	6889      	ldr	r1, [r1, #8]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ae6:	b2a4      	uxth	r4, r4
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8001ae8:	bf02      	ittt	eq
 8001aea:	f64b 75ff 	movweq	r5, #49151	; 0xbfff
 8001aee:	4025      	andeq	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001af0:	ea45 1486 	orreq.w	r4, r5, r6, lsl #6
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001af4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001af8:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001afc:	b29b      	uxth	r3, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001afe:	b292      	uxth	r2, r2
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001b00:	bf08      	it	eq
 8001b02:	b2a4      	uxtheq	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b04:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001b06:	8383      	strh	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001b08:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b0a:	8402      	strh	r2, [r0, #32]
}
 8001b0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b0e:	4770      	bx	lr

08001b10 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8001b10:	2300      	movs	r3, #0
 8001b12:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8001b14:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8001b16:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8001b18:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8001b1a:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8001b1c:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8001b1e:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8001b20:	8243      	strh	r3, [r0, #18]
}
 8001b22:	4770      	bx	lr

08001b24 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8001b24:	b410      	push	{r4}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8001b26:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	408b      	lsls	r3, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8001b2c:	b2a4      	uxth	r4, r4
 8001b2e:	ea24 0303 	bic.w	r3, r4, r3
 8001b32:	8403      	strh	r3, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8001b34:	3018      	adds	r0, #24
  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8001b36:	2900      	cmp	r1, #0
 8001b38:	bf18      	it	ne
 8001b3a:	2908      	cmpne	r1, #8
 8001b3c:	d00e      	beq.n	8001b5c <TIM_SelectOCxM+0x38>
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8001b3e:	3904      	subs	r1, #4
 8001b40:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8001b44:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8001b48:	580c      	ldr	r4, [r1, r0]
 8001b4a:	4023      	ands	r3, r4
 8001b4c:	500b      	str	r3, [r1, r0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8001b4e:	0212      	lsls	r2, r2, #8
 8001b50:	580b      	ldr	r3, [r1, r0]
 8001b52:	b292      	uxth	r2, r2
 8001b54:	431a      	orrs	r2, r3
 8001b56:	500a      	str	r2, [r1, r0]
  }
}
 8001b58:	bc10      	pop	{r4}
 8001b5a:	4770      	bx	lr
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);
 8001b5c:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8001b5e:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8001b62:	580c      	ldr	r4, [r1, r0]
 8001b64:	4023      	ands	r3, r4
 8001b66:	500b      	str	r3, [r1, r0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8001b68:	580b      	ldr	r3, [r1, r0]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	500a      	str	r2, [r1, r0]
 8001b6e:	e7f3      	b.n	8001b58 <TIM_SelectOCxM+0x34>

08001b70 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8001b70:	6341      	str	r1, [r0, #52]	; 0x34
}
 8001b72:	4770      	bx	lr

08001b74 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8001b74:	6381      	str	r1, [r0, #56]	; 0x38
}
 8001b76:	4770      	bx	lr

08001b78 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8001b78:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8001b7a:	4770      	bx	lr

08001b7c <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8001b7c:	6401      	str	r1, [r0, #64]	; 0x40
}
 8001b7e:	4770      	bx	lr

08001b80 <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8001b80:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8001b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b86:	041b      	lsls	r3, r3, #16
 8001b88:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8001b8a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001b8c:	8303      	strh	r3, [r0, #24]
}
 8001b8e:	4770      	bx	lr

08001b90 <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8001b90:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8001b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b96:	041b      	lsls	r3, r3, #16
 8001b98:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8001b9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b9e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001ba0:	8303      	strh	r3, [r0, #24]
}
 8001ba2:	4770      	bx	lr

08001ba4 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8001ba4:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8001ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001baa:	041b      	lsls	r3, r3, #16
 8001bac:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8001bae:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001bb0:	8383      	strh	r3, [r0, #28]
}
 8001bb2:	4770      	bx	lr

08001bb4 <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8001bb4:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8001bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bba:	041b      	lsls	r3, r3, #16
 8001bbc:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8001bbe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001bc2:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001bc4:	8383      	strh	r3, [r0, #28]
}
 8001bc6:	4770      	bx	lr

08001bc8 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001bc8:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8001bca:	f023 0308 	bic.w	r3, r3, #8
 8001bce:	041b      	lsls	r3, r3, #16
 8001bd0:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001bd2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001bd4:	8303      	strh	r3, [r0, #24]
}
 8001bd6:	4770      	bx	lr

08001bd8 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001bd8:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8001bda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bde:	041b      	lsls	r3, r3, #16
 8001be0:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8001be2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001be6:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001be8:	8303      	strh	r3, [r0, #24]
}
 8001bea:	4770      	bx	lr

08001bec <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001bec:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8001bee:	f023 0308 	bic.w	r3, r3, #8
 8001bf2:	041b      	lsls	r3, r3, #16
 8001bf4:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8001bf6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001bf8:	8383      	strh	r3, [r0, #28]
}
 8001bfa:	4770      	bx	lr

08001bfc <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001bfc:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8001bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c02:	041b      	lsls	r3, r3, #16
 8001c04:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8001c06:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c0a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001c0c:	8383      	strh	r3, [r0, #28]
}
 8001c0e:	4770      	bx	lr

08001c10 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8001c10:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8001c12:	f023 0304 	bic.w	r3, r3, #4
 8001c16:	041b      	lsls	r3, r3, #16
 8001c18:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8001c1a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8001c1c:	8303      	strh	r3, [r0, #24]
}
 8001c1e:	4770      	bx	lr

08001c20 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8001c20:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8001c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c26:	041b      	lsls	r3, r3, #16
 8001c28:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8001c2a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c2e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8001c30:	8303      	strh	r3, [r0, #24]
}
 8001c32:	4770      	bx	lr

08001c34 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8001c34:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8001c36:	f023 0304 	bic.w	r3, r3, #4
 8001c3a:	041b      	lsls	r3, r3, #16
 8001c3c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8001c3e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8001c40:	8383      	strh	r3, [r0, #28]
}
 8001c42:	4770      	bx	lr

08001c44 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8001c44:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8001c46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c4a:	041b      	lsls	r3, r3, #16
 8001c4c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8001c4e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c52:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8001c54:	8383      	strh	r3, [r0, #28]
}
 8001c56:	4770      	bx	lr

08001c58 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8001c58:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8001c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8001c62:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001c64:	8303      	strh	r3, [r0, #24]
}
 8001c66:	4770      	bx	lr

08001c68 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8001c68:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8001c6a:	045b      	lsls	r3, r3, #17
 8001c6c:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8001c6e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c72:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001c74:	8303      	strh	r3, [r0, #24]
}
 8001c76:	4770      	bx	lr

08001c78 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8001c78:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8001c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c7e:	041b      	lsls	r3, r3, #16
 8001c80:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8001c82:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001c84:	8383      	strh	r3, [r0, #28]
}
 8001c86:	4770      	bx	lr

08001c88 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8001c88:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8001c8a:	045b      	lsls	r3, r3, #17
 8001c8c:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8001c8e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c92:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001c94:	8383      	strh	r3, [r0, #28]
}
 8001c96:	4770      	bx	lr

08001c98 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001c98:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8001c9a:	f023 0302 	bic.w	r3, r3, #2
 8001c9e:	041b      	lsls	r3, r3, #16
 8001ca0:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8001ca2:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001ca4:	8403      	strh	r3, [r0, #32]
}
 8001ca6:	4770      	bx	lr

08001ca8 <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8001ca8:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8001caa:	f023 0308 	bic.w	r3, r3, #8
 8001cae:	041b      	lsls	r3, r3, #16
 8001cb0:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8001cb2:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001cb4:	8403      	strh	r3, [r0, #32]
}
 8001cb6:	4770      	bx	lr

08001cb8 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001cb8:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8001cba:	f023 0320 	bic.w	r3, r3, #32
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8001cc2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001cc6:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001cc8:	8403      	strh	r3, [r0, #32]
}
 8001cca:	4770      	bx	lr

08001ccc <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8001ccc:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8001cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cd2:	041b      	lsls	r3, r3, #16
 8001cd4:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8001cd6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001cda:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001cdc:	8403      	strh	r3, [r0, #32]
}
 8001cde:	4770      	bx	lr

08001ce0 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001ce0:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001ce2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ce6:	041b      	lsls	r3, r3, #16
 8001ce8:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8001cea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001cee:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001cf0:	8403      	strh	r3, [r0, #32]
}
 8001cf2:	4770      	bx	lr

08001cf4 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8001cf4:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001cf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cfa:	041b      	lsls	r3, r3, #16
 8001cfc:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8001cfe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d02:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001d04:	8403      	strh	r3, [r0, #32]
}
 8001d06:	4770      	bx	lr

08001d08 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001d08:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001d0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d0e:	041b      	lsls	r3, r3, #16
 8001d10:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8001d12:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8001d16:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001d18:	8403      	strh	r3, [r0, #32]
}
 8001d1a:	4770      	bx	lr

08001d1c <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8001d1c:	b410      	push	{r4}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8001d1e:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8001d20:	2301      	movs	r3, #1
 8001d22:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8001d24:	b2a4      	uxth	r4, r4
 8001d26:	ea24 0303 	bic.w	r3, r4, r3
 8001d2a:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8001d2c:	8c03      	ldrh	r3, [r0, #32]
 8001d2e:	fa12 f101 	lsls.w	r1, r2, r1
 8001d32:	430b      	orrs	r3, r1
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	8403      	strh	r3, [r0, #32]
}
 8001d38:	bc10      	pop	{r4}
 8001d3a:	4770      	bx	lr

08001d3c <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8001d3c:	b410      	push	{r4}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8001d3e:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8001d40:	2304      	movs	r3, #4
 8001d42:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8001d44:	b2a4      	uxth	r4, r4
 8001d46:	ea24 0303 	bic.w	r3, r4, r3
 8001d4a:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8001d4c:	8c03      	ldrh	r3, [r0, #32]
 8001d4e:	fa12 f101 	lsls.w	r1, r2, r1
 8001d52:	430b      	orrs	r3, r1
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	8403      	strh	r3, [r0, #32]
}
 8001d58:	bc10      	pop	{r4}
 8001d5a:	4770      	bx	lr

08001d5c <TIM_ICInit>:
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001d5c:	880b      	ldrh	r3, [r1, #0]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001d5e:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d032      	beq.n	8001dca <TIM_ICInit+0x6e>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d058      	beq.n	8001e1a <TIM_ICInit+0xbe>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8001d68:	2b08      	cmp	r3, #8
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8001d6a:	884e      	ldrh	r6, [r1, #2]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001d6c:	8c03      	ldrh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8001d6e:	f000 8082 	beq.w	8001e76 <TIM_ICInit+0x11a>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001d72:	888f      	ldrh	r7, [r1, #4]
 8001d74:	890d      	ldrh	r5, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001d76:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001d78:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8001d7c:	0409      	lsls	r1, r1, #16
 8001d7e:	0c09      	lsrs	r1, r1, #16
 8001d80:	8401      	strh	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001d82:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
 8001d84:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001d86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001d8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001d8e:	0512      	lsls	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001d90:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001d92:	0d12      	lsrs	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001d94:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8001d96:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001d9a:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8001d9e:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8001da8:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001daa:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8001dac:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8001dae:	8b83      	ldrh	r3, [r0, #28]
 8001db0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	0c1b      	lsrs	r3, r3, #16
 8001db8:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8001dba:	8b83      	ldrh	r3, [r0, #28]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	8383      	strh	r3, [r0, #28]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001dc6:	bcf0      	pop	{r4, r5, r6, r7}
 8001dc8:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001dca:	8c03      	ldrh	r3, [r0, #32]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001dcc:	884e      	ldrh	r6, [r1, #2]
 8001dce:	888d      	ldrh	r5, [r1, #4]
 8001dd0:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001dd2:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001dd4:	f023 0101 	bic.w	r1, r3, #1
 8001dd8:	0409      	lsls	r1, r1, #16
 8001dda:	0c09      	lsrs	r1, r1, #16
 8001ddc:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dde:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001de0:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8001de2:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 8001de6:	0412      	lsls	r2, r2, #16
 8001de8:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dea:	f023 030a 	bic.w	r3, r3, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001dee:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001df2:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001df4:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001df6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001df8:	f046 0101 	orr.w	r1, r6, #1
 8001dfc:	430b      	orrs	r3, r1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001dfe:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e00:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e02:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8001e04:	8b03      	ldrh	r3, [r0, #24]
 8001e06:	f023 030c 	bic.w	r3, r3, #12
 8001e0a:	041b      	lsls	r3, r3, #16
 8001e0c:	0c1b      	lsrs	r3, r3, #16
 8001e0e:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001e10:	8b03      	ldrh	r3, [r0, #24]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	4323      	orrs	r3, r4
 8001e16:	8303      	strh	r3, [r0, #24]
 8001e18:	e7d5      	b.n	8001dc6 <TIM_ICInit+0x6a>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001e1a:	8c03      	ldrh	r3, [r0, #32]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001e1c:	884e      	ldrh	r6, [r1, #2]
 8001e1e:	888d      	ldrh	r5, [r1, #4]
 8001e20:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001e22:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001e24:	f023 0110 	bic.w	r1, r3, #16
 8001e28:	0409      	lsls	r1, r1, #16
 8001e2a:	0c09      	lsrs	r1, r1, #16
 8001e2c:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e2e:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001e30:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001e32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e36:	0512      	lsls	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001e3c:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e3e:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001e40:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e44:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001e46:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001e48:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001e4c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	f043 0310 	orr.w	r3, r3, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001e56:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e58:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e5a:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8001e5c:	8b03      	ldrh	r3, [r0, #24]
 8001e5e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e62:	041b      	lsls	r3, r3, #16
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001e68:	8b03      	ldrh	r3, [r0, #24]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	8303      	strh	r3, [r0, #24]
 8001e74:	e7a7      	b.n	8001dc6 <TIM_ICInit+0x6a>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8001e76:	888d      	ldrh	r5, [r1, #4]
 8001e78:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001e7a:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001e7c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8001e80:	0409      	lsls	r1, r1, #16
 8001e82:	0c09      	lsrs	r1, r1, #16
 8001e84:	8401      	strh	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001e86:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
 8001e88:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8001e8a:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001e8e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8001e92:	0412      	lsls	r2, r2, #16
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001e94:	041b      	lsls	r3, r3, #16
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8001e96:	0c12      	lsrs	r2, r2, #16
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001e98:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001e9a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001e9e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001ea2:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001eaa:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001eac:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8001eae:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8001eb0:	8b83      	ldrh	r3, [r0, #28]
 8001eb2:	f023 030c 	bic.w	r3, r3, #12
 8001eb6:	041b      	lsls	r3, r3, #16
 8001eb8:	0c1b      	lsrs	r3, r3, #16
 8001eba:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8001ebc:	8b83      	ldrh	r3, [r0, #28]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	4323      	orrs	r3, r4
 8001ec2:	8383      	strh	r3, [r0, #28]
 8001ec4:	e77f      	b.n	8001dc6 <TIM_ICInit+0x6a>
 8001ec6:	bf00      	nop

08001ec8 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001ec8:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001eca:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001ecc:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001ece:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001ed0:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001ed2:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8001ed4:	8103      	strh	r3, [r0, #8]
}
 8001ed6:	4770      	bx	lr

08001ed8 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001ed8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8001edc:	888a      	ldrh	r2, [r1, #4]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8001ede:	f8b1 8002 	ldrh.w	r8, [r1, #2]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001ee2:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8001ee4:	f1b8 0f00 	cmp.w	r8, #0
 8001ee8:	bf0c      	ite	eq
 8001eea:	2502      	moveq	r5, #2
 8001eec:	2500      	movne	r5, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8001eee:	2a01      	cmp	r2, #1
 8001ef0:	bf14      	ite	ne
 8001ef2:	2601      	movne	r6, #1
 8001ef4:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d051      	beq.n	8001f9e <TIM_PWMIConfig+0xc6>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001efa:	8c03      	ldrh	r3, [r0, #32]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8001efc:	f8b1 c008 	ldrh.w	ip, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001f00:	88cf      	ldrh	r7, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001f02:	f023 0310 	bic.w	r3, r3, #16
 8001f06:	041b      	lsls	r3, r3, #16
 8001f08:	0c1b      	lsrs	r3, r3, #16
 8001f0a:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f0c:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001f0e:	8c01      	ldrh	r1, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001f10:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8001f14:	0524      	lsls	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f16:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001f1a:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f1c:	0409      	lsls	r1, r1, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001f1e:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f22:	0c09      	lsrs	r1, r1, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001f24:	b2a4      	uxth	r4, r4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001f26:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001f2a:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001f2e:	b289      	uxth	r1, r1
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001f30:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001f32:	f041 0110 	orr.w	r1, r1, #16

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f36:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f38:	8401      	strh	r1, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8001f3a:	8b01      	ldrh	r1, [r0, #24]
 8001f3c:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8001f40:	0409      	lsls	r1, r1, #16
 8001f42:	0c09      	lsrs	r1, r1, #16
 8001f44:	8301      	strh	r1, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001f46:	8b03      	ldrh	r3, [r0, #24]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001f52:	8c01      	ldrh	r1, [r0, #32]
 8001f54:	f021 0101 	bic.w	r1, r1, #1
 8001f58:	0409      	lsls	r1, r1, #16
 8001f5a:	0c09      	lsrs	r1, r1, #16
 8001f5c:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f5e:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001f60:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8001f62:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 8001f66:	0412      	lsls	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f68:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8001f6c:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f6e:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001f70:	ea42 120c 	orr.w	r2, r2, ip, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f74:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001f76:	f043 0301 	orr.w	r3, r3, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001f7a:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001f7c:	431d      	orrs	r5, r3
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001f7e:	4316      	orrs	r6, r2
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f80:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f82:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8001f84:	8b03      	ldrh	r3, [r0, #24]
 8001f86:	f023 030c 	bic.w	r3, r3, #12
 8001f8a:	041b      	lsls	r3, r3, #16
 8001f8c:	0c1b      	lsrs	r3, r3, #16
 8001f8e:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001f90:	8b03      	ldrh	r3, [r0, #24]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	431f      	orrs	r7, r3
 8001f96:	8307      	strh	r7, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001f98:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001f9c:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001f9e:	8c03      	ldrh	r3, [r0, #32]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8001fa0:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001fa2:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	041b      	lsls	r3, r3, #16
 8001faa:	0c1b      	lsrs	r3, r3, #16
 8001fac:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fae:	8b01      	ldrh	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8001fb0:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8001fb2:	f021 01f3 	bic.w	r1, r1, #243	; 0xf3
 8001fb6:	0409      	lsls	r1, r1, #16
 8001fb8:	0c09      	lsrs	r1, r1, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fba:	f023 030a 	bic.w	r3, r3, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001fbe:	ea41 1107 	orr.w	r1, r1, r7, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fc2:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001fc4:	b289      	uxth	r1, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fc6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001fc8:	f048 0801 	orr.w	r8, r8, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001fcc:	430a      	orrs	r2, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001fce:	ea43 0308 	orr.w	r3, r3, r8

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fd2:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001fd4:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8001fd6:	8b03      	ldrh	r3, [r0, #24]
 8001fd8:	f023 030c 	bic.w	r3, r3, #12
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	0c1b      	lsrs	r3, r3, #16
 8001fe0:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001fe2:	8b03      	ldrh	r3, [r0, #24]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	4323      	orrs	r3, r4
 8001fe8:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001fea:	8c03      	ldrh	r3, [r0, #32]
 8001fec:	f023 0310 	bic.w	r3, r3, #16
 8001ff0:	041b      	lsls	r3, r3, #16
 8001ff2:	0c1b      	lsrs	r3, r3, #16
 8001ff4:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ff6:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001ff8:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001ffa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ffe:	0512      	lsls	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002000:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002004:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002006:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002008:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800200c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800200e:	f043 0310 	orr.w	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002012:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002014:	ea43 1505 	orr.w	r5, r3, r5, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002018:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800201c:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 800201e:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002020:	8b03      	ldrh	r3, [r0, #24]
 8002022:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002026:	041b      	lsls	r3, r3, #16
 8002028:	0c1b      	lsrs	r3, r3, #16
 800202a:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800202c:	8b03      	ldrh	r3, [r0, #24]
 800202e:	b29b      	uxth	r3, r3
 8002030:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
 8002034:	b2a4      	uxth	r4, r4
 8002036:	8304      	strh	r4, [r0, #24]
 8002038:	e7ae      	b.n	8001f98 <TIM_PWMIConfig+0xc0>
 800203a:	bf00      	nop

0800203c <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800203c:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 800203e:	4770      	bx	lr

08002040 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8002040:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8002042:	4770      	bx	lr

08002044 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002044:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8002046:	4770      	bx	lr

08002048 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8002048:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 800204a:	4770      	bx	lr

0800204c <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800204c:	8b03      	ldrh	r3, [r0, #24]
 800204e:	f023 030c 	bic.w	r3, r3, #12
 8002052:	041b      	lsls	r3, r3, #16
 8002054:	0c1b      	lsrs	r3, r3, #16
 8002056:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002058:	8b03      	ldrh	r3, [r0, #24]
 800205a:	b29b      	uxth	r3, r3
 800205c:	430b      	orrs	r3, r1
 800205e:	8303      	strh	r3, [r0, #24]
}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop

08002064 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002064:	8b03      	ldrh	r3, [r0, #24]
 8002066:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002070:	8b03      	ldrh	r3, [r0, #24]
 8002072:	b29b      	uxth	r3, r3
 8002074:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002078:	b29b      	uxth	r3, r3
 800207a:	8303      	strh	r3, [r0, #24]
}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop

08002080 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8002080:	8b83      	ldrh	r3, [r0, #28]
 8002082:	f023 030c 	bic.w	r3, r3, #12
 8002086:	041b      	lsls	r3, r3, #16
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800208c:	8b83      	ldrh	r3, [r0, #28]
 800208e:	b29b      	uxth	r3, r3
 8002090:	430b      	orrs	r3, r1
 8002092:	8383      	strh	r3, [r0, #28]
}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop

08002098 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8002098:	8b83      	ldrh	r3, [r0, #28]
 800209a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800209e:	041b      	lsls	r3, r3, #16
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80020a4:	8b83      	ldrh	r3, [r0, #28]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	8383      	strh	r3, [r0, #28]
}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop

080020b4 <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80020b4:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 80020b8:	880b      	ldrh	r3, [r1, #0]
 80020ba:	898a      	ldrh	r2, [r1, #12]
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 80020bc:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80020be:	888f      	ldrh	r7, [r1, #4]
 80020c0:	88ce      	ldrh	r6, [r1, #6]
 80020c2:	890d      	ldrh	r5, [r1, #8]
 80020c4:	894c      	ldrh	r4, [r1, #10]
 80020c6:	ea4c 0303 	orr.w	r3, ip, r3
 80020ca:	433b      	orrs	r3, r7
 80020cc:	4333      	orrs	r3, r6
 80020ce:	432b      	orrs	r3, r5
 80020d0:	4323      	orrs	r3, r4
 80020d2:	4313      	orrs	r3, r2
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 80020da:	bcf0      	pop	{r4, r5, r6, r7}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop

080020e0 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 80020e0:	2300      	movs	r3, #0
 80020e2:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 80020e4:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 80020e6:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 80020e8:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 80020ea:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 80020ec:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 80020ee:	8183      	strh	r3, [r0, #12]
}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop

080020f4 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80020f4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80020f8:	b921      	cbnz	r1, 8002104 <TIM_CtrlPWMOutputs+0x10>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 80020fa:	045b      	lsls	r3, r3, #17
 80020fc:	0c5b      	lsrs	r3, r3, #17
 80020fe:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8002102:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800210c:	b29b      	uxth	r3, r3
 800210e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8002112:	4770      	bx	lr

08002114 <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8002114:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002116:	b929      	cbnz	r1, 8002124 <TIM_SelectCOM+0x10>
    TIMx->CR2 |= TIM_CR2_CCUS;
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8002118:	f023 0304 	bic.w	r3, r3, #4
 800211c:	041b      	lsls	r3, r3, #16
 800211e:	0c1b      	lsrs	r3, r3, #16
 8002120:	8083      	strh	r3, [r0, #4]
 8002122:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8002124:	b29b      	uxth	r3, r3
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	8083      	strh	r3, [r0, #4]
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop

08002130 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002130:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002132:	b929      	cbnz	r1, 8002140 <TIM_CCPreloadControl+0x10>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	041b      	lsls	r3, r3, #16
 800213a:	0c1b      	lsrs	r3, r3, #16
 800213c:	8083      	strh	r3, [r0, #4]
 800213e:	4770      	bx	lr
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002140:	b29b      	uxth	r3, r3
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	8083      	strh	r3, [r0, #4]
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop

0800214c <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800214c:	8983      	ldrh	r3, [r0, #12]
 800214e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002150:	b91a      	cbnz	r2, 800215a <TIM_ITConfig+0xe>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002152:	ea23 0101 	bic.w	r1, r3, r1
 8002156:	8181      	strh	r1, [r0, #12]
 8002158:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800215a:	4319      	orrs	r1, r3
 800215c:	8181      	strh	r1, [r0, #12]
 800215e:	4770      	bx	lr

08002160 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8002160:	8281      	strh	r1, [r0, #20]
}
 8002162:	4770      	bx	lr

08002164 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8002164:	8a03      	ldrh	r3, [r0, #16]
  {
    bitstatus = SET;
 8002166:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002168:	bf0c      	ite	eq
 800216a:	2000      	moveq	r0, #0
 800216c:	2001      	movne	r0, #1
 800216e:	4770      	bx	lr

08002170 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8002170:	43c9      	mvns	r1, r1
 8002172:	b289      	uxth	r1, r1
 8002174:	8201      	strh	r1, [r0, #16]
}
 8002176:	4770      	bx	lr

08002178 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002178:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 800217a:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800217c:	4211      	tst	r1, r2
 800217e:	bf0c      	ite	eq
 8002180:	2000      	moveq	r0, #0
 8002182:	2001      	movne	r0, #1
 8002184:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002186:	bf0c      	ite	eq
 8002188:	2000      	moveq	r0, #0
 800218a:	f000 0001 	andne.w	r0, r0, #1
 800218e:	4770      	bx	lr

08002190 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002190:	43c9      	mvns	r1, r1
 8002192:	b289      	uxth	r1, r1
 8002194:	8201      	strh	r1, [r0, #16]
}
 8002196:	4770      	bx	lr

08002198 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8002198:	430a      	orrs	r2, r1
 800219a:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
}
 800219e:	4770      	bx	lr

080021a0 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80021a0:	8983      	ldrh	r3, [r0, #12]
 80021a2:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80021a4:	b91a      	cbnz	r2, 80021ae <TIM_DMACmd+0xe>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80021a6:	ea23 0101 	bic.w	r1, r3, r1
 80021aa:	8181      	strh	r1, [r0, #12]
 80021ac:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80021ae:	4319      	orrs	r1, r3
 80021b0:	8181      	strh	r1, [r0, #12]
 80021b2:	4770      	bx	lr

080021b4 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80021b4:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80021b6:	b929      	cbnz	r1, 80021c4 <TIM_SelectCCDMA+0x10>
    TIMx->CR2 |= TIM_CR2_CCDS;
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 80021b8:	f023 0308 	bic.w	r3, r3, #8
 80021bc:	041b      	lsls	r3, r3, #16
 80021be:	0c1b      	lsrs	r3, r3, #16
 80021c0:	8083      	strh	r3, [r0, #4]
 80021c2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	f043 0308 	orr.w	r3, r3, #8
 80021ca:	8083      	strh	r3, [r0, #4]
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop

080021d0 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 80021d0:	8903      	ldrh	r3, [r0, #8]
 80021d2:	f023 0307 	bic.w	r3, r3, #7
 80021d6:	041b      	lsls	r3, r3, #16
 80021d8:	0c1b      	lsrs	r3, r3, #16
 80021da:	8103      	strh	r3, [r0, #8]
}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop

080021e0 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021e0:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80021e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e6:	041b      	lsls	r3, r3, #16
 80021e8:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80021ea:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021ec:	8103      	strh	r3, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80021ee:	8903      	ldrh	r3, [r0, #8]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	f043 0307 	orr.w	r3, r3, #7
 80021f6:	8103      	strh	r3, [r0, #8]
}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop

080021fc <TIM_TIxExternalClockConfig>:
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80021fc:	2960      	cmp	r1, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80021fe:	b430      	push	{r4, r5}
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002200:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002202:	d026      	beq.n	8002252 <TIM_TIxExternalClockConfig+0x56>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002204:	f024 0401 	bic.w	r4, r4, #1
 8002208:	0424      	lsls	r4, r4, #16
 800220a:	0c24      	lsrs	r4, r4, #16
 800220c:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800220e:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8002210:	8c04      	ldrh	r4, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002212:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
 8002216:	042d      	lsls	r5, r5, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002218:	f024 040a 	bic.w	r4, r4, #10
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800221c:	0c2d      	lsrs	r5, r5, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800221e:	0424      	lsls	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002220:	f045 0501 	orr.w	r5, r5, #1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002224:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002226:	ea45 1303 	orr.w	r3, r5, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800222a:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800222e:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002230:	4322      	orrs	r2, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002232:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002234:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002236:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002240:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002242:	8101      	strh	r1, [r0, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002244:	8903      	ldrh	r3, [r0, #8]
 8002246:	b29b      	uxth	r3, r3
 8002248:	f043 0307 	orr.w	r3, r3, #7
 800224c:	8103      	strh	r3, [r0, #8]
}
 800224e:	bc30      	pop	{r4, r5}
 8002250:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002252:	f024 0410 	bic.w	r4, r4, #16
 8002256:	0424      	lsls	r4, r4, #16
 8002258:	0c24      	lsrs	r4, r4, #16
 800225a:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800225c:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 800225e:	8c04      	ldrh	r4, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002260:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002264:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002268:	052d      	lsls	r5, r5, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800226a:	0424      	lsls	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800226c:	0d2d      	lsrs	r5, r5, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800226e:	0c24      	lsrs	r4, r4, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002270:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002274:	f044 0410 	orr.w	r4, r4, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002278:	ea45 3303 	orr.w	r3, r5, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800227c:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002280:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002282:	b292      	uxth	r2, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002284:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002286:	8402      	strh	r2, [r0, #32]
 8002288:	e7d5      	b.n	8002236 <TIM_TIxExternalClockConfig+0x3a>
 800228a:	bf00      	nop

0800228c <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800228c:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800228e:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8002290:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002292:	430c      	orrs	r4, r1
 8002294:	4314      	orrs	r4, r2
 8002296:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800229a:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800229c:	8104      	strh	r4, [r0, #8]
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800229e:	8903      	ldrh	r3, [r0, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 80022a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;
 80022a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022ac:	8103      	strh	r3, [r0, #8]
}
 80022ae:	bc10      	pop	{r4}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop

080022b4 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80022b4:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80022b6:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80022b8:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80022ba:	430c      	orrs	r4, r1
 80022bc:	4314      	orrs	r4, r2
 80022be:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80022c2:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022c4:	8104      	strh	r4, [r0, #8]

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 80022c6:	8903      	ldrh	r3, [r0, #8]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ce:	8103      	strh	r3, [r0, #8]
}
 80022d0:	bc10      	pop	{r4}
 80022d2:	4770      	bx	lr

080022d4 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022d4:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80022d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022da:	041b      	lsls	r3, r3, #16
 80022dc:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80022de:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022e0:	8103      	strh	r3, [r0, #8]
}
 80022e2:	4770      	bx	lr

080022e4 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 80022e4:	8883      	ldrh	r3, [r0, #4]
 80022e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80022f0:	8883      	ldrh	r3, [r0, #4]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	430b      	orrs	r3, r1
 80022f6:	8083      	strh	r3, [r0, #4]
}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop

080022fc <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 80022fc:	8903      	ldrh	r3, [r0, #8]
 80022fe:	f023 0307 	bic.w	r3, r3, #7
 8002302:	041b      	lsls	r3, r3, #16
 8002304:	0c1b      	lsrs	r3, r3, #16
 8002306:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8002308:	8903      	ldrh	r3, [r0, #8]
 800230a:	b29b      	uxth	r3, r3
 800230c:	430b      	orrs	r3, r1
 800230e:	8103      	strh	r3, [r0, #8]
}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop

08002314 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8002314:	8903      	ldrh	r3, [r0, #8]
 8002316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800231a:	041b      	lsls	r3, r3, #16
 800231c:	0c1b      	lsrs	r3, r3, #16
 800231e:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8002320:	8903      	ldrh	r3, [r0, #8]
 8002322:	b29b      	uxth	r3, r3
 8002324:	430b      	orrs	r3, r1
 8002326:	8103      	strh	r3, [r0, #8]
}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop

0800232c <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800232c:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800232e:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8002330:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002332:	430c      	orrs	r4, r1
 8002334:	4314      	orrs	r4, r2
 8002336:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800233a:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800233c:	8104      	strh	r4, [r0, #8]
}
 800233e:	bc10      	pop	{r4}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop

08002344 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8002344:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002346:	8905      	ldrh	r5, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002348:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800234a:	8c06      	ldrh	r6, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800234c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8002350:	f026 0622 	bic.w	r6, r6, #34	; 0x22
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002354:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8002358:	0436      	lsls	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800235a:	f025 0507 	bic.w	r5, r5, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800235e:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8002360:	0c36      	lsrs	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002362:	042d      	lsls	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002364:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002366:	4316      	orrs	r6, r2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002368:	0c2d      	lsrs	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800236a:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800236e:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 8002372:	4329      	orrs	r1, r5

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002374:	f044 0401 	orr.w	r4, r4, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002378:	b2b6      	uxth	r6, r6

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800237a:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800237c:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800237e:	8406      	strh	r6, [r0, #32]
}
 8002380:	bc70      	pop	{r4, r5, r6}
 8002382:	4770      	bx	lr

08002384 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002384:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002386:	b929      	cbnz	r1, 8002394 <TIM_SelectHallSensor+0x10>
    TIMx->CR2 |= TIM_CR2_TI1S;
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8002388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800238c:	041b      	lsls	r3, r3, #16
 800238e:	0c1b      	lsrs	r3, r3, #16
 8002390:	8083      	strh	r3, [r0, #4]
 8002392:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002394:	b29b      	uxth	r3, r3
 8002396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239a:	8083      	strh	r3, [r0, #4]
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop

080023a0 <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 80023a0:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop

080023a8 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 80023a8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 80023aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80023b2:	4298      	cmp	r0, r3
 80023b4:	d028      	beq.n	8002408 <USART_DeInit+0x60>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 80023b6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80023ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80023be:	4298      	cmp	r0, r3
 80023c0:	d02c      	beq.n	800241c <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 80023c2:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80023c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80023ca:	4298      	cmp	r0, r3
 80023cc:	d032      	beq.n	8002434 <USART_DeInit+0x8c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 80023ce:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 80023d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80023d6:	4298      	cmp	r0, r3
 80023d8:	d038      	beq.n	800244c <USART_DeInit+0xa4>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 80023da:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80023de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80023e2:	4298      	cmp	r0, r3
 80023e4:	d03e      	beq.n	8002464 <USART_DeInit+0xbc>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }     
  else
  {
    if (USARTx == USART6)
 80023e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80023ee:	4298      	cmp	r0, r3
 80023f0:	d000      	beq.n	80023f4 <USART_DeInit+0x4c>
 80023f2:	bd08      	pop	{r3, pc}
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 80023f4:	2020      	movs	r0, #32
 80023f6:	2101      	movs	r1, #1
 80023f8:	f7ff f834 	bl	8001464 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80023fc:	2020      	movs	r0, #32
 80023fe:	2100      	movs	r1, #0
    }
  }
}
 8002400:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002404:	f7ff b82e 	b.w	8001464 <RCC_APB2PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002408:	2010      	movs	r0, #16
 800240a:	2101      	movs	r1, #1
 800240c:	f7ff f82a 	bl	8001464 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002410:	2010      	movs	r0, #16
 8002412:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002414:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002418:	f7ff b824 	b.w	8001464 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800241c:	2101      	movs	r1, #1
 800241e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002422:	f7ff f811 	bl	8001448 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002426:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800242a:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 800242c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002430:	f7ff b80a 	b.w	8001448 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8002434:	2101      	movs	r1, #1
 8002436:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800243a:	f7ff f805 	bl	8001448 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800243e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002442:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002444:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002448:	f7fe bffe 	b.w	8001448 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800244c:	2101      	movs	r1, #1
 800244e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002452:	f7fe fff9 	bl	8001448 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8002456:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800245a:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 800245c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8002460:	f7fe bff2 	b.w	8001448 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8002464:	2101      	movs	r1, #1
 8002466:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800246a:	f7fe ffed 	bl	8001448 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800246e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002472:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002474:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8002478:	f7fe bfe6 	b.w	8001448 <RCC_APB1PeriphResetCmd>

0800247c <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800247c:	8a02      	ldrh	r2, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800247e:	88cb      	ldrh	r3, [r1, #6]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002480:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002484:	0412      	lsls	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002486:	b5f0      	push	{r4, r5, r6, r7, lr}

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002488:	0c12      	lsrs	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800248a:	4604      	mov	r4, r0
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800248c:	431a      	orrs	r2, r3

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800248e:	8948      	ldrh	r0, [r1, #10]
 8002490:	890f      	ldrh	r7, [r1, #8]
 8002492:	888e      	ldrh	r6, [r1, #4]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002494:	460d      	mov	r5, r1
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002496:	8989      	ldrh	r1, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002498:	8222      	strh	r2, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800249a:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800249c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80024a0:	f023 030c 	bic.w	r3, r3, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80024a4:	ea47 0206 	orr.w	r2, r7, r6

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80024a8:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80024aa:	4302      	orrs	r2, r0
 80024ac:	b292      	uxth	r2, r2

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80024ae:	0c1b      	lsrs	r3, r3, #16
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80024b0:	4313      	orrs	r3, r2
 80024b2:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80024b4:	8aa3      	ldrh	r3, [r4, #20]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80024b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ba:	041b      	lsls	r3, r3, #16
 80024bc:	0c1b      	lsrs	r3, r3, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80024be:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80024c0:	430b      	orrs	r3, r1
 80024c2:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80024c4:	4668      	mov	r0, sp
 80024c6:	f7fe fecb 	bl	8001260 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80024ca:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80024ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80024d6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80024da:	429c      	cmp	r4, r3
 80024dc:	bf18      	it	ne
 80024de:	4294      	cmpne	r4, r2
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80024e0:	89a2      	ldrh	r2, [r4, #12]
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80024e2:	bf0c      	ite	eq
 80024e4:	9b03      	ldreq	r3, [sp, #12]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80024e6:	9b02      	ldrne	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80024e8:	b212      	sxth	r2, r2
 80024ea:	2a00      	cmp	r2, #0
 80024ec:	db21      	blt.n	8002532 <USART_Init+0xb6>
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80024ee:	6828      	ldr	r0, [r5, #0]
 80024f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80024f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80024f8:	0080      	lsls	r0, r0, #2
 80024fa:	fbb3 f1f0 	udiv	r1, r3, r0
  }
  tmpreg = (integerdivider / 100) << 4;
 80024fe:	f248 531f 	movw	r3, #34079	; 0x851f

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002502:	89a0      	ldrh	r0, [r4, #12]
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8002504:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8002508:	fba3 5201 	umull	r5, r2, r3, r1
 800250c:	0952      	lsrs	r2, r2, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800250e:	b200      	sxth	r0, r0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002510:	0116      	lsls	r6, r2, #4
 8002512:	2564      	movs	r5, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002514:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002516:	fb02 1215 	mls	r2, r2, r5, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800251a:	db13      	blt.n	8002544 <USART_Init+0xc8>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800251c:	0112      	lsls	r2, r2, #4
 800251e:	3232      	adds	r2, #50	; 0x32
 8002520:	fba3 5302 	umull	r5, r3, r3, r2
 8002524:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002528:	4333      	orrs	r3, r6
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800252a:	b29b      	uxth	r3, r3
 800252c:	8123      	strh	r3, [r4, #8]
}
 800252e:	b005      	add	sp, #20
 8002530:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002532:	682a      	ldr	r2, [r5, #0]
 8002534:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002538:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800253c:	0052      	lsls	r2, r2, #1
 800253e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002542:	e7dc      	b.n	80024fe <USART_Init+0x82>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002544:	00d2      	lsls	r2, r2, #3
 8002546:	3232      	adds	r2, #50	; 0x32
 8002548:	fba3 1302 	umull	r1, r3, r3, r2
 800254c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002550:	4333      	orrs	r3, r6
 8002552:	e7ea      	b.n	800252a <USART_Init+0xae>

08002554 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002554:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002558:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800255a:	6002      	str	r2, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800255c:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800255e:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8002560:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8002562:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002564:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8002566:	8183      	strh	r3, [r0, #12]
}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop

0800256c <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800256c:	880a      	ldrh	r2, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800256e:	8a03      	ldrh	r3, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002570:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002572:	884d      	ldrh	r5, [r1, #2]
 8002574:	888c      	ldrh	r4, [r1, #4]
 8002576:	88c9      	ldrh	r1, [r1, #6]
 8002578:	432a      	orrs	r2, r5
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800257a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800257e:	4322      	orrs	r2, r4
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8002580:	041b      	lsls	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002582:	430a      	orrs	r2, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8002584:	0c1b      	lsrs	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002586:	b292      	uxth	r2, r2
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002588:	4313      	orrs	r3, r2
 800258a:	8203      	strh	r3, [r0, #16]
}
 800258c:	bc30      	pop	{r4, r5}
 800258e:	4770      	bx	lr

08002590 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8002590:	2300      	movs	r3, #0
 8002592:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8002594:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8002596:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8002598:	80c3      	strh	r3, [r0, #6]
}
 800259a:	4770      	bx	lr

0800259c <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800259c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800259e:	b929      	cbnz	r1, 80025ac <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80025a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025a4:	041b      	lsls	r3, r3, #16
 80025a6:	0c1b      	lsrs	r3, r3, #16
 80025a8:	8183      	strh	r3, [r0, #12]
 80025aa:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025b2:	8183      	strh	r3, [r0, #12]
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop

080025b8 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 80025b8:	8b03      	ldrh	r3, [r0, #24]
 80025ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80025be:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80025c0:	8b03      	ldrh	r3, [r0, #24]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	430b      	orrs	r3, r1
 80025c6:	8303      	strh	r3, [r0, #24]
}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop

080025cc <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80025cc:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80025ce:	b919      	cbnz	r1, 80025d8 <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 80025d0:	045b      	lsls	r3, r3, #17
 80025d2:	0c5b      	lsrs	r3, r3, #17
 80025d4:	8183      	strh	r3, [r0, #12]
 80025d6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80025d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	8183      	strh	r3, [r0, #12]
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop

080025e8 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80025e8:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80025ea:	b929      	cbnz	r1, 80025f8 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 80025ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025f0:	041b      	lsls	r3, r3, #16
 80025f2:	0c1b      	lsrs	r3, r3, #16
 80025f4:	8283      	strh	r3, [r0, #20]
 80025f6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025fe:	8283      	strh	r3, [r0, #20]
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop

08002604 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002604:	05c9      	lsls	r1, r1, #23
 8002606:	0dc9      	lsrs	r1, r1, #23
 8002608:	8081      	strh	r1, [r0, #4]
}
 800260a:	4770      	bx	lr

0800260c <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800260c:	8880      	ldrh	r0, [r0, #4]
}
 800260e:	05c0      	lsls	r0, r0, #23
 8002610:	0dc0      	lsrs	r0, r0, #23
 8002612:	4770      	bx	lr

08002614 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8002614:	8a03      	ldrh	r3, [r0, #16]
 8002616:	f023 030f 	bic.w	r3, r3, #15
 800261a:	041b      	lsls	r3, r3, #16
 800261c:	0c1b      	lsrs	r3, r3, #16
 800261e:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8002620:	8a03      	ldrh	r3, [r0, #16]
 8002622:	b29b      	uxth	r3, r3
 8002624:	430b      	orrs	r3, r1
 8002626:	8203      	strh	r3, [r0, #16]
}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop

0800262c <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800262c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 800262e:	b929      	cbnz	r1, 800263c <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8002630:	f023 0302 	bic.w	r3, r3, #2
 8002634:	041b      	lsls	r3, r3, #16
 8002636:	0c1b      	lsrs	r3, r3, #16
 8002638:	8183      	strh	r3, [r0, #12]
 800263a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800263c:	b29b      	uxth	r3, r3
 800263e:	f043 0302 	orr.w	r3, r3, #2
 8002642:	8183      	strh	r3, [r0, #12]
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop

08002648 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8002648:	8983      	ldrh	r3, [r0, #12]
 800264a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800264e:	041b      	lsls	r3, r3, #16
 8002650:	0c1b      	lsrs	r3, r3, #16
 8002652:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8002654:	8983      	ldrh	r3, [r0, #12]
 8002656:	b29b      	uxth	r3, r3
 8002658:	430b      	orrs	r3, r1
 800265a:	8183      	strh	r3, [r0, #12]
}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop

08002660 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8002660:	8a03      	ldrh	r3, [r0, #16]
 8002662:	f023 0320 	bic.w	r3, r3, #32
 8002666:	041b      	lsls	r3, r3, #16
 8002668:	0c1b      	lsrs	r3, r3, #16
 800266a:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800266c:	8a03      	ldrh	r3, [r0, #16]
 800266e:	b29b      	uxth	r3, r3
 8002670:	430b      	orrs	r3, r1
 8002672:	8203      	strh	r3, [r0, #16]
}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop

08002678 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002678:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800267a:	b929      	cbnz	r1, 8002688 <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 800267c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002680:	041b      	lsls	r3, r3, #16
 8002682:	0c1b      	lsrs	r3, r3, #16
 8002684:	8203      	strh	r3, [r0, #16]
 8002686:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002688:	b29b      	uxth	r3, r3
 800268a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800268e:	8203      	strh	r3, [r0, #16]
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop

08002694 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8002694:	8983      	ldrh	r3, [r0, #12]
 8002696:	b29b      	uxth	r3, r3
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	8183      	strh	r3, [r0, #12]
}
 800269e:	4770      	bx	lr

080026a0 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80026a0:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80026a2:	b929      	cbnz	r1, 80026b0 <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 80026a4:	f023 0308 	bic.w	r3, r3, #8
 80026a8:	041b      	lsls	r3, r3, #16
 80026aa:	0c1b      	lsrs	r3, r3, #16
 80026ac:	8283      	strh	r3, [r0, #20]
 80026ae:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	f043 0308 	orr.w	r3, r3, #8
 80026b6:	8283      	strh	r3, [r0, #20]
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop

080026bc <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 80026bc:	8b03      	ldrh	r3, [r0, #24]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 80026c2:	8b03      	ldrh	r3, [r0, #24]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80026ca:	8303      	strh	r3, [r0, #24]
}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop

080026d0 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80026d0:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80026d2:	b929      	cbnz	r1, 80026e0 <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 80026d4:	f023 0320 	bic.w	r3, r3, #32
 80026d8:	041b      	lsls	r3, r3, #16
 80026da:	0c1b      	lsrs	r3, r3, #16
 80026dc:	8283      	strh	r3, [r0, #20]
 80026de:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f043 0320 	orr.w	r3, r3, #32
 80026e6:	8283      	strh	r3, [r0, #20]
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop

080026ec <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80026ec:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80026ee:	b929      	cbnz	r1, 80026fc <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 80026f0:	f023 0310 	bic.w	r3, r3, #16
 80026f4:	041b      	lsls	r3, r3, #16
 80026f6:	0c1b      	lsrs	r3, r3, #16
 80026f8:	8283      	strh	r3, [r0, #20]
 80026fa:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f043 0310 	orr.w	r3, r3, #16
 8002702:	8283      	strh	r3, [r0, #20]
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop

08002708 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8002708:	8a83      	ldrh	r3, [r0, #20]
 800270a:	f023 0304 	bic.w	r3, r3, #4
 800270e:	041b      	lsls	r3, r3, #16
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8002714:	8a83      	ldrh	r3, [r0, #20]
 8002716:	b29b      	uxth	r3, r3
 8002718:	430b      	orrs	r3, r1
 800271a:	8283      	strh	r3, [r0, #20]
}
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop

08002720 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002720:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8002722:	b929      	cbnz	r1, 8002730 <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8002724:	f023 0302 	bic.w	r3, r3, #2
 8002728:	041b      	lsls	r3, r3, #16
 800272a:	0c1b      	lsrs	r3, r3, #16
 800272c:	8283      	strh	r3, [r0, #20]
 800272e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002730:	b29b      	uxth	r3, r3
 8002732:	f043 0302 	orr.w	r3, r3, #2
 8002736:	8283      	strh	r3, [r0, #20]
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop

0800273c <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800273c:	8a83      	ldrh	r3, [r0, #20]
 800273e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8002740:	b91a      	cbnz	r2, 800274a <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002742:	ea23 0101 	bic.w	r1, r3, r1
 8002746:	8281      	strh	r1, [r0, #20]
 8002748:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800274a:	4319      	orrs	r1, r3
 800274c:	8281      	strh	r1, [r0, #20]
 800274e:	4770      	bx	lr

08002750 <USART_ITConfig>:

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8002750:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002754:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002756:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800275a:	2401      	movs	r4, #1
 800275c:	fa14 f303 	lsls.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002760:	42a1      	cmp	r1, r4
 8002762:	d00d      	beq.n	8002780 <USART_ITConfig+0x30>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002764:	2902      	cmp	r1, #2
 8002766:	d00d      	beq.n	8002784 <USART_ITConfig+0x34>
  {
    usartxbase += 0x10;
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002768:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 800276a:	b92a      	cbnz	r2, 8002778 <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800276c:	6802      	ldr	r2, [r0, #0]
 800276e:	ea22 0303 	bic.w	r3, r2, r3
 8002772:	6003      	str	r3, [r0, #0]
  }
}
 8002774:	bc10      	pop	{r4}
 8002776:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002778:	6802      	ldr	r2, [r0, #0]
 800277a:	4313      	orrs	r3, r2
 800277c:	6003      	str	r3, [r0, #0]
 800277e:	e7f9      	b.n	8002774 <USART_ITConfig+0x24>
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 8002780:	300c      	adds	r0, #12
 8002782:	e7f2      	b.n	800276a <USART_ITConfig+0x1a>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x10;
 8002784:	3010      	adds	r0, #16
 8002786:	e7f0      	b.n	800276a <USART_ITConfig+0x1a>

08002788 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002788:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 800278a:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800278c:	bf0c      	ite	eq
 800278e:	2000      	moveq	r0, #0
 8002790:	2001      	movne	r0, #1
 8002792:	4770      	bx	lr

08002794 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002794:	43c9      	mvns	r1, r1
 8002796:	b289      	uxth	r1, r1
 8002798:	8001      	strh	r1, [r0, #0]
}
 800279a:	4770      	bx	lr

0800279c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800279c:	b410      	push	{r4}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800279e:	f001 021f 	and.w	r2, r1, #31
  itmask = (uint32_t)0x01 << itmask;
 80027a2:	2401      	movs	r4, #1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80027a4:	f3c1 1342 	ubfx	r3, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80027a8:	4094      	lsls	r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d016      	beq.n	80027dc <USART_GetITStatus+0x40>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80027ae:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 80027b0:	bf0c      	ite	eq
 80027b2:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80027b4:	8a82      	ldrhne	r2, [r0, #20]
 80027b6:	b292      	uxth	r2, r2
 80027b8:	4022      	ands	r2, r4
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 80027ba:	8803      	ldrh	r3, [r0, #0]
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 80027bc:	2401      	movs	r4, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 80027be:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 80027c0:	fa14 f101 	lsls.w	r1, r4, r1
  bitpos &= USARTx->SR;
 80027c4:	b29b      	uxth	r3, r3
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80027c6:	4219      	tst	r1, r3
 80027c8:	bf0c      	ite	eq
 80027ca:	2300      	moveq	r3, #0
 80027cc:	2301      	movne	r3, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 80027ce:	2a00      	cmp	r2, #0
 80027d0:	bf0c      	ite	eq
 80027d2:	2000      	moveq	r0, #0
 80027d4:	f003 0001 	andne.w	r0, r3, #1
 80027d8:	bc10      	pop	{r4}
 80027da:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 80027dc:	8982      	ldrh	r2, [r0, #12]
 80027de:	b292      	uxth	r2, r2
 80027e0:	4022      	ands	r2, r4
 80027e2:	e7ea      	b.n	80027ba <USART_GetITStatus+0x1e>

080027e4 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80027e4:	0a09      	lsrs	r1, r1, #8
 80027e6:	2301      	movs	r3, #1
 80027e8:	fa13 f101 	lsls.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 80027ec:	43c9      	mvns	r1, r1
 80027ee:	b289      	uxth	r1, r1
 80027f0:	8001      	strh	r1, [r0, #0]
}
 80027f2:	4770      	bx	lr

080027f4 <NVIC_Configuration>:
  * @brief  Configures the nested vectored interrupt controller.
  * @param  None
  * @retval None
  */
void NVIC_Configuration(void)
{
 80027f4:	b500      	push	{lr}
 80027f6:	b083      	sub	sp, #12
    NVIC_InitTypeDef NVIC_InitStructure;
    /* Enable the TIM2 gloabal Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;
 80027f8:	2232      	movs	r2, #50	; 0x32
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80027fa:	2301      	movs	r3, #1
  */
void NVIC_Configuration(void)
{
    NVIC_InitTypeDef NVIC_InitStructure;
    /* Enable the TIM2 gloabal Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;
 80027fc:	f88d 2004 	strb.w	r2, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

    NVIC_Init(&NVIC_InitStructure);
 8002800:	a801      	add	r0, sp, #4
void NVIC_Configuration(void)
{
    NVIC_InitTypeDef NVIC_InitStructure;
    /* Enable the TIM2 gloabal Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002802:	2200      	movs	r2, #0
 8002804:	f88d 2005 	strb.w	r2, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8002808:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800280c:	f88d 3007 	strb.w	r3, [sp, #7]

    NVIC_Init(&NVIC_InitStructure);
 8002810:	f7fe fa9a 	bl	8000d48 <NVIC_Init>
}
 8002814:	b003      	add	sp, #12
 8002816:	bd00      	pop	{pc}

08002818 <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8002818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop

08002820 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8002820:	f241 6328 	movw	r3, #5672	; 0x1628
 8002824:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002828:	220c      	movs	r2, #12
 800282a:	601a      	str	r2, [r3, #0]
	return -1;
}
 800282c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop

08002834 <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 8002834:	f241 6328 	movw	r3, #5672	; 0x1628
 8002838:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800283c:	220b      	movs	r2, #11
 800283e:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop

08002848 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800284c:	604b      	str	r3, [r1, #4]
	return 0;
}
 800284e:	2000      	movs	r0, #0
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop

08002854 <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 8002854:	2001      	movs	r0, #1
 8002856:	4770      	bx	lr

08002858 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8002858:	2802      	cmp	r0, #2
 800285a:	d801      	bhi.n	8002860 <_isatty+0x8>
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 800285c:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 800285e:	4770      	bx	lr
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8002860:	4b02      	ldr	r3, [pc, #8]	; (800286c <_isatty+0x14>)
 8002862:	2209      	movs	r2, #9
 8002864:	601a      	str	r2, [r3, #0]
		return 0;
 8002866:	2000      	movs	r0, #0
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20001628 	.word	0x20001628

08002870 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 8002870:	f241 6328 	movw	r3, #5672	; 0x1628
 8002874:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002878:	2216      	movs	r2, #22
 800287a:	601a      	str	r2, [r3, #0]
	return (-1);
}
 800287c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop

08002884 <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 8002884:	f241 6328 	movw	r3, #5672	; 0x1628
 8002888:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800288c:	221f      	movs	r2, #31
 800288e:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop

08002898 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8002898:	2000      	movs	r0, #0
 800289a:	4770      	bx	lr

0800289c <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 800289c:	b430      	push	{r4, r5}
	int n;
	int num = 0;
	switch (file) {
 800289e:	b130      	cbz	r0, 80028ae <_read+0x12>
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <_read+0x34>)
 80028a2:	2209      	movs	r2, #9
 80028a4:	601a      	str	r2, [r3, #0]
				return -1;
 80028a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 80028aa:	bc30      	pop	{r4, r5}
 80028ac:	4770      	bx	lr
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 80028ae:	2a00      	cmp	r2, #0
 80028b0:	ddfb      	ble.n	80028aa <_read+0xe>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 80028b2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 80028b6:	188d      	adds	r5, r1, r2
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 80028b8:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80028bc:	8823      	ldrh	r3, [r4, #0]
 80028be:	069b      	lsls	r3, r3, #26
 80028c0:	d5fc      	bpl.n	80028bc <_read+0x20>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 80028c2:	88a3      	ldrh	r3, [r4, #4]
 80028c4:	f801 3b01 	strb.w	r3, [r1], #1
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 80028c8:	42a9      	cmp	r1, r5
 80028ca:	d1f7      	bne.n	80028bc <_read+0x20>
 80028cc:	4610      	mov	r0, r2
 80028ce:	e7ec      	b.n	80028aa <_read+0xe>
 80028d0:	20001628 	.word	0x20001628

080028d4 <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 80028d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028d8:	604b      	str	r3, [r1, #4]
	return 0;
}
 80028da:	2000      	movs	r0, #0
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop

080028e0 <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop

080028e8 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 80028e8:	f241 6328 	movw	r3, #5672	; 0x1628
 80028ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028f0:	2202      	movs	r2, #2
 80028f2:	601a      	str	r2, [r3, #0]
	return -1;
}
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop

080028fc <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 80028fc:	f241 6328 	movw	r3, #5672	; 0x1628
 8002900:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002904:	220a      	movs	r2, #10
 8002906:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop

08002910 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002910:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002912:	b430      	push	{r4, r5}
	int n;
	switch (file) {
 8002914:	d009      	beq.n	800292a <_write+0x1a>
 8002916:	2802      	cmp	r0, #2
 8002918:	d017      	beq.n	800294a <_write+0x3a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 800291a:	4b14      	ldr	r3, [pc, #80]	; (800296c <_write+0x5c>)
 800291c:	2209      	movs	r2, #9
 800291e:	601a      	str	r2, [r3, #0]
				return -1;
 8002920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 8002924:	4610      	mov	r0, r2
 8002926:	bc30      	pop	{r4, r5}
 8002928:	4770      	bx	lr
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 800292a:	2a00      	cmp	r2, #0
 800292c:	ddfa      	ble.n	8002924 <_write+0x14>
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800292e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002932:	188d      	adds	r5, r1, r2
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002934:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8002938:	8823      	ldrh	r3, [r4, #0]
 800293a:	065b      	lsls	r3, r3, #25
 800293c:	d5fc      	bpl.n	8002938 <_write+0x28>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 800293e:	f811 3b01 	ldrb.w	r3, [r1], #1
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002942:	42a9      	cmp	r1, r5
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002944:	80a3      	strh	r3, [r4, #4]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002946:	d1f7      	bne.n	8002938 <_write+0x28>
 8002948:	e7ec      	b.n	8002924 <_write+0x14>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 800294a:	2a00      	cmp	r2, #0
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800294c:	bfc2      	ittt	gt
 800294e:	f44f 5480 	movgt.w	r4, #4096	; 0x1000
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002952:	188d      	addgt	r5, r1, r2
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002954:	f2c4 0401 	movtgt	r4, #16385	; 0x4001
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002958:	dde4      	ble.n	8002924 <_write+0x14>
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800295a:	8823      	ldrh	r3, [r4, #0]
 800295c:	0658      	lsls	r0, r3, #25
 800295e:	d5fc      	bpl.n	800295a <_write+0x4a>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002960:	f811 3b01 	ldrb.w	r3, [r1], #1
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002964:	42a9      	cmp	r1, r5
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002966:	80a3      	strh	r3, [r4, #4]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002968:	d1f7      	bne.n	800295a <_write+0x4a>
 800296a:	e7db      	b.n	8002924 <_write+0x14>
 800296c:	20001628 	.word	0x20001628

08002970 <_sbrk>:

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8002970:	4a0d      	ldr	r2, [pc, #52]	; (80029a8 <_sbrk+0x38>)
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8002972:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8002974:	6813      	ldr	r3, [r2, #0]
 8002976:	b1a3      	cbz	r3, 80029a2 <_sbrk+0x32>
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8002978:	f3ef 8108 	mrs	r1, MSP
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 800297c:	1818      	adds	r0, r3, r0
 800297e:	4288      	cmp	r0, r1
		errno = ENOMEM;
		return (caddr_t) -1;
		//abort ();
	}

	heap_end += incr;
 8002980:	bf98      	it	ls
 8002982:	6010      	strls	r0, [r2, #0]
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 8002984:	d801      	bhi.n	800298a <_sbrk+0x1a>
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 8002986:	4618      	mov	r0, r3
 8002988:	bd08      	pop	{r3, pc}
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 800298a:	2219      	movs	r2, #25
 800298c:	2002      	movs	r0, #2
 800298e:	4907      	ldr	r1, [pc, #28]	; (80029ac <_sbrk+0x3c>)
 8002990:	f7ff ffbe 	bl	8002910 <_write>
		errno = ENOMEM;
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <_sbrk+0x40>)
 8002996:	220c      	movs	r2, #12
 8002998:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 800299e:	4618      	mov	r0, r3
 80029a0:	bd08      	pop	{r3, pc}
	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
		heap_end = &_ebss;
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <_sbrk+0x44>)
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e7e7      	b.n	8002978 <_sbrk+0x8>
 80029a8:	2000098c 	.word	0x2000098c
 80029ac:	0800812c 	.word	0x0800812c
 80029b0:	20001628 	.word	0x20001628
 80029b4:	2000162c 	.word	0x2000162c

080029b8 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 80029b8:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 80029ba:	2001      	movs	r0, #1
 80029bc:	4902      	ldr	r1, [pc, #8]	; (80029c8 <_exit+0x10>)
 80029be:	2204      	movs	r2, #4
 80029c0:	f7ff ffa6 	bl	8002910 <_write>
 80029c4:	e7fe      	b.n	80029c4 <_exit+0xc>
 80029c6:	bf00      	nop
 80029c8:	08008148 	.word	0x08008148
 80029cc:	080081b4 	.word	0x080081b4
 80029d0:	20000000 	.word	0x20000000
 80029d4:	2000098c 	.word	0x2000098c
 80029d8:	2000098c 	.word	0x2000098c
 80029dc:	2000162c 	.word	0x2000162c

080029e0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop

080029e4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80029e4:	e7fe      	b.n	80029e4 <HardFault_Handler>
 80029e6:	bf00      	nop

080029e8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80029e8:	e7fe      	b.n	80029e8 <MemManage_Handler>
 80029ea:	bf00      	nop

080029ec <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80029ec:	e7fe      	b.n	80029ec <BusFault_Handler>
 80029ee:	bf00      	nop

080029f0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80029f0:	e7fe      	b.n	80029f0 <UsageFault_Handler>
 80029f2:	bf00      	nop

080029f4 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop

080029f8 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop

080029fc <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop

08002a00 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002a00:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002a04:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a08:	2200      	movs	r2, #0
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002a0a:	6819      	ldr	r1, [r3, #0]
 8002a0c:	f041 0101 	orr.w	r1, r1, #1
 8002a10:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a12:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002a14:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002a16:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002a1a:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002a1e:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002a22:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8002a26:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002a28:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a2a:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a2c:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a2e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002a32:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002a34:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002a36:	9200      	str	r2, [sp, #0]
 8002a38:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a40:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002a42:	461a      	mov	r2, r3
 8002a44:	e003      	b.n	8002a4e <SystemInit+0x4e>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002a46:	9b00      	ldr	r3, [sp, #0]
 8002a48:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002a4c:	d009      	beq.n	8002a62 <SystemInit+0x62>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002a4e:	6813      	ldr	r3, [r2, #0]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a54:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 8002a56:	9b00      	ldr	r3, [sp, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002a5c:	9b01      	ldr	r3, [sp, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f1      	beq.n	8002a46 <SystemInit+0x46>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002a62:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002a66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002a70:	bf08      	it	eq
 8002a72:	9301      	streq	r3, [sp, #4]
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002a74:	d001      	beq.n	8002a7a <SystemInit+0x7a>
  {
    HSEStatus = (uint32_t)0x01;
 8002a76:	2301      	movs	r3, #1
 8002a78:	9301      	str	r3, [sp, #4]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
 8002a7a:	9b01      	ldr	r3, [sp, #4]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d008      	beq.n	8002a92 <SystemInit+0x92>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a80:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8002a84:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002a88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a8c:	609a      	str	r2, [r3, #8]
#endif
}
 8002a8e:	b002      	add	sp, #8
 8002a90:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002a92:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002a96:	f2c4 0302 	movt	r3, #16386	; 0x4002
    PWR->CR |= PWR_CR_PMODE;  
 8002a9a:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002a9e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8002aa0:	f2c4 0200 	movt	r2, #16384	; 0x4000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002aa4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002aa8:	6419      	str	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8002aaa:	6811      	ldr	r1, [r2, #0]
 8002aac:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002ab0:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002abc:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002abe:	6899      	ldr	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002ac0:	f245 4208 	movw	r2, #21512	; 0x5408
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002ac4:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002ac8:	f2c0 7240 	movt	r2, #1856	; 0x740
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002acc:	6099      	str	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002ace:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002ad6:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002ad8:	4619      	mov	r1, r3
 8002ada:	680a      	ldr	r2, [r1, #0]
 8002adc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002ae0:	0192      	lsls	r2, r2, #6
 8002ae2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ae6:	d5f8      	bpl.n	8002ada <SystemInit+0xda>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002ae8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8002aec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002af0:	f240 6105 	movw	r1, #1541	; 0x605
 8002af4:	6011      	str	r1, [r2, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	f022 0203 	bic.w	r2, r2, #3
 8002afc:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	f042 0202 	orr.w	r2, r2, #2
 8002b04:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	f002 020c 	and.w	r2, r2, #12
 8002b0c:	2a08      	cmp	r2, #8
 8002b0e:	d1fa      	bne.n	8002b06 <SystemInit+0x106>
 8002b10:	e7b6      	b.n	8002a80 <SystemInit+0x80>
 8002b12:	bf00      	nop

08002b14 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002b14:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8002b22:	2a04      	cmp	r2, #4
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 8002b24:	bf04      	itt	eq
 8002b26:	f44f 5190 	moveq.w	r1, #4608	; 0x1200
 8002b2a:	f2c0 017a 	movteq	r1, #122	; 0x7a
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8002b2e:	d006      	beq.n	8002b3e <SystemCoreClockUpdate+0x2a>
 8002b30:	2a08      	cmp	r2, #8
 8002b32:	bf1c      	itt	ne
 8002b34:	f44f 5110 	movne.w	r1, #9216	; 0x2400
 8002b38:	f2c0 01f4 	movtne	r1, #244	; 0xf4
 8002b3c:	d00b      	beq.n	8002b56 <SystemCoreClockUpdate+0x42>
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002b3e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b42:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002b46:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <SystemCoreClockUpdate+0x88>)
 8002b48:	6892      	ldr	r2, [r2, #8]
 8002b4a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002b4e:	5c9a      	ldrb	r2, [r3, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002b50:	40d1      	lsrs	r1, r2
 8002b52:	6119      	str	r1, [r3, #16]
}
 8002b54:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002b56:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b58:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8002b5a:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002b5e:	6858      	ldr	r0, [r3, #4]
 8002b60:	bf15      	itete	ne
 8002b62:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002b66:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002b6a:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002b6e:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b72:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002b76:	fbb3 f1f2 	udiv	r1, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002b7a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002b82:	f3c0 1088 	ubfx	r0, r0, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002b8c:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002b8e:	fb01 f100 	mul.w	r1, r1, r0
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002b92:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 8002b94:	fbb1 f1f3 	udiv	r1, r1, r3
      break;
 8002b98:	e7d1      	b.n	8002b3e <SystemCoreClockUpdate+0x2a>
 8002b9a:	bf00      	nop
 8002b9c:	200000b8 	.word	0x200000b8

08002ba0 <cleanup_glue>:
 8002ba0:	b538      	push	{r3, r4, r5, lr}
 8002ba2:	460c      	mov	r4, r1
 8002ba4:	6809      	ldr	r1, [r1, #0]
 8002ba6:	4605      	mov	r5, r0
 8002ba8:	b109      	cbz	r1, 8002bae <cleanup_glue+0xe>
 8002baa:	f7ff fff9 	bl	8002ba0 <cleanup_glue>
 8002bae:	4628      	mov	r0, r5
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bb6:	f002 ba23 	b.w	8005000 <_free_r>
 8002bba:	bf00      	nop

08002bbc <_reclaim_reent>:
 8002bbc:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <_reclaim_reent+0x8c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4298      	cmp	r0, r3
 8002bc2:	b570      	push	{r4, r5, r6, lr}
 8002bc4:	4605      	mov	r5, r0
 8002bc6:	d032      	beq.n	8002c2e <_reclaim_reent+0x72>
 8002bc8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002bca:	b1ab      	cbz	r3, 8002bf8 <_reclaim_reent+0x3c>
 8002bcc:	2200      	movs	r2, #0
 8002bce:	4616      	mov	r6, r2
 8002bd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bd4:	b909      	cbnz	r1, 8002bda <_reclaim_reent+0x1e>
 8002bd6:	e007      	b.n	8002be8 <_reclaim_reent+0x2c>
 8002bd8:	4621      	mov	r1, r4
 8002bda:	680c      	ldr	r4, [r1, #0]
 8002bdc:	4628      	mov	r0, r5
 8002bde:	f002 fa0f 	bl	8005000 <_free_r>
 8002be2:	2c00      	cmp	r4, #0
 8002be4:	d1f8      	bne.n	8002bd8 <_reclaim_reent+0x1c>
 8002be6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002be8:	3601      	adds	r6, #1
 8002bea:	2e20      	cmp	r6, #32
 8002bec:	4632      	mov	r2, r6
 8002bee:	d1ef      	bne.n	8002bd0 <_reclaim_reent+0x14>
 8002bf0:	4628      	mov	r0, r5
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f002 fa04 	bl	8005000 <_free_r>
 8002bf8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8002bfa:	b111      	cbz	r1, 8002c02 <_reclaim_reent+0x46>
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	f002 f9ff 	bl	8005000 <_free_r>
 8002c02:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 8002c06:	b159      	cbz	r1, 8002c20 <_reclaim_reent+0x64>
 8002c08:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8002c0c:	42b1      	cmp	r1, r6
 8002c0e:	d101      	bne.n	8002c14 <_reclaim_reent+0x58>
 8002c10:	e006      	b.n	8002c20 <_reclaim_reent+0x64>
 8002c12:	4621      	mov	r1, r4
 8002c14:	680c      	ldr	r4, [r1, #0]
 8002c16:	4628      	mov	r0, r5
 8002c18:	f002 f9f2 	bl	8005000 <_free_r>
 8002c1c:	42a6      	cmp	r6, r4
 8002c1e:	d1f8      	bne.n	8002c12 <_reclaim_reent+0x56>
 8002c20:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8002c22:	b111      	cbz	r1, 8002c2a <_reclaim_reent+0x6e>
 8002c24:	4628      	mov	r0, r5
 8002c26:	f002 f9eb 	bl	8005000 <_free_r>
 8002c2a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002c2c:	b903      	cbnz	r3, 8002c30 <_reclaim_reent+0x74>
 8002c2e:	bd70      	pop	{r4, r5, r6, pc}
 8002c30:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002c32:	4628      	mov	r0, r5
 8002c34:	4798      	blx	r3
 8002c36:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 8002c3a:	2900      	cmp	r1, #0
 8002c3c:	d0f7      	beq.n	8002c2e <_reclaim_reent+0x72>
 8002c3e:	4628      	mov	r0, r5
 8002c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002c44:	e7ac      	b.n	8002ba0 <cleanup_glue>
 8002c46:	bf00      	nop
 8002c48:	200000d0 	.word	0x200000d0

08002c4c <_wrapup_reent>:
 8002c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4e:	4607      	mov	r7, r0
 8002c50:	b1b0      	cbz	r0, 8002c80 <_wrapup_reent+0x34>
 8002c52:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 8002c56:	b176      	cbz	r6, 8002c76 <_wrapup_reent+0x2a>
 8002c58:	6875      	ldr	r5, [r6, #4]
 8002c5a:	1e6c      	subs	r4, r5, #1
 8002c5c:	d408      	bmi.n	8002c70 <_wrapup_reent+0x24>
 8002c5e:	3502      	adds	r5, #2
 8002c60:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8002c64:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8002c68:	3c01      	subs	r4, #1
 8002c6a:	4798      	blx	r3
 8002c6c:	1c63      	adds	r3, r4, #1
 8002c6e:	d1f9      	bne.n	8002c64 <_wrapup_reent+0x18>
 8002c70:	6836      	ldr	r6, [r6, #0]
 8002c72:	2e00      	cmp	r6, #0
 8002c74:	d1f0      	bne.n	8002c58 <_wrapup_reent+0xc>
 8002c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c78:	b10b      	cbz	r3, 8002c7e <_wrapup_reent+0x32>
 8002c7a:	4638      	mov	r0, r7
 8002c7c:	4798      	blx	r3
 8002c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c80:	4b01      	ldr	r3, [pc, #4]	; (8002c88 <_wrapup_reent+0x3c>)
 8002c82:	681f      	ldr	r7, [r3, #0]
 8002c84:	e7e5      	b.n	8002c52 <_wrapup_reent+0x6>
 8002c86:	bf00      	nop
 8002c88:	200000d0 	.word	0x200000d0

08002c8c <_sprintf_r>:
 8002c8c:	b40c      	push	{r2, r3}
 8002c8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c90:	b09d      	sub	sp, #116	; 0x74
 8002c92:	ac22      	add	r4, sp, #136	; 0x88
 8002c94:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8002c98:	f854 2b04 	ldr.w	r2, [r4], #4
 8002c9c:	9101      	str	r1, [sp, #4]
 8002c9e:	460e      	mov	r6, r1
 8002ca0:	4623      	mov	r3, r4
 8002ca2:	9503      	str	r5, [sp, #12]
 8002ca4:	9506      	str	r5, [sp, #24]
 8002ca6:	a901      	add	r1, sp, #4
 8002ca8:	f44f 7702 	mov.w	r7, #520	; 0x208
 8002cac:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8002cb0:	f8ad 7010 	strh.w	r7, [sp, #16]
 8002cb4:	9605      	str	r6, [sp, #20]
 8002cb6:	f8ad 5012 	strh.w	r5, [sp, #18]
 8002cba:	941b      	str	r4, [sp, #108]	; 0x6c
 8002cbc:	f000 f830 	bl	8002d20 <_svfprintf_r>
 8002cc0:	9b01      	ldr	r3, [sp, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	b01d      	add	sp, #116	; 0x74
 8002cc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8002ccc:	b002      	add	sp, #8
 8002cce:	4770      	bx	lr

08002cd0 <sprintf>:
 8002cd0:	b40e      	push	{r1, r2, r3}
 8002cd2:	b570      	push	{r4, r5, r6, lr}
 8002cd4:	b09d      	sub	sp, #116	; 0x74
 8002cd6:	ac21      	add	r4, sp, #132	; 0x84
 8002cd8:	f240 03d0 	movw	r3, #208	; 0xd0
 8002cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ce0:	f854 2b04 	ldr.w	r2, [r4], #4
 8002ce4:	4606      	mov	r6, r0
 8002ce6:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	9503      	str	r5, [sp, #12]
 8002cee:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002cf2:	f8ad 3010 	strh.w	r3, [sp, #16]
 8002cf6:	9506      	str	r5, [sp, #24]
 8002cf8:	4623      	mov	r3, r4
 8002cfa:	a901      	add	r1, sp, #4
 8002cfc:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8002d00:	9601      	str	r6, [sp, #4]
 8002d02:	9605      	str	r6, [sp, #20]
 8002d04:	f8ad 5012 	strh.w	r5, [sp, #18]
 8002d08:	941b      	str	r4, [sp, #108]	; 0x6c
 8002d0a:	f000 f809 	bl	8002d20 <_svfprintf_r>
 8002d0e:	9b01      	ldr	r3, [sp, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	b01d      	add	sp, #116	; 0x74
 8002d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002d1a:	b003      	add	sp, #12
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop

08002d20 <_svfprintf_r>:
 8002d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d24:	b0c5      	sub	sp, #276	; 0x114
 8002d26:	468a      	mov	sl, r1
 8002d28:	4614      	mov	r4, r2
 8002d2a:	930e      	str	r3, [sp, #56]	; 0x38
 8002d2c:	900f      	str	r0, [sp, #60]	; 0x3c
 8002d2e:	f002 fa5f 	bl	80051f0 <_localeconv_r>
 8002d32:	6800      	ldr	r0, [r0, #0]
 8002d34:	9017      	str	r0, [sp, #92]	; 0x5c
 8002d36:	f003 fb35 	bl	80063a4 <strlen>
 8002d3a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8002d3e:	901a      	str	r0, [sp, #104]	; 0x68
 8002d40:	2100      	movs	r1, #0
 8002d42:	2000      	movs	r0, #0
 8002d44:	061a      	lsls	r2, r3, #24
 8002d46:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8002d4a:	d504      	bpl.n	8002d56 <_svfprintf_r+0x36>
 8002d4c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f001 8004 	beq.w	8003d5e <_svfprintf_r+0x103e>
 8002d56:	2300      	movs	r3, #0
 8002d58:	f10d 00e3 	add.w	r0, sp, #227	; 0xe3
 8002d5c:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8002d60:	a91f      	add	r1, sp, #124	; 0x7c
 8002d62:	9310      	str	r3, [sp, #64]	; 0x40
 8002d64:	933b      	str	r3, [sp, #236]	; 0xec
 8002d66:	933a      	str	r3, [sp, #232]	; 0xe8
 8002d68:	931c      	str	r3, [sp, #112]	; 0x70
 8002d6a:	931b      	str	r3, [sp, #108]	; 0x6c
 8002d6c:	930c      	str	r3, [sp, #48]	; 0x30
 8002d6e:	ebc0 030b 	rsb	r3, r0, fp
 8002d72:	9007      	str	r0, [sp, #28]
 8002d74:	9139      	str	r1, [sp, #228]	; 0xe4
 8002d76:	9409      	str	r4, [sp, #36]	; 0x24
 8002d78:	460e      	mov	r6, r1
 8002d7a:	931d      	str	r3, [sp, #116]	; 0x74
 8002d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d7e:	7803      	ldrb	r3, [r0, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf18      	it	ne
 8002d84:	2b25      	cmpne	r3, #37	; 0x25
 8002d86:	f000 80af 	beq.w	8002ee8 <_svfprintf_r+0x1c8>
 8002d8a:	4607      	mov	r7, r0
 8002d8c:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8002d90:	2b25      	cmp	r3, #37	; 0x25
 8002d92:	bf18      	it	ne
 8002d94:	2b00      	cmpne	r3, #0
 8002d96:	d1f9      	bne.n	8002d8c <_svfprintf_r+0x6c>
 8002d98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d9a:	ebb7 0801 	subs.w	r8, r7, r1
 8002d9e:	d00e      	beq.n	8002dbe <_svfprintf_r+0x9e>
 8002da0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8002da2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8002da4:	6031      	str	r1, [r6, #0]
 8002da6:	3401      	adds	r4, #1
 8002da8:	4445      	add	r5, r8
 8002daa:	2c07      	cmp	r4, #7
 8002dac:	f8c6 8004 	str.w	r8, [r6, #4]
 8002db0:	953b      	str	r5, [sp, #236]	; 0xec
 8002db2:	943a      	str	r4, [sp, #232]	; 0xe8
 8002db4:	dc7c      	bgt.n	8002eb0 <_svfprintf_r+0x190>
 8002db6:	3608      	adds	r6, #8
 8002db8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002dba:	4442      	add	r2, r8
 8002dbc:	920c      	str	r2, [sp, #48]	; 0x30
 8002dbe:	783b      	ldrb	r3, [r7, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d07d      	beq.n	8002ec0 <_svfprintf_r+0x1a0>
 8002dc4:	3701      	adds	r7, #1
 8002dc6:	9709      	str	r7, [sp, #36]	; 0x24
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002dcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8002dce:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8002dd2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002dd6:	9308      	str	r3, [sp, #32]
 8002dd8:	2720      	movs	r7, #32
 8002dda:	252b      	movs	r5, #43	; 0x2b
 8002ddc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002de0:	f1a3 0220 	sub.w	r2, r3, #32
 8002de4:	2a58      	cmp	r2, #88	; 0x58
 8002de6:	f200 823b 	bhi.w	8003260 <_svfprintf_r+0x540>
 8002dea:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002dee:	024c      	.short	0x024c
 8002df0:	02390239 	.word	0x02390239
 8002df4:	02390254 	.word	0x02390254
 8002df8:	02390239 	.word	0x02390239
 8002dfc:	02390239 	.word	0x02390239
 8002e00:	02590239 	.word	0x02590239
 8002e04:	0239007f 	.word	0x0239007f
 8002e08:	0082005c 	.word	0x0082005c
 8002e0c:	009d0239 	.word	0x009d0239
 8002e10:	00a200a2 	.word	0x00a200a2
 8002e14:	00a200a2 	.word	0x00a200a2
 8002e18:	00a200a2 	.word	0x00a200a2
 8002e1c:	00a200a2 	.word	0x00a200a2
 8002e20:	023900a2 	.word	0x023900a2
 8002e24:	02390239 	.word	0x02390239
 8002e28:	02390239 	.word	0x02390239
 8002e2c:	02390239 	.word	0x02390239
 8002e30:	02390239 	.word	0x02390239
 8002e34:	00b50239 	.word	0x00b50239
 8002e38:	02390154 	.word	0x02390154
 8002e3c:	02390154 	.word	0x02390154
 8002e40:	02390239 	.word	0x02390239
 8002e44:	018b0239 	.word	0x018b0239
 8002e48:	02390239 	.word	0x02390239
 8002e4c:	02390190 	.word	0x02390190
 8002e50:	02390239 	.word	0x02390239
 8002e54:	02390239 	.word	0x02390239
 8002e58:	023901a7 	.word	0x023901a7
 8002e5c:	01ba0239 	.word	0x01ba0239
 8002e60:	02390239 	.word	0x02390239
 8002e64:	02390239 	.word	0x02390239
 8002e68:	02390239 	.word	0x02390239
 8002e6c:	02390239 	.word	0x02390239
 8002e70:	02390239 	.word	0x02390239
 8002e74:	02780293 	.word	0x02780293
 8002e78:	01540154 	.word	0x01540154
 8002e7c:	028e0154 	.word	0x028e0154
 8002e80:	02390278 	.word	0x02390278
 8002e84:	02130239 	.word	0x02130239
 8002e88:	02180239 	.word	0x02180239
 8002e8c:	02a50224 	.word	0x02a50224
 8002e90:	023901de 	.word	0x023901de
 8002e94:	023901e3 	.word	0x023901e3
 8002e98:	02390264 	.word	0x02390264
 8002e9c:	02c70239 	.word	0x02c70239
 8002ea0:	4252      	negs	r2, r2
 8002ea2:	920b      	str	r2, [sp, #44]	; 0x2c
 8002ea4:	930e      	str	r3, [sp, #56]	; 0x38
 8002ea6:	9b08      	ldr	r3, [sp, #32]
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	9308      	str	r3, [sp, #32]
 8002eae:	e795      	b.n	8002ddc <_svfprintf_r+0xbc>
 8002eb0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002eb2:	4651      	mov	r1, sl
 8002eb4:	465a      	mov	r2, fp
 8002eb6:	f003 faa5 	bl	8006404 <__ssprint_r>
 8002eba:	b940      	cbnz	r0, 8002ece <_svfprintf_r+0x1ae>
 8002ebc:	ae1f      	add	r6, sp, #124	; 0x7c
 8002ebe:	e77b      	b.n	8002db8 <_svfprintf_r+0x98>
 8002ec0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8002ec2:	b123      	cbz	r3, 8002ece <_svfprintf_r+0x1ae>
 8002ec4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002ec6:	4651      	mov	r1, sl
 8002ec8:	aa39      	add	r2, sp, #228	; 0xe4
 8002eca:	f003 fa9b 	bl	8006404 <__ssprint_r>
 8002ece:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8002ed2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ed8:	bf18      	it	ne
 8002eda:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8002ede:	930c      	str	r3, [sp, #48]	; 0x30
 8002ee0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002ee2:	b045      	add	sp, #276	; 0x114
 8002ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002eea:	e768      	b.n	8002dbe <_svfprintf_r+0x9e>
 8002eec:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8002ef0:	e774      	b.n	8002ddc <_svfprintf_r+0xbc>
 8002ef2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ef8:	f001 804c 	beq.w	8003f94 <_svfprintf_r+0x1274>
 8002efc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002f00:	2400      	movs	r4, #0
 8002f02:	2a09      	cmp	r2, #9
 8002f04:	f63f af6c 	bhi.w	8002de0 <_svfprintf_r+0xc0>
 8002f08:	4601      	mov	r1, r0
 8002f0a:	2400      	movs	r4, #0
 8002f0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f10:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002f14:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8002f18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002f1c:	2a09      	cmp	r2, #9
 8002f1e:	4608      	mov	r0, r1
 8002f20:	d9f4      	bls.n	8002f0c <_svfprintf_r+0x1ec>
 8002f22:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8002f26:	e75b      	b.n	8002de0 <_svfprintf_r+0xc0>
 8002f28:	9a08      	ldr	r2, [sp, #32]
 8002f2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f2e:	9208      	str	r2, [sp, #32]
 8002f30:	e754      	b.n	8002ddc <_svfprintf_r+0xbc>
 8002f32:	4601      	mov	r1, r0
 8002f34:	2200      	movs	r2, #0
 8002f36:	46b4      	mov	ip, r6
 8002f38:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002f3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f40:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8002f44:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002f48:	2e09      	cmp	r6, #9
 8002f4a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002f4e:	4608      	mov	r0, r1
 8002f50:	d9f2      	bls.n	8002f38 <_svfprintf_r+0x218>
 8002f52:	4666      	mov	r6, ip
 8002f54:	920b      	str	r2, [sp, #44]	; 0x2c
 8002f56:	e743      	b.n	8002de0 <_svfprintf_r+0xc0>
 8002f58:	9315      	str	r3, [sp, #84]	; 0x54
 8002f5a:	9b08      	ldr	r3, [sp, #32]
 8002f5c:	9009      	str	r0, [sp, #36]	; 0x24
 8002f5e:	f043 0310 	orr.w	r3, r3, #16
 8002f62:	9308      	str	r3, [sp, #32]
 8002f64:	9808      	ldr	r0, [sp, #32]
 8002f66:	06c3      	lsls	r3, r0, #27
 8002f68:	f100 81bf 	bmi.w	80032ea <_svfprintf_r+0x5ca>
 8002f6c:	9a08      	ldr	r2, [sp, #32]
 8002f6e:	0655      	lsls	r5, r2, #25
 8002f70:	f140 81bb 	bpl.w	80032ea <_svfprintf_r+0x5ca>
 8002f74:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002f76:	f9b0 3000 	ldrsh.w	r3, [r0]
 8002f7a:	3004      	adds	r0, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	900e      	str	r0, [sp, #56]	; 0x38
 8002f80:	f2c0 81ba 	blt.w	80032f8 <_svfprintf_r+0x5d8>
 8002f84:	bf0c      	ite	eq
 8002f86:	2100      	moveq	r1, #0
 8002f88:	2101      	movne	r1, #1
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	2c00      	cmp	r4, #0
 8002f8e:	bfa2      	ittt	ge
 8002f90:	9808      	ldrge	r0, [sp, #32]
 8002f92:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8002f96:	9008      	strge	r0, [sp, #32]
 8002f98:	2c00      	cmp	r4, #0
 8002f9a:	bf18      	it	ne
 8002f9c:	f041 0101 	orrne.w	r1, r1, #1
 8002fa0:	2900      	cmp	r1, #0
 8002fa2:	f000 8323 	beq.w	80035ec <_svfprintf_r+0x8cc>
 8002fa6:	2a01      	cmp	r2, #1
 8002fa8:	f000 845f 	beq.w	800386a <_svfprintf_r+0xb4a>
 8002fac:	2a02      	cmp	r2, #2
 8002fae:	bf18      	it	ne
 8002fb0:	465a      	movne	r2, fp
 8002fb2:	d102      	bne.n	8002fba <_svfprintf_r+0x29a>
 8002fb4:	f000 bc48 	b.w	8003848 <_svfprintf_r+0xb28>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	f003 0107 	and.w	r1, r3, #7
 8002fbe:	3130      	adds	r1, #48	; 0x30
 8002fc0:	1e50      	subs	r0, r2, #1
 8002fc2:	08db      	lsrs	r3, r3, #3
 8002fc4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002fc8:	d1f6      	bne.n	8002fb8 <_svfprintf_r+0x298>
 8002fca:	9b08      	ldr	r3, [sp, #32]
 8002fcc:	9011      	str	r0, [sp, #68]	; 0x44
 8002fce:	07dd      	lsls	r5, r3, #31
 8002fd0:	d507      	bpl.n	8002fe2 <_svfprintf_r+0x2c2>
 8002fd2:	2930      	cmp	r1, #48	; 0x30
 8002fd4:	f000 8733 	beq.w	8003e3e <_svfprintf_r+0x111e>
 8002fd8:	1e90      	subs	r0, r2, #2
 8002fda:	2330      	movs	r3, #48	; 0x30
 8002fdc:	9011      	str	r0, [sp, #68]	; 0x44
 8002fde:	f802 3c02 	strb.w	r3, [r2, #-2]
 8002fe2:	ebc0 030b 	rsb	r3, r0, fp
 8002fe6:	930d      	str	r3, [sp, #52]	; 0x34
 8002fe8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fea:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8002fee:	9412      	str	r4, [sp, #72]	; 0x48
 8002ff0:	42a3      	cmp	r3, r4
 8002ff2:	bfb8      	it	lt
 8002ff4:	4623      	movlt	r3, r4
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	930a      	str	r3, [sp, #40]	; 0x28
 8002ffa:	9016      	str	r0, [sp, #88]	; 0x58
 8002ffc:	b111      	cbz	r1, 8003004 <_svfprintf_r+0x2e4>
 8002ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003000:	3301      	adds	r3, #1
 8003002:	930a      	str	r3, [sp, #40]	; 0x28
 8003004:	9b08      	ldr	r3, [sp, #32]
 8003006:	f013 0302 	ands.w	r3, r3, #2
 800300a:	9313      	str	r3, [sp, #76]	; 0x4c
 800300c:	d002      	beq.n	8003014 <_svfprintf_r+0x2f4>
 800300e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003010:	3002      	adds	r0, #2
 8003012:	900a      	str	r0, [sp, #40]	; 0x28
 8003014:	9b08      	ldr	r3, [sp, #32]
 8003016:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800301a:	9314      	str	r3, [sp, #80]	; 0x50
 800301c:	f040 81bb 	bne.w	8003396 <_svfprintf_r+0x676>
 8003020:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003022:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003024:	1a47      	subs	r7, r0, r1
 8003026:	2f00      	cmp	r7, #0
 8003028:	f340 81b5 	ble.w	8003396 <_svfprintf_r+0x676>
 800302c:	2f10      	cmp	r7, #16
 800302e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003030:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003032:	f8df 8344 	ldr.w	r8, [pc, #836]	; 8003378 <_svfprintf_r+0x658>
 8003036:	dd22      	ble.n	800307e <_svfprintf_r+0x35e>
 8003038:	4623      	mov	r3, r4
 800303a:	f04f 0910 	mov.w	r9, #16
 800303e:	4644      	mov	r4, r8
 8003040:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003044:	e003      	b.n	800304e <_svfprintf_r+0x32e>
 8003046:	3f10      	subs	r7, #16
 8003048:	3608      	adds	r6, #8
 800304a:	2f10      	cmp	r7, #16
 800304c:	dd15      	ble.n	800307a <_svfprintf_r+0x35a>
 800304e:	3301      	adds	r3, #1
 8003050:	3510      	adds	r5, #16
 8003052:	2b07      	cmp	r3, #7
 8003054:	e886 0210 	stmia.w	r6, {r4, r9}
 8003058:	953b      	str	r5, [sp, #236]	; 0xec
 800305a:	933a      	str	r3, [sp, #232]	; 0xe8
 800305c:	ddf3      	ble.n	8003046 <_svfprintf_r+0x326>
 800305e:	4640      	mov	r0, r8
 8003060:	4651      	mov	r1, sl
 8003062:	465a      	mov	r2, fp
 8003064:	f003 f9ce 	bl	8006404 <__ssprint_r>
 8003068:	2800      	cmp	r0, #0
 800306a:	f47f af30 	bne.w	8002ece <_svfprintf_r+0x1ae>
 800306e:	3f10      	subs	r7, #16
 8003070:	2f10      	cmp	r7, #16
 8003072:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003074:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003076:	ae1f      	add	r6, sp, #124	; 0x7c
 8003078:	dce9      	bgt.n	800304e <_svfprintf_r+0x32e>
 800307a:	46a0      	mov	r8, r4
 800307c:	461c      	mov	r4, r3
 800307e:	3401      	adds	r4, #1
 8003080:	19ed      	adds	r5, r5, r7
 8003082:	2c07      	cmp	r4, #7
 8003084:	f8c6 8000 	str.w	r8, [r6]
 8003088:	6077      	str	r7, [r6, #4]
 800308a:	953b      	str	r5, [sp, #236]	; 0xec
 800308c:	943a      	str	r4, [sp, #232]	; 0xe8
 800308e:	f300 8414 	bgt.w	80038ba <_svfprintf_r+0xb9a>
 8003092:	3608      	adds	r6, #8
 8003094:	e180      	b.n	8003398 <_svfprintf_r+0x678>
 8003096:	9009      	str	r0, [sp, #36]	; 0x24
 8003098:	980e      	ldr	r0, [sp, #56]	; 0x38
 800309a:	9315      	str	r3, [sp, #84]	; 0x54
 800309c:	1dc3      	adds	r3, r0, #7
 800309e:	f023 0307 	bic.w	r3, r3, #7
 80030a2:	f103 0108 	add.w	r1, r3, #8
 80030a6:	910e      	str	r1, [sp, #56]	; 0x38
 80030a8:	f8d3 8000 	ldr.w	r8, [r3]
 80030ac:	685d      	ldr	r5, [r3, #4]
 80030ae:	4642      	mov	r2, r8
 80030b0:	462b      	mov	r3, r5
 80030b2:	4629      	mov	r1, r5
 80030b4:	4640      	mov	r0, r8
 80030b6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 80030ba:	f003 f83b 	bl	8006134 <__fpclassifyd>
 80030be:	2801      	cmp	r0, #1
 80030c0:	4629      	mov	r1, r5
 80030c2:	4640      	mov	r0, r8
 80030c4:	f040 84d0 	bne.w	8003a68 <_svfprintf_r+0xd48>
 80030c8:	2200      	movs	r2, #0
 80030ca:	2300      	movs	r3, #0
 80030cc:	f004 fd62 	bl	8007b94 <__aeabi_dcmplt>
 80030d0:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80030d4:	b110      	cbz	r0, 80030dc <_svfprintf_r+0x3bc>
 80030d6:	212d      	movs	r1, #45	; 0x2d
 80030d8:	f88d 110f 	strb.w	r1, [sp, #271]	; 0x10f
 80030dc:	2303      	movs	r3, #3
 80030de:	930a      	str	r3, [sp, #40]	; 0x28
 80030e0:	2300      	movs	r3, #0
 80030e2:	9312      	str	r3, [sp, #72]	; 0x48
 80030e4:	4aa0      	ldr	r2, [pc, #640]	; (8003368 <_svfprintf_r+0x648>)
 80030e6:	4ba1      	ldr	r3, [pc, #644]	; (800336c <_svfprintf_r+0x64c>)
 80030e8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80030ea:	2847      	cmp	r0, #71	; 0x47
 80030ec:	bfd8      	it	le
 80030ee:	461a      	movle	r2, r3
 80030f0:	9211      	str	r2, [sp, #68]	; 0x44
 80030f2:	9a08      	ldr	r2, [sp, #32]
 80030f4:	2303      	movs	r3, #3
 80030f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030fa:	930d      	str	r3, [sp, #52]	; 0x34
 80030fc:	2300      	movs	r3, #0
 80030fe:	9208      	str	r2, [sp, #32]
 8003100:	9316      	str	r3, [sp, #88]	; 0x58
 8003102:	e77b      	b.n	8002ffc <_svfprintf_r+0x2dc>
 8003104:	9b08      	ldr	r3, [sp, #32]
 8003106:	f043 0308 	orr.w	r3, r3, #8
 800310a:	9308      	str	r3, [sp, #32]
 800310c:	e666      	b.n	8002ddc <_svfprintf_r+0xbc>
 800310e:	9908      	ldr	r1, [sp, #32]
 8003110:	9009      	str	r0, [sp, #36]	; 0x24
 8003112:	f041 0110 	orr.w	r1, r1, #16
 8003116:	9108      	str	r1, [sp, #32]
 8003118:	9a08      	ldr	r2, [sp, #32]
 800311a:	9315      	str	r3, [sp, #84]	; 0x54
 800311c:	f012 0110 	ands.w	r1, r2, #16
 8003120:	f000 8090 	beq.w	8003244 <_svfprintf_r+0x524>
 8003124:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003126:	6803      	ldr	r3, [r0, #0]
 8003128:	2200      	movs	r2, #0
 800312a:	1a99      	subs	r1, r3, r2
 800312c:	bf18      	it	ne
 800312e:	2101      	movne	r1, #1
 8003130:	3004      	adds	r0, #4
 8003132:	900e      	str	r0, [sp, #56]	; 0x38
 8003134:	2000      	movs	r0, #0
 8003136:	f88d 010f 	strb.w	r0, [sp, #271]	; 0x10f
 800313a:	e727      	b.n	8002f8c <_svfprintf_r+0x26c>
 800313c:	9908      	ldr	r1, [sp, #32]
 800313e:	9009      	str	r0, [sp, #36]	; 0x24
 8003140:	f041 0110 	orr.w	r1, r1, #16
 8003144:	9108      	str	r1, [sp, #32]
 8003146:	9a08      	ldr	r2, [sp, #32]
 8003148:	9315      	str	r3, [sp, #84]	; 0x54
 800314a:	06d0      	lsls	r0, r2, #27
 800314c:	f140 80b9 	bpl.w	80032c2 <_svfprintf_r+0x5a2>
 8003150:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003152:	6803      	ldr	r3, [r0, #0]
 8003154:	2201      	movs	r2, #1
 8003156:	1c19      	adds	r1, r3, #0
 8003158:	bf18      	it	ne
 800315a:	2101      	movne	r1, #1
 800315c:	3004      	adds	r0, #4
 800315e:	900e      	str	r0, [sp, #56]	; 0x38
 8003160:	e7e8      	b.n	8003134 <_svfprintf_r+0x414>
 8003162:	4a83      	ldr	r2, [pc, #524]	; (8003370 <_svfprintf_r+0x650>)
 8003164:	9315      	str	r3, [sp, #84]	; 0x54
 8003166:	9b08      	ldr	r3, [sp, #32]
 8003168:	921c      	str	r2, [sp, #112]	; 0x70
 800316a:	06da      	lsls	r2, r3, #27
 800316c:	9009      	str	r0, [sp, #36]	; 0x24
 800316e:	f100 810d 	bmi.w	800338c <_svfprintf_r+0x66c>
 8003172:	9908      	ldr	r1, [sp, #32]
 8003174:	064b      	lsls	r3, r1, #25
 8003176:	f140 8109 	bpl.w	800338c <_svfprintf_r+0x66c>
 800317a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800317c:	8813      	ldrh	r3, [r2, #0]
 800317e:	3204      	adds	r2, #4
 8003180:	920e      	str	r2, [sp, #56]	; 0x38
 8003182:	1c19      	adds	r1, r3, #0
 8003184:	9a08      	ldr	r2, [sp, #32]
 8003186:	bf18      	it	ne
 8003188:	2101      	movne	r1, #1
 800318a:	420a      	tst	r2, r1
 800318c:	f000 83ca 	beq.w	8003924 <_svfprintf_r+0xc04>
 8003190:	9908      	ldr	r1, [sp, #32]
 8003192:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003194:	2230      	movs	r2, #48	; 0x30
 8003196:	f041 0102 	orr.w	r1, r1, #2
 800319a:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 800319e:	9108      	str	r1, [sp, #32]
 80031a0:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 80031a4:	2101      	movs	r1, #1
 80031a6:	2202      	movs	r2, #2
 80031a8:	e7c4      	b.n	8003134 <_svfprintf_r+0x414>
 80031aa:	9b08      	ldr	r3, [sp, #32]
 80031ac:	f043 0310 	orr.w	r3, r3, #16
 80031b0:	9308      	str	r3, [sp, #32]
 80031b2:	e613      	b.n	8002ddc <_svfprintf_r+0xbc>
 80031b4:	2500      	movs	r5, #0
 80031b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031b8:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 80031bc:	9315      	str	r3, [sp, #84]	; 0x54
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80031c2:	9009      	str	r0, [sp, #36]	; 0x24
 80031c4:	9211      	str	r2, [sp, #68]	; 0x44
 80031c6:	1d1f      	adds	r7, r3, #4
 80031c8:	2a00      	cmp	r2, #0
 80031ca:	f000 864b 	beq.w	8003e64 <_svfprintf_r+0x1144>
 80031ce:	2c00      	cmp	r4, #0
 80031d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80031d2:	f2c0 8602 	blt.w	8003dda <_svfprintf_r+0x10ba>
 80031d6:	4629      	mov	r1, r5
 80031d8:	4622      	mov	r2, r4
 80031da:	f002 fad1 	bl	8005780 <memchr>
 80031de:	2800      	cmp	r0, #0
 80031e0:	f000 866f 	beq.w	8003ec2 <_svfprintf_r+0x11a2>
 80031e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80031e6:	9512      	str	r5, [sp, #72]	; 0x48
 80031e8:	1ac0      	subs	r0, r0, r3
 80031ea:	42a0      	cmp	r0, r4
 80031ec:	900d      	str	r0, [sp, #52]	; 0x34
 80031ee:	bfd1      	iteee	le
 80031f0:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 80031f2:	f89d 110f 	ldrbgt.w	r1, [sp, #271]	; 0x10f
 80031f6:	970e      	strgt	r7, [sp, #56]	; 0x38
 80031f8:	ea24 70e4 	bicgt.w	r0, r4, r4, asr #31
 80031fc:	bfd3      	iteet	le
 80031fe:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8003202:	900a      	strgt	r0, [sp, #40]	; 0x28
 8003204:	940d      	strgt	r4, [sp, #52]	; 0x34
 8003206:	930a      	strle	r3, [sp, #40]	; 0x28
 8003208:	bfdc      	itt	le
 800320a:	f89d 110f 	ldrble.w	r1, [sp, #271]	; 0x10f
 800320e:	970e      	strle	r7, [sp, #56]	; 0x38
 8003210:	9516      	str	r5, [sp, #88]	; 0x58
 8003212:	e6f3      	b.n	8002ffc <_svfprintf_r+0x2dc>
 8003214:	9a08      	ldr	r2, [sp, #32]
 8003216:	f042 0210 	orr.w	r2, r2, #16
 800321a:	9208      	str	r2, [sp, #32]
 800321c:	e5de      	b.n	8002ddc <_svfprintf_r+0xbc>
 800321e:	9009      	str	r0, [sp, #36]	; 0x24
 8003220:	9808      	ldr	r0, [sp, #32]
 8003222:	06c3      	lsls	r3, r0, #27
 8003224:	f140 843f 	bpl.w	8003aa6 <_svfprintf_r+0xd86>
 8003228:	990e      	ldr	r1, [sp, #56]	; 0x38
 800322a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800322c:	680b      	ldr	r3, [r1, #0]
 800322e:	3104      	adds	r1, #4
 8003230:	910e      	str	r1, [sp, #56]	; 0x38
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	e5a2      	b.n	8002d7c <_svfprintf_r+0x5c>
 8003236:	9a08      	ldr	r2, [sp, #32]
 8003238:	9009      	str	r0, [sp, #36]	; 0x24
 800323a:	f012 0110 	ands.w	r1, r2, #16
 800323e:	9315      	str	r3, [sp, #84]	; 0x54
 8003240:	f47f af70 	bne.w	8003124 <_svfprintf_r+0x404>
 8003244:	9b08      	ldr	r3, [sp, #32]
 8003246:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 800324a:	f000 8437 	beq.w	8003abc <_svfprintf_r+0xd9c>
 800324e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003250:	8803      	ldrh	r3, [r0, #0]
 8003252:	460a      	mov	r2, r1
 8003254:	1c19      	adds	r1, r3, #0
 8003256:	bf18      	it	ne
 8003258:	2101      	movne	r1, #1
 800325a:	3004      	adds	r0, #4
 800325c:	900e      	str	r0, [sp, #56]	; 0x38
 800325e:	e769      	b.n	8003134 <_svfprintf_r+0x414>
 8003260:	9009      	str	r0, [sp, #36]	; 0x24
 8003262:	9315      	str	r3, [sp, #84]	; 0x54
 8003264:	2b00      	cmp	r3, #0
 8003266:	f43f ae2b 	beq.w	8002ec0 <_svfprintf_r+0x1a0>
 800326a:	2101      	movs	r1, #1
 800326c:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8003270:	aa2f      	add	r2, sp, #188	; 0xbc
 8003272:	2300      	movs	r3, #0
 8003274:	910a      	str	r1, [sp, #40]	; 0x28
 8003276:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 800327a:	910d      	str	r1, [sp, #52]	; 0x34
 800327c:	9211      	str	r2, [sp, #68]	; 0x44
 800327e:	2300      	movs	r3, #0
 8003280:	9312      	str	r3, [sp, #72]	; 0x48
 8003282:	9316      	str	r3, [sp, #88]	; 0x58
 8003284:	e6be      	b.n	8003004 <_svfprintf_r+0x2e4>
 8003286:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 800328a:	2b00      	cmp	r3, #0
 800328c:	f47f ada6 	bne.w	8002ddc <_svfprintf_r+0xbc>
 8003290:	f88d 710f 	strb.w	r7, [sp, #271]	; 0x10f
 8003294:	e5a2      	b.n	8002ddc <_svfprintf_r+0xbc>
 8003296:	9a08      	ldr	r2, [sp, #32]
 8003298:	f042 0201 	orr.w	r2, r2, #1
 800329c:	9208      	str	r2, [sp, #32]
 800329e:	e59d      	b.n	8002ddc <_svfprintf_r+0xbc>
 80032a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032a2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80032a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80032aa:	1d0b      	adds	r3, r1, #4
 80032ac:	2a00      	cmp	r2, #0
 80032ae:	f6ff adf7 	blt.w	8002ea0 <_svfprintf_r+0x180>
 80032b2:	930e      	str	r3, [sp, #56]	; 0x38
 80032b4:	e592      	b.n	8002ddc <_svfprintf_r+0xbc>
 80032b6:	9a08      	ldr	r2, [sp, #32]
 80032b8:	9009      	str	r0, [sp, #36]	; 0x24
 80032ba:	06d0      	lsls	r0, r2, #27
 80032bc:	9315      	str	r3, [sp, #84]	; 0x54
 80032be:	f53f af47 	bmi.w	8003150 <_svfprintf_r+0x430>
 80032c2:	9908      	ldr	r1, [sp, #32]
 80032c4:	0649      	lsls	r1, r1, #25
 80032c6:	f140 83ea 	bpl.w	8003a9e <_svfprintf_r+0xd7e>
 80032ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032cc:	8813      	ldrh	r3, [r2, #0]
 80032ce:	2201      	movs	r2, #1
 80032d0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80032d2:	1c19      	adds	r1, r3, #0
 80032d4:	bf18      	it	ne
 80032d6:	2101      	movne	r1, #1
 80032d8:	3004      	adds	r0, #4
 80032da:	900e      	str	r0, [sp, #56]	; 0x38
 80032dc:	e72a      	b.n	8003134 <_svfprintf_r+0x414>
 80032de:	9009      	str	r0, [sp, #36]	; 0x24
 80032e0:	9808      	ldr	r0, [sp, #32]
 80032e2:	9315      	str	r3, [sp, #84]	; 0x54
 80032e4:	06c3      	lsls	r3, r0, #27
 80032e6:	f57f ae41 	bpl.w	8002f6c <_svfprintf_r+0x24c>
 80032ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 80032ec:	680b      	ldr	r3, [r1, #0]
 80032ee:	3104      	adds	r1, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	910e      	str	r1, [sp, #56]	; 0x38
 80032f4:	f6bf ae46 	bge.w	8002f84 <_svfprintf_r+0x264>
 80032f8:	425b      	negs	r3, r3
 80032fa:	222d      	movs	r2, #45	; 0x2d
 80032fc:	1c19      	adds	r1, r3, #0
 80032fe:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8003302:	bf18      	it	ne
 8003304:	2101      	movne	r1, #1
 8003306:	2201      	movs	r2, #1
 8003308:	e640      	b.n	8002f8c <_svfprintf_r+0x26c>
 800330a:	9908      	ldr	r1, [sp, #32]
 800330c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003310:	9108      	str	r1, [sp, #32]
 8003312:	e563      	b.n	8002ddc <_svfprintf_r+0xbc>
 8003314:	9315      	str	r3, [sp, #84]	; 0x54
 8003316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003318:	990e      	ldr	r1, [sp, #56]	; 0x38
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	9009      	str	r0, [sp, #36]	; 0x24
 800331e:	2200      	movs	r2, #0
 8003320:	2001      	movs	r0, #1
 8003322:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8003326:	3104      	adds	r1, #4
 8003328:	aa2f      	add	r2, sp, #188	; 0xbc
 800332a:	900a      	str	r0, [sp, #40]	; 0x28
 800332c:	910e      	str	r1, [sp, #56]	; 0x38
 800332e:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8003332:	900d      	str	r0, [sp, #52]	; 0x34
 8003334:	9211      	str	r2, [sp, #68]	; 0x44
 8003336:	e7a2      	b.n	800327e <_svfprintf_r+0x55e>
 8003338:	490e      	ldr	r1, [pc, #56]	; (8003374 <_svfprintf_r+0x654>)
 800333a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800333c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800333e:	911c      	str	r1, [sp, #112]	; 0x70
 8003340:	9908      	ldr	r1, [sp, #32]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	9009      	str	r0, [sp, #36]	; 0x24
 8003346:	3204      	adds	r2, #4
 8003348:	f041 0102 	orr.w	r1, r1, #2
 800334c:	2078      	movs	r0, #120	; 0x78
 800334e:	920e      	str	r2, [sp, #56]	; 0x38
 8003350:	9108      	str	r1, [sp, #32]
 8003352:	2230      	movs	r2, #48	; 0x30
 8003354:	1c19      	adds	r1, r3, #0
 8003356:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 800335a:	bf18      	it	ne
 800335c:	2101      	movne	r1, #1
 800335e:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8003362:	2202      	movs	r2, #2
 8003364:	9015      	str	r0, [sp, #84]	; 0x54
 8003366:	e6e5      	b.n	8003134 <_svfprintf_r+0x414>
 8003368:	08008154 	.word	0x08008154
 800336c:	08008150 	.word	0x08008150
 8003370:	08008160 	.word	0x08008160
 8003374:	08008174 	.word	0x08008174
 8003378:	08007eb8 	.word	0x08007eb8
 800337c:	9315      	str	r3, [sp, #84]	; 0x54
 800337e:	9b08      	ldr	r3, [sp, #32]
 8003380:	49a4      	ldr	r1, [pc, #656]	; (8003614 <_svfprintf_r+0x8f4>)
 8003382:	9009      	str	r0, [sp, #36]	; 0x24
 8003384:	06da      	lsls	r2, r3, #27
 8003386:	911c      	str	r1, [sp, #112]	; 0x70
 8003388:	f57f aef3 	bpl.w	8003172 <_svfprintf_r+0x452>
 800338c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800338e:	6803      	ldr	r3, [r0, #0]
 8003390:	3004      	adds	r0, #4
 8003392:	900e      	str	r0, [sp, #56]	; 0x38
 8003394:	e6f5      	b.n	8003182 <_svfprintf_r+0x462>
 8003396:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003398:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 800339c:	b16b      	cbz	r3, 80033ba <_svfprintf_r+0x69a>
 800339e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80033a0:	f20d 130f 	addw	r3, sp, #271	; 0x10f
 80033a4:	3401      	adds	r4, #1
 80033a6:	6033      	str	r3, [r6, #0]
 80033a8:	3501      	adds	r5, #1
 80033aa:	2301      	movs	r3, #1
 80033ac:	2c07      	cmp	r4, #7
 80033ae:	6073      	str	r3, [r6, #4]
 80033b0:	953b      	str	r5, [sp, #236]	; 0xec
 80033b2:	943a      	str	r4, [sp, #232]	; 0xe8
 80033b4:	f300 81f5 	bgt.w	80037a2 <_svfprintf_r+0xa82>
 80033b8:	3608      	adds	r6, #8
 80033ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80033bc:	b163      	cbz	r3, 80033d8 <_svfprintf_r+0x6b8>
 80033be:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80033c0:	ab43      	add	r3, sp, #268	; 0x10c
 80033c2:	3401      	adds	r4, #1
 80033c4:	6033      	str	r3, [r6, #0]
 80033c6:	3502      	adds	r5, #2
 80033c8:	2302      	movs	r3, #2
 80033ca:	2c07      	cmp	r4, #7
 80033cc:	6073      	str	r3, [r6, #4]
 80033ce:	953b      	str	r5, [sp, #236]	; 0xec
 80033d0:	943a      	str	r4, [sp, #232]	; 0xe8
 80033d2:	f300 81db 	bgt.w	800378c <_svfprintf_r+0xa6c>
 80033d6:	3608      	adds	r6, #8
 80033d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80033da:	2b80      	cmp	r3, #128	; 0x80
 80033dc:	f000 8122 	beq.w	8003624 <_svfprintf_r+0x904>
 80033e0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80033e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033e4:	1ac7      	subs	r7, r0, r3
 80033e6:	2f00      	cmp	r7, #0
 80033e8:	dd32      	ble.n	8003450 <_svfprintf_r+0x730>
 80033ea:	2f10      	cmp	r7, #16
 80033ec:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80033ee:	f8df 822c 	ldr.w	r8, [pc, #556]	; 800361c <_svfprintf_r+0x8fc>
 80033f2:	dd22      	ble.n	800343a <_svfprintf_r+0x71a>
 80033f4:	4623      	mov	r3, r4
 80033f6:	f04f 0910 	mov.w	r9, #16
 80033fa:	4644      	mov	r4, r8
 80033fc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003400:	e003      	b.n	800340a <_svfprintf_r+0x6ea>
 8003402:	3f10      	subs	r7, #16
 8003404:	3608      	adds	r6, #8
 8003406:	2f10      	cmp	r7, #16
 8003408:	dd15      	ble.n	8003436 <_svfprintf_r+0x716>
 800340a:	3301      	adds	r3, #1
 800340c:	3510      	adds	r5, #16
 800340e:	2b07      	cmp	r3, #7
 8003410:	e886 0210 	stmia.w	r6, {r4, r9}
 8003414:	953b      	str	r5, [sp, #236]	; 0xec
 8003416:	933a      	str	r3, [sp, #232]	; 0xe8
 8003418:	ddf3      	ble.n	8003402 <_svfprintf_r+0x6e2>
 800341a:	4640      	mov	r0, r8
 800341c:	4651      	mov	r1, sl
 800341e:	465a      	mov	r2, fp
 8003420:	f002 fff0 	bl	8006404 <__ssprint_r>
 8003424:	2800      	cmp	r0, #0
 8003426:	f47f ad52 	bne.w	8002ece <_svfprintf_r+0x1ae>
 800342a:	3f10      	subs	r7, #16
 800342c:	2f10      	cmp	r7, #16
 800342e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003430:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003432:	ae1f      	add	r6, sp, #124	; 0x7c
 8003434:	dce9      	bgt.n	800340a <_svfprintf_r+0x6ea>
 8003436:	46a0      	mov	r8, r4
 8003438:	461c      	mov	r4, r3
 800343a:	3401      	adds	r4, #1
 800343c:	19ed      	adds	r5, r5, r7
 800343e:	2c07      	cmp	r4, #7
 8003440:	f8c6 8000 	str.w	r8, [r6]
 8003444:	6077      	str	r7, [r6, #4]
 8003446:	953b      	str	r5, [sp, #236]	; 0xec
 8003448:	943a      	str	r4, [sp, #232]	; 0xe8
 800344a:	f300 8194 	bgt.w	8003776 <_svfprintf_r+0xa56>
 800344e:	3608      	adds	r6, #8
 8003450:	9908      	ldr	r1, [sp, #32]
 8003452:	05ca      	lsls	r2, r1, #23
 8003454:	d472      	bmi.n	800353c <_svfprintf_r+0x81c>
 8003456:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003458:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800345a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800345c:	6073      	str	r3, [r6, #4]
 800345e:	3401      	adds	r4, #1
 8003460:	18ed      	adds	r5, r5, r3
 8003462:	2c07      	cmp	r4, #7
 8003464:	6032      	str	r2, [r6, #0]
 8003466:	953b      	str	r5, [sp, #236]	; 0xec
 8003468:	943a      	str	r4, [sp, #232]	; 0xe8
 800346a:	dc5c      	bgt.n	8003526 <_svfprintf_r+0x806>
 800346c:	3608      	adds	r6, #8
 800346e:	9908      	ldr	r1, [sp, #32]
 8003470:	074b      	lsls	r3, r1, #29
 8003472:	d53e      	bpl.n	80034f2 <_svfprintf_r+0x7d2>
 8003474:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003478:	1ad7      	subs	r7, r2, r3
 800347a:	2f00      	cmp	r7, #0
 800347c:	dd39      	ble.n	80034f2 <_svfprintf_r+0x7d2>
 800347e:	2f10      	cmp	r7, #16
 8003480:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003482:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8003620 <_svfprintf_r+0x900>
 8003486:	dd22      	ble.n	80034ce <_svfprintf_r+0x7ae>
 8003488:	4623      	mov	r3, r4
 800348a:	f04f 0910 	mov.w	r9, #16
 800348e:	4644      	mov	r4, r8
 8003490:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003494:	e003      	b.n	800349e <_svfprintf_r+0x77e>
 8003496:	3f10      	subs	r7, #16
 8003498:	3608      	adds	r6, #8
 800349a:	2f10      	cmp	r7, #16
 800349c:	dd15      	ble.n	80034ca <_svfprintf_r+0x7aa>
 800349e:	3301      	adds	r3, #1
 80034a0:	3510      	adds	r5, #16
 80034a2:	2b07      	cmp	r3, #7
 80034a4:	e886 0210 	stmia.w	r6, {r4, r9}
 80034a8:	953b      	str	r5, [sp, #236]	; 0xec
 80034aa:	933a      	str	r3, [sp, #232]	; 0xe8
 80034ac:	ddf3      	ble.n	8003496 <_svfprintf_r+0x776>
 80034ae:	4640      	mov	r0, r8
 80034b0:	4651      	mov	r1, sl
 80034b2:	465a      	mov	r2, fp
 80034b4:	f002 ffa6 	bl	8006404 <__ssprint_r>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	f47f ad08 	bne.w	8002ece <_svfprintf_r+0x1ae>
 80034be:	3f10      	subs	r7, #16
 80034c0:	2f10      	cmp	r7, #16
 80034c2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80034c4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80034c6:	ae1f      	add	r6, sp, #124	; 0x7c
 80034c8:	dce9      	bgt.n	800349e <_svfprintf_r+0x77e>
 80034ca:	46a0      	mov	r8, r4
 80034cc:	461c      	mov	r4, r3
 80034ce:	3401      	adds	r4, #1
 80034d0:	197d      	adds	r5, r7, r5
 80034d2:	2c07      	cmp	r4, #7
 80034d4:	f8c6 8000 	str.w	r8, [r6]
 80034d8:	6077      	str	r7, [r6, #4]
 80034da:	953b      	str	r5, [sp, #236]	; 0xec
 80034dc:	943a      	str	r4, [sp, #232]	; 0xe8
 80034de:	dd08      	ble.n	80034f2 <_svfprintf_r+0x7d2>
 80034e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80034e2:	4651      	mov	r1, sl
 80034e4:	465a      	mov	r2, fp
 80034e6:	f002 ff8d 	bl	8006404 <__ssprint_r>
 80034ea:	2800      	cmp	r0, #0
 80034ec:	f47f acef 	bne.w	8002ece <_svfprintf_r+0x1ae>
 80034f0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80034f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80034f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034f8:	428a      	cmp	r2, r1
 80034fa:	bfac      	ite	ge
 80034fc:	1880      	addge	r0, r0, r2
 80034fe:	1840      	addlt	r0, r0, r1
 8003500:	900c      	str	r0, [sp, #48]	; 0x30
 8003502:	2d00      	cmp	r5, #0
 8003504:	f040 8129 	bne.w	800375a <_svfprintf_r+0xa3a>
 8003508:	2300      	movs	r3, #0
 800350a:	933a      	str	r3, [sp, #232]	; 0xe8
 800350c:	ae1f      	add	r6, sp, #124	; 0x7c
 800350e:	e435      	b.n	8002d7c <_svfprintf_r+0x5c>
 8003510:	46a0      	mov	r8, r4
 8003512:	461c      	mov	r4, r3
 8003514:	3401      	adds	r4, #1
 8003516:	19ed      	adds	r5, r5, r7
 8003518:	2c07      	cmp	r4, #7
 800351a:	f8c6 8000 	str.w	r8, [r6]
 800351e:	6077      	str	r7, [r6, #4]
 8003520:	953b      	str	r5, [sp, #236]	; 0xec
 8003522:	943a      	str	r4, [sp, #232]	; 0xe8
 8003524:	dda2      	ble.n	800346c <_svfprintf_r+0x74c>
 8003526:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003528:	4651      	mov	r1, sl
 800352a:	465a      	mov	r2, fp
 800352c:	f002 ff6a 	bl	8006404 <__ssprint_r>
 8003530:	2800      	cmp	r0, #0
 8003532:	f47f accc 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003536:	ae1f      	add	r6, sp, #124	; 0x7c
 8003538:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800353a:	e798      	b.n	800346e <_svfprintf_r+0x74e>
 800353c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800353e:	2865      	cmp	r0, #101	; 0x65
 8003540:	f340 80aa 	ble.w	8003698 <_svfprintf_r+0x978>
 8003544:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8003548:	2200      	movs	r2, #0
 800354a:	2300      	movs	r3, #0
 800354c:	f004 fb18 	bl	8007b80 <__aeabi_dcmpeq>
 8003550:	2800      	cmp	r0, #0
 8003552:	f000 8131 	beq.w	80037b8 <_svfprintf_r+0xa98>
 8003556:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003558:	4b2f      	ldr	r3, [pc, #188]	; (8003618 <_svfprintf_r+0x8f8>)
 800355a:	3401      	adds	r4, #1
 800355c:	6033      	str	r3, [r6, #0]
 800355e:	3501      	adds	r5, #1
 8003560:	2301      	movs	r3, #1
 8003562:	2c07      	cmp	r4, #7
 8003564:	6073      	str	r3, [r6, #4]
 8003566:	953b      	str	r5, [sp, #236]	; 0xec
 8003568:	943a      	str	r4, [sp, #232]	; 0xe8
 800356a:	f300 82b8 	bgt.w	8003ade <_svfprintf_r+0xdbe>
 800356e:	3608      	adds	r6, #8
 8003570:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8003572:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003574:	4299      	cmp	r1, r3
 8003576:	dc03      	bgt.n	8003580 <_svfprintf_r+0x860>
 8003578:	9a08      	ldr	r2, [sp, #32]
 800357a:	07d3      	lsls	r3, r2, #31
 800357c:	f57f af77 	bpl.w	800346e <_svfprintf_r+0x74e>
 8003580:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003582:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003584:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003586:	6070      	str	r0, [r6, #4]
 8003588:	3401      	adds	r4, #1
 800358a:	182d      	adds	r5, r5, r0
 800358c:	2c07      	cmp	r4, #7
 800358e:	6033      	str	r3, [r6, #0]
 8003590:	953b      	str	r5, [sp, #236]	; 0xec
 8003592:	943a      	str	r4, [sp, #232]	; 0xe8
 8003594:	f300 8300 	bgt.w	8003b98 <_svfprintf_r+0xe78>
 8003598:	3608      	adds	r6, #8
 800359a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800359c:	1e4f      	subs	r7, r1, #1
 800359e:	2f00      	cmp	r7, #0
 80035a0:	f77f af65 	ble.w	800346e <_svfprintf_r+0x74e>
 80035a4:	2f10      	cmp	r7, #16
 80035a6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80035a8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800361c <_svfprintf_r+0x8fc>
 80035ac:	ddb2      	ble.n	8003514 <_svfprintf_r+0x7f4>
 80035ae:	4623      	mov	r3, r4
 80035b0:	f04f 0910 	mov.w	r9, #16
 80035b4:	4644      	mov	r4, r8
 80035b6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80035ba:	e003      	b.n	80035c4 <_svfprintf_r+0x8a4>
 80035bc:	3608      	adds	r6, #8
 80035be:	3f10      	subs	r7, #16
 80035c0:	2f10      	cmp	r7, #16
 80035c2:	dda5      	ble.n	8003510 <_svfprintf_r+0x7f0>
 80035c4:	3301      	adds	r3, #1
 80035c6:	3510      	adds	r5, #16
 80035c8:	2b07      	cmp	r3, #7
 80035ca:	e886 0210 	stmia.w	r6, {r4, r9}
 80035ce:	953b      	str	r5, [sp, #236]	; 0xec
 80035d0:	933a      	str	r3, [sp, #232]	; 0xe8
 80035d2:	ddf3      	ble.n	80035bc <_svfprintf_r+0x89c>
 80035d4:	4640      	mov	r0, r8
 80035d6:	4651      	mov	r1, sl
 80035d8:	465a      	mov	r2, fp
 80035da:	f002 ff13 	bl	8006404 <__ssprint_r>
 80035de:	2800      	cmp	r0, #0
 80035e0:	f47f ac75 	bne.w	8002ece <_svfprintf_r+0x1ae>
 80035e4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80035e6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80035e8:	ae1f      	add	r6, sp, #124	; 0x7c
 80035ea:	e7e8      	b.n	80035be <_svfprintf_r+0x89e>
 80035ec:	2a00      	cmp	r2, #0
 80035ee:	f040 80be 	bne.w	800376e <_svfprintf_r+0xa4e>
 80035f2:	9808      	ldr	r0, [sp, #32]
 80035f4:	07c1      	lsls	r1, r0, #31
 80035f6:	bf5c      	itt	pl
 80035f8:	920d      	strpl	r2, [sp, #52]	; 0x34
 80035fa:	f8cd b044 	strpl.w	fp, [sp, #68]	; 0x44
 80035fe:	f57f acf3 	bpl.w	8002fe8 <_svfprintf_r+0x2c8>
 8003602:	991d      	ldr	r1, [sp, #116]	; 0x74
 8003604:	2330      	movs	r3, #48	; 0x30
 8003606:	f10d 02e3 	add.w	r2, sp, #227	; 0xe3
 800360a:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 800360e:	910d      	str	r1, [sp, #52]	; 0x34
 8003610:	9211      	str	r2, [sp, #68]	; 0x44
 8003612:	e4e9      	b.n	8002fe8 <_svfprintf_r+0x2c8>
 8003614:	08008174 	.word	0x08008174
 8003618:	08008190 	.word	0x08008190
 800361c:	08007ec8 	.word	0x08007ec8
 8003620:	08007eb8 	.word	0x08007eb8
 8003624:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003626:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003628:	1a47      	subs	r7, r0, r1
 800362a:	2f00      	cmp	r7, #0
 800362c:	f77f aed8 	ble.w	80033e0 <_svfprintf_r+0x6c0>
 8003630:	2f10      	cmp	r7, #16
 8003632:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003634:	f8df 86d8 	ldr.w	r8, [pc, #1752]	; 8003d10 <_svfprintf_r+0xff0>
 8003638:	dd22      	ble.n	8003680 <_svfprintf_r+0x960>
 800363a:	4623      	mov	r3, r4
 800363c:	f04f 0910 	mov.w	r9, #16
 8003640:	4644      	mov	r4, r8
 8003642:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003646:	e003      	b.n	8003650 <_svfprintf_r+0x930>
 8003648:	3f10      	subs	r7, #16
 800364a:	3608      	adds	r6, #8
 800364c:	2f10      	cmp	r7, #16
 800364e:	dd15      	ble.n	800367c <_svfprintf_r+0x95c>
 8003650:	3301      	adds	r3, #1
 8003652:	3510      	adds	r5, #16
 8003654:	2b07      	cmp	r3, #7
 8003656:	e886 0210 	stmia.w	r6, {r4, r9}
 800365a:	953b      	str	r5, [sp, #236]	; 0xec
 800365c:	933a      	str	r3, [sp, #232]	; 0xe8
 800365e:	ddf3      	ble.n	8003648 <_svfprintf_r+0x928>
 8003660:	4640      	mov	r0, r8
 8003662:	4651      	mov	r1, sl
 8003664:	465a      	mov	r2, fp
 8003666:	f002 fecd 	bl	8006404 <__ssprint_r>
 800366a:	2800      	cmp	r0, #0
 800366c:	f47f ac2f 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003670:	3f10      	subs	r7, #16
 8003672:	2f10      	cmp	r7, #16
 8003674:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003676:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003678:	ae1f      	add	r6, sp, #124	; 0x7c
 800367a:	dce9      	bgt.n	8003650 <_svfprintf_r+0x930>
 800367c:	46a0      	mov	r8, r4
 800367e:	461c      	mov	r4, r3
 8003680:	3401      	adds	r4, #1
 8003682:	19ed      	adds	r5, r5, r7
 8003684:	2c07      	cmp	r4, #7
 8003686:	f8c6 8000 	str.w	r8, [r6]
 800368a:	6077      	str	r7, [r6, #4]
 800368c:	953b      	str	r5, [sp, #236]	; 0xec
 800368e:	943a      	str	r4, [sp, #232]	; 0xe8
 8003690:	f300 81df 	bgt.w	8003a52 <_svfprintf_r+0xd32>
 8003694:	3608      	adds	r6, #8
 8003696:	e6a3      	b.n	80033e0 <_svfprintf_r+0x6c0>
 8003698:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800369a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800369c:	2a01      	cmp	r2, #1
 800369e:	f340 81a5 	ble.w	80039ec <_svfprintf_r+0xccc>
 80036a2:	3401      	adds	r4, #1
 80036a4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80036a6:	3501      	adds	r5, #1
 80036a8:	2301      	movs	r3, #1
 80036aa:	2c07      	cmp	r4, #7
 80036ac:	6030      	str	r0, [r6, #0]
 80036ae:	6073      	str	r3, [r6, #4]
 80036b0:	953b      	str	r5, [sp, #236]	; 0xec
 80036b2:	943a      	str	r4, [sp, #232]	; 0xe8
 80036b4:	f300 81c1 	bgt.w	8003a3a <_svfprintf_r+0xd1a>
 80036b8:	3608      	adds	r6, #8
 80036ba:	991a      	ldr	r1, [sp, #104]	; 0x68
 80036bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80036be:	6071      	str	r1, [r6, #4]
 80036c0:	3401      	adds	r4, #1
 80036c2:	186d      	adds	r5, r5, r1
 80036c4:	2c07      	cmp	r4, #7
 80036c6:	6032      	str	r2, [r6, #0]
 80036c8:	953b      	str	r5, [sp, #236]	; 0xec
 80036ca:	943a      	str	r4, [sp, #232]	; 0xe8
 80036cc:	f300 81a9 	bgt.w	8003a22 <_svfprintf_r+0xd02>
 80036d0:	3608      	adds	r6, #8
 80036d2:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80036d6:	2200      	movs	r2, #0
 80036d8:	2300      	movs	r3, #0
 80036da:	f004 fa51 	bl	8007b80 <__aeabi_dcmpeq>
 80036de:	2800      	cmp	r0, #0
 80036e0:	f040 80f6 	bne.w	80038d0 <_svfprintf_r+0xbb0>
 80036e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80036e6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80036e8:	1e5a      	subs	r2, r3, #1
 80036ea:	3401      	adds	r4, #1
 80036ec:	1c43      	adds	r3, r0, #1
 80036ee:	18ad      	adds	r5, r5, r2
 80036f0:	2c07      	cmp	r4, #7
 80036f2:	6033      	str	r3, [r6, #0]
 80036f4:	6072      	str	r2, [r6, #4]
 80036f6:	953b      	str	r5, [sp, #236]	; 0xec
 80036f8:	943a      	str	r4, [sp, #232]	; 0xe8
 80036fa:	dc22      	bgt.n	8003742 <_svfprintf_r+0xa22>
 80036fc:	3608      	adds	r6, #8
 80036fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003700:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003702:	3401      	adds	r4, #1
 8003704:	18ed      	adds	r5, r5, r3
 8003706:	2c07      	cmp	r4, #7
 8003708:	ab3c      	add	r3, sp, #240	; 0xf0
 800370a:	6033      	str	r3, [r6, #0]
 800370c:	6070      	str	r0, [r6, #4]
 800370e:	953b      	str	r5, [sp, #236]	; 0xec
 8003710:	943a      	str	r4, [sp, #232]	; 0xe8
 8003712:	f77f aeab 	ble.w	800346c <_svfprintf_r+0x74c>
 8003716:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003718:	4651      	mov	r1, sl
 800371a:	465a      	mov	r2, fp
 800371c:	f002 fe72 	bl	8006404 <__ssprint_r>
 8003720:	2800      	cmp	r0, #0
 8003722:	f47f abd4 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003726:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003728:	ae1f      	add	r6, sp, #124	; 0x7c
 800372a:	e6a0      	b.n	800346e <_svfprintf_r+0x74e>
 800372c:	46a0      	mov	r8, r4
 800372e:	461c      	mov	r4, r3
 8003730:	3401      	adds	r4, #1
 8003732:	19ed      	adds	r5, r5, r7
 8003734:	2c07      	cmp	r4, #7
 8003736:	f8c6 8000 	str.w	r8, [r6]
 800373a:	6077      	str	r7, [r6, #4]
 800373c:	953b      	str	r5, [sp, #236]	; 0xec
 800373e:	943a      	str	r4, [sp, #232]	; 0xe8
 8003740:	dddc      	ble.n	80036fc <_svfprintf_r+0x9dc>
 8003742:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003744:	4651      	mov	r1, sl
 8003746:	465a      	mov	r2, fp
 8003748:	f002 fe5c 	bl	8006404 <__ssprint_r>
 800374c:	2800      	cmp	r0, #0
 800374e:	f47f abbe 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003752:	ae1f      	add	r6, sp, #124	; 0x7c
 8003754:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003756:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003758:	e7d1      	b.n	80036fe <_svfprintf_r+0x9de>
 800375a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800375c:	4651      	mov	r1, sl
 800375e:	465a      	mov	r2, fp
 8003760:	f002 fe50 	bl	8006404 <__ssprint_r>
 8003764:	2800      	cmp	r0, #0
 8003766:	f43f aecf 	beq.w	8003508 <_svfprintf_r+0x7e8>
 800376a:	f7ff bbb0 	b.w	8002ece <_svfprintf_r+0x1ae>
 800376e:	910d      	str	r1, [sp, #52]	; 0x34
 8003770:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8003774:	e438      	b.n	8002fe8 <_svfprintf_r+0x2c8>
 8003776:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003778:	4651      	mov	r1, sl
 800377a:	465a      	mov	r2, fp
 800377c:	f002 fe42 	bl	8006404 <__ssprint_r>
 8003780:	2800      	cmp	r0, #0
 8003782:	f47f aba4 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003786:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003788:	ae1f      	add	r6, sp, #124	; 0x7c
 800378a:	e661      	b.n	8003450 <_svfprintf_r+0x730>
 800378c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800378e:	4651      	mov	r1, sl
 8003790:	465a      	mov	r2, fp
 8003792:	f002 fe37 	bl	8006404 <__ssprint_r>
 8003796:	2800      	cmp	r0, #0
 8003798:	f47f ab99 	bne.w	8002ece <_svfprintf_r+0x1ae>
 800379c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800379e:	ae1f      	add	r6, sp, #124	; 0x7c
 80037a0:	e61a      	b.n	80033d8 <_svfprintf_r+0x6b8>
 80037a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80037a4:	4651      	mov	r1, sl
 80037a6:	465a      	mov	r2, fp
 80037a8:	f002 fe2c 	bl	8006404 <__ssprint_r>
 80037ac:	2800      	cmp	r0, #0
 80037ae:	f47f ab8e 	bne.w	8002ece <_svfprintf_r+0x1ae>
 80037b2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80037b4:	ae1f      	add	r6, sp, #124	; 0x7c
 80037b6:	e600      	b.n	80033ba <_svfprintf_r+0x69a>
 80037b8:	9f40      	ldr	r7, [sp, #256]	; 0x100
 80037ba:	2f00      	cmp	r7, #0
 80037bc:	f340 819a 	ble.w	8003af4 <_svfprintf_r+0xdd4>
 80037c0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80037c2:	9816      	ldr	r0, [sp, #88]	; 0x58
 80037c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80037c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80037c8:	4287      	cmp	r7, r0
 80037ca:	bfa8      	it	ge
 80037cc:	4607      	movge	r7, r0
 80037ce:	1889      	adds	r1, r1, r2
 80037d0:	2f00      	cmp	r7, #0
 80037d2:	910d      	str	r1, [sp, #52]	; 0x34
 80037d4:	dd0b      	ble.n	80037ee <_svfprintf_r+0xace>
 80037d6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80037d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80037da:	6077      	str	r7, [r6, #4]
 80037dc:	3401      	adds	r4, #1
 80037de:	19ed      	adds	r5, r5, r7
 80037e0:	2c07      	cmp	r4, #7
 80037e2:	6032      	str	r2, [r6, #0]
 80037e4:	953b      	str	r5, [sp, #236]	; 0xec
 80037e6:	943a      	str	r4, [sp, #232]	; 0xe8
 80037e8:	f300 8304 	bgt.w	8003df4 <_svfprintf_r+0x10d4>
 80037ec:	3608      	adds	r6, #8
 80037ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80037f0:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 80037f4:	1bdf      	subs	r7, r3, r7
 80037f6:	2f00      	cmp	r7, #0
 80037f8:	f340 80a0 	ble.w	800393c <_svfprintf_r+0xc1c>
 80037fc:	2f10      	cmp	r7, #16
 80037fe:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003800:	f8df 850c 	ldr.w	r8, [pc, #1292]	; 8003d10 <_svfprintf_r+0xff0>
 8003804:	f340 815f 	ble.w	8003ac6 <_svfprintf_r+0xda6>
 8003808:	4623      	mov	r3, r4
 800380a:	f04f 0910 	mov.w	r9, #16
 800380e:	4644      	mov	r4, r8
 8003810:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003814:	e004      	b.n	8003820 <_svfprintf_r+0xb00>
 8003816:	3608      	adds	r6, #8
 8003818:	3f10      	subs	r7, #16
 800381a:	2f10      	cmp	r7, #16
 800381c:	f340 8151 	ble.w	8003ac2 <_svfprintf_r+0xda2>
 8003820:	3301      	adds	r3, #1
 8003822:	3510      	adds	r5, #16
 8003824:	2b07      	cmp	r3, #7
 8003826:	e886 0210 	stmia.w	r6, {r4, r9}
 800382a:	953b      	str	r5, [sp, #236]	; 0xec
 800382c:	933a      	str	r3, [sp, #232]	; 0xe8
 800382e:	ddf2      	ble.n	8003816 <_svfprintf_r+0xaf6>
 8003830:	4640      	mov	r0, r8
 8003832:	4651      	mov	r1, sl
 8003834:	465a      	mov	r2, fp
 8003836:	f002 fde5 	bl	8006404 <__ssprint_r>
 800383a:	2800      	cmp	r0, #0
 800383c:	f47f ab47 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003840:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003842:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003844:	ae1f      	add	r6, sp, #124	; 0x7c
 8003846:	e7e7      	b.n	8003818 <_svfprintf_r+0xaf8>
 8003848:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800384a:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 800384e:	f003 000f 	and.w	r0, r3, #15
 8003852:	460a      	mov	r2, r1
 8003854:	5c28      	ldrb	r0, [r5, r0]
 8003856:	3901      	subs	r1, #1
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	7010      	strb	r0, [r2, #0]
 800385c:	d1f7      	bne.n	800384e <_svfprintf_r+0xb2e>
 800385e:	ebc2 030b 	rsb	r3, r2, fp
 8003862:	9211      	str	r2, [sp, #68]	; 0x44
 8003864:	930d      	str	r3, [sp, #52]	; 0x34
 8003866:	f7ff bbbf 	b.w	8002fe8 <_svfprintf_r+0x2c8>
 800386a:	2b09      	cmp	r3, #9
 800386c:	bf82      	ittt	hi
 800386e:	f64c 45cd 	movwhi	r5, #52429	; 0xcccd
 8003872:	f10d 01e3 	addhi.w	r1, sp, #227	; 0xe3
 8003876:	f6cc 45cc 	movthi	r5, #52428	; 0xcccc
 800387a:	d809      	bhi.n	8003890 <_svfprintf_r+0xb70>
 800387c:	981d      	ldr	r0, [sp, #116]	; 0x74
 800387e:	3330      	adds	r3, #48	; 0x30
 8003880:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 8003884:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8003888:	900d      	str	r0, [sp, #52]	; 0x34
 800388a:	9111      	str	r1, [sp, #68]	; 0x44
 800388c:	f7ff bbac 	b.w	8002fe8 <_svfprintf_r+0x2c8>
 8003890:	fba5 0203 	umull	r0, r2, r5, r3
 8003894:	08d2      	lsrs	r2, r2, #3
 8003896:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 800389a:	4608      	mov	r0, r1
 800389c:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 80038a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80038a4:	7001      	strb	r1, [r0, #0]
 80038a6:	4613      	mov	r3, r2
 80038a8:	1e41      	subs	r1, r0, #1
 80038aa:	2a00      	cmp	r2, #0
 80038ac:	d1f0      	bne.n	8003890 <_svfprintf_r+0xb70>
 80038ae:	ebc0 030b 	rsb	r3, r0, fp
 80038b2:	9011      	str	r0, [sp, #68]	; 0x44
 80038b4:	930d      	str	r3, [sp, #52]	; 0x34
 80038b6:	f7ff bb97 	b.w	8002fe8 <_svfprintf_r+0x2c8>
 80038ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80038bc:	4651      	mov	r1, sl
 80038be:	465a      	mov	r2, fp
 80038c0:	f002 fda0 	bl	8006404 <__ssprint_r>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	f47f ab02 	bne.w	8002ece <_svfprintf_r+0x1ae>
 80038ca:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80038cc:	ae1f      	add	r6, sp, #124	; 0x7c
 80038ce:	e563      	b.n	8003398 <_svfprintf_r+0x678>
 80038d0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80038d2:	1e4f      	subs	r7, r1, #1
 80038d4:	2f00      	cmp	r7, #0
 80038d6:	f77f af12 	ble.w	80036fe <_svfprintf_r+0x9de>
 80038da:	2f10      	cmp	r7, #16
 80038dc:	f8df 8430 	ldr.w	r8, [pc, #1072]	; 8003d10 <_svfprintf_r+0xff0>
 80038e0:	f77f af26 	ble.w	8003730 <_svfprintf_r+0xa10>
 80038e4:	4623      	mov	r3, r4
 80038e6:	f04f 0910 	mov.w	r9, #16
 80038ea:	4644      	mov	r4, r8
 80038ec:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80038f0:	e004      	b.n	80038fc <_svfprintf_r+0xbdc>
 80038f2:	3608      	adds	r6, #8
 80038f4:	3f10      	subs	r7, #16
 80038f6:	2f10      	cmp	r7, #16
 80038f8:	f77f af18 	ble.w	800372c <_svfprintf_r+0xa0c>
 80038fc:	3301      	adds	r3, #1
 80038fe:	3510      	adds	r5, #16
 8003900:	2b07      	cmp	r3, #7
 8003902:	e886 0210 	stmia.w	r6, {r4, r9}
 8003906:	953b      	str	r5, [sp, #236]	; 0xec
 8003908:	933a      	str	r3, [sp, #232]	; 0xe8
 800390a:	ddf2      	ble.n	80038f2 <_svfprintf_r+0xbd2>
 800390c:	4640      	mov	r0, r8
 800390e:	4651      	mov	r1, sl
 8003910:	465a      	mov	r2, fp
 8003912:	f002 fd77 	bl	8006404 <__ssprint_r>
 8003916:	2800      	cmp	r0, #0
 8003918:	f47f aad9 	bne.w	8002ece <_svfprintf_r+0x1ae>
 800391c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800391e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003920:	ae1f      	add	r6, sp, #124	; 0x7c
 8003922:	e7e7      	b.n	80038f4 <_svfprintf_r+0xbd4>
 8003924:	2202      	movs	r2, #2
 8003926:	e405      	b.n	8003134 <_svfprintf_r+0x414>
 8003928:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800392a:	4651      	mov	r1, sl
 800392c:	465a      	mov	r2, fp
 800392e:	f002 fd69 	bl	8006404 <__ssprint_r>
 8003932:	2800      	cmp	r0, #0
 8003934:	f47f aacb 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003938:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800393a:	ae1f      	add	r6, sp, #124	; 0x7c
 800393c:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800393e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003940:	4298      	cmp	r0, r3
 8003942:	dc45      	bgt.n	80039d0 <_svfprintf_r+0xcb0>
 8003944:	9908      	ldr	r1, [sp, #32]
 8003946:	07c9      	lsls	r1, r1, #31
 8003948:	d442      	bmi.n	80039d0 <_svfprintf_r+0xcb0>
 800394a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800394c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800394e:	180a      	adds	r2, r1, r0
 8003950:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003952:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003954:	1a8f      	subs	r7, r1, r2
 8003956:	1ac3      	subs	r3, r0, r3
 8003958:	42bb      	cmp	r3, r7
 800395a:	bfb8      	it	lt
 800395c:	461f      	movlt	r7, r3
 800395e:	2f00      	cmp	r7, #0
 8003960:	dd0a      	ble.n	8003978 <_svfprintf_r+0xc58>
 8003962:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003964:	6032      	str	r2, [r6, #0]
 8003966:	3401      	adds	r4, #1
 8003968:	19ed      	adds	r5, r5, r7
 800396a:	2c07      	cmp	r4, #7
 800396c:	6077      	str	r7, [r6, #4]
 800396e:	953b      	str	r5, [sp, #236]	; 0xec
 8003970:	943a      	str	r4, [sp, #232]	; 0xe8
 8003972:	f300 8256 	bgt.w	8003e22 <_svfprintf_r+0x1102>
 8003976:	3608      	adds	r6, #8
 8003978:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800397c:	1bdf      	subs	r7, r3, r7
 800397e:	2f00      	cmp	r7, #0
 8003980:	f77f ad75 	ble.w	800346e <_svfprintf_r+0x74e>
 8003984:	2f10      	cmp	r7, #16
 8003986:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003988:	f8df 8384 	ldr.w	r8, [pc, #900]	; 8003d10 <_svfprintf_r+0xff0>
 800398c:	f77f adc2 	ble.w	8003514 <_svfprintf_r+0x7f4>
 8003990:	4623      	mov	r3, r4
 8003992:	f04f 0910 	mov.w	r9, #16
 8003996:	4644      	mov	r4, r8
 8003998:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800399c:	e004      	b.n	80039a8 <_svfprintf_r+0xc88>
 800399e:	3608      	adds	r6, #8
 80039a0:	3f10      	subs	r7, #16
 80039a2:	2f10      	cmp	r7, #16
 80039a4:	f77f adb4 	ble.w	8003510 <_svfprintf_r+0x7f0>
 80039a8:	3301      	adds	r3, #1
 80039aa:	3510      	adds	r5, #16
 80039ac:	2b07      	cmp	r3, #7
 80039ae:	e886 0210 	stmia.w	r6, {r4, r9}
 80039b2:	953b      	str	r5, [sp, #236]	; 0xec
 80039b4:	933a      	str	r3, [sp, #232]	; 0xe8
 80039b6:	ddf2      	ble.n	800399e <_svfprintf_r+0xc7e>
 80039b8:	4640      	mov	r0, r8
 80039ba:	4651      	mov	r1, sl
 80039bc:	465a      	mov	r2, fp
 80039be:	f002 fd21 	bl	8006404 <__ssprint_r>
 80039c2:	2800      	cmp	r0, #0
 80039c4:	f47f aa83 	bne.w	8002ece <_svfprintf_r+0x1ae>
 80039c8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80039ca:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80039cc:	ae1f      	add	r6, sp, #124	; 0x7c
 80039ce:	e7e7      	b.n	80039a0 <_svfprintf_r+0xc80>
 80039d0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80039d2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80039d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80039d6:	6070      	str	r0, [r6, #4]
 80039d8:	3401      	adds	r4, #1
 80039da:	182d      	adds	r5, r5, r0
 80039dc:	2c07      	cmp	r4, #7
 80039de:	6032      	str	r2, [r6, #0]
 80039e0:	953b      	str	r5, [sp, #236]	; 0xec
 80039e2:	943a      	str	r4, [sp, #232]	; 0xe8
 80039e4:	f300 8211 	bgt.w	8003e0a <_svfprintf_r+0x10ea>
 80039e8:	3608      	adds	r6, #8
 80039ea:	e7ae      	b.n	800394a <_svfprintf_r+0xc2a>
 80039ec:	9b08      	ldr	r3, [sp, #32]
 80039ee:	07da      	lsls	r2, r3, #31
 80039f0:	f53f ae57 	bmi.w	80036a2 <_svfprintf_r+0x982>
 80039f4:	3401      	adds	r4, #1
 80039f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80039f8:	3501      	adds	r5, #1
 80039fa:	2301      	movs	r3, #1
 80039fc:	2c07      	cmp	r4, #7
 80039fe:	6032      	str	r2, [r6, #0]
 8003a00:	6073      	str	r3, [r6, #4]
 8003a02:	953b      	str	r5, [sp, #236]	; 0xec
 8003a04:	943a      	str	r4, [sp, #232]	; 0xe8
 8003a06:	f77f ae79 	ble.w	80036fc <_svfprintf_r+0x9dc>
 8003a0a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003a0c:	4651      	mov	r1, sl
 8003a0e:	465a      	mov	r2, fp
 8003a10:	f002 fcf8 	bl	8006404 <__ssprint_r>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	f47f aa5a 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003a1a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003a1c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003a1e:	ae1f      	add	r6, sp, #124	; 0x7c
 8003a20:	e66d      	b.n	80036fe <_svfprintf_r+0x9de>
 8003a22:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003a24:	4651      	mov	r1, sl
 8003a26:	465a      	mov	r2, fp
 8003a28:	f002 fcec 	bl	8006404 <__ssprint_r>
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	f47f aa4e 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003a32:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003a34:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003a36:	ae1f      	add	r6, sp, #124	; 0x7c
 8003a38:	e64b      	b.n	80036d2 <_svfprintf_r+0x9b2>
 8003a3a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003a3c:	4651      	mov	r1, sl
 8003a3e:	465a      	mov	r2, fp
 8003a40:	f002 fce0 	bl	8006404 <__ssprint_r>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	f47f aa42 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003a4a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003a4c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003a4e:	ae1f      	add	r6, sp, #124	; 0x7c
 8003a50:	e633      	b.n	80036ba <_svfprintf_r+0x99a>
 8003a52:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003a54:	4651      	mov	r1, sl
 8003a56:	465a      	mov	r2, fp
 8003a58:	f002 fcd4 	bl	8006404 <__ssprint_r>
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	f47f aa36 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003a62:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003a64:	ae1f      	add	r6, sp, #124	; 0x7c
 8003a66:	e4bb      	b.n	80033e0 <_svfprintf_r+0x6c0>
 8003a68:	f002 fb64 	bl	8006134 <__fpclassifyd>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	f040 809e 	bne.w	8003bae <_svfprintf_r+0xe8e>
 8003a72:	2203      	movs	r2, #3
 8003a74:	9012      	str	r0, [sp, #72]	; 0x48
 8003a76:	4ba3      	ldr	r3, [pc, #652]	; (8003d04 <_svfprintf_r+0xfe4>)
 8003a78:	920a      	str	r2, [sp, #40]	; 0x28
 8003a7a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003a7c:	4aa2      	ldr	r2, [pc, #648]	; (8003d08 <_svfprintf_r+0xfe8>)
 8003a7e:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003a82:	2847      	cmp	r0, #71	; 0x47
 8003a84:	bfd8      	it	le
 8003a86:	461a      	movle	r2, r3
 8003a88:	9211      	str	r2, [sp, #68]	; 0x44
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	9a08      	ldr	r2, [sp, #32]
 8003a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8003a90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003a92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a96:	9208      	str	r2, [sp, #32]
 8003a98:	9316      	str	r3, [sp, #88]	; 0x58
 8003a9a:	f7ff baaf 	b.w	8002ffc <_svfprintf_r+0x2dc>
 8003a9e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	680b      	ldr	r3, [r1, #0]
 8003aa4:	e414      	b.n	80032d0 <_svfprintf_r+0x5b0>
 8003aa6:	9b08      	ldr	r3, [sp, #32]
 8003aa8:	065f      	lsls	r7, r3, #25
 8003aaa:	d56d      	bpl.n	8003b88 <_svfprintf_r+0xe68>
 8003aac:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003aae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ab0:	6803      	ldr	r3, [r0, #0]
 8003ab2:	3004      	adds	r0, #4
 8003ab4:	900e      	str	r0, [sp, #56]	; 0x38
 8003ab6:	8019      	strh	r1, [r3, #0]
 8003ab8:	f7ff b960 	b.w	8002d7c <_svfprintf_r+0x5c>
 8003abc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003abe:	680b      	ldr	r3, [r1, #0]
 8003ac0:	e406      	b.n	80032d0 <_svfprintf_r+0x5b0>
 8003ac2:	46a0      	mov	r8, r4
 8003ac4:	461c      	mov	r4, r3
 8003ac6:	3401      	adds	r4, #1
 8003ac8:	19ed      	adds	r5, r5, r7
 8003aca:	2c07      	cmp	r4, #7
 8003acc:	f8c6 8000 	str.w	r8, [r6]
 8003ad0:	6077      	str	r7, [r6, #4]
 8003ad2:	953b      	str	r5, [sp, #236]	; 0xec
 8003ad4:	943a      	str	r4, [sp, #232]	; 0xe8
 8003ad6:	f73f af27 	bgt.w	8003928 <_svfprintf_r+0xc08>
 8003ada:	3608      	adds	r6, #8
 8003adc:	e72e      	b.n	800393c <_svfprintf_r+0xc1c>
 8003ade:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003ae0:	4651      	mov	r1, sl
 8003ae2:	465a      	mov	r2, fp
 8003ae4:	f002 fc8e 	bl	8006404 <__ssprint_r>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	f47f a9f0 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003aee:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003af0:	ae1f      	add	r6, sp, #124	; 0x7c
 8003af2:	e53d      	b.n	8003570 <_svfprintf_r+0x850>
 8003af4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003af6:	4b85      	ldr	r3, [pc, #532]	; (8003d0c <_svfprintf_r+0xfec>)
 8003af8:	3401      	adds	r4, #1
 8003afa:	6033      	str	r3, [r6, #0]
 8003afc:	3501      	adds	r5, #1
 8003afe:	2301      	movs	r3, #1
 8003b00:	2c07      	cmp	r4, #7
 8003b02:	6073      	str	r3, [r6, #4]
 8003b04:	953b      	str	r5, [sp, #236]	; 0xec
 8003b06:	943a      	str	r4, [sp, #232]	; 0xe8
 8003b08:	f300 8139 	bgt.w	8003d7e <_svfprintf_r+0x105e>
 8003b0c:	3608      	adds	r6, #8
 8003b0e:	b92f      	cbnz	r7, 8003b1c <_svfprintf_r+0xdfc>
 8003b10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b12:	b91a      	cbnz	r2, 8003b1c <_svfprintf_r+0xdfc>
 8003b14:	9b08      	ldr	r3, [sp, #32]
 8003b16:	07d8      	lsls	r0, r3, #31
 8003b18:	f57f aca9 	bpl.w	800346e <_svfprintf_r+0x74e>
 8003b1c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003b1e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003b20:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003b22:	6071      	str	r1, [r6, #4]
 8003b24:	3401      	adds	r4, #1
 8003b26:	186d      	adds	r5, r5, r1
 8003b28:	2c07      	cmp	r4, #7
 8003b2a:	6030      	str	r0, [r6, #0]
 8003b2c:	953b      	str	r5, [sp, #236]	; 0xec
 8003b2e:	943a      	str	r4, [sp, #232]	; 0xe8
 8003b30:	f300 81d2 	bgt.w	8003ed8 <_svfprintf_r+0x11b8>
 8003b34:	3608      	adds	r6, #8
 8003b36:	427f      	negs	r7, r7
 8003b38:	2f00      	cmp	r7, #0
 8003b3a:	f340 8141 	ble.w	8003dc0 <_svfprintf_r+0x10a0>
 8003b3e:	2f10      	cmp	r7, #16
 8003b40:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8003d10 <_svfprintf_r+0xff0>
 8003b44:	f340 8183 	ble.w	8003e4e <_svfprintf_r+0x112e>
 8003b48:	4623      	mov	r3, r4
 8003b4a:	f04f 0910 	mov.w	r9, #16
 8003b4e:	4644      	mov	r4, r8
 8003b50:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003b54:	e004      	b.n	8003b60 <_svfprintf_r+0xe40>
 8003b56:	3608      	adds	r6, #8
 8003b58:	3f10      	subs	r7, #16
 8003b5a:	2f10      	cmp	r7, #16
 8003b5c:	f340 8175 	ble.w	8003e4a <_svfprintf_r+0x112a>
 8003b60:	3301      	adds	r3, #1
 8003b62:	3510      	adds	r5, #16
 8003b64:	2b07      	cmp	r3, #7
 8003b66:	e886 0210 	stmia.w	r6, {r4, r9}
 8003b6a:	953b      	str	r5, [sp, #236]	; 0xec
 8003b6c:	933a      	str	r3, [sp, #232]	; 0xe8
 8003b6e:	ddf2      	ble.n	8003b56 <_svfprintf_r+0xe36>
 8003b70:	4640      	mov	r0, r8
 8003b72:	4651      	mov	r1, sl
 8003b74:	465a      	mov	r2, fp
 8003b76:	f002 fc45 	bl	8006404 <__ssprint_r>
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	f47f a9a7 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003b80:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003b82:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003b84:	ae1f      	add	r6, sp, #124	; 0x7c
 8003b86:	e7e7      	b.n	8003b58 <_svfprintf_r+0xe38>
 8003b88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b8a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003b8c:	6813      	ldr	r3, [r2, #0]
 8003b8e:	3204      	adds	r2, #4
 8003b90:	920e      	str	r2, [sp, #56]	; 0x38
 8003b92:	6018      	str	r0, [r3, #0]
 8003b94:	f7ff b8f2 	b.w	8002d7c <_svfprintf_r+0x5c>
 8003b98:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003b9a:	4651      	mov	r1, sl
 8003b9c:	465a      	mov	r2, fp
 8003b9e:	f002 fc31 	bl	8006404 <__ssprint_r>
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	f47f a993 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003ba8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003baa:	ae1f      	add	r6, sp, #124	; 0x7c
 8003bac:	e4f5      	b.n	800359a <_svfprintf_r+0x87a>
 8003bae:	1c60      	adds	r0, r4, #1
 8003bb0:	f000 80f1 	beq.w	8003d96 <_svfprintf_r+0x1076>
 8003bb4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8003bb6:	2967      	cmp	r1, #103	; 0x67
 8003bb8:	bf18      	it	ne
 8003bba:	2947      	cmpne	r1, #71	; 0x47
 8003bbc:	bf14      	ite	ne
 8003bbe:	2300      	movne	r3, #0
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	bf18      	it	ne
 8003bc4:	930a      	strne	r3, [sp, #40]	; 0x28
 8003bc6:	d104      	bne.n	8003bd2 <_svfprintf_r+0xeb2>
 8003bc8:	2c00      	cmp	r4, #0
 8003bca:	f000 81ad 	beq.w	8003f28 <_svfprintf_r+0x1208>
 8003bce:	2201      	movs	r2, #1
 8003bd0:	920a      	str	r2, [sp, #40]	; 0x28
 8003bd2:	9808      	ldr	r0, [sp, #32]
 8003bd4:	2d00      	cmp	r5, #0
 8003bd6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8003bda:	9008      	str	r0, [sp, #32]
 8003bdc:	f2c0 8189 	blt.w	8003ef2 <_svfprintf_r+0x11d2>
 8003be0:	2200      	movs	r2, #0
 8003be2:	9212      	str	r2, [sp, #72]	; 0x48
 8003be4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003be6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003be8:	f1a3 0166 	sub.w	r1, r3, #102	; 0x66
 8003bec:	424b      	negs	r3, r1
 8003bee:	eb43 0301 	adc.w	r3, r3, r1
 8003bf2:	469c      	mov	ip, r3
 8003bf4:	2846      	cmp	r0, #70	; 0x46
 8003bf6:	bf08      	it	eq
 8003bf8:	f04c 0c01 	orreq.w	ip, ip, #1
 8003bfc:	930d      	str	r3, [sp, #52]	; 0x34
 8003bfe:	46a1      	mov	r9, r4
 8003c00:	2103      	movs	r1, #3
 8003c02:	f1bc 0f00 	cmp.w	ip, #0
 8003c06:	d107      	bne.n	8003c18 <_svfprintf_r+0xef8>
 8003c08:	2865      	cmp	r0, #101	; 0x65
 8003c0a:	bf18      	it	ne
 8003c0c:	2845      	cmpne	r0, #69	; 0x45
 8003c0e:	bf0c      	ite	eq
 8003c10:	f104 0901 	addeq.w	r9, r4, #1
 8003c14:	46a1      	movne	r9, r4
 8003c16:	2102      	movs	r1, #2
 8003c18:	e88d 0202 	stmia.w	sp, {r1, r9}
 8003c1c:	a940      	add	r1, sp, #256	; 0x100
 8003c1e:	9102      	str	r1, [sp, #8]
 8003c20:	a941      	add	r1, sp, #260	; 0x104
 8003c22:	9103      	str	r1, [sp, #12]
 8003c24:	4642      	mov	r2, r8
 8003c26:	a942      	add	r1, sp, #264	; 0x108
 8003c28:	462b      	mov	r3, r5
 8003c2a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003c2c:	9104      	str	r1, [sp, #16]
 8003c2e:	f8cd c018 	str.w	ip, [sp, #24]
 8003c32:	f000 fa6d 	bl	8004110 <_dtoa_r>
 8003c36:	9915      	ldr	r1, [sp, #84]	; 0x54
 8003c38:	9011      	str	r0, [sp, #68]	; 0x44
 8003c3a:	2947      	cmp	r1, #71	; 0x47
 8003c3c:	bf18      	it	ne
 8003c3e:	2967      	cmpne	r1, #103	; 0x67
 8003c40:	f8dd c018 	ldr.w	ip, [sp, #24]
 8003c44:	d104      	bne.n	8003c50 <_svfprintf_r+0xf30>
 8003c46:	9a08      	ldr	r2, [sp, #32]
 8003c48:	07d2      	lsls	r2, r2, #31
 8003c4a:	bf58      	it	pl
 8003c4c:	9f42      	ldrpl	r7, [sp, #264]	; 0x108
 8003c4e:	d515      	bpl.n	8003c7c <_svfprintf_r+0xf5c>
 8003c50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c52:	eb03 0709 	add.w	r7, r3, r9
 8003c56:	f1bc 0f00 	cmp.w	ip, #0
 8003c5a:	d005      	beq.n	8003c68 <_svfprintf_r+0xf48>
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b30      	cmp	r3, #48	; 0x30
 8003c60:	f000 8165 	beq.w	8003f2e <_svfprintf_r+0x120e>
 8003c64:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8003c66:	18ff      	adds	r7, r7, r3
 8003c68:	4640      	mov	r0, r8
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f003 ff86 	bl	8007b80 <__aeabi_dcmpeq>
 8003c74:	2800      	cmp	r0, #0
 8003c76:	f000 8117 	beq.w	8003ea8 <_svfprintf_r+0x1188>
 8003c7a:	9742      	str	r7, [sp, #264]	; 0x108
 8003c7c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003c7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003c80:	1a3f      	subs	r7, r7, r0
 8003c82:	9710      	str	r7, [sp, #64]	; 0x40
 8003c84:	2900      	cmp	r1, #0
 8003c86:	f000 80f9 	beq.w	8003e7c <_svfprintf_r+0x115c>
 8003c8a:	9940      	ldr	r1, [sp, #256]	; 0x100
 8003c8c:	1ccb      	adds	r3, r1, #3
 8003c8e:	db02      	blt.n	8003c96 <_svfprintf_r+0xf76>
 8003c90:	428c      	cmp	r4, r1
 8003c92:	f280 80fa 	bge.w	8003e8a <_svfprintf_r+0x116a>
 8003c96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003c98:	3a02      	subs	r2, #2
 8003c9a:	9215      	str	r2, [sp, #84]	; 0x54
 8003c9c:	3901      	subs	r1, #1
 8003c9e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003ca0:	9140      	str	r1, [sp, #256]	; 0x100
 8003ca2:	2900      	cmp	r1, #0
 8003ca4:	f88d 00f0 	strb.w	r0, [sp, #240]	; 0xf0
 8003ca8:	f2c0 815d 	blt.w	8003f66 <_svfprintf_r+0x1246>
 8003cac:	232b      	movs	r3, #43	; 0x2b
 8003cae:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8003cb2:	2909      	cmp	r1, #9
 8003cb4:	f340 8122 	ble.w	8003efc <_svfprintf_r+0x11dc>
 8003cb8:	f10d 07ff 	add.w	r7, sp, #255	; 0xff
 8003cbc:	f246 6467 	movw	r4, #26215	; 0x6667
 8003cc0:	4638      	mov	r0, r7
 8003cc2:	f2c6 6466 	movt	r4, #26214	; 0x6666
 8003cc6:	fb84 3201 	smull	r3, r2, r4, r1
 8003cca:	17cb      	asrs	r3, r1, #31
 8003ccc:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8003cd0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003cd4:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8003cd8:	3230      	adds	r2, #48	; 0x30
 8003cda:	2b09      	cmp	r3, #9
 8003cdc:	4605      	mov	r5, r0
 8003cde:	4619      	mov	r1, r3
 8003ce0:	f800 2d01 	strb.w	r2, [r0, #-1]!
 8003ce4:	dcef      	bgt.n	8003cc6 <_svfprintf_r+0xfa6>
 8003ce6:	3130      	adds	r1, #48	; 0x30
 8003ce8:	1eaa      	subs	r2, r5, #2
 8003cea:	b2c9      	uxtb	r1, r1
 8003cec:	42ba      	cmp	r2, r7
 8003cee:	f805 1c02 	strb.w	r1, [r5, #-2]
 8003cf2:	bf28      	it	cs
 8003cf4:	f10d 01f2 	addcs.w	r1, sp, #242	; 0xf2
 8003cf8:	d213      	bcs.n	8003d22 <_svfprintf_r+0x1002>
 8003cfa:	f10d 03f2 	add.w	r3, sp, #242	; 0xf2
 8003cfe:	f10d 00fe 	add.w	r0, sp, #254	; 0xfe
 8003d02:	e009      	b.n	8003d18 <_svfprintf_r+0xff8>
 8003d04:	08008158 	.word	0x08008158
 8003d08:	0800815c 	.word	0x0800815c
 8003d0c:	08008190 	.word	0x08008190
 8003d10:	08007ec8 	.word	0x08007ec8
 8003d14:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8003d18:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1c:	4282      	cmp	r2, r0
 8003d1e:	4619      	mov	r1, r3
 8003d20:	d1f8      	bne.n	8003d14 <_svfprintf_r+0xff4>
 8003d22:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003d24:	ab3c      	add	r3, sp, #240	; 0xf0
 8003d26:	1acb      	subs	r3, r1, r3
 8003d28:	931b      	str	r3, [sp, #108]	; 0x6c
 8003d2a:	2801      	cmp	r0, #1
 8003d2c:	4403      	add	r3, r0
 8003d2e:	930d      	str	r3, [sp, #52]	; 0x34
 8003d30:	f340 8125 	ble.w	8003f7e <_svfprintf_r+0x125e>
 8003d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d36:	3301      	adds	r3, #1
 8003d38:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	930d      	str	r3, [sp, #52]	; 0x34
 8003d40:	900a      	str	r0, [sp, #40]	; 0x28
 8003d42:	9116      	str	r1, [sp, #88]	; 0x58
 8003d44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d46:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f43f a956 	beq.w	8002ffc <_svfprintf_r+0x2dc>
 8003d50:	232d      	movs	r3, #45	; 0x2d
 8003d52:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8003d56:	2300      	movs	r3, #0
 8003d58:	9312      	str	r3, [sp, #72]	; 0x48
 8003d5a:	f7ff b950 	b.w	8002ffe <_svfprintf_r+0x2de>
 8003d5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003d60:	2140      	movs	r1, #64	; 0x40
 8003d62:	f001 fa59 	bl	8005218 <_malloc_r>
 8003d66:	f8ca 0000 	str.w	r0, [sl]
 8003d6a:	f8ca 0010 	str.w	r0, [sl, #16]
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	f000 812b 	beq.w	8003fca <_svfprintf_r+0x12aa>
 8003d74:	2340      	movs	r3, #64	; 0x40
 8003d76:	f8ca 3014 	str.w	r3, [sl, #20]
 8003d7a:	f7fe bfec 	b.w	8002d56 <_svfprintf_r+0x36>
 8003d7e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003d80:	4651      	mov	r1, sl
 8003d82:	465a      	mov	r2, fp
 8003d84:	f002 fb3e 	bl	8006404 <__ssprint_r>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	f47f a8a0 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003d8e:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8003d90:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003d92:	ae1f      	add	r6, sp, #124	; 0x7c
 8003d94:	e6bb      	b.n	8003b0e <_svfprintf_r+0xdee>
 8003d96:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003d98:	2847      	cmp	r0, #71	; 0x47
 8003d9a:	bf18      	it	ne
 8003d9c:	2867      	cmpne	r0, #103	; 0x67
 8003d9e:	bf14      	ite	ne
 8003da0:	2000      	movne	r0, #0
 8003da2:	2001      	moveq	r0, #1
 8003da4:	900a      	str	r0, [sp, #40]	; 0x28
 8003da6:	2406      	movs	r4, #6
 8003da8:	e713      	b.n	8003bd2 <_svfprintf_r+0xeb2>
 8003daa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003dac:	4651      	mov	r1, sl
 8003dae:	465a      	mov	r2, fp
 8003db0:	f002 fb28 	bl	8006404 <__ssprint_r>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	f47f a88a 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003dba:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003dbc:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003dbe:	ae1f      	add	r6, sp, #124	; 0x7c
 8003dc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003dc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003dc4:	6072      	str	r2, [r6, #4]
 8003dc6:	3401      	adds	r4, #1
 8003dc8:	18ad      	adds	r5, r5, r2
 8003dca:	2c07      	cmp	r4, #7
 8003dcc:	6033      	str	r3, [r6, #0]
 8003dce:	953b      	str	r5, [sp, #236]	; 0xec
 8003dd0:	943a      	str	r4, [sp, #232]	; 0xe8
 8003dd2:	f77f ab4b 	ble.w	800346c <_svfprintf_r+0x74c>
 8003dd6:	f7ff bba6 	b.w	8003526 <_svfprintf_r+0x806>
 8003dda:	f002 fae3 	bl	80063a4 <strlen>
 8003dde:	900d      	str	r0, [sp, #52]	; 0x34
 8003de0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8003de4:	9512      	str	r5, [sp, #72]	; 0x48
 8003de6:	900a      	str	r0, [sp, #40]	; 0x28
 8003de8:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003dec:	970e      	str	r7, [sp, #56]	; 0x38
 8003dee:	9516      	str	r5, [sp, #88]	; 0x58
 8003df0:	f7ff b904 	b.w	8002ffc <_svfprintf_r+0x2dc>
 8003df4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003df6:	4651      	mov	r1, sl
 8003df8:	465a      	mov	r2, fp
 8003dfa:	f002 fb03 	bl	8006404 <__ssprint_r>
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	f47f a865 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003e04:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003e06:	ae1f      	add	r6, sp, #124	; 0x7c
 8003e08:	e4f1      	b.n	80037ee <_svfprintf_r+0xace>
 8003e0a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003e0c:	4651      	mov	r1, sl
 8003e0e:	465a      	mov	r2, fp
 8003e10:	f002 faf8 	bl	8006404 <__ssprint_r>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	f47f a85a 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003e1a:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8003e1c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003e1e:	ae1f      	add	r6, sp, #124	; 0x7c
 8003e20:	e593      	b.n	800394a <_svfprintf_r+0xc2a>
 8003e22:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003e24:	4651      	mov	r1, sl
 8003e26:	465a      	mov	r2, fp
 8003e28:	f002 faec 	bl	8006404 <__ssprint_r>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	f47f a84e 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003e32:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8003e34:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003e36:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003e38:	1acb      	subs	r3, r1, r3
 8003e3a:	ae1f      	add	r6, sp, #124	; 0x7c
 8003e3c:	e59c      	b.n	8003978 <_svfprintf_r+0xc58>
 8003e3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e40:	ebc3 030b 	rsb	r3, r3, fp
 8003e44:	930d      	str	r3, [sp, #52]	; 0x34
 8003e46:	f7ff b8cf 	b.w	8002fe8 <_svfprintf_r+0x2c8>
 8003e4a:	46a0      	mov	r8, r4
 8003e4c:	461c      	mov	r4, r3
 8003e4e:	3401      	adds	r4, #1
 8003e50:	19ed      	adds	r5, r5, r7
 8003e52:	2c07      	cmp	r4, #7
 8003e54:	f8c6 8000 	str.w	r8, [r6]
 8003e58:	6077      	str	r7, [r6, #4]
 8003e5a:	953b      	str	r5, [sp, #236]	; 0xec
 8003e5c:	943a      	str	r4, [sp, #232]	; 0xe8
 8003e5e:	dca4      	bgt.n	8003daa <_svfprintf_r+0x108a>
 8003e60:	3608      	adds	r6, #8
 8003e62:	e7ad      	b.n	8003dc0 <_svfprintf_r+0x10a0>
 8003e64:	2c06      	cmp	r4, #6
 8003e66:	bf28      	it	cs
 8003e68:	2406      	movcs	r4, #6
 8003e6a:	495f      	ldr	r1, [pc, #380]	; (8003fe8 <_svfprintf_r+0x12c8>)
 8003e6c:	940d      	str	r4, [sp, #52]	; 0x34
 8003e6e:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 8003e72:	900a      	str	r0, [sp, #40]	; 0x28
 8003e74:	970e      	str	r7, [sp, #56]	; 0x38
 8003e76:	9111      	str	r1, [sp, #68]	; 0x44
 8003e78:	f7ff ba01 	b.w	800327e <_svfprintf_r+0x55e>
 8003e7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003e7e:	2b65      	cmp	r3, #101	; 0x65
 8003e80:	dd6f      	ble.n	8003f62 <_svfprintf_r+0x1242>
 8003e82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e84:	9940      	ldr	r1, [sp, #256]	; 0x100
 8003e86:	2a00      	cmp	r2, #0
 8003e88:	d15e      	bne.n	8003f48 <_svfprintf_r+0x1228>
 8003e8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003e8c:	428a      	cmp	r2, r1
 8003e8e:	dc3d      	bgt.n	8003f0c <_svfprintf_r+0x11ec>
 8003e90:	9b08      	ldr	r3, [sp, #32]
 8003e92:	07da      	lsls	r2, r3, #31
 8003e94:	d56c      	bpl.n	8003f70 <_svfprintf_r+0x1250>
 8003e96:	1c4b      	adds	r3, r1, #1
 8003e98:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8003e9c:	2267      	movs	r2, #103	; 0x67
 8003e9e:	930d      	str	r3, [sp, #52]	; 0x34
 8003ea0:	900a      	str	r0, [sp, #40]	; 0x28
 8003ea2:	9215      	str	r2, [sp, #84]	; 0x54
 8003ea4:	9116      	str	r1, [sp, #88]	; 0x58
 8003ea6:	e74d      	b.n	8003d44 <_svfprintf_r+0x1024>
 8003ea8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8003eaa:	429f      	cmp	r7, r3
 8003eac:	bf98      	it	ls
 8003eae:	461f      	movls	r7, r3
 8003eb0:	f67f aee4 	bls.w	8003c7c <_svfprintf_r+0xf5c>
 8003eb4:	2230      	movs	r2, #48	; 0x30
 8003eb6:	f803 2b01 	strb.w	r2, [r3], #1
 8003eba:	42bb      	cmp	r3, r7
 8003ebc:	9342      	str	r3, [sp, #264]	; 0x108
 8003ebe:	d1fa      	bne.n	8003eb6 <_svfprintf_r+0x1196>
 8003ec0:	e6dc      	b.n	8003c7c <_svfprintf_r+0xf5c>
 8003ec2:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 8003ec6:	9012      	str	r0, [sp, #72]	; 0x48
 8003ec8:	920a      	str	r2, [sp, #40]	; 0x28
 8003eca:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003ece:	970e      	str	r7, [sp, #56]	; 0x38
 8003ed0:	940d      	str	r4, [sp, #52]	; 0x34
 8003ed2:	9016      	str	r0, [sp, #88]	; 0x58
 8003ed4:	f7ff b892 	b.w	8002ffc <_svfprintf_r+0x2dc>
 8003ed8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003eda:	4651      	mov	r1, sl
 8003edc:	465a      	mov	r2, fp
 8003ede:	f002 fa91 	bl	8006404 <__ssprint_r>
 8003ee2:	2800      	cmp	r0, #0
 8003ee4:	f47e aff3 	bne.w	8002ece <_svfprintf_r+0x1ae>
 8003ee8:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8003eea:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003eec:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003eee:	ae1f      	add	r6, sp, #124	; 0x7c
 8003ef0:	e621      	b.n	8003b36 <_svfprintf_r+0xe16>
 8003ef2:	212d      	movs	r1, #45	; 0x2d
 8003ef4:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8003ef8:	9112      	str	r1, [sp, #72]	; 0x48
 8003efa:	e673      	b.n	8003be4 <_svfprintf_r+0xec4>
 8003efc:	3130      	adds	r1, #48	; 0x30
 8003efe:	2330      	movs	r3, #48	; 0x30
 8003f00:	f88d 10f3 	strb.w	r1, [sp, #243]	; 0xf3
 8003f04:	f88d 30f2 	strb.w	r3, [sp, #242]	; 0xf2
 8003f08:	a93d      	add	r1, sp, #244	; 0xf4
 8003f0a:	e70a      	b.n	8003d22 <_svfprintf_r+0x1002>
 8003f0c:	2900      	cmp	r1, #0
 8003f0e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003f10:	bfd4      	ite	le
 8003f12:	f1c1 0302 	rsble	r3, r1, #2
 8003f16:	2301      	movgt	r3, #1
 8003f18:	181b      	adds	r3, r3, r0
 8003f1a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8003f1e:	930d      	str	r3, [sp, #52]	; 0x34
 8003f20:	2367      	movs	r3, #103	; 0x67
 8003f22:	920a      	str	r2, [sp, #40]	; 0x28
 8003f24:	9315      	str	r3, [sp, #84]	; 0x54
 8003f26:	e7bd      	b.n	8003ea4 <_svfprintf_r+0x1184>
 8003f28:	2401      	movs	r4, #1
 8003f2a:	940a      	str	r4, [sp, #40]	; 0x28
 8003f2c:	e651      	b.n	8003bd2 <_svfprintf_r+0xeb2>
 8003f2e:	4640      	mov	r0, r8
 8003f30:	4629      	mov	r1, r5
 8003f32:	2200      	movs	r2, #0
 8003f34:	2300      	movs	r3, #0
 8003f36:	f003 fe23 	bl	8007b80 <__aeabi_dcmpeq>
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	f47f ae92 	bne.w	8003c64 <_svfprintf_r+0xf44>
 8003f40:	f1c9 0301 	rsb	r3, r9, #1
 8003f44:	9340      	str	r3, [sp, #256]	; 0x100
 8003f46:	e68e      	b.n	8003c66 <_svfprintf_r+0xf46>
 8003f48:	2900      	cmp	r1, #0
 8003f4a:	dd38      	ble.n	8003fbe <_svfprintf_r+0x129e>
 8003f4c:	bb74      	cbnz	r4, 8003fac <_svfprintf_r+0x128c>
 8003f4e:	9b08      	ldr	r3, [sp, #32]
 8003f50:	07dd      	lsls	r5, r3, #31
 8003f52:	d42b      	bmi.n	8003fac <_svfprintf_r+0x128c>
 8003f54:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8003f58:	2266      	movs	r2, #102	; 0x66
 8003f5a:	900a      	str	r0, [sp, #40]	; 0x28
 8003f5c:	910d      	str	r1, [sp, #52]	; 0x34
 8003f5e:	9215      	str	r2, [sp, #84]	; 0x54
 8003f60:	e7a0      	b.n	8003ea4 <_svfprintf_r+0x1184>
 8003f62:	9940      	ldr	r1, [sp, #256]	; 0x100
 8003f64:	e69a      	b.n	8003c9c <_svfprintf_r+0xf7c>
 8003f66:	232d      	movs	r3, #45	; 0x2d
 8003f68:	4249      	negs	r1, r1
 8003f6a:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8003f6e:	e6a0      	b.n	8003cb2 <_svfprintf_r+0xf92>
 8003f70:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8003f74:	2267      	movs	r2, #103	; 0x67
 8003f76:	900a      	str	r0, [sp, #40]	; 0x28
 8003f78:	910d      	str	r1, [sp, #52]	; 0x34
 8003f7a:	9215      	str	r2, [sp, #84]	; 0x54
 8003f7c:	e792      	b.n	8003ea4 <_svfprintf_r+0x1184>
 8003f7e:	9908      	ldr	r1, [sp, #32]
 8003f80:	f011 0301 	ands.w	r3, r1, #1
 8003f84:	f47f aed6 	bne.w	8003d34 <_svfprintf_r+0x1014>
 8003f88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003f8a:	9316      	str	r3, [sp, #88]	; 0x58
 8003f8c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8003f90:	920a      	str	r2, [sp, #40]	; 0x28
 8003f92:	e6d7      	b.n	8003d44 <_svfprintf_r+0x1024>
 8003f94:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003f96:	680c      	ldr	r4, [r1, #0]
 8003f98:	1d0b      	adds	r3, r1, #4
 8003f9a:	2c00      	cmp	r4, #0
 8003f9c:	bfbc      	itt	lt
 8003f9e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003fa0:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 8003fa4:	f6bf a985 	bge.w	80032b2 <_svfprintf_r+0x592>
 8003fa8:	f7fe bf18 	b.w	8002ddc <_svfprintf_r+0xbc>
 8003fac:	3401      	adds	r4, #1
 8003fae:	190c      	adds	r4, r1, r4
 8003fb0:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8003fb4:	2066      	movs	r0, #102	; 0x66
 8003fb6:	940d      	str	r4, [sp, #52]	; 0x34
 8003fb8:	930a      	str	r3, [sp, #40]	; 0x28
 8003fba:	9015      	str	r0, [sp, #84]	; 0x54
 8003fbc:	e772      	b.n	8003ea4 <_svfprintf_r+0x1184>
 8003fbe:	b914      	cbnz	r4, 8003fc6 <_svfprintf_r+0x12a6>
 8003fc0:	9a08      	ldr	r2, [sp, #32]
 8003fc2:	07d0      	lsls	r0, r2, #31
 8003fc4:	d509      	bpl.n	8003fda <_svfprintf_r+0x12ba>
 8003fc6:	3402      	adds	r4, #2
 8003fc8:	e7f2      	b.n	8003fb0 <_svfprintf_r+0x1290>
 8003fca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003fcc:	230c      	movs	r3, #12
 8003fce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fd2:	600b      	str	r3, [r1, #0]
 8003fd4:	920c      	str	r2, [sp, #48]	; 0x30
 8003fd6:	f7fe bf83 	b.w	8002ee0 <_svfprintf_r+0x1c0>
 8003fda:	2001      	movs	r0, #1
 8003fdc:	2266      	movs	r2, #102	; 0x66
 8003fde:	900a      	str	r0, [sp, #40]	; 0x28
 8003fe0:	9215      	str	r2, [sp, #84]	; 0x54
 8003fe2:	900d      	str	r0, [sp, #52]	; 0x34
 8003fe4:	e75e      	b.n	8003ea4 <_svfprintf_r+0x1184>
 8003fe6:	bf00      	nop
 8003fe8:	08008188 	.word	0x08008188
 8003fec:	00000000 	.word	0x00000000

08003ff0 <quorem>:
 8003ff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff4:	6903      	ldr	r3, [r0, #16]
 8003ff6:	690d      	ldr	r5, [r1, #16]
 8003ff8:	429d      	cmp	r5, r3
 8003ffa:	4681      	mov	r9, r0
 8003ffc:	f300 8084 	bgt.w	8004108 <quorem+0x118>
 8004000:	1ceb      	adds	r3, r5, #3
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	18cf      	adds	r7, r1, r3
 8004006:	18c3      	adds	r3, r0, r3
 8004008:	687e      	ldr	r6, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	3601      	adds	r6, #1
 800400e:	fbb3 f6f6 	udiv	r6, r3, r6
 8004012:	f101 0414 	add.w	r4, r1, #20
 8004016:	3d01      	subs	r5, #1
 8004018:	3704      	adds	r7, #4
 800401a:	f100 0814 	add.w	r8, r0, #20
 800401e:	2e00      	cmp	r6, #0
 8004020:	d03c      	beq.n	800409c <quorem+0xac>
 8004022:	f04f 0e00 	mov.w	lr, #0
 8004026:	4642      	mov	r2, r8
 8004028:	4623      	mov	r3, r4
 800402a:	46f4      	mov	ip, lr
 800402c:	f853 bb04 	ldr.w	fp, [r3], #4
 8004030:	6810      	ldr	r0, [r2, #0]
 8004032:	fa1f fa8b 	uxth.w	sl, fp
 8004036:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 800403a:	fb06 ea0a 	mla	sl, r6, sl, lr
 800403e:	fb06 fe0b 	mul.w	lr, r6, fp
 8004042:	eb0e 4e1a 	add.w	lr, lr, sl, lsr #16
 8004046:	fa1c fc80 	uxtah	ip, ip, r0
 800404a:	fa1f fb8e 	uxth.w	fp, lr
 800404e:	fa1f fa8a 	uxth.w	sl, sl
 8004052:	ebca 0c0c 	rsb	ip, sl, ip
 8004056:	ebcb 4010 	rsb	r0, fp, r0, lsr #16
 800405a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800405e:	fa1f fc8c 	uxth.w	ip, ip
 8004062:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8004066:	429f      	cmp	r7, r3
 8004068:	f842 cb04 	str.w	ip, [r2], #4
 800406c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8004070:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004074:	d2da      	bcs.n	800402c <quorem+0x3c>
 8004076:	1d2a      	adds	r2, r5, #4
 8004078:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 800407c:	6858      	ldr	r0, [r3, #4]
 800407e:	b968      	cbnz	r0, 800409c <quorem+0xac>
 8004080:	4598      	cmp	r8, r3
 8004082:	d209      	bcs.n	8004098 <quorem+0xa8>
 8004084:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004088:	b112      	cbz	r2, 8004090 <quorem+0xa0>
 800408a:	e005      	b.n	8004098 <quorem+0xa8>
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	b91a      	cbnz	r2, 8004098 <quorem+0xa8>
 8004090:	3b04      	subs	r3, #4
 8004092:	3d01      	subs	r5, #1
 8004094:	4598      	cmp	r8, r3
 8004096:	d3f9      	bcc.n	800408c <quorem+0x9c>
 8004098:	f8c9 5010 	str.w	r5, [r9, #16]
 800409c:	4648      	mov	r0, r9
 800409e:	f001 fe4f 	bl	8005d40 <__mcmp>
 80040a2:	2800      	cmp	r0, #0
 80040a4:	db2d      	blt.n	8004102 <quorem+0x112>
 80040a6:	3601      	adds	r6, #1
 80040a8:	4643      	mov	r3, r8
 80040aa:	f04f 0c00 	mov.w	ip, #0
 80040ae:	f854 2b04 	ldr.w	r2, [r4], #4
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	b291      	uxth	r1, r2
 80040b6:	fa1f fa80 	uxth.w	sl, r0
 80040ba:	0c12      	lsrs	r2, r2, #16
 80040bc:	ebc1 010a 	rsb	r1, r1, sl
 80040c0:	4461      	add	r1, ip
 80040c2:	ebc2 4210 	rsb	r2, r2, r0, lsr #16
 80040c6:	eb02 4221 	add.w	r2, r2, r1, asr #16
 80040ca:	b289      	uxth	r1, r1
 80040cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80040d0:	42a7      	cmp	r7, r4
 80040d2:	f843 1b04 	str.w	r1, [r3], #4
 80040d6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80040da:	d2e8      	bcs.n	80040ae <quorem+0xbe>
 80040dc:	1d2a      	adds	r2, r5, #4
 80040de:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 80040e2:	6859      	ldr	r1, [r3, #4]
 80040e4:	b969      	cbnz	r1, 8004102 <quorem+0x112>
 80040e6:	4598      	cmp	r8, r3
 80040e8:	d209      	bcs.n	80040fe <quorem+0x10e>
 80040ea:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80040ee:	b112      	cbz	r2, 80040f6 <quorem+0x106>
 80040f0:	e005      	b.n	80040fe <quorem+0x10e>
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	b91a      	cbnz	r2, 80040fe <quorem+0x10e>
 80040f6:	3b04      	subs	r3, #4
 80040f8:	3d01      	subs	r5, #1
 80040fa:	4598      	cmp	r8, r3
 80040fc:	d3f9      	bcc.n	80040f2 <quorem+0x102>
 80040fe:	f8c9 5010 	str.w	r5, [r9, #16]
 8004102:	4630      	mov	r0, r6
 8004104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004108:	2000      	movs	r0, #0
 800410a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410e:	bf00      	nop

08004110 <_dtoa_r>:
 8004110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004114:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004116:	b09d      	sub	sp, #116	; 0x74
 8004118:	4607      	mov	r7, r0
 800411a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800411c:	4692      	mov	sl, r2
 800411e:	469b      	mov	fp, r3
 8004120:	b141      	cbz	r1, 8004134 <_dtoa_r+0x24>
 8004122:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004124:	2201      	movs	r2, #1
 8004126:	409a      	lsls	r2, r3
 8004128:	604b      	str	r3, [r1, #4]
 800412a:	608a      	str	r2, [r1, #8]
 800412c:	f001 fbd4 	bl	80058d8 <_Bfree>
 8004130:	2300      	movs	r3, #0
 8004132:	643b      	str	r3, [r7, #64]	; 0x40
 8004134:	f1bb 0500 	subs.w	r5, fp, #0
 8004138:	f2c0 80df 	blt.w	80042fa <_dtoa_r+0x1ea>
 800413c:	2300      	movs	r3, #0
 800413e:	6023      	str	r3, [r4, #0]
 8004140:	2300      	movs	r3, #0
 8004142:	461a      	mov	r2, r3
 8004144:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8004148:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800414c:	402b      	ands	r3, r5
 800414e:	4293      	cmp	r3, r2
 8004150:	f000 80be 	beq.w	80042d0 <_dtoa_r+0x1c0>
 8004154:	4650      	mov	r0, sl
 8004156:	4659      	mov	r1, fp
 8004158:	2200      	movs	r2, #0
 800415a:	2300      	movs	r3, #0
 800415c:	46d0      	mov	r8, sl
 800415e:	46d9      	mov	r9, fp
 8004160:	2401      	movs	r4, #1
 8004162:	f003 fd0d 	bl	8007b80 <__aeabi_dcmpeq>
 8004166:	b978      	cbnz	r0, 8004188 <_dtoa_r+0x78>
 8004168:	f014 0fff 	tst.w	r4, #255	; 0xff
 800416c:	d110      	bne.n	8004190 <_dtoa_r+0x80>
 800416e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004170:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004172:	2301      	movs	r3, #1
 8004174:	602b      	str	r3, [r5, #0]
 8004176:	4d78      	ldr	r5, [pc, #480]	; (8004358 <_dtoa_r+0x248>)
 8004178:	b114      	cbz	r4, 8004180 <_dtoa_r+0x70>
 800417a:	4d78      	ldr	r5, [pc, #480]	; (800435c <_dtoa_r+0x24c>)
 800417c:	6025      	str	r5, [r4, #0]
 800417e:	3d01      	subs	r5, #1
 8004180:	4628      	mov	r0, r5
 8004182:	b01d      	add	sp, #116	; 0x74
 8004184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004188:	2400      	movs	r4, #0
 800418a:	f014 0fff 	tst.w	r4, #255	; 0xff
 800418e:	d0ee      	beq.n	800416e <_dtoa_r+0x5e>
 8004190:	a91b      	add	r1, sp, #108	; 0x6c
 8004192:	9100      	str	r1, [sp, #0]
 8004194:	4638      	mov	r0, r7
 8004196:	a91a      	add	r1, sp, #104	; 0x68
 8004198:	4642      	mov	r2, r8
 800419a:	464b      	mov	r3, r9
 800419c:	9101      	str	r1, [sp, #4]
 800419e:	f001 fed1 	bl	8005f44 <__d2b>
 80041a2:	f3c5 540a 	ubfx	r4, r5, #20, #11
 80041a6:	900a      	str	r0, [sp, #40]	; 0x28
 80041a8:	2c00      	cmp	r4, #0
 80041aa:	f040 80b5 	bne.w	8004318 <_dtoa_r+0x208>
 80041ae:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80041b0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80041b2:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80041b6:	1934      	adds	r4, r6, r4
 80041b8:	429c      	cmp	r4, r3
 80041ba:	f2c0 8281 	blt.w	80046c0 <_dtoa_r+0x5b0>
 80041be:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 80041c2:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 80041c6:	1b1b      	subs	r3, r3, r4
 80041c8:	f204 4212 	addw	r2, r4, #1042	; 0x412
 80041cc:	fa15 f303 	lsls.w	r3, r5, r3
 80041d0:	fa2a f002 	lsr.w	r0, sl, r2
 80041d4:	4318      	orrs	r0, r3
 80041d6:	f003 f9f5 	bl	80075c4 <__aeabi_ui2d>
 80041da:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80041de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80041e0:	2501      	movs	r5, #1
 80041e2:	f1a0 70f8 	sub.w	r0, r0, #32505856	; 0x1f00000
 80041e6:	900d      	str	r0, [sp, #52]	; 0x34
 80041e8:	3c01      	subs	r4, #1
 80041ea:	9516      	str	r5, [sp, #88]	; 0x58
 80041ec:	2300      	movs	r3, #0
 80041ee:	2200      	movs	r2, #0
 80041f0:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 80041f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041f8:	f003 f8a6 	bl	8007348 <__aeabi_dsub>
 80041fc:	a350      	add	r3, pc, #320	; (adr r3, 8004340 <_dtoa_r+0x230>)
 80041fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004202:	f003 fa55 	bl	80076b0 <__aeabi_dmul>
 8004206:	a350      	add	r3, pc, #320	; (adr r3, 8004348 <_dtoa_r+0x238>)
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f003 f89e 	bl	800734c <__adddf3>
 8004210:	4680      	mov	r8, r0
 8004212:	4620      	mov	r0, r4
 8004214:	4689      	mov	r9, r1
 8004216:	f003 f9e5 	bl	80075e4 <__aeabi_i2d>
 800421a:	a34d      	add	r3, pc, #308	; (adr r3, 8004350 <_dtoa_r+0x240>)
 800421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004220:	f003 fa46 	bl	80076b0 <__aeabi_dmul>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4640      	mov	r0, r8
 800422a:	4649      	mov	r1, r9
 800422c:	f003 f88e 	bl	800734c <__adddf3>
 8004230:	4680      	mov	r8, r0
 8004232:	4689      	mov	r9, r1
 8004234:	f003 fcd6 	bl	8007be4 <__aeabi_d2iz>
 8004238:	4649      	mov	r1, r9
 800423a:	9005      	str	r0, [sp, #20]
 800423c:	2200      	movs	r2, #0
 800423e:	4640      	mov	r0, r8
 8004240:	2300      	movs	r3, #0
 8004242:	f003 fca7 	bl	8007b94 <__aeabi_dcmplt>
 8004246:	b150      	cbz	r0, 800425e <_dtoa_r+0x14e>
 8004248:	9805      	ldr	r0, [sp, #20]
 800424a:	f003 f9cb 	bl	80075e4 <__aeabi_i2d>
 800424e:	4642      	mov	r2, r8
 8004250:	464b      	mov	r3, r9
 8004252:	f003 fc95 	bl	8007b80 <__aeabi_dcmpeq>
 8004256:	b910      	cbnz	r0, 800425e <_dtoa_r+0x14e>
 8004258:	9d05      	ldr	r5, [sp, #20]
 800425a:	3d01      	subs	r5, #1
 800425c:	9505      	str	r5, [sp, #20]
 800425e:	9d05      	ldr	r5, [sp, #20]
 8004260:	2d16      	cmp	r5, #22
 8004262:	f200 815e 	bhi.w	8004522 <_dtoa_r+0x412>
 8004266:	4b3e      	ldr	r3, [pc, #248]	; (8004360 <_dtoa_r+0x250>)
 8004268:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800426c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004270:	4652      	mov	r2, sl
 8004272:	465b      	mov	r3, fp
 8004274:	f003 fcac 	bl	8007bd0 <__aeabi_dcmpgt>
 8004278:	2800      	cmp	r0, #0
 800427a:	f000 8229 	beq.w	80046d0 <_dtoa_r+0x5c0>
 800427e:	9d05      	ldr	r5, [sp, #20]
 8004280:	3d01      	subs	r5, #1
 8004282:	9505      	str	r5, [sp, #20]
 8004284:	2500      	movs	r5, #0
 8004286:	9514      	str	r5, [sp, #80]	; 0x50
 8004288:	1b34      	subs	r4, r6, r4
 800428a:	3c01      	subs	r4, #1
 800428c:	f100 8213 	bmi.w	80046b6 <_dtoa_r+0x5a6>
 8004290:	2500      	movs	r5, #0
 8004292:	940b      	str	r4, [sp, #44]	; 0x2c
 8004294:	950f      	str	r5, [sp, #60]	; 0x3c
 8004296:	9c05      	ldr	r4, [sp, #20]
 8004298:	2c00      	cmp	r4, #0
 800429a:	f2c0 8203 	blt.w	80046a4 <_dtoa_r+0x594>
 800429e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80042a0:	9413      	str	r4, [sp, #76]	; 0x4c
 80042a2:	192d      	adds	r5, r5, r4
 80042a4:	2400      	movs	r4, #0
 80042a6:	950b      	str	r5, [sp, #44]	; 0x2c
 80042a8:	9410      	str	r4, [sp, #64]	; 0x40
 80042aa:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80042ac:	2d09      	cmp	r5, #9
 80042ae:	d85d      	bhi.n	800436c <_dtoa_r+0x25c>
 80042b0:	2401      	movs	r4, #1
 80042b2:	2d05      	cmp	r5, #5
 80042b4:	dd02      	ble.n	80042bc <_dtoa_r+0x1ac>
 80042b6:	3d04      	subs	r5, #4
 80042b8:	9526      	str	r5, [sp, #152]	; 0x98
 80042ba:	2400      	movs	r4, #0
 80042bc:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80042be:	1eab      	subs	r3, r5, #2
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d855      	bhi.n	8004370 <_dtoa_r+0x260>
 80042c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80042c8:	036d0382 	.word	0x036d0382
 80042cc:	03850246 	.word	0x03850246
 80042d0:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80042d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80042d6:	6023      	str	r3, [r4, #0]
 80042d8:	f1ba 0f00 	cmp.w	sl, #0
 80042dc:	d013      	beq.n	8004306 <_dtoa_r+0x1f6>
 80042de:	4d21      	ldr	r5, [pc, #132]	; (8004364 <_dtoa_r+0x254>)
 80042e0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80042e2:	2c00      	cmp	r4, #0
 80042e4:	f43f af4c 	beq.w	8004180 <_dtoa_r+0x70>
 80042e8:	78eb      	ldrb	r3, [r5, #3]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8117 	beq.w	800451e <_dtoa_r+0x40e>
 80042f0:	f105 0308 	add.w	r3, r5, #8
 80042f4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80042f6:	6023      	str	r3, [r4, #0]
 80042f8:	e742      	b.n	8004180 <_dtoa_r+0x70>
 80042fa:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 80042fe:	2301      	movs	r3, #1
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	46ab      	mov	fp, r5
 8004304:	e71c      	b.n	8004140 <_dtoa_r+0x30>
 8004306:	4b17      	ldr	r3, [pc, #92]	; (8004364 <_dtoa_r+0x254>)
 8004308:	4a17      	ldr	r2, [pc, #92]	; (8004368 <_dtoa_r+0x258>)
 800430a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800430e:	2d00      	cmp	r5, #0
 8004310:	bf0c      	ite	eq
 8004312:	4615      	moveq	r5, r2
 8004314:	461d      	movne	r5, r3
 8004316:	e7e3      	b.n	80042e0 <_dtoa_r+0x1d0>
 8004318:	4649      	mov	r1, r9
 800431a:	4640      	mov	r0, r8
 800431c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004320:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004322:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004324:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 8004328:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800432c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004330:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004334:	2500      	movs	r5, #0
 8004336:	930d      	str	r3, [sp, #52]	; 0x34
 8004338:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800433c:	9516      	str	r5, [sp, #88]	; 0x58
 800433e:	e755      	b.n	80041ec <_dtoa_r+0xdc>
 8004340:	636f4361 	.word	0x636f4361
 8004344:	3fd287a7 	.word	0x3fd287a7
 8004348:	8b60c8b3 	.word	0x8b60c8b3
 800434c:	3fc68a28 	.word	0x3fc68a28
 8004350:	509f79fb 	.word	0x509f79fb
 8004354:	3fd34413 	.word	0x3fd34413
 8004358:	08008190 	.word	0x08008190
 800435c:	08008191 	.word	0x08008191
 8004360:	08007ef0 	.word	0x08007ef0
 8004364:	080081a0 	.word	0x080081a0
 8004368:	08008194 	.word	0x08008194
 800436c:	2400      	movs	r4, #0
 800436e:	9426      	str	r4, [sp, #152]	; 0x98
 8004370:	2400      	movs	r4, #0
 8004372:	647c      	str	r4, [r7, #68]	; 0x44
 8004374:	4638      	mov	r0, r7
 8004376:	4621      	mov	r1, r4
 8004378:	f001 fa88 	bl	800588c <_Balloc>
 800437c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004380:	950e      	str	r5, [sp, #56]	; 0x38
 8004382:	2501      	movs	r5, #1
 8004384:	9512      	str	r5, [sp, #72]	; 0x48
 8004386:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800438a:	9009      	str	r0, [sp, #36]	; 0x24
 800438c:	6438      	str	r0, [r7, #64]	; 0x40
 800438e:	9515      	str	r5, [sp, #84]	; 0x54
 8004390:	9427      	str	r4, [sp, #156]	; 0x9c
 8004392:	9c05      	ldr	r4, [sp, #20]
 8004394:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004396:	2c0e      	cmp	r4, #14
 8004398:	bfcc      	ite	gt
 800439a:	2500      	movgt	r5, #0
 800439c:	2501      	movle	r5, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	bfb8      	it	lt
 80043a2:	2500      	movlt	r5, #0
 80043a4:	2d00      	cmp	r5, #0
 80043a6:	f000 80c1 	beq.w	800452c <_dtoa_r+0x41c>
 80043aa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80043ac:	4b5e      	ldr	r3, [pc, #376]	; (8004528 <_dtoa_r+0x418>)
 80043ae:	0fe5      	lsrs	r5, r4, #31
 80043b0:	9c05      	ldr	r4, [sp, #20]
 80043b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80043b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80043bc:	2c00      	cmp	r4, #0
 80043be:	bfcc      	ite	gt
 80043c0:	2500      	movgt	r5, #0
 80043c2:	f005 0501 	andle.w	r5, r5, #1
 80043c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043ca:	2d00      	cmp	r5, #0
 80043cc:	f040 81a8 	bne.w	8004720 <_dtoa_r+0x610>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4650      	mov	r0, sl
 80043d6:	4659      	mov	r1, fp
 80043d8:	f003 fa94 	bl	8007904 <__aeabi_ddiv>
 80043dc:	f003 fc02 	bl	8007be4 <__aeabi_d2iz>
 80043e0:	4606      	mov	r6, r0
 80043e2:	f003 f8ff 	bl	80075e4 <__aeabi_i2d>
 80043e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043ea:	f003 f961 	bl	80076b0 <__aeabi_dmul>
 80043ee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80043f0:	460b      	mov	r3, r1
 80043f2:	4602      	mov	r2, r0
 80043f4:	4659      	mov	r1, fp
 80043f6:	4650      	mov	r0, sl
 80043f8:	f002 ffa6 	bl	8007348 <__aeabi_dsub>
 80043fc:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8004400:	f804 3b01 	strb.w	r3, [r4], #1
 8004404:	9411      	str	r4, [sp, #68]	; 0x44
 8004406:	46a0      	mov	r8, r4
 8004408:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800440a:	2c01      	cmp	r4, #1
 800440c:	4682      	mov	sl, r0
 800440e:	468b      	mov	fp, r1
 8004410:	d04c      	beq.n	80044ac <_dtoa_r+0x39c>
 8004412:	2300      	movs	r3, #0
 8004414:	2200      	movs	r2, #0
 8004416:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800441a:	f003 f949 	bl	80076b0 <__aeabi_dmul>
 800441e:	2200      	movs	r2, #0
 8004420:	2300      	movs	r3, #0
 8004422:	4682      	mov	sl, r0
 8004424:	468b      	mov	fp, r1
 8004426:	2401      	movs	r4, #1
 8004428:	f003 fbaa 	bl	8007b80 <__aeabi_dcmpeq>
 800442c:	b100      	cbz	r0, 8004430 <_dtoa_r+0x320>
 800442e:	462c      	mov	r4, r5
 8004430:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004434:	f000 8575 	beq.w	8004f22 <_dtoa_r+0xe12>
 8004438:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800443a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800443c:	1ca5      	adds	r5, r4, #2
 800443e:	eb04 0900 	add.w	r9, r4, r0
 8004442:	e00d      	b.n	8004460 <_dtoa_r+0x350>
 8004444:	f003 f934 	bl	80076b0 <__aeabi_dmul>
 8004448:	2200      	movs	r2, #0
 800444a:	2300      	movs	r3, #0
 800444c:	4682      	mov	sl, r0
 800444e:	468b      	mov	fp, r1
 8004450:	f003 fb96 	bl	8007b80 <__aeabi_dcmpeq>
 8004454:	b100      	cbz	r0, 8004458 <_dtoa_r+0x348>
 8004456:	2400      	movs	r4, #0
 8004458:	f014 0fff 	tst.w	r4, #255	; 0xff
 800445c:	f000 8423 	beq.w	8004ca6 <_dtoa_r+0xb96>
 8004460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004464:	4650      	mov	r0, sl
 8004466:	4659      	mov	r1, fp
 8004468:	f003 fa4c 	bl	8007904 <__aeabi_ddiv>
 800446c:	f003 fbba 	bl	8007be4 <__aeabi_d2iz>
 8004470:	4606      	mov	r6, r0
 8004472:	f003 f8b7 	bl	80075e4 <__aeabi_i2d>
 8004476:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800447a:	f003 f919 	bl	80076b0 <__aeabi_dmul>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4650      	mov	r0, sl
 8004484:	4659      	mov	r1, fp
 8004486:	f002 ff5f 	bl	8007348 <__aeabi_dsub>
 800448a:	f106 0430 	add.w	r4, r6, #48	; 0x30
 800448e:	2300      	movs	r3, #0
 8004490:	2200      	movs	r2, #0
 8004492:	454d      	cmp	r5, r9
 8004494:	f805 4c01 	strb.w	r4, [r5, #-1]
 8004498:	46a8      	mov	r8, r5
 800449a:	4682      	mov	sl, r0
 800449c:	468b      	mov	fp, r1
 800449e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80044a2:	f04f 0401 	mov.w	r4, #1
 80044a6:	f105 0501 	add.w	r5, r5, #1
 80044aa:	d1cb      	bne.n	8004444 <_dtoa_r+0x334>
 80044ac:	4652      	mov	r2, sl
 80044ae:	465b      	mov	r3, fp
 80044b0:	4650      	mov	r0, sl
 80044b2:	4659      	mov	r1, fp
 80044b4:	f002 ff4a 	bl	800734c <__adddf3>
 80044b8:	4604      	mov	r4, r0
 80044ba:	460d      	mov	r5, r1
 80044bc:	4622      	mov	r2, r4
 80044be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044c2:	462b      	mov	r3, r5
 80044c4:	f003 fb66 	bl	8007b94 <__aeabi_dcmplt>
 80044c8:	b958      	cbnz	r0, 80044e2 <_dtoa_r+0x3d2>
 80044ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044ce:	4622      	mov	r2, r4
 80044d0:	462b      	mov	r3, r5
 80044d2:	f003 fb55 	bl	8007b80 <__aeabi_dcmpeq>
 80044d6:	2800      	cmp	r0, #0
 80044d8:	f000 83e5 	beq.w	8004ca6 <_dtoa_r+0xb96>
 80044dc:	07f3      	lsls	r3, r6, #31
 80044de:	f140 83e2 	bpl.w	8004ca6 <_dtoa_r+0xb96>
 80044e2:	9c05      	ldr	r4, [sp, #20]
 80044e4:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 80044e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80044ea:	9417      	str	r4, [sp, #92]	; 0x5c
 80044ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80044ee:	e003      	b.n	80044f8 <_dtoa_r+0x3e8>
 80044f0:	f818 6c02 	ldrb.w	r6, [r8, #-2]
 80044f4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80044f8:	2e39      	cmp	r6, #57	; 0x39
 80044fa:	4643      	mov	r3, r8
 80044fc:	f040 8489 	bne.w	8004e12 <_dtoa_r+0xd02>
 8004500:	4590      	cmp	r8, r2
 8004502:	d1f5      	bne.n	80044f0 <_dtoa_r+0x3e0>
 8004504:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8004506:	9309      	str	r3, [sp, #36]	; 0x24
 8004508:	3401      	adds	r4, #1
 800450a:	9405      	str	r4, [sp, #20]
 800450c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800450e:	2330      	movs	r3, #48	; 0x30
 8004510:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004514:	2231      	movs	r2, #49	; 0x31
 8004516:	4623      	mov	r3, r4
 8004518:	f803 2c01 	strb.w	r2, [r3, #-1]
 800451c:	e0b0      	b.n	8004680 <_dtoa_r+0x570>
 800451e:	1ceb      	adds	r3, r5, #3
 8004520:	e6e8      	b.n	80042f4 <_dtoa_r+0x1e4>
 8004522:	2501      	movs	r5, #1
 8004524:	9514      	str	r5, [sp, #80]	; 0x50
 8004526:	e6af      	b.n	8004288 <_dtoa_r+0x178>
 8004528:	08007ef0 	.word	0x08007ef0
 800452c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800452e:	2c00      	cmp	r4, #0
 8004530:	f040 80d1 	bne.w	80046d6 <_dtoa_r+0x5c6>
 8004534:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004536:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004538:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800453a:	9306      	str	r3, [sp, #24]
 800453c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800453e:	2800      	cmp	r0, #0
 8004540:	bfc8      	it	gt
 8004542:	2c00      	cmpgt	r4, #0
 8004544:	dd09      	ble.n	800455a <_dtoa_r+0x44a>
 8004546:	4603      	mov	r3, r0
 8004548:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800454a:	42a3      	cmp	r3, r4
 800454c:	bfa8      	it	ge
 800454e:	4623      	movge	r3, r4
 8004550:	1ac9      	subs	r1, r1, r3
 8004552:	1ac0      	subs	r0, r0, r3
 8004554:	910f      	str	r1, [sp, #60]	; 0x3c
 8004556:	1ae4      	subs	r4, r4, r3
 8004558:	900b      	str	r0, [sp, #44]	; 0x2c
 800455a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800455c:	2a00      	cmp	r2, #0
 800455e:	dd1a      	ble.n	8004596 <_dtoa_r+0x486>
 8004560:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 841d 	beq.w	8004da2 <_dtoa_r+0xc92>
 8004568:	2d00      	cmp	r5, #0
 800456a:	dd10      	ble.n	800458e <_dtoa_r+0x47e>
 800456c:	9906      	ldr	r1, [sp, #24]
 800456e:	462a      	mov	r2, r5
 8004570:	4638      	mov	r0, r7
 8004572:	f001 fb39 	bl	8005be8 <__pow5mult>
 8004576:	9006      	str	r0, [sp, #24]
 8004578:	9906      	ldr	r1, [sp, #24]
 800457a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800457c:	4638      	mov	r0, r7
 800457e:	f001 fa9b 	bl	8005ab8 <__multiply>
 8004582:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004584:	4606      	mov	r6, r0
 8004586:	4638      	mov	r0, r7
 8004588:	f001 f9a6 	bl	80058d8 <_Bfree>
 800458c:	960a      	str	r6, [sp, #40]	; 0x28
 800458e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004590:	1b42      	subs	r2, r0, r5
 8004592:	f040 8429 	bne.w	8004de8 <_dtoa_r+0xcd8>
 8004596:	2101      	movs	r1, #1
 8004598:	4638      	mov	r0, r7
 800459a:	f001 fa83 	bl	8005aa4 <__i2b>
 800459e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80045a0:	2d00      	cmp	r5, #0
 80045a2:	4606      	mov	r6, r0
 80045a4:	dd05      	ble.n	80045b2 <_dtoa_r+0x4a2>
 80045a6:	4631      	mov	r1, r6
 80045a8:	4638      	mov	r0, r7
 80045aa:	462a      	mov	r2, r5
 80045ac:	f001 fb1c 	bl	8005be8 <__pow5mult>
 80045b0:	4606      	mov	r6, r0
 80045b2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80045b4:	2d01      	cmp	r5, #1
 80045b6:	f340 820f 	ble.w	80049d8 <_dtoa_r+0x8c8>
 80045ba:	2500      	movs	r5, #0
 80045bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80045be:	2301      	movs	r3, #1
 80045c0:	2800      	cmp	r0, #0
 80045c2:	f040 838c 	bne.w	8004cde <_dtoa_r+0xbce>
 80045c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045c8:	185b      	adds	r3, r3, r1
 80045ca:	f013 031f 	ands.w	r3, r3, #31
 80045ce:	f000 82cb 	beq.w	8004b68 <_dtoa_r+0xa58>
 80045d2:	f1c3 0220 	rsb	r2, r3, #32
 80045d6:	2a04      	cmp	r2, #4
 80045d8:	f340 84bf 	ble.w	8004f5a <_dtoa_r+0xe4a>
 80045dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045de:	f1c3 031c 	rsb	r3, r3, #28
 80045e2:	18d2      	adds	r2, r2, r3
 80045e4:	18c9      	adds	r1, r1, r3
 80045e6:	920f      	str	r2, [sp, #60]	; 0x3c
 80045e8:	18e4      	adds	r4, r4, r3
 80045ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80045ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045ee:	2a00      	cmp	r2, #0
 80045f0:	dd04      	ble.n	80045fc <_dtoa_r+0x4ec>
 80045f2:	4638      	mov	r0, r7
 80045f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80045f6:	f001 fb43 	bl	8005c80 <__lshift>
 80045fa:	900a      	str	r0, [sp, #40]	; 0x28
 80045fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	dd05      	ble.n	800460e <_dtoa_r+0x4fe>
 8004602:	4631      	mov	r1, r6
 8004604:	4638      	mov	r0, r7
 8004606:	461a      	mov	r2, r3
 8004608:	f001 fb3a 	bl	8005c80 <__lshift>
 800460c:	4606      	mov	r6, r0
 800460e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004610:	2800      	cmp	r0, #0
 8004612:	f040 834c 	bne.w	8004cae <_dtoa_r+0xb9e>
 8004616:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004618:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800461a:	2900      	cmp	r1, #0
 800461c:	bfcc      	ite	gt
 800461e:	2300      	movgt	r3, #0
 8004620:	2301      	movle	r3, #1
 8004622:	2a02      	cmp	r2, #2
 8004624:	bfd8      	it	le
 8004626:	2300      	movle	r3, #0
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 8226 	beq.w	8004a7a <_dtoa_r+0x96a>
 800462e:	2900      	cmp	r1, #0
 8004630:	f040 808a 	bne.w	8004748 <_dtoa_r+0x638>
 8004634:	4631      	mov	r1, r6
 8004636:	2205      	movs	r2, #5
 8004638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800463a:	4638      	mov	r0, r7
 800463c:	f001 f956 	bl	80058ec <__multadd>
 8004640:	4606      	mov	r6, r0
 8004642:	4631      	mov	r1, r6
 8004644:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004646:	f001 fb7b 	bl	8005d40 <__mcmp>
 800464a:	2800      	cmp	r0, #0
 800464c:	dd7c      	ble.n	8004748 <_dtoa_r+0x638>
 800464e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004650:	9c05      	ldr	r4, [sp, #20]
 8004652:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004654:	2231      	movs	r2, #49	; 0x31
 8004656:	f803 2b01 	strb.w	r2, [r3], #1
 800465a:	3401      	adds	r4, #1
 800465c:	9405      	str	r4, [sp, #20]
 800465e:	9309      	str	r3, [sp, #36]	; 0x24
 8004660:	2400      	movs	r4, #0
 8004662:	4638      	mov	r0, r7
 8004664:	4631      	mov	r1, r6
 8004666:	f001 f937 	bl	80058d8 <_Bfree>
 800466a:	9806      	ldr	r0, [sp, #24]
 800466c:	b140      	cbz	r0, 8004680 <_dtoa_r+0x570>
 800466e:	4284      	cmp	r4, r0
 8004670:	bf18      	it	ne
 8004672:	2c00      	cmpne	r4, #0
 8004674:	f040 8273 	bne.w	8004b5e <_dtoa_r+0xa4e>
 8004678:	4638      	mov	r0, r7
 800467a:	9906      	ldr	r1, [sp, #24]
 800467c:	f001 f92c 	bl	80058d8 <_Bfree>
 8004680:	4638      	mov	r0, r7
 8004682:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004684:	f001 f928 	bl	80058d8 <_Bfree>
 8004688:	9c05      	ldr	r4, [sp, #20]
 800468a:	1c63      	adds	r3, r4, #1
 800468c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800468e:	2200      	movs	r2, #0
 8004690:	7022      	strb	r2, [r4, #0]
 8004692:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004698:	2c00      	cmp	r4, #0
 800469a:	f43f ad71 	beq.w	8004180 <_dtoa_r+0x70>
 800469e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046a0:	6020      	str	r0, [r4, #0]
 80046a2:	e56d      	b.n	8004180 <_dtoa_r+0x70>
 80046a4:	9c05      	ldr	r4, [sp, #20]
 80046a6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80046a8:	1b2d      	subs	r5, r5, r4
 80046aa:	950f      	str	r5, [sp, #60]	; 0x3c
 80046ac:	4265      	negs	r5, r4
 80046ae:	2400      	movs	r4, #0
 80046b0:	9510      	str	r5, [sp, #64]	; 0x40
 80046b2:	9413      	str	r4, [sp, #76]	; 0x4c
 80046b4:	e5f9      	b.n	80042aa <_dtoa_r+0x19a>
 80046b6:	4264      	negs	r4, r4
 80046b8:	940f      	str	r4, [sp, #60]	; 0x3c
 80046ba:	2400      	movs	r4, #0
 80046bc:	940b      	str	r4, [sp, #44]	; 0x2c
 80046be:	e5ea      	b.n	8004296 <_dtoa_r+0x186>
 80046c0:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 80046c4:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 80046c8:	1b00      	subs	r0, r0, r4
 80046ca:	fa0a f000 	lsl.w	r0, sl, r0
 80046ce:	e582      	b.n	80041d6 <_dtoa_r+0xc6>
 80046d0:	2500      	movs	r5, #0
 80046d2:	9514      	str	r5, [sp, #80]	; 0x50
 80046d4:	e5d8      	b.n	8004288 <_dtoa_r+0x178>
 80046d6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80046d8:	2c01      	cmp	r4, #1
 80046da:	f340 838f 	ble.w	8004dfc <_dtoa_r+0xcec>
 80046de:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80046e0:	1e62      	subs	r2, r4, #1
 80046e2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80046e4:	4294      	cmp	r4, r2
 80046e6:	bfbf      	itttt	lt
 80046e8:	9c10      	ldrlt	r4, [sp, #64]	; 0x40
 80046ea:	9210      	strlt	r2, [sp, #64]	; 0x40
 80046ec:	ebc4 0302 	rsblt	r3, r4, r2
 80046f0:	9c13      	ldrlt	r4, [sp, #76]	; 0x4c
 80046f2:	bfb6      	itet	lt
 80046f4:	18e4      	addlt	r4, r4, r3
 80046f6:	ebc2 0504 	rsbge	r5, r2, r4
 80046fa:	9413      	strlt	r4, [sp, #76]	; 0x4c
 80046fc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80046fe:	2c00      	cmp	r4, #0
 8004700:	f2c0 838f 	blt.w	8004e22 <_dtoa_r+0xd12>
 8004704:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004708:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800470a:	18d2      	adds	r2, r2, r3
 800470c:	920f      	str	r2, [sp, #60]	; 0x3c
 800470e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004710:	4638      	mov	r0, r7
 8004712:	18d2      	adds	r2, r2, r3
 8004714:	2101      	movs	r1, #1
 8004716:	920b      	str	r2, [sp, #44]	; 0x2c
 8004718:	f001 f9c4 	bl	8005aa4 <__i2b>
 800471c:	9006      	str	r0, [sp, #24]
 800471e:	e70d      	b.n	800453c <_dtoa_r+0x42c>
 8004720:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004722:	2d00      	cmp	r5, #0
 8004724:	f040 8367 	bne.w	8004df6 <_dtoa_r+0xce6>
 8004728:	2300      	movs	r3, #0
 800472a:	2200      	movs	r2, #0
 800472c:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8004730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004734:	f002 ffbc 	bl	80076b0 <__aeabi_dmul>
 8004738:	4652      	mov	r2, sl
 800473a:	465b      	mov	r3, fp
 800473c:	f003 fa3e 	bl	8007bbc <__aeabi_dcmpge>
 8004740:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8004742:	9606      	str	r6, [sp, #24]
 8004744:	2800      	cmp	r0, #0
 8004746:	d082      	beq.n	800464e <_dtoa_r+0x53e>
 8004748:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800474a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800474c:	43e4      	mvns	r4, r4
 800474e:	9405      	str	r4, [sp, #20]
 8004750:	2400      	movs	r4, #0
 8004752:	e786      	b.n	8004662 <_dtoa_r+0x552>
 8004754:	2501      	movs	r5, #1
 8004756:	9512      	str	r5, [sp, #72]	; 0x48
 8004758:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800475a:	2d00      	cmp	r5, #0
 800475c:	f340 82d3 	ble.w	8004d06 <_dtoa_r+0xbf6>
 8004760:	46a9      	mov	r9, r5
 8004762:	2d0e      	cmp	r5, #14
 8004764:	bf8c      	ite	hi
 8004766:	2400      	movhi	r4, #0
 8004768:	f004 0401 	andls.w	r4, r4, #1
 800476c:	9515      	str	r5, [sp, #84]	; 0x54
 800476e:	950e      	str	r5, [sp, #56]	; 0x38
 8004770:	2100      	movs	r1, #0
 8004772:	f1b9 0f17 	cmp.w	r9, #23
 8004776:	6479      	str	r1, [r7, #68]	; 0x44
 8004778:	d909      	bls.n	800478e <_dtoa_r+0x67e>
 800477a:	2201      	movs	r2, #1
 800477c:	2304      	movs	r3, #4
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	f103 0014 	add.w	r0, r3, #20
 8004784:	4611      	mov	r1, r2
 8004786:	3201      	adds	r2, #1
 8004788:	4548      	cmp	r0, r9
 800478a:	d9f8      	bls.n	800477e <_dtoa_r+0x66e>
 800478c:	6479      	str	r1, [r7, #68]	; 0x44
 800478e:	4638      	mov	r0, r7
 8004790:	f001 f87c 	bl	800588c <_Balloc>
 8004794:	9009      	str	r0, [sp, #36]	; 0x24
 8004796:	6438      	str	r0, [r7, #64]	; 0x40
 8004798:	2c00      	cmp	r4, #0
 800479a:	f43f adfa 	beq.w	8004392 <_dtoa_r+0x282>
 800479e:	9c05      	ldr	r4, [sp, #20]
 80047a0:	4652      	mov	r2, sl
 80047a2:	465b      	mov	r3, fp
 80047a4:	2c00      	cmp	r4, #0
 80047a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80047aa:	f340 81f8 	ble.w	8004b9e <_dtoa_r+0xa8e>
 80047ae:	4b97      	ldr	r3, [pc, #604]	; (8004a0c <_dtoa_r+0x8fc>)
 80047b0:	f004 020f 	and.w	r2, r4, #15
 80047b4:	1124      	asrs	r4, r4, #4
 80047b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047ba:	2602      	movs	r6, #2
 80047bc:	06e2      	lsls	r2, r4, #27
 80047be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80047c2:	d50b      	bpl.n	80047dc <_dtoa_r+0x6cc>
 80047c4:	4b92      	ldr	r3, [pc, #584]	; (8004a10 <_dtoa_r+0x900>)
 80047c6:	4650      	mov	r0, sl
 80047c8:	4659      	mov	r1, fp
 80047ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80047ce:	f003 f899 	bl	8007904 <__aeabi_ddiv>
 80047d2:	f004 040f 	and.w	r4, r4, #15
 80047d6:	4682      	mov	sl, r0
 80047d8:	468b      	mov	fp, r1
 80047da:	2603      	movs	r6, #3
 80047dc:	b174      	cbz	r4, 80047fc <_dtoa_r+0x6ec>
 80047de:	4d8c      	ldr	r5, [pc, #560]	; (8004a10 <_dtoa_r+0x900>)
 80047e0:	4640      	mov	r0, r8
 80047e2:	4649      	mov	r1, r9
 80047e4:	07e3      	lsls	r3, r4, #31
 80047e6:	d504      	bpl.n	80047f2 <_dtoa_r+0x6e2>
 80047e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80047ec:	f002 ff60 	bl	80076b0 <__aeabi_dmul>
 80047f0:	3601      	adds	r6, #1
 80047f2:	3508      	adds	r5, #8
 80047f4:	1064      	asrs	r4, r4, #1
 80047f6:	d1f5      	bne.n	80047e4 <_dtoa_r+0x6d4>
 80047f8:	4680      	mov	r8, r0
 80047fa:	4689      	mov	r9, r1
 80047fc:	4650      	mov	r0, sl
 80047fe:	4659      	mov	r1, fp
 8004800:	4642      	mov	r2, r8
 8004802:	464b      	mov	r3, r9
 8004804:	f003 f87e 	bl	8007904 <__aeabi_ddiv>
 8004808:	4682      	mov	sl, r0
 800480a:	468b      	mov	fp, r1
 800480c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800480e:	2c00      	cmp	r4, #0
 8004810:	f000 8100 	beq.w	8004a14 <_dtoa_r+0x904>
 8004814:	2300      	movs	r3, #0
 8004816:	4650      	mov	r0, sl
 8004818:	4659      	mov	r1, fp
 800481a:	2200      	movs	r2, #0
 800481c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8004820:	2401      	movs	r4, #1
 8004822:	f003 f9b7 	bl	8007b94 <__aeabi_dcmplt>
 8004826:	b900      	cbnz	r0, 800482a <_dtoa_r+0x71a>
 8004828:	2400      	movs	r4, #0
 800482a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800482c:	2d00      	cmp	r5, #0
 800482e:	bfd4      	ite	le
 8004830:	2400      	movle	r4, #0
 8004832:	f004 0401 	andgt.w	r4, r4, #1
 8004836:	2c00      	cmp	r4, #0
 8004838:	f000 80ec 	beq.w	8004a14 <_dtoa_r+0x904>
 800483c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800483e:	2c00      	cmp	r4, #0
 8004840:	f340 819b 	ble.w	8004b7a <_dtoa_r+0xa6a>
 8004844:	2300      	movs	r3, #0
 8004846:	2200      	movs	r2, #0
 8004848:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800484c:	4650      	mov	r0, sl
 800484e:	4659      	mov	r1, fp
 8004850:	f002 ff2e 	bl	80076b0 <__aeabi_dmul>
 8004854:	4682      	mov	sl, r0
 8004856:	1c70      	adds	r0, r6, #1
 8004858:	468b      	mov	fp, r1
 800485a:	f002 fec3 	bl	80075e4 <__aeabi_i2d>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4650      	mov	r0, sl
 8004864:	4659      	mov	r1, fp
 8004866:	f002 ff23 	bl	80076b0 <__aeabi_dmul>
 800486a:	2300      	movs	r3, #0
 800486c:	2200      	movs	r2, #0
 800486e:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8004872:	f002 fd6b 	bl	800734c <__adddf3>
 8004876:	9d05      	ldr	r5, [sp, #20]
 8004878:	3d01      	subs	r5, #1
 800487a:	9517      	str	r5, [sp, #92]	; 0x5c
 800487c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800487e:	4680      	mov	r8, r0
 8004880:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8004884:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004886:	2c00      	cmp	r4, #0
 8004888:	f000 81b0 	beq.w	8004bec <_dtoa_r+0xadc>
 800488c:	4b5f      	ldr	r3, [pc, #380]	; (8004a0c <_dtoa_r+0x8fc>)
 800488e:	2100      	movs	r1, #0
 8004890:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004894:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004898:	2000      	movs	r0, #0
 800489a:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800489e:	f003 f831 	bl	8007904 <__aeabi_ddiv>
 80048a2:	4642      	mov	r2, r8
 80048a4:	464b      	mov	r3, r9
 80048a6:	f002 fd4f 	bl	8007348 <__aeabi_dsub>
 80048aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80048ae:	4659      	mov	r1, fp
 80048b0:	4650      	mov	r0, sl
 80048b2:	f003 f997 	bl	8007be4 <__aeabi_d2iz>
 80048b6:	4606      	mov	r6, r0
 80048b8:	f002 fe94 	bl	80075e4 <__aeabi_i2d>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4650      	mov	r0, sl
 80048c2:	4659      	mov	r1, fp
 80048c4:	f002 fd40 	bl	8007348 <__aeabi_dsub>
 80048c8:	3630      	adds	r6, #48	; 0x30
 80048ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80048cc:	b2f6      	uxtb	r6, r6
 80048ce:	4682      	mov	sl, r0
 80048d0:	468b      	mov	fp, r1
 80048d2:	f804 6b01 	strb.w	r6, [r4], #1
 80048d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048da:	4652      	mov	r2, sl
 80048dc:	465b      	mov	r3, fp
 80048de:	9411      	str	r4, [sp, #68]	; 0x44
 80048e0:	46a0      	mov	r8, r4
 80048e2:	f003 f975 	bl	8007bd0 <__aeabi_dcmpgt>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	f040 8325 	bne.w	8004f36 <_dtoa_r+0xe26>
 80048ec:	2100      	movs	r1, #0
 80048ee:	4652      	mov	r2, sl
 80048f0:	465b      	mov	r3, fp
 80048f2:	2000      	movs	r0, #0
 80048f4:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80048f8:	f002 fd26 	bl	8007348 <__aeabi_dsub>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004904:	f003 f964 	bl	8007bd0 <__aeabi_dcmpgt>
 8004908:	2800      	cmp	r0, #0
 800490a:	f040 827f 	bne.w	8004e0c <_dtoa_r+0xcfc>
 800490e:	2d01      	cmp	r5, #1
 8004910:	f340 8133 	ble.w	8004b7a <_dtoa_r+0xa6a>
 8004914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004916:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8004918:	1945      	adds	r5, r0, r5
 800491a:	e00f      	b.n	800493c <_dtoa_r+0x82c>
 800491c:	2100      	movs	r1, #0
 800491e:	2000      	movs	r0, #0
 8004920:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8004924:	f002 fd10 	bl	8007348 <__aeabi_dsub>
 8004928:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800492c:	f003 f932 	bl	8007b94 <__aeabi_dcmplt>
 8004930:	2800      	cmp	r0, #0
 8004932:	f040 826b 	bne.w	8004e0c <_dtoa_r+0xcfc>
 8004936:	42ac      	cmp	r4, r5
 8004938:	f000 811f 	beq.w	8004b7a <_dtoa_r+0xa6a>
 800493c:	2300      	movs	r3, #0
 800493e:	2200      	movs	r2, #0
 8004940:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004944:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004948:	f002 feb2 	bl	80076b0 <__aeabi_dmul>
 800494c:	2300      	movs	r3, #0
 800494e:	2200      	movs	r2, #0
 8004950:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004954:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004958:	4650      	mov	r0, sl
 800495a:	4659      	mov	r1, fp
 800495c:	f002 fea8 	bl	80076b0 <__aeabi_dmul>
 8004960:	4680      	mov	r8, r0
 8004962:	4689      	mov	r9, r1
 8004964:	f003 f93e 	bl	8007be4 <__aeabi_d2iz>
 8004968:	4606      	mov	r6, r0
 800496a:	f002 fe3b 	bl	80075e4 <__aeabi_i2d>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4640      	mov	r0, r8
 8004974:	4649      	mov	r1, r9
 8004976:	f002 fce7 	bl	8007348 <__aeabi_dsub>
 800497a:	3630      	adds	r6, #48	; 0x30
 800497c:	b2f6      	uxtb	r6, r6
 800497e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004982:	f804 6b01 	strb.w	r6, [r4], #1
 8004986:	4682      	mov	sl, r0
 8004988:	468b      	mov	fp, r1
 800498a:	f003 f903 	bl	8007b94 <__aeabi_dcmplt>
 800498e:	46a0      	mov	r8, r4
 8004990:	4652      	mov	r2, sl
 8004992:	465b      	mov	r3, fp
 8004994:	2800      	cmp	r0, #0
 8004996:	d0c1      	beq.n	800491c <_dtoa_r+0x80c>
 8004998:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800499a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800499c:	9005      	str	r0, [sp, #20]
 800499e:	9409      	str	r4, [sp, #36]	; 0x24
 80049a0:	e66e      	b.n	8004680 <_dtoa_r+0x570>
 80049a2:	2500      	movs	r5, #0
 80049a4:	9512      	str	r5, [sp, #72]	; 0x48
 80049a6:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80049a8:	9805      	ldr	r0, [sp, #20]
 80049aa:	182d      	adds	r5, r5, r0
 80049ac:	f105 0901 	add.w	r9, r5, #1
 80049b0:	f1b9 0f00 	cmp.w	r9, #0
 80049b4:	9515      	str	r5, [sp, #84]	; 0x54
 80049b6:	f340 819b 	ble.w	8004cf0 <_dtoa_r+0xbe0>
 80049ba:	f1b9 0f0e 	cmp.w	r9, #14
 80049be:	bf8c      	ite	hi
 80049c0:	2400      	movhi	r4, #0
 80049c2:	f004 0401 	andls.w	r4, r4, #1
 80049c6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80049ca:	e6d1      	b.n	8004770 <_dtoa_r+0x660>
 80049cc:	2500      	movs	r5, #0
 80049ce:	9512      	str	r5, [sp, #72]	; 0x48
 80049d0:	e6c2      	b.n	8004758 <_dtoa_r+0x648>
 80049d2:	2501      	movs	r5, #1
 80049d4:	9512      	str	r5, [sp, #72]	; 0x48
 80049d6:	e7e6      	b.n	80049a6 <_dtoa_r+0x896>
 80049d8:	f1ba 0f00 	cmp.w	sl, #0
 80049dc:	f47f aded 	bne.w	80045ba <_dtoa_r+0x4aa>
 80049e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80049e4:	4655      	mov	r5, sl
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f47f ade8 	bne.w	80045bc <_dtoa_r+0x4ac>
 80049ec:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80049f0:	ea0b 0303 	and.w	r3, fp, r3
 80049f4:	461d      	mov	r5, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f43f ade0 	beq.w	80045bc <_dtoa_r+0x4ac>
 80049fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80049fe:	3501      	adds	r5, #1
 8004a00:	950f      	str	r5, [sp, #60]	; 0x3c
 8004a02:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004a04:	3501      	adds	r5, #1
 8004a06:	950b      	str	r5, [sp, #44]	; 0x2c
 8004a08:	2501      	movs	r5, #1
 8004a0a:	e5d7      	b.n	80045bc <_dtoa_r+0x4ac>
 8004a0c:	08007ef0 	.word	0x08007ef0
 8004a10:	08007fe0 	.word	0x08007fe0
 8004a14:	4630      	mov	r0, r6
 8004a16:	f002 fde5 	bl	80075e4 <__aeabi_i2d>
 8004a1a:	4652      	mov	r2, sl
 8004a1c:	465b      	mov	r3, fp
 8004a1e:	f002 fe47 	bl	80076b0 <__aeabi_dmul>
 8004a22:	2300      	movs	r3, #0
 8004a24:	2200      	movs	r2, #0
 8004a26:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8004a2a:	f002 fc8f 	bl	800734c <__adddf3>
 8004a2e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004a30:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 8004a34:	4680      	mov	r8, r0
 8004a36:	46a1      	mov	r9, r4
 8004a38:	2d00      	cmp	r5, #0
 8004a3a:	f040 80ac 	bne.w	8004b96 <_dtoa_r+0xa86>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	2200      	movs	r2, #0
 8004a42:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8004a46:	4650      	mov	r0, sl
 8004a48:	4659      	mov	r1, fp
 8004a4a:	f002 fc7d 	bl	8007348 <__aeabi_dsub>
 8004a4e:	4642      	mov	r2, r8
 8004a50:	4623      	mov	r3, r4
 8004a52:	4682      	mov	sl, r0
 8004a54:	468b      	mov	fp, r1
 8004a56:	f003 f8bb 	bl	8007bd0 <__aeabi_dcmpgt>
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	f040 80c3 	bne.w	8004be6 <_dtoa_r+0xad6>
 8004a60:	4642      	mov	r2, r8
 8004a62:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8004a66:	4650      	mov	r0, sl
 8004a68:	4659      	mov	r1, fp
 8004a6a:	f003 f893 	bl	8007b94 <__aeabi_dcmplt>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	f000 8083 	beq.w	8004b7a <_dtoa_r+0xa6a>
 8004a74:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8004a76:	9606      	str	r6, [sp, #24]
 8004a78:	e666      	b.n	8004748 <_dtoa_r+0x638>
 8004a7a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	f000 8147 	beq.w	8004d10 <_dtoa_r+0xc00>
 8004a82:	2c00      	cmp	r4, #0
 8004a84:	dd05      	ble.n	8004a92 <_dtoa_r+0x982>
 8004a86:	4638      	mov	r0, r7
 8004a88:	9906      	ldr	r1, [sp, #24]
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	f001 f8f8 	bl	8005c80 <__lshift>
 8004a90:	9006      	str	r0, [sp, #24]
 8004a92:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004a96:	2d00      	cmp	r5, #0
 8004a98:	f040 8201 	bne.w	8004e9e <_dtoa_r+0xd8e>
 8004a9c:	f00a 0001 	and.w	r0, sl, #1
 8004aa0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004aa2:	9c06      	ldr	r4, [sp, #24]
 8004aa4:	900b      	str	r0, [sp, #44]	; 0x2c
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004aaa:	f7ff faa1 	bl	8003ff0 <quorem>
 8004aae:	4621      	mov	r1, r4
 8004ab0:	9008      	str	r0, [sp, #32]
 8004ab2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004ab4:	f001 f944 	bl	8005d40 <__mcmp>
 8004ab8:	4642      	mov	r2, r8
 8004aba:	4681      	mov	r9, r0
 8004abc:	4631      	mov	r1, r6
 8004abe:	4638      	mov	r0, r7
 8004ac0:	f001 f95e 	bl	8005d80 <__mdiff>
 8004ac4:	9a08      	ldr	r2, [sp, #32]
 8004ac6:	68c3      	ldr	r3, [r0, #12]
 8004ac8:	3230      	adds	r2, #48	; 0x30
 8004aca:	4682      	mov	sl, r0
 8004acc:	9206      	str	r2, [sp, #24]
 8004ace:	f04f 0b01 	mov.w	fp, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d03d      	beq.n	8004b52 <_dtoa_r+0xa42>
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	4651      	mov	r1, sl
 8004ada:	f000 fefd 	bl	80058d8 <_Bfree>
 8004ade:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ae0:	ea5b 0303 	orrs.w	r3, fp, r3
 8004ae4:	d103      	bne.n	8004aee <_dtoa_r+0x9de>
 8004ae6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	f000 8211 	beq.w	8004f10 <_dtoa_r+0xe00>
 8004aee:	f1b9 0f00 	cmp.w	r9, #0
 8004af2:	f2c0 819f 	blt.w	8004e34 <_dtoa_r+0xd24>
 8004af6:	9826      	ldr	r0, [sp, #152]	; 0x98
 8004af8:	ea59 0000 	orrs.w	r0, r9, r0
 8004afc:	d103      	bne.n	8004b06 <_dtoa_r+0x9f6>
 8004afe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b00:	2900      	cmp	r1, #0
 8004b02:	f000 8197 	beq.w	8004e34 <_dtoa_r+0xd24>
 8004b06:	f1bb 0f00 	cmp.w	fp, #0
 8004b0a:	f300 81ea 	bgt.w	8004ee2 <_dtoa_r+0xdd2>
 8004b0e:	9a06      	ldr	r2, [sp, #24]
 8004b10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b12:	f805 2b01 	strb.w	r2, [r5], #1
 8004b16:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004b18:	1a2b      	subs	r3, r5, r0
 8004b1a:	428b      	cmp	r3, r1
 8004b1c:	46aa      	mov	sl, r5
 8004b1e:	f000 81db 	beq.w	8004ed8 <_dtoa_r+0xdc8>
 8004b22:	220a      	movs	r2, #10
 8004b24:	2300      	movs	r3, #0
 8004b26:	4638      	mov	r0, r7
 8004b28:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004b2a:	f000 fedf 	bl	80058ec <__multadd>
 8004b2e:	4544      	cmp	r4, r8
 8004b30:	900a      	str	r0, [sp, #40]	; 0x28
 8004b32:	d027      	beq.n	8004b84 <_dtoa_r+0xa74>
 8004b34:	4621      	mov	r1, r4
 8004b36:	220a      	movs	r2, #10
 8004b38:	2300      	movs	r3, #0
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	f000 fed6 	bl	80058ec <__multadd>
 8004b40:	4641      	mov	r1, r8
 8004b42:	4604      	mov	r4, r0
 8004b44:	220a      	movs	r2, #10
 8004b46:	4638      	mov	r0, r7
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f000 fecf 	bl	80058ec <__multadd>
 8004b4e:	4680      	mov	r8, r0
 8004b50:	e7a9      	b.n	8004aa6 <_dtoa_r+0x996>
 8004b52:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004b54:	4651      	mov	r1, sl
 8004b56:	f001 f8f3 	bl	8005d40 <__mcmp>
 8004b5a:	4683      	mov	fp, r0
 8004b5c:	e7bb      	b.n	8004ad6 <_dtoa_r+0x9c6>
 8004b5e:	4638      	mov	r0, r7
 8004b60:	4621      	mov	r1, r4
 8004b62:	f000 feb9 	bl	80058d8 <_Bfree>
 8004b66:	e587      	b.n	8004678 <_dtoa_r+0x568>
 8004b68:	231c      	movs	r3, #28
 8004b6a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004b6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b6e:	18c0      	adds	r0, r0, r3
 8004b70:	18c9      	adds	r1, r1, r3
 8004b72:	900f      	str	r0, [sp, #60]	; 0x3c
 8004b74:	18e4      	adds	r4, r4, r3
 8004b76:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b78:	e538      	b.n	80045ec <_dtoa_r+0x4dc>
 8004b7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b7e:	4682      	mov	sl, r0
 8004b80:	468b      	mov	fp, r1
 8004b82:	e406      	b.n	8004392 <_dtoa_r+0x282>
 8004b84:	4621      	mov	r1, r4
 8004b86:	4638      	mov	r0, r7
 8004b88:	220a      	movs	r2, #10
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f000 feae 	bl	80058ec <__multadd>
 8004b90:	4604      	mov	r4, r0
 8004b92:	4680      	mov	r8, r0
 8004b94:	e787      	b.n	8004aa6 <_dtoa_r+0x996>
 8004b96:	9c05      	ldr	r4, [sp, #20]
 8004b98:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004b9a:	9417      	str	r4, [sp, #92]	; 0x5c
 8004b9c:	e672      	b.n	8004884 <_dtoa_r+0x774>
 8004b9e:	9d05      	ldr	r5, [sp, #20]
 8004ba0:	426c      	negs	r4, r5
 8004ba2:	2c00      	cmp	r4, #0
 8004ba4:	f000 80fb 	beq.w	8004d9e <_dtoa_r+0xc8e>
 8004ba8:	4ba0      	ldr	r3, [pc, #640]	; (8004e2c <_dtoa_r+0xd1c>)
 8004baa:	f004 020f 	and.w	r2, r4, #15
 8004bae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bb2:	4650      	mov	r0, sl
 8004bb4:	4659      	mov	r1, fp
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	f002 fd79 	bl	80076b0 <__aeabi_dmul>
 8004bbe:	1124      	asrs	r4, r4, #4
 8004bc0:	4682      	mov	sl, r0
 8004bc2:	468b      	mov	fp, r1
 8004bc4:	f000 80eb 	beq.w	8004d9e <_dtoa_r+0xc8e>
 8004bc8:	4d99      	ldr	r5, [pc, #612]	; (8004e30 <_dtoa_r+0xd20>)
 8004bca:	2602      	movs	r6, #2
 8004bcc:	07e2      	lsls	r2, r4, #31
 8004bce:	d504      	bpl.n	8004bda <_dtoa_r+0xaca>
 8004bd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004bd4:	f002 fd6c 	bl	80076b0 <__aeabi_dmul>
 8004bd8:	3601      	adds	r6, #1
 8004bda:	3508      	adds	r5, #8
 8004bdc:	1064      	asrs	r4, r4, #1
 8004bde:	d1f5      	bne.n	8004bcc <_dtoa_r+0xabc>
 8004be0:	4682      	mov	sl, r0
 8004be2:	468b      	mov	fp, r1
 8004be4:	e612      	b.n	800480c <_dtoa_r+0x6fc>
 8004be6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8004be8:	9606      	str	r6, [sp, #24]
 8004bea:	e530      	b.n	800464e <_dtoa_r+0x53e>
 8004bec:	498f      	ldr	r1, [pc, #572]	; (8004e2c <_dtoa_r+0xd1c>)
 8004bee:	1e6c      	subs	r4, r5, #1
 8004bf0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bfc:	9406      	str	r4, [sp, #24]
 8004bfe:	f002 fd57 	bl	80076b0 <__aeabi_dmul>
 8004c02:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8004c06:	4659      	mov	r1, fp
 8004c08:	4650      	mov	r0, sl
 8004c0a:	f002 ffeb 	bl	8007be4 <__aeabi_d2iz>
 8004c0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c10:	4604      	mov	r4, r0
 8004c12:	9111      	str	r1, [sp, #68]	; 0x44
 8004c14:	f002 fce6 	bl	80075e4 <__aeabi_i2d>
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	4659      	mov	r1, fp
 8004c1e:	4650      	mov	r0, sl
 8004c20:	f002 fb92 	bl	8007348 <__aeabi_dsub>
 8004c24:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8004c28:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8004c2a:	f804 3b01 	strb.w	r3, [r4], #1
 8004c2e:	2d01      	cmp	r5, #1
 8004c30:	4682      	mov	sl, r0
 8004c32:	468b      	mov	fp, r1
 8004c34:	9411      	str	r4, [sp, #68]	; 0x44
 8004c36:	46a0      	mov	r8, r4
 8004c38:	d020      	beq.n	8004c7c <_dtoa_r+0xb6c>
 8004c3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004c3c:	1e66      	subs	r6, r4, #1
 8004c3e:	1976      	adds	r6, r6, r5
 8004c40:	2300      	movs	r3, #0
 8004c42:	2200      	movs	r2, #0
 8004c44:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004c48:	f002 fd32 	bl	80076b0 <__aeabi_dmul>
 8004c4c:	4689      	mov	r9, r1
 8004c4e:	4680      	mov	r8, r0
 8004c50:	f002 ffc8 	bl	8007be4 <__aeabi_d2iz>
 8004c54:	4605      	mov	r5, r0
 8004c56:	f002 fcc5 	bl	80075e4 <__aeabi_i2d>
 8004c5a:	3530      	adds	r5, #48	; 0x30
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4640      	mov	r0, r8
 8004c62:	4649      	mov	r1, r9
 8004c64:	f002 fb70 	bl	8007348 <__aeabi_dsub>
 8004c68:	f804 5f01 	strb.w	r5, [r4, #1]!
 8004c6c:	42b4      	cmp	r4, r6
 8004c6e:	d1e7      	bne.n	8004c40 <_dtoa_r+0xb30>
 8004c70:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8004c72:	9c06      	ldr	r4, [sp, #24]
 8004c74:	4682      	mov	sl, r0
 8004c76:	468b      	mov	fp, r1
 8004c78:	eb05 0804 	add.w	r8, r5, r4
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8004c84:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8004c88:	f002 fb60 	bl	800734c <__adddf3>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4650      	mov	r0, sl
 8004c92:	4659      	mov	r1, fp
 8004c94:	f002 ff9c 	bl	8007bd0 <__aeabi_dcmpgt>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	f000 808a 	beq.w	8004db2 <_dtoa_r+0xca2>
 8004c9e:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8004ca2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004ca4:	e422      	b.n	80044ec <_dtoa_r+0x3dc>
 8004ca6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004ca8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8004cac:	e4e8      	b.n	8004680 <_dtoa_r+0x570>
 8004cae:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004cb0:	4631      	mov	r1, r6
 8004cb2:	f001 f845 	bl	8005d40 <__mcmp>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	f6bf acad 	bge.w	8004616 <_dtoa_r+0x506>
 8004cbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004cbe:	220a      	movs	r2, #10
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f000 fe12 	bl	80058ec <__multadd>
 8004cc8:	9905      	ldr	r1, [sp, #20]
 8004cca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ccc:	900a      	str	r0, [sp, #40]	; 0x28
 8004cce:	3901      	subs	r1, #1
 8004cd0:	9105      	str	r1, [sp, #20]
 8004cd2:	2a00      	cmp	r2, #0
 8004cd4:	f040 8136 	bne.w	8004f44 <_dtoa_r+0xe34>
 8004cd8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004cda:	900e      	str	r0, [sp, #56]	; 0x38
 8004cdc:	e49b      	b.n	8004616 <_dtoa_r+0x506>
 8004cde:	6933      	ldr	r3, [r6, #16]
 8004ce0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004ce4:	6918      	ldr	r0, [r3, #16]
 8004ce6:	f000 fe91 	bl	8005a0c <__hi0bits>
 8004cea:	f1c0 0320 	rsb	r3, r0, #32
 8004cee:	e46a      	b.n	80045c6 <_dtoa_r+0x4b6>
 8004cf0:	f1b9 0f0e 	cmp.w	r9, #14
 8004cf4:	bf8c      	ite	hi
 8004cf6:	2300      	movhi	r3, #0
 8004cf8:	2301      	movls	r3, #1
 8004cfa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004cfe:	2100      	movs	r1, #0
 8004d00:	6479      	str	r1, [r7, #68]	; 0x44
 8004d02:	401c      	ands	r4, r3
 8004d04:	e543      	b.n	800478e <_dtoa_r+0x67e>
 8004d06:	2301      	movs	r3, #1
 8004d08:	9315      	str	r3, [sp, #84]	; 0x54
 8004d0a:	930e      	str	r3, [sp, #56]	; 0x38
 8004d0c:	9327      	str	r3, [sp, #156]	; 0x9c
 8004d0e:	e7f6      	b.n	8004cfe <_dtoa_r+0xbee>
 8004d10:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004d12:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8004d16:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004d1a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004d1c:	e006      	b.n	8004d2c <_dtoa_r+0xc1c>
 8004d1e:	4651      	mov	r1, sl
 8004d20:	4638      	mov	r0, r7
 8004d22:	220a      	movs	r2, #10
 8004d24:	2300      	movs	r3, #0
 8004d26:	f000 fde1 	bl	80058ec <__multadd>
 8004d2a:	4682      	mov	sl, r0
 8004d2c:	4631      	mov	r1, r6
 8004d2e:	4650      	mov	r0, sl
 8004d30:	f7ff f95e 	bl	8003ff0 <quorem>
 8004d34:	3030      	adds	r0, #48	; 0x30
 8004d36:	5528      	strb	r0, [r5, r4]
 8004d38:	3401      	adds	r4, #1
 8004d3a:	45a0      	cmp	r8, r4
 8004d3c:	dcef      	bgt.n	8004d1e <_dtoa_r+0xc0e>
 8004d3e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004d40:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8004d44:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8004d48:	4681      	mov	r9, r0
 8004d4a:	2c01      	cmp	r4, #1
 8004d4c:	bfac      	ite	ge
 8004d4e:	44a2      	addge	sl, r4
 8004d50:	f10a 0a01 	addlt.w	sl, sl, #1
 8004d54:	2400      	movs	r4, #0
 8004d56:	2201      	movs	r2, #1
 8004d58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004d5a:	4638      	mov	r0, r7
 8004d5c:	f000 ff90 	bl	8005c80 <__lshift>
 8004d60:	4631      	mov	r1, r6
 8004d62:	900a      	str	r0, [sp, #40]	; 0x28
 8004d64:	f000 ffec 	bl	8005d40 <__mcmp>
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	f340 8082 	ble.w	8004e72 <_dtoa_r+0xd62>
 8004d6e:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8004d72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004d74:	1c6a      	adds	r2, r5, #1
 8004d76:	e003      	b.n	8004d80 <_dtoa_r+0xc70>
 8004d78:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 8004d7c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004d80:	2b39      	cmp	r3, #57	; 0x39
 8004d82:	f040 8084 	bne.w	8004e8e <_dtoa_r+0xd7e>
 8004d86:	4592      	cmp	sl, r2
 8004d88:	d1f6      	bne.n	8004d78 <_dtoa_r+0xc68>
 8004d8a:	9805      	ldr	r0, [sp, #20]
 8004d8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004d8e:	3001      	adds	r0, #1
 8004d90:	2331      	movs	r3, #49	; 0x31
 8004d92:	9005      	str	r0, [sp, #20]
 8004d94:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8004d98:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004d9c:	e461      	b.n	8004662 <_dtoa_r+0x552>
 8004d9e:	2602      	movs	r6, #2
 8004da0:	e534      	b.n	800480c <_dtoa_r+0x6fc>
 8004da2:	4638      	mov	r0, r7
 8004da4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004da6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004da8:	f000 ff1e 	bl	8005be8 <__pow5mult>
 8004dac:	900a      	str	r0, [sp, #40]	; 0x28
 8004dae:	f7ff bbf2 	b.w	8004596 <_dtoa_r+0x486>
 8004db2:	2100      	movs	r1, #0
 8004db4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8004db8:	2000      	movs	r0, #0
 8004dba:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8004dbe:	f002 fac3 	bl	8007348 <__aeabi_dsub>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4650      	mov	r0, sl
 8004dc8:	4659      	mov	r1, fp
 8004dca:	f002 fee3 	bl	8007b94 <__aeabi_dcmplt>
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	f43f aed3 	beq.w	8004b7a <_dtoa_r+0xa6a>
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
 8004dda:	2b30      	cmp	r3, #48	; 0x30
 8004ddc:	d0fa      	beq.n	8004dd4 <_dtoa_r+0xcc4>
 8004dde:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8004de0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004de2:	9405      	str	r4, [sp, #20]
 8004de4:	9209      	str	r2, [sp, #36]	; 0x24
 8004de6:	e44b      	b.n	8004680 <_dtoa_r+0x570>
 8004de8:	4638      	mov	r0, r7
 8004dea:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004dec:	f000 fefc 	bl	8005be8 <__pow5mult>
 8004df0:	900a      	str	r0, [sp, #40]	; 0x28
 8004df2:	f7ff bbd0 	b.w	8004596 <_dtoa_r+0x486>
 8004df6:	2600      	movs	r6, #0
 8004df8:	9606      	str	r6, [sp, #24]
 8004dfa:	e4a5      	b.n	8004748 <_dtoa_r+0x638>
 8004dfc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8004dfe:	2d00      	cmp	r5, #0
 8004e00:	d064      	beq.n	8004ecc <_dtoa_r+0xdbc>
 8004e02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004e06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004e08:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004e0a:	e47d      	b.n	8004708 <_dtoa_r+0x5f8>
 8004e0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004e0e:	f7ff bb6d 	b.w	80044ec <_dtoa_r+0x3dc>
 8004e12:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8004e14:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8004e18:	1c72      	adds	r2, r6, #1
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	9405      	str	r4, [sp, #20]
 8004e1e:	f7ff bb7b 	b.w	8004518 <_dtoa_r+0x408>
 8004e22:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004e24:	2300      	movs	r3, #0
 8004e26:	1b04      	subs	r4, r0, r4
 8004e28:	e46e      	b.n	8004708 <_dtoa_r+0x5f8>
 8004e2a:	bf00      	nop
 8004e2c:	08007ef0 	.word	0x08007ef0
 8004e30:	08007fe0 	.word	0x08007fe0
 8004e34:	f1bb 0f00 	cmp.w	fp, #0
 8004e38:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8004e3c:	dd10      	ble.n	8004e60 <_dtoa_r+0xd50>
 8004e3e:	2201      	movs	r2, #1
 8004e40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e42:	4638      	mov	r0, r7
 8004e44:	f000 ff1c 	bl	8005c80 <__lshift>
 8004e48:	4631      	mov	r1, r6
 8004e4a:	900a      	str	r0, [sp, #40]	; 0x28
 8004e4c:	f000 ff78 	bl	8005d40 <__mcmp>
 8004e50:	2800      	cmp	r0, #0
 8004e52:	dd6b      	ble.n	8004f2c <_dtoa_r+0xe1c>
 8004e54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e58:	d053      	beq.n	8004f02 <_dtoa_r+0xdf2>
 8004e5a:	9b08      	ldr	r3, [sp, #32]
 8004e5c:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004e60:	462b      	mov	r3, r5
 8004e62:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004e64:	f803 9b01 	strb.w	r9, [r3], #1
 8004e68:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e6e:	f7ff bbf8 	b.w	8004662 <_dtoa_r+0x552>
 8004e72:	d103      	bne.n	8004e7c <_dtoa_r+0xd6c>
 8004e74:	f019 0f01 	tst.w	r9, #1
 8004e78:	f47f af79 	bne.w	8004d6e <_dtoa_r+0xc5e>
 8004e7c:	4652      	mov	r2, sl
 8004e7e:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 8004e82:	2b30      	cmp	r3, #48	; 0x30
 8004e84:	d0fa      	beq.n	8004e7c <_dtoa_r+0xd6c>
 8004e86:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004e88:	9209      	str	r2, [sp, #36]	; 0x24
 8004e8a:	f7ff bbea 	b.w	8004662 <_dtoa_r+0x552>
 8004e8e:	3301      	adds	r3, #1
 8004e90:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004e92:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8004e96:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004e9a:	f7ff bbe2 	b.w	8004662 <_dtoa_r+0x552>
 8004e9e:	9c06      	ldr	r4, [sp, #24]
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	6861      	ldr	r1, [r4, #4]
 8004ea4:	f000 fcf2 	bl	800588c <_Balloc>
 8004ea8:	9d06      	ldr	r5, [sp, #24]
 8004eaa:	692a      	ldr	r2, [r5, #16]
 8004eac:	3202      	adds	r2, #2
 8004eae:	4604      	mov	r4, r0
 8004eb0:	0092      	lsls	r2, r2, #2
 8004eb2:	f105 010c 	add.w	r1, r5, #12
 8004eb6:	f100 000c 	add.w	r0, r0, #12
 8004eba:	f000 fc9f 	bl	80057fc <memcpy>
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f000 fedc 	bl	8005c80 <__lshift>
 8004ec8:	4680      	mov	r8, r0
 8004eca:	e5e7      	b.n	8004a9c <_dtoa_r+0x98c>
 8004ecc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004ece:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004ed0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004ed2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004ed6:	e417      	b.n	8004708 <_dtoa_r+0x5f8>
 8004ed8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8004edc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ee0:	e739      	b.n	8004d56 <_dtoa_r+0xc46>
 8004ee2:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8004ee6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004eea:	d00a      	beq.n	8004f02 <_dtoa_r+0xdf2>
 8004eec:	462b      	mov	r3, r5
 8004eee:	f109 0901 	add.w	r9, r9, #1
 8004ef2:	f803 9b01 	strb.w	r9, [r3], #1
 8004ef6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004ef8:	f8cd 8018 	str.w	r8, [sp, #24]
 8004efc:	9309      	str	r3, [sp, #36]	; 0x24
 8004efe:	f7ff bbb0 	b.w	8004662 <_dtoa_r+0x552>
 8004f02:	46aa      	mov	sl, r5
 8004f04:	2339      	movs	r3, #57	; 0x39
 8004f06:	f80a 3b01 	strb.w	r3, [sl], #1
 8004f0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f0e:	e730      	b.n	8004d72 <_dtoa_r+0xc62>
 8004f10:	464b      	mov	r3, r9
 8004f12:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8004f16:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004f1a:	d0f2      	beq.n	8004f02 <_dtoa_r+0xdf2>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	dc9c      	bgt.n	8004e5a <_dtoa_r+0xd4a>
 8004f20:	e79e      	b.n	8004e60 <_dtoa_r+0xd50>
 8004f22:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8004f24:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004f26:	9409      	str	r4, [sp, #36]	; 0x24
 8004f28:	f7ff bbaa 	b.w	8004680 <_dtoa_r+0x570>
 8004f2c:	d198      	bne.n	8004e60 <_dtoa_r+0xd50>
 8004f2e:	f019 0f01 	tst.w	r9, #1
 8004f32:	d095      	beq.n	8004e60 <_dtoa_r+0xd50>
 8004f34:	e78e      	b.n	8004e54 <_dtoa_r+0xd44>
 8004f36:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8004f38:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004f3a:	9405      	str	r4, [sp, #20]
 8004f3c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8004f3e:	9409      	str	r4, [sp, #36]	; 0x24
 8004f40:	f7ff bb9e 	b.w	8004680 <_dtoa_r+0x570>
 8004f44:	2300      	movs	r3, #0
 8004f46:	4638      	mov	r0, r7
 8004f48:	9906      	ldr	r1, [sp, #24]
 8004f4a:	220a      	movs	r2, #10
 8004f4c:	f000 fcce 	bl	80058ec <__multadd>
 8004f50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f52:	9006      	str	r0, [sp, #24]
 8004f54:	930e      	str	r3, [sp, #56]	; 0x38
 8004f56:	f7ff bb5e 	b.w	8004616 <_dtoa_r+0x506>
 8004f5a:	f43f ab47 	beq.w	80045ec <_dtoa_r+0x4dc>
 8004f5e:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8004f62:	e602      	b.n	8004b6a <_dtoa_r+0xa5a>
 8004f64:	f3af 8000 	nop.w

08004f68 <_malloc_trim_r>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	4d22      	ldr	r5, [pc, #136]	; (8004ff4 <_malloc_trim_r+0x8c>)
 8004f6c:	460f      	mov	r7, r1
 8004f6e:	4604      	mov	r4, r0
 8004f70:	f000 fc88 	bl	8005884 <__malloc_lock>
 8004f74:	68ab      	ldr	r3, [r5, #8]
 8004f76:	685e      	ldr	r6, [r3, #4]
 8004f78:	f026 0603 	bic.w	r6, r6, #3
 8004f7c:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 8004f80:	1bdf      	subs	r7, r3, r7
 8004f82:	0b3f      	lsrs	r7, r7, #12
 8004f84:	3f01      	subs	r7, #1
 8004f86:	033f      	lsls	r7, r7, #12
 8004f88:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	db07      	blt.n	8004fa0 <_malloc_trim_r+0x38>
 8004f90:	2100      	movs	r1, #0
 8004f92:	f001 f907 	bl	80061a4 <_sbrk_r>
 8004f96:	68ab      	ldr	r3, [r5, #8]
 8004f98:	199b      	adds	r3, r3, r6
 8004f9a:	4298      	cmp	r0, r3
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	d003      	beq.n	8004fa8 <_malloc_trim_r+0x40>
 8004fa0:	f000 fc72 	bl	8005888 <__malloc_unlock>
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa8:	4279      	negs	r1, r7
 8004faa:	f001 f8fb 	bl	80061a4 <_sbrk_r>
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d00d      	beq.n	8004fce <_malloc_trim_r+0x66>
 8004fb2:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <_malloc_trim_r+0x90>)
 8004fb4:	68aa      	ldr	r2, [r5, #8]
 8004fb6:	6819      	ldr	r1, [r3, #0]
 8004fb8:	1bf6      	subs	r6, r6, r7
 8004fba:	f046 0601 	orr.w	r6, r6, #1
 8004fbe:	1bcf      	subs	r7, r1, r7
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	6056      	str	r6, [r2, #4]
 8004fc4:	601f      	str	r7, [r3, #0]
 8004fc6:	f000 fc5f 	bl	8005888 <__malloc_unlock>
 8004fca:	2001      	movs	r0, #1
 8004fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fce:	2100      	movs	r1, #0
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f001 f8e7 	bl	80061a4 <_sbrk_r>
 8004fd6:	68ab      	ldr	r3, [r5, #8]
 8004fd8:	1ac2      	subs	r2, r0, r3
 8004fda:	2a0f      	cmp	r2, #15
 8004fdc:	dd07      	ble.n	8004fee <_malloc_trim_r+0x86>
 8004fde:	4907      	ldr	r1, [pc, #28]	; (8004ffc <_malloc_trim_r+0x94>)
 8004fe0:	6809      	ldr	r1, [r1, #0]
 8004fe2:	1a40      	subs	r0, r0, r1
 8004fe4:	4904      	ldr	r1, [pc, #16]	; (8004ff8 <_malloc_trim_r+0x90>)
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	6008      	str	r0, [r1, #0]
 8004fec:	605a      	str	r2, [r3, #4]
 8004fee:	4620      	mov	r0, r4
 8004ff0:	e7d6      	b.n	8004fa0 <_malloc_trim_r+0x38>
 8004ff2:	bf00      	nop
 8004ff4:	2000057c 	.word	0x2000057c
 8004ff8:	200009a4 	.word	0x200009a4
 8004ffc:	20000984 	.word	0x20000984

08005000 <_free_r>:
 8005000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005004:	460d      	mov	r5, r1
 8005006:	4604      	mov	r4, r0
 8005008:	2900      	cmp	r1, #0
 800500a:	d06f      	beq.n	80050ec <_free_r+0xec>
 800500c:	f000 fc3a 	bl	8005884 <__malloc_lock>
 8005010:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8005014:	4e58      	ldr	r6, [pc, #352]	; (8005178 <_free_r+0x178>)
 8005016:	f1a5 0108 	sub.w	r1, r5, #8
 800501a:	f020 0301 	bic.w	r3, r0, #1
 800501e:	18ca      	adds	r2, r1, r3
 8005020:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8005024:	6857      	ldr	r7, [r2, #4]
 8005026:	4594      	cmp	ip, r2
 8005028:	f027 0703 	bic.w	r7, r7, #3
 800502c:	d07c      	beq.n	8005128 <_free_r+0x128>
 800502e:	f010 0001 	ands.w	r0, r0, #1
 8005032:	6057      	str	r7, [r2, #4]
 8005034:	d049      	beq.n	80050ca <_free_r+0xca>
 8005036:	2000      	movs	r0, #0
 8005038:	19d5      	adds	r5, r2, r7
 800503a:	686d      	ldr	r5, [r5, #4]
 800503c:	f015 0f01 	tst.w	r5, #1
 8005040:	d106      	bne.n	8005050 <_free_r+0x50>
 8005042:	19db      	adds	r3, r3, r7
 8005044:	6895      	ldr	r5, [r2, #8]
 8005046:	2800      	cmp	r0, #0
 8005048:	d062      	beq.n	8005110 <_free_r+0x110>
 800504a:	68d2      	ldr	r2, [r2, #12]
 800504c:	60ea      	str	r2, [r5, #12]
 800504e:	6095      	str	r5, [r2, #8]
 8005050:	f043 0201 	orr.w	r2, r3, #1
 8005054:	604a      	str	r2, [r1, #4]
 8005056:	50cb      	str	r3, [r1, r3]
 8005058:	bb90      	cbnz	r0, 80050c0 <_free_r+0xc0>
 800505a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505e:	d347      	bcc.n	80050f0 <_free_r+0xf0>
 8005060:	099d      	lsrs	r5, r3, #6
 8005062:	3538      	adds	r5, #56	; 0x38
 8005064:	0a5a      	lsrs	r2, r3, #9
 8005066:	00e8      	lsls	r0, r5, #3
 8005068:	2a04      	cmp	r2, #4
 800506a:	d916      	bls.n	800509a <_free_r+0x9a>
 800506c:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8005070:	00e8      	lsls	r0, r5, #3
 8005072:	2a14      	cmp	r2, #20
 8005074:	d911      	bls.n	800509a <_free_r+0x9a>
 8005076:	0b1d      	lsrs	r5, r3, #12
 8005078:	356e      	adds	r5, #110	; 0x6e
 800507a:	00e8      	lsls	r0, r5, #3
 800507c:	2a54      	cmp	r2, #84	; 0x54
 800507e:	d90c      	bls.n	800509a <_free_r+0x9a>
 8005080:	0bdd      	lsrs	r5, r3, #15
 8005082:	3577      	adds	r5, #119	; 0x77
 8005084:	00e8      	lsls	r0, r5, #3
 8005086:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800508a:	d906      	bls.n	800509a <_free_r+0x9a>
 800508c:	f240 5054 	movw	r0, #1364	; 0x554
 8005090:	4282      	cmp	r2, r0
 8005092:	d86d      	bhi.n	8005170 <_free_r+0x170>
 8005094:	0c9d      	lsrs	r5, r3, #18
 8005096:	357c      	adds	r5, #124	; 0x7c
 8005098:	00e8      	lsls	r0, r5, #3
 800509a:	1986      	adds	r6, r0, r6
 800509c:	4836      	ldr	r0, [pc, #216]	; (8005178 <_free_r+0x178>)
 800509e:	68b2      	ldr	r2, [r6, #8]
 80050a0:	42b2      	cmp	r2, r6
 80050a2:	d103      	bne.n	80050ac <_free_r+0xac>
 80050a4:	e05b      	b.n	800515e <_free_r+0x15e>
 80050a6:	6892      	ldr	r2, [r2, #8]
 80050a8:	4296      	cmp	r6, r2
 80050aa:	d004      	beq.n	80050b6 <_free_r+0xb6>
 80050ac:	6850      	ldr	r0, [r2, #4]
 80050ae:	f020 0003 	bic.w	r0, r0, #3
 80050b2:	4283      	cmp	r3, r0
 80050b4:	d3f7      	bcc.n	80050a6 <_free_r+0xa6>
 80050b6:	68d3      	ldr	r3, [r2, #12]
 80050b8:	60cb      	str	r3, [r1, #12]
 80050ba:	608a      	str	r2, [r1, #8]
 80050bc:	60d1      	str	r1, [r2, #12]
 80050be:	6099      	str	r1, [r3, #8]
 80050c0:	4620      	mov	r0, r4
 80050c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050c6:	f000 bbdf 	b.w	8005888 <__malloc_unlock>
 80050ca:	f855 cc08 	ldr.w	ip, [r5, #-8]
 80050ce:	ebcc 0101 	rsb	r1, ip, r1
 80050d2:	f106 0808 	add.w	r8, r6, #8
 80050d6:	688d      	ldr	r5, [r1, #8]
 80050d8:	4545      	cmp	r5, r8
 80050da:	4463      	add	r3, ip
 80050dc:	d03d      	beq.n	800515a <_free_r+0x15a>
 80050de:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80050e2:	f8c5 c00c 	str.w	ip, [r5, #12]
 80050e6:	f8cc 5008 	str.w	r5, [ip, #8]
 80050ea:	e7a5      	b.n	8005038 <_free_r+0x38>
 80050ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050f0:	08db      	lsrs	r3, r3, #3
 80050f2:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80050f6:	6875      	ldr	r5, [r6, #4]
 80050f8:	6890      	ldr	r0, [r2, #8]
 80050fa:	60ca      	str	r2, [r1, #12]
 80050fc:	109b      	asrs	r3, r3, #2
 80050fe:	2701      	movs	r7, #1
 8005100:	fa17 f303 	lsls.w	r3, r7, r3
 8005104:	432b      	orrs	r3, r5
 8005106:	6088      	str	r0, [r1, #8]
 8005108:	6073      	str	r3, [r6, #4]
 800510a:	6091      	str	r1, [r2, #8]
 800510c:	60c1      	str	r1, [r0, #12]
 800510e:	e7d7      	b.n	80050c0 <_free_r+0xc0>
 8005110:	4f1a      	ldr	r7, [pc, #104]	; (800517c <_free_r+0x17c>)
 8005112:	42bd      	cmp	r5, r7
 8005114:	d199      	bne.n	800504a <_free_r+0x4a>
 8005116:	f043 0201 	orr.w	r2, r3, #1
 800511a:	6171      	str	r1, [r6, #20]
 800511c:	6131      	str	r1, [r6, #16]
 800511e:	60cd      	str	r5, [r1, #12]
 8005120:	608d      	str	r5, [r1, #8]
 8005122:	604a      	str	r2, [r1, #4]
 8005124:	50cb      	str	r3, [r1, r3]
 8005126:	e7cb      	b.n	80050c0 <_free_r+0xc0>
 8005128:	07c2      	lsls	r2, r0, #31
 800512a:	443b      	add	r3, r7
 800512c:	d407      	bmi.n	800513e <_free_r+0x13e>
 800512e:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8005132:	1a89      	subs	r1, r1, r2
 8005134:	189b      	adds	r3, r3, r2
 8005136:	6888      	ldr	r0, [r1, #8]
 8005138:	68ca      	ldr	r2, [r1, #12]
 800513a:	60c2      	str	r2, [r0, #12]
 800513c:	6090      	str	r0, [r2, #8]
 800513e:	4a10      	ldr	r2, [pc, #64]	; (8005180 <_free_r+0x180>)
 8005140:	60b1      	str	r1, [r6, #8]
 8005142:	6812      	ldr	r2, [r2, #0]
 8005144:	f043 0001 	orr.w	r0, r3, #1
 8005148:	4293      	cmp	r3, r2
 800514a:	6048      	str	r0, [r1, #4]
 800514c:	d3b8      	bcc.n	80050c0 <_free_r+0xc0>
 800514e:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <_free_r+0x184>)
 8005150:	4620      	mov	r0, r4
 8005152:	6819      	ldr	r1, [r3, #0]
 8005154:	f7ff ff08 	bl	8004f68 <_malloc_trim_r>
 8005158:	e7b2      	b.n	80050c0 <_free_r+0xc0>
 800515a:	2001      	movs	r0, #1
 800515c:	e76c      	b.n	8005038 <_free_r+0x38>
 800515e:	6843      	ldr	r3, [r0, #4]
 8005160:	10ad      	asrs	r5, r5, #2
 8005162:	2601      	movs	r6, #1
 8005164:	fa16 f505 	lsls.w	r5, r6, r5
 8005168:	432b      	orrs	r3, r5
 800516a:	6043      	str	r3, [r0, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	e7a3      	b.n	80050b8 <_free_r+0xb8>
 8005170:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8005174:	257e      	movs	r5, #126	; 0x7e
 8005176:	e790      	b.n	800509a <_free_r+0x9a>
 8005178:	2000057c 	.word	0x2000057c
 800517c:	20000584 	.word	0x20000584
 8005180:	20000988 	.word	0x20000988
 8005184:	200009a0 	.word	0x200009a0

08005188 <_setlocale_r>:
 8005188:	b510      	push	{r4, lr}
 800518a:	4614      	mov	r4, r2
 800518c:	b122      	cbz	r2, 8005198 <_setlocale_r+0x10>
 800518e:	4610      	mov	r0, r2
 8005190:	490b      	ldr	r1, [pc, #44]	; (80051c0 <_setlocale_r+0x38>)
 8005192:	f001 f819 	bl	80061c8 <strcmp>
 8005196:	b908      	cbnz	r0, 800519c <_setlocale_r+0x14>
 8005198:	480a      	ldr	r0, [pc, #40]	; (80051c4 <_setlocale_r+0x3c>)
 800519a:	bd10      	pop	{r4, pc}
 800519c:	4620      	mov	r0, r4
 800519e:	4909      	ldr	r1, [pc, #36]	; (80051c4 <_setlocale_r+0x3c>)
 80051a0:	f001 f812 	bl	80061c8 <strcmp>
 80051a4:	b908      	cbnz	r0, 80051aa <_setlocale_r+0x22>
 80051a6:	4807      	ldr	r0, [pc, #28]	; (80051c4 <_setlocale_r+0x3c>)
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	4620      	mov	r0, r4
 80051ac:	4906      	ldr	r1, [pc, #24]	; (80051c8 <_setlocale_r+0x40>)
 80051ae:	f001 f80b 	bl	80061c8 <strcmp>
 80051b2:	4b04      	ldr	r3, [pc, #16]	; (80051c4 <_setlocale_r+0x3c>)
 80051b4:	2800      	cmp	r0, #0
 80051b6:	bf0c      	ite	eq
 80051b8:	4618      	moveq	r0, r3
 80051ba:	2000      	movne	r0, #0
 80051bc:	bd10      	pop	{r4, pc}
 80051be:	bf00      	nop
 80051c0:	080081a8 	.word	0x080081a8
 80051c4:	080081a4 	.word	0x080081a4
 80051c8:	080080fc 	.word	0x080080fc

080051cc <__locale_charset>:
 80051cc:	f240 5000 	movw	r0, #1280	; 0x500
 80051d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop

080051d8 <__locale_mb_cur_max>:
 80051d8:	f240 5300 	movw	r3, #1280	; 0x500
 80051dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80051e0:	6a18      	ldr	r0, [r3, #32]
 80051e2:	4770      	bx	lr

080051e4 <__locale_msgcharset>:
 80051e4:	4800      	ldr	r0, [pc, #0]	; (80051e8 <__locale_msgcharset+0x4>)
 80051e6:	4770      	bx	lr
 80051e8:	20000524 	.word	0x20000524

080051ec <__locale_cjk_lang>:
 80051ec:	2000      	movs	r0, #0
 80051ee:	4770      	bx	lr

080051f0 <_localeconv_r>:
 80051f0:	4800      	ldr	r0, [pc, #0]	; (80051f4 <_localeconv_r+0x4>)
 80051f2:	4770      	bx	lr
 80051f4:	20000544 	.word	0x20000544

080051f8 <setlocale>:
 80051f8:	b410      	push	{r4}
 80051fa:	f240 03d0 	movw	r3, #208	; 0xd0
 80051fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005202:	4604      	mov	r4, r0
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	460a      	mov	r2, r1
 8005208:	4621      	mov	r1, r4
 800520a:	bc10      	pop	{r4}
 800520c:	e7bc      	b.n	8005188 <_setlocale_r>
 800520e:	bf00      	nop

08005210 <localeconv>:
 8005210:	4800      	ldr	r0, [pc, #0]	; (8005214 <localeconv+0x4>)
 8005212:	4770      	bx	lr
 8005214:	20000544 	.word	0x20000544

08005218 <_malloc_r>:
 8005218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521c:	f101 040b 	add.w	r4, r1, #11
 8005220:	2c16      	cmp	r4, #22
 8005222:	4605      	mov	r5, r0
 8005224:	d92a      	bls.n	800527c <_malloc_r+0x64>
 8005226:	f024 0407 	bic.w	r4, r4, #7
 800522a:	0fe3      	lsrs	r3, r4, #31
 800522c:	428c      	cmp	r4, r1
 800522e:	bf2c      	ite	cs
 8005230:	4619      	movcs	r1, r3
 8005232:	f043 0101 	orrcc.w	r1, r3, #1
 8005236:	bb51      	cbnz	r1, 800528e <_malloc_r+0x76>
 8005238:	4628      	mov	r0, r5
 800523a:	f000 fb23 	bl	8005884 <__malloc_lock>
 800523e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005242:	d22a      	bcs.n	800529a <_malloc_r+0x82>
 8005244:	4e7d      	ldr	r6, [pc, #500]	; (800543c <_malloc_r+0x224>)
 8005246:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 800524a:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 800524e:	68df      	ldr	r7, [r3, #12]
 8005250:	429f      	cmp	r7, r3
 8005252:	f000 8235 	beq.w	80056c0 <_malloc_r+0x4a8>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	f023 0303 	bic.w	r3, r3, #3
 8005260:	18fb      	adds	r3, r7, r3
 8005262:	60ca      	str	r2, [r1, #12]
 8005264:	6858      	ldr	r0, [r3, #4]
 8005266:	6091      	str	r1, [r2, #8]
 8005268:	f040 0201 	orr.w	r2, r0, #1
 800526c:	605a      	str	r2, [r3, #4]
 800526e:	4628      	mov	r0, r5
 8005270:	f000 fb0a 	bl	8005888 <__malloc_unlock>
 8005274:	3708      	adds	r7, #8
 8005276:	4638      	mov	r0, r7
 8005278:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527c:	2300      	movs	r3, #0
 800527e:	2410      	movs	r4, #16
 8005280:	428c      	cmp	r4, r1
 8005282:	bf2c      	ite	cs
 8005284:	4619      	movcs	r1, r3
 8005286:	f043 0101 	orrcc.w	r1, r3, #1
 800528a:	2900      	cmp	r1, #0
 800528c:	d0d4      	beq.n	8005238 <_malloc_r+0x20>
 800528e:	230c      	movs	r3, #12
 8005290:	2700      	movs	r7, #0
 8005292:	602b      	str	r3, [r5, #0]
 8005294:	4638      	mov	r0, r7
 8005296:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529a:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 800529e:	bf04      	itt	eq
 80052a0:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 80052a4:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 80052a8:	f040 8081 	bne.w	80053ae <_malloc_r+0x196>
 80052ac:	4e63      	ldr	r6, [pc, #396]	; (800543c <_malloc_r+0x224>)
 80052ae:	1871      	adds	r1, r6, r1
 80052b0:	68cf      	ldr	r7, [r1, #12]
 80052b2:	42b9      	cmp	r1, r7
 80052b4:	d106      	bne.n	80052c4 <_malloc_r+0xac>
 80052b6:	e00d      	b.n	80052d4 <_malloc_r+0xbc>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f280 8169 	bge.w	8005590 <_malloc_r+0x378>
 80052be:	68ff      	ldr	r7, [r7, #12]
 80052c0:	42b9      	cmp	r1, r7
 80052c2:	d007      	beq.n	80052d4 <_malloc_r+0xbc>
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	f022 0203 	bic.w	r2, r2, #3
 80052ca:	1b13      	subs	r3, r2, r4
 80052cc:	2b0f      	cmp	r3, #15
 80052ce:	ddf3      	ble.n	80052b8 <_malloc_r+0xa0>
 80052d0:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80052d4:	f10e 0e01 	add.w	lr, lr, #1
 80052d8:	4a58      	ldr	r2, [pc, #352]	; (800543c <_malloc_r+0x224>)
 80052da:	6937      	ldr	r7, [r6, #16]
 80052dc:	f102 0c08 	add.w	ip, r2, #8
 80052e0:	4567      	cmp	r7, ip
 80052e2:	bf08      	it	eq
 80052e4:	6853      	ldreq	r3, [r2, #4]
 80052e6:	d023      	beq.n	8005330 <_malloc_r+0x118>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f023 0303 	bic.w	r3, r3, #3
 80052ee:	1b19      	subs	r1, r3, r4
 80052f0:	290f      	cmp	r1, #15
 80052f2:	f300 81b4 	bgt.w	800565e <_malloc_r+0x446>
 80052f6:	2900      	cmp	r1, #0
 80052f8:	f8c2 c014 	str.w	ip, [r2, #20]
 80052fc:	f8c2 c010 	str.w	ip, [r2, #16]
 8005300:	f280 808f 	bge.w	8005422 <_malloc_r+0x20a>
 8005304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005308:	f080 8161 	bcs.w	80055ce <_malloc_r+0x3b6>
 800530c:	08db      	lsrs	r3, r3, #3
 800530e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8005312:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8005316:	6888      	ldr	r0, [r1, #8]
 8005318:	60f9      	str	r1, [r7, #12]
 800531a:	109b      	asrs	r3, r3, #2
 800531c:	f04f 0901 	mov.w	r9, #1
 8005320:	fa09 f303 	lsl.w	r3, r9, r3
 8005324:	ea43 0308 	orr.w	r3, r3, r8
 8005328:	60b8      	str	r0, [r7, #8]
 800532a:	6053      	str	r3, [r2, #4]
 800532c:	608f      	str	r7, [r1, #8]
 800532e:	60c7      	str	r7, [r0, #12]
 8005330:	2001      	movs	r0, #1
 8005332:	ea4f 02ae 	mov.w	r2, lr, asr #2
 8005336:	4090      	lsls	r0, r2
 8005338:	4298      	cmp	r0, r3
 800533a:	f200 8081 	bhi.w	8005440 <_malloc_r+0x228>
 800533e:	4203      	tst	r3, r0
 8005340:	d106      	bne.n	8005350 <_malloc_r+0x138>
 8005342:	f02e 0e03 	bic.w	lr, lr, #3
 8005346:	0040      	lsls	r0, r0, #1
 8005348:	4203      	tst	r3, r0
 800534a:	f10e 0e04 	add.w	lr, lr, #4
 800534e:	d0fa      	beq.n	8005346 <_malloc_r+0x12e>
 8005350:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 8005354:	464f      	mov	r7, r9
 8005356:	46f0      	mov	r8, lr
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	429f      	cmp	r7, r3
 800535c:	d107      	bne.n	800536e <_malloc_r+0x156>
 800535e:	e191      	b.n	8005684 <_malloc_r+0x46c>
 8005360:	2a00      	cmp	r2, #0
 8005362:	f280 81b7 	bge.w	80056d4 <_malloc_r+0x4bc>
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	429f      	cmp	r7, r3
 800536a:	f000 818b 	beq.w	8005684 <_malloc_r+0x46c>
 800536e:	6859      	ldr	r1, [r3, #4]
 8005370:	f021 0103 	bic.w	r1, r1, #3
 8005374:	1b0a      	subs	r2, r1, r4
 8005376:	2a0f      	cmp	r2, #15
 8005378:	ddf2      	ble.n	8005360 <_malloc_r+0x148>
 800537a:	461f      	mov	r7, r3
 800537c:	1919      	adds	r1, r3, r4
 800537e:	68d8      	ldr	r0, [r3, #12]
 8005380:	f857 ef08 	ldr.w	lr, [r7, #8]!
 8005384:	508a      	str	r2, [r1, r2]
 8005386:	f044 0401 	orr.w	r4, r4, #1
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	f8ce 000c 	str.w	r0, [lr, #12]
 8005392:	f8c0 e008 	str.w	lr, [r0, #8]
 8005396:	605c      	str	r4, [r3, #4]
 8005398:	6171      	str	r1, [r6, #20]
 800539a:	6131      	str	r1, [r6, #16]
 800539c:	f8c1 c00c 	str.w	ip, [r1, #12]
 80053a0:	f8c1 c008 	str.w	ip, [r1, #8]
 80053a4:	604a      	str	r2, [r1, #4]
 80053a6:	4628      	mov	r0, r5
 80053a8:	f000 fa6e 	bl	8005888 <__malloc_unlock>
 80053ac:	e763      	b.n	8005276 <_malloc_r+0x5e>
 80053ae:	f1be 0f04 	cmp.w	lr, #4
 80053b2:	bf9e      	ittt	ls
 80053b4:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 80053b8:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 80053bc:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 80053c0:	f67f af74 	bls.w	80052ac <_malloc_r+0x94>
 80053c4:	f1be 0f14 	cmp.w	lr, #20
 80053c8:	bf9c      	itt	ls
 80053ca:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 80053ce:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 80053d2:	f67f af6b 	bls.w	80052ac <_malloc_r+0x94>
 80053d6:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 80053da:	bf9e      	ittt	ls
 80053dc:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 80053e0:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 80053e4:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 80053e8:	f67f af60 	bls.w	80052ac <_malloc_r+0x94>
 80053ec:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 80053f0:	bf9e      	ittt	ls
 80053f2:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 80053f6:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 80053fa:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 80053fe:	f67f af55 	bls.w	80052ac <_malloc_r+0x94>
 8005402:	f240 5354 	movw	r3, #1364	; 0x554
 8005406:	459e      	cmp	lr, r3
 8005408:	bf9d      	ittte	ls
 800540a:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 800540e:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 8005412:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005416:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 800541a:	bf88      	it	hi
 800541c:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8005420:	e744      	b.n	80052ac <_malloc_r+0x94>
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	4628      	mov	r0, r5
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	f042 0201 	orr.w	r2, r2, #1
 800542c:	605a      	str	r2, [r3, #4]
 800542e:	3708      	adds	r7, #8
 8005430:	f000 fa2a 	bl	8005888 <__malloc_unlock>
 8005434:	4638      	mov	r0, r7
 8005436:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800543a:	bf00      	nop
 800543c:	2000057c 	.word	0x2000057c
 8005440:	68b7      	ldr	r7, [r6, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f023 0803 	bic.w	r8, r3, #3
 8005448:	4544      	cmp	r4, r8
 800544a:	ebc4 0208 	rsb	r2, r4, r8
 800544e:	bf94      	ite	ls
 8005450:	2300      	movls	r3, #0
 8005452:	2301      	movhi	r3, #1
 8005454:	2a0f      	cmp	r2, #15
 8005456:	bfd8      	it	le
 8005458:	f043 0301 	orrle.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 80a7 	beq.w	80055b0 <_malloc_r+0x398>
 8005462:	4bb3      	ldr	r3, [pc, #716]	; (8005730 <_malloc_r+0x518>)
 8005464:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 8005734 <_malloc_r+0x51c>
 8005468:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800546c:	f8da 3000 	ldr.w	r3, [sl]
 8005470:	3201      	adds	r2, #1
 8005472:	4423      	add	r3, r4
 8005474:	bf08      	it	eq
 8005476:	f103 0b10 	addeq.w	fp, r3, #16
 800547a:	d006      	beq.n	800548a <_malloc_r+0x272>
 800547c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005480:	330f      	adds	r3, #15
 8005482:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005486:	f023 0b0f 	bic.w	fp, r3, #15
 800548a:	4628      	mov	r0, r5
 800548c:	4659      	mov	r1, fp
 800548e:	f000 fe89 	bl	80061a4 <_sbrk_r>
 8005492:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005496:	4681      	mov	r9, r0
 8005498:	f000 8144 	beq.w	8005724 <_malloc_r+0x50c>
 800549c:	eb07 0208 	add.w	r2, r7, r8
 80054a0:	4282      	cmp	r2, r0
 80054a2:	f200 8126 	bhi.w	80056f2 <_malloc_r+0x4da>
 80054a6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80054aa:	454a      	cmp	r2, r9
 80054ac:	445b      	add	r3, fp
 80054ae:	f8ca 3004 	str.w	r3, [sl, #4]
 80054b2:	f000 8141 	beq.w	8005738 <_malloc_r+0x520>
 80054b6:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 80054ba:	3101      	adds	r1, #1
 80054bc:	bf15      	itete	ne
 80054be:	ebc2 0209 	rsbne	r2, r2, r9
 80054c2:	4b9b      	ldreq	r3, [pc, #620]	; (8005730 <_malloc_r+0x518>)
 80054c4:	189b      	addne	r3, r3, r2
 80054c6:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 80054ca:	bf18      	it	ne
 80054cc:	f8ca 3004 	strne.w	r3, [sl, #4]
 80054d0:	f019 0307 	ands.w	r3, r9, #7
 80054d4:	bf1f      	itttt	ne
 80054d6:	f1c3 0208 	rsbne	r2, r3, #8
 80054da:	4491      	addne	r9, r2
 80054dc:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 80054e0:	f103 0208 	addne.w	r2, r3, #8
 80054e4:	eb09 030b 	add.w	r3, r9, fp
 80054e8:	bf08      	it	eq
 80054ea:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 80054ee:	051b      	lsls	r3, r3, #20
 80054f0:	0d1b      	lsrs	r3, r3, #20
 80054f2:	ebc3 0b02 	rsb	fp, r3, r2
 80054f6:	4628      	mov	r0, r5
 80054f8:	4659      	mov	r1, fp
 80054fa:	f000 fe53 	bl	80061a4 <_sbrk_r>
 80054fe:	1c43      	adds	r3, r0, #1
 8005500:	f000 8126 	beq.w	8005750 <_malloc_r+0x538>
 8005504:	ebc9 0200 	rsb	r2, r9, r0
 8005508:	445a      	add	r2, fp
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005512:	f8c6 9008 	str.w	r9, [r6, #8]
 8005516:	445b      	add	r3, fp
 8005518:	42b7      	cmp	r7, r6
 800551a:	f8ca 3004 	str.w	r3, [sl, #4]
 800551e:	f8c9 2004 	str.w	r2, [r9, #4]
 8005522:	d015      	beq.n	8005550 <_malloc_r+0x338>
 8005524:	f1b8 0f0f 	cmp.w	r8, #15
 8005528:	f240 80f6 	bls.w	8005718 <_malloc_r+0x500>
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f1a8 020c 	sub.w	r2, r8, #12
 8005532:	f022 0207 	bic.w	r2, r2, #7
 8005536:	18b9      	adds	r1, r7, r2
 8005538:	f000 0e01 	and.w	lr, r0, #1
 800553c:	ea42 0e0e 	orr.w	lr, r2, lr
 8005540:	2005      	movs	r0, #5
 8005542:	2a0f      	cmp	r2, #15
 8005544:	f8c7 e004 	str.w	lr, [r7, #4]
 8005548:	6048      	str	r0, [r1, #4]
 800554a:	6088      	str	r0, [r1, #8]
 800554c:	f200 8104 	bhi.w	8005758 <_malloc_r+0x540>
 8005550:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8005554:	68b7      	ldr	r7, [r6, #8]
 8005556:	4293      	cmp	r3, r2
 8005558:	bf84      	itt	hi
 800555a:	4a76      	ldrhi	r2, [pc, #472]	; (8005734 <_malloc_r+0x51c>)
 800555c:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 800555e:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 8005562:	4293      	cmp	r3, r2
 8005564:	bf84      	itt	hi
 8005566:	4a73      	ldrhi	r2, [pc, #460]	; (8005734 <_malloc_r+0x51c>)
 8005568:	6313      	strhi	r3, [r2, #48]	; 0x30
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f023 0303 	bic.w	r3, r3, #3
 8005570:	429c      	cmp	r4, r3
 8005572:	ebc4 0203 	rsb	r2, r4, r3
 8005576:	bf94      	ite	ls
 8005578:	2300      	movls	r3, #0
 800557a:	2301      	movhi	r3, #1
 800557c:	2a0f      	cmp	r2, #15
 800557e:	bfd8      	it	le
 8005580:	f043 0301 	orrle.w	r3, r3, #1
 8005584:	b1a3      	cbz	r3, 80055b0 <_malloc_r+0x398>
 8005586:	4628      	mov	r0, r5
 8005588:	f000 f97e 	bl	8005888 <__malloc_unlock>
 800558c:	2700      	movs	r7, #0
 800558e:	e672      	b.n	8005276 <_malloc_r+0x5e>
 8005590:	18ba      	adds	r2, r7, r2
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6850      	ldr	r0, [r2, #4]
 8005596:	68b9      	ldr	r1, [r7, #8]
 8005598:	f040 0001 	orr.w	r0, r0, #1
 800559c:	6050      	str	r0, [r2, #4]
 800559e:	60cb      	str	r3, [r1, #12]
 80055a0:	4628      	mov	r0, r5
 80055a2:	6099      	str	r1, [r3, #8]
 80055a4:	3708      	adds	r7, #8
 80055a6:	f000 f96f 	bl	8005888 <__malloc_unlock>
 80055aa:	4638      	mov	r0, r7
 80055ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b0:	193b      	adds	r3, r7, r4
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	f044 0401 	orr.w	r4, r4, #1
 80055ba:	607c      	str	r4, [r7, #4]
 80055bc:	4628      	mov	r0, r5
 80055be:	605a      	str	r2, [r3, #4]
 80055c0:	3708      	adds	r7, #8
 80055c2:	60b3      	str	r3, [r6, #8]
 80055c4:	f000 f960 	bl	8005888 <__malloc_unlock>
 80055c8:	4638      	mov	r0, r7
 80055ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ce:	0a5a      	lsrs	r2, r3, #9
 80055d0:	2a04      	cmp	r2, #4
 80055d2:	bf9e      	ittt	ls
 80055d4:	ea4f 1893 	movls.w	r8, r3, lsr #6
 80055d8:	f108 0838 	addls.w	r8, r8, #56	; 0x38
 80055dc:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 80055e0:	d928      	bls.n	8005634 <_malloc_r+0x41c>
 80055e2:	2a14      	cmp	r2, #20
 80055e4:	bf9c      	itt	ls
 80055e6:	f102 085b 	addls.w	r8, r2, #91	; 0x5b
 80055ea:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 80055ee:	d921      	bls.n	8005634 <_malloc_r+0x41c>
 80055f0:	2a54      	cmp	r2, #84	; 0x54
 80055f2:	bf9e      	ittt	ls
 80055f4:	ea4f 3813 	movls.w	r8, r3, lsr #12
 80055f8:	f108 086e 	addls.w	r8, r8, #110	; 0x6e
 80055fc:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8005600:	d918      	bls.n	8005634 <_malloc_r+0x41c>
 8005602:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005606:	bf9e      	ittt	ls
 8005608:	ea4f 38d3 	movls.w	r8, r3, lsr #15
 800560c:	f108 0877 	addls.w	r8, r8, #119	; 0x77
 8005610:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8005614:	d90e      	bls.n	8005634 <_malloc_r+0x41c>
 8005616:	f240 5154 	movw	r1, #1364	; 0x554
 800561a:	428a      	cmp	r2, r1
 800561c:	bf9d      	ittte	ls
 800561e:	ea4f 4893 	movls.w	r8, r3, lsr #18
 8005622:	f108 087c 	addls.w	r8, r8, #124	; 0x7c
 8005626:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800562a:	f44f 707c 	movhi.w	r0, #1008	; 0x3f0
 800562e:	bf88      	it	hi
 8005630:	f04f 087e 	movhi.w	r8, #126	; 0x7e
 8005634:	1830      	adds	r0, r6, r0
 8005636:	493e      	ldr	r1, [pc, #248]	; (8005730 <_malloc_r+0x518>)
 8005638:	6882      	ldr	r2, [r0, #8]
 800563a:	4282      	cmp	r2, r0
 800563c:	d103      	bne.n	8005646 <_malloc_r+0x42e>
 800563e:	e061      	b.n	8005704 <_malloc_r+0x4ec>
 8005640:	6892      	ldr	r2, [r2, #8]
 8005642:	4290      	cmp	r0, r2
 8005644:	d004      	beq.n	8005650 <_malloc_r+0x438>
 8005646:	6851      	ldr	r1, [r2, #4]
 8005648:	f021 0103 	bic.w	r1, r1, #3
 800564c:	428b      	cmp	r3, r1
 800564e:	d3f7      	bcc.n	8005640 <_malloc_r+0x428>
 8005650:	68d1      	ldr	r1, [r2, #12]
 8005652:	6873      	ldr	r3, [r6, #4]
 8005654:	60f9      	str	r1, [r7, #12]
 8005656:	60ba      	str	r2, [r7, #8]
 8005658:	60d7      	str	r7, [r2, #12]
 800565a:	608f      	str	r7, [r1, #8]
 800565c:	e668      	b.n	8005330 <_malloc_r+0x118>
 800565e:	193b      	adds	r3, r7, r4
 8005660:	f041 0001 	orr.w	r0, r1, #1
 8005664:	f044 0401 	orr.w	r4, r4, #1
 8005668:	607c      	str	r4, [r7, #4]
 800566a:	6153      	str	r3, [r2, #20]
 800566c:	6113      	str	r3, [r2, #16]
 800566e:	6058      	str	r0, [r3, #4]
 8005670:	f8c3 c00c 	str.w	ip, [r3, #12]
 8005674:	f8c3 c008 	str.w	ip, [r3, #8]
 8005678:	5059      	str	r1, [r3, r1]
 800567a:	4628      	mov	r0, r5
 800567c:	f000 f904 	bl	8005888 <__malloc_unlock>
 8005680:	3708      	adds	r7, #8
 8005682:	e5f8      	b.n	8005276 <_malloc_r+0x5e>
 8005684:	f108 0801 	add.w	r8, r8, #1
 8005688:	3708      	adds	r7, #8
 800568a:	f018 0f03 	tst.w	r8, #3
 800568e:	f47f ae63 	bne.w	8005358 <_malloc_r+0x140>
 8005692:	464b      	mov	r3, r9
 8005694:	f01e 0f03 	tst.w	lr, #3
 8005698:	f1a3 0208 	sub.w	r2, r3, #8
 800569c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80056a0:	d062      	beq.n	8005768 <_malloc_r+0x550>
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d0f5      	beq.n	8005694 <_malloc_r+0x47c>
 80056a8:	6873      	ldr	r3, [r6, #4]
 80056aa:	0040      	lsls	r0, r0, #1
 80056ac:	4298      	cmp	r0, r3
 80056ae:	f63f aec7 	bhi.w	8005440 <_malloc_r+0x228>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	f43f aec4 	beq.w	8005440 <_malloc_r+0x228>
 80056b8:	4218      	tst	r0, r3
 80056ba:	d05a      	beq.n	8005772 <_malloc_r+0x55a>
 80056bc:	46c6      	mov	lr, r8
 80056be:	e647      	b.n	8005350 <_malloc_r+0x138>
 80056c0:	f107 0308 	add.w	r3, r7, #8
 80056c4:	697f      	ldr	r7, [r7, #20]
 80056c6:	42bb      	cmp	r3, r7
 80056c8:	bf08      	it	eq
 80056ca:	f10e 0e02 	addeq.w	lr, lr, #2
 80056ce:	f43f ae03 	beq.w	80052d8 <_malloc_r+0xc0>
 80056d2:	e5c0      	b.n	8005256 <_malloc_r+0x3e>
 80056d4:	1859      	adds	r1, r3, r1
 80056d6:	461f      	mov	r7, r3
 80056d8:	6848      	ldr	r0, [r1, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f857 2f08 	ldr.w	r2, [r7, #8]!
 80056e0:	f040 0001 	orr.w	r0, r0, #1
 80056e4:	6048      	str	r0, [r1, #4]
 80056e6:	60d3      	str	r3, [r2, #12]
 80056e8:	609a      	str	r2, [r3, #8]
 80056ea:	4628      	mov	r0, r5
 80056ec:	f000 f8cc 	bl	8005888 <__malloc_unlock>
 80056f0:	e5c1      	b.n	8005276 <_malloc_r+0x5e>
 80056f2:	42b7      	cmp	r7, r6
 80056f4:	f43f aed7 	beq.w	80054a6 <_malloc_r+0x28e>
 80056f8:	4b0d      	ldr	r3, [pc, #52]	; (8005730 <_malloc_r+0x518>)
 80056fa:	689f      	ldr	r7, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f023 0303 	bic.w	r3, r3, #3
 8005702:	e735      	b.n	8005570 <_malloc_r+0x358>
 8005704:	684b      	ldr	r3, [r1, #4]
 8005706:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800570a:	2001      	movs	r0, #1
 800570c:	fa00 f008 	lsl.w	r0, r0, r8
 8005710:	4303      	orrs	r3, r0
 8005712:	604b      	str	r3, [r1, #4]
 8005714:	4611      	mov	r1, r2
 8005716:	e79d      	b.n	8005654 <_malloc_r+0x43c>
 8005718:	2301      	movs	r3, #1
 800571a:	f8c9 3004 	str.w	r3, [r9, #4]
 800571e:	464f      	mov	r7, r9
 8005720:	2300      	movs	r3, #0
 8005722:	e725      	b.n	8005570 <_malloc_r+0x358>
 8005724:	68b7      	ldr	r7, [r6, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f023 0303 	bic.w	r3, r3, #3
 800572c:	e720      	b.n	8005570 <_malloc_r+0x358>
 800572e:	bf00      	nop
 8005730:	2000057c 	.word	0x2000057c
 8005734:	200009a0 	.word	0x200009a0
 8005738:	0511      	lsls	r1, r2, #20
 800573a:	0d09      	lsrs	r1, r1, #20
 800573c:	2900      	cmp	r1, #0
 800573e:	f47f aeba 	bne.w	80054b6 <_malloc_r+0x29e>
 8005742:	68b2      	ldr	r2, [r6, #8]
 8005744:	eb0b 0108 	add.w	r1, fp, r8
 8005748:	f041 0101 	orr.w	r1, r1, #1
 800574c:	6051      	str	r1, [r2, #4]
 800574e:	e6ff      	b.n	8005550 <_malloc_r+0x338>
 8005750:	2201      	movs	r2, #1
 8005752:	f04f 0b00 	mov.w	fp, #0
 8005756:	e6da      	b.n	800550e <_malloc_r+0x2f6>
 8005758:	4628      	mov	r0, r5
 800575a:	f107 0108 	add.w	r1, r7, #8
 800575e:	f7ff fc4f 	bl	8005000 <_free_r>
 8005762:	4b06      	ldr	r3, [pc, #24]	; (800577c <_malloc_r+0x564>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	e6f3      	b.n	8005550 <_malloc_r+0x338>
 8005768:	6873      	ldr	r3, [r6, #4]
 800576a:	ea23 0300 	bic.w	r3, r3, r0
 800576e:	6073      	str	r3, [r6, #4]
 8005770:	e79b      	b.n	80056aa <_malloc_r+0x492>
 8005772:	0040      	lsls	r0, r0, #1
 8005774:	f108 0804 	add.w	r8, r8, #4
 8005778:	e79e      	b.n	80056b8 <_malloc_r+0x4a0>
 800577a:	bf00      	nop
 800577c:	200009a0 	.word	0x200009a0

08005780 <memchr>:
 8005780:	0783      	lsls	r3, r0, #30
 8005782:	b470      	push	{r4, r5, r6}
 8005784:	b2c9      	uxtb	r1, r1
 8005786:	d00f      	beq.n	80057a8 <memchr+0x28>
 8005788:	2a00      	cmp	r2, #0
 800578a:	d033      	beq.n	80057f4 <memchr+0x74>
 800578c:	7803      	ldrb	r3, [r0, #0]
 800578e:	3a01      	subs	r2, #1
 8005790:	428b      	cmp	r3, r1
 8005792:	d106      	bne.n	80057a2 <memchr+0x22>
 8005794:	e01d      	b.n	80057d2 <memchr+0x52>
 8005796:	2a00      	cmp	r2, #0
 8005798:	d02c      	beq.n	80057f4 <memchr+0x74>
 800579a:	7803      	ldrb	r3, [r0, #0]
 800579c:	3a01      	subs	r2, #1
 800579e:	428b      	cmp	r3, r1
 80057a0:	d017      	beq.n	80057d2 <memchr+0x52>
 80057a2:	3001      	adds	r0, #1
 80057a4:	0783      	lsls	r3, r0, #30
 80057a6:	d1f6      	bne.n	8005796 <memchr+0x16>
 80057a8:	2a03      	cmp	r2, #3
 80057aa:	bf84      	itt	hi
 80057ac:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 80057b0:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 80057b4:	d80f      	bhi.n	80057d6 <memchr+0x56>
 80057b6:	b1ea      	cbz	r2, 80057f4 <memchr+0x74>
 80057b8:	7803      	ldrb	r3, [r0, #0]
 80057ba:	3a01      	subs	r2, #1
 80057bc:	428b      	cmp	r3, r1
 80057be:	4402      	add	r2, r0
 80057c0:	d104      	bne.n	80057cc <memchr+0x4c>
 80057c2:	e006      	b.n	80057d2 <memchr+0x52>
 80057c4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80057c8:	428b      	cmp	r3, r1
 80057ca:	d002      	beq.n	80057d2 <memchr+0x52>
 80057cc:	4290      	cmp	r0, r2
 80057ce:	d1f9      	bne.n	80057c4 <memchr+0x44>
 80057d0:	2000      	movs	r0, #0
 80057d2:	bc70      	pop	{r4, r5, r6}
 80057d4:	4770      	bx	lr
 80057d6:	4604      	mov	r4, r0
 80057d8:	3004      	adds	r0, #4
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	4073      	eors	r3, r6
 80057de:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 80057e2:	ea25 0303 	bic.w	r3, r5, r3
 80057e6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80057ea:	d105      	bne.n	80057f8 <memchr+0x78>
 80057ec:	3a04      	subs	r2, #4
 80057ee:	2a03      	cmp	r2, #3
 80057f0:	d8f1      	bhi.n	80057d6 <memchr+0x56>
 80057f2:	e7e0      	b.n	80057b6 <memchr+0x36>
 80057f4:	4610      	mov	r0, r2
 80057f6:	e7ec      	b.n	80057d2 <memchr+0x52>
 80057f8:	4620      	mov	r0, r4
 80057fa:	e7dc      	b.n	80057b6 <memchr+0x36>

080057fc <memcpy>:
 80057fc:	2a0f      	cmp	r2, #15
 80057fe:	b4f0      	push	{r4, r5, r6, r7}
 8005800:	bf98      	it	ls
 8005802:	4603      	movls	r3, r0
 8005804:	d931      	bls.n	800586a <memcpy+0x6e>
 8005806:	ea41 0300 	orr.w	r3, r1, r0
 800580a:	079b      	lsls	r3, r3, #30
 800580c:	d137      	bne.n	800587e <memcpy+0x82>
 800580e:	460c      	mov	r4, r1
 8005810:	4603      	mov	r3, r0
 8005812:	4615      	mov	r5, r2
 8005814:	6826      	ldr	r6, [r4, #0]
 8005816:	601e      	str	r6, [r3, #0]
 8005818:	6866      	ldr	r6, [r4, #4]
 800581a:	605e      	str	r6, [r3, #4]
 800581c:	68a6      	ldr	r6, [r4, #8]
 800581e:	609e      	str	r6, [r3, #8]
 8005820:	68e6      	ldr	r6, [r4, #12]
 8005822:	3d10      	subs	r5, #16
 8005824:	60de      	str	r6, [r3, #12]
 8005826:	3410      	adds	r4, #16
 8005828:	3310      	adds	r3, #16
 800582a:	2d0f      	cmp	r5, #15
 800582c:	d8f2      	bhi.n	8005814 <memcpy+0x18>
 800582e:	f1a2 0410 	sub.w	r4, r2, #16
 8005832:	f024 040f 	bic.w	r4, r4, #15
 8005836:	f002 020f 	and.w	r2, r2, #15
 800583a:	3410      	adds	r4, #16
 800583c:	2a03      	cmp	r2, #3
 800583e:	eb00 0304 	add.w	r3, r0, r4
 8005842:	4421      	add	r1, r4
 8005844:	d911      	bls.n	800586a <memcpy+0x6e>
 8005846:	1f0e      	subs	r6, r1, #4
 8005848:	461d      	mov	r5, r3
 800584a:	4614      	mov	r4, r2
 800584c:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8005850:	3c04      	subs	r4, #4
 8005852:	2c03      	cmp	r4, #3
 8005854:	f845 7b04 	str.w	r7, [r5], #4
 8005858:	d8f8      	bhi.n	800584c <memcpy+0x50>
 800585a:	1f14      	subs	r4, r2, #4
 800585c:	f024 0403 	bic.w	r4, r4, #3
 8005860:	3404      	adds	r4, #4
 8005862:	f002 0203 	and.w	r2, r2, #3
 8005866:	1909      	adds	r1, r1, r4
 8005868:	191b      	adds	r3, r3, r4
 800586a:	b132      	cbz	r2, 800587a <memcpy+0x7e>
 800586c:	3901      	subs	r1, #1
 800586e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005872:	3a01      	subs	r2, #1
 8005874:	f803 4b01 	strb.w	r4, [r3], #1
 8005878:	d1f9      	bne.n	800586e <memcpy+0x72>
 800587a:	bcf0      	pop	{r4, r5, r6, r7}
 800587c:	4770      	bx	lr
 800587e:	4603      	mov	r3, r0
 8005880:	e7f4      	b.n	800586c <memcpy+0x70>
 8005882:	bf00      	nop

08005884 <__malloc_lock>:
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop

08005888 <__malloc_unlock>:
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop

0800588c <_Balloc>:
 800588c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800588e:	b570      	push	{r4, r5, r6, lr}
 8005890:	4605      	mov	r5, r0
 8005892:	460c      	mov	r4, r1
 8005894:	b14b      	cbz	r3, 80058aa <_Balloc+0x1e>
 8005896:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800589a:	b178      	cbz	r0, 80058bc <_Balloc+0x30>
 800589c:	6802      	ldr	r2, [r0, #0]
 800589e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80058a2:	2300      	movs	r3, #0
 80058a4:	6103      	str	r3, [r0, #16]
 80058a6:	60c3      	str	r3, [r0, #12]
 80058a8:	bd70      	pop	{r4, r5, r6, pc}
 80058aa:	2104      	movs	r1, #4
 80058ac:	2221      	movs	r2, #33	; 0x21
 80058ae:	f001 fa7f 	bl	8006db0 <_calloc_r>
 80058b2:	4603      	mov	r3, r0
 80058b4:	64e8      	str	r0, [r5, #76]	; 0x4c
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d1ed      	bne.n	8005896 <_Balloc+0xa>
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
 80058bc:	2101      	movs	r1, #1
 80058be:	fa11 f604 	lsls.w	r6, r1, r4
 80058c2:	1d72      	adds	r2, r6, #5
 80058c4:	4628      	mov	r0, r5
 80058c6:	0092      	lsls	r2, r2, #2
 80058c8:	f001 fa72 	bl	8006db0 <_calloc_r>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d0f4      	beq.n	80058ba <_Balloc+0x2e>
 80058d0:	6044      	str	r4, [r0, #4]
 80058d2:	6086      	str	r6, [r0, #8]
 80058d4:	e7e5      	b.n	80058a2 <_Balloc+0x16>
 80058d6:	bf00      	nop

080058d8 <_Bfree>:
 80058d8:	b131      	cbz	r1, 80058e8 <_Bfree+0x10>
 80058da:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80058dc:	684a      	ldr	r2, [r1, #4]
 80058de:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80058e2:	6008      	str	r0, [r1, #0]
 80058e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop

080058ec <__multadd>:
 80058ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ee:	460d      	mov	r5, r1
 80058f0:	4606      	mov	r6, r0
 80058f2:	690c      	ldr	r4, [r1, #16]
 80058f4:	f101 0014 	add.w	r0, r1, #20
 80058f8:	b083      	sub	sp, #12
 80058fa:	2100      	movs	r1, #0
 80058fc:	6807      	ldr	r7, [r0, #0]
 80058fe:	fa1f fc87 	uxth.w	ip, r7
 8005902:	0c3f      	lsrs	r7, r7, #16
 8005904:	fb02 330c 	mla	r3, r2, ip, r3
 8005908:	fb02 f707 	mul.w	r7, r2, r7
 800590c:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005910:	b29b      	uxth	r3, r3
 8005912:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 8005916:	3101      	adds	r1, #1
 8005918:	f840 3b04 	str.w	r3, [r0], #4
 800591c:	0c3b      	lsrs	r3, r7, #16
 800591e:	428c      	cmp	r4, r1
 8005920:	dcec      	bgt.n	80058fc <__multadd+0x10>
 8005922:	b13b      	cbz	r3, 8005934 <__multadd+0x48>
 8005924:	68aa      	ldr	r2, [r5, #8]
 8005926:	4294      	cmp	r4, r2
 8005928:	da07      	bge.n	800593a <__multadd+0x4e>
 800592a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800592e:	3401      	adds	r4, #1
 8005930:	6153      	str	r3, [r2, #20]
 8005932:	612c      	str	r4, [r5, #16]
 8005934:	4628      	mov	r0, r5
 8005936:	b003      	add	sp, #12
 8005938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800593a:	6869      	ldr	r1, [r5, #4]
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	3101      	adds	r1, #1
 8005940:	4630      	mov	r0, r6
 8005942:	f7ff ffa3 	bl	800588c <_Balloc>
 8005946:	692a      	ldr	r2, [r5, #16]
 8005948:	3202      	adds	r2, #2
 800594a:	f105 010c 	add.w	r1, r5, #12
 800594e:	4607      	mov	r7, r0
 8005950:	0092      	lsls	r2, r2, #2
 8005952:	f100 000c 	add.w	r0, r0, #12
 8005956:	f7ff ff51 	bl	80057fc <memcpy>
 800595a:	6869      	ldr	r1, [r5, #4]
 800595c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800595e:	9b01      	ldr	r3, [sp, #4]
 8005960:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8005964:	6028      	str	r0, [r5, #0]
 8005966:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800596a:	463d      	mov	r5, r7
 800596c:	e7dd      	b.n	800592a <__multadd+0x3e>
 800596e:	bf00      	nop

08005970 <__s2b>:
 8005970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005974:	461e      	mov	r6, r3
 8005976:	f648 6339 	movw	r3, #36409	; 0x8e39
 800597a:	f106 0408 	add.w	r4, r6, #8
 800597e:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8005982:	fb83 5304 	smull	r5, r3, r3, r4
 8005986:	17e4      	asrs	r4, r4, #31
 8005988:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 800598c:	460f      	mov	r7, r1
 800598e:	2100      	movs	r1, #0
 8005990:	2b01      	cmp	r3, #1
 8005992:	4604      	mov	r4, r0
 8005994:	4690      	mov	r8, r2
 8005996:	dd05      	ble.n	80059a4 <__s2b+0x34>
 8005998:	2201      	movs	r2, #1
 800599a:	2100      	movs	r1, #0
 800599c:	0052      	lsls	r2, r2, #1
 800599e:	3101      	adds	r1, #1
 80059a0:	4293      	cmp	r3, r2
 80059a2:	dcfb      	bgt.n	800599c <__s2b+0x2c>
 80059a4:	4620      	mov	r0, r4
 80059a6:	f7ff ff71 	bl	800588c <_Balloc>
 80059aa:	9b08      	ldr	r3, [sp, #32]
 80059ac:	6143      	str	r3, [r0, #20]
 80059ae:	2301      	movs	r3, #1
 80059b0:	f1b8 0f09 	cmp.w	r8, #9
 80059b4:	4601      	mov	r1, r0
 80059b6:	6103      	str	r3, [r0, #16]
 80059b8:	dd23      	ble.n	8005a02 <__s2b+0x92>
 80059ba:	f107 0909 	add.w	r9, r7, #9
 80059be:	464d      	mov	r5, r9
 80059c0:	4447      	add	r7, r8
 80059c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059c6:	220a      	movs	r2, #10
 80059c8:	3b30      	subs	r3, #48	; 0x30
 80059ca:	4620      	mov	r0, r4
 80059cc:	f7ff ff8e 	bl	80058ec <__multadd>
 80059d0:	42bd      	cmp	r5, r7
 80059d2:	4601      	mov	r1, r0
 80059d4:	d1f5      	bne.n	80059c2 <__s2b+0x52>
 80059d6:	eb09 0708 	add.w	r7, r9, r8
 80059da:	3f08      	subs	r7, #8
 80059dc:	4546      	cmp	r6, r8
 80059de:	dd0d      	ble.n	80059fc <__s2b+0x8c>
 80059e0:	ebc8 0707 	rsb	r7, r8, r7
 80059e4:	f817 3008 	ldrb.w	r3, [r7, r8]
 80059e8:	220a      	movs	r2, #10
 80059ea:	3b30      	subs	r3, #48	; 0x30
 80059ec:	4620      	mov	r0, r4
 80059ee:	f7ff ff7d 	bl	80058ec <__multadd>
 80059f2:	f108 0801 	add.w	r8, r8, #1
 80059f6:	45b0      	cmp	r8, r6
 80059f8:	4601      	mov	r1, r0
 80059fa:	d1f3      	bne.n	80059e4 <__s2b+0x74>
 80059fc:	4608      	mov	r0, r1
 80059fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a02:	370a      	adds	r7, #10
 8005a04:	f04f 0809 	mov.w	r8, #9
 8005a08:	e7e8      	b.n	80059dc <__s2b+0x6c>
 8005a0a:	bf00      	nop

08005a0c <__hi0bits>:
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2000      	movs	r0, #0
 8005a10:	0c1a      	lsrs	r2, r3, #16
 8005a12:	d101      	bne.n	8005a18 <__hi0bits+0xc>
 8005a14:	041b      	lsls	r3, r3, #16
 8005a16:	2010      	movs	r0, #16
 8005a18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005a1c:	d101      	bne.n	8005a22 <__hi0bits+0x16>
 8005a1e:	3008      	adds	r0, #8
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005a26:	d101      	bne.n	8005a2c <__hi0bits+0x20>
 8005a28:	3004      	adds	r0, #4
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005a30:	d101      	bne.n	8005a36 <__hi0bits+0x2a>
 8005a32:	3002      	adds	r0, #2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	db02      	blt.n	8005a40 <__hi0bits+0x34>
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	d401      	bmi.n	8005a42 <__hi0bits+0x36>
 8005a3e:	2020      	movs	r0, #32
 8005a40:	4770      	bx	lr
 8005a42:	3001      	adds	r0, #1
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop

08005a48 <__lo0bits>:
 8005a48:	6803      	ldr	r3, [r0, #0]
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	f013 0007 	ands.w	r0, r3, #7
 8005a50:	d007      	beq.n	8005a62 <__lo0bits+0x1a>
 8005a52:	07d9      	lsls	r1, r3, #31
 8005a54:	d41f      	bmi.n	8005a96 <__lo0bits+0x4e>
 8005a56:	0798      	lsls	r0, r3, #30
 8005a58:	d41f      	bmi.n	8005a9a <__lo0bits+0x52>
 8005a5a:	089b      	lsrs	r3, r3, #2
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	2002      	movs	r0, #2
 8005a60:	4770      	bx	lr
 8005a62:	b299      	uxth	r1, r3
 8005a64:	b909      	cbnz	r1, 8005a6a <__lo0bits+0x22>
 8005a66:	0c1b      	lsrs	r3, r3, #16
 8005a68:	2010      	movs	r0, #16
 8005a6a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a6e:	d101      	bne.n	8005a74 <__lo0bits+0x2c>
 8005a70:	3008      	adds	r0, #8
 8005a72:	0a1b      	lsrs	r3, r3, #8
 8005a74:	0719      	lsls	r1, r3, #28
 8005a76:	d101      	bne.n	8005a7c <__lo0bits+0x34>
 8005a78:	3004      	adds	r0, #4
 8005a7a:	091b      	lsrs	r3, r3, #4
 8005a7c:	0799      	lsls	r1, r3, #30
 8005a7e:	d101      	bne.n	8005a84 <__lo0bits+0x3c>
 8005a80:	3002      	adds	r0, #2
 8005a82:	089b      	lsrs	r3, r3, #2
 8005a84:	07d9      	lsls	r1, r3, #31
 8005a86:	d404      	bmi.n	8005a92 <__lo0bits+0x4a>
 8005a88:	085b      	lsrs	r3, r3, #1
 8005a8a:	d101      	bne.n	8005a90 <__lo0bits+0x48>
 8005a8c:	2020      	movs	r0, #32
 8005a8e:	4770      	bx	lr
 8005a90:	3001      	adds	r0, #1
 8005a92:	6013      	str	r3, [r2, #0]
 8005a94:	4770      	bx	lr
 8005a96:	2000      	movs	r0, #0
 8005a98:	4770      	bx	lr
 8005a9a:	085b      	lsrs	r3, r3, #1
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	2001      	movs	r0, #1
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop

08005aa4 <__i2b>:
 8005aa4:	b510      	push	{r4, lr}
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	f7ff feef 	bl	800588c <_Balloc>
 8005aae:	2201      	movs	r2, #1
 8005ab0:	6144      	str	r4, [r0, #20]
 8005ab2:	6102      	str	r2, [r0, #16]
 8005ab4:	bd10      	pop	{r4, pc}
 8005ab6:	bf00      	nop

08005ab8 <__multiply>:
 8005ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abc:	690f      	ldr	r7, [r1, #16]
 8005abe:	6916      	ldr	r6, [r2, #16]
 8005ac0:	42b7      	cmp	r7, r6
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	460d      	mov	r5, r1
 8005ac6:	4692      	mov	sl, r2
 8005ac8:	da04      	bge.n	8005ad4 <__multiply+0x1c>
 8005aca:	463a      	mov	r2, r7
 8005acc:	4655      	mov	r5, sl
 8005ace:	4637      	mov	r7, r6
 8005ad0:	468a      	mov	sl, r1
 8005ad2:	4616      	mov	r6, r2
 8005ad4:	68ab      	ldr	r3, [r5, #8]
 8005ad6:	6869      	ldr	r1, [r5, #4]
 8005ad8:	19bc      	adds	r4, r7, r6
 8005ada:	429c      	cmp	r4, r3
 8005adc:	bfc8      	it	gt
 8005ade:	3101      	addgt	r1, #1
 8005ae0:	f7ff fed4 	bl	800588c <_Balloc>
 8005ae4:	1d21      	adds	r1, r4, #4
 8005ae6:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
 8005aea:	f100 0914 	add.w	r9, r0, #20
 8005aee:	f10b 0b04 	add.w	fp, fp, #4
 8005af2:	45d9      	cmp	r9, fp
 8005af4:	9000      	str	r0, [sp, #0]
 8005af6:	9101      	str	r1, [sp, #4]
 8005af8:	d205      	bcs.n	8005b06 <__multiply+0x4e>
 8005afa:	464b      	mov	r3, r9
 8005afc:	2200      	movs	r2, #0
 8005afe:	f843 2b04 	str.w	r2, [r3], #4
 8005b02:	459b      	cmp	fp, r3
 8005b04:	d8fb      	bhi.n	8005afe <__multiply+0x46>
 8005b06:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8005b0a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8005b0e:	f10a 0a14 	add.w	sl, sl, #20
 8005b12:	f106 0814 	add.w	r8, r6, #20
 8005b16:	3514      	adds	r5, #20
 8005b18:	3714      	adds	r7, #20
 8005b1a:	45c2      	cmp	sl, r8
 8005b1c:	d24f      	bcs.n	8005bbe <__multiply+0x106>
 8005b1e:	f8cd b008 	str.w	fp, [sp, #8]
 8005b22:	9403      	str	r4, [sp, #12]
 8005b24:	46ab      	mov	fp, r5
 8005b26:	f85a 5b04 	ldr.w	r5, [sl], #4
 8005b2a:	b2ac      	uxth	r4, r5
 8005b2c:	b1e4      	cbz	r4, 8005b68 <__multiply+0xb0>
 8005b2e:	465a      	mov	r2, fp
 8005b30:	464b      	mov	r3, r9
 8005b32:	2100      	movs	r1, #0
 8005b34:	f852 6b04 	ldr.w	r6, [r2], #4
 8005b38:	681d      	ldr	r5, [r3, #0]
 8005b3a:	b2b0      	uxth	r0, r6
 8005b3c:	fa11 f185 	uxtah	r1, r1, r5
 8005b40:	0c36      	lsrs	r6, r6, #16
 8005b42:	0c2d      	lsrs	r5, r5, #16
 8005b44:	fb04 1000 	mla	r0, r4, r0, r1
 8005b48:	fb04 5106 	mla	r1, r4, r6, r5
 8005b4c:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 8005b50:	b280      	uxth	r0, r0
 8005b52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8005b56:	0c09      	lsrs	r1, r1, #16
 8005b58:	4297      	cmp	r7, r2
 8005b5a:	461d      	mov	r5, r3
 8005b5c:	f843 0b04 	str.w	r0, [r3], #4
 8005b60:	d8e8      	bhi.n	8005b34 <__multiply+0x7c>
 8005b62:	6069      	str	r1, [r5, #4]
 8005b64:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 8005b68:	0c2d      	lsrs	r5, r5, #16
 8005b6a:	d021      	beq.n	8005bb0 <__multiply+0xf8>
 8005b6c:	f8d9 6000 	ldr.w	r6, [r9]
 8005b70:	465b      	mov	r3, fp
 8005b72:	4630      	mov	r0, r6
 8005b74:	4649      	mov	r1, r9
 8005b76:	f04f 0c00 	mov.w	ip, #0
 8005b7a:	e000      	b.n	8005b7e <__multiply+0xc6>
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	881a      	ldrh	r2, [r3, #0]
 8005b80:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
 8005b84:	fb05 cc02 	mla	ip, r5, r2, ip
 8005b88:	b2b6      	uxth	r6, r6
 8005b8a:	460a      	mov	r2, r1
 8005b8c:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 8005b90:	f842 6b04 	str.w	r6, [r2], #4
 8005b94:	f853 6b04 	ldr.w	r6, [r3], #4
 8005b98:	6848      	ldr	r0, [r1, #4]
 8005b9a:	0c36      	lsrs	r6, r6, #16
 8005b9c:	b284      	uxth	r4, r0
 8005b9e:	fb05 4606 	mla	r6, r5, r6, r4
 8005ba2:	eb06 461c 	add.w	r6, r6, ip, lsr #16
 8005ba6:	429f      	cmp	r7, r3
 8005ba8:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 8005bac:	d8e6      	bhi.n	8005b7c <__multiply+0xc4>
 8005bae:	604e      	str	r6, [r1, #4]
 8005bb0:	45d0      	cmp	r8, sl
 8005bb2:	f109 0904 	add.w	r9, r9, #4
 8005bb6:	d8b6      	bhi.n	8005b26 <__multiply+0x6e>
 8005bb8:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005bbc:	9c03      	ldr	r4, [sp, #12]
 8005bbe:	2c00      	cmp	r4, #0
 8005bc0:	dd0c      	ble.n	8005bdc <__multiply+0x124>
 8005bc2:	e89d 0006 	ldmia.w	sp, {r1, r2}
 8005bc6:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8005bca:	b93b      	cbnz	r3, 8005bdc <__multiply+0x124>
 8005bcc:	f1ab 0b04 	sub.w	fp, fp, #4
 8005bd0:	e002      	b.n	8005bd8 <__multiply+0x120>
 8005bd2:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
 8005bd6:	b90b      	cbnz	r3, 8005bdc <__multiply+0x124>
 8005bd8:	3c01      	subs	r4, #1
 8005bda:	d1fa      	bne.n	8005bd2 <__multiply+0x11a>
 8005bdc:	9a00      	ldr	r2, [sp, #0]
 8005bde:	6114      	str	r4, [r2, #16]
 8005be0:	4610      	mov	r0, r2
 8005be2:	b005      	add	sp, #20
 8005be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005be8 <__pow5mult>:
 8005be8:	f012 0303 	ands.w	r3, r2, #3
 8005bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf0:	4615      	mov	r5, r2
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	4688      	mov	r8, r1
 8005bf6:	d12d      	bne.n	8005c54 <__pow5mult+0x6c>
 8005bf8:	10ad      	asrs	r5, r5, #2
 8005bfa:	d01d      	beq.n	8005c38 <__pow5mult+0x50>
 8005bfc:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8005bfe:	b92f      	cbnz	r7, 8005c0c <__pow5mult+0x24>
 8005c00:	e031      	b.n	8005c66 <__pow5mult+0x7e>
 8005c02:	106d      	asrs	r5, r5, #1
 8005c04:	d018      	beq.n	8005c38 <__pow5mult+0x50>
 8005c06:	683e      	ldr	r6, [r7, #0]
 8005c08:	b1ce      	cbz	r6, 8005c3e <__pow5mult+0x56>
 8005c0a:	4637      	mov	r7, r6
 8005c0c:	07e8      	lsls	r0, r5, #31
 8005c0e:	d5f8      	bpl.n	8005c02 <__pow5mult+0x1a>
 8005c10:	4641      	mov	r1, r8
 8005c12:	463a      	mov	r2, r7
 8005c14:	4620      	mov	r0, r4
 8005c16:	f7ff ff4f 	bl	8005ab8 <__multiply>
 8005c1a:	f1b8 0f00 	cmp.w	r8, #0
 8005c1e:	d017      	beq.n	8005c50 <__pow5mult+0x68>
 8005c20:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005c24:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005c26:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c2a:	106d      	asrs	r5, r5, #1
 8005c2c:	f8c8 1000 	str.w	r1, [r8]
 8005c30:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 8005c34:	4680      	mov	r8, r0
 8005c36:	d1e6      	bne.n	8005c06 <__pow5mult+0x1e>
 8005c38:	4640      	mov	r0, r8
 8005c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c3e:	4639      	mov	r1, r7
 8005c40:	463a      	mov	r2, r7
 8005c42:	4620      	mov	r0, r4
 8005c44:	f7ff ff38 	bl	8005ab8 <__multiply>
 8005c48:	6038      	str	r0, [r7, #0]
 8005c4a:	6006      	str	r6, [r0, #0]
 8005c4c:	4607      	mov	r7, r0
 8005c4e:	e7dd      	b.n	8005c0c <__pow5mult+0x24>
 8005c50:	4680      	mov	r8, r0
 8005c52:	e7d6      	b.n	8005c02 <__pow5mult+0x1a>
 8005c54:	1e5e      	subs	r6, r3, #1
 8005c56:	4a09      	ldr	r2, [pc, #36]	; (8005c7c <__pow5mult+0x94>)
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8005c5e:	f7ff fe45 	bl	80058ec <__multadd>
 8005c62:	4680      	mov	r8, r0
 8005c64:	e7c8      	b.n	8005bf8 <__pow5mult+0x10>
 8005c66:	4620      	mov	r0, r4
 8005c68:	f240 2171 	movw	r1, #625	; 0x271
 8005c6c:	f7ff ff1a 	bl	8005aa4 <__i2b>
 8005c70:	2300      	movs	r3, #0
 8005c72:	64a0      	str	r0, [r4, #72]	; 0x48
 8005c74:	4607      	mov	r7, r0
 8005c76:	6003      	str	r3, [r0, #0]
 8005c78:	e7c8      	b.n	8005c0c <__pow5mult+0x24>
 8005c7a:	bf00      	nop
 8005c7c:	08007ee0 	.word	0x08007ee0

08005c80 <__lshift>:
 8005c80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c84:	4691      	mov	r9, r2
 8005c86:	690a      	ldr	r2, [r1, #16]
 8005c88:	688b      	ldr	r3, [r1, #8]
 8005c8a:	ea4f 1769 	mov.w	r7, r9, asr #5
 8005c8e:	eb07 0b02 	add.w	fp, r7, r2
 8005c92:	f10b 0501 	add.w	r5, fp, #1
 8005c96:	429d      	cmp	r5, r3
 8005c98:	460c      	mov	r4, r1
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	6849      	ldr	r1, [r1, #4]
 8005c9e:	dd03      	ble.n	8005ca8 <__lshift+0x28>
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	3101      	adds	r1, #1
 8005ca4:	429d      	cmp	r5, r3
 8005ca6:	dcfb      	bgt.n	8005ca0 <__lshift+0x20>
 8005ca8:	4630      	mov	r0, r6
 8005caa:	f7ff fdef 	bl	800588c <_Balloc>
 8005cae:	2f00      	cmp	r7, #0
 8005cb0:	f100 0314 	add.w	r3, r0, #20
 8005cb4:	dd09      	ble.n	8005cca <__lshift+0x4a>
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	4611      	mov	r1, r2
 8005cba:	3201      	adds	r2, #1
 8005cbc:	42ba      	cmp	r2, r7
 8005cbe:	f843 1b04 	str.w	r1, [r3], #4
 8005cc2:	d1fa      	bne.n	8005cba <__lshift+0x3a>
 8005cc4:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8005cc8:	3314      	adds	r3, #20
 8005cca:	6922      	ldr	r2, [r4, #16]
 8005ccc:	f019 091f 	ands.w	r9, r9, #31
 8005cd0:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8005cd4:	f104 0114 	add.w	r1, r4, #20
 8005cd8:	f10c 0c14 	add.w	ip, ip, #20
 8005cdc:	d022      	beq.n	8005d24 <__lshift+0xa4>
 8005cde:	f1c9 0a20 	rsb	sl, r9, #32
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	e000      	b.n	8005ce8 <__lshift+0x68>
 8005ce6:	463b      	mov	r3, r7
 8005ce8:	f8d1 8000 	ldr.w	r8, [r1]
 8005cec:	461f      	mov	r7, r3
 8005cee:	fa08 f809 	lsl.w	r8, r8, r9
 8005cf2:	ea48 0202 	orr.w	r2, r8, r2
 8005cf6:	f847 2b04 	str.w	r2, [r7], #4
 8005cfa:	f851 2b04 	ldr.w	r2, [r1], #4
 8005cfe:	458c      	cmp	ip, r1
 8005d00:	fa22 f20a 	lsr.w	r2, r2, sl
 8005d04:	d8ef      	bhi.n	8005ce6 <__lshift+0x66>
 8005d06:	605a      	str	r2, [r3, #4]
 8005d08:	b10a      	cbz	r2, 8005d0e <__lshift+0x8e>
 8005d0a:	f10b 0502 	add.w	r5, fp, #2
 8005d0e:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8005d10:	6862      	ldr	r2, [r4, #4]
 8005d12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d16:	3d01      	subs	r5, #1
 8005d18:	6105      	str	r5, [r0, #16]
 8005d1a:	6021      	str	r1, [r4, #0]
 8005d1c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d24:	f851 2b04 	ldr.w	r2, [r1], #4
 8005d28:	458c      	cmp	ip, r1
 8005d2a:	f843 2b04 	str.w	r2, [r3], #4
 8005d2e:	d9ee      	bls.n	8005d0e <__lshift+0x8e>
 8005d30:	f851 2b04 	ldr.w	r2, [r1], #4
 8005d34:	458c      	cmp	ip, r1
 8005d36:	f843 2b04 	str.w	r2, [r3], #4
 8005d3a:	d8f3      	bhi.n	8005d24 <__lshift+0xa4>
 8005d3c:	e7e7      	b.n	8005d0e <__lshift+0x8e>
 8005d3e:	bf00      	nop

08005d40 <__mcmp>:
 8005d40:	4603      	mov	r3, r0
 8005d42:	690a      	ldr	r2, [r1, #16]
 8005d44:	6900      	ldr	r0, [r0, #16]
 8005d46:	1a80      	subs	r0, r0, r2
 8005d48:	b430      	push	{r4, r5}
 8005d4a:	d111      	bne.n	8005d70 <__mcmp+0x30>
 8005d4c:	3204      	adds	r2, #4
 8005d4e:	0094      	lsls	r4, r2, #2
 8005d50:	191a      	adds	r2, r3, r4
 8005d52:	1909      	adds	r1, r1, r4
 8005d54:	3314      	adds	r3, #20
 8005d56:	3204      	adds	r2, #4
 8005d58:	3104      	adds	r1, #4
 8005d5a:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8005d5e:	f851 4c04 	ldr.w	r4, [r1, #-4]
 8005d62:	3a04      	subs	r2, #4
 8005d64:	42a5      	cmp	r5, r4
 8005d66:	f1a1 0104 	sub.w	r1, r1, #4
 8005d6a:	d103      	bne.n	8005d74 <__mcmp+0x34>
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d3f4      	bcc.n	8005d5a <__mcmp+0x1a>
 8005d70:	bc30      	pop	{r4, r5}
 8005d72:	4770      	bx	lr
 8005d74:	bf38      	it	cc
 8005d76:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
 8005d7a:	d3f9      	bcc.n	8005d70 <__mcmp+0x30>
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	e7f7      	b.n	8005d70 <__mcmp+0x30>

08005d80 <__mdiff>:
 8005d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d84:	460c      	mov	r4, r1
 8005d86:	4606      	mov	r6, r0
 8005d88:	4611      	mov	r1, r2
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	4615      	mov	r5, r2
 8005d8e:	f7ff ffd7 	bl	8005d40 <__mcmp>
 8005d92:	1e07      	subs	r7, r0, #0
 8005d94:	d058      	beq.n	8005e48 <__mdiff+0xc8>
 8005d96:	db52      	blt.n	8005e3e <__mdiff+0xbe>
 8005d98:	2700      	movs	r7, #0
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	6861      	ldr	r1, [r4, #4]
 8005d9e:	f7ff fd75 	bl	800588c <_Balloc>
 8005da2:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8005da6:	692b      	ldr	r3, [r5, #16]
 8005da8:	60c7      	str	r7, [r0, #12]
 8005daa:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 8005dae:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8005db2:	3714      	adds	r7, #20
 8005db4:	f108 0814 	add.w	r8, r8, #20
 8005db8:	3414      	adds	r4, #20
 8005dba:	3514      	adds	r5, #20
 8005dbc:	f100 0914 	add.w	r9, r0, #20
 8005dc0:	2600      	movs	r6, #0
 8005dc2:	f854 3b04 	ldr.w	r3, [r4], #4
 8005dc6:	f855 2b04 	ldr.w	r2, [r5], #4
 8005dca:	fa16 f183 	uxtah	r1, r6, r3
 8005dce:	fa1f fa82 	uxth.w	sl, r2
 8005dd2:	0c12      	lsrs	r2, r2, #16
 8005dd4:	ebc2 4613 	rsb	r6, r2, r3, lsr #16
 8005dd8:	ebca 0101 	rsb	r1, sl, r1
 8005ddc:	eb06 4621 	add.w	r6, r6, r1, asr #16
 8005de0:	464b      	mov	r3, r9
 8005de2:	b289      	uxth	r1, r1
 8005de4:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8005de8:	f843 1b04 	str.w	r1, [r3], #4
 8005dec:	1436      	asrs	r6, r6, #16
 8005dee:	45a8      	cmp	r8, r5
 8005df0:	4622      	mov	r2, r4
 8005df2:	4699      	mov	r9, r3
 8005df4:	d8e5      	bhi.n	8005dc2 <__mdiff+0x42>
 8005df6:	42a7      	cmp	r7, r4
 8005df8:	4698      	mov	r8, r3
 8005dfa:	d914      	bls.n	8005e26 <__mdiff+0xa6>
 8005dfc:	f852 5b04 	ldr.w	r5, [r2], #4
 8005e00:	fa16 f685 	uxtah	r6, r6, r5
 8005e04:	0c2d      	lsrs	r5, r5, #16
 8005e06:	eb05 4526 	add.w	r5, r5, r6, asr #16
 8005e0a:	b2b6      	uxth	r6, r6
 8005e0c:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 8005e10:	142e      	asrs	r6, r5, #16
 8005e12:	4297      	cmp	r7, r2
 8005e14:	f843 1b04 	str.w	r1, [r3], #4
 8005e18:	d8f0      	bhi.n	8005dfc <__mdiff+0x7c>
 8005e1a:	43e3      	mvns	r3, r4
 8005e1c:	19db      	adds	r3, r3, r7
 8005e1e:	f023 0303 	bic.w	r3, r3, #3
 8005e22:	3304      	adds	r3, #4
 8005e24:	4443      	add	r3, r8
 8005e26:	b931      	cbnz	r1, 8005e36 <__mdiff+0xb6>
 8005e28:	3b04      	subs	r3, #4
 8005e2a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005e2e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8005e32:	2a00      	cmp	r2, #0
 8005e34:	d0f9      	beq.n	8005e2a <__mdiff+0xaa>
 8005e36:	f8c0 c010 	str.w	ip, [r0, #16]
 8005e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3e:	4623      	mov	r3, r4
 8005e40:	2701      	movs	r7, #1
 8005e42:	462c      	mov	r4, r5
 8005e44:	461d      	mov	r5, r3
 8005e46:	e7a8      	b.n	8005d9a <__mdiff+0x1a>
 8005e48:	4630      	mov	r0, r6
 8005e4a:	4639      	mov	r1, r7
 8005e4c:	f7ff fd1e 	bl	800588c <_Balloc>
 8005e50:	2301      	movs	r3, #1
 8005e52:	6103      	str	r3, [r0, #16]
 8005e54:	6147      	str	r7, [r0, #20]
 8005e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e5a:	bf00      	nop

08005e5c <__ulp>:
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8005e62:	400b      	ands	r3, r1
 8005e64:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	dd02      	ble.n	8005e72 <__ulp+0x16>
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	2000      	movs	r0, #0
 8005e70:	4770      	bx	lr
 8005e72:	425b      	negs	r3, r3
 8005e74:	151b      	asrs	r3, r3, #20
 8005e76:	2100      	movs	r1, #0
 8005e78:	2b13      	cmp	r3, #19
 8005e7a:	dd0b      	ble.n	8005e94 <__ulp+0x38>
 8005e7c:	2b32      	cmp	r3, #50	; 0x32
 8005e7e:	dd02      	ble.n	8005e86 <__ulp+0x2a>
 8005e80:	2301      	movs	r3, #1
 8005e82:	4618      	mov	r0, r3
 8005e84:	4770      	bx	lr
 8005e86:	2201      	movs	r2, #1
 8005e88:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8005e8c:	fa12 f303 	lsls.w	r3, r2, r3
 8005e90:	4618      	mov	r0, r3
 8005e92:	4770      	bx	lr
 8005e94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005e98:	fa52 f103 	asrs.w	r1, r2, r3
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	4770      	bx	lr

08005ea0 <__b2d>:
 8005ea0:	6902      	ldr	r2, [r0, #16]
 8005ea2:	3204      	adds	r2, #4
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8005eaa:	4603      	mov	r3, r0
 8005eac:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	460f      	mov	r7, r1
 8005eb4:	f103 0614 	add.w	r6, r3, #20
 8005eb8:	f7ff fda8 	bl	8005a0c <__hi0bits>
 8005ebc:	f1c0 0320 	rsb	r3, r0, #32
 8005ec0:	280a      	cmp	r0, #10
 8005ec2:	603b      	str	r3, [r7, #0]
 8005ec4:	4623      	mov	r3, r4
 8005ec6:	dc14      	bgt.n	8005ef2 <__b2d+0x52>
 8005ec8:	f1c0 010b 	rsb	r1, r0, #11
 8005ecc:	fa35 f701 	lsrs.w	r7, r5, r1
 8005ed0:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 8005ed4:	42a6      	cmp	r6, r4
 8005ed6:	f447 1340 	orr.w	r3, r7, #3145728	; 0x300000
 8005eda:	d22e      	bcs.n	8005f3a <__b2d+0x9a>
 8005edc:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8005ee0:	fa34 f101 	lsrs.w	r1, r4, r1
 8005ee4:	3015      	adds	r0, #21
 8005ee6:	4085      	lsls	r5, r0
 8005ee8:	ea41 0205 	orr.w	r2, r1, r5
 8005eec:	4610      	mov	r0, r2
 8005eee:	4619      	mov	r1, r3
 8005ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	42a6      	cmp	r6, r4
 8005ef6:	d202      	bcs.n	8005efe <__b2d+0x5e>
 8005ef8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8005efc:	3c04      	subs	r4, #4
 8005efe:	f1b0 070b 	subs.w	r7, r0, #11
 8005f02:	bf02      	ittt	eq
 8005f04:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
 8005f08:	f445 1340 	orreq.w	r3, r5, #3145728	; 0x300000
 8005f0c:	460a      	moveq	r2, r1
 8005f0e:	d0ed      	beq.n	8005eec <__b2d+0x4c>
 8005f10:	40bd      	lsls	r5, r7
 8005f12:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 8005f16:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 8005f1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005f1e:	fa21 fc00 	lsr.w	ip, r1, r0
 8005f22:	42b4      	cmp	r4, r6
 8005f24:	ea45 030c 	orr.w	r3, r5, ip
 8005f28:	d909      	bls.n	8005f3e <__b2d+0x9e>
 8005f2a:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8005f2e:	fa34 f000 	lsrs.w	r0, r4, r0
 8005f32:	40b9      	lsls	r1, r7
 8005f34:	ea40 0201 	orr.w	r2, r0, r1
 8005f38:	e7d8      	b.n	8005eec <__b2d+0x4c>
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	e7d2      	b.n	8005ee4 <__b2d+0x44>
 8005f3e:	2000      	movs	r0, #0
 8005f40:	e7f7      	b.n	8005f32 <__b2d+0x92>
 8005f42:	bf00      	nop

08005f44 <__d2b>:
 8005f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	461d      	mov	r5, r3
 8005f4e:	4614      	mov	r4, r2
 8005f50:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005f52:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005f54:	f7ff fc9a 	bl	800588c <_Balloc>
 8005f58:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 8005f5c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f60:	f3c5 590a 	ubfx	r9, r5, #20, #11
 8005f64:	4680      	mov	r8, r0
 8005f66:	9301      	str	r3, [sp, #4]
 8005f68:	f1b9 0f00 	cmp.w	r9, #0
 8005f6c:	d002      	beq.n	8005f74 <__d2b+0x30>
 8005f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f72:	9301      	str	r3, [sp, #4]
 8005f74:	2c00      	cmp	r4, #0
 8005f76:	d025      	beq.n	8005fc4 <__d2b+0x80>
 8005f78:	a802      	add	r0, sp, #8
 8005f7a:	f840 4d08 	str.w	r4, [r0, #-8]!
 8005f7e:	4668      	mov	r0, sp
 8005f80:	f7ff fd62 	bl	8005a48 <__lo0bits>
 8005f84:	9b01      	ldr	r3, [sp, #4]
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d132      	bne.n	8005ff0 <__d2b+0xac>
 8005f8a:	9a00      	ldr	r2, [sp, #0]
 8005f8c:	f8c8 2014 	str.w	r2, [r8, #20]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	bf0c      	ite	eq
 8005f94:	2401      	moveq	r4, #1
 8005f96:	2402      	movne	r4, #2
 8005f98:	f8c8 3018 	str.w	r3, [r8, #24]
 8005f9c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005fa0:	f1b9 0f00 	cmp.w	r9, #0
 8005fa4:	d11b      	bne.n	8005fde <__d2b+0x9a>
 8005fa6:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8005faa:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 8005fae:	6910      	ldr	r0, [r2, #16]
 8005fb0:	603b      	str	r3, [r7, #0]
 8005fb2:	f7ff fd2b 	bl	8005a0c <__hi0bits>
 8005fb6:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8005fba:	6030      	str	r0, [r6, #0]
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	b003      	add	sp, #12
 8005fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fc4:	a801      	add	r0, sp, #4
 8005fc6:	f7ff fd3f 	bl	8005a48 <__lo0bits>
 8005fca:	9b01      	ldr	r3, [sp, #4]
 8005fcc:	2401      	movs	r4, #1
 8005fce:	f8c8 3014 	str.w	r3, [r8, #20]
 8005fd2:	f8c8 4010 	str.w	r4, [r8, #16]
 8005fd6:	3020      	adds	r0, #32
 8005fd8:	f1b9 0f00 	cmp.w	r9, #0
 8005fdc:	d0e3      	beq.n	8005fa6 <__d2b+0x62>
 8005fde:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 8005fe2:	eb09 0300 	add.w	r3, r9, r0
 8005fe6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005fea:	603b      	str	r3, [r7, #0]
 8005fec:	6030      	str	r0, [r6, #0]
 8005fee:	e7e5      	b.n	8005fbc <__d2b+0x78>
 8005ff0:	f1c0 0220 	rsb	r2, r0, #32
 8005ff4:	9900      	ldr	r1, [sp, #0]
 8005ff6:	fa13 f202 	lsls.w	r2, r3, r2
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	40c3      	lsrs	r3, r0
 8005ffe:	f8c8 2014 	str.w	r2, [r8, #20]
 8006002:	9301      	str	r3, [sp, #4]
 8006004:	e7c4      	b.n	8005f90 <__d2b+0x4c>
 8006006:	bf00      	nop

08006008 <__ratio>:
 8006008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800600c:	b083      	sub	sp, #12
 800600e:	460d      	mov	r5, r1
 8006010:	4669      	mov	r1, sp
 8006012:	4604      	mov	r4, r0
 8006014:	f7ff ff44 	bl	8005ea0 <__b2d>
 8006018:	4689      	mov	r9, r1
 800601a:	4680      	mov	r8, r0
 800601c:	a901      	add	r1, sp, #4
 800601e:	4628      	mov	r0, r5
 8006020:	f7ff ff3e 	bl	8005ea0 <__b2d>
 8006024:	460f      	mov	r7, r1
 8006026:	e89d 000a 	ldmia.w	sp, {r1, r3}
 800602a:	692a      	ldr	r2, [r5, #16]
 800602c:	6924      	ldr	r4, [r4, #16]
 800602e:	1acb      	subs	r3, r1, r3
 8006030:	1aa4      	subs	r4, r4, r2
 8006032:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8006036:	2c00      	cmp	r4, #0
 8006038:	4606      	mov	r6, r0
 800603a:	464b      	mov	r3, r9
 800603c:	4639      	mov	r1, r7
 800603e:	bfcb      	itete	gt
 8006040:	eb09 5304 	addgt.w	r3, r9, r4, lsl #20
 8006044:	eba7 5104 	suble.w	r1, r7, r4, lsl #20
 8006048:	4699      	movgt	r9, r3
 800604a:	460f      	movle	r7, r1
 800604c:	bfcc      	ite	gt
 800604e:	46c0      	nopgt			; (mov r8, r8)
 8006050:	4636      	movle	r6, r6
 8006052:	4640      	mov	r0, r8
 8006054:	4649      	mov	r1, r9
 8006056:	4632      	mov	r2, r6
 8006058:	463b      	mov	r3, r7
 800605a:	f001 fc53 	bl	8007904 <__aeabi_ddiv>
 800605e:	b003      	add	sp, #12
 8006060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006064 <_mprec_log10>:
 8006064:	b510      	push	{r4, lr}
 8006066:	4604      	mov	r4, r0
 8006068:	2100      	movs	r1, #0
 800606a:	2000      	movs	r0, #0
 800606c:	2c17      	cmp	r4, #23
 800606e:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8006072:	dd08      	ble.n	8006086 <_mprec_log10+0x22>
 8006074:	2300      	movs	r3, #0
 8006076:	2200      	movs	r2, #0
 8006078:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800607c:	f001 fb18 	bl	80076b0 <__aeabi_dmul>
 8006080:	3c01      	subs	r4, #1
 8006082:	d1f7      	bne.n	8006074 <_mprec_log10+0x10>
 8006084:	bd10      	pop	{r4, pc}
 8006086:	4b03      	ldr	r3, [pc, #12]	; (8006094 <_mprec_log10+0x30>)
 8006088:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800608c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8006090:	bd10      	pop	{r4, pc}
 8006092:	bf00      	nop
 8006094:	08007ee0 	.word	0x08007ee0

08006098 <__copybits>:
 8006098:	6913      	ldr	r3, [r2, #16]
 800609a:	3901      	subs	r1, #1
 800609c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80060a0:	1149      	asrs	r1, r1, #5
 80060a2:	b470      	push	{r4, r5, r6}
 80060a4:	3314      	adds	r3, #20
 80060a6:	f102 0414 	add.w	r4, r2, #20
 80060aa:	3101      	adds	r1, #1
 80060ac:	429c      	cmp	r4, r3
 80060ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80060b2:	d20c      	bcs.n	80060ce <__copybits+0x36>
 80060b4:	4605      	mov	r5, r0
 80060b6:	f854 6b04 	ldr.w	r6, [r4], #4
 80060ba:	42a3      	cmp	r3, r4
 80060bc:	f845 6b04 	str.w	r6, [r5], #4
 80060c0:	d8f9      	bhi.n	80060b6 <__copybits+0x1e>
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	3b15      	subs	r3, #21
 80060c6:	f023 0303 	bic.w	r3, r3, #3
 80060ca:	3304      	adds	r3, #4
 80060cc:	18c0      	adds	r0, r0, r3
 80060ce:	4281      	cmp	r1, r0
 80060d0:	d904      	bls.n	80060dc <__copybits+0x44>
 80060d2:	2300      	movs	r3, #0
 80060d4:	f840 3b04 	str.w	r3, [r0], #4
 80060d8:	4281      	cmp	r1, r0
 80060da:	d8fb      	bhi.n	80060d4 <__copybits+0x3c>
 80060dc:	bc70      	pop	{r4, r5, r6}
 80060de:	4770      	bx	lr

080060e0 <__any_on>:
 80060e0:	6902      	ldr	r2, [r0, #16]
 80060e2:	114b      	asrs	r3, r1, #5
 80060e4:	429a      	cmp	r2, r3
 80060e6:	b410      	push	{r4}
 80060e8:	db01      	blt.n	80060ee <__any_on+0xe>
 80060ea:	461a      	mov	r2, r3
 80060ec:	dc13      	bgt.n	8006116 <__any_on+0x36>
 80060ee:	3204      	adds	r2, #4
 80060f0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80060f4:	f100 0114 	add.w	r1, r0, #20
 80060f8:	1d1c      	adds	r4, r3, #4
 80060fa:	42a1      	cmp	r1, r4
 80060fc:	d218      	bcs.n	8006130 <__any_on+0x50>
 80060fe:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8006102:	b92a      	cbnz	r2, 8006110 <__any_on+0x30>
 8006104:	4299      	cmp	r1, r3
 8006106:	d213      	bcs.n	8006130 <__any_on+0x50>
 8006108:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800610c:	2a00      	cmp	r2, #0
 800610e:	d0f9      	beq.n	8006104 <__any_on+0x24>
 8006110:	2001      	movs	r0, #1
 8006112:	bc10      	pop	{r4}
 8006114:	4770      	bx	lr
 8006116:	f011 011f 	ands.w	r1, r1, #31
 800611a:	d0e8      	beq.n	80060ee <__any_on+0xe>
 800611c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	fa33 f401 	lsrs.w	r4, r3, r1
 8006126:	fa14 f101 	lsls.w	r1, r4, r1
 800612a:	4299      	cmp	r1, r3
 800612c:	d1f0      	bne.n	8006110 <__any_on+0x30>
 800612e:	e7de      	b.n	80060ee <__any_on+0xe>
 8006130:	2000      	movs	r0, #0
 8006132:	e7ee      	b.n	8006112 <__any_on+0x32>

08006134 <__fpclassifyd>:
 8006134:	ea50 0201 	orrs.w	r2, r0, r1
 8006138:	b410      	push	{r4}
 800613a:	460b      	mov	r3, r1
 800613c:	d102      	bne.n	8006144 <__fpclassifyd+0x10>
 800613e:	2002      	movs	r0, #2
 8006140:	bc10      	pop	{r4}
 8006142:	4770      	bx	lr
 8006144:	f1d0 0101 	rsbs	r1, r0, #1
 8006148:	bf38      	it	cc
 800614a:	2100      	movcc	r1, #0
 800614c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006150:	bf08      	it	eq
 8006152:	2800      	cmpeq	r0, #0
 8006154:	d0f3      	beq.n	800613e <__fpclassifyd+0xa>
 8006156:	f103 44ff 	add.w	r4, r3, #2139095040	; 0x7f800000
 800615a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800615e:	f504 04e0 	add.w	r4, r4, #7340032	; 0x700000
 8006162:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 8006166:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 800616a:	4290      	cmp	r0, r2
 800616c:	bf88      	it	hi
 800616e:	4294      	cmphi	r4, r2
 8006170:	d801      	bhi.n	8006176 <__fpclassifyd+0x42>
 8006172:	2004      	movs	r0, #4
 8006174:	e7e4      	b.n	8006140 <__fpclassifyd+0xc>
 8006176:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 800617a:	2003      	movs	r0, #3
 800617c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006180:	bf28      	it	cs
 8006182:	f5b2 1f80 	cmpcs.w	r2, #1048576	; 0x100000
 8006186:	d3db      	bcc.n	8006140 <__fpclassifyd+0xc>
 8006188:	2200      	movs	r2, #0
 800618a:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800618e:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8006192:	bf18      	it	ne
 8006194:	4293      	cmpne	r3, r2
 8006196:	bf14      	ite	ne
 8006198:	2300      	movne	r3, #0
 800619a:	2301      	moveq	r3, #1
 800619c:	ea01 0003 	and.w	r0, r1, r3
 80061a0:	e7ce      	b.n	8006140 <__fpclassifyd+0xc>
 80061a2:	bf00      	nop

080061a4 <_sbrk_r>:
 80061a4:	b538      	push	{r3, r4, r5, lr}
 80061a6:	4c07      	ldr	r4, [pc, #28]	; (80061c4 <_sbrk_r+0x20>)
 80061a8:	2300      	movs	r3, #0
 80061aa:	4605      	mov	r5, r0
 80061ac:	4608      	mov	r0, r1
 80061ae:	6023      	str	r3, [r4, #0]
 80061b0:	f7fc fbde 	bl	8002970 <_sbrk>
 80061b4:	1c43      	adds	r3, r0, #1
 80061b6:	d000      	beq.n	80061ba <_sbrk_r+0x16>
 80061b8:	bd38      	pop	{r3, r4, r5, pc}
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0fb      	beq.n	80061b8 <_sbrk_r+0x14>
 80061c0:	602b      	str	r3, [r5, #0]
 80061c2:	bd38      	pop	{r3, r4, r5, pc}
 80061c4:	20001628 	.word	0x20001628

080061c8 <strcmp>:
 80061c8:	ea80 0201 	eor.w	r2, r0, r1
 80061cc:	f012 0f03 	tst.w	r2, #3
 80061d0:	d13a      	bne.n	8006248 <strcmp_unaligned>
 80061d2:	f010 0203 	ands.w	r2, r0, #3
 80061d6:	f020 0003 	bic.w	r0, r0, #3
 80061da:	f021 0103 	bic.w	r1, r1, #3
 80061de:	f850 cb04 	ldr.w	ip, [r0], #4
 80061e2:	bf08      	it	eq
 80061e4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80061e8:	d00d      	beq.n	8006206 <strcmp+0x3e>
 80061ea:	f082 0203 	eor.w	r2, r2, #3
 80061ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80061f2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80061f6:	fa23 f202 	lsr.w	r2, r3, r2
 80061fa:	f851 3b04 	ldr.w	r3, [r1], #4
 80061fe:	ea4c 0c02 	orr.w	ip, ip, r2
 8006202:	ea43 0302 	orr.w	r3, r3, r2
 8006206:	bf00      	nop
 8006208:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 800620c:	459c      	cmp	ip, r3
 800620e:	bf01      	itttt	eq
 8006210:	ea22 020c 	biceq.w	r2, r2, ip
 8006214:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8006218:	f850 cb04 	ldreq.w	ip, [r0], #4
 800621c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006220:	d0f2      	beq.n	8006208 <strcmp+0x40>
 8006222:	ea4f 600c 	mov.w	r0, ip, lsl #24
 8006226:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800622a:	2801      	cmp	r0, #1
 800622c:	bf28      	it	cs
 800622e:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8006232:	bf08      	it	eq
 8006234:	0a1b      	lsreq	r3, r3, #8
 8006236:	d0f4      	beq.n	8006222 <strcmp+0x5a>
 8006238:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800623c:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8006240:	eba0 0003 	sub.w	r0, r0, r3
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop

08006248 <strcmp_unaligned>:
 8006248:	f010 0f03 	tst.w	r0, #3
 800624c:	d00a      	beq.n	8006264 <strcmp_unaligned+0x1c>
 800624e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006252:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006256:	2a01      	cmp	r2, #1
 8006258:	bf28      	it	cs
 800625a:	429a      	cmpcs	r2, r3
 800625c:	d0f4      	beq.n	8006248 <strcmp_unaligned>
 800625e:	eba2 0003 	sub.w	r0, r2, r3
 8006262:	4770      	bx	lr
 8006264:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8006268:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800626c:	f04f 0201 	mov.w	r2, #1
 8006270:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8006274:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8006278:	f001 0c03 	and.w	ip, r1, #3
 800627c:	f021 0103 	bic.w	r1, r1, #3
 8006280:	f850 4b04 	ldr.w	r4, [r0], #4
 8006284:	f851 5b04 	ldr.w	r5, [r1], #4
 8006288:	f1bc 0f02 	cmp.w	ip, #2
 800628c:	d026      	beq.n	80062dc <strcmp_unaligned+0x94>
 800628e:	d84b      	bhi.n	8006328 <strcmp_unaligned+0xe0>
 8006290:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 8006294:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8006298:	eba4 0302 	sub.w	r3, r4, r2
 800629c:	ea23 0304 	bic.w	r3, r3, r4
 80062a0:	d10d      	bne.n	80062be <strcmp_unaligned+0x76>
 80062a2:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 80062a6:	bf08      	it	eq
 80062a8:	f851 5b04 	ldreq.w	r5, [r1], #4
 80062ac:	d10a      	bne.n	80062c4 <strcmp_unaligned+0x7c>
 80062ae:	ea8c 0c04 	eor.w	ip, ip, r4
 80062b2:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 80062b6:	d10c      	bne.n	80062d2 <strcmp_unaligned+0x8a>
 80062b8:	f850 4b04 	ldr.w	r4, [r0], #4
 80062bc:	e7e8      	b.n	8006290 <strcmp_unaligned+0x48>
 80062be:	ea4f 2515 	mov.w	r5, r5, lsr #8
 80062c2:	e05c      	b.n	800637e <strcmp_unaligned+0x136>
 80062c4:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 80062c8:	d152      	bne.n	8006370 <strcmp_unaligned+0x128>
 80062ca:	780d      	ldrb	r5, [r1, #0]
 80062cc:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 80062d0:	e055      	b.n	800637e <strcmp_unaligned+0x136>
 80062d2:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 80062d6:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 80062da:	e050      	b.n	800637e <strcmp_unaligned+0x136>
 80062dc:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 80062e0:	eba4 0302 	sub.w	r3, r4, r2
 80062e4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80062e8:	ea23 0304 	bic.w	r3, r3, r4
 80062ec:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 80062f0:	d117      	bne.n	8006322 <strcmp_unaligned+0xda>
 80062f2:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 80062f6:	bf08      	it	eq
 80062f8:	f851 5b04 	ldreq.w	r5, [r1], #4
 80062fc:	d107      	bne.n	800630e <strcmp_unaligned+0xc6>
 80062fe:	ea8c 0c04 	eor.w	ip, ip, r4
 8006302:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 8006306:	d108      	bne.n	800631a <strcmp_unaligned+0xd2>
 8006308:	f850 4b04 	ldr.w	r4, [r0], #4
 800630c:	e7e6      	b.n	80062dc <strcmp_unaligned+0x94>
 800630e:	041b      	lsls	r3, r3, #16
 8006310:	d12e      	bne.n	8006370 <strcmp_unaligned+0x128>
 8006312:	880d      	ldrh	r5, [r1, #0]
 8006314:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006318:	e031      	b.n	800637e <strcmp_unaligned+0x136>
 800631a:	ea4f 4505 	mov.w	r5, r5, lsl #16
 800631e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006322:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8006326:	e02a      	b.n	800637e <strcmp_unaligned+0x136>
 8006328:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 800632c:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8006330:	eba4 0302 	sub.w	r3, r4, r2
 8006334:	ea23 0304 	bic.w	r3, r3, r4
 8006338:	d10d      	bne.n	8006356 <strcmp_unaligned+0x10e>
 800633a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800633e:	bf08      	it	eq
 8006340:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006344:	d10a      	bne.n	800635c <strcmp_unaligned+0x114>
 8006346:	ea8c 0c04 	eor.w	ip, ip, r4
 800634a:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 800634e:	d10a      	bne.n	8006366 <strcmp_unaligned+0x11e>
 8006350:	f850 4b04 	ldr.w	r4, [r0], #4
 8006354:	e7e8      	b.n	8006328 <strcmp_unaligned+0xe0>
 8006356:	ea4f 6515 	mov.w	r5, r5, lsr #24
 800635a:	e010      	b.n	800637e <strcmp_unaligned+0x136>
 800635c:	f014 0fff 	tst.w	r4, #255	; 0xff
 8006360:	d006      	beq.n	8006370 <strcmp_unaligned+0x128>
 8006362:	f851 5b04 	ldr.w	r5, [r1], #4
 8006366:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 800636a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800636e:	e006      	b.n	800637e <strcmp_unaligned+0x136>
 8006370:	f04f 0000 	mov.w	r0, #0
 8006374:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006378:	f85d 5b04 	ldr.w	r5, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 8006382:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 8006386:	2801      	cmp	r0, #1
 8006388:	bf28      	it	cs
 800638a:	4290      	cmpcs	r0, r2
 800638c:	bf04      	itt	eq
 800638e:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 8006392:	0a2d      	lsreq	r5, r5, #8
 8006394:	d0f3      	beq.n	800637e <strcmp_unaligned+0x136>
 8006396:	eba2 0000 	sub.w	r0, r2, r0
 800639a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800639e:	f85d 5b04 	ldr.w	r5, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <strlen>:
 80063a4:	f020 0103 	bic.w	r1, r0, #3
 80063a8:	f010 0003 	ands.w	r0, r0, #3
 80063ac:	f1c0 0000 	rsb	r0, r0, #0
 80063b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80063b4:	f100 0c04 	add.w	ip, r0, #4
 80063b8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80063bc:	f06f 0200 	mvn.w	r2, #0
 80063c0:	bf1c      	itt	ne
 80063c2:	fa22 f20c 	lsrne.w	r2, r2, ip
 80063c6:	4313      	orrne	r3, r2
 80063c8:	f04f 0c01 	mov.w	ip, #1
 80063cc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80063d0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80063d4:	eba3 020c 	sub.w	r2, r3, ip
 80063d8:	ea22 0203 	bic.w	r2, r2, r3
 80063dc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80063e0:	bf04      	itt	eq
 80063e2:	f851 3b04 	ldreq.w	r3, [r1], #4
 80063e6:	3004      	addeq	r0, #4
 80063e8:	d0f4      	beq.n	80063d4 <strlen+0x30>
 80063ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80063ee:	bf1f      	itttt	ne
 80063f0:	3001      	addne	r0, #1
 80063f2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 80063f6:	3001      	addne	r0, #1
 80063f8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 80063fc:	bf18      	it	ne
 80063fe:	3001      	addne	r0, #1
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop

08006404 <__ssprint_r>:
 8006404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006408:	b083      	sub	sp, #12
 800640a:	4691      	mov	r9, r2
 800640c:	9001      	str	r0, [sp, #4]
 800640e:	6890      	ldr	r0, [r2, #8]
 8006410:	6817      	ldr	r7, [r2, #0]
 8006412:	460d      	mov	r5, r1
 8006414:	2800      	cmp	r0, #0
 8006416:	d072      	beq.n	80064fe <__ssprint_r+0xfa>
 8006418:	f04f 0a00 	mov.w	sl, #0
 800641c:	6808      	ldr	r0, [r1, #0]
 800641e:	688b      	ldr	r3, [r1, #8]
 8006420:	4654      	mov	r4, sl
 8006422:	2c00      	cmp	r4, #0
 8006424:	d048      	beq.n	80064b8 <__ssprint_r+0xb4>
 8006426:	429c      	cmp	r4, r3
 8006428:	461e      	mov	r6, r3
 800642a:	4698      	mov	r8, r3
 800642c:	bf3c      	itt	cc
 800642e:	4626      	movcc	r6, r4
 8006430:	46a0      	movcc	r8, r4
 8006432:	d331      	bcc.n	8006498 <__ssprint_r+0x94>
 8006434:	89ab      	ldrh	r3, [r5, #12]
 8006436:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800643a:	d02d      	beq.n	8006498 <__ssprint_r+0x94>
 800643c:	696e      	ldr	r6, [r5, #20]
 800643e:	6929      	ldr	r1, [r5, #16]
 8006440:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006444:	ebc1 0800 	rsb	r8, r1, r0
 8006448:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800644c:	1c60      	adds	r0, r4, #1
 800644e:	1076      	asrs	r6, r6, #1
 8006450:	4440      	add	r0, r8
 8006452:	4286      	cmp	r6, r0
 8006454:	4632      	mov	r2, r6
 8006456:	bf3c      	itt	cc
 8006458:	4606      	movcc	r6, r0
 800645a:	4632      	movcc	r2, r6
 800645c:	055b      	lsls	r3, r3, #21
 800645e:	9801      	ldr	r0, [sp, #4]
 8006460:	d52f      	bpl.n	80064c2 <__ssprint_r+0xbe>
 8006462:	4611      	mov	r1, r2
 8006464:	f7fe fed8 	bl	8005218 <_malloc_r>
 8006468:	4683      	mov	fp, r0
 800646a:	2800      	cmp	r0, #0
 800646c:	d032      	beq.n	80064d4 <__ssprint_r+0xd0>
 800646e:	6929      	ldr	r1, [r5, #16]
 8006470:	4642      	mov	r2, r8
 8006472:	f7ff f9c3 	bl	80057fc <memcpy>
 8006476:	89ab      	ldrh	r3, [r5, #12]
 8006478:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800647c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006480:	81ab      	strh	r3, [r5, #12]
 8006482:	ebc8 0306 	rsb	r3, r8, r6
 8006486:	eb0b 0008 	add.w	r0, fp, r8
 800648a:	616e      	str	r6, [r5, #20]
 800648c:	f8c5 b010 	str.w	fp, [r5, #16]
 8006490:	6028      	str	r0, [r5, #0]
 8006492:	4626      	mov	r6, r4
 8006494:	60ab      	str	r3, [r5, #8]
 8006496:	46a0      	mov	r8, r4
 8006498:	4642      	mov	r2, r8
 800649a:	4651      	mov	r1, sl
 800649c:	f000 fcb8 	bl	8006e10 <memmove>
 80064a0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80064a4:	68ab      	ldr	r3, [r5, #8]
 80064a6:	6828      	ldr	r0, [r5, #0]
 80064a8:	1b9b      	subs	r3, r3, r6
 80064aa:	4440      	add	r0, r8
 80064ac:	1b14      	subs	r4, r2, r4
 80064ae:	60ab      	str	r3, [r5, #8]
 80064b0:	6028      	str	r0, [r5, #0]
 80064b2:	f8c9 4008 	str.w	r4, [r9, #8]
 80064b6:	b1e4      	cbz	r4, 80064f2 <__ssprint_r+0xee>
 80064b8:	f8d7 a000 	ldr.w	sl, [r7]
 80064bc:	687c      	ldr	r4, [r7, #4]
 80064be:	3708      	adds	r7, #8
 80064c0:	e7af      	b.n	8006422 <__ssprint_r+0x1e>
 80064c2:	f000 fd47 	bl	8006f54 <_realloc_r>
 80064c6:	4683      	mov	fp, r0
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d1da      	bne.n	8006482 <__ssprint_r+0x7e>
 80064cc:	9801      	ldr	r0, [sp, #4]
 80064ce:	6929      	ldr	r1, [r5, #16]
 80064d0:	f7fe fd96 	bl	8005000 <_free_r>
 80064d4:	9a01      	ldr	r2, [sp, #4]
 80064d6:	230c      	movs	r3, #12
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	89aa      	ldrh	r2, [r5, #12]
 80064dc:	2300      	movs	r3, #0
 80064de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064e2:	81aa      	strh	r2, [r5, #12]
 80064e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064e8:	f8c9 3008 	str.w	r3, [r9, #8]
 80064ec:	f8c9 3004 	str.w	r3, [r9, #4]
 80064f0:	e002      	b.n	80064f8 <__ssprint_r+0xf4>
 80064f2:	f8c9 4004 	str.w	r4, [r9, #4]
 80064f6:	4620      	mov	r0, r4
 80064f8:	b003      	add	sp, #12
 80064fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fe:	6050      	str	r0, [r2, #4]
 8006500:	e7fa      	b.n	80064f8 <__ssprint_r+0xf4>
 8006502:	bf00      	nop

08006504 <_svfiprintf_r>:
 8006504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006508:	468a      	mov	sl, r1
 800650a:	8989      	ldrh	r1, [r1, #12]
 800650c:	b0ad      	sub	sp, #180	; 0xb4
 800650e:	0609      	lsls	r1, r1, #24
 8006510:	9007      	str	r0, [sp, #28]
 8006512:	9305      	str	r3, [sp, #20]
 8006514:	d504      	bpl.n	8006520 <_svfiprintf_r+0x1c>
 8006516:	f8da 3010 	ldr.w	r3, [sl, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8422 	beq.w	8006d64 <_svfiprintf_r+0x860>
 8006520:	2300      	movs	r3, #0
 8006522:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8006526:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 800652a:	a90e      	add	r1, sp, #56	; 0x38
 800652c:	930c      	str	r3, [sp, #48]	; 0x30
 800652e:	932a      	str	r3, [sp, #168]	; 0xa8
 8006530:	9329      	str	r3, [sp, #164]	; 0xa4
 8006532:	9304      	str	r3, [sp, #16]
 8006534:	ebc0 0308 	rsb	r3, r0, r8
 8006538:	9001      	str	r0, [sp, #4]
 800653a:	9128      	str	r1, [sp, #160]	; 0xa0
 800653c:	4617      	mov	r7, r2
 800653e:	460c      	mov	r4, r1
 8006540:	930d      	str	r3, [sp, #52]	; 0x34
 8006542:	783b      	ldrb	r3, [r7, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	bf18      	it	ne
 8006548:	2b25      	cmpne	r3, #37	; 0x25
 800654a:	463d      	mov	r5, r7
 800654c:	d016      	beq.n	800657c <_svfiprintf_r+0x78>
 800654e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8006552:	2b25      	cmp	r3, #37	; 0x25
 8006554:	bf18      	it	ne
 8006556:	2b00      	cmpne	r3, #0
 8006558:	d1f9      	bne.n	800654e <_svfiprintf_r+0x4a>
 800655a:	1bee      	subs	r6, r5, r7
 800655c:	d00e      	beq.n	800657c <_svfiprintf_r+0x78>
 800655e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006560:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006562:	6027      	str	r7, [r4, #0]
 8006564:	3301      	adds	r3, #1
 8006566:	1992      	adds	r2, r2, r6
 8006568:	2b07      	cmp	r3, #7
 800656a:	6066      	str	r6, [r4, #4]
 800656c:	922a      	str	r2, [sp, #168]	; 0xa8
 800656e:	9329      	str	r3, [sp, #164]	; 0xa4
 8006570:	f300 832a 	bgt.w	8006bc8 <_svfiprintf_r+0x6c4>
 8006574:	3408      	adds	r4, #8
 8006576:	9b04      	ldr	r3, [sp, #16]
 8006578:	199b      	adds	r3, r3, r6
 800657a:	9304      	str	r3, [sp, #16]
 800657c:	782b      	ldrb	r3, [r5, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 82c5 	beq.w	8006b0e <_svfiprintf_r+0x60a>
 8006584:	2200      	movs	r2, #0
 8006586:	1c6f      	adds	r7, r5, #1
 8006588:	4613      	mov	r3, r2
 800658a:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 800658e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006592:	9206      	str	r2, [sp, #24]
 8006594:	4693      	mov	fp, r2
 8006596:	f817 2b01 	ldrb.w	r2, [r7], #1
 800659a:	f1a2 0120 	sub.w	r1, r2, #32
 800659e:	2958      	cmp	r1, #88	; 0x58
 80065a0:	f200 8178 	bhi.w	8006894 <_svfiprintf_r+0x390>
 80065a4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80065a8:	01760172 	.word	0x01760172
 80065ac:	016f0176 	.word	0x016f0176
 80065b0:	01760176 	.word	0x01760176
 80065b4:	01760176 	.word	0x01760176
 80065b8:	01760176 	.word	0x01760176
 80065bc:	01d800af 	.word	0x01d800af
 80065c0:	00ba0176 	.word	0x00ba0176
 80065c4:	017601da 	.word	0x017601da
 80065c8:	01c401d5 	.word	0x01c401d5
 80065cc:	01c401c4 	.word	0x01c401c4
 80065d0:	01c401c4 	.word	0x01c401c4
 80065d4:	01c401c4 	.word	0x01c401c4
 80065d8:	01c401c4 	.word	0x01c401c4
 80065dc:	01760176 	.word	0x01760176
 80065e0:	01760176 	.word	0x01760176
 80065e4:	01760176 	.word	0x01760176
 80065e8:	01760176 	.word	0x01760176
 80065ec:	01760176 	.word	0x01760176
 80065f0:	017601a7 	.word	0x017601a7
 80065f4:	01760176 	.word	0x01760176
 80065f8:	01760176 	.word	0x01760176
 80065fc:	01760176 	.word	0x01760176
 8006600:	01760176 	.word	0x01760176
 8006604:	005c0176 	.word	0x005c0176
 8006608:	01760176 	.word	0x01760176
 800660c:	01760176 	.word	0x01760176
 8006610:	00a00176 	.word	0x00a00176
 8006614:	01760176 	.word	0x01760176
 8006618:	0176016a 	.word	0x0176016a
 800661c:	01760176 	.word	0x01760176
 8006620:	01760176 	.word	0x01760176
 8006624:	01760176 	.word	0x01760176
 8006628:	01760176 	.word	0x01760176
 800662c:	01170176 	.word	0x01170176
 8006630:	01760105 	.word	0x01760105
 8006634:	01760176 	.word	0x01760176
 8006638:	01050102 	.word	0x01050102
 800663c:	01760176 	.word	0x01760176
 8006640:	01760059 	.word	0x01760059
 8006644:	005e00d1 	.word	0x005e00d1
 8006648:	005900bd 	.word	0x005900bd
 800664c:	01870176 	.word	0x01870176
 8006650:	00a20176 	.word	0x00a20176
 8006654:	01760176 	.word	0x01760176
 8006658:	00e2      	.short	0x00e2
 800665a:	f04b 0b10 	orr.w	fp, fp, #16
 800665e:	e79a      	b.n	8006596 <_svfiprintf_r+0x92>
 8006660:	f04b 0b10 	orr.w	fp, fp, #16
 8006664:	f01b 0210 	ands.w	r2, fp, #16
 8006668:	f000 8313 	beq.w	8006c92 <_svfiprintf_r+0x78e>
 800666c:	9805      	ldr	r0, [sp, #20]
 800666e:	6803      	ldr	r3, [r0, #0]
 8006670:	2200      	movs	r2, #0
 8006672:	1a99      	subs	r1, r3, r2
 8006674:	bf18      	it	ne
 8006676:	2101      	movne	r1, #1
 8006678:	3004      	adds	r0, #4
 800667a:	9005      	str	r0, [sp, #20]
 800667c:	2000      	movs	r0, #0
 800667e:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 8006682:	2d00      	cmp	r5, #0
 8006684:	bfa8      	it	ge
 8006686:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 800668a:	2d00      	cmp	r5, #0
 800668c:	bf18      	it	ne
 800668e:	f041 0101 	orrne.w	r1, r1, #1
 8006692:	2900      	cmp	r1, #0
 8006694:	f000 8228 	beq.w	8006ae8 <_svfiprintf_r+0x5e4>
 8006698:	2a01      	cmp	r2, #1
 800669a:	f000 82cf 	beq.w	8006c3c <_svfiprintf_r+0x738>
 800669e:	2a02      	cmp	r2, #2
 80066a0:	bf18      	it	ne
 80066a2:	4642      	movne	r2, r8
 80066a4:	d101      	bne.n	80066aa <_svfiprintf_r+0x1a6>
 80066a6:	e2b9      	b.n	8006c1c <_svfiprintf_r+0x718>
 80066a8:	4602      	mov	r2, r0
 80066aa:	f003 0107 	and.w	r1, r3, #7
 80066ae:	3130      	adds	r1, #48	; 0x30
 80066b0:	1e50      	subs	r0, r2, #1
 80066b2:	08db      	lsrs	r3, r3, #3
 80066b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80066b8:	d1f6      	bne.n	80066a8 <_svfiprintf_r+0x1a4>
 80066ba:	f01b 0f01 	tst.w	fp, #1
 80066be:	9009      	str	r0, [sp, #36]	; 0x24
 80066c0:	f040 831a 	bne.w	8006cf8 <_svfiprintf_r+0x7f4>
 80066c4:	ebc0 0308 	rsb	r3, r0, r8
 80066c8:	9303      	str	r3, [sp, #12]
 80066ca:	9508      	str	r5, [sp, #32]
 80066cc:	9803      	ldr	r0, [sp, #12]
 80066ce:	9908      	ldr	r1, [sp, #32]
 80066d0:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 80066d4:	4288      	cmp	r0, r1
 80066d6:	bfb8      	it	lt
 80066d8:	4608      	movlt	r0, r1
 80066da:	9002      	str	r0, [sp, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 808b 	beq.w	80067f8 <_svfiprintf_r+0x2f4>
 80066e2:	3001      	adds	r0, #1
 80066e4:	9002      	str	r0, [sp, #8]
 80066e6:	e087      	b.n	80067f8 <_svfiprintf_r+0x2f4>
 80066e8:	f04b 0b10 	orr.w	fp, fp, #16
 80066ec:	f01b 0f10 	tst.w	fp, #16
 80066f0:	f000 82c1 	beq.w	8006c76 <_svfiprintf_r+0x772>
 80066f4:	9805      	ldr	r0, [sp, #20]
 80066f6:	6803      	ldr	r3, [r0, #0]
 80066f8:	2201      	movs	r2, #1
 80066fa:	1c19      	adds	r1, r3, #0
 80066fc:	bf18      	it	ne
 80066fe:	2101      	movne	r1, #1
 8006700:	3004      	adds	r0, #4
 8006702:	9005      	str	r0, [sp, #20]
 8006704:	e7ba      	b.n	800667c <_svfiprintf_r+0x178>
 8006706:	9805      	ldr	r0, [sp, #20]
 8006708:	9905      	ldr	r1, [sp, #20]
 800670a:	6800      	ldr	r0, [r0, #0]
 800670c:	1d0a      	adds	r2, r1, #4
 800670e:	2800      	cmp	r0, #0
 8006710:	9006      	str	r0, [sp, #24]
 8006712:	f280 82e0 	bge.w	8006cd6 <_svfiprintf_r+0x7d2>
 8006716:	4240      	negs	r0, r0
 8006718:	9006      	str	r0, [sp, #24]
 800671a:	9205      	str	r2, [sp, #20]
 800671c:	f04b 0b04 	orr.w	fp, fp, #4
 8006720:	e739      	b.n	8006596 <_svfiprintf_r+0x92>
 8006722:	9b05      	ldr	r3, [sp, #20]
 8006724:	9905      	ldr	r1, [sp, #20]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2230      	movs	r2, #48	; 0x30
 800672a:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 800672e:	2278      	movs	r2, #120	; 0x78
 8006730:	3104      	adds	r1, #4
 8006732:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 8006736:	4aaf      	ldr	r2, [pc, #700]	; (80069f4 <_svfiprintf_r+0x4f0>)
 8006738:	9105      	str	r1, [sp, #20]
 800673a:	1c19      	adds	r1, r3, #0
 800673c:	bf18      	it	ne
 800673e:	2101      	movne	r1, #1
 8006740:	920c      	str	r2, [sp, #48]	; 0x30
 8006742:	f04b 0b02 	orr.w	fp, fp, #2
 8006746:	2202      	movs	r2, #2
 8006748:	e798      	b.n	800667c <_svfiprintf_r+0x178>
 800674a:	f01b 0f10 	tst.w	fp, #16
 800674e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006752:	f040 82dd 	bne.w	8006d10 <_svfiprintf_r+0x80c>
 8006756:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800675a:	f000 82fb 	beq.w	8006d54 <_svfiprintf_r+0x850>
 800675e:	9a05      	ldr	r2, [sp, #20]
 8006760:	9804      	ldr	r0, [sp, #16]
 8006762:	6813      	ldr	r3, [r2, #0]
 8006764:	3204      	adds	r2, #4
 8006766:	9205      	str	r2, [sp, #20]
 8006768:	8018      	strh	r0, [r3, #0]
 800676a:	e6ea      	b.n	8006542 <_svfiprintf_r+0x3e>
 800676c:	49a1      	ldr	r1, [pc, #644]	; (80069f4 <_svfiprintf_r+0x4f0>)
 800676e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006772:	910c      	str	r1, [sp, #48]	; 0x30
 8006774:	f01b 0f10 	tst.w	fp, #16
 8006778:	d103      	bne.n	8006782 <_svfiprintf_r+0x27e>
 800677a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800677e:	f040 82d3 	bne.w	8006d28 <_svfiprintf_r+0x824>
 8006782:	9805      	ldr	r0, [sp, #20]
 8006784:	6803      	ldr	r3, [r0, #0]
 8006786:	3004      	adds	r0, #4
 8006788:	9005      	str	r0, [sp, #20]
 800678a:	1c19      	adds	r1, r3, #0
 800678c:	bf18      	it	ne
 800678e:	2101      	movne	r1, #1
 8006790:	ea1b 0f01 	tst.w	fp, r1
 8006794:	f000 8287 	beq.w	8006ca6 <_svfiprintf_r+0x7a2>
 8006798:	2130      	movs	r1, #48	; 0x30
 800679a:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800679e:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 80067a2:	f04b 0b02 	orr.w	fp, fp, #2
 80067a6:	2101      	movs	r1, #1
 80067a8:	2202      	movs	r2, #2
 80067aa:	e767      	b.n	800667c <_svfiprintf_r+0x178>
 80067ac:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 80067b0:	e6f1      	b.n	8006596 <_svfiprintf_r+0x92>
 80067b2:	f01b 0f10 	tst.w	fp, #16
 80067b6:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80067ba:	f000 80a4 	beq.w	8006906 <_svfiprintf_r+0x402>
 80067be:	9805      	ldr	r0, [sp, #20]
 80067c0:	6803      	ldr	r3, [r0, #0]
 80067c2:	3004      	adds	r0, #4
 80067c4:	9005      	str	r0, [sp, #20]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f2c0 80a9 	blt.w	800691e <_svfiprintf_r+0x41a>
 80067cc:	bf0c      	ite	eq
 80067ce:	2100      	moveq	r1, #0
 80067d0:	2101      	movne	r1, #1
 80067d2:	2201      	movs	r2, #1
 80067d4:	e755      	b.n	8006682 <_svfiprintf_r+0x17e>
 80067d6:	9b05      	ldr	r3, [sp, #20]
 80067d8:	9905      	ldr	r1, [sp, #20]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2001      	movs	r0, #1
 80067de:	2200      	movs	r2, #0
 80067e0:	3104      	adds	r1, #4
 80067e2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 80067e6:	ab1e      	add	r3, sp, #120	; 0x78
 80067e8:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 80067ec:	9002      	str	r0, [sp, #8]
 80067ee:	9105      	str	r1, [sp, #20]
 80067f0:	9003      	str	r0, [sp, #12]
 80067f2:	9309      	str	r3, [sp, #36]	; 0x24
 80067f4:	2300      	movs	r3, #0
 80067f6:	9308      	str	r3, [sp, #32]
 80067f8:	f01b 0302 	ands.w	r3, fp, #2
 80067fc:	930a      	str	r3, [sp, #40]	; 0x28
 80067fe:	d002      	beq.n	8006806 <_svfiprintf_r+0x302>
 8006800:	9b02      	ldr	r3, [sp, #8]
 8006802:	3302      	adds	r3, #2
 8006804:	9302      	str	r3, [sp, #8]
 8006806:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800680a:	930b      	str	r3, [sp, #44]	; 0x2c
 800680c:	f040 80c1 	bne.w	8006992 <_svfiprintf_r+0x48e>
 8006810:	9b06      	ldr	r3, [sp, #24]
 8006812:	9802      	ldr	r0, [sp, #8]
 8006814:	1a1d      	subs	r5, r3, r0
 8006816:	2d00      	cmp	r5, #0
 8006818:	f340 80bb 	ble.w	8006992 <_svfiprintf_r+0x48e>
 800681c:	2d10      	cmp	r5, #16
 800681e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006820:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006822:	4e75      	ldr	r6, [pc, #468]	; (80069f8 <_svfiprintf_r+0x4f4>)
 8006824:	dd1f      	ble.n	8006866 <_svfiprintf_r+0x362>
 8006826:	4621      	mov	r1, r4
 8006828:	f04f 0910 	mov.w	r9, #16
 800682c:	9c07      	ldr	r4, [sp, #28]
 800682e:	e002      	b.n	8006836 <_svfiprintf_r+0x332>
 8006830:	3d10      	subs	r5, #16
 8006832:	2d10      	cmp	r5, #16
 8006834:	dd16      	ble.n	8006864 <_svfiprintf_r+0x360>
 8006836:	3301      	adds	r3, #1
 8006838:	3210      	adds	r2, #16
 800683a:	e881 0240 	stmia.w	r1, {r6, r9}
 800683e:	3108      	adds	r1, #8
 8006840:	2b07      	cmp	r3, #7
 8006842:	922a      	str	r2, [sp, #168]	; 0xa8
 8006844:	9329      	str	r3, [sp, #164]	; 0xa4
 8006846:	ddf3      	ble.n	8006830 <_svfiprintf_r+0x32c>
 8006848:	4620      	mov	r0, r4
 800684a:	4651      	mov	r1, sl
 800684c:	4642      	mov	r2, r8
 800684e:	f7ff fdd9 	bl	8006404 <__ssprint_r>
 8006852:	2800      	cmp	r0, #0
 8006854:	f040 8162 	bne.w	8006b1c <_svfiprintf_r+0x618>
 8006858:	3d10      	subs	r5, #16
 800685a:	2d10      	cmp	r5, #16
 800685c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800685e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006860:	a90e      	add	r1, sp, #56	; 0x38
 8006862:	dce8      	bgt.n	8006836 <_svfiprintf_r+0x332>
 8006864:	460c      	mov	r4, r1
 8006866:	3301      	adds	r3, #1
 8006868:	1952      	adds	r2, r2, r5
 800686a:	2b07      	cmp	r3, #7
 800686c:	6026      	str	r6, [r4, #0]
 800686e:	6065      	str	r5, [r4, #4]
 8006870:	922a      	str	r2, [sp, #168]	; 0xa8
 8006872:	9329      	str	r3, [sp, #164]	; 0xa4
 8006874:	f300 8219 	bgt.w	8006caa <_svfiprintf_r+0x7a6>
 8006878:	3408      	adds	r4, #8
 800687a:	e08c      	b.n	8006996 <_svfiprintf_r+0x492>
 800687c:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006880:	4b5e      	ldr	r3, [pc, #376]	; (80069fc <_svfiprintf_r+0x4f8>)
 8006882:	930c      	str	r3, [sp, #48]	; 0x30
 8006884:	e776      	b.n	8006774 <_svfiprintf_r+0x270>
 8006886:	f04b 0b01 	orr.w	fp, fp, #1
 800688a:	e684      	b.n	8006596 <_svfiprintf_r+0x92>
 800688c:	2b00      	cmp	r3, #0
 800688e:	bf08      	it	eq
 8006890:	2320      	moveq	r3, #32
 8006892:	e680      	b.n	8006596 <_svfiprintf_r+0x92>
 8006894:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006898:	2a00      	cmp	r2, #0
 800689a:	f000 8138 	beq.w	8006b0e <_svfiprintf_r+0x60a>
 800689e:	2301      	movs	r3, #1
 80068a0:	9302      	str	r3, [sp, #8]
 80068a2:	2300      	movs	r3, #0
 80068a4:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80068a8:	2301      	movs	r3, #1
 80068aa:	9303      	str	r3, [sp, #12]
 80068ac:	ab1e      	add	r3, sp, #120	; 0x78
 80068ae:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 80068b2:	9309      	str	r3, [sp, #36]	; 0x24
 80068b4:	e79e      	b.n	80067f4 <_svfiprintf_r+0x2f0>
 80068b6:	9b05      	ldr	r3, [sp, #20]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	9309      	str	r3, [sp, #36]	; 0x24
 80068bc:	9b05      	ldr	r3, [sp, #20]
 80068be:	3304      	adds	r3, #4
 80068c0:	9305      	str	r3, [sp, #20]
 80068c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c4:	2600      	movs	r6, #0
 80068c6:	f88d 60af 	strb.w	r6, [sp, #175]	; 0xaf
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 8259 	beq.w	8006d82 <_svfiprintf_r+0x87e>
 80068d0:	2d00      	cmp	r5, #0
 80068d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068d4:	f2c0 822d 	blt.w	8006d32 <_svfiprintf_r+0x82e>
 80068d8:	4631      	mov	r1, r6
 80068da:	462a      	mov	r2, r5
 80068dc:	f7fe ff50 	bl	8005780 <memchr>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	f000 8258 	beq.w	8006d96 <_svfiprintf_r+0x892>
 80068e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e8:	9608      	str	r6, [sp, #32]
 80068ea:	1ac0      	subs	r0, r0, r3
 80068ec:	42a8      	cmp	r0, r5
 80068ee:	9003      	str	r0, [sp, #12]
 80068f0:	bfc8      	it	gt
 80068f2:	9503      	strgt	r5, [sp, #12]
 80068f4:	e6ea      	b.n	80066cc <_svfiprintf_r+0x1c8>
 80068f6:	f04b 0b10 	orr.w	fp, fp, #16
 80068fa:	f01b 0f10 	tst.w	fp, #16
 80068fe:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8006902:	f47f af5c 	bne.w	80067be <_svfiprintf_r+0x2ba>
 8006906:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800690a:	f000 8208 	beq.w	8006d1e <_svfiprintf_r+0x81a>
 800690e:	9905      	ldr	r1, [sp, #20]
 8006910:	f9b1 3000 	ldrsh.w	r3, [r1]
 8006914:	3104      	adds	r1, #4
 8006916:	2b00      	cmp	r3, #0
 8006918:	9105      	str	r1, [sp, #20]
 800691a:	f6bf af57 	bge.w	80067cc <_svfiprintf_r+0x2c8>
 800691e:	425b      	negs	r3, r3
 8006920:	222d      	movs	r2, #45	; 0x2d
 8006922:	1c19      	adds	r1, r3, #0
 8006924:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8006928:	bf18      	it	ne
 800692a:	2101      	movne	r1, #1
 800692c:	2201      	movs	r2, #1
 800692e:	e6a8      	b.n	8006682 <_svfiprintf_r+0x17e>
 8006930:	4638      	mov	r0, r7
 8006932:	2100      	movs	r1, #0
 8006934:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8006938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800693c:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006940:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006944:	2e09      	cmp	r6, #9
 8006946:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 800694a:	4607      	mov	r7, r0
 800694c:	d9f2      	bls.n	8006934 <_svfiprintf_r+0x430>
 800694e:	9106      	str	r1, [sp, #24]
 8006950:	e623      	b.n	800659a <_svfiprintf_r+0x96>
 8006952:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8006956:	e61e      	b.n	8006596 <_svfiprintf_r+0x92>
 8006958:	232b      	movs	r3, #43	; 0x2b
 800695a:	e61c      	b.n	8006596 <_svfiprintf_r+0x92>
 800695c:	f817 2b01 	ldrb.w	r2, [r7], #1
 8006960:	2a2a      	cmp	r2, #42	; 0x2a
 8006962:	f000 81ae 	beq.w	8006cc2 <_svfiprintf_r+0x7be>
 8006966:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800696a:	2500      	movs	r5, #0
 800696c:	2909      	cmp	r1, #9
 800696e:	f63f ae14 	bhi.w	800659a <_svfiprintf_r+0x96>
 8006972:	4638      	mov	r0, r7
 8006974:	2500      	movs	r5, #0
 8006976:	f810 2b01 	ldrb.w	r2, [r0], #1
 800697a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800697e:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8006982:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006986:	2909      	cmp	r1, #9
 8006988:	4607      	mov	r7, r0
 800698a:	d9f4      	bls.n	8006976 <_svfiprintf_r+0x472>
 800698c:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8006990:	e603      	b.n	800659a <_svfiprintf_r+0x96>
 8006992:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006994:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006996:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
 800699a:	b161      	cbz	r1, 80069b6 <_svfiprintf_r+0x4b2>
 800699c:	3301      	adds	r3, #1
 800699e:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
 80069a2:	3201      	adds	r2, #1
 80069a4:	6021      	str	r1, [r4, #0]
 80069a6:	2101      	movs	r1, #1
 80069a8:	2b07      	cmp	r3, #7
 80069aa:	6061      	str	r1, [r4, #4]
 80069ac:	922a      	str	r2, [sp, #168]	; 0xa8
 80069ae:	9329      	str	r3, [sp, #164]	; 0xa4
 80069b0:	f300 811e 	bgt.w	8006bf0 <_svfiprintf_r+0x6ec>
 80069b4:	3408      	adds	r4, #8
 80069b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80069b8:	b159      	cbz	r1, 80069d2 <_svfiprintf_r+0x4ce>
 80069ba:	3301      	adds	r3, #1
 80069bc:	a92b      	add	r1, sp, #172	; 0xac
 80069be:	3202      	adds	r2, #2
 80069c0:	6021      	str	r1, [r4, #0]
 80069c2:	2102      	movs	r1, #2
 80069c4:	2b07      	cmp	r3, #7
 80069c6:	6061      	str	r1, [r4, #4]
 80069c8:	922a      	str	r2, [sp, #168]	; 0xa8
 80069ca:	9329      	str	r3, [sp, #164]	; 0xa4
 80069cc:	f300 811b 	bgt.w	8006c06 <_svfiprintf_r+0x702>
 80069d0:	3408      	adds	r4, #8
 80069d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80069d4:	2880      	cmp	r0, #128	; 0x80
 80069d6:	f000 80ae 	beq.w	8006b36 <_svfiprintf_r+0x632>
 80069da:	9808      	ldr	r0, [sp, #32]
 80069dc:	9903      	ldr	r1, [sp, #12]
 80069de:	1a45      	subs	r5, r0, r1
 80069e0:	2d00      	cmp	r5, #0
 80069e2:	dd33      	ble.n	8006a4c <_svfiprintf_r+0x548>
 80069e4:	2d10      	cmp	r5, #16
 80069e6:	4e06      	ldr	r6, [pc, #24]	; (8006a00 <_svfiprintf_r+0x4fc>)
 80069e8:	dd26      	ble.n	8006a38 <_svfiprintf_r+0x534>
 80069ea:	4621      	mov	r1, r4
 80069ec:	f04f 0910 	mov.w	r9, #16
 80069f0:	9c07      	ldr	r4, [sp, #28]
 80069f2:	e00a      	b.n	8006a0a <_svfiprintf_r+0x506>
 80069f4:	08008174 	.word	0x08008174
 80069f8:	08008008 	.word	0x08008008
 80069fc:	08008160 	.word	0x08008160
 8006a00:	08008018 	.word	0x08008018
 8006a04:	3d10      	subs	r5, #16
 8006a06:	2d10      	cmp	r5, #16
 8006a08:	dd15      	ble.n	8006a36 <_svfiprintf_r+0x532>
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	3210      	adds	r2, #16
 8006a0e:	e881 0240 	stmia.w	r1, {r6, r9}
 8006a12:	3108      	adds	r1, #8
 8006a14:	2b07      	cmp	r3, #7
 8006a16:	922a      	str	r2, [sp, #168]	; 0xa8
 8006a18:	9329      	str	r3, [sp, #164]	; 0xa4
 8006a1a:	ddf3      	ble.n	8006a04 <_svfiprintf_r+0x500>
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	4651      	mov	r1, sl
 8006a20:	4642      	mov	r2, r8
 8006a22:	f7ff fcef 	bl	8006404 <__ssprint_r>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d178      	bne.n	8006b1c <_svfiprintf_r+0x618>
 8006a2a:	3d10      	subs	r5, #16
 8006a2c:	2d10      	cmp	r5, #16
 8006a2e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006a30:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006a32:	a90e      	add	r1, sp, #56	; 0x38
 8006a34:	dce9      	bgt.n	8006a0a <_svfiprintf_r+0x506>
 8006a36:	460c      	mov	r4, r1
 8006a38:	3301      	adds	r3, #1
 8006a3a:	1952      	adds	r2, r2, r5
 8006a3c:	2b07      	cmp	r3, #7
 8006a3e:	6026      	str	r6, [r4, #0]
 8006a40:	6065      	str	r5, [r4, #4]
 8006a42:	922a      	str	r2, [sp, #168]	; 0xa8
 8006a44:	9329      	str	r3, [sp, #164]	; 0xa4
 8006a46:	f300 80c8 	bgt.w	8006bda <_svfiprintf_r+0x6d6>
 8006a4a:	3408      	adds	r4, #8
 8006a4c:	9903      	ldr	r1, [sp, #12]
 8006a4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a50:	3301      	adds	r3, #1
 8006a52:	1852      	adds	r2, r2, r1
 8006a54:	2b07      	cmp	r3, #7
 8006a56:	e884 0003 	stmia.w	r4, {r0, r1}
 8006a5a:	922a      	str	r2, [sp, #168]	; 0xa8
 8006a5c:	9329      	str	r3, [sp, #164]	; 0xa4
 8006a5e:	bfd8      	it	le
 8006a60:	f104 0108 	addle.w	r1, r4, #8
 8006a64:	f300 809a 	bgt.w	8006b9c <_svfiprintf_r+0x698>
 8006a68:	f01b 0f04 	tst.w	fp, #4
 8006a6c:	d02e      	beq.n	8006acc <_svfiprintf_r+0x5c8>
 8006a6e:	9b06      	ldr	r3, [sp, #24]
 8006a70:	9802      	ldr	r0, [sp, #8]
 8006a72:	1a1d      	subs	r5, r3, r0
 8006a74:	2d00      	cmp	r5, #0
 8006a76:	dd29      	ble.n	8006acc <_svfiprintf_r+0x5c8>
 8006a78:	2d10      	cmp	r5, #16
 8006a7a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006a7c:	4e97      	ldr	r6, [pc, #604]	; (8006cdc <_svfiprintf_r+0x7d8>)
 8006a7e:	dd1c      	ble.n	8006aba <_svfiprintf_r+0x5b6>
 8006a80:	2410      	movs	r4, #16
 8006a82:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8006a86:	e002      	b.n	8006a8e <_svfiprintf_r+0x58a>
 8006a88:	3d10      	subs	r5, #16
 8006a8a:	2d10      	cmp	r5, #16
 8006a8c:	dd15      	ble.n	8006aba <_svfiprintf_r+0x5b6>
 8006a8e:	3301      	adds	r3, #1
 8006a90:	3210      	adds	r2, #16
 8006a92:	600e      	str	r6, [r1, #0]
 8006a94:	604c      	str	r4, [r1, #4]
 8006a96:	3108      	adds	r1, #8
 8006a98:	2b07      	cmp	r3, #7
 8006a9a:	922a      	str	r2, [sp, #168]	; 0xa8
 8006a9c:	9329      	str	r3, [sp, #164]	; 0xa4
 8006a9e:	ddf3      	ble.n	8006a88 <_svfiprintf_r+0x584>
 8006aa0:	4648      	mov	r0, r9
 8006aa2:	4651      	mov	r1, sl
 8006aa4:	4642      	mov	r2, r8
 8006aa6:	f7ff fcad 	bl	8006404 <__ssprint_r>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d136      	bne.n	8006b1c <_svfiprintf_r+0x618>
 8006aae:	3d10      	subs	r5, #16
 8006ab0:	2d10      	cmp	r5, #16
 8006ab2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006ab4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006ab6:	a90e      	add	r1, sp, #56	; 0x38
 8006ab8:	dce9      	bgt.n	8006a8e <_svfiprintf_r+0x58a>
 8006aba:	3301      	adds	r3, #1
 8006abc:	18aa      	adds	r2, r5, r2
 8006abe:	2b07      	cmp	r3, #7
 8006ac0:	600e      	str	r6, [r1, #0]
 8006ac2:	604d      	str	r5, [r1, #4]
 8006ac4:	922a      	str	r2, [sp, #168]	; 0xa8
 8006ac6:	9329      	str	r3, [sp, #164]	; 0xa4
 8006ac8:	f300 810c 	bgt.w	8006ce4 <_svfiprintf_r+0x7e0>
 8006acc:	9b04      	ldr	r3, [sp, #16]
 8006ace:	9902      	ldr	r1, [sp, #8]
 8006ad0:	9806      	ldr	r0, [sp, #24]
 8006ad2:	4281      	cmp	r1, r0
 8006ad4:	bfac      	ite	ge
 8006ad6:	185b      	addge	r3, r3, r1
 8006ad8:	181b      	addlt	r3, r3, r0
 8006ada:	9304      	str	r3, [sp, #16]
 8006adc:	2a00      	cmp	r2, #0
 8006ade:	d167      	bne.n	8006bb0 <_svfiprintf_r+0x6ac>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	9329      	str	r3, [sp, #164]	; 0xa4
 8006ae4:	ac0e      	add	r4, sp, #56	; 0x38
 8006ae6:	e52c      	b.n	8006542 <_svfiprintf_r+0x3e>
 8006ae8:	2a00      	cmp	r2, #0
 8006aea:	d169      	bne.n	8006bc0 <_svfiprintf_r+0x6bc>
 8006aec:	f01b 0f01 	tst.w	fp, #1
 8006af0:	bf04      	itt	eq
 8006af2:	9203      	streq	r2, [sp, #12]
 8006af4:	f8cd 8024 	streq.w	r8, [sp, #36]	; 0x24
 8006af8:	f43f ade7 	beq.w	80066ca <_svfiprintf_r+0x1c6>
 8006afc:	2330      	movs	r3, #48	; 0x30
 8006afe:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 8006b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b04:	9303      	str	r3, [sp, #12]
 8006b06:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 8006b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b0c:	e5dd      	b.n	80066ca <_svfiprintf_r+0x1c6>
 8006b0e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006b10:	b123      	cbz	r3, 8006b1c <_svfiprintf_r+0x618>
 8006b12:	9807      	ldr	r0, [sp, #28]
 8006b14:	4651      	mov	r1, sl
 8006b16:	aa28      	add	r2, sp, #160	; 0xa0
 8006b18:	f7ff fc74 	bl	8006404 <__ssprint_r>
 8006b1c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006b20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b24:	9b04      	ldr	r3, [sp, #16]
 8006b26:	bf18      	it	ne
 8006b28:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8006b2c:	9304      	str	r3, [sp, #16]
 8006b2e:	9804      	ldr	r0, [sp, #16]
 8006b30:	b02d      	add	sp, #180	; 0xb4
 8006b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b36:	9906      	ldr	r1, [sp, #24]
 8006b38:	9802      	ldr	r0, [sp, #8]
 8006b3a:	1a0d      	subs	r5, r1, r0
 8006b3c:	2d00      	cmp	r5, #0
 8006b3e:	f77f af4c 	ble.w	80069da <_svfiprintf_r+0x4d6>
 8006b42:	2d10      	cmp	r5, #16
 8006b44:	4e66      	ldr	r6, [pc, #408]	; (8006ce0 <_svfiprintf_r+0x7dc>)
 8006b46:	dd1e      	ble.n	8006b86 <_svfiprintf_r+0x682>
 8006b48:	4621      	mov	r1, r4
 8006b4a:	f04f 0910 	mov.w	r9, #16
 8006b4e:	9c07      	ldr	r4, [sp, #28]
 8006b50:	e002      	b.n	8006b58 <_svfiprintf_r+0x654>
 8006b52:	3d10      	subs	r5, #16
 8006b54:	2d10      	cmp	r5, #16
 8006b56:	dd15      	ble.n	8006b84 <_svfiprintf_r+0x680>
 8006b58:	3301      	adds	r3, #1
 8006b5a:	3210      	adds	r2, #16
 8006b5c:	e881 0240 	stmia.w	r1, {r6, r9}
 8006b60:	3108      	adds	r1, #8
 8006b62:	2b07      	cmp	r3, #7
 8006b64:	922a      	str	r2, [sp, #168]	; 0xa8
 8006b66:	9329      	str	r3, [sp, #164]	; 0xa4
 8006b68:	ddf3      	ble.n	8006b52 <_svfiprintf_r+0x64e>
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	4651      	mov	r1, sl
 8006b6e:	4642      	mov	r2, r8
 8006b70:	f7ff fc48 	bl	8006404 <__ssprint_r>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d1d1      	bne.n	8006b1c <_svfiprintf_r+0x618>
 8006b78:	3d10      	subs	r5, #16
 8006b7a:	2d10      	cmp	r5, #16
 8006b7c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006b7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006b80:	a90e      	add	r1, sp, #56	; 0x38
 8006b82:	dce9      	bgt.n	8006b58 <_svfiprintf_r+0x654>
 8006b84:	460c      	mov	r4, r1
 8006b86:	3301      	adds	r3, #1
 8006b88:	1952      	adds	r2, r2, r5
 8006b8a:	2b07      	cmp	r3, #7
 8006b8c:	6026      	str	r6, [r4, #0]
 8006b8e:	6065      	str	r5, [r4, #4]
 8006b90:	922a      	str	r2, [sp, #168]	; 0xa8
 8006b92:	9329      	str	r3, [sp, #164]	; 0xa4
 8006b94:	f300 80d2 	bgt.w	8006d3c <_svfiprintf_r+0x838>
 8006b98:	3408      	adds	r4, #8
 8006b9a:	e71e      	b.n	80069da <_svfiprintf_r+0x4d6>
 8006b9c:	9807      	ldr	r0, [sp, #28]
 8006b9e:	4651      	mov	r1, sl
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	f7ff fc2f 	bl	8006404 <__ssprint_r>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d1b8      	bne.n	8006b1c <_svfiprintf_r+0x618>
 8006baa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006bac:	a90e      	add	r1, sp, #56	; 0x38
 8006bae:	e75b      	b.n	8006a68 <_svfiprintf_r+0x564>
 8006bb0:	9807      	ldr	r0, [sp, #28]
 8006bb2:	4651      	mov	r1, sl
 8006bb4:	4642      	mov	r2, r8
 8006bb6:	f7ff fc25 	bl	8006404 <__ssprint_r>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d090      	beq.n	8006ae0 <_svfiprintf_r+0x5dc>
 8006bbe:	e7ad      	b.n	8006b1c <_svfiprintf_r+0x618>
 8006bc0:	9103      	str	r1, [sp, #12]
 8006bc2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8006bc6:	e580      	b.n	80066ca <_svfiprintf_r+0x1c6>
 8006bc8:	9807      	ldr	r0, [sp, #28]
 8006bca:	4651      	mov	r1, sl
 8006bcc:	4642      	mov	r2, r8
 8006bce:	f7ff fc19 	bl	8006404 <__ssprint_r>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d1a2      	bne.n	8006b1c <_svfiprintf_r+0x618>
 8006bd6:	ac0e      	add	r4, sp, #56	; 0x38
 8006bd8:	e4cd      	b.n	8006576 <_svfiprintf_r+0x72>
 8006bda:	9807      	ldr	r0, [sp, #28]
 8006bdc:	4651      	mov	r1, sl
 8006bde:	4642      	mov	r2, r8
 8006be0:	f7ff fc10 	bl	8006404 <__ssprint_r>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d199      	bne.n	8006b1c <_svfiprintf_r+0x618>
 8006be8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006bea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006bec:	ac0e      	add	r4, sp, #56	; 0x38
 8006bee:	e72d      	b.n	8006a4c <_svfiprintf_r+0x548>
 8006bf0:	9807      	ldr	r0, [sp, #28]
 8006bf2:	4651      	mov	r1, sl
 8006bf4:	4642      	mov	r2, r8
 8006bf6:	f7ff fc05 	bl	8006404 <__ssprint_r>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	d18e      	bne.n	8006b1c <_svfiprintf_r+0x618>
 8006bfe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006c00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006c02:	ac0e      	add	r4, sp, #56	; 0x38
 8006c04:	e6d7      	b.n	80069b6 <_svfiprintf_r+0x4b2>
 8006c06:	9807      	ldr	r0, [sp, #28]
 8006c08:	4651      	mov	r1, sl
 8006c0a:	4642      	mov	r2, r8
 8006c0c:	f7ff fbfa 	bl	8006404 <__ssprint_r>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d183      	bne.n	8006b1c <_svfiprintf_r+0x618>
 8006c14:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006c16:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006c18:	ac0e      	add	r4, sp, #56	; 0x38
 8006c1a:	e6da      	b.n	80069d2 <_svfiprintf_r+0x4ce>
 8006c1c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006c1e:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8006c22:	f003 000f 	and.w	r0, r3, #15
 8006c26:	4611      	mov	r1, r2
 8006c28:	5c30      	ldrb	r0, [r6, r0]
 8006c2a:	3a01      	subs	r2, #1
 8006c2c:	091b      	lsrs	r3, r3, #4
 8006c2e:	7008      	strb	r0, [r1, #0]
 8006c30:	d1f7      	bne.n	8006c22 <_svfiprintf_r+0x71e>
 8006c32:	ebc1 0308 	rsb	r3, r1, r8
 8006c36:	9109      	str	r1, [sp, #36]	; 0x24
 8006c38:	9303      	str	r3, [sp, #12]
 8006c3a:	e546      	b.n	80066ca <_svfiprintf_r+0x1c6>
 8006c3c:	2b09      	cmp	r3, #9
 8006c3e:	bf82      	ittt	hi
 8006c40:	f64c 46cd 	movwhi	r6, #52429	; 0xcccd
 8006c44:	f10d 019f 	addhi.w	r1, sp, #159	; 0x9f
 8006c48:	f6cc 46cc 	movthi	r6, #52428	; 0xcccc
 8006c4c:	d801      	bhi.n	8006c52 <_svfiprintf_r+0x74e>
 8006c4e:	3330      	adds	r3, #48	; 0x30
 8006c50:	e755      	b.n	8006afe <_svfiprintf_r+0x5fa>
 8006c52:	fba6 0203 	umull	r0, r2, r6, r3
 8006c56:	08d2      	lsrs	r2, r2, #3
 8006c58:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8006c5c:	eba3 0c4c 	sub.w	ip, r3, ip, lsl #1
 8006c60:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8006c64:	4608      	mov	r0, r1
 8006c66:	f881 c000 	strb.w	ip, [r1]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	3901      	subs	r1, #1
 8006c6e:	2a00      	cmp	r2, #0
 8006c70:	d1ef      	bne.n	8006c52 <_svfiprintf_r+0x74e>
 8006c72:	9009      	str	r0, [sp, #36]	; 0x24
 8006c74:	e526      	b.n	80066c4 <_svfiprintf_r+0x1c0>
 8006c76:	9905      	ldr	r1, [sp, #20]
 8006c78:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006c7c:	bf14      	ite	ne
 8006c7e:	880b      	ldrhne	r3, [r1, #0]
 8006c80:	680b      	ldreq	r3, [r1, #0]
 8006c82:	2201      	movs	r2, #1
 8006c84:	9805      	ldr	r0, [sp, #20]
 8006c86:	1c19      	adds	r1, r3, #0
 8006c88:	bf18      	it	ne
 8006c8a:	2101      	movne	r1, #1
 8006c8c:	3004      	adds	r0, #4
 8006c8e:	9005      	str	r0, [sp, #20]
 8006c90:	e4f4      	b.n	800667c <_svfiprintf_r+0x178>
 8006c92:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8006c96:	bf0b      	itete	eq
 8006c98:	9a05      	ldreq	r2, [sp, #20]
 8006c9a:	9905      	ldrne	r1, [sp, #20]
 8006c9c:	6813      	ldreq	r3, [r2, #0]
 8006c9e:	880b      	ldrhne	r3, [r1, #0]
 8006ca0:	bf08      	it	eq
 8006ca2:	460a      	moveq	r2, r1
 8006ca4:	e7ee      	b.n	8006c84 <_svfiprintf_r+0x780>
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	e4e8      	b.n	800667c <_svfiprintf_r+0x178>
 8006caa:	9807      	ldr	r0, [sp, #28]
 8006cac:	4651      	mov	r1, sl
 8006cae:	4642      	mov	r2, r8
 8006cb0:	f7ff fba8 	bl	8006404 <__ssprint_r>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	f47f af31 	bne.w	8006b1c <_svfiprintf_r+0x618>
 8006cba:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006cbc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006cbe:	ac0e      	add	r4, sp, #56	; 0x38
 8006cc0:	e669      	b.n	8006996 <_svfiprintf_r+0x492>
 8006cc2:	9a05      	ldr	r2, [sp, #20]
 8006cc4:	6815      	ldr	r5, [r2, #0]
 8006cc6:	3204      	adds	r2, #4
 8006cc8:	2d00      	cmp	r5, #0
 8006cca:	bfbc      	itt	lt
 8006ccc:	9205      	strlt	r2, [sp, #20]
 8006cce:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8006cd2:	f6ff ac60 	blt.w	8006596 <_svfiprintf_r+0x92>
 8006cd6:	9205      	str	r2, [sp, #20]
 8006cd8:	e45d      	b.n	8006596 <_svfiprintf_r+0x92>
 8006cda:	bf00      	nop
 8006cdc:	08008008 	.word	0x08008008
 8006ce0:	08008018 	.word	0x08008018
 8006ce4:	9807      	ldr	r0, [sp, #28]
 8006ce6:	4651      	mov	r1, sl
 8006ce8:	4642      	mov	r2, r8
 8006cea:	f7ff fb8b 	bl	8006404 <__ssprint_r>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	f47f af14 	bne.w	8006b1c <_svfiprintf_r+0x618>
 8006cf4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006cf6:	e6e9      	b.n	8006acc <_svfiprintf_r+0x5c8>
 8006cf8:	2930      	cmp	r1, #48	; 0x30
 8006cfa:	d004      	beq.n	8006d06 <_svfiprintf_r+0x802>
 8006cfc:	1e93      	subs	r3, r2, #2
 8006cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8006d00:	2330      	movs	r3, #48	; 0x30
 8006d02:	f802 3c02 	strb.w	r3, [r2, #-2]
 8006d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d08:	ebc3 0308 	rsb	r3, r3, r8
 8006d0c:	9303      	str	r3, [sp, #12]
 8006d0e:	e4dc      	b.n	80066ca <_svfiprintf_r+0x1c6>
 8006d10:	9805      	ldr	r0, [sp, #20]
 8006d12:	9904      	ldr	r1, [sp, #16]
 8006d14:	6803      	ldr	r3, [r0, #0]
 8006d16:	3004      	adds	r0, #4
 8006d18:	9005      	str	r0, [sp, #20]
 8006d1a:	6019      	str	r1, [r3, #0]
 8006d1c:	e411      	b.n	8006542 <_svfiprintf_r+0x3e>
 8006d1e:	9a05      	ldr	r2, [sp, #20]
 8006d20:	6813      	ldr	r3, [r2, #0]
 8006d22:	3204      	adds	r2, #4
 8006d24:	9205      	str	r2, [sp, #20]
 8006d26:	e54e      	b.n	80067c6 <_svfiprintf_r+0x2c2>
 8006d28:	9905      	ldr	r1, [sp, #20]
 8006d2a:	880b      	ldrh	r3, [r1, #0]
 8006d2c:	3104      	adds	r1, #4
 8006d2e:	9105      	str	r1, [sp, #20]
 8006d30:	e52b      	b.n	800678a <_svfiprintf_r+0x286>
 8006d32:	f7ff fb37 	bl	80063a4 <strlen>
 8006d36:	9608      	str	r6, [sp, #32]
 8006d38:	9003      	str	r0, [sp, #12]
 8006d3a:	e4c7      	b.n	80066cc <_svfiprintf_r+0x1c8>
 8006d3c:	9807      	ldr	r0, [sp, #28]
 8006d3e:	4651      	mov	r1, sl
 8006d40:	4642      	mov	r2, r8
 8006d42:	f7ff fb5f 	bl	8006404 <__ssprint_r>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	f47f aee8 	bne.w	8006b1c <_svfiprintf_r+0x618>
 8006d4c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006d4e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006d50:	ac0e      	add	r4, sp, #56	; 0x38
 8006d52:	e642      	b.n	80069da <_svfiprintf_r+0x4d6>
 8006d54:	9905      	ldr	r1, [sp, #20]
 8006d56:	9a04      	ldr	r2, [sp, #16]
 8006d58:	680b      	ldr	r3, [r1, #0]
 8006d5a:	3104      	adds	r1, #4
 8006d5c:	9105      	str	r1, [sp, #20]
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	f7ff bbef 	b.w	8006542 <_svfiprintf_r+0x3e>
 8006d64:	2140      	movs	r1, #64	; 0x40
 8006d66:	9200      	str	r2, [sp, #0]
 8006d68:	f7fe fa56 	bl	8005218 <_malloc_r>
 8006d6c:	9a00      	ldr	r2, [sp, #0]
 8006d6e:	f8ca 0000 	str.w	r0, [sl]
 8006d72:	f8ca 0010 	str.w	r0, [sl, #16]
 8006d76:	b188      	cbz	r0, 8006d9c <_svfiprintf_r+0x898>
 8006d78:	2340      	movs	r3, #64	; 0x40
 8006d7a:	f8ca 3014 	str.w	r3, [sl, #20]
 8006d7e:	f7ff bbcf 	b.w	8006520 <_svfiprintf_r+0x1c>
 8006d82:	2d06      	cmp	r5, #6
 8006d84:	bf28      	it	cs
 8006d86:	2506      	movcs	r5, #6
 8006d88:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8006d8c:	9302      	str	r3, [sp, #8]
 8006d8e:	4b07      	ldr	r3, [pc, #28]	; (8006dac <_svfiprintf_r+0x8a8>)
 8006d90:	9503      	str	r5, [sp, #12]
 8006d92:	9309      	str	r3, [sp, #36]	; 0x24
 8006d94:	e52e      	b.n	80067f4 <_svfiprintf_r+0x2f0>
 8006d96:	9503      	str	r5, [sp, #12]
 8006d98:	9008      	str	r0, [sp, #32]
 8006d9a:	e497      	b.n	80066cc <_svfiprintf_r+0x1c8>
 8006d9c:	9807      	ldr	r0, [sp, #28]
 8006d9e:	230c      	movs	r3, #12
 8006da0:	6003      	str	r3, [r0, #0]
 8006da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006da6:	9304      	str	r3, [sp, #16]
 8006da8:	e6c1      	b.n	8006b2e <_svfiprintf_r+0x62a>
 8006daa:	bf00      	nop
 8006dac:	08008188 	.word	0x08008188

08006db0 <_calloc_r>:
 8006db0:	b510      	push	{r4, lr}
 8006db2:	fb01 f102 	mul.w	r1, r1, r2
 8006db6:	f7fe fa2f 	bl	8005218 <_malloc_r>
 8006dba:	4604      	mov	r4, r0
 8006dbc:	b300      	cbz	r0, 8006e00 <_calloc_r+0x50>
 8006dbe:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006dc2:	f022 0203 	bic.w	r2, r2, #3
 8006dc6:	3a04      	subs	r2, #4
 8006dc8:	2a24      	cmp	r2, #36	; 0x24
 8006dca:	d81b      	bhi.n	8006e04 <_calloc_r+0x54>
 8006dcc:	2a13      	cmp	r2, #19
 8006dce:	bf98      	it	ls
 8006dd0:	4602      	movls	r2, r0
 8006dd2:	d911      	bls.n	8006df8 <_calloc_r+0x48>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	2a1b      	cmp	r2, #27
 8006dd8:	6003      	str	r3, [r0, #0]
 8006dda:	6043      	str	r3, [r0, #4]
 8006ddc:	bf98      	it	ls
 8006dde:	f100 0208 	addls.w	r2, r0, #8
 8006de2:	d909      	bls.n	8006df8 <_calloc_r+0x48>
 8006de4:	2a24      	cmp	r2, #36	; 0x24
 8006de6:	6083      	str	r3, [r0, #8]
 8006de8:	60c3      	str	r3, [r0, #12]
 8006dea:	bf11      	iteee	ne
 8006dec:	f100 0210 	addne.w	r2, r0, #16
 8006df0:	6103      	streq	r3, [r0, #16]
 8006df2:	6143      	streq	r3, [r0, #20]
 8006df4:	f100 0218 	addeq.w	r2, r0, #24
 8006df8:	2300      	movs	r3, #0
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	6053      	str	r3, [r2, #4]
 8006dfe:	6093      	str	r3, [r2, #8]
 8006e00:	4620      	mov	r0, r4
 8006e02:	bd10      	pop	{r4, pc}
 8006e04:	2100      	movs	r1, #0
 8006e06:	f000 f85b 	bl	8006ec0 <memset>
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	bd10      	pop	{r4, pc}
 8006e0e:	bf00      	nop

08006e10 <memmove>:
 8006e10:	4288      	cmp	r0, r1
 8006e12:	b4f0      	push	{r4, r5, r6, r7}
 8006e14:	d912      	bls.n	8006e3c <memmove+0x2c>
 8006e16:	188d      	adds	r5, r1, r2
 8006e18:	42a8      	cmp	r0, r5
 8006e1a:	d20f      	bcs.n	8006e3c <memmove+0x2c>
 8006e1c:	b162      	cbz	r2, 8006e38 <memmove+0x28>
 8006e1e:	4251      	negs	r1, r2
 8006e20:	4613      	mov	r3, r2
 8006e22:	1882      	adds	r2, r0, r2
 8006e24:	186d      	adds	r5, r5, r1
 8006e26:	1852      	adds	r2, r2, r1
 8006e28:	18ec      	adds	r4, r5, r3
 8006e2a:	18d1      	adds	r1, r2, r3
 8006e2c:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	f801 4c01 	strb.w	r4, [r1, #-1]
 8006e36:	d1f7      	bne.n	8006e28 <memmove+0x18>
 8006e38:	bcf0      	pop	{r4, r5, r6, r7}
 8006e3a:	4770      	bx	lr
 8006e3c:	2a0f      	cmp	r2, #15
 8006e3e:	bf98      	it	ls
 8006e40:	4603      	movls	r3, r0
 8006e42:	d931      	bls.n	8006ea8 <memmove+0x98>
 8006e44:	ea41 0300 	orr.w	r3, r1, r0
 8006e48:	079b      	lsls	r3, r3, #30
 8006e4a:	d137      	bne.n	8006ebc <memmove+0xac>
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	4603      	mov	r3, r0
 8006e50:	4615      	mov	r5, r2
 8006e52:	6826      	ldr	r6, [r4, #0]
 8006e54:	601e      	str	r6, [r3, #0]
 8006e56:	6866      	ldr	r6, [r4, #4]
 8006e58:	605e      	str	r6, [r3, #4]
 8006e5a:	68a6      	ldr	r6, [r4, #8]
 8006e5c:	609e      	str	r6, [r3, #8]
 8006e5e:	68e6      	ldr	r6, [r4, #12]
 8006e60:	3d10      	subs	r5, #16
 8006e62:	60de      	str	r6, [r3, #12]
 8006e64:	3410      	adds	r4, #16
 8006e66:	3310      	adds	r3, #16
 8006e68:	2d0f      	cmp	r5, #15
 8006e6a:	d8f2      	bhi.n	8006e52 <memmove+0x42>
 8006e6c:	f1a2 0410 	sub.w	r4, r2, #16
 8006e70:	f024 040f 	bic.w	r4, r4, #15
 8006e74:	f002 020f 	and.w	r2, r2, #15
 8006e78:	3410      	adds	r4, #16
 8006e7a:	2a03      	cmp	r2, #3
 8006e7c:	eb00 0304 	add.w	r3, r0, r4
 8006e80:	4421      	add	r1, r4
 8006e82:	d911      	bls.n	8006ea8 <memmove+0x98>
 8006e84:	1f0e      	subs	r6, r1, #4
 8006e86:	461d      	mov	r5, r3
 8006e88:	4614      	mov	r4, r2
 8006e8a:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8006e8e:	3c04      	subs	r4, #4
 8006e90:	2c03      	cmp	r4, #3
 8006e92:	f845 7b04 	str.w	r7, [r5], #4
 8006e96:	d8f8      	bhi.n	8006e8a <memmove+0x7a>
 8006e98:	1f14      	subs	r4, r2, #4
 8006e9a:	f024 0403 	bic.w	r4, r4, #3
 8006e9e:	3404      	adds	r4, #4
 8006ea0:	f002 0203 	and.w	r2, r2, #3
 8006ea4:	1909      	adds	r1, r1, r4
 8006ea6:	191b      	adds	r3, r3, r4
 8006ea8:	2a00      	cmp	r2, #0
 8006eaa:	d0c5      	beq.n	8006e38 <memmove+0x28>
 8006eac:	3901      	subs	r1, #1
 8006eae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006eb2:	3a01      	subs	r2, #1
 8006eb4:	f803 4b01 	strb.w	r4, [r3], #1
 8006eb8:	d1f9      	bne.n	8006eae <memmove+0x9e>
 8006eba:	e7bd      	b.n	8006e38 <memmove+0x28>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	e7f5      	b.n	8006eac <memmove+0x9c>

08006ec0 <memset>:
 8006ec0:	f010 0f03 	tst.w	r0, #3
 8006ec4:	b470      	push	{r4, r5, r6}
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	d042      	beq.n	8006f50 <memset+0x90>
 8006eca:	2a00      	cmp	r2, #0
 8006ecc:	d03e      	beq.n	8006f4c <memset+0x8c>
 8006ece:	3a01      	subs	r2, #1
 8006ed0:	b2cd      	uxtb	r5, r1
 8006ed2:	e003      	b.n	8006edc <memset+0x1c>
 8006ed4:	1e54      	subs	r4, r2, #1
 8006ed6:	2a00      	cmp	r2, #0
 8006ed8:	d038      	beq.n	8006f4c <memset+0x8c>
 8006eda:	4622      	mov	r2, r4
 8006edc:	f803 5b01 	strb.w	r5, [r3], #1
 8006ee0:	f013 0f03 	tst.w	r3, #3
 8006ee4:	461c      	mov	r4, r3
 8006ee6:	d1f5      	bne.n	8006ed4 <memset+0x14>
 8006ee8:	2a03      	cmp	r2, #3
 8006eea:	d929      	bls.n	8006f40 <memset+0x80>
 8006eec:	b2cd      	uxtb	r5, r1
 8006eee:	2a0f      	cmp	r2, #15
 8006ef0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006ef4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006ef8:	bf84      	itt	hi
 8006efa:	4623      	movhi	r3, r4
 8006efc:	4616      	movhi	r6, r2
 8006efe:	d911      	bls.n	8006f24 <memset+0x64>
 8006f00:	3e10      	subs	r6, #16
 8006f02:	601d      	str	r5, [r3, #0]
 8006f04:	605d      	str	r5, [r3, #4]
 8006f06:	609d      	str	r5, [r3, #8]
 8006f08:	60dd      	str	r5, [r3, #12]
 8006f0a:	3310      	adds	r3, #16
 8006f0c:	2e0f      	cmp	r6, #15
 8006f0e:	d8f7      	bhi.n	8006f00 <memset+0x40>
 8006f10:	f1a2 0310 	sub.w	r3, r2, #16
 8006f14:	f023 030f 	bic.w	r3, r3, #15
 8006f18:	f002 020f 	and.w	r2, r2, #15
 8006f1c:	3310      	adds	r3, #16
 8006f1e:	2a03      	cmp	r2, #3
 8006f20:	441c      	add	r4, r3
 8006f22:	d90d      	bls.n	8006f40 <memset+0x80>
 8006f24:	4626      	mov	r6, r4
 8006f26:	4613      	mov	r3, r2
 8006f28:	3b04      	subs	r3, #4
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	f846 5b04 	str.w	r5, [r6], #4
 8006f30:	d8fa      	bhi.n	8006f28 <memset+0x68>
 8006f32:	1f13      	subs	r3, r2, #4
 8006f34:	f023 0303 	bic.w	r3, r3, #3
 8006f38:	3304      	adds	r3, #4
 8006f3a:	f002 0203 	and.w	r2, r2, #3
 8006f3e:	18e4      	adds	r4, r4, r3
 8006f40:	b2c9      	uxtb	r1, r1
 8006f42:	b11a      	cbz	r2, 8006f4c <memset+0x8c>
 8006f44:	3a01      	subs	r2, #1
 8006f46:	f804 1b01 	strb.w	r1, [r4], #1
 8006f4a:	d1fb      	bne.n	8006f44 <memset+0x84>
 8006f4c:	bc70      	pop	{r4, r5, r6}
 8006f4e:	4770      	bx	lr
 8006f50:	4604      	mov	r4, r0
 8006f52:	e7c9      	b.n	8006ee8 <memset+0x28>

08006f54 <_realloc_r>:
 8006f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f58:	460c      	mov	r4, r1
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	4690      	mov	r8, r2
 8006f60:	2900      	cmp	r1, #0
 8006f62:	f000 80fe 	beq.w	8007162 <_realloc_r+0x20e>
 8006f66:	f108 050b 	add.w	r5, r8, #11
 8006f6a:	f7fe fc8b 	bl	8005884 <__malloc_lock>
 8006f6e:	2d16      	cmp	r5, #22
 8006f70:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006f74:	d87d      	bhi.n	8007072 <_realloc_r+0x11e>
 8006f76:	2210      	movs	r2, #16
 8006f78:	2600      	movs	r6, #0
 8006f7a:	4615      	mov	r5, r2
 8006f7c:	4545      	cmp	r5, r8
 8006f7e:	bf38      	it	cc
 8006f80:	f046 0601 	orrcc.w	r6, r6, #1
 8006f84:	2e00      	cmp	r6, #0
 8006f86:	f040 80f2 	bne.w	800716e <_realloc_r+0x21a>
 8006f8a:	f021 0a03 	bic.w	sl, r1, #3
 8006f8e:	4592      	cmp	sl, r2
 8006f90:	f1a4 0b08 	sub.w	fp, r4, #8
 8006f94:	bfa8      	it	ge
 8006f96:	4656      	movge	r6, sl
 8006f98:	da55      	bge.n	8007046 <_realloc_r+0xf2>
 8006f9a:	4ba0      	ldr	r3, [pc, #640]	; (800721c <_realloc_r+0x2c8>)
 8006f9c:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8006fa0:	eb0b 000a 	add.w	r0, fp, sl
 8006fa4:	4584      	cmp	ip, r0
 8006fa6:	f000 80e7 	beq.w	8007178 <_realloc_r+0x224>
 8006faa:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8006fae:	f02e 0901 	bic.w	r9, lr, #1
 8006fb2:	4481      	add	r9, r0
 8006fb4:	f8d9 9004 	ldr.w	r9, [r9, #4]
 8006fb8:	f019 0f01 	tst.w	r9, #1
 8006fbc:	bf1c      	itt	ne
 8006fbe:	46b6      	movne	lr, r6
 8006fc0:	4670      	movne	r0, lr
 8006fc2:	d05b      	beq.n	800707c <_realloc_r+0x128>
 8006fc4:	07c9      	lsls	r1, r1, #31
 8006fc6:	d479      	bmi.n	80070bc <_realloc_r+0x168>
 8006fc8:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8006fcc:	ebc1 090b 	rsb	r9, r1, fp
 8006fd0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006fd4:	f021 0103 	bic.w	r1, r1, #3
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	f000 8097 	beq.w	800710c <_realloc_r+0x1b8>
 8006fde:	4560      	cmp	r0, ip
 8006fe0:	eb01 0c0a 	add.w	ip, r1, sl
 8006fe4:	eb0e 060c 	add.w	r6, lr, ip
 8006fe8:	f000 811a 	beq.w	8007220 <_realloc_r+0x2cc>
 8006fec:	42b2      	cmp	r2, r6
 8006fee:	f300 808f 	bgt.w	8007110 <_realloc_r+0x1bc>
 8006ff2:	68c3      	ldr	r3, [r0, #12]
 8006ff4:	6882      	ldr	r2, [r0, #8]
 8006ff6:	46c8      	mov	r8, r9
 8006ff8:	609a      	str	r2, [r3, #8]
 8006ffa:	60d3      	str	r3, [r2, #12]
 8006ffc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007000:	f858 1f08 	ldr.w	r1, [r8, #8]!
 8007004:	f1aa 0204 	sub.w	r2, sl, #4
 8007008:	2a24      	cmp	r2, #36	; 0x24
 800700a:	60cb      	str	r3, [r1, #12]
 800700c:	6099      	str	r1, [r3, #8]
 800700e:	f200 8144 	bhi.w	800729a <_realloc_r+0x346>
 8007012:	2a13      	cmp	r2, #19
 8007014:	bf98      	it	ls
 8007016:	4643      	movls	r3, r8
 8007018:	d90b      	bls.n	8007032 <_realloc_r+0xde>
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	f8c9 3008 	str.w	r3, [r9, #8]
 8007020:	6863      	ldr	r3, [r4, #4]
 8007022:	2a1b      	cmp	r2, #27
 8007024:	f8c9 300c 	str.w	r3, [r9, #12]
 8007028:	f200 8140 	bhi.w	80072ac <_realloc_r+0x358>
 800702c:	f109 0310 	add.w	r3, r9, #16
 8007030:	3408      	adds	r4, #8
 8007032:	6822      	ldr	r2, [r4, #0]
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	6862      	ldr	r2, [r4, #4]
 8007038:	605a      	str	r2, [r3, #4]
 800703a:	68a2      	ldr	r2, [r4, #8]
 800703c:	609a      	str	r2, [r3, #8]
 800703e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007042:	4644      	mov	r4, r8
 8007044:	46cb      	mov	fp, r9
 8007046:	1b72      	subs	r2, r6, r5
 8007048:	2a0f      	cmp	r2, #15
 800704a:	d822      	bhi.n	8007092 <_realloc_r+0x13e>
 800704c:	f001 0101 	and.w	r1, r1, #1
 8007050:	eb0b 0306 	add.w	r3, fp, r6
 8007054:	430e      	orrs	r6, r1
 8007056:	f8cb 6004 	str.w	r6, [fp, #4]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	f042 0201 	orr.w	r2, r2, #1
 8007060:	605a      	str	r2, [r3, #4]
 8007062:	4638      	mov	r0, r7
 8007064:	f7fe fc10 	bl	8005888 <__malloc_unlock>
 8007068:	46a0      	mov	r8, r4
 800706a:	4640      	mov	r0, r8
 800706c:	b003      	add	sp, #12
 800706e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007072:	f025 0507 	bic.w	r5, r5, #7
 8007076:	462a      	mov	r2, r5
 8007078:	0fee      	lsrs	r6, r5, #31
 800707a:	e77f      	b.n	8006f7c <_realloc_r+0x28>
 800707c:	f02e 0e03 	bic.w	lr, lr, #3
 8007080:	eb0e 060a 	add.w	r6, lr, sl
 8007084:	42b2      	cmp	r2, r6
 8007086:	dc9d      	bgt.n	8006fc4 <_realloc_r+0x70>
 8007088:	68c3      	ldr	r3, [r0, #12]
 800708a:	6882      	ldr	r2, [r0, #8]
 800708c:	60d3      	str	r3, [r2, #12]
 800708e:	609a      	str	r2, [r3, #8]
 8007090:	e7d9      	b.n	8007046 <_realloc_r+0xf2>
 8007092:	eb0b 0305 	add.w	r3, fp, r5
 8007096:	f001 0101 	and.w	r1, r1, #1
 800709a:	1898      	adds	r0, r3, r2
 800709c:	430d      	orrs	r5, r1
 800709e:	f042 0201 	orr.w	r2, r2, #1
 80070a2:	f8cb 5004 	str.w	r5, [fp, #4]
 80070a6:	605a      	str	r2, [r3, #4]
 80070a8:	6842      	ldr	r2, [r0, #4]
 80070aa:	f042 0201 	orr.w	r2, r2, #1
 80070ae:	6042      	str	r2, [r0, #4]
 80070b0:	f103 0108 	add.w	r1, r3, #8
 80070b4:	4638      	mov	r0, r7
 80070b6:	f7fd ffa3 	bl	8005000 <_free_r>
 80070ba:	e7d2      	b.n	8007062 <_realloc_r+0x10e>
 80070bc:	4641      	mov	r1, r8
 80070be:	4638      	mov	r0, r7
 80070c0:	f7fe f8aa 	bl	8005218 <_malloc_r>
 80070c4:	4680      	mov	r8, r0
 80070c6:	b1e8      	cbz	r0, 8007104 <_realloc_r+0x1b0>
 80070c8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80070cc:	f021 0301 	bic.w	r3, r1, #1
 80070d0:	f1a0 0208 	sub.w	r2, r0, #8
 80070d4:	445b      	add	r3, fp
 80070d6:	429a      	cmp	r2, r3
 80070d8:	f000 80d9 	beq.w	800728e <_realloc_r+0x33a>
 80070dc:	f1aa 0204 	sub.w	r2, sl, #4
 80070e0:	2a24      	cmp	r2, #36	; 0x24
 80070e2:	f200 8096 	bhi.w	8007212 <_realloc_r+0x2be>
 80070e6:	2a13      	cmp	r2, #19
 80070e8:	bf9c      	itt	ls
 80070ea:	4603      	movls	r3, r0
 80070ec:	4622      	movls	r2, r4
 80070ee:	d863      	bhi.n	80071b8 <_realloc_r+0x264>
 80070f0:	6811      	ldr	r1, [r2, #0]
 80070f2:	6019      	str	r1, [r3, #0]
 80070f4:	6851      	ldr	r1, [r2, #4]
 80070f6:	6059      	str	r1, [r3, #4]
 80070f8:	6892      	ldr	r2, [r2, #8]
 80070fa:	609a      	str	r2, [r3, #8]
 80070fc:	4638      	mov	r0, r7
 80070fe:	4621      	mov	r1, r4
 8007100:	f7fd ff7e 	bl	8005000 <_free_r>
 8007104:	4638      	mov	r0, r7
 8007106:	f7fe fbbf 	bl	8005888 <__malloc_unlock>
 800710a:	e7ae      	b.n	800706a <_realloc_r+0x116>
 800710c:	eb01 0c0a 	add.w	ip, r1, sl
 8007110:	4562      	cmp	r2, ip
 8007112:	dcd3      	bgt.n	80070bc <_realloc_r+0x168>
 8007114:	464e      	mov	r6, r9
 8007116:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800711a:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800711e:	f1aa 0204 	sub.w	r2, sl, #4
 8007122:	2a24      	cmp	r2, #36	; 0x24
 8007124:	60cb      	str	r3, [r1, #12]
 8007126:	6099      	str	r1, [r3, #8]
 8007128:	d865      	bhi.n	80071f6 <_realloc_r+0x2a2>
 800712a:	2a13      	cmp	r2, #19
 800712c:	bf98      	it	ls
 800712e:	4633      	movls	r3, r6
 8007130:	d90b      	bls.n	800714a <_realloc_r+0x1f6>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	f8c9 3008 	str.w	r3, [r9, #8]
 8007138:	6863      	ldr	r3, [r4, #4]
 800713a:	2a1b      	cmp	r2, #27
 800713c:	f8c9 300c 	str.w	r3, [r9, #12]
 8007140:	f200 80c0 	bhi.w	80072c4 <_realloc_r+0x370>
 8007144:	f109 0310 	add.w	r3, r9, #16
 8007148:	3408      	adds	r4, #8
 800714a:	6822      	ldr	r2, [r4, #0]
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	6862      	ldr	r2, [r4, #4]
 8007150:	605a      	str	r2, [r3, #4]
 8007152:	68a2      	ldr	r2, [r4, #8]
 8007154:	609a      	str	r2, [r3, #8]
 8007156:	4634      	mov	r4, r6
 8007158:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800715c:	4666      	mov	r6, ip
 800715e:	46cb      	mov	fp, r9
 8007160:	e771      	b.n	8007046 <_realloc_r+0xf2>
 8007162:	4611      	mov	r1, r2
 8007164:	b003      	add	sp, #12
 8007166:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716a:	f7fe b855 	b.w	8005218 <_malloc_r>
 800716e:	230c      	movs	r3, #12
 8007170:	603b      	str	r3, [r7, #0]
 8007172:	f04f 0800 	mov.w	r8, #0
 8007176:	e778      	b.n	800706a <_realloc_r+0x116>
 8007178:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800717c:	f026 0e03 	bic.w	lr, r6, #3
 8007180:	eb0e 000a 	add.w	r0, lr, sl
 8007184:	f105 0610 	add.w	r6, r5, #16
 8007188:	42b0      	cmp	r0, r6
 800718a:	bfb8      	it	lt
 800718c:	4660      	movlt	r0, ip
 800718e:	f6ff af19 	blt.w	8006fc4 <_realloc_r+0x70>
 8007192:	eb0b 0205 	add.w	r2, fp, r5
 8007196:	1b41      	subs	r1, r0, r5
 8007198:	f041 0101 	orr.w	r1, r1, #1
 800719c:	6051      	str	r1, [r2, #4]
 800719e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80071a2:	609a      	str	r2, [r3, #8]
 80071a4:	f001 0301 	and.w	r3, r1, #1
 80071a8:	431d      	orrs	r5, r3
 80071aa:	f844 5c04 	str.w	r5, [r4, #-4]
 80071ae:	4638      	mov	r0, r7
 80071b0:	f7fe fb6a 	bl	8005888 <__malloc_unlock>
 80071b4:	46a0      	mov	r8, r4
 80071b6:	e758      	b.n	800706a <_realloc_r+0x116>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	6003      	str	r3, [r0, #0]
 80071bc:	6863      	ldr	r3, [r4, #4]
 80071be:	2a1b      	cmp	r2, #27
 80071c0:	6043      	str	r3, [r0, #4]
 80071c2:	bf9c      	itt	ls
 80071c4:	f104 0208 	addls.w	r2, r4, #8
 80071c8:	f100 0308 	addls.w	r3, r0, #8
 80071cc:	d990      	bls.n	80070f0 <_realloc_r+0x19c>
 80071ce:	68a3      	ldr	r3, [r4, #8]
 80071d0:	6083      	str	r3, [r0, #8]
 80071d2:	68e3      	ldr	r3, [r4, #12]
 80071d4:	2a24      	cmp	r2, #36	; 0x24
 80071d6:	60c3      	str	r3, [r0, #12]
 80071d8:	bf03      	ittte	eq
 80071da:	6923      	ldreq	r3, [r4, #16]
 80071dc:	6103      	streq	r3, [r0, #16]
 80071de:	6962      	ldreq	r2, [r4, #20]
 80071e0:	f100 0310 	addne.w	r3, r0, #16
 80071e4:	bf09      	itett	eq
 80071e6:	6142      	streq	r2, [r0, #20]
 80071e8:	f104 0210 	addne.w	r2, r4, #16
 80071ec:	f100 0318 	addeq.w	r3, r0, #24
 80071f0:	f104 0218 	addeq.w	r2, r4, #24
 80071f4:	e77c      	b.n	80070f0 <_realloc_r+0x19c>
 80071f6:	4621      	mov	r1, r4
 80071f8:	4630      	mov	r0, r6
 80071fa:	f8cd c004 	str.w	ip, [sp, #4]
 80071fe:	f7ff fe07 	bl	8006e10 <memmove>
 8007202:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007206:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800720a:	4634      	mov	r4, r6
 800720c:	46cb      	mov	fp, r9
 800720e:	4666      	mov	r6, ip
 8007210:	e719      	b.n	8007046 <_realloc_r+0xf2>
 8007212:	4621      	mov	r1, r4
 8007214:	f7ff fdfc 	bl	8006e10 <memmove>
 8007218:	e770      	b.n	80070fc <_realloc_r+0x1a8>
 800721a:	bf00      	nop
 800721c:	2000057c 	.word	0x2000057c
 8007220:	f105 0110 	add.w	r1, r5, #16
 8007224:	428e      	cmp	r6, r1
 8007226:	f6ff af73 	blt.w	8007110 <_realloc_r+0x1bc>
 800722a:	46c8      	mov	r8, r9
 800722c:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8007230:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8007234:	f1aa 0204 	sub.w	r2, sl, #4
 8007238:	2a24      	cmp	r2, #36	; 0x24
 800723a:	60c1      	str	r1, [r0, #12]
 800723c:	6088      	str	r0, [r1, #8]
 800723e:	d861      	bhi.n	8007304 <_realloc_r+0x3b0>
 8007240:	2a13      	cmp	r2, #19
 8007242:	bf98      	it	ls
 8007244:	4642      	movls	r2, r8
 8007246:	d90a      	bls.n	800725e <_realloc_r+0x30a>
 8007248:	6821      	ldr	r1, [r4, #0]
 800724a:	f8c9 1008 	str.w	r1, [r9, #8]
 800724e:	6861      	ldr	r1, [r4, #4]
 8007250:	2a1b      	cmp	r2, #27
 8007252:	f8c9 100c 	str.w	r1, [r9, #12]
 8007256:	d85c      	bhi.n	8007312 <_realloc_r+0x3be>
 8007258:	f109 0210 	add.w	r2, r9, #16
 800725c:	3408      	adds	r4, #8
 800725e:	6821      	ldr	r1, [r4, #0]
 8007260:	6011      	str	r1, [r2, #0]
 8007262:	6861      	ldr	r1, [r4, #4]
 8007264:	6051      	str	r1, [r2, #4]
 8007266:	68a1      	ldr	r1, [r4, #8]
 8007268:	6091      	str	r1, [r2, #8]
 800726a:	eb09 0205 	add.w	r2, r9, r5
 800726e:	1b71      	subs	r1, r6, r5
 8007270:	f041 0101 	orr.w	r1, r1, #1
 8007274:	6051      	str	r1, [r2, #4]
 8007276:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800727a:	609a      	str	r2, [r3, #8]
 800727c:	f001 0301 	and.w	r3, r1, #1
 8007280:	431d      	orrs	r5, r3
 8007282:	f8c9 5004 	str.w	r5, [r9, #4]
 8007286:	4638      	mov	r0, r7
 8007288:	f7fe fafe 	bl	8005888 <__malloc_unlock>
 800728c:	e6ed      	b.n	800706a <_realloc_r+0x116>
 800728e:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8007292:	f026 0603 	bic.w	r6, r6, #3
 8007296:	4456      	add	r6, sl
 8007298:	e6d5      	b.n	8007046 <_realloc_r+0xf2>
 800729a:	4621      	mov	r1, r4
 800729c:	4640      	mov	r0, r8
 800729e:	f7ff fdb7 	bl	8006e10 <memmove>
 80072a2:	4644      	mov	r4, r8
 80072a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80072a8:	46cb      	mov	fp, r9
 80072aa:	e6cc      	b.n	8007046 <_realloc_r+0xf2>
 80072ac:	68a3      	ldr	r3, [r4, #8]
 80072ae:	f8c9 3010 	str.w	r3, [r9, #16]
 80072b2:	68e3      	ldr	r3, [r4, #12]
 80072b4:	2a24      	cmp	r2, #36	; 0x24
 80072b6:	f8c9 3014 	str.w	r3, [r9, #20]
 80072ba:	d00f      	beq.n	80072dc <_realloc_r+0x388>
 80072bc:	f109 0318 	add.w	r3, r9, #24
 80072c0:	3410      	adds	r4, #16
 80072c2:	e6b6      	b.n	8007032 <_realloc_r+0xde>
 80072c4:	68a3      	ldr	r3, [r4, #8]
 80072c6:	f8c9 3010 	str.w	r3, [r9, #16]
 80072ca:	68e3      	ldr	r3, [r4, #12]
 80072cc:	2a24      	cmp	r2, #36	; 0x24
 80072ce:	f8c9 3014 	str.w	r3, [r9, #20]
 80072d2:	d00d      	beq.n	80072f0 <_realloc_r+0x39c>
 80072d4:	f109 0318 	add.w	r3, r9, #24
 80072d8:	3410      	adds	r4, #16
 80072da:	e736      	b.n	800714a <_realloc_r+0x1f6>
 80072dc:	6923      	ldr	r3, [r4, #16]
 80072de:	f8c9 3018 	str.w	r3, [r9, #24]
 80072e2:	6962      	ldr	r2, [r4, #20]
 80072e4:	f109 0320 	add.w	r3, r9, #32
 80072e8:	f8c9 201c 	str.w	r2, [r9, #28]
 80072ec:	3418      	adds	r4, #24
 80072ee:	e6a0      	b.n	8007032 <_realloc_r+0xde>
 80072f0:	6923      	ldr	r3, [r4, #16]
 80072f2:	f8c9 3018 	str.w	r3, [r9, #24]
 80072f6:	6962      	ldr	r2, [r4, #20]
 80072f8:	f109 0320 	add.w	r3, r9, #32
 80072fc:	f8c9 201c 	str.w	r2, [r9, #28]
 8007300:	3418      	adds	r4, #24
 8007302:	e722      	b.n	800714a <_realloc_r+0x1f6>
 8007304:	4640      	mov	r0, r8
 8007306:	4621      	mov	r1, r4
 8007308:	9301      	str	r3, [sp, #4]
 800730a:	f7ff fd81 	bl	8006e10 <memmove>
 800730e:	9b01      	ldr	r3, [sp, #4]
 8007310:	e7ab      	b.n	800726a <_realloc_r+0x316>
 8007312:	68a1      	ldr	r1, [r4, #8]
 8007314:	f8c9 1010 	str.w	r1, [r9, #16]
 8007318:	68e1      	ldr	r1, [r4, #12]
 800731a:	2a24      	cmp	r2, #36	; 0x24
 800731c:	f8c9 1014 	str.w	r1, [r9, #20]
 8007320:	d003      	beq.n	800732a <_realloc_r+0x3d6>
 8007322:	f109 0218 	add.w	r2, r9, #24
 8007326:	3410      	adds	r4, #16
 8007328:	e799      	b.n	800725e <_realloc_r+0x30a>
 800732a:	6922      	ldr	r2, [r4, #16]
 800732c:	f8c9 2018 	str.w	r2, [r9, #24]
 8007330:	6961      	ldr	r1, [r4, #20]
 8007332:	f109 0220 	add.w	r2, r9, #32
 8007336:	f8c9 101c 	str.w	r1, [r9, #28]
 800733a:	3418      	adds	r4, #24
 800733c:	e78f      	b.n	800725e <_realloc_r+0x30a>
 800733e:	bf00      	nop

08007340 <__aeabi_drsub>:
 8007340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007344:	e002      	b.n	800734c <__adddf3>
 8007346:	bf00      	nop

08007348 <__aeabi_dsub>:
 8007348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800734c <__adddf3>:
 800734c:	b530      	push	{r4, r5, lr}
 800734e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007356:	ea94 0f05 	teq	r4, r5
 800735a:	bf08      	it	eq
 800735c:	ea90 0f02 	teqeq	r0, r2
 8007360:	bf1f      	itttt	ne
 8007362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800736a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800736e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007372:	f000 80e2 	beq.w	800753a <__adddf3+0x1ee>
 8007376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800737a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800737e:	bfb8      	it	lt
 8007380:	426d      	neglt	r5, r5
 8007382:	dd0c      	ble.n	800739e <__adddf3+0x52>
 8007384:	442c      	add	r4, r5
 8007386:	ea80 0202 	eor.w	r2, r0, r2
 800738a:	ea81 0303 	eor.w	r3, r1, r3
 800738e:	ea82 0000 	eor.w	r0, r2, r0
 8007392:	ea83 0101 	eor.w	r1, r3, r1
 8007396:	ea80 0202 	eor.w	r2, r0, r2
 800739a:	ea81 0303 	eor.w	r3, r1, r3
 800739e:	2d36      	cmp	r5, #54	; 0x36
 80073a0:	bf88      	it	hi
 80073a2:	bd30      	pophi	{r4, r5, pc}
 80073a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80073a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80073ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80073b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80073b4:	d002      	beq.n	80073bc <__adddf3+0x70>
 80073b6:	4240      	negs	r0, r0
 80073b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80073bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80073c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80073c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80073c8:	d002      	beq.n	80073d0 <__adddf3+0x84>
 80073ca:	4252      	negs	r2, r2
 80073cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80073d0:	ea94 0f05 	teq	r4, r5
 80073d4:	f000 80a7 	beq.w	8007526 <__adddf3+0x1da>
 80073d8:	f1a4 0401 	sub.w	r4, r4, #1
 80073dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80073e0:	db0d      	blt.n	80073fe <__adddf3+0xb2>
 80073e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80073e6:	fa22 f205 	lsr.w	r2, r2, r5
 80073ea:	1880      	adds	r0, r0, r2
 80073ec:	f141 0100 	adc.w	r1, r1, #0
 80073f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80073f4:	1880      	adds	r0, r0, r2
 80073f6:	fa43 f305 	asr.w	r3, r3, r5
 80073fa:	4159      	adcs	r1, r3
 80073fc:	e00e      	b.n	800741c <__adddf3+0xd0>
 80073fe:	f1a5 0520 	sub.w	r5, r5, #32
 8007402:	f10e 0e20 	add.w	lr, lr, #32
 8007406:	2a01      	cmp	r2, #1
 8007408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800740c:	bf28      	it	cs
 800740e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007412:	fa43 f305 	asr.w	r3, r3, r5
 8007416:	18c0      	adds	r0, r0, r3
 8007418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800741c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007420:	d507      	bpl.n	8007432 <__adddf3+0xe6>
 8007422:	f04f 0e00 	mov.w	lr, #0
 8007426:	f1dc 0c00 	rsbs	ip, ip, #0
 800742a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800742e:	eb6e 0101 	sbc.w	r1, lr, r1
 8007432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007436:	d31b      	bcc.n	8007470 <__adddf3+0x124>
 8007438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800743c:	d30c      	bcc.n	8007458 <__adddf3+0x10c>
 800743e:	0849      	lsrs	r1, r1, #1
 8007440:	ea5f 0030 	movs.w	r0, r0, rrx
 8007444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007448:	f104 0401 	add.w	r4, r4, #1
 800744c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007454:	f080 809a 	bcs.w	800758c <__adddf3+0x240>
 8007458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800745c:	bf08      	it	eq
 800745e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007462:	f150 0000 	adcs.w	r0, r0, #0
 8007466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800746a:	ea41 0105 	orr.w	r1, r1, r5
 800746e:	bd30      	pop	{r4, r5, pc}
 8007470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007474:	4140      	adcs	r0, r0
 8007476:	eb41 0101 	adc.w	r1, r1, r1
 800747a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800747e:	f1a4 0401 	sub.w	r4, r4, #1
 8007482:	d1e9      	bne.n	8007458 <__adddf3+0x10c>
 8007484:	f091 0f00 	teq	r1, #0
 8007488:	bf04      	itt	eq
 800748a:	4601      	moveq	r1, r0
 800748c:	2000      	moveq	r0, #0
 800748e:	fab1 f381 	clz	r3, r1
 8007492:	bf08      	it	eq
 8007494:	3320      	addeq	r3, #32
 8007496:	f1a3 030b 	sub.w	r3, r3, #11
 800749a:	f1b3 0220 	subs.w	r2, r3, #32
 800749e:	da0c      	bge.n	80074ba <__adddf3+0x16e>
 80074a0:	320c      	adds	r2, #12
 80074a2:	dd08      	ble.n	80074b6 <__adddf3+0x16a>
 80074a4:	f102 0c14 	add.w	ip, r2, #20
 80074a8:	f1c2 020c 	rsb	r2, r2, #12
 80074ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80074b0:	fa21 f102 	lsr.w	r1, r1, r2
 80074b4:	e00c      	b.n	80074d0 <__adddf3+0x184>
 80074b6:	f102 0214 	add.w	r2, r2, #20
 80074ba:	bfd8      	it	le
 80074bc:	f1c2 0c20 	rsble	ip, r2, #32
 80074c0:	fa01 f102 	lsl.w	r1, r1, r2
 80074c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80074c8:	bfdc      	itt	le
 80074ca:	ea41 010c 	orrle.w	r1, r1, ip
 80074ce:	4090      	lslle	r0, r2
 80074d0:	1ae4      	subs	r4, r4, r3
 80074d2:	bfa2      	ittt	ge
 80074d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80074d8:	4329      	orrge	r1, r5
 80074da:	bd30      	popge	{r4, r5, pc}
 80074dc:	ea6f 0404 	mvn.w	r4, r4
 80074e0:	3c1f      	subs	r4, #31
 80074e2:	da1c      	bge.n	800751e <__adddf3+0x1d2>
 80074e4:	340c      	adds	r4, #12
 80074e6:	dc0e      	bgt.n	8007506 <__adddf3+0x1ba>
 80074e8:	f104 0414 	add.w	r4, r4, #20
 80074ec:	f1c4 0220 	rsb	r2, r4, #32
 80074f0:	fa20 f004 	lsr.w	r0, r0, r4
 80074f4:	fa01 f302 	lsl.w	r3, r1, r2
 80074f8:	ea40 0003 	orr.w	r0, r0, r3
 80074fc:	fa21 f304 	lsr.w	r3, r1, r4
 8007500:	ea45 0103 	orr.w	r1, r5, r3
 8007504:	bd30      	pop	{r4, r5, pc}
 8007506:	f1c4 040c 	rsb	r4, r4, #12
 800750a:	f1c4 0220 	rsb	r2, r4, #32
 800750e:	fa20 f002 	lsr.w	r0, r0, r2
 8007512:	fa01 f304 	lsl.w	r3, r1, r4
 8007516:	ea40 0003 	orr.w	r0, r0, r3
 800751a:	4629      	mov	r1, r5
 800751c:	bd30      	pop	{r4, r5, pc}
 800751e:	fa21 f004 	lsr.w	r0, r1, r4
 8007522:	4629      	mov	r1, r5
 8007524:	bd30      	pop	{r4, r5, pc}
 8007526:	f094 0f00 	teq	r4, #0
 800752a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800752e:	bf06      	itte	eq
 8007530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007534:	3401      	addeq	r4, #1
 8007536:	3d01      	subne	r5, #1
 8007538:	e74e      	b.n	80073d8 <__adddf3+0x8c>
 800753a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800753e:	bf18      	it	ne
 8007540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007544:	d029      	beq.n	800759a <__adddf3+0x24e>
 8007546:	ea94 0f05 	teq	r4, r5
 800754a:	bf08      	it	eq
 800754c:	ea90 0f02 	teqeq	r0, r2
 8007550:	d005      	beq.n	800755e <__adddf3+0x212>
 8007552:	ea54 0c00 	orrs.w	ip, r4, r0
 8007556:	bf04      	itt	eq
 8007558:	4619      	moveq	r1, r3
 800755a:	4610      	moveq	r0, r2
 800755c:	bd30      	pop	{r4, r5, pc}
 800755e:	ea91 0f03 	teq	r1, r3
 8007562:	bf1e      	ittt	ne
 8007564:	2100      	movne	r1, #0
 8007566:	2000      	movne	r0, #0
 8007568:	bd30      	popne	{r4, r5, pc}
 800756a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800756e:	d105      	bne.n	800757c <__adddf3+0x230>
 8007570:	0040      	lsls	r0, r0, #1
 8007572:	4149      	adcs	r1, r1
 8007574:	bf28      	it	cs
 8007576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800757a:	bd30      	pop	{r4, r5, pc}
 800757c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007580:	bf3c      	itt	cc
 8007582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007586:	bd30      	popcc	{r4, r5, pc}
 8007588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800758c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007594:	f04f 0000 	mov.w	r0, #0
 8007598:	bd30      	pop	{r4, r5, pc}
 800759a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800759e:	bf1a      	itte	ne
 80075a0:	4619      	movne	r1, r3
 80075a2:	4610      	movne	r0, r2
 80075a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80075a8:	bf1c      	itt	ne
 80075aa:	460b      	movne	r3, r1
 80075ac:	4602      	movne	r2, r0
 80075ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80075b2:	bf06      	itte	eq
 80075b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80075b8:	ea91 0f03 	teqeq	r1, r3
 80075bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80075c0:	bd30      	pop	{r4, r5, pc}
 80075c2:	bf00      	nop

080075c4 <__aeabi_ui2d>:
 80075c4:	f090 0f00 	teq	r0, #0
 80075c8:	bf04      	itt	eq
 80075ca:	2100      	moveq	r1, #0
 80075cc:	4770      	bxeq	lr
 80075ce:	b530      	push	{r4, r5, lr}
 80075d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80075d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80075d8:	f04f 0500 	mov.w	r5, #0
 80075dc:	f04f 0100 	mov.w	r1, #0
 80075e0:	e750      	b.n	8007484 <__adddf3+0x138>
 80075e2:	bf00      	nop

080075e4 <__aeabi_i2d>:
 80075e4:	f090 0f00 	teq	r0, #0
 80075e8:	bf04      	itt	eq
 80075ea:	2100      	moveq	r1, #0
 80075ec:	4770      	bxeq	lr
 80075ee:	b530      	push	{r4, r5, lr}
 80075f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80075f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80075f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80075fc:	bf48      	it	mi
 80075fe:	4240      	negmi	r0, r0
 8007600:	f04f 0100 	mov.w	r1, #0
 8007604:	e73e      	b.n	8007484 <__adddf3+0x138>
 8007606:	bf00      	nop

08007608 <__aeabi_f2d>:
 8007608:	0042      	lsls	r2, r0, #1
 800760a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800760e:	ea4f 0131 	mov.w	r1, r1, rrx
 8007612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007616:	bf1f      	itttt	ne
 8007618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800761c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007624:	4770      	bxne	lr
 8007626:	f092 0f00 	teq	r2, #0
 800762a:	bf14      	ite	ne
 800762c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007630:	4770      	bxeq	lr
 8007632:	b530      	push	{r4, r5, lr}
 8007634:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007638:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800763c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007640:	e720      	b.n	8007484 <__adddf3+0x138>
 8007642:	bf00      	nop

08007644 <__aeabi_ul2d>:
 8007644:	ea50 0201 	orrs.w	r2, r0, r1
 8007648:	bf08      	it	eq
 800764a:	4770      	bxeq	lr
 800764c:	b530      	push	{r4, r5, lr}
 800764e:	f04f 0500 	mov.w	r5, #0
 8007652:	e00a      	b.n	800766a <__aeabi_l2d+0x16>

08007654 <__aeabi_l2d>:
 8007654:	ea50 0201 	orrs.w	r2, r0, r1
 8007658:	bf08      	it	eq
 800765a:	4770      	bxeq	lr
 800765c:	b530      	push	{r4, r5, lr}
 800765e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007662:	d502      	bpl.n	800766a <__aeabi_l2d+0x16>
 8007664:	4240      	negs	r0, r0
 8007666:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800766a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800766e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007672:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8007676:	f43f aedc 	beq.w	8007432 <__adddf3+0xe6>
 800767a:	f04f 0203 	mov.w	r2, #3
 800767e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007682:	bf18      	it	ne
 8007684:	3203      	addne	r2, #3
 8007686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800768a:	bf18      	it	ne
 800768c:	3203      	addne	r2, #3
 800768e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8007692:	f1c2 0320 	rsb	r3, r2, #32
 8007696:	fa00 fc03 	lsl.w	ip, r0, r3
 800769a:	fa20 f002 	lsr.w	r0, r0, r2
 800769e:	fa01 fe03 	lsl.w	lr, r1, r3
 80076a2:	ea40 000e 	orr.w	r0, r0, lr
 80076a6:	fa21 f102 	lsr.w	r1, r1, r2
 80076aa:	4414      	add	r4, r2
 80076ac:	e6c1      	b.n	8007432 <__adddf3+0xe6>
 80076ae:	bf00      	nop

080076b0 <__aeabi_dmul>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80076b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80076ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80076be:	bf1d      	ittte	ne
 80076c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80076c4:	ea94 0f0c 	teqne	r4, ip
 80076c8:	ea95 0f0c 	teqne	r5, ip
 80076cc:	f000 f8de 	bleq	800788c <__aeabi_dmul+0x1dc>
 80076d0:	442c      	add	r4, r5
 80076d2:	ea81 0603 	eor.w	r6, r1, r3
 80076d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80076da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80076de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80076e2:	bf18      	it	ne
 80076e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80076e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80076ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076f0:	d038      	beq.n	8007764 <__aeabi_dmul+0xb4>
 80076f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80076f6:	f04f 0500 	mov.w	r5, #0
 80076fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80076fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8007702:	fbe0 e503 	umlal	lr, r5, r0, r3
 8007706:	f04f 0600 	mov.w	r6, #0
 800770a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800770e:	f09c 0f00 	teq	ip, #0
 8007712:	bf18      	it	ne
 8007714:	f04e 0e01 	orrne.w	lr, lr, #1
 8007718:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800771c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007720:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8007724:	d204      	bcs.n	8007730 <__aeabi_dmul+0x80>
 8007726:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800772a:	416d      	adcs	r5, r5
 800772c:	eb46 0606 	adc.w	r6, r6, r6
 8007730:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8007734:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007738:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800773c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007740:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8007744:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007748:	bf88      	it	hi
 800774a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800774e:	d81e      	bhi.n	800778e <__aeabi_dmul+0xde>
 8007750:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8007754:	bf08      	it	eq
 8007756:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800775a:	f150 0000 	adcs.w	r0, r0, #0
 800775e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007762:	bd70      	pop	{r4, r5, r6, pc}
 8007764:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8007768:	ea46 0101 	orr.w	r1, r6, r1
 800776c:	ea40 0002 	orr.w	r0, r0, r2
 8007770:	ea81 0103 	eor.w	r1, r1, r3
 8007774:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8007778:	bfc2      	ittt	gt
 800777a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800777e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007782:	bd70      	popgt	{r4, r5, r6, pc}
 8007784:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007788:	f04f 0e00 	mov.w	lr, #0
 800778c:	3c01      	subs	r4, #1
 800778e:	f300 80ab 	bgt.w	80078e8 <__aeabi_dmul+0x238>
 8007792:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8007796:	bfde      	ittt	le
 8007798:	2000      	movle	r0, #0
 800779a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800779e:	bd70      	pople	{r4, r5, r6, pc}
 80077a0:	f1c4 0400 	rsb	r4, r4, #0
 80077a4:	3c20      	subs	r4, #32
 80077a6:	da35      	bge.n	8007814 <__aeabi_dmul+0x164>
 80077a8:	340c      	adds	r4, #12
 80077aa:	dc1b      	bgt.n	80077e4 <__aeabi_dmul+0x134>
 80077ac:	f104 0414 	add.w	r4, r4, #20
 80077b0:	f1c4 0520 	rsb	r5, r4, #32
 80077b4:	fa00 f305 	lsl.w	r3, r0, r5
 80077b8:	fa20 f004 	lsr.w	r0, r0, r4
 80077bc:	fa01 f205 	lsl.w	r2, r1, r5
 80077c0:	ea40 0002 	orr.w	r0, r0, r2
 80077c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80077c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80077cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80077d0:	fa21 f604 	lsr.w	r6, r1, r4
 80077d4:	eb42 0106 	adc.w	r1, r2, r6
 80077d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80077dc:	bf08      	it	eq
 80077de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80077e2:	bd70      	pop	{r4, r5, r6, pc}
 80077e4:	f1c4 040c 	rsb	r4, r4, #12
 80077e8:	f1c4 0520 	rsb	r5, r4, #32
 80077ec:	fa00 f304 	lsl.w	r3, r0, r4
 80077f0:	fa20 f005 	lsr.w	r0, r0, r5
 80077f4:	fa01 f204 	lsl.w	r2, r1, r4
 80077f8:	ea40 0002 	orr.w	r0, r0, r2
 80077fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007800:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007804:	f141 0100 	adc.w	r1, r1, #0
 8007808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800780c:	bf08      	it	eq
 800780e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007812:	bd70      	pop	{r4, r5, r6, pc}
 8007814:	f1c4 0520 	rsb	r5, r4, #32
 8007818:	fa00 f205 	lsl.w	r2, r0, r5
 800781c:	ea4e 0e02 	orr.w	lr, lr, r2
 8007820:	fa20 f304 	lsr.w	r3, r0, r4
 8007824:	fa01 f205 	lsl.w	r2, r1, r5
 8007828:	ea43 0302 	orr.w	r3, r3, r2
 800782c:	fa21 f004 	lsr.w	r0, r1, r4
 8007830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007834:	fa21 f204 	lsr.w	r2, r1, r4
 8007838:	ea20 0002 	bic.w	r0, r0, r2
 800783c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007844:	bf08      	it	eq
 8007846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	f094 0f00 	teq	r4, #0
 8007850:	d10f      	bne.n	8007872 <__aeabi_dmul+0x1c2>
 8007852:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8007856:	0040      	lsls	r0, r0, #1
 8007858:	eb41 0101 	adc.w	r1, r1, r1
 800785c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007860:	bf08      	it	eq
 8007862:	3c01      	subeq	r4, #1
 8007864:	d0f7      	beq.n	8007856 <__aeabi_dmul+0x1a6>
 8007866:	ea41 0106 	orr.w	r1, r1, r6
 800786a:	f095 0f00 	teq	r5, #0
 800786e:	bf18      	it	ne
 8007870:	4770      	bxne	lr
 8007872:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8007876:	0052      	lsls	r2, r2, #1
 8007878:	eb43 0303 	adc.w	r3, r3, r3
 800787c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007880:	bf08      	it	eq
 8007882:	3d01      	subeq	r5, #1
 8007884:	d0f7      	beq.n	8007876 <__aeabi_dmul+0x1c6>
 8007886:	ea43 0306 	orr.w	r3, r3, r6
 800788a:	4770      	bx	lr
 800788c:	ea94 0f0c 	teq	r4, ip
 8007890:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007894:	bf18      	it	ne
 8007896:	ea95 0f0c 	teqne	r5, ip
 800789a:	d00c      	beq.n	80078b6 <__aeabi_dmul+0x206>
 800789c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80078a0:	bf18      	it	ne
 80078a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80078a6:	d1d1      	bne.n	800784c <__aeabi_dmul+0x19c>
 80078a8:	ea81 0103 	eor.w	r1, r1, r3
 80078ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80078b0:	f04f 0000 	mov.w	r0, #0
 80078b4:	bd70      	pop	{r4, r5, r6, pc}
 80078b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80078ba:	bf06      	itte	eq
 80078bc:	4610      	moveq	r0, r2
 80078be:	4619      	moveq	r1, r3
 80078c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80078c4:	d019      	beq.n	80078fa <__aeabi_dmul+0x24a>
 80078c6:	ea94 0f0c 	teq	r4, ip
 80078ca:	d102      	bne.n	80078d2 <__aeabi_dmul+0x222>
 80078cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80078d0:	d113      	bne.n	80078fa <__aeabi_dmul+0x24a>
 80078d2:	ea95 0f0c 	teq	r5, ip
 80078d6:	d105      	bne.n	80078e4 <__aeabi_dmul+0x234>
 80078d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80078dc:	bf1c      	itt	ne
 80078de:	4610      	movne	r0, r2
 80078e0:	4619      	movne	r1, r3
 80078e2:	d10a      	bne.n	80078fa <__aeabi_dmul+0x24a>
 80078e4:	ea81 0103 	eor.w	r1, r1, r3
 80078e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80078ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80078f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80078f4:	f04f 0000 	mov.w	r0, #0
 80078f8:	bd70      	pop	{r4, r5, r6, pc}
 80078fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80078fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8007902:	bd70      	pop	{r4, r5, r6, pc}

08007904 <__aeabi_ddiv>:
 8007904:	b570      	push	{r4, r5, r6, lr}
 8007906:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800790a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800790e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007912:	bf1d      	ittte	ne
 8007914:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007918:	ea94 0f0c 	teqne	r4, ip
 800791c:	ea95 0f0c 	teqne	r5, ip
 8007920:	f000 f8a7 	bleq	8007a72 <__aeabi_ddiv+0x16e>
 8007924:	eba4 0405 	sub.w	r4, r4, r5
 8007928:	ea81 0e03 	eor.w	lr, r1, r3
 800792c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007930:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007934:	f000 8088 	beq.w	8007a48 <__aeabi_ddiv+0x144>
 8007938:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800793c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8007940:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8007944:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007948:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800794c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8007950:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8007954:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8007958:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800795c:	429d      	cmp	r5, r3
 800795e:	bf08      	it	eq
 8007960:	4296      	cmpeq	r6, r2
 8007962:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8007966:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800796a:	d202      	bcs.n	8007972 <__aeabi_ddiv+0x6e>
 800796c:	085b      	lsrs	r3, r3, #1
 800796e:	ea4f 0232 	mov.w	r2, r2, rrx
 8007972:	1ab6      	subs	r6, r6, r2
 8007974:	eb65 0503 	sbc.w	r5, r5, r3
 8007978:	085b      	lsrs	r3, r3, #1
 800797a:	ea4f 0232 	mov.w	r2, r2, rrx
 800797e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007982:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8007986:	ebb6 0e02 	subs.w	lr, r6, r2
 800798a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800798e:	bf22      	ittt	cs
 8007990:	1ab6      	subcs	r6, r6, r2
 8007992:	4675      	movcs	r5, lr
 8007994:	ea40 000c 	orrcs.w	r0, r0, ip
 8007998:	085b      	lsrs	r3, r3, #1
 800799a:	ea4f 0232 	mov.w	r2, r2, rrx
 800799e:	ebb6 0e02 	subs.w	lr, r6, r2
 80079a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80079a6:	bf22      	ittt	cs
 80079a8:	1ab6      	subcs	r6, r6, r2
 80079aa:	4675      	movcs	r5, lr
 80079ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80079b0:	085b      	lsrs	r3, r3, #1
 80079b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80079b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80079ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80079be:	bf22      	ittt	cs
 80079c0:	1ab6      	subcs	r6, r6, r2
 80079c2:	4675      	movcs	r5, lr
 80079c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80079c8:	085b      	lsrs	r3, r3, #1
 80079ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80079ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80079d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80079d6:	bf22      	ittt	cs
 80079d8:	1ab6      	subcs	r6, r6, r2
 80079da:	4675      	movcs	r5, lr
 80079dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80079e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80079e4:	d018      	beq.n	8007a18 <__aeabi_ddiv+0x114>
 80079e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80079ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80079ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80079f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80079f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80079fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80079fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8007a02:	d1c0      	bne.n	8007986 <__aeabi_ddiv+0x82>
 8007a04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007a08:	d10b      	bne.n	8007a22 <__aeabi_ddiv+0x11e>
 8007a0a:	ea41 0100 	orr.w	r1, r1, r0
 8007a0e:	f04f 0000 	mov.w	r0, #0
 8007a12:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007a16:	e7b6      	b.n	8007986 <__aeabi_ddiv+0x82>
 8007a18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007a1c:	bf04      	itt	eq
 8007a1e:	4301      	orreq	r1, r0
 8007a20:	2000      	moveq	r0, #0
 8007a22:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007a26:	bf88      	it	hi
 8007a28:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007a2c:	f63f aeaf 	bhi.w	800778e <__aeabi_dmul+0xde>
 8007a30:	ebb5 0c03 	subs.w	ip, r5, r3
 8007a34:	bf04      	itt	eq
 8007a36:	ebb6 0c02 	subseq.w	ip, r6, r2
 8007a3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007a3e:	f150 0000 	adcs.w	r0, r0, #0
 8007a42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007a46:	bd70      	pop	{r4, r5, r6, pc}
 8007a48:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8007a4c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8007a50:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8007a54:	bfc2      	ittt	gt
 8007a56:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007a5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007a5e:	bd70      	popgt	{r4, r5, r6, pc}
 8007a60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007a64:	f04f 0e00 	mov.w	lr, #0
 8007a68:	3c01      	subs	r4, #1
 8007a6a:	e690      	b.n	800778e <__aeabi_dmul+0xde>
 8007a6c:	ea45 0e06 	orr.w	lr, r5, r6
 8007a70:	e68d      	b.n	800778e <__aeabi_dmul+0xde>
 8007a72:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007a76:	ea94 0f0c 	teq	r4, ip
 8007a7a:	bf08      	it	eq
 8007a7c:	ea95 0f0c 	teqeq	r5, ip
 8007a80:	f43f af3b 	beq.w	80078fa <__aeabi_dmul+0x24a>
 8007a84:	ea94 0f0c 	teq	r4, ip
 8007a88:	d10a      	bne.n	8007aa0 <__aeabi_ddiv+0x19c>
 8007a8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007a8e:	f47f af34 	bne.w	80078fa <__aeabi_dmul+0x24a>
 8007a92:	ea95 0f0c 	teq	r5, ip
 8007a96:	f47f af25 	bne.w	80078e4 <__aeabi_dmul+0x234>
 8007a9a:	4610      	mov	r0, r2
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	e72c      	b.n	80078fa <__aeabi_dmul+0x24a>
 8007aa0:	ea95 0f0c 	teq	r5, ip
 8007aa4:	d106      	bne.n	8007ab4 <__aeabi_ddiv+0x1b0>
 8007aa6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007aaa:	f43f aefd 	beq.w	80078a8 <__aeabi_dmul+0x1f8>
 8007aae:	4610      	mov	r0, r2
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	e722      	b.n	80078fa <__aeabi_dmul+0x24a>
 8007ab4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007ab8:	bf18      	it	ne
 8007aba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007abe:	f47f aec5 	bne.w	800784c <__aeabi_dmul+0x19c>
 8007ac2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8007ac6:	f47f af0d 	bne.w	80078e4 <__aeabi_dmul+0x234>
 8007aca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8007ace:	f47f aeeb 	bne.w	80078a8 <__aeabi_dmul+0x1f8>
 8007ad2:	e712      	b.n	80078fa <__aeabi_dmul+0x24a>

08007ad4 <__gedf2>:
 8007ad4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007ad8:	e006      	b.n	8007ae8 <__cmpdf2+0x4>
 8007ada:	bf00      	nop

08007adc <__ledf2>:
 8007adc:	f04f 0c01 	mov.w	ip, #1
 8007ae0:	e002      	b.n	8007ae8 <__cmpdf2+0x4>
 8007ae2:	bf00      	nop

08007ae4 <__cmpdf2>:
 8007ae4:	f04f 0c01 	mov.w	ip, #1
 8007ae8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007af8:	bf18      	it	ne
 8007afa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8007afe:	d01b      	beq.n	8007b38 <__cmpdf2+0x54>
 8007b00:	b001      	add	sp, #4
 8007b02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8007b06:	bf0c      	ite	eq
 8007b08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007b0c:	ea91 0f03 	teqne	r1, r3
 8007b10:	bf02      	ittt	eq
 8007b12:	ea90 0f02 	teqeq	r0, r2
 8007b16:	2000      	moveq	r0, #0
 8007b18:	4770      	bxeq	lr
 8007b1a:	f110 0f00 	cmn.w	r0, #0
 8007b1e:	ea91 0f03 	teq	r1, r3
 8007b22:	bf58      	it	pl
 8007b24:	4299      	cmppl	r1, r3
 8007b26:	bf08      	it	eq
 8007b28:	4290      	cmpeq	r0, r2
 8007b2a:	bf2c      	ite	cs
 8007b2c:	17d8      	asrcs	r0, r3, #31
 8007b2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8007b32:	f040 0001 	orr.w	r0, r0, #1
 8007b36:	4770      	bx	lr
 8007b38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007b3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007b40:	d102      	bne.n	8007b48 <__cmpdf2+0x64>
 8007b42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8007b46:	d107      	bne.n	8007b58 <__cmpdf2+0x74>
 8007b48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007b4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007b50:	d1d6      	bne.n	8007b00 <__cmpdf2+0x1c>
 8007b52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8007b56:	d0d3      	beq.n	8007b00 <__cmpdf2+0x1c>
 8007b58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop

08007b60 <__aeabi_cdrcmple>:
 8007b60:	4684      	mov	ip, r0
 8007b62:	4610      	mov	r0, r2
 8007b64:	4662      	mov	r2, ip
 8007b66:	468c      	mov	ip, r1
 8007b68:	4619      	mov	r1, r3
 8007b6a:	4663      	mov	r3, ip
 8007b6c:	e000      	b.n	8007b70 <__aeabi_cdcmpeq>
 8007b6e:	bf00      	nop

08007b70 <__aeabi_cdcmpeq>:
 8007b70:	b501      	push	{r0, lr}
 8007b72:	f7ff ffb7 	bl	8007ae4 <__cmpdf2>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	bf48      	it	mi
 8007b7a:	f110 0f00 	cmnmi.w	r0, #0
 8007b7e:	bd01      	pop	{r0, pc}

08007b80 <__aeabi_dcmpeq>:
 8007b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007b84:	f7ff fff4 	bl	8007b70 <__aeabi_cdcmpeq>
 8007b88:	bf0c      	ite	eq
 8007b8a:	2001      	moveq	r0, #1
 8007b8c:	2000      	movne	r0, #0
 8007b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007b92:	bf00      	nop

08007b94 <__aeabi_dcmplt>:
 8007b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007b98:	f7ff ffea 	bl	8007b70 <__aeabi_cdcmpeq>
 8007b9c:	bf34      	ite	cc
 8007b9e:	2001      	movcc	r0, #1
 8007ba0:	2000      	movcs	r0, #0
 8007ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ba6:	bf00      	nop

08007ba8 <__aeabi_dcmple>:
 8007ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007bac:	f7ff ffe0 	bl	8007b70 <__aeabi_cdcmpeq>
 8007bb0:	bf94      	ite	ls
 8007bb2:	2001      	movls	r0, #1
 8007bb4:	2000      	movhi	r0, #0
 8007bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8007bba:	bf00      	nop

08007bbc <__aeabi_dcmpge>:
 8007bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007bc0:	f7ff ffce 	bl	8007b60 <__aeabi_cdrcmple>
 8007bc4:	bf94      	ite	ls
 8007bc6:	2001      	movls	r0, #1
 8007bc8:	2000      	movhi	r0, #0
 8007bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8007bce:	bf00      	nop

08007bd0 <__aeabi_dcmpgt>:
 8007bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007bd4:	f7ff ffc4 	bl	8007b60 <__aeabi_cdrcmple>
 8007bd8:	bf34      	ite	cc
 8007bda:	2001      	movcc	r0, #1
 8007bdc:	2000      	movcs	r0, #0
 8007bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8007be2:	bf00      	nop

08007be4 <__aeabi_d2iz>:
 8007be4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007be8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8007bec:	d215      	bcs.n	8007c1a <__aeabi_d2iz+0x36>
 8007bee:	d511      	bpl.n	8007c14 <__aeabi_d2iz+0x30>
 8007bf0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8007bf4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007bf8:	d912      	bls.n	8007c20 <__aeabi_d2iz+0x3c>
 8007bfa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007bfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8007c06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8007c0e:	bf18      	it	ne
 8007c10:	4240      	negne	r0, r0
 8007c12:	4770      	bx	lr
 8007c14:	f04f 0000 	mov.w	r0, #0
 8007c18:	4770      	bx	lr
 8007c1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8007c1e:	d105      	bne.n	8007c2c <__aeabi_d2iz+0x48>
 8007c20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8007c24:	bf08      	it	eq
 8007c26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007c2a:	4770      	bx	lr
 8007c2c:	f04f 0000 	mov.w	r0, #0
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop

08007c34 <main>:
#include "delay.h"
#include "usart.h"

void NVIC_Configuration();

int main(void) {
 8007c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c38:	b09e      	sub	sp, #120	; 0x78
	uint32_t tnow;
	char tmp[92];

	  RCC_ClocksTypeDef RCC_Clocks;

	  RCC_GetClocksFreq(&RCC_Clocks);
 8007c3a:	a81a      	add	r0, sp, #104	; 0x68
 8007c3c:	f7f9 fb10 	bl	8001260 <RCC_GetClocksFreq>

	NVIC_Configuration();
 8007c40:	f7fa fdd8 	bl	80027f4 <NVIC_Configuration>

	TIM5_timer_start();
 8007c44:	f7f8 faf8 	bl	8000238 <TIM5_timer_start>
//	SysTick_Start();

	usart_begin(USART2Serial, PA3, PA2, 19200);
 8007c48:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8007c4c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007c50:	2001      	movs	r0, #1
 8007c52:	f240 1103 	movw	r1, #259	; 0x103
 8007c56:	f7f8 fced 	bl	8000634 <usart_begin>
	usart_print(USART2Serial, "Happy are those who know they are spiritually poor; \n");
 8007c5a:	2001      	movs	r0, #1
 8007c5c:	4976      	ldr	r1, [pc, #472]	; (8007e38 <main+0x204>)
 8007c5e:	f7f8 fe11 	bl	8000884 <usart_print>
	usart_print(USART2Serial, "The kingdom of heaven belongs to them!\n");
 8007c62:	2001      	movs	r0, #1
 8007c64:	4975      	ldr	r1, [pc, #468]	; (8007e3c <main+0x208>)
 8007c66:	f7f8 fe0d 	bl	8000884 <usart_print>
	usart_print(USART2Serial, "How many eyes does Mississipi river have?\n");
 8007c6a:	2001      	movs	r0, #1
 8007c6c:	4974      	ldr	r1, [pc, #464]	; (8007e40 <main+0x20c>)
 8007c6e:	f7f8 fe09 	bl	8000884 <usart_print>
	usart_print(USART2Serial, "Quick brown fox jumped over the lazy dog!\n");
 8007c72:	4974      	ldr	r1, [pc, #464]	; (8007e44 <main+0x210>)
 8007c74:	2001      	movs	r0, #1
	usart_flush(USART2Serial);

	sprintf(tmp, "SYSCLK = %ld, ", RCC_Clocks.SYSCLK_Frequency);
 8007c76:	ac03      	add	r4, sp, #12

	usart_begin(USART2Serial, PA3, PA2, 19200);
	usart_print(USART2Serial, "Happy are those who know they are spiritually poor; \n");
	usart_print(USART2Serial, "The kingdom of heaven belongs to them!\n");
	usart_print(USART2Serial, "How many eyes does Mississipi river have?\n");
	usart_print(USART2Serial, "Quick brown fox jumped over the lazy dog!\n");
 8007c78:	f7f8 fe04 	bl	8000884 <usart_print>
	usart_flush(USART2Serial);
 8007c7c:	2001      	movs	r0, #1
 8007c7e:	f7f8 fe27 	bl	80008d0 <usart_flush>

	sprintf(tmp, "SYSCLK = %ld, ", RCC_Clocks.SYSCLK_Frequency);
 8007c82:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007c84:	4970      	ldr	r1, [pc, #448]	; (8007e48 <main+0x214>)
 8007c86:	4620      	mov	r0, r4
 8007c88:	f7fb f822 	bl	8002cd0 <sprintf>
	usart_print(USART2Serial, tmp);
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	4621      	mov	r1, r4
 8007c90:	f7f8 fdf8 	bl	8000884 <usart_print>
	sprintf(tmp, "HCLK = %ld, ", RCC_Clocks.HCLK_Frequency);
 8007c94:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007c96:	496d      	ldr	r1, [pc, #436]	; (8007e4c <main+0x218>)
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f7fb f819 	bl	8002cd0 <sprintf>
	usart_print(USART2Serial, tmp);
 8007c9e:	2001      	movs	r0, #1
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	f7f8 fdef 	bl	8000884 <usart_print>
	sprintf(tmp, "PCLK1 = %ld, ", RCC_Clocks.PCLK1_Frequency);
 8007ca6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007ca8:	4969      	ldr	r1, [pc, #420]	; (8007e50 <main+0x21c>)
 8007caa:	4620      	mov	r0, r4
 8007cac:	f7fb f810 	bl	8002cd0 <sprintf>
	usart_print(USART2Serial, tmp);
 8007cb0:	2001      	movs	r0, #1
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	f7f8 fde6 	bl	8000884 <usart_print>
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
 8007cb8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007cba:	4966      	ldr	r1, [pc, #408]	; (8007e54 <main+0x220>)
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f7fb f807 	bl	8002cd0 <sprintf>
	usart_print(USART2Serial, tmp);
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	2001      	movs	r0, #1
 8007cc6:	f7f8 fddd 	bl	8000884 <usart_print>
	usart_flush(USART2Serial);
 8007cca:	2001      	movs	r0, #1
 8007ccc:	f7f8 fe00 	bl	80008d0 <usart_flush>

	GPIOMode(GPIOD, (GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15),
 8007cd0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007cd4:	2500      	movs	r5, #0
 8007cd6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007cda:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8007cde:	2201      	movs	r2, #1
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	9500      	str	r5, [sp, #0]
 8007ce4:	9501      	str	r5, [sp, #4]
 8007ce6:	f7f8 fb93 	bl	8000410 <GPIOMode>
	pinMode(PD14, OUTPUT);
	pinMode(PD15, OUTPUT);
	| GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15),
			GPIO_Mode_OUT, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
*/
	tnow = millis()/1000;
 8007cea:	f7f8 fae1 	bl	80002b0 <millis>
	while (tnow == millis()/1000);
 8007cee:	f644 55d3 	movw	r5, #19923	; 0x4dd3
	pinMode(PD14, OUTPUT);
	pinMode(PD15, OUTPUT);
	| GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15),
			GPIO_Mode_OUT, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
*/
	tnow = millis()/1000;
 8007cf2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8007cf6:	fbb0 f6f6 	udiv	r6, r0, r6
	while (tnow == millis()/1000);
 8007cfa:	f2c1 0562 	movt	r5, #4194	; 0x1062
 8007cfe:	f7f8 fad7 	bl	80002b0 <millis>
 8007d02:	fba5 2300 	umull	r2, r3, r5, r0
 8007d06:	ebb6 1f93 	cmp.w	r6, r3, lsr #6
 8007d0a:	d0f8      	beq.n	8007cfe <main+0xca>
	tnow = millis()/1000;
 8007d0c:	f7f8 fad0 	bl	80002b0 <millis>
		delay_millis(intval);
		//
		bits = 1<<12 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);

		while (tnow == millis()/1000);
 8007d10:	f644 56d3 	movw	r6, #19923	; 0x4dd3
	| GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15),
			GPIO_Mode_OUT, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
*/
	tnow = millis()/1000;
	while (tnow == millis()/1000);
	tnow = millis()/1000;
 8007d14:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8007d18:	fbb0 f5f5 	udiv	r5, r0, r5
		delay_millis(intval);
		//
		bits = 1<<12 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);

		while (tnow == millis()/1000);
 8007d1c:	f2c1 0662 	movt	r6, #4194	; 0x1062
	tnow = millis()/1000;
	while (tnow == millis()/1000);
	tnow = millis()/1000;

	while (1) {
		bits = GPIO_ReadOutputData(GPIOD);
 8007d20:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007d24:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007d28:	f7f9 f992 	bl	8001050 <GPIO_ReadOutputData>
		bits = 1<<12 | (bits & 0x0fff);
 8007d2c:	0507      	lsls	r7, r0, #20
 8007d2e:	0d3f      	lsrs	r7, r7, #20
 8007d30:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
		GPIO_Write(GPIOD, bits);
 8007d34:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007d38:	4639      	mov	r1, r7
 8007d3a:	f2c4 0002 	movt	r0, #16386	; 0x4002
		delay_millis(intval);

		bits = 1<<13 | (bits & 0x0fff);
 8007d3e:	053f      	lsls	r7, r7, #20
	tnow = millis()/1000;

	while (1) {
		bits = GPIO_ReadOutputData(GPIOD);
		bits = 1<<12 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);
 8007d40:	f7f9 f994 	bl	800106c <GPIO_Write>
		delay_millis(intval);

		bits = 1<<13 | (bits & 0x0fff);
 8007d44:	0d3f      	lsrs	r7, r7, #20

	while (1) {
		bits = GPIO_ReadOutputData(GPIOD);
		bits = 1<<12 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);
		delay_millis(intval);
 8007d46:	2018      	movs	r0, #24
 8007d48:	f7f8 fab8 	bl	80002bc <delay_millis>

		bits = 1<<13 | (bits & 0x0fff);
 8007d4c:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
		GPIO_Write(GPIOD, bits);
 8007d50:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007d54:	4639      	mov	r1, r7
 8007d56:	f2c4 0002 	movt	r0, #16386	; 0x4002
		delay_millis(intval);

		bits = 1<<14 | (bits & 0x0fff);
 8007d5a:	053f      	lsls	r7, r7, #20
		bits = 1<<12 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);
		delay_millis(intval);

		bits = 1<<13 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);
 8007d5c:	f7f9 f986 	bl	800106c <GPIO_Write>
		delay_millis(intval);

		bits = 1<<14 | (bits & 0x0fff);
 8007d60:	0d3f      	lsrs	r7, r7, #20
		GPIO_Write(GPIOD, bits);
		delay_millis(intval);

		bits = 1<<13 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);
		delay_millis(intval);
 8007d62:	2018      	movs	r0, #24
 8007d64:	f7f8 faaa 	bl	80002bc <delay_millis>

		bits = 1<<14 | (bits & 0x0fff);
 8007d68:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
		GPIO_Write(GPIOD, bits);
 8007d6c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007d70:	4639      	mov	r1, r7
 8007d72:	f2c4 0002 	movt	r0, #16386	; 0x4002
		delay_millis(intval);

		bits = 1<<15 | (bits & 0x0fff);
 8007d76:	053f      	lsls	r7, r7, #20
		bits = 1<<13 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);
		delay_millis(intval);

		bits = 1<<14 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);
 8007d78:	f7f9 f978 	bl	800106c <GPIO_Write>
		delay_millis(intval);

		bits = 1<<15 | (bits & 0x0fff);
 8007d7c:	0d3f      	lsrs	r7, r7, #20
		GPIO_Write(GPIOD, bits);
		delay_millis(intval);

		bits = 1<<14 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);
		delay_millis(intval);
 8007d7e:	2018      	movs	r0, #24
 8007d80:	f7f8 fa9c 	bl	80002bc <delay_millis>

		bits = 1<<15 | (bits & 0x0fff);
 8007d84:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
		GPIO_Write(GPIOD, bits);
 8007d88:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007d8c:	4639      	mov	r1, r7
 8007d8e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007d92:	f7f9 f96b 	bl	800106c <GPIO_Write>
		delay_millis(intval);
 8007d96:	2018      	movs	r0, #24
 8007d98:	f7f8 fa90 	bl	80002bc <delay_millis>
		//
		bits = 1<<12 | (bits & 0x0fff);
 8007d9c:	0539      	lsls	r1, r7, #20
 8007d9e:	0d09      	lsrs	r1, r1, #20
		GPIO_Write(GPIOD, bits);
 8007da0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007da4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8007da8:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8007dac:	f7f9 f95e 	bl	800106c <GPIO_Write>

		while (tnow == millis()/1000);
 8007db0:	f7f8 fa7e 	bl	80002b0 <millis>
 8007db4:	fba6 3000 	umull	r3, r0, r6, r0
 8007db8:	f644 57d3 	movw	r7, #19923	; 0x4dd3
 8007dbc:	ebb5 1f90 	cmp.w	r5, r0, lsr #6
 8007dc0:	f2c1 0762 	movt	r7, #4194	; 0x1062
 8007dc4:	d0f4      	beq.n	8007db0 <main+0x17c>
		tnow = millis()/1000;
 8007dc6:	f7f8 fa73 	bl	80002b0 <millis>
 8007dca:	fba7 2500 	umull	r2, r5, r7, r0
		usart3.print((float)(count++ / 32.0f), 3);
		*/
//		uint16_t h, t;
//		h = tx_head();
//		t = tx_tail();
		sprintf(tmp, /*"head =% 4d, tail =% 4d,*/ "%04ld\n", millis());
 8007dce:	f7f8 fa6f 	bl	80002b0 <millis>
 8007dd2:	4921      	ldr	r1, [pc, #132]	; (8007e58 <main+0x224>)
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f7fa ff7a 	bl	8002cd0 <sprintf>
		usart_print(USART2Serial, tmp);
 8007ddc:	2001      	movs	r0, #1
 8007dde:	4621      	mov	r1, r4
 8007de0:	f7f8 fd50 	bl	8000884 <usart_print>
		/*
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2Serial) > 0 ) {
 8007de4:	2001      	movs	r0, #1
 8007de6:	f7f8 fdeb 	bl	80009c0 <usart_available>
		//
		bits = 1<<12 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);

		while (tnow == millis()/1000);
		tnow = millis()/1000;
 8007dea:	09ad      	lsrs	r5, r5, #6
		/*
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2Serial) > 0 ) {
 8007dec:	2700      	movs	r7, #0
 8007dee:	b938      	cbnz	r0, 8007e00 <main+0x1cc>
 8007df0:	e796      	b.n	8007d20 <main+0xec>
			while ( usart_available(USART2Serial) > 0 && i < 92 ) {
				tmp[i++] = (char) usart_read(USART2Serial);
 8007df2:	2001      	movs	r0, #1
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2Serial) > 0 ) {
			while ( usart_available(USART2Serial) > 0 && i < 92 ) {
 8007df4:	2f5c      	cmp	r7, #92	; 0x5c
 8007df6:	d01c      	beq.n	8007e32 <main+0x1fe>
				tmp[i++] = (char) usart_read(USART2Serial);
 8007df8:	f7f8 fd5a 	bl	80008b0 <usart_read>
 8007dfc:	55e0      	strb	r0, [r4, r7]
 8007dfe:	3701      	adds	r7, #1
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2Serial) > 0 ) {
			while ( usart_available(USART2Serial) > 0 && i < 92 ) {
 8007e00:	2001      	movs	r0, #1
				tmp[i++] = (char) usart_read(USART2Serial);
 8007e02:	fa1f f887 	uxth.w	r8, r7
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2Serial) > 0 ) {
			while ( usart_available(USART2Serial) > 0 && i < 92 ) {
 8007e06:	f7f8 fddb 	bl	80009c0 <usart_available>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d1f1      	bne.n	8007df2 <main+0x1be>
				tmp[i++] = (char) usart_read(USART2Serial);
			}
			tmp[i] = 0;
 8007e0e:	ab1e      	add	r3, sp, #120	; 0x78
 8007e10:	4498      	add	r8, r3
 8007e12:	2300      	movs	r3, #0
			usart_print(USART2Serial, "> ");
 8007e14:	2001      	movs	r0, #1
		uint16_t i = 0;
		if ( usart_available(USART2Serial) > 0 ) {
			while ( usart_available(USART2Serial) > 0 && i < 92 ) {
				tmp[i++] = (char) usart_read(USART2Serial);
			}
			tmp[i] = 0;
 8007e16:	f808 3c6c 	strb.w	r3, [r8, #-108]
			usart_print(USART2Serial, "> ");
 8007e1a:	4910      	ldr	r1, [pc, #64]	; (8007e5c <main+0x228>)
 8007e1c:	f7f8 fd32 	bl	8000884 <usart_print>
			usart_print(USART2Serial, tmp);
 8007e20:	4621      	mov	r1, r4
 8007e22:	2001      	movs	r0, #1
 8007e24:	f7f8 fd2e 	bl	8000884 <usart_print>
			usart_print(USART2Serial, "\n");
 8007e28:	2001      	movs	r0, #1
 8007e2a:	490d      	ldr	r1, [pc, #52]	; (8007e60 <main+0x22c>)
 8007e2c:	f7f8 fd2a 	bl	8000884 <usart_print>
 8007e30:	e776      	b.n	8007d20 <main+0xec>
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2Serial) > 0 ) {
			while ( usart_available(USART2Serial) > 0 && i < 92 ) {
 8007e32:	46b8      	mov	r8, r7
 8007e34:	e7eb      	b.n	8007e0e <main+0x1da>
 8007e36:	bf00      	nop
 8007e38:	08008028 	.word	0x08008028
 8007e3c:	08008060 	.word	0x08008060
 8007e40:	08008088 	.word	0x08008088
 8007e44:	080080b4 	.word	0x080080b4
 8007e48:	080080e0 	.word	0x080080e0
 8007e4c:	080080f0 	.word	0x080080f0
 8007e50:	08008100 	.word	0x08008100
 8007e54:	08008110 	.word	0x08008110
 8007e58:	08008120 	.word	0x08008120
 8007e5c:	08008128 	.word	0x08008128
 8007e60:	0800811c 	.word	0x0800811c

08007e64 <Reset_Handler>:
 8007e64:	2100      	movs	r1, #0
 8007e66:	e003      	b.n	8007e70 <LoopCopyDataInit>

08007e68 <CopyDataInit>:
 8007e68:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <LoopFillZerobss+0x10>)
 8007e6a:	585b      	ldr	r3, [r3, r1]
 8007e6c:	5043      	str	r3, [r0, r1]
 8007e6e:	3104      	adds	r1, #4

08007e70 <LoopCopyDataInit>:
 8007e70:	4809      	ldr	r0, [pc, #36]	; (8007e98 <LoopFillZerobss+0x14>)
 8007e72:	4b0a      	ldr	r3, [pc, #40]	; (8007e9c <LoopFillZerobss+0x18>)
 8007e74:	1842      	adds	r2, r0, r1
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d3f6      	bcc.n	8007e68 <CopyDataInit>
 8007e7a:	4a09      	ldr	r2, [pc, #36]	; (8007ea0 <LoopFillZerobss+0x1c>)
 8007e7c:	e002      	b.n	8007e84 <LoopFillZerobss>

08007e7e <FillZerobss>:
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f842 3b04 	str.w	r3, [r2], #4

08007e84 <LoopFillZerobss>:
 8007e84:	4b07      	ldr	r3, [pc, #28]	; (8007ea4 <LoopFillZerobss+0x20>)
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d3f9      	bcc.n	8007e7e <FillZerobss>
 8007e8a:	f7fa fdb9 	bl	8002a00 <SystemInit>
 8007e8e:	f7ff fed1 	bl	8007c34 <main>
 8007e92:	4770      	bx	lr
 8007e94:	080081b4 	.word	0x080081b4
 8007e98:	20000000 	.word	0x20000000
 8007e9c:	2000098c 	.word	0x2000098c
 8007ea0:	2000098c 	.word	0x2000098c
 8007ea4:	2000162c 	.word	0x2000162c

08007ea8 <ADC_IRQHandler>:
 8007ea8:	e7fe      	b.n	8007ea8 <ADC_IRQHandler>
 8007eaa:	0000      	movs	r0, r0
 8007eac:	00000054 	.word	0x00000054
 8007eb0:	000003e7 	.word	0x000003e7
 8007eb4:	00000000 	.word	0x00000000

08007eb8 <blanks.3927>:
 8007eb8:	20202020 20202020 20202020 20202020                     

08007ec8 <zeroes.3928>:
 8007ec8:	30303030 30303030 30303030 30303030     0000000000000000

08007ed8 <_global_impure_ptr>:
 8007ed8:	200000d8 00000000                       ... ....

08007ee0 <p05.2449>:
 8007ee0:	00000005 00000019 0000007d 00000000     ........}.......

08007ef0 <__mprec_tens>:
 8007ef0:	00000000 3ff00000 00000000 40240000     .......?......$@
 8007f00:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8007f10:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8007f20:	00000000 412e8480 00000000 416312d0     .......A......cA
 8007f30:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8007f40:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8007f50:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8007f60:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8007f70:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8007f80:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8007f90:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8007fa0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8007fb0:	79d99db4 44ea7843                       ...yCx.D

08007fb8 <__mprec_tinytens>:
 8007fb8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 8007fc8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 8007fd8:	64ac6f43 0ac80628                       Co.d(...

08007fe0 <__mprec_bigtens>:
 8007fe0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8007ff0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8008000:	7f73bf3c 75154fdd                       <.s..O.u

08008008 <blanks.3871>:
 8008008:	20202020 20202020 20202020 20202020                     

08008018 <zeroes.3872>:
 8008018:	30303030 30303030 30303030 30303030     0000000000000000
 8008028:	70706148 72612079 68742065 2065736f     Happy are those 
 8008038:	206f6877 776f6e6b 65687420 72612079     who know they ar
 8008048:	70732065 74697269 6c6c6175 6f702079     e spiritually po
 8008058:	203b726f 0000000a 20656854 676e696b     or; ....The king
 8008068:	206d6f64 6820666f 65766165 6562206e     dom of heaven be
 8008078:	676e6f6c 6f742073 65687420 000a216d     longs to them!..
 8008088:	20776f48 796e616d 65796520 6f642073     How many eyes do
 8008098:	4d207365 69737369 70697373 69722069     es Mississipi ri
 80080a8:	20726576 65766168 00000a3f 63697551     ver have?...Quic
 80080b8:	7262206b 206e776f 20786f66 706d756a     k brown fox jump
 80080c8:	6f206465 20726576 20656874 797a616c     ed over the lazy
 80080d8:	676f6420 00000a21 43535953 3d204b4c      dog!...SYSCLK =
 80080e8:	646c2520 0000202c 4b4c4348 25203d20      %ld, ..HCLK = %
 80080f8:	202c646c 00000000 4b4c4350 203d2031     ld, ....PCLK1 = 
 8008108:	2c646c25 00000020 4b4c4350 203d2032     %ld, ...PCLK2 = 
 8008118:	0d646c25 0000000a 6c343025 00000a64     %ld.....%04ld...
 8008128:	0000203e 70616548 646e6120 61747320     > ..Heap and sta
 8008138:	63206b63 696c6c6f 6e6f6973 0000000a     ck collision....
 8008148:	74697865 00000000 00464e49 00666e69     exit....INF.inf.
 8008158:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
 8008168:	42413938 46454443 00000000 33323130     89ABCDEF....0123
 8008178:	37363534 62613938 66656463 00000000     456789abcdef....
 8008188:	6c756e28 0000296c 00000030 69666e49     (null)..0...Infi
 8008198:	7974696e 00000000 004e614e 00000043     nity....NaN.C...
 80081a8:	49534f50 00000058 0000002e              POSIX.......
