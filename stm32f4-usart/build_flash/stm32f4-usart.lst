
stm32f4-usart.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <TIM2_timer_start>:
/**
 * @brief  millisecond
 * @param  none
 * @retval None
 */
void TIM2_timer_start(void) {
 8000188:	b570      	push	{r4, r5, r6, lr}
 800018a:	b088      	sub	sp, #32
	// TIM_TimeBaseInitTypeDef's order is {uint16_t TIM_Prescaler, uint16_t TIM_CounterMode, uint16_t TIM_Period, uint16_t TIM_ClockDivision, uint8_t TIM_RepetitionCounter}
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 800018c:	4668      	mov	r0, sp
 800018e:	f001 fdb1 	bl	8001cf4 <RCC_GetClocksFreq>
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 8000192:	9b00      	ldr	r3, [sp, #0]
 8000194:	f64d 6283 	movw	r2, #56963	; 0xde83
 8000198:	f2c4 321b 	movt	r2, #17179	; 0x431b
 800019c:	085b      	lsrs	r3, r3, #1
 800019e:	fba2 1303 	umull	r1, r3, r2, r3
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001a2:	2001      	movs	r0, #1
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 80001a4:	0c9b      	lsrs	r3, r3, #18
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80001a6:	2400      	movs	r4, #0
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001a8:	4601      	mov	r1, r0
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 80001aa:	f8ad 3010 	strh.w	r3, [sp, #16]
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TimeBaseStructure.TIM_Period = 1000 - 1;
 80001ae:	f240 33e7 	movw	r3, #999	; 0x3e7
 80001b2:	9305      	str	r3, [sp, #20]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80001b4:	f8ad 4012 	strh.w	r4, [sp, #18]
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80001b8:	f8ad 4018 	strh.w	r4, [sp, #24]
	TimeBaseStructure.TIM_RepetitionCounter = 0;
 80001bc:	f88d 401a 	strb.w	r4, [sp, #26]

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001c0:	f001 fe46 	bl	8001e50 <RCC_APB1PeriphClockCmd>

	/* Time base configuration */
	TIM_TimeBaseInit(TIM2, &TimeBaseStructure);
 80001c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001c8:	a904      	add	r1, sp, #16
 80001ca:	f002 f9f3 	bl	80025b4 <TIM_TimeBaseInit>
//  TIM_SelectOnePulseMode(TIM2, TIM_OPMode_Repetitive);
	TIM_SetCounter(TIM2, 0);
 80001ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001d2:	4621      	mov	r1, r4
 80001d4:	f002 fa50 	bl	8002678 <TIM_SetCounter>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80001d8:	2101      	movs	r1, #1
 80001da:	460a      	mov	r2, r1
 80001dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001e0:	f002 fede 	bl	8002fa0 <TIM_ITConfig>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001e4:	2601      	movs	r6, #1
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001e6:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80001e8:	a807      	add	r0, sp, #28
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001ea:	f88d 301c 	strb.w	r3, [sp, #28]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80001ee:	f88d 401d 	strb.w	r4, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001f2:	f88d 601e 	strb.w	r6, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80001f6:	f88d 601f 	strb.w	r6, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);
 80001fa:	f001 f8c7 	bl	800138c <NVIC_Init>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 80001fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000202:	4631      	mov	r1, r6
 8000204:	f002 fa84 	bl	8002710 <TIM_Cmd>

	__counter_micros = 0;
 8000208:	f640 12a4 	movw	r2, #2468	; 0x9a4
	__counter_millis = 0;
 800020c:	f640 13a8 	movw	r3, #2472	; 0x9a8
	NVIC_Init(&NVIC_InitStructure);

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);

	__counter_micros = 0;
 8000210:	f2c2 0200 	movt	r2, #8192	; 0x2000
	__counter_millis = 0;
 8000214:	f2c2 0300 	movt	r3, #8192	; 0x2000
	NVIC_Init(&NVIC_InitStructure);

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);

	__counter_micros = 0;
 8000218:	6014      	str	r4, [r2, #0]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800021a:	4625      	mov	r5, r4

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);

	__counter_micros = 0;
	__counter_millis = 0;
 800021c:	601c      	str	r4, [r3, #0]
}
 800021e:	b008      	add	sp, #32
 8000220:	bd70      	pop	{r4, r5, r6, pc}
 8000222:	bf00      	nop

08000224 <micros>:

uint32_t micros(void) {
 8000224:	b508      	push	{r3, lr}
	return __counter_micros + TIM_GetCounter(TIM2 );
 8000226:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800022a:	f002 fa29 	bl	8002680 <TIM_GetCounter>
 800022e:	f640 13a4 	movw	r3, #2468	; 0x9a4
 8000232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000236:	681b      	ldr	r3, [r3, #0]
}
 8000238:	18c0      	adds	r0, r0, r3
 800023a:	bd08      	pop	{r3, pc}

0800023c <millis>:

uint32_t millis(void) {
	return __counter_millis;
 800023c:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8000240:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000244:	6818      	ldr	r0, [r3, #0]
}
 8000246:	4770      	bx	lr

08000248 <delay_ms>:
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000248:	4b03      	ldr	r3, [pc, #12]	; (8000258 <delay_ms+0x10>)
 800024a:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
 800024c:	1882      	adds	r2, r0, r2
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 800024e:	6819      	ldr	r1, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	while (millis() < wtill)
 8000250:	428a      	cmp	r2, r1
 8000252:	d8fc      	bhi.n	800024e <delay_ms+0x6>
		;
}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	200009a8 	.word	0x200009a8

0800025c <delay_us>:

void delay_us(uint32_t w) {
 800025c:	b510      	push	{r4, lr}
 800025e:	4604      	mov	r4, r0
	uint32_t wtill = micros() + w;
 8000260:	f7ff ffe0 	bl	8000224 <micros>
 8000264:	1904      	adds	r4, r0, r4
	while (micros() < wtill)
 8000266:	f7ff ffdd 	bl	8000224 <micros>
 800026a:	4284      	cmp	r4, r0
 800026c:	d8fb      	bhi.n	8000266 <delay_us+0xa>
		;
}
 800026e:	bd10      	pop	{r4, pc}

08000270 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000270:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
 8000272:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000276:	2101      	movs	r1, #1
 8000278:	f002 fea8 	bl	8002fcc <TIM_GetITStatus>
 800027c:	b168      	cbz	r0, 800029a <TIM2_IRQHandler+0x2a>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
 800027e:	2101      	movs	r1, #1
 8000280:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000284:	f002 feae 	bl	8002fe4 <TIM_ClearITPendingBit>
		__counter_micros += 1000;
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <TIM2_IRQHandler+0x2c>)
		__counter_millis += 1;
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <TIM2_IRQHandler+0x30>)
}

void TIM2_IRQHandler(void) {
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
		__counter_micros += 1000;
 800028c:	6811      	ldr	r1, [r2, #0]
 800028e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8000292:	6011      	str	r1, [r2, #0]
		__counter_millis += 1;
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	3201      	adds	r2, #1
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	bd08      	pop	{r3, pc}
 800029c:	200009a4 	.word	0x200009a4
 80002a0:	200009a8 	.word	0x200009a8

080002a4 <pinMode>:
	}
	return 16;
}
*/

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002a4:	b5f0      	push	{r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 80002a6:	f240 0400 	movw	r4, #0
 80002aa:	f3c0 2503 	ubfx	r5, r0, #8, #4
 80002ae:	f2c2 0400 	movt	r4, #8192	; 0x2000
	}
	return 16;
}
*/

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002b2:	b083      	sub	sp, #12
 80002b4:	460f      	mov	r7, r1
 80002b6:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 80002b8:	2101      	movs	r1, #1
 80002ba:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80002be:	f001 fd9d 	bl	8001dfc <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002c2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002c6:	2301      	movs	r3, #1
 80002c8:	f006 060f 	and.w	r6, r6, #15
 80002cc:	fa13 f606 	lsls.w	r6, r3, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002d0:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80002d2:	b2b6      	uxth	r6, r6
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002d4:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80002d8:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80002de:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80002e0:	2302      	movs	r3, #2
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002e2:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
 80002e4:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80002e8:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002ec:	f001 f94a 	bl	8001584 <GPIO_Init>
}
 80002f0:	b003      	add	sp, #12
 80002f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002f4 <digitalWrite>:

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <digitalWrite+0x28>)
 80002f6:	f3c0 2203 	ubfx	r2, r0, #8, #4
 80002fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002fe:	f000 000f 	and.w	r0, r0, #15
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
 8000302:	b929      	cbnz	r1, 8000310 <digitalWrite+0x1c>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000304:	2101      	movs	r1, #1
 8000306:	4081      	lsls	r1, r0
void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000308:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800030a:	b289      	uxth	r1, r1
 800030c:	f001 b9c8 	b.w	80016a0 <GPIO_ResetBits>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000310:	2101      	movs	r1, #1
 8000312:	4081      	lsls	r1, r0
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000314:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000316:	b289      	uxth	r1, r1
 8000318:	f001 b9c0 	b.w	800169c <GPIO_SetBits>
 800031c:	20000000 	.word	0x20000000

08000320 <digitalRead>:
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 8000320:	b508      	push	{r3, lr}
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000322:	4b10      	ldr	r3, [pc, #64]	; (8000364 <digitalRead+0x44>)
 8000324:	f3c0 2203 	ubfx	r2, r0, #8, #4
 8000328:	eb03 0382 	add.w	r3, r3, r2, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800032c:	f000 010f 	and.w	r1, r0, #15
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000330:	6a98      	ldr	r0, [r3, #40]	; 0x28
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000332:	2301      	movs	r3, #1
 8000334:	fa13 f101 	lsls.w	r1, r3, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000338:	6802      	ldr	r2, [r0, #0]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800033a:	b289      	uxth	r1, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 800033c:	fa11 f303 	lsls.w	r3, r1, r3
 8000340:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b01      	cmp	r3, #1
 8000348:	d005      	beq.n	8000356 <digitalRead+0x36>
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
 800034a:	f001 f993 	bl	8001674 <GPIO_ReadInputDataBit>
 800034e:	3000      	adds	r0, #0
 8000350:	bf18      	it	ne
 8000352:	2001      	movne	r0, #1
}
 8000354:	bd08      	pop	{r3, pc}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
	if (mode == GPIO_Mode_OUT)
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000356:	f001 f997 	bl	8001688 <GPIO_ReadOutputDataBit>
 800035a:	3000      	adds	r0, #0
 800035c:	bf18      	it	ne
 800035e:	2001      	movne	r0, #1
 8000360:	bd08      	pop	{r3, pc}
 8000362:	bf00      	nop
 8000364:	20000000 	.word	0x20000000

08000368 <PinPort>:
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
 8000368:	f240 0300 	movw	r3, #0
 800036c:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8000370:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000374:	eb03 0380 	add.w	r3, r3, r0, lsl #2
}
 8000378:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800037a:	4770      	bx	lr

0800037c <PinBit>:

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800037c:	2301      	movs	r3, #1
 800037e:	f000 000f 	and.w	r0, r0, #15
 8000382:	fa13 f000 	lsls.w	r0, r3, r0
}
 8000386:	b280      	uxth	r0, r0
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop

0800038c <PinSource>:

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}
 800038c:	f000 000f 	and.w	r0, r0, #15
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop

08000394 <GPIOMode>:

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ( port == GPIOB ) {
 8000398:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800039c:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80003a0:	42b0      	cmp	r0, r6
uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 80003a2:	b082      	sub	sp, #8
 80003a4:	4604      	mov	r4, r0
 80003a6:	460d      	mov	r5, r1
 80003a8:	4617      	mov	r7, r2
 80003aa:	4698      	mov	r8, r3
	if ( port == GPIOB ) {
 80003ac:	d047      	beq.n	800043e <GPIOMode+0xaa>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
 80003ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d046      	beq.n	8000448 <GPIOMode+0xb4>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
 80003ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80003be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003c2:	4298      	cmp	r0, r3
 80003c4:	d045      	beq.n	8000452 <GPIOMode+0xbe>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
 80003c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003ce:	4298      	cmp	r0, r3
 80003d0:	d044      	beq.n	800045c <GPIOMode+0xc8>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
 80003d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80003d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003da:	4298      	cmp	r0, r3
 80003dc:	d043      	beq.n	8000466 <GPIOMode+0xd2>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
 80003de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80003e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d042      	beq.n	8000470 <GPIOMode+0xdc>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	} else if ( port == GPIOH ) {
 80003ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80003ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003f2:	4298      	cmp	r0, r3
 80003f4:	d041      	beq.n	800047a <GPIOMode+0xe6>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
 80003f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003fe:	4298      	cmp	r0, r3
 8000400:	d040      	beq.n	8000484 <GPIOMode+0xf0>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
	} else if ( port == GPIOA ) {
 8000402:	2300      	movs	r3, #0
 8000404:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000408:	4298      	cmp	r0, r3
 800040a:	d013      	beq.n	8000434 <GPIOMode+0xa0>

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 800040c:	f89d 3020 	ldrb.w	r3, [sp, #32]
	}
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
 8000410:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 8000412:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8000416:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
 800041a:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 800041e:	4620      	mov	r0, r4
 8000420:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8000422:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 8000426:	f88d 8005 	strb.w	r8, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 800042a:	f001 f8ab 	bl	8001584 <GPIO_Init>
}
 800042e:	b002      	add	sp, #8
 8000430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ( port == GPIOH ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
	} else if ( port == GPIOA ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000434:	2001      	movs	r0, #1
 8000436:	4601      	mov	r1, r0
 8000438:	f001 fce0 	bl	8001dfc <RCC_AHB1PeriphClockCmd>
 800043c:	e7e6      	b.n	800040c <GPIOMode+0x78>
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800043e:	2002      	movs	r0, #2
 8000440:	2101      	movs	r1, #1
 8000442:	f001 fcdb 	bl	8001dfc <RCC_AHB1PeriphClockCmd>
 8000446:	e7e1      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOC ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000448:	2004      	movs	r0, #4
 800044a:	2101      	movs	r1, #1
 800044c:	f001 fcd6 	bl	8001dfc <RCC_AHB1PeriphClockCmd>
 8000450:	e7dc      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOD ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000452:	2008      	movs	r0, #8
 8000454:	2101      	movs	r1, #1
 8000456:	f001 fcd1 	bl	8001dfc <RCC_AHB1PeriphClockCmd>
 800045a:	e7d7      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOE ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800045c:	2010      	movs	r0, #16
 800045e:	2101      	movs	r1, #1
 8000460:	f001 fccc 	bl	8001dfc <RCC_AHB1PeriphClockCmd>
 8000464:	e7d2      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOF ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000466:	2020      	movs	r0, #32
 8000468:	2101      	movs	r1, #1
 800046a:	f001 fcc7 	bl	8001dfc <RCC_AHB1PeriphClockCmd>
 800046e:	e7cd      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOG ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000470:	2040      	movs	r0, #64	; 0x40
 8000472:	2101      	movs	r1, #1
 8000474:	f001 fcc2 	bl	8001dfc <RCC_AHB1PeriphClockCmd>
 8000478:	e7c8      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOH ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800047a:	2080      	movs	r0, #128	; 0x80
 800047c:	2101      	movs	r1, #1
 800047e:	f001 fcbd 	bl	8001dfc <RCC_AHB1PeriphClockCmd>
 8000482:	e7c3      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOI ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000484:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000488:	2101      	movs	r1, #1
 800048a:	f001 fcb7 	bl	8001dfc <RCC_AHB1PeriphClockCmd>
 800048e:	e7bd      	b.n	800040c <GPIOMode+0x78>

08000490 <GPIOWrite>:
	GPIO_Init(port, &GPIO_InitStructure);
}


inline void GPIOWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 8000490:	f001 b90e 	b.w	80016b0 <GPIO_Write>

08000494 <i2c_begin>:
} CommDirection;

I2C_Status i2c1_status;
CommDirection i2c1_direction;

void i2c_begin(uint32_t clkspeed) {
 8000494:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8000496:	2101      	movs	r1, #1
} CommDirection;

I2C_Status i2c1_status;
CommDirection i2c1_direction;

void i2c_begin(uint32_t clkspeed) {
 8000498:	b087      	sub	sp, #28
 800049a:	4604      	mov	r4, r0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 800049c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80004a0:	f001 fcd6 	bl	8001e50 <RCC_APB1PeriphClockCmd>
	/* GPIO Periph clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
 80004a4:	2002      	movs	r0, #2
 80004a6:	2101      	movs	r1, #1
 80004a8:	f001 fca8 	bl	8001dfc <RCC_AHB1PeriphClockCmd>

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
 80004ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80004b0:	2106      	movs	r1, #6
 80004b2:	2204      	movs	r2, #4
 80004b4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80004b8:	f001 f900 	bl	80016bc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );
 80004bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80004c0:	2109      	movs	r1, #9
 80004c2:	2204      	movs	r2, #4
 80004c4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80004c8:	f001 f8f8 	bl	80016bc <GPIO_PinAFConfig>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80004cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80004d0:	2302      	movs	r3, #2
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80004d2:	2501      	movs	r5, #1

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
 80004d4:	f44f 7210 	mov.w	r2, #576	; 0x240
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80004d8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80004dc:	a904      	add	r1, sp, #16
	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80004de:	f88d 3015 	strb.w	r3, [sp, #21]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80004e2:	f88d 3014 	strb.w	r3, [sp, #20]

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
 80004e6:	9204      	str	r2, [sp, #16]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80004e8:	f88d 5016 	strb.w	r5, [sp, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80004ec:	f88d 5017 	strb.w	r5, [sp, #23]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80004f0:	f001 f848 	bl	8001584 <GPIO_Init>

//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif

	switch (clkspeed) {
 80004f4:	f248 63a0 	movw	r3, #34464	; 0x86a0
 80004f8:	f365 431f 	bfi	r3, r5, #16, #16
 80004fc:	429c      	cmp	r4, r3
 80004fe:	d00b      	beq.n	8000518 <i2c_begin+0x84>
 8000500:	f44f 53d4 	mov.w	r3, #6784	; 0x1a80
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 8000504:	f248 62a0 	movw	r2, #34464	; 0x86a0

//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif

	switch (clkspeed) {
 8000508:	f2c0 0306 	movt	r3, #6
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 800050c:	f365 421f 	bfi	r2, r5, #16, #16
 8000510:	429c      	cmp	r4, r3
 8000512:	bf0c      	ite	eq
 8000514:	461c      	moveq	r4, r3
 8000516:	4614      	movne	r4, r2
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 8000518:	a906      	add	r1, sp, #24
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800051a:	f44f 4580 	mov.w	r5, #16384	; 0x4000
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800051e:	2300      	movs	r3, #0
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 8000520:	f841 4d18 	str.w	r4, [r1, #-24]!
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8000524:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000528:	461c      	mov	r4, r3
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 800052a:	0428      	lsls	r0, r5, #16
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800052c:	f64b 73ff 	movw	r3, #49151	; 0xbfff
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 8000530:	f440 40a8 	orr.w	r0, r0, #21504	; 0x5400
 8000534:	4669      	mov	r1, sp
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8000536:	f8ad 3006 	strh.w	r3, [sp, #6]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800053a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800053e:	f8ad 300a 	strh.w	r3, [sp, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000542:	f8ad 500c 	strh.w	r5, [sp, #12]
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 8000546:	f001 f909 	bl	800175c <I2C_Init>
	/* I2C Peripheral Enable */
	I2C_Cmd(I2C1, ENABLE);
 800054a:	0428      	lsls	r0, r5, #16
 800054c:	f440 40a8 	orr.w	r0, r0, #21504	; 0x5400
 8000550:	2101      	movs	r1, #1
 8000552:	f001 f981 	bl	8001858 <I2C_Cmd>

	i2c1_status = NOT_READY;
 8000556:	4b03      	ldr	r3, [pc, #12]	; (8000564 <i2c_begin+0xd0>)
 8000558:	22ff      	movs	r2, #255	; 0xff
 800055a:	701a      	strb	r2, [r3, #0]
	i2c1_direction = NOT_DEFINED;
 800055c:	4b02      	ldr	r3, [pc, #8]	; (8000568 <i2c_begin+0xd4>)
 800055e:	701c      	strb	r4, [r3, #0]
}
 8000560:	b007      	add	sp, #28
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	200009ad 	.word	0x200009ad
 8000568:	200009ac 	.word	0x200009ac

0800056c <i2c_transmit>:

void i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
 800056c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t i;

	i2c1_direction = TRANSMITTER;
 8000570:	4f39      	ldr	r7, [pc, #228]	; (8000658 <i2c_transmit+0xec>)
	//
	i2c1_status = NOT_READY;
 8000572:	4c3a      	ldr	r4, [pc, #232]	; (800065c <i2c_transmit+0xf0>)
}

void i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
	uint16_t i;

	i2c1_direction = TRANSMITTER;
 8000574:	2301      	movs	r3, #1
 8000576:	703b      	strb	r3, [r7, #0]
	//
	i2c1_status = NOT_READY;
 8000578:	23ff      	movs	r3, #255	; 0xff

	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}

void i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
 800057a:	4680      	mov	r8, r0
 800057c:	460e      	mov	r6, r1
 800057e:	4615      	mov	r5, r2
	uint16_t i;

	i2c1_direction = TRANSMITTER;
	//
	i2c1_status = NOT_READY;
 8000580:	7023      	strb	r3, [r4, #0]
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY ))
 8000582:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000586:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800058a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800058e:	f001 faa3 	bl	8001ad8 <I2C_GetFlagStatus>
 8000592:	4603      	mov	r3, r0
 8000594:	2800      	cmp	r0, #0
 8000596:	d1f4      	bne.n	8000582 <i2c_transmit+0x16>
		;
	i2c1_status = READY;

	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 8000598:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800059c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80005a0:	2101      	movs	r1, #1
	i2c1_direction = TRANSMITTER;
	//
	i2c1_status = NOT_READY;
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY ))
		;
	i2c1_status = READY;
 80005a2:	7023      	strb	r3, [r4, #0]

	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 80005a4:	f001 f966 	bl	8001874 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 80005a8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80005ac:	2101      	movs	r1, #1
 80005ae:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80005b2:	f2c0 0103 	movt	r1, #3
 80005b6:	f001 fa79 	bl	8001aac <I2C_CheckEvent>
 80005ba:	2800      	cmp	r0, #0
 80005bc:	d0f4      	beq.n	80005a8 <i2c_transmit+0x3c>
		;
	i2c1_status = START_ISSUED;

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 80005be:	ea4f 0148 	mov.w	r1, r8, lsl #1
 80005c2:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = START_ISSUED;
 80005c6:	2301      	movs	r3, #1

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 80005c8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80005cc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80005d0:	2200      	movs	r2, #0
	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = START_ISSUED;
 80005d2:	7023      	strb	r3, [r4, #0]

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 80005d4:	f001 f96a 	bl	80018ac <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
 80005d8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80005dc:	2182      	movs	r1, #130	; 0x82
 80005de:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80005e2:	f2c0 0107 	movt	r1, #7
 80005e6:	f001 fa61 	bl	8001aac <I2C_CheckEvent>
 80005ea:	2800      	cmp	r0, #0
 80005ec:	d0f4      	beq.n	80005d8 <i2c_transmit+0x6c>
		;
	i2c1_status = DST_ADDRESS_SENT;
 80005ee:	2302      	movs	r3, #2
 80005f0:	7023      	strb	r3, [r4, #0]

	for (i = 0; i < length; i++) {
 80005f2:	b315      	cbz	r5, 800063a <i2c_transmit+0xce>
 80005f4:	f04f 0800 	mov.w	r8, #0
		I2C_SendData(I2C1, data[i]);
		i2c1_status = BYTE_TRANSMITTING;
 80005f8:	f04f 0a04 	mov.w	sl, #4
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			;
		i2c1_status = BYTE_TRANSMITTED;
 80005fc:	f04f 0905 	mov.w	r9, #5
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
		;
	i2c1_status = DST_ADDRESS_SENT;

	for (i = 0; i < length; i++) {
		I2C_SendData(I2C1, data[i]);
 8000600:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000604:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000608:	f816 1008 	ldrb.w	r1, [r6, r8]
 800060c:	f001 f9e6 	bl	80019dc <I2C_SendData>
		i2c1_status = BYTE_TRANSMITTING;
 8000610:	f884 a000 	strb.w	sl, [r4]
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
 8000614:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000618:	2184      	movs	r1, #132	; 0x84
 800061a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800061e:	f2c0 0107 	movt	r1, #7
 8000622:	f001 fa43 	bl	8001aac <I2C_CheckEvent>
 8000626:	2800      	cmp	r0, #0
 8000628:	d0f4      	beq.n	8000614 <i2c_transmit+0xa8>
			;
		i2c1_status = BYTE_TRANSMITTED;
 800062a:	f108 0801 	add.w	r8, r8, #1
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
		;
	i2c1_status = DST_ADDRESS_SENT;

	for (i = 0; i < length; i++) {
 800062e:	fa1f f388 	uxth.w	r3, r8
 8000632:	429d      	cmp	r5, r3
		I2C_SendData(I2C1, data[i]);
		i2c1_status = BYTE_TRANSMITTING;
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			;
		i2c1_status = BYTE_TRANSMITTED;
 8000634:	f884 9000 	strb.w	r9, [r4]
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
		;
	i2c1_status = DST_ADDRESS_SENT;

	for (i = 0; i < length; i++) {
 8000638:	d8e2      	bhi.n	8000600 <i2c_transmit+0x94>
			;
		i2c1_status = BYTE_TRANSMITTED;
	}
	i2c1_status = TRANSMISSION_COMPLETED;

	I2C_GenerateSTOP(I2C1, ENABLE);
 800063a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			;
		i2c1_status = BYTE_TRANSMITTED;
	}
	i2c1_status = TRANSMISSION_COMPLETED;
 800063e:	2306      	movs	r3, #6

	I2C_GenerateSTOP(I2C1, ENABLE);
 8000640:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000644:	2101      	movs	r1, #1
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			;
		i2c1_status = BYTE_TRANSMITTED;
	}
	i2c1_status = TRANSMISSION_COMPLETED;
 8000646:	7023      	strb	r3, [r4, #0]

	I2C_GenerateSTOP(I2C1, ENABLE);
 8000648:	f001 f922 	bl	8001890 <I2C_GenerateSTOP>
	i2c1_status = NOT_READY;
 800064c:	23ff      	movs	r3, #255	; 0xff
 800064e:	7023      	strb	r3, [r4, #0]
	i2c1_direction = NOT_DEFINED;
 8000650:	2300      	movs	r3, #0
 8000652:	703b      	strb	r3, [r7, #0]
}
 8000654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000658:	200009ac 	.word	0x200009ac
 800065c:	200009ad 	.word	0x200009ad

08000660 <i2c_requestFrom>:


void i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t i;
	i2c1_direction = RECEIVER;
 8000664:	4e6b      	ldr	r6, [pc, #428]	; (8000814 <i2c_requestFrom+0x1b4>)
	//
	i2c1_status = NOT_READY;
 8000666:	4c6c      	ldr	r4, [pc, #432]	; (8000818 <i2c_requestFrom+0x1b8>)
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}


void i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000668:	4699      	mov	r9, r3
	uint16_t i;
	i2c1_direction = RECEIVER;
 800066a:	2302      	movs	r3, #2
 800066c:	7033      	strb	r3, [r6, #0]
	//
	i2c1_status = NOT_READY;
 800066e:	23ff      	movs	r3, #255	; 0xff
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}


void i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000670:	4607      	mov	r7, r0
 8000672:	4688      	mov	r8, r1
 8000674:	4615      	mov	r5, r2
	uint16_t i;
	i2c1_direction = RECEIVER;
	//
	i2c1_status = NOT_READY;
 8000676:	7023      	strb	r3, [r4, #0]
	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY ))
 8000678:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800067c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000680:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000684:	f001 fa28 	bl	8001ad8 <I2C_GetFlagStatus>
 8000688:	4603      	mov	r3, r0
 800068a:	2800      	cmp	r0, #0
 800068c:	d1f4      	bne.n	8000678 <i2c_requestFrom+0x18>
		;
	i2c1_status = READY;

	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 800068e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000692:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000696:	2101      	movs	r1, #1
	//
	i2c1_status = NOT_READY;
	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY ))
		;
	i2c1_status = READY;
 8000698:	7023      	strb	r3, [r4, #0]

	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 800069a:	f001 f8eb 	bl	8001874 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 800069e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80006a2:	2101      	movs	r1, #1
 80006a4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006a8:	f2c0 0103 	movt	r1, #3
 80006ac:	f001 f9fe 	bl	8001aac <I2C_CheckEvent>
 80006b0:	2800      	cmp	r0, #0
 80006b2:	d0f4      	beq.n	800069e <i2c_requestFrom+0x3e>
		;
	i2c1_status = START_ISSUED;

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 80006b4:	007f      	lsls	r7, r7, #1
 80006b6:	b2ff      	uxtb	r7, r7
 80006b8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = START_ISSUED;
 80006bc:	2301      	movs	r3, #1

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 80006be:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006c2:	4639      	mov	r1, r7
 80006c4:	2200      	movs	r2, #0
	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = START_ISSUED;
 80006c6:	7023      	strb	r3, [r4, #0]

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 80006c8:	f001 f8f0 	bl	80018ac <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
 80006cc:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80006d0:	2182      	movs	r1, #130	; 0x82
 80006d2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006d6:	f2c0 0107 	movt	r1, #7
 80006da:	f001 f9e7 	bl	8001aac <I2C_CheckEvent>
 80006de:	2800      	cmp	r0, #0
 80006e0:	d0f4      	beq.n	80006cc <i2c_requestFrom+0x6c>
	}
	i2c1_status = DST_ADDRESS_SENT;

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(I2C1, req);
 80006e2:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
	}
	i2c1_status = DST_ADDRESS_SENT;
 80006e6:	2302      	movs	r3, #2

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(I2C1, req);
 80006e8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006ec:	4641      	mov	r1, r8
	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
	}
	i2c1_status = DST_ADDRESS_SENT;
 80006ee:	7023      	strb	r3, [r4, #0]

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(I2C1, req);
 80006f0:	f001 f974 	bl	80019dc <I2C_SendData>
	i2c1_status = BYTE_TRANSMITTING;
 80006f4:	2304      	movs	r3, #4
 80006f6:	7023      	strb	r3, [r4, #0]
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
 80006f8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80006fc:	2184      	movs	r1, #132	; 0x84
 80006fe:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000702:	f2c0 0107 	movt	r1, #7
 8000706:	f001 f9d1 	bl	8001aac <I2C_CheckEvent>
 800070a:	2800      	cmp	r0, #0
 800070c:	d0f4      	beq.n	80006f8 <i2c_requestFrom+0x98>
	i2c1_status = TRANSMISSION_COMPLETED;

	//	  I2C_GenerateSTOP(I2C1, ENABLE);

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 800070e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
	I2C_SendData(I2C1, req);
	i2c1_status = BYTE_TRANSMITTING;
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
		;
	i2c1_status = TRANSMISSION_COMPLETED;
 8000712:	2306      	movs	r3, #6

	//	  I2C_GenerateSTOP(I2C1, ENABLE);

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 8000714:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000718:	2101      	movs	r1, #1
	I2C_SendData(I2C1, req);
	i2c1_status = BYTE_TRANSMITTING;
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
		;
	i2c1_status = TRANSMISSION_COMPLETED;
 800071a:	7023      	strb	r3, [r4, #0]

	//	  I2C_GenerateSTOP(I2C1, ENABLE);

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 800071c:	f001 f8aa 	bl	8001874 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 8000720:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000724:	2101      	movs	r1, #1
 8000726:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800072a:	f2c0 0103 	movt	r1, #3
 800072e:	f001 f9bd 	bl	8001aac <I2C_CheckEvent>
 8000732:	2800      	cmp	r0, #0
 8000734:	d0f4      	beq.n	8000720 <i2c_requestFrom+0xc0>
		;
	i2c1_status = RESTART_ISSUED;

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
 8000736:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = RESTART_ISSUED;
 800073a:	2307      	movs	r3, #7

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
 800073c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000740:	4639      	mov	r1, r7
 8000742:	2201      	movs	r2, #1
	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = RESTART_ISSUED;
 8000744:	7023      	strb	r3, [r4, #0]

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
 8000746:	f001 f8b1 	bl	80018ac <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ))
 800074a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800074e:	2102      	movs	r1, #2
 8000750:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000754:	f2c0 0103 	movt	r1, #3
 8000758:	f001 f9a8 	bl	8001aac <I2C_CheckEvent>
 800075c:	2800      	cmp	r0, #0
 800075e:	d0f4      	beq.n	800074a <i2c_requestFrom+0xea>
		;
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 8000760:	f1b9 0f01 	cmp.w	r9, #1
 8000764:	d923      	bls.n	80007ae <i2c_requestFrom+0x14e>
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}


void i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000766:	f1a9 0902 	sub.w	r9, r9, #2
 800076a:	fa1f fa89 	uxth.w	sl, r9
 800076e:	f105 0901 	add.w	r9, r5, #1
 8000772:	44d1      	add	r9, sl
 8000774:	462f      	mov	r7, r5
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ))
		;
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
		i2c1_status = RECEIVE_BYTE_READY;
 8000776:	f04f 0808 	mov.w	r8, #8
 800077a:	f884 8000 	strb.w	r8, [r4]
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 800077e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000782:	2140      	movs	r1, #64	; 0x40
 8000784:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000788:	f2c0 0103 	movt	r1, #3
 800078c:	f001 f98e 	bl	8001aac <I2C_CheckEvent>
 8000790:	2800      	cmp	r0, #0
 8000792:	d0f4      	beq.n	800077e <i2c_requestFrom+0x11e>
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
 8000794:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000798:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800079c:	f001 f920 	bl	80019e0 <I2C_ReceiveData>
 80007a0:	f807 0b01 	strb.w	r0, [r7], #1
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ))
		;
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 80007a4:	454f      	cmp	r7, r9
 80007a6:	d1e8      	bne.n	800077a <i2c_requestFrom+0x11a>
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}


void i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80007a8:	f10a 0a01 	add.w	sl, sl, #1
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ))
		;
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 80007ac:	4455      	add	r5, sl
		i2c1_status = BYTE_RECEIVED;
	}
	i2c1_status = BEFORELAST_BYTE_RECEIVED;

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(I2C1, DISABLE);
 80007ae:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
		i2c1_status = BYTE_RECEIVED;
	}
	i2c1_status = BEFORELAST_BYTE_RECEIVED;
 80007b2:	230a      	movs	r3, #10

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(I2C1, DISABLE);
 80007b4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007b8:	2100      	movs	r1, #0
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
		i2c1_status = BYTE_RECEIVED;
	}
	i2c1_status = BEFORELAST_BYTE_RECEIVED;
 80007ba:	7023      	strb	r3, [r4, #0]

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(I2C1, DISABLE);
 80007bc:	f001 f880 	bl	80018c0 <I2C_AcknowledgeConfig>
	/* Send STOP Condition */
	I2C_GenerateSTOP(I2C1, ENABLE);
 80007c0:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80007c4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007c8:	2101      	movs	r1, #1
 80007ca:	f001 f861 	bl	8001890 <I2C_GenerateSTOP>
	i2c1_status = LAST_BYTE_READY;
 80007ce:	230b      	movs	r3, #11
 80007d0:	7023      	strb	r3, [r4, #0]

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 80007d2:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80007d6:	2140      	movs	r1, #64	; 0x40
 80007d8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007dc:	f2c0 0103 	movt	r1, #3
 80007e0:	f001 f964 	bl	8001aac <I2C_CheckEvent>
 80007e4:	2800      	cmp	r0, #0
 80007e6:	d0f4      	beq.n	80007d2 <i2c_requestFrom+0x172>
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
 80007e8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80007ec:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007f0:	f001 f8f6 	bl	80019e0 <I2C_ReceiveData>
 80007f4:	7028      	strb	r0, [r5, #0]
	i2c1_status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80007f6:	f44f 40a8 	mov.w	r0, #21504	; 0x5400

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
	i2c1_status = RECEIVE_BYTE_COMPLETED;
 80007fa:	230c      	movs	r3, #12

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80007fc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000800:	2101      	movs	r1, #1

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
	i2c1_status = RECEIVE_BYTE_COMPLETED;
 8000802:	7023      	strb	r3, [r4, #0]

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 8000804:	f001 f85c 	bl	80018c0 <I2C_AcknowledgeConfig>
	i2c1_status = NOT_READY;
 8000808:	23ff      	movs	r3, #255	; 0xff
 800080a:	7023      	strb	r3, [r4, #0]
	i2c1_direction = NOT_DEFINED;
 800080c:	2300      	movs	r3, #0
 800080e:	7033      	strb	r3, [r6, #0]
}
 8000810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000814:	200009ac 	.word	0x200009ac
 8000818:	200009ad 	.word	0x200009ad

0800081c <i2c_send>:

void i2c_send(uint8_t addr, uint8_t * data, uint16_t length) {

}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <spi_begin>:
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000824:	f44f 5440 	mov.w	r4, #12288	; 0x3000
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000828:	b08b      	sub	sp, #44	; 0x2c
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 800082a:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800082e:	42a0      	cmp	r0, r4
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000830:	4681      	mov	r9, r0
 8000832:	460f      	mov	r7, r1
 8000834:	4616      	mov	r6, r2
 8000836:	4698      	mov	r8, r3
 8000838:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 800083c:	f000 80ac 	beq.w	8000998 <spi_begin+0x178>
//		 sck = PA5; // PB3
//		 miso = PA6; // PB4
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
 8000840:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000844:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000848:	4298      	cmp	r0, r3
 800084a:	f000 809d 	beq.w	8000988 <spi_begin+0x168>
		// PB12, 13, 14, 15
//		break;
	} else {
//	case SPI3Bus:
//	default:
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800084e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000852:	2101      	movs	r1, #1
 8000854:	f001 fb42 	bl	8001edc <RCC_APB1PeriphResetCmd>
		af = GPIO_AF_SPI3;
 8000858:	f04f 0b06 	mov.w	fp, #6
//		 mosi = PB5;
//		 nss = PA15; // PA4;
//		break;
	}

	GPIOMode(PinPort(sck), PinBit(sck), GPIO_Mode_AF, GPIO_Speed_25MHz,
 800085c:	4638      	mov	r0, r7
 800085e:	f7ff fd83 	bl	8000368 <PinPort>
 8000862:	4684      	mov	ip, r0
 8000864:	4638      	mov	r0, r7
 8000866:	f8cd c00c 	str.w	ip, [sp, #12]
 800086a:	f7ff fd87 	bl	800037c <PinBit>
 800086e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8000872:	2401      	movs	r4, #1
 8000874:	2500      	movs	r5, #0
 8000876:	4601      	mov	r1, r0
 8000878:	2202      	movs	r2, #2
 800087a:	4623      	mov	r3, r4
 800087c:	4660      	mov	r0, ip
 800087e:	9500      	str	r5, [sp, #0]
 8000880:	9401      	str	r4, [sp, #4]
 8000882:	f7ff fd87 	bl	8000394 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(miso), PinBit(miso), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000886:	4630      	mov	r0, r6
 8000888:	f7ff fd6e 	bl	8000368 <PinPort>
 800088c:	4684      	mov	ip, r0
 800088e:	4630      	mov	r0, r6
 8000890:	f8cd c00c 	str.w	ip, [sp, #12]
 8000894:	f7ff fd72 	bl	800037c <PinBit>
 8000898:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800089c:	9500      	str	r5, [sp, #0]
 800089e:	4601      	mov	r1, r0
 80008a0:	2202      	movs	r2, #2
 80008a2:	4623      	mov	r3, r4
 80008a4:	4660      	mov	r0, ip
 80008a6:	9401      	str	r4, [sp, #4]
 80008a8:	f7ff fd74 	bl	8000394 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(mosi), PinBit(mosi), GPIO_Mode_AF, GPIO_Speed_25MHz,
 80008ac:	4640      	mov	r0, r8
 80008ae:	f7ff fd5b 	bl	8000368 <PinPort>
 80008b2:	4684      	mov	ip, r0
 80008b4:	4640      	mov	r0, r8
 80008b6:	f8cd c00c 	str.w	ip, [sp, #12]
 80008ba:	f7ff fd5f 	bl	800037c <PinBit>
 80008be:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80008c2:	9500      	str	r5, [sp, #0]
 80008c4:	4601      	mov	r1, r0
 80008c6:	2202      	movs	r2, #2
 80008c8:	4660      	mov	r0, ip
 80008ca:	4623      	mov	r3, r4
 80008cc:	9401      	str	r4, [sp, #4]
 80008ce:	f7ff fd61 	bl	8000394 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIO_PinAFConfig(PinPort(sck), PinSource(sck), af);
 80008d2:	4638      	mov	r0, r7
 80008d4:	f7ff fd48 	bl	8000368 <PinPort>
 80008d8:	4603      	mov	r3, r0
 80008da:	4638      	mov	r0, r7
 80008dc:	9303      	str	r3, [sp, #12]
 80008de:	f7ff fd55 	bl	800038c <PinSource>
 80008e2:	9b03      	ldr	r3, [sp, #12]
 80008e4:	4601      	mov	r1, r0
 80008e6:	465a      	mov	r2, fp
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 fee7 	bl	80016bc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(miso), PinSource(miso), af);
 80008ee:	4630      	mov	r0, r6
 80008f0:	f7ff fd3a 	bl	8000368 <PinPort>
 80008f4:	4607      	mov	r7, r0
 80008f6:	4630      	mov	r0, r6
 80008f8:	f7ff fd48 	bl	800038c <PinSource>
 80008fc:	465a      	mov	r2, fp
 80008fe:	4601      	mov	r1, r0
 8000900:	4638      	mov	r0, r7
 8000902:	f000 fedb 	bl	80016bc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(mosi), PinSource(mosi), af);
 8000906:	4640      	mov	r0, r8
 8000908:	f7ff fd2e 	bl	8000368 <PinPort>
 800090c:	4606      	mov	r6, r0
 800090e:	4640      	mov	r0, r8
 8000910:	f7ff fd3c 	bl	800038c <PinSource>
 8000914:	465a      	mov	r2, fp
 8000916:	4601      	mov	r1, r0
 8000918:	4630      	mov	r0, r6
 800091a:	f000 fecf 	bl	80016bc <GPIO_PinAFConfig>
	// nSS by software
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
 800091e:	4650      	mov	r0, sl
 8000920:	f7ff fd22 	bl	8000368 <PinPort>
 8000924:	4606      	mov	r6, r0
 8000926:	4650      	mov	r0, sl
 8000928:	f7ff fd28 	bl	800037c <PinBit>
 800092c:	4622      	mov	r2, r4
 800092e:	4623      	mov	r3, r4
 8000930:	4601      	mov	r1, r0
 8000932:	4630      	mov	r0, r6
 8000934:	9500      	str	r5, [sp, #0]
 8000936:	9401      	str	r4, [sp, #4]
 8000938:	f7ff fd2c 	bl	8000394 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
 800093c:	4650      	mov	r0, sl
 800093e:	4621      	mov	r1, r4
 8000940:	f7ff fcd8 	bl	80002f4 <digitalWrite>
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000944:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000948:	f8ad 3016 	strh.w	r3, [sp, #22]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 800094c:	f44f 7300 	mov.w	r3, #512	; 0x200
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 8000950:	4648      	mov	r0, r9
 8000952:	a905      	add	r1, sp, #20
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000954:	f8ad 301e 	strh.w	r3, [sp, #30]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8000958:	2310      	movs	r3, #16
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800095a:	f8ad 5014 	strh.w	r5, [sp, #20]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 800095e:	f8ad 5018 	strh.w	r5, [sp, #24]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8000962:	f8ad 501a 	strh.w	r5, [sp, #26]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8000966:	f8ad 501c 	strh.w	r5, [sp, #28]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 800096a:	f8ad 3020 	strh.w	r3, [sp, #32]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 800096e:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;
 8000972:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24

	SPI_Init(SPIx, &SPI_InitStruct);
 8000976:	f001 fb8b 	bl	8002090 <SPI_Init>

	SPI_Cmd(SPIx, ENABLE);
 800097a:	4648      	mov	r0, r9
 800097c:	4621      	mov	r1, r4
 800097e:	f001 fc3b 	bl	80021f8 <SPI_Cmd>
	 *              - Enable or disable the SS output using the SPI_SSOutputCmd() function
	 *
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}
 8000982:	b00b      	add	sp, #44	; 0x2c
 8000984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
//	case SPI2Bus:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8000988:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800098c:	2101      	movs	r1, #1
 800098e:	f001 fa5f 	bl	8001e50 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_SPI2;
 8000992:	f04f 0b05 	mov.w	fp, #5
 8000996:	e761      	b.n	800085c <spi_begin+0x3c>
	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
//	case SPI1Bus:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000998:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800099c:	2101      	movs	r1, #1
 800099e:	f001 fa65 	bl	8001e6c <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_SPI1;
 80009a2:	f04f 0b05 	mov.w	fp, #5
 80009a6:	e759      	b.n	800085c <spi_begin+0x3c>

080009a8 <spi_transfer>:
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 80009a8:	b570      	push	{r4, r5, r6, lr}
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 80009aa:	4615      	mov	r5, r2
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 80009ac:	4604      	mov	r4, r0
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 80009ae:	b1ca      	cbz	r2, 80009e4 <spi_transfer+0x3c>
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 80009b0:	1e4e      	subs	r6, r1, #1
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
		/* Wait for SPIx Tx buffer empty */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE ) == RESET)
 80009b2:	4620      	mov	r0, r4
 80009b4:	2102      	movs	r1, #2
 80009b6:	f001 fceb 	bl	8002390 <SPI_I2S_GetFlagStatus>
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d0f9      	beq.n	80009b2 <spi_transfer+0xa>
			;
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
 80009be:	4620      	mov	r0, r4
 80009c0:	7871      	ldrb	r1, [r6, #1]
 80009c2:	f001 fca9 	bl	8002318 <SPI_I2S_SendData>
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
 80009c6:	4620      	mov	r0, r4
 80009c8:	2101      	movs	r1, #1
 80009ca:	f001 fce1 	bl	8002390 <SPI_I2S_GetFlagStatus>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d0f9      	beq.n	80009c6 <spi_transfer+0x1e>
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 80009d2:	4620      	mov	r0, r4
 80009d4:	f001 fc9c 	bl	8002310 <SPI_I2S_ReceiveData>

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 80009d8:	3d01      	subs	r5, #1
 80009da:	b2ad      	uxth	r5, r5
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 80009dc:	f806 0f01 	strb.w	r0, [r6, #1]!

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 80009e0:	2d00      	cmp	r5, #0
 80009e2:	d1e6      	bne.n	80009b2 <spi_transfer+0xa>
 80009e4:	bd70      	pop	{r4, r5, r6, pc}
 80009e6:	bf00      	nop

080009e8 <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 80009e8:	f640 13b0 	movw	r3, #2480	; 0x9b0
 80009ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	3201      	adds	r2, #1
 80009f4:	601a      	str	r2, [r3, #0]
}
 80009f6:	4770      	bx	lr

080009f8 <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <SysTick_delay+0x10>)
 80009fa:	681a      	ldr	r2, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 80009fc:	6819      	ldr	r1, [r3, #0]
 80009fe:	1a89      	subs	r1, r1, r2
 8000a00:	4281      	cmp	r1, r0
 8000a02:	d3fb      	bcc.n	80009fc <SysTick_delay+0x4>
		;
}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	200009b0 	.word	0x200009b0

08000a0c <SysTick_Start>:

void SysTick_Start(void) {
 8000a0c:	b500      	push	{lr}
 8000a0e:	b085      	sub	sp, #20
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 8000a10:	4668      	mov	r0, sp
 8000a12:	f001 f96f 	bl	8001cf4 <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000a16:	9901      	ldr	r1, [sp, #4]
 8000a18:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8000a1c:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8000a20:	fba3 2101 	umull	r2, r1, r3, r1
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000a24:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000a28:	f2ce 0300 	movt	r3, #57344	; 0xe000
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000a2c:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000a30:	0989      	lsrs	r1, r1, #6
 8000a32:	f2ce 0200 	movt	r2, #57344	; 0xe000
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000a36:	3901      	subs	r1, #1
 8000a38:	6059      	str	r1, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000a3a:	21f0      	movs	r1, #240	; 0xf0
 8000a3c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a44:	2207      	movs	r2, #7
 8000a46:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 8000a48:	b005      	add	sp, #20
 8000a4a:	bd00      	pop	{pc}

08000a4c <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 8000a4c:	f640 13b0 	movw	r3, #2480	; 0x9b0
 8000a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a54:	6818      	ldr	r0, [r3, #0]
}
 8000a56:	4770      	bx	lr

08000a58 <buffer_clear>:
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 8000a5e:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 8000a62:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 8000a66:	4770      	bx	lr

08000a68 <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 8000a68:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000a70:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 8000a74:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d001      	beq.n	8000a80 <buffer_is_full+0x10>
		return 1;
	}
	return 0;
 8000a7c:	2000      	movs	r0, #0
}
 8000a7e:	4770      	bx	lr

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
 8000a80:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
	if ( (r->head == r->tail) && (r->count > 0) ) {
		return 1;
 8000a84:	3000      	adds	r0, #0
 8000a86:	bf18      	it	ne
 8000a88:	2001      	movne	r0, #1
 8000a8a:	4770      	bx	lr

08000a8c <buffer_enque>:
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000a8c:	4603      	mov	r3, r0
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000a8e:	f8b0 0100 	ldrh.w	r0, [r0, #256]	; 0x100
		return 1;
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000a92:	b430      	push	{r4, r5}
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000a94:	f9b3 4102 	ldrsh.w	r4, [r3, #258]	; 0x102
 8000a98:	b202      	sxth	r2, r0
 8000a9a:	4294      	cmp	r4, r2
 8000a9c:	d013      	beq.n	8000ac6 <buffer_enque+0x3a>
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
 8000a9e:	3001      	adds	r0, #1
	r->count++;
	r->head %= USART_BUFFER_SIZE;
 8000aa0:	b200      	sxth	r0, r0
 8000aa2:	17c4      	asrs	r4, r0, #31
 8000aa4:	0e64      	lsrs	r4, r4, #25

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000aa6:	f8b3 5104 	ldrh.w	r5, [r3, #260]	; 0x104
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
 8000aaa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	r->count++;
	r->head %= USART_BUFFER_SIZE;
 8000aae:	1900      	adds	r0, r0, r4
 8000ab0:	f000 007f 	and.w	r0, r0, #127	; 0x7f

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000ab4:	1c6a      	adds	r2, r5, #1
	r->head %= USART_BUFFER_SIZE;
 8000ab6:	1b04      	subs	r4, r0, r4

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000ab8:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8000abc:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	return w;
}
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	bc30      	pop	{r4, r5}
 8000ac4:	4770      	bx	lr
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000ac6:	f8b3 4104 	ldrh.w	r4, [r3, #260]	; 0x104
 8000aca:	2c00      	cmp	r4, #0
 8000acc:	d0e7      	beq.n	8000a9e <buffer_enque+0x12>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
 8000ace:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ad2:	e7f5      	b.n	8000ac0 <buffer_enque+0x34>

08000ad4 <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000ad4:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8000ad8:	4603      	mov	r3, r0
 8000ada:	b410      	push	{r4}
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
 8000adc:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
 8000ae0:	b90a      	cbnz	r2, 8000ae6 <buffer_deque+0x12>
		return 0xffff;
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 8000ae2:	bc10      	pop	{r4}
 8000ae4:	4770      	bx	lr

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8000ae6:	f8b3 0102 	ldrh.w	r0, [r3, #258]	; 0x102
 8000aea:	1c44      	adds	r4, r0, #1
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000aec:	b224      	sxth	r4, r4
 8000aee:	17e1      	asrs	r1, r4, #31
 8000af0:	0e49      	lsrs	r1, r1, #25
 8000af2:	1864      	adds	r4, r4, r1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8000af4:	b200      	sxth	r0, r0
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000af6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
	r->count--;
 8000afa:	3a01      	subs	r2, #1
	r->tail %= USART_BUFFER_SIZE;
 8000afc:	1a61      	subs	r1, r4, r1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8000afe:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	r->count--;
 8000b02:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 8000b06:	f8a3 1102 	strh.w	r1, [r3, #258]	; 0x102
 8000b0a:	e7ea      	b.n	8000ae2 <buffer_deque+0xe>

08000b0c <usart_begin>:
	return w;
}

void usart_begin(USART_TypeDef * /*USARTSerial*/ USARTx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

//	switch(usx) {
//	case USART1Serial:
	if ( USARTx == USART1 ) {
 8000b10:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000b14:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000b18:	42a0      	cmp	r0, r4
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}

void usart_begin(USART_TypeDef * /*USARTSerial*/ USARTx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000b1a:	b08b      	sub	sp, #44	; 0x2c
 8000b1c:	4605      	mov	r5, r0
 8000b1e:	460f      	mov	r7, r1
 8000b20:	4616      	mov	r6, r2
 8000b22:	469a      	mov	sl, r3
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

//	switch(usx) {
//	case USART1Serial:
	if ( USARTx == USART1 ) {
 8000b24:	f000 80ae 	beq.w	8000c84 <usart_begin+0x178>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx = 0;
//	break;
	} else if ( USARTx == USART2 ) {
 8000b28:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000b2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000b30:	4298      	cmp	r0, r3
 8000b32:	f000 80b2 	beq.w	8000c9a <usart_begin+0x18e>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx = 1;
//	break;
	} else if ( USARTx == USART3 ) {
 8000b36:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000b3a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000b3e:	4298      	cmp	r0, r3
 8000b40:	f000 80b7 	beq.w	8000cb2 <usart_begin+0x1a6>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx = 2;
//	break;
	} else if ( USARTx == UART4 ) {
 8000b44:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000b48:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000b4c:	4298      	cmp	r0, r3
 8000b4e:	f000 80bc 	beq.w	8000cca <usart_begin+0x1be>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx = 3;
//	break;
	} else if ( USARTx == UART5 ) {
 8000b52:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000b56:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000b5a:	4298      	cmp	r0, r3
 8000b5c:	f000 8086 	beq.w	8000c6c <usart_begin+0x160>
//		break;
	} else { //if ( USARTx == USART6 ) {
//	case USART6Serial:
//	default:
//		usx = USART6Serial;
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 8000b60:	2020      	movs	r0, #32
 8000b62:	2101      	movs	r1, #1
 8000b64:	f001 f982 	bl	8001e6c <RCC_APB2PeriphClockCmd>
 8000b68:	2305      	movs	r3, #5
 8000b6a:	9303      	str	r3, [sp, #12]
 8000b6c:	f04f 0b47 	mov.w	fp, #71	; 0x47
		af = GPIO_AF_USART6;
 8000b70:	f04f 0808 	mov.w	r8, #8
		irq = USART6_IRQn;
		usx = 5;
//		break;
	}
	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
 8000b74:	4638      	mov	r0, r7
 8000b76:	f7ff fbf7 	bl	8000368 <PinPort>
 8000b7a:	4681      	mov	r9, r0
 8000b7c:	4638      	mov	r0, r7
 8000b7e:	f7ff fbfd 	bl	800037c <PinBit>
 8000b82:	2202      	movs	r2, #2
 8000b84:	2400      	movs	r4, #0
 8000b86:	4601      	mov	r1, r0
 8000b88:	4613      	mov	r3, r2
 8000b8a:	4648      	mov	r0, r9
 8000b8c:	9400      	str	r4, [sp, #0]
 8000b8e:	9401      	str	r4, [sp, #4]
 8000b90:	f7ff fc00 	bl	8000394 <GPIOMode>
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
 8000b94:	4630      	mov	r0, r6
 8000b96:	f7ff fbe7 	bl	8000368 <PinPort>
 8000b9a:	4681      	mov	r9, r0
 8000b9c:	4630      	mov	r0, r6
 8000b9e:	f7ff fbed 	bl	800037c <PinBit>
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	4648      	mov	r0, r9
 8000baa:	9400      	str	r4, [sp, #0]
 8000bac:	9401      	str	r4, [sp, #4]
 8000bae:	f7ff fbf1 	bl	8000394 <GPIOMode>

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
 8000bb2:	4638      	mov	r0, r7
 8000bb4:	f7ff fbd8 	bl	8000368 <PinPort>
 8000bb8:	4681      	mov	r9, r0
 8000bba:	4638      	mov	r0, r7
 8000bbc:	f7ff fbe6 	bl	800038c <PinSource>
 8000bc0:	4642      	mov	r2, r8
 8000bc2:	4601      	mov	r1, r0
 8000bc4:	4648      	mov	r0, r9
 8000bc6:	f000 fd79 	bl	80016bc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );
 8000bca:	4630      	mov	r0, r6
 8000bcc:	f7ff fbcc 	bl	8000368 <PinPort>
 8000bd0:	4607      	mov	r7, r0
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	f7ff fbda 	bl	800038c <PinSource>
 8000bd8:	4642      	mov	r2, r8
 8000bda:	4601      	mov	r1, r0
 8000bdc:	4638      	mov	r0, r7
 8000bde:	f000 fd6d 	bl	80016bc <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000be2:	230c      	movs	r3, #12

	USART_Init(USARTx /*usartx[usx]*/, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000be4:	a905      	add	r1, sp, #20
 8000be6:	4628      	mov	r0, r5
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000be8:	f8ad 301e 	strh.w	r3, [sp, #30]
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8000bec:	f8cd a014 	str.w	sl, [sp, #20]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000bf0:	f8ad 4018 	strh.w	r4, [sp, #24]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8000bf4:	f8ad 401a 	strh.w	r4, [sp, #26]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8000bf8:	f8ad 401c 	strh.w	r4, [sp, #28]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000bfc:	f8ad 4020 	strh.w	r4, [sp, #32]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(USARTx /*usartx[usx]*/, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000c00:	f002 fb66 	bl	80032d0 <USART_Init>

	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000c04:	4628      	mov	r0, r5
 8000c06:	2201      	movs	r2, #1
 8000c08:	f240 5125 	movw	r1, #1317	; 0x525
 8000c0c:	f002 fcca 	bl	80035a4 <USART_ITConfig>
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
 8000c10:	4622      	mov	r2, r4
 8000c12:	4628      	mov	r0, r5
 8000c14:	f240 7127 	movw	r1, #1831	; 0x727
 8000c18:	f002 fcc4 	bl	80035a4 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = irq;
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000c1c:	2601      	movs	r6, #1
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000c1e:	a809      	add	r0, sp, #36	; 0x24
	USART_Init(USARTx /*usartx[usx]*/, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 8000c20:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8000c24:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8000c28:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000c2c:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000c30:	f000 fbac 	bl	800138c <NVIC_Init>
	//
	buffer_clear(&rxring[usx]);
 8000c34:	9a03      	ldr	r2, [sp, #12]
	buffer_clear(&txring[usx]);
 8000c36:	492b      	ldr	r1, [pc, #172]	; (8000ce4 <usart_begin+0x1d8>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
 8000c38:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000c3c:	fb03 f302 	mul.w	r3, r3, r2
 8000c40:	4a29      	ldr	r2, [pc, #164]	; (8000ce8 <usart_begin+0x1dc>)
 8000c42:	189a      	adds	r2, r3, r2
	buffer_clear(&txring[usx]);
 8000c44:	185b      	adds	r3, r3, r1
	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx /*usartx[usx]*/, ENABLE);
 8000c46:	4628      	mov	r0, r5
 8000c48:	4631      	mov	r1, r6
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000c4a:	f8a2 4100 	strh.w	r4, [r2, #256]	; 0x100
	r->tail = 0;
 8000c4e:	f8a2 4102 	strh.w	r4, [r2, #258]	; 0x102
	r->count = 0;
 8000c52:	f8a2 4104 	strh.w	r4, [r2, #260]	; 0x104
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000c56:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	r->tail = 0;
 8000c5a:	f8a3 4102 	strh.w	r4, [r3, #258]	; 0x102
	r->count = 0;
 8000c5e:	f8a3 4104 	strh.w	r4, [r3, #260]	; 0x104
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx /*usartx[usx]*/, ENABLE);
 8000c62:	f002 fbc5 	bl	80033f0 <USART_Cmd>
}
 8000c66:	b00b      	add	sp, #44	; 0x2c
 8000c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		irq = UART4_IRQn;
		usx = 3;
//	break;
	} else if ( USARTx == UART5 ) {
//	case UART5Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8000c6c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000c70:	2101      	movs	r1, #1
 8000c72:	f001 f8ed 	bl	8001e50 <RCC_APB1PeriphClockCmd>
 8000c76:	2204      	movs	r2, #4
 8000c78:	9203      	str	r2, [sp, #12]
 8000c7a:	f04f 0b35 	mov.w	fp, #53	; 0x35
		af = GPIO_AF_UART5;
 8000c7e:	f04f 0808 	mov.w	r8, #8
 8000c82:	e777      	b.n	8000b74 <usart_begin+0x68>
	IRQn_Type irq = USART1_IRQn;

//	switch(usx) {
//	case USART1Serial:
	if ( USARTx == USART1 ) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000c84:	2010      	movs	r0, #16
 8000c86:	2101      	movs	r1, #1
 8000c88:	f001 f8f0 	bl	8001e6c <RCC_APB2PeriphClockCmd>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	9203      	str	r2, [sp, #12]
 8000c90:	f04f 0b25 	mov.w	fp, #37	; 0x25
		af = GPIO_AF_USART1;
 8000c94:	f04f 0807 	mov.w	r8, #7
 8000c98:	e76c      	b.n	8000b74 <usart_begin+0x68>
		irq = USART1_IRQn;
		usx = 0;
//	break;
	} else if ( USARTx == USART2 ) {
//	case USART2Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000c9a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	f001 f8d6 	bl	8001e50 <RCC_APB1PeriphClockCmd>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	9303      	str	r3, [sp, #12]
 8000ca8:	f04f 0b26 	mov.w	fp, #38	; 0x26
		af = GPIO_AF_USART2;
 8000cac:	f04f 0807 	mov.w	r8, #7
 8000cb0:	e760      	b.n	8000b74 <usart_begin+0x68>
		irq = USART2_IRQn;
		usx = 1;
//	break;
	} else if ( USARTx == USART3 ) {
//	case USART3Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000cb2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	f001 f8ca 	bl	8001e50 <RCC_APB1PeriphClockCmd>
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	9203      	str	r2, [sp, #12]
 8000cc0:	f04f 0b27 	mov.w	fp, #39	; 0x27
		af = GPIO_AF_USART3;
 8000cc4:	f04f 0807 	mov.w	r8, #7
 8000cc8:	e754      	b.n	8000b74 <usart_begin+0x68>
		irq = USART3_IRQn;
		usx = 2;
//	break;
	} else if ( USARTx == UART4 ) {
//	case UART4Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8000cca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000cce:	2101      	movs	r1, #1
 8000cd0:	f001 f8be 	bl	8001e50 <RCC_APB1PeriphClockCmd>
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	9303      	str	r3, [sp, #12]
 8000cd8:	f04f 0b34 	mov.w	fp, #52	; 0x34
		af = GPIO_AF_UART4;
 8000cdc:	f04f 0808 	mov.w	r8, #8
 8000ce0:	e748      	b.n	8000b74 <usart_begin+0x68>
 8000ce2:	bf00      	nop
 8000ce4:	200009b4 	.word	0x200009b4
 8000ce8:	20000fd8 	.word	0x20000fd8

08000cec <usart_bare_write>:
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx /*usartx[usx]*/, ENABLE);
}

void usart_bare_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
 8000cec:	b538      	push	{r3, r4, r5, lr}
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	f002 fc71 	bl	80035dc <USART_GetFlagStatus>
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	d0f9      	beq.n	8000cf2 <usart_bare_write+0x6>
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
 8000cfe:	4620      	mov	r0, r4
 8000d00:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}
 8000d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USART_Cmd(USARTx /*usartx[usx]*/, ENABLE);
}

void usart_bare_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
 8000d06:	f002 bba7 	b.w	8003458 <USART_SendData>
 8000d0a:	bf00      	nop

08000d0c <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d10:	f2c4 0301 	movt	r3, #16385	; 0x4001
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
 8000d14:	b570      	push	{r4, r5, r6, lr}
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000d16:	2500      	movs	r5, #0
 8000d18:	4298      	cmp	r0, r3
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	460e      	mov	r6, r1
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000d1e:	d01c      	beq.n	8000d5a <usart_write+0x4e>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000d20:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000d24:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d28:	2501      	movs	r5, #1
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	d015      	beq.n	8000d5a <usart_write+0x4e>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000d2e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000d32:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d36:	2502      	movs	r5, #2
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	d00e      	beq.n	8000d5a <usart_write+0x4e>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000d3c:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000d40:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d44:	2503      	movs	r5, #3
 8000d46:	4298      	cmp	r0, r3
 8000d48:	d007      	beq.n	8000d5a <usart_write+0x4e>
		usx = 3;
	} else if ( USARTx == UART5 ) {
 8000d4a:	f44f 45a0 	mov.w	r5, #20480	; 0x5000
 8000d4e:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8000d52:	42a8      	cmp	r0, r5
 8000d54:	bf14      	ite	ne
 8000d56:	2505      	movne	r5, #5
 8000d58:	2504      	moveq	r5, #4
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <usart_write+0x9c>)
 8000d5c:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000d60:	fb02 3505 	mla	r5, r2, r5, r3
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000d64:	f9b5 2100 	ldrsh.w	r2, [r5, #256]	; 0x100
 8000d68:	f9b5 3102 	ldrsh.w	r3, [r5, #258]	; 0x102
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d011      	beq.n	8000d94 <usart_write+0x88>
		usx = 5;
	}
	//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_us(833);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
 8000d70:	2200      	movs	r2, #0
 8000d72:	4620      	mov	r0, r4
 8000d74:	f240 7127 	movw	r1, #1831	; 0x727
 8000d78:	f002 fc14 	bl	80035a4 <USART_ITConfig>
	buffer_enque(&txring[usx], w);
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	4628      	mov	r0, r5
 8000d80:	f7ff fe84 	bl	8000a8c <buffer_enque>
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
 8000d84:	4620      	mov	r0, r4
 8000d86:	f240 7127 	movw	r1, #1831	; 0x727
 8000d8a:	2201      	movs	r2, #1
}
 8000d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_us(833);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
 8000d90:	f002 bc08 	b.w	80035a4 <USART_ITConfig>
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000d94:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0e9      	beq.n	8000d70 <usart_write+0x64>
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_us(833);
 8000d9c:	f240 3041 	movw	r0, #833	; 0x341
 8000da0:	f7ff fa5c 	bl	800025c <delay_us>
 8000da4:	e7e4      	b.n	8000d70 <usart_write+0x64>
 8000da6:	bf00      	nop
 8000da8:	200009b4 	.word	0x200009b4

08000dac <usart_print>:
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
}

void usart_print(USART_TypeDef * USARTx /*usartx[usx]*/, const char * s) {
 8000dac:	b538      	push	{r3, r4, r5, lr}
 8000dae:	460c      	mov	r4, r1
	while (*s)
 8000db0:	7809      	ldrb	r1, [r1, #0]
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
}

void usart_print(USART_TypeDef * USARTx /*usartx[usx]*/, const char * s) {
 8000db2:	4605      	mov	r5, r0
	while (*s)
 8000db4:	b131      	cbz	r1, 8000dc4 <usart_print+0x18>
		usart_write(USARTx /*usartx[usx]*/, (uint16_t) *s++);
 8000db6:	4628      	mov	r0, r5
 8000db8:	f7ff ffa8 	bl	8000d0c <usart_write>
	buffer_enque(&txring[usx], w);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
}

void usart_print(USART_TypeDef * USARTx /*usartx[usx]*/, const char * s) {
	while (*s)
 8000dbc:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	d1f8      	bne.n	8000db6 <usart_print+0xa>
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <usart_bare_read>:
		usart_write(USARTx /*usartx[usx]*/, (uint16_t) *s++);
}

uint16_t usart_bare_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	return USART_ReceiveData(USARTx);
 8000dc8:	f002 bb4a 	b.w	8003460 <USART_ReceiveData>

08000dcc <usart_read>:
}

uint16_t usart_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
 8000dcc:	b508      	push	{r3, lr}
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000dd6:	4298      	cmp	r0, r3
 8000dd8:	d026      	beq.n	8000e28 <usart_read+0x5c>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000dda:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000dde:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000de2:	4298      	cmp	r0, r3
 8000de4:	d022      	beq.n	8000e2c <usart_read+0x60>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000de6:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000dea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d01e      	beq.n	8000e30 <usart_read+0x64>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000df2:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000df6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000dfa:	4298      	cmp	r0, r3
 8000dfc:	d01a      	beq.n	8000e34 <usart_read+0x68>
		usx = 3;
	} else if ( USARTx == UART5 ) {
 8000dfe:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000e02:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e06:	4298      	cmp	r0, r3
 8000e08:	bf14      	ite	ne
 8000e0a:	2005      	movne	r0, #5
 8000e0c:	2004      	moveq	r0, #4
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	uint16_t w = buffer_deque(&rxring[usx]);
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <usart_read+0x6c>)
 8000e10:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000e14:	fb02 3000 	mla	r0, r2, r0, r3
 8000e18:	f7ff fe5c 	bl	8000ad4 <buffer_deque>
	if ( w == 0xffff ) return 0; // buffer is empty
 8000e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	return w;
}
 8000e20:	4298      	cmp	r0, r3
 8000e22:	bf08      	it	eq
 8000e24:	2000      	moveq	r0, #0
 8000e26:	bd08      	pop	{r3, pc}
	return USART_ReceiveData(USARTx);
}

uint16_t usart_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000e28:	2000      	movs	r0, #0
 8000e2a:	e7f0      	b.n	8000e0e <usart_read+0x42>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	e7ee      	b.n	8000e0e <usart_read+0x42>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000e30:	2002      	movs	r0, #2
 8000e32:	e7ec      	b.n	8000e0e <usart_read+0x42>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000e34:	2003      	movs	r0, #3
 8000e36:	e7ea      	b.n	8000e0e <usart_read+0x42>
 8000e38:	20000fd8 	.word	0x20000fd8

08000e3c <usart_flush>:
	return w;
}

void usart_flush(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e40:	f2c4 0301 	movt	r3, #16385	; 0x4001
	uint16_t w = buffer_deque(&rxring[usx]);
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}

void usart_flush(USART_TypeDef * USARTx /*usartx[usx]*/) {
 8000e44:	b570      	push	{r4, r5, r6, lr}
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000e46:	2500      	movs	r5, #0
 8000e48:	4298      	cmp	r0, r3
	uint16_t w = buffer_deque(&rxring[usx]);
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}

void usart_flush(USART_TypeDef * USARTx /*usartx[usx]*/) {
 8000e4a:	4604      	mov	r4, r0
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000e4c:	d01c      	beq.n	8000e88 <usart_flush+0x4c>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000e4e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000e52:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e56:	2501      	movs	r5, #1
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	d015      	beq.n	8000e88 <usart_flush+0x4c>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000e5c:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000e60:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e64:	2502      	movs	r5, #2
 8000e66:	4298      	cmp	r0, r3
 8000e68:	d00e      	beq.n	8000e88 <usart_flush+0x4c>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000e6a:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000e6e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e72:	2503      	movs	r5, #3
 8000e74:	4298      	cmp	r0, r3
 8000e76:	d007      	beq.n	8000e88 <usart_flush+0x4c>
		usx = 3;
	} else if ( USARTx == UART5 ) {
 8000e78:	f44f 45a0 	mov.w	r5, #20480	; 0x5000
 8000e7c:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8000e80:	42a8      	cmp	r0, r5
 8000e82:	bf14      	ite	ne
 8000e84:	2505      	movne	r5, #5
 8000e86:	2504      	moveq	r5, #4
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	USART_ITConfig(USARTx, USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	f240 5125 	movw	r1, #1317	; 0x525
 8000e90:	f002 fb88 	bl	80035a4 <USART_ITConfig>
	buffer_clear(&rxring[usx]);
 8000e94:	f44f 7683 	mov.w	r6, #262	; 0x106
 8000e98:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <usart_flush+0xe4>)
 8000e9a:	fb06 f605 	mul.w	r6, r6, r5
 8000e9e:	18f3      	adds	r3, r6, r3
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000ea0:	2500      	movs	r5, #0
 8000ea2:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	r->tail = 0;
 8000ea6:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	r->count = 0;
 8000eaa:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	USART_ITConfig(USARTx, USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
 8000eae:	f240 5125 	movw	r1, #1317	; 0x525
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f002 fbc0 	bl	8003638 <USART_ClearITPendingBit>
	USART_ITConfig(USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f240 5125 	movw	r1, #1317	; 0x525
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f002 fb70 	bl	80035a4 <USART_ITConfig>
	USART_ITConfig(USARTx, USART_IT_TXE, DISABLE);
 8000ec4:	462a      	mov	r2, r5
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	f240 7127 	movw	r1, #1831	; 0x727
 8000ecc:	f002 fb6a 	bl	80035a4 <USART_ITConfig>
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <usart_flush+0xe8>)
	while ( buffer_count(&txring[usx]) > 0 ) {
 8000ed2:	199e      	adds	r6, r3, r6
 8000ed4:	f8b6 5104 	ldrh.w	r5, [r6, #260]	; 0x104
 8000ed8:	b1b5      	cbz	r5, 8000f08 <usart_flush+0xcc>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
 8000eda:	4620      	mov	r0, r4
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	f002 fb7d 	bl	80035dc <USART_GetFlagStatus>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	d0f9      	beq.n	8000eda <usart_flush+0x9e>
		USART_SendData(USARTx, buffer_deque(&txring[usx]));
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	f7ff fdf4 	bl	8000ad4 <buffer_deque>
 8000eec:	4601      	mov	r1, r0
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f002 fab2 	bl	8003458 <USART_SendData>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	2140      	movs	r1, #64	; 0x40
 8000ef8:	f002 fb70 	bl	80035dc <USART_GetFlagStatus>
 8000efc:	2800      	cmp	r0, #0
 8000efe:	d0f9      	beq.n	8000ef4 <usart_flush+0xb8>
	USART_ITConfig(USARTx, USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
	USART_ITConfig(USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx, USART_IT_TXE, DISABLE);
	while ( buffer_count(&txring[usx]) > 0 ) {
 8000f00:	f8b6 5104 	ldrh.w	r5, [r6, #260]	; 0x104
 8000f04:	2d00      	cmp	r5, #0
 8000f06:	d1e8      	bne.n	8000eda <usart_flush+0x9e>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
		USART_SendData(USARTx, buffer_deque(&txring[usx]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f240 7127 	movw	r1, #1831	; 0x727
 8000f0e:	f002 fb93 	bl	8003638 <USART_ClearITPendingBit>
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000f12:	f8a6 5100 	strh.w	r5, [r6, #256]	; 0x100
	r->tail = 0;
 8000f16:	f8a6 5102 	strh.w	r5, [r6, #258]	; 0x102
	r->count = 0;
 8000f1a:	f8a6 5104 	strh.w	r5, [r6, #260]	; 0x104
		USART_SendData(USARTx, buffer_deque(&txring[usx]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
	buffer_clear(&txring[usx]);
}
 8000f1e:	bd70      	pop	{r4, r5, r6, pc}
 8000f20:	20000fd8 	.word	0x20000fd8
 8000f24:	200009b4 	.word	0x200009b4

08000f28 <usart_peek>:

uint16_t usart_peek(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000f30:	4298      	cmp	r0, r3
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
	buffer_clear(&txring[usx]);
}

uint16_t usart_peek(USART_TypeDef * USARTx /*usartx[usx]*/) {
 8000f32:	b410      	push	{r4}
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000f34:	d032      	beq.n	8000f9c <usart_peek+0x74>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000f36:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000f3a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f3e:	4298      	cmp	r0, r3
 8000f40:	d02f      	beq.n	8000fa2 <usart_peek+0x7a>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000f42:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000f46:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f4a:	4298      	cmp	r0, r3
 8000f4c:	d02c      	beq.n	8000fa8 <usart_peek+0x80>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000f4e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000f52:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f56:	4298      	cmp	r0, r3
 8000f58:	d029      	beq.n	8000fae <usart_peek+0x86>
		usx = 3;
	} else if ( USARTx == UART5 ) {
 8000f5a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000f5e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f62:	4298      	cmp	r0, r3
 8000f64:	bf14      	ite	ne
 8000f66:	2205      	movne	r2, #5
 8000f68:	2204      	moveq	r2, #4
 8000f6a:	4610      	mov	r0, r2
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <usart_peek+0x8c>)
	} else if ( USARTx == UART5 ) {
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	if ( ! buffer_count(&rxring[usx]) == 0 )
 8000f6e:	f44f 7183 	mov.w	r1, #262	; 0x106
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000f72:	fb01 3202 	mla	r2, r1, r2, r3
	} else if ( USARTx == UART5 ) {
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	if ( ! buffer_count(&rxring[usx]) == 0 )
 8000f76:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8000f7a:	b91a      	cbnz	r2, 8000f84 <usart_peek+0x5c>
		return rxring[usx].buf[rxring[usx].tail];
	return 0xffff;
 8000f7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8000f80:	bc10      	pop	{r4}
 8000f82:	4770      	bx	lr
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	if ( ! buffer_count(&rxring[usx]) == 0 )
		return rxring[usx].buf[rxring[usx].tail];
 8000f84:	fb01 3100 	mla	r1, r1, r0, r3
 8000f88:	eb00 1480 	add.w	r4, r0, r0, lsl #6
 8000f8c:	f9b1 2102 	ldrsh.w	r2, [r1, #258]	; 0x102
 8000f90:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8000f94:	1880      	adds	r0, r0, r2
 8000f96:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8000f9a:	e7f1      	b.n	8000f80 <usart_peek+0x58>
	buffer_clear(&txring[usx]);
}

uint16_t usart_peek(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000f9c:	2200      	movs	r2, #0
		usx = 0;
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	e7e4      	b.n	8000f6c <usart_peek+0x44>
	} else if ( USARTx == USART2 ) {
 8000fa2:	2201      	movs	r2, #1
		usx = 1;
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e7e1      	b.n	8000f6c <usart_peek+0x44>
	} else if ( USARTx == USART3 ) {
 8000fa8:	2202      	movs	r2, #2
		usx = 2;
 8000faa:	4610      	mov	r0, r2
 8000fac:	e7de      	b.n	8000f6c <usart_peek+0x44>
	} else if ( USARTx == UART4 ) {
 8000fae:	2203      	movs	r2, #3
		usx = 3;
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	e7db      	b.n	8000f6c <usart_peek+0x44>
 8000fb4:	20000fd8 	.word	0x20000fd8

08000fb8 <usart_available>:
	return 0xffff;
}

uint16_t usart_available(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fbc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000fc0:	4298      	cmp	r0, r3
 8000fc2:	d021      	beq.n	8001008 <usart_available+0x50>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000fc4:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000fc8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000fcc:	4298      	cmp	r0, r3
 8000fce:	d01d      	beq.n	800100c <usart_available+0x54>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000fd0:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000fd4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000fd8:	4298      	cmp	r0, r3
 8000fda:	d019      	beq.n	8001010 <usart_available+0x58>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000fdc:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000fe0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000fe4:	4298      	cmp	r0, r3
 8000fe6:	d015      	beq.n	8001014 <usart_available+0x5c>
		usx = 3;
	} else if ( USARTx == UART5 ) {
 8000fe8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000fec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000ff0:	4298      	cmp	r0, r3
 8000ff2:	bf14      	ite	ne
 8000ff4:	2005      	movne	r0, #5
 8000ff6:	2004      	moveq	r0, #4
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <usart_available+0x60>)
 8000ffa:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000ffe:	fb02 3000 	mla	r0, r2, r0, r3
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	return buffer_count(&rxring[usx]);
}
 8001002:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8001006:	4770      	bx	lr
	return 0xffff;
}

uint16_t usart_available(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8001008:	2000      	movs	r0, #0
 800100a:	e7f5      	b.n	8000ff8 <usart_available+0x40>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 800100c:	2001      	movs	r0, #1
 800100e:	e7f3      	b.n	8000ff8 <usart_available+0x40>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8001010:	2002      	movs	r0, #2
 8001012:	e7f1      	b.n	8000ff8 <usart_available+0x40>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8001014:	2003      	movs	r0, #3
 8001016:	e7ef      	b.n	8000ff8 <usart_available+0x40>
 8001018:	20000fd8 	.word	0x20000fd8

0800101c <USART1_IRQHandler>:


// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 800101c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
}


// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 8001020:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8001022:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001026:	f240 5125 	movw	r1, #1317	; 0x525
 800102a:	f002 fae1 	bl	80035f0 <USART_GetITStatus>
 800102e:	2800      	cmp	r0, #0
 8001030:	d12b      	bne.n	800108a <USART1_IRQHandler+0x6e>
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 8001032:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001036:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800103a:	f240 7127 	movw	r1, #1831	; 0x727
 800103e:	f002 fad7 	bl	80035f0 <USART_GetITStatus>
 8001042:	2800      	cmp	r0, #0
 8001044:	d020      	beq.n	8001088 <USART1_IRQHandler+0x6c>
		if (txring[USART1Serial].count == 0) {
 8001046:	4816      	ldr	r0, [pc, #88]	; (80010a0 <USART1_IRQHandler+0x84>)
 8001048:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 800104c:	b152      	cbz	r2, 8001064 <USART1_IRQHandler+0x48>
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
 800104e:	f7ff fd41 	bl	8000ad4 <buffer_deque>
 8001052:	4601      	mov	r1, r0
 8001054:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001058:	f2c4 0001 	movt	r0, #16385	; 0x4001
		}
	}
}
 800105c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
 8001060:	f002 b9fa 	b.w	8003458 <USART_SendData>
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 8001064:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001068:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800106c:	f240 7127 	movw	r1, #1831	; 0x727
 8001070:	f002 fa98 	bl	80035a4 <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8001074:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001078:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800107c:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
		}
	}
}
 8001080:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8001084:	f002 bad8 	b.w	8003638 <USART_ClearITPendingBit>
 8001088:	bd08      	pop	{r3, pc}

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
 800108a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800108e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001092:	f002 f9e5 	bl	8003460 <USART_ReceiveData>
 8001096:	4601      	mov	r1, r0
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <USART1_IRQHandler+0x88>)
 800109a:	f7ff fcf7 	bl	8000a8c <buffer_enque>
 800109e:	e7c8      	b.n	8001032 <USART1_IRQHandler+0x16>
 80010a0:	200009b4 	.word	0x200009b4
 80010a4:	20000fd8 	.word	0x20000fd8

080010a8 <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void) {
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 80010a8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
		}
	}
}

void USART2_IRQHandler(void) {
 80010ac:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 80010ae:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80010b2:	f240 5125 	movw	r1, #1317	; 0x525
 80010b6:	f002 fa9b 	bl	80035f0 <USART_GetITStatus>
 80010ba:	2800      	cmp	r0, #0
 80010bc:	d12d      	bne.n	800111a <USART2_IRQHandler+0x72>
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
 80010be:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 80010c2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80010c6:	f240 7127 	movw	r1, #1831	; 0x727
 80010ca:	f002 fa91 	bl	80035f0 <USART_GetITStatus>
 80010ce:	2800      	cmp	r0, #0
 80010d0:	d022      	beq.n	8001118 <USART2_IRQHandler+0x70>
		if (txring[USART2Serial].count == 0) {
 80010d2:	4817      	ldr	r0, [pc, #92]	; (8001130 <USART2_IRQHandler+0x88>)
 80010d4:	f8b0 220a 	ldrh.w	r2, [r0, #522]	; 0x20a
 80010d8:	b162      	cbz	r2, 80010f4 <USART2_IRQHandler+0x4c>
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
 80010da:	f500 7083 	add.w	r0, r0, #262	; 0x106
 80010de:	f7ff fcf9 	bl	8000ad4 <buffer_deque>
 80010e2:	4601      	mov	r1, r0
 80010e4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 80010e8:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 80010ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
 80010f0:	f002 b9b2 	b.w	8003458 <USART_SendData>
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
 80010f4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 80010f8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80010fc:	f240 7127 	movw	r1, #1831	; 0x727
 8001100:	f002 fa50 	bl	80035a4 <USART_ITConfig>
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8001104:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8001108:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800110c:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
		}
	}
}
 8001110:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8001114:	f002 ba90 	b.w	8003638 <USART_ClearITPendingBit>
 8001118:	bd08      	pop	{r3, pc}
	}
}

void USART2_IRQHandler(void) {
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
 800111a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800111e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001122:	f002 f99d 	bl	8003460 <USART_ReceiveData>
 8001126:	4601      	mov	r1, r0
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <USART2_IRQHandler+0x8c>)
 800112a:	f7ff fcaf 	bl	8000a8c <buffer_enque>
 800112e:	e7c6      	b.n	80010be <USART2_IRQHandler+0x16>
 8001130:	200009b4 	.word	0x200009b4
 8001134:	200010de 	.word	0x200010de

08001138 <USART3_IRQHandler>:
		}
	}
}

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8001138:	f44f 4090 	mov.w	r0, #18432	; 0x4800
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
		}
	}
}

void USART3_IRQHandler(void) {
 800113c:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 800113e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001142:	f240 5125 	movw	r1, #1317	; 0x525
 8001146:	f002 fa53 	bl	80035f0 <USART_GetITStatus>
 800114a:	2800      	cmp	r0, #0
 800114c:	d12d      	bne.n	80011aa <USART3_IRQHandler+0x72>
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 800114e:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001152:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001156:	f240 7127 	movw	r1, #1831	; 0x727
 800115a:	f002 fa49 	bl	80035f0 <USART_GetITStatus>
 800115e:	2800      	cmp	r0, #0
 8001160:	d022      	beq.n	80011a8 <USART3_IRQHandler+0x70>
		if (txring[USART3Serial].count == 0) {
 8001162:	4817      	ldr	r0, [pc, #92]	; (80011c0 <USART3_IRQHandler+0x88>)
 8001164:	f8b0 2310 	ldrh.w	r2, [r0, #784]	; 0x310
 8001168:	b162      	cbz	r2, 8001184 <USART3_IRQHandler+0x4c>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
 800116a:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 800116e:	f7ff fcb1 	bl	8000ad4 <buffer_deque>
 8001172:	4601      	mov	r1, r0
 8001174:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001178:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 800117c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
 8001180:	f002 b96a 	b.w	8003458 <USART_SendData>
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8001184:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001188:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800118c:	f240 7127 	movw	r1, #1831	; 0x727
 8001190:	f002 fa08 	bl	80035a4 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8001194:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001198:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800119c:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
		}
	}
}
 80011a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 80011a4:	f002 ba48 	b.w	8003638 <USART_ClearITPendingBit>
 80011a8:	bd08      	pop	{r3, pc}
	}
}

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
 80011aa:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80011ae:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80011b2:	f002 f955 	bl	8003460 <USART_ReceiveData>
 80011b6:	4601      	mov	r1, r0
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <USART3_IRQHandler+0x8c>)
 80011ba:	f7ff fc67 	bl	8000a8c <buffer_enque>
 80011be:	e7c6      	b.n	800114e <USART3_IRQHandler+0x16>
 80011c0:	200009b4 	.word	0x200009b4
 80011c4:	200011e4 	.word	0x200011e4

080011c8 <UART4_IRQHandler>:
		}
	}
}

void UART4_IRQHandler(void) {
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 80011c8:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
		}
	}
}

void UART4_IRQHandler(void) {
 80011cc:	b508      	push	{r3, lr}
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 80011ce:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80011d2:	f240 5125 	movw	r1, #1317	; 0x525
 80011d6:	f002 fa0b 	bl	80035f0 <USART_GetITStatus>
 80011da:	2800      	cmp	r0, #0
 80011dc:	d12d      	bne.n	800123a <UART4_IRQHandler+0x72>
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
 80011de:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 80011e2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80011e6:	f240 7127 	movw	r1, #1831	; 0x727
 80011ea:	f002 fa01 	bl	80035f0 <USART_GetITStatus>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d022      	beq.n	8001238 <UART4_IRQHandler+0x70>
		if (txring[UART4Serial].count == 0) {
 80011f2:	4817      	ldr	r0, [pc, #92]	; (8001250 <UART4_IRQHandler+0x88>)
 80011f4:	f8b0 2416 	ldrh.w	r2, [r0, #1046]	; 0x416
 80011f8:	b162      	cbz	r2, 8001214 <UART4_IRQHandler+0x4c>
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
 80011fa:	f200 3012 	addw	r0, r0, #786	; 0x312
 80011fe:	f7ff fc69 	bl	8000ad4 <buffer_deque>
 8001202:	4601      	mov	r1, r0
 8001204:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8001208:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 800120c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
 8001210:	f002 b922 	b.w	8003458 <USART_SendData>
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
 8001214:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8001218:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800121c:	f240 7127 	movw	r1, #1831	; 0x727
 8001220:	f002 f9c0 	bl	80035a4 <USART_ITConfig>
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8001224:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8001228:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800122c:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
		}
	}
}
 8001230:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8001234:	f002 ba00 	b.w	8003638 <USART_ClearITPendingBit>
 8001238:	bd08      	pop	{r3, pc}
	}
}

void UART4_IRQHandler(void) {
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
 800123a:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 800123e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001242:	f002 f90d 	bl	8003460 <USART_ReceiveData>
 8001246:	4601      	mov	r1, r0
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <UART4_IRQHandler+0x8c>)
 800124a:	f7ff fc1f 	bl	8000a8c <buffer_enque>
 800124e:	e7c6      	b.n	80011de <UART4_IRQHandler+0x16>
 8001250:	200009b4 	.word	0x200009b4
 8001254:	200012ea 	.word	0x200012ea

08001258 <UART5_IRQHandler>:
		}
	}
}

void UART5_IRQHandler(void) {
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
 8001258:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
		}
	}
}

void UART5_IRQHandler(void) {
 800125c:	b508      	push	{r3, lr}
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
 800125e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001262:	f240 5125 	movw	r1, #1317	; 0x525
 8001266:	f002 f9c3 	bl	80035f0 <USART_GetITStatus>
 800126a:	2800      	cmp	r0, #0
 800126c:	d12d      	bne.n	80012ca <UART5_IRQHandler+0x72>
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 800126e:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001272:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001276:	f240 7127 	movw	r1, #1831	; 0x727
 800127a:	f002 f9b9 	bl	80035f0 <USART_GetITStatus>
 800127e:	2800      	cmp	r0, #0
 8001280:	d022      	beq.n	80012c8 <UART5_IRQHandler+0x70>
		if (txring[UART5Serial].count == 0) {
 8001282:	4817      	ldr	r0, [pc, #92]	; (80012e0 <UART5_IRQHandler+0x88>)
 8001284:	f8b0 251c 	ldrh.w	r2, [r0, #1308]	; 0x51c
 8001288:	b162      	cbz	r2, 80012a4 <UART5_IRQHandler+0x4c>
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
 800128a:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 800128e:	f7ff fc21 	bl	8000ad4 <buffer_deque>
 8001292:	4601      	mov	r1, r0
 8001294:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8001298:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 800129c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
 80012a0:	f002 b8da 	b.w	8003458 <USART_SendData>
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
 80012a4:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 80012a8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80012ac:	f240 7127 	movw	r1, #1831	; 0x727
 80012b0:	f002 f978 	bl	80035a4 <USART_ITConfig>
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
 80012b4:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 80012b8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80012bc:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
		}
	}
}
 80012c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
 80012c4:	f002 b9b8 	b.w	8003638 <USART_ClearITPendingBit>
 80012c8:	bd08      	pop	{r3, pc}
	}
}

void UART5_IRQHandler(void) {
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
 80012ca:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 80012ce:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80012d2:	f002 f8c5 	bl	8003460 <USART_ReceiveData>
 80012d6:	4601      	mov	r1, r0
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <UART5_IRQHandler+0x8c>)
 80012da:	f7ff fbd7 	bl	8000a8c <buffer_enque>
 80012de:	e7c6      	b.n	800126e <UART5_IRQHandler+0x16>
 80012e0:	200009b4 	.word	0x200009b4
 80012e4:	200013f0 	.word	0x200013f0

080012e8 <USART6_IRQHandler>:
		}
	}
}

void USART6_IRQHandler(void) {
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
 80012e8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
		}
	}
}

void USART6_IRQHandler(void) {
 80012ec:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
 80012ee:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80012f2:	f240 5125 	movw	r1, #1317	; 0x525
 80012f6:	f002 f97b 	bl	80035f0 <USART_GetITStatus>
 80012fa:	2800      	cmp	r0, #0
 80012fc:	d12d      	bne.n	800135a <USART6_IRQHandler+0x72>
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
 80012fe:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001302:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001306:	f240 7127 	movw	r1, #1831	; 0x727
 800130a:	f002 f971 	bl	80035f0 <USART_GetITStatus>
 800130e:	2800      	cmp	r0, #0
 8001310:	d022      	beq.n	8001358 <USART6_IRQHandler+0x70>
		if (txring[USART6Serial].count == 0) {
 8001312:	4817      	ldr	r0, [pc, #92]	; (8001370 <USART6_IRQHandler+0x88>)
 8001314:	f8b0 2622 	ldrh.w	r2, [r0, #1570]	; 0x622
 8001318:	b162      	cbz	r2, 8001334 <USART6_IRQHandler+0x4c>
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
 800131a:	f200 501e 	addw	r0, r0, #1310	; 0x51e
 800131e:	f7ff fbd9 	bl	8000ad4 <buffer_deque>
 8001322:	4601      	mov	r1, r0
 8001324:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001328:	f2c4 0001 	movt	r0, #16385	; 0x4001
		}
	}
}
 800132c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
 8001330:	f002 b892 	b.w	8003458 <USART_SendData>
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
 8001334:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001338:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800133c:	f240 7127 	movw	r1, #1831	; 0x727
 8001340:	f002 f930 	bl	80035a4 <USART_ITConfig>
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
 8001344:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001348:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800134c:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
		}
	}
}
 8001350:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
 8001354:	f002 b970 	b.w	8003638 <USART_ClearITPendingBit>
 8001358:	bd08      	pop	{r3, pc}
	}
}

void USART6_IRQHandler(void) {
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
 800135a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800135e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001362:	f002 f87d 	bl	8003460 <USART_ReceiveData>
 8001366:	4601      	mov	r1, r0
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <USART6_IRQHandler+0x8c>)
 800136a:	f7ff fb8f 	bl	8000a8c <buffer_enque>
 800136e:	e7c6      	b.n	80012fe <USART6_IRQHandler+0x16>
 8001370:	200009b4 	.word	0x200009b4
 8001374:	200014f6 	.word	0x200014f6

08001378 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001378:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800137c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001380:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001384:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8001388:	60d8      	str	r0, [r3, #12]
}
 800138a:	4770      	bx	lr

0800138c <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800138c:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800138e:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001390:	b97b      	cbnz	r3, 80013b2 <NVIC_Init+0x26>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001392:	7802      	ldrb	r2, [r0, #0]
 8001394:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001398:	0951      	lsrs	r1, r2, #5
 800139a:	f2ce 0300 	movt	r3, #57344	; 0xe000
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800139e:	f002 021f 	and.w	r2, r2, #31
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013a2:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80013a4:	2001      	movs	r0, #1
 80013a6:	fa10 f202 	lsls.w	r2, r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013aa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80013ae:	bc30      	pop	{r4, r5}
 80013b0:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80013b2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80013b6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80013ba:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80013bc:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80013be:	7884      	ldrb	r4, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80013c0:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80013c2:	43d2      	mvns	r2, r2
 80013c4:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 80013c8:	f1c2 0104 	rsb	r1, r2, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80013cc:	b2c9      	uxtb	r1, r1
 80013ce:	fa15 f101 	lsls.w	r1, r5, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80013d2:	250f      	movs	r5, #15
 80013d4:	fa55 f202 	asrs.w	r2, r5, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80013d8:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80013da:	4022      	ands	r2, r4
 80013dc:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80013de:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80013e2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80013ea:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013ee:	7802      	ldrb	r2, [r0, #0]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80013f0:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013f4:	0951      	lsrs	r1, r2, #5
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80013f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80013fa:	f002 021f 	and.w	r2, r2, #31
 80013fe:	2001      	movs	r0, #1
 8001400:	fa10 f202 	lsls.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001404:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001408:	e7d1      	b.n	80013ae <NVIC_Init+0x22>
 800140a:	bf00      	nop

0800140c <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800140c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8001410:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001414:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8001418:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800141c:	4301      	orrs	r1, r0
 800141e:	6099      	str	r1, [r3, #8]
}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop

08001424 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8001424:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001428:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800142c:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800142e:	b919      	cbnz	r1, 8001438 <NVIC_SystemLPConfig+0x14>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8001430:	ea22 0000 	bic.w	r0, r2, r0
 8001434:	6118      	str	r0, [r3, #16]
 8001436:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8001438:	4310      	orrs	r0, r2
 800143a:	6118      	str	r0, [r3, #16]
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop

08001440 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001440:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001444:	f2ce 0300 	movt	r3, #57344	; 0xe000
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8001448:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	bf0c      	ite	eq
 800144e:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8001452:	f022 0204 	bicne.w	r2, r2, #4
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop

0800145c <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800145c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800145e:	2300      	movs	r3, #0
 8001460:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001464:	4298      	cmp	r0, r3
 8001466:	d03c      	beq.n	80014e2 <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8001468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800146c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001470:	4298      	cmp	r0, r3
 8001472:	d040      	beq.n	80014f6 <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8001474:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001478:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800147c:	4298      	cmp	r0, r3
 800147e:	d044      	beq.n	800150a <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8001480:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001484:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001488:	4298      	cmp	r0, r3
 800148a:	d048      	beq.n	800151e <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 800148c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001490:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001494:	4298      	cmp	r0, r3
 8001496:	d04c      	beq.n	8001532 <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8001498:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800149c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014a0:	4298      	cmp	r0, r3
 80014a2:	d050      	beq.n	8001546 <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 80014a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014ac:	4298      	cmp	r0, r3
 80014ae:	d054      	beq.n	800155a <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 80014b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014b8:	4298      	cmp	r0, r3
 80014ba:	d058      	beq.n	800156e <GPIO_DeInit+0x112>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOI)
 80014bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014c4:	4298      	cmp	r0, r3
 80014c6:	d000      	beq.n	80014ca <GPIO_DeInit+0x6e>
 80014c8:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80014ca:	2101      	movs	r1, #1
 80014cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014d0:	f000 fcda 	bl	8001e88 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80014d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014d8:	2100      	movs	r1, #0
    }
  }
}
 80014da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80014de:	f000 bcd3 	b.w	8001e88 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80014e2:	2001      	movs	r0, #1
 80014e4:	4601      	mov	r1, r0
 80014e6:	f000 fccf 	bl	8001e88 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80014ea:	2001      	movs	r0, #1
 80014ec:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80014ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80014f2:	f000 bcc9 	b.w	8001e88 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80014f6:	2002      	movs	r0, #2
 80014f8:	2101      	movs	r1, #1
 80014fa:	f000 fcc5 	bl	8001e88 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80014fe:	2002      	movs	r0, #2
 8001500:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001502:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8001506:	f000 bcbf 	b.w	8001e88 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800150a:	2004      	movs	r0, #4
 800150c:	2101      	movs	r1, #1
 800150e:	f000 fcbb 	bl	8001e88 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8001512:	2004      	movs	r0, #4
 8001514:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800151a:	f000 bcb5 	b.w	8001e88 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800151e:	2008      	movs	r0, #8
 8001520:	2101      	movs	r1, #1
 8001522:	f000 fcb1 	bl	8001e88 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8001526:	2008      	movs	r0, #8
 8001528:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800152a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800152e:	f000 bcab 	b.w	8001e88 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001532:	2010      	movs	r0, #16
 8001534:	2101      	movs	r1, #1
 8001536:	f000 fca7 	bl	8001e88 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800153a:	2010      	movs	r0, #16
 800153c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800153e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8001542:	f000 bca1 	b.w	8001e88 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8001546:	2020      	movs	r0, #32
 8001548:	2101      	movs	r1, #1
 800154a:	f000 fc9d 	bl	8001e88 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800154e:	2020      	movs	r0, #32
 8001550:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001552:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8001556:	f000 bc97 	b.w	8001e88 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800155a:	2040      	movs	r0, #64	; 0x40
 800155c:	2101      	movs	r1, #1
 800155e:	f000 fc93 	bl	8001e88 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8001562:	2040      	movs	r0, #64	; 0x40
 8001564:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800156a:	f000 bc8d 	b.w	8001e88 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800156e:	2080      	movs	r0, #128	; 0x80
 8001570:	2101      	movs	r1, #1
 8001572:	f000 fc89 	bl	8001e88 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8001576:	2080      	movs	r0, #128	; 0x80
 8001578:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800157a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800157e:	f000 bc83 	b.w	8001e88 <RCC_AHB1PeriphResetCmd>
 8001582:	bf00      	nop

08001584 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001584:	2300      	movs	r3, #0
 8001586:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800158a:	680a      	ldr	r2, [r1, #0]
 800158c:	461c      	mov	r4, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 800158e:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001590:	f04f 0803 	mov.w	r8, #3
 8001594:	e003      	b.n	800159e <GPIO_Init+0x1a>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001596:	3401      	adds	r4, #1
 8001598:	3302      	adds	r3, #2
 800159a:	2c10      	cmp	r4, #16
 800159c:	d02b      	beq.n	80015f6 <GPIO_Init+0x72>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800159e:	fa17 f504 	lsls.w	r5, r7, r4
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80015a2:	ea05 0602 	and.w	r6, r5, r2

    if (currentpin == pos)
 80015a6:	42ae      	cmp	r6, r5
 80015a8:	d1f5      	bne.n	8001596 <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80015aa:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80015ae:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80015b2:	fa08 f503 	lsl.w	r5, r8, r3
 80015b6:	43ed      	mvns	r5, r5
 80015b8:	ea05 0909 	and.w	r9, r5, r9
 80015bc:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80015c0:	f8d0 9000 	ldr.w	r9, [r0]
 80015c4:	fa0c fa03 	lsl.w	sl, ip, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80015c8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80015cc:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80015d0:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80015d4:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80015d8:	d910      	bls.n	80015fc <GPIO_Init+0x78>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80015da:	68c6      	ldr	r6, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80015dc:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80015e0:	4035      	ands	r5, r6
 80015e2:	60c5      	str	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80015e4:	68c6      	ldr	r6, [r0, #12]
 80015e6:	fa0c f503 	lsl.w	r5, ip, r3
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80015ea:	3401      	adds	r4, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80015ec:	4335      	orrs	r5, r6
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80015ee:	3302      	adds	r3, #2
 80015f0:	2c10      	cmp	r4, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80015f2:	60c5      	str	r5, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80015f4:	d1d3      	bne.n	800159e <GPIO_Init+0x1a>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80015f6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80015fa:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80015fc:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001600:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001604:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001608:	ea05 0a0a 	and.w	sl, r5, sl
 800160c:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001610:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8001614:	fa09 f903 	lsl.w	r9, r9, r3
 8001618:	ea49 090a 	orr.w	r9, r9, sl
 800161c:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001620:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8001624:	ea29 0606 	bic.w	r6, r9, r6
 8001628:	6046      	str	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800162a:	6846      	ldr	r6, [r0, #4]
 800162c:	fa0c fc04 	lsl.w	ip, ip, r4
 8001630:	fa1f fc8c 	uxth.w	ip, ip
 8001634:	ea4c 0606 	orr.w	r6, ip, r6
 8001638:	6046      	str	r6, [r0, #4]
 800163a:	e7ce      	b.n	80015da <GPIO_Init+0x56>

0800163c <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800163c:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800163e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001642:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001644:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001646:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001648:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800164a:	71c3      	strb	r3, [r0, #7]
}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop

08001650 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001650:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8001652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001656:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8001658:	9b01      	ldr	r3, [sp, #4]
 800165a:	430b      	orrs	r3, r1
 800165c:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800165e:	9b01      	ldr	r3, [sp, #4]
 8001660:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001662:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001664:	9b01      	ldr	r3, [sp, #4]
 8001666:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001668:	69c3      	ldr	r3, [r0, #28]
 800166a:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800166c:	69c3      	ldr	r3, [r0, #28]
 800166e:	9301      	str	r3, [sp, #4]
}
 8001670:	b002      	add	sp, #8
 8001672:	4770      	bx	lr

08001674 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001674:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 8001676:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001678:	bf0c      	ite	eq
 800167a:	2000      	moveq	r0, #0
 800167c:	2001      	movne	r0, #1
 800167e:	4770      	bx	lr

08001680 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8001680:	6900      	ldr	r0, [r0, #16]
}
 8001682:	b280      	uxth	r0, r0
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop

08001688 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001688:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 800168a:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800168c:	bf0c      	ite	eq
 800168e:	2000      	moveq	r0, #0
 8001690:	2001      	movne	r0, #1
 8001692:	4770      	bx	lr

08001694 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8001694:	6940      	ldr	r0, [r0, #20]
}
 8001696:	b280      	uxth	r0, r0
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop

0800169c <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800169c:	8301      	strh	r1, [r0, #24]
}
 800169e:	4770      	bx	lr

080016a0 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80016a0:	8341      	strh	r1, [r0, #26]
}
 80016a2:	4770      	bx	lr

080016a4 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80016a4:	b90a      	cbnz	r2, 80016aa <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80016a6:	8341      	strh	r1, [r0, #26]
 80016a8:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 80016aa:	8301      	strh	r1, [r0, #24]
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop

080016b0 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80016b0:	6141      	str	r1, [r0, #20]
}
 80016b2:	4770      	bx	lr

080016b4 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80016b4:	6943      	ldr	r3, [r0, #20]
 80016b6:	404b      	eors	r3, r1
 80016b8:	6143      	str	r3, [r0, #20]
}
 80016ba:	4770      	bx	lr

080016bc <GPIO_PinAFConfig>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80016bc:	08cb      	lsrs	r3, r1, #3
 80016be:	3308      	adds	r3, #8
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80016c0:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80016c4:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80016c6:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80016c8:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 80016cc:	240f      	movs	r4, #15
 80016ce:	408c      	lsls	r4, r1
 80016d0:	ea25 0404 	bic.w	r4, r5, r4
 80016d4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80016d8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80016dc:	fa12 f101 	lsls.w	r1, r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80016e0:	430c      	orrs	r4, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80016e2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
 80016e6:	bc30      	pop	{r4, r5}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop

080016ec <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80016ec:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80016ee:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80016f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80016f6:	4298      	cmp	r0, r3
 80016f8:	d018      	beq.n	800172c <I2C_DeInit+0x40>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 80016fa:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80016fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001702:	4298      	cmp	r0, r3
 8001704:	d01e      	beq.n	8001744 <I2C_DeInit+0x58>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 8001706:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800170a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800170e:	4298      	cmp	r0, r3
 8001710:	d000      	beq.n	8001714 <I2C_DeInit+0x28>
 8001712:	bd08      	pop	{r3, pc}
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8001714:	2101      	movs	r1, #1
 8001716:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800171a:	f000 fbdf 	bl	8001edc <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800171e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001722:	2100      	movs	r1, #0
    }
  }
}
 8001724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8001728:	f000 bbd8 	b.w	8001edc <RCC_APB1PeriphResetCmd>
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800172c:	2101      	movs	r1, #1
 800172e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001732:	f000 fbd3 	bl	8001edc <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8001736:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800173a:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 800173c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8001740:	f000 bbcc 	b.w	8001edc <RCC_APB1PeriphResetCmd>
  }
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001744:	2101      	movs	r1, #1
 8001746:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800174a:	f000 fbc7 	bl	8001edc <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800174e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001752:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8001754:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8001758:	f000 bbc0 	b.w	8001edc <RCC_APB1PeriphResetCmd>

0800175c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800175c:	b570      	push	{r4, r5, r6, lr}
 800175e:	4604      	mov	r4, r0
 8001760:	b084      	sub	sp, #16
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001762:	4668      	mov	r0, sp
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001764:	88a6      	ldrh	r6, [r4, #4]
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001766:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001768:	f000 fac4 	bl	8001cf4 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800176c:	9802      	ldr	r0, [sp, #8]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800176e:	682a      	ldr	r2, [r5, #0]
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001770:	f64d 6183 	movw	r1, #56963	; 0xde83

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001774:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001778:	f2c4 311b 	movt	r1, #17179	; 0x431b

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800177c:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800177e:	fba1 3100 	umull	r3, r1, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001782:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001784:	0c89      	lsrs	r1, r1, #18
  tmpreg |= freqrange;
 8001786:	430e      	orrs	r6, r1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001788:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800178a:	8823      	ldrh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800178c:	f248 66a0 	movw	r6, #34464	; 0x86a0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	041b      	lsls	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001796:	f2c0 0601 	movt	r6, #1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800179a:	0c1b      	lsrs	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800179c:	42b2      	cmp	r2, r6
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800179e:	8023      	strh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80017a0:	d822      	bhi.n	80017e8 <I2C_Init+0x8c>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80017a2:	0052      	lsls	r2, r2, #1
 80017a4:	fbb0 f0f2 	udiv	r0, r0, r2
 80017a8:	b280      	uxth	r0, r0
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80017aa:	3101      	adds	r1, #1
 80017ac:	8421      	strh	r1, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80017ae:	2803      	cmp	r0, #3
 80017b0:	bf98      	it	ls
 80017b2:	2004      	movls	r0, #4
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80017b4:	83a0      	strh	r0, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80017b6:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80017b8:	896e      	ldrh	r6, [r5, #10]
 80017ba:	88a8      	ldrh	r0, [r5, #4]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80017bc:	8929      	ldrh	r1, [r5, #8]
 80017be:	89aa      	ldrh	r2, [r5, #12]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80017c8:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80017ca:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80017ce:	f023 0302 	bic.w	r3, r3, #2
 80017d2:	041b      	lsls	r3, r3, #16
 80017d4:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80017d6:	4330      	orrs	r0, r6
 80017d8:	4303      	orrs	r3, r0
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80017da:	430a      	orrs	r2, r1
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80017dc:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80017de:	b292      	uxth	r2, r2
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80017e0:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80017e2:	8122      	strh	r2, [r4, #8]
}
 80017e4:	b004      	add	sp, #16
 80017e6:	bd70      	pop	{r4, r5, r6, pc}
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80017e8:	88ee      	ldrh	r6, [r5, #6]
 80017ea:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80017ee:	429e      	cmp	r6, r3
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80017f0:	bf1d      	ittte	ne
 80017f2:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 80017f6:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 80017fa:	fbb0 f0f2 	udivne	r0, r0, r2
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80017fe:	eb02 0242 	addeq.w	r2, r2, r2, lsl #1
 8001802:	bf0b      	itete	eq
 8001804:	fbb0 f0f2 	udiveq	r0, r0, r2
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001808:	b280      	uxthne	r0, r0
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800180a:	b280      	uxtheq	r0, r0
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800180c:	f440 4080 	orrne.w	r0, r0, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001810:	0503      	lsls	r3, r0, #20
 8001812:	0d1b      	lsrs	r3, r3, #20
 8001814:	b90b      	cbnz	r3, 800181a <I2C_Init+0xbe>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8001816:	f040 0001 	orr.w	r0, r0, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800181a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800181e:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8001822:	fb02 f101 	mul.w	r1, r2, r1
 8001826:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800182a:	fb83 2301 	smull	r2, r3, r3, r1
 800182e:	099b      	lsrs	r3, r3, #6
 8001830:	3301      	adds	r3, #1
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8001832:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001836:	8423      	strh	r3, [r4, #32]
 8001838:	e7bc      	b.n	80017b4 <I2C_Init+0x58>
 800183a:	bf00      	nop

0800183c <I2C_StructInit>:
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 800183c:	2300      	movs	r3, #0
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	6002      	str	r2, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8001844:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8001846:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800184a:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800184c:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800184e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8001852:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001854:	8183      	strh	r3, [r0, #12]
}
 8001856:	4770      	bx	lr

08001858 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001858:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800185a:	b929      	cbnz	r1, 8001868 <I2C_Cmd+0x10>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	041b      	lsls	r3, r3, #16
 8001862:	0c1b      	lsrs	r3, r3, #16
 8001864:	8003      	strh	r3, [r0, #0]
 8001866:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001868:	b29b      	uxth	r3, r3
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	8003      	strh	r3, [r0, #0]
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop

08001874 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001874:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001876:	b929      	cbnz	r1, 8001884 <I2C_GenerateSTART+0x10>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800187c:	041b      	lsls	r3, r3, #16
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	8003      	strh	r3, [r0, #0]
 8001882:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001884:	b29b      	uxth	r3, r3
 8001886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188a:	8003      	strh	r3, [r0, #0]
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop

08001890 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001890:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001892:	b929      	cbnz	r1, 80018a0 <I2C_GenerateSTOP+0x10>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	0c1b      	lsrs	r3, r3, #16
 800189c:	8003      	strh	r3, [r0, #0]
 800189e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a6:	8003      	strh	r3, [r0, #0]
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop

080018ac <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80018ac:	b91a      	cbnz	r2, 80018b6 <I2C_Send7bitAddress+0xa>
    Address |= I2C_OAR1_ADD0;
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 80018ae:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 80018b2:	8201      	strh	r1, [r0, #16]
}
 80018b4:	4770      	bx	lr
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 80018b6:	f041 0101 	orr.w	r1, r1, #1
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
  }
  /* Send the address */
  I2Cx->DR = Address;
 80018ba:	8201      	strh	r1, [r0, #16]
}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop

080018c0 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80018c0:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018c2:	b929      	cbnz	r1, 80018d0 <I2C_AcknowledgeConfig+0x10>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80018c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	8003      	strh	r3, [r0, #0]
 80018ce:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d6:	8003      	strh	r3, [r0, #0]
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop

080018dc <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 80018dc:	8983      	ldrh	r3, [r0, #12]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 80018de:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80018e2:	041b      	lsls	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80018e4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 80018e8:	0c1b      	lsrs	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80018ea:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 80018ec:	8183      	strh	r3, [r0, #12]
}
 80018ee:	4770      	bx	lr

080018f0 <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80018f0:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018f2:	b929      	cbnz	r1, 8001900 <I2C_DualAddressCmd+0x10>
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	041b      	lsls	r3, r3, #16
 80018fa:	0c1b      	lsrs	r3, r3, #16
 80018fc:	8183      	strh	r3, [r0, #12]
 80018fe:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8001900:	b29b      	uxth	r3, r3
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	8183      	strh	r3, [r0, #12]
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop

0800190c <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800190c:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800190e:	b929      	cbnz	r1, 800191c <I2C_GeneralCallCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENGC;
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8001910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001914:	041b      	lsls	r3, r3, #16
 8001916:	0c1b      	lsrs	r3, r3, #16
 8001918:	8003      	strh	r3, [r0, #0]
 800191a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800191c:	b29b      	uxth	r3, r3
 800191e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001922:	8003      	strh	r3, [r0, #0]
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop

08001928 <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8001928:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800192a:	b919      	cbnz	r1, 8001934 <I2C_SoftwareResetCmd+0xc>
    I2Cx->CR1 |= I2C_CR1_SWRST;
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 800192c:	045b      	lsls	r3, r3, #17
 800192e:	0c5b      	lsrs	r3, r3, #17
 8001930:	8003      	strh	r3, [r0, #0]
 8001932:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8001934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800193c:	b29b      	uxth	r3, r3
 800193e:	8003      	strh	r3, [r0, #0]
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop

08001944 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8001944:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8001946:	b129      	cbz	r1, 8001954 <I2C_StretchClockCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8001948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800194c:	041b      	lsls	r3, r3, #16
 800194e:	0c1b      	lsrs	r3, r3, #16
 8001950:	8003      	strh	r3, [r0, #0]
 8001952:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8001954:	b29b      	uxth	r3, r3
 8001956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800195a:	8003      	strh	r3, [r0, #0]
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop

08001960 <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8001960:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8001964:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8001966:	d005      	beq.n	8001974 <I2C_FastModeDutyCycleConfig+0x14>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8001968:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800196c:	041b      	lsls	r3, r3, #16
 800196e:	0c1b      	lsrs	r3, r3, #16
 8001970:	8383      	strh	r3, [r0, #28]
 8001972:	4770      	bx	lr
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8001974:	b29b      	uxth	r3, r3
 8001976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197a:	8383      	strh	r3, [r0, #28]
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop

08001980 <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8001980:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8001984:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8001986:	d005      	beq.n	8001994 <I2C_NACKPositionConfig+0x14>
    I2Cx->CR1 |= I2C_NACKPosition_Next;
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8001988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	0c1b      	lsrs	r3, r3, #16
 8001990:	8003      	strh	r3, [r0, #0]
 8001992:	4770      	bx	lr
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8001994:	b29b      	uxth	r3, r3
 8001996:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800199a:	8003      	strh	r3, [r0, #0]
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop

080019a0 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80019a0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80019a4:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80019a6:	d005      	beq.n	80019b4 <I2C_SMBusAlertConfig+0x14>
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 80019a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019ac:	041b      	lsls	r3, r3, #16
 80019ae:	0c1b      	lsrs	r3, r3, #16
 80019b0:	8003      	strh	r3, [r0, #0]
 80019b2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019ba:	8003      	strh	r3, [r0, #0]
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 80019c0:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019c2:	b929      	cbnz	r1, 80019d0 <I2C_ARPCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENARP;
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 80019c4:	f023 0310 	bic.w	r3, r3, #16
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	0c1b      	lsrs	r3, r3, #16
 80019cc:	8003      	strh	r3, [r0, #0]
 80019ce:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	f043 0310 	orr.w	r3, r3, #16
 80019d6:	8003      	strh	r3, [r0, #0]
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop

080019dc <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80019dc:	8201      	strh	r1, [r0, #16]
}
 80019de:	4770      	bx	lr

080019e0 <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80019e0:	8a00      	ldrh	r0, [r0, #16]
}
 80019e2:	b2c0      	uxtb	r0, r0
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop

080019e8 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80019e8:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019ea:	b929      	cbnz	r1, 80019f8 <I2C_TransmitPEC+0x10>
    I2Cx->CR1 |= I2C_CR1_PEC;
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 80019ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019f0:	041b      	lsls	r3, r3, #16
 80019f2:	0c1b      	lsrs	r3, r3, #16
 80019f4:	8003      	strh	r3, [r0, #0]
 80019f6:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019fe:	8003      	strh	r3, [r0, #0]
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop

08001a04 <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8001a04:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001a08:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8001a0a:	d005      	beq.n	8001a18 <I2C_PECPositionConfig+0x14>
    I2Cx->CR1 |= I2C_PECPosition_Next;
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8001a0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a10:	041b      	lsls	r3, r3, #16
 8001a12:	0c1b      	lsrs	r3, r3, #16
 8001a14:	8003      	strh	r3, [r0, #0]
 8001a16:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a1e:	8003      	strh	r3, [r0, #0]
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop

08001a24 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001a24:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a26:	b929      	cbnz	r1, 8001a34 <I2C_CalculatePEC+0x10>
    I2Cx->CR1 |= I2C_CR1_ENPEC;
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8001a28:	f023 0320 	bic.w	r3, r3, #32
 8001a2c:	041b      	lsls	r3, r3, #16
 8001a2e:	0c1b      	lsrs	r3, r3, #16
 8001a30:	8003      	strh	r3, [r0, #0]
 8001a32:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	f043 0320 	orr.w	r3, r3, #32
 8001a3a:	8003      	strh	r3, [r0, #0]
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop

08001a40 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8001a40:	8b00      	ldrh	r0, [r0, #24]
}
 8001a42:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001a46:	4770      	bx	lr

08001a48 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001a48:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a4a:	b929      	cbnz	r1, 8001a58 <I2C_DMACmd+0x10>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8001a4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	0c1b      	lsrs	r3, r3, #16
 8001a54:	8083      	strh	r3, [r0, #4]
 8001a56:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a5e:	8083      	strh	r3, [r0, #4]
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop

08001a64 <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8001a64:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a66:	b929      	cbnz	r1, 8001a74 <I2C_DMALastTransferCmd+0x10>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8001a68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a6c:	041b      	lsls	r3, r3, #16
 8001a6e:	0c1b      	lsrs	r3, r3, #16
 8001a70:	8083      	strh	r3, [r0, #4]
 8001a72:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a7a:	8083      	strh	r3, [r0, #4]
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop

08001a80 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8001a80:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8001a86:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 8001a88:	9b01      	ldr	r3, [sp, #4]
 8001a8a:	18cb      	adds	r3, r1, r3
 8001a8c:	9301      	str	r3, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 8001a8e:	9b01      	ldr	r3, [sp, #4]
 8001a90:	8818      	ldrh	r0, [r3, #0]
}
 8001a92:	b280      	uxth	r0, r0
 8001a94:	b002      	add	sp, #8
 8001a96:	4770      	bx	lr

08001a98 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8001a98:	8883      	ldrh	r3, [r0, #4]
 8001a9a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8001a9c:	b91a      	cbnz	r2, 8001aa6 <I2C_ITConfig+0xe>
    I2Cx->CR2 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8001a9e:	ea23 0101 	bic.w	r1, r3, r1
 8001aa2:	8081      	strh	r1, [r0, #4]
 8001aa4:	4770      	bx	lr
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8001aa6:	4319      	orrs	r1, r3
 8001aa8:	8081      	strh	r1, [r0, #4]
 8001aaa:	4770      	bx	lr

08001aac <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001aac:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 8001aae:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001ab0:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001ab2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001ab6:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001ab8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 8001abc:	1a0b      	subs	r3, r1, r0
 8001abe:	4258      	negs	r0, r3
 8001ac0:	eb40 0003 	adc.w	r0, r0, r3
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop

08001ac8 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001ac8:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 8001aca:	8b03      	ldrh	r3, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001acc:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001ace:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

  /* Return status */
  return lastevent;
}
 8001ad2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001ad6:	4770      	bx	lr

08001ad8 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001ad8:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001ada:	2300      	movs	r3, #0

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001adc:	0f0a      	lsrs	r2, r1, #28
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001ae2:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001ae4:	9200      	str	r2, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 8001ae6:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001ae8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 8001aec:	b153      	cbz	r3, 8001b04 <I2C_GetFlagStatus+0x2c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001aee:	9b01      	ldr	r3, [sp, #4]
 8001af0:	3314      	adds	r3, #20
 8001af2:	9301      	str	r3, [sp, #4]
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001af4:	9b01      	ldr	r3, [sp, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001af8:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8001afa:	bf0c      	ite	eq
 8001afc:	2000      	moveq	r0, #0
 8001afe:	2001      	movne	r0, #1
 8001b00:	b002      	add	sp, #8
 8001b02:	4770      	bx	lr
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001b04:	9b01      	ldr	r3, [sp, #4]
 8001b06:	3318      	adds	r3, #24
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001b08:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	e7f2      	b.n	8001af4 <I2C_GetFlagStatus+0x1c>
 8001b0e:	bf00      	nop

08001b10 <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001b10:	43c9      	mvns	r1, r1
 8001b12:	b289      	uxth	r1, r1
 8001b14:	8281      	strh	r1, [r0, #20]
}
 8001b16:	4770      	bx	lr

08001b18 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001b18:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001b1a:	8a80      	ldrh	r0, [r0, #20]
 8001b1c:	b280      	uxth	r0, r0
 8001b1e:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001b20:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001b22:	d006      	beq.n	8001b32 <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001b24:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 8001b28:	ea13 4111 	ands.w	r1, r3, r1, lsr #16

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8001b2c:	bf0c      	ite	eq
 8001b2e:	2000      	moveq	r0, #0
 8001b30:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 8001b32:	4770      	bx	lr

08001b34 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001b34:	43c9      	mvns	r1, r1
 8001b36:	b289      	uxth	r1, r1
 8001b38:	8281      	strh	r1, [r0, #20]
}
 8001b3a:	4770      	bx	lr

08001b3c <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b3c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b40:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b44:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b46:	6819      	ldr	r1, [r3, #0]
 8001b48:	f041 0101 	orr.w	r1, r1, #1
 8001b4c:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b4e:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b50:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b52:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b56:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b5a:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b5e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8001b62:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b64:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b66:	6819      	ldr	r1, [r3, #0]
 8001b68:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001b6c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b6e:	60da      	str	r2, [r3, #12]
}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop

08001b74 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8001b74:	f643 0302 	movw	r3, #14338	; 0x3802
 8001b78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8001b80:	7018      	strb	r0, [r3, #0]
}
 8001b82:	4770      	bx	lr

08001b84 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001b84:	b082      	sub	sp, #8

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001b86:	f44f 5160 	mov.w	r1, #14336	; 0x3800
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001b8e:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001b92:	680a      	ldr	r2, [r1, #0]
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8001b94:	9b01      	ldr	r3, [sp, #4]
 8001b96:	3301      	adds	r3, #1
 8001b98:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8001b9a:	9b01      	ldr	r3, [sp, #4]
 8001b9c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001ba0:	d001      	beq.n	8001ba6 <RCC_WaitForHSEStartUp+0x22>
 8001ba2:	0393      	lsls	r3, r2, #14
 8001ba4:	d5f5      	bpl.n	8001b92 <RCC_WaitForHSEStartUp+0xe>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001ba6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001baa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bae:	6818      	ldr	r0, [r3, #0]
  else
  {
    status = ERROR;
  }
  return (status);
}
 8001bb0:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8001bb4:	b002      	add	sp, #8
 8001bb6:	4770      	bx	lr

08001bb8 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8001bb8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001bbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bc0:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8001bc2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8001bc6:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8001bca:	601a      	str	r2, [r3, #0]
}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop

08001bd0 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001bd6:	6018      	str	r0, [r3, #0]
}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop

08001bdc <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001bdc:	f643 0370 	movw	r3, #14448	; 0x3870
 8001be0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001be4:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001be6:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001be8:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001bea:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001bec:	d004      	beq.n	8001bf8 <RCC_LSEConfig+0x1c>
 8001bee:	2804      	cmp	r0, #4
 8001bf0:	d101      	bne.n	8001bf6 <RCC_LSEConfig+0x1a>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001bf2:	2205      	movs	r2, #5
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8001bf8:	7018      	strb	r0, [r3, #0]
      break;
 8001bfa:	4770      	bx	lr

08001bfc <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8001bfc:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8001c00:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001c04:	6018      	str	r0, [r3, #0]
}
 8001c06:	4770      	bx	lr

08001c08 <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001c08:	4301      	orrs	r1, r0
 8001c0a:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8001c0e:	9900      	ldr	r1, [sp, #0]
 8001c10:	085b      	lsrs	r3, r3, #1
 8001c12:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8001c16:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001c20:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8001c24:	6042      	str	r2, [r0, #4]
                 (PLLQ << 24);
}
 8001c26:	4770      	bx	lr

08001c28 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001c28:	2360      	movs	r3, #96	; 0x60
 8001c2a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001c2e:	6018      	str	r0, [r3, #0]
}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop

08001c34 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8001c34:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c38:	0180      	lsls	r0, r0, #6
 8001c3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c3e:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 8001c42:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 8001c46:	4770      	bx	lr

08001c48 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8001c48:	2368      	movs	r3, #104	; 0x68
 8001c4a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001c4e:	6018      	str	r0, [r3, #0]
}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop

08001c54 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001c54:	234c      	movs	r3, #76	; 0x4c
 8001c56:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001c5a:	6018      	str	r0, [r3, #0]
}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop

08001c60 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8001c60:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c68:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8001c6a:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8001c6e:	4302      	orrs	r2, r0
 8001c70:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001c72:	609a      	str	r2, [r3, #8]
}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop

08001c78 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8001c78:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c80:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8001c82:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8001c86:	4302      	orrs	r2, r0
 8001c88:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001c8a:	609a      	str	r2, [r3, #8]
}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop

08001c90 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8001c90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c98:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8001c9a:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001c9e:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001ca0:	609a      	str	r2, [r3, #8]
}
 8001ca2:	4770      	bx	lr

08001ca4 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8001ca4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ca8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cac:	6898      	ldr	r0, [r3, #8]
}
 8001cae:	f000 000c 	and.w	r0, r0, #12
 8001cb2:	4770      	bx	lr

08001cb4 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8001cb4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cbc:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8001cbe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001cc2:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001cc4:	609a      	str	r2, [r3, #8]
}
 8001cc6:	4770      	bx	lr

08001cc8 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001cc8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ccc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cd0:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8001cd2:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001cd6:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001cd8:	609a      	str	r2, [r3, #8]
}
 8001cda:	4770      	bx	lr

08001cdc <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001cdc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ce0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ce4:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8001ce6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001cea:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001cee:	609a      	str	r2, [r3, #8]
}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop

08001cf4 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001cf4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cf8:	f2c4 0302 	movt	r3, #16386	; 0x4002
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001cfc:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8001d04:	2a04      	cmp	r2, #4
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001d06:	bf02      	ittt	eq
 8001d08:	f44f 5290 	moveq.w	r2, #4608	; 0x1200
 8001d0c:	f2c0 027a 	movteq	r2, #122	; 0x7a
 8001d10:	6002      	streq	r2, [r0, #0]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8001d12:	d006      	beq.n	8001d22 <RCC_GetClocksFreq+0x2e>
 8001d14:	2a08      	cmp	r2, #8
 8001d16:	d01e      	beq.n	8001d56 <RCC_GetClocksFreq+0x62>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001d18:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8001d1c:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8001d20:	6002      	str	r2, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001d22:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d26:	f2c4 0302 	movt	r3, #16386	; 0x4002
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8001d2a:	491c      	ldr	r1, [pc, #112]	; (8001d9c <RCC_GetClocksFreq+0xa8>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001d2c:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 4;
 8001d2e:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8001d32:	5d0c      	ldrb	r4, [r1, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001d34:	40e2      	lsrs	r2, r4
 8001d36:	6042      	str	r2, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001d38:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 10;
 8001d3a:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8001d3e:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001d40:	fa32 f404 	lsrs.w	r4, r2, r4
 8001d44:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001d46:	689b      	ldr	r3, [r3, #8]
  tmp = tmp >> 13;
 8001d48:	f3c3 3342 	ubfx	r3, r3, #13, #3
  presc = APBAHBPrescTable[tmp];
 8001d4c:	5ccb      	ldrb	r3, [r1, r3]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001d4e:	40da      	lsrs	r2, r3
 8001d50:	60c2      	str	r2, [r0, #12]
}
 8001d52:	bc10      	pop	{r4}
 8001d54:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001d56:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d58:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
 8001d5a:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001d5e:	685c      	ldr	r4, [r3, #4]
 8001d60:	bf15      	itete	ne
 8001d62:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001d66:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001d6a:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001d6e:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d72:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001d76:	fbb3 f2f1 	udiv	r2, r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001d7a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001d82:	f3c4 1488 	ubfx	r4, r4, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001d8c:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001d8e:	fb02 f204 	mul.w	r2, r2, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001d92:	005b      	lsls	r3, r3, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d98:	6002      	str	r2, [r0, #0]
      break;
 8001d9a:	e7c2      	b.n	8001d22 <RCC_GetClocksFreq+0x2e>
 8001d9c:	20000074 	.word	0x20000074

08001da0 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8001da0:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8001da4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001da8:	d10c      	bne.n	8001dc4 <RCC_RTCCLKConfig+0x24>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001daa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001dae:	f2c4 0302 	movt	r3, #16386	; 0x4002

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001db2:	f020 4170 	bic.w	r1, r0, #4026531840	; 0xf0000000
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001db6:	689a      	ldr	r2, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001db8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8001dbc:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001dc0:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8001dc2:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8001dc4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001dc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dcc:	0500      	lsls	r0, r0, #20
 8001dce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dd0:	0d00      	lsrs	r0, r0, #20
 8001dd2:	4310      	orrs	r0, r2
 8001dd4:	6718      	str	r0, [r3, #112]	; 0x70
}
 8001dd6:	4770      	bx	lr

08001dd8 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001dd8:	f640 633c 	movw	r3, #3644	; 0xe3c
 8001ddc:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001de0:	6018      	str	r0, [r3, #0]
}
 8001de2:	4770      	bx	lr

08001de4 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8001de4:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8001de8:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001dec:	6018      	str	r0, [r3, #0]
}
 8001dee:	4770      	bx	lr

08001df0 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8001df0:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8001df4:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001df8:	6018      	str	r0, [r3, #0]
}
 8001dfa:	4770      	bx	lr

08001dfc <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001dfc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e06:	b919      	cbnz	r1, 8001e10 <RCC_AHB1PeriphClockCmd+0x14>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001e08:	ea22 0000 	bic.w	r0, r2, r0
 8001e0c:	6318      	str	r0, [r3, #48]	; 0x30
 8001e0e:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001e10:	4310      	orrs	r0, r2
 8001e12:	6318      	str	r0, [r3, #48]	; 0x30
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop

08001e18 <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001e18:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e22:	b919      	cbnz	r1, 8001e2c <RCC_AHB2PeriphClockCmd+0x14>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8001e24:	ea22 0000 	bic.w	r0, r2, r0
 8001e28:	6358      	str	r0, [r3, #52]	; 0x34
 8001e2a:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001e2c:	4310      	orrs	r0, r2
 8001e2e:	6358      	str	r0, [r3, #52]	; 0x34
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop

08001e34 <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001e34:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e3e:	b919      	cbnz	r1, 8001e48 <RCC_AHB3PeriphClockCmd+0x14>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8001e40:	ea22 0000 	bic.w	r0, r2, r0
 8001e44:	6398      	str	r0, [r3, #56]	; 0x38
 8001e46:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001e48:	4310      	orrs	r0, r2
 8001e4a:	6398      	str	r0, [r3, #56]	; 0x38
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop

08001e50 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001e50:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e5a:	b919      	cbnz	r1, 8001e64 <RCC_APB1PeriphClockCmd+0x14>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001e5c:	ea22 0000 	bic.w	r0, r2, r0
 8001e60:	6418      	str	r0, [r3, #64]	; 0x40
 8001e62:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001e64:	4310      	orrs	r0, r2
 8001e66:	6418      	str	r0, [r3, #64]	; 0x40
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop

08001e6c <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001e6c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e76:	b919      	cbnz	r1, 8001e80 <RCC_APB2PeriphClockCmd+0x14>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001e78:	ea22 0000 	bic.w	r0, r2, r0
 8001e7c:	6458      	str	r0, [r3, #68]	; 0x44
 8001e7e:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001e80:	4310      	orrs	r0, r2
 8001e82:	6458      	str	r0, [r3, #68]	; 0x44
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop

08001e88 <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001e88:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e90:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e92:	b919      	cbnz	r1, 8001e9c <RCC_AHB1PeriphResetCmd+0x14>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8001e94:	ea22 0000 	bic.w	r0, r2, r0
 8001e98:	6118      	str	r0, [r3, #16]
 8001e9a:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001e9c:	4310      	orrs	r0, r2
 8001e9e:	6118      	str	r0, [r3, #16]
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop

08001ea4 <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001ea4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ea8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001eac:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001eae:	b919      	cbnz	r1, 8001eb8 <RCC_AHB2PeriphResetCmd+0x14>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8001eb0:	ea22 0000 	bic.w	r0, r2, r0
 8001eb4:	6158      	str	r0, [r3, #20]
 8001eb6:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001eb8:	4310      	orrs	r0, r2
 8001eba:	6158      	str	r0, [r3, #20]
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop

08001ec0 <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001ec0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ec4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ec8:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001eca:	b919      	cbnz	r1, 8001ed4 <RCC_AHB3PeriphResetCmd+0x14>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8001ecc:	ea22 0000 	bic.w	r0, r2, r0
 8001ed0:	6198      	str	r0, [r3, #24]
 8001ed2:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001ed4:	4310      	orrs	r0, r2
 8001ed6:	6198      	str	r0, [r3, #24]
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop

08001edc <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001edc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ee4:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ee6:	b919      	cbnz	r1, 8001ef0 <RCC_APB1PeriphResetCmd+0x14>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001ee8:	ea22 0000 	bic.w	r0, r2, r0
 8001eec:	6218      	str	r0, [r3, #32]
 8001eee:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001ef0:	4310      	orrs	r0, r2
 8001ef2:	6218      	str	r0, [r3, #32]
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop

08001ef8 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001ef8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001efc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f02:	b919      	cbnz	r1, 8001f0c <RCC_APB2PeriphResetCmd+0x14>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001f04:	ea22 0000 	bic.w	r0, r2, r0
 8001f08:	6258      	str	r0, [r3, #36]	; 0x24
 8001f0a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001f0c:	4310      	orrs	r0, r2
 8001f0e:	6258      	str	r0, [r3, #36]	; 0x24
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop

08001f14 <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001f14:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f1e:	b919      	cbnz	r1, 8001f28 <RCC_AHB1PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8001f20:	ea22 0000 	bic.w	r0, r2, r0
 8001f24:	6518      	str	r0, [r3, #80]	; 0x50
 8001f26:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001f28:	4310      	orrs	r0, r2
 8001f2a:	6518      	str	r0, [r3, #80]	; 0x50
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop

08001f30 <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001f30:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f3a:	b919      	cbnz	r1, 8001f44 <RCC_AHB2PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8001f3c:	ea22 0000 	bic.w	r0, r2, r0
 8001f40:	6558      	str	r0, [r3, #84]	; 0x54
 8001f42:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001f44:	4310      	orrs	r0, r2
 8001f46:	6558      	str	r0, [r3, #84]	; 0x54
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop

08001f4c <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001f4c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f56:	b919      	cbnz	r1, 8001f60 <RCC_AHB3PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8001f58:	ea22 0000 	bic.w	r0, r2, r0
 8001f5c:	6598      	str	r0, [r3, #88]	; 0x58
 8001f5e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001f60:	4310      	orrs	r0, r2
 8001f62:	6598      	str	r0, [r3, #88]	; 0x58
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop

08001f68 <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001f68:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f72:	b919      	cbnz	r1, 8001f7c <RCC_APB1PeriphClockLPModeCmd+0x14>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8001f74:	ea22 0000 	bic.w	r0, r2, r0
 8001f78:	6618      	str	r0, [r3, #96]	; 0x60
 8001f7a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001f7c:	4310      	orrs	r0, r2
 8001f7e:	6618      	str	r0, [r3, #96]	; 0x60
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop

08001f84 <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001f84:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f8e:	b919      	cbnz	r1, 8001f98 <RCC_APB2PeriphClockLPModeCmd+0x14>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8001f90:	ea22 0000 	bic.w	r0, r2, r0
 8001f94:	6658      	str	r0, [r3, #100]	; 0x64
 8001f96:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001f98:	4310      	orrs	r0, r2
 8001f9a:	6658      	str	r0, [r3, #100]	; 0x64
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop

08001fa0 <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001fa0:	f643 030d 	movw	r3, #14349	; 0x380d
 8001fa4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fa8:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001faa:	b919      	cbnz	r1, 8001fb4 <RCC_ITConfig+0x14>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001fac:	ea22 0000 	bic.w	r0, r2, r0
 8001fb0:	7018      	strb	r0, [r3, #0]
 8001fb2:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001fb4:	4310      	orrs	r0, r2
 8001fb6:	7018      	strb	r0, [r3, #0]
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop

08001fbc <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001fbc:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d00e      	beq.n	8001fe0 <RCC_GetFlagStatus+0x24>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001fc2:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8001fc4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001fc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fcc:	bf0c      	ite	eq
 8001fce:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001fd0:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001fd2:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001fd6:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8001fda:	f000 0001 	and.w	r0, r0, #1
 8001fde:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001fe0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001fe4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	e7f2      	b.n	8001fd2 <RCC_GetFlagStatus+0x16>

08001fec <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001fec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ff0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ff4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001ff6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001ffa:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop

08002000 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8002000:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002004:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002008:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 800200a:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 800200c:	bf0c      	ite	eq
 800200e:	2000      	moveq	r0, #0
 8002010:	2001      	movne	r0, #1
 8002012:	4770      	bx	lr

08002014 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8002014:	f643 030e 	movw	r3, #14350	; 0x380e
 8002018:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800201c:	7018      	strb	r0, [r3, #0]
}
 800201e:	4770      	bx	lr

08002020 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8002020:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8002022:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002026:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800202a:	4298      	cmp	r0, r3
 800202c:	d018      	beq.n	8002060 <SPI_I2S_DeInit+0x40>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 800202e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002032:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002036:	4298      	cmp	r0, r3
 8002038:	d01e      	beq.n	8002078 <SPI_I2S_DeInit+0x58>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
    }
  else
  {
    if (SPIx == SPI3)
 800203a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800203e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002042:	4298      	cmp	r0, r3
 8002044:	d000      	beq.n	8002048 <SPI_I2S_DeInit+0x28>
 8002046:	bd08      	pop	{r3, pc}
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8002048:	2101      	movs	r1, #1
 800204a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800204e:	f7ff ff45 	bl	8001edc <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8002052:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002056:	2100      	movs	r1, #0
    }
  }
}
 8002058:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800205c:	f7ff bf3e 	b.w	8001edc <RCC_APB1PeriphResetCmd>
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8002060:	2101      	movs	r1, #1
 8002062:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002066:	f7ff ff47 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800206a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800206e:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8002070:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8002074:	f7ff bf40 	b.w	8001ef8 <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8002078:	2101      	movs	r1, #1
 800207a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800207e:	f7ff ff2d 	bl	8001edc <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8002082:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002086:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8002088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800208c:	f7ff bf26 	b.w	8001edc <RCC_APB1PeriphResetCmd>

08002090 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8002090:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002094:	880b      	ldrh	r3, [r1, #0]
 8002096:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 800209a:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 800209e:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80020a2:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80020a6:	894f      	ldrh	r7, [r1, #10]
 80020a8:	898e      	ldrh	r6, [r1, #12]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80020aa:	8805      	ldrh	r5, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80020ac:	89cc      	ldrh	r4, [r1, #14]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80020ae:	8a0a      	ldrh	r2, [r1, #16]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80020b0:	ea4a 0303 	orr.w	r3, sl, r3
 80020b4:	ea43 0309 	orr.w	r3, r3, r9
 80020b8:	ea43 0308 	orr.w	r3, r3, r8
 80020bc:	ea43 030c 	orr.w	r3, r3, ip
 80020c0:	433b      	orrs	r3, r7
 80020c2:	4333      	orrs	r3, r6

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80020c4:	f405 5141 	and.w	r1, r5, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80020c8:	4323      	orrs	r3, r4
 80020ca:	430b      	orrs	r3, r1
 80020cc:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80020ce:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80020d0:	8b83      	ldrh	r3, [r0, #28]
 80020d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020d6:	041b      	lsls	r3, r3, #16
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80020dc:	8202      	strh	r2, [r0, #16]
}
 80020de:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80020e2:	4770      	bx	lr

080020e4 <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80020e4:	8b83      	ldrh	r3, [r0, #28]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80020e6:	688a      	ldr	r2, [r1, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80020e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80020ec:	f023 030f 	bic.w	r3, r3, #15
 80020f0:	041b      	lsls	r3, r3, #16
 80020f2:	0c1b      	lsrs	r3, r3, #16
 80020f4:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 80020f6:	2302      	movs	r3, #2
 80020f8:	8403      	strh	r3, [r0, #32]
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 80020fa:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80020fe:	8b86      	ldrh	r6, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8002100:	429a      	cmp	r2, r3
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8002102:	b2b6      	uxth	r6, r6
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8002104:	d05d      	beq.n	80021c2 <I2S_Init+0xde>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8002106:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800210a:	f2c4 0302 	movt	r3, #16386	; 0x4002
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 800210e:	888c      	ldrh	r4, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8002110:	689d      	ldr	r5, [r3, #8]
      packetlength = 1;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8002112:	2c00      	cmp	r4, #0
 8002114:	bf0c      	ite	eq
 8002116:	f04f 0c01 	moveq.w	ip, #1
 800211a:	f04f 0c02 	movne.w	ip, #2
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 800211e:	022d      	lsls	r5, r5, #8
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8002120:	bf42      	ittt	mi
 8002122:	689d      	ldrmi	r5, [r3, #8]
 8002124:	f425 0500 	bicmi.w	r5, r5, #8388608	; 0x800000
 8002128:	609d      	strmi	r5, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800212a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800212e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8002132:	f44f 5590 	mov.w	r5, #4608	; 0x1200
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8002136:	f8d3 8084 	ldr.w	r8, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800213a:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 800213e:	f8d3 9004 	ldr.w	r9, [r3, #4]
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8002142:	88cb      	ldrh	r3, [r1, #6]
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8002144:	f009 093f 	and.w	r9, r9, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8002148:	f2c0 057a 	movt	r5, #122	; 0x7a
 800214c:	fbb5 f5f9 	udiv	r5, r5, r9
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8002150:	f3c8 1888 	ubfx	r8, r8, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8002154:	fb08 f505 	mul.w	r5, r8, r5
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8002158:	f3c7 7702 	ubfx	r7, r7, #28, #3
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800215c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8002160:	fbb5 f5f7 	udiv	r5, r5, r7
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8002164:	d030      	beq.n	80021c8 <I2S_Init+0xe4>
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8002166:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 800216a:	fbb5 f5fc 	udiv	r5, r5, ip
 800216e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002172:	006d      	lsls	r5, r5, #1
 8002174:	fbb5 f2f2 	udiv	r2, r5, r2
 8002178:	3205      	adds	r2, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800217a:	f64c 45cd 	movw	r5, #52429	; 0xcccd
 800217e:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8002182:	b292      	uxth	r2, r2
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8002184:	fba5 7202 	umull	r7, r2, r5, r2
 8002188:	08d2      	lsrs	r2, r2, #3
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800218a:	0855      	lsrs	r5, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800218c:	1eaf      	subs	r7, r5, #2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800218e:	f002 0201 	and.w	r2, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8002192:	2ffd      	cmp	r7, #253	; 0xfd
 8002194:	bf94      	ite	ls
 8002196:	ea45 2202 	orrls.w	r2, r5, r2, lsl #8
 800219a:	2202      	movhi	r2, #2
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800219c:	f8b1 c000 	ldrh.w	ip, [r1]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80021a0:	884f      	ldrh	r7, [r1, #2]
 80021a2:	898d      	ldrh	r5, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80021a4:	ea46 010c 	orr.w	r1, r6, ip
 80021a8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80021ac:	4339      	orrs	r1, r7
 80021ae:	4329      	orrs	r1, r5
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80021b0:	4313      	orrs	r3, r2
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80021b2:	b289      	uxth	r1, r1
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80021b4:	b29b      	uxth	r3, r3
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80021b6:	430c      	orrs	r4, r1
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80021b8:	8403      	strh	r3, [r0, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 80021ba:	8384      	strh	r4, [r0, #28]
}
 80021bc:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80021c0:	4770      	bx	lr
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80021c2:	888c      	ldrh	r4, [r1, #4]
 80021c4:	88cb      	ldrh	r3, [r1, #6]
 80021c6:	e7e9      	b.n	800219c <I2S_Init+0xb8>
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80021c8:	0a2d      	lsrs	r5, r5, #8
 80021ca:	e7d0      	b.n	800216e <I2S_Init+0x8a>

080021cc <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80021cc:	2300      	movs	r3, #0
 80021ce:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 80021d0:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80021d2:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80021d4:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80021d6:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80021d8:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80021da:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80021dc:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80021de:	2307      	movs	r3, #7
 80021e0:	8203      	strh	r3, [r0, #16]
}
 80021e2:	4770      	bx	lr

080021e4 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 80021e4:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 80021e6:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 80021e8:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 80021ea:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 80021ec:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 80021ee:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 80021f0:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 80021f2:	8183      	strh	r3, [r0, #12]
}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop

080021f8 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80021f8:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80021fa:	b929      	cbnz	r1, 8002208 <SPI_Cmd+0x10>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80021fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002200:	041b      	lsls	r3, r3, #16
 8002202:	0c1b      	lsrs	r3, r3, #16
 8002204:	8003      	strh	r3, [r0, #0]
 8002206:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8002208:	b29b      	uxth	r3, r3
 800220a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800220e:	8003      	strh	r3, [r0, #0]
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop

08002214 <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8002214:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002216:	b929      	cbnz	r1, 8002224 <I2S_Cmd+0x10>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8002218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800221c:	041b      	lsls	r3, r3, #16
 800221e:	0c1b      	lsrs	r3, r3, #16
 8002220:	8383      	strh	r3, [r0, #28]
 8002222:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8002224:	b29b      	uxth	r3, r3
 8002226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800222a:	8383      	strh	r3, [r0, #28]
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop

08002230 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8002230:	8803      	ldrh	r3, [r0, #0]
 8002232:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002236:	041b      	lsls	r3, r3, #16
 8002238:	0c1b      	lsrs	r3, r3, #16
 800223a:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 800223c:	8803      	ldrh	r3, [r0, #0]
 800223e:	b29b      	uxth	r3, r3
 8002240:	430b      	orrs	r3, r1
 8002242:	8003      	strh	r3, [r0, #0]
}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop

08002248 <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8002248:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 800224c:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800224e:	d005      	beq.n	800225c <SPI_BiDirectionalLineConfig+0x14>
    SPIx->CR1 |= SPI_Direction_Tx;
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8002250:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002254:	041b      	lsls	r3, r3, #16
 8002256:	0c1b      	lsrs	r3, r3, #16
 8002258:	8003      	strh	r3, [r0, #0]
 800225a:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 800225c:	b29b      	uxth	r3, r3
 800225e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002262:	8003      	strh	r3, [r0, #0]
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop

08002268 <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8002268:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800226c:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 800226e:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8002270:	d004      	beq.n	800227c <SPI_NSSInternalSoftwareConfig+0x14>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8002272:	b29b      	uxth	r3, r3
 8002274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002278:	8003      	strh	r3, [r0, #0]
 800227a:	4770      	bx	lr
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 800227c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	0c1b      	lsrs	r3, r3, #16
 8002284:	8003      	strh	r3, [r0, #0]
 8002286:	4770      	bx	lr

08002288 <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8002288:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800228a:	b929      	cbnz	r1, 8002298 <SPI_SSOutputCmd+0x10>
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 800228c:	f023 0304 	bic.w	r3, r3, #4
 8002290:	041b      	lsls	r3, r3, #16
 8002292:	0c1b      	lsrs	r3, r3, #16
 8002294:	8083      	strh	r3, [r0, #4]
 8002296:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8002298:	b29b      	uxth	r3, r3
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	8083      	strh	r3, [r0, #4]
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop

080022a4 <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 80022a4:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80022a6:	b929      	cbnz	r1, 80022b4 <SPI_TIModeCmd+0x10>
    SPIx->CR2 |= SPI_CR2_FRF;
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 80022a8:	f023 0310 	bic.w	r3, r3, #16
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	0c1b      	lsrs	r3, r3, #16
 80022b0:	8083      	strh	r3, [r0, #4]
 80022b2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	f043 0310 	orr.w	r3, r3, #16
 80022ba:	8083      	strh	r3, [r0, #4]
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop

080022c0 <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80022c0:	8b83      	ldrh	r3, [r0, #28]
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80022c2:	898a      	ldrh	r2, [r1, #12]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80022c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80022c8:	f023 030f 	bic.w	r3, r3, #15
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	0c1b      	lsrs	r3, r3, #16
 80022d0:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 80022d2:	2302      	movs	r3, #2
 80022d4:	8403      	strh	r3, [r0, #32]
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 80022d6:	b470      	push	{r4, r5, r6}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 80022d8:	8b86      	ldrh	r6, [r0, #28]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80022da:	884d      	ldrh	r5, [r1, #2]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80022dc:	880b      	ldrh	r3, [r1, #0]
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80022de:	888c      	ldrh	r4, [r1, #4]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 80022e0:	b2b1      	uxth	r1, r6
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80022e2:	4329      	orrs	r1, r5
 80022e4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80022e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ec:	bf18      	it	ne
 80022ee:	2b00      	cmpne	r3, #0
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80022f0:	ea41 0104 	orr.w	r1, r1, r4
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80022f4:	bf14      	ite	ne
 80022f6:	2300      	movne	r3, #0
 80022f8:	2301      	moveq	r3, #1
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80022fa:	ea41 0102 	orr.w	r1, r1, r2
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
  {
    tmp = I2S_Mode_SlaveRx;
 80022fe:	bf14      	ite	ne
 8002300:	461a      	movne	r2, r3
 8002302:	f44f 7280 	moveq.w	r2, #256	; 0x100
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002306:	b28b      	uxth	r3, r1
 8002308:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 800230a:	8383      	strh	r3, [r0, #28]
}
 800230c:	bc70      	pop	{r4, r5, r6}
 800230e:	4770      	bx	lr

08002310 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8002310:	8980      	ldrh	r0, [r0, #12]
}
 8002312:	b280      	uxth	r0, r0
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop

08002318 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002318:	8181      	strh	r1, [r0, #12]
}
 800231a:	4770      	bx	lr

0800231c <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 800231c:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800231e:	b929      	cbnz	r1, 800232c <SPI_CalculateCRC+0x10>
    SPIx->CR1 |= SPI_CR1_CRCEN;
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8002320:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002324:	041b      	lsls	r3, r3, #16
 8002326:	0c1b      	lsrs	r3, r3, #16
 8002328:	8003      	strh	r3, [r0, #0]
 800232a:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 800232c:	b29b      	uxth	r3, r3
 800232e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002332:	8003      	strh	r3, [r0, #0]
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop

08002338 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8002338:	8803      	ldrh	r3, [r0, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002340:	8003      	strh	r3, [r0, #0]
}
 8002342:	4770      	bx	lr

08002344 <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8002344:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8002346:	bf15      	itete	ne
 8002348:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800234a:	8a80      	ldrheq	r0, [r0, #20]
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800234c:	b280      	uxthne	r0, r0
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800234e:	b280      	uxtheq	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop

08002354 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8002354:	8a00      	ldrh	r0, [r0, #16]
}
 8002356:	b280      	uxth	r0, r0
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop

0800235c <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800235c:	8883      	ldrh	r3, [r0, #4]
 800235e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8002360:	b91a      	cbnz	r2, 800236a <SPI_I2S_DMACmd+0xe>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8002362:	ea23 0101 	bic.w	r1, r3, r1
 8002366:	8081      	strh	r1, [r0, #4]
 8002368:	4770      	bx	lr
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800236a:	4319      	orrs	r1, r3
 800236c:	8081      	strh	r1, [r0, #4]
 800236e:	4770      	bx	lr

08002370 <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8002370:	2301      	movs	r3, #1
 8002372:	0909      	lsrs	r1, r1, #4
 8002374:	fa13 f101 	lsls.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8002378:	8883      	ldrh	r3, [r0, #4]

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800237a:	b289      	uxth	r1, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800237c:	b29b      	uxth	r3, r3
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 800237e:	b91a      	cbnz	r2, 8002388 <SPI_I2S_ITConfig+0x18>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8002380:	ea23 0101 	bic.w	r1, r3, r1
 8002384:	8081      	strh	r1, [r0, #4]
 8002386:	4770      	bx	lr
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8002388:	4319      	orrs	r1, r3
 800238a:	8081      	strh	r1, [r0, #4]
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop

08002390 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002390:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002392:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 8002394:	bf0c      	ite	eq
 8002396:	2000      	moveq	r0, #0
 8002398:	2001      	movne	r0, #1
 800239a:	4770      	bx	lr

0800239c <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800239c:	43c9      	mvns	r1, r1
 800239e:	b289      	uxth	r1, r1
 80023a0:	8101      	strh	r1, [r0, #8]
}
 80023a2:	4770      	bx	lr

080023a4 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 80023a4:	b410      	push	{r4}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80023a6:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80023a8:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80023aa:	2201      	movs	r2, #1
 80023ac:	f001 030f 	and.w	r3, r1, #15

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80023b0:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80023b2:	fa12 f303 	lsls.w	r3, r2, r3

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80023b6:	4018      	ands	r0, r3

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80023b8:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80023ba:	d005      	beq.n	80023c8 <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 80023bc:	0909      	lsrs	r1, r1, #4
 80023be:	408a      	lsls	r2, r1
  *            @arg SPI_IT_CRCERR: CRC Error interrupt.
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 80023c0:	4214      	tst	r4, r2

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 80023c2:	bf0c      	ite	eq
 80023c4:	2000      	moveq	r0, #0
 80023c6:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 80023c8:	bc10      	pop	{r4}
 80023ca:	4770      	bx	lr

080023cc <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80023cc:	f001 010f 	and.w	r1, r1, #15
 80023d0:	2301      	movs	r3, #1
 80023d2:	fa13 f101 	lsls.w	r1, r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 80023d6:	43c9      	mvns	r1, r1
 80023d8:	b289      	uxth	r1, r1
 80023da:	8101      	strh	r1, [r0, #8]
}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop

080023e0 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 80023e0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 80023e2:	2300      	movs	r3, #0
 80023e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80023e8:	4298      	cmp	r0, r3
 80023ea:	d05b      	beq.n	80024a4 <TIM_DeInit+0xc4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 80023ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023f0:	d062      	beq.n	80024b8 <TIM_DeInit+0xd8>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 80023f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80023fa:	4298      	cmp	r0, r3
 80023fc:	d066      	beq.n	80024cc <TIM_DeInit+0xec>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 80023fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002402:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002406:	4298      	cmp	r0, r3
 8002408:	d06a      	beq.n	80024e0 <TIM_DeInit+0x100>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 800240a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800240e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002412:	4298      	cmp	r0, r3
 8002414:	d06e      	beq.n	80024f4 <TIM_DeInit+0x114>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 8002416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800241a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800241e:	4298      	cmp	r0, r3
 8002420:	d072      	beq.n	8002508 <TIM_DeInit+0x128>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 8002422:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002426:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800242a:	4298      	cmp	r0, r3
 800242c:	d076      	beq.n	800251c <TIM_DeInit+0x13c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 800242e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002432:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002436:	4298      	cmp	r0, r3
 8002438:	d07a      	beq.n	8002530 <TIM_DeInit+0x150>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 800243a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800243e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002442:	4298      	cmp	r0, r3
 8002444:	d07e      	beq.n	8002544 <TIM_DeInit+0x164>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 8002446:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800244a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800244e:	4298      	cmp	r0, r3
 8002450:	f000 8084 	beq.w	800255c <TIM_DeInit+0x17c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 8002454:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002458:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800245c:	4298      	cmp	r0, r3
 800245e:	f000 8089 	beq.w	8002574 <TIM_DeInit+0x194>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 8002462:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002466:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800246a:	4298      	cmp	r0, r3
 800246c:	f000 808e 	beq.w	800258c <TIM_DeInit+0x1ac>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 8002470:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002474:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002478:	4298      	cmp	r0, r3
 800247a:	f000 8091 	beq.w	80025a0 <TIM_DeInit+0x1c0>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 800247e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002482:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002486:	4298      	cmp	r0, r3
 8002488:	d000      	beq.n	800248c <TIM_DeInit+0xac>
 800248a:	bd08      	pop	{r3, pc}
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800248c:	2101      	movs	r1, #1
 800248e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002492:	f7ff fd23 	bl	8001edc <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8002496:	f44f 7080 	mov.w	r0, #256	; 0x100
 800249a:	2100      	movs	r1, #0
    }   
  }
}
 800249c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 80024a0:	f7ff bd1c 	b.w	8001edc <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80024a4:	2001      	movs	r0, #1
 80024a6:	4601      	mov	r1, r0
 80024a8:	f7ff fd26 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80024ac:	2001      	movs	r0, #1
 80024ae:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80024b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80024b4:	f7ff bd20 	b.w	8001ef8 <RCC_APB2PeriphResetCmd>
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 80024b8:	2001      	movs	r0, #1
 80024ba:	4601      	mov	r1, r0
 80024bc:	f7ff fd0e 	bl	8001edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80024c0:	2001      	movs	r0, #1
 80024c2:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80024c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80024c8:	f7ff bd08 	b.w	8001edc <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80024cc:	2002      	movs	r0, #2
 80024ce:	2101      	movs	r1, #1
 80024d0:	f7ff fd04 	bl	8001edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80024d4:	2002      	movs	r0, #2
 80024d6:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80024d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80024dc:	f7ff bcfe 	b.w	8001edc <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80024e0:	2004      	movs	r0, #4
 80024e2:	2101      	movs	r1, #1
 80024e4:	f7ff fcfa 	bl	8001edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80024e8:	2004      	movs	r0, #4
 80024ea:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80024ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80024f0:	f7ff bcf4 	b.w	8001edc <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80024f4:	2008      	movs	r0, #8
 80024f6:	2101      	movs	r1, #1
 80024f8:	f7ff fcf0 	bl	8001edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80024fc:	2008      	movs	r0, #8
 80024fe:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002500:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8002504:	f7ff bcea 	b.w	8001edc <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8002508:	2010      	movs	r0, #16
 800250a:	2101      	movs	r1, #1
 800250c:	f7ff fce6 	bl	8001edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8002510:	2010      	movs	r0, #16
 8002512:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8002518:	f7ff bce0 	b.w	8001edc <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800251c:	2020      	movs	r0, #32
 800251e:	2101      	movs	r1, #1
 8002520:	f7ff fcdc 	bl	8001edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8002524:	2020      	movs	r0, #32
 8002526:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800252c:	f7ff bcd6 	b.w	8001edc <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8002530:	2002      	movs	r0, #2
 8002532:	2101      	movs	r1, #1
 8002534:	f7ff fce0 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8002538:	2002      	movs	r0, #2
 800253a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800253c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8002540:	f7ff bcda 	b.w	8001ef8 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8002544:	2101      	movs	r1, #1
 8002546:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800254a:	f7ff fcd5 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800254e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002552:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8002558:	f7ff bcce 	b.w	8001ef8 <RCC_APB2PeriphResetCmd>
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800255c:	2101      	movs	r1, #1
 800255e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002562:	f7ff fcc9 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8002566:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800256a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800256c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8002570:	f7ff bcc2 	b.w	8001ef8 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8002574:	2101      	movs	r1, #1
 8002576:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800257a:	f7ff fcbd 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800257e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002582:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002584:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8002588:	f7ff bcb6 	b.w	8001ef8 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800258c:	2040      	movs	r0, #64	; 0x40
 800258e:	2101      	movs	r1, #1
 8002590:	f7ff fca4 	bl	8001edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8002594:	2040      	movs	r0, #64	; 0x40
 8002596:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800259c:	f7ff bc9e 	b.w	8001edc <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 80025a0:	2080      	movs	r0, #128	; 0x80
 80025a2:	2101      	movs	r1, #1
 80025a4:	f7ff fc9a 	bl	8001edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80025a8:	2080      	movs	r0, #128	; 0x80
 80025aa:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80025ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80025b0:	f7ff bc94 	b.w	8001edc <RCC_APB1PeriphResetCmd>

080025b4 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80025b4:	2300      	movs	r3, #0
 80025b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80025be:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80025c0:	f2c4 0201 	movt	r2, #16385	; 0x4001
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80025c4:	8804      	ldrh	r4, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80025c6:	4298      	cmp	r0, r3
 80025c8:	bf18      	it	ne
 80025ca:	4290      	cmpne	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80025cc:	b2a4      	uxth	r4, r4

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80025ce:	bf14      	ite	ne
 80025d0:	2300      	movne	r3, #0
 80025d2:	2301      	moveq	r3, #1
 80025d4:	d008      	beq.n	80025e8 <TIM_TimeBaseInit+0x34>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80025d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025da:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80025de:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025e2:	bf18      	it	ne
 80025e4:	4290      	cmpne	r0, r2
 80025e6:	d123      	bne.n	8002630 <TIM_TimeBaseInit+0x7c>
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80025e8:	f64f 758f 	movw	r5, #65423	; 0xff8f
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80025ec:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80025ee:	4025      	ands	r5, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80025f0:	ea45 0402 	orr.w	r4, r5, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80025f4:	f44f 56a0 	mov.w	r6, #5120	; 0x1400
 80025f8:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80025fc:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8002600:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8002604:	42b0      	cmp	r0, r6
 8002606:	bf18      	it	ne
 8002608:	42a8      	cmpne	r0, r5
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800260a:	bf1f      	itttt	ne
 800260c:	890d      	ldrhne	r5, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800260e:	f64f 42ff 	movwne	r2, #64767	; 0xfcff
 8002612:	4022      	andne	r2, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002614:	ea42 0405 	orrne.w	r4, r2, r5
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8002618:	684d      	ldr	r5, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800261a:	880a      	ldrh	r2, [r1, #0]
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 800261c:	8004      	strh	r4, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800261e:	62c5      	str	r5, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002620:	8502      	strh	r2, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8002622:	b10b      	cbz	r3, 8002628 <TIM_TimeBaseInit+0x74>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002624:	7a8b      	ldrb	r3, [r1, #10]
 8002626:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002628:	2301      	movs	r3, #1
 800262a:	8283      	strh	r3, [r0, #20]
}
 800262c:	bc70      	pop	{r4, r5, r6}
 800262e:	4770      	bx	lr

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002630:	f44f 6540 	mov.w	r5, #3072	; 0xc00
 8002634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002638:	f2c4 0500 	movt	r5, #16384	; 0x4000
 800263c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002640:	4290      	cmp	r0, r2
 8002642:	bf18      	it	ne
 8002644:	42a8      	cmpne	r0, r5
 8002646:	d1d5      	bne.n	80025f4 <TIM_TimeBaseInit+0x40>
 8002648:	e7ce      	b.n	80025e8 <TIM_TimeBaseInit+0x34>
 800264a:	bf00      	nop

0800264c <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800264c:	2300      	movs	r3, #0
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800264e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002652:	6041      	str	r1, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002654:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8002656:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002658:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800265a:	7283      	strb	r3, [r0, #10]
}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop

08002660 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8002660:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8002662:	8282      	strh	r2, [r0, #20]
}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop

08002668 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8002668:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 800266a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266e:	041b      	lsls	r3, r3, #16
 8002670:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8002672:	430b      	orrs	r3, r1

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8002674:	8003      	strh	r3, [r0, #0]
}
 8002676:	4770      	bx	lr

08002678 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8002678:	6241      	str	r1, [r0, #36]	; 0x24
}
 800267a:	4770      	bx	lr

0800267c <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800267c:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 800267e:	4770      	bx	lr

08002680 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8002680:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8002682:	4770      	bx	lr

08002684 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8002684:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8002686:	b280      	uxth	r0, r0
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop

0800268c <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800268c:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800268e:	b929      	cbnz	r1, 800269c <TIM_UpdateDisableConfig+0x10>
    TIMx->CR1 |= TIM_CR1_UDIS;
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8002690:	f023 0302 	bic.w	r3, r3, #2
 8002694:	041b      	lsls	r3, r3, #16
 8002696:	0c1b      	lsrs	r3, r3, #16
 8002698:	8003      	strh	r3, [r0, #0]
 800269a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800269c:	b29b      	uxth	r3, r3
 800269e:	f043 0302 	orr.w	r3, r3, #2
 80026a2:	8003      	strh	r3, [r0, #0]
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop

080026a8 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80026a8:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 80026aa:	b929      	cbnz	r1, 80026b8 <TIM_UpdateRequestConfig+0x10>
    TIMx->CR1 |= TIM_CR1_URS;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 80026ac:	f023 0304 	bic.w	r3, r3, #4
 80026b0:	041b      	lsls	r3, r3, #16
 80026b2:	0c1b      	lsrs	r3, r3, #16
 80026b4:	8003      	strh	r3, [r0, #0]
 80026b6:	4770      	bx	lr
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f043 0304 	orr.w	r3, r3, #4
 80026be:	8003      	strh	r3, [r0, #0]
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop

080026c4 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80026c4:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80026c6:	b929      	cbnz	r1, 80026d4 <TIM_ARRPreloadConfig+0x10>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80026c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026cc:	041b      	lsls	r3, r3, #16
 80026ce:	0c1b      	lsrs	r3, r3, #16
 80026d0:	8003      	strh	r3, [r0, #0]
 80026d2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026da:	8003      	strh	r3, [r0, #0]
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop

080026e0 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 80026e0:	8803      	ldrh	r3, [r0, #0]
 80026e2:	f023 0308 	bic.w	r3, r3, #8
 80026e6:	041b      	lsls	r3, r3, #16
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 80026ec:	8803      	ldrh	r3, [r0, #0]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	430b      	orrs	r3, r1
 80026f2:	8003      	strh	r3, [r0, #0]
}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop

080026f8 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 80026f8:	8803      	ldrh	r3, [r0, #0]
 80026fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fe:	041b      	lsls	r3, r3, #16
 8002700:	0c1b      	lsrs	r3, r3, #16
 8002702:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8002704:	8803      	ldrh	r3, [r0, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	430b      	orrs	r3, r1
 800270a:	8003      	strh	r3, [r0, #0]
}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop

08002710 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002710:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002712:	b929      	cbnz	r1, 8002720 <TIM_Cmd+0x10>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	0c1b      	lsrs	r3, r3, #16
 800271c:	8003      	strh	r3, [r0, #0]
 800271e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002720:	b29b      	uxth	r3, r3
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	8003      	strh	r3, [r0, #0]
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop

0800272c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800272c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002730:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002732:	898d      	ldrh	r5, [r1, #12]
 8002734:	884f      	ldrh	r7, [r1, #2]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002736:	f8b1 c000 	ldrh.w	ip, [r1]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800273a:	f024 0401 	bic.w	r4, r4, #1
 800273e:	0424      	lsls	r4, r4, #16
 8002740:	0c24      	lsrs	r4, r4, #16
 8002742:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002744:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002746:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002748:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800274a:	432f      	orrs	r7, r5
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800274c:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002750:	2500      	movs	r5, #0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8002752:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002756:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800275a:	0412      	lsls	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800275c:	041b      	lsls	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800275e:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8002762:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8002766:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002768:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800276a:	b2bf      	uxth	r7, r7
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800276c:	42a8      	cmp	r0, r5
 800276e:	bf18      	it	ne
 8002770:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002772:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002774:	ea42 020c 	orr.w	r2, r2, ip
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002778:	ea47 0303 	orr.w	r3, r7, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800277c:	d116      	bne.n	80027ac <TIM_OC1Init+0x80>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800277e:	f64f 75f7 	movw	r5, #65527	; 0xfff7
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002782:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002786:	f8b1 8012 	ldrh.w	r8, [r1, #18]
 800278a:	8a0f      	ldrh	r7, [r1, #16]
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800278c:	888e      	ldrh	r6, [r1, #4]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800278e:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002790:	ea45 0c0c 	orr.w	ip, r5, ip
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8002794:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8002798:	f64f 45ff 	movw	r5, #64767	; 0xfcff
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800279c:	ea48 0707 	orr.w	r7, r8, r7
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80027a0:	4025      	ands	r5, r4
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80027a2:	ea0c 0303 	and.w	r3, ip, r3
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80027a6:	b2bc      	uxth	r4, r7
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80027a8:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80027aa:	432c      	orrs	r4, r5
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80027ac:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ae:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027b0:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80027b2:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b4:	8403      	strh	r3, [r0, #32]
}
 80027b6:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80027ba:	4770      	bx	lr

080027bc <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80027bc:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80027c0:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80027c2:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80027c4:	f8b1 c000 	ldrh.w	ip, [r1]
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80027c8:	884f      	ldrh	r7, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80027ca:	f024 0410 	bic.w	r4, r4, #16
 80027ce:	0424      	lsls	r4, r4, #16
 80027d0:	0c24      	lsrs	r4, r4, #16
 80027d2:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80027d4:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027d6:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027d8:	8b03      	ldrh	r3, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80027da:	f022 0220 	bic.w	r2, r2, #32
 80027de:	0412      	lsls	r2, r2, #16
 80027e0:	0c12      	lsrs	r2, r2, #16
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80027e2:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 80027e6:	041b      	lsls	r3, r3, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80027e8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80027ec:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80027f0:	2500      	movs	r5, #0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80027f2:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80027f4:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80027f8:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80027fc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002800:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002804:	42a8      	cmp	r0, r5
 8002806:	bf18      	it	ne
 8002808:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800280a:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800280c:	b29b      	uxth	r3, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800280e:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002810:	d119      	bne.n	8002846 <TIM_OC2Init+0x8a>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002812:	f64f 767f 	movw	r6, #65407	; 0xff7f
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002816:	f8b1 900e 	ldrh.w	r9, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800281a:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800281e:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002822:	8a4f      	ldrh	r7, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002824:	4016      	ands	r6, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8002826:	f24f 35ff 	movw	r5, #62463	; 0xf3ff
 800282a:	4025      	ands	r5, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800282c:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8002830:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 8002834:	4032      	ands	r2, r6
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8002836:	ea45 0488 	orr.w	r4, r5, r8, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800283a:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800283e:	ea44 0487 	orr.w	r4, r4, r7, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002842:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002844:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002846:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002848:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800284a:	8303      	strh	r3, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800284c:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800284e:	8402      	strh	r2, [r0, #32]
}
 8002850:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop

08002858 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002858:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800285c:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800285e:	898d      	ldrh	r5, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002860:	f8b1 c002 	ldrh.w	ip, [r1, #2]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002864:	880f      	ldrh	r7, [r1, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002866:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800286a:	0424      	lsls	r4, r4, #16
 800286c:	0c24      	lsrs	r4, r4, #16
 800286e:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002870:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002872:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002874:	8b83      	ldrh	r3, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002876:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800287a:	0412      	lsls	r2, r2, #16
 800287c:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800287e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8002882:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002886:	2500      	movs	r5, #0
 8002888:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800288c:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800288e:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8002892:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8002896:	0c1b      	lsrs	r3, r3, #16
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002898:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800289c:	42a8      	cmp	r0, r5
 800289e:	bf18      	it	ne
 80028a0:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a2:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80028a4:	ea43 0307 	orr.w	r3, r3, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80028a8:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80028aa:	d119      	bne.n	80028e0 <TIM_OC3Init+0x88>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80028ac:	f24f 76ff 	movw	r6, #63487	; 0xf7ff
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80028b0:	f8b1 900e 	ldrh.w	r9, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80028b4:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80028b8:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80028bc:	8a4f      	ldrh	r7, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80028be:	4016      	ands	r6, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80028c0:	f64c 75ff 	movw	r5, #53247	; 0xcfff
 80028c4:	4025      	ands	r5, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80028c6:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80028ca:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 80028ce:	4032      	ands	r2, r6
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80028d0:	ea45 1408 	orr.w	r4, r5, r8, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80028d4:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80028d8:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80028dc:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80028de:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80028e0:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028e2:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028e4:	8383      	strh	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80028e6:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028e8:	8402      	strh	r2, [r0, #32]
}
 80028ea:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80028ee:	4770      	bx	lr

080028f0 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80028f0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80028f2:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80028f4:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80028f6:	f8b1 c000 	ldrh.w	ip, [r1]
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80028fa:	884f      	ldrh	r7, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80028fc:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002900:	0424      	lsls	r4, r4, #16
 8002902:	0c24      	lsrs	r4, r4, #16
 8002904:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002906:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002908:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800290a:	8b83      	ldrh	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800290c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002910:	0412      	lsls	r2, r2, #16
 8002912:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002914:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8002918:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800291c:	2500      	movs	r5, #0
 800291e:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8002922:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8002926:	f2c4 0601 	movt	r6, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800292a:	041b      	lsls	r3, r3, #16
 800292c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800292e:	42a8      	cmp	r0, r5
 8002930:	bf18      	it	ne
 8002932:	42b0      	cmpne	r0, r6
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002934:	bf08      	it	eq
 8002936:	8a0e      	ldrheq	r6, [r1, #16]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8002938:	6889      	ldr	r1, [r1, #8]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800293a:	b2a4      	uxth	r4, r4
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800293c:	bf02      	ittt	eq
 800293e:	f64b 75ff 	movweq	r5, #49151	; 0xbfff
 8002942:	4025      	andeq	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002944:	ea45 1486 	orreq.w	r4, r5, r6, lsl #6
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002948:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800294c:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002950:	b29b      	uxth	r3, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002952:	b292      	uxth	r2, r2
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002954:	bf08      	it	eq
 8002956:	b2a4      	uxtheq	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002958:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800295a:	8383      	strh	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800295c:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800295e:	8402      	strh	r2, [r0, #32]
}
 8002960:	bcf0      	pop	{r4, r5, r6, r7}
 8002962:	4770      	bx	lr

08002964 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8002964:	2300      	movs	r3, #0
 8002966:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8002968:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 800296a:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 800296c:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800296e:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8002970:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8002972:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8002974:	8243      	strh	r3, [r0, #18]
}
 8002976:	4770      	bx	lr

08002978 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8002978:	b410      	push	{r4}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800297a:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800297c:	2301      	movs	r3, #1
 800297e:	408b      	lsls	r3, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002980:	b2a4      	uxth	r4, r4
 8002982:	ea24 0303 	bic.w	r3, r4, r3
 8002986:	8403      	strh	r3, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8002988:	3018      	adds	r0, #24
  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800298a:	2900      	cmp	r1, #0
 800298c:	bf18      	it	ne
 800298e:	2908      	cmpne	r1, #8
 8002990:	d00e      	beq.n	80029b0 <TIM_SelectOCxM+0x38>
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8002992:	3904      	subs	r1, #4
 8002994:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8002998:	f648 73ff 	movw	r3, #36863	; 0x8fff
 800299c:	580c      	ldr	r4, [r1, r0]
 800299e:	4023      	ands	r3, r4
 80029a0:	500b      	str	r3, [r1, r0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80029a2:	0212      	lsls	r2, r2, #8
 80029a4:	580b      	ldr	r3, [r1, r0]
 80029a6:	b292      	uxth	r2, r2
 80029a8:	431a      	orrs	r2, r3
 80029aa:	500a      	str	r2, [r1, r0]
  }
}
 80029ac:	bc10      	pop	{r4}
 80029ae:	4770      	bx	lr
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);
 80029b0:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 80029b2:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80029b6:	580c      	ldr	r4, [r1, r0]
 80029b8:	4023      	ands	r3, r4
 80029ba:	500b      	str	r3, [r1, r0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 80029bc:	580b      	ldr	r3, [r1, r0]
 80029be:	431a      	orrs	r2, r3
 80029c0:	500a      	str	r2, [r1, r0]
 80029c2:	e7f3      	b.n	80029ac <TIM_SelectOCxM+0x34>

080029c4 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80029c4:	6341      	str	r1, [r0, #52]	; 0x34
}
 80029c6:	4770      	bx	lr

080029c8 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80029c8:	6381      	str	r1, [r0, #56]	; 0x38
}
 80029ca:	4770      	bx	lr

080029cc <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80029cc:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 80029ce:	4770      	bx	lr

080029d0 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 80029d0:	6401      	str	r1, [r0, #64]	; 0x40
}
 80029d2:	4770      	bx	lr

080029d4 <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80029d4:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 80029d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80029de:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80029e0:	8303      	strh	r3, [r0, #24]
}
 80029e2:	4770      	bx	lr

080029e4 <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80029e4:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 80029e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ea:	041b      	lsls	r3, r3, #16
 80029ec:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 80029ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80029f2:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80029f4:	8303      	strh	r3, [r0, #24]
}
 80029f6:	4770      	bx	lr

080029f8 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 80029f8:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 80029fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fe:	041b      	lsls	r3, r3, #16
 8002a00:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8002a02:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002a04:	8383      	strh	r3, [r0, #28]
}
 8002a06:	4770      	bx	lr

08002a08 <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8002a08:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8002a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a0e:	041b      	lsls	r3, r3, #16
 8002a10:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8002a12:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a16:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002a18:	8383      	strh	r3, [r0, #28]
}
 8002a1a:	4770      	bx	lr

08002a1c <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002a1c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8002a1e:	f023 0308 	bic.w	r3, r3, #8
 8002a22:	041b      	lsls	r3, r3, #16
 8002a24:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8002a26:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002a28:	8303      	strh	r3, [r0, #24]
}
 8002a2a:	4770      	bx	lr

08002a2c <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002a2c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8002a2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8002a36:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a3a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002a3c:	8303      	strh	r3, [r0, #24]
}
 8002a3e:	4770      	bx	lr

08002a40 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002a40:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8002a42:	f023 0308 	bic.w	r3, r3, #8
 8002a46:	041b      	lsls	r3, r3, #16
 8002a48:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8002a4a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002a4c:	8383      	strh	r3, [r0, #28]
}
 8002a4e:	4770      	bx	lr

08002a50 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002a50:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8002a52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a56:	041b      	lsls	r3, r3, #16
 8002a58:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8002a5a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a5e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002a60:	8383      	strh	r3, [r0, #28]
}
 8002a62:	4770      	bx	lr

08002a64 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002a64:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8002a66:	f023 0304 	bic.w	r3, r3, #4
 8002a6a:	041b      	lsls	r3, r3, #16
 8002a6c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8002a6e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002a70:	8303      	strh	r3, [r0, #24]
}
 8002a72:	4770      	bx	lr

08002a74 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002a74:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8002a76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a7a:	041b      	lsls	r3, r3, #16
 8002a7c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8002a7e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a82:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002a84:	8303      	strh	r3, [r0, #24]
}
 8002a86:	4770      	bx	lr

08002a88 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002a88:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8002a8a:	f023 0304 	bic.w	r3, r3, #4
 8002a8e:	041b      	lsls	r3, r3, #16
 8002a90:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8002a92:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002a94:	8383      	strh	r3, [r0, #28]
}
 8002a96:	4770      	bx	lr

08002a98 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002a98:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8002a9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a9e:	041b      	lsls	r3, r3, #16
 8002aa0:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8002aa2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002aa6:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002aa8:	8383      	strh	r3, [r0, #28]
}
 8002aaa:	4770      	bx	lr

08002aac <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002aac:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8002aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8002ab6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002ab8:	8303      	strh	r3, [r0, #24]
}
 8002aba:	4770      	bx	lr

08002abc <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002abc:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8002abe:	045b      	lsls	r3, r3, #17
 8002ac0:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8002ac2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ac6:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002ac8:	8303      	strh	r3, [r0, #24]
}
 8002aca:	4770      	bx	lr

08002acc <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002acc:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8002ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ad2:	041b      	lsls	r3, r3, #16
 8002ad4:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8002ad6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002ad8:	8383      	strh	r3, [r0, #28]
}
 8002ada:	4770      	bx	lr

08002adc <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002adc:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8002ade:	045b      	lsls	r3, r3, #17
 8002ae0:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8002ae2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ae6:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002ae8:	8383      	strh	r3, [r0, #28]
}
 8002aea:	4770      	bx	lr

08002aec <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002aec:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8002aee:	f023 0302 	bic.w	r3, r3, #2
 8002af2:	041b      	lsls	r3, r3, #16
 8002af4:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8002af6:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002af8:	8403      	strh	r3, [r0, #32]
}
 8002afa:	4770      	bx	lr

08002afc <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8002afc:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002afe:	f023 0308 	bic.w	r3, r3, #8
 8002b02:	041b      	lsls	r3, r3, #16
 8002b04:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8002b06:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002b08:	8403      	strh	r3, [r0, #32]
}
 8002b0a:	4770      	bx	lr

08002b0c <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002b0c:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8002b0e:	f023 0320 	bic.w	r3, r3, #32
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8002b16:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002b1a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002b1c:	8403      	strh	r3, [r0, #32]
}
 8002b1e:	4770      	bx	lr

08002b20 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8002b20:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b26:	041b      	lsls	r3, r3, #16
 8002b28:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8002b2a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002b2e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002b30:	8403      	strh	r3, [r0, #32]
}
 8002b32:	4770      	bx	lr

08002b34 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002b34:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002b36:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b3a:	041b      	lsls	r3, r3, #16
 8002b3c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8002b3e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b42:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002b44:	8403      	strh	r3, [r0, #32]
}
 8002b46:	4770      	bx	lr

08002b48 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8002b48:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8002b4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b4e:	041b      	lsls	r3, r3, #16
 8002b50:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8002b52:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b56:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002b58:	8403      	strh	r3, [r0, #32]
}
 8002b5a:	4770      	bx	lr

08002b5c <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002b5c:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8002b5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b62:	041b      	lsls	r3, r3, #16
 8002b64:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8002b66:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002b6a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002b6c:	8403      	strh	r3, [r0, #32]
}
 8002b6e:	4770      	bx	lr

08002b70 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8002b70:	b410      	push	{r4}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002b72:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8002b74:	2301      	movs	r3, #1
 8002b76:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002b78:	b2a4      	uxth	r4, r4
 8002b7a:	ea24 0303 	bic.w	r3, r4, r3
 8002b7e:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002b80:	8c03      	ldrh	r3, [r0, #32]
 8002b82:	fa12 f101 	lsls.w	r1, r2, r1
 8002b86:	430b      	orrs	r3, r1
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	8403      	strh	r3, [r0, #32]
}
 8002b8c:	bc10      	pop	{r4}
 8002b8e:	4770      	bx	lr

08002b90 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8002b90:	b410      	push	{r4}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002b92:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8002b94:	2304      	movs	r3, #4
 8002b96:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002b98:	b2a4      	uxth	r4, r4
 8002b9a:	ea24 0303 	bic.w	r3, r4, r3
 8002b9e:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8002ba0:	8c03      	ldrh	r3, [r0, #32]
 8002ba2:	fa12 f101 	lsls.w	r1, r2, r1
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	8403      	strh	r3, [r0, #32]
}
 8002bac:	bc10      	pop	{r4}
 8002bae:	4770      	bx	lr

08002bb0 <TIM_ICInit>:
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002bb0:	880b      	ldrh	r3, [r1, #0]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002bb2:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d032      	beq.n	8002c1e <TIM_ICInit+0x6e>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d058      	beq.n	8002c6e <TIM_ICInit+0xbe>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002bbc:	2b08      	cmp	r3, #8
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002bbe:	884e      	ldrh	r6, [r1, #2]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002bc0:	8c03      	ldrh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002bc2:	f000 8082 	beq.w	8002cca <TIM_ICInit+0x11a>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002bc6:	888f      	ldrh	r7, [r1, #4]
 8002bc8:	890d      	ldrh	r5, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002bca:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002bcc:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002bd0:	0409      	lsls	r1, r1, #16
 8002bd2:	0c09      	lsrs	r1, r1, #16
 8002bd4:	8401      	strh	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002bd6:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
 8002bd8:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002bda:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002bde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002be2:	0512      	lsls	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002be4:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002be6:	0d12      	lsrs	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002be8:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8002bea:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8002bee:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002bf2:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002bfc:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002bfe:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8002c00:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8002c02:	8b83      	ldrh	r3, [r0, #28]
 8002c04:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c08:	041b      	lsls	r3, r3, #16
 8002c0a:	0c1b      	lsrs	r3, r3, #16
 8002c0c:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002c0e:	8b83      	ldrh	r3, [r0, #28]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	8383      	strh	r3, [r0, #28]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002c1a:	bcf0      	pop	{r4, r5, r6, r7}
 8002c1c:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002c1e:	8c03      	ldrh	r3, [r0, #32]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002c20:	884e      	ldrh	r6, [r1, #2]
 8002c22:	888d      	ldrh	r5, [r1, #4]
 8002c24:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002c26:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002c28:	f023 0101 	bic.w	r1, r3, #1
 8002c2c:	0409      	lsls	r1, r1, #16
 8002c2e:	0c09      	lsrs	r1, r1, #16
 8002c30:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c32:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002c34:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002c36:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 8002c3a:	0412      	lsls	r2, r2, #16
 8002c3c:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c3e:	f023 030a 	bic.w	r3, r3, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002c42:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c46:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002c48:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c4a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002c4c:	f046 0101 	orr.w	r1, r6, #1
 8002c50:	430b      	orrs	r3, r1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002c52:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c54:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c56:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002c58:	8b03      	ldrh	r3, [r0, #24]
 8002c5a:	f023 030c 	bic.w	r3, r3, #12
 8002c5e:	041b      	lsls	r3, r3, #16
 8002c60:	0c1b      	lsrs	r3, r3, #16
 8002c62:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002c64:	8b03      	ldrh	r3, [r0, #24]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	4323      	orrs	r3, r4
 8002c6a:	8303      	strh	r3, [r0, #24]
 8002c6c:	e7d5      	b.n	8002c1a <TIM_ICInit+0x6a>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002c6e:	8c03      	ldrh	r3, [r0, #32]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002c70:	884e      	ldrh	r6, [r1, #2]
 8002c72:	888d      	ldrh	r5, [r1, #4]
 8002c74:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002c76:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002c78:	f023 0110 	bic.w	r1, r3, #16
 8002c7c:	0409      	lsls	r1, r1, #16
 8002c7e:	0c09      	lsrs	r1, r1, #16
 8002c80:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c82:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002c84:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002c86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c8a:	0512      	lsls	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002c90:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c92:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002c94:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c98:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002c9a:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002c9c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002ca0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	f043 0310 	orr.w	r3, r3, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002caa:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cac:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002cae:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002cb0:	8b03      	ldrh	r3, [r0, #24]
 8002cb2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002cb6:	041b      	lsls	r3, r3, #16
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002cbc:	8b03      	ldrh	r3, [r0, #24]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	8303      	strh	r3, [r0, #24]
 8002cc8:	e7a7      	b.n	8002c1a <TIM_ICInit+0x6a>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002cca:	888d      	ldrh	r5, [r1, #4]
 8002ccc:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002cce:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002cd0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8002cd4:	0409      	lsls	r1, r1, #16
 8002cd6:	0c09      	lsrs	r1, r1, #16
 8002cd8:	8401      	strh	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cda:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
 8002cdc:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002cde:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002ce2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002ce6:	0412      	lsls	r2, r2, #16
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002ce8:	041b      	lsls	r3, r3, #16
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002cea:	0c12      	lsrs	r2, r2, #16
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002cec:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002cee:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002cf2:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002cf6:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002cfe:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d00:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8002d02:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8002d04:	8b83      	ldrh	r3, [r0, #28]
 8002d06:	f023 030c 	bic.w	r3, r3, #12
 8002d0a:	041b      	lsls	r3, r3, #16
 8002d0c:	0c1b      	lsrs	r3, r3, #16
 8002d0e:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002d10:	8b83      	ldrh	r3, [r0, #28]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	4323      	orrs	r3, r4
 8002d16:	8383      	strh	r3, [r0, #28]
 8002d18:	e77f      	b.n	8002c1a <TIM_ICInit+0x6a>
 8002d1a:	bf00      	nop

08002d1c <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002d1c:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002d1e:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002d20:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002d22:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002d24:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8002d26:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8002d28:	8103      	strh	r3, [r0, #8]
}
 8002d2a:	4770      	bx	lr

08002d2c <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002d2c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002d30:	888a      	ldrh	r2, [r1, #4]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8002d32:	f8b1 8002 	ldrh.w	r8, [r1, #2]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002d36:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8002d38:	f1b8 0f00 	cmp.w	r8, #0
 8002d3c:	bf0c      	ite	eq
 8002d3e:	2502      	moveq	r5, #2
 8002d40:	2500      	movne	r5, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8002d42:	2a01      	cmp	r2, #1
 8002d44:	bf14      	ite	ne
 8002d46:	2601      	movne	r6, #1
 8002d48:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d051      	beq.n	8002df2 <TIM_PWMIConfig+0xc6>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002d4e:	8c03      	ldrh	r3, [r0, #32]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002d50:	f8b1 c008 	ldrh.w	ip, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002d54:	88cf      	ldrh	r7, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002d56:	f023 0310 	bic.w	r3, r3, #16
 8002d5a:	041b      	lsls	r3, r3, #16
 8002d5c:	0c1b      	lsrs	r3, r3, #16
 8002d5e:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d60:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002d62:	8c01      	ldrh	r1, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002d64:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8002d68:	0524      	lsls	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d6a:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002d6e:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d70:	0409      	lsls	r1, r1, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002d72:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d76:	0c09      	lsrs	r1, r1, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002d78:	b2a4      	uxth	r4, r4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002d7a:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002d7e:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002d82:	b289      	uxth	r1, r1
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002d84:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002d86:	f041 0110 	orr.w	r1, r1, #16

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d8a:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002d8c:	8401      	strh	r1, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002d8e:	8b01      	ldrh	r1, [r0, #24]
 8002d90:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8002d94:	0409      	lsls	r1, r1, #16
 8002d96:	0c09      	lsrs	r1, r1, #16
 8002d98:	8301      	strh	r1, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002d9a:	8b03      	ldrh	r3, [r0, #24]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002da6:	8c01      	ldrh	r1, [r0, #32]
 8002da8:	f021 0101 	bic.w	r1, r1, #1
 8002dac:	0409      	lsls	r1, r1, #16
 8002dae:	0c09      	lsrs	r1, r1, #16
 8002db0:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db2:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002db4:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002db6:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 8002dba:	0412      	lsls	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dbc:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002dc0:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dc2:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002dc4:	ea42 120c 	orr.w	r2, r2, ip, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dc8:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002dca:	f043 0301 	orr.w	r3, r3, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002dce:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002dd0:	431d      	orrs	r5, r3
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002dd2:	4316      	orrs	r6, r2
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dd4:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 8002dd6:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002dd8:	8b03      	ldrh	r3, [r0, #24]
 8002dda:	f023 030c 	bic.w	r3, r3, #12
 8002dde:	041b      	lsls	r3, r3, #16
 8002de0:	0c1b      	lsrs	r3, r3, #16
 8002de2:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002de4:	8b03      	ldrh	r3, [r0, #24]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	431f      	orrs	r7, r3
 8002dea:	8307      	strh	r7, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002dec:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8002df0:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002df2:	8c03      	ldrh	r3, [r0, #32]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002df4:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002df6:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002df8:	f023 0301 	bic.w	r3, r3, #1
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	0c1b      	lsrs	r3, r3, #16
 8002e00:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e02:	8b01      	ldrh	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8002e04:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002e06:	f021 01f3 	bic.w	r1, r1, #243	; 0xf3
 8002e0a:	0409      	lsls	r1, r1, #16
 8002e0c:	0c09      	lsrs	r1, r1, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e0e:	f023 030a 	bic.w	r3, r3, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002e12:	ea41 1107 	orr.w	r1, r1, r7, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e16:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002e18:	b289      	uxth	r1, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e1a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002e1c:	f048 0801 	orr.w	r8, r8, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002e20:	430a      	orrs	r2, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002e22:	ea43 0308 	orr.w	r3, r3, r8

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e26:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002e28:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002e2a:	8b03      	ldrh	r3, [r0, #24]
 8002e2c:	f023 030c 	bic.w	r3, r3, #12
 8002e30:	041b      	lsls	r3, r3, #16
 8002e32:	0c1b      	lsrs	r3, r3, #16
 8002e34:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002e36:	8b03      	ldrh	r3, [r0, #24]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	4323      	orrs	r3, r4
 8002e3c:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002e3e:	8c03      	ldrh	r3, [r0, #32]
 8002e40:	f023 0310 	bic.w	r3, r3, #16
 8002e44:	041b      	lsls	r3, r3, #16
 8002e46:	0c1b      	lsrs	r3, r3, #16
 8002e48:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e4a:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002e4c:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002e4e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e52:	0512      	lsls	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002e58:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e5a:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002e5c:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e60:	0c1b      	lsrs	r3, r3, #16
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002e62:	f043 0310 	orr.w	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002e66:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002e68:	ea43 1505 	orr.w	r5, r3, r5, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002e6c:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e70:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 8002e72:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002e74:	8b03      	ldrh	r3, [r0, #24]
 8002e76:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002e7a:	041b      	lsls	r3, r3, #16
 8002e7c:	0c1b      	lsrs	r3, r3, #16
 8002e7e:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002e80:	8b03      	ldrh	r3, [r0, #24]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
 8002e88:	b2a4      	uxth	r4, r4
 8002e8a:	8304      	strh	r4, [r0, #24]
 8002e8c:	e7ae      	b.n	8002dec <TIM_PWMIConfig+0xc0>
 8002e8e:	bf00      	nop

08002e90 <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8002e90:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8002e92:	4770      	bx	lr

08002e94 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8002e94:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8002e96:	4770      	bx	lr

08002e98 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002e98:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8002e9a:	4770      	bx	lr

08002e9c <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8002e9c:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8002e9e:	4770      	bx	lr

08002ea0 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002ea0:	8b03      	ldrh	r3, [r0, #24]
 8002ea2:	f023 030c 	bic.w	r3, r3, #12
 8002ea6:	041b      	lsls	r3, r3, #16
 8002ea8:	0c1b      	lsrs	r3, r3, #16
 8002eaa:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002eac:	8b03      	ldrh	r3, [r0, #24]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	8303      	strh	r3, [r0, #24]
}
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop

08002eb8 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002eb8:	8b03      	ldrh	r3, [r0, #24]
 8002eba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ebe:	041b      	lsls	r3, r3, #16
 8002ec0:	0c1b      	lsrs	r3, r3, #16
 8002ec2:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002ec4:	8b03      	ldrh	r3, [r0, #24]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	8303      	strh	r3, [r0, #24]
}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop

08002ed4 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8002ed4:	8b83      	ldrh	r3, [r0, #28]
 8002ed6:	f023 030c 	bic.w	r3, r3, #12
 8002eda:	041b      	lsls	r3, r3, #16
 8002edc:	0c1b      	lsrs	r3, r3, #16
 8002ede:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002ee0:	8b83      	ldrh	r3, [r0, #28]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	8383      	strh	r3, [r0, #28]
}
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop

08002eec <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8002eec:	8b83      	ldrh	r3, [r0, #28]
 8002eee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	0c1b      	lsrs	r3, r3, #16
 8002ef6:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002ef8:	8b83      	ldrh	r3, [r0, #28]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	8383      	strh	r3, [r0, #28]
}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop

08002f08 <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002f08:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 8002f0c:	880b      	ldrh	r3, [r1, #0]
 8002f0e:	898a      	ldrh	r2, [r1, #12]
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8002f10:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002f12:	888f      	ldrh	r7, [r1, #4]
 8002f14:	88ce      	ldrh	r6, [r1, #6]
 8002f16:	890d      	ldrh	r5, [r1, #8]
 8002f18:	894c      	ldrh	r4, [r1, #10]
 8002f1a:	ea4c 0303 	orr.w	r3, ip, r3
 8002f1e:	433b      	orrs	r3, r7
 8002f20:	4333      	orrs	r3, r6
 8002f22:	432b      	orrs	r3, r5
 8002f24:	4323      	orrs	r3, r4
 8002f26:	4313      	orrs	r3, r2
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8002f2e:	bcf0      	pop	{r4, r5, r6, r7}
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop

08002f34 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8002f34:	2300      	movs	r3, #0
 8002f36:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8002f38:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8002f3a:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8002f3c:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8002f3e:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8002f40:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8002f42:	8183      	strh	r3, [r0, #12]
}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop

08002f48 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002f48:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002f4c:	b921      	cbnz	r1, 8002f58 <TIM_CtrlPWMOutputs+0x10>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8002f4e:	045b      	lsls	r3, r3, #17
 8002f50:	0c5b      	lsrs	r3, r3, #17
 8002f52:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8002f56:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8002f66:	4770      	bx	lr

08002f68 <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8002f68:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002f6a:	b929      	cbnz	r1, 8002f78 <TIM_SelectCOM+0x10>
    TIMx->CR2 |= TIM_CR2_CCUS;
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8002f6c:	f023 0304 	bic.w	r3, r3, #4
 8002f70:	041b      	lsls	r3, r3, #16
 8002f72:	0c1b      	lsrs	r3, r3, #16
 8002f74:	8083      	strh	r3, [r0, #4]
 8002f76:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	f043 0304 	orr.w	r3, r3, #4
 8002f7e:	8083      	strh	r3, [r0, #4]
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop

08002f84 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002f84:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002f86:	b929      	cbnz	r1, 8002f94 <TIM_CCPreloadControl+0x10>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	041b      	lsls	r3, r3, #16
 8002f8e:	0c1b      	lsrs	r3, r3, #16
 8002f90:	8083      	strh	r3, [r0, #4]
 8002f92:	4770      	bx	lr
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	8083      	strh	r3, [r0, #4]
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop

08002fa0 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002fa0:	8983      	ldrh	r3, [r0, #12]
 8002fa2:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002fa4:	b91a      	cbnz	r2, 8002fae <TIM_ITConfig+0xe>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002fa6:	ea23 0101 	bic.w	r1, r3, r1
 8002faa:	8181      	strh	r1, [r0, #12]
 8002fac:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002fae:	4319      	orrs	r1, r3
 8002fb0:	8181      	strh	r1, [r0, #12]
 8002fb2:	4770      	bx	lr

08002fb4 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8002fb4:	8281      	strh	r1, [r0, #20]
}
 8002fb6:	4770      	bx	lr

08002fb8 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8002fb8:	8a03      	ldrh	r3, [r0, #16]
  {
    bitstatus = SET;
 8002fba:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002fbc:	bf0c      	ite	eq
 8002fbe:	2000      	moveq	r0, #0
 8002fc0:	2001      	movne	r0, #1
 8002fc2:	4770      	bx	lr

08002fc4 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8002fc4:	43c9      	mvns	r1, r1
 8002fc6:	b289      	uxth	r1, r1
 8002fc8:	8201      	strh	r1, [r0, #16]
}
 8002fca:	4770      	bx	lr

08002fcc <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002fcc:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8002fce:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002fd0:	4211      	tst	r1, r2
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2000      	moveq	r0, #0
 8002fd6:	2001      	movne	r0, #1
 8002fd8:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002fda:	bf0c      	ite	eq
 8002fdc:	2000      	moveq	r0, #0
 8002fde:	f000 0001 	andne.w	r0, r0, #1
 8002fe2:	4770      	bx	lr

08002fe4 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002fe4:	43c9      	mvns	r1, r1
 8002fe6:	b289      	uxth	r1, r1
 8002fe8:	8201      	strh	r1, [r0, #16]
}
 8002fea:	4770      	bx	lr

08002fec <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8002fec:	430a      	orrs	r2, r1
 8002fee:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
}
 8002ff2:	4770      	bx	lr

08002ff4 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8002ff4:	8983      	ldrh	r3, [r0, #12]
 8002ff6:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002ff8:	b91a      	cbnz	r2, 8003002 <TIM_DMACmd+0xe>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8002ffa:	ea23 0101 	bic.w	r1, r3, r1
 8002ffe:	8181      	strh	r1, [r0, #12]
 8003000:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8003002:	4319      	orrs	r1, r3
 8003004:	8181      	strh	r1, [r0, #12]
 8003006:	4770      	bx	lr

08003008 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8003008:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800300a:	b929      	cbnz	r1, 8003018 <TIM_SelectCCDMA+0x10>
    TIMx->CR2 |= TIM_CR2_CCDS;
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 800300c:	f023 0308 	bic.w	r3, r3, #8
 8003010:	041b      	lsls	r3, r3, #16
 8003012:	0c1b      	lsrs	r3, r3, #16
 8003014:	8083      	strh	r3, [r0, #4]
 8003016:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8003018:	b29b      	uxth	r3, r3
 800301a:	f043 0308 	orr.w	r3, r3, #8
 800301e:	8083      	strh	r3, [r0, #4]
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop

08003024 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8003024:	8903      	ldrh	r3, [r0, #8]
 8003026:	f023 0307 	bic.w	r3, r3, #7
 800302a:	041b      	lsls	r3, r3, #16
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	8103      	strh	r3, [r0, #8]
}
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop

08003034 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003034:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8003036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303a:	041b      	lsls	r3, r3, #16
 800303c:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800303e:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003040:	8103      	strh	r3, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003042:	8903      	ldrh	r3, [r0, #8]
 8003044:	b29b      	uxth	r3, r3
 8003046:	f043 0307 	orr.w	r3, r3, #7
 800304a:	8103      	strh	r3, [r0, #8]
}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop

08003050 <TIM_TIxExternalClockConfig>:
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8003050:	2960      	cmp	r1, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8003052:	b430      	push	{r4, r5}
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8003054:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8003056:	d026      	beq.n	80030a6 <TIM_TIxExternalClockConfig+0x56>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8003058:	f024 0401 	bic.w	r4, r4, #1
 800305c:	0424      	lsls	r4, r4, #16
 800305e:	0c24      	lsrs	r4, r4, #16
 8003060:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003062:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8003064:	8c04      	ldrh	r4, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8003066:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
 800306a:	042d      	lsls	r5, r5, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800306c:	f024 040a 	bic.w	r4, r4, #10
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8003070:	0c2d      	lsrs	r5, r5, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003072:	0424      	lsls	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003074:	f045 0501 	orr.w	r5, r5, #1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003078:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800307a:	ea45 1303 	orr.w	r3, r5, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800307e:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003082:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8003084:	4322      	orrs	r2, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003086:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003088:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800308a:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800308c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003090:	041b      	lsls	r3, r3, #16
 8003092:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8003094:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003096:	8101      	strh	r1, [r0, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003098:	8903      	ldrh	r3, [r0, #8]
 800309a:	b29b      	uxth	r3, r3
 800309c:	f043 0307 	orr.w	r3, r3, #7
 80030a0:	8103      	strh	r3, [r0, #8]
}
 80030a2:	bc30      	pop	{r4, r5}
 80030a4:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80030a6:	f024 0410 	bic.w	r4, r4, #16
 80030aa:	0424      	lsls	r4, r4, #16
 80030ac:	0c24      	lsrs	r4, r4, #16
 80030ae:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b0:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 80030b2:	8c04      	ldrh	r4, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80030b4:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030b8:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80030bc:	052d      	lsls	r5, r5, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030be:	0424      	lsls	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80030c0:	0d2d      	lsrs	r5, r5, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030c2:	0c24      	lsrs	r4, r4, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80030c4:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80030c8:	f044 0410 	orr.w	r4, r4, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80030cc:	ea45 3303 	orr.w	r3, r5, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80030d0:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80030d4:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80030d6:	b292      	uxth	r2, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030d8:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80030da:	8402      	strh	r2, [r0, #32]
 80030dc:	e7d5      	b.n	800308a <TIM_TIxExternalClockConfig+0x3a>
 80030de:	bf00      	nop

080030e0 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80030e0:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80030e2:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80030e4:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80030e6:	430c      	orrs	r4, r1
 80030e8:	4314      	orrs	r4, r2
 80030ea:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80030ee:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030f0:	8104      	strh	r4, [r0, #8]
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030f2:	8903      	ldrh	r3, [r0, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 80030f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030f8:	041b      	lsls	r3, r3, #16
 80030fa:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;
 80030fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003100:	8103      	strh	r3, [r0, #8]
}
 8003102:	bc10      	pop	{r4}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop

08003108 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003108:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800310a:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800310c:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800310e:	430c      	orrs	r4, r1
 8003110:	4314      	orrs	r4, r2
 8003112:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8003116:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003118:	8104      	strh	r4, [r0, #8]

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800311a:	8903      	ldrh	r3, [r0, #8]
 800311c:	b29b      	uxth	r3, r3
 800311e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003122:	8103      	strh	r3, [r0, #8]
}
 8003124:	bc10      	pop	{r4}
 8003126:	4770      	bx	lr

08003128 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003128:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	041b      	lsls	r3, r3, #16
 8003130:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8003132:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003134:	8103      	strh	r3, [r0, #8]
}
 8003136:	4770      	bx	lr

08003138 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8003138:	8883      	ldrh	r3, [r0, #4]
 800313a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313e:	041b      	lsls	r3, r3, #16
 8003140:	0c1b      	lsrs	r3, r3, #16
 8003142:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8003144:	8883      	ldrh	r3, [r0, #4]
 8003146:	b29b      	uxth	r3, r3
 8003148:	430b      	orrs	r3, r1
 800314a:	8083      	strh	r3, [r0, #4]
}
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop

08003150 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8003150:	8903      	ldrh	r3, [r0, #8]
 8003152:	f023 0307 	bic.w	r3, r3, #7
 8003156:	041b      	lsls	r3, r3, #16
 8003158:	0c1b      	lsrs	r3, r3, #16
 800315a:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 800315c:	8903      	ldrh	r3, [r0, #8]
 800315e:	b29b      	uxth	r3, r3
 8003160:	430b      	orrs	r3, r1
 8003162:	8103      	strh	r3, [r0, #8]
}
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop

08003168 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8003168:	8903      	ldrh	r3, [r0, #8]
 800316a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800316e:	041b      	lsls	r3, r3, #16
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8003174:	8903      	ldrh	r3, [r0, #8]
 8003176:	b29b      	uxth	r3, r3
 8003178:	430b      	orrs	r3, r1
 800317a:	8103      	strh	r3, [r0, #8]
}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop

08003180 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003180:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8003182:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8003184:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8003186:	430c      	orrs	r4, r1
 8003188:	4314      	orrs	r4, r2
 800318a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800318e:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003190:	8104      	strh	r4, [r0, #8]
}
 8003192:	bc10      	pop	{r4}
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop

08003198 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8003198:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800319a:	8905      	ldrh	r5, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800319c:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319e:	8c06      	ldrh	r6, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80031a0:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80031a4:	f026 0622 	bic.w	r6, r6, #34	; 0x22
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80031a8:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80031ac:	0436      	lsls	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80031ae:	f025 0507 	bic.w	r5, r5, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80031b2:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80031b4:	0c36      	lsrs	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80031b6:	042d      	lsls	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80031b8:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80031ba:	4316      	orrs	r6, r2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80031bc:	0c2d      	lsrs	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80031be:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80031c2:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 80031c6:	4329      	orrs	r1, r5

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80031c8:	f044 0401 	orr.w	r4, r4, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80031cc:	b2b6      	uxth	r6, r6

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ce:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80031d0:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d2:	8406      	strh	r6, [r0, #32]
}
 80031d4:	bc70      	pop	{r4, r5, r6}
 80031d6:	4770      	bx	lr

080031d8 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80031d8:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80031da:	b929      	cbnz	r1, 80031e8 <TIM_SelectHallSensor+0x10>
    TIMx->CR2 |= TIM_CR2_TI1S;
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 80031dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e0:	041b      	lsls	r3, r3, #16
 80031e2:	0c1b      	lsrs	r3, r3, #16
 80031e4:	8083      	strh	r3, [r0, #4]
 80031e6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ee:	8083      	strh	r3, [r0, #4]
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop

080031f4 <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 80031f4:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop

080031fc <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 80031fc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 80031fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003202:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003206:	4298      	cmp	r0, r3
 8003208:	d028      	beq.n	800325c <USART_DeInit+0x60>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 800320a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800320e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003212:	4298      	cmp	r0, r3
 8003214:	d02c      	beq.n	8003270 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 8003216:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800321a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800321e:	4298      	cmp	r0, r3
 8003220:	d032      	beq.n	8003288 <USART_DeInit+0x8c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 8003222:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8003226:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800322a:	4298      	cmp	r0, r3
 800322c:	d038      	beq.n	80032a0 <USART_DeInit+0xa4>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 800322e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003232:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003236:	4298      	cmp	r0, r3
 8003238:	d03e      	beq.n	80032b8 <USART_DeInit+0xbc>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }     
  else
  {
    if (USARTx == USART6)
 800323a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800323e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003242:	4298      	cmp	r0, r3
 8003244:	d000      	beq.n	8003248 <USART_DeInit+0x4c>
 8003246:	bd08      	pop	{r3, pc}
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8003248:	2020      	movs	r0, #32
 800324a:	2101      	movs	r1, #1
 800324c:	f7fe fe54 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8003250:	2020      	movs	r0, #32
 8003252:	2100      	movs	r1, #0
    }
  }
}
 8003254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8003258:	f7fe be4e 	b.w	8001ef8 <RCC_APB2PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800325c:	2010      	movs	r0, #16
 800325e:	2101      	movs	r1, #1
 8003260:	f7fe fe4a 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8003264:	2010      	movs	r0, #16
 8003266:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8003268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800326c:	f7fe be44 	b.w	8001ef8 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8003270:	2101      	movs	r1, #1
 8003272:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003276:	f7fe fe31 	bl	8001edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800327a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800327e:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8003280:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8003284:	f7fe be2a 	b.w	8001edc <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8003288:	2101      	movs	r1, #1
 800328a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800328e:	f7fe fe25 	bl	8001edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8003292:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003296:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8003298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800329c:	f7fe be1e 	b.w	8001edc <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80032a0:	2101      	movs	r1, #1
 80032a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80032a6:	f7fe fe19 	bl	8001edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80032aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80032ae:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80032b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80032b4:	f7fe be12 	b.w	8001edc <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80032b8:	2101      	movs	r1, #1
 80032ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80032be:	f7fe fe0d 	bl	8001edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80032c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80032c6:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80032c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80032cc:	f7fe be06 	b.w	8001edc <RCC_APB1PeriphResetCmd>

080032d0 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80032d0:	8a02      	ldrh	r2, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80032d2:	88cb      	ldrh	r3, [r1, #6]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80032d4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80032d8:	0412      	lsls	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80032da:	b5f0      	push	{r4, r5, r6, r7, lr}

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80032dc:	0c12      	lsrs	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80032de:	4604      	mov	r4, r0
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80032e0:	431a      	orrs	r2, r3

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80032e2:	8948      	ldrh	r0, [r1, #10]
 80032e4:	890f      	ldrh	r7, [r1, #8]
 80032e6:	888e      	ldrh	r6, [r1, #4]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80032e8:	460d      	mov	r5, r1
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80032ea:	8989      	ldrh	r1, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80032ec:	8222      	strh	r2, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80032ee:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80032f0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032f4:	f023 030c 	bic.w	r3, r3, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80032f8:	ea47 0206 	orr.w	r2, r7, r6

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80032fc:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80032fe:	4302      	orrs	r2, r0
 8003300:	b292      	uxth	r2, r2

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8003302:	0c1b      	lsrs	r3, r3, #16
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8003304:	4313      	orrs	r3, r2
 8003306:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8003308:	8aa3      	ldrh	r3, [r4, #20]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800330a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800330e:	041b      	lsls	r3, r3, #16
 8003310:	0c1b      	lsrs	r3, r3, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8003312:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8003314:	430b      	orrs	r3, r1
 8003316:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8003318:	4668      	mov	r0, sp
 800331a:	f7fe fceb 	bl	8001cf4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800331e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8003322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003326:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800332a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800332e:	429c      	cmp	r4, r3
 8003330:	bf18      	it	ne
 8003332:	4294      	cmpne	r4, r2
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003334:	89a2      	ldrh	r2, [r4, #12]
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8003336:	bf0c      	ite	eq
 8003338:	9b03      	ldreq	r3, [sp, #12]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800333a:	9b02      	ldrne	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800333c:	b212      	sxth	r2, r2
 800333e:	2a00      	cmp	r2, #0
 8003340:	db21      	blt.n	8003386 <USART_Init+0xb6>
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8003342:	6828      	ldr	r0, [r5, #0]
 8003344:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003348:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800334c:	0080      	lsls	r0, r0, #2
 800334e:	fbb3 f1f0 	udiv	r1, r3, r0
  }
  tmpreg = (integerdivider / 100) << 4;
 8003352:	f248 531f 	movw	r3, #34079	; 0x851f

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003356:	89a0      	ldrh	r0, [r4, #12]
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8003358:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800335c:	fba3 5201 	umull	r5, r2, r3, r1
 8003360:	0952      	lsrs	r2, r2, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003362:	b200      	sxth	r0, r0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8003364:	0116      	lsls	r6, r2, #4
 8003366:	2564      	movs	r5, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003368:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800336a:	fb02 1215 	mls	r2, r2, r5, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800336e:	db13      	blt.n	8003398 <USART_Init+0xc8>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8003370:	0112      	lsls	r2, r2, #4
 8003372:	3232      	adds	r2, #50	; 0x32
 8003374:	fba3 5302 	umull	r5, r3, r3, r2
 8003378:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800337c:	4333      	orrs	r3, r6
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800337e:	b29b      	uxth	r3, r3
 8003380:	8123      	strh	r3, [r4, #8]
}
 8003382:	b005      	add	sp, #20
 8003384:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8003386:	682a      	ldr	r2, [r5, #0]
 8003388:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800338c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003390:	0052      	lsls	r2, r2, #1
 8003392:	fbb3 f1f2 	udiv	r1, r3, r2
 8003396:	e7dc      	b.n	8003352 <USART_Init+0x82>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8003398:	00d2      	lsls	r2, r2, #3
 800339a:	3232      	adds	r2, #50	; 0x32
 800339c:	fba3 1302 	umull	r1, r3, r3, r2
 80033a0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80033a4:	4333      	orrs	r3, r6
 80033a6:	e7ea      	b.n	800337e <USART_Init+0xae>

080033a8 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80033a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80033ac:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80033ae:	6002      	str	r2, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80033b0:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80033b2:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80033b4:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80033b6:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80033b8:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80033ba:	8183      	strh	r3, [r0, #12]
}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop

080033c0 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80033c0:	880a      	ldrh	r2, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80033c2:	8a03      	ldrh	r3, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80033c4:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80033c6:	884d      	ldrh	r5, [r1, #2]
 80033c8:	888c      	ldrh	r4, [r1, #4]
 80033ca:	88c9      	ldrh	r1, [r1, #6]
 80033cc:	432a      	orrs	r2, r5
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80033ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80033d2:	4322      	orrs	r2, r4
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80033d4:	041b      	lsls	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80033d6:	430a      	orrs	r2, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80033d8:	0c1b      	lsrs	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80033da:	b292      	uxth	r2, r2
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80033dc:	4313      	orrs	r3, r2
 80033de:	8203      	strh	r3, [r0, #16]
}
 80033e0:	bc30      	pop	{r4, r5}
 80033e2:	4770      	bx	lr

080033e4 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80033e4:	2300      	movs	r3, #0
 80033e6:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80033e8:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80033ea:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80033ec:	80c3      	strh	r3, [r0, #6]
}
 80033ee:	4770      	bx	lr

080033f0 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80033f0:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80033f2:	b929      	cbnz	r1, 8003400 <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80033f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033f8:	041b      	lsls	r3, r3, #16
 80033fa:	0c1b      	lsrs	r3, r3, #16
 80033fc:	8183      	strh	r3, [r0, #12]
 80033fe:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8003400:	b29b      	uxth	r3, r3
 8003402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003406:	8183      	strh	r3, [r0, #12]
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop

0800340c <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 800340c:	8b03      	ldrh	r3, [r0, #24]
 800340e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003412:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8003414:	8b03      	ldrh	r3, [r0, #24]
 8003416:	b29b      	uxth	r3, r3
 8003418:	430b      	orrs	r3, r1
 800341a:	8303      	strh	r3, [r0, #24]
}
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop

08003420 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8003420:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003422:	b919      	cbnz	r1, 800342c <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8003424:	045b      	lsls	r3, r3, #17
 8003426:	0c5b      	lsrs	r3, r3, #17
 8003428:	8183      	strh	r3, [r0, #12]
 800342a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800342c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003434:	b29b      	uxth	r3, r3
 8003436:	8183      	strh	r3, [r0, #12]
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop

0800343c <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800343c:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800343e:	b929      	cbnz	r1, 800344c <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8003440:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003444:	041b      	lsls	r3, r3, #16
 8003446:	0c1b      	lsrs	r3, r3, #16
 8003448:	8283      	strh	r3, [r0, #20]
 800344a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800344c:	b29b      	uxth	r3, r3
 800344e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003452:	8283      	strh	r3, [r0, #20]
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop

08003458 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8003458:	05c9      	lsls	r1, r1, #23
 800345a:	0dc9      	lsrs	r1, r1, #23
 800345c:	8081      	strh	r1, [r0, #4]
}
 800345e:	4770      	bx	lr

08003460 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8003460:	8880      	ldrh	r0, [r0, #4]
}
 8003462:	05c0      	lsls	r0, r0, #23
 8003464:	0dc0      	lsrs	r0, r0, #23
 8003466:	4770      	bx	lr

08003468 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8003468:	8a03      	ldrh	r3, [r0, #16]
 800346a:	f023 030f 	bic.w	r3, r3, #15
 800346e:	041b      	lsls	r3, r3, #16
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8003474:	8a03      	ldrh	r3, [r0, #16]
 8003476:	b29b      	uxth	r3, r3
 8003478:	430b      	orrs	r3, r1
 800347a:	8203      	strh	r3, [r0, #16]
}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop

08003480 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8003480:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8003482:	b929      	cbnz	r1, 8003490 <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8003484:	f023 0302 	bic.w	r3, r3, #2
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	0c1b      	lsrs	r3, r3, #16
 800348c:	8183      	strh	r3, [r0, #12]
 800348e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8003490:	b29b      	uxth	r3, r3
 8003492:	f043 0302 	orr.w	r3, r3, #2
 8003496:	8183      	strh	r3, [r0, #12]
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop

0800349c <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 800349c:	8983      	ldrh	r3, [r0, #12]
 800349e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034a2:	041b      	lsls	r3, r3, #16
 80034a4:	0c1b      	lsrs	r3, r3, #16
 80034a6:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 80034a8:	8983      	ldrh	r3, [r0, #12]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	430b      	orrs	r3, r1
 80034ae:	8183      	strh	r3, [r0, #12]
}
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop

080034b4 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 80034b4:	8a03      	ldrh	r3, [r0, #16]
 80034b6:	f023 0320 	bic.w	r3, r3, #32
 80034ba:	041b      	lsls	r3, r3, #16
 80034bc:	0c1b      	lsrs	r3, r3, #16
 80034be:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 80034c0:	8a03      	ldrh	r3, [r0, #16]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	430b      	orrs	r3, r1
 80034c6:	8203      	strh	r3, [r0, #16]
}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop

080034cc <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80034cc:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80034ce:	b929      	cbnz	r1, 80034dc <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 80034d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	0c1b      	lsrs	r3, r3, #16
 80034d8:	8203      	strh	r3, [r0, #16]
 80034da:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e2:	8203      	strh	r3, [r0, #16]
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop

080034e8 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 80034e8:	8983      	ldrh	r3, [r0, #12]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	8183      	strh	r3, [r0, #12]
}
 80034f2:	4770      	bx	lr

080034f4 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80034f4:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80034f6:	b929      	cbnz	r1, 8003504 <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 80034f8:	f023 0308 	bic.w	r3, r3, #8
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	8283      	strh	r3, [r0, #20]
 8003502:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8003504:	b29b      	uxth	r3, r3
 8003506:	f043 0308 	orr.w	r3, r3, #8
 800350a:	8283      	strh	r3, [r0, #20]
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop

08003510 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8003510:	8b03      	ldrh	r3, [r0, #24]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8003516:	8b03      	ldrh	r3, [r0, #24]
 8003518:	b29b      	uxth	r3, r3
 800351a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800351e:	8303      	strh	r3, [r0, #24]
}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop

08003524 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8003524:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003526:	b929      	cbnz	r1, 8003534 <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8003528:	f023 0320 	bic.w	r3, r3, #32
 800352c:	041b      	lsls	r3, r3, #16
 800352e:	0c1b      	lsrs	r3, r3, #16
 8003530:	8283      	strh	r3, [r0, #20]
 8003532:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8003534:	b29b      	uxth	r3, r3
 8003536:	f043 0320 	orr.w	r3, r3, #32
 800353a:	8283      	strh	r3, [r0, #20]
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop

08003540 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8003540:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003542:	b929      	cbnz	r1, 8003550 <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8003544:	f023 0310 	bic.w	r3, r3, #16
 8003548:	041b      	lsls	r3, r3, #16
 800354a:	0c1b      	lsrs	r3, r3, #16
 800354c:	8283      	strh	r3, [r0, #20]
 800354e:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8003550:	b29b      	uxth	r3, r3
 8003552:	f043 0310 	orr.w	r3, r3, #16
 8003556:	8283      	strh	r3, [r0, #20]
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop

0800355c <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 800355c:	8a83      	ldrh	r3, [r0, #20]
 800355e:	f023 0304 	bic.w	r3, r3, #4
 8003562:	041b      	lsls	r3, r3, #16
 8003564:	0c1b      	lsrs	r3, r3, #16
 8003566:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8003568:	8a83      	ldrh	r3, [r0, #20]
 800356a:	b29b      	uxth	r3, r3
 800356c:	430b      	orrs	r3, r1
 800356e:	8283      	strh	r3, [r0, #20]
}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop

08003574 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8003574:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8003576:	b929      	cbnz	r1, 8003584 <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8003578:	f023 0302 	bic.w	r3, r3, #2
 800357c:	041b      	lsls	r3, r3, #16
 800357e:	0c1b      	lsrs	r3, r3, #16
 8003580:	8283      	strh	r3, [r0, #20]
 8003582:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8003584:	b29b      	uxth	r3, r3
 8003586:	f043 0302 	orr.w	r3, r3, #2
 800358a:	8283      	strh	r3, [r0, #20]
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop

08003590 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8003590:	8a83      	ldrh	r3, [r0, #20]
 8003592:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8003594:	b91a      	cbnz	r2, 800359e <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8003596:	ea23 0101 	bic.w	r1, r3, r1
 800359a:	8281      	strh	r1, [r0, #20]
 800359c:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800359e:	4319      	orrs	r1, r3
 80035a0:	8281      	strh	r1, [r0, #20]
 80035a2:	4770      	bx	lr

080035a4 <USART_ITConfig>:

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80035a4:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80035a8:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80035aa:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80035ae:	2401      	movs	r4, #1
 80035b0:	fa14 f303 	lsls.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80035b4:	42a1      	cmp	r1, r4
 80035b6:	d00d      	beq.n	80035d4 <USART_ITConfig+0x30>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80035b8:	2902      	cmp	r1, #2
 80035ba:	d00d      	beq.n	80035d8 <USART_ITConfig+0x34>
  {
    usartxbase += 0x10;
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80035bc:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 80035be:	b92a      	cbnz	r2, 80035cc <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80035c0:	6802      	ldr	r2, [r0, #0]
 80035c2:	ea22 0303 	bic.w	r3, r2, r3
 80035c6:	6003      	str	r3, [r0, #0]
  }
}
 80035c8:	bc10      	pop	{r4}
 80035ca:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80035cc:	6802      	ldr	r2, [r0, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	6003      	str	r3, [r0, #0]
 80035d2:	e7f9      	b.n	80035c8 <USART_ITConfig+0x24>
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 80035d4:	300c      	adds	r0, #12
 80035d6:	e7f2      	b.n	80035be <USART_ITConfig+0x1a>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x10;
 80035d8:	3010      	adds	r0, #16
 80035da:	e7f0      	b.n	80035be <USART_ITConfig+0x1a>

080035dc <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80035dc:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 80035de:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80035e0:	bf0c      	ite	eq
 80035e2:	2000      	moveq	r0, #0
 80035e4:	2001      	movne	r0, #1
 80035e6:	4770      	bx	lr

080035e8 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 80035e8:	43c9      	mvns	r1, r1
 80035ea:	b289      	uxth	r1, r1
 80035ec:	8001      	strh	r1, [r0, #0]
}
 80035ee:	4770      	bx	lr

080035f0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80035f0:	b410      	push	{r4}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80035f2:	f001 021f 	and.w	r2, r1, #31
  itmask = (uint32_t)0x01 << itmask;
 80035f6:	2401      	movs	r4, #1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80035f8:	f3c1 1342 	ubfx	r3, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80035fc:	4094      	lsls	r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d016      	beq.n	8003630 <USART_GetITStatus+0x40>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8003602:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 8003604:	bf0c      	ite	eq
 8003606:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8003608:	8a82      	ldrhne	r2, [r0, #20]
 800360a:	b292      	uxth	r2, r2
 800360c:	4022      	ands	r2, r4
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 800360e:	8803      	ldrh	r3, [r0, #0]
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8003610:	2401      	movs	r4, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 8003612:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8003614:	fa14 f101 	lsls.w	r1, r4, r1
  bitpos &= USARTx->SR;
 8003618:	b29b      	uxth	r3, r3
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800361a:	4219      	tst	r1, r3
 800361c:	bf0c      	ite	eq
 800361e:	2300      	moveq	r3, #0
 8003620:	2301      	movne	r3, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 8003622:	2a00      	cmp	r2, #0
 8003624:	bf0c      	ite	eq
 8003626:	2000      	moveq	r0, #0
 8003628:	f003 0001 	andne.w	r0, r3, #1
 800362c:	bc10      	pop	{r4}
 800362e:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 8003630:	8982      	ldrh	r2, [r0, #12]
 8003632:	b292      	uxth	r2, r2
 8003634:	4022      	ands	r2, r4
 8003636:	e7ea      	b.n	800360e <USART_GetITStatus+0x1e>

08003638 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8003638:	0a09      	lsrs	r1, r1, #8
 800363a:	2301      	movs	r3, #1
 800363c:	fa13 f101 	lsls.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8003640:	43c9      	mvns	r1, r1
 8003642:	b289      	uxth	r1, r1
 8003644:	8001      	strh	r1, [r0, #0]
}
 8003646:	4770      	bx	lr

08003648 <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8003648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop

08003650 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8003650:	f241 53fc 	movw	r3, #5628	; 0x15fc
 8003654:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003658:	220c      	movs	r2, #12
 800365a:	601a      	str	r2, [r3, #0]
	return -1;
}
 800365c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop

08003664 <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 8003664:	f241 53fc 	movw	r3, #5628	; 0x15fc
 8003668:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800366c:	220b      	movs	r2, #11
 800366e:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop

08003678 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8003678:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800367c:	604b      	str	r3, [r1, #4]
	return 0;
}
 800367e:	2000      	movs	r0, #0
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop

08003684 <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 8003684:	2001      	movs	r0, #1
 8003686:	4770      	bx	lr

08003688 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8003688:	2802      	cmp	r0, #2
 800368a:	d801      	bhi.n	8003690 <_isatty+0x8>
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 800368c:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 800368e:	4770      	bx	lr
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8003690:	4b02      	ldr	r3, [pc, #8]	; (800369c <_isatty+0x14>)
 8003692:	2209      	movs	r2, #9
 8003694:	601a      	str	r2, [r3, #0]
		return 0;
 8003696:	2000      	movs	r0, #0
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	200015fc 	.word	0x200015fc

080036a0 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 80036a0:	f241 53fc 	movw	r3, #5628	; 0x15fc
 80036a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036a8:	2216      	movs	r2, #22
 80036aa:	601a      	str	r2, [r3, #0]
	return (-1);
}
 80036ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop

080036b4 <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 80036b4:	f241 53fc 	movw	r3, #5628	; 0x15fc
 80036b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036bc:	221f      	movs	r2, #31
 80036be:	601a      	str	r2, [r3, #0]
	return -1;
}
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop

080036c8 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 80036c8:	2000      	movs	r0, #0
 80036ca:	4770      	bx	lr

080036cc <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 80036cc:	b430      	push	{r4, r5}
	int n;
	int num = 0;
	switch (file) {
 80036ce:	b130      	cbz	r0, 80036de <_read+0x12>
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 80036d0:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <_read+0x34>)
 80036d2:	2209      	movs	r2, #9
 80036d4:	601a      	str	r2, [r3, #0]
				return -1;
 80036d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 80036da:	bc30      	pop	{r4, r5}
 80036dc:	4770      	bx	lr
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 80036de:	2a00      	cmp	r2, #0
 80036e0:	ddfb      	ble.n	80036da <_read+0xe>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 80036e2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 80036e6:	188d      	adds	r5, r1, r2
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 80036e8:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80036ec:	8823      	ldrh	r3, [r4, #0]
 80036ee:	069b      	lsls	r3, r3, #26
 80036f0:	d5fc      	bpl.n	80036ec <_read+0x20>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 80036f2:	88a3      	ldrh	r3, [r4, #4]
 80036f4:	f801 3b01 	strb.w	r3, [r1], #1
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 80036f8:	42a9      	cmp	r1, r5
 80036fa:	d1f7      	bne.n	80036ec <_read+0x20>
 80036fc:	4610      	mov	r0, r2
 80036fe:	e7ec      	b.n	80036da <_read+0xe>
 8003700:	200015fc 	.word	0x200015fc

08003704 <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 8003704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003708:	604b      	str	r3, [r1, #4]
	return 0;
}
 800370a:	2000      	movs	r0, #0
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop

08003710 <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8003710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop

08003718 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8003718:	f241 53fc 	movw	r3, #5628	; 0x15fc
 800371c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003720:	2202      	movs	r2, #2
 8003722:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop

0800372c <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 800372c:	f241 53fc 	movw	r3, #5628	; 0x15fc
 8003730:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003734:	220a      	movs	r2, #10
 8003736:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop

08003740 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8003740:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8003742:	b430      	push	{r4, r5}
	int n;
	switch (file) {
 8003744:	d009      	beq.n	800375a <_write+0x1a>
 8003746:	2802      	cmp	r0, #2
 8003748:	d017      	beq.n	800377a <_write+0x3a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 800374a:	4b14      	ldr	r3, [pc, #80]	; (800379c <_write+0x5c>)
 800374c:	2209      	movs	r2, #9
 800374e:	601a      	str	r2, [r3, #0]
				return -1;
 8003750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 8003754:	4610      	mov	r0, r2
 8003756:	bc30      	pop	{r4, r5}
 8003758:	4770      	bx	lr
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 800375a:	2a00      	cmp	r2, #0
 800375c:	ddfa      	ble.n	8003754 <_write+0x14>
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800375e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8003762:	188d      	adds	r5, r1, r2
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8003764:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8003768:	8823      	ldrh	r3, [r4, #0]
 800376a:	065b      	lsls	r3, r3, #25
 800376c:	d5fc      	bpl.n	8003768 <_write+0x28>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 800376e:	f811 3b01 	ldrb.w	r3, [r1], #1
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8003772:	42a9      	cmp	r1, r5
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8003774:	80a3      	strh	r3, [r4, #4]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8003776:	d1f7      	bne.n	8003768 <_write+0x28>
 8003778:	e7ec      	b.n	8003754 <_write+0x14>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 800377a:	2a00      	cmp	r2, #0
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800377c:	bfc2      	ittt	gt
 800377e:	f44f 5480 	movgt.w	r4, #4096	; 0x1000
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8003782:	188d      	addgt	r5, r1, r2
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8003784:	f2c4 0401 	movtgt	r4, #16385	; 0x4001
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8003788:	dde4      	ble.n	8003754 <_write+0x14>
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800378a:	8823      	ldrh	r3, [r4, #0]
 800378c:	0658      	lsls	r0, r3, #25
 800378e:	d5fc      	bpl.n	800378a <_write+0x4a>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8003790:	f811 3b01 	ldrb.w	r3, [r1], #1
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8003794:	42a9      	cmp	r1, r5
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8003796:	80a3      	strh	r3, [r4, #4]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8003798:	d1f7      	bne.n	800378a <_write+0x4a>
 800379a:	e7db      	b.n	8003754 <_write+0x14>
 800379c:	200015fc 	.word	0x200015fc

080037a0 <_sbrk>:

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 80037a0:	4a0d      	ldr	r2, [pc, #52]	; (80037d8 <_sbrk+0x38>)
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 80037a2:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 80037a4:	6813      	ldr	r3, [r2, #0]
 80037a6:	b1a3      	cbz	r3, 80037d2 <_sbrk+0x32>
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 80037a8:	f3ef 8108 	mrs	r1, MSP
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 80037ac:	1818      	adds	r0, r3, r0
 80037ae:	4288      	cmp	r0, r1
		errno = ENOMEM;
		return (caddr_t) -1;
		//abort ();
	}

	heap_end += incr;
 80037b0:	bf98      	it	ls
 80037b2:	6010      	strls	r0, [r2, #0]
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 80037b4:	d801      	bhi.n	80037ba <_sbrk+0x1a>
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 80037b6:	4618      	mov	r0, r3
 80037b8:	bd08      	pop	{r3, pc}
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 80037ba:	2219      	movs	r2, #25
 80037bc:	2002      	movs	r0, #2
 80037be:	4907      	ldr	r1, [pc, #28]	; (80037dc <_sbrk+0x3c>)
 80037c0:	f7ff ffbe 	bl	8003740 <_write>
		errno = ENOMEM;
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <_sbrk+0x40>)
 80037c6:	220c      	movs	r2, #12
 80037c8:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80037ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 80037ce:	4618      	mov	r0, r3
 80037d0:	bd08      	pop	{r3, pc}
	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
		heap_end = &_ebss;
 80037d2:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <_sbrk+0x44>)
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e7e7      	b.n	80037a8 <_sbrk+0x8>
 80037d8:	2000095c 	.word	0x2000095c
 80037dc:	080090dc 	.word	0x080090dc
 80037e0:	200015fc 	.word	0x200015fc
 80037e4:	20001600 	.word	0x20001600

080037e8 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 80037e8:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 80037ea:	2001      	movs	r0, #1
 80037ec:	4902      	ldr	r1, [pc, #8]	; (80037f8 <_exit+0x10>)
 80037ee:	2204      	movs	r2, #4
 80037f0:	f7ff ffa6 	bl	8003740 <_write>
 80037f4:	e7fe      	b.n	80037f4 <_exit+0xc>
 80037f6:	bf00      	nop
 80037f8:	080090f8 	.word	0x080090f8
 80037fc:	08009164 	.word	0x08009164
 8003800:	20000000 	.word	0x20000000
 8003804:	2000095c 	.word	0x2000095c
 8003808:	2000095c 	.word	0x2000095c
 800380c:	20001600 	.word	0x20001600

08003810 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop

08003814 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003814:	e7fe      	b.n	8003814 <HardFault_Handler>
 8003816:	bf00      	nop

08003818 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003818:	e7fe      	b.n	8003818 <MemManage_Handler>
 800381a:	bf00      	nop

0800381c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800381c:	e7fe      	b.n	800381c <BusFault_Handler>
 800381e:	bf00      	nop

08003820 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003820:	e7fe      	b.n	8003820 <UsageFault_Handler>
 8003822:	bf00      	nop

08003824 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop

08003828 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop

0800382c <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop

08003830 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003830:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003834:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003838:	2200      	movs	r2, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800383a:	6819      	ldr	r1, [r3, #0]
 800383c:	f041 0101 	orr.w	r1, r1, #1
 8003840:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003842:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003844:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003846:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800384a:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800384e:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003852:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8003856:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003858:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800385a:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800385c:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800385e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003862:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003864:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003866:	9200      	str	r2, [sp, #0]
 8003868:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003870:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003872:	461a      	mov	r2, r3
 8003874:	e003      	b.n	800387e <SystemInit+0x4e>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003876:	9b00      	ldr	r3, [sp, #0]
 8003878:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800387c:	d009      	beq.n	8003892 <SystemInit+0x62>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800387e:	6813      	ldr	r3, [r2, #0]
 8003880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003884:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 8003886:	9b00      	ldr	r3, [sp, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800388c:	9b01      	ldr	r3, [sp, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f1      	beq.n	8003876 <SystemInit+0x46>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003892:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003896:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80038a0:	bf08      	it	eq
 80038a2:	9301      	streq	r3, [sp, #4]
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80038a4:	d001      	beq.n	80038aa <SystemInit+0x7a>
  {
    HSEStatus = (uint32_t)0x01;
 80038a6:	2301      	movs	r3, #1
 80038a8:	9301      	str	r3, [sp, #4]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
 80038aa:	9b01      	ldr	r3, [sp, #4]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d008      	beq.n	80038c2 <SystemInit+0x92>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038b0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80038b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80038b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038bc:	609a      	str	r2, [r3, #8]
#endif
}
 80038be:	b002      	add	sp, #8
 80038c0:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80038c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80038c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
    PWR->CR |= PWR_CR_VOS;
 80038ca:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80038ce:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80038d0:	f2c4 0200 	movt	r2, #16384	; 0x4000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80038d4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80038d8:	6419      	str	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80038da:	6811      	ldr	r1, [r2, #0]
 80038dc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80038e0:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ec:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80038ee:	6899      	ldr	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80038f0:	f245 4219 	movw	r2, #21529	; 0x5419
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80038f4:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80038f8:	f2c0 7240 	movt	r2, #1856	; 0x740
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80038fc:	6099      	str	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80038fe:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003906:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003908:	4619      	mov	r1, r3
 800390a:	680a      	ldr	r2, [r1, #0]
 800390c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003910:	0192      	lsls	r2, r2, #6
 8003912:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003916:	d5f8      	bpl.n	800390a <SystemInit+0xda>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003918:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800391c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003920:	f240 6105 	movw	r1, #1541	; 0x605
 8003924:	6011      	str	r1, [r2, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	f022 0203 	bic.w	r2, r2, #3
 800392c:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	f042 0202 	orr.w	r2, r2, #2
 8003934:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	f002 020c 	and.w	r2, r2, #12
 800393c:	2a08      	cmp	r2, #8
 800393e:	d1fa      	bne.n	8003936 <SystemInit+0x106>
 8003940:	e7b6      	b.n	80038b0 <SystemInit+0x80>
 8003942:	bf00      	nop

08003944 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003944:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003948:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8003952:	2a04      	cmp	r2, #4
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 8003954:	bf04      	itt	eq
 8003956:	f44f 5190 	moveq.w	r1, #4608	; 0x1200
 800395a:	f2c0 017a 	movteq	r1, #122	; 0x7a
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 800395e:	d006      	beq.n	800396e <SystemCoreClockUpdate+0x2a>
 8003960:	2a08      	cmp	r2, #8
 8003962:	bf1c      	itt	ne
 8003964:	f44f 5110 	movne.w	r1, #9216	; 0x2400
 8003968:	f2c0 01f4 	movtne	r1, #244	; 0xf4
 800396c:	d00b      	beq.n	8003986 <SystemCoreClockUpdate+0x42>
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800396e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003972:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003976:	4b15      	ldr	r3, [pc, #84]	; (80039cc <SystemCoreClockUpdate+0x88>)
 8003978:	6892      	ldr	r2, [r2, #8]
 800397a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800397e:	5c9a      	ldrb	r2, [r3, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003980:	40d1      	lsrs	r1, r2
 8003982:	6119      	str	r1, [r3, #16]
}
 8003984:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003986:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003988:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 800398a:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800398e:	6858      	ldr	r0, [r3, #4]
 8003990:	bf15      	itete	ne
 8003992:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003996:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800399a:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800399e:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80039a6:	fbb3 f1f2 	udiv	r1, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80039aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80039ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80039b2:	f3c0 1088 	ubfx	r0, r0, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80039bc:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80039be:	fb01 f100 	mul.w	r1, r1, r0
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80039c2:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 80039c4:	fbb1 f1f3 	udiv	r1, r1, r3
      break;
 80039c8:	e7d1      	b.n	800396e <SystemCoreClockUpdate+0x2a>
 80039ca:	bf00      	nop
 80039cc:	20000088 	.word	0x20000088

080039d0 <cleanup_glue>:
 80039d0:	b538      	push	{r3, r4, r5, lr}
 80039d2:	460c      	mov	r4, r1
 80039d4:	6809      	ldr	r1, [r1, #0]
 80039d6:	4605      	mov	r5, r0
 80039d8:	b109      	cbz	r1, 80039de <cleanup_glue+0xe>
 80039da:	f7ff fff9 	bl	80039d0 <cleanup_glue>
 80039de:	4628      	mov	r0, r5
 80039e0:	4621      	mov	r1, r4
 80039e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039e6:	f002 ba23 	b.w	8005e30 <_free_r>
 80039ea:	bf00      	nop

080039ec <_reclaim_reent>:
 80039ec:	4b22      	ldr	r3, [pc, #136]	; (8003a78 <_reclaim_reent+0x8c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4298      	cmp	r0, r3
 80039f2:	b570      	push	{r4, r5, r6, lr}
 80039f4:	4605      	mov	r5, r0
 80039f6:	d032      	beq.n	8003a5e <_reclaim_reent+0x72>
 80039f8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80039fa:	b1ab      	cbz	r3, 8003a28 <_reclaim_reent+0x3c>
 80039fc:	2200      	movs	r2, #0
 80039fe:	4616      	mov	r6, r2
 8003a00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a04:	b909      	cbnz	r1, 8003a0a <_reclaim_reent+0x1e>
 8003a06:	e007      	b.n	8003a18 <_reclaim_reent+0x2c>
 8003a08:	4621      	mov	r1, r4
 8003a0a:	680c      	ldr	r4, [r1, #0]
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	f002 fa0f 	bl	8005e30 <_free_r>
 8003a12:	2c00      	cmp	r4, #0
 8003a14:	d1f8      	bne.n	8003a08 <_reclaim_reent+0x1c>
 8003a16:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003a18:	3601      	adds	r6, #1
 8003a1a:	2e20      	cmp	r6, #32
 8003a1c:	4632      	mov	r2, r6
 8003a1e:	d1ef      	bne.n	8003a00 <_reclaim_reent+0x14>
 8003a20:	4628      	mov	r0, r5
 8003a22:	4619      	mov	r1, r3
 8003a24:	f002 fa04 	bl	8005e30 <_free_r>
 8003a28:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8003a2a:	b111      	cbz	r1, 8003a32 <_reclaim_reent+0x46>
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	f002 f9ff 	bl	8005e30 <_free_r>
 8003a32:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 8003a36:	b159      	cbz	r1, 8003a50 <_reclaim_reent+0x64>
 8003a38:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8003a3c:	42b1      	cmp	r1, r6
 8003a3e:	d101      	bne.n	8003a44 <_reclaim_reent+0x58>
 8003a40:	e006      	b.n	8003a50 <_reclaim_reent+0x64>
 8003a42:	4621      	mov	r1, r4
 8003a44:	680c      	ldr	r4, [r1, #0]
 8003a46:	4628      	mov	r0, r5
 8003a48:	f002 f9f2 	bl	8005e30 <_free_r>
 8003a4c:	42a6      	cmp	r6, r4
 8003a4e:	d1f8      	bne.n	8003a42 <_reclaim_reent+0x56>
 8003a50:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8003a52:	b111      	cbz	r1, 8003a5a <_reclaim_reent+0x6e>
 8003a54:	4628      	mov	r0, r5
 8003a56:	f002 f9eb 	bl	8005e30 <_free_r>
 8003a5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003a5c:	b903      	cbnz	r3, 8003a60 <_reclaim_reent+0x74>
 8003a5e:	bd70      	pop	{r4, r5, r6, pc}
 8003a60:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003a62:	4628      	mov	r0, r5
 8003a64:	4798      	blx	r3
 8003a66:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 8003a6a:	2900      	cmp	r1, #0
 8003a6c:	d0f7      	beq.n	8003a5e <_reclaim_reent+0x72>
 8003a6e:	4628      	mov	r0, r5
 8003a70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003a74:	e7ac      	b.n	80039d0 <cleanup_glue>
 8003a76:	bf00      	nop
 8003a78:	200000a0 	.word	0x200000a0

08003a7c <_wrapup_reent>:
 8003a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7e:	4607      	mov	r7, r0
 8003a80:	b1b0      	cbz	r0, 8003ab0 <_wrapup_reent+0x34>
 8003a82:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 8003a86:	b176      	cbz	r6, 8003aa6 <_wrapup_reent+0x2a>
 8003a88:	6875      	ldr	r5, [r6, #4]
 8003a8a:	1e6c      	subs	r4, r5, #1
 8003a8c:	d408      	bmi.n	8003aa0 <_wrapup_reent+0x24>
 8003a8e:	3502      	adds	r5, #2
 8003a90:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8003a94:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003a98:	3c01      	subs	r4, #1
 8003a9a:	4798      	blx	r3
 8003a9c:	1c63      	adds	r3, r4, #1
 8003a9e:	d1f9      	bne.n	8003a94 <_wrapup_reent+0x18>
 8003aa0:	6836      	ldr	r6, [r6, #0]
 8003aa2:	2e00      	cmp	r6, #0
 8003aa4:	d1f0      	bne.n	8003a88 <_wrapup_reent+0xc>
 8003aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa8:	b10b      	cbz	r3, 8003aae <_wrapup_reent+0x32>
 8003aaa:	4638      	mov	r0, r7
 8003aac:	4798      	blx	r3
 8003aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ab0:	4b01      	ldr	r3, [pc, #4]	; (8003ab8 <_wrapup_reent+0x3c>)
 8003ab2:	681f      	ldr	r7, [r3, #0]
 8003ab4:	e7e5      	b.n	8003a82 <_wrapup_reent+0x6>
 8003ab6:	bf00      	nop
 8003ab8:	200000a0 	.word	0x200000a0

08003abc <_sprintf_r>:
 8003abc:	b40c      	push	{r2, r3}
 8003abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac0:	b09d      	sub	sp, #116	; 0x74
 8003ac2:	ac22      	add	r4, sp, #136	; 0x88
 8003ac4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8003ac8:	f854 2b04 	ldr.w	r2, [r4], #4
 8003acc:	9101      	str	r1, [sp, #4]
 8003ace:	460e      	mov	r6, r1
 8003ad0:	4623      	mov	r3, r4
 8003ad2:	9503      	str	r5, [sp, #12]
 8003ad4:	9506      	str	r5, [sp, #24]
 8003ad6:	a901      	add	r1, sp, #4
 8003ad8:	f44f 7702 	mov.w	r7, #520	; 0x208
 8003adc:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003ae0:	f8ad 7010 	strh.w	r7, [sp, #16]
 8003ae4:	9605      	str	r6, [sp, #20]
 8003ae6:	f8ad 5012 	strh.w	r5, [sp, #18]
 8003aea:	941b      	str	r4, [sp, #108]	; 0x6c
 8003aec:	f000 f830 	bl	8003b50 <_svfprintf_r>
 8003af0:	9b01      	ldr	r3, [sp, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	b01d      	add	sp, #116	; 0x74
 8003af8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003afc:	b002      	add	sp, #8
 8003afe:	4770      	bx	lr

08003b00 <sprintf>:
 8003b00:	b40e      	push	{r1, r2, r3}
 8003b02:	b570      	push	{r4, r5, r6, lr}
 8003b04:	b09d      	sub	sp, #116	; 0x74
 8003b06:	ac21      	add	r4, sp, #132	; 0x84
 8003b08:	f240 03a0 	movw	r3, #160	; 0xa0
 8003b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b10:	f854 2b04 	ldr.w	r2, [r4], #4
 8003b14:	4606      	mov	r6, r0
 8003b16:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	9503      	str	r5, [sp, #12]
 8003b1e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003b22:	f8ad 3010 	strh.w	r3, [sp, #16]
 8003b26:	9506      	str	r5, [sp, #24]
 8003b28:	4623      	mov	r3, r4
 8003b2a:	a901      	add	r1, sp, #4
 8003b2c:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003b30:	9601      	str	r6, [sp, #4]
 8003b32:	9605      	str	r6, [sp, #20]
 8003b34:	f8ad 5012 	strh.w	r5, [sp, #18]
 8003b38:	941b      	str	r4, [sp, #108]	; 0x6c
 8003b3a:	f000 f809 	bl	8003b50 <_svfprintf_r>
 8003b3e:	9b01      	ldr	r3, [sp, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	b01d      	add	sp, #116	; 0x74
 8003b46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003b4a:	b003      	add	sp, #12
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop

08003b50 <_svfprintf_r>:
 8003b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b54:	b0c5      	sub	sp, #276	; 0x114
 8003b56:	468a      	mov	sl, r1
 8003b58:	4614      	mov	r4, r2
 8003b5a:	930e      	str	r3, [sp, #56]	; 0x38
 8003b5c:	900f      	str	r0, [sp, #60]	; 0x3c
 8003b5e:	f002 fa5f 	bl	8006020 <_localeconv_r>
 8003b62:	6800      	ldr	r0, [r0, #0]
 8003b64:	9017      	str	r0, [sp, #92]	; 0x5c
 8003b66:	f003 fb35 	bl	80071d4 <strlen>
 8003b6a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003b6e:	901a      	str	r0, [sp, #104]	; 0x68
 8003b70:	2100      	movs	r1, #0
 8003b72:	2000      	movs	r0, #0
 8003b74:	061a      	lsls	r2, r3, #24
 8003b76:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8003b7a:	d504      	bpl.n	8003b86 <_svfprintf_r+0x36>
 8003b7c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f001 8004 	beq.w	8004b8e <_svfprintf_r+0x103e>
 8003b86:	2300      	movs	r3, #0
 8003b88:	f10d 00e3 	add.w	r0, sp, #227	; 0xe3
 8003b8c:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8003b90:	a91f      	add	r1, sp, #124	; 0x7c
 8003b92:	9310      	str	r3, [sp, #64]	; 0x40
 8003b94:	933b      	str	r3, [sp, #236]	; 0xec
 8003b96:	933a      	str	r3, [sp, #232]	; 0xe8
 8003b98:	931c      	str	r3, [sp, #112]	; 0x70
 8003b9a:	931b      	str	r3, [sp, #108]	; 0x6c
 8003b9c:	930c      	str	r3, [sp, #48]	; 0x30
 8003b9e:	ebc0 030b 	rsb	r3, r0, fp
 8003ba2:	9007      	str	r0, [sp, #28]
 8003ba4:	9139      	str	r1, [sp, #228]	; 0xe4
 8003ba6:	9409      	str	r4, [sp, #36]	; 0x24
 8003ba8:	460e      	mov	r6, r1
 8003baa:	931d      	str	r3, [sp, #116]	; 0x74
 8003bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bae:	7803      	ldrb	r3, [r0, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf18      	it	ne
 8003bb4:	2b25      	cmpne	r3, #37	; 0x25
 8003bb6:	f000 80af 	beq.w	8003d18 <_svfprintf_r+0x1c8>
 8003bba:	4607      	mov	r7, r0
 8003bbc:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8003bc0:	2b25      	cmp	r3, #37	; 0x25
 8003bc2:	bf18      	it	ne
 8003bc4:	2b00      	cmpne	r3, #0
 8003bc6:	d1f9      	bne.n	8003bbc <_svfprintf_r+0x6c>
 8003bc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003bca:	ebb7 0801 	subs.w	r8, r7, r1
 8003bce:	d00e      	beq.n	8003bee <_svfprintf_r+0x9e>
 8003bd0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003bd2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003bd4:	6031      	str	r1, [r6, #0]
 8003bd6:	3401      	adds	r4, #1
 8003bd8:	4445      	add	r5, r8
 8003bda:	2c07      	cmp	r4, #7
 8003bdc:	f8c6 8004 	str.w	r8, [r6, #4]
 8003be0:	953b      	str	r5, [sp, #236]	; 0xec
 8003be2:	943a      	str	r4, [sp, #232]	; 0xe8
 8003be4:	dc7c      	bgt.n	8003ce0 <_svfprintf_r+0x190>
 8003be6:	3608      	adds	r6, #8
 8003be8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bea:	4442      	add	r2, r8
 8003bec:	920c      	str	r2, [sp, #48]	; 0x30
 8003bee:	783b      	ldrb	r3, [r7, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d07d      	beq.n	8003cf0 <_svfprintf_r+0x1a0>
 8003bf4:	3701      	adds	r7, #1
 8003bf6:	9709      	str	r7, [sp, #36]	; 0x24
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bfe:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8003c02:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003c06:	9308      	str	r3, [sp, #32]
 8003c08:	2720      	movs	r7, #32
 8003c0a:	252b      	movs	r5, #43	; 0x2b
 8003c0c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003c10:	f1a3 0220 	sub.w	r2, r3, #32
 8003c14:	2a58      	cmp	r2, #88	; 0x58
 8003c16:	f200 823b 	bhi.w	8004090 <_svfprintf_r+0x540>
 8003c1a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003c1e:	024c      	.short	0x024c
 8003c20:	02390239 	.word	0x02390239
 8003c24:	02390254 	.word	0x02390254
 8003c28:	02390239 	.word	0x02390239
 8003c2c:	02390239 	.word	0x02390239
 8003c30:	02590239 	.word	0x02590239
 8003c34:	0239007f 	.word	0x0239007f
 8003c38:	0082005c 	.word	0x0082005c
 8003c3c:	009d0239 	.word	0x009d0239
 8003c40:	00a200a2 	.word	0x00a200a2
 8003c44:	00a200a2 	.word	0x00a200a2
 8003c48:	00a200a2 	.word	0x00a200a2
 8003c4c:	00a200a2 	.word	0x00a200a2
 8003c50:	023900a2 	.word	0x023900a2
 8003c54:	02390239 	.word	0x02390239
 8003c58:	02390239 	.word	0x02390239
 8003c5c:	02390239 	.word	0x02390239
 8003c60:	02390239 	.word	0x02390239
 8003c64:	00b50239 	.word	0x00b50239
 8003c68:	02390154 	.word	0x02390154
 8003c6c:	02390154 	.word	0x02390154
 8003c70:	02390239 	.word	0x02390239
 8003c74:	018b0239 	.word	0x018b0239
 8003c78:	02390239 	.word	0x02390239
 8003c7c:	02390190 	.word	0x02390190
 8003c80:	02390239 	.word	0x02390239
 8003c84:	02390239 	.word	0x02390239
 8003c88:	023901a7 	.word	0x023901a7
 8003c8c:	01ba0239 	.word	0x01ba0239
 8003c90:	02390239 	.word	0x02390239
 8003c94:	02390239 	.word	0x02390239
 8003c98:	02390239 	.word	0x02390239
 8003c9c:	02390239 	.word	0x02390239
 8003ca0:	02390239 	.word	0x02390239
 8003ca4:	02780293 	.word	0x02780293
 8003ca8:	01540154 	.word	0x01540154
 8003cac:	028e0154 	.word	0x028e0154
 8003cb0:	02390278 	.word	0x02390278
 8003cb4:	02130239 	.word	0x02130239
 8003cb8:	02180239 	.word	0x02180239
 8003cbc:	02a50224 	.word	0x02a50224
 8003cc0:	023901de 	.word	0x023901de
 8003cc4:	023901e3 	.word	0x023901e3
 8003cc8:	02390264 	.word	0x02390264
 8003ccc:	02c70239 	.word	0x02c70239
 8003cd0:	4252      	negs	r2, r2
 8003cd2:	920b      	str	r2, [sp, #44]	; 0x2c
 8003cd4:	930e      	str	r3, [sp, #56]	; 0x38
 8003cd6:	9b08      	ldr	r3, [sp, #32]
 8003cd8:	f043 0304 	orr.w	r3, r3, #4
 8003cdc:	9308      	str	r3, [sp, #32]
 8003cde:	e795      	b.n	8003c0c <_svfprintf_r+0xbc>
 8003ce0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003ce2:	4651      	mov	r1, sl
 8003ce4:	465a      	mov	r2, fp
 8003ce6:	f003 faa5 	bl	8007234 <__ssprint_r>
 8003cea:	b940      	cbnz	r0, 8003cfe <_svfprintf_r+0x1ae>
 8003cec:	ae1f      	add	r6, sp, #124	; 0x7c
 8003cee:	e77b      	b.n	8003be8 <_svfprintf_r+0x98>
 8003cf0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8003cf2:	b123      	cbz	r3, 8003cfe <_svfprintf_r+0x1ae>
 8003cf4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003cf6:	4651      	mov	r1, sl
 8003cf8:	aa39      	add	r2, sp, #228	; 0xe4
 8003cfa:	f003 fa9b 	bl	8007234 <__ssprint_r>
 8003cfe:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003d02:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d08:	bf18      	it	ne
 8003d0a:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8003d0e:	930c      	str	r3, [sp, #48]	; 0x30
 8003d10:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003d12:	b045      	add	sp, #276	; 0x114
 8003d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003d1a:	e768      	b.n	8003bee <_svfprintf_r+0x9e>
 8003d1c:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8003d20:	e774      	b.n	8003c0c <_svfprintf_r+0xbc>
 8003d22:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003d26:	2b2a      	cmp	r3, #42	; 0x2a
 8003d28:	f001 804c 	beq.w	8004dc4 <_svfprintf_r+0x1274>
 8003d2c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003d30:	2400      	movs	r4, #0
 8003d32:	2a09      	cmp	r2, #9
 8003d34:	f63f af6c 	bhi.w	8003c10 <_svfprintf_r+0xc0>
 8003d38:	4601      	mov	r1, r0
 8003d3a:	2400      	movs	r4, #0
 8003d3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d40:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003d44:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8003d48:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003d4c:	2a09      	cmp	r2, #9
 8003d4e:	4608      	mov	r0, r1
 8003d50:	d9f4      	bls.n	8003d3c <_svfprintf_r+0x1ec>
 8003d52:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8003d56:	e75b      	b.n	8003c10 <_svfprintf_r+0xc0>
 8003d58:	9a08      	ldr	r2, [sp, #32]
 8003d5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d5e:	9208      	str	r2, [sp, #32]
 8003d60:	e754      	b.n	8003c0c <_svfprintf_r+0xbc>
 8003d62:	4601      	mov	r1, r0
 8003d64:	2200      	movs	r2, #0
 8003d66:	46b4      	mov	ip, r6
 8003d68:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8003d6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d70:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8003d74:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003d78:	2e09      	cmp	r6, #9
 8003d7a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003d7e:	4608      	mov	r0, r1
 8003d80:	d9f2      	bls.n	8003d68 <_svfprintf_r+0x218>
 8003d82:	4666      	mov	r6, ip
 8003d84:	920b      	str	r2, [sp, #44]	; 0x2c
 8003d86:	e743      	b.n	8003c10 <_svfprintf_r+0xc0>
 8003d88:	9315      	str	r3, [sp, #84]	; 0x54
 8003d8a:	9b08      	ldr	r3, [sp, #32]
 8003d8c:	9009      	str	r0, [sp, #36]	; 0x24
 8003d8e:	f043 0310 	orr.w	r3, r3, #16
 8003d92:	9308      	str	r3, [sp, #32]
 8003d94:	9808      	ldr	r0, [sp, #32]
 8003d96:	06c3      	lsls	r3, r0, #27
 8003d98:	f100 81bf 	bmi.w	800411a <_svfprintf_r+0x5ca>
 8003d9c:	9a08      	ldr	r2, [sp, #32]
 8003d9e:	0655      	lsls	r5, r2, #25
 8003da0:	f140 81bb 	bpl.w	800411a <_svfprintf_r+0x5ca>
 8003da4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003da6:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003daa:	3004      	adds	r0, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	900e      	str	r0, [sp, #56]	; 0x38
 8003db0:	f2c0 81ba 	blt.w	8004128 <_svfprintf_r+0x5d8>
 8003db4:	bf0c      	ite	eq
 8003db6:	2100      	moveq	r1, #0
 8003db8:	2101      	movne	r1, #1
 8003dba:	2201      	movs	r2, #1
 8003dbc:	2c00      	cmp	r4, #0
 8003dbe:	bfa2      	ittt	ge
 8003dc0:	9808      	ldrge	r0, [sp, #32]
 8003dc2:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8003dc6:	9008      	strge	r0, [sp, #32]
 8003dc8:	2c00      	cmp	r4, #0
 8003dca:	bf18      	it	ne
 8003dcc:	f041 0101 	orrne.w	r1, r1, #1
 8003dd0:	2900      	cmp	r1, #0
 8003dd2:	f000 8323 	beq.w	800441c <_svfprintf_r+0x8cc>
 8003dd6:	2a01      	cmp	r2, #1
 8003dd8:	f000 845f 	beq.w	800469a <_svfprintf_r+0xb4a>
 8003ddc:	2a02      	cmp	r2, #2
 8003dde:	bf18      	it	ne
 8003de0:	465a      	movne	r2, fp
 8003de2:	d102      	bne.n	8003dea <_svfprintf_r+0x29a>
 8003de4:	f000 bc48 	b.w	8004678 <_svfprintf_r+0xb28>
 8003de8:	4602      	mov	r2, r0
 8003dea:	f003 0107 	and.w	r1, r3, #7
 8003dee:	3130      	adds	r1, #48	; 0x30
 8003df0:	1e50      	subs	r0, r2, #1
 8003df2:	08db      	lsrs	r3, r3, #3
 8003df4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003df8:	d1f6      	bne.n	8003de8 <_svfprintf_r+0x298>
 8003dfa:	9b08      	ldr	r3, [sp, #32]
 8003dfc:	9011      	str	r0, [sp, #68]	; 0x44
 8003dfe:	07dd      	lsls	r5, r3, #31
 8003e00:	d507      	bpl.n	8003e12 <_svfprintf_r+0x2c2>
 8003e02:	2930      	cmp	r1, #48	; 0x30
 8003e04:	f000 8733 	beq.w	8004c6e <_svfprintf_r+0x111e>
 8003e08:	1e90      	subs	r0, r2, #2
 8003e0a:	2330      	movs	r3, #48	; 0x30
 8003e0c:	9011      	str	r0, [sp, #68]	; 0x44
 8003e0e:	f802 3c02 	strb.w	r3, [r2, #-2]
 8003e12:	ebc0 030b 	rsb	r3, r0, fp
 8003e16:	930d      	str	r3, [sp, #52]	; 0x34
 8003e18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e1a:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003e1e:	9412      	str	r4, [sp, #72]	; 0x48
 8003e20:	42a3      	cmp	r3, r4
 8003e22:	bfb8      	it	lt
 8003e24:	4623      	movlt	r3, r4
 8003e26:	2000      	movs	r0, #0
 8003e28:	930a      	str	r3, [sp, #40]	; 0x28
 8003e2a:	9016      	str	r0, [sp, #88]	; 0x58
 8003e2c:	b111      	cbz	r1, 8003e34 <_svfprintf_r+0x2e4>
 8003e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e30:	3301      	adds	r3, #1
 8003e32:	930a      	str	r3, [sp, #40]	; 0x28
 8003e34:	9b08      	ldr	r3, [sp, #32]
 8003e36:	f013 0302 	ands.w	r3, r3, #2
 8003e3a:	9313      	str	r3, [sp, #76]	; 0x4c
 8003e3c:	d002      	beq.n	8003e44 <_svfprintf_r+0x2f4>
 8003e3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003e40:	3002      	adds	r0, #2
 8003e42:	900a      	str	r0, [sp, #40]	; 0x28
 8003e44:	9b08      	ldr	r3, [sp, #32]
 8003e46:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8003e4a:	9314      	str	r3, [sp, #80]	; 0x50
 8003e4c:	f040 81bb 	bne.w	80041c6 <_svfprintf_r+0x676>
 8003e50:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003e52:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003e54:	1a47      	subs	r7, r0, r1
 8003e56:	2f00      	cmp	r7, #0
 8003e58:	f340 81b5 	ble.w	80041c6 <_svfprintf_r+0x676>
 8003e5c:	2f10      	cmp	r7, #16
 8003e5e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003e60:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003e62:	f8df 8344 	ldr.w	r8, [pc, #836]	; 80041a8 <_svfprintf_r+0x658>
 8003e66:	dd22      	ble.n	8003eae <_svfprintf_r+0x35e>
 8003e68:	4623      	mov	r3, r4
 8003e6a:	f04f 0910 	mov.w	r9, #16
 8003e6e:	4644      	mov	r4, r8
 8003e70:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003e74:	e003      	b.n	8003e7e <_svfprintf_r+0x32e>
 8003e76:	3f10      	subs	r7, #16
 8003e78:	3608      	adds	r6, #8
 8003e7a:	2f10      	cmp	r7, #16
 8003e7c:	dd15      	ble.n	8003eaa <_svfprintf_r+0x35a>
 8003e7e:	3301      	adds	r3, #1
 8003e80:	3510      	adds	r5, #16
 8003e82:	2b07      	cmp	r3, #7
 8003e84:	e886 0210 	stmia.w	r6, {r4, r9}
 8003e88:	953b      	str	r5, [sp, #236]	; 0xec
 8003e8a:	933a      	str	r3, [sp, #232]	; 0xe8
 8003e8c:	ddf3      	ble.n	8003e76 <_svfprintf_r+0x326>
 8003e8e:	4640      	mov	r0, r8
 8003e90:	4651      	mov	r1, sl
 8003e92:	465a      	mov	r2, fp
 8003e94:	f003 f9ce 	bl	8007234 <__ssprint_r>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	f47f af30 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 8003e9e:	3f10      	subs	r7, #16
 8003ea0:	2f10      	cmp	r7, #16
 8003ea2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003ea4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003ea6:	ae1f      	add	r6, sp, #124	; 0x7c
 8003ea8:	dce9      	bgt.n	8003e7e <_svfprintf_r+0x32e>
 8003eaa:	46a0      	mov	r8, r4
 8003eac:	461c      	mov	r4, r3
 8003eae:	3401      	adds	r4, #1
 8003eb0:	19ed      	adds	r5, r5, r7
 8003eb2:	2c07      	cmp	r4, #7
 8003eb4:	f8c6 8000 	str.w	r8, [r6]
 8003eb8:	6077      	str	r7, [r6, #4]
 8003eba:	953b      	str	r5, [sp, #236]	; 0xec
 8003ebc:	943a      	str	r4, [sp, #232]	; 0xe8
 8003ebe:	f300 8414 	bgt.w	80046ea <_svfprintf_r+0xb9a>
 8003ec2:	3608      	adds	r6, #8
 8003ec4:	e180      	b.n	80041c8 <_svfprintf_r+0x678>
 8003ec6:	9009      	str	r0, [sp, #36]	; 0x24
 8003ec8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003eca:	9315      	str	r3, [sp, #84]	; 0x54
 8003ecc:	1dc3      	adds	r3, r0, #7
 8003ece:	f023 0307 	bic.w	r3, r3, #7
 8003ed2:	f103 0108 	add.w	r1, r3, #8
 8003ed6:	910e      	str	r1, [sp, #56]	; 0x38
 8003ed8:	f8d3 8000 	ldr.w	r8, [r3]
 8003edc:	685d      	ldr	r5, [r3, #4]
 8003ede:	4642      	mov	r2, r8
 8003ee0:	462b      	mov	r3, r5
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	4640      	mov	r0, r8
 8003ee6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8003eea:	f003 f83b 	bl	8006f64 <__fpclassifyd>
 8003eee:	2801      	cmp	r0, #1
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	4640      	mov	r0, r8
 8003ef4:	f040 84d0 	bne.w	8004898 <_svfprintf_r+0xd48>
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2300      	movs	r3, #0
 8003efc:	f004 fd62 	bl	80089c4 <__aeabi_dcmplt>
 8003f00:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003f04:	b110      	cbz	r0, 8003f0c <_svfprintf_r+0x3bc>
 8003f06:	212d      	movs	r1, #45	; 0x2d
 8003f08:	f88d 110f 	strb.w	r1, [sp, #271]	; 0x10f
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8003f10:	2300      	movs	r3, #0
 8003f12:	9312      	str	r3, [sp, #72]	; 0x48
 8003f14:	4aa0      	ldr	r2, [pc, #640]	; (8004198 <_svfprintf_r+0x648>)
 8003f16:	4ba1      	ldr	r3, [pc, #644]	; (800419c <_svfprintf_r+0x64c>)
 8003f18:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003f1a:	2847      	cmp	r0, #71	; 0x47
 8003f1c:	bfd8      	it	le
 8003f1e:	461a      	movle	r2, r3
 8003f20:	9211      	str	r2, [sp, #68]	; 0x44
 8003f22:	9a08      	ldr	r2, [sp, #32]
 8003f24:	2303      	movs	r3, #3
 8003f26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f2a:	930d      	str	r3, [sp, #52]	; 0x34
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	9208      	str	r2, [sp, #32]
 8003f30:	9316      	str	r3, [sp, #88]	; 0x58
 8003f32:	e77b      	b.n	8003e2c <_svfprintf_r+0x2dc>
 8003f34:	9b08      	ldr	r3, [sp, #32]
 8003f36:	f043 0308 	orr.w	r3, r3, #8
 8003f3a:	9308      	str	r3, [sp, #32]
 8003f3c:	e666      	b.n	8003c0c <_svfprintf_r+0xbc>
 8003f3e:	9908      	ldr	r1, [sp, #32]
 8003f40:	9009      	str	r0, [sp, #36]	; 0x24
 8003f42:	f041 0110 	orr.w	r1, r1, #16
 8003f46:	9108      	str	r1, [sp, #32]
 8003f48:	9a08      	ldr	r2, [sp, #32]
 8003f4a:	9315      	str	r3, [sp, #84]	; 0x54
 8003f4c:	f012 0110 	ands.w	r1, r2, #16
 8003f50:	f000 8090 	beq.w	8004074 <_svfprintf_r+0x524>
 8003f54:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003f56:	6803      	ldr	r3, [r0, #0]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	1a99      	subs	r1, r3, r2
 8003f5c:	bf18      	it	ne
 8003f5e:	2101      	movne	r1, #1
 8003f60:	3004      	adds	r0, #4
 8003f62:	900e      	str	r0, [sp, #56]	; 0x38
 8003f64:	2000      	movs	r0, #0
 8003f66:	f88d 010f 	strb.w	r0, [sp, #271]	; 0x10f
 8003f6a:	e727      	b.n	8003dbc <_svfprintf_r+0x26c>
 8003f6c:	9908      	ldr	r1, [sp, #32]
 8003f6e:	9009      	str	r0, [sp, #36]	; 0x24
 8003f70:	f041 0110 	orr.w	r1, r1, #16
 8003f74:	9108      	str	r1, [sp, #32]
 8003f76:	9a08      	ldr	r2, [sp, #32]
 8003f78:	9315      	str	r3, [sp, #84]	; 0x54
 8003f7a:	06d0      	lsls	r0, r2, #27
 8003f7c:	f140 80b9 	bpl.w	80040f2 <_svfprintf_r+0x5a2>
 8003f80:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003f82:	6803      	ldr	r3, [r0, #0]
 8003f84:	2201      	movs	r2, #1
 8003f86:	1c19      	adds	r1, r3, #0
 8003f88:	bf18      	it	ne
 8003f8a:	2101      	movne	r1, #1
 8003f8c:	3004      	adds	r0, #4
 8003f8e:	900e      	str	r0, [sp, #56]	; 0x38
 8003f90:	e7e8      	b.n	8003f64 <_svfprintf_r+0x414>
 8003f92:	4a83      	ldr	r2, [pc, #524]	; (80041a0 <_svfprintf_r+0x650>)
 8003f94:	9315      	str	r3, [sp, #84]	; 0x54
 8003f96:	9b08      	ldr	r3, [sp, #32]
 8003f98:	921c      	str	r2, [sp, #112]	; 0x70
 8003f9a:	06da      	lsls	r2, r3, #27
 8003f9c:	9009      	str	r0, [sp, #36]	; 0x24
 8003f9e:	f100 810d 	bmi.w	80041bc <_svfprintf_r+0x66c>
 8003fa2:	9908      	ldr	r1, [sp, #32]
 8003fa4:	064b      	lsls	r3, r1, #25
 8003fa6:	f140 8109 	bpl.w	80041bc <_svfprintf_r+0x66c>
 8003faa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fac:	8813      	ldrh	r3, [r2, #0]
 8003fae:	3204      	adds	r2, #4
 8003fb0:	920e      	str	r2, [sp, #56]	; 0x38
 8003fb2:	1c19      	adds	r1, r3, #0
 8003fb4:	9a08      	ldr	r2, [sp, #32]
 8003fb6:	bf18      	it	ne
 8003fb8:	2101      	movne	r1, #1
 8003fba:	420a      	tst	r2, r1
 8003fbc:	f000 83ca 	beq.w	8004754 <_svfprintf_r+0xc04>
 8003fc0:	9908      	ldr	r1, [sp, #32]
 8003fc2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003fc4:	2230      	movs	r2, #48	; 0x30
 8003fc6:	f041 0102 	orr.w	r1, r1, #2
 8003fca:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8003fce:	9108      	str	r1, [sp, #32]
 8003fd0:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	e7c4      	b.n	8003f64 <_svfprintf_r+0x414>
 8003fda:	9b08      	ldr	r3, [sp, #32]
 8003fdc:	f043 0310 	orr.w	r3, r3, #16
 8003fe0:	9308      	str	r3, [sp, #32]
 8003fe2:	e613      	b.n	8003c0c <_svfprintf_r+0xbc>
 8003fe4:	2500      	movs	r5, #0
 8003fe6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fe8:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8003fec:	9315      	str	r3, [sp, #84]	; 0x54
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ff2:	9009      	str	r0, [sp, #36]	; 0x24
 8003ff4:	9211      	str	r2, [sp, #68]	; 0x44
 8003ff6:	1d1f      	adds	r7, r3, #4
 8003ff8:	2a00      	cmp	r2, #0
 8003ffa:	f000 864b 	beq.w	8004c94 <_svfprintf_r+0x1144>
 8003ffe:	2c00      	cmp	r4, #0
 8004000:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004002:	f2c0 8602 	blt.w	8004c0a <_svfprintf_r+0x10ba>
 8004006:	4629      	mov	r1, r5
 8004008:	4622      	mov	r2, r4
 800400a:	f002 fad1 	bl	80065b0 <memchr>
 800400e:	2800      	cmp	r0, #0
 8004010:	f000 866f 	beq.w	8004cf2 <_svfprintf_r+0x11a2>
 8004014:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004016:	9512      	str	r5, [sp, #72]	; 0x48
 8004018:	1ac0      	subs	r0, r0, r3
 800401a:	42a0      	cmp	r0, r4
 800401c:	900d      	str	r0, [sp, #52]	; 0x34
 800401e:	bfd1      	iteee	le
 8004020:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 8004022:	f89d 110f 	ldrbgt.w	r1, [sp, #271]	; 0x10f
 8004026:	970e      	strgt	r7, [sp, #56]	; 0x38
 8004028:	ea24 70e4 	bicgt.w	r0, r4, r4, asr #31
 800402c:	bfd3      	iteet	le
 800402e:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8004032:	900a      	strgt	r0, [sp, #40]	; 0x28
 8004034:	940d      	strgt	r4, [sp, #52]	; 0x34
 8004036:	930a      	strle	r3, [sp, #40]	; 0x28
 8004038:	bfdc      	itt	le
 800403a:	f89d 110f 	ldrble.w	r1, [sp, #271]	; 0x10f
 800403e:	970e      	strle	r7, [sp, #56]	; 0x38
 8004040:	9516      	str	r5, [sp, #88]	; 0x58
 8004042:	e6f3      	b.n	8003e2c <_svfprintf_r+0x2dc>
 8004044:	9a08      	ldr	r2, [sp, #32]
 8004046:	f042 0210 	orr.w	r2, r2, #16
 800404a:	9208      	str	r2, [sp, #32]
 800404c:	e5de      	b.n	8003c0c <_svfprintf_r+0xbc>
 800404e:	9009      	str	r0, [sp, #36]	; 0x24
 8004050:	9808      	ldr	r0, [sp, #32]
 8004052:	06c3      	lsls	r3, r0, #27
 8004054:	f140 843f 	bpl.w	80048d6 <_svfprintf_r+0xd86>
 8004058:	990e      	ldr	r1, [sp, #56]	; 0x38
 800405a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800405c:	680b      	ldr	r3, [r1, #0]
 800405e:	3104      	adds	r1, #4
 8004060:	910e      	str	r1, [sp, #56]	; 0x38
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	e5a2      	b.n	8003bac <_svfprintf_r+0x5c>
 8004066:	9a08      	ldr	r2, [sp, #32]
 8004068:	9009      	str	r0, [sp, #36]	; 0x24
 800406a:	f012 0110 	ands.w	r1, r2, #16
 800406e:	9315      	str	r3, [sp, #84]	; 0x54
 8004070:	f47f af70 	bne.w	8003f54 <_svfprintf_r+0x404>
 8004074:	9b08      	ldr	r3, [sp, #32]
 8004076:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 800407a:	f000 8437 	beq.w	80048ec <_svfprintf_r+0xd9c>
 800407e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004080:	8803      	ldrh	r3, [r0, #0]
 8004082:	460a      	mov	r2, r1
 8004084:	1c19      	adds	r1, r3, #0
 8004086:	bf18      	it	ne
 8004088:	2101      	movne	r1, #1
 800408a:	3004      	adds	r0, #4
 800408c:	900e      	str	r0, [sp, #56]	; 0x38
 800408e:	e769      	b.n	8003f64 <_svfprintf_r+0x414>
 8004090:	9009      	str	r0, [sp, #36]	; 0x24
 8004092:	9315      	str	r3, [sp, #84]	; 0x54
 8004094:	2b00      	cmp	r3, #0
 8004096:	f43f ae2b 	beq.w	8003cf0 <_svfprintf_r+0x1a0>
 800409a:	2101      	movs	r1, #1
 800409c:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 80040a0:	aa2f      	add	r2, sp, #188	; 0xbc
 80040a2:	2300      	movs	r3, #0
 80040a4:	910a      	str	r1, [sp, #40]	; 0x28
 80040a6:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 80040aa:	910d      	str	r1, [sp, #52]	; 0x34
 80040ac:	9211      	str	r2, [sp, #68]	; 0x44
 80040ae:	2300      	movs	r3, #0
 80040b0:	9312      	str	r3, [sp, #72]	; 0x48
 80040b2:	9316      	str	r3, [sp, #88]	; 0x58
 80040b4:	e6be      	b.n	8003e34 <_svfprintf_r+0x2e4>
 80040b6:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f47f ada6 	bne.w	8003c0c <_svfprintf_r+0xbc>
 80040c0:	f88d 710f 	strb.w	r7, [sp, #271]	; 0x10f
 80040c4:	e5a2      	b.n	8003c0c <_svfprintf_r+0xbc>
 80040c6:	9a08      	ldr	r2, [sp, #32]
 80040c8:	f042 0201 	orr.w	r2, r2, #1
 80040cc:	9208      	str	r2, [sp, #32]
 80040ce:	e59d      	b.n	8003c0c <_svfprintf_r+0xbc>
 80040d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80040d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80040da:	1d0b      	adds	r3, r1, #4
 80040dc:	2a00      	cmp	r2, #0
 80040de:	f6ff adf7 	blt.w	8003cd0 <_svfprintf_r+0x180>
 80040e2:	930e      	str	r3, [sp, #56]	; 0x38
 80040e4:	e592      	b.n	8003c0c <_svfprintf_r+0xbc>
 80040e6:	9a08      	ldr	r2, [sp, #32]
 80040e8:	9009      	str	r0, [sp, #36]	; 0x24
 80040ea:	06d0      	lsls	r0, r2, #27
 80040ec:	9315      	str	r3, [sp, #84]	; 0x54
 80040ee:	f53f af47 	bmi.w	8003f80 <_svfprintf_r+0x430>
 80040f2:	9908      	ldr	r1, [sp, #32]
 80040f4:	0649      	lsls	r1, r1, #25
 80040f6:	f140 83ea 	bpl.w	80048ce <_svfprintf_r+0xd7e>
 80040fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040fc:	8813      	ldrh	r3, [r2, #0]
 80040fe:	2201      	movs	r2, #1
 8004100:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004102:	1c19      	adds	r1, r3, #0
 8004104:	bf18      	it	ne
 8004106:	2101      	movne	r1, #1
 8004108:	3004      	adds	r0, #4
 800410a:	900e      	str	r0, [sp, #56]	; 0x38
 800410c:	e72a      	b.n	8003f64 <_svfprintf_r+0x414>
 800410e:	9009      	str	r0, [sp, #36]	; 0x24
 8004110:	9808      	ldr	r0, [sp, #32]
 8004112:	9315      	str	r3, [sp, #84]	; 0x54
 8004114:	06c3      	lsls	r3, r0, #27
 8004116:	f57f ae41 	bpl.w	8003d9c <_svfprintf_r+0x24c>
 800411a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800411c:	680b      	ldr	r3, [r1, #0]
 800411e:	3104      	adds	r1, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	910e      	str	r1, [sp, #56]	; 0x38
 8004124:	f6bf ae46 	bge.w	8003db4 <_svfprintf_r+0x264>
 8004128:	425b      	negs	r3, r3
 800412a:	222d      	movs	r2, #45	; 0x2d
 800412c:	1c19      	adds	r1, r3, #0
 800412e:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8004132:	bf18      	it	ne
 8004134:	2101      	movne	r1, #1
 8004136:	2201      	movs	r2, #1
 8004138:	e640      	b.n	8003dbc <_svfprintf_r+0x26c>
 800413a:	9908      	ldr	r1, [sp, #32]
 800413c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004140:	9108      	str	r1, [sp, #32]
 8004142:	e563      	b.n	8003c0c <_svfprintf_r+0xbc>
 8004144:	9315      	str	r3, [sp, #84]	; 0x54
 8004146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004148:	990e      	ldr	r1, [sp, #56]	; 0x38
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	9009      	str	r0, [sp, #36]	; 0x24
 800414e:	2200      	movs	r2, #0
 8004150:	2001      	movs	r0, #1
 8004152:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8004156:	3104      	adds	r1, #4
 8004158:	aa2f      	add	r2, sp, #188	; 0xbc
 800415a:	900a      	str	r0, [sp, #40]	; 0x28
 800415c:	910e      	str	r1, [sp, #56]	; 0x38
 800415e:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8004162:	900d      	str	r0, [sp, #52]	; 0x34
 8004164:	9211      	str	r2, [sp, #68]	; 0x44
 8004166:	e7a2      	b.n	80040ae <_svfprintf_r+0x55e>
 8004168:	490e      	ldr	r1, [pc, #56]	; (80041a4 <_svfprintf_r+0x654>)
 800416a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800416c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800416e:	911c      	str	r1, [sp, #112]	; 0x70
 8004170:	9908      	ldr	r1, [sp, #32]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	9009      	str	r0, [sp, #36]	; 0x24
 8004176:	3204      	adds	r2, #4
 8004178:	f041 0102 	orr.w	r1, r1, #2
 800417c:	2078      	movs	r0, #120	; 0x78
 800417e:	920e      	str	r2, [sp, #56]	; 0x38
 8004180:	9108      	str	r1, [sp, #32]
 8004182:	2230      	movs	r2, #48	; 0x30
 8004184:	1c19      	adds	r1, r3, #0
 8004186:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 800418a:	bf18      	it	ne
 800418c:	2101      	movne	r1, #1
 800418e:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8004192:	2202      	movs	r2, #2
 8004194:	9015      	str	r0, [sp, #84]	; 0x54
 8004196:	e6e5      	b.n	8003f64 <_svfprintf_r+0x414>
 8004198:	08009104 	.word	0x08009104
 800419c:	08009100 	.word	0x08009100
 80041a0:	08009110 	.word	0x08009110
 80041a4:	08009124 	.word	0x08009124
 80041a8:	08008e68 	.word	0x08008e68
 80041ac:	9315      	str	r3, [sp, #84]	; 0x54
 80041ae:	9b08      	ldr	r3, [sp, #32]
 80041b0:	49a4      	ldr	r1, [pc, #656]	; (8004444 <_svfprintf_r+0x8f4>)
 80041b2:	9009      	str	r0, [sp, #36]	; 0x24
 80041b4:	06da      	lsls	r2, r3, #27
 80041b6:	911c      	str	r1, [sp, #112]	; 0x70
 80041b8:	f57f aef3 	bpl.w	8003fa2 <_svfprintf_r+0x452>
 80041bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80041be:	6803      	ldr	r3, [r0, #0]
 80041c0:	3004      	adds	r0, #4
 80041c2:	900e      	str	r0, [sp, #56]	; 0x38
 80041c4:	e6f5      	b.n	8003fb2 <_svfprintf_r+0x462>
 80041c6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80041c8:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 80041cc:	b16b      	cbz	r3, 80041ea <_svfprintf_r+0x69a>
 80041ce:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80041d0:	f20d 130f 	addw	r3, sp, #271	; 0x10f
 80041d4:	3401      	adds	r4, #1
 80041d6:	6033      	str	r3, [r6, #0]
 80041d8:	3501      	adds	r5, #1
 80041da:	2301      	movs	r3, #1
 80041dc:	2c07      	cmp	r4, #7
 80041de:	6073      	str	r3, [r6, #4]
 80041e0:	953b      	str	r5, [sp, #236]	; 0xec
 80041e2:	943a      	str	r4, [sp, #232]	; 0xe8
 80041e4:	f300 81f5 	bgt.w	80045d2 <_svfprintf_r+0xa82>
 80041e8:	3608      	adds	r6, #8
 80041ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80041ec:	b163      	cbz	r3, 8004208 <_svfprintf_r+0x6b8>
 80041ee:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80041f0:	ab43      	add	r3, sp, #268	; 0x10c
 80041f2:	3401      	adds	r4, #1
 80041f4:	6033      	str	r3, [r6, #0]
 80041f6:	3502      	adds	r5, #2
 80041f8:	2302      	movs	r3, #2
 80041fa:	2c07      	cmp	r4, #7
 80041fc:	6073      	str	r3, [r6, #4]
 80041fe:	953b      	str	r5, [sp, #236]	; 0xec
 8004200:	943a      	str	r4, [sp, #232]	; 0xe8
 8004202:	f300 81db 	bgt.w	80045bc <_svfprintf_r+0xa6c>
 8004206:	3608      	adds	r6, #8
 8004208:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800420a:	2b80      	cmp	r3, #128	; 0x80
 800420c:	f000 8122 	beq.w	8004454 <_svfprintf_r+0x904>
 8004210:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004214:	1ac7      	subs	r7, r0, r3
 8004216:	2f00      	cmp	r7, #0
 8004218:	dd32      	ble.n	8004280 <_svfprintf_r+0x730>
 800421a:	2f10      	cmp	r7, #16
 800421c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800421e:	f8df 822c 	ldr.w	r8, [pc, #556]	; 800444c <_svfprintf_r+0x8fc>
 8004222:	dd22      	ble.n	800426a <_svfprintf_r+0x71a>
 8004224:	4623      	mov	r3, r4
 8004226:	f04f 0910 	mov.w	r9, #16
 800422a:	4644      	mov	r4, r8
 800422c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004230:	e003      	b.n	800423a <_svfprintf_r+0x6ea>
 8004232:	3f10      	subs	r7, #16
 8004234:	3608      	adds	r6, #8
 8004236:	2f10      	cmp	r7, #16
 8004238:	dd15      	ble.n	8004266 <_svfprintf_r+0x716>
 800423a:	3301      	adds	r3, #1
 800423c:	3510      	adds	r5, #16
 800423e:	2b07      	cmp	r3, #7
 8004240:	e886 0210 	stmia.w	r6, {r4, r9}
 8004244:	953b      	str	r5, [sp, #236]	; 0xec
 8004246:	933a      	str	r3, [sp, #232]	; 0xe8
 8004248:	ddf3      	ble.n	8004232 <_svfprintf_r+0x6e2>
 800424a:	4640      	mov	r0, r8
 800424c:	4651      	mov	r1, sl
 800424e:	465a      	mov	r2, fp
 8004250:	f002 fff0 	bl	8007234 <__ssprint_r>
 8004254:	2800      	cmp	r0, #0
 8004256:	f47f ad52 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 800425a:	3f10      	subs	r7, #16
 800425c:	2f10      	cmp	r7, #16
 800425e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004260:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004262:	ae1f      	add	r6, sp, #124	; 0x7c
 8004264:	dce9      	bgt.n	800423a <_svfprintf_r+0x6ea>
 8004266:	46a0      	mov	r8, r4
 8004268:	461c      	mov	r4, r3
 800426a:	3401      	adds	r4, #1
 800426c:	19ed      	adds	r5, r5, r7
 800426e:	2c07      	cmp	r4, #7
 8004270:	f8c6 8000 	str.w	r8, [r6]
 8004274:	6077      	str	r7, [r6, #4]
 8004276:	953b      	str	r5, [sp, #236]	; 0xec
 8004278:	943a      	str	r4, [sp, #232]	; 0xe8
 800427a:	f300 8194 	bgt.w	80045a6 <_svfprintf_r+0xa56>
 800427e:	3608      	adds	r6, #8
 8004280:	9908      	ldr	r1, [sp, #32]
 8004282:	05ca      	lsls	r2, r1, #23
 8004284:	d472      	bmi.n	800436c <_svfprintf_r+0x81c>
 8004286:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800428a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800428c:	6073      	str	r3, [r6, #4]
 800428e:	3401      	adds	r4, #1
 8004290:	18ed      	adds	r5, r5, r3
 8004292:	2c07      	cmp	r4, #7
 8004294:	6032      	str	r2, [r6, #0]
 8004296:	953b      	str	r5, [sp, #236]	; 0xec
 8004298:	943a      	str	r4, [sp, #232]	; 0xe8
 800429a:	dc5c      	bgt.n	8004356 <_svfprintf_r+0x806>
 800429c:	3608      	adds	r6, #8
 800429e:	9908      	ldr	r1, [sp, #32]
 80042a0:	074b      	lsls	r3, r1, #29
 80042a2:	d53e      	bpl.n	8004322 <_svfprintf_r+0x7d2>
 80042a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042a8:	1ad7      	subs	r7, r2, r3
 80042aa:	2f00      	cmp	r7, #0
 80042ac:	dd39      	ble.n	8004322 <_svfprintf_r+0x7d2>
 80042ae:	2f10      	cmp	r7, #16
 80042b0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80042b2:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8004450 <_svfprintf_r+0x900>
 80042b6:	dd22      	ble.n	80042fe <_svfprintf_r+0x7ae>
 80042b8:	4623      	mov	r3, r4
 80042ba:	f04f 0910 	mov.w	r9, #16
 80042be:	4644      	mov	r4, r8
 80042c0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80042c4:	e003      	b.n	80042ce <_svfprintf_r+0x77e>
 80042c6:	3f10      	subs	r7, #16
 80042c8:	3608      	adds	r6, #8
 80042ca:	2f10      	cmp	r7, #16
 80042cc:	dd15      	ble.n	80042fa <_svfprintf_r+0x7aa>
 80042ce:	3301      	adds	r3, #1
 80042d0:	3510      	adds	r5, #16
 80042d2:	2b07      	cmp	r3, #7
 80042d4:	e886 0210 	stmia.w	r6, {r4, r9}
 80042d8:	953b      	str	r5, [sp, #236]	; 0xec
 80042da:	933a      	str	r3, [sp, #232]	; 0xe8
 80042dc:	ddf3      	ble.n	80042c6 <_svfprintf_r+0x776>
 80042de:	4640      	mov	r0, r8
 80042e0:	4651      	mov	r1, sl
 80042e2:	465a      	mov	r2, fp
 80042e4:	f002 ffa6 	bl	8007234 <__ssprint_r>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	f47f ad08 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 80042ee:	3f10      	subs	r7, #16
 80042f0:	2f10      	cmp	r7, #16
 80042f2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042f4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80042f6:	ae1f      	add	r6, sp, #124	; 0x7c
 80042f8:	dce9      	bgt.n	80042ce <_svfprintf_r+0x77e>
 80042fa:	46a0      	mov	r8, r4
 80042fc:	461c      	mov	r4, r3
 80042fe:	3401      	adds	r4, #1
 8004300:	197d      	adds	r5, r7, r5
 8004302:	2c07      	cmp	r4, #7
 8004304:	f8c6 8000 	str.w	r8, [r6]
 8004308:	6077      	str	r7, [r6, #4]
 800430a:	953b      	str	r5, [sp, #236]	; 0xec
 800430c:	943a      	str	r4, [sp, #232]	; 0xe8
 800430e:	dd08      	ble.n	8004322 <_svfprintf_r+0x7d2>
 8004310:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004312:	4651      	mov	r1, sl
 8004314:	465a      	mov	r2, fp
 8004316:	f002 ff8d 	bl	8007234 <__ssprint_r>
 800431a:	2800      	cmp	r0, #0
 800431c:	f47f acef 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 8004320:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004322:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004326:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004328:	428a      	cmp	r2, r1
 800432a:	bfac      	ite	ge
 800432c:	1880      	addge	r0, r0, r2
 800432e:	1840      	addlt	r0, r0, r1
 8004330:	900c      	str	r0, [sp, #48]	; 0x30
 8004332:	2d00      	cmp	r5, #0
 8004334:	f040 8129 	bne.w	800458a <_svfprintf_r+0xa3a>
 8004338:	2300      	movs	r3, #0
 800433a:	933a      	str	r3, [sp, #232]	; 0xe8
 800433c:	ae1f      	add	r6, sp, #124	; 0x7c
 800433e:	e435      	b.n	8003bac <_svfprintf_r+0x5c>
 8004340:	46a0      	mov	r8, r4
 8004342:	461c      	mov	r4, r3
 8004344:	3401      	adds	r4, #1
 8004346:	19ed      	adds	r5, r5, r7
 8004348:	2c07      	cmp	r4, #7
 800434a:	f8c6 8000 	str.w	r8, [r6]
 800434e:	6077      	str	r7, [r6, #4]
 8004350:	953b      	str	r5, [sp, #236]	; 0xec
 8004352:	943a      	str	r4, [sp, #232]	; 0xe8
 8004354:	dda2      	ble.n	800429c <_svfprintf_r+0x74c>
 8004356:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004358:	4651      	mov	r1, sl
 800435a:	465a      	mov	r2, fp
 800435c:	f002 ff6a 	bl	8007234 <__ssprint_r>
 8004360:	2800      	cmp	r0, #0
 8004362:	f47f accc 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 8004366:	ae1f      	add	r6, sp, #124	; 0x7c
 8004368:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800436a:	e798      	b.n	800429e <_svfprintf_r+0x74e>
 800436c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800436e:	2865      	cmp	r0, #101	; 0x65
 8004370:	f340 80aa 	ble.w	80044c8 <_svfprintf_r+0x978>
 8004374:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8004378:	2200      	movs	r2, #0
 800437a:	2300      	movs	r3, #0
 800437c:	f004 fb18 	bl	80089b0 <__aeabi_dcmpeq>
 8004380:	2800      	cmp	r0, #0
 8004382:	f000 8131 	beq.w	80045e8 <_svfprintf_r+0xa98>
 8004386:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004388:	4b2f      	ldr	r3, [pc, #188]	; (8004448 <_svfprintf_r+0x8f8>)
 800438a:	3401      	adds	r4, #1
 800438c:	6033      	str	r3, [r6, #0]
 800438e:	3501      	adds	r5, #1
 8004390:	2301      	movs	r3, #1
 8004392:	2c07      	cmp	r4, #7
 8004394:	6073      	str	r3, [r6, #4]
 8004396:	953b      	str	r5, [sp, #236]	; 0xec
 8004398:	943a      	str	r4, [sp, #232]	; 0xe8
 800439a:	f300 82b8 	bgt.w	800490e <_svfprintf_r+0xdbe>
 800439e:	3608      	adds	r6, #8
 80043a0:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80043a2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80043a4:	4299      	cmp	r1, r3
 80043a6:	dc03      	bgt.n	80043b0 <_svfprintf_r+0x860>
 80043a8:	9a08      	ldr	r2, [sp, #32]
 80043aa:	07d3      	lsls	r3, r2, #31
 80043ac:	f57f af77 	bpl.w	800429e <_svfprintf_r+0x74e>
 80043b0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80043b2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80043b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043b6:	6070      	str	r0, [r6, #4]
 80043b8:	3401      	adds	r4, #1
 80043ba:	182d      	adds	r5, r5, r0
 80043bc:	2c07      	cmp	r4, #7
 80043be:	6033      	str	r3, [r6, #0]
 80043c0:	953b      	str	r5, [sp, #236]	; 0xec
 80043c2:	943a      	str	r4, [sp, #232]	; 0xe8
 80043c4:	f300 8300 	bgt.w	80049c8 <_svfprintf_r+0xe78>
 80043c8:	3608      	adds	r6, #8
 80043ca:	9910      	ldr	r1, [sp, #64]	; 0x40
 80043cc:	1e4f      	subs	r7, r1, #1
 80043ce:	2f00      	cmp	r7, #0
 80043d0:	f77f af65 	ble.w	800429e <_svfprintf_r+0x74e>
 80043d4:	2f10      	cmp	r7, #16
 80043d6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80043d8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800444c <_svfprintf_r+0x8fc>
 80043dc:	ddb2      	ble.n	8004344 <_svfprintf_r+0x7f4>
 80043de:	4623      	mov	r3, r4
 80043e0:	f04f 0910 	mov.w	r9, #16
 80043e4:	4644      	mov	r4, r8
 80043e6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80043ea:	e003      	b.n	80043f4 <_svfprintf_r+0x8a4>
 80043ec:	3608      	adds	r6, #8
 80043ee:	3f10      	subs	r7, #16
 80043f0:	2f10      	cmp	r7, #16
 80043f2:	dda5      	ble.n	8004340 <_svfprintf_r+0x7f0>
 80043f4:	3301      	adds	r3, #1
 80043f6:	3510      	adds	r5, #16
 80043f8:	2b07      	cmp	r3, #7
 80043fa:	e886 0210 	stmia.w	r6, {r4, r9}
 80043fe:	953b      	str	r5, [sp, #236]	; 0xec
 8004400:	933a      	str	r3, [sp, #232]	; 0xe8
 8004402:	ddf3      	ble.n	80043ec <_svfprintf_r+0x89c>
 8004404:	4640      	mov	r0, r8
 8004406:	4651      	mov	r1, sl
 8004408:	465a      	mov	r2, fp
 800440a:	f002 ff13 	bl	8007234 <__ssprint_r>
 800440e:	2800      	cmp	r0, #0
 8004410:	f47f ac75 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 8004414:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004416:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004418:	ae1f      	add	r6, sp, #124	; 0x7c
 800441a:	e7e8      	b.n	80043ee <_svfprintf_r+0x89e>
 800441c:	2a00      	cmp	r2, #0
 800441e:	f040 80be 	bne.w	800459e <_svfprintf_r+0xa4e>
 8004422:	9808      	ldr	r0, [sp, #32]
 8004424:	07c1      	lsls	r1, r0, #31
 8004426:	bf5c      	itt	pl
 8004428:	920d      	strpl	r2, [sp, #52]	; 0x34
 800442a:	f8cd b044 	strpl.w	fp, [sp, #68]	; 0x44
 800442e:	f57f acf3 	bpl.w	8003e18 <_svfprintf_r+0x2c8>
 8004432:	991d      	ldr	r1, [sp, #116]	; 0x74
 8004434:	2330      	movs	r3, #48	; 0x30
 8004436:	f10d 02e3 	add.w	r2, sp, #227	; 0xe3
 800443a:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 800443e:	910d      	str	r1, [sp, #52]	; 0x34
 8004440:	9211      	str	r2, [sp, #68]	; 0x44
 8004442:	e4e9      	b.n	8003e18 <_svfprintf_r+0x2c8>
 8004444:	08009124 	.word	0x08009124
 8004448:	08009140 	.word	0x08009140
 800444c:	08008e78 	.word	0x08008e78
 8004450:	08008e68 	.word	0x08008e68
 8004454:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004456:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004458:	1a47      	subs	r7, r0, r1
 800445a:	2f00      	cmp	r7, #0
 800445c:	f77f aed8 	ble.w	8004210 <_svfprintf_r+0x6c0>
 8004460:	2f10      	cmp	r7, #16
 8004462:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004464:	f8df 86d8 	ldr.w	r8, [pc, #1752]	; 8004b40 <_svfprintf_r+0xff0>
 8004468:	dd22      	ble.n	80044b0 <_svfprintf_r+0x960>
 800446a:	4623      	mov	r3, r4
 800446c:	f04f 0910 	mov.w	r9, #16
 8004470:	4644      	mov	r4, r8
 8004472:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004476:	e003      	b.n	8004480 <_svfprintf_r+0x930>
 8004478:	3f10      	subs	r7, #16
 800447a:	3608      	adds	r6, #8
 800447c:	2f10      	cmp	r7, #16
 800447e:	dd15      	ble.n	80044ac <_svfprintf_r+0x95c>
 8004480:	3301      	adds	r3, #1
 8004482:	3510      	adds	r5, #16
 8004484:	2b07      	cmp	r3, #7
 8004486:	e886 0210 	stmia.w	r6, {r4, r9}
 800448a:	953b      	str	r5, [sp, #236]	; 0xec
 800448c:	933a      	str	r3, [sp, #232]	; 0xe8
 800448e:	ddf3      	ble.n	8004478 <_svfprintf_r+0x928>
 8004490:	4640      	mov	r0, r8
 8004492:	4651      	mov	r1, sl
 8004494:	465a      	mov	r2, fp
 8004496:	f002 fecd 	bl	8007234 <__ssprint_r>
 800449a:	2800      	cmp	r0, #0
 800449c:	f47f ac2f 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 80044a0:	3f10      	subs	r7, #16
 80044a2:	2f10      	cmp	r7, #16
 80044a4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80044a6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80044a8:	ae1f      	add	r6, sp, #124	; 0x7c
 80044aa:	dce9      	bgt.n	8004480 <_svfprintf_r+0x930>
 80044ac:	46a0      	mov	r8, r4
 80044ae:	461c      	mov	r4, r3
 80044b0:	3401      	adds	r4, #1
 80044b2:	19ed      	adds	r5, r5, r7
 80044b4:	2c07      	cmp	r4, #7
 80044b6:	f8c6 8000 	str.w	r8, [r6]
 80044ba:	6077      	str	r7, [r6, #4]
 80044bc:	953b      	str	r5, [sp, #236]	; 0xec
 80044be:	943a      	str	r4, [sp, #232]	; 0xe8
 80044c0:	f300 81df 	bgt.w	8004882 <_svfprintf_r+0xd32>
 80044c4:	3608      	adds	r6, #8
 80044c6:	e6a3      	b.n	8004210 <_svfprintf_r+0x6c0>
 80044c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80044ca:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80044cc:	2a01      	cmp	r2, #1
 80044ce:	f340 81a5 	ble.w	800481c <_svfprintf_r+0xccc>
 80044d2:	3401      	adds	r4, #1
 80044d4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80044d6:	3501      	adds	r5, #1
 80044d8:	2301      	movs	r3, #1
 80044da:	2c07      	cmp	r4, #7
 80044dc:	6030      	str	r0, [r6, #0]
 80044de:	6073      	str	r3, [r6, #4]
 80044e0:	953b      	str	r5, [sp, #236]	; 0xec
 80044e2:	943a      	str	r4, [sp, #232]	; 0xe8
 80044e4:	f300 81c1 	bgt.w	800486a <_svfprintf_r+0xd1a>
 80044e8:	3608      	adds	r6, #8
 80044ea:	991a      	ldr	r1, [sp, #104]	; 0x68
 80044ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80044ee:	6071      	str	r1, [r6, #4]
 80044f0:	3401      	adds	r4, #1
 80044f2:	186d      	adds	r5, r5, r1
 80044f4:	2c07      	cmp	r4, #7
 80044f6:	6032      	str	r2, [r6, #0]
 80044f8:	953b      	str	r5, [sp, #236]	; 0xec
 80044fa:	943a      	str	r4, [sp, #232]	; 0xe8
 80044fc:	f300 81a9 	bgt.w	8004852 <_svfprintf_r+0xd02>
 8004500:	3608      	adds	r6, #8
 8004502:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8004506:	2200      	movs	r2, #0
 8004508:	2300      	movs	r3, #0
 800450a:	f004 fa51 	bl	80089b0 <__aeabi_dcmpeq>
 800450e:	2800      	cmp	r0, #0
 8004510:	f040 80f6 	bne.w	8004700 <_svfprintf_r+0xbb0>
 8004514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004516:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004518:	1e5a      	subs	r2, r3, #1
 800451a:	3401      	adds	r4, #1
 800451c:	1c43      	adds	r3, r0, #1
 800451e:	18ad      	adds	r5, r5, r2
 8004520:	2c07      	cmp	r4, #7
 8004522:	6033      	str	r3, [r6, #0]
 8004524:	6072      	str	r2, [r6, #4]
 8004526:	953b      	str	r5, [sp, #236]	; 0xec
 8004528:	943a      	str	r4, [sp, #232]	; 0xe8
 800452a:	dc22      	bgt.n	8004572 <_svfprintf_r+0xa22>
 800452c:	3608      	adds	r6, #8
 800452e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004530:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004532:	3401      	adds	r4, #1
 8004534:	18ed      	adds	r5, r5, r3
 8004536:	2c07      	cmp	r4, #7
 8004538:	ab3c      	add	r3, sp, #240	; 0xf0
 800453a:	6033      	str	r3, [r6, #0]
 800453c:	6070      	str	r0, [r6, #4]
 800453e:	953b      	str	r5, [sp, #236]	; 0xec
 8004540:	943a      	str	r4, [sp, #232]	; 0xe8
 8004542:	f77f aeab 	ble.w	800429c <_svfprintf_r+0x74c>
 8004546:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004548:	4651      	mov	r1, sl
 800454a:	465a      	mov	r2, fp
 800454c:	f002 fe72 	bl	8007234 <__ssprint_r>
 8004550:	2800      	cmp	r0, #0
 8004552:	f47f abd4 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 8004556:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004558:	ae1f      	add	r6, sp, #124	; 0x7c
 800455a:	e6a0      	b.n	800429e <_svfprintf_r+0x74e>
 800455c:	46a0      	mov	r8, r4
 800455e:	461c      	mov	r4, r3
 8004560:	3401      	adds	r4, #1
 8004562:	19ed      	adds	r5, r5, r7
 8004564:	2c07      	cmp	r4, #7
 8004566:	f8c6 8000 	str.w	r8, [r6]
 800456a:	6077      	str	r7, [r6, #4]
 800456c:	953b      	str	r5, [sp, #236]	; 0xec
 800456e:	943a      	str	r4, [sp, #232]	; 0xe8
 8004570:	dddc      	ble.n	800452c <_svfprintf_r+0x9dc>
 8004572:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004574:	4651      	mov	r1, sl
 8004576:	465a      	mov	r2, fp
 8004578:	f002 fe5c 	bl	8007234 <__ssprint_r>
 800457c:	2800      	cmp	r0, #0
 800457e:	f47f abbe 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 8004582:	ae1f      	add	r6, sp, #124	; 0x7c
 8004584:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004586:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004588:	e7d1      	b.n	800452e <_svfprintf_r+0x9de>
 800458a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800458c:	4651      	mov	r1, sl
 800458e:	465a      	mov	r2, fp
 8004590:	f002 fe50 	bl	8007234 <__ssprint_r>
 8004594:	2800      	cmp	r0, #0
 8004596:	f43f aecf 	beq.w	8004338 <_svfprintf_r+0x7e8>
 800459a:	f7ff bbb0 	b.w	8003cfe <_svfprintf_r+0x1ae>
 800459e:	910d      	str	r1, [sp, #52]	; 0x34
 80045a0:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80045a4:	e438      	b.n	8003e18 <_svfprintf_r+0x2c8>
 80045a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80045a8:	4651      	mov	r1, sl
 80045aa:	465a      	mov	r2, fp
 80045ac:	f002 fe42 	bl	8007234 <__ssprint_r>
 80045b0:	2800      	cmp	r0, #0
 80045b2:	f47f aba4 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 80045b6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80045b8:	ae1f      	add	r6, sp, #124	; 0x7c
 80045ba:	e661      	b.n	8004280 <_svfprintf_r+0x730>
 80045bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80045be:	4651      	mov	r1, sl
 80045c0:	465a      	mov	r2, fp
 80045c2:	f002 fe37 	bl	8007234 <__ssprint_r>
 80045c6:	2800      	cmp	r0, #0
 80045c8:	f47f ab99 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 80045cc:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80045ce:	ae1f      	add	r6, sp, #124	; 0x7c
 80045d0:	e61a      	b.n	8004208 <_svfprintf_r+0x6b8>
 80045d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80045d4:	4651      	mov	r1, sl
 80045d6:	465a      	mov	r2, fp
 80045d8:	f002 fe2c 	bl	8007234 <__ssprint_r>
 80045dc:	2800      	cmp	r0, #0
 80045de:	f47f ab8e 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 80045e2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80045e4:	ae1f      	add	r6, sp, #124	; 0x7c
 80045e6:	e600      	b.n	80041ea <_svfprintf_r+0x69a>
 80045e8:	9f40      	ldr	r7, [sp, #256]	; 0x100
 80045ea:	2f00      	cmp	r7, #0
 80045ec:	f340 819a 	ble.w	8004924 <_svfprintf_r+0xdd4>
 80045f0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80045f2:	9816      	ldr	r0, [sp, #88]	; 0x58
 80045f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80045f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045f8:	4287      	cmp	r7, r0
 80045fa:	bfa8      	it	ge
 80045fc:	4607      	movge	r7, r0
 80045fe:	1889      	adds	r1, r1, r2
 8004600:	2f00      	cmp	r7, #0
 8004602:	910d      	str	r1, [sp, #52]	; 0x34
 8004604:	dd0b      	ble.n	800461e <_svfprintf_r+0xace>
 8004606:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004608:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800460a:	6077      	str	r7, [r6, #4]
 800460c:	3401      	adds	r4, #1
 800460e:	19ed      	adds	r5, r5, r7
 8004610:	2c07      	cmp	r4, #7
 8004612:	6032      	str	r2, [r6, #0]
 8004614:	953b      	str	r5, [sp, #236]	; 0xec
 8004616:	943a      	str	r4, [sp, #232]	; 0xe8
 8004618:	f300 8304 	bgt.w	8004c24 <_svfprintf_r+0x10d4>
 800461c:	3608      	adds	r6, #8
 800461e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004620:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8004624:	1bdf      	subs	r7, r3, r7
 8004626:	2f00      	cmp	r7, #0
 8004628:	f340 80a0 	ble.w	800476c <_svfprintf_r+0xc1c>
 800462c:	2f10      	cmp	r7, #16
 800462e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004630:	f8df 850c 	ldr.w	r8, [pc, #1292]	; 8004b40 <_svfprintf_r+0xff0>
 8004634:	f340 815f 	ble.w	80048f6 <_svfprintf_r+0xda6>
 8004638:	4623      	mov	r3, r4
 800463a:	f04f 0910 	mov.w	r9, #16
 800463e:	4644      	mov	r4, r8
 8004640:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004644:	e004      	b.n	8004650 <_svfprintf_r+0xb00>
 8004646:	3608      	adds	r6, #8
 8004648:	3f10      	subs	r7, #16
 800464a:	2f10      	cmp	r7, #16
 800464c:	f340 8151 	ble.w	80048f2 <_svfprintf_r+0xda2>
 8004650:	3301      	adds	r3, #1
 8004652:	3510      	adds	r5, #16
 8004654:	2b07      	cmp	r3, #7
 8004656:	e886 0210 	stmia.w	r6, {r4, r9}
 800465a:	953b      	str	r5, [sp, #236]	; 0xec
 800465c:	933a      	str	r3, [sp, #232]	; 0xe8
 800465e:	ddf2      	ble.n	8004646 <_svfprintf_r+0xaf6>
 8004660:	4640      	mov	r0, r8
 8004662:	4651      	mov	r1, sl
 8004664:	465a      	mov	r2, fp
 8004666:	f002 fde5 	bl	8007234 <__ssprint_r>
 800466a:	2800      	cmp	r0, #0
 800466c:	f47f ab47 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 8004670:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004672:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004674:	ae1f      	add	r6, sp, #124	; 0x7c
 8004676:	e7e7      	b.n	8004648 <_svfprintf_r+0xaf8>
 8004678:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800467a:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 800467e:	f003 000f 	and.w	r0, r3, #15
 8004682:	460a      	mov	r2, r1
 8004684:	5c28      	ldrb	r0, [r5, r0]
 8004686:	3901      	subs	r1, #1
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	7010      	strb	r0, [r2, #0]
 800468c:	d1f7      	bne.n	800467e <_svfprintf_r+0xb2e>
 800468e:	ebc2 030b 	rsb	r3, r2, fp
 8004692:	9211      	str	r2, [sp, #68]	; 0x44
 8004694:	930d      	str	r3, [sp, #52]	; 0x34
 8004696:	f7ff bbbf 	b.w	8003e18 <_svfprintf_r+0x2c8>
 800469a:	2b09      	cmp	r3, #9
 800469c:	bf82      	ittt	hi
 800469e:	f64c 45cd 	movwhi	r5, #52429	; 0xcccd
 80046a2:	f10d 01e3 	addhi.w	r1, sp, #227	; 0xe3
 80046a6:	f6cc 45cc 	movthi	r5, #52428	; 0xcccc
 80046aa:	d809      	bhi.n	80046c0 <_svfprintf_r+0xb70>
 80046ac:	981d      	ldr	r0, [sp, #116]	; 0x74
 80046ae:	3330      	adds	r3, #48	; 0x30
 80046b0:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 80046b4:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 80046b8:	900d      	str	r0, [sp, #52]	; 0x34
 80046ba:	9111      	str	r1, [sp, #68]	; 0x44
 80046bc:	f7ff bbac 	b.w	8003e18 <_svfprintf_r+0x2c8>
 80046c0:	fba5 0203 	umull	r0, r2, r5, r3
 80046c4:	08d2      	lsrs	r2, r2, #3
 80046c6:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 80046ca:	4608      	mov	r0, r1
 80046cc:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 80046d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80046d4:	7001      	strb	r1, [r0, #0]
 80046d6:	4613      	mov	r3, r2
 80046d8:	1e41      	subs	r1, r0, #1
 80046da:	2a00      	cmp	r2, #0
 80046dc:	d1f0      	bne.n	80046c0 <_svfprintf_r+0xb70>
 80046de:	ebc0 030b 	rsb	r3, r0, fp
 80046e2:	9011      	str	r0, [sp, #68]	; 0x44
 80046e4:	930d      	str	r3, [sp, #52]	; 0x34
 80046e6:	f7ff bb97 	b.w	8003e18 <_svfprintf_r+0x2c8>
 80046ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80046ec:	4651      	mov	r1, sl
 80046ee:	465a      	mov	r2, fp
 80046f0:	f002 fda0 	bl	8007234 <__ssprint_r>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	f47f ab02 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 80046fa:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80046fc:	ae1f      	add	r6, sp, #124	; 0x7c
 80046fe:	e563      	b.n	80041c8 <_svfprintf_r+0x678>
 8004700:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004702:	1e4f      	subs	r7, r1, #1
 8004704:	2f00      	cmp	r7, #0
 8004706:	f77f af12 	ble.w	800452e <_svfprintf_r+0x9de>
 800470a:	2f10      	cmp	r7, #16
 800470c:	f8df 8430 	ldr.w	r8, [pc, #1072]	; 8004b40 <_svfprintf_r+0xff0>
 8004710:	f77f af26 	ble.w	8004560 <_svfprintf_r+0xa10>
 8004714:	4623      	mov	r3, r4
 8004716:	f04f 0910 	mov.w	r9, #16
 800471a:	4644      	mov	r4, r8
 800471c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004720:	e004      	b.n	800472c <_svfprintf_r+0xbdc>
 8004722:	3608      	adds	r6, #8
 8004724:	3f10      	subs	r7, #16
 8004726:	2f10      	cmp	r7, #16
 8004728:	f77f af18 	ble.w	800455c <_svfprintf_r+0xa0c>
 800472c:	3301      	adds	r3, #1
 800472e:	3510      	adds	r5, #16
 8004730:	2b07      	cmp	r3, #7
 8004732:	e886 0210 	stmia.w	r6, {r4, r9}
 8004736:	953b      	str	r5, [sp, #236]	; 0xec
 8004738:	933a      	str	r3, [sp, #232]	; 0xe8
 800473a:	ddf2      	ble.n	8004722 <_svfprintf_r+0xbd2>
 800473c:	4640      	mov	r0, r8
 800473e:	4651      	mov	r1, sl
 8004740:	465a      	mov	r2, fp
 8004742:	f002 fd77 	bl	8007234 <__ssprint_r>
 8004746:	2800      	cmp	r0, #0
 8004748:	f47f aad9 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 800474c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800474e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004750:	ae1f      	add	r6, sp, #124	; 0x7c
 8004752:	e7e7      	b.n	8004724 <_svfprintf_r+0xbd4>
 8004754:	2202      	movs	r2, #2
 8004756:	e405      	b.n	8003f64 <_svfprintf_r+0x414>
 8004758:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800475a:	4651      	mov	r1, sl
 800475c:	465a      	mov	r2, fp
 800475e:	f002 fd69 	bl	8007234 <__ssprint_r>
 8004762:	2800      	cmp	r0, #0
 8004764:	f47f aacb 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 8004768:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800476a:	ae1f      	add	r6, sp, #124	; 0x7c
 800476c:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800476e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004770:	4298      	cmp	r0, r3
 8004772:	dc45      	bgt.n	8004800 <_svfprintf_r+0xcb0>
 8004774:	9908      	ldr	r1, [sp, #32]
 8004776:	07c9      	lsls	r1, r1, #31
 8004778:	d442      	bmi.n	8004800 <_svfprintf_r+0xcb0>
 800477a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800477c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800477e:	180a      	adds	r2, r1, r0
 8004780:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004782:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004784:	1a8f      	subs	r7, r1, r2
 8004786:	1ac3      	subs	r3, r0, r3
 8004788:	42bb      	cmp	r3, r7
 800478a:	bfb8      	it	lt
 800478c:	461f      	movlt	r7, r3
 800478e:	2f00      	cmp	r7, #0
 8004790:	dd0a      	ble.n	80047a8 <_svfprintf_r+0xc58>
 8004792:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004794:	6032      	str	r2, [r6, #0]
 8004796:	3401      	adds	r4, #1
 8004798:	19ed      	adds	r5, r5, r7
 800479a:	2c07      	cmp	r4, #7
 800479c:	6077      	str	r7, [r6, #4]
 800479e:	953b      	str	r5, [sp, #236]	; 0xec
 80047a0:	943a      	str	r4, [sp, #232]	; 0xe8
 80047a2:	f300 8256 	bgt.w	8004c52 <_svfprintf_r+0x1102>
 80047a6:	3608      	adds	r6, #8
 80047a8:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 80047ac:	1bdf      	subs	r7, r3, r7
 80047ae:	2f00      	cmp	r7, #0
 80047b0:	f77f ad75 	ble.w	800429e <_svfprintf_r+0x74e>
 80047b4:	2f10      	cmp	r7, #16
 80047b6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80047b8:	f8df 8384 	ldr.w	r8, [pc, #900]	; 8004b40 <_svfprintf_r+0xff0>
 80047bc:	f77f adc2 	ble.w	8004344 <_svfprintf_r+0x7f4>
 80047c0:	4623      	mov	r3, r4
 80047c2:	f04f 0910 	mov.w	r9, #16
 80047c6:	4644      	mov	r4, r8
 80047c8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80047cc:	e004      	b.n	80047d8 <_svfprintf_r+0xc88>
 80047ce:	3608      	adds	r6, #8
 80047d0:	3f10      	subs	r7, #16
 80047d2:	2f10      	cmp	r7, #16
 80047d4:	f77f adb4 	ble.w	8004340 <_svfprintf_r+0x7f0>
 80047d8:	3301      	adds	r3, #1
 80047da:	3510      	adds	r5, #16
 80047dc:	2b07      	cmp	r3, #7
 80047de:	e886 0210 	stmia.w	r6, {r4, r9}
 80047e2:	953b      	str	r5, [sp, #236]	; 0xec
 80047e4:	933a      	str	r3, [sp, #232]	; 0xe8
 80047e6:	ddf2      	ble.n	80047ce <_svfprintf_r+0xc7e>
 80047e8:	4640      	mov	r0, r8
 80047ea:	4651      	mov	r1, sl
 80047ec:	465a      	mov	r2, fp
 80047ee:	f002 fd21 	bl	8007234 <__ssprint_r>
 80047f2:	2800      	cmp	r0, #0
 80047f4:	f47f aa83 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 80047f8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80047fa:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80047fc:	ae1f      	add	r6, sp, #124	; 0x7c
 80047fe:	e7e7      	b.n	80047d0 <_svfprintf_r+0xc80>
 8004800:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004802:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004804:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004806:	6070      	str	r0, [r6, #4]
 8004808:	3401      	adds	r4, #1
 800480a:	182d      	adds	r5, r5, r0
 800480c:	2c07      	cmp	r4, #7
 800480e:	6032      	str	r2, [r6, #0]
 8004810:	953b      	str	r5, [sp, #236]	; 0xec
 8004812:	943a      	str	r4, [sp, #232]	; 0xe8
 8004814:	f300 8211 	bgt.w	8004c3a <_svfprintf_r+0x10ea>
 8004818:	3608      	adds	r6, #8
 800481a:	e7ae      	b.n	800477a <_svfprintf_r+0xc2a>
 800481c:	9b08      	ldr	r3, [sp, #32]
 800481e:	07da      	lsls	r2, r3, #31
 8004820:	f53f ae57 	bmi.w	80044d2 <_svfprintf_r+0x982>
 8004824:	3401      	adds	r4, #1
 8004826:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004828:	3501      	adds	r5, #1
 800482a:	2301      	movs	r3, #1
 800482c:	2c07      	cmp	r4, #7
 800482e:	6032      	str	r2, [r6, #0]
 8004830:	6073      	str	r3, [r6, #4]
 8004832:	953b      	str	r5, [sp, #236]	; 0xec
 8004834:	943a      	str	r4, [sp, #232]	; 0xe8
 8004836:	f77f ae79 	ble.w	800452c <_svfprintf_r+0x9dc>
 800483a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800483c:	4651      	mov	r1, sl
 800483e:	465a      	mov	r2, fp
 8004840:	f002 fcf8 	bl	8007234 <__ssprint_r>
 8004844:	2800      	cmp	r0, #0
 8004846:	f47f aa5a 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 800484a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800484c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800484e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004850:	e66d      	b.n	800452e <_svfprintf_r+0x9de>
 8004852:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004854:	4651      	mov	r1, sl
 8004856:	465a      	mov	r2, fp
 8004858:	f002 fcec 	bl	8007234 <__ssprint_r>
 800485c:	2800      	cmp	r0, #0
 800485e:	f47f aa4e 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 8004862:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004864:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004866:	ae1f      	add	r6, sp, #124	; 0x7c
 8004868:	e64b      	b.n	8004502 <_svfprintf_r+0x9b2>
 800486a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800486c:	4651      	mov	r1, sl
 800486e:	465a      	mov	r2, fp
 8004870:	f002 fce0 	bl	8007234 <__ssprint_r>
 8004874:	2800      	cmp	r0, #0
 8004876:	f47f aa42 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 800487a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800487c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800487e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004880:	e633      	b.n	80044ea <_svfprintf_r+0x99a>
 8004882:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004884:	4651      	mov	r1, sl
 8004886:	465a      	mov	r2, fp
 8004888:	f002 fcd4 	bl	8007234 <__ssprint_r>
 800488c:	2800      	cmp	r0, #0
 800488e:	f47f aa36 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 8004892:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004894:	ae1f      	add	r6, sp, #124	; 0x7c
 8004896:	e4bb      	b.n	8004210 <_svfprintf_r+0x6c0>
 8004898:	f002 fb64 	bl	8006f64 <__fpclassifyd>
 800489c:	2800      	cmp	r0, #0
 800489e:	f040 809e 	bne.w	80049de <_svfprintf_r+0xe8e>
 80048a2:	2203      	movs	r2, #3
 80048a4:	9012      	str	r0, [sp, #72]	; 0x48
 80048a6:	4ba3      	ldr	r3, [pc, #652]	; (8004b34 <_svfprintf_r+0xfe4>)
 80048a8:	920a      	str	r2, [sp, #40]	; 0x28
 80048aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80048ac:	4aa2      	ldr	r2, [pc, #648]	; (8004b38 <_svfprintf_r+0xfe8>)
 80048ae:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80048b2:	2847      	cmp	r0, #71	; 0x47
 80048b4:	bfd8      	it	le
 80048b6:	461a      	movle	r2, r3
 80048b8:	9211      	str	r2, [sp, #68]	; 0x44
 80048ba:	2303      	movs	r3, #3
 80048bc:	9a08      	ldr	r2, [sp, #32]
 80048be:	930d      	str	r3, [sp, #52]	; 0x34
 80048c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048c6:	9208      	str	r2, [sp, #32]
 80048c8:	9316      	str	r3, [sp, #88]	; 0x58
 80048ca:	f7ff baaf 	b.w	8003e2c <_svfprintf_r+0x2dc>
 80048ce:	990e      	ldr	r1, [sp, #56]	; 0x38
 80048d0:	2201      	movs	r2, #1
 80048d2:	680b      	ldr	r3, [r1, #0]
 80048d4:	e414      	b.n	8004100 <_svfprintf_r+0x5b0>
 80048d6:	9b08      	ldr	r3, [sp, #32]
 80048d8:	065f      	lsls	r7, r3, #25
 80048da:	d56d      	bpl.n	80049b8 <_svfprintf_r+0xe68>
 80048dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80048de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048e0:	6803      	ldr	r3, [r0, #0]
 80048e2:	3004      	adds	r0, #4
 80048e4:	900e      	str	r0, [sp, #56]	; 0x38
 80048e6:	8019      	strh	r1, [r3, #0]
 80048e8:	f7ff b960 	b.w	8003bac <_svfprintf_r+0x5c>
 80048ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 80048ee:	680b      	ldr	r3, [r1, #0]
 80048f0:	e406      	b.n	8004100 <_svfprintf_r+0x5b0>
 80048f2:	46a0      	mov	r8, r4
 80048f4:	461c      	mov	r4, r3
 80048f6:	3401      	adds	r4, #1
 80048f8:	19ed      	adds	r5, r5, r7
 80048fa:	2c07      	cmp	r4, #7
 80048fc:	f8c6 8000 	str.w	r8, [r6]
 8004900:	6077      	str	r7, [r6, #4]
 8004902:	953b      	str	r5, [sp, #236]	; 0xec
 8004904:	943a      	str	r4, [sp, #232]	; 0xe8
 8004906:	f73f af27 	bgt.w	8004758 <_svfprintf_r+0xc08>
 800490a:	3608      	adds	r6, #8
 800490c:	e72e      	b.n	800476c <_svfprintf_r+0xc1c>
 800490e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004910:	4651      	mov	r1, sl
 8004912:	465a      	mov	r2, fp
 8004914:	f002 fc8e 	bl	8007234 <__ssprint_r>
 8004918:	2800      	cmp	r0, #0
 800491a:	f47f a9f0 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 800491e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004920:	ae1f      	add	r6, sp, #124	; 0x7c
 8004922:	e53d      	b.n	80043a0 <_svfprintf_r+0x850>
 8004924:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004926:	4b85      	ldr	r3, [pc, #532]	; (8004b3c <_svfprintf_r+0xfec>)
 8004928:	3401      	adds	r4, #1
 800492a:	6033      	str	r3, [r6, #0]
 800492c:	3501      	adds	r5, #1
 800492e:	2301      	movs	r3, #1
 8004930:	2c07      	cmp	r4, #7
 8004932:	6073      	str	r3, [r6, #4]
 8004934:	953b      	str	r5, [sp, #236]	; 0xec
 8004936:	943a      	str	r4, [sp, #232]	; 0xe8
 8004938:	f300 8139 	bgt.w	8004bae <_svfprintf_r+0x105e>
 800493c:	3608      	adds	r6, #8
 800493e:	b92f      	cbnz	r7, 800494c <_svfprintf_r+0xdfc>
 8004940:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004942:	b91a      	cbnz	r2, 800494c <_svfprintf_r+0xdfc>
 8004944:	9b08      	ldr	r3, [sp, #32]
 8004946:	07d8      	lsls	r0, r3, #31
 8004948:	f57f aca9 	bpl.w	800429e <_svfprintf_r+0x74e>
 800494c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800494e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004950:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004952:	6071      	str	r1, [r6, #4]
 8004954:	3401      	adds	r4, #1
 8004956:	186d      	adds	r5, r5, r1
 8004958:	2c07      	cmp	r4, #7
 800495a:	6030      	str	r0, [r6, #0]
 800495c:	953b      	str	r5, [sp, #236]	; 0xec
 800495e:	943a      	str	r4, [sp, #232]	; 0xe8
 8004960:	f300 81d2 	bgt.w	8004d08 <_svfprintf_r+0x11b8>
 8004964:	3608      	adds	r6, #8
 8004966:	427f      	negs	r7, r7
 8004968:	2f00      	cmp	r7, #0
 800496a:	f340 8141 	ble.w	8004bf0 <_svfprintf_r+0x10a0>
 800496e:	2f10      	cmp	r7, #16
 8004970:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8004b40 <_svfprintf_r+0xff0>
 8004974:	f340 8183 	ble.w	8004c7e <_svfprintf_r+0x112e>
 8004978:	4623      	mov	r3, r4
 800497a:	f04f 0910 	mov.w	r9, #16
 800497e:	4644      	mov	r4, r8
 8004980:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004984:	e004      	b.n	8004990 <_svfprintf_r+0xe40>
 8004986:	3608      	adds	r6, #8
 8004988:	3f10      	subs	r7, #16
 800498a:	2f10      	cmp	r7, #16
 800498c:	f340 8175 	ble.w	8004c7a <_svfprintf_r+0x112a>
 8004990:	3301      	adds	r3, #1
 8004992:	3510      	adds	r5, #16
 8004994:	2b07      	cmp	r3, #7
 8004996:	e886 0210 	stmia.w	r6, {r4, r9}
 800499a:	953b      	str	r5, [sp, #236]	; 0xec
 800499c:	933a      	str	r3, [sp, #232]	; 0xe8
 800499e:	ddf2      	ble.n	8004986 <_svfprintf_r+0xe36>
 80049a0:	4640      	mov	r0, r8
 80049a2:	4651      	mov	r1, sl
 80049a4:	465a      	mov	r2, fp
 80049a6:	f002 fc45 	bl	8007234 <__ssprint_r>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	f47f a9a7 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 80049b0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80049b2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80049b4:	ae1f      	add	r6, sp, #124	; 0x7c
 80049b6:	e7e7      	b.n	8004988 <_svfprintf_r+0xe38>
 80049b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 80049bc:	6813      	ldr	r3, [r2, #0]
 80049be:	3204      	adds	r2, #4
 80049c0:	920e      	str	r2, [sp, #56]	; 0x38
 80049c2:	6018      	str	r0, [r3, #0]
 80049c4:	f7ff b8f2 	b.w	8003bac <_svfprintf_r+0x5c>
 80049c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80049ca:	4651      	mov	r1, sl
 80049cc:	465a      	mov	r2, fp
 80049ce:	f002 fc31 	bl	8007234 <__ssprint_r>
 80049d2:	2800      	cmp	r0, #0
 80049d4:	f47f a993 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 80049d8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80049da:	ae1f      	add	r6, sp, #124	; 0x7c
 80049dc:	e4f5      	b.n	80043ca <_svfprintf_r+0x87a>
 80049de:	1c60      	adds	r0, r4, #1
 80049e0:	f000 80f1 	beq.w	8004bc6 <_svfprintf_r+0x1076>
 80049e4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80049e6:	2967      	cmp	r1, #103	; 0x67
 80049e8:	bf18      	it	ne
 80049ea:	2947      	cmpne	r1, #71	; 0x47
 80049ec:	bf14      	ite	ne
 80049ee:	2300      	movne	r3, #0
 80049f0:	2301      	moveq	r3, #1
 80049f2:	bf18      	it	ne
 80049f4:	930a      	strne	r3, [sp, #40]	; 0x28
 80049f6:	d104      	bne.n	8004a02 <_svfprintf_r+0xeb2>
 80049f8:	2c00      	cmp	r4, #0
 80049fa:	f000 81ad 	beq.w	8004d58 <_svfprintf_r+0x1208>
 80049fe:	2201      	movs	r2, #1
 8004a00:	920a      	str	r2, [sp, #40]	; 0x28
 8004a02:	9808      	ldr	r0, [sp, #32]
 8004a04:	2d00      	cmp	r5, #0
 8004a06:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8004a0a:	9008      	str	r0, [sp, #32]
 8004a0c:	f2c0 8189 	blt.w	8004d22 <_svfprintf_r+0x11d2>
 8004a10:	2200      	movs	r2, #0
 8004a12:	9212      	str	r2, [sp, #72]	; 0x48
 8004a14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a16:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004a18:	f1a3 0166 	sub.w	r1, r3, #102	; 0x66
 8004a1c:	424b      	negs	r3, r1
 8004a1e:	eb43 0301 	adc.w	r3, r3, r1
 8004a22:	469c      	mov	ip, r3
 8004a24:	2846      	cmp	r0, #70	; 0x46
 8004a26:	bf08      	it	eq
 8004a28:	f04c 0c01 	orreq.w	ip, ip, #1
 8004a2c:	930d      	str	r3, [sp, #52]	; 0x34
 8004a2e:	46a1      	mov	r9, r4
 8004a30:	2103      	movs	r1, #3
 8004a32:	f1bc 0f00 	cmp.w	ip, #0
 8004a36:	d107      	bne.n	8004a48 <_svfprintf_r+0xef8>
 8004a38:	2865      	cmp	r0, #101	; 0x65
 8004a3a:	bf18      	it	ne
 8004a3c:	2845      	cmpne	r0, #69	; 0x45
 8004a3e:	bf0c      	ite	eq
 8004a40:	f104 0901 	addeq.w	r9, r4, #1
 8004a44:	46a1      	movne	r9, r4
 8004a46:	2102      	movs	r1, #2
 8004a48:	e88d 0202 	stmia.w	sp, {r1, r9}
 8004a4c:	a940      	add	r1, sp, #256	; 0x100
 8004a4e:	9102      	str	r1, [sp, #8]
 8004a50:	a941      	add	r1, sp, #260	; 0x104
 8004a52:	9103      	str	r1, [sp, #12]
 8004a54:	4642      	mov	r2, r8
 8004a56:	a942      	add	r1, sp, #264	; 0x108
 8004a58:	462b      	mov	r3, r5
 8004a5a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004a5c:	9104      	str	r1, [sp, #16]
 8004a5e:	f8cd c018 	str.w	ip, [sp, #24]
 8004a62:	f000 fa6d 	bl	8004f40 <_dtoa_r>
 8004a66:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004a68:	9011      	str	r0, [sp, #68]	; 0x44
 8004a6a:	2947      	cmp	r1, #71	; 0x47
 8004a6c:	bf18      	it	ne
 8004a6e:	2967      	cmpne	r1, #103	; 0x67
 8004a70:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004a74:	d104      	bne.n	8004a80 <_svfprintf_r+0xf30>
 8004a76:	9a08      	ldr	r2, [sp, #32]
 8004a78:	07d2      	lsls	r2, r2, #31
 8004a7a:	bf58      	it	pl
 8004a7c:	9f42      	ldrpl	r7, [sp, #264]	; 0x108
 8004a7e:	d515      	bpl.n	8004aac <_svfprintf_r+0xf5c>
 8004a80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a82:	eb03 0709 	add.w	r7, r3, r9
 8004a86:	f1bc 0f00 	cmp.w	ip, #0
 8004a8a:	d005      	beq.n	8004a98 <_svfprintf_r+0xf48>
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b30      	cmp	r3, #48	; 0x30
 8004a90:	f000 8165 	beq.w	8004d5e <_svfprintf_r+0x120e>
 8004a94:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004a96:	18ff      	adds	r7, r7, r3
 8004a98:	4640      	mov	r0, r8
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	f003 ff86 	bl	80089b0 <__aeabi_dcmpeq>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	f000 8117 	beq.w	8004cd8 <_svfprintf_r+0x1188>
 8004aaa:	9742      	str	r7, [sp, #264]	; 0x108
 8004aac:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004aae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ab0:	1a3f      	subs	r7, r7, r0
 8004ab2:	9710      	str	r7, [sp, #64]	; 0x40
 8004ab4:	2900      	cmp	r1, #0
 8004ab6:	f000 80f9 	beq.w	8004cac <_svfprintf_r+0x115c>
 8004aba:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004abc:	1ccb      	adds	r3, r1, #3
 8004abe:	db02      	blt.n	8004ac6 <_svfprintf_r+0xf76>
 8004ac0:	428c      	cmp	r4, r1
 8004ac2:	f280 80fa 	bge.w	8004cba <_svfprintf_r+0x116a>
 8004ac6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ac8:	3a02      	subs	r2, #2
 8004aca:	9215      	str	r2, [sp, #84]	; 0x54
 8004acc:	3901      	subs	r1, #1
 8004ace:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004ad0:	9140      	str	r1, [sp, #256]	; 0x100
 8004ad2:	2900      	cmp	r1, #0
 8004ad4:	f88d 00f0 	strb.w	r0, [sp, #240]	; 0xf0
 8004ad8:	f2c0 815d 	blt.w	8004d96 <_svfprintf_r+0x1246>
 8004adc:	232b      	movs	r3, #43	; 0x2b
 8004ade:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8004ae2:	2909      	cmp	r1, #9
 8004ae4:	f340 8122 	ble.w	8004d2c <_svfprintf_r+0x11dc>
 8004ae8:	f10d 07ff 	add.w	r7, sp, #255	; 0xff
 8004aec:	f246 6467 	movw	r4, #26215	; 0x6667
 8004af0:	4638      	mov	r0, r7
 8004af2:	f2c6 6466 	movt	r4, #26214	; 0x6666
 8004af6:	fb84 3201 	smull	r3, r2, r4, r1
 8004afa:	17cb      	asrs	r3, r1, #31
 8004afc:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8004b00:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004b04:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8004b08:	3230      	adds	r2, #48	; 0x30
 8004b0a:	2b09      	cmp	r3, #9
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	4619      	mov	r1, r3
 8004b10:	f800 2d01 	strb.w	r2, [r0, #-1]!
 8004b14:	dcef      	bgt.n	8004af6 <_svfprintf_r+0xfa6>
 8004b16:	3130      	adds	r1, #48	; 0x30
 8004b18:	1eaa      	subs	r2, r5, #2
 8004b1a:	b2c9      	uxtb	r1, r1
 8004b1c:	42ba      	cmp	r2, r7
 8004b1e:	f805 1c02 	strb.w	r1, [r5, #-2]
 8004b22:	bf28      	it	cs
 8004b24:	f10d 01f2 	addcs.w	r1, sp, #242	; 0xf2
 8004b28:	d213      	bcs.n	8004b52 <_svfprintf_r+0x1002>
 8004b2a:	f10d 03f2 	add.w	r3, sp, #242	; 0xf2
 8004b2e:	f10d 00fe 	add.w	r0, sp, #254	; 0xfe
 8004b32:	e009      	b.n	8004b48 <_svfprintf_r+0xff8>
 8004b34:	08009108 	.word	0x08009108
 8004b38:	0800910c 	.word	0x0800910c
 8004b3c:	08009140 	.word	0x08009140
 8004b40:	08008e78 	.word	0x08008e78
 8004b44:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004b48:	f803 1b01 	strb.w	r1, [r3], #1
 8004b4c:	4282      	cmp	r2, r0
 8004b4e:	4619      	mov	r1, r3
 8004b50:	d1f8      	bne.n	8004b44 <_svfprintf_r+0xff4>
 8004b52:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004b54:	ab3c      	add	r3, sp, #240	; 0xf0
 8004b56:	1acb      	subs	r3, r1, r3
 8004b58:	931b      	str	r3, [sp, #108]	; 0x6c
 8004b5a:	2801      	cmp	r0, #1
 8004b5c:	4403      	add	r3, r0
 8004b5e:	930d      	str	r3, [sp, #52]	; 0x34
 8004b60:	f340 8125 	ble.w	8004dae <_svfprintf_r+0x125e>
 8004b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b66:	3301      	adds	r3, #1
 8004b68:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	930d      	str	r3, [sp, #52]	; 0x34
 8004b70:	900a      	str	r0, [sp, #40]	; 0x28
 8004b72:	9116      	str	r1, [sp, #88]	; 0x58
 8004b74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b76:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f43f a956 	beq.w	8003e2c <_svfprintf_r+0x2dc>
 8004b80:	232d      	movs	r3, #45	; 0x2d
 8004b82:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8004b86:	2300      	movs	r3, #0
 8004b88:	9312      	str	r3, [sp, #72]	; 0x48
 8004b8a:	f7ff b950 	b.w	8003e2e <_svfprintf_r+0x2de>
 8004b8e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004b90:	2140      	movs	r1, #64	; 0x40
 8004b92:	f001 fa59 	bl	8006048 <_malloc_r>
 8004b96:	f8ca 0000 	str.w	r0, [sl]
 8004b9a:	f8ca 0010 	str.w	r0, [sl, #16]
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	f000 812b 	beq.w	8004dfa <_svfprintf_r+0x12aa>
 8004ba4:	2340      	movs	r3, #64	; 0x40
 8004ba6:	f8ca 3014 	str.w	r3, [sl, #20]
 8004baa:	f7fe bfec 	b.w	8003b86 <_svfprintf_r+0x36>
 8004bae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004bb0:	4651      	mov	r1, sl
 8004bb2:	465a      	mov	r2, fp
 8004bb4:	f002 fb3e 	bl	8007234 <__ssprint_r>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	f47f a8a0 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 8004bbe:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8004bc0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004bc2:	ae1f      	add	r6, sp, #124	; 0x7c
 8004bc4:	e6bb      	b.n	800493e <_svfprintf_r+0xdee>
 8004bc6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004bc8:	2847      	cmp	r0, #71	; 0x47
 8004bca:	bf18      	it	ne
 8004bcc:	2867      	cmpne	r0, #103	; 0x67
 8004bce:	bf14      	ite	ne
 8004bd0:	2000      	movne	r0, #0
 8004bd2:	2001      	moveq	r0, #1
 8004bd4:	900a      	str	r0, [sp, #40]	; 0x28
 8004bd6:	2406      	movs	r4, #6
 8004bd8:	e713      	b.n	8004a02 <_svfprintf_r+0xeb2>
 8004bda:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004bdc:	4651      	mov	r1, sl
 8004bde:	465a      	mov	r2, fp
 8004be0:	f002 fb28 	bl	8007234 <__ssprint_r>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	f47f a88a 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 8004bea:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004bec:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004bee:	ae1f      	add	r6, sp, #124	; 0x7c
 8004bf0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004bf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bf4:	6072      	str	r2, [r6, #4]
 8004bf6:	3401      	adds	r4, #1
 8004bf8:	18ad      	adds	r5, r5, r2
 8004bfa:	2c07      	cmp	r4, #7
 8004bfc:	6033      	str	r3, [r6, #0]
 8004bfe:	953b      	str	r5, [sp, #236]	; 0xec
 8004c00:	943a      	str	r4, [sp, #232]	; 0xe8
 8004c02:	f77f ab4b 	ble.w	800429c <_svfprintf_r+0x74c>
 8004c06:	f7ff bba6 	b.w	8004356 <_svfprintf_r+0x806>
 8004c0a:	f002 fae3 	bl	80071d4 <strlen>
 8004c0e:	900d      	str	r0, [sp, #52]	; 0x34
 8004c10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8004c14:	9512      	str	r5, [sp, #72]	; 0x48
 8004c16:	900a      	str	r0, [sp, #40]	; 0x28
 8004c18:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004c1c:	970e      	str	r7, [sp, #56]	; 0x38
 8004c1e:	9516      	str	r5, [sp, #88]	; 0x58
 8004c20:	f7ff b904 	b.w	8003e2c <_svfprintf_r+0x2dc>
 8004c24:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004c26:	4651      	mov	r1, sl
 8004c28:	465a      	mov	r2, fp
 8004c2a:	f002 fb03 	bl	8007234 <__ssprint_r>
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	f47f a865 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 8004c34:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004c36:	ae1f      	add	r6, sp, #124	; 0x7c
 8004c38:	e4f1      	b.n	800461e <_svfprintf_r+0xace>
 8004c3a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004c3c:	4651      	mov	r1, sl
 8004c3e:	465a      	mov	r2, fp
 8004c40:	f002 faf8 	bl	8007234 <__ssprint_r>
 8004c44:	2800      	cmp	r0, #0
 8004c46:	f47f a85a 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 8004c4a:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004c4c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004c4e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004c50:	e593      	b.n	800477a <_svfprintf_r+0xc2a>
 8004c52:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004c54:	4651      	mov	r1, sl
 8004c56:	465a      	mov	r2, fp
 8004c58:	f002 faec 	bl	8007234 <__ssprint_r>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	f47f a84e 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 8004c62:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004c64:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004c66:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004c68:	1acb      	subs	r3, r1, r3
 8004c6a:	ae1f      	add	r6, sp, #124	; 0x7c
 8004c6c:	e59c      	b.n	80047a8 <_svfprintf_r+0xc58>
 8004c6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c70:	ebc3 030b 	rsb	r3, r3, fp
 8004c74:	930d      	str	r3, [sp, #52]	; 0x34
 8004c76:	f7ff b8cf 	b.w	8003e18 <_svfprintf_r+0x2c8>
 8004c7a:	46a0      	mov	r8, r4
 8004c7c:	461c      	mov	r4, r3
 8004c7e:	3401      	adds	r4, #1
 8004c80:	19ed      	adds	r5, r5, r7
 8004c82:	2c07      	cmp	r4, #7
 8004c84:	f8c6 8000 	str.w	r8, [r6]
 8004c88:	6077      	str	r7, [r6, #4]
 8004c8a:	953b      	str	r5, [sp, #236]	; 0xec
 8004c8c:	943a      	str	r4, [sp, #232]	; 0xe8
 8004c8e:	dca4      	bgt.n	8004bda <_svfprintf_r+0x108a>
 8004c90:	3608      	adds	r6, #8
 8004c92:	e7ad      	b.n	8004bf0 <_svfprintf_r+0x10a0>
 8004c94:	2c06      	cmp	r4, #6
 8004c96:	bf28      	it	cs
 8004c98:	2406      	movcs	r4, #6
 8004c9a:	495f      	ldr	r1, [pc, #380]	; (8004e18 <_svfprintf_r+0x12c8>)
 8004c9c:	940d      	str	r4, [sp, #52]	; 0x34
 8004c9e:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 8004ca2:	900a      	str	r0, [sp, #40]	; 0x28
 8004ca4:	970e      	str	r7, [sp, #56]	; 0x38
 8004ca6:	9111      	str	r1, [sp, #68]	; 0x44
 8004ca8:	f7ff ba01 	b.w	80040ae <_svfprintf_r+0x55e>
 8004cac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004cae:	2b65      	cmp	r3, #101	; 0x65
 8004cb0:	dd6f      	ble.n	8004d92 <_svfprintf_r+0x1242>
 8004cb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004cb4:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004cb6:	2a00      	cmp	r2, #0
 8004cb8:	d15e      	bne.n	8004d78 <_svfprintf_r+0x1228>
 8004cba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004cbc:	428a      	cmp	r2, r1
 8004cbe:	dc3d      	bgt.n	8004d3c <_svfprintf_r+0x11ec>
 8004cc0:	9b08      	ldr	r3, [sp, #32]
 8004cc2:	07da      	lsls	r2, r3, #31
 8004cc4:	d56c      	bpl.n	8004da0 <_svfprintf_r+0x1250>
 8004cc6:	1c4b      	adds	r3, r1, #1
 8004cc8:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8004ccc:	2267      	movs	r2, #103	; 0x67
 8004cce:	930d      	str	r3, [sp, #52]	; 0x34
 8004cd0:	900a      	str	r0, [sp, #40]	; 0x28
 8004cd2:	9215      	str	r2, [sp, #84]	; 0x54
 8004cd4:	9116      	str	r1, [sp, #88]	; 0x58
 8004cd6:	e74d      	b.n	8004b74 <_svfprintf_r+0x1024>
 8004cd8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8004cda:	429f      	cmp	r7, r3
 8004cdc:	bf98      	it	ls
 8004cde:	461f      	movls	r7, r3
 8004ce0:	f67f aee4 	bls.w	8004aac <_svfprintf_r+0xf5c>
 8004ce4:	2230      	movs	r2, #48	; 0x30
 8004ce6:	f803 2b01 	strb.w	r2, [r3], #1
 8004cea:	42bb      	cmp	r3, r7
 8004cec:	9342      	str	r3, [sp, #264]	; 0x108
 8004cee:	d1fa      	bne.n	8004ce6 <_svfprintf_r+0x1196>
 8004cf0:	e6dc      	b.n	8004aac <_svfprintf_r+0xf5c>
 8004cf2:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 8004cf6:	9012      	str	r0, [sp, #72]	; 0x48
 8004cf8:	920a      	str	r2, [sp, #40]	; 0x28
 8004cfa:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004cfe:	970e      	str	r7, [sp, #56]	; 0x38
 8004d00:	940d      	str	r4, [sp, #52]	; 0x34
 8004d02:	9016      	str	r0, [sp, #88]	; 0x58
 8004d04:	f7ff b892 	b.w	8003e2c <_svfprintf_r+0x2dc>
 8004d08:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004d0a:	4651      	mov	r1, sl
 8004d0c:	465a      	mov	r2, fp
 8004d0e:	f002 fa91 	bl	8007234 <__ssprint_r>
 8004d12:	2800      	cmp	r0, #0
 8004d14:	f47e aff3 	bne.w	8003cfe <_svfprintf_r+0x1ae>
 8004d18:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8004d1a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004d1c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004d1e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004d20:	e621      	b.n	8004966 <_svfprintf_r+0xe16>
 8004d22:	212d      	movs	r1, #45	; 0x2d
 8004d24:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8004d28:	9112      	str	r1, [sp, #72]	; 0x48
 8004d2a:	e673      	b.n	8004a14 <_svfprintf_r+0xec4>
 8004d2c:	3130      	adds	r1, #48	; 0x30
 8004d2e:	2330      	movs	r3, #48	; 0x30
 8004d30:	f88d 10f3 	strb.w	r1, [sp, #243]	; 0xf3
 8004d34:	f88d 30f2 	strb.w	r3, [sp, #242]	; 0xf2
 8004d38:	a93d      	add	r1, sp, #244	; 0xf4
 8004d3a:	e70a      	b.n	8004b52 <_svfprintf_r+0x1002>
 8004d3c:	2900      	cmp	r1, #0
 8004d3e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004d40:	bfd4      	ite	le
 8004d42:	f1c1 0302 	rsble	r3, r1, #2
 8004d46:	2301      	movgt	r3, #1
 8004d48:	181b      	adds	r3, r3, r0
 8004d4a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8004d4e:	930d      	str	r3, [sp, #52]	; 0x34
 8004d50:	2367      	movs	r3, #103	; 0x67
 8004d52:	920a      	str	r2, [sp, #40]	; 0x28
 8004d54:	9315      	str	r3, [sp, #84]	; 0x54
 8004d56:	e7bd      	b.n	8004cd4 <_svfprintf_r+0x1184>
 8004d58:	2401      	movs	r4, #1
 8004d5a:	940a      	str	r4, [sp, #40]	; 0x28
 8004d5c:	e651      	b.n	8004a02 <_svfprintf_r+0xeb2>
 8004d5e:	4640      	mov	r0, r8
 8004d60:	4629      	mov	r1, r5
 8004d62:	2200      	movs	r2, #0
 8004d64:	2300      	movs	r3, #0
 8004d66:	f003 fe23 	bl	80089b0 <__aeabi_dcmpeq>
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	f47f ae92 	bne.w	8004a94 <_svfprintf_r+0xf44>
 8004d70:	f1c9 0301 	rsb	r3, r9, #1
 8004d74:	9340      	str	r3, [sp, #256]	; 0x100
 8004d76:	e68e      	b.n	8004a96 <_svfprintf_r+0xf46>
 8004d78:	2900      	cmp	r1, #0
 8004d7a:	dd38      	ble.n	8004dee <_svfprintf_r+0x129e>
 8004d7c:	bb74      	cbnz	r4, 8004ddc <_svfprintf_r+0x128c>
 8004d7e:	9b08      	ldr	r3, [sp, #32]
 8004d80:	07dd      	lsls	r5, r3, #31
 8004d82:	d42b      	bmi.n	8004ddc <_svfprintf_r+0x128c>
 8004d84:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004d88:	2266      	movs	r2, #102	; 0x66
 8004d8a:	900a      	str	r0, [sp, #40]	; 0x28
 8004d8c:	910d      	str	r1, [sp, #52]	; 0x34
 8004d8e:	9215      	str	r2, [sp, #84]	; 0x54
 8004d90:	e7a0      	b.n	8004cd4 <_svfprintf_r+0x1184>
 8004d92:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004d94:	e69a      	b.n	8004acc <_svfprintf_r+0xf7c>
 8004d96:	232d      	movs	r3, #45	; 0x2d
 8004d98:	4249      	negs	r1, r1
 8004d9a:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8004d9e:	e6a0      	b.n	8004ae2 <_svfprintf_r+0xf92>
 8004da0:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004da4:	2267      	movs	r2, #103	; 0x67
 8004da6:	900a      	str	r0, [sp, #40]	; 0x28
 8004da8:	910d      	str	r1, [sp, #52]	; 0x34
 8004daa:	9215      	str	r2, [sp, #84]	; 0x54
 8004dac:	e792      	b.n	8004cd4 <_svfprintf_r+0x1184>
 8004dae:	9908      	ldr	r1, [sp, #32]
 8004db0:	f011 0301 	ands.w	r3, r1, #1
 8004db4:	f47f aed6 	bne.w	8004b64 <_svfprintf_r+0x1014>
 8004db8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004dba:	9316      	str	r3, [sp, #88]	; 0x58
 8004dbc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004dc0:	920a      	str	r2, [sp, #40]	; 0x28
 8004dc2:	e6d7      	b.n	8004b74 <_svfprintf_r+0x1024>
 8004dc4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004dc6:	680c      	ldr	r4, [r1, #0]
 8004dc8:	1d0b      	adds	r3, r1, #4
 8004dca:	2c00      	cmp	r4, #0
 8004dcc:	bfbc      	itt	lt
 8004dce:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004dd0:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 8004dd4:	f6bf a985 	bge.w	80040e2 <_svfprintf_r+0x592>
 8004dd8:	f7fe bf18 	b.w	8003c0c <_svfprintf_r+0xbc>
 8004ddc:	3401      	adds	r4, #1
 8004dde:	190c      	adds	r4, r1, r4
 8004de0:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004de4:	2066      	movs	r0, #102	; 0x66
 8004de6:	940d      	str	r4, [sp, #52]	; 0x34
 8004de8:	930a      	str	r3, [sp, #40]	; 0x28
 8004dea:	9015      	str	r0, [sp, #84]	; 0x54
 8004dec:	e772      	b.n	8004cd4 <_svfprintf_r+0x1184>
 8004dee:	b914      	cbnz	r4, 8004df6 <_svfprintf_r+0x12a6>
 8004df0:	9a08      	ldr	r2, [sp, #32]
 8004df2:	07d0      	lsls	r0, r2, #31
 8004df4:	d509      	bpl.n	8004e0a <_svfprintf_r+0x12ba>
 8004df6:	3402      	adds	r4, #2
 8004df8:	e7f2      	b.n	8004de0 <_svfprintf_r+0x1290>
 8004dfa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004dfc:	230c      	movs	r3, #12
 8004dfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e02:	600b      	str	r3, [r1, #0]
 8004e04:	920c      	str	r2, [sp, #48]	; 0x30
 8004e06:	f7fe bf83 	b.w	8003d10 <_svfprintf_r+0x1c0>
 8004e0a:	2001      	movs	r0, #1
 8004e0c:	2266      	movs	r2, #102	; 0x66
 8004e0e:	900a      	str	r0, [sp, #40]	; 0x28
 8004e10:	9215      	str	r2, [sp, #84]	; 0x54
 8004e12:	900d      	str	r0, [sp, #52]	; 0x34
 8004e14:	e75e      	b.n	8004cd4 <_svfprintf_r+0x1184>
 8004e16:	bf00      	nop
 8004e18:	08009138 	.word	0x08009138
 8004e1c:	00000000 	.word	0x00000000

08004e20 <quorem>:
 8004e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e24:	6903      	ldr	r3, [r0, #16]
 8004e26:	690d      	ldr	r5, [r1, #16]
 8004e28:	429d      	cmp	r5, r3
 8004e2a:	4681      	mov	r9, r0
 8004e2c:	f300 8084 	bgt.w	8004f38 <quorem+0x118>
 8004e30:	1ceb      	adds	r3, r5, #3
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	18cf      	adds	r7, r1, r3
 8004e36:	18c3      	adds	r3, r0, r3
 8004e38:	687e      	ldr	r6, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	3601      	adds	r6, #1
 8004e3e:	fbb3 f6f6 	udiv	r6, r3, r6
 8004e42:	f101 0414 	add.w	r4, r1, #20
 8004e46:	3d01      	subs	r5, #1
 8004e48:	3704      	adds	r7, #4
 8004e4a:	f100 0814 	add.w	r8, r0, #20
 8004e4e:	2e00      	cmp	r6, #0
 8004e50:	d03c      	beq.n	8004ecc <quorem+0xac>
 8004e52:	f04f 0e00 	mov.w	lr, #0
 8004e56:	4642      	mov	r2, r8
 8004e58:	4623      	mov	r3, r4
 8004e5a:	46f4      	mov	ip, lr
 8004e5c:	f853 bb04 	ldr.w	fp, [r3], #4
 8004e60:	6810      	ldr	r0, [r2, #0]
 8004e62:	fa1f fa8b 	uxth.w	sl, fp
 8004e66:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 8004e6a:	fb06 ea0a 	mla	sl, r6, sl, lr
 8004e6e:	fb06 fe0b 	mul.w	lr, r6, fp
 8004e72:	eb0e 4e1a 	add.w	lr, lr, sl, lsr #16
 8004e76:	fa1c fc80 	uxtah	ip, ip, r0
 8004e7a:	fa1f fb8e 	uxth.w	fp, lr
 8004e7e:	fa1f fa8a 	uxth.w	sl, sl
 8004e82:	ebca 0c0c 	rsb	ip, sl, ip
 8004e86:	ebcb 4010 	rsb	r0, fp, r0, lsr #16
 8004e8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004e8e:	fa1f fc8c 	uxth.w	ip, ip
 8004e92:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8004e96:	429f      	cmp	r7, r3
 8004e98:	f842 cb04 	str.w	ip, [r2], #4
 8004e9c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8004ea0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004ea4:	d2da      	bcs.n	8004e5c <quorem+0x3c>
 8004ea6:	1d2a      	adds	r2, r5, #4
 8004ea8:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004eac:	6858      	ldr	r0, [r3, #4]
 8004eae:	b968      	cbnz	r0, 8004ecc <quorem+0xac>
 8004eb0:	4598      	cmp	r8, r3
 8004eb2:	d209      	bcs.n	8004ec8 <quorem+0xa8>
 8004eb4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004eb8:	b112      	cbz	r2, 8004ec0 <quorem+0xa0>
 8004eba:	e005      	b.n	8004ec8 <quorem+0xa8>
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	b91a      	cbnz	r2, 8004ec8 <quorem+0xa8>
 8004ec0:	3b04      	subs	r3, #4
 8004ec2:	3d01      	subs	r5, #1
 8004ec4:	4598      	cmp	r8, r3
 8004ec6:	d3f9      	bcc.n	8004ebc <quorem+0x9c>
 8004ec8:	f8c9 5010 	str.w	r5, [r9, #16]
 8004ecc:	4648      	mov	r0, r9
 8004ece:	f001 fe4f 	bl	8006b70 <__mcmp>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	db2d      	blt.n	8004f32 <quorem+0x112>
 8004ed6:	3601      	adds	r6, #1
 8004ed8:	4643      	mov	r3, r8
 8004eda:	f04f 0c00 	mov.w	ip, #0
 8004ede:	f854 2b04 	ldr.w	r2, [r4], #4
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	b291      	uxth	r1, r2
 8004ee6:	fa1f fa80 	uxth.w	sl, r0
 8004eea:	0c12      	lsrs	r2, r2, #16
 8004eec:	ebc1 010a 	rsb	r1, r1, sl
 8004ef0:	4461      	add	r1, ip
 8004ef2:	ebc2 4210 	rsb	r2, r2, r0, lsr #16
 8004ef6:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8004efa:	b289      	uxth	r1, r1
 8004efc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004f00:	42a7      	cmp	r7, r4
 8004f02:	f843 1b04 	str.w	r1, [r3], #4
 8004f06:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f0a:	d2e8      	bcs.n	8004ede <quorem+0xbe>
 8004f0c:	1d2a      	adds	r2, r5, #4
 8004f0e:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004f12:	6859      	ldr	r1, [r3, #4]
 8004f14:	b969      	cbnz	r1, 8004f32 <quorem+0x112>
 8004f16:	4598      	cmp	r8, r3
 8004f18:	d209      	bcs.n	8004f2e <quorem+0x10e>
 8004f1a:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004f1e:	b112      	cbz	r2, 8004f26 <quorem+0x106>
 8004f20:	e005      	b.n	8004f2e <quorem+0x10e>
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	b91a      	cbnz	r2, 8004f2e <quorem+0x10e>
 8004f26:	3b04      	subs	r3, #4
 8004f28:	3d01      	subs	r5, #1
 8004f2a:	4598      	cmp	r8, r3
 8004f2c:	d3f9      	bcc.n	8004f22 <quorem+0x102>
 8004f2e:	f8c9 5010 	str.w	r5, [r9, #16]
 8004f32:	4630      	mov	r0, r6
 8004f34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f38:	2000      	movs	r0, #0
 8004f3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f3e:	bf00      	nop

08004f40 <_dtoa_r>:
 8004f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f44:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004f46:	b09d      	sub	sp, #116	; 0x74
 8004f48:	4607      	mov	r7, r0
 8004f4a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004f4c:	4692      	mov	sl, r2
 8004f4e:	469b      	mov	fp, r3
 8004f50:	b141      	cbz	r1, 8004f64 <_dtoa_r+0x24>
 8004f52:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004f54:	2201      	movs	r2, #1
 8004f56:	409a      	lsls	r2, r3
 8004f58:	604b      	str	r3, [r1, #4]
 8004f5a:	608a      	str	r2, [r1, #8]
 8004f5c:	f001 fbd4 	bl	8006708 <_Bfree>
 8004f60:	2300      	movs	r3, #0
 8004f62:	643b      	str	r3, [r7, #64]	; 0x40
 8004f64:	f1bb 0500 	subs.w	r5, fp, #0
 8004f68:	f2c0 80df 	blt.w	800512a <_dtoa_r+0x1ea>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	6023      	str	r3, [r4, #0]
 8004f70:	2300      	movs	r3, #0
 8004f72:	461a      	mov	r2, r3
 8004f74:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8004f78:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8004f7c:	402b      	ands	r3, r5
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	f000 80be 	beq.w	8005100 <_dtoa_r+0x1c0>
 8004f84:	4650      	mov	r0, sl
 8004f86:	4659      	mov	r1, fp
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	46d0      	mov	r8, sl
 8004f8e:	46d9      	mov	r9, fp
 8004f90:	2401      	movs	r4, #1
 8004f92:	f003 fd0d 	bl	80089b0 <__aeabi_dcmpeq>
 8004f96:	b978      	cbnz	r0, 8004fb8 <_dtoa_r+0x78>
 8004f98:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004f9c:	d110      	bne.n	8004fc0 <_dtoa_r+0x80>
 8004f9e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004fa0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	602b      	str	r3, [r5, #0]
 8004fa6:	4d78      	ldr	r5, [pc, #480]	; (8005188 <_dtoa_r+0x248>)
 8004fa8:	b114      	cbz	r4, 8004fb0 <_dtoa_r+0x70>
 8004faa:	4d78      	ldr	r5, [pc, #480]	; (800518c <_dtoa_r+0x24c>)
 8004fac:	6025      	str	r5, [r4, #0]
 8004fae:	3d01      	subs	r5, #1
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	b01d      	add	sp, #116	; 0x74
 8004fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb8:	2400      	movs	r4, #0
 8004fba:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004fbe:	d0ee      	beq.n	8004f9e <_dtoa_r+0x5e>
 8004fc0:	a91b      	add	r1, sp, #108	; 0x6c
 8004fc2:	9100      	str	r1, [sp, #0]
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	a91a      	add	r1, sp, #104	; 0x68
 8004fc8:	4642      	mov	r2, r8
 8004fca:	464b      	mov	r3, r9
 8004fcc:	9101      	str	r1, [sp, #4]
 8004fce:	f001 fed1 	bl	8006d74 <__d2b>
 8004fd2:	f3c5 540a 	ubfx	r4, r5, #20, #11
 8004fd6:	900a      	str	r0, [sp, #40]	; 0x28
 8004fd8:	2c00      	cmp	r4, #0
 8004fda:	f040 80b5 	bne.w	8005148 <_dtoa_r+0x208>
 8004fde:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004fe0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8004fe2:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8004fe6:	1934      	adds	r4, r6, r4
 8004fe8:	429c      	cmp	r4, r3
 8004fea:	f2c0 8281 	blt.w	80054f0 <_dtoa_r+0x5b0>
 8004fee:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8004ff2:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8004ff6:	1b1b      	subs	r3, r3, r4
 8004ff8:	f204 4212 	addw	r2, r4, #1042	; 0x412
 8004ffc:	fa15 f303 	lsls.w	r3, r5, r3
 8005000:	fa2a f002 	lsr.w	r0, sl, r2
 8005004:	4318      	orrs	r0, r3
 8005006:	f003 f9f5 	bl	80083f4 <__aeabi_ui2d>
 800500a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800500e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005010:	2501      	movs	r5, #1
 8005012:	f1a0 70f8 	sub.w	r0, r0, #32505856	; 0x1f00000
 8005016:	900d      	str	r0, [sp, #52]	; 0x34
 8005018:	3c01      	subs	r4, #1
 800501a:	9516      	str	r5, [sp, #88]	; 0x58
 800501c:	2300      	movs	r3, #0
 800501e:	2200      	movs	r2, #0
 8005020:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8005024:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005028:	f003 f8a6 	bl	8008178 <__aeabi_dsub>
 800502c:	a350      	add	r3, pc, #320	; (adr r3, 8005170 <_dtoa_r+0x230>)
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	f003 fa55 	bl	80084e0 <__aeabi_dmul>
 8005036:	a350      	add	r3, pc, #320	; (adr r3, 8005178 <_dtoa_r+0x238>)
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f003 f89e 	bl	800817c <__adddf3>
 8005040:	4680      	mov	r8, r0
 8005042:	4620      	mov	r0, r4
 8005044:	4689      	mov	r9, r1
 8005046:	f003 f9e5 	bl	8008414 <__aeabi_i2d>
 800504a:	a34d      	add	r3, pc, #308	; (adr r3, 8005180 <_dtoa_r+0x240>)
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f003 fa46 	bl	80084e0 <__aeabi_dmul>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4640      	mov	r0, r8
 800505a:	4649      	mov	r1, r9
 800505c:	f003 f88e 	bl	800817c <__adddf3>
 8005060:	4680      	mov	r8, r0
 8005062:	4689      	mov	r9, r1
 8005064:	f003 fcd6 	bl	8008a14 <__aeabi_d2iz>
 8005068:	4649      	mov	r1, r9
 800506a:	9005      	str	r0, [sp, #20]
 800506c:	2200      	movs	r2, #0
 800506e:	4640      	mov	r0, r8
 8005070:	2300      	movs	r3, #0
 8005072:	f003 fca7 	bl	80089c4 <__aeabi_dcmplt>
 8005076:	b150      	cbz	r0, 800508e <_dtoa_r+0x14e>
 8005078:	9805      	ldr	r0, [sp, #20]
 800507a:	f003 f9cb 	bl	8008414 <__aeabi_i2d>
 800507e:	4642      	mov	r2, r8
 8005080:	464b      	mov	r3, r9
 8005082:	f003 fc95 	bl	80089b0 <__aeabi_dcmpeq>
 8005086:	b910      	cbnz	r0, 800508e <_dtoa_r+0x14e>
 8005088:	9d05      	ldr	r5, [sp, #20]
 800508a:	3d01      	subs	r5, #1
 800508c:	9505      	str	r5, [sp, #20]
 800508e:	9d05      	ldr	r5, [sp, #20]
 8005090:	2d16      	cmp	r5, #22
 8005092:	f200 815e 	bhi.w	8005352 <_dtoa_r+0x412>
 8005096:	4b3e      	ldr	r3, [pc, #248]	; (8005190 <_dtoa_r+0x250>)
 8005098:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800509c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050a0:	4652      	mov	r2, sl
 80050a2:	465b      	mov	r3, fp
 80050a4:	f003 fcac 	bl	8008a00 <__aeabi_dcmpgt>
 80050a8:	2800      	cmp	r0, #0
 80050aa:	f000 8229 	beq.w	8005500 <_dtoa_r+0x5c0>
 80050ae:	9d05      	ldr	r5, [sp, #20]
 80050b0:	3d01      	subs	r5, #1
 80050b2:	9505      	str	r5, [sp, #20]
 80050b4:	2500      	movs	r5, #0
 80050b6:	9514      	str	r5, [sp, #80]	; 0x50
 80050b8:	1b34      	subs	r4, r6, r4
 80050ba:	3c01      	subs	r4, #1
 80050bc:	f100 8213 	bmi.w	80054e6 <_dtoa_r+0x5a6>
 80050c0:	2500      	movs	r5, #0
 80050c2:	940b      	str	r4, [sp, #44]	; 0x2c
 80050c4:	950f      	str	r5, [sp, #60]	; 0x3c
 80050c6:	9c05      	ldr	r4, [sp, #20]
 80050c8:	2c00      	cmp	r4, #0
 80050ca:	f2c0 8203 	blt.w	80054d4 <_dtoa_r+0x594>
 80050ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80050d0:	9413      	str	r4, [sp, #76]	; 0x4c
 80050d2:	192d      	adds	r5, r5, r4
 80050d4:	2400      	movs	r4, #0
 80050d6:	950b      	str	r5, [sp, #44]	; 0x2c
 80050d8:	9410      	str	r4, [sp, #64]	; 0x40
 80050da:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80050dc:	2d09      	cmp	r5, #9
 80050de:	d85d      	bhi.n	800519c <_dtoa_r+0x25c>
 80050e0:	2401      	movs	r4, #1
 80050e2:	2d05      	cmp	r5, #5
 80050e4:	dd02      	ble.n	80050ec <_dtoa_r+0x1ac>
 80050e6:	3d04      	subs	r5, #4
 80050e8:	9526      	str	r5, [sp, #152]	; 0x98
 80050ea:	2400      	movs	r4, #0
 80050ec:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80050ee:	1eab      	subs	r3, r5, #2
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d855      	bhi.n	80051a0 <_dtoa_r+0x260>
 80050f4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80050f8:	036d0382 	.word	0x036d0382
 80050fc:	03850246 	.word	0x03850246
 8005100:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8005102:	f242 730f 	movw	r3, #9999	; 0x270f
 8005106:	6023      	str	r3, [r4, #0]
 8005108:	f1ba 0f00 	cmp.w	sl, #0
 800510c:	d013      	beq.n	8005136 <_dtoa_r+0x1f6>
 800510e:	4d21      	ldr	r5, [pc, #132]	; (8005194 <_dtoa_r+0x254>)
 8005110:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8005112:	2c00      	cmp	r4, #0
 8005114:	f43f af4c 	beq.w	8004fb0 <_dtoa_r+0x70>
 8005118:	78eb      	ldrb	r3, [r5, #3]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 8117 	beq.w	800534e <_dtoa_r+0x40e>
 8005120:	f105 0308 	add.w	r3, r5, #8
 8005124:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8005126:	6023      	str	r3, [r4, #0]
 8005128:	e742      	b.n	8004fb0 <_dtoa_r+0x70>
 800512a:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 800512e:	2301      	movs	r3, #1
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	46ab      	mov	fp, r5
 8005134:	e71c      	b.n	8004f70 <_dtoa_r+0x30>
 8005136:	4b17      	ldr	r3, [pc, #92]	; (8005194 <_dtoa_r+0x254>)
 8005138:	4a17      	ldr	r2, [pc, #92]	; (8005198 <_dtoa_r+0x258>)
 800513a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800513e:	2d00      	cmp	r5, #0
 8005140:	bf0c      	ite	eq
 8005142:	4615      	moveq	r5, r2
 8005144:	461d      	movne	r5, r3
 8005146:	e7e3      	b.n	8005110 <_dtoa_r+0x1d0>
 8005148:	4649      	mov	r1, r9
 800514a:	4640      	mov	r0, r8
 800514c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005150:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005152:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8005154:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 8005158:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800515c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005160:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005164:	2500      	movs	r5, #0
 8005166:	930d      	str	r3, [sp, #52]	; 0x34
 8005168:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800516c:	9516      	str	r5, [sp, #88]	; 0x58
 800516e:	e755      	b.n	800501c <_dtoa_r+0xdc>
 8005170:	636f4361 	.word	0x636f4361
 8005174:	3fd287a7 	.word	0x3fd287a7
 8005178:	8b60c8b3 	.word	0x8b60c8b3
 800517c:	3fc68a28 	.word	0x3fc68a28
 8005180:	509f79fb 	.word	0x509f79fb
 8005184:	3fd34413 	.word	0x3fd34413
 8005188:	08009140 	.word	0x08009140
 800518c:	08009141 	.word	0x08009141
 8005190:	08008ea0 	.word	0x08008ea0
 8005194:	08009150 	.word	0x08009150
 8005198:	08009144 	.word	0x08009144
 800519c:	2400      	movs	r4, #0
 800519e:	9426      	str	r4, [sp, #152]	; 0x98
 80051a0:	2400      	movs	r4, #0
 80051a2:	647c      	str	r4, [r7, #68]	; 0x44
 80051a4:	4638      	mov	r0, r7
 80051a6:	4621      	mov	r1, r4
 80051a8:	f001 fa88 	bl	80066bc <_Balloc>
 80051ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80051b0:	950e      	str	r5, [sp, #56]	; 0x38
 80051b2:	2501      	movs	r5, #1
 80051b4:	9512      	str	r5, [sp, #72]	; 0x48
 80051b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80051ba:	9009      	str	r0, [sp, #36]	; 0x24
 80051bc:	6438      	str	r0, [r7, #64]	; 0x40
 80051be:	9515      	str	r5, [sp, #84]	; 0x54
 80051c0:	9427      	str	r4, [sp, #156]	; 0x9c
 80051c2:	9c05      	ldr	r4, [sp, #20]
 80051c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80051c6:	2c0e      	cmp	r4, #14
 80051c8:	bfcc      	ite	gt
 80051ca:	2500      	movgt	r5, #0
 80051cc:	2501      	movle	r5, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	bfb8      	it	lt
 80051d2:	2500      	movlt	r5, #0
 80051d4:	2d00      	cmp	r5, #0
 80051d6:	f000 80c1 	beq.w	800535c <_dtoa_r+0x41c>
 80051da:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80051dc:	4b5e      	ldr	r3, [pc, #376]	; (8005358 <_dtoa_r+0x418>)
 80051de:	0fe5      	lsrs	r5, r4, #31
 80051e0:	9c05      	ldr	r4, [sp, #20]
 80051e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051ea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80051ec:	2c00      	cmp	r4, #0
 80051ee:	bfcc      	ite	gt
 80051f0:	2500      	movgt	r5, #0
 80051f2:	f005 0501 	andle.w	r5, r5, #1
 80051f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051fa:	2d00      	cmp	r5, #0
 80051fc:	f040 81a8 	bne.w	8005550 <_dtoa_r+0x610>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4650      	mov	r0, sl
 8005206:	4659      	mov	r1, fp
 8005208:	f003 fa94 	bl	8008734 <__aeabi_ddiv>
 800520c:	f003 fc02 	bl	8008a14 <__aeabi_d2iz>
 8005210:	4606      	mov	r6, r0
 8005212:	f003 f8ff 	bl	8008414 <__aeabi_i2d>
 8005216:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800521a:	f003 f961 	bl	80084e0 <__aeabi_dmul>
 800521e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005220:	460b      	mov	r3, r1
 8005222:	4602      	mov	r2, r0
 8005224:	4659      	mov	r1, fp
 8005226:	4650      	mov	r0, sl
 8005228:	f002 ffa6 	bl	8008178 <__aeabi_dsub>
 800522c:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8005230:	f804 3b01 	strb.w	r3, [r4], #1
 8005234:	9411      	str	r4, [sp, #68]	; 0x44
 8005236:	46a0      	mov	r8, r4
 8005238:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800523a:	2c01      	cmp	r4, #1
 800523c:	4682      	mov	sl, r0
 800523e:	468b      	mov	fp, r1
 8005240:	d04c      	beq.n	80052dc <_dtoa_r+0x39c>
 8005242:	2300      	movs	r3, #0
 8005244:	2200      	movs	r2, #0
 8005246:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800524a:	f003 f949 	bl	80084e0 <__aeabi_dmul>
 800524e:	2200      	movs	r2, #0
 8005250:	2300      	movs	r3, #0
 8005252:	4682      	mov	sl, r0
 8005254:	468b      	mov	fp, r1
 8005256:	2401      	movs	r4, #1
 8005258:	f003 fbaa 	bl	80089b0 <__aeabi_dcmpeq>
 800525c:	b100      	cbz	r0, 8005260 <_dtoa_r+0x320>
 800525e:	462c      	mov	r4, r5
 8005260:	f014 0fff 	tst.w	r4, #255	; 0xff
 8005264:	f000 8575 	beq.w	8005d52 <_dtoa_r+0xe12>
 8005268:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800526a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800526c:	1ca5      	adds	r5, r4, #2
 800526e:	eb04 0900 	add.w	r9, r4, r0
 8005272:	e00d      	b.n	8005290 <_dtoa_r+0x350>
 8005274:	f003 f934 	bl	80084e0 <__aeabi_dmul>
 8005278:	2200      	movs	r2, #0
 800527a:	2300      	movs	r3, #0
 800527c:	4682      	mov	sl, r0
 800527e:	468b      	mov	fp, r1
 8005280:	f003 fb96 	bl	80089b0 <__aeabi_dcmpeq>
 8005284:	b100      	cbz	r0, 8005288 <_dtoa_r+0x348>
 8005286:	2400      	movs	r4, #0
 8005288:	f014 0fff 	tst.w	r4, #255	; 0xff
 800528c:	f000 8423 	beq.w	8005ad6 <_dtoa_r+0xb96>
 8005290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005294:	4650      	mov	r0, sl
 8005296:	4659      	mov	r1, fp
 8005298:	f003 fa4c 	bl	8008734 <__aeabi_ddiv>
 800529c:	f003 fbba 	bl	8008a14 <__aeabi_d2iz>
 80052a0:	4606      	mov	r6, r0
 80052a2:	f003 f8b7 	bl	8008414 <__aeabi_i2d>
 80052a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052aa:	f003 f919 	bl	80084e0 <__aeabi_dmul>
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4650      	mov	r0, sl
 80052b4:	4659      	mov	r1, fp
 80052b6:	f002 ff5f 	bl	8008178 <__aeabi_dsub>
 80052ba:	f106 0430 	add.w	r4, r6, #48	; 0x30
 80052be:	2300      	movs	r3, #0
 80052c0:	2200      	movs	r2, #0
 80052c2:	454d      	cmp	r5, r9
 80052c4:	f805 4c01 	strb.w	r4, [r5, #-1]
 80052c8:	46a8      	mov	r8, r5
 80052ca:	4682      	mov	sl, r0
 80052cc:	468b      	mov	fp, r1
 80052ce:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80052d2:	f04f 0401 	mov.w	r4, #1
 80052d6:	f105 0501 	add.w	r5, r5, #1
 80052da:	d1cb      	bne.n	8005274 <_dtoa_r+0x334>
 80052dc:	4652      	mov	r2, sl
 80052de:	465b      	mov	r3, fp
 80052e0:	4650      	mov	r0, sl
 80052e2:	4659      	mov	r1, fp
 80052e4:	f002 ff4a 	bl	800817c <__adddf3>
 80052e8:	4604      	mov	r4, r0
 80052ea:	460d      	mov	r5, r1
 80052ec:	4622      	mov	r2, r4
 80052ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052f2:	462b      	mov	r3, r5
 80052f4:	f003 fb66 	bl	80089c4 <__aeabi_dcmplt>
 80052f8:	b958      	cbnz	r0, 8005312 <_dtoa_r+0x3d2>
 80052fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052fe:	4622      	mov	r2, r4
 8005300:	462b      	mov	r3, r5
 8005302:	f003 fb55 	bl	80089b0 <__aeabi_dcmpeq>
 8005306:	2800      	cmp	r0, #0
 8005308:	f000 83e5 	beq.w	8005ad6 <_dtoa_r+0xb96>
 800530c:	07f3      	lsls	r3, r6, #31
 800530e:	f140 83e2 	bpl.w	8005ad6 <_dtoa_r+0xb96>
 8005312:	9c05      	ldr	r4, [sp, #20]
 8005314:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8005318:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800531a:	9417      	str	r4, [sp, #92]	; 0x5c
 800531c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800531e:	e003      	b.n	8005328 <_dtoa_r+0x3e8>
 8005320:	f818 6c02 	ldrb.w	r6, [r8, #-2]
 8005324:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005328:	2e39      	cmp	r6, #57	; 0x39
 800532a:	4643      	mov	r3, r8
 800532c:	f040 8489 	bne.w	8005c42 <_dtoa_r+0xd02>
 8005330:	4590      	cmp	r8, r2
 8005332:	d1f5      	bne.n	8005320 <_dtoa_r+0x3e0>
 8005334:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005336:	9309      	str	r3, [sp, #36]	; 0x24
 8005338:	3401      	adds	r4, #1
 800533a:	9405      	str	r4, [sp, #20]
 800533c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800533e:	2330      	movs	r3, #48	; 0x30
 8005340:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005344:	2231      	movs	r2, #49	; 0x31
 8005346:	4623      	mov	r3, r4
 8005348:	f803 2c01 	strb.w	r2, [r3, #-1]
 800534c:	e0b0      	b.n	80054b0 <_dtoa_r+0x570>
 800534e:	1ceb      	adds	r3, r5, #3
 8005350:	e6e8      	b.n	8005124 <_dtoa_r+0x1e4>
 8005352:	2501      	movs	r5, #1
 8005354:	9514      	str	r5, [sp, #80]	; 0x50
 8005356:	e6af      	b.n	80050b8 <_dtoa_r+0x178>
 8005358:	08008ea0 	.word	0x08008ea0
 800535c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800535e:	2c00      	cmp	r4, #0
 8005360:	f040 80d1 	bne.w	8005506 <_dtoa_r+0x5c6>
 8005364:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005366:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005368:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800536a:	9306      	str	r3, [sp, #24]
 800536c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800536e:	2800      	cmp	r0, #0
 8005370:	bfc8      	it	gt
 8005372:	2c00      	cmpgt	r4, #0
 8005374:	dd09      	ble.n	800538a <_dtoa_r+0x44a>
 8005376:	4603      	mov	r3, r0
 8005378:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800537a:	42a3      	cmp	r3, r4
 800537c:	bfa8      	it	ge
 800537e:	4623      	movge	r3, r4
 8005380:	1ac9      	subs	r1, r1, r3
 8005382:	1ac0      	subs	r0, r0, r3
 8005384:	910f      	str	r1, [sp, #60]	; 0x3c
 8005386:	1ae4      	subs	r4, r4, r3
 8005388:	900b      	str	r0, [sp, #44]	; 0x2c
 800538a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800538c:	2a00      	cmp	r2, #0
 800538e:	dd1a      	ble.n	80053c6 <_dtoa_r+0x486>
 8005390:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 841d 	beq.w	8005bd2 <_dtoa_r+0xc92>
 8005398:	2d00      	cmp	r5, #0
 800539a:	dd10      	ble.n	80053be <_dtoa_r+0x47e>
 800539c:	9906      	ldr	r1, [sp, #24]
 800539e:	462a      	mov	r2, r5
 80053a0:	4638      	mov	r0, r7
 80053a2:	f001 fb39 	bl	8006a18 <__pow5mult>
 80053a6:	9006      	str	r0, [sp, #24]
 80053a8:	9906      	ldr	r1, [sp, #24]
 80053aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053ac:	4638      	mov	r0, r7
 80053ae:	f001 fa9b 	bl	80068e8 <__multiply>
 80053b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80053b4:	4606      	mov	r6, r0
 80053b6:	4638      	mov	r0, r7
 80053b8:	f001 f9a6 	bl	8006708 <_Bfree>
 80053bc:	960a      	str	r6, [sp, #40]	; 0x28
 80053be:	9810      	ldr	r0, [sp, #64]	; 0x40
 80053c0:	1b42      	subs	r2, r0, r5
 80053c2:	f040 8429 	bne.w	8005c18 <_dtoa_r+0xcd8>
 80053c6:	2101      	movs	r1, #1
 80053c8:	4638      	mov	r0, r7
 80053ca:	f001 fa83 	bl	80068d4 <__i2b>
 80053ce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80053d0:	2d00      	cmp	r5, #0
 80053d2:	4606      	mov	r6, r0
 80053d4:	dd05      	ble.n	80053e2 <_dtoa_r+0x4a2>
 80053d6:	4631      	mov	r1, r6
 80053d8:	4638      	mov	r0, r7
 80053da:	462a      	mov	r2, r5
 80053dc:	f001 fb1c 	bl	8006a18 <__pow5mult>
 80053e0:	4606      	mov	r6, r0
 80053e2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80053e4:	2d01      	cmp	r5, #1
 80053e6:	f340 820f 	ble.w	8005808 <_dtoa_r+0x8c8>
 80053ea:	2500      	movs	r5, #0
 80053ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80053ee:	2301      	movs	r3, #1
 80053f0:	2800      	cmp	r0, #0
 80053f2:	f040 838c 	bne.w	8005b0e <_dtoa_r+0xbce>
 80053f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053f8:	185b      	adds	r3, r3, r1
 80053fa:	f013 031f 	ands.w	r3, r3, #31
 80053fe:	f000 82cb 	beq.w	8005998 <_dtoa_r+0xa58>
 8005402:	f1c3 0220 	rsb	r2, r3, #32
 8005406:	2a04      	cmp	r2, #4
 8005408:	f340 84bf 	ble.w	8005d8a <_dtoa_r+0xe4a>
 800540c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800540e:	f1c3 031c 	rsb	r3, r3, #28
 8005412:	18d2      	adds	r2, r2, r3
 8005414:	18c9      	adds	r1, r1, r3
 8005416:	920f      	str	r2, [sp, #60]	; 0x3c
 8005418:	18e4      	adds	r4, r4, r3
 800541a:	910b      	str	r1, [sp, #44]	; 0x2c
 800541c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800541e:	2a00      	cmp	r2, #0
 8005420:	dd04      	ble.n	800542c <_dtoa_r+0x4ec>
 8005422:	4638      	mov	r0, r7
 8005424:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005426:	f001 fb43 	bl	8006ab0 <__lshift>
 800542a:	900a      	str	r0, [sp, #40]	; 0x28
 800542c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800542e:	2b00      	cmp	r3, #0
 8005430:	dd05      	ble.n	800543e <_dtoa_r+0x4fe>
 8005432:	4631      	mov	r1, r6
 8005434:	4638      	mov	r0, r7
 8005436:	461a      	mov	r2, r3
 8005438:	f001 fb3a 	bl	8006ab0 <__lshift>
 800543c:	4606      	mov	r6, r0
 800543e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005440:	2800      	cmp	r0, #0
 8005442:	f040 834c 	bne.w	8005ade <_dtoa_r+0xb9e>
 8005446:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005448:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800544a:	2900      	cmp	r1, #0
 800544c:	bfcc      	ite	gt
 800544e:	2300      	movgt	r3, #0
 8005450:	2301      	movle	r3, #1
 8005452:	2a02      	cmp	r2, #2
 8005454:	bfd8      	it	le
 8005456:	2300      	movle	r3, #0
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 8226 	beq.w	80058aa <_dtoa_r+0x96a>
 800545e:	2900      	cmp	r1, #0
 8005460:	f040 808a 	bne.w	8005578 <_dtoa_r+0x638>
 8005464:	4631      	mov	r1, r6
 8005466:	2205      	movs	r2, #5
 8005468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800546a:	4638      	mov	r0, r7
 800546c:	f001 f956 	bl	800671c <__multadd>
 8005470:	4606      	mov	r6, r0
 8005472:	4631      	mov	r1, r6
 8005474:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005476:	f001 fb7b 	bl	8006b70 <__mcmp>
 800547a:	2800      	cmp	r0, #0
 800547c:	dd7c      	ble.n	8005578 <_dtoa_r+0x638>
 800547e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005480:	9c05      	ldr	r4, [sp, #20]
 8005482:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005484:	2231      	movs	r2, #49	; 0x31
 8005486:	f803 2b01 	strb.w	r2, [r3], #1
 800548a:	3401      	adds	r4, #1
 800548c:	9405      	str	r4, [sp, #20]
 800548e:	9309      	str	r3, [sp, #36]	; 0x24
 8005490:	2400      	movs	r4, #0
 8005492:	4638      	mov	r0, r7
 8005494:	4631      	mov	r1, r6
 8005496:	f001 f937 	bl	8006708 <_Bfree>
 800549a:	9806      	ldr	r0, [sp, #24]
 800549c:	b140      	cbz	r0, 80054b0 <_dtoa_r+0x570>
 800549e:	4284      	cmp	r4, r0
 80054a0:	bf18      	it	ne
 80054a2:	2c00      	cmpne	r4, #0
 80054a4:	f040 8273 	bne.w	800598e <_dtoa_r+0xa4e>
 80054a8:	4638      	mov	r0, r7
 80054aa:	9906      	ldr	r1, [sp, #24]
 80054ac:	f001 f92c 	bl	8006708 <_Bfree>
 80054b0:	4638      	mov	r0, r7
 80054b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054b4:	f001 f928 	bl	8006708 <_Bfree>
 80054b8:	9c05      	ldr	r4, [sp, #20]
 80054ba:	1c63      	adds	r3, r4, #1
 80054bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80054be:	2200      	movs	r2, #0
 80054c0:	7022      	strb	r2, [r4, #0]
 80054c2:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80054c8:	2c00      	cmp	r4, #0
 80054ca:	f43f ad71 	beq.w	8004fb0 <_dtoa_r+0x70>
 80054ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054d0:	6020      	str	r0, [r4, #0]
 80054d2:	e56d      	b.n	8004fb0 <_dtoa_r+0x70>
 80054d4:	9c05      	ldr	r4, [sp, #20]
 80054d6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80054d8:	1b2d      	subs	r5, r5, r4
 80054da:	950f      	str	r5, [sp, #60]	; 0x3c
 80054dc:	4265      	negs	r5, r4
 80054de:	2400      	movs	r4, #0
 80054e0:	9510      	str	r5, [sp, #64]	; 0x40
 80054e2:	9413      	str	r4, [sp, #76]	; 0x4c
 80054e4:	e5f9      	b.n	80050da <_dtoa_r+0x19a>
 80054e6:	4264      	negs	r4, r4
 80054e8:	940f      	str	r4, [sp, #60]	; 0x3c
 80054ea:	2400      	movs	r4, #0
 80054ec:	940b      	str	r4, [sp, #44]	; 0x2c
 80054ee:	e5ea      	b.n	80050c6 <_dtoa_r+0x186>
 80054f0:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 80054f4:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 80054f8:	1b00      	subs	r0, r0, r4
 80054fa:	fa0a f000 	lsl.w	r0, sl, r0
 80054fe:	e582      	b.n	8005006 <_dtoa_r+0xc6>
 8005500:	2500      	movs	r5, #0
 8005502:	9514      	str	r5, [sp, #80]	; 0x50
 8005504:	e5d8      	b.n	80050b8 <_dtoa_r+0x178>
 8005506:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8005508:	2c01      	cmp	r4, #1
 800550a:	f340 838f 	ble.w	8005c2c <_dtoa_r+0xcec>
 800550e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005510:	1e62      	subs	r2, r4, #1
 8005512:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005514:	4294      	cmp	r4, r2
 8005516:	bfbf      	itttt	lt
 8005518:	9c10      	ldrlt	r4, [sp, #64]	; 0x40
 800551a:	9210      	strlt	r2, [sp, #64]	; 0x40
 800551c:	ebc4 0302 	rsblt	r3, r4, r2
 8005520:	9c13      	ldrlt	r4, [sp, #76]	; 0x4c
 8005522:	bfb6      	itet	lt
 8005524:	18e4      	addlt	r4, r4, r3
 8005526:	ebc2 0504 	rsbge	r5, r2, r4
 800552a:	9413      	strlt	r4, [sp, #76]	; 0x4c
 800552c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800552e:	2c00      	cmp	r4, #0
 8005530:	f2c0 838f 	blt.w	8005c52 <_dtoa_r+0xd12>
 8005534:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005538:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800553a:	18d2      	adds	r2, r2, r3
 800553c:	920f      	str	r2, [sp, #60]	; 0x3c
 800553e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005540:	4638      	mov	r0, r7
 8005542:	18d2      	adds	r2, r2, r3
 8005544:	2101      	movs	r1, #1
 8005546:	920b      	str	r2, [sp, #44]	; 0x2c
 8005548:	f001 f9c4 	bl	80068d4 <__i2b>
 800554c:	9006      	str	r0, [sp, #24]
 800554e:	e70d      	b.n	800536c <_dtoa_r+0x42c>
 8005550:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005552:	2d00      	cmp	r5, #0
 8005554:	f040 8367 	bne.w	8005c26 <_dtoa_r+0xce6>
 8005558:	2300      	movs	r3, #0
 800555a:	2200      	movs	r2, #0
 800555c:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8005560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005564:	f002 ffbc 	bl	80084e0 <__aeabi_dmul>
 8005568:	4652      	mov	r2, sl
 800556a:	465b      	mov	r3, fp
 800556c:	f003 fa3e 	bl	80089ec <__aeabi_dcmpge>
 8005570:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005572:	9606      	str	r6, [sp, #24]
 8005574:	2800      	cmp	r0, #0
 8005576:	d082      	beq.n	800547e <_dtoa_r+0x53e>
 8005578:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800557a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800557c:	43e4      	mvns	r4, r4
 800557e:	9405      	str	r4, [sp, #20]
 8005580:	2400      	movs	r4, #0
 8005582:	e786      	b.n	8005492 <_dtoa_r+0x552>
 8005584:	2501      	movs	r5, #1
 8005586:	9512      	str	r5, [sp, #72]	; 0x48
 8005588:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800558a:	2d00      	cmp	r5, #0
 800558c:	f340 82d3 	ble.w	8005b36 <_dtoa_r+0xbf6>
 8005590:	46a9      	mov	r9, r5
 8005592:	2d0e      	cmp	r5, #14
 8005594:	bf8c      	ite	hi
 8005596:	2400      	movhi	r4, #0
 8005598:	f004 0401 	andls.w	r4, r4, #1
 800559c:	9515      	str	r5, [sp, #84]	; 0x54
 800559e:	950e      	str	r5, [sp, #56]	; 0x38
 80055a0:	2100      	movs	r1, #0
 80055a2:	f1b9 0f17 	cmp.w	r9, #23
 80055a6:	6479      	str	r1, [r7, #68]	; 0x44
 80055a8:	d909      	bls.n	80055be <_dtoa_r+0x67e>
 80055aa:	2201      	movs	r2, #1
 80055ac:	2304      	movs	r3, #4
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	f103 0014 	add.w	r0, r3, #20
 80055b4:	4611      	mov	r1, r2
 80055b6:	3201      	adds	r2, #1
 80055b8:	4548      	cmp	r0, r9
 80055ba:	d9f8      	bls.n	80055ae <_dtoa_r+0x66e>
 80055bc:	6479      	str	r1, [r7, #68]	; 0x44
 80055be:	4638      	mov	r0, r7
 80055c0:	f001 f87c 	bl	80066bc <_Balloc>
 80055c4:	9009      	str	r0, [sp, #36]	; 0x24
 80055c6:	6438      	str	r0, [r7, #64]	; 0x40
 80055c8:	2c00      	cmp	r4, #0
 80055ca:	f43f adfa 	beq.w	80051c2 <_dtoa_r+0x282>
 80055ce:	9c05      	ldr	r4, [sp, #20]
 80055d0:	4652      	mov	r2, sl
 80055d2:	465b      	mov	r3, fp
 80055d4:	2c00      	cmp	r4, #0
 80055d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80055da:	f340 81f8 	ble.w	80059ce <_dtoa_r+0xa8e>
 80055de:	4b97      	ldr	r3, [pc, #604]	; (800583c <_dtoa_r+0x8fc>)
 80055e0:	f004 020f 	and.w	r2, r4, #15
 80055e4:	1124      	asrs	r4, r4, #4
 80055e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055ea:	2602      	movs	r6, #2
 80055ec:	06e2      	lsls	r2, r4, #27
 80055ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055f2:	d50b      	bpl.n	800560c <_dtoa_r+0x6cc>
 80055f4:	4b92      	ldr	r3, [pc, #584]	; (8005840 <_dtoa_r+0x900>)
 80055f6:	4650      	mov	r0, sl
 80055f8:	4659      	mov	r1, fp
 80055fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055fe:	f003 f899 	bl	8008734 <__aeabi_ddiv>
 8005602:	f004 040f 	and.w	r4, r4, #15
 8005606:	4682      	mov	sl, r0
 8005608:	468b      	mov	fp, r1
 800560a:	2603      	movs	r6, #3
 800560c:	b174      	cbz	r4, 800562c <_dtoa_r+0x6ec>
 800560e:	4d8c      	ldr	r5, [pc, #560]	; (8005840 <_dtoa_r+0x900>)
 8005610:	4640      	mov	r0, r8
 8005612:	4649      	mov	r1, r9
 8005614:	07e3      	lsls	r3, r4, #31
 8005616:	d504      	bpl.n	8005622 <_dtoa_r+0x6e2>
 8005618:	e9d5 2300 	ldrd	r2, r3, [r5]
 800561c:	f002 ff60 	bl	80084e0 <__aeabi_dmul>
 8005620:	3601      	adds	r6, #1
 8005622:	3508      	adds	r5, #8
 8005624:	1064      	asrs	r4, r4, #1
 8005626:	d1f5      	bne.n	8005614 <_dtoa_r+0x6d4>
 8005628:	4680      	mov	r8, r0
 800562a:	4689      	mov	r9, r1
 800562c:	4650      	mov	r0, sl
 800562e:	4659      	mov	r1, fp
 8005630:	4642      	mov	r2, r8
 8005632:	464b      	mov	r3, r9
 8005634:	f003 f87e 	bl	8008734 <__aeabi_ddiv>
 8005638:	4682      	mov	sl, r0
 800563a:	468b      	mov	fp, r1
 800563c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800563e:	2c00      	cmp	r4, #0
 8005640:	f000 8100 	beq.w	8005844 <_dtoa_r+0x904>
 8005644:	2300      	movs	r3, #0
 8005646:	4650      	mov	r0, sl
 8005648:	4659      	mov	r1, fp
 800564a:	2200      	movs	r2, #0
 800564c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8005650:	2401      	movs	r4, #1
 8005652:	f003 f9b7 	bl	80089c4 <__aeabi_dcmplt>
 8005656:	b900      	cbnz	r0, 800565a <_dtoa_r+0x71a>
 8005658:	2400      	movs	r4, #0
 800565a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800565c:	2d00      	cmp	r5, #0
 800565e:	bfd4      	ite	le
 8005660:	2400      	movle	r4, #0
 8005662:	f004 0401 	andgt.w	r4, r4, #1
 8005666:	2c00      	cmp	r4, #0
 8005668:	f000 80ec 	beq.w	8005844 <_dtoa_r+0x904>
 800566c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800566e:	2c00      	cmp	r4, #0
 8005670:	f340 819b 	ble.w	80059aa <_dtoa_r+0xa6a>
 8005674:	2300      	movs	r3, #0
 8005676:	2200      	movs	r2, #0
 8005678:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800567c:	4650      	mov	r0, sl
 800567e:	4659      	mov	r1, fp
 8005680:	f002 ff2e 	bl	80084e0 <__aeabi_dmul>
 8005684:	4682      	mov	sl, r0
 8005686:	1c70      	adds	r0, r6, #1
 8005688:	468b      	mov	fp, r1
 800568a:	f002 fec3 	bl	8008414 <__aeabi_i2d>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4650      	mov	r0, sl
 8005694:	4659      	mov	r1, fp
 8005696:	f002 ff23 	bl	80084e0 <__aeabi_dmul>
 800569a:	2300      	movs	r3, #0
 800569c:	2200      	movs	r2, #0
 800569e:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80056a2:	f002 fd6b 	bl	800817c <__adddf3>
 80056a6:	9d05      	ldr	r5, [sp, #20]
 80056a8:	3d01      	subs	r5, #1
 80056aa:	9517      	str	r5, [sp, #92]	; 0x5c
 80056ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80056ae:	4680      	mov	r8, r0
 80056b0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80056b4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80056b6:	2c00      	cmp	r4, #0
 80056b8:	f000 81b0 	beq.w	8005a1c <_dtoa_r+0xadc>
 80056bc:	4b5f      	ldr	r3, [pc, #380]	; (800583c <_dtoa_r+0x8fc>)
 80056be:	2100      	movs	r1, #0
 80056c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80056c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80056c8:	2000      	movs	r0, #0
 80056ca:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 80056ce:	f003 f831 	bl	8008734 <__aeabi_ddiv>
 80056d2:	4642      	mov	r2, r8
 80056d4:	464b      	mov	r3, r9
 80056d6:	f002 fd4f 	bl	8008178 <__aeabi_dsub>
 80056da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80056de:	4659      	mov	r1, fp
 80056e0:	4650      	mov	r0, sl
 80056e2:	f003 f997 	bl	8008a14 <__aeabi_d2iz>
 80056e6:	4606      	mov	r6, r0
 80056e8:	f002 fe94 	bl	8008414 <__aeabi_i2d>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4650      	mov	r0, sl
 80056f2:	4659      	mov	r1, fp
 80056f4:	f002 fd40 	bl	8008178 <__aeabi_dsub>
 80056f8:	3630      	adds	r6, #48	; 0x30
 80056fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80056fc:	b2f6      	uxtb	r6, r6
 80056fe:	4682      	mov	sl, r0
 8005700:	468b      	mov	fp, r1
 8005702:	f804 6b01 	strb.w	r6, [r4], #1
 8005706:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800570a:	4652      	mov	r2, sl
 800570c:	465b      	mov	r3, fp
 800570e:	9411      	str	r4, [sp, #68]	; 0x44
 8005710:	46a0      	mov	r8, r4
 8005712:	f003 f975 	bl	8008a00 <__aeabi_dcmpgt>
 8005716:	2800      	cmp	r0, #0
 8005718:	f040 8325 	bne.w	8005d66 <_dtoa_r+0xe26>
 800571c:	2100      	movs	r1, #0
 800571e:	4652      	mov	r2, sl
 8005720:	465b      	mov	r3, fp
 8005722:	2000      	movs	r0, #0
 8005724:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8005728:	f002 fd26 	bl	8008178 <__aeabi_dsub>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005734:	f003 f964 	bl	8008a00 <__aeabi_dcmpgt>
 8005738:	2800      	cmp	r0, #0
 800573a:	f040 827f 	bne.w	8005c3c <_dtoa_r+0xcfc>
 800573e:	2d01      	cmp	r5, #1
 8005740:	f340 8133 	ble.w	80059aa <_dtoa_r+0xa6a>
 8005744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005746:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005748:	1945      	adds	r5, r0, r5
 800574a:	e00f      	b.n	800576c <_dtoa_r+0x82c>
 800574c:	2100      	movs	r1, #0
 800574e:	2000      	movs	r0, #0
 8005750:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8005754:	f002 fd10 	bl	8008178 <__aeabi_dsub>
 8005758:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800575c:	f003 f932 	bl	80089c4 <__aeabi_dcmplt>
 8005760:	2800      	cmp	r0, #0
 8005762:	f040 826b 	bne.w	8005c3c <_dtoa_r+0xcfc>
 8005766:	42ac      	cmp	r4, r5
 8005768:	f000 811f 	beq.w	80059aa <_dtoa_r+0xa6a>
 800576c:	2300      	movs	r3, #0
 800576e:	2200      	movs	r2, #0
 8005770:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005774:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005778:	f002 feb2 	bl	80084e0 <__aeabi_dmul>
 800577c:	2300      	movs	r3, #0
 800577e:	2200      	movs	r2, #0
 8005780:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005784:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005788:	4650      	mov	r0, sl
 800578a:	4659      	mov	r1, fp
 800578c:	f002 fea8 	bl	80084e0 <__aeabi_dmul>
 8005790:	4680      	mov	r8, r0
 8005792:	4689      	mov	r9, r1
 8005794:	f003 f93e 	bl	8008a14 <__aeabi_d2iz>
 8005798:	4606      	mov	r6, r0
 800579a:	f002 fe3b 	bl	8008414 <__aeabi_i2d>
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	4640      	mov	r0, r8
 80057a4:	4649      	mov	r1, r9
 80057a6:	f002 fce7 	bl	8008178 <__aeabi_dsub>
 80057aa:	3630      	adds	r6, #48	; 0x30
 80057ac:	b2f6      	uxtb	r6, r6
 80057ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057b2:	f804 6b01 	strb.w	r6, [r4], #1
 80057b6:	4682      	mov	sl, r0
 80057b8:	468b      	mov	fp, r1
 80057ba:	f003 f903 	bl	80089c4 <__aeabi_dcmplt>
 80057be:	46a0      	mov	r8, r4
 80057c0:	4652      	mov	r2, sl
 80057c2:	465b      	mov	r3, fp
 80057c4:	2800      	cmp	r0, #0
 80057c6:	d0c1      	beq.n	800574c <_dtoa_r+0x80c>
 80057c8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80057ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80057cc:	9005      	str	r0, [sp, #20]
 80057ce:	9409      	str	r4, [sp, #36]	; 0x24
 80057d0:	e66e      	b.n	80054b0 <_dtoa_r+0x570>
 80057d2:	2500      	movs	r5, #0
 80057d4:	9512      	str	r5, [sp, #72]	; 0x48
 80057d6:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80057d8:	9805      	ldr	r0, [sp, #20]
 80057da:	182d      	adds	r5, r5, r0
 80057dc:	f105 0901 	add.w	r9, r5, #1
 80057e0:	f1b9 0f00 	cmp.w	r9, #0
 80057e4:	9515      	str	r5, [sp, #84]	; 0x54
 80057e6:	f340 819b 	ble.w	8005b20 <_dtoa_r+0xbe0>
 80057ea:	f1b9 0f0e 	cmp.w	r9, #14
 80057ee:	bf8c      	ite	hi
 80057f0:	2400      	movhi	r4, #0
 80057f2:	f004 0401 	andls.w	r4, r4, #1
 80057f6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80057fa:	e6d1      	b.n	80055a0 <_dtoa_r+0x660>
 80057fc:	2500      	movs	r5, #0
 80057fe:	9512      	str	r5, [sp, #72]	; 0x48
 8005800:	e6c2      	b.n	8005588 <_dtoa_r+0x648>
 8005802:	2501      	movs	r5, #1
 8005804:	9512      	str	r5, [sp, #72]	; 0x48
 8005806:	e7e6      	b.n	80057d6 <_dtoa_r+0x896>
 8005808:	f1ba 0f00 	cmp.w	sl, #0
 800580c:	f47f aded 	bne.w	80053ea <_dtoa_r+0x4aa>
 8005810:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005814:	4655      	mov	r5, sl
 8005816:	2b00      	cmp	r3, #0
 8005818:	f47f ade8 	bne.w	80053ec <_dtoa_r+0x4ac>
 800581c:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8005820:	ea0b 0303 	and.w	r3, fp, r3
 8005824:	461d      	mov	r5, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	f43f ade0 	beq.w	80053ec <_dtoa_r+0x4ac>
 800582c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800582e:	3501      	adds	r5, #1
 8005830:	950f      	str	r5, [sp, #60]	; 0x3c
 8005832:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005834:	3501      	adds	r5, #1
 8005836:	950b      	str	r5, [sp, #44]	; 0x2c
 8005838:	2501      	movs	r5, #1
 800583a:	e5d7      	b.n	80053ec <_dtoa_r+0x4ac>
 800583c:	08008ea0 	.word	0x08008ea0
 8005840:	08008f90 	.word	0x08008f90
 8005844:	4630      	mov	r0, r6
 8005846:	f002 fde5 	bl	8008414 <__aeabi_i2d>
 800584a:	4652      	mov	r2, sl
 800584c:	465b      	mov	r3, fp
 800584e:	f002 fe47 	bl	80084e0 <__aeabi_dmul>
 8005852:	2300      	movs	r3, #0
 8005854:	2200      	movs	r2, #0
 8005856:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800585a:	f002 fc8f 	bl	800817c <__adddf3>
 800585e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005860:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 8005864:	4680      	mov	r8, r0
 8005866:	46a1      	mov	r9, r4
 8005868:	2d00      	cmp	r5, #0
 800586a:	f040 80ac 	bne.w	80059c6 <_dtoa_r+0xa86>
 800586e:	2300      	movs	r3, #0
 8005870:	2200      	movs	r2, #0
 8005872:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8005876:	4650      	mov	r0, sl
 8005878:	4659      	mov	r1, fp
 800587a:	f002 fc7d 	bl	8008178 <__aeabi_dsub>
 800587e:	4642      	mov	r2, r8
 8005880:	4623      	mov	r3, r4
 8005882:	4682      	mov	sl, r0
 8005884:	468b      	mov	fp, r1
 8005886:	f003 f8bb 	bl	8008a00 <__aeabi_dcmpgt>
 800588a:	2800      	cmp	r0, #0
 800588c:	f040 80c3 	bne.w	8005a16 <_dtoa_r+0xad6>
 8005890:	4642      	mov	r2, r8
 8005892:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8005896:	4650      	mov	r0, sl
 8005898:	4659      	mov	r1, fp
 800589a:	f003 f893 	bl	80089c4 <__aeabi_dcmplt>
 800589e:	2800      	cmp	r0, #0
 80058a0:	f000 8083 	beq.w	80059aa <_dtoa_r+0xa6a>
 80058a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80058a6:	9606      	str	r6, [sp, #24]
 80058a8:	e666      	b.n	8005578 <_dtoa_r+0x638>
 80058aa:	9812      	ldr	r0, [sp, #72]	; 0x48
 80058ac:	2800      	cmp	r0, #0
 80058ae:	f000 8147 	beq.w	8005b40 <_dtoa_r+0xc00>
 80058b2:	2c00      	cmp	r4, #0
 80058b4:	dd05      	ble.n	80058c2 <_dtoa_r+0x982>
 80058b6:	4638      	mov	r0, r7
 80058b8:	9906      	ldr	r1, [sp, #24]
 80058ba:	4622      	mov	r2, r4
 80058bc:	f001 f8f8 	bl	8006ab0 <__lshift>
 80058c0:	9006      	str	r0, [sp, #24]
 80058c2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80058c6:	2d00      	cmp	r5, #0
 80058c8:	f040 8201 	bne.w	8005cce <_dtoa_r+0xd8e>
 80058cc:	f00a 0001 	and.w	r0, sl, #1
 80058d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80058d2:	9c06      	ldr	r4, [sp, #24]
 80058d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80058d6:	4631      	mov	r1, r6
 80058d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80058da:	f7ff faa1 	bl	8004e20 <quorem>
 80058de:	4621      	mov	r1, r4
 80058e0:	9008      	str	r0, [sp, #32]
 80058e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80058e4:	f001 f944 	bl	8006b70 <__mcmp>
 80058e8:	4642      	mov	r2, r8
 80058ea:	4681      	mov	r9, r0
 80058ec:	4631      	mov	r1, r6
 80058ee:	4638      	mov	r0, r7
 80058f0:	f001 f95e 	bl	8006bb0 <__mdiff>
 80058f4:	9a08      	ldr	r2, [sp, #32]
 80058f6:	68c3      	ldr	r3, [r0, #12]
 80058f8:	3230      	adds	r2, #48	; 0x30
 80058fa:	4682      	mov	sl, r0
 80058fc:	9206      	str	r2, [sp, #24]
 80058fe:	f04f 0b01 	mov.w	fp, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d03d      	beq.n	8005982 <_dtoa_r+0xa42>
 8005906:	4638      	mov	r0, r7
 8005908:	4651      	mov	r1, sl
 800590a:	f000 fefd 	bl	8006708 <_Bfree>
 800590e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005910:	ea5b 0303 	orrs.w	r3, fp, r3
 8005914:	d103      	bne.n	800591e <_dtoa_r+0x9de>
 8005916:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005918:	2800      	cmp	r0, #0
 800591a:	f000 8211 	beq.w	8005d40 <_dtoa_r+0xe00>
 800591e:	f1b9 0f00 	cmp.w	r9, #0
 8005922:	f2c0 819f 	blt.w	8005c64 <_dtoa_r+0xd24>
 8005926:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005928:	ea59 0000 	orrs.w	r0, r9, r0
 800592c:	d103      	bne.n	8005936 <_dtoa_r+0x9f6>
 800592e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005930:	2900      	cmp	r1, #0
 8005932:	f000 8197 	beq.w	8005c64 <_dtoa_r+0xd24>
 8005936:	f1bb 0f00 	cmp.w	fp, #0
 800593a:	f300 81ea 	bgt.w	8005d12 <_dtoa_r+0xdd2>
 800593e:	9a06      	ldr	r2, [sp, #24]
 8005940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005942:	f805 2b01 	strb.w	r2, [r5], #1
 8005946:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005948:	1a2b      	subs	r3, r5, r0
 800594a:	428b      	cmp	r3, r1
 800594c:	46aa      	mov	sl, r5
 800594e:	f000 81db 	beq.w	8005d08 <_dtoa_r+0xdc8>
 8005952:	220a      	movs	r2, #10
 8005954:	2300      	movs	r3, #0
 8005956:	4638      	mov	r0, r7
 8005958:	990a      	ldr	r1, [sp, #40]	; 0x28
 800595a:	f000 fedf 	bl	800671c <__multadd>
 800595e:	4544      	cmp	r4, r8
 8005960:	900a      	str	r0, [sp, #40]	; 0x28
 8005962:	d027      	beq.n	80059b4 <_dtoa_r+0xa74>
 8005964:	4621      	mov	r1, r4
 8005966:	220a      	movs	r2, #10
 8005968:	2300      	movs	r3, #0
 800596a:	4638      	mov	r0, r7
 800596c:	f000 fed6 	bl	800671c <__multadd>
 8005970:	4641      	mov	r1, r8
 8005972:	4604      	mov	r4, r0
 8005974:	220a      	movs	r2, #10
 8005976:	4638      	mov	r0, r7
 8005978:	2300      	movs	r3, #0
 800597a:	f000 fecf 	bl	800671c <__multadd>
 800597e:	4680      	mov	r8, r0
 8005980:	e7a9      	b.n	80058d6 <_dtoa_r+0x996>
 8005982:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005984:	4651      	mov	r1, sl
 8005986:	f001 f8f3 	bl	8006b70 <__mcmp>
 800598a:	4683      	mov	fp, r0
 800598c:	e7bb      	b.n	8005906 <_dtoa_r+0x9c6>
 800598e:	4638      	mov	r0, r7
 8005990:	4621      	mov	r1, r4
 8005992:	f000 feb9 	bl	8006708 <_Bfree>
 8005996:	e587      	b.n	80054a8 <_dtoa_r+0x568>
 8005998:	231c      	movs	r3, #28
 800599a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800599c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800599e:	18c0      	adds	r0, r0, r3
 80059a0:	18c9      	adds	r1, r1, r3
 80059a2:	900f      	str	r0, [sp, #60]	; 0x3c
 80059a4:	18e4      	adds	r4, r4, r3
 80059a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80059a8:	e538      	b.n	800541c <_dtoa_r+0x4dc>
 80059aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059ae:	4682      	mov	sl, r0
 80059b0:	468b      	mov	fp, r1
 80059b2:	e406      	b.n	80051c2 <_dtoa_r+0x282>
 80059b4:	4621      	mov	r1, r4
 80059b6:	4638      	mov	r0, r7
 80059b8:	220a      	movs	r2, #10
 80059ba:	2300      	movs	r3, #0
 80059bc:	f000 feae 	bl	800671c <__multadd>
 80059c0:	4604      	mov	r4, r0
 80059c2:	4680      	mov	r8, r0
 80059c4:	e787      	b.n	80058d6 <_dtoa_r+0x996>
 80059c6:	9c05      	ldr	r4, [sp, #20]
 80059c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80059ca:	9417      	str	r4, [sp, #92]	; 0x5c
 80059cc:	e672      	b.n	80056b4 <_dtoa_r+0x774>
 80059ce:	9d05      	ldr	r5, [sp, #20]
 80059d0:	426c      	negs	r4, r5
 80059d2:	2c00      	cmp	r4, #0
 80059d4:	f000 80fb 	beq.w	8005bce <_dtoa_r+0xc8e>
 80059d8:	4ba0      	ldr	r3, [pc, #640]	; (8005c5c <_dtoa_r+0xd1c>)
 80059da:	f004 020f 	and.w	r2, r4, #15
 80059de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059e2:	4650      	mov	r0, sl
 80059e4:	4659      	mov	r1, fp
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	f002 fd79 	bl	80084e0 <__aeabi_dmul>
 80059ee:	1124      	asrs	r4, r4, #4
 80059f0:	4682      	mov	sl, r0
 80059f2:	468b      	mov	fp, r1
 80059f4:	f000 80eb 	beq.w	8005bce <_dtoa_r+0xc8e>
 80059f8:	4d99      	ldr	r5, [pc, #612]	; (8005c60 <_dtoa_r+0xd20>)
 80059fa:	2602      	movs	r6, #2
 80059fc:	07e2      	lsls	r2, r4, #31
 80059fe:	d504      	bpl.n	8005a0a <_dtoa_r+0xaca>
 8005a00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a04:	f002 fd6c 	bl	80084e0 <__aeabi_dmul>
 8005a08:	3601      	adds	r6, #1
 8005a0a:	3508      	adds	r5, #8
 8005a0c:	1064      	asrs	r4, r4, #1
 8005a0e:	d1f5      	bne.n	80059fc <_dtoa_r+0xabc>
 8005a10:	4682      	mov	sl, r0
 8005a12:	468b      	mov	fp, r1
 8005a14:	e612      	b.n	800563c <_dtoa_r+0x6fc>
 8005a16:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005a18:	9606      	str	r6, [sp, #24]
 8005a1a:	e530      	b.n	800547e <_dtoa_r+0x53e>
 8005a1c:	498f      	ldr	r1, [pc, #572]	; (8005c5c <_dtoa_r+0xd1c>)
 8005a1e:	1e6c      	subs	r4, r5, #1
 8005a20:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005a24:	4642      	mov	r2, r8
 8005a26:	464b      	mov	r3, r9
 8005a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a2c:	9406      	str	r4, [sp, #24]
 8005a2e:	f002 fd57 	bl	80084e0 <__aeabi_dmul>
 8005a32:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8005a36:	4659      	mov	r1, fp
 8005a38:	4650      	mov	r0, sl
 8005a3a:	f002 ffeb 	bl	8008a14 <__aeabi_d2iz>
 8005a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a40:	4604      	mov	r4, r0
 8005a42:	9111      	str	r1, [sp, #68]	; 0x44
 8005a44:	f002 fce6 	bl	8008414 <__aeabi_i2d>
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	4659      	mov	r1, fp
 8005a4e:	4650      	mov	r0, sl
 8005a50:	f002 fb92 	bl	8008178 <__aeabi_dsub>
 8005a54:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8005a58:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005a5a:	f804 3b01 	strb.w	r3, [r4], #1
 8005a5e:	2d01      	cmp	r5, #1
 8005a60:	4682      	mov	sl, r0
 8005a62:	468b      	mov	fp, r1
 8005a64:	9411      	str	r4, [sp, #68]	; 0x44
 8005a66:	46a0      	mov	r8, r4
 8005a68:	d020      	beq.n	8005aac <_dtoa_r+0xb6c>
 8005a6a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005a6c:	1e66      	subs	r6, r4, #1
 8005a6e:	1976      	adds	r6, r6, r5
 8005a70:	2300      	movs	r3, #0
 8005a72:	2200      	movs	r2, #0
 8005a74:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005a78:	f002 fd32 	bl	80084e0 <__aeabi_dmul>
 8005a7c:	4689      	mov	r9, r1
 8005a7e:	4680      	mov	r8, r0
 8005a80:	f002 ffc8 	bl	8008a14 <__aeabi_d2iz>
 8005a84:	4605      	mov	r5, r0
 8005a86:	f002 fcc5 	bl	8008414 <__aeabi_i2d>
 8005a8a:	3530      	adds	r5, #48	; 0x30
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4640      	mov	r0, r8
 8005a92:	4649      	mov	r1, r9
 8005a94:	f002 fb70 	bl	8008178 <__aeabi_dsub>
 8005a98:	f804 5f01 	strb.w	r5, [r4, #1]!
 8005a9c:	42b4      	cmp	r4, r6
 8005a9e:	d1e7      	bne.n	8005a70 <_dtoa_r+0xb30>
 8005aa0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8005aa2:	9c06      	ldr	r4, [sp, #24]
 8005aa4:	4682      	mov	sl, r0
 8005aa6:	468b      	mov	fp, r1
 8005aa8:	eb05 0804 	add.w	r8, r5, r4
 8005aac:	2300      	movs	r3, #0
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8005ab4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8005ab8:	f002 fb60 	bl	800817c <__adddf3>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4650      	mov	r0, sl
 8005ac2:	4659      	mov	r1, fp
 8005ac4:	f002 ff9c 	bl	8008a00 <__aeabi_dcmpgt>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	f000 808a 	beq.w	8005be2 <_dtoa_r+0xca2>
 8005ace:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8005ad2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005ad4:	e422      	b.n	800531c <_dtoa_r+0x3dc>
 8005ad6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005ad8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005adc:	e4e8      	b.n	80054b0 <_dtoa_r+0x570>
 8005ade:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005ae0:	4631      	mov	r1, r6
 8005ae2:	f001 f845 	bl	8006b70 <__mcmp>
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	f6bf acad 	bge.w	8005446 <_dtoa_r+0x506>
 8005aec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005aee:	220a      	movs	r2, #10
 8005af0:	4638      	mov	r0, r7
 8005af2:	2300      	movs	r3, #0
 8005af4:	f000 fe12 	bl	800671c <__multadd>
 8005af8:	9905      	ldr	r1, [sp, #20]
 8005afa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005afc:	900a      	str	r0, [sp, #40]	; 0x28
 8005afe:	3901      	subs	r1, #1
 8005b00:	9105      	str	r1, [sp, #20]
 8005b02:	2a00      	cmp	r2, #0
 8005b04:	f040 8136 	bne.w	8005d74 <_dtoa_r+0xe34>
 8005b08:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005b0a:	900e      	str	r0, [sp, #56]	; 0x38
 8005b0c:	e49b      	b.n	8005446 <_dtoa_r+0x506>
 8005b0e:	6933      	ldr	r3, [r6, #16]
 8005b10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b14:	6918      	ldr	r0, [r3, #16]
 8005b16:	f000 fe91 	bl	800683c <__hi0bits>
 8005b1a:	f1c0 0320 	rsb	r3, r0, #32
 8005b1e:	e46a      	b.n	80053f6 <_dtoa_r+0x4b6>
 8005b20:	f1b9 0f0e 	cmp.w	r9, #14
 8005b24:	bf8c      	ite	hi
 8005b26:	2300      	movhi	r3, #0
 8005b28:	2301      	movls	r3, #1
 8005b2a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005b2e:	2100      	movs	r1, #0
 8005b30:	6479      	str	r1, [r7, #68]	; 0x44
 8005b32:	401c      	ands	r4, r3
 8005b34:	e543      	b.n	80055be <_dtoa_r+0x67e>
 8005b36:	2301      	movs	r3, #1
 8005b38:	9315      	str	r3, [sp, #84]	; 0x54
 8005b3a:	930e      	str	r3, [sp, #56]	; 0x38
 8005b3c:	9327      	str	r3, [sp, #156]	; 0x9c
 8005b3e:	e7f6      	b.n	8005b2e <_dtoa_r+0xbee>
 8005b40:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005b42:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8005b46:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005b4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005b4c:	e006      	b.n	8005b5c <_dtoa_r+0xc1c>
 8005b4e:	4651      	mov	r1, sl
 8005b50:	4638      	mov	r0, r7
 8005b52:	220a      	movs	r2, #10
 8005b54:	2300      	movs	r3, #0
 8005b56:	f000 fde1 	bl	800671c <__multadd>
 8005b5a:	4682      	mov	sl, r0
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	4650      	mov	r0, sl
 8005b60:	f7ff f95e 	bl	8004e20 <quorem>
 8005b64:	3030      	adds	r0, #48	; 0x30
 8005b66:	5528      	strb	r0, [r5, r4]
 8005b68:	3401      	adds	r4, #1
 8005b6a:	45a0      	cmp	r8, r4
 8005b6c:	dcef      	bgt.n	8005b4e <_dtoa_r+0xc0e>
 8005b6e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005b70:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005b74:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005b78:	4681      	mov	r9, r0
 8005b7a:	2c01      	cmp	r4, #1
 8005b7c:	bfac      	ite	ge
 8005b7e:	44a2      	addge	sl, r4
 8005b80:	f10a 0a01 	addlt.w	sl, sl, #1
 8005b84:	2400      	movs	r4, #0
 8005b86:	2201      	movs	r2, #1
 8005b88:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	f000 ff90 	bl	8006ab0 <__lshift>
 8005b90:	4631      	mov	r1, r6
 8005b92:	900a      	str	r0, [sp, #40]	; 0x28
 8005b94:	f000 ffec 	bl	8006b70 <__mcmp>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	f340 8082 	ble.w	8005ca2 <_dtoa_r+0xd62>
 8005b9e:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8005ba2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005ba4:	1c6a      	adds	r2, r5, #1
 8005ba6:	e003      	b.n	8005bb0 <_dtoa_r+0xc70>
 8005ba8:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 8005bac:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005bb0:	2b39      	cmp	r3, #57	; 0x39
 8005bb2:	f040 8084 	bne.w	8005cbe <_dtoa_r+0xd7e>
 8005bb6:	4592      	cmp	sl, r2
 8005bb8:	d1f6      	bne.n	8005ba8 <_dtoa_r+0xc68>
 8005bba:	9805      	ldr	r0, [sp, #20]
 8005bbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	2331      	movs	r3, #49	; 0x31
 8005bc2:	9005      	str	r0, [sp, #20]
 8005bc4:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8005bc8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005bcc:	e461      	b.n	8005492 <_dtoa_r+0x552>
 8005bce:	2602      	movs	r6, #2
 8005bd0:	e534      	b.n	800563c <_dtoa_r+0x6fc>
 8005bd2:	4638      	mov	r0, r7
 8005bd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005bd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005bd8:	f000 ff1e 	bl	8006a18 <__pow5mult>
 8005bdc:	900a      	str	r0, [sp, #40]	; 0x28
 8005bde:	f7ff bbf2 	b.w	80053c6 <_dtoa_r+0x486>
 8005be2:	2100      	movs	r1, #0
 8005be4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005be8:	2000      	movs	r0, #0
 8005bea:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8005bee:	f002 fac3 	bl	8008178 <__aeabi_dsub>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4650      	mov	r0, sl
 8005bf8:	4659      	mov	r1, fp
 8005bfa:	f002 fee3 	bl	80089c4 <__aeabi_dcmplt>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	f43f aed3 	beq.w	80059aa <_dtoa_r+0xa6a>
 8005c04:	4642      	mov	r2, r8
 8005c06:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
 8005c0a:	2b30      	cmp	r3, #48	; 0x30
 8005c0c:	d0fa      	beq.n	8005c04 <_dtoa_r+0xcc4>
 8005c0e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005c10:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005c12:	9405      	str	r4, [sp, #20]
 8005c14:	9209      	str	r2, [sp, #36]	; 0x24
 8005c16:	e44b      	b.n	80054b0 <_dtoa_r+0x570>
 8005c18:	4638      	mov	r0, r7
 8005c1a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c1c:	f000 fefc 	bl	8006a18 <__pow5mult>
 8005c20:	900a      	str	r0, [sp, #40]	; 0x28
 8005c22:	f7ff bbd0 	b.w	80053c6 <_dtoa_r+0x486>
 8005c26:	2600      	movs	r6, #0
 8005c28:	9606      	str	r6, [sp, #24]
 8005c2a:	e4a5      	b.n	8005578 <_dtoa_r+0x638>
 8005c2c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8005c2e:	2d00      	cmp	r5, #0
 8005c30:	d064      	beq.n	8005cfc <_dtoa_r+0xdbc>
 8005c32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005c38:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005c3a:	e47d      	b.n	8005538 <_dtoa_r+0x5f8>
 8005c3c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005c3e:	f7ff bb6d 	b.w	800531c <_dtoa_r+0x3dc>
 8005c42:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005c44:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005c48:	1c72      	adds	r2, r6, #1
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	9405      	str	r4, [sp, #20]
 8005c4e:	f7ff bb7b 	b.w	8005348 <_dtoa_r+0x408>
 8005c52:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005c54:	2300      	movs	r3, #0
 8005c56:	1b04      	subs	r4, r0, r4
 8005c58:	e46e      	b.n	8005538 <_dtoa_r+0x5f8>
 8005c5a:	bf00      	nop
 8005c5c:	08008ea0 	.word	0x08008ea0
 8005c60:	08008f90 	.word	0x08008f90
 8005c64:	f1bb 0f00 	cmp.w	fp, #0
 8005c68:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005c6c:	dd10      	ble.n	8005c90 <_dtoa_r+0xd50>
 8005c6e:	2201      	movs	r2, #1
 8005c70:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c72:	4638      	mov	r0, r7
 8005c74:	f000 ff1c 	bl	8006ab0 <__lshift>
 8005c78:	4631      	mov	r1, r6
 8005c7a:	900a      	str	r0, [sp, #40]	; 0x28
 8005c7c:	f000 ff78 	bl	8006b70 <__mcmp>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	dd6b      	ble.n	8005d5c <_dtoa_r+0xe1c>
 8005c84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c88:	d053      	beq.n	8005d32 <_dtoa_r+0xdf2>
 8005c8a:	9b08      	ldr	r3, [sp, #32]
 8005c8c:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005c90:	462b      	mov	r3, r5
 8005c92:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005c94:	f803 9b01 	strb.w	r9, [r3], #1
 8005c98:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c9e:	f7ff bbf8 	b.w	8005492 <_dtoa_r+0x552>
 8005ca2:	d103      	bne.n	8005cac <_dtoa_r+0xd6c>
 8005ca4:	f019 0f01 	tst.w	r9, #1
 8005ca8:	f47f af79 	bne.w	8005b9e <_dtoa_r+0xc5e>
 8005cac:	4652      	mov	r2, sl
 8005cae:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 8005cb2:	2b30      	cmp	r3, #48	; 0x30
 8005cb4:	d0fa      	beq.n	8005cac <_dtoa_r+0xd6c>
 8005cb6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005cb8:	9209      	str	r2, [sp, #36]	; 0x24
 8005cba:	f7ff bbea 	b.w	8005492 <_dtoa_r+0x552>
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005cc2:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8005cc6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005cca:	f7ff bbe2 	b.w	8005492 <_dtoa_r+0x552>
 8005cce:	9c06      	ldr	r4, [sp, #24]
 8005cd0:	4638      	mov	r0, r7
 8005cd2:	6861      	ldr	r1, [r4, #4]
 8005cd4:	f000 fcf2 	bl	80066bc <_Balloc>
 8005cd8:	9d06      	ldr	r5, [sp, #24]
 8005cda:	692a      	ldr	r2, [r5, #16]
 8005cdc:	3202      	adds	r2, #2
 8005cde:	4604      	mov	r4, r0
 8005ce0:	0092      	lsls	r2, r2, #2
 8005ce2:	f105 010c 	add.w	r1, r5, #12
 8005ce6:	f100 000c 	add.w	r0, r0, #12
 8005cea:	f000 fc9f 	bl	800662c <memcpy>
 8005cee:	4638      	mov	r0, r7
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f000 fedc 	bl	8006ab0 <__lshift>
 8005cf8:	4680      	mov	r8, r0
 8005cfa:	e5e7      	b.n	80058cc <_dtoa_r+0x98c>
 8005cfc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005cfe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005d00:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005d02:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d06:	e417      	b.n	8005538 <_dtoa_r+0x5f8>
 8005d08:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005d0c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d10:	e739      	b.n	8005b86 <_dtoa_r+0xc46>
 8005d12:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005d16:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d1a:	d00a      	beq.n	8005d32 <_dtoa_r+0xdf2>
 8005d1c:	462b      	mov	r3, r5
 8005d1e:	f109 0901 	add.w	r9, r9, #1
 8005d22:	f803 9b01 	strb.w	r9, [r3], #1
 8005d26:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d28:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d2e:	f7ff bbb0 	b.w	8005492 <_dtoa_r+0x552>
 8005d32:	46aa      	mov	sl, r5
 8005d34:	2339      	movs	r3, #57	; 0x39
 8005d36:	f80a 3b01 	strb.w	r3, [sl], #1
 8005d3a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d3e:	e730      	b.n	8005ba2 <_dtoa_r+0xc62>
 8005d40:	464b      	mov	r3, r9
 8005d42:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005d46:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d4a:	d0f2      	beq.n	8005d32 <_dtoa_r+0xdf2>
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	dc9c      	bgt.n	8005c8a <_dtoa_r+0xd4a>
 8005d50:	e79e      	b.n	8005c90 <_dtoa_r+0xd50>
 8005d52:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005d54:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d56:	9409      	str	r4, [sp, #36]	; 0x24
 8005d58:	f7ff bbaa 	b.w	80054b0 <_dtoa_r+0x570>
 8005d5c:	d198      	bne.n	8005c90 <_dtoa_r+0xd50>
 8005d5e:	f019 0f01 	tst.w	r9, #1
 8005d62:	d095      	beq.n	8005c90 <_dtoa_r+0xd50>
 8005d64:	e78e      	b.n	8005c84 <_dtoa_r+0xd44>
 8005d66:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005d68:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d6a:	9405      	str	r4, [sp, #20]
 8005d6c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005d6e:	9409      	str	r4, [sp, #36]	; 0x24
 8005d70:	f7ff bb9e 	b.w	80054b0 <_dtoa_r+0x570>
 8005d74:	2300      	movs	r3, #0
 8005d76:	4638      	mov	r0, r7
 8005d78:	9906      	ldr	r1, [sp, #24]
 8005d7a:	220a      	movs	r2, #10
 8005d7c:	f000 fcce 	bl	800671c <__multadd>
 8005d80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d82:	9006      	str	r0, [sp, #24]
 8005d84:	930e      	str	r3, [sp, #56]	; 0x38
 8005d86:	f7ff bb5e 	b.w	8005446 <_dtoa_r+0x506>
 8005d8a:	f43f ab47 	beq.w	800541c <_dtoa_r+0x4dc>
 8005d8e:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8005d92:	e602      	b.n	800599a <_dtoa_r+0xa5a>
 8005d94:	f3af 8000 	nop.w

08005d98 <_malloc_trim_r>:
 8005d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9a:	4d22      	ldr	r5, [pc, #136]	; (8005e24 <_malloc_trim_r+0x8c>)
 8005d9c:	460f      	mov	r7, r1
 8005d9e:	4604      	mov	r4, r0
 8005da0:	f000 fc88 	bl	80066b4 <__malloc_lock>
 8005da4:	68ab      	ldr	r3, [r5, #8]
 8005da6:	685e      	ldr	r6, [r3, #4]
 8005da8:	f026 0603 	bic.w	r6, r6, #3
 8005dac:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 8005db0:	1bdf      	subs	r7, r3, r7
 8005db2:	0b3f      	lsrs	r7, r7, #12
 8005db4:	3f01      	subs	r7, #1
 8005db6:	033f      	lsls	r7, r7, #12
 8005db8:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	db07      	blt.n	8005dd0 <_malloc_trim_r+0x38>
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	f001 f907 	bl	8006fd4 <_sbrk_r>
 8005dc6:	68ab      	ldr	r3, [r5, #8]
 8005dc8:	199b      	adds	r3, r3, r6
 8005dca:	4298      	cmp	r0, r3
 8005dcc:	4620      	mov	r0, r4
 8005dce:	d003      	beq.n	8005dd8 <_malloc_trim_r+0x40>
 8005dd0:	f000 fc72 	bl	80066b8 <__malloc_unlock>
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dd8:	4279      	negs	r1, r7
 8005dda:	f001 f8fb 	bl	8006fd4 <_sbrk_r>
 8005dde:	3001      	adds	r0, #1
 8005de0:	d00d      	beq.n	8005dfe <_malloc_trim_r+0x66>
 8005de2:	4b11      	ldr	r3, [pc, #68]	; (8005e28 <_malloc_trim_r+0x90>)
 8005de4:	68aa      	ldr	r2, [r5, #8]
 8005de6:	6819      	ldr	r1, [r3, #0]
 8005de8:	1bf6      	subs	r6, r6, r7
 8005dea:	f046 0601 	orr.w	r6, r6, #1
 8005dee:	1bcf      	subs	r7, r1, r7
 8005df0:	4620      	mov	r0, r4
 8005df2:	6056      	str	r6, [r2, #4]
 8005df4:	601f      	str	r7, [r3, #0]
 8005df6:	f000 fc5f 	bl	80066b8 <__malloc_unlock>
 8005dfa:	2001      	movs	r0, #1
 8005dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dfe:	2100      	movs	r1, #0
 8005e00:	4620      	mov	r0, r4
 8005e02:	f001 f8e7 	bl	8006fd4 <_sbrk_r>
 8005e06:	68ab      	ldr	r3, [r5, #8]
 8005e08:	1ac2      	subs	r2, r0, r3
 8005e0a:	2a0f      	cmp	r2, #15
 8005e0c:	dd07      	ble.n	8005e1e <_malloc_trim_r+0x86>
 8005e0e:	4907      	ldr	r1, [pc, #28]	; (8005e2c <_malloc_trim_r+0x94>)
 8005e10:	6809      	ldr	r1, [r1, #0]
 8005e12:	1a40      	subs	r0, r0, r1
 8005e14:	4904      	ldr	r1, [pc, #16]	; (8005e28 <_malloc_trim_r+0x90>)
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	6008      	str	r0, [r1, #0]
 8005e1c:	605a      	str	r2, [r3, #4]
 8005e1e:	4620      	mov	r0, r4
 8005e20:	e7d6      	b.n	8005dd0 <_malloc_trim_r+0x38>
 8005e22:	bf00      	nop
 8005e24:	2000054c 	.word	0x2000054c
 8005e28:	20000974 	.word	0x20000974
 8005e2c:	20000954 	.word	0x20000954

08005e30 <_free_r>:
 8005e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e34:	460d      	mov	r5, r1
 8005e36:	4604      	mov	r4, r0
 8005e38:	2900      	cmp	r1, #0
 8005e3a:	d06f      	beq.n	8005f1c <_free_r+0xec>
 8005e3c:	f000 fc3a 	bl	80066b4 <__malloc_lock>
 8005e40:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8005e44:	4e58      	ldr	r6, [pc, #352]	; (8005fa8 <_free_r+0x178>)
 8005e46:	f1a5 0108 	sub.w	r1, r5, #8
 8005e4a:	f020 0301 	bic.w	r3, r0, #1
 8005e4e:	18ca      	adds	r2, r1, r3
 8005e50:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8005e54:	6857      	ldr	r7, [r2, #4]
 8005e56:	4594      	cmp	ip, r2
 8005e58:	f027 0703 	bic.w	r7, r7, #3
 8005e5c:	d07c      	beq.n	8005f58 <_free_r+0x128>
 8005e5e:	f010 0001 	ands.w	r0, r0, #1
 8005e62:	6057      	str	r7, [r2, #4]
 8005e64:	d049      	beq.n	8005efa <_free_r+0xca>
 8005e66:	2000      	movs	r0, #0
 8005e68:	19d5      	adds	r5, r2, r7
 8005e6a:	686d      	ldr	r5, [r5, #4]
 8005e6c:	f015 0f01 	tst.w	r5, #1
 8005e70:	d106      	bne.n	8005e80 <_free_r+0x50>
 8005e72:	19db      	adds	r3, r3, r7
 8005e74:	6895      	ldr	r5, [r2, #8]
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d062      	beq.n	8005f40 <_free_r+0x110>
 8005e7a:	68d2      	ldr	r2, [r2, #12]
 8005e7c:	60ea      	str	r2, [r5, #12]
 8005e7e:	6095      	str	r5, [r2, #8]
 8005e80:	f043 0201 	orr.w	r2, r3, #1
 8005e84:	604a      	str	r2, [r1, #4]
 8005e86:	50cb      	str	r3, [r1, r3]
 8005e88:	bb90      	cbnz	r0, 8005ef0 <_free_r+0xc0>
 8005e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e8e:	d347      	bcc.n	8005f20 <_free_r+0xf0>
 8005e90:	099d      	lsrs	r5, r3, #6
 8005e92:	3538      	adds	r5, #56	; 0x38
 8005e94:	0a5a      	lsrs	r2, r3, #9
 8005e96:	00e8      	lsls	r0, r5, #3
 8005e98:	2a04      	cmp	r2, #4
 8005e9a:	d916      	bls.n	8005eca <_free_r+0x9a>
 8005e9c:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8005ea0:	00e8      	lsls	r0, r5, #3
 8005ea2:	2a14      	cmp	r2, #20
 8005ea4:	d911      	bls.n	8005eca <_free_r+0x9a>
 8005ea6:	0b1d      	lsrs	r5, r3, #12
 8005ea8:	356e      	adds	r5, #110	; 0x6e
 8005eaa:	00e8      	lsls	r0, r5, #3
 8005eac:	2a54      	cmp	r2, #84	; 0x54
 8005eae:	d90c      	bls.n	8005eca <_free_r+0x9a>
 8005eb0:	0bdd      	lsrs	r5, r3, #15
 8005eb2:	3577      	adds	r5, #119	; 0x77
 8005eb4:	00e8      	lsls	r0, r5, #3
 8005eb6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005eba:	d906      	bls.n	8005eca <_free_r+0x9a>
 8005ebc:	f240 5054 	movw	r0, #1364	; 0x554
 8005ec0:	4282      	cmp	r2, r0
 8005ec2:	d86d      	bhi.n	8005fa0 <_free_r+0x170>
 8005ec4:	0c9d      	lsrs	r5, r3, #18
 8005ec6:	357c      	adds	r5, #124	; 0x7c
 8005ec8:	00e8      	lsls	r0, r5, #3
 8005eca:	1986      	adds	r6, r0, r6
 8005ecc:	4836      	ldr	r0, [pc, #216]	; (8005fa8 <_free_r+0x178>)
 8005ece:	68b2      	ldr	r2, [r6, #8]
 8005ed0:	42b2      	cmp	r2, r6
 8005ed2:	d103      	bne.n	8005edc <_free_r+0xac>
 8005ed4:	e05b      	b.n	8005f8e <_free_r+0x15e>
 8005ed6:	6892      	ldr	r2, [r2, #8]
 8005ed8:	4296      	cmp	r6, r2
 8005eda:	d004      	beq.n	8005ee6 <_free_r+0xb6>
 8005edc:	6850      	ldr	r0, [r2, #4]
 8005ede:	f020 0003 	bic.w	r0, r0, #3
 8005ee2:	4283      	cmp	r3, r0
 8005ee4:	d3f7      	bcc.n	8005ed6 <_free_r+0xa6>
 8005ee6:	68d3      	ldr	r3, [r2, #12]
 8005ee8:	60cb      	str	r3, [r1, #12]
 8005eea:	608a      	str	r2, [r1, #8]
 8005eec:	60d1      	str	r1, [r2, #12]
 8005eee:	6099      	str	r1, [r3, #8]
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef6:	f000 bbdf 	b.w	80066b8 <__malloc_unlock>
 8005efa:	f855 cc08 	ldr.w	ip, [r5, #-8]
 8005efe:	ebcc 0101 	rsb	r1, ip, r1
 8005f02:	f106 0808 	add.w	r8, r6, #8
 8005f06:	688d      	ldr	r5, [r1, #8]
 8005f08:	4545      	cmp	r5, r8
 8005f0a:	4463      	add	r3, ip
 8005f0c:	d03d      	beq.n	8005f8a <_free_r+0x15a>
 8005f0e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8005f12:	f8c5 c00c 	str.w	ip, [r5, #12]
 8005f16:	f8cc 5008 	str.w	r5, [ip, #8]
 8005f1a:	e7a5      	b.n	8005e68 <_free_r+0x38>
 8005f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f20:	08db      	lsrs	r3, r3, #3
 8005f22:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8005f26:	6875      	ldr	r5, [r6, #4]
 8005f28:	6890      	ldr	r0, [r2, #8]
 8005f2a:	60ca      	str	r2, [r1, #12]
 8005f2c:	109b      	asrs	r3, r3, #2
 8005f2e:	2701      	movs	r7, #1
 8005f30:	fa17 f303 	lsls.w	r3, r7, r3
 8005f34:	432b      	orrs	r3, r5
 8005f36:	6088      	str	r0, [r1, #8]
 8005f38:	6073      	str	r3, [r6, #4]
 8005f3a:	6091      	str	r1, [r2, #8]
 8005f3c:	60c1      	str	r1, [r0, #12]
 8005f3e:	e7d7      	b.n	8005ef0 <_free_r+0xc0>
 8005f40:	4f1a      	ldr	r7, [pc, #104]	; (8005fac <_free_r+0x17c>)
 8005f42:	42bd      	cmp	r5, r7
 8005f44:	d199      	bne.n	8005e7a <_free_r+0x4a>
 8005f46:	f043 0201 	orr.w	r2, r3, #1
 8005f4a:	6171      	str	r1, [r6, #20]
 8005f4c:	6131      	str	r1, [r6, #16]
 8005f4e:	60cd      	str	r5, [r1, #12]
 8005f50:	608d      	str	r5, [r1, #8]
 8005f52:	604a      	str	r2, [r1, #4]
 8005f54:	50cb      	str	r3, [r1, r3]
 8005f56:	e7cb      	b.n	8005ef0 <_free_r+0xc0>
 8005f58:	07c2      	lsls	r2, r0, #31
 8005f5a:	443b      	add	r3, r7
 8005f5c:	d407      	bmi.n	8005f6e <_free_r+0x13e>
 8005f5e:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8005f62:	1a89      	subs	r1, r1, r2
 8005f64:	189b      	adds	r3, r3, r2
 8005f66:	6888      	ldr	r0, [r1, #8]
 8005f68:	68ca      	ldr	r2, [r1, #12]
 8005f6a:	60c2      	str	r2, [r0, #12]
 8005f6c:	6090      	str	r0, [r2, #8]
 8005f6e:	4a10      	ldr	r2, [pc, #64]	; (8005fb0 <_free_r+0x180>)
 8005f70:	60b1      	str	r1, [r6, #8]
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	f043 0001 	orr.w	r0, r3, #1
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	6048      	str	r0, [r1, #4]
 8005f7c:	d3b8      	bcc.n	8005ef0 <_free_r+0xc0>
 8005f7e:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <_free_r+0x184>)
 8005f80:	4620      	mov	r0, r4
 8005f82:	6819      	ldr	r1, [r3, #0]
 8005f84:	f7ff ff08 	bl	8005d98 <_malloc_trim_r>
 8005f88:	e7b2      	b.n	8005ef0 <_free_r+0xc0>
 8005f8a:	2001      	movs	r0, #1
 8005f8c:	e76c      	b.n	8005e68 <_free_r+0x38>
 8005f8e:	6843      	ldr	r3, [r0, #4]
 8005f90:	10ad      	asrs	r5, r5, #2
 8005f92:	2601      	movs	r6, #1
 8005f94:	fa16 f505 	lsls.w	r5, r6, r5
 8005f98:	432b      	orrs	r3, r5
 8005f9a:	6043      	str	r3, [r0, #4]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	e7a3      	b.n	8005ee8 <_free_r+0xb8>
 8005fa0:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8005fa4:	257e      	movs	r5, #126	; 0x7e
 8005fa6:	e790      	b.n	8005eca <_free_r+0x9a>
 8005fa8:	2000054c 	.word	0x2000054c
 8005fac:	20000554 	.word	0x20000554
 8005fb0:	20000958 	.word	0x20000958
 8005fb4:	20000970 	.word	0x20000970

08005fb8 <_setlocale_r>:
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	4614      	mov	r4, r2
 8005fbc:	b122      	cbz	r2, 8005fc8 <_setlocale_r+0x10>
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	490b      	ldr	r1, [pc, #44]	; (8005ff0 <_setlocale_r+0x38>)
 8005fc2:	f001 f819 	bl	8006ff8 <strcmp>
 8005fc6:	b908      	cbnz	r0, 8005fcc <_setlocale_r+0x14>
 8005fc8:	480a      	ldr	r0, [pc, #40]	; (8005ff4 <_setlocale_r+0x3c>)
 8005fca:	bd10      	pop	{r4, pc}
 8005fcc:	4620      	mov	r0, r4
 8005fce:	4909      	ldr	r1, [pc, #36]	; (8005ff4 <_setlocale_r+0x3c>)
 8005fd0:	f001 f812 	bl	8006ff8 <strcmp>
 8005fd4:	b908      	cbnz	r0, 8005fda <_setlocale_r+0x22>
 8005fd6:	4807      	ldr	r0, [pc, #28]	; (8005ff4 <_setlocale_r+0x3c>)
 8005fd8:	bd10      	pop	{r4, pc}
 8005fda:	4620      	mov	r0, r4
 8005fdc:	4906      	ldr	r1, [pc, #24]	; (8005ff8 <_setlocale_r+0x40>)
 8005fde:	f001 f80b 	bl	8006ff8 <strcmp>
 8005fe2:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <_setlocale_r+0x3c>)
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	bf0c      	ite	eq
 8005fe8:	4618      	moveq	r0, r3
 8005fea:	2000      	movne	r0, #0
 8005fec:	bd10      	pop	{r4, pc}
 8005fee:	bf00      	nop
 8005ff0:	08009158 	.word	0x08009158
 8005ff4:	08009154 	.word	0x08009154
 8005ff8:	080090ac 	.word	0x080090ac

08005ffc <__locale_charset>:
 8005ffc:	f240 40d0 	movw	r0, #1232	; 0x4d0
 8006000:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop

08006008 <__locale_mb_cur_max>:
 8006008:	f240 43d0 	movw	r3, #1232	; 0x4d0
 800600c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006010:	6a18      	ldr	r0, [r3, #32]
 8006012:	4770      	bx	lr

08006014 <__locale_msgcharset>:
 8006014:	4800      	ldr	r0, [pc, #0]	; (8006018 <__locale_msgcharset+0x4>)
 8006016:	4770      	bx	lr
 8006018:	200004f4 	.word	0x200004f4

0800601c <__locale_cjk_lang>:
 800601c:	2000      	movs	r0, #0
 800601e:	4770      	bx	lr

08006020 <_localeconv_r>:
 8006020:	4800      	ldr	r0, [pc, #0]	; (8006024 <_localeconv_r+0x4>)
 8006022:	4770      	bx	lr
 8006024:	20000514 	.word	0x20000514

08006028 <setlocale>:
 8006028:	b410      	push	{r4}
 800602a:	f240 03a0 	movw	r3, #160	; 0xa0
 800602e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006032:	4604      	mov	r4, r0
 8006034:	6818      	ldr	r0, [r3, #0]
 8006036:	460a      	mov	r2, r1
 8006038:	4621      	mov	r1, r4
 800603a:	bc10      	pop	{r4}
 800603c:	e7bc      	b.n	8005fb8 <_setlocale_r>
 800603e:	bf00      	nop

08006040 <localeconv>:
 8006040:	4800      	ldr	r0, [pc, #0]	; (8006044 <localeconv+0x4>)
 8006042:	4770      	bx	lr
 8006044:	20000514 	.word	0x20000514

08006048 <_malloc_r>:
 8006048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604c:	f101 040b 	add.w	r4, r1, #11
 8006050:	2c16      	cmp	r4, #22
 8006052:	4605      	mov	r5, r0
 8006054:	d92a      	bls.n	80060ac <_malloc_r+0x64>
 8006056:	f024 0407 	bic.w	r4, r4, #7
 800605a:	0fe3      	lsrs	r3, r4, #31
 800605c:	428c      	cmp	r4, r1
 800605e:	bf2c      	ite	cs
 8006060:	4619      	movcs	r1, r3
 8006062:	f043 0101 	orrcc.w	r1, r3, #1
 8006066:	bb51      	cbnz	r1, 80060be <_malloc_r+0x76>
 8006068:	4628      	mov	r0, r5
 800606a:	f000 fb23 	bl	80066b4 <__malloc_lock>
 800606e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8006072:	d22a      	bcs.n	80060ca <_malloc_r+0x82>
 8006074:	4e7d      	ldr	r6, [pc, #500]	; (800626c <_malloc_r+0x224>)
 8006076:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 800607a:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 800607e:	68df      	ldr	r7, [r3, #12]
 8006080:	429f      	cmp	r7, r3
 8006082:	f000 8235 	beq.w	80064f0 <_malloc_r+0x4a8>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	f023 0303 	bic.w	r3, r3, #3
 8006090:	18fb      	adds	r3, r7, r3
 8006092:	60ca      	str	r2, [r1, #12]
 8006094:	6858      	ldr	r0, [r3, #4]
 8006096:	6091      	str	r1, [r2, #8]
 8006098:	f040 0201 	orr.w	r2, r0, #1
 800609c:	605a      	str	r2, [r3, #4]
 800609e:	4628      	mov	r0, r5
 80060a0:	f000 fb0a 	bl	80066b8 <__malloc_unlock>
 80060a4:	3708      	adds	r7, #8
 80060a6:	4638      	mov	r0, r7
 80060a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ac:	2300      	movs	r3, #0
 80060ae:	2410      	movs	r4, #16
 80060b0:	428c      	cmp	r4, r1
 80060b2:	bf2c      	ite	cs
 80060b4:	4619      	movcs	r1, r3
 80060b6:	f043 0101 	orrcc.w	r1, r3, #1
 80060ba:	2900      	cmp	r1, #0
 80060bc:	d0d4      	beq.n	8006068 <_malloc_r+0x20>
 80060be:	230c      	movs	r3, #12
 80060c0:	2700      	movs	r7, #0
 80060c2:	602b      	str	r3, [r5, #0]
 80060c4:	4638      	mov	r0, r7
 80060c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ca:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 80060ce:	bf04      	itt	eq
 80060d0:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 80060d4:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 80060d8:	f040 8081 	bne.w	80061de <_malloc_r+0x196>
 80060dc:	4e63      	ldr	r6, [pc, #396]	; (800626c <_malloc_r+0x224>)
 80060de:	1871      	adds	r1, r6, r1
 80060e0:	68cf      	ldr	r7, [r1, #12]
 80060e2:	42b9      	cmp	r1, r7
 80060e4:	d106      	bne.n	80060f4 <_malloc_r+0xac>
 80060e6:	e00d      	b.n	8006104 <_malloc_r+0xbc>
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f280 8169 	bge.w	80063c0 <_malloc_r+0x378>
 80060ee:	68ff      	ldr	r7, [r7, #12]
 80060f0:	42b9      	cmp	r1, r7
 80060f2:	d007      	beq.n	8006104 <_malloc_r+0xbc>
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	f022 0203 	bic.w	r2, r2, #3
 80060fa:	1b13      	subs	r3, r2, r4
 80060fc:	2b0f      	cmp	r3, #15
 80060fe:	ddf3      	ble.n	80060e8 <_malloc_r+0xa0>
 8006100:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006104:	f10e 0e01 	add.w	lr, lr, #1
 8006108:	4a58      	ldr	r2, [pc, #352]	; (800626c <_malloc_r+0x224>)
 800610a:	6937      	ldr	r7, [r6, #16]
 800610c:	f102 0c08 	add.w	ip, r2, #8
 8006110:	4567      	cmp	r7, ip
 8006112:	bf08      	it	eq
 8006114:	6853      	ldreq	r3, [r2, #4]
 8006116:	d023      	beq.n	8006160 <_malloc_r+0x118>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f023 0303 	bic.w	r3, r3, #3
 800611e:	1b19      	subs	r1, r3, r4
 8006120:	290f      	cmp	r1, #15
 8006122:	f300 81b4 	bgt.w	800648e <_malloc_r+0x446>
 8006126:	2900      	cmp	r1, #0
 8006128:	f8c2 c014 	str.w	ip, [r2, #20]
 800612c:	f8c2 c010 	str.w	ip, [r2, #16]
 8006130:	f280 808f 	bge.w	8006252 <_malloc_r+0x20a>
 8006134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006138:	f080 8161 	bcs.w	80063fe <_malloc_r+0x3b6>
 800613c:	08db      	lsrs	r3, r3, #3
 800613e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8006142:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8006146:	6888      	ldr	r0, [r1, #8]
 8006148:	60f9      	str	r1, [r7, #12]
 800614a:	109b      	asrs	r3, r3, #2
 800614c:	f04f 0901 	mov.w	r9, #1
 8006150:	fa09 f303 	lsl.w	r3, r9, r3
 8006154:	ea43 0308 	orr.w	r3, r3, r8
 8006158:	60b8      	str	r0, [r7, #8]
 800615a:	6053      	str	r3, [r2, #4]
 800615c:	608f      	str	r7, [r1, #8]
 800615e:	60c7      	str	r7, [r0, #12]
 8006160:	2001      	movs	r0, #1
 8006162:	ea4f 02ae 	mov.w	r2, lr, asr #2
 8006166:	4090      	lsls	r0, r2
 8006168:	4298      	cmp	r0, r3
 800616a:	f200 8081 	bhi.w	8006270 <_malloc_r+0x228>
 800616e:	4203      	tst	r3, r0
 8006170:	d106      	bne.n	8006180 <_malloc_r+0x138>
 8006172:	f02e 0e03 	bic.w	lr, lr, #3
 8006176:	0040      	lsls	r0, r0, #1
 8006178:	4203      	tst	r3, r0
 800617a:	f10e 0e04 	add.w	lr, lr, #4
 800617e:	d0fa      	beq.n	8006176 <_malloc_r+0x12e>
 8006180:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 8006184:	464f      	mov	r7, r9
 8006186:	46f0      	mov	r8, lr
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	429f      	cmp	r7, r3
 800618c:	d107      	bne.n	800619e <_malloc_r+0x156>
 800618e:	e191      	b.n	80064b4 <_malloc_r+0x46c>
 8006190:	2a00      	cmp	r2, #0
 8006192:	f280 81b7 	bge.w	8006504 <_malloc_r+0x4bc>
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	429f      	cmp	r7, r3
 800619a:	f000 818b 	beq.w	80064b4 <_malloc_r+0x46c>
 800619e:	6859      	ldr	r1, [r3, #4]
 80061a0:	f021 0103 	bic.w	r1, r1, #3
 80061a4:	1b0a      	subs	r2, r1, r4
 80061a6:	2a0f      	cmp	r2, #15
 80061a8:	ddf2      	ble.n	8006190 <_malloc_r+0x148>
 80061aa:	461f      	mov	r7, r3
 80061ac:	1919      	adds	r1, r3, r4
 80061ae:	68d8      	ldr	r0, [r3, #12]
 80061b0:	f857 ef08 	ldr.w	lr, [r7, #8]!
 80061b4:	508a      	str	r2, [r1, r2]
 80061b6:	f044 0401 	orr.w	r4, r4, #1
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	f8ce 000c 	str.w	r0, [lr, #12]
 80061c2:	f8c0 e008 	str.w	lr, [r0, #8]
 80061c6:	605c      	str	r4, [r3, #4]
 80061c8:	6171      	str	r1, [r6, #20]
 80061ca:	6131      	str	r1, [r6, #16]
 80061cc:	f8c1 c00c 	str.w	ip, [r1, #12]
 80061d0:	f8c1 c008 	str.w	ip, [r1, #8]
 80061d4:	604a      	str	r2, [r1, #4]
 80061d6:	4628      	mov	r0, r5
 80061d8:	f000 fa6e 	bl	80066b8 <__malloc_unlock>
 80061dc:	e763      	b.n	80060a6 <_malloc_r+0x5e>
 80061de:	f1be 0f04 	cmp.w	lr, #4
 80061e2:	bf9e      	ittt	ls
 80061e4:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 80061e8:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 80061ec:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 80061f0:	f67f af74 	bls.w	80060dc <_malloc_r+0x94>
 80061f4:	f1be 0f14 	cmp.w	lr, #20
 80061f8:	bf9c      	itt	ls
 80061fa:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 80061fe:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8006202:	f67f af6b 	bls.w	80060dc <_malloc_r+0x94>
 8006206:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 800620a:	bf9e      	ittt	ls
 800620c:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8006210:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 8006214:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8006218:	f67f af60 	bls.w	80060dc <_malloc_r+0x94>
 800621c:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8006220:	bf9e      	ittt	ls
 8006222:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 8006226:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 800622a:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800622e:	f67f af55 	bls.w	80060dc <_malloc_r+0x94>
 8006232:	f240 5354 	movw	r3, #1364	; 0x554
 8006236:	459e      	cmp	lr, r3
 8006238:	bf9d      	ittte	ls
 800623a:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 800623e:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 8006242:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8006246:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 800624a:	bf88      	it	hi
 800624c:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8006250:	e744      	b.n	80060dc <_malloc_r+0x94>
 8006252:	18fb      	adds	r3, r7, r3
 8006254:	4628      	mov	r0, r5
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	f042 0201 	orr.w	r2, r2, #1
 800625c:	605a      	str	r2, [r3, #4]
 800625e:	3708      	adds	r7, #8
 8006260:	f000 fa2a 	bl	80066b8 <__malloc_unlock>
 8006264:	4638      	mov	r0, r7
 8006266:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800626a:	bf00      	nop
 800626c:	2000054c 	.word	0x2000054c
 8006270:	68b7      	ldr	r7, [r6, #8]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f023 0803 	bic.w	r8, r3, #3
 8006278:	4544      	cmp	r4, r8
 800627a:	ebc4 0208 	rsb	r2, r4, r8
 800627e:	bf94      	ite	ls
 8006280:	2300      	movls	r3, #0
 8006282:	2301      	movhi	r3, #1
 8006284:	2a0f      	cmp	r2, #15
 8006286:	bfd8      	it	le
 8006288:	f043 0301 	orrle.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 80a7 	beq.w	80063e0 <_malloc_r+0x398>
 8006292:	4bb3      	ldr	r3, [pc, #716]	; (8006560 <_malloc_r+0x518>)
 8006294:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 8006564 <_malloc_r+0x51c>
 8006298:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800629c:	f8da 3000 	ldr.w	r3, [sl]
 80062a0:	3201      	adds	r2, #1
 80062a2:	4423      	add	r3, r4
 80062a4:	bf08      	it	eq
 80062a6:	f103 0b10 	addeq.w	fp, r3, #16
 80062aa:	d006      	beq.n	80062ba <_malloc_r+0x272>
 80062ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b0:	330f      	adds	r3, #15
 80062b2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80062b6:	f023 0b0f 	bic.w	fp, r3, #15
 80062ba:	4628      	mov	r0, r5
 80062bc:	4659      	mov	r1, fp
 80062be:	f000 fe89 	bl	8006fd4 <_sbrk_r>
 80062c2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80062c6:	4681      	mov	r9, r0
 80062c8:	f000 8144 	beq.w	8006554 <_malloc_r+0x50c>
 80062cc:	eb07 0208 	add.w	r2, r7, r8
 80062d0:	4282      	cmp	r2, r0
 80062d2:	f200 8126 	bhi.w	8006522 <_malloc_r+0x4da>
 80062d6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80062da:	454a      	cmp	r2, r9
 80062dc:	445b      	add	r3, fp
 80062de:	f8ca 3004 	str.w	r3, [sl, #4]
 80062e2:	f000 8141 	beq.w	8006568 <_malloc_r+0x520>
 80062e6:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 80062ea:	3101      	adds	r1, #1
 80062ec:	bf15      	itete	ne
 80062ee:	ebc2 0209 	rsbne	r2, r2, r9
 80062f2:	4b9b      	ldreq	r3, [pc, #620]	; (8006560 <_malloc_r+0x518>)
 80062f4:	189b      	addne	r3, r3, r2
 80062f6:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 80062fa:	bf18      	it	ne
 80062fc:	f8ca 3004 	strne.w	r3, [sl, #4]
 8006300:	f019 0307 	ands.w	r3, r9, #7
 8006304:	bf1f      	itttt	ne
 8006306:	f1c3 0208 	rsbne	r2, r3, #8
 800630a:	4491      	addne	r9, r2
 800630c:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8006310:	f103 0208 	addne.w	r2, r3, #8
 8006314:	eb09 030b 	add.w	r3, r9, fp
 8006318:	bf08      	it	eq
 800631a:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 800631e:	051b      	lsls	r3, r3, #20
 8006320:	0d1b      	lsrs	r3, r3, #20
 8006322:	ebc3 0b02 	rsb	fp, r3, r2
 8006326:	4628      	mov	r0, r5
 8006328:	4659      	mov	r1, fp
 800632a:	f000 fe53 	bl	8006fd4 <_sbrk_r>
 800632e:	1c43      	adds	r3, r0, #1
 8006330:	f000 8126 	beq.w	8006580 <_malloc_r+0x538>
 8006334:	ebc9 0200 	rsb	r2, r9, r0
 8006338:	445a      	add	r2, fp
 800633a:	f042 0201 	orr.w	r2, r2, #1
 800633e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006342:	f8c6 9008 	str.w	r9, [r6, #8]
 8006346:	445b      	add	r3, fp
 8006348:	42b7      	cmp	r7, r6
 800634a:	f8ca 3004 	str.w	r3, [sl, #4]
 800634e:	f8c9 2004 	str.w	r2, [r9, #4]
 8006352:	d015      	beq.n	8006380 <_malloc_r+0x338>
 8006354:	f1b8 0f0f 	cmp.w	r8, #15
 8006358:	f240 80f6 	bls.w	8006548 <_malloc_r+0x500>
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f1a8 020c 	sub.w	r2, r8, #12
 8006362:	f022 0207 	bic.w	r2, r2, #7
 8006366:	18b9      	adds	r1, r7, r2
 8006368:	f000 0e01 	and.w	lr, r0, #1
 800636c:	ea42 0e0e 	orr.w	lr, r2, lr
 8006370:	2005      	movs	r0, #5
 8006372:	2a0f      	cmp	r2, #15
 8006374:	f8c7 e004 	str.w	lr, [r7, #4]
 8006378:	6048      	str	r0, [r1, #4]
 800637a:	6088      	str	r0, [r1, #8]
 800637c:	f200 8104 	bhi.w	8006588 <_malloc_r+0x540>
 8006380:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8006384:	68b7      	ldr	r7, [r6, #8]
 8006386:	4293      	cmp	r3, r2
 8006388:	bf84      	itt	hi
 800638a:	4a76      	ldrhi	r2, [pc, #472]	; (8006564 <_malloc_r+0x51c>)
 800638c:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 800638e:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 8006392:	4293      	cmp	r3, r2
 8006394:	bf84      	itt	hi
 8006396:	4a73      	ldrhi	r2, [pc, #460]	; (8006564 <_malloc_r+0x51c>)
 8006398:	6313      	strhi	r3, [r2, #48]	; 0x30
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f023 0303 	bic.w	r3, r3, #3
 80063a0:	429c      	cmp	r4, r3
 80063a2:	ebc4 0203 	rsb	r2, r4, r3
 80063a6:	bf94      	ite	ls
 80063a8:	2300      	movls	r3, #0
 80063aa:	2301      	movhi	r3, #1
 80063ac:	2a0f      	cmp	r2, #15
 80063ae:	bfd8      	it	le
 80063b0:	f043 0301 	orrle.w	r3, r3, #1
 80063b4:	b1a3      	cbz	r3, 80063e0 <_malloc_r+0x398>
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 f97e 	bl	80066b8 <__malloc_unlock>
 80063bc:	2700      	movs	r7, #0
 80063be:	e672      	b.n	80060a6 <_malloc_r+0x5e>
 80063c0:	18ba      	adds	r2, r7, r2
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6850      	ldr	r0, [r2, #4]
 80063c6:	68b9      	ldr	r1, [r7, #8]
 80063c8:	f040 0001 	orr.w	r0, r0, #1
 80063cc:	6050      	str	r0, [r2, #4]
 80063ce:	60cb      	str	r3, [r1, #12]
 80063d0:	4628      	mov	r0, r5
 80063d2:	6099      	str	r1, [r3, #8]
 80063d4:	3708      	adds	r7, #8
 80063d6:	f000 f96f 	bl	80066b8 <__malloc_unlock>
 80063da:	4638      	mov	r0, r7
 80063dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063e0:	193b      	adds	r3, r7, r4
 80063e2:	f042 0201 	orr.w	r2, r2, #1
 80063e6:	f044 0401 	orr.w	r4, r4, #1
 80063ea:	607c      	str	r4, [r7, #4]
 80063ec:	4628      	mov	r0, r5
 80063ee:	605a      	str	r2, [r3, #4]
 80063f0:	3708      	adds	r7, #8
 80063f2:	60b3      	str	r3, [r6, #8]
 80063f4:	f000 f960 	bl	80066b8 <__malloc_unlock>
 80063f8:	4638      	mov	r0, r7
 80063fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fe:	0a5a      	lsrs	r2, r3, #9
 8006400:	2a04      	cmp	r2, #4
 8006402:	bf9e      	ittt	ls
 8006404:	ea4f 1893 	movls.w	r8, r3, lsr #6
 8006408:	f108 0838 	addls.w	r8, r8, #56	; 0x38
 800640c:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006410:	d928      	bls.n	8006464 <_malloc_r+0x41c>
 8006412:	2a14      	cmp	r2, #20
 8006414:	bf9c      	itt	ls
 8006416:	f102 085b 	addls.w	r8, r2, #91	; 0x5b
 800641a:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800641e:	d921      	bls.n	8006464 <_malloc_r+0x41c>
 8006420:	2a54      	cmp	r2, #84	; 0x54
 8006422:	bf9e      	ittt	ls
 8006424:	ea4f 3813 	movls.w	r8, r3, lsr #12
 8006428:	f108 086e 	addls.w	r8, r8, #110	; 0x6e
 800642c:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006430:	d918      	bls.n	8006464 <_malloc_r+0x41c>
 8006432:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006436:	bf9e      	ittt	ls
 8006438:	ea4f 38d3 	movls.w	r8, r3, lsr #15
 800643c:	f108 0877 	addls.w	r8, r8, #119	; 0x77
 8006440:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006444:	d90e      	bls.n	8006464 <_malloc_r+0x41c>
 8006446:	f240 5154 	movw	r1, #1364	; 0x554
 800644a:	428a      	cmp	r2, r1
 800644c:	bf9d      	ittte	ls
 800644e:	ea4f 4893 	movls.w	r8, r3, lsr #18
 8006452:	f108 087c 	addls.w	r8, r8, #124	; 0x7c
 8006456:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800645a:	f44f 707c 	movhi.w	r0, #1008	; 0x3f0
 800645e:	bf88      	it	hi
 8006460:	f04f 087e 	movhi.w	r8, #126	; 0x7e
 8006464:	1830      	adds	r0, r6, r0
 8006466:	493e      	ldr	r1, [pc, #248]	; (8006560 <_malloc_r+0x518>)
 8006468:	6882      	ldr	r2, [r0, #8]
 800646a:	4282      	cmp	r2, r0
 800646c:	d103      	bne.n	8006476 <_malloc_r+0x42e>
 800646e:	e061      	b.n	8006534 <_malloc_r+0x4ec>
 8006470:	6892      	ldr	r2, [r2, #8]
 8006472:	4290      	cmp	r0, r2
 8006474:	d004      	beq.n	8006480 <_malloc_r+0x438>
 8006476:	6851      	ldr	r1, [r2, #4]
 8006478:	f021 0103 	bic.w	r1, r1, #3
 800647c:	428b      	cmp	r3, r1
 800647e:	d3f7      	bcc.n	8006470 <_malloc_r+0x428>
 8006480:	68d1      	ldr	r1, [r2, #12]
 8006482:	6873      	ldr	r3, [r6, #4]
 8006484:	60f9      	str	r1, [r7, #12]
 8006486:	60ba      	str	r2, [r7, #8]
 8006488:	60d7      	str	r7, [r2, #12]
 800648a:	608f      	str	r7, [r1, #8]
 800648c:	e668      	b.n	8006160 <_malloc_r+0x118>
 800648e:	193b      	adds	r3, r7, r4
 8006490:	f041 0001 	orr.w	r0, r1, #1
 8006494:	f044 0401 	orr.w	r4, r4, #1
 8006498:	607c      	str	r4, [r7, #4]
 800649a:	6153      	str	r3, [r2, #20]
 800649c:	6113      	str	r3, [r2, #16]
 800649e:	6058      	str	r0, [r3, #4]
 80064a0:	f8c3 c00c 	str.w	ip, [r3, #12]
 80064a4:	f8c3 c008 	str.w	ip, [r3, #8]
 80064a8:	5059      	str	r1, [r3, r1]
 80064aa:	4628      	mov	r0, r5
 80064ac:	f000 f904 	bl	80066b8 <__malloc_unlock>
 80064b0:	3708      	adds	r7, #8
 80064b2:	e5f8      	b.n	80060a6 <_malloc_r+0x5e>
 80064b4:	f108 0801 	add.w	r8, r8, #1
 80064b8:	3708      	adds	r7, #8
 80064ba:	f018 0f03 	tst.w	r8, #3
 80064be:	f47f ae63 	bne.w	8006188 <_malloc_r+0x140>
 80064c2:	464b      	mov	r3, r9
 80064c4:	f01e 0f03 	tst.w	lr, #3
 80064c8:	f1a3 0208 	sub.w	r2, r3, #8
 80064cc:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80064d0:	d062      	beq.n	8006598 <_malloc_r+0x550>
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d0f5      	beq.n	80064c4 <_malloc_r+0x47c>
 80064d8:	6873      	ldr	r3, [r6, #4]
 80064da:	0040      	lsls	r0, r0, #1
 80064dc:	4298      	cmp	r0, r3
 80064de:	f63f aec7 	bhi.w	8006270 <_malloc_r+0x228>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	f43f aec4 	beq.w	8006270 <_malloc_r+0x228>
 80064e8:	4218      	tst	r0, r3
 80064ea:	d05a      	beq.n	80065a2 <_malloc_r+0x55a>
 80064ec:	46c6      	mov	lr, r8
 80064ee:	e647      	b.n	8006180 <_malloc_r+0x138>
 80064f0:	f107 0308 	add.w	r3, r7, #8
 80064f4:	697f      	ldr	r7, [r7, #20]
 80064f6:	42bb      	cmp	r3, r7
 80064f8:	bf08      	it	eq
 80064fa:	f10e 0e02 	addeq.w	lr, lr, #2
 80064fe:	f43f ae03 	beq.w	8006108 <_malloc_r+0xc0>
 8006502:	e5c0      	b.n	8006086 <_malloc_r+0x3e>
 8006504:	1859      	adds	r1, r3, r1
 8006506:	461f      	mov	r7, r3
 8006508:	6848      	ldr	r0, [r1, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f857 2f08 	ldr.w	r2, [r7, #8]!
 8006510:	f040 0001 	orr.w	r0, r0, #1
 8006514:	6048      	str	r0, [r1, #4]
 8006516:	60d3      	str	r3, [r2, #12]
 8006518:	609a      	str	r2, [r3, #8]
 800651a:	4628      	mov	r0, r5
 800651c:	f000 f8cc 	bl	80066b8 <__malloc_unlock>
 8006520:	e5c1      	b.n	80060a6 <_malloc_r+0x5e>
 8006522:	42b7      	cmp	r7, r6
 8006524:	f43f aed7 	beq.w	80062d6 <_malloc_r+0x28e>
 8006528:	4b0d      	ldr	r3, [pc, #52]	; (8006560 <_malloc_r+0x518>)
 800652a:	689f      	ldr	r7, [r3, #8]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f023 0303 	bic.w	r3, r3, #3
 8006532:	e735      	b.n	80063a0 <_malloc_r+0x358>
 8006534:	684b      	ldr	r3, [r1, #4]
 8006536:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800653a:	2001      	movs	r0, #1
 800653c:	fa00 f008 	lsl.w	r0, r0, r8
 8006540:	4303      	orrs	r3, r0
 8006542:	604b      	str	r3, [r1, #4]
 8006544:	4611      	mov	r1, r2
 8006546:	e79d      	b.n	8006484 <_malloc_r+0x43c>
 8006548:	2301      	movs	r3, #1
 800654a:	f8c9 3004 	str.w	r3, [r9, #4]
 800654e:	464f      	mov	r7, r9
 8006550:	2300      	movs	r3, #0
 8006552:	e725      	b.n	80063a0 <_malloc_r+0x358>
 8006554:	68b7      	ldr	r7, [r6, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f023 0303 	bic.w	r3, r3, #3
 800655c:	e720      	b.n	80063a0 <_malloc_r+0x358>
 800655e:	bf00      	nop
 8006560:	2000054c 	.word	0x2000054c
 8006564:	20000970 	.word	0x20000970
 8006568:	0511      	lsls	r1, r2, #20
 800656a:	0d09      	lsrs	r1, r1, #20
 800656c:	2900      	cmp	r1, #0
 800656e:	f47f aeba 	bne.w	80062e6 <_malloc_r+0x29e>
 8006572:	68b2      	ldr	r2, [r6, #8]
 8006574:	eb0b 0108 	add.w	r1, fp, r8
 8006578:	f041 0101 	orr.w	r1, r1, #1
 800657c:	6051      	str	r1, [r2, #4]
 800657e:	e6ff      	b.n	8006380 <_malloc_r+0x338>
 8006580:	2201      	movs	r2, #1
 8006582:	f04f 0b00 	mov.w	fp, #0
 8006586:	e6da      	b.n	800633e <_malloc_r+0x2f6>
 8006588:	4628      	mov	r0, r5
 800658a:	f107 0108 	add.w	r1, r7, #8
 800658e:	f7ff fc4f 	bl	8005e30 <_free_r>
 8006592:	4b06      	ldr	r3, [pc, #24]	; (80065ac <_malloc_r+0x564>)
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	e6f3      	b.n	8006380 <_malloc_r+0x338>
 8006598:	6873      	ldr	r3, [r6, #4]
 800659a:	ea23 0300 	bic.w	r3, r3, r0
 800659e:	6073      	str	r3, [r6, #4]
 80065a0:	e79b      	b.n	80064da <_malloc_r+0x492>
 80065a2:	0040      	lsls	r0, r0, #1
 80065a4:	f108 0804 	add.w	r8, r8, #4
 80065a8:	e79e      	b.n	80064e8 <_malloc_r+0x4a0>
 80065aa:	bf00      	nop
 80065ac:	20000970 	.word	0x20000970

080065b0 <memchr>:
 80065b0:	0783      	lsls	r3, r0, #30
 80065b2:	b470      	push	{r4, r5, r6}
 80065b4:	b2c9      	uxtb	r1, r1
 80065b6:	d00f      	beq.n	80065d8 <memchr+0x28>
 80065b8:	2a00      	cmp	r2, #0
 80065ba:	d033      	beq.n	8006624 <memchr+0x74>
 80065bc:	7803      	ldrb	r3, [r0, #0]
 80065be:	3a01      	subs	r2, #1
 80065c0:	428b      	cmp	r3, r1
 80065c2:	d106      	bne.n	80065d2 <memchr+0x22>
 80065c4:	e01d      	b.n	8006602 <memchr+0x52>
 80065c6:	2a00      	cmp	r2, #0
 80065c8:	d02c      	beq.n	8006624 <memchr+0x74>
 80065ca:	7803      	ldrb	r3, [r0, #0]
 80065cc:	3a01      	subs	r2, #1
 80065ce:	428b      	cmp	r3, r1
 80065d0:	d017      	beq.n	8006602 <memchr+0x52>
 80065d2:	3001      	adds	r0, #1
 80065d4:	0783      	lsls	r3, r0, #30
 80065d6:	d1f6      	bne.n	80065c6 <memchr+0x16>
 80065d8:	2a03      	cmp	r2, #3
 80065da:	bf84      	itt	hi
 80065dc:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 80065e0:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 80065e4:	d80f      	bhi.n	8006606 <memchr+0x56>
 80065e6:	b1ea      	cbz	r2, 8006624 <memchr+0x74>
 80065e8:	7803      	ldrb	r3, [r0, #0]
 80065ea:	3a01      	subs	r2, #1
 80065ec:	428b      	cmp	r3, r1
 80065ee:	4402      	add	r2, r0
 80065f0:	d104      	bne.n	80065fc <memchr+0x4c>
 80065f2:	e006      	b.n	8006602 <memchr+0x52>
 80065f4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80065f8:	428b      	cmp	r3, r1
 80065fa:	d002      	beq.n	8006602 <memchr+0x52>
 80065fc:	4290      	cmp	r0, r2
 80065fe:	d1f9      	bne.n	80065f4 <memchr+0x44>
 8006600:	2000      	movs	r0, #0
 8006602:	bc70      	pop	{r4, r5, r6}
 8006604:	4770      	bx	lr
 8006606:	4604      	mov	r4, r0
 8006608:	3004      	adds	r0, #4
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	4073      	eors	r3, r6
 800660e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8006612:	ea25 0303 	bic.w	r3, r5, r3
 8006616:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800661a:	d105      	bne.n	8006628 <memchr+0x78>
 800661c:	3a04      	subs	r2, #4
 800661e:	2a03      	cmp	r2, #3
 8006620:	d8f1      	bhi.n	8006606 <memchr+0x56>
 8006622:	e7e0      	b.n	80065e6 <memchr+0x36>
 8006624:	4610      	mov	r0, r2
 8006626:	e7ec      	b.n	8006602 <memchr+0x52>
 8006628:	4620      	mov	r0, r4
 800662a:	e7dc      	b.n	80065e6 <memchr+0x36>

0800662c <memcpy>:
 800662c:	2a0f      	cmp	r2, #15
 800662e:	b4f0      	push	{r4, r5, r6, r7}
 8006630:	bf98      	it	ls
 8006632:	4603      	movls	r3, r0
 8006634:	d931      	bls.n	800669a <memcpy+0x6e>
 8006636:	ea41 0300 	orr.w	r3, r1, r0
 800663a:	079b      	lsls	r3, r3, #30
 800663c:	d137      	bne.n	80066ae <memcpy+0x82>
 800663e:	460c      	mov	r4, r1
 8006640:	4603      	mov	r3, r0
 8006642:	4615      	mov	r5, r2
 8006644:	6826      	ldr	r6, [r4, #0]
 8006646:	601e      	str	r6, [r3, #0]
 8006648:	6866      	ldr	r6, [r4, #4]
 800664a:	605e      	str	r6, [r3, #4]
 800664c:	68a6      	ldr	r6, [r4, #8]
 800664e:	609e      	str	r6, [r3, #8]
 8006650:	68e6      	ldr	r6, [r4, #12]
 8006652:	3d10      	subs	r5, #16
 8006654:	60de      	str	r6, [r3, #12]
 8006656:	3410      	adds	r4, #16
 8006658:	3310      	adds	r3, #16
 800665a:	2d0f      	cmp	r5, #15
 800665c:	d8f2      	bhi.n	8006644 <memcpy+0x18>
 800665e:	f1a2 0410 	sub.w	r4, r2, #16
 8006662:	f024 040f 	bic.w	r4, r4, #15
 8006666:	f002 020f 	and.w	r2, r2, #15
 800666a:	3410      	adds	r4, #16
 800666c:	2a03      	cmp	r2, #3
 800666e:	eb00 0304 	add.w	r3, r0, r4
 8006672:	4421      	add	r1, r4
 8006674:	d911      	bls.n	800669a <memcpy+0x6e>
 8006676:	1f0e      	subs	r6, r1, #4
 8006678:	461d      	mov	r5, r3
 800667a:	4614      	mov	r4, r2
 800667c:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8006680:	3c04      	subs	r4, #4
 8006682:	2c03      	cmp	r4, #3
 8006684:	f845 7b04 	str.w	r7, [r5], #4
 8006688:	d8f8      	bhi.n	800667c <memcpy+0x50>
 800668a:	1f14      	subs	r4, r2, #4
 800668c:	f024 0403 	bic.w	r4, r4, #3
 8006690:	3404      	adds	r4, #4
 8006692:	f002 0203 	and.w	r2, r2, #3
 8006696:	1909      	adds	r1, r1, r4
 8006698:	191b      	adds	r3, r3, r4
 800669a:	b132      	cbz	r2, 80066aa <memcpy+0x7e>
 800669c:	3901      	subs	r1, #1
 800669e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80066a2:	3a01      	subs	r2, #1
 80066a4:	f803 4b01 	strb.w	r4, [r3], #1
 80066a8:	d1f9      	bne.n	800669e <memcpy+0x72>
 80066aa:	bcf0      	pop	{r4, r5, r6, r7}
 80066ac:	4770      	bx	lr
 80066ae:	4603      	mov	r3, r0
 80066b0:	e7f4      	b.n	800669c <memcpy+0x70>
 80066b2:	bf00      	nop

080066b4 <__malloc_lock>:
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop

080066b8 <__malloc_unlock>:
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop

080066bc <_Balloc>:
 80066bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80066be:	b570      	push	{r4, r5, r6, lr}
 80066c0:	4605      	mov	r5, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	b14b      	cbz	r3, 80066da <_Balloc+0x1e>
 80066c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80066ca:	b178      	cbz	r0, 80066ec <_Balloc+0x30>
 80066cc:	6802      	ldr	r2, [r0, #0]
 80066ce:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80066d2:	2300      	movs	r3, #0
 80066d4:	6103      	str	r3, [r0, #16]
 80066d6:	60c3      	str	r3, [r0, #12]
 80066d8:	bd70      	pop	{r4, r5, r6, pc}
 80066da:	2104      	movs	r1, #4
 80066dc:	2221      	movs	r2, #33	; 0x21
 80066de:	f001 fa7f 	bl	8007be0 <_calloc_r>
 80066e2:	4603      	mov	r3, r0
 80066e4:	64e8      	str	r0, [r5, #76]	; 0x4c
 80066e6:	2800      	cmp	r0, #0
 80066e8:	d1ed      	bne.n	80066c6 <_Balloc+0xa>
 80066ea:	bd70      	pop	{r4, r5, r6, pc}
 80066ec:	2101      	movs	r1, #1
 80066ee:	fa11 f604 	lsls.w	r6, r1, r4
 80066f2:	1d72      	adds	r2, r6, #5
 80066f4:	4628      	mov	r0, r5
 80066f6:	0092      	lsls	r2, r2, #2
 80066f8:	f001 fa72 	bl	8007be0 <_calloc_r>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d0f4      	beq.n	80066ea <_Balloc+0x2e>
 8006700:	6044      	str	r4, [r0, #4]
 8006702:	6086      	str	r6, [r0, #8]
 8006704:	e7e5      	b.n	80066d2 <_Balloc+0x16>
 8006706:	bf00      	nop

08006708 <_Bfree>:
 8006708:	b131      	cbz	r1, 8006718 <_Bfree+0x10>
 800670a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800670c:	684a      	ldr	r2, [r1, #4]
 800670e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006712:	6008      	str	r0, [r1, #0]
 8006714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop

0800671c <__multadd>:
 800671c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800671e:	460d      	mov	r5, r1
 8006720:	4606      	mov	r6, r0
 8006722:	690c      	ldr	r4, [r1, #16]
 8006724:	f101 0014 	add.w	r0, r1, #20
 8006728:	b083      	sub	sp, #12
 800672a:	2100      	movs	r1, #0
 800672c:	6807      	ldr	r7, [r0, #0]
 800672e:	fa1f fc87 	uxth.w	ip, r7
 8006732:	0c3f      	lsrs	r7, r7, #16
 8006734:	fb02 330c 	mla	r3, r2, ip, r3
 8006738:	fb02 f707 	mul.w	r7, r2, r7
 800673c:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006740:	b29b      	uxth	r3, r3
 8006742:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 8006746:	3101      	adds	r1, #1
 8006748:	f840 3b04 	str.w	r3, [r0], #4
 800674c:	0c3b      	lsrs	r3, r7, #16
 800674e:	428c      	cmp	r4, r1
 8006750:	dcec      	bgt.n	800672c <__multadd+0x10>
 8006752:	b13b      	cbz	r3, 8006764 <__multadd+0x48>
 8006754:	68aa      	ldr	r2, [r5, #8]
 8006756:	4294      	cmp	r4, r2
 8006758:	da07      	bge.n	800676a <__multadd+0x4e>
 800675a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800675e:	3401      	adds	r4, #1
 8006760:	6153      	str	r3, [r2, #20]
 8006762:	612c      	str	r4, [r5, #16]
 8006764:	4628      	mov	r0, r5
 8006766:	b003      	add	sp, #12
 8006768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800676a:	6869      	ldr	r1, [r5, #4]
 800676c:	9301      	str	r3, [sp, #4]
 800676e:	3101      	adds	r1, #1
 8006770:	4630      	mov	r0, r6
 8006772:	f7ff ffa3 	bl	80066bc <_Balloc>
 8006776:	692a      	ldr	r2, [r5, #16]
 8006778:	3202      	adds	r2, #2
 800677a:	f105 010c 	add.w	r1, r5, #12
 800677e:	4607      	mov	r7, r0
 8006780:	0092      	lsls	r2, r2, #2
 8006782:	f100 000c 	add.w	r0, r0, #12
 8006786:	f7ff ff51 	bl	800662c <memcpy>
 800678a:	6869      	ldr	r1, [r5, #4]
 800678c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800678e:	9b01      	ldr	r3, [sp, #4]
 8006790:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8006794:	6028      	str	r0, [r5, #0]
 8006796:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800679a:	463d      	mov	r5, r7
 800679c:	e7dd      	b.n	800675a <__multadd+0x3e>
 800679e:	bf00      	nop

080067a0 <__s2b>:
 80067a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a4:	461e      	mov	r6, r3
 80067a6:	f648 6339 	movw	r3, #36409	; 0x8e39
 80067aa:	f106 0408 	add.w	r4, r6, #8
 80067ae:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 80067b2:	fb83 5304 	smull	r5, r3, r3, r4
 80067b6:	17e4      	asrs	r4, r4, #31
 80067b8:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 80067bc:	460f      	mov	r7, r1
 80067be:	2100      	movs	r1, #0
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	4604      	mov	r4, r0
 80067c4:	4690      	mov	r8, r2
 80067c6:	dd05      	ble.n	80067d4 <__s2b+0x34>
 80067c8:	2201      	movs	r2, #1
 80067ca:	2100      	movs	r1, #0
 80067cc:	0052      	lsls	r2, r2, #1
 80067ce:	3101      	adds	r1, #1
 80067d0:	4293      	cmp	r3, r2
 80067d2:	dcfb      	bgt.n	80067cc <__s2b+0x2c>
 80067d4:	4620      	mov	r0, r4
 80067d6:	f7ff ff71 	bl	80066bc <_Balloc>
 80067da:	9b08      	ldr	r3, [sp, #32]
 80067dc:	6143      	str	r3, [r0, #20]
 80067de:	2301      	movs	r3, #1
 80067e0:	f1b8 0f09 	cmp.w	r8, #9
 80067e4:	4601      	mov	r1, r0
 80067e6:	6103      	str	r3, [r0, #16]
 80067e8:	dd23      	ble.n	8006832 <__s2b+0x92>
 80067ea:	f107 0909 	add.w	r9, r7, #9
 80067ee:	464d      	mov	r5, r9
 80067f0:	4447      	add	r7, r8
 80067f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80067f6:	220a      	movs	r2, #10
 80067f8:	3b30      	subs	r3, #48	; 0x30
 80067fa:	4620      	mov	r0, r4
 80067fc:	f7ff ff8e 	bl	800671c <__multadd>
 8006800:	42bd      	cmp	r5, r7
 8006802:	4601      	mov	r1, r0
 8006804:	d1f5      	bne.n	80067f2 <__s2b+0x52>
 8006806:	eb09 0708 	add.w	r7, r9, r8
 800680a:	3f08      	subs	r7, #8
 800680c:	4546      	cmp	r6, r8
 800680e:	dd0d      	ble.n	800682c <__s2b+0x8c>
 8006810:	ebc8 0707 	rsb	r7, r8, r7
 8006814:	f817 3008 	ldrb.w	r3, [r7, r8]
 8006818:	220a      	movs	r2, #10
 800681a:	3b30      	subs	r3, #48	; 0x30
 800681c:	4620      	mov	r0, r4
 800681e:	f7ff ff7d 	bl	800671c <__multadd>
 8006822:	f108 0801 	add.w	r8, r8, #1
 8006826:	45b0      	cmp	r8, r6
 8006828:	4601      	mov	r1, r0
 800682a:	d1f3      	bne.n	8006814 <__s2b+0x74>
 800682c:	4608      	mov	r0, r1
 800682e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006832:	370a      	adds	r7, #10
 8006834:	f04f 0809 	mov.w	r8, #9
 8006838:	e7e8      	b.n	800680c <__s2b+0x6c>
 800683a:	bf00      	nop

0800683c <__hi0bits>:
 800683c:	4603      	mov	r3, r0
 800683e:	2000      	movs	r0, #0
 8006840:	0c1a      	lsrs	r2, r3, #16
 8006842:	d101      	bne.n	8006848 <__hi0bits+0xc>
 8006844:	041b      	lsls	r3, r3, #16
 8006846:	2010      	movs	r0, #16
 8006848:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800684c:	d101      	bne.n	8006852 <__hi0bits+0x16>
 800684e:	3008      	adds	r0, #8
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006856:	d101      	bne.n	800685c <__hi0bits+0x20>
 8006858:	3004      	adds	r0, #4
 800685a:	011b      	lsls	r3, r3, #4
 800685c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006860:	d101      	bne.n	8006866 <__hi0bits+0x2a>
 8006862:	3002      	adds	r0, #2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	db02      	blt.n	8006870 <__hi0bits+0x34>
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	d401      	bmi.n	8006872 <__hi0bits+0x36>
 800686e:	2020      	movs	r0, #32
 8006870:	4770      	bx	lr
 8006872:	3001      	adds	r0, #1
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop

08006878 <__lo0bits>:
 8006878:	6803      	ldr	r3, [r0, #0]
 800687a:	4602      	mov	r2, r0
 800687c:	f013 0007 	ands.w	r0, r3, #7
 8006880:	d007      	beq.n	8006892 <__lo0bits+0x1a>
 8006882:	07d9      	lsls	r1, r3, #31
 8006884:	d41f      	bmi.n	80068c6 <__lo0bits+0x4e>
 8006886:	0798      	lsls	r0, r3, #30
 8006888:	d41f      	bmi.n	80068ca <__lo0bits+0x52>
 800688a:	089b      	lsrs	r3, r3, #2
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	2002      	movs	r0, #2
 8006890:	4770      	bx	lr
 8006892:	b299      	uxth	r1, r3
 8006894:	b909      	cbnz	r1, 800689a <__lo0bits+0x22>
 8006896:	0c1b      	lsrs	r3, r3, #16
 8006898:	2010      	movs	r0, #16
 800689a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800689e:	d101      	bne.n	80068a4 <__lo0bits+0x2c>
 80068a0:	3008      	adds	r0, #8
 80068a2:	0a1b      	lsrs	r3, r3, #8
 80068a4:	0719      	lsls	r1, r3, #28
 80068a6:	d101      	bne.n	80068ac <__lo0bits+0x34>
 80068a8:	3004      	adds	r0, #4
 80068aa:	091b      	lsrs	r3, r3, #4
 80068ac:	0799      	lsls	r1, r3, #30
 80068ae:	d101      	bne.n	80068b4 <__lo0bits+0x3c>
 80068b0:	3002      	adds	r0, #2
 80068b2:	089b      	lsrs	r3, r3, #2
 80068b4:	07d9      	lsls	r1, r3, #31
 80068b6:	d404      	bmi.n	80068c2 <__lo0bits+0x4a>
 80068b8:	085b      	lsrs	r3, r3, #1
 80068ba:	d101      	bne.n	80068c0 <__lo0bits+0x48>
 80068bc:	2020      	movs	r0, #32
 80068be:	4770      	bx	lr
 80068c0:	3001      	adds	r0, #1
 80068c2:	6013      	str	r3, [r2, #0]
 80068c4:	4770      	bx	lr
 80068c6:	2000      	movs	r0, #0
 80068c8:	4770      	bx	lr
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	2001      	movs	r0, #1
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop

080068d4 <__i2b>:
 80068d4:	b510      	push	{r4, lr}
 80068d6:	460c      	mov	r4, r1
 80068d8:	2101      	movs	r1, #1
 80068da:	f7ff feef 	bl	80066bc <_Balloc>
 80068de:	2201      	movs	r2, #1
 80068e0:	6144      	str	r4, [r0, #20]
 80068e2:	6102      	str	r2, [r0, #16]
 80068e4:	bd10      	pop	{r4, pc}
 80068e6:	bf00      	nop

080068e8 <__multiply>:
 80068e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	690f      	ldr	r7, [r1, #16]
 80068ee:	6916      	ldr	r6, [r2, #16]
 80068f0:	42b7      	cmp	r7, r6
 80068f2:	b085      	sub	sp, #20
 80068f4:	460d      	mov	r5, r1
 80068f6:	4692      	mov	sl, r2
 80068f8:	da04      	bge.n	8006904 <__multiply+0x1c>
 80068fa:	463a      	mov	r2, r7
 80068fc:	4655      	mov	r5, sl
 80068fe:	4637      	mov	r7, r6
 8006900:	468a      	mov	sl, r1
 8006902:	4616      	mov	r6, r2
 8006904:	68ab      	ldr	r3, [r5, #8]
 8006906:	6869      	ldr	r1, [r5, #4]
 8006908:	19bc      	adds	r4, r7, r6
 800690a:	429c      	cmp	r4, r3
 800690c:	bfc8      	it	gt
 800690e:	3101      	addgt	r1, #1
 8006910:	f7ff fed4 	bl	80066bc <_Balloc>
 8006914:	1d21      	adds	r1, r4, #4
 8006916:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
 800691a:	f100 0914 	add.w	r9, r0, #20
 800691e:	f10b 0b04 	add.w	fp, fp, #4
 8006922:	45d9      	cmp	r9, fp
 8006924:	9000      	str	r0, [sp, #0]
 8006926:	9101      	str	r1, [sp, #4]
 8006928:	d205      	bcs.n	8006936 <__multiply+0x4e>
 800692a:	464b      	mov	r3, r9
 800692c:	2200      	movs	r2, #0
 800692e:	f843 2b04 	str.w	r2, [r3], #4
 8006932:	459b      	cmp	fp, r3
 8006934:	d8fb      	bhi.n	800692e <__multiply+0x46>
 8006936:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 800693a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800693e:	f10a 0a14 	add.w	sl, sl, #20
 8006942:	f106 0814 	add.w	r8, r6, #20
 8006946:	3514      	adds	r5, #20
 8006948:	3714      	adds	r7, #20
 800694a:	45c2      	cmp	sl, r8
 800694c:	d24f      	bcs.n	80069ee <__multiply+0x106>
 800694e:	f8cd b008 	str.w	fp, [sp, #8]
 8006952:	9403      	str	r4, [sp, #12]
 8006954:	46ab      	mov	fp, r5
 8006956:	f85a 5b04 	ldr.w	r5, [sl], #4
 800695a:	b2ac      	uxth	r4, r5
 800695c:	b1e4      	cbz	r4, 8006998 <__multiply+0xb0>
 800695e:	465a      	mov	r2, fp
 8006960:	464b      	mov	r3, r9
 8006962:	2100      	movs	r1, #0
 8006964:	f852 6b04 	ldr.w	r6, [r2], #4
 8006968:	681d      	ldr	r5, [r3, #0]
 800696a:	b2b0      	uxth	r0, r6
 800696c:	fa11 f185 	uxtah	r1, r1, r5
 8006970:	0c36      	lsrs	r6, r6, #16
 8006972:	0c2d      	lsrs	r5, r5, #16
 8006974:	fb04 1000 	mla	r0, r4, r0, r1
 8006978:	fb04 5106 	mla	r1, r4, r6, r5
 800697c:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 8006980:	b280      	uxth	r0, r0
 8006982:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8006986:	0c09      	lsrs	r1, r1, #16
 8006988:	4297      	cmp	r7, r2
 800698a:	461d      	mov	r5, r3
 800698c:	f843 0b04 	str.w	r0, [r3], #4
 8006990:	d8e8      	bhi.n	8006964 <__multiply+0x7c>
 8006992:	6069      	str	r1, [r5, #4]
 8006994:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 8006998:	0c2d      	lsrs	r5, r5, #16
 800699a:	d021      	beq.n	80069e0 <__multiply+0xf8>
 800699c:	f8d9 6000 	ldr.w	r6, [r9]
 80069a0:	465b      	mov	r3, fp
 80069a2:	4630      	mov	r0, r6
 80069a4:	4649      	mov	r1, r9
 80069a6:	f04f 0c00 	mov.w	ip, #0
 80069aa:	e000      	b.n	80069ae <__multiply+0xc6>
 80069ac:	4611      	mov	r1, r2
 80069ae:	881a      	ldrh	r2, [r3, #0]
 80069b0:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
 80069b4:	fb05 cc02 	mla	ip, r5, r2, ip
 80069b8:	b2b6      	uxth	r6, r6
 80069ba:	460a      	mov	r2, r1
 80069bc:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 80069c0:	f842 6b04 	str.w	r6, [r2], #4
 80069c4:	f853 6b04 	ldr.w	r6, [r3], #4
 80069c8:	6848      	ldr	r0, [r1, #4]
 80069ca:	0c36      	lsrs	r6, r6, #16
 80069cc:	b284      	uxth	r4, r0
 80069ce:	fb05 4606 	mla	r6, r5, r6, r4
 80069d2:	eb06 461c 	add.w	r6, r6, ip, lsr #16
 80069d6:	429f      	cmp	r7, r3
 80069d8:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 80069dc:	d8e6      	bhi.n	80069ac <__multiply+0xc4>
 80069de:	604e      	str	r6, [r1, #4]
 80069e0:	45d0      	cmp	r8, sl
 80069e2:	f109 0904 	add.w	r9, r9, #4
 80069e6:	d8b6      	bhi.n	8006956 <__multiply+0x6e>
 80069e8:	f8dd b008 	ldr.w	fp, [sp, #8]
 80069ec:	9c03      	ldr	r4, [sp, #12]
 80069ee:	2c00      	cmp	r4, #0
 80069f0:	dd0c      	ble.n	8006a0c <__multiply+0x124>
 80069f2:	e89d 0006 	ldmia.w	sp, {r1, r2}
 80069f6:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80069fa:	b93b      	cbnz	r3, 8006a0c <__multiply+0x124>
 80069fc:	f1ab 0b04 	sub.w	fp, fp, #4
 8006a00:	e002      	b.n	8006a08 <__multiply+0x120>
 8006a02:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
 8006a06:	b90b      	cbnz	r3, 8006a0c <__multiply+0x124>
 8006a08:	3c01      	subs	r4, #1
 8006a0a:	d1fa      	bne.n	8006a02 <__multiply+0x11a>
 8006a0c:	9a00      	ldr	r2, [sp, #0]
 8006a0e:	6114      	str	r4, [r2, #16]
 8006a10:	4610      	mov	r0, r2
 8006a12:	b005      	add	sp, #20
 8006a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a18 <__pow5mult>:
 8006a18:	f012 0303 	ands.w	r3, r2, #3
 8006a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a20:	4615      	mov	r5, r2
 8006a22:	4604      	mov	r4, r0
 8006a24:	4688      	mov	r8, r1
 8006a26:	d12d      	bne.n	8006a84 <__pow5mult+0x6c>
 8006a28:	10ad      	asrs	r5, r5, #2
 8006a2a:	d01d      	beq.n	8006a68 <__pow5mult+0x50>
 8006a2c:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8006a2e:	b92f      	cbnz	r7, 8006a3c <__pow5mult+0x24>
 8006a30:	e031      	b.n	8006a96 <__pow5mult+0x7e>
 8006a32:	106d      	asrs	r5, r5, #1
 8006a34:	d018      	beq.n	8006a68 <__pow5mult+0x50>
 8006a36:	683e      	ldr	r6, [r7, #0]
 8006a38:	b1ce      	cbz	r6, 8006a6e <__pow5mult+0x56>
 8006a3a:	4637      	mov	r7, r6
 8006a3c:	07e8      	lsls	r0, r5, #31
 8006a3e:	d5f8      	bpl.n	8006a32 <__pow5mult+0x1a>
 8006a40:	4641      	mov	r1, r8
 8006a42:	463a      	mov	r2, r7
 8006a44:	4620      	mov	r0, r4
 8006a46:	f7ff ff4f 	bl	80068e8 <__multiply>
 8006a4a:	f1b8 0f00 	cmp.w	r8, #0
 8006a4e:	d017      	beq.n	8006a80 <__pow5mult+0x68>
 8006a50:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006a54:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006a56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a5a:	106d      	asrs	r5, r5, #1
 8006a5c:	f8c8 1000 	str.w	r1, [r8]
 8006a60:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 8006a64:	4680      	mov	r8, r0
 8006a66:	d1e6      	bne.n	8006a36 <__pow5mult+0x1e>
 8006a68:	4640      	mov	r0, r8
 8006a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a6e:	4639      	mov	r1, r7
 8006a70:	463a      	mov	r2, r7
 8006a72:	4620      	mov	r0, r4
 8006a74:	f7ff ff38 	bl	80068e8 <__multiply>
 8006a78:	6038      	str	r0, [r7, #0]
 8006a7a:	6006      	str	r6, [r0, #0]
 8006a7c:	4607      	mov	r7, r0
 8006a7e:	e7dd      	b.n	8006a3c <__pow5mult+0x24>
 8006a80:	4680      	mov	r8, r0
 8006a82:	e7d6      	b.n	8006a32 <__pow5mult+0x1a>
 8006a84:	1e5e      	subs	r6, r3, #1
 8006a86:	4a09      	ldr	r2, [pc, #36]	; (8006aac <__pow5mult+0x94>)
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8006a8e:	f7ff fe45 	bl	800671c <__multadd>
 8006a92:	4680      	mov	r8, r0
 8006a94:	e7c8      	b.n	8006a28 <__pow5mult+0x10>
 8006a96:	4620      	mov	r0, r4
 8006a98:	f240 2171 	movw	r1, #625	; 0x271
 8006a9c:	f7ff ff1a 	bl	80068d4 <__i2b>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	64a0      	str	r0, [r4, #72]	; 0x48
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	6003      	str	r3, [r0, #0]
 8006aa8:	e7c8      	b.n	8006a3c <__pow5mult+0x24>
 8006aaa:	bf00      	nop
 8006aac:	08008e90 	.word	0x08008e90

08006ab0 <__lshift>:
 8006ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab4:	4691      	mov	r9, r2
 8006ab6:	690a      	ldr	r2, [r1, #16]
 8006ab8:	688b      	ldr	r3, [r1, #8]
 8006aba:	ea4f 1769 	mov.w	r7, r9, asr #5
 8006abe:	eb07 0b02 	add.w	fp, r7, r2
 8006ac2:	f10b 0501 	add.w	r5, fp, #1
 8006ac6:	429d      	cmp	r5, r3
 8006ac8:	460c      	mov	r4, r1
 8006aca:	4606      	mov	r6, r0
 8006acc:	6849      	ldr	r1, [r1, #4]
 8006ace:	dd03      	ble.n	8006ad8 <__lshift+0x28>
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	3101      	adds	r1, #1
 8006ad4:	429d      	cmp	r5, r3
 8006ad6:	dcfb      	bgt.n	8006ad0 <__lshift+0x20>
 8006ad8:	4630      	mov	r0, r6
 8006ada:	f7ff fdef 	bl	80066bc <_Balloc>
 8006ade:	2f00      	cmp	r7, #0
 8006ae0:	f100 0314 	add.w	r3, r0, #20
 8006ae4:	dd09      	ble.n	8006afa <__lshift+0x4a>
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	4611      	mov	r1, r2
 8006aea:	3201      	adds	r2, #1
 8006aec:	42ba      	cmp	r2, r7
 8006aee:	f843 1b04 	str.w	r1, [r3], #4
 8006af2:	d1fa      	bne.n	8006aea <__lshift+0x3a>
 8006af4:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006af8:	3314      	adds	r3, #20
 8006afa:	6922      	ldr	r2, [r4, #16]
 8006afc:	f019 091f 	ands.w	r9, r9, #31
 8006b00:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8006b04:	f104 0114 	add.w	r1, r4, #20
 8006b08:	f10c 0c14 	add.w	ip, ip, #20
 8006b0c:	d022      	beq.n	8006b54 <__lshift+0xa4>
 8006b0e:	f1c9 0a20 	rsb	sl, r9, #32
 8006b12:	2200      	movs	r2, #0
 8006b14:	e000      	b.n	8006b18 <__lshift+0x68>
 8006b16:	463b      	mov	r3, r7
 8006b18:	f8d1 8000 	ldr.w	r8, [r1]
 8006b1c:	461f      	mov	r7, r3
 8006b1e:	fa08 f809 	lsl.w	r8, r8, r9
 8006b22:	ea48 0202 	orr.w	r2, r8, r2
 8006b26:	f847 2b04 	str.w	r2, [r7], #4
 8006b2a:	f851 2b04 	ldr.w	r2, [r1], #4
 8006b2e:	458c      	cmp	ip, r1
 8006b30:	fa22 f20a 	lsr.w	r2, r2, sl
 8006b34:	d8ef      	bhi.n	8006b16 <__lshift+0x66>
 8006b36:	605a      	str	r2, [r3, #4]
 8006b38:	b10a      	cbz	r2, 8006b3e <__lshift+0x8e>
 8006b3a:	f10b 0502 	add.w	r5, fp, #2
 8006b3e:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8006b40:	6862      	ldr	r2, [r4, #4]
 8006b42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b46:	3d01      	subs	r5, #1
 8006b48:	6105      	str	r5, [r0, #16]
 8006b4a:	6021      	str	r1, [r4, #0]
 8006b4c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b54:	f851 2b04 	ldr.w	r2, [r1], #4
 8006b58:	458c      	cmp	ip, r1
 8006b5a:	f843 2b04 	str.w	r2, [r3], #4
 8006b5e:	d9ee      	bls.n	8006b3e <__lshift+0x8e>
 8006b60:	f851 2b04 	ldr.w	r2, [r1], #4
 8006b64:	458c      	cmp	ip, r1
 8006b66:	f843 2b04 	str.w	r2, [r3], #4
 8006b6a:	d8f3      	bhi.n	8006b54 <__lshift+0xa4>
 8006b6c:	e7e7      	b.n	8006b3e <__lshift+0x8e>
 8006b6e:	bf00      	nop

08006b70 <__mcmp>:
 8006b70:	4603      	mov	r3, r0
 8006b72:	690a      	ldr	r2, [r1, #16]
 8006b74:	6900      	ldr	r0, [r0, #16]
 8006b76:	1a80      	subs	r0, r0, r2
 8006b78:	b430      	push	{r4, r5}
 8006b7a:	d111      	bne.n	8006ba0 <__mcmp+0x30>
 8006b7c:	3204      	adds	r2, #4
 8006b7e:	0094      	lsls	r4, r2, #2
 8006b80:	191a      	adds	r2, r3, r4
 8006b82:	1909      	adds	r1, r1, r4
 8006b84:	3314      	adds	r3, #20
 8006b86:	3204      	adds	r2, #4
 8006b88:	3104      	adds	r1, #4
 8006b8a:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8006b8e:	f851 4c04 	ldr.w	r4, [r1, #-4]
 8006b92:	3a04      	subs	r2, #4
 8006b94:	42a5      	cmp	r5, r4
 8006b96:	f1a1 0104 	sub.w	r1, r1, #4
 8006b9a:	d103      	bne.n	8006ba4 <__mcmp+0x34>
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d3f4      	bcc.n	8006b8a <__mcmp+0x1a>
 8006ba0:	bc30      	pop	{r4, r5}
 8006ba2:	4770      	bx	lr
 8006ba4:	bf38      	it	cc
 8006ba6:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
 8006baa:	d3f9      	bcc.n	8006ba0 <__mcmp+0x30>
 8006bac:	2001      	movs	r0, #1
 8006bae:	e7f7      	b.n	8006ba0 <__mcmp+0x30>

08006bb0 <__mdiff>:
 8006bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb4:	460c      	mov	r4, r1
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	4611      	mov	r1, r2
 8006bba:	4620      	mov	r0, r4
 8006bbc:	4615      	mov	r5, r2
 8006bbe:	f7ff ffd7 	bl	8006b70 <__mcmp>
 8006bc2:	1e07      	subs	r7, r0, #0
 8006bc4:	d058      	beq.n	8006c78 <__mdiff+0xc8>
 8006bc6:	db52      	blt.n	8006c6e <__mdiff+0xbe>
 8006bc8:	2700      	movs	r7, #0
 8006bca:	4630      	mov	r0, r6
 8006bcc:	6861      	ldr	r1, [r4, #4]
 8006bce:	f7ff fd75 	bl	80066bc <_Balloc>
 8006bd2:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8006bd6:	692b      	ldr	r3, [r5, #16]
 8006bd8:	60c7      	str	r7, [r0, #12]
 8006bda:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 8006bde:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8006be2:	3714      	adds	r7, #20
 8006be4:	f108 0814 	add.w	r8, r8, #20
 8006be8:	3414      	adds	r4, #20
 8006bea:	3514      	adds	r5, #20
 8006bec:	f100 0914 	add.w	r9, r0, #20
 8006bf0:	2600      	movs	r6, #0
 8006bf2:	f854 3b04 	ldr.w	r3, [r4], #4
 8006bf6:	f855 2b04 	ldr.w	r2, [r5], #4
 8006bfa:	fa16 f183 	uxtah	r1, r6, r3
 8006bfe:	fa1f fa82 	uxth.w	sl, r2
 8006c02:	0c12      	lsrs	r2, r2, #16
 8006c04:	ebc2 4613 	rsb	r6, r2, r3, lsr #16
 8006c08:	ebca 0101 	rsb	r1, sl, r1
 8006c0c:	eb06 4621 	add.w	r6, r6, r1, asr #16
 8006c10:	464b      	mov	r3, r9
 8006c12:	b289      	uxth	r1, r1
 8006c14:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8006c18:	f843 1b04 	str.w	r1, [r3], #4
 8006c1c:	1436      	asrs	r6, r6, #16
 8006c1e:	45a8      	cmp	r8, r5
 8006c20:	4622      	mov	r2, r4
 8006c22:	4699      	mov	r9, r3
 8006c24:	d8e5      	bhi.n	8006bf2 <__mdiff+0x42>
 8006c26:	42a7      	cmp	r7, r4
 8006c28:	4698      	mov	r8, r3
 8006c2a:	d914      	bls.n	8006c56 <__mdiff+0xa6>
 8006c2c:	f852 5b04 	ldr.w	r5, [r2], #4
 8006c30:	fa16 f685 	uxtah	r6, r6, r5
 8006c34:	0c2d      	lsrs	r5, r5, #16
 8006c36:	eb05 4526 	add.w	r5, r5, r6, asr #16
 8006c3a:	b2b6      	uxth	r6, r6
 8006c3c:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 8006c40:	142e      	asrs	r6, r5, #16
 8006c42:	4297      	cmp	r7, r2
 8006c44:	f843 1b04 	str.w	r1, [r3], #4
 8006c48:	d8f0      	bhi.n	8006c2c <__mdiff+0x7c>
 8006c4a:	43e3      	mvns	r3, r4
 8006c4c:	19db      	adds	r3, r3, r7
 8006c4e:	f023 0303 	bic.w	r3, r3, #3
 8006c52:	3304      	adds	r3, #4
 8006c54:	4443      	add	r3, r8
 8006c56:	b931      	cbnz	r1, 8006c66 <__mdiff+0xb6>
 8006c58:	3b04      	subs	r3, #4
 8006c5a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006c5e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006c62:	2a00      	cmp	r2, #0
 8006c64:	d0f9      	beq.n	8006c5a <__mdiff+0xaa>
 8006c66:	f8c0 c010 	str.w	ip, [r0, #16]
 8006c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6e:	4623      	mov	r3, r4
 8006c70:	2701      	movs	r7, #1
 8006c72:	462c      	mov	r4, r5
 8006c74:	461d      	mov	r5, r3
 8006c76:	e7a8      	b.n	8006bca <__mdiff+0x1a>
 8006c78:	4630      	mov	r0, r6
 8006c7a:	4639      	mov	r1, r7
 8006c7c:	f7ff fd1e 	bl	80066bc <_Balloc>
 8006c80:	2301      	movs	r3, #1
 8006c82:	6103      	str	r3, [r0, #16]
 8006c84:	6147      	str	r7, [r0, #20]
 8006c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c8a:	bf00      	nop

08006c8c <__ulp>:
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8006c92:	400b      	ands	r3, r1
 8006c94:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	dd02      	ble.n	8006ca2 <__ulp+0x16>
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	4770      	bx	lr
 8006ca2:	425b      	negs	r3, r3
 8006ca4:	151b      	asrs	r3, r3, #20
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	2b13      	cmp	r3, #19
 8006caa:	dd0b      	ble.n	8006cc4 <__ulp+0x38>
 8006cac:	2b32      	cmp	r3, #50	; 0x32
 8006cae:	dd02      	ble.n	8006cb6 <__ulp+0x2a>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	4770      	bx	lr
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8006cbc:	fa12 f303 	lsls.w	r3, r2, r3
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	4770      	bx	lr
 8006cc4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006cc8:	fa52 f103 	asrs.w	r1, r2, r3
 8006ccc:	2000      	movs	r0, #0
 8006cce:	4770      	bx	lr

08006cd0 <__b2d>:
 8006cd0:	6902      	ldr	r2, [r0, #16]
 8006cd2:	3204      	adds	r2, #4
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8006cda:	4603      	mov	r3, r0
 8006cdc:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	460f      	mov	r7, r1
 8006ce4:	f103 0614 	add.w	r6, r3, #20
 8006ce8:	f7ff fda8 	bl	800683c <__hi0bits>
 8006cec:	f1c0 0320 	rsb	r3, r0, #32
 8006cf0:	280a      	cmp	r0, #10
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	4623      	mov	r3, r4
 8006cf6:	dc14      	bgt.n	8006d22 <__b2d+0x52>
 8006cf8:	f1c0 010b 	rsb	r1, r0, #11
 8006cfc:	fa35 f701 	lsrs.w	r7, r5, r1
 8006d00:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 8006d04:	42a6      	cmp	r6, r4
 8006d06:	f447 1340 	orr.w	r3, r7, #3145728	; 0x300000
 8006d0a:	d22e      	bcs.n	8006d6a <__b2d+0x9a>
 8006d0c:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006d10:	fa34 f101 	lsrs.w	r1, r4, r1
 8006d14:	3015      	adds	r0, #21
 8006d16:	4085      	lsls	r5, r0
 8006d18:	ea41 0205 	orr.w	r2, r1, r5
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	4619      	mov	r1, r3
 8006d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d22:	2100      	movs	r1, #0
 8006d24:	42a6      	cmp	r6, r4
 8006d26:	d202      	bcs.n	8006d2e <__b2d+0x5e>
 8006d28:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8006d2c:	3c04      	subs	r4, #4
 8006d2e:	f1b0 070b 	subs.w	r7, r0, #11
 8006d32:	bf02      	ittt	eq
 8006d34:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
 8006d38:	f445 1340 	orreq.w	r3, r5, #3145728	; 0x300000
 8006d3c:	460a      	moveq	r2, r1
 8006d3e:	d0ed      	beq.n	8006d1c <__b2d+0x4c>
 8006d40:	40bd      	lsls	r5, r7
 8006d42:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 8006d46:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 8006d4a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006d4e:	fa21 fc00 	lsr.w	ip, r1, r0
 8006d52:	42b4      	cmp	r4, r6
 8006d54:	ea45 030c 	orr.w	r3, r5, ip
 8006d58:	d909      	bls.n	8006d6e <__b2d+0x9e>
 8006d5a:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006d5e:	fa34 f000 	lsrs.w	r0, r4, r0
 8006d62:	40b9      	lsls	r1, r7
 8006d64:	ea40 0201 	orr.w	r2, r0, r1
 8006d68:	e7d8      	b.n	8006d1c <__b2d+0x4c>
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	e7d2      	b.n	8006d14 <__b2d+0x44>
 8006d6e:	2000      	movs	r0, #0
 8006d70:	e7f7      	b.n	8006d62 <__b2d+0x92>
 8006d72:	bf00      	nop

08006d74 <__d2b>:
 8006d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	461d      	mov	r5, r3
 8006d7e:	4614      	mov	r4, r2
 8006d80:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006d82:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006d84:	f7ff fc9a 	bl	80066bc <_Balloc>
 8006d88:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 8006d8c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d90:	f3c5 590a 	ubfx	r9, r5, #20, #11
 8006d94:	4680      	mov	r8, r0
 8006d96:	9301      	str	r3, [sp, #4]
 8006d98:	f1b9 0f00 	cmp.w	r9, #0
 8006d9c:	d002      	beq.n	8006da4 <__d2b+0x30>
 8006d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006da2:	9301      	str	r3, [sp, #4]
 8006da4:	2c00      	cmp	r4, #0
 8006da6:	d025      	beq.n	8006df4 <__d2b+0x80>
 8006da8:	a802      	add	r0, sp, #8
 8006daa:	f840 4d08 	str.w	r4, [r0, #-8]!
 8006dae:	4668      	mov	r0, sp
 8006db0:	f7ff fd62 	bl	8006878 <__lo0bits>
 8006db4:	9b01      	ldr	r3, [sp, #4]
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d132      	bne.n	8006e20 <__d2b+0xac>
 8006dba:	9a00      	ldr	r2, [sp, #0]
 8006dbc:	f8c8 2014 	str.w	r2, [r8, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	bf0c      	ite	eq
 8006dc4:	2401      	moveq	r4, #1
 8006dc6:	2402      	movne	r4, #2
 8006dc8:	f8c8 3018 	str.w	r3, [r8, #24]
 8006dcc:	f8c8 4010 	str.w	r4, [r8, #16]
 8006dd0:	f1b9 0f00 	cmp.w	r9, #0
 8006dd4:	d11b      	bne.n	8006e0e <__d2b+0x9a>
 8006dd6:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8006dda:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 8006dde:	6910      	ldr	r0, [r2, #16]
 8006de0:	603b      	str	r3, [r7, #0]
 8006de2:	f7ff fd2b 	bl	800683c <__hi0bits>
 8006de6:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8006dea:	6030      	str	r0, [r6, #0]
 8006dec:	4640      	mov	r0, r8
 8006dee:	b003      	add	sp, #12
 8006df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006df4:	a801      	add	r0, sp, #4
 8006df6:	f7ff fd3f 	bl	8006878 <__lo0bits>
 8006dfa:	9b01      	ldr	r3, [sp, #4]
 8006dfc:	2401      	movs	r4, #1
 8006dfe:	f8c8 3014 	str.w	r3, [r8, #20]
 8006e02:	f8c8 4010 	str.w	r4, [r8, #16]
 8006e06:	3020      	adds	r0, #32
 8006e08:	f1b9 0f00 	cmp.w	r9, #0
 8006e0c:	d0e3      	beq.n	8006dd6 <__d2b+0x62>
 8006e0e:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 8006e12:	eb09 0300 	add.w	r3, r9, r0
 8006e16:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	6030      	str	r0, [r6, #0]
 8006e1e:	e7e5      	b.n	8006dec <__d2b+0x78>
 8006e20:	f1c0 0220 	rsb	r2, r0, #32
 8006e24:	9900      	ldr	r1, [sp, #0]
 8006e26:	fa13 f202 	lsls.w	r2, r3, r2
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	40c3      	lsrs	r3, r0
 8006e2e:	f8c8 2014 	str.w	r2, [r8, #20]
 8006e32:	9301      	str	r3, [sp, #4]
 8006e34:	e7c4      	b.n	8006dc0 <__d2b+0x4c>
 8006e36:	bf00      	nop

08006e38 <__ratio>:
 8006e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	460d      	mov	r5, r1
 8006e40:	4669      	mov	r1, sp
 8006e42:	4604      	mov	r4, r0
 8006e44:	f7ff ff44 	bl	8006cd0 <__b2d>
 8006e48:	4689      	mov	r9, r1
 8006e4a:	4680      	mov	r8, r0
 8006e4c:	a901      	add	r1, sp, #4
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f7ff ff3e 	bl	8006cd0 <__b2d>
 8006e54:	460f      	mov	r7, r1
 8006e56:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8006e5a:	692a      	ldr	r2, [r5, #16]
 8006e5c:	6924      	ldr	r4, [r4, #16]
 8006e5e:	1acb      	subs	r3, r1, r3
 8006e60:	1aa4      	subs	r4, r4, r2
 8006e62:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8006e66:	2c00      	cmp	r4, #0
 8006e68:	4606      	mov	r6, r0
 8006e6a:	464b      	mov	r3, r9
 8006e6c:	4639      	mov	r1, r7
 8006e6e:	bfcb      	itete	gt
 8006e70:	eb09 5304 	addgt.w	r3, r9, r4, lsl #20
 8006e74:	eba7 5104 	suble.w	r1, r7, r4, lsl #20
 8006e78:	4699      	movgt	r9, r3
 8006e7a:	460f      	movle	r7, r1
 8006e7c:	bfcc      	ite	gt
 8006e7e:	46c0      	nopgt			; (mov r8, r8)
 8006e80:	4636      	movle	r6, r6
 8006e82:	4640      	mov	r0, r8
 8006e84:	4649      	mov	r1, r9
 8006e86:	4632      	mov	r2, r6
 8006e88:	463b      	mov	r3, r7
 8006e8a:	f001 fc53 	bl	8008734 <__aeabi_ddiv>
 8006e8e:	b003      	add	sp, #12
 8006e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006e94 <_mprec_log10>:
 8006e94:	b510      	push	{r4, lr}
 8006e96:	4604      	mov	r4, r0
 8006e98:	2100      	movs	r1, #0
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	2c17      	cmp	r4, #23
 8006e9e:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8006ea2:	dd08      	ble.n	8006eb6 <_mprec_log10+0x22>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006eac:	f001 fb18 	bl	80084e0 <__aeabi_dmul>
 8006eb0:	3c01      	subs	r4, #1
 8006eb2:	d1f7      	bne.n	8006ea4 <_mprec_log10+0x10>
 8006eb4:	bd10      	pop	{r4, pc}
 8006eb6:	4b03      	ldr	r3, [pc, #12]	; (8006ec4 <_mprec_log10+0x30>)
 8006eb8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006ebc:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8006ec0:	bd10      	pop	{r4, pc}
 8006ec2:	bf00      	nop
 8006ec4:	08008e90 	.word	0x08008e90

08006ec8 <__copybits>:
 8006ec8:	6913      	ldr	r3, [r2, #16]
 8006eca:	3901      	subs	r1, #1
 8006ecc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ed0:	1149      	asrs	r1, r1, #5
 8006ed2:	b470      	push	{r4, r5, r6}
 8006ed4:	3314      	adds	r3, #20
 8006ed6:	f102 0414 	add.w	r4, r2, #20
 8006eda:	3101      	adds	r1, #1
 8006edc:	429c      	cmp	r4, r3
 8006ede:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006ee2:	d20c      	bcs.n	8006efe <__copybits+0x36>
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	f854 6b04 	ldr.w	r6, [r4], #4
 8006eea:	42a3      	cmp	r3, r4
 8006eec:	f845 6b04 	str.w	r6, [r5], #4
 8006ef0:	d8f9      	bhi.n	8006ee6 <__copybits+0x1e>
 8006ef2:	1a9b      	subs	r3, r3, r2
 8006ef4:	3b15      	subs	r3, #21
 8006ef6:	f023 0303 	bic.w	r3, r3, #3
 8006efa:	3304      	adds	r3, #4
 8006efc:	18c0      	adds	r0, r0, r3
 8006efe:	4281      	cmp	r1, r0
 8006f00:	d904      	bls.n	8006f0c <__copybits+0x44>
 8006f02:	2300      	movs	r3, #0
 8006f04:	f840 3b04 	str.w	r3, [r0], #4
 8006f08:	4281      	cmp	r1, r0
 8006f0a:	d8fb      	bhi.n	8006f04 <__copybits+0x3c>
 8006f0c:	bc70      	pop	{r4, r5, r6}
 8006f0e:	4770      	bx	lr

08006f10 <__any_on>:
 8006f10:	6902      	ldr	r2, [r0, #16]
 8006f12:	114b      	asrs	r3, r1, #5
 8006f14:	429a      	cmp	r2, r3
 8006f16:	b410      	push	{r4}
 8006f18:	db01      	blt.n	8006f1e <__any_on+0xe>
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	dc13      	bgt.n	8006f46 <__any_on+0x36>
 8006f1e:	3204      	adds	r2, #4
 8006f20:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006f24:	f100 0114 	add.w	r1, r0, #20
 8006f28:	1d1c      	adds	r4, r3, #4
 8006f2a:	42a1      	cmp	r1, r4
 8006f2c:	d218      	bcs.n	8006f60 <__any_on+0x50>
 8006f2e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8006f32:	b92a      	cbnz	r2, 8006f40 <__any_on+0x30>
 8006f34:	4299      	cmp	r1, r3
 8006f36:	d213      	bcs.n	8006f60 <__any_on+0x50>
 8006f38:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006f3c:	2a00      	cmp	r2, #0
 8006f3e:	d0f9      	beq.n	8006f34 <__any_on+0x24>
 8006f40:	2001      	movs	r0, #1
 8006f42:	bc10      	pop	{r4}
 8006f44:	4770      	bx	lr
 8006f46:	f011 011f 	ands.w	r1, r1, #31
 8006f4a:	d0e8      	beq.n	8006f1e <__any_on+0xe>
 8006f4c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	fa33 f401 	lsrs.w	r4, r3, r1
 8006f56:	fa14 f101 	lsls.w	r1, r4, r1
 8006f5a:	4299      	cmp	r1, r3
 8006f5c:	d1f0      	bne.n	8006f40 <__any_on+0x30>
 8006f5e:	e7de      	b.n	8006f1e <__any_on+0xe>
 8006f60:	2000      	movs	r0, #0
 8006f62:	e7ee      	b.n	8006f42 <__any_on+0x32>

08006f64 <__fpclassifyd>:
 8006f64:	ea50 0201 	orrs.w	r2, r0, r1
 8006f68:	b410      	push	{r4}
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	d102      	bne.n	8006f74 <__fpclassifyd+0x10>
 8006f6e:	2002      	movs	r0, #2
 8006f70:	bc10      	pop	{r4}
 8006f72:	4770      	bx	lr
 8006f74:	f1d0 0101 	rsbs	r1, r0, #1
 8006f78:	bf38      	it	cc
 8006f7a:	2100      	movcc	r1, #0
 8006f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f80:	bf08      	it	eq
 8006f82:	2800      	cmpeq	r0, #0
 8006f84:	d0f3      	beq.n	8006f6e <__fpclassifyd+0xa>
 8006f86:	f103 44ff 	add.w	r4, r3, #2139095040	; 0x7f800000
 8006f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f8e:	f504 04e0 	add.w	r4, r4, #7340032	; 0x700000
 8006f92:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 8006f96:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 8006f9a:	4290      	cmp	r0, r2
 8006f9c:	bf88      	it	hi
 8006f9e:	4294      	cmphi	r4, r2
 8006fa0:	d801      	bhi.n	8006fa6 <__fpclassifyd+0x42>
 8006fa2:	2004      	movs	r0, #4
 8006fa4:	e7e4      	b.n	8006f70 <__fpclassifyd+0xc>
 8006fa6:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8006faa:	2003      	movs	r0, #3
 8006fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fb0:	bf28      	it	cs
 8006fb2:	f5b2 1f80 	cmpcs.w	r2, #1048576	; 0x100000
 8006fb6:	d3db      	bcc.n	8006f70 <__fpclassifyd+0xc>
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8006fbe:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8006fc2:	bf18      	it	ne
 8006fc4:	4293      	cmpne	r3, r2
 8006fc6:	bf14      	ite	ne
 8006fc8:	2300      	movne	r3, #0
 8006fca:	2301      	moveq	r3, #1
 8006fcc:	ea01 0003 	and.w	r0, r1, r3
 8006fd0:	e7ce      	b.n	8006f70 <__fpclassifyd+0xc>
 8006fd2:	bf00      	nop

08006fd4 <_sbrk_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	4c07      	ldr	r4, [pc, #28]	; (8006ff4 <_sbrk_r+0x20>)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	4605      	mov	r5, r0
 8006fdc:	4608      	mov	r0, r1
 8006fde:	6023      	str	r3, [r4, #0]
 8006fe0:	f7fc fbde 	bl	80037a0 <_sbrk>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	d000      	beq.n	8006fea <_sbrk_r+0x16>
 8006fe8:	bd38      	pop	{r3, r4, r5, pc}
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d0fb      	beq.n	8006fe8 <_sbrk_r+0x14>
 8006ff0:	602b      	str	r3, [r5, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	200015fc 	.word	0x200015fc

08006ff8 <strcmp>:
 8006ff8:	ea80 0201 	eor.w	r2, r0, r1
 8006ffc:	f012 0f03 	tst.w	r2, #3
 8007000:	d13a      	bne.n	8007078 <strcmp_unaligned>
 8007002:	f010 0203 	ands.w	r2, r0, #3
 8007006:	f020 0003 	bic.w	r0, r0, #3
 800700a:	f021 0103 	bic.w	r1, r1, #3
 800700e:	f850 cb04 	ldr.w	ip, [r0], #4
 8007012:	bf08      	it	eq
 8007014:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007018:	d00d      	beq.n	8007036 <strcmp+0x3e>
 800701a:	f082 0203 	eor.w	r2, r2, #3
 800701e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007022:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007026:	fa23 f202 	lsr.w	r2, r3, r2
 800702a:	f851 3b04 	ldr.w	r3, [r1], #4
 800702e:	ea4c 0c02 	orr.w	ip, ip, r2
 8007032:	ea43 0302 	orr.w	r3, r3, r2
 8007036:	bf00      	nop
 8007038:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 800703c:	459c      	cmp	ip, r3
 800703e:	bf01      	itttt	eq
 8007040:	ea22 020c 	biceq.w	r2, r2, ip
 8007044:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8007048:	f850 cb04 	ldreq.w	ip, [r0], #4
 800704c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007050:	d0f2      	beq.n	8007038 <strcmp+0x40>
 8007052:	ea4f 600c 	mov.w	r0, ip, lsl #24
 8007056:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800705a:	2801      	cmp	r0, #1
 800705c:	bf28      	it	cs
 800705e:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8007062:	bf08      	it	eq
 8007064:	0a1b      	lsreq	r3, r3, #8
 8007066:	d0f4      	beq.n	8007052 <strcmp+0x5a>
 8007068:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800706c:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8007070:	eba0 0003 	sub.w	r0, r0, r3
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop

08007078 <strcmp_unaligned>:
 8007078:	f010 0f03 	tst.w	r0, #3
 800707c:	d00a      	beq.n	8007094 <strcmp_unaligned+0x1c>
 800707e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007082:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007086:	2a01      	cmp	r2, #1
 8007088:	bf28      	it	cs
 800708a:	429a      	cmpcs	r2, r3
 800708c:	d0f4      	beq.n	8007078 <strcmp_unaligned>
 800708e:	eba2 0003 	sub.w	r0, r2, r3
 8007092:	4770      	bx	lr
 8007094:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8007098:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800709c:	f04f 0201 	mov.w	r2, #1
 80070a0:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 80070a4:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 80070a8:	f001 0c03 	and.w	ip, r1, #3
 80070ac:	f021 0103 	bic.w	r1, r1, #3
 80070b0:	f850 4b04 	ldr.w	r4, [r0], #4
 80070b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80070b8:	f1bc 0f02 	cmp.w	ip, #2
 80070bc:	d026      	beq.n	800710c <strcmp_unaligned+0x94>
 80070be:	d84b      	bhi.n	8007158 <strcmp_unaligned+0xe0>
 80070c0:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 80070c4:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 80070c8:	eba4 0302 	sub.w	r3, r4, r2
 80070cc:	ea23 0304 	bic.w	r3, r3, r4
 80070d0:	d10d      	bne.n	80070ee <strcmp_unaligned+0x76>
 80070d2:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 80070d6:	bf08      	it	eq
 80070d8:	f851 5b04 	ldreq.w	r5, [r1], #4
 80070dc:	d10a      	bne.n	80070f4 <strcmp_unaligned+0x7c>
 80070de:	ea8c 0c04 	eor.w	ip, ip, r4
 80070e2:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 80070e6:	d10c      	bne.n	8007102 <strcmp_unaligned+0x8a>
 80070e8:	f850 4b04 	ldr.w	r4, [r0], #4
 80070ec:	e7e8      	b.n	80070c0 <strcmp_unaligned+0x48>
 80070ee:	ea4f 2515 	mov.w	r5, r5, lsr #8
 80070f2:	e05c      	b.n	80071ae <strcmp_unaligned+0x136>
 80070f4:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 80070f8:	d152      	bne.n	80071a0 <strcmp_unaligned+0x128>
 80070fa:	780d      	ldrb	r5, [r1, #0]
 80070fc:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8007100:	e055      	b.n	80071ae <strcmp_unaligned+0x136>
 8007102:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8007106:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 800710a:	e050      	b.n	80071ae <strcmp_unaligned+0x136>
 800710c:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8007110:	eba4 0302 	sub.w	r3, r4, r2
 8007114:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007118:	ea23 0304 	bic.w	r3, r3, r4
 800711c:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8007120:	d117      	bne.n	8007152 <strcmp_unaligned+0xda>
 8007122:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8007126:	bf08      	it	eq
 8007128:	f851 5b04 	ldreq.w	r5, [r1], #4
 800712c:	d107      	bne.n	800713e <strcmp_unaligned+0xc6>
 800712e:	ea8c 0c04 	eor.w	ip, ip, r4
 8007132:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 8007136:	d108      	bne.n	800714a <strcmp_unaligned+0xd2>
 8007138:	f850 4b04 	ldr.w	r4, [r0], #4
 800713c:	e7e6      	b.n	800710c <strcmp_unaligned+0x94>
 800713e:	041b      	lsls	r3, r3, #16
 8007140:	d12e      	bne.n	80071a0 <strcmp_unaligned+0x128>
 8007142:	880d      	ldrh	r5, [r1, #0]
 8007144:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007148:	e031      	b.n	80071ae <strcmp_unaligned+0x136>
 800714a:	ea4f 4505 	mov.w	r5, r5, lsl #16
 800714e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007152:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8007156:	e02a      	b.n	80071ae <strcmp_unaligned+0x136>
 8007158:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 800715c:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8007160:	eba4 0302 	sub.w	r3, r4, r2
 8007164:	ea23 0304 	bic.w	r3, r3, r4
 8007168:	d10d      	bne.n	8007186 <strcmp_unaligned+0x10e>
 800716a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800716e:	bf08      	it	eq
 8007170:	f851 5b04 	ldreq.w	r5, [r1], #4
 8007174:	d10a      	bne.n	800718c <strcmp_unaligned+0x114>
 8007176:	ea8c 0c04 	eor.w	ip, ip, r4
 800717a:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 800717e:	d10a      	bne.n	8007196 <strcmp_unaligned+0x11e>
 8007180:	f850 4b04 	ldr.w	r4, [r0], #4
 8007184:	e7e8      	b.n	8007158 <strcmp_unaligned+0xe0>
 8007186:	ea4f 6515 	mov.w	r5, r5, lsr #24
 800718a:	e010      	b.n	80071ae <strcmp_unaligned+0x136>
 800718c:	f014 0fff 	tst.w	r4, #255	; 0xff
 8007190:	d006      	beq.n	80071a0 <strcmp_unaligned+0x128>
 8007192:	f851 5b04 	ldr.w	r5, [r1], #4
 8007196:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 800719a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800719e:	e006      	b.n	80071ae <strcmp_unaligned+0x136>
 80071a0:	f04f 0000 	mov.w	r0, #0
 80071a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071a8:	f85d 5b04 	ldr.w	r5, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 80071b2:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 80071b6:	2801      	cmp	r0, #1
 80071b8:	bf28      	it	cs
 80071ba:	4290      	cmpcs	r0, r2
 80071bc:	bf04      	itt	eq
 80071be:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 80071c2:	0a2d      	lsreq	r5, r5, #8
 80071c4:	d0f3      	beq.n	80071ae <strcmp_unaligned+0x136>
 80071c6:	eba2 0000 	sub.w	r0, r2, r0
 80071ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071ce:	f85d 5b04 	ldr.w	r5, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <strlen>:
 80071d4:	f020 0103 	bic.w	r1, r0, #3
 80071d8:	f010 0003 	ands.w	r0, r0, #3
 80071dc:	f1c0 0000 	rsb	r0, r0, #0
 80071e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80071e4:	f100 0c04 	add.w	ip, r0, #4
 80071e8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80071ec:	f06f 0200 	mvn.w	r2, #0
 80071f0:	bf1c      	itt	ne
 80071f2:	fa22 f20c 	lsrne.w	r2, r2, ip
 80071f6:	4313      	orrne	r3, r2
 80071f8:	f04f 0c01 	mov.w	ip, #1
 80071fc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8007200:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8007204:	eba3 020c 	sub.w	r2, r3, ip
 8007208:	ea22 0203 	bic.w	r2, r2, r3
 800720c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8007210:	bf04      	itt	eq
 8007212:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007216:	3004      	addeq	r0, #4
 8007218:	d0f4      	beq.n	8007204 <strlen+0x30>
 800721a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800721e:	bf1f      	itttt	ne
 8007220:	3001      	addne	r0, #1
 8007222:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8007226:	3001      	addne	r0, #1
 8007228:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 800722c:	bf18      	it	ne
 800722e:	3001      	addne	r0, #1
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop

08007234 <__ssprint_r>:
 8007234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007238:	b083      	sub	sp, #12
 800723a:	4691      	mov	r9, r2
 800723c:	9001      	str	r0, [sp, #4]
 800723e:	6890      	ldr	r0, [r2, #8]
 8007240:	6817      	ldr	r7, [r2, #0]
 8007242:	460d      	mov	r5, r1
 8007244:	2800      	cmp	r0, #0
 8007246:	d072      	beq.n	800732e <__ssprint_r+0xfa>
 8007248:	f04f 0a00 	mov.w	sl, #0
 800724c:	6808      	ldr	r0, [r1, #0]
 800724e:	688b      	ldr	r3, [r1, #8]
 8007250:	4654      	mov	r4, sl
 8007252:	2c00      	cmp	r4, #0
 8007254:	d048      	beq.n	80072e8 <__ssprint_r+0xb4>
 8007256:	429c      	cmp	r4, r3
 8007258:	461e      	mov	r6, r3
 800725a:	4698      	mov	r8, r3
 800725c:	bf3c      	itt	cc
 800725e:	4626      	movcc	r6, r4
 8007260:	46a0      	movcc	r8, r4
 8007262:	d331      	bcc.n	80072c8 <__ssprint_r+0x94>
 8007264:	89ab      	ldrh	r3, [r5, #12]
 8007266:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800726a:	d02d      	beq.n	80072c8 <__ssprint_r+0x94>
 800726c:	696e      	ldr	r6, [r5, #20]
 800726e:	6929      	ldr	r1, [r5, #16]
 8007270:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8007274:	ebc1 0800 	rsb	r8, r1, r0
 8007278:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800727c:	1c60      	adds	r0, r4, #1
 800727e:	1076      	asrs	r6, r6, #1
 8007280:	4440      	add	r0, r8
 8007282:	4286      	cmp	r6, r0
 8007284:	4632      	mov	r2, r6
 8007286:	bf3c      	itt	cc
 8007288:	4606      	movcc	r6, r0
 800728a:	4632      	movcc	r2, r6
 800728c:	055b      	lsls	r3, r3, #21
 800728e:	9801      	ldr	r0, [sp, #4]
 8007290:	d52f      	bpl.n	80072f2 <__ssprint_r+0xbe>
 8007292:	4611      	mov	r1, r2
 8007294:	f7fe fed8 	bl	8006048 <_malloc_r>
 8007298:	4683      	mov	fp, r0
 800729a:	2800      	cmp	r0, #0
 800729c:	d032      	beq.n	8007304 <__ssprint_r+0xd0>
 800729e:	6929      	ldr	r1, [r5, #16]
 80072a0:	4642      	mov	r2, r8
 80072a2:	f7ff f9c3 	bl	800662c <memcpy>
 80072a6:	89ab      	ldrh	r3, [r5, #12]
 80072a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b0:	81ab      	strh	r3, [r5, #12]
 80072b2:	ebc8 0306 	rsb	r3, r8, r6
 80072b6:	eb0b 0008 	add.w	r0, fp, r8
 80072ba:	616e      	str	r6, [r5, #20]
 80072bc:	f8c5 b010 	str.w	fp, [r5, #16]
 80072c0:	6028      	str	r0, [r5, #0]
 80072c2:	4626      	mov	r6, r4
 80072c4:	60ab      	str	r3, [r5, #8]
 80072c6:	46a0      	mov	r8, r4
 80072c8:	4642      	mov	r2, r8
 80072ca:	4651      	mov	r1, sl
 80072cc:	f000 fcb8 	bl	8007c40 <memmove>
 80072d0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80072d4:	68ab      	ldr	r3, [r5, #8]
 80072d6:	6828      	ldr	r0, [r5, #0]
 80072d8:	1b9b      	subs	r3, r3, r6
 80072da:	4440      	add	r0, r8
 80072dc:	1b14      	subs	r4, r2, r4
 80072de:	60ab      	str	r3, [r5, #8]
 80072e0:	6028      	str	r0, [r5, #0]
 80072e2:	f8c9 4008 	str.w	r4, [r9, #8]
 80072e6:	b1e4      	cbz	r4, 8007322 <__ssprint_r+0xee>
 80072e8:	f8d7 a000 	ldr.w	sl, [r7]
 80072ec:	687c      	ldr	r4, [r7, #4]
 80072ee:	3708      	adds	r7, #8
 80072f0:	e7af      	b.n	8007252 <__ssprint_r+0x1e>
 80072f2:	f000 fd47 	bl	8007d84 <_realloc_r>
 80072f6:	4683      	mov	fp, r0
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d1da      	bne.n	80072b2 <__ssprint_r+0x7e>
 80072fc:	9801      	ldr	r0, [sp, #4]
 80072fe:	6929      	ldr	r1, [r5, #16]
 8007300:	f7fe fd96 	bl	8005e30 <_free_r>
 8007304:	9a01      	ldr	r2, [sp, #4]
 8007306:	230c      	movs	r3, #12
 8007308:	6013      	str	r3, [r2, #0]
 800730a:	89aa      	ldrh	r2, [r5, #12]
 800730c:	2300      	movs	r3, #0
 800730e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007312:	81aa      	strh	r2, [r5, #12]
 8007314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007318:	f8c9 3008 	str.w	r3, [r9, #8]
 800731c:	f8c9 3004 	str.w	r3, [r9, #4]
 8007320:	e002      	b.n	8007328 <__ssprint_r+0xf4>
 8007322:	f8c9 4004 	str.w	r4, [r9, #4]
 8007326:	4620      	mov	r0, r4
 8007328:	b003      	add	sp, #12
 800732a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800732e:	6050      	str	r0, [r2, #4]
 8007330:	e7fa      	b.n	8007328 <__ssprint_r+0xf4>
 8007332:	bf00      	nop

08007334 <_svfiprintf_r>:
 8007334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007338:	468a      	mov	sl, r1
 800733a:	8989      	ldrh	r1, [r1, #12]
 800733c:	b0ad      	sub	sp, #180	; 0xb4
 800733e:	0609      	lsls	r1, r1, #24
 8007340:	9007      	str	r0, [sp, #28]
 8007342:	9305      	str	r3, [sp, #20]
 8007344:	d504      	bpl.n	8007350 <_svfiprintf_r+0x1c>
 8007346:	f8da 3010 	ldr.w	r3, [sl, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 8422 	beq.w	8007b94 <_svfiprintf_r+0x860>
 8007350:	2300      	movs	r3, #0
 8007352:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8007356:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 800735a:	a90e      	add	r1, sp, #56	; 0x38
 800735c:	930c      	str	r3, [sp, #48]	; 0x30
 800735e:	932a      	str	r3, [sp, #168]	; 0xa8
 8007360:	9329      	str	r3, [sp, #164]	; 0xa4
 8007362:	9304      	str	r3, [sp, #16]
 8007364:	ebc0 0308 	rsb	r3, r0, r8
 8007368:	9001      	str	r0, [sp, #4]
 800736a:	9128      	str	r1, [sp, #160]	; 0xa0
 800736c:	4617      	mov	r7, r2
 800736e:	460c      	mov	r4, r1
 8007370:	930d      	str	r3, [sp, #52]	; 0x34
 8007372:	783b      	ldrb	r3, [r7, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	bf18      	it	ne
 8007378:	2b25      	cmpne	r3, #37	; 0x25
 800737a:	463d      	mov	r5, r7
 800737c:	d016      	beq.n	80073ac <_svfiprintf_r+0x78>
 800737e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8007382:	2b25      	cmp	r3, #37	; 0x25
 8007384:	bf18      	it	ne
 8007386:	2b00      	cmpne	r3, #0
 8007388:	d1f9      	bne.n	800737e <_svfiprintf_r+0x4a>
 800738a:	1bee      	subs	r6, r5, r7
 800738c:	d00e      	beq.n	80073ac <_svfiprintf_r+0x78>
 800738e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007390:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007392:	6027      	str	r7, [r4, #0]
 8007394:	3301      	adds	r3, #1
 8007396:	1992      	adds	r2, r2, r6
 8007398:	2b07      	cmp	r3, #7
 800739a:	6066      	str	r6, [r4, #4]
 800739c:	922a      	str	r2, [sp, #168]	; 0xa8
 800739e:	9329      	str	r3, [sp, #164]	; 0xa4
 80073a0:	f300 832a 	bgt.w	80079f8 <_svfiprintf_r+0x6c4>
 80073a4:	3408      	adds	r4, #8
 80073a6:	9b04      	ldr	r3, [sp, #16]
 80073a8:	199b      	adds	r3, r3, r6
 80073aa:	9304      	str	r3, [sp, #16]
 80073ac:	782b      	ldrb	r3, [r5, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 82c5 	beq.w	800793e <_svfiprintf_r+0x60a>
 80073b4:	2200      	movs	r2, #0
 80073b6:	1c6f      	adds	r7, r5, #1
 80073b8:	4613      	mov	r3, r2
 80073ba:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 80073be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80073c2:	9206      	str	r2, [sp, #24]
 80073c4:	4693      	mov	fp, r2
 80073c6:	f817 2b01 	ldrb.w	r2, [r7], #1
 80073ca:	f1a2 0120 	sub.w	r1, r2, #32
 80073ce:	2958      	cmp	r1, #88	; 0x58
 80073d0:	f200 8178 	bhi.w	80076c4 <_svfiprintf_r+0x390>
 80073d4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80073d8:	01760172 	.word	0x01760172
 80073dc:	016f0176 	.word	0x016f0176
 80073e0:	01760176 	.word	0x01760176
 80073e4:	01760176 	.word	0x01760176
 80073e8:	01760176 	.word	0x01760176
 80073ec:	01d800af 	.word	0x01d800af
 80073f0:	00ba0176 	.word	0x00ba0176
 80073f4:	017601da 	.word	0x017601da
 80073f8:	01c401d5 	.word	0x01c401d5
 80073fc:	01c401c4 	.word	0x01c401c4
 8007400:	01c401c4 	.word	0x01c401c4
 8007404:	01c401c4 	.word	0x01c401c4
 8007408:	01c401c4 	.word	0x01c401c4
 800740c:	01760176 	.word	0x01760176
 8007410:	01760176 	.word	0x01760176
 8007414:	01760176 	.word	0x01760176
 8007418:	01760176 	.word	0x01760176
 800741c:	01760176 	.word	0x01760176
 8007420:	017601a7 	.word	0x017601a7
 8007424:	01760176 	.word	0x01760176
 8007428:	01760176 	.word	0x01760176
 800742c:	01760176 	.word	0x01760176
 8007430:	01760176 	.word	0x01760176
 8007434:	005c0176 	.word	0x005c0176
 8007438:	01760176 	.word	0x01760176
 800743c:	01760176 	.word	0x01760176
 8007440:	00a00176 	.word	0x00a00176
 8007444:	01760176 	.word	0x01760176
 8007448:	0176016a 	.word	0x0176016a
 800744c:	01760176 	.word	0x01760176
 8007450:	01760176 	.word	0x01760176
 8007454:	01760176 	.word	0x01760176
 8007458:	01760176 	.word	0x01760176
 800745c:	01170176 	.word	0x01170176
 8007460:	01760105 	.word	0x01760105
 8007464:	01760176 	.word	0x01760176
 8007468:	01050102 	.word	0x01050102
 800746c:	01760176 	.word	0x01760176
 8007470:	01760059 	.word	0x01760059
 8007474:	005e00d1 	.word	0x005e00d1
 8007478:	005900bd 	.word	0x005900bd
 800747c:	01870176 	.word	0x01870176
 8007480:	00a20176 	.word	0x00a20176
 8007484:	01760176 	.word	0x01760176
 8007488:	00e2      	.short	0x00e2
 800748a:	f04b 0b10 	orr.w	fp, fp, #16
 800748e:	e79a      	b.n	80073c6 <_svfiprintf_r+0x92>
 8007490:	f04b 0b10 	orr.w	fp, fp, #16
 8007494:	f01b 0210 	ands.w	r2, fp, #16
 8007498:	f000 8313 	beq.w	8007ac2 <_svfiprintf_r+0x78e>
 800749c:	9805      	ldr	r0, [sp, #20]
 800749e:	6803      	ldr	r3, [r0, #0]
 80074a0:	2200      	movs	r2, #0
 80074a2:	1a99      	subs	r1, r3, r2
 80074a4:	bf18      	it	ne
 80074a6:	2101      	movne	r1, #1
 80074a8:	3004      	adds	r0, #4
 80074aa:	9005      	str	r0, [sp, #20]
 80074ac:	2000      	movs	r0, #0
 80074ae:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 80074b2:	2d00      	cmp	r5, #0
 80074b4:	bfa8      	it	ge
 80074b6:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 80074ba:	2d00      	cmp	r5, #0
 80074bc:	bf18      	it	ne
 80074be:	f041 0101 	orrne.w	r1, r1, #1
 80074c2:	2900      	cmp	r1, #0
 80074c4:	f000 8228 	beq.w	8007918 <_svfiprintf_r+0x5e4>
 80074c8:	2a01      	cmp	r2, #1
 80074ca:	f000 82cf 	beq.w	8007a6c <_svfiprintf_r+0x738>
 80074ce:	2a02      	cmp	r2, #2
 80074d0:	bf18      	it	ne
 80074d2:	4642      	movne	r2, r8
 80074d4:	d101      	bne.n	80074da <_svfiprintf_r+0x1a6>
 80074d6:	e2b9      	b.n	8007a4c <_svfiprintf_r+0x718>
 80074d8:	4602      	mov	r2, r0
 80074da:	f003 0107 	and.w	r1, r3, #7
 80074de:	3130      	adds	r1, #48	; 0x30
 80074e0:	1e50      	subs	r0, r2, #1
 80074e2:	08db      	lsrs	r3, r3, #3
 80074e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80074e8:	d1f6      	bne.n	80074d8 <_svfiprintf_r+0x1a4>
 80074ea:	f01b 0f01 	tst.w	fp, #1
 80074ee:	9009      	str	r0, [sp, #36]	; 0x24
 80074f0:	f040 831a 	bne.w	8007b28 <_svfiprintf_r+0x7f4>
 80074f4:	ebc0 0308 	rsb	r3, r0, r8
 80074f8:	9303      	str	r3, [sp, #12]
 80074fa:	9508      	str	r5, [sp, #32]
 80074fc:	9803      	ldr	r0, [sp, #12]
 80074fe:	9908      	ldr	r1, [sp, #32]
 8007500:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 8007504:	4288      	cmp	r0, r1
 8007506:	bfb8      	it	lt
 8007508:	4608      	movlt	r0, r1
 800750a:	9002      	str	r0, [sp, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 808b 	beq.w	8007628 <_svfiprintf_r+0x2f4>
 8007512:	3001      	adds	r0, #1
 8007514:	9002      	str	r0, [sp, #8]
 8007516:	e087      	b.n	8007628 <_svfiprintf_r+0x2f4>
 8007518:	f04b 0b10 	orr.w	fp, fp, #16
 800751c:	f01b 0f10 	tst.w	fp, #16
 8007520:	f000 82c1 	beq.w	8007aa6 <_svfiprintf_r+0x772>
 8007524:	9805      	ldr	r0, [sp, #20]
 8007526:	6803      	ldr	r3, [r0, #0]
 8007528:	2201      	movs	r2, #1
 800752a:	1c19      	adds	r1, r3, #0
 800752c:	bf18      	it	ne
 800752e:	2101      	movne	r1, #1
 8007530:	3004      	adds	r0, #4
 8007532:	9005      	str	r0, [sp, #20]
 8007534:	e7ba      	b.n	80074ac <_svfiprintf_r+0x178>
 8007536:	9805      	ldr	r0, [sp, #20]
 8007538:	9905      	ldr	r1, [sp, #20]
 800753a:	6800      	ldr	r0, [r0, #0]
 800753c:	1d0a      	adds	r2, r1, #4
 800753e:	2800      	cmp	r0, #0
 8007540:	9006      	str	r0, [sp, #24]
 8007542:	f280 82e0 	bge.w	8007b06 <_svfiprintf_r+0x7d2>
 8007546:	4240      	negs	r0, r0
 8007548:	9006      	str	r0, [sp, #24]
 800754a:	9205      	str	r2, [sp, #20]
 800754c:	f04b 0b04 	orr.w	fp, fp, #4
 8007550:	e739      	b.n	80073c6 <_svfiprintf_r+0x92>
 8007552:	9b05      	ldr	r3, [sp, #20]
 8007554:	9905      	ldr	r1, [sp, #20]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2230      	movs	r2, #48	; 0x30
 800755a:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 800755e:	2278      	movs	r2, #120	; 0x78
 8007560:	3104      	adds	r1, #4
 8007562:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 8007566:	4aaf      	ldr	r2, [pc, #700]	; (8007824 <_svfiprintf_r+0x4f0>)
 8007568:	9105      	str	r1, [sp, #20]
 800756a:	1c19      	adds	r1, r3, #0
 800756c:	bf18      	it	ne
 800756e:	2101      	movne	r1, #1
 8007570:	920c      	str	r2, [sp, #48]	; 0x30
 8007572:	f04b 0b02 	orr.w	fp, fp, #2
 8007576:	2202      	movs	r2, #2
 8007578:	e798      	b.n	80074ac <_svfiprintf_r+0x178>
 800757a:	f01b 0f10 	tst.w	fp, #16
 800757e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007582:	f040 82dd 	bne.w	8007b40 <_svfiprintf_r+0x80c>
 8007586:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800758a:	f000 82fb 	beq.w	8007b84 <_svfiprintf_r+0x850>
 800758e:	9a05      	ldr	r2, [sp, #20]
 8007590:	9804      	ldr	r0, [sp, #16]
 8007592:	6813      	ldr	r3, [r2, #0]
 8007594:	3204      	adds	r2, #4
 8007596:	9205      	str	r2, [sp, #20]
 8007598:	8018      	strh	r0, [r3, #0]
 800759a:	e6ea      	b.n	8007372 <_svfiprintf_r+0x3e>
 800759c:	49a1      	ldr	r1, [pc, #644]	; (8007824 <_svfiprintf_r+0x4f0>)
 800759e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80075a2:	910c      	str	r1, [sp, #48]	; 0x30
 80075a4:	f01b 0f10 	tst.w	fp, #16
 80075a8:	d103      	bne.n	80075b2 <_svfiprintf_r+0x27e>
 80075aa:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80075ae:	f040 82d3 	bne.w	8007b58 <_svfiprintf_r+0x824>
 80075b2:	9805      	ldr	r0, [sp, #20]
 80075b4:	6803      	ldr	r3, [r0, #0]
 80075b6:	3004      	adds	r0, #4
 80075b8:	9005      	str	r0, [sp, #20]
 80075ba:	1c19      	adds	r1, r3, #0
 80075bc:	bf18      	it	ne
 80075be:	2101      	movne	r1, #1
 80075c0:	ea1b 0f01 	tst.w	fp, r1
 80075c4:	f000 8287 	beq.w	8007ad6 <_svfiprintf_r+0x7a2>
 80075c8:	2130      	movs	r1, #48	; 0x30
 80075ca:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 80075ce:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 80075d2:	f04b 0b02 	orr.w	fp, fp, #2
 80075d6:	2101      	movs	r1, #1
 80075d8:	2202      	movs	r2, #2
 80075da:	e767      	b.n	80074ac <_svfiprintf_r+0x178>
 80075dc:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 80075e0:	e6f1      	b.n	80073c6 <_svfiprintf_r+0x92>
 80075e2:	f01b 0f10 	tst.w	fp, #16
 80075e6:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80075ea:	f000 80a4 	beq.w	8007736 <_svfiprintf_r+0x402>
 80075ee:	9805      	ldr	r0, [sp, #20]
 80075f0:	6803      	ldr	r3, [r0, #0]
 80075f2:	3004      	adds	r0, #4
 80075f4:	9005      	str	r0, [sp, #20]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f2c0 80a9 	blt.w	800774e <_svfiprintf_r+0x41a>
 80075fc:	bf0c      	ite	eq
 80075fe:	2100      	moveq	r1, #0
 8007600:	2101      	movne	r1, #1
 8007602:	2201      	movs	r2, #1
 8007604:	e755      	b.n	80074b2 <_svfiprintf_r+0x17e>
 8007606:	9b05      	ldr	r3, [sp, #20]
 8007608:	9905      	ldr	r1, [sp, #20]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2001      	movs	r0, #1
 800760e:	2200      	movs	r2, #0
 8007610:	3104      	adds	r1, #4
 8007612:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 8007616:	ab1e      	add	r3, sp, #120	; 0x78
 8007618:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 800761c:	9002      	str	r0, [sp, #8]
 800761e:	9105      	str	r1, [sp, #20]
 8007620:	9003      	str	r0, [sp, #12]
 8007622:	9309      	str	r3, [sp, #36]	; 0x24
 8007624:	2300      	movs	r3, #0
 8007626:	9308      	str	r3, [sp, #32]
 8007628:	f01b 0302 	ands.w	r3, fp, #2
 800762c:	930a      	str	r3, [sp, #40]	; 0x28
 800762e:	d002      	beq.n	8007636 <_svfiprintf_r+0x302>
 8007630:	9b02      	ldr	r3, [sp, #8]
 8007632:	3302      	adds	r3, #2
 8007634:	9302      	str	r3, [sp, #8]
 8007636:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800763a:	930b      	str	r3, [sp, #44]	; 0x2c
 800763c:	f040 80c1 	bne.w	80077c2 <_svfiprintf_r+0x48e>
 8007640:	9b06      	ldr	r3, [sp, #24]
 8007642:	9802      	ldr	r0, [sp, #8]
 8007644:	1a1d      	subs	r5, r3, r0
 8007646:	2d00      	cmp	r5, #0
 8007648:	f340 80bb 	ble.w	80077c2 <_svfiprintf_r+0x48e>
 800764c:	2d10      	cmp	r5, #16
 800764e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007650:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007652:	4e75      	ldr	r6, [pc, #468]	; (8007828 <_svfiprintf_r+0x4f4>)
 8007654:	dd1f      	ble.n	8007696 <_svfiprintf_r+0x362>
 8007656:	4621      	mov	r1, r4
 8007658:	f04f 0910 	mov.w	r9, #16
 800765c:	9c07      	ldr	r4, [sp, #28]
 800765e:	e002      	b.n	8007666 <_svfiprintf_r+0x332>
 8007660:	3d10      	subs	r5, #16
 8007662:	2d10      	cmp	r5, #16
 8007664:	dd16      	ble.n	8007694 <_svfiprintf_r+0x360>
 8007666:	3301      	adds	r3, #1
 8007668:	3210      	adds	r2, #16
 800766a:	e881 0240 	stmia.w	r1, {r6, r9}
 800766e:	3108      	adds	r1, #8
 8007670:	2b07      	cmp	r3, #7
 8007672:	922a      	str	r2, [sp, #168]	; 0xa8
 8007674:	9329      	str	r3, [sp, #164]	; 0xa4
 8007676:	ddf3      	ble.n	8007660 <_svfiprintf_r+0x32c>
 8007678:	4620      	mov	r0, r4
 800767a:	4651      	mov	r1, sl
 800767c:	4642      	mov	r2, r8
 800767e:	f7ff fdd9 	bl	8007234 <__ssprint_r>
 8007682:	2800      	cmp	r0, #0
 8007684:	f040 8162 	bne.w	800794c <_svfiprintf_r+0x618>
 8007688:	3d10      	subs	r5, #16
 800768a:	2d10      	cmp	r5, #16
 800768c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800768e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007690:	a90e      	add	r1, sp, #56	; 0x38
 8007692:	dce8      	bgt.n	8007666 <_svfiprintf_r+0x332>
 8007694:	460c      	mov	r4, r1
 8007696:	3301      	adds	r3, #1
 8007698:	1952      	adds	r2, r2, r5
 800769a:	2b07      	cmp	r3, #7
 800769c:	6026      	str	r6, [r4, #0]
 800769e:	6065      	str	r5, [r4, #4]
 80076a0:	922a      	str	r2, [sp, #168]	; 0xa8
 80076a2:	9329      	str	r3, [sp, #164]	; 0xa4
 80076a4:	f300 8219 	bgt.w	8007ada <_svfiprintf_r+0x7a6>
 80076a8:	3408      	adds	r4, #8
 80076aa:	e08c      	b.n	80077c6 <_svfiprintf_r+0x492>
 80076ac:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80076b0:	4b5e      	ldr	r3, [pc, #376]	; (800782c <_svfiprintf_r+0x4f8>)
 80076b2:	930c      	str	r3, [sp, #48]	; 0x30
 80076b4:	e776      	b.n	80075a4 <_svfiprintf_r+0x270>
 80076b6:	f04b 0b01 	orr.w	fp, fp, #1
 80076ba:	e684      	b.n	80073c6 <_svfiprintf_r+0x92>
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bf08      	it	eq
 80076c0:	2320      	moveq	r3, #32
 80076c2:	e680      	b.n	80073c6 <_svfiprintf_r+0x92>
 80076c4:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80076c8:	2a00      	cmp	r2, #0
 80076ca:	f000 8138 	beq.w	800793e <_svfiprintf_r+0x60a>
 80076ce:	2301      	movs	r3, #1
 80076d0:	9302      	str	r3, [sp, #8]
 80076d2:	2300      	movs	r3, #0
 80076d4:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80076d8:	2301      	movs	r3, #1
 80076da:	9303      	str	r3, [sp, #12]
 80076dc:	ab1e      	add	r3, sp, #120	; 0x78
 80076de:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 80076e2:	9309      	str	r3, [sp, #36]	; 0x24
 80076e4:	e79e      	b.n	8007624 <_svfiprintf_r+0x2f0>
 80076e6:	9b05      	ldr	r3, [sp, #20]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	9309      	str	r3, [sp, #36]	; 0x24
 80076ec:	9b05      	ldr	r3, [sp, #20]
 80076ee:	3304      	adds	r3, #4
 80076f0:	9305      	str	r3, [sp, #20]
 80076f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f4:	2600      	movs	r6, #0
 80076f6:	f88d 60af 	strb.w	r6, [sp, #175]	; 0xaf
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 8259 	beq.w	8007bb2 <_svfiprintf_r+0x87e>
 8007700:	2d00      	cmp	r5, #0
 8007702:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007704:	f2c0 822d 	blt.w	8007b62 <_svfiprintf_r+0x82e>
 8007708:	4631      	mov	r1, r6
 800770a:	462a      	mov	r2, r5
 800770c:	f7fe ff50 	bl	80065b0 <memchr>
 8007710:	2800      	cmp	r0, #0
 8007712:	f000 8258 	beq.w	8007bc6 <_svfiprintf_r+0x892>
 8007716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007718:	9608      	str	r6, [sp, #32]
 800771a:	1ac0      	subs	r0, r0, r3
 800771c:	42a8      	cmp	r0, r5
 800771e:	9003      	str	r0, [sp, #12]
 8007720:	bfc8      	it	gt
 8007722:	9503      	strgt	r5, [sp, #12]
 8007724:	e6ea      	b.n	80074fc <_svfiprintf_r+0x1c8>
 8007726:	f04b 0b10 	orr.w	fp, fp, #16
 800772a:	f01b 0f10 	tst.w	fp, #16
 800772e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007732:	f47f af5c 	bne.w	80075ee <_svfiprintf_r+0x2ba>
 8007736:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800773a:	f000 8208 	beq.w	8007b4e <_svfiprintf_r+0x81a>
 800773e:	9905      	ldr	r1, [sp, #20]
 8007740:	f9b1 3000 	ldrsh.w	r3, [r1]
 8007744:	3104      	adds	r1, #4
 8007746:	2b00      	cmp	r3, #0
 8007748:	9105      	str	r1, [sp, #20]
 800774a:	f6bf af57 	bge.w	80075fc <_svfiprintf_r+0x2c8>
 800774e:	425b      	negs	r3, r3
 8007750:	222d      	movs	r2, #45	; 0x2d
 8007752:	1c19      	adds	r1, r3, #0
 8007754:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8007758:	bf18      	it	ne
 800775a:	2101      	movne	r1, #1
 800775c:	2201      	movs	r2, #1
 800775e:	e6a8      	b.n	80074b2 <_svfiprintf_r+0x17e>
 8007760:	4638      	mov	r0, r7
 8007762:	2100      	movs	r1, #0
 8007764:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8007768:	f810 2b01 	ldrb.w	r2, [r0], #1
 800776c:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007770:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007774:	2e09      	cmp	r6, #9
 8007776:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 800777a:	4607      	mov	r7, r0
 800777c:	d9f2      	bls.n	8007764 <_svfiprintf_r+0x430>
 800777e:	9106      	str	r1, [sp, #24]
 8007780:	e623      	b.n	80073ca <_svfiprintf_r+0x96>
 8007782:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8007786:	e61e      	b.n	80073c6 <_svfiprintf_r+0x92>
 8007788:	232b      	movs	r3, #43	; 0x2b
 800778a:	e61c      	b.n	80073c6 <_svfiprintf_r+0x92>
 800778c:	f817 2b01 	ldrb.w	r2, [r7], #1
 8007790:	2a2a      	cmp	r2, #42	; 0x2a
 8007792:	f000 81ae 	beq.w	8007af2 <_svfiprintf_r+0x7be>
 8007796:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800779a:	2500      	movs	r5, #0
 800779c:	2909      	cmp	r1, #9
 800779e:	f63f ae14 	bhi.w	80073ca <_svfiprintf_r+0x96>
 80077a2:	4638      	mov	r0, r7
 80077a4:	2500      	movs	r5, #0
 80077a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077aa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80077ae:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 80077b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80077b6:	2909      	cmp	r1, #9
 80077b8:	4607      	mov	r7, r0
 80077ba:	d9f4      	bls.n	80077a6 <_svfiprintf_r+0x472>
 80077bc:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80077c0:	e603      	b.n	80073ca <_svfiprintf_r+0x96>
 80077c2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80077c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80077c6:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
 80077ca:	b161      	cbz	r1, 80077e6 <_svfiprintf_r+0x4b2>
 80077cc:	3301      	adds	r3, #1
 80077ce:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
 80077d2:	3201      	adds	r2, #1
 80077d4:	6021      	str	r1, [r4, #0]
 80077d6:	2101      	movs	r1, #1
 80077d8:	2b07      	cmp	r3, #7
 80077da:	6061      	str	r1, [r4, #4]
 80077dc:	922a      	str	r2, [sp, #168]	; 0xa8
 80077de:	9329      	str	r3, [sp, #164]	; 0xa4
 80077e0:	f300 811e 	bgt.w	8007a20 <_svfiprintf_r+0x6ec>
 80077e4:	3408      	adds	r4, #8
 80077e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80077e8:	b159      	cbz	r1, 8007802 <_svfiprintf_r+0x4ce>
 80077ea:	3301      	adds	r3, #1
 80077ec:	a92b      	add	r1, sp, #172	; 0xac
 80077ee:	3202      	adds	r2, #2
 80077f0:	6021      	str	r1, [r4, #0]
 80077f2:	2102      	movs	r1, #2
 80077f4:	2b07      	cmp	r3, #7
 80077f6:	6061      	str	r1, [r4, #4]
 80077f8:	922a      	str	r2, [sp, #168]	; 0xa8
 80077fa:	9329      	str	r3, [sp, #164]	; 0xa4
 80077fc:	f300 811b 	bgt.w	8007a36 <_svfiprintf_r+0x702>
 8007800:	3408      	adds	r4, #8
 8007802:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007804:	2880      	cmp	r0, #128	; 0x80
 8007806:	f000 80ae 	beq.w	8007966 <_svfiprintf_r+0x632>
 800780a:	9808      	ldr	r0, [sp, #32]
 800780c:	9903      	ldr	r1, [sp, #12]
 800780e:	1a45      	subs	r5, r0, r1
 8007810:	2d00      	cmp	r5, #0
 8007812:	dd33      	ble.n	800787c <_svfiprintf_r+0x548>
 8007814:	2d10      	cmp	r5, #16
 8007816:	4e06      	ldr	r6, [pc, #24]	; (8007830 <_svfiprintf_r+0x4fc>)
 8007818:	dd26      	ble.n	8007868 <_svfiprintf_r+0x534>
 800781a:	4621      	mov	r1, r4
 800781c:	f04f 0910 	mov.w	r9, #16
 8007820:	9c07      	ldr	r4, [sp, #28]
 8007822:	e00a      	b.n	800783a <_svfiprintf_r+0x506>
 8007824:	08009124 	.word	0x08009124
 8007828:	08008fb8 	.word	0x08008fb8
 800782c:	08009110 	.word	0x08009110
 8007830:	08008fc8 	.word	0x08008fc8
 8007834:	3d10      	subs	r5, #16
 8007836:	2d10      	cmp	r5, #16
 8007838:	dd15      	ble.n	8007866 <_svfiprintf_r+0x532>
 800783a:	3301      	adds	r3, #1
 800783c:	3210      	adds	r2, #16
 800783e:	e881 0240 	stmia.w	r1, {r6, r9}
 8007842:	3108      	adds	r1, #8
 8007844:	2b07      	cmp	r3, #7
 8007846:	922a      	str	r2, [sp, #168]	; 0xa8
 8007848:	9329      	str	r3, [sp, #164]	; 0xa4
 800784a:	ddf3      	ble.n	8007834 <_svfiprintf_r+0x500>
 800784c:	4620      	mov	r0, r4
 800784e:	4651      	mov	r1, sl
 8007850:	4642      	mov	r2, r8
 8007852:	f7ff fcef 	bl	8007234 <__ssprint_r>
 8007856:	2800      	cmp	r0, #0
 8007858:	d178      	bne.n	800794c <_svfiprintf_r+0x618>
 800785a:	3d10      	subs	r5, #16
 800785c:	2d10      	cmp	r5, #16
 800785e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007860:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007862:	a90e      	add	r1, sp, #56	; 0x38
 8007864:	dce9      	bgt.n	800783a <_svfiprintf_r+0x506>
 8007866:	460c      	mov	r4, r1
 8007868:	3301      	adds	r3, #1
 800786a:	1952      	adds	r2, r2, r5
 800786c:	2b07      	cmp	r3, #7
 800786e:	6026      	str	r6, [r4, #0]
 8007870:	6065      	str	r5, [r4, #4]
 8007872:	922a      	str	r2, [sp, #168]	; 0xa8
 8007874:	9329      	str	r3, [sp, #164]	; 0xa4
 8007876:	f300 80c8 	bgt.w	8007a0a <_svfiprintf_r+0x6d6>
 800787a:	3408      	adds	r4, #8
 800787c:	9903      	ldr	r1, [sp, #12]
 800787e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007880:	3301      	adds	r3, #1
 8007882:	1852      	adds	r2, r2, r1
 8007884:	2b07      	cmp	r3, #7
 8007886:	e884 0003 	stmia.w	r4, {r0, r1}
 800788a:	922a      	str	r2, [sp, #168]	; 0xa8
 800788c:	9329      	str	r3, [sp, #164]	; 0xa4
 800788e:	bfd8      	it	le
 8007890:	f104 0108 	addle.w	r1, r4, #8
 8007894:	f300 809a 	bgt.w	80079cc <_svfiprintf_r+0x698>
 8007898:	f01b 0f04 	tst.w	fp, #4
 800789c:	d02e      	beq.n	80078fc <_svfiprintf_r+0x5c8>
 800789e:	9b06      	ldr	r3, [sp, #24]
 80078a0:	9802      	ldr	r0, [sp, #8]
 80078a2:	1a1d      	subs	r5, r3, r0
 80078a4:	2d00      	cmp	r5, #0
 80078a6:	dd29      	ble.n	80078fc <_svfiprintf_r+0x5c8>
 80078a8:	2d10      	cmp	r5, #16
 80078aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80078ac:	4e97      	ldr	r6, [pc, #604]	; (8007b0c <_svfiprintf_r+0x7d8>)
 80078ae:	dd1c      	ble.n	80078ea <_svfiprintf_r+0x5b6>
 80078b0:	2410      	movs	r4, #16
 80078b2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80078b6:	e002      	b.n	80078be <_svfiprintf_r+0x58a>
 80078b8:	3d10      	subs	r5, #16
 80078ba:	2d10      	cmp	r5, #16
 80078bc:	dd15      	ble.n	80078ea <_svfiprintf_r+0x5b6>
 80078be:	3301      	adds	r3, #1
 80078c0:	3210      	adds	r2, #16
 80078c2:	600e      	str	r6, [r1, #0]
 80078c4:	604c      	str	r4, [r1, #4]
 80078c6:	3108      	adds	r1, #8
 80078c8:	2b07      	cmp	r3, #7
 80078ca:	922a      	str	r2, [sp, #168]	; 0xa8
 80078cc:	9329      	str	r3, [sp, #164]	; 0xa4
 80078ce:	ddf3      	ble.n	80078b8 <_svfiprintf_r+0x584>
 80078d0:	4648      	mov	r0, r9
 80078d2:	4651      	mov	r1, sl
 80078d4:	4642      	mov	r2, r8
 80078d6:	f7ff fcad 	bl	8007234 <__ssprint_r>
 80078da:	2800      	cmp	r0, #0
 80078dc:	d136      	bne.n	800794c <_svfiprintf_r+0x618>
 80078de:	3d10      	subs	r5, #16
 80078e0:	2d10      	cmp	r5, #16
 80078e2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80078e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80078e6:	a90e      	add	r1, sp, #56	; 0x38
 80078e8:	dce9      	bgt.n	80078be <_svfiprintf_r+0x58a>
 80078ea:	3301      	adds	r3, #1
 80078ec:	18aa      	adds	r2, r5, r2
 80078ee:	2b07      	cmp	r3, #7
 80078f0:	600e      	str	r6, [r1, #0]
 80078f2:	604d      	str	r5, [r1, #4]
 80078f4:	922a      	str	r2, [sp, #168]	; 0xa8
 80078f6:	9329      	str	r3, [sp, #164]	; 0xa4
 80078f8:	f300 810c 	bgt.w	8007b14 <_svfiprintf_r+0x7e0>
 80078fc:	9b04      	ldr	r3, [sp, #16]
 80078fe:	9902      	ldr	r1, [sp, #8]
 8007900:	9806      	ldr	r0, [sp, #24]
 8007902:	4281      	cmp	r1, r0
 8007904:	bfac      	ite	ge
 8007906:	185b      	addge	r3, r3, r1
 8007908:	181b      	addlt	r3, r3, r0
 800790a:	9304      	str	r3, [sp, #16]
 800790c:	2a00      	cmp	r2, #0
 800790e:	d167      	bne.n	80079e0 <_svfiprintf_r+0x6ac>
 8007910:	2300      	movs	r3, #0
 8007912:	9329      	str	r3, [sp, #164]	; 0xa4
 8007914:	ac0e      	add	r4, sp, #56	; 0x38
 8007916:	e52c      	b.n	8007372 <_svfiprintf_r+0x3e>
 8007918:	2a00      	cmp	r2, #0
 800791a:	d169      	bne.n	80079f0 <_svfiprintf_r+0x6bc>
 800791c:	f01b 0f01 	tst.w	fp, #1
 8007920:	bf04      	itt	eq
 8007922:	9203      	streq	r2, [sp, #12]
 8007924:	f8cd 8024 	streq.w	r8, [sp, #36]	; 0x24
 8007928:	f43f ade7 	beq.w	80074fa <_svfiprintf_r+0x1c6>
 800792c:	2330      	movs	r3, #48	; 0x30
 800792e:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 8007932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007934:	9303      	str	r3, [sp, #12]
 8007936:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 800793a:	9309      	str	r3, [sp, #36]	; 0x24
 800793c:	e5dd      	b.n	80074fa <_svfiprintf_r+0x1c6>
 800793e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007940:	b123      	cbz	r3, 800794c <_svfiprintf_r+0x618>
 8007942:	9807      	ldr	r0, [sp, #28]
 8007944:	4651      	mov	r1, sl
 8007946:	aa28      	add	r2, sp, #160	; 0xa0
 8007948:	f7ff fc74 	bl	8007234 <__ssprint_r>
 800794c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007950:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007954:	9b04      	ldr	r3, [sp, #16]
 8007956:	bf18      	it	ne
 8007958:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800795c:	9304      	str	r3, [sp, #16]
 800795e:	9804      	ldr	r0, [sp, #16]
 8007960:	b02d      	add	sp, #180	; 0xb4
 8007962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007966:	9906      	ldr	r1, [sp, #24]
 8007968:	9802      	ldr	r0, [sp, #8]
 800796a:	1a0d      	subs	r5, r1, r0
 800796c:	2d00      	cmp	r5, #0
 800796e:	f77f af4c 	ble.w	800780a <_svfiprintf_r+0x4d6>
 8007972:	2d10      	cmp	r5, #16
 8007974:	4e66      	ldr	r6, [pc, #408]	; (8007b10 <_svfiprintf_r+0x7dc>)
 8007976:	dd1e      	ble.n	80079b6 <_svfiprintf_r+0x682>
 8007978:	4621      	mov	r1, r4
 800797a:	f04f 0910 	mov.w	r9, #16
 800797e:	9c07      	ldr	r4, [sp, #28]
 8007980:	e002      	b.n	8007988 <_svfiprintf_r+0x654>
 8007982:	3d10      	subs	r5, #16
 8007984:	2d10      	cmp	r5, #16
 8007986:	dd15      	ble.n	80079b4 <_svfiprintf_r+0x680>
 8007988:	3301      	adds	r3, #1
 800798a:	3210      	adds	r2, #16
 800798c:	e881 0240 	stmia.w	r1, {r6, r9}
 8007990:	3108      	adds	r1, #8
 8007992:	2b07      	cmp	r3, #7
 8007994:	922a      	str	r2, [sp, #168]	; 0xa8
 8007996:	9329      	str	r3, [sp, #164]	; 0xa4
 8007998:	ddf3      	ble.n	8007982 <_svfiprintf_r+0x64e>
 800799a:	4620      	mov	r0, r4
 800799c:	4651      	mov	r1, sl
 800799e:	4642      	mov	r2, r8
 80079a0:	f7ff fc48 	bl	8007234 <__ssprint_r>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d1d1      	bne.n	800794c <_svfiprintf_r+0x618>
 80079a8:	3d10      	subs	r5, #16
 80079aa:	2d10      	cmp	r5, #16
 80079ac:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80079ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80079b0:	a90e      	add	r1, sp, #56	; 0x38
 80079b2:	dce9      	bgt.n	8007988 <_svfiprintf_r+0x654>
 80079b4:	460c      	mov	r4, r1
 80079b6:	3301      	adds	r3, #1
 80079b8:	1952      	adds	r2, r2, r5
 80079ba:	2b07      	cmp	r3, #7
 80079bc:	6026      	str	r6, [r4, #0]
 80079be:	6065      	str	r5, [r4, #4]
 80079c0:	922a      	str	r2, [sp, #168]	; 0xa8
 80079c2:	9329      	str	r3, [sp, #164]	; 0xa4
 80079c4:	f300 80d2 	bgt.w	8007b6c <_svfiprintf_r+0x838>
 80079c8:	3408      	adds	r4, #8
 80079ca:	e71e      	b.n	800780a <_svfiprintf_r+0x4d6>
 80079cc:	9807      	ldr	r0, [sp, #28]
 80079ce:	4651      	mov	r1, sl
 80079d0:	4642      	mov	r2, r8
 80079d2:	f7ff fc2f 	bl	8007234 <__ssprint_r>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d1b8      	bne.n	800794c <_svfiprintf_r+0x618>
 80079da:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80079dc:	a90e      	add	r1, sp, #56	; 0x38
 80079de:	e75b      	b.n	8007898 <_svfiprintf_r+0x564>
 80079e0:	9807      	ldr	r0, [sp, #28]
 80079e2:	4651      	mov	r1, sl
 80079e4:	4642      	mov	r2, r8
 80079e6:	f7ff fc25 	bl	8007234 <__ssprint_r>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	d090      	beq.n	8007910 <_svfiprintf_r+0x5dc>
 80079ee:	e7ad      	b.n	800794c <_svfiprintf_r+0x618>
 80079f0:	9103      	str	r1, [sp, #12]
 80079f2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80079f6:	e580      	b.n	80074fa <_svfiprintf_r+0x1c6>
 80079f8:	9807      	ldr	r0, [sp, #28]
 80079fa:	4651      	mov	r1, sl
 80079fc:	4642      	mov	r2, r8
 80079fe:	f7ff fc19 	bl	8007234 <__ssprint_r>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	d1a2      	bne.n	800794c <_svfiprintf_r+0x618>
 8007a06:	ac0e      	add	r4, sp, #56	; 0x38
 8007a08:	e4cd      	b.n	80073a6 <_svfiprintf_r+0x72>
 8007a0a:	9807      	ldr	r0, [sp, #28]
 8007a0c:	4651      	mov	r1, sl
 8007a0e:	4642      	mov	r2, r8
 8007a10:	f7ff fc10 	bl	8007234 <__ssprint_r>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d199      	bne.n	800794c <_svfiprintf_r+0x618>
 8007a18:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007a1a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007a1c:	ac0e      	add	r4, sp, #56	; 0x38
 8007a1e:	e72d      	b.n	800787c <_svfiprintf_r+0x548>
 8007a20:	9807      	ldr	r0, [sp, #28]
 8007a22:	4651      	mov	r1, sl
 8007a24:	4642      	mov	r2, r8
 8007a26:	f7ff fc05 	bl	8007234 <__ssprint_r>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	d18e      	bne.n	800794c <_svfiprintf_r+0x618>
 8007a2e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007a30:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007a32:	ac0e      	add	r4, sp, #56	; 0x38
 8007a34:	e6d7      	b.n	80077e6 <_svfiprintf_r+0x4b2>
 8007a36:	9807      	ldr	r0, [sp, #28]
 8007a38:	4651      	mov	r1, sl
 8007a3a:	4642      	mov	r2, r8
 8007a3c:	f7ff fbfa 	bl	8007234 <__ssprint_r>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d183      	bne.n	800794c <_svfiprintf_r+0x618>
 8007a44:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007a46:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007a48:	ac0e      	add	r4, sp, #56	; 0x38
 8007a4a:	e6da      	b.n	8007802 <_svfiprintf_r+0x4ce>
 8007a4c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007a4e:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8007a52:	f003 000f 	and.w	r0, r3, #15
 8007a56:	4611      	mov	r1, r2
 8007a58:	5c30      	ldrb	r0, [r6, r0]
 8007a5a:	3a01      	subs	r2, #1
 8007a5c:	091b      	lsrs	r3, r3, #4
 8007a5e:	7008      	strb	r0, [r1, #0]
 8007a60:	d1f7      	bne.n	8007a52 <_svfiprintf_r+0x71e>
 8007a62:	ebc1 0308 	rsb	r3, r1, r8
 8007a66:	9109      	str	r1, [sp, #36]	; 0x24
 8007a68:	9303      	str	r3, [sp, #12]
 8007a6a:	e546      	b.n	80074fa <_svfiprintf_r+0x1c6>
 8007a6c:	2b09      	cmp	r3, #9
 8007a6e:	bf82      	ittt	hi
 8007a70:	f64c 46cd 	movwhi	r6, #52429	; 0xcccd
 8007a74:	f10d 019f 	addhi.w	r1, sp, #159	; 0x9f
 8007a78:	f6cc 46cc 	movthi	r6, #52428	; 0xcccc
 8007a7c:	d801      	bhi.n	8007a82 <_svfiprintf_r+0x74e>
 8007a7e:	3330      	adds	r3, #48	; 0x30
 8007a80:	e755      	b.n	800792e <_svfiprintf_r+0x5fa>
 8007a82:	fba6 0203 	umull	r0, r2, r6, r3
 8007a86:	08d2      	lsrs	r2, r2, #3
 8007a88:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8007a8c:	eba3 0c4c 	sub.w	ip, r3, ip, lsl #1
 8007a90:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8007a94:	4608      	mov	r0, r1
 8007a96:	f881 c000 	strb.w	ip, [r1]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	3901      	subs	r1, #1
 8007a9e:	2a00      	cmp	r2, #0
 8007aa0:	d1ef      	bne.n	8007a82 <_svfiprintf_r+0x74e>
 8007aa2:	9009      	str	r0, [sp, #36]	; 0x24
 8007aa4:	e526      	b.n	80074f4 <_svfiprintf_r+0x1c0>
 8007aa6:	9905      	ldr	r1, [sp, #20]
 8007aa8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007aac:	bf14      	ite	ne
 8007aae:	880b      	ldrhne	r3, [r1, #0]
 8007ab0:	680b      	ldreq	r3, [r1, #0]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	9805      	ldr	r0, [sp, #20]
 8007ab6:	1c19      	adds	r1, r3, #0
 8007ab8:	bf18      	it	ne
 8007aba:	2101      	movne	r1, #1
 8007abc:	3004      	adds	r0, #4
 8007abe:	9005      	str	r0, [sp, #20]
 8007ac0:	e4f4      	b.n	80074ac <_svfiprintf_r+0x178>
 8007ac2:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8007ac6:	bf0b      	itete	eq
 8007ac8:	9a05      	ldreq	r2, [sp, #20]
 8007aca:	9905      	ldrne	r1, [sp, #20]
 8007acc:	6813      	ldreq	r3, [r2, #0]
 8007ace:	880b      	ldrhne	r3, [r1, #0]
 8007ad0:	bf08      	it	eq
 8007ad2:	460a      	moveq	r2, r1
 8007ad4:	e7ee      	b.n	8007ab4 <_svfiprintf_r+0x780>
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	e4e8      	b.n	80074ac <_svfiprintf_r+0x178>
 8007ada:	9807      	ldr	r0, [sp, #28]
 8007adc:	4651      	mov	r1, sl
 8007ade:	4642      	mov	r2, r8
 8007ae0:	f7ff fba8 	bl	8007234 <__ssprint_r>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	f47f af31 	bne.w	800794c <_svfiprintf_r+0x618>
 8007aea:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007aec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007aee:	ac0e      	add	r4, sp, #56	; 0x38
 8007af0:	e669      	b.n	80077c6 <_svfiprintf_r+0x492>
 8007af2:	9a05      	ldr	r2, [sp, #20]
 8007af4:	6815      	ldr	r5, [r2, #0]
 8007af6:	3204      	adds	r2, #4
 8007af8:	2d00      	cmp	r5, #0
 8007afa:	bfbc      	itt	lt
 8007afc:	9205      	strlt	r2, [sp, #20]
 8007afe:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8007b02:	f6ff ac60 	blt.w	80073c6 <_svfiprintf_r+0x92>
 8007b06:	9205      	str	r2, [sp, #20]
 8007b08:	e45d      	b.n	80073c6 <_svfiprintf_r+0x92>
 8007b0a:	bf00      	nop
 8007b0c:	08008fb8 	.word	0x08008fb8
 8007b10:	08008fc8 	.word	0x08008fc8
 8007b14:	9807      	ldr	r0, [sp, #28]
 8007b16:	4651      	mov	r1, sl
 8007b18:	4642      	mov	r2, r8
 8007b1a:	f7ff fb8b 	bl	8007234 <__ssprint_r>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	f47f af14 	bne.w	800794c <_svfiprintf_r+0x618>
 8007b24:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007b26:	e6e9      	b.n	80078fc <_svfiprintf_r+0x5c8>
 8007b28:	2930      	cmp	r1, #48	; 0x30
 8007b2a:	d004      	beq.n	8007b36 <_svfiprintf_r+0x802>
 8007b2c:	1e93      	subs	r3, r2, #2
 8007b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b30:	2330      	movs	r3, #48	; 0x30
 8007b32:	f802 3c02 	strb.w	r3, [r2, #-2]
 8007b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b38:	ebc3 0308 	rsb	r3, r3, r8
 8007b3c:	9303      	str	r3, [sp, #12]
 8007b3e:	e4dc      	b.n	80074fa <_svfiprintf_r+0x1c6>
 8007b40:	9805      	ldr	r0, [sp, #20]
 8007b42:	9904      	ldr	r1, [sp, #16]
 8007b44:	6803      	ldr	r3, [r0, #0]
 8007b46:	3004      	adds	r0, #4
 8007b48:	9005      	str	r0, [sp, #20]
 8007b4a:	6019      	str	r1, [r3, #0]
 8007b4c:	e411      	b.n	8007372 <_svfiprintf_r+0x3e>
 8007b4e:	9a05      	ldr	r2, [sp, #20]
 8007b50:	6813      	ldr	r3, [r2, #0]
 8007b52:	3204      	adds	r2, #4
 8007b54:	9205      	str	r2, [sp, #20]
 8007b56:	e54e      	b.n	80075f6 <_svfiprintf_r+0x2c2>
 8007b58:	9905      	ldr	r1, [sp, #20]
 8007b5a:	880b      	ldrh	r3, [r1, #0]
 8007b5c:	3104      	adds	r1, #4
 8007b5e:	9105      	str	r1, [sp, #20]
 8007b60:	e52b      	b.n	80075ba <_svfiprintf_r+0x286>
 8007b62:	f7ff fb37 	bl	80071d4 <strlen>
 8007b66:	9608      	str	r6, [sp, #32]
 8007b68:	9003      	str	r0, [sp, #12]
 8007b6a:	e4c7      	b.n	80074fc <_svfiprintf_r+0x1c8>
 8007b6c:	9807      	ldr	r0, [sp, #28]
 8007b6e:	4651      	mov	r1, sl
 8007b70:	4642      	mov	r2, r8
 8007b72:	f7ff fb5f 	bl	8007234 <__ssprint_r>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	f47f aee8 	bne.w	800794c <_svfiprintf_r+0x618>
 8007b7c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007b7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007b80:	ac0e      	add	r4, sp, #56	; 0x38
 8007b82:	e642      	b.n	800780a <_svfiprintf_r+0x4d6>
 8007b84:	9905      	ldr	r1, [sp, #20]
 8007b86:	9a04      	ldr	r2, [sp, #16]
 8007b88:	680b      	ldr	r3, [r1, #0]
 8007b8a:	3104      	adds	r1, #4
 8007b8c:	9105      	str	r1, [sp, #20]
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	f7ff bbef 	b.w	8007372 <_svfiprintf_r+0x3e>
 8007b94:	2140      	movs	r1, #64	; 0x40
 8007b96:	9200      	str	r2, [sp, #0]
 8007b98:	f7fe fa56 	bl	8006048 <_malloc_r>
 8007b9c:	9a00      	ldr	r2, [sp, #0]
 8007b9e:	f8ca 0000 	str.w	r0, [sl]
 8007ba2:	f8ca 0010 	str.w	r0, [sl, #16]
 8007ba6:	b188      	cbz	r0, 8007bcc <_svfiprintf_r+0x898>
 8007ba8:	2340      	movs	r3, #64	; 0x40
 8007baa:	f8ca 3014 	str.w	r3, [sl, #20]
 8007bae:	f7ff bbcf 	b.w	8007350 <_svfiprintf_r+0x1c>
 8007bb2:	2d06      	cmp	r5, #6
 8007bb4:	bf28      	it	cs
 8007bb6:	2506      	movcs	r5, #6
 8007bb8:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8007bbc:	9302      	str	r3, [sp, #8]
 8007bbe:	4b07      	ldr	r3, [pc, #28]	; (8007bdc <_svfiprintf_r+0x8a8>)
 8007bc0:	9503      	str	r5, [sp, #12]
 8007bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8007bc4:	e52e      	b.n	8007624 <_svfiprintf_r+0x2f0>
 8007bc6:	9503      	str	r5, [sp, #12]
 8007bc8:	9008      	str	r0, [sp, #32]
 8007bca:	e497      	b.n	80074fc <_svfiprintf_r+0x1c8>
 8007bcc:	9807      	ldr	r0, [sp, #28]
 8007bce:	230c      	movs	r3, #12
 8007bd0:	6003      	str	r3, [r0, #0]
 8007bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bd6:	9304      	str	r3, [sp, #16]
 8007bd8:	e6c1      	b.n	800795e <_svfiprintf_r+0x62a>
 8007bda:	bf00      	nop
 8007bdc:	08009138 	.word	0x08009138

08007be0 <_calloc_r>:
 8007be0:	b510      	push	{r4, lr}
 8007be2:	fb01 f102 	mul.w	r1, r1, r2
 8007be6:	f7fe fa2f 	bl	8006048 <_malloc_r>
 8007bea:	4604      	mov	r4, r0
 8007bec:	b300      	cbz	r0, 8007c30 <_calloc_r+0x50>
 8007bee:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007bf2:	f022 0203 	bic.w	r2, r2, #3
 8007bf6:	3a04      	subs	r2, #4
 8007bf8:	2a24      	cmp	r2, #36	; 0x24
 8007bfa:	d81b      	bhi.n	8007c34 <_calloc_r+0x54>
 8007bfc:	2a13      	cmp	r2, #19
 8007bfe:	bf98      	it	ls
 8007c00:	4602      	movls	r2, r0
 8007c02:	d911      	bls.n	8007c28 <_calloc_r+0x48>
 8007c04:	2300      	movs	r3, #0
 8007c06:	2a1b      	cmp	r2, #27
 8007c08:	6003      	str	r3, [r0, #0]
 8007c0a:	6043      	str	r3, [r0, #4]
 8007c0c:	bf98      	it	ls
 8007c0e:	f100 0208 	addls.w	r2, r0, #8
 8007c12:	d909      	bls.n	8007c28 <_calloc_r+0x48>
 8007c14:	2a24      	cmp	r2, #36	; 0x24
 8007c16:	6083      	str	r3, [r0, #8]
 8007c18:	60c3      	str	r3, [r0, #12]
 8007c1a:	bf11      	iteee	ne
 8007c1c:	f100 0210 	addne.w	r2, r0, #16
 8007c20:	6103      	streq	r3, [r0, #16]
 8007c22:	6143      	streq	r3, [r0, #20]
 8007c24:	f100 0218 	addeq.w	r2, r0, #24
 8007c28:	2300      	movs	r3, #0
 8007c2a:	6013      	str	r3, [r2, #0]
 8007c2c:	6053      	str	r3, [r2, #4]
 8007c2e:	6093      	str	r3, [r2, #8]
 8007c30:	4620      	mov	r0, r4
 8007c32:	bd10      	pop	{r4, pc}
 8007c34:	2100      	movs	r1, #0
 8007c36:	f000 f85b 	bl	8007cf0 <memset>
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	bd10      	pop	{r4, pc}
 8007c3e:	bf00      	nop

08007c40 <memmove>:
 8007c40:	4288      	cmp	r0, r1
 8007c42:	b4f0      	push	{r4, r5, r6, r7}
 8007c44:	d912      	bls.n	8007c6c <memmove+0x2c>
 8007c46:	188d      	adds	r5, r1, r2
 8007c48:	42a8      	cmp	r0, r5
 8007c4a:	d20f      	bcs.n	8007c6c <memmove+0x2c>
 8007c4c:	b162      	cbz	r2, 8007c68 <memmove+0x28>
 8007c4e:	4251      	negs	r1, r2
 8007c50:	4613      	mov	r3, r2
 8007c52:	1882      	adds	r2, r0, r2
 8007c54:	186d      	adds	r5, r5, r1
 8007c56:	1852      	adds	r2, r2, r1
 8007c58:	18ec      	adds	r4, r5, r3
 8007c5a:	18d1      	adds	r1, r2, r3
 8007c5c:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	f801 4c01 	strb.w	r4, [r1, #-1]
 8007c66:	d1f7      	bne.n	8007c58 <memmove+0x18>
 8007c68:	bcf0      	pop	{r4, r5, r6, r7}
 8007c6a:	4770      	bx	lr
 8007c6c:	2a0f      	cmp	r2, #15
 8007c6e:	bf98      	it	ls
 8007c70:	4603      	movls	r3, r0
 8007c72:	d931      	bls.n	8007cd8 <memmove+0x98>
 8007c74:	ea41 0300 	orr.w	r3, r1, r0
 8007c78:	079b      	lsls	r3, r3, #30
 8007c7a:	d137      	bne.n	8007cec <memmove+0xac>
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	4603      	mov	r3, r0
 8007c80:	4615      	mov	r5, r2
 8007c82:	6826      	ldr	r6, [r4, #0]
 8007c84:	601e      	str	r6, [r3, #0]
 8007c86:	6866      	ldr	r6, [r4, #4]
 8007c88:	605e      	str	r6, [r3, #4]
 8007c8a:	68a6      	ldr	r6, [r4, #8]
 8007c8c:	609e      	str	r6, [r3, #8]
 8007c8e:	68e6      	ldr	r6, [r4, #12]
 8007c90:	3d10      	subs	r5, #16
 8007c92:	60de      	str	r6, [r3, #12]
 8007c94:	3410      	adds	r4, #16
 8007c96:	3310      	adds	r3, #16
 8007c98:	2d0f      	cmp	r5, #15
 8007c9a:	d8f2      	bhi.n	8007c82 <memmove+0x42>
 8007c9c:	f1a2 0410 	sub.w	r4, r2, #16
 8007ca0:	f024 040f 	bic.w	r4, r4, #15
 8007ca4:	f002 020f 	and.w	r2, r2, #15
 8007ca8:	3410      	adds	r4, #16
 8007caa:	2a03      	cmp	r2, #3
 8007cac:	eb00 0304 	add.w	r3, r0, r4
 8007cb0:	4421      	add	r1, r4
 8007cb2:	d911      	bls.n	8007cd8 <memmove+0x98>
 8007cb4:	1f0e      	subs	r6, r1, #4
 8007cb6:	461d      	mov	r5, r3
 8007cb8:	4614      	mov	r4, r2
 8007cba:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8007cbe:	3c04      	subs	r4, #4
 8007cc0:	2c03      	cmp	r4, #3
 8007cc2:	f845 7b04 	str.w	r7, [r5], #4
 8007cc6:	d8f8      	bhi.n	8007cba <memmove+0x7a>
 8007cc8:	1f14      	subs	r4, r2, #4
 8007cca:	f024 0403 	bic.w	r4, r4, #3
 8007cce:	3404      	adds	r4, #4
 8007cd0:	f002 0203 	and.w	r2, r2, #3
 8007cd4:	1909      	adds	r1, r1, r4
 8007cd6:	191b      	adds	r3, r3, r4
 8007cd8:	2a00      	cmp	r2, #0
 8007cda:	d0c5      	beq.n	8007c68 <memmove+0x28>
 8007cdc:	3901      	subs	r1, #1
 8007cde:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007ce2:	3a01      	subs	r2, #1
 8007ce4:	f803 4b01 	strb.w	r4, [r3], #1
 8007ce8:	d1f9      	bne.n	8007cde <memmove+0x9e>
 8007cea:	e7bd      	b.n	8007c68 <memmove+0x28>
 8007cec:	4603      	mov	r3, r0
 8007cee:	e7f5      	b.n	8007cdc <memmove+0x9c>

08007cf0 <memset>:
 8007cf0:	f010 0f03 	tst.w	r0, #3
 8007cf4:	b470      	push	{r4, r5, r6}
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	d042      	beq.n	8007d80 <memset+0x90>
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	d03e      	beq.n	8007d7c <memset+0x8c>
 8007cfe:	3a01      	subs	r2, #1
 8007d00:	b2cd      	uxtb	r5, r1
 8007d02:	e003      	b.n	8007d0c <memset+0x1c>
 8007d04:	1e54      	subs	r4, r2, #1
 8007d06:	2a00      	cmp	r2, #0
 8007d08:	d038      	beq.n	8007d7c <memset+0x8c>
 8007d0a:	4622      	mov	r2, r4
 8007d0c:	f803 5b01 	strb.w	r5, [r3], #1
 8007d10:	f013 0f03 	tst.w	r3, #3
 8007d14:	461c      	mov	r4, r3
 8007d16:	d1f5      	bne.n	8007d04 <memset+0x14>
 8007d18:	2a03      	cmp	r2, #3
 8007d1a:	d929      	bls.n	8007d70 <memset+0x80>
 8007d1c:	b2cd      	uxtb	r5, r1
 8007d1e:	2a0f      	cmp	r2, #15
 8007d20:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007d24:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007d28:	bf84      	itt	hi
 8007d2a:	4623      	movhi	r3, r4
 8007d2c:	4616      	movhi	r6, r2
 8007d2e:	d911      	bls.n	8007d54 <memset+0x64>
 8007d30:	3e10      	subs	r6, #16
 8007d32:	601d      	str	r5, [r3, #0]
 8007d34:	605d      	str	r5, [r3, #4]
 8007d36:	609d      	str	r5, [r3, #8]
 8007d38:	60dd      	str	r5, [r3, #12]
 8007d3a:	3310      	adds	r3, #16
 8007d3c:	2e0f      	cmp	r6, #15
 8007d3e:	d8f7      	bhi.n	8007d30 <memset+0x40>
 8007d40:	f1a2 0310 	sub.w	r3, r2, #16
 8007d44:	f023 030f 	bic.w	r3, r3, #15
 8007d48:	f002 020f 	and.w	r2, r2, #15
 8007d4c:	3310      	adds	r3, #16
 8007d4e:	2a03      	cmp	r2, #3
 8007d50:	441c      	add	r4, r3
 8007d52:	d90d      	bls.n	8007d70 <memset+0x80>
 8007d54:	4626      	mov	r6, r4
 8007d56:	4613      	mov	r3, r2
 8007d58:	3b04      	subs	r3, #4
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	f846 5b04 	str.w	r5, [r6], #4
 8007d60:	d8fa      	bhi.n	8007d58 <memset+0x68>
 8007d62:	1f13      	subs	r3, r2, #4
 8007d64:	f023 0303 	bic.w	r3, r3, #3
 8007d68:	3304      	adds	r3, #4
 8007d6a:	f002 0203 	and.w	r2, r2, #3
 8007d6e:	18e4      	adds	r4, r4, r3
 8007d70:	b2c9      	uxtb	r1, r1
 8007d72:	b11a      	cbz	r2, 8007d7c <memset+0x8c>
 8007d74:	3a01      	subs	r2, #1
 8007d76:	f804 1b01 	strb.w	r1, [r4], #1
 8007d7a:	d1fb      	bne.n	8007d74 <memset+0x84>
 8007d7c:	bc70      	pop	{r4, r5, r6}
 8007d7e:	4770      	bx	lr
 8007d80:	4604      	mov	r4, r0
 8007d82:	e7c9      	b.n	8007d18 <memset+0x28>

08007d84 <_realloc_r>:
 8007d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d88:	460c      	mov	r4, r1
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	4607      	mov	r7, r0
 8007d8e:	4690      	mov	r8, r2
 8007d90:	2900      	cmp	r1, #0
 8007d92:	f000 80fe 	beq.w	8007f92 <_realloc_r+0x20e>
 8007d96:	f108 050b 	add.w	r5, r8, #11
 8007d9a:	f7fe fc8b 	bl	80066b4 <__malloc_lock>
 8007d9e:	2d16      	cmp	r5, #22
 8007da0:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007da4:	d87d      	bhi.n	8007ea2 <_realloc_r+0x11e>
 8007da6:	2210      	movs	r2, #16
 8007da8:	2600      	movs	r6, #0
 8007daa:	4615      	mov	r5, r2
 8007dac:	4545      	cmp	r5, r8
 8007dae:	bf38      	it	cc
 8007db0:	f046 0601 	orrcc.w	r6, r6, #1
 8007db4:	2e00      	cmp	r6, #0
 8007db6:	f040 80f2 	bne.w	8007f9e <_realloc_r+0x21a>
 8007dba:	f021 0a03 	bic.w	sl, r1, #3
 8007dbe:	4592      	cmp	sl, r2
 8007dc0:	f1a4 0b08 	sub.w	fp, r4, #8
 8007dc4:	bfa8      	it	ge
 8007dc6:	4656      	movge	r6, sl
 8007dc8:	da55      	bge.n	8007e76 <_realloc_r+0xf2>
 8007dca:	4ba0      	ldr	r3, [pc, #640]	; (800804c <_realloc_r+0x2c8>)
 8007dcc:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8007dd0:	eb0b 000a 	add.w	r0, fp, sl
 8007dd4:	4584      	cmp	ip, r0
 8007dd6:	f000 80e7 	beq.w	8007fa8 <_realloc_r+0x224>
 8007dda:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8007dde:	f02e 0901 	bic.w	r9, lr, #1
 8007de2:	4481      	add	r9, r0
 8007de4:	f8d9 9004 	ldr.w	r9, [r9, #4]
 8007de8:	f019 0f01 	tst.w	r9, #1
 8007dec:	bf1c      	itt	ne
 8007dee:	46b6      	movne	lr, r6
 8007df0:	4670      	movne	r0, lr
 8007df2:	d05b      	beq.n	8007eac <_realloc_r+0x128>
 8007df4:	07c9      	lsls	r1, r1, #31
 8007df6:	d479      	bmi.n	8007eec <_realloc_r+0x168>
 8007df8:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8007dfc:	ebc1 090b 	rsb	r9, r1, fp
 8007e00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e04:	f021 0103 	bic.w	r1, r1, #3
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	f000 8097 	beq.w	8007f3c <_realloc_r+0x1b8>
 8007e0e:	4560      	cmp	r0, ip
 8007e10:	eb01 0c0a 	add.w	ip, r1, sl
 8007e14:	eb0e 060c 	add.w	r6, lr, ip
 8007e18:	f000 811a 	beq.w	8008050 <_realloc_r+0x2cc>
 8007e1c:	42b2      	cmp	r2, r6
 8007e1e:	f300 808f 	bgt.w	8007f40 <_realloc_r+0x1bc>
 8007e22:	68c3      	ldr	r3, [r0, #12]
 8007e24:	6882      	ldr	r2, [r0, #8]
 8007e26:	46c8      	mov	r8, r9
 8007e28:	609a      	str	r2, [r3, #8]
 8007e2a:	60d3      	str	r3, [r2, #12]
 8007e2c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007e30:	f858 1f08 	ldr.w	r1, [r8, #8]!
 8007e34:	f1aa 0204 	sub.w	r2, sl, #4
 8007e38:	2a24      	cmp	r2, #36	; 0x24
 8007e3a:	60cb      	str	r3, [r1, #12]
 8007e3c:	6099      	str	r1, [r3, #8]
 8007e3e:	f200 8144 	bhi.w	80080ca <_realloc_r+0x346>
 8007e42:	2a13      	cmp	r2, #19
 8007e44:	bf98      	it	ls
 8007e46:	4643      	movls	r3, r8
 8007e48:	d90b      	bls.n	8007e62 <_realloc_r+0xde>
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	f8c9 3008 	str.w	r3, [r9, #8]
 8007e50:	6863      	ldr	r3, [r4, #4]
 8007e52:	2a1b      	cmp	r2, #27
 8007e54:	f8c9 300c 	str.w	r3, [r9, #12]
 8007e58:	f200 8140 	bhi.w	80080dc <_realloc_r+0x358>
 8007e5c:	f109 0310 	add.w	r3, r9, #16
 8007e60:	3408      	adds	r4, #8
 8007e62:	6822      	ldr	r2, [r4, #0]
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	6862      	ldr	r2, [r4, #4]
 8007e68:	605a      	str	r2, [r3, #4]
 8007e6a:	68a2      	ldr	r2, [r4, #8]
 8007e6c:	609a      	str	r2, [r3, #8]
 8007e6e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e72:	4644      	mov	r4, r8
 8007e74:	46cb      	mov	fp, r9
 8007e76:	1b72      	subs	r2, r6, r5
 8007e78:	2a0f      	cmp	r2, #15
 8007e7a:	d822      	bhi.n	8007ec2 <_realloc_r+0x13e>
 8007e7c:	f001 0101 	and.w	r1, r1, #1
 8007e80:	eb0b 0306 	add.w	r3, fp, r6
 8007e84:	430e      	orrs	r6, r1
 8007e86:	f8cb 6004 	str.w	r6, [fp, #4]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	f042 0201 	orr.w	r2, r2, #1
 8007e90:	605a      	str	r2, [r3, #4]
 8007e92:	4638      	mov	r0, r7
 8007e94:	f7fe fc10 	bl	80066b8 <__malloc_unlock>
 8007e98:	46a0      	mov	r8, r4
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	b003      	add	sp, #12
 8007e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea2:	f025 0507 	bic.w	r5, r5, #7
 8007ea6:	462a      	mov	r2, r5
 8007ea8:	0fee      	lsrs	r6, r5, #31
 8007eaa:	e77f      	b.n	8007dac <_realloc_r+0x28>
 8007eac:	f02e 0e03 	bic.w	lr, lr, #3
 8007eb0:	eb0e 060a 	add.w	r6, lr, sl
 8007eb4:	42b2      	cmp	r2, r6
 8007eb6:	dc9d      	bgt.n	8007df4 <_realloc_r+0x70>
 8007eb8:	68c3      	ldr	r3, [r0, #12]
 8007eba:	6882      	ldr	r2, [r0, #8]
 8007ebc:	60d3      	str	r3, [r2, #12]
 8007ebe:	609a      	str	r2, [r3, #8]
 8007ec0:	e7d9      	b.n	8007e76 <_realloc_r+0xf2>
 8007ec2:	eb0b 0305 	add.w	r3, fp, r5
 8007ec6:	f001 0101 	and.w	r1, r1, #1
 8007eca:	1898      	adds	r0, r3, r2
 8007ecc:	430d      	orrs	r5, r1
 8007ece:	f042 0201 	orr.w	r2, r2, #1
 8007ed2:	f8cb 5004 	str.w	r5, [fp, #4]
 8007ed6:	605a      	str	r2, [r3, #4]
 8007ed8:	6842      	ldr	r2, [r0, #4]
 8007eda:	f042 0201 	orr.w	r2, r2, #1
 8007ede:	6042      	str	r2, [r0, #4]
 8007ee0:	f103 0108 	add.w	r1, r3, #8
 8007ee4:	4638      	mov	r0, r7
 8007ee6:	f7fd ffa3 	bl	8005e30 <_free_r>
 8007eea:	e7d2      	b.n	8007e92 <_realloc_r+0x10e>
 8007eec:	4641      	mov	r1, r8
 8007eee:	4638      	mov	r0, r7
 8007ef0:	f7fe f8aa 	bl	8006048 <_malloc_r>
 8007ef4:	4680      	mov	r8, r0
 8007ef6:	b1e8      	cbz	r0, 8007f34 <_realloc_r+0x1b0>
 8007ef8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007efc:	f021 0301 	bic.w	r3, r1, #1
 8007f00:	f1a0 0208 	sub.w	r2, r0, #8
 8007f04:	445b      	add	r3, fp
 8007f06:	429a      	cmp	r2, r3
 8007f08:	f000 80d9 	beq.w	80080be <_realloc_r+0x33a>
 8007f0c:	f1aa 0204 	sub.w	r2, sl, #4
 8007f10:	2a24      	cmp	r2, #36	; 0x24
 8007f12:	f200 8096 	bhi.w	8008042 <_realloc_r+0x2be>
 8007f16:	2a13      	cmp	r2, #19
 8007f18:	bf9c      	itt	ls
 8007f1a:	4603      	movls	r3, r0
 8007f1c:	4622      	movls	r2, r4
 8007f1e:	d863      	bhi.n	8007fe8 <_realloc_r+0x264>
 8007f20:	6811      	ldr	r1, [r2, #0]
 8007f22:	6019      	str	r1, [r3, #0]
 8007f24:	6851      	ldr	r1, [r2, #4]
 8007f26:	6059      	str	r1, [r3, #4]
 8007f28:	6892      	ldr	r2, [r2, #8]
 8007f2a:	609a      	str	r2, [r3, #8]
 8007f2c:	4638      	mov	r0, r7
 8007f2e:	4621      	mov	r1, r4
 8007f30:	f7fd ff7e 	bl	8005e30 <_free_r>
 8007f34:	4638      	mov	r0, r7
 8007f36:	f7fe fbbf 	bl	80066b8 <__malloc_unlock>
 8007f3a:	e7ae      	b.n	8007e9a <_realloc_r+0x116>
 8007f3c:	eb01 0c0a 	add.w	ip, r1, sl
 8007f40:	4562      	cmp	r2, ip
 8007f42:	dcd3      	bgt.n	8007eec <_realloc_r+0x168>
 8007f44:	464e      	mov	r6, r9
 8007f46:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007f4a:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8007f4e:	f1aa 0204 	sub.w	r2, sl, #4
 8007f52:	2a24      	cmp	r2, #36	; 0x24
 8007f54:	60cb      	str	r3, [r1, #12]
 8007f56:	6099      	str	r1, [r3, #8]
 8007f58:	d865      	bhi.n	8008026 <_realloc_r+0x2a2>
 8007f5a:	2a13      	cmp	r2, #19
 8007f5c:	bf98      	it	ls
 8007f5e:	4633      	movls	r3, r6
 8007f60:	d90b      	bls.n	8007f7a <_realloc_r+0x1f6>
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	f8c9 3008 	str.w	r3, [r9, #8]
 8007f68:	6863      	ldr	r3, [r4, #4]
 8007f6a:	2a1b      	cmp	r2, #27
 8007f6c:	f8c9 300c 	str.w	r3, [r9, #12]
 8007f70:	f200 80c0 	bhi.w	80080f4 <_realloc_r+0x370>
 8007f74:	f109 0310 	add.w	r3, r9, #16
 8007f78:	3408      	adds	r4, #8
 8007f7a:	6822      	ldr	r2, [r4, #0]
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	6862      	ldr	r2, [r4, #4]
 8007f80:	605a      	str	r2, [r3, #4]
 8007f82:	68a2      	ldr	r2, [r4, #8]
 8007f84:	609a      	str	r2, [r3, #8]
 8007f86:	4634      	mov	r4, r6
 8007f88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f8c:	4666      	mov	r6, ip
 8007f8e:	46cb      	mov	fp, r9
 8007f90:	e771      	b.n	8007e76 <_realloc_r+0xf2>
 8007f92:	4611      	mov	r1, r2
 8007f94:	b003      	add	sp, #12
 8007f96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9a:	f7fe b855 	b.w	8006048 <_malloc_r>
 8007f9e:	230c      	movs	r3, #12
 8007fa0:	603b      	str	r3, [r7, #0]
 8007fa2:	f04f 0800 	mov.w	r8, #0
 8007fa6:	e778      	b.n	8007e9a <_realloc_r+0x116>
 8007fa8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007fac:	f026 0e03 	bic.w	lr, r6, #3
 8007fb0:	eb0e 000a 	add.w	r0, lr, sl
 8007fb4:	f105 0610 	add.w	r6, r5, #16
 8007fb8:	42b0      	cmp	r0, r6
 8007fba:	bfb8      	it	lt
 8007fbc:	4660      	movlt	r0, ip
 8007fbe:	f6ff af19 	blt.w	8007df4 <_realloc_r+0x70>
 8007fc2:	eb0b 0205 	add.w	r2, fp, r5
 8007fc6:	1b41      	subs	r1, r0, r5
 8007fc8:	f041 0101 	orr.w	r1, r1, #1
 8007fcc:	6051      	str	r1, [r2, #4]
 8007fce:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007fd2:	609a      	str	r2, [r3, #8]
 8007fd4:	f001 0301 	and.w	r3, r1, #1
 8007fd8:	431d      	orrs	r5, r3
 8007fda:	f844 5c04 	str.w	r5, [r4, #-4]
 8007fde:	4638      	mov	r0, r7
 8007fe0:	f7fe fb6a 	bl	80066b8 <__malloc_unlock>
 8007fe4:	46a0      	mov	r8, r4
 8007fe6:	e758      	b.n	8007e9a <_realloc_r+0x116>
 8007fe8:	6823      	ldr	r3, [r4, #0]
 8007fea:	6003      	str	r3, [r0, #0]
 8007fec:	6863      	ldr	r3, [r4, #4]
 8007fee:	2a1b      	cmp	r2, #27
 8007ff0:	6043      	str	r3, [r0, #4]
 8007ff2:	bf9c      	itt	ls
 8007ff4:	f104 0208 	addls.w	r2, r4, #8
 8007ff8:	f100 0308 	addls.w	r3, r0, #8
 8007ffc:	d990      	bls.n	8007f20 <_realloc_r+0x19c>
 8007ffe:	68a3      	ldr	r3, [r4, #8]
 8008000:	6083      	str	r3, [r0, #8]
 8008002:	68e3      	ldr	r3, [r4, #12]
 8008004:	2a24      	cmp	r2, #36	; 0x24
 8008006:	60c3      	str	r3, [r0, #12]
 8008008:	bf03      	ittte	eq
 800800a:	6923      	ldreq	r3, [r4, #16]
 800800c:	6103      	streq	r3, [r0, #16]
 800800e:	6962      	ldreq	r2, [r4, #20]
 8008010:	f100 0310 	addne.w	r3, r0, #16
 8008014:	bf09      	itett	eq
 8008016:	6142      	streq	r2, [r0, #20]
 8008018:	f104 0210 	addne.w	r2, r4, #16
 800801c:	f100 0318 	addeq.w	r3, r0, #24
 8008020:	f104 0218 	addeq.w	r2, r4, #24
 8008024:	e77c      	b.n	8007f20 <_realloc_r+0x19c>
 8008026:	4621      	mov	r1, r4
 8008028:	4630      	mov	r0, r6
 800802a:	f8cd c004 	str.w	ip, [sp, #4]
 800802e:	f7ff fe07 	bl	8007c40 <memmove>
 8008032:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008036:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800803a:	4634      	mov	r4, r6
 800803c:	46cb      	mov	fp, r9
 800803e:	4666      	mov	r6, ip
 8008040:	e719      	b.n	8007e76 <_realloc_r+0xf2>
 8008042:	4621      	mov	r1, r4
 8008044:	f7ff fdfc 	bl	8007c40 <memmove>
 8008048:	e770      	b.n	8007f2c <_realloc_r+0x1a8>
 800804a:	bf00      	nop
 800804c:	2000054c 	.word	0x2000054c
 8008050:	f105 0110 	add.w	r1, r5, #16
 8008054:	428e      	cmp	r6, r1
 8008056:	f6ff af73 	blt.w	8007f40 <_realloc_r+0x1bc>
 800805a:	46c8      	mov	r8, r9
 800805c:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8008060:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8008064:	f1aa 0204 	sub.w	r2, sl, #4
 8008068:	2a24      	cmp	r2, #36	; 0x24
 800806a:	60c1      	str	r1, [r0, #12]
 800806c:	6088      	str	r0, [r1, #8]
 800806e:	d861      	bhi.n	8008134 <_realloc_r+0x3b0>
 8008070:	2a13      	cmp	r2, #19
 8008072:	bf98      	it	ls
 8008074:	4642      	movls	r2, r8
 8008076:	d90a      	bls.n	800808e <_realloc_r+0x30a>
 8008078:	6821      	ldr	r1, [r4, #0]
 800807a:	f8c9 1008 	str.w	r1, [r9, #8]
 800807e:	6861      	ldr	r1, [r4, #4]
 8008080:	2a1b      	cmp	r2, #27
 8008082:	f8c9 100c 	str.w	r1, [r9, #12]
 8008086:	d85c      	bhi.n	8008142 <_realloc_r+0x3be>
 8008088:	f109 0210 	add.w	r2, r9, #16
 800808c:	3408      	adds	r4, #8
 800808e:	6821      	ldr	r1, [r4, #0]
 8008090:	6011      	str	r1, [r2, #0]
 8008092:	6861      	ldr	r1, [r4, #4]
 8008094:	6051      	str	r1, [r2, #4]
 8008096:	68a1      	ldr	r1, [r4, #8]
 8008098:	6091      	str	r1, [r2, #8]
 800809a:	eb09 0205 	add.w	r2, r9, r5
 800809e:	1b71      	subs	r1, r6, r5
 80080a0:	f041 0101 	orr.w	r1, r1, #1
 80080a4:	6051      	str	r1, [r2, #4]
 80080a6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80080aa:	609a      	str	r2, [r3, #8]
 80080ac:	f001 0301 	and.w	r3, r1, #1
 80080b0:	431d      	orrs	r5, r3
 80080b2:	f8c9 5004 	str.w	r5, [r9, #4]
 80080b6:	4638      	mov	r0, r7
 80080b8:	f7fe fafe 	bl	80066b8 <__malloc_unlock>
 80080bc:	e6ed      	b.n	8007e9a <_realloc_r+0x116>
 80080be:	f850 6c04 	ldr.w	r6, [r0, #-4]
 80080c2:	f026 0603 	bic.w	r6, r6, #3
 80080c6:	4456      	add	r6, sl
 80080c8:	e6d5      	b.n	8007e76 <_realloc_r+0xf2>
 80080ca:	4621      	mov	r1, r4
 80080cc:	4640      	mov	r0, r8
 80080ce:	f7ff fdb7 	bl	8007c40 <memmove>
 80080d2:	4644      	mov	r4, r8
 80080d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80080d8:	46cb      	mov	fp, r9
 80080da:	e6cc      	b.n	8007e76 <_realloc_r+0xf2>
 80080dc:	68a3      	ldr	r3, [r4, #8]
 80080de:	f8c9 3010 	str.w	r3, [r9, #16]
 80080e2:	68e3      	ldr	r3, [r4, #12]
 80080e4:	2a24      	cmp	r2, #36	; 0x24
 80080e6:	f8c9 3014 	str.w	r3, [r9, #20]
 80080ea:	d00f      	beq.n	800810c <_realloc_r+0x388>
 80080ec:	f109 0318 	add.w	r3, r9, #24
 80080f0:	3410      	adds	r4, #16
 80080f2:	e6b6      	b.n	8007e62 <_realloc_r+0xde>
 80080f4:	68a3      	ldr	r3, [r4, #8]
 80080f6:	f8c9 3010 	str.w	r3, [r9, #16]
 80080fa:	68e3      	ldr	r3, [r4, #12]
 80080fc:	2a24      	cmp	r2, #36	; 0x24
 80080fe:	f8c9 3014 	str.w	r3, [r9, #20]
 8008102:	d00d      	beq.n	8008120 <_realloc_r+0x39c>
 8008104:	f109 0318 	add.w	r3, r9, #24
 8008108:	3410      	adds	r4, #16
 800810a:	e736      	b.n	8007f7a <_realloc_r+0x1f6>
 800810c:	6923      	ldr	r3, [r4, #16]
 800810e:	f8c9 3018 	str.w	r3, [r9, #24]
 8008112:	6962      	ldr	r2, [r4, #20]
 8008114:	f109 0320 	add.w	r3, r9, #32
 8008118:	f8c9 201c 	str.w	r2, [r9, #28]
 800811c:	3418      	adds	r4, #24
 800811e:	e6a0      	b.n	8007e62 <_realloc_r+0xde>
 8008120:	6923      	ldr	r3, [r4, #16]
 8008122:	f8c9 3018 	str.w	r3, [r9, #24]
 8008126:	6962      	ldr	r2, [r4, #20]
 8008128:	f109 0320 	add.w	r3, r9, #32
 800812c:	f8c9 201c 	str.w	r2, [r9, #28]
 8008130:	3418      	adds	r4, #24
 8008132:	e722      	b.n	8007f7a <_realloc_r+0x1f6>
 8008134:	4640      	mov	r0, r8
 8008136:	4621      	mov	r1, r4
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	f7ff fd81 	bl	8007c40 <memmove>
 800813e:	9b01      	ldr	r3, [sp, #4]
 8008140:	e7ab      	b.n	800809a <_realloc_r+0x316>
 8008142:	68a1      	ldr	r1, [r4, #8]
 8008144:	f8c9 1010 	str.w	r1, [r9, #16]
 8008148:	68e1      	ldr	r1, [r4, #12]
 800814a:	2a24      	cmp	r2, #36	; 0x24
 800814c:	f8c9 1014 	str.w	r1, [r9, #20]
 8008150:	d003      	beq.n	800815a <_realloc_r+0x3d6>
 8008152:	f109 0218 	add.w	r2, r9, #24
 8008156:	3410      	adds	r4, #16
 8008158:	e799      	b.n	800808e <_realloc_r+0x30a>
 800815a:	6922      	ldr	r2, [r4, #16]
 800815c:	f8c9 2018 	str.w	r2, [r9, #24]
 8008160:	6961      	ldr	r1, [r4, #20]
 8008162:	f109 0220 	add.w	r2, r9, #32
 8008166:	f8c9 101c 	str.w	r1, [r9, #28]
 800816a:	3418      	adds	r4, #24
 800816c:	e78f      	b.n	800808e <_realloc_r+0x30a>
 800816e:	bf00      	nop

08008170 <__aeabi_drsub>:
 8008170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008174:	e002      	b.n	800817c <__adddf3>
 8008176:	bf00      	nop

08008178 <__aeabi_dsub>:
 8008178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800817c <__adddf3>:
 800817c:	b530      	push	{r4, r5, lr}
 800817e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008186:	ea94 0f05 	teq	r4, r5
 800818a:	bf08      	it	eq
 800818c:	ea90 0f02 	teqeq	r0, r2
 8008190:	bf1f      	itttt	ne
 8008192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800819a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800819e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80081a2:	f000 80e2 	beq.w	800836a <__adddf3+0x1ee>
 80081a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80081aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80081ae:	bfb8      	it	lt
 80081b0:	426d      	neglt	r5, r5
 80081b2:	dd0c      	ble.n	80081ce <__adddf3+0x52>
 80081b4:	442c      	add	r4, r5
 80081b6:	ea80 0202 	eor.w	r2, r0, r2
 80081ba:	ea81 0303 	eor.w	r3, r1, r3
 80081be:	ea82 0000 	eor.w	r0, r2, r0
 80081c2:	ea83 0101 	eor.w	r1, r3, r1
 80081c6:	ea80 0202 	eor.w	r2, r0, r2
 80081ca:	ea81 0303 	eor.w	r3, r1, r3
 80081ce:	2d36      	cmp	r5, #54	; 0x36
 80081d0:	bf88      	it	hi
 80081d2:	bd30      	pophi	{r4, r5, pc}
 80081d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80081d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80081dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80081e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80081e4:	d002      	beq.n	80081ec <__adddf3+0x70>
 80081e6:	4240      	negs	r0, r0
 80081e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80081ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80081f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80081f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80081f8:	d002      	beq.n	8008200 <__adddf3+0x84>
 80081fa:	4252      	negs	r2, r2
 80081fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008200:	ea94 0f05 	teq	r4, r5
 8008204:	f000 80a7 	beq.w	8008356 <__adddf3+0x1da>
 8008208:	f1a4 0401 	sub.w	r4, r4, #1
 800820c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008210:	db0d      	blt.n	800822e <__adddf3+0xb2>
 8008212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008216:	fa22 f205 	lsr.w	r2, r2, r5
 800821a:	1880      	adds	r0, r0, r2
 800821c:	f141 0100 	adc.w	r1, r1, #0
 8008220:	fa03 f20e 	lsl.w	r2, r3, lr
 8008224:	1880      	adds	r0, r0, r2
 8008226:	fa43 f305 	asr.w	r3, r3, r5
 800822a:	4159      	adcs	r1, r3
 800822c:	e00e      	b.n	800824c <__adddf3+0xd0>
 800822e:	f1a5 0520 	sub.w	r5, r5, #32
 8008232:	f10e 0e20 	add.w	lr, lr, #32
 8008236:	2a01      	cmp	r2, #1
 8008238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800823c:	bf28      	it	cs
 800823e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008242:	fa43 f305 	asr.w	r3, r3, r5
 8008246:	18c0      	adds	r0, r0, r3
 8008248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800824c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008250:	d507      	bpl.n	8008262 <__adddf3+0xe6>
 8008252:	f04f 0e00 	mov.w	lr, #0
 8008256:	f1dc 0c00 	rsbs	ip, ip, #0
 800825a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800825e:	eb6e 0101 	sbc.w	r1, lr, r1
 8008262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008266:	d31b      	bcc.n	80082a0 <__adddf3+0x124>
 8008268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800826c:	d30c      	bcc.n	8008288 <__adddf3+0x10c>
 800826e:	0849      	lsrs	r1, r1, #1
 8008270:	ea5f 0030 	movs.w	r0, r0, rrx
 8008274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008278:	f104 0401 	add.w	r4, r4, #1
 800827c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008284:	f080 809a 	bcs.w	80083bc <__adddf3+0x240>
 8008288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800828c:	bf08      	it	eq
 800828e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008292:	f150 0000 	adcs.w	r0, r0, #0
 8008296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800829a:	ea41 0105 	orr.w	r1, r1, r5
 800829e:	bd30      	pop	{r4, r5, pc}
 80082a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80082a4:	4140      	adcs	r0, r0
 80082a6:	eb41 0101 	adc.w	r1, r1, r1
 80082aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80082ae:	f1a4 0401 	sub.w	r4, r4, #1
 80082b2:	d1e9      	bne.n	8008288 <__adddf3+0x10c>
 80082b4:	f091 0f00 	teq	r1, #0
 80082b8:	bf04      	itt	eq
 80082ba:	4601      	moveq	r1, r0
 80082bc:	2000      	moveq	r0, #0
 80082be:	fab1 f381 	clz	r3, r1
 80082c2:	bf08      	it	eq
 80082c4:	3320      	addeq	r3, #32
 80082c6:	f1a3 030b 	sub.w	r3, r3, #11
 80082ca:	f1b3 0220 	subs.w	r2, r3, #32
 80082ce:	da0c      	bge.n	80082ea <__adddf3+0x16e>
 80082d0:	320c      	adds	r2, #12
 80082d2:	dd08      	ble.n	80082e6 <__adddf3+0x16a>
 80082d4:	f102 0c14 	add.w	ip, r2, #20
 80082d8:	f1c2 020c 	rsb	r2, r2, #12
 80082dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80082e0:	fa21 f102 	lsr.w	r1, r1, r2
 80082e4:	e00c      	b.n	8008300 <__adddf3+0x184>
 80082e6:	f102 0214 	add.w	r2, r2, #20
 80082ea:	bfd8      	it	le
 80082ec:	f1c2 0c20 	rsble	ip, r2, #32
 80082f0:	fa01 f102 	lsl.w	r1, r1, r2
 80082f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80082f8:	bfdc      	itt	le
 80082fa:	ea41 010c 	orrle.w	r1, r1, ip
 80082fe:	4090      	lslle	r0, r2
 8008300:	1ae4      	subs	r4, r4, r3
 8008302:	bfa2      	ittt	ge
 8008304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008308:	4329      	orrge	r1, r5
 800830a:	bd30      	popge	{r4, r5, pc}
 800830c:	ea6f 0404 	mvn.w	r4, r4
 8008310:	3c1f      	subs	r4, #31
 8008312:	da1c      	bge.n	800834e <__adddf3+0x1d2>
 8008314:	340c      	adds	r4, #12
 8008316:	dc0e      	bgt.n	8008336 <__adddf3+0x1ba>
 8008318:	f104 0414 	add.w	r4, r4, #20
 800831c:	f1c4 0220 	rsb	r2, r4, #32
 8008320:	fa20 f004 	lsr.w	r0, r0, r4
 8008324:	fa01 f302 	lsl.w	r3, r1, r2
 8008328:	ea40 0003 	orr.w	r0, r0, r3
 800832c:	fa21 f304 	lsr.w	r3, r1, r4
 8008330:	ea45 0103 	orr.w	r1, r5, r3
 8008334:	bd30      	pop	{r4, r5, pc}
 8008336:	f1c4 040c 	rsb	r4, r4, #12
 800833a:	f1c4 0220 	rsb	r2, r4, #32
 800833e:	fa20 f002 	lsr.w	r0, r0, r2
 8008342:	fa01 f304 	lsl.w	r3, r1, r4
 8008346:	ea40 0003 	orr.w	r0, r0, r3
 800834a:	4629      	mov	r1, r5
 800834c:	bd30      	pop	{r4, r5, pc}
 800834e:	fa21 f004 	lsr.w	r0, r1, r4
 8008352:	4629      	mov	r1, r5
 8008354:	bd30      	pop	{r4, r5, pc}
 8008356:	f094 0f00 	teq	r4, #0
 800835a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800835e:	bf06      	itte	eq
 8008360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008364:	3401      	addeq	r4, #1
 8008366:	3d01      	subne	r5, #1
 8008368:	e74e      	b.n	8008208 <__adddf3+0x8c>
 800836a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800836e:	bf18      	it	ne
 8008370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008374:	d029      	beq.n	80083ca <__adddf3+0x24e>
 8008376:	ea94 0f05 	teq	r4, r5
 800837a:	bf08      	it	eq
 800837c:	ea90 0f02 	teqeq	r0, r2
 8008380:	d005      	beq.n	800838e <__adddf3+0x212>
 8008382:	ea54 0c00 	orrs.w	ip, r4, r0
 8008386:	bf04      	itt	eq
 8008388:	4619      	moveq	r1, r3
 800838a:	4610      	moveq	r0, r2
 800838c:	bd30      	pop	{r4, r5, pc}
 800838e:	ea91 0f03 	teq	r1, r3
 8008392:	bf1e      	ittt	ne
 8008394:	2100      	movne	r1, #0
 8008396:	2000      	movne	r0, #0
 8008398:	bd30      	popne	{r4, r5, pc}
 800839a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800839e:	d105      	bne.n	80083ac <__adddf3+0x230>
 80083a0:	0040      	lsls	r0, r0, #1
 80083a2:	4149      	adcs	r1, r1
 80083a4:	bf28      	it	cs
 80083a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80083aa:	bd30      	pop	{r4, r5, pc}
 80083ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80083b0:	bf3c      	itt	cc
 80083b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80083b6:	bd30      	popcc	{r4, r5, pc}
 80083b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80083c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083c4:	f04f 0000 	mov.w	r0, #0
 80083c8:	bd30      	pop	{r4, r5, pc}
 80083ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80083ce:	bf1a      	itte	ne
 80083d0:	4619      	movne	r1, r3
 80083d2:	4610      	movne	r0, r2
 80083d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80083d8:	bf1c      	itt	ne
 80083da:	460b      	movne	r3, r1
 80083dc:	4602      	movne	r2, r0
 80083de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80083e2:	bf06      	itte	eq
 80083e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80083e8:	ea91 0f03 	teqeq	r1, r3
 80083ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80083f0:	bd30      	pop	{r4, r5, pc}
 80083f2:	bf00      	nop

080083f4 <__aeabi_ui2d>:
 80083f4:	f090 0f00 	teq	r0, #0
 80083f8:	bf04      	itt	eq
 80083fa:	2100      	moveq	r1, #0
 80083fc:	4770      	bxeq	lr
 80083fe:	b530      	push	{r4, r5, lr}
 8008400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008408:	f04f 0500 	mov.w	r5, #0
 800840c:	f04f 0100 	mov.w	r1, #0
 8008410:	e750      	b.n	80082b4 <__adddf3+0x138>
 8008412:	bf00      	nop

08008414 <__aeabi_i2d>:
 8008414:	f090 0f00 	teq	r0, #0
 8008418:	bf04      	itt	eq
 800841a:	2100      	moveq	r1, #0
 800841c:	4770      	bxeq	lr
 800841e:	b530      	push	{r4, r5, lr}
 8008420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800842c:	bf48      	it	mi
 800842e:	4240      	negmi	r0, r0
 8008430:	f04f 0100 	mov.w	r1, #0
 8008434:	e73e      	b.n	80082b4 <__adddf3+0x138>
 8008436:	bf00      	nop

08008438 <__aeabi_f2d>:
 8008438:	0042      	lsls	r2, r0, #1
 800843a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800843e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008446:	bf1f      	itttt	ne
 8008448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800844c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008454:	4770      	bxne	lr
 8008456:	f092 0f00 	teq	r2, #0
 800845a:	bf14      	ite	ne
 800845c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008460:	4770      	bxeq	lr
 8008462:	b530      	push	{r4, r5, lr}
 8008464:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800846c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008470:	e720      	b.n	80082b4 <__adddf3+0x138>
 8008472:	bf00      	nop

08008474 <__aeabi_ul2d>:
 8008474:	ea50 0201 	orrs.w	r2, r0, r1
 8008478:	bf08      	it	eq
 800847a:	4770      	bxeq	lr
 800847c:	b530      	push	{r4, r5, lr}
 800847e:	f04f 0500 	mov.w	r5, #0
 8008482:	e00a      	b.n	800849a <__aeabi_l2d+0x16>

08008484 <__aeabi_l2d>:
 8008484:	ea50 0201 	orrs.w	r2, r0, r1
 8008488:	bf08      	it	eq
 800848a:	4770      	bxeq	lr
 800848c:	b530      	push	{r4, r5, lr}
 800848e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008492:	d502      	bpl.n	800849a <__aeabi_l2d+0x16>
 8008494:	4240      	negs	r0, r0
 8008496:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800849a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800849e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80084a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80084a6:	f43f aedc 	beq.w	8008262 <__adddf3+0xe6>
 80084aa:	f04f 0203 	mov.w	r2, #3
 80084ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80084b2:	bf18      	it	ne
 80084b4:	3203      	addne	r2, #3
 80084b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80084ba:	bf18      	it	ne
 80084bc:	3203      	addne	r2, #3
 80084be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80084c2:	f1c2 0320 	rsb	r3, r2, #32
 80084c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80084ca:	fa20 f002 	lsr.w	r0, r0, r2
 80084ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80084d2:	ea40 000e 	orr.w	r0, r0, lr
 80084d6:	fa21 f102 	lsr.w	r1, r1, r2
 80084da:	4414      	add	r4, r2
 80084dc:	e6c1      	b.n	8008262 <__adddf3+0xe6>
 80084de:	bf00      	nop

080084e0 <__aeabi_dmul>:
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80084e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80084ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80084ee:	bf1d      	ittte	ne
 80084f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80084f4:	ea94 0f0c 	teqne	r4, ip
 80084f8:	ea95 0f0c 	teqne	r5, ip
 80084fc:	f000 f8de 	bleq	80086bc <__aeabi_dmul+0x1dc>
 8008500:	442c      	add	r4, r5
 8008502:	ea81 0603 	eor.w	r6, r1, r3
 8008506:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800850a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800850e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008512:	bf18      	it	ne
 8008514:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008518:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800851c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008520:	d038      	beq.n	8008594 <__aeabi_dmul+0xb4>
 8008522:	fba0 ce02 	umull	ip, lr, r0, r2
 8008526:	f04f 0500 	mov.w	r5, #0
 800852a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800852e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008532:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008536:	f04f 0600 	mov.w	r6, #0
 800853a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800853e:	f09c 0f00 	teq	ip, #0
 8008542:	bf18      	it	ne
 8008544:	f04e 0e01 	orrne.w	lr, lr, #1
 8008548:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800854c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008550:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008554:	d204      	bcs.n	8008560 <__aeabi_dmul+0x80>
 8008556:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800855a:	416d      	adcs	r5, r5
 800855c:	eb46 0606 	adc.w	r6, r6, r6
 8008560:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008564:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008568:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800856c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008570:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008574:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008578:	bf88      	it	hi
 800857a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800857e:	d81e      	bhi.n	80085be <__aeabi_dmul+0xde>
 8008580:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008584:	bf08      	it	eq
 8008586:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800858a:	f150 0000 	adcs.w	r0, r0, #0
 800858e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008598:	ea46 0101 	orr.w	r1, r6, r1
 800859c:	ea40 0002 	orr.w	r0, r0, r2
 80085a0:	ea81 0103 	eor.w	r1, r1, r3
 80085a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80085a8:	bfc2      	ittt	gt
 80085aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80085ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80085b2:	bd70      	popgt	{r4, r5, r6, pc}
 80085b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80085b8:	f04f 0e00 	mov.w	lr, #0
 80085bc:	3c01      	subs	r4, #1
 80085be:	f300 80ab 	bgt.w	8008718 <__aeabi_dmul+0x238>
 80085c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80085c6:	bfde      	ittt	le
 80085c8:	2000      	movle	r0, #0
 80085ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80085ce:	bd70      	pople	{r4, r5, r6, pc}
 80085d0:	f1c4 0400 	rsb	r4, r4, #0
 80085d4:	3c20      	subs	r4, #32
 80085d6:	da35      	bge.n	8008644 <__aeabi_dmul+0x164>
 80085d8:	340c      	adds	r4, #12
 80085da:	dc1b      	bgt.n	8008614 <__aeabi_dmul+0x134>
 80085dc:	f104 0414 	add.w	r4, r4, #20
 80085e0:	f1c4 0520 	rsb	r5, r4, #32
 80085e4:	fa00 f305 	lsl.w	r3, r0, r5
 80085e8:	fa20 f004 	lsr.w	r0, r0, r4
 80085ec:	fa01 f205 	lsl.w	r2, r1, r5
 80085f0:	ea40 0002 	orr.w	r0, r0, r2
 80085f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80085f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80085fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008600:	fa21 f604 	lsr.w	r6, r1, r4
 8008604:	eb42 0106 	adc.w	r1, r2, r6
 8008608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800860c:	bf08      	it	eq
 800860e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008612:	bd70      	pop	{r4, r5, r6, pc}
 8008614:	f1c4 040c 	rsb	r4, r4, #12
 8008618:	f1c4 0520 	rsb	r5, r4, #32
 800861c:	fa00 f304 	lsl.w	r3, r0, r4
 8008620:	fa20 f005 	lsr.w	r0, r0, r5
 8008624:	fa01 f204 	lsl.w	r2, r1, r4
 8008628:	ea40 0002 	orr.w	r0, r0, r2
 800862c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008630:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008634:	f141 0100 	adc.w	r1, r1, #0
 8008638:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800863c:	bf08      	it	eq
 800863e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008642:	bd70      	pop	{r4, r5, r6, pc}
 8008644:	f1c4 0520 	rsb	r5, r4, #32
 8008648:	fa00 f205 	lsl.w	r2, r0, r5
 800864c:	ea4e 0e02 	orr.w	lr, lr, r2
 8008650:	fa20 f304 	lsr.w	r3, r0, r4
 8008654:	fa01 f205 	lsl.w	r2, r1, r5
 8008658:	ea43 0302 	orr.w	r3, r3, r2
 800865c:	fa21 f004 	lsr.w	r0, r1, r4
 8008660:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008664:	fa21 f204 	lsr.w	r2, r1, r4
 8008668:	ea20 0002 	bic.w	r0, r0, r2
 800866c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008674:	bf08      	it	eq
 8008676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800867a:	bd70      	pop	{r4, r5, r6, pc}
 800867c:	f094 0f00 	teq	r4, #0
 8008680:	d10f      	bne.n	80086a2 <__aeabi_dmul+0x1c2>
 8008682:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008686:	0040      	lsls	r0, r0, #1
 8008688:	eb41 0101 	adc.w	r1, r1, r1
 800868c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008690:	bf08      	it	eq
 8008692:	3c01      	subeq	r4, #1
 8008694:	d0f7      	beq.n	8008686 <__aeabi_dmul+0x1a6>
 8008696:	ea41 0106 	orr.w	r1, r1, r6
 800869a:	f095 0f00 	teq	r5, #0
 800869e:	bf18      	it	ne
 80086a0:	4770      	bxne	lr
 80086a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80086a6:	0052      	lsls	r2, r2, #1
 80086a8:	eb43 0303 	adc.w	r3, r3, r3
 80086ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80086b0:	bf08      	it	eq
 80086b2:	3d01      	subeq	r5, #1
 80086b4:	d0f7      	beq.n	80086a6 <__aeabi_dmul+0x1c6>
 80086b6:	ea43 0306 	orr.w	r3, r3, r6
 80086ba:	4770      	bx	lr
 80086bc:	ea94 0f0c 	teq	r4, ip
 80086c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80086c4:	bf18      	it	ne
 80086c6:	ea95 0f0c 	teqne	r5, ip
 80086ca:	d00c      	beq.n	80086e6 <__aeabi_dmul+0x206>
 80086cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80086d0:	bf18      	it	ne
 80086d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80086d6:	d1d1      	bne.n	800867c <__aeabi_dmul+0x19c>
 80086d8:	ea81 0103 	eor.w	r1, r1, r3
 80086dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086e0:	f04f 0000 	mov.w	r0, #0
 80086e4:	bd70      	pop	{r4, r5, r6, pc}
 80086e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80086ea:	bf06      	itte	eq
 80086ec:	4610      	moveq	r0, r2
 80086ee:	4619      	moveq	r1, r3
 80086f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80086f4:	d019      	beq.n	800872a <__aeabi_dmul+0x24a>
 80086f6:	ea94 0f0c 	teq	r4, ip
 80086fa:	d102      	bne.n	8008702 <__aeabi_dmul+0x222>
 80086fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008700:	d113      	bne.n	800872a <__aeabi_dmul+0x24a>
 8008702:	ea95 0f0c 	teq	r5, ip
 8008706:	d105      	bne.n	8008714 <__aeabi_dmul+0x234>
 8008708:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800870c:	bf1c      	itt	ne
 800870e:	4610      	movne	r0, r2
 8008710:	4619      	movne	r1, r3
 8008712:	d10a      	bne.n	800872a <__aeabi_dmul+0x24a>
 8008714:	ea81 0103 	eor.w	r1, r1, r3
 8008718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800871c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008720:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008724:	f04f 0000 	mov.w	r0, #0
 8008728:	bd70      	pop	{r4, r5, r6, pc}
 800872a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800872e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008732:	bd70      	pop	{r4, r5, r6, pc}

08008734 <__aeabi_ddiv>:
 8008734:	b570      	push	{r4, r5, r6, lr}
 8008736:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800873a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800873e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008742:	bf1d      	ittte	ne
 8008744:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008748:	ea94 0f0c 	teqne	r4, ip
 800874c:	ea95 0f0c 	teqne	r5, ip
 8008750:	f000 f8a7 	bleq	80088a2 <__aeabi_ddiv+0x16e>
 8008754:	eba4 0405 	sub.w	r4, r4, r5
 8008758:	ea81 0e03 	eor.w	lr, r1, r3
 800875c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008760:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008764:	f000 8088 	beq.w	8008878 <__aeabi_ddiv+0x144>
 8008768:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800876c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008770:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008774:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008778:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800877c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008780:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008784:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008788:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800878c:	429d      	cmp	r5, r3
 800878e:	bf08      	it	eq
 8008790:	4296      	cmpeq	r6, r2
 8008792:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8008796:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800879a:	d202      	bcs.n	80087a2 <__aeabi_ddiv+0x6e>
 800879c:	085b      	lsrs	r3, r3, #1
 800879e:	ea4f 0232 	mov.w	r2, r2, rrx
 80087a2:	1ab6      	subs	r6, r6, r2
 80087a4:	eb65 0503 	sbc.w	r5, r5, r3
 80087a8:	085b      	lsrs	r3, r3, #1
 80087aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80087ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80087b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80087b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80087ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087be:	bf22      	ittt	cs
 80087c0:	1ab6      	subcs	r6, r6, r2
 80087c2:	4675      	movcs	r5, lr
 80087c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80087c8:	085b      	lsrs	r3, r3, #1
 80087ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80087ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80087d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087d6:	bf22      	ittt	cs
 80087d8:	1ab6      	subcs	r6, r6, r2
 80087da:	4675      	movcs	r5, lr
 80087dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80087e0:	085b      	lsrs	r3, r3, #1
 80087e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80087e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80087ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087ee:	bf22      	ittt	cs
 80087f0:	1ab6      	subcs	r6, r6, r2
 80087f2:	4675      	movcs	r5, lr
 80087f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80087f8:	085b      	lsrs	r3, r3, #1
 80087fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80087fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8008802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008806:	bf22      	ittt	cs
 8008808:	1ab6      	subcs	r6, r6, r2
 800880a:	4675      	movcs	r5, lr
 800880c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008810:	ea55 0e06 	orrs.w	lr, r5, r6
 8008814:	d018      	beq.n	8008848 <__aeabi_ddiv+0x114>
 8008816:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800881a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800881e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008822:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008826:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800882a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800882e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008832:	d1c0      	bne.n	80087b6 <__aeabi_ddiv+0x82>
 8008834:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008838:	d10b      	bne.n	8008852 <__aeabi_ddiv+0x11e>
 800883a:	ea41 0100 	orr.w	r1, r1, r0
 800883e:	f04f 0000 	mov.w	r0, #0
 8008842:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008846:	e7b6      	b.n	80087b6 <__aeabi_ddiv+0x82>
 8008848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800884c:	bf04      	itt	eq
 800884e:	4301      	orreq	r1, r0
 8008850:	2000      	moveq	r0, #0
 8008852:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008856:	bf88      	it	hi
 8008858:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800885c:	f63f aeaf 	bhi.w	80085be <__aeabi_dmul+0xde>
 8008860:	ebb5 0c03 	subs.w	ip, r5, r3
 8008864:	bf04      	itt	eq
 8008866:	ebb6 0c02 	subseq.w	ip, r6, r2
 800886a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800886e:	f150 0000 	adcs.w	r0, r0, #0
 8008872:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008876:	bd70      	pop	{r4, r5, r6, pc}
 8008878:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800887c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008880:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008884:	bfc2      	ittt	gt
 8008886:	ebd4 050c 	rsbsgt	r5, r4, ip
 800888a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800888e:	bd70      	popgt	{r4, r5, r6, pc}
 8008890:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008894:	f04f 0e00 	mov.w	lr, #0
 8008898:	3c01      	subs	r4, #1
 800889a:	e690      	b.n	80085be <__aeabi_dmul+0xde>
 800889c:	ea45 0e06 	orr.w	lr, r5, r6
 80088a0:	e68d      	b.n	80085be <__aeabi_dmul+0xde>
 80088a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80088a6:	ea94 0f0c 	teq	r4, ip
 80088aa:	bf08      	it	eq
 80088ac:	ea95 0f0c 	teqeq	r5, ip
 80088b0:	f43f af3b 	beq.w	800872a <__aeabi_dmul+0x24a>
 80088b4:	ea94 0f0c 	teq	r4, ip
 80088b8:	d10a      	bne.n	80088d0 <__aeabi_ddiv+0x19c>
 80088ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80088be:	f47f af34 	bne.w	800872a <__aeabi_dmul+0x24a>
 80088c2:	ea95 0f0c 	teq	r5, ip
 80088c6:	f47f af25 	bne.w	8008714 <__aeabi_dmul+0x234>
 80088ca:	4610      	mov	r0, r2
 80088cc:	4619      	mov	r1, r3
 80088ce:	e72c      	b.n	800872a <__aeabi_dmul+0x24a>
 80088d0:	ea95 0f0c 	teq	r5, ip
 80088d4:	d106      	bne.n	80088e4 <__aeabi_ddiv+0x1b0>
 80088d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80088da:	f43f aefd 	beq.w	80086d8 <__aeabi_dmul+0x1f8>
 80088de:	4610      	mov	r0, r2
 80088e0:	4619      	mov	r1, r3
 80088e2:	e722      	b.n	800872a <__aeabi_dmul+0x24a>
 80088e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80088e8:	bf18      	it	ne
 80088ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80088ee:	f47f aec5 	bne.w	800867c <__aeabi_dmul+0x19c>
 80088f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80088f6:	f47f af0d 	bne.w	8008714 <__aeabi_dmul+0x234>
 80088fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80088fe:	f47f aeeb 	bne.w	80086d8 <__aeabi_dmul+0x1f8>
 8008902:	e712      	b.n	800872a <__aeabi_dmul+0x24a>

08008904 <__gedf2>:
 8008904:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008908:	e006      	b.n	8008918 <__cmpdf2+0x4>
 800890a:	bf00      	nop

0800890c <__ledf2>:
 800890c:	f04f 0c01 	mov.w	ip, #1
 8008910:	e002      	b.n	8008918 <__cmpdf2+0x4>
 8008912:	bf00      	nop

08008914 <__cmpdf2>:
 8008914:	f04f 0c01 	mov.w	ip, #1
 8008918:	f84d cd04 	str.w	ip, [sp, #-4]!
 800891c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008920:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008924:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008928:	bf18      	it	ne
 800892a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800892e:	d01b      	beq.n	8008968 <__cmpdf2+0x54>
 8008930:	b001      	add	sp, #4
 8008932:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008936:	bf0c      	ite	eq
 8008938:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800893c:	ea91 0f03 	teqne	r1, r3
 8008940:	bf02      	ittt	eq
 8008942:	ea90 0f02 	teqeq	r0, r2
 8008946:	2000      	moveq	r0, #0
 8008948:	4770      	bxeq	lr
 800894a:	f110 0f00 	cmn.w	r0, #0
 800894e:	ea91 0f03 	teq	r1, r3
 8008952:	bf58      	it	pl
 8008954:	4299      	cmppl	r1, r3
 8008956:	bf08      	it	eq
 8008958:	4290      	cmpeq	r0, r2
 800895a:	bf2c      	ite	cs
 800895c:	17d8      	asrcs	r0, r3, #31
 800895e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008962:	f040 0001 	orr.w	r0, r0, #1
 8008966:	4770      	bx	lr
 8008968:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800896c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008970:	d102      	bne.n	8008978 <__cmpdf2+0x64>
 8008972:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008976:	d107      	bne.n	8008988 <__cmpdf2+0x74>
 8008978:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800897c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008980:	d1d6      	bne.n	8008930 <__cmpdf2+0x1c>
 8008982:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008986:	d0d3      	beq.n	8008930 <__cmpdf2+0x1c>
 8008988:	f85d 0b04 	ldr.w	r0, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop

08008990 <__aeabi_cdrcmple>:
 8008990:	4684      	mov	ip, r0
 8008992:	4610      	mov	r0, r2
 8008994:	4662      	mov	r2, ip
 8008996:	468c      	mov	ip, r1
 8008998:	4619      	mov	r1, r3
 800899a:	4663      	mov	r3, ip
 800899c:	e000      	b.n	80089a0 <__aeabi_cdcmpeq>
 800899e:	bf00      	nop

080089a0 <__aeabi_cdcmpeq>:
 80089a0:	b501      	push	{r0, lr}
 80089a2:	f7ff ffb7 	bl	8008914 <__cmpdf2>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	bf48      	it	mi
 80089aa:	f110 0f00 	cmnmi.w	r0, #0
 80089ae:	bd01      	pop	{r0, pc}

080089b0 <__aeabi_dcmpeq>:
 80089b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089b4:	f7ff fff4 	bl	80089a0 <__aeabi_cdcmpeq>
 80089b8:	bf0c      	ite	eq
 80089ba:	2001      	moveq	r0, #1
 80089bc:	2000      	movne	r0, #0
 80089be:	f85d fb08 	ldr.w	pc, [sp], #8
 80089c2:	bf00      	nop

080089c4 <__aeabi_dcmplt>:
 80089c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089c8:	f7ff ffea 	bl	80089a0 <__aeabi_cdcmpeq>
 80089cc:	bf34      	ite	cc
 80089ce:	2001      	movcc	r0, #1
 80089d0:	2000      	movcs	r0, #0
 80089d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80089d6:	bf00      	nop

080089d8 <__aeabi_dcmple>:
 80089d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089dc:	f7ff ffe0 	bl	80089a0 <__aeabi_cdcmpeq>
 80089e0:	bf94      	ite	ls
 80089e2:	2001      	movls	r0, #1
 80089e4:	2000      	movhi	r0, #0
 80089e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80089ea:	bf00      	nop

080089ec <__aeabi_dcmpge>:
 80089ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089f0:	f7ff ffce 	bl	8008990 <__aeabi_cdrcmple>
 80089f4:	bf94      	ite	ls
 80089f6:	2001      	movls	r0, #1
 80089f8:	2000      	movhi	r0, #0
 80089fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80089fe:	bf00      	nop

08008a00 <__aeabi_dcmpgt>:
 8008a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008a04:	f7ff ffc4 	bl	8008990 <__aeabi_cdrcmple>
 8008a08:	bf34      	ite	cc
 8008a0a:	2001      	movcc	r0, #1
 8008a0c:	2000      	movcs	r0, #0
 8008a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008a12:	bf00      	nop

08008a14 <__aeabi_d2iz>:
 8008a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a1c:	d215      	bcs.n	8008a4a <__aeabi_d2iz+0x36>
 8008a1e:	d511      	bpl.n	8008a44 <__aeabi_d2iz+0x30>
 8008a20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a28:	d912      	bls.n	8008a50 <__aeabi_d2iz+0x3c>
 8008a2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	bf18      	it	ne
 8008a40:	4240      	negne	r0, r0
 8008a42:	4770      	bx	lr
 8008a44:	f04f 0000 	mov.w	r0, #0
 8008a48:	4770      	bx	lr
 8008a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4e:	d105      	bne.n	8008a5c <__aeabi_d2iz+0x48>
 8008a50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a54:	bf08      	it	eq
 8008a56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a5a:	4770      	bx	lr
 8008a5c:	f04f 0000 	mov.w	r0, #0
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop

08008a64 <main>:
#include "gpio.h"
#include "delay.h"
#include "usart.h"
#include "spi.h"

int main(void) {
 8008a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a68:	b09f      	sub	sp, #124	; 0x7c
	uint16_t bits;
	uint32_t intval = 40;
	uint32_t tnow;
	char tmp[92];

	TIM2_timer_start();
 8008a6a:	f7f7 fb8d 	bl	8000188 <TIM2_timer_start>

	usart_begin(USART2, PA3, PA2, 19200);
 8008a6e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008a72:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8008a76:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008a7a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008a7e:	f240 1103 	movw	r1, #259	; 0x103
 8008a82:	f7f8 f843 	bl	8000b0c <usart_begin>
	usart_print(USART2, "Happy are those who know they are spiritually poor; \n");
 8008a86:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008a8a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008a8e:	49d9      	ldr	r1, [pc, #868]	; (8008df4 <main+0x390>)
 8008a90:	f7f8 f98c 	bl	8000dac <usart_print>
	usart_print(USART2, "The kingdom of heaven belongs to them!\n");
 8008a94:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008a98:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008a9c:	49d6      	ldr	r1, [pc, #856]	; (8008df8 <main+0x394>)
 8008a9e:	f7f8 f985 	bl	8000dac <usart_print>
	usart_print(USART2, "How many eyes does Mississipi river have?\n");
 8008aa2:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008aa6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008aaa:	49d4      	ldr	r1, [pc, #848]	; (8008dfc <main+0x398>)
 8008aac:	f7f8 f97e 	bl	8000dac <usart_print>
	usart_print(USART2, "Quick brown fox jumped over the lazy dog!\n");
 8008ab0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008ab4:	49d2      	ldr	r1, [pc, #840]	; (8008e00 <main+0x39c>)
 8008ab6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008aba:	f7f8 f977 	bl	8000dac <usart_print>
	usart_flush(USART2);
 8008abe:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008ac2:	f2c4 0000 	movt	r0, #16384	; 0x4000

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);

	sprintf(tmp, "SYSCLK = %ld, ", RCC_Clocks.SYSCLK_Frequency);
 8008ac6:	ac03      	add	r4, sp, #12
	usart_begin(USART2, PA3, PA2, 19200);
	usart_print(USART2, "Happy are those who know they are spiritually poor; \n");
	usart_print(USART2, "The kingdom of heaven belongs to them!\n");
	usart_print(USART2, "How many eyes does Mississipi river have?\n");
	usart_print(USART2, "Quick brown fox jumped over the lazy dog!\n");
	usart_flush(USART2);
 8008ac8:	f7f8 f9b8 	bl	8000e3c <usart_flush>

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 8008acc:	a81a      	add	r0, sp, #104	; 0x68
 8008ace:	f7f9 f911 	bl	8001cf4 <RCC_GetClocksFreq>

	sprintf(tmp, "SYSCLK = %ld, ", RCC_Clocks.SYSCLK_Frequency);
 8008ad2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008ad4:	49cb      	ldr	r1, [pc, #812]	; (8008e04 <main+0x3a0>)
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f7fb f812 	bl	8003b00 <sprintf>
	usart_print(USART2, tmp);
 8008adc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008ae6:	f7f8 f961 	bl	8000dac <usart_print>
	sprintf(tmp, "HCLK = %ld, ", RCC_Clocks.HCLK_Frequency);
 8008aea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008aec:	49c6      	ldr	r1, [pc, #792]	; (8008e08 <main+0x3a4>)
 8008aee:	4620      	mov	r0, r4
 8008af0:	f7fb f806 	bl	8003b00 <sprintf>
	usart_print(USART2, tmp);
 8008af4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008af8:	4621      	mov	r1, r4
 8008afa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008afe:	f7f8 f955 	bl	8000dac <usart_print>
	sprintf(tmp, "PCLK1 = %ld, ", RCC_Clocks.PCLK1_Frequency);
 8008b02:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b04:	49c1      	ldr	r1, [pc, #772]	; (8008e0c <main+0x3a8>)
 8008b06:	4620      	mov	r0, r4
 8008b08:	f7fa fffa 	bl	8003b00 <sprintf>
	usart_print(USART2, tmp);
 8008b0c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008b10:	4621      	mov	r1, r4
 8008b12:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008b16:	f7f8 f949 	bl	8000dac <usart_print>
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
 8008b1a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008b1c:	49bc      	ldr	r1, [pc, #752]	; (8008e10 <main+0x3ac>)
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f7fa ffee 	bl	8003b00 <sprintf>
	usart_print(USART2, tmp);
 8008b24:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008b28:	4621      	mov	r1, r4
 8008b2a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008b2e:	f7f8 f93d 	bl	8000dac <usart_print>
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12), (PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)),
 8008b32:	f240 400c 	movw	r0, #1036	; 0x40c
 8008b36:	f7f7 fc17 	bl	8000368 <PinPort>
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	f240 400c 	movw	r0, #1036	; 0x40c
 8008b40:	f7f7 fc1c 	bl	800037c <PinBit>
 8008b44:	4605      	mov	r5, r0
 8008b46:	f240 400d 	movw	r0, #1037	; 0x40d
 8008b4a:	f7f7 fc17 	bl	800037c <PinBit>
 8008b4e:	4305      	orrs	r5, r0
 8008b50:	f240 400e 	movw	r0, #1038	; 0x40e
 8008b54:	f7f7 fc12 	bl	800037c <PinBit>
 8008b58:	b2ad      	uxth	r5, r5
 8008b5a:	4305      	orrs	r5, r0
 8008b5c:	f240 400f 	movw	r0, #1039	; 0x40f
 8008b60:	f7f7 fc0c 	bl	800037c <PinBit>
 8008b64:	b2ad      	uxth	r5, r5
 8008b66:	ea45 0100 	orr.w	r1, r5, r0
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	2500      	movs	r5, #0
 8008b6e:	4630      	mov	r0, r6
 8008b70:	2302      	movs	r3, #2
 8008b72:	b289      	uxth	r1, r1
 8008b74:	9500      	str	r5, [sp, #0]
 8008b76:	9501      	str	r5, [sp, #4]
 8008b78:	f7f7 fc0c 	bl	8000394 <GPIOMode>
	pinMode(PD14, OUTPUT);
	pinMode(PD15, OUTPUT);
	| GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15),
			GPIO_Mode_OUT, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
*/
	spi_begin(SPI2, PB13, PB14, PB15, PB12);
 8008b7c:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8008b80:	f240 220e 	movw	r2, #526	; 0x20e
 8008b84:	f240 230f 	movw	r3, #527	; 0x20f
 8008b88:	f44f 7503 	mov.w	r5, #524	; 0x20c
 8008b8c:	f240 210d 	movw	r1, #525	; 0x20d
 8008b90:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008b94:	9500      	str	r5, [sp, #0]
 8008b96:	f7f7 fe43 	bl	8000820 <spi_begin>
	digitalWrite(PB12, HIGH);
 8008b9a:	2101      	movs	r1, #1
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	f7f7 fba9 	bl	80002f4 <digitalWrite>

	bits = GPIO_ReadOutputData(GPIOD);
 8008ba2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008ba6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008baa:	f7f8 fd73 	bl	8001694 <GPIO_ReadOutputData>
 8008bae:	4605      	mov	r5, r0
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 8008bb0:	f240 400d 	movw	r0, #1037	; 0x40d
 8008bb4:	f7f7 fbe2 	bl	800037c <PinBit>
 8008bb8:	0529      	lsls	r1, r5, #20
 8008bba:	ea40 5111 	orr.w	r1, r0, r1, lsr #20
 8008bbe:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008bc2:	b289      	uxth	r1, r1
 8008bc4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008bc8:	f7f7 fc62 	bl	8000490 <GPIOWrite>
	delay_ms(intval);
 8008bcc:	2028      	movs	r0, #40	; 0x28
 8008bce:	f7f7 fb3b 	bl	8000248 <delay_ms>
	tnow = millis()/1000;
 8008bd2:	f7f7 fb33 	bl	800023c <millis>
	while (tnow == millis()/1000);
 8008bd6:	f644 55d3 	movw	r5, #19923	; 0x4dd3
	digitalWrite(PB12, HIGH);

	bits = GPIO_ReadOutputData(GPIOD);
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
	delay_ms(intval);
	tnow = millis()/1000;
 8008bda:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8008bde:	fbb0 f6f6 	udiv	r6, r0, r6
	while (tnow == millis()/1000);
 8008be2:	f2c1 0562 	movt	r5, #4194	; 0x1062
 8008be6:	f7f7 fb29 	bl	800023c <millis>
 8008bea:	fba5 2300 	umull	r2, r3, r5, r0
 8008bee:	ebb6 1f93 	cmp.w	r6, r3, lsr #6
 8008bf2:	d0f8      	beq.n	8008be6 <main+0x182>
	tnow = millis()/1000;
 8008bf4:	f7f7 fb22 	bl	800023c <millis>

		GPIOWrite(GPIOD, PinBit(PD12) | (bits & 0x0fff));
		delay_ms(intval);
		//
		bits &= 0x0fff;
		switch( (tnow % 60)/15 ) {
 8008bf8:	f648 0789 	movw	r7, #34953	; 0x8889
			bits |= PinBit(PD13);
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis()/1000);
 8008bfc:	f644 56d3 	movw	r6, #19923	; 0x4dd3
	bits = GPIO_ReadOutputData(GPIOD);
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
	delay_ms(intval);
	tnow = millis()/1000;
	while (tnow == millis()/1000);
	tnow = millis()/1000;
 8008c00:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8008c04:	fbb0 f5f5 	udiv	r5, r0, r5

		GPIOWrite(GPIOD, PinBit(PD12) | (bits & 0x0fff));
		delay_ms(intval);
		//
		bits &= 0x0fff;
		switch( (tnow % 60)/15 ) {
 8008c08:	f6c8 0788 	movt	r7, #34952	; 0x8888
			bits |= PinBit(PD13);
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis()/1000);
 8008c0c:	f2c1 0662 	movt	r6, #4194	; 0x1062
	tnow = millis()/1000;
	while (tnow == millis()/1000);
	tnow = millis()/1000;

	while (1) {
		bits = GPIO_ReadOutputData(GPIOD);
 8008c10:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c14:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008c18:	f7f8 fd3c 	bl	8001694 <GPIO_ReadOutputData>
 8008c1c:	4680      	mov	r8, r0

		GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 8008c1e:	f240 400d 	movw	r0, #1037	; 0x40d
 8008c22:	f7f7 fbab 	bl	800037c <PinBit>
 8008c26:	ea4f 5808 	mov.w	r8, r8, lsl #20
 8008c2a:	ea4f 5818 	mov.w	r8, r8, lsr #20
 8008c2e:	ea48 0100 	orr.w	r1, r8, r0
 8008c32:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c36:	b289      	uxth	r1, r1
 8008c38:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008c3c:	f7f7 fc28 	bl	8000490 <GPIOWrite>
		delay_ms(intval);
 8008c40:	2028      	movs	r0, #40	; 0x28
 8008c42:	f7f7 fb01 	bl	8000248 <delay_ms>

		GPIOWrite(GPIOD, PinBit(PD14) | (bits & 0x0fff));
 8008c46:	f240 400e 	movw	r0, #1038	; 0x40e
 8008c4a:	f7f7 fb97 	bl	800037c <PinBit>
 8008c4e:	ea48 0100 	orr.w	r1, r8, r0
 8008c52:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c56:	b289      	uxth	r1, r1
 8008c58:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008c5c:	f7f7 fc18 	bl	8000490 <GPIOWrite>
		delay_ms(intval);
 8008c60:	2028      	movs	r0, #40	; 0x28
 8008c62:	f7f7 faf1 	bl	8000248 <delay_ms>

		GPIOWrite(GPIOD, PinBit(PD15) | (bits & 0x0fff));
 8008c66:	f240 400f 	movw	r0, #1039	; 0x40f
 8008c6a:	f7f7 fb87 	bl	800037c <PinBit>
 8008c6e:	ea48 0100 	orr.w	r1, r8, r0
 8008c72:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c76:	b289      	uxth	r1, r1
 8008c78:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008c7c:	f7f7 fc08 	bl	8000490 <GPIOWrite>
		delay_ms(intval);
 8008c80:	2028      	movs	r0, #40	; 0x28
 8008c82:	f7f7 fae1 	bl	8000248 <delay_ms>

		GPIOWrite(GPIOD, PinBit(PD12) | (bits & 0x0fff));
 8008c86:	f240 400c 	movw	r0, #1036	; 0x40c
 8008c8a:	f7f7 fb77 	bl	800037c <PinBit>
 8008c8e:	ea48 0100 	orr.w	r1, r8, r0
 8008c92:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c96:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008c9a:	b289      	uxth	r1, r1
 8008c9c:	f7f7 fbf8 	bl	8000490 <GPIOWrite>
		delay_ms(intval);
 8008ca0:	2028      	movs	r0, #40	; 0x28
 8008ca2:	f7f7 fad1 	bl	8000248 <delay_ms>
		//
		bits &= 0x0fff;
		switch( (tnow % 60)/15 ) {
 8008ca6:	fba7 2305 	umull	r2, r3, r7, r5
 8008caa:	095b      	lsrs	r3, r3, #5
 8008cac:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8008cb0:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 8008cb4:	fba7 2303 	umull	r2, r3, r7, r3
 8008cb8:	08db      	lsrs	r3, r3, #3
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	f000 8087 	beq.w	8008dce <main+0x36a>
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	d07c      	beq.n	8008dbe <main+0x35a>
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	f000 808a 	beq.w	8008dde <main+0x37a>
			bits |= PinBit(PD15);
		case 1:
			bits |= PinBit(PD14);
		case 0:
		default:
			bits |= PinBit(PD13);
 8008cca:	f240 400d 	movw	r0, #1037	; 0x40d
 8008cce:	f7f7 fb55 	bl	800037c <PinBit>
 8008cd2:	ea40 0808 	orr.w	r8, r0, r8
			break;
		}
		GPIOWrite(GPIOD, bits);
 8008cd6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008cda:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008cde:	fa1f f188 	uxth.w	r1, r8
 8008ce2:	f7f7 fbd5 	bl	8000490 <GPIOWrite>

		while (tnow == millis()/1000);
 8008ce6:	f7f7 faa9 	bl	800023c <millis>
 8008cea:	fba6 3000 	umull	r3, r0, r6, r0
 8008cee:	f644 58d3 	movw	r8, #19923	; 0x4dd3
 8008cf2:	ebb5 1f90 	cmp.w	r5, r0, lsr #6
 8008cf6:	f2c1 0862 	movt	r8, #4194	; 0x1062
 8008cfa:	d0f4      	beq.n	8008ce6 <main+0x282>
		tnow = millis()/1000;
 8008cfc:	f7f7 fa9e 	bl	800023c <millis>
 8008d00:	fba8 2500 	umull	r2, r5, r8, r0

		sprintf(tmp, "%04ld\n", millis());
 8008d04:	f7f7 fa9a 	bl	800023c <millis>
 8008d08:	4942      	ldr	r1, [pc, #264]	; (8008e14 <main+0x3b0>)
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f7fa fef7 	bl	8003b00 <sprintf>
		usart_print(USART2, tmp);
 8008d12:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008d16:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	f7f8 f846 	bl	8000dac <usart_print>

		digitalWrite(PB12, LOW);
 8008d20:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8008d24:	2100      	movs	r1, #0
 8008d26:	f7f7 fae5 	bl	80002f4 <digitalWrite>
		spi_transfer(SPI2, (uint8_t *)tmp, 8);
 8008d2a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8008d2e:	2208      	movs	r2, #8
 8008d30:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008d34:	4621      	mov	r1, r4
 8008d36:	f7f7 fe37 	bl	80009a8 <spi_transfer>
		digitalWrite(PB12, HIGH);
 8008d3a:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8008d3e:	2101      	movs	r1, #1
 8008d40:	f7f7 fad8 	bl	80002f4 <digitalWrite>
		/*
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
 8008d44:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008d48:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008d4c:	f7f8 f934 	bl	8000fb8 <usart_available>
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis()/1000);
		tnow = millis()/1000;
 8008d50:	09ad      	lsrs	r5, r5, #6
		/*
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
 8008d52:	f04f 0800 	mov.w	r8, #0
 8008d56:	b968      	cbnz	r0, 8008d74 <main+0x310>
 8008d58:	e75a      	b.n	8008c10 <main+0x1ac>
			while ( usart_available(USART2) > 0 && i < 92 ) {
				tmp[i++] = (char) usart_read(USART2);
 8008d5a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
 8008d5e:	f1b8 0f5c 	cmp.w	r8, #92	; 0x5c
				tmp[i++] = (char) usart_read(USART2);
 8008d62:	f2c4 0000 	movt	r0, #16384	; 0x4000
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
 8008d66:	d043      	beq.n	8008df0 <main+0x38c>
				tmp[i++] = (char) usart_read(USART2);
 8008d68:	f7f8 f830 	bl	8000dcc <usart_read>
 8008d6c:	f804 0008 	strb.w	r0, [r4, r8]
 8008d70:	f108 0801 	add.w	r8, r8, #1
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
 8008d74:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008d78:	f2c4 0000 	movt	r0, #16384	; 0x4000
				tmp[i++] = (char) usart_read(USART2);
 8008d7c:	fa1f f988 	uxth.w	r9, r8
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
 8008d80:	f7f8 f91a 	bl	8000fb8 <usart_available>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	d1e8      	bne.n	8008d5a <main+0x2f6>
				tmp[i++] = (char) usart_read(USART2);
			}
			tmp[i] = 0;
 8008d88:	ab1e      	add	r3, sp, #120	; 0x78
 8008d8a:	4499      	add	r9, r3
			usart_print(USART2, "> ");
 8008d8c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
				tmp[i++] = (char) usart_read(USART2);
			}
			tmp[i] = 0;
 8008d90:	2300      	movs	r3, #0
 8008d92:	f809 3c6c 	strb.w	r3, [r9, #-108]
			usart_print(USART2, "> ");
 8008d96:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008d9a:	491f      	ldr	r1, [pc, #124]	; (8008e18 <main+0x3b4>)
 8008d9c:	f7f8 f806 	bl	8000dac <usart_print>
			usart_print(USART2, tmp);
 8008da0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008da4:	4621      	mov	r1, r4
 8008da6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008daa:	f7f7 ffff 	bl	8000dac <usart_print>
			usart_print(USART2, "\n");
 8008dae:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008db2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008db6:	4919      	ldr	r1, [pc, #100]	; (8008e1c <main+0x3b8>)
 8008db8:	f7f7 fff8 	bl	8000dac <usart_print>
 8008dbc:	e728      	b.n	8008c10 <main+0x1ac>
		delay_ms(intval);
		//
		bits &= 0x0fff;
		switch( (tnow % 60)/15 ) {
		case 3:
			bits |= PinBit(PD12);
 8008dbe:	f240 400c 	movw	r0, #1036	; 0x40c
 8008dc2:	f7f7 fadb 	bl	800037c <PinBit>
 8008dc6:	ea40 0808 	orr.w	r8, r0, r8
 8008dca:	fa1f f888 	uxth.w	r8, r8
		case 2:
			bits |= PinBit(PD15);
 8008dce:	f240 400f 	movw	r0, #1039	; 0x40f
 8008dd2:	f7f7 fad3 	bl	800037c <PinBit>
 8008dd6:	ea40 0808 	orr.w	r8, r0, r8
 8008dda:	fa1f f888 	uxth.w	r8, r8
		case 1:
			bits |= PinBit(PD14);
 8008dde:	f240 400e 	movw	r0, #1038	; 0x40e
 8008de2:	f7f7 facb 	bl	800037c <PinBit>
 8008de6:	ea40 0808 	orr.w	r8, r0, r8
 8008dea:	fa1f f888 	uxth.w	r8, r8
 8008dee:	e76c      	b.n	8008cca <main+0x266>
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
 8008df0:	46c1      	mov	r9, r8
 8008df2:	e7c9      	b.n	8008d88 <main+0x324>
 8008df4:	08008fd8 	.word	0x08008fd8
 8008df8:	08009010 	.word	0x08009010
 8008dfc:	08009038 	.word	0x08009038
 8008e00:	08009064 	.word	0x08009064
 8008e04:	08009090 	.word	0x08009090
 8008e08:	080090a0 	.word	0x080090a0
 8008e0c:	080090b0 	.word	0x080090b0
 8008e10:	080090c0 	.word	0x080090c0
 8008e14:	080090d0 	.word	0x080090d0
 8008e18:	080090d8 	.word	0x080090d8
 8008e1c:	080090cc 	.word	0x080090cc

08008e20 <Reset_Handler>:
 8008e20:	2100      	movs	r1, #0
 8008e22:	e003      	b.n	8008e2c <LoopCopyDataInit>

08008e24 <CopyDataInit>:
 8008e24:	4b0a      	ldr	r3, [pc, #40]	; (8008e50 <LoopFillZerobss+0x10>)
 8008e26:	585b      	ldr	r3, [r3, r1]
 8008e28:	5043      	str	r3, [r0, r1]
 8008e2a:	3104      	adds	r1, #4

08008e2c <LoopCopyDataInit>:
 8008e2c:	4809      	ldr	r0, [pc, #36]	; (8008e54 <LoopFillZerobss+0x14>)
 8008e2e:	4b0a      	ldr	r3, [pc, #40]	; (8008e58 <LoopFillZerobss+0x18>)
 8008e30:	1842      	adds	r2, r0, r1
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d3f6      	bcc.n	8008e24 <CopyDataInit>
 8008e36:	4a09      	ldr	r2, [pc, #36]	; (8008e5c <LoopFillZerobss+0x1c>)
 8008e38:	e002      	b.n	8008e40 <LoopFillZerobss>

08008e3a <FillZerobss>:
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f842 3b04 	str.w	r3, [r2], #4

08008e40 <LoopFillZerobss>:
 8008e40:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <LoopFillZerobss+0x20>)
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d3f9      	bcc.n	8008e3a <FillZerobss>
 8008e46:	f7fa fcf3 	bl	8003830 <SystemInit>
 8008e4a:	f7ff fe0b 	bl	8008a64 <main>
 8008e4e:	4770      	bx	lr
 8008e50:	08009164 	.word	0x08009164
 8008e54:	20000000 	.word	0x20000000
 8008e58:	2000095c 	.word	0x2000095c
 8008e5c:	2000095c 	.word	0x2000095c
 8008e60:	20001600 	.word	0x20001600

08008e64 <ADC_IRQHandler>:
 8008e64:	e7fe      	b.n	8008e64 <ADC_IRQHandler>
	...

08008e68 <blanks.3927>:
 8008e68:	2020 2020 2020 2020 2020 2020 2020 2020                     

08008e78 <zeroes.3928>:
 8008e78:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

08008e88 <_global_impure_ptr>:
 8008e88:	00a8 2000 0000 0000                         ... ....

08008e90 <p05.2449>:
 8008e90:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

08008ea0 <__mprec_tens>:
 8008ea0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8008eb0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8008ec0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8008ed0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8008ee0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8008ef0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8008f00:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8008f10:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8008f20:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8008f30:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8008f40:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8008f50:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8008f60:	9db4 79d9 7843 44ea                         ...yCx.D

08008f68 <__mprec_tinytens>:
 8008f68:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8008f78:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8008f88:	6f43 64ac 0628 0ac8                         Co.d(...

08008f90 <__mprec_bigtens>:
 8008f90:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8008fa0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8008fb0:	bf3c 7f73 4fdd 7515                         <.s..O.u

08008fb8 <blanks.3871>:
 8008fb8:	2020 2020 2020 2020 2020 2020 2020 2020                     

08008fc8 <zeroes.3872>:
 8008fc8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 8008fd8:	6148 7070 2079 7261 2065 6874 736f 2065     Happy are those 
 8008fe8:	6877 206f 6e6b 776f 7420 6568 2079 7261     who know they ar
 8008ff8:	2065 7073 7269 7469 6175 6c6c 2079 6f70     e spiritually po
 8009008:	726f 203b 000a 0000 6854 2065 696b 676e     or; ....The king
 8009018:	6f64 206d 666f 6820 6165 6576 206e 6562     dom of heaven be
 8009028:	6f6c 676e 2073 6f74 7420 6568 216d 000a     longs to them!..
 8009038:	6f48 2077 616d 796e 6520 6579 2073 6f64     How many eyes do
 8009048:	7365 4d20 7369 6973 7373 7069 2069 6972     es Mississipi ri
 8009058:	6576 2072 6168 6576 0a3f 0000 7551 6369     ver have?...Quic
 8009068:	206b 7262 776f 206e 6f66 2078 756a 706d     k brown fox jump
 8009078:	6465 6f20 6576 2072 6874 2065 616c 797a     ed over the lazy
 8009088:	6420 676f 0a21 0000 5953 4353 4b4c 3d20      dog!...SYSCLK =
 8009098:	2520 646c 202c 0000 4348 4b4c 3d20 2520      %ld, ..HCLK = %
 80090a8:	646c 202c 0000 0000 4350 4b4c 2031 203d     ld, ....PCLK1 = 
 80090b8:	6c25 2c64 0020 0000 4350 4b4c 2032 203d     %ld, ...PCLK2 = 
 80090c8:	6c25 0d64 000a 0000 3025 6c34 0a64 0000     %ld.....%04ld...
 80090d8:	203e 0000 6548 7061 6120 646e 7320 6174     > ..Heap and sta
 80090e8:	6b63 6320 6c6f 696c 6973 6e6f 000a 0000     ck collision....
 80090f8:	7865 7469 0000 0000 4e49 0046 6e69 0066     exit....INF.inf.
 8009108:	414e 004e 616e 006e 3130 3332 3534 3736     NAN.nan.01234567
 8009118:	3938 4241 4443 4645 0000 0000 3130 3332     89ABCDEF....0123
 8009128:	3534 3736 3938 6261 6463 6665 0000 0000     456789abcdef....
 8009138:	6e28 6c75 296c 0000 0030 0000 6e49 6966     (null)..0...Infi
 8009148:	696e 7974 0000 0000 614e 004e 0043 0000     nity....NaN.C...
 8009158:	4f50 4953 0058 0000 002e 0000               POSIX.......
