
stm32f4-usart.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <TIM2_timer_start>:
/**
 * @brief  millisecond
 * @param  none
 * @retval None
 */
void TIM2_timer_start(void) {
 8000188:	b570      	push	{r4, r5, r6, lr}
 800018a:	b088      	sub	sp, #32
	// TIM_TimeBaseInitTypeDef's order is {uint16_t TIM_Prescaler, uint16_t TIM_CounterMode, uint16_t TIM_Period, uint16_t TIM_ClockDivision, uint8_t TIM_RepetitionCounter}
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 800018c:	4668      	mov	r0, sp
 800018e:	f001 fdd3 	bl	8001d38 <RCC_GetClocksFreq>
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 8000192:	9b00      	ldr	r3, [sp, #0]
 8000194:	f64d 6283 	movw	r2, #56963	; 0xde83
 8000198:	f2c4 321b 	movt	r2, #17179	; 0x431b
 800019c:	085b      	lsrs	r3, r3, #1
 800019e:	fba2 1303 	umull	r1, r3, r2, r3
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001a2:	2001      	movs	r0, #1
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 80001a4:	0c9b      	lsrs	r3, r3, #18
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80001a6:	2400      	movs	r4, #0
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001a8:	4601      	mov	r1, r0
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 80001aa:	f8ad 3010 	strh.w	r3, [sp, #16]
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TimeBaseStructure.TIM_Period = 1000 - 1;
 80001ae:	f240 33e7 	movw	r3, #999	; 0x3e7
 80001b2:	9305      	str	r3, [sp, #20]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80001b4:	f8ad 4012 	strh.w	r4, [sp, #18]
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80001b8:	f8ad 4018 	strh.w	r4, [sp, #24]
	TimeBaseStructure.TIM_RepetitionCounter = 0;
 80001bc:	f88d 401a 	strb.w	r4, [sp, #26]

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001c0:	f001 fe68 	bl	8001e94 <RCC_APB1PeriphClockCmd>

	/* Time base configuration */
	TIM_TimeBaseInit(TIM2, &TimeBaseStructure);
 80001c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001c8:	a904      	add	r1, sp, #16
 80001ca:	f002 fa15 	bl	80025f8 <TIM_TimeBaseInit>
//  TIM_SelectOnePulseMode(TIM2, TIM_OPMode_Repetitive);
	TIM_SetCounter(TIM2, 0);
 80001ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001d2:	4621      	mov	r1, r4
 80001d4:	f002 fa72 	bl	80026bc <TIM_SetCounter>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80001d8:	2101      	movs	r1, #1
 80001da:	460a      	mov	r2, r1
 80001dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001e0:	f002 ff00 	bl	8002fe4 <TIM_ITConfig>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001e4:	2601      	movs	r6, #1
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001e6:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80001e8:	a807      	add	r0, sp, #28
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001ea:	f88d 301c 	strb.w	r3, [sp, #28]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80001ee:	f88d 401d 	strb.w	r4, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001f2:	f88d 601e 	strb.w	r6, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80001f6:	f88d 601f 	strb.w	r6, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);
 80001fa:	f001 f8e9 	bl	80013d0 <NVIC_Init>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 80001fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000202:	4631      	mov	r1, r6
 8000204:	f002 faa6 	bl	8002754 <TIM_Cmd>

	__counter_micros = 0;
 8000208:	f640 12a4 	movw	r2, #2468	; 0x9a4
	__counter_millis = 0;
 800020c:	f640 13a8 	movw	r3, #2472	; 0x9a8
	NVIC_Init(&NVIC_InitStructure);

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);

	__counter_micros = 0;
 8000210:	f2c2 0200 	movt	r2, #8192	; 0x2000
	__counter_millis = 0;
 8000214:	f2c2 0300 	movt	r3, #8192	; 0x2000
	NVIC_Init(&NVIC_InitStructure);

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);

	__counter_micros = 0;
 8000218:	6014      	str	r4, [r2, #0]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800021a:	4625      	mov	r5, r4

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);

	__counter_micros = 0;
	__counter_millis = 0;
 800021c:	601c      	str	r4, [r3, #0]
}
 800021e:	b008      	add	sp, #32
 8000220:	bd70      	pop	{r4, r5, r6, pc}
 8000222:	bf00      	nop

08000224 <micros>:

uint32_t micros(void) {
 8000224:	b508      	push	{r3, lr}
	return __counter_micros + TIM_GetCounter(TIM2 );
 8000226:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800022a:	f002 fa4b 	bl	80026c4 <TIM_GetCounter>
 800022e:	f640 13a4 	movw	r3, #2468	; 0x9a4
 8000232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000236:	681b      	ldr	r3, [r3, #0]
}
 8000238:	18c0      	adds	r0, r0, r3
 800023a:	bd08      	pop	{r3, pc}

0800023c <millis>:

uint32_t millis(void) {
	return __counter_millis;
 800023c:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8000240:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000244:	6818      	ldr	r0, [r3, #0]
}
 8000246:	4770      	bx	lr

08000248 <delay_millis>:
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000248:	4b03      	ldr	r3, [pc, #12]	; (8000258 <delay_millis+0x10>)
 800024a:	681a      	ldr	r2, [r3, #0]
}

void delay_millis(uint32_t w) {
	uint32_t wtill = millis() + w;
 800024c:	1882      	adds	r2, r0, r2
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 800024e:	6819      	ldr	r1, [r3, #0]
}

void delay_millis(uint32_t w) {
	uint32_t wtill = millis() + w;
	while (millis() < wtill)
 8000250:	428a      	cmp	r2, r1
 8000252:	d8fc      	bhi.n	800024e <delay_millis+0x6>
		;
}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	200009a8 	.word	0x200009a8

0800025c <delay_micros>:

void delay_micros(uint32_t w) {
 800025c:	b510      	push	{r4, lr}
 800025e:	4604      	mov	r4, r0
	uint32_t wtill = micros() + w;
 8000260:	f7ff ffe0 	bl	8000224 <micros>
 8000264:	1904      	adds	r4, r0, r4
	while (micros() < wtill)
 8000266:	f7ff ffdd 	bl	8000224 <micros>
 800026a:	4284      	cmp	r4, r0
 800026c:	d8fb      	bhi.n	8000266 <delay_micros+0xa>
		;
}
 800026e:	bd10      	pop	{r4, pc}

08000270 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000270:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
 8000272:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000276:	2101      	movs	r1, #1
 8000278:	f002 feca 	bl	8003010 <TIM_GetITStatus>
 800027c:	b168      	cbz	r0, 800029a <TIM2_IRQHandler+0x2a>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
 800027e:	2101      	movs	r1, #1
 8000280:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000284:	f002 fed0 	bl	8003028 <TIM_ClearITPendingBit>
		__counter_micros += 1000;
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <TIM2_IRQHandler+0x2c>)
		__counter_millis += 1;
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <TIM2_IRQHandler+0x30>)
}

void TIM2_IRQHandler(void) {
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
		__counter_micros += 1000;
 800028c:	6811      	ldr	r1, [r2, #0]
 800028e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8000292:	6011      	str	r1, [r2, #0]
		__counter_millis += 1;
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	3201      	adds	r2, #1
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	bd08      	pop	{r3, pc}
 800029c:	200009a4 	.word	0x200009a4
 80002a0:	200009a8 	.word	0x200009a8

080002a4 <pinMode>:
	}
	return 16;
}
*/

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002a4:	b5f0      	push	{r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 80002a6:	f240 0400 	movw	r4, #0
 80002aa:	f3c0 2503 	ubfx	r5, r0, #8, #4
 80002ae:	f2c2 0400 	movt	r4, #8192	; 0x2000
	}
	return 16;
}
*/

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002b2:	b083      	sub	sp, #12
 80002b4:	460f      	mov	r7, r1
 80002b6:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 80002b8:	2101      	movs	r1, #1
 80002ba:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80002be:	f001 fdbf 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002c2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002c6:	2301      	movs	r3, #1
 80002c8:	f006 060f 	and.w	r6, r6, #15
 80002cc:	fa13 f606 	lsls.w	r6, r3, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002d0:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80002d2:	b2b6      	uxth	r6, r6
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002d4:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80002d8:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80002de:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80002e0:	2302      	movs	r3, #2
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002e2:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
 80002e4:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80002e8:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002ec:	f001 f96c 	bl	80015c8 <GPIO_Init>
}
 80002f0:	b003      	add	sp, #12
 80002f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002f4 <digitalWrite>:

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <digitalWrite+0x28>)
 80002f6:	f3c0 2203 	ubfx	r2, r0, #8, #4
 80002fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002fe:	f000 000f 	and.w	r0, r0, #15
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
 8000302:	b929      	cbnz	r1, 8000310 <digitalWrite+0x1c>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000304:	2101      	movs	r1, #1
 8000306:	4081      	lsls	r1, r0
void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000308:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800030a:	b289      	uxth	r1, r1
 800030c:	f001 b9ea 	b.w	80016e4 <GPIO_ResetBits>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000310:	2101      	movs	r1, #1
 8000312:	4081      	lsls	r1, r0
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000314:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000316:	b289      	uxth	r1, r1
 8000318:	f001 b9e2 	b.w	80016e0 <GPIO_SetBits>
 800031c:	20000000 	.word	0x20000000

08000320 <digitalRead>:
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 8000320:	b508      	push	{r3, lr}
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000322:	4b10      	ldr	r3, [pc, #64]	; (8000364 <digitalRead+0x44>)
 8000324:	f3c0 2203 	ubfx	r2, r0, #8, #4
 8000328:	eb03 0382 	add.w	r3, r3, r2, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800032c:	f000 010f 	and.w	r1, r0, #15
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000330:	6a98      	ldr	r0, [r3, #40]	; 0x28
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000332:	2301      	movs	r3, #1
 8000334:	fa13 f101 	lsls.w	r1, r3, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000338:	6802      	ldr	r2, [r0, #0]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800033a:	b289      	uxth	r1, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 800033c:	fa11 f303 	lsls.w	r3, r1, r3
 8000340:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b01      	cmp	r3, #1
 8000348:	d005      	beq.n	8000356 <digitalRead+0x36>
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
 800034a:	f001 f9b5 	bl	80016b8 <GPIO_ReadInputDataBit>
 800034e:	3000      	adds	r0, #0
 8000350:	bf18      	it	ne
 8000352:	2001      	movne	r0, #1
}
 8000354:	bd08      	pop	{r3, pc}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
	if (mode == GPIO_Mode_OUT)
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000356:	f001 f9b9 	bl	80016cc <GPIO_ReadOutputDataBit>
 800035a:	3000      	adds	r0, #0
 800035c:	bf18      	it	ne
 800035e:	2001      	movne	r0, #1
 8000360:	bd08      	pop	{r3, pc}
 8000362:	bf00      	nop
 8000364:	20000000 	.word	0x20000000

08000368 <PinPort>:
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
 8000368:	f240 0300 	movw	r3, #0
 800036c:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8000370:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000374:	eb03 0380 	add.w	r3, r3, r0, lsl #2
}
 8000378:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800037a:	4770      	bx	lr

0800037c <PinBit>:

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800037c:	2301      	movs	r3, #1
 800037e:	f000 000f 	and.w	r0, r0, #15
 8000382:	fa13 f000 	lsls.w	r0, r3, r0
}
 8000386:	b280      	uxth	r0, r0
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop

0800038c <PinSource>:

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}
 800038c:	f000 000f 	and.w	r0, r0, #15
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop

08000394 <GPIOMode>:

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ( port == GPIOB ) {
 8000398:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800039c:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80003a0:	42b0      	cmp	r0, r6
uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 80003a2:	b082      	sub	sp, #8
 80003a4:	4604      	mov	r4, r0
 80003a6:	460d      	mov	r5, r1
 80003a8:	4617      	mov	r7, r2
 80003aa:	4698      	mov	r8, r3
	if ( port == GPIOB ) {
 80003ac:	d047      	beq.n	800043e <GPIOMode+0xaa>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
 80003ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d046      	beq.n	8000448 <GPIOMode+0xb4>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
 80003ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80003be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003c2:	4298      	cmp	r0, r3
 80003c4:	d045      	beq.n	8000452 <GPIOMode+0xbe>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
 80003c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003ce:	4298      	cmp	r0, r3
 80003d0:	d044      	beq.n	800045c <GPIOMode+0xc8>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
 80003d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80003d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003da:	4298      	cmp	r0, r3
 80003dc:	d043      	beq.n	8000466 <GPIOMode+0xd2>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
 80003de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80003e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d042      	beq.n	8000470 <GPIOMode+0xdc>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	} else if ( port == GPIOH ) {
 80003ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80003ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003f2:	4298      	cmp	r0, r3
 80003f4:	d041      	beq.n	800047a <GPIOMode+0xe6>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
 80003f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003fe:	4298      	cmp	r0, r3
 8000400:	d040      	beq.n	8000484 <GPIOMode+0xf0>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
	} else if ( port == GPIOA ) {
 8000402:	2300      	movs	r3, #0
 8000404:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000408:	4298      	cmp	r0, r3
 800040a:	d013      	beq.n	8000434 <GPIOMode+0xa0>

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 800040c:	f89d 3020 	ldrb.w	r3, [sp, #32]
	}
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
 8000410:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 8000412:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8000416:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
 800041a:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 800041e:	4620      	mov	r0, r4
 8000420:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8000422:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 8000426:	f88d 8005 	strb.w	r8, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 800042a:	f001 f8cd 	bl	80015c8 <GPIO_Init>
}
 800042e:	b002      	add	sp, #8
 8000430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ( port == GPIOH ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
	} else if ( port == GPIOA ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000434:	2001      	movs	r0, #1
 8000436:	4601      	mov	r1, r0
 8000438:	f001 fd02 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
 800043c:	e7e6      	b.n	800040c <GPIOMode+0x78>
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800043e:	2002      	movs	r0, #2
 8000440:	2101      	movs	r1, #1
 8000442:	f001 fcfd 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
 8000446:	e7e1      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOC ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000448:	2004      	movs	r0, #4
 800044a:	2101      	movs	r1, #1
 800044c:	f001 fcf8 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
 8000450:	e7dc      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOD ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000452:	2008      	movs	r0, #8
 8000454:	2101      	movs	r1, #1
 8000456:	f001 fcf3 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
 800045a:	e7d7      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOE ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800045c:	2010      	movs	r0, #16
 800045e:	2101      	movs	r1, #1
 8000460:	f001 fcee 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
 8000464:	e7d2      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOF ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000466:	2020      	movs	r0, #32
 8000468:	2101      	movs	r1, #1
 800046a:	f001 fce9 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
 800046e:	e7cd      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOG ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000470:	2040      	movs	r0, #64	; 0x40
 8000472:	2101      	movs	r1, #1
 8000474:	f001 fce4 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
 8000478:	e7c8      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOH ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800047a:	2080      	movs	r0, #128	; 0x80
 800047c:	2101      	movs	r1, #1
 800047e:	f001 fcdf 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
 8000482:	e7c3      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOI ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000484:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000488:	2101      	movs	r1, #1
 800048a:	f001 fcd9 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
 800048e:	e7bd      	b.n	800040c <GPIOMode+0x78>

08000490 <GPIOWrite>:
	GPIO_Init(port, &GPIO_InitStructure);
}


inline void GPIOWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 8000490:	f001 b930 	b.w	80016f4 <GPIO_Write>

08000494 <i2c_begin>:
} CommDirection;

I2C_Status i2c1_status;
CommDirection i2c1_direction;

void i2c_begin(I2C_TypeDef * I2Cx, GPIOPin sda, GPIOPin scl, uint32_t clkspeed) {
 8000494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	I2C_InitTypeDef I2C_InitStructure;
	uint8_t af;

	if ( I2Cx == I2C1 ) {
 8000498:	f44f 4ea8 	mov.w	lr, #21504	; 0x5400
 800049c:	f2c4 0e00 	movt	lr, #16384	; 0x4000
 80004a0:	4570      	cmp	r0, lr
} CommDirection;

I2C_Status i2c1_status;
CommDirection i2c1_direction;

void i2c_begin(I2C_TypeDef * I2Cx, GPIOPin sda, GPIOPin scl, uint32_t clkspeed) {
 80004a2:	b086      	sub	sp, #24
 80004a4:	4606      	mov	r6, r0
 80004a6:	460c      	mov	r4, r1
 80004a8:	4615      	mov	r5, r2
 80004aa:	461f      	mov	r7, r3
	I2C_InitTypeDef I2C_InitStructure;
	uint8_t af;

	if ( I2Cx == I2C1 ) {
 80004ac:	d07c      	beq.n	80005a8 <i2c_begin+0x114>
		/* I2C Periph clock enable */
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
		af = GPIO_AF_I2C1;
	} else if ( I2Cx == I2C2 ) {
 80004ae:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80004b2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80004b6:	4298      	cmp	r0, r3
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 80004b8:	bf0c      	ite	eq
 80004ba:	f44f 0080 	moveq.w	r0, #4194304	; 0x400000
		af = GPIO_AF_I2C2;
	} else {
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C3, ENABLE);
 80004be:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80004c2:	2101      	movs	r1, #1
 80004c4:	f001 fce6 	bl	8001e94 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_I2C3;
	}
	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(PinPort(sda), PinBit(sda), af );
 80004c8:	4620      	mov	r0, r4
 80004ca:	f7ff ff4d 	bl	8000368 <PinPort>
 80004ce:	4680      	mov	r8, r0
 80004d0:	4620      	mov	r0, r4
 80004d2:	f7ff ff53 	bl	800037c <PinBit>
 80004d6:	2204      	movs	r2, #4
 80004d8:	4601      	mov	r1, r0
 80004da:	4640      	mov	r0, r8
 80004dc:	f001 f910 	bl	8001700 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(scl), PinBit(scl), af );
 80004e0:	4628      	mov	r0, r5
 80004e2:	f7ff ff41 	bl	8000368 <PinPort>
 80004e6:	4680      	mov	r8, r0
 80004e8:	4628      	mov	r0, r5
 80004ea:	f7ff ff47 	bl	800037c <PinBit>
 80004ee:	2204      	movs	r2, #4
 80004f0:	4601      	mov	r1, r0
 80004f2:	4640      	mov	r0, r8
 80004f4:	f001 f904 	bl	8001700 <GPIO_PinAFConfig>

	GPIOMode(PinPort(sda), PinBit(sda), GPIO_Mode_AF, GPIO_Speed_25MHz,
 80004f8:	4620      	mov	r0, r4
 80004fa:	f7ff ff35 	bl	8000368 <PinPort>
 80004fe:	4680      	mov	r8, r0
 8000500:	4620      	mov	r0, r4
 8000502:	f7ff ff3b 	bl	800037c <PinBit>
 8000506:	2401      	movs	r4, #1
 8000508:	4601      	mov	r1, r0
 800050a:	2202      	movs	r2, #2
 800050c:	4623      	mov	r3, r4
 800050e:	4640      	mov	r0, r8
 8000510:	9400      	str	r4, [sp, #0]
 8000512:	9401      	str	r4, [sp, #4]
 8000514:	f7ff ff3e 	bl	8000394 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);
	GPIOMode(PinPort(scl), PinBit(scl), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000518:	4628      	mov	r0, r5
 800051a:	f7ff ff25 	bl	8000368 <PinPort>
 800051e:	4680      	mov	r8, r0
 8000520:	4628      	mov	r0, r5
 8000522:	f7ff ff2b 	bl	800037c <PinBit>
 8000526:	2202      	movs	r2, #2
 8000528:	4601      	mov	r1, r0
 800052a:	4623      	mov	r3, r4
 800052c:	4640      	mov	r0, r8
 800052e:	9400      	str	r4, [sp, #0]
 8000530:	9401      	str	r4, [sp, #4]
 8000532:	f7ff ff2f 	bl	8000394 <GPIOMode>

//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif

	switch (clkspeed) {
 8000536:	f44f 53d4 	mov.w	r3, #6784	; 0x1a80
 800053a:	f2c0 0306 	movt	r3, #6
 800053e:	429f      	cmp	r7, r3
 8000540:	d010      	beq.n	8000564 <i2c_begin+0xd0>
 8000542:	f244 2340 	movw	r3, #16960	; 0x4240
 8000546:	f2c0 030f 	movt	r3, #15
 800054a:	429f      	cmp	r7, r3
 800054c:	d00a      	beq.n	8000564 <i2c_begin+0xd0>
 800054e:	f248 63a0 	movw	r3, #34464	; 0x86a0
	case 100000L:
	case 400000L:
	case 1000000L:
		break;
	default:
		clkspeed = 100000L;
 8000552:	461a      	mov	r2, r3
 8000554:	f364 421f 	bfi	r2, r4, #16, #16

//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif

	switch (clkspeed) {
 8000558:	f2c0 0301 	movt	r3, #1
	case 100000L:
	case 400000L:
	case 1000000L:
		break;
	default:
		clkspeed = 100000L;
 800055c:	429f      	cmp	r7, r3
 800055e:	bf0c      	ite	eq
 8000560:	461f      	moveq	r7, r3
 8000562:	4617      	movne	r7, r2
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8000564:	2300      	movs	r3, #0
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 8000566:	a906      	add	r1, sp, #24
	default:
		clkspeed = 100000L;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8000568:	461c      	mov	r4, r3
 800056a:	f8ad 300c 	strh.w	r3, [sp, #12]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800056e:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000572:	f8ad 300e 	strh.w	r3, [sp, #14]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8000576:	f44f 6380 	mov.w	r3, #1024	; 0x400
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 800057a:	f841 7d10 	str.w	r7, [r1, #-16]!

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2Cx, &I2C_InitStructure);
 800057e:	4630      	mov	r0, r6
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8000580:	f8ad 3012 	strh.w	r3, [sp, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000584:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000588:	f8ad 3014 	strh.w	r3, [sp, #20]
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2Cx, &I2C_InitStructure);
 800058c:	f001 f908 	bl	80017a0 <I2C_Init>
	/* I2C Peripheral Enable */
	I2C_Cmd(I2Cx, ENABLE);
 8000590:	4630      	mov	r0, r6
 8000592:	2101      	movs	r1, #1
 8000594:	f001 f982 	bl	800189c <I2C_Cmd>

	i2c1_status = NOT_READY;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <i2c_begin+0x120>)
 800059a:	22ff      	movs	r2, #255	; 0xff
 800059c:	701a      	strb	r2, [r3, #0]
	i2c1_direction = NOT_DEFINED;
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <i2c_begin+0x124>)
 80005a0:	701c      	strb	r4, [r3, #0]
}
 80005a2:	b006      	add	sp, #24
 80005a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	I2C_InitTypeDef I2C_InitStructure;
	uint8_t af;

	if ( I2Cx == I2C1 ) {
		/* I2C Periph clock enable */
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 80005a8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80005ac:	2101      	movs	r1, #1
 80005ae:	f001 fc71 	bl	8001e94 <RCC_APB1PeriphClockCmd>
 80005b2:	e789      	b.n	80004c8 <i2c_begin+0x34>
 80005b4:	200009ad 	.word	0x200009ad
 80005b8:	200009ac 	.word	0x200009ac

080005bc <i2c_transmit>:

	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}

void i2c_transmit(I2C_TypeDef * I2Cx, uint8_t addr, uint8_t * data, uint16_t length) {
 80005bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t i;

	i2c1_direction = TRANSMITTER;
 80005c0:	4e38      	ldr	r6, [pc, #224]	; (80006a4 <i2c_transmit+0xe8>)
	//
	i2c1_status = NOT_READY;
 80005c2:	4c39      	ldr	r4, [pc, #228]	; (80006a8 <i2c_transmit+0xec>)

	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}

void i2c_transmit(I2C_TypeDef * I2Cx, uint8_t addr, uint8_t * data, uint16_t length) {
 80005c4:	4698      	mov	r8, r3
	uint16_t i;

	i2c1_direction = TRANSMITTER;
 80005c6:	2301      	movs	r3, #1
 80005c8:	7033      	strb	r3, [r6, #0]
	//
	i2c1_status = NOT_READY;
 80005ca:	23ff      	movs	r3, #255	; 0xff

	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}

void i2c_transmit(I2C_TypeDef * I2Cx, uint8_t addr, uint8_t * data, uint16_t length) {
 80005cc:	460f      	mov	r7, r1
 80005ce:	4615      	mov	r5, r2
	uint16_t i;

	i2c1_direction = TRANSMITTER;
	//
	i2c1_status = NOT_READY;
 80005d0:	7023      	strb	r3, [r4, #0]
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY ))
 80005d2:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80005d6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80005da:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80005de:	f001 fa9d 	bl	8001b1c <I2C_GetFlagStatus>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2800      	cmp	r0, #0
 80005e6:	d1f4      	bne.n	80005d2 <i2c_transmit+0x16>
		;
	i2c1_status = READY;

	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 80005e8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80005ec:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80005f0:	2101      	movs	r1, #1
	i2c1_direction = TRANSMITTER;
	//
	i2c1_status = NOT_READY;
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY ))
		;
	i2c1_status = READY;
 80005f2:	7023      	strb	r3, [r4, #0]

	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 80005f4:	f001 f960 	bl	80018b8 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 80005f8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80005fc:	2101      	movs	r1, #1
 80005fe:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000602:	f2c0 0103 	movt	r1, #3
 8000606:	f001 fa73 	bl	8001af0 <I2C_CheckEvent>
 800060a:	2800      	cmp	r0, #0
 800060c:	d0f4      	beq.n	80005f8 <i2c_transmit+0x3c>
		;
	i2c1_status = START_ISSUED;

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 800060e:	0079      	lsls	r1, r7, #1
 8000610:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = START_ISSUED;
 8000614:	2301      	movs	r3, #1

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8000616:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800061a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800061e:	2200      	movs	r2, #0
	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = START_ISSUED;
 8000620:	7023      	strb	r3, [r4, #0]

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8000622:	f001 f965 	bl	80018f0 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
 8000626:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800062a:	2182      	movs	r1, #130	; 0x82
 800062c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000630:	f2c0 0107 	movt	r1, #7
 8000634:	f001 fa5c 	bl	8001af0 <I2C_CheckEvent>
 8000638:	2800      	cmp	r0, #0
 800063a:	d0f4      	beq.n	8000626 <i2c_transmit+0x6a>
		;
	i2c1_status = DST_ADDRESS_SENT;
 800063c:	2302      	movs	r3, #2
 800063e:	7023      	strb	r3, [r4, #0]

	for (i = 0; i < length; i++) {
 8000640:	f1b8 0f00 	cmp.w	r8, #0
 8000644:	d01e      	beq.n	8000684 <i2c_transmit+0xc8>
 8000646:	2700      	movs	r7, #0
		I2C_SendData(I2C1, data[i]);
		i2c1_status = BYTE_TRANSMITTING;
 8000648:	f04f 0a04 	mov.w	sl, #4
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			;
		i2c1_status = BYTE_TRANSMITTED;
 800064c:	f04f 0905 	mov.w	r9, #5
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
		;
	i2c1_status = DST_ADDRESS_SENT;

	for (i = 0; i < length; i++) {
		I2C_SendData(I2C1, data[i]);
 8000650:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000654:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000658:	5de9      	ldrb	r1, [r5, r7]
 800065a:	f001 f9e1 	bl	8001a20 <I2C_SendData>
		i2c1_status = BYTE_TRANSMITTING;
 800065e:	f884 a000 	strb.w	sl, [r4]
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
 8000662:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000666:	2184      	movs	r1, #132	; 0x84
 8000668:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800066c:	f2c0 0107 	movt	r1, #7
 8000670:	f001 fa3e 	bl	8001af0 <I2C_CheckEvent>
 8000674:	2800      	cmp	r0, #0
 8000676:	d0f4      	beq.n	8000662 <i2c_transmit+0xa6>
			;
		i2c1_status = BYTE_TRANSMITTED;
 8000678:	3701      	adds	r7, #1
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
		;
	i2c1_status = DST_ADDRESS_SENT;

	for (i = 0; i < length; i++) {
 800067a:	b2bb      	uxth	r3, r7
 800067c:	4598      	cmp	r8, r3
		I2C_SendData(I2C1, data[i]);
		i2c1_status = BYTE_TRANSMITTING;
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			;
		i2c1_status = BYTE_TRANSMITTED;
 800067e:	f884 9000 	strb.w	r9, [r4]
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
		;
	i2c1_status = DST_ADDRESS_SENT;

	for (i = 0; i < length; i++) {
 8000682:	d8e5      	bhi.n	8000650 <i2c_transmit+0x94>
			;
		i2c1_status = BYTE_TRANSMITTED;
	}
	i2c1_status = TRANSMISSION_COMPLETED;

	I2C_GenerateSTOP(I2C1, ENABLE);
 8000684:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			;
		i2c1_status = BYTE_TRANSMITTED;
	}
	i2c1_status = TRANSMISSION_COMPLETED;
 8000688:	2306      	movs	r3, #6

	I2C_GenerateSTOP(I2C1, ENABLE);
 800068a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800068e:	2101      	movs	r1, #1
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			;
		i2c1_status = BYTE_TRANSMITTED;
	}
	i2c1_status = TRANSMISSION_COMPLETED;
 8000690:	7023      	strb	r3, [r4, #0]

	I2C_GenerateSTOP(I2C1, ENABLE);
 8000692:	f001 f91f 	bl	80018d4 <I2C_GenerateSTOP>
	i2c1_status = NOT_READY;
 8000696:	23ff      	movs	r3, #255	; 0xff
 8000698:	7023      	strb	r3, [r4, #0]
	i2c1_direction = NOT_DEFINED;
 800069a:	2300      	movs	r3, #0
 800069c:	7033      	strb	r3, [r6, #0]
}
 800069e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a2:	bf00      	nop
 80006a4:	200009ac 	.word	0x200009ac
 80006a8:	200009ad 	.word	0x200009ad

080006ac <i2c_requestFrom>:


void i2c_requestFrom(I2C_TypeDef * I2Cx, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80006ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t i;
	i2c1_direction = RECEIVER;
 80006b0:	4d6a      	ldr	r5, [pc, #424]	; (800085c <i2c_requestFrom+0x1b0>)
	//
	i2c1_status = NOT_READY;
 80006b2:	4c6b      	ldr	r4, [pc, #428]	; (8000860 <i2c_requestFrom+0x1b4>)
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}


void i2c_requestFrom(I2C_TypeDef * I2Cx, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80006b4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80006b8:	4699      	mov	r9, r3
	uint16_t i;
	i2c1_direction = RECEIVER;
 80006ba:	2302      	movs	r3, #2
 80006bc:	702b      	strb	r3, [r5, #0]
	//
	i2c1_status = NOT_READY;
 80006be:	23ff      	movs	r3, #255	; 0xff
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}


void i2c_requestFrom(I2C_TypeDef * I2Cx, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80006c0:	460f      	mov	r7, r1
 80006c2:	4690      	mov	r8, r2
	uint16_t i;
	i2c1_direction = RECEIVER;
	//
	i2c1_status = NOT_READY;
 80006c4:	7023      	strb	r3, [r4, #0]
	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY ))
 80006c6:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80006ca:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006ce:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80006d2:	f001 fa23 	bl	8001b1c <I2C_GetFlagStatus>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2800      	cmp	r0, #0
 80006da:	d1f4      	bne.n	80006c6 <i2c_requestFrom+0x1a>
		;
	i2c1_status = READY;

	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 80006dc:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80006e0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006e4:	2101      	movs	r1, #1
	//
	i2c1_status = NOT_READY;
	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY ))
		;
	i2c1_status = READY;
 80006e6:	7023      	strb	r3, [r4, #0]

	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 80006e8:	f001 f8e6 	bl	80018b8 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 80006ec:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80006f0:	2101      	movs	r1, #1
 80006f2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80006f6:	f2c0 0103 	movt	r1, #3
 80006fa:	f001 f9f9 	bl	8001af0 <I2C_CheckEvent>
 80006fe:	2800      	cmp	r0, #0
 8000700:	d0f4      	beq.n	80006ec <i2c_requestFrom+0x40>
		;
	i2c1_status = START_ISSUED;

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8000702:	007f      	lsls	r7, r7, #1
 8000704:	b2ff      	uxtb	r7, r7
 8000706:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = START_ISSUED;
 800070a:	2301      	movs	r3, #1

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 800070c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000710:	4639      	mov	r1, r7
 8000712:	2200      	movs	r2, #0
	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = START_ISSUED;
 8000714:	7023      	strb	r3, [r4, #0]

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8000716:	f001 f8eb 	bl	80018f0 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
 800071a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800071e:	2182      	movs	r1, #130	; 0x82
 8000720:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000724:	f2c0 0107 	movt	r1, #7
 8000728:	f001 f9e2 	bl	8001af0 <I2C_CheckEvent>
 800072c:	2800      	cmp	r0, #0
 800072e:	d0f4      	beq.n	800071a <i2c_requestFrom+0x6e>
	}
	i2c1_status = DST_ADDRESS_SENT;

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(I2C1, req);
 8000730:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
	}
	i2c1_status = DST_ADDRESS_SENT;
 8000734:	2302      	movs	r3, #2

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(I2C1, req);
 8000736:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800073a:	4641      	mov	r1, r8
	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
	}
	i2c1_status = DST_ADDRESS_SENT;
 800073c:	7023      	strb	r3, [r4, #0]

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(I2C1, req);
 800073e:	f001 f96f 	bl	8001a20 <I2C_SendData>
	i2c1_status = BYTE_TRANSMITTING;
 8000742:	2304      	movs	r3, #4
 8000744:	7023      	strb	r3, [r4, #0]
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
 8000746:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800074a:	2184      	movs	r1, #132	; 0x84
 800074c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000750:	f2c0 0107 	movt	r1, #7
 8000754:	f001 f9cc 	bl	8001af0 <I2C_CheckEvent>
 8000758:	2800      	cmp	r0, #0
 800075a:	d0f4      	beq.n	8000746 <i2c_requestFrom+0x9a>
	i2c1_status = TRANSMISSION_COMPLETED;

	//	  I2C_GenerateSTOP(I2C1, ENABLE);

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 800075c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
	I2C_SendData(I2C1, req);
	i2c1_status = BYTE_TRANSMITTING;
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
		;
	i2c1_status = TRANSMISSION_COMPLETED;
 8000760:	2306      	movs	r3, #6

	//	  I2C_GenerateSTOP(I2C1, ENABLE);

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 8000762:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000766:	2101      	movs	r1, #1
	I2C_SendData(I2C1, req);
	i2c1_status = BYTE_TRANSMITTING;
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
		;
	i2c1_status = TRANSMISSION_COMPLETED;
 8000768:	7023      	strb	r3, [r4, #0]

	//	  I2C_GenerateSTOP(I2C1, ENABLE);

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 800076a:	f001 f8a5 	bl	80018b8 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 800076e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000772:	2101      	movs	r1, #1
 8000774:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000778:	f2c0 0103 	movt	r1, #3
 800077c:	f001 f9b8 	bl	8001af0 <I2C_CheckEvent>
 8000780:	2800      	cmp	r0, #0
 8000782:	d0f4      	beq.n	800076e <i2c_requestFrom+0xc2>
		;
	i2c1_status = RESTART_ISSUED;

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
 8000784:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = RESTART_ISSUED;
 8000788:	2307      	movs	r3, #7

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
 800078a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800078e:	4639      	mov	r1, r7
 8000790:	2201      	movs	r2, #1
	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = RESTART_ISSUED;
 8000792:	7023      	strb	r3, [r4, #0]

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
 8000794:	f001 f8ac 	bl	80018f0 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ))
 8000798:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800079c:	2102      	movs	r1, #2
 800079e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007a2:	f2c0 0103 	movt	r1, #3
 80007a6:	f001 f9a3 	bl	8001af0 <I2C_CheckEvent>
 80007aa:	2800      	cmp	r0, #0
 80007ac:	d0f4      	beq.n	8000798 <i2c_requestFrom+0xec>
		;
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 80007ae:	2e01      	cmp	r6, #1
 80007b0:	d920      	bls.n	80007f4 <i2c_requestFrom+0x148>
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}


void i2c_requestFrom(I2C_TypeDef * I2Cx, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80007b2:	3e02      	subs	r6, #2
 80007b4:	fa1f fa86 	uxth.w	sl, r6
 80007b8:	f109 0801 	add.w	r8, r9, #1
 80007bc:	44d0      	add	r8, sl
 80007be:	464e      	mov	r6, r9
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ))
		;
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
		i2c1_status = RECEIVE_BYTE_READY;
 80007c0:	2708      	movs	r7, #8
 80007c2:	7027      	strb	r7, [r4, #0]
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 80007c4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80007c8:	2140      	movs	r1, #64	; 0x40
 80007ca:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007ce:	f2c0 0103 	movt	r1, #3
 80007d2:	f001 f98d 	bl	8001af0 <I2C_CheckEvent>
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d0f4      	beq.n	80007c4 <i2c_requestFrom+0x118>
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
 80007da:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80007de:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007e2:	f001 f91f 	bl	8001a24 <I2C_ReceiveData>
 80007e6:	f806 0b01 	strb.w	r0, [r6], #1
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ))
		;
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 80007ea:	4546      	cmp	r6, r8
 80007ec:	d1e9      	bne.n	80007c2 <i2c_requestFrom+0x116>
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}


void i2c_requestFrom(I2C_TypeDef * I2Cx, uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80007ee:	f10a 0a01 	add.w	sl, sl, #1
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ))
		;
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 80007f2:	44d1      	add	r9, sl
		i2c1_status = BYTE_RECEIVED;
	}
	i2c1_status = BEFORELAST_BYTE_RECEIVED;

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(I2C1, DISABLE);
 80007f4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
		i2c1_status = BYTE_RECEIVED;
	}
	i2c1_status = BEFORELAST_BYTE_RECEIVED;
 80007f8:	230a      	movs	r3, #10

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(I2C1, DISABLE);
 80007fa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007fe:	2100      	movs	r1, #0
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
		i2c1_status = BYTE_RECEIVED;
	}
	i2c1_status = BEFORELAST_BYTE_RECEIVED;
 8000800:	7023      	strb	r3, [r4, #0]

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(I2C1, DISABLE);
 8000802:	f001 f87f 	bl	8001904 <I2C_AcknowledgeConfig>
	/* Send STOP Condition */
	I2C_GenerateSTOP(I2C1, ENABLE);
 8000806:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800080a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800080e:	2101      	movs	r1, #1
 8000810:	f001 f860 	bl	80018d4 <I2C_GenerateSTOP>
	i2c1_status = LAST_BYTE_READY;
 8000814:	230b      	movs	r3, #11
 8000816:	7023      	strb	r3, [r4, #0]

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 8000818:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800081c:	2140      	movs	r1, #64	; 0x40
 800081e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000822:	f2c0 0103 	movt	r1, #3
 8000826:	f001 f963 	bl	8001af0 <I2C_CheckEvent>
 800082a:	2800      	cmp	r0, #0
 800082c:	d0f4      	beq.n	8000818 <i2c_requestFrom+0x16c>
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
 800082e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000832:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000836:	f001 f8f5 	bl	8001a24 <I2C_ReceiveData>
 800083a:	f889 0000 	strb.w	r0, [r9]
	i2c1_status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 800083e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
	i2c1_status = RECEIVE_BYTE_COMPLETED;
 8000842:	230c      	movs	r3, #12

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 8000844:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000848:	2101      	movs	r1, #1

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
	i2c1_status = RECEIVE_BYTE_COMPLETED;
 800084a:	7023      	strb	r3, [r4, #0]

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 800084c:	f001 f85a 	bl	8001904 <I2C_AcknowledgeConfig>
	i2c1_status = NOT_READY;
 8000850:	23ff      	movs	r3, #255	; 0xff
 8000852:	7023      	strb	r3, [r4, #0]
	i2c1_direction = NOT_DEFINED;
 8000854:	2300      	movs	r3, #0
 8000856:	702b      	strb	r3, [r5, #0]
}
 8000858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800085c:	200009ac 	.word	0x200009ac
 8000860:	200009ad 	.word	0x200009ad

08000864 <spi_begin>:
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000868:	f44f 5440 	mov.w	r4, #12288	; 0x3000
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 800086c:	b08b      	sub	sp, #44	; 0x2c
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 800086e:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000872:	42a0      	cmp	r0, r4
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000874:	4681      	mov	r9, r0
 8000876:	460f      	mov	r7, r1
 8000878:	4616      	mov	r6, r2
 800087a:	4698      	mov	r8, r3
 800087c:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000880:	f000 80ac 	beq.w	80009dc <spi_begin+0x178>
//		 sck = PA5; // PB3
//		 miso = PA6; // PB4
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
 8000884:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000888:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800088c:	4298      	cmp	r0, r3
 800088e:	f000 809d 	beq.w	80009cc <spi_begin+0x168>
		// PB12, 13, 14, 15
//		break;
	} else {
//	case SPI3Bus:
//	default:
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8000892:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000896:	2101      	movs	r1, #1
 8000898:	f001 fb42 	bl	8001f20 <RCC_APB1PeriphResetCmd>
		af = GPIO_AF_SPI3;
 800089c:	f04f 0b06 	mov.w	fp, #6
//		 mosi = PB5;
//		 nss = PA15; // PA4;
//		break;
	}

	GPIOMode(PinPort(sck), PinBit(sck), GPIO_Mode_AF, GPIO_Speed_25MHz,
 80008a0:	4638      	mov	r0, r7
 80008a2:	f7ff fd61 	bl	8000368 <PinPort>
 80008a6:	4684      	mov	ip, r0
 80008a8:	4638      	mov	r0, r7
 80008aa:	f8cd c00c 	str.w	ip, [sp, #12]
 80008ae:	f7ff fd65 	bl	800037c <PinBit>
 80008b2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80008b6:	2401      	movs	r4, #1
 80008b8:	2500      	movs	r5, #0
 80008ba:	4601      	mov	r1, r0
 80008bc:	2202      	movs	r2, #2
 80008be:	4623      	mov	r3, r4
 80008c0:	4660      	mov	r0, ip
 80008c2:	9500      	str	r5, [sp, #0]
 80008c4:	9401      	str	r4, [sp, #4]
 80008c6:	f7ff fd65 	bl	8000394 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(miso), PinBit(miso), GPIO_Mode_AF, GPIO_Speed_25MHz,
 80008ca:	4630      	mov	r0, r6
 80008cc:	f7ff fd4c 	bl	8000368 <PinPort>
 80008d0:	4684      	mov	ip, r0
 80008d2:	4630      	mov	r0, r6
 80008d4:	f8cd c00c 	str.w	ip, [sp, #12]
 80008d8:	f7ff fd50 	bl	800037c <PinBit>
 80008dc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80008e0:	9500      	str	r5, [sp, #0]
 80008e2:	4601      	mov	r1, r0
 80008e4:	2202      	movs	r2, #2
 80008e6:	4623      	mov	r3, r4
 80008e8:	4660      	mov	r0, ip
 80008ea:	9401      	str	r4, [sp, #4]
 80008ec:	f7ff fd52 	bl	8000394 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(mosi), PinBit(mosi), GPIO_Mode_AF, GPIO_Speed_25MHz,
 80008f0:	4640      	mov	r0, r8
 80008f2:	f7ff fd39 	bl	8000368 <PinPort>
 80008f6:	4684      	mov	ip, r0
 80008f8:	4640      	mov	r0, r8
 80008fa:	f8cd c00c 	str.w	ip, [sp, #12]
 80008fe:	f7ff fd3d 	bl	800037c <PinBit>
 8000902:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8000906:	9500      	str	r5, [sp, #0]
 8000908:	4601      	mov	r1, r0
 800090a:	2202      	movs	r2, #2
 800090c:	4660      	mov	r0, ip
 800090e:	4623      	mov	r3, r4
 8000910:	9401      	str	r4, [sp, #4]
 8000912:	f7ff fd3f 	bl	8000394 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIO_PinAFConfig(PinPort(sck), PinSource(sck), af);
 8000916:	4638      	mov	r0, r7
 8000918:	f7ff fd26 	bl	8000368 <PinPort>
 800091c:	4603      	mov	r3, r0
 800091e:	4638      	mov	r0, r7
 8000920:	9303      	str	r3, [sp, #12]
 8000922:	f7ff fd33 	bl	800038c <PinSource>
 8000926:	9b03      	ldr	r3, [sp, #12]
 8000928:	4601      	mov	r1, r0
 800092a:	465a      	mov	r2, fp
 800092c:	4618      	mov	r0, r3
 800092e:	f000 fee7 	bl	8001700 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(miso), PinSource(miso), af);
 8000932:	4630      	mov	r0, r6
 8000934:	f7ff fd18 	bl	8000368 <PinPort>
 8000938:	4607      	mov	r7, r0
 800093a:	4630      	mov	r0, r6
 800093c:	f7ff fd26 	bl	800038c <PinSource>
 8000940:	465a      	mov	r2, fp
 8000942:	4601      	mov	r1, r0
 8000944:	4638      	mov	r0, r7
 8000946:	f000 fedb 	bl	8001700 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(mosi), PinSource(mosi), af);
 800094a:	4640      	mov	r0, r8
 800094c:	f7ff fd0c 	bl	8000368 <PinPort>
 8000950:	4606      	mov	r6, r0
 8000952:	4640      	mov	r0, r8
 8000954:	f7ff fd1a 	bl	800038c <PinSource>
 8000958:	465a      	mov	r2, fp
 800095a:	4601      	mov	r1, r0
 800095c:	4630      	mov	r0, r6
 800095e:	f000 fecf 	bl	8001700 <GPIO_PinAFConfig>
	// nSS by software
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
 8000962:	4650      	mov	r0, sl
 8000964:	f7ff fd00 	bl	8000368 <PinPort>
 8000968:	4606      	mov	r6, r0
 800096a:	4650      	mov	r0, sl
 800096c:	f7ff fd06 	bl	800037c <PinBit>
 8000970:	4622      	mov	r2, r4
 8000972:	4623      	mov	r3, r4
 8000974:	4601      	mov	r1, r0
 8000976:	4630      	mov	r0, r6
 8000978:	9500      	str	r5, [sp, #0]
 800097a:	9401      	str	r4, [sp, #4]
 800097c:	f7ff fd0a 	bl	8000394 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
 8000980:	4650      	mov	r0, sl
 8000982:	4621      	mov	r1, r4
 8000984:	f7ff fcb6 	bl	80002f4 <digitalWrite>
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000988:	f44f 7382 	mov.w	r3, #260	; 0x104
 800098c:	f8ad 3016 	strh.w	r3, [sp, #22]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000990:	f44f 7300 	mov.w	r3, #512	; 0x200
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 8000994:	4648      	mov	r0, r9
 8000996:	a905      	add	r1, sp, #20
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000998:	f8ad 301e 	strh.w	r3, [sp, #30]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 800099c:	2310      	movs	r3, #16
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800099e:	f8ad 5014 	strh.w	r5, [sp, #20]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 80009a2:	f8ad 5018 	strh.w	r5, [sp, #24]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 80009a6:	f8ad 501a 	strh.w	r5, [sp, #26]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 80009aa:	f8ad 501c 	strh.w	r5, [sp, #28]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 80009ae:	f8ad 3020 	strh.w	r3, [sp, #32]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 80009b2:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;
 80009b6:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24

	SPI_Init(SPIx, &SPI_InitStruct);
 80009ba:	f001 fb8b 	bl	80020d4 <SPI_Init>

	SPI_Cmd(SPIx, ENABLE);
 80009be:	4648      	mov	r0, r9
 80009c0:	4621      	mov	r1, r4
 80009c2:	f001 fc3b 	bl	800223c <SPI_Cmd>
	 *              - Enable or disable the SS output using the SPI_SSOutputCmd() function
	 *
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}
 80009c6:	b00b      	add	sp, #44	; 0x2c
 80009c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
//	case SPI2Bus:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 80009cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009d0:	2101      	movs	r1, #1
 80009d2:	f001 fa5f 	bl	8001e94 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_SPI2;
 80009d6:	f04f 0b05 	mov.w	fp, #5
 80009da:	e761      	b.n	80008a0 <spi_begin+0x3c>
	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
//	case SPI1Bus:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80009dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80009e0:	2101      	movs	r1, #1
 80009e2:	f001 fa65 	bl	8001eb0 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_SPI1;
 80009e6:	f04f 0b05 	mov.w	fp, #5
 80009ea:	e759      	b.n	80008a0 <spi_begin+0x3c>

080009ec <spi_transfer>:
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 80009ec:	b570      	push	{r4, r5, r6, lr}
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 80009ee:	4615      	mov	r5, r2
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 80009f0:	4604      	mov	r4, r0
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 80009f2:	b1ca      	cbz	r2, 8000a28 <spi_transfer+0x3c>
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 80009f4:	1e4e      	subs	r6, r1, #1
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
		/* Wait for SPIx Tx buffer empty */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE ) == RESET)
 80009f6:	4620      	mov	r0, r4
 80009f8:	2102      	movs	r1, #2
 80009fa:	f001 fceb 	bl	80023d4 <SPI_I2S_GetFlagStatus>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	d0f9      	beq.n	80009f6 <spi_transfer+0xa>
			;
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
 8000a02:	4620      	mov	r0, r4
 8000a04:	7871      	ldrb	r1, [r6, #1]
 8000a06:	f001 fca9 	bl	800235c <SPI_I2S_SendData>
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
 8000a0a:	4620      	mov	r0, r4
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	f001 fce1 	bl	80023d4 <SPI_I2S_GetFlagStatus>
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d0f9      	beq.n	8000a0a <spi_transfer+0x1e>
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 8000a16:	4620      	mov	r0, r4
 8000a18:	f001 fc9c 	bl	8002354 <SPI_I2S_ReceiveData>

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000a1c:	3d01      	subs	r5, #1
 8000a1e:	b2ad      	uxth	r5, r5
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 8000a20:	f806 0f01 	strb.w	r0, [r6, #1]!

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000a24:	2d00      	cmp	r5, #0
 8000a26:	d1e6      	bne.n	80009f6 <spi_transfer+0xa>
 8000a28:	bd70      	pop	{r4, r5, r6, pc}
 8000a2a:	bf00      	nop

08000a2c <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 8000a2c:	f640 13b0 	movw	r3, #2480	; 0x9b0
 8000a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	3201      	adds	r2, #1
 8000a38:	601a      	str	r2, [r3, #0]
}
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <SysTick_delay+0x10>)
 8000a3e:	681a      	ldr	r2, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 8000a40:	6819      	ldr	r1, [r3, #0]
 8000a42:	1a89      	subs	r1, r1, r2
 8000a44:	4281      	cmp	r1, r0
 8000a46:	d3fb      	bcc.n	8000a40 <SysTick_delay+0x4>
		;
}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	200009b0 	.word	0x200009b0

08000a50 <SysTick_Start>:

void SysTick_Start(void) {
 8000a50:	b500      	push	{lr}
 8000a52:	b085      	sub	sp, #20
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 8000a54:	4668      	mov	r0, sp
 8000a56:	f001 f96f 	bl	8001d38 <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000a5a:	9901      	ldr	r1, [sp, #4]
 8000a5c:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8000a60:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8000a64:	fba3 2101 	umull	r2, r1, r3, r1
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000a68:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000a6c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000a70:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000a74:	0989      	lsrs	r1, r1, #6
 8000a76:	f2ce 0200 	movt	r2, #57344	; 0xe000
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000a7a:	3901      	subs	r1, #1
 8000a7c:	6059      	str	r1, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000a7e:	21f0      	movs	r1, #240	; 0xf0
 8000a80:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a88:	2207      	movs	r2, #7
 8000a8a:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 8000a8c:	b005      	add	sp, #20
 8000a8e:	bd00      	pop	{pc}

08000a90 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 8000a90:	f640 13b0 	movw	r3, #2480	; 0x9b0
 8000a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a98:	6818      	ldr	r0, [r3, #0]
}
 8000a9a:	4770      	bx	lr

08000a9c <buffer_clear>:
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 8000aa2:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 8000aa6:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 8000aaa:	4770      	bx	lr

08000aac <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 8000aac:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000ab4:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 8000ab8:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d001      	beq.n	8000ac4 <buffer_is_full+0x10>
		return 1;
	}
	return 0;
 8000ac0:	2000      	movs	r0, #0
}
 8000ac2:	4770      	bx	lr

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
 8000ac4:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
	if ( (r->head == r->tail) && (r->count > 0) ) {
		return 1;
 8000ac8:	3000      	adds	r0, #0
 8000aca:	bf18      	it	ne
 8000acc:	2001      	movne	r0, #1
 8000ace:	4770      	bx	lr

08000ad0 <buffer_enque>:
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000ad0:	4603      	mov	r3, r0
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000ad2:	f8b0 0100 	ldrh.w	r0, [r0, #256]	; 0x100
		return 1;
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000ad6:	b430      	push	{r4, r5}
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000ad8:	f9b3 4102 	ldrsh.w	r4, [r3, #258]	; 0x102
 8000adc:	b202      	sxth	r2, r0
 8000ade:	4294      	cmp	r4, r2
 8000ae0:	d013      	beq.n	8000b0a <buffer_enque+0x3a>
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
 8000ae2:	3001      	adds	r0, #1
	r->count++;
	r->head %= USART_BUFFER_SIZE;
 8000ae4:	b200      	sxth	r0, r0
 8000ae6:	17c4      	asrs	r4, r0, #31
 8000ae8:	0e64      	lsrs	r4, r4, #25

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000aea:	f8b3 5104 	ldrh.w	r5, [r3, #260]	; 0x104
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
 8000aee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	r->count++;
	r->head %= USART_BUFFER_SIZE;
 8000af2:	1900      	adds	r0, r0, r4
 8000af4:	f000 007f 	and.w	r0, r0, #127	; 0x7f

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000af8:	1c6a      	adds	r2, r5, #1
	r->head %= USART_BUFFER_SIZE;
 8000afa:	1b04      	subs	r4, r0, r4

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000afc:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8000b00:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	return w;
}
 8000b04:	4608      	mov	r0, r1
 8000b06:	bc30      	pop	{r4, r5}
 8000b08:	4770      	bx	lr
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000b0a:	f8b3 4104 	ldrh.w	r4, [r3, #260]	; 0x104
 8000b0e:	2c00      	cmp	r4, #0
 8000b10:	d0e7      	beq.n	8000ae2 <buffer_enque+0x12>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
 8000b12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b16:	e7f5      	b.n	8000b04 <buffer_enque+0x34>

08000b18 <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000b18:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	b410      	push	{r4}
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
 8000b20:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
 8000b24:	b90a      	cbnz	r2, 8000b2a <buffer_deque+0x12>
		return 0xffff;
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 8000b26:	bc10      	pop	{r4}
 8000b28:	4770      	bx	lr

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8000b2a:	f8b3 0102 	ldrh.w	r0, [r3, #258]	; 0x102
 8000b2e:	1c44      	adds	r4, r0, #1
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000b30:	b224      	sxth	r4, r4
 8000b32:	17e1      	asrs	r1, r4, #31
 8000b34:	0e49      	lsrs	r1, r1, #25
 8000b36:	1864      	adds	r4, r4, r1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8000b38:	b200      	sxth	r0, r0
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000b3a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
	r->count--;
 8000b3e:	3a01      	subs	r2, #1
	r->tail %= USART_BUFFER_SIZE;
 8000b40:	1a61      	subs	r1, r4, r1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8000b42:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	r->count--;
 8000b46:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 8000b4a:	f8a3 1102 	strh.w	r1, [r3, #258]	; 0x102
 8000b4e:	e7ea      	b.n	8000b26 <buffer_deque+0xe>

08000b50 <usart_begin>:
	return w;
}

void usart_begin(USART_TypeDef * /*USARTSerial*/ USARTx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

//	switch(usx) {
//	case USART1Serial:
	if ( USARTx == USART1 ) {
 8000b54:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000b58:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000b5c:	42a0      	cmp	r0, r4
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}

void usart_begin(USART_TypeDef * /*USARTSerial*/ USARTx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000b5e:	b08b      	sub	sp, #44	; 0x2c
 8000b60:	4605      	mov	r5, r0
 8000b62:	460f      	mov	r7, r1
 8000b64:	4616      	mov	r6, r2
 8000b66:	469a      	mov	sl, r3
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

//	switch(usx) {
//	case USART1Serial:
	if ( USARTx == USART1 ) {
 8000b68:	f000 80ae 	beq.w	8000cc8 <usart_begin+0x178>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx = 0;
//	break;
	} else if ( USARTx == USART2 ) {
 8000b6c:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000b70:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000b74:	4298      	cmp	r0, r3
 8000b76:	f000 80b2 	beq.w	8000cde <usart_begin+0x18e>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx = 1;
//	break;
	} else if ( USARTx == USART3 ) {
 8000b7a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000b7e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000b82:	4298      	cmp	r0, r3
 8000b84:	f000 80b7 	beq.w	8000cf6 <usart_begin+0x1a6>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx = 2;
//	break;
	} else if ( USARTx == UART4 ) {
 8000b88:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000b8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000b90:	4298      	cmp	r0, r3
 8000b92:	f000 80bc 	beq.w	8000d0e <usart_begin+0x1be>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx = 3;
//	break;
	} else if ( USARTx == UART5 ) {
 8000b96:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000b9a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000b9e:	4298      	cmp	r0, r3
 8000ba0:	f000 8086 	beq.w	8000cb0 <usart_begin+0x160>
//		break;
	} else { //if ( USARTx == USART6 ) {
//	case USART6Serial:
//	default:
//		usx = USART6Serial;
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 8000ba4:	2020      	movs	r0, #32
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	f001 f982 	bl	8001eb0 <RCC_APB2PeriphClockCmd>
 8000bac:	2305      	movs	r3, #5
 8000bae:	9303      	str	r3, [sp, #12]
 8000bb0:	f04f 0b47 	mov.w	fp, #71	; 0x47
		af = GPIO_AF_USART6;
 8000bb4:	f04f 0808 	mov.w	r8, #8
		irq = USART6_IRQn;
		usx = 5;
//		break;
	}
	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
 8000bb8:	4638      	mov	r0, r7
 8000bba:	f7ff fbd5 	bl	8000368 <PinPort>
 8000bbe:	4681      	mov	r9, r0
 8000bc0:	4638      	mov	r0, r7
 8000bc2:	f7ff fbdb 	bl	800037c <PinBit>
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	2400      	movs	r4, #0
 8000bca:	4601      	mov	r1, r0
 8000bcc:	4613      	mov	r3, r2
 8000bce:	4648      	mov	r0, r9
 8000bd0:	9400      	str	r4, [sp, #0]
 8000bd2:	9401      	str	r4, [sp, #4]
 8000bd4:	f7ff fbde 	bl	8000394 <GPIOMode>
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
 8000bd8:	4630      	mov	r0, r6
 8000bda:	f7ff fbc5 	bl	8000368 <PinPort>
 8000bde:	4681      	mov	r9, r0
 8000be0:	4630      	mov	r0, r6
 8000be2:	f7ff fbcb 	bl	800037c <PinBit>
 8000be6:	2202      	movs	r2, #2
 8000be8:	4613      	mov	r3, r2
 8000bea:	4601      	mov	r1, r0
 8000bec:	4648      	mov	r0, r9
 8000bee:	9400      	str	r4, [sp, #0]
 8000bf0:	9401      	str	r4, [sp, #4]
 8000bf2:	f7ff fbcf 	bl	8000394 <GPIOMode>

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
 8000bf6:	4638      	mov	r0, r7
 8000bf8:	f7ff fbb6 	bl	8000368 <PinPort>
 8000bfc:	4681      	mov	r9, r0
 8000bfe:	4638      	mov	r0, r7
 8000c00:	f7ff fbc4 	bl	800038c <PinSource>
 8000c04:	4642      	mov	r2, r8
 8000c06:	4601      	mov	r1, r0
 8000c08:	4648      	mov	r0, r9
 8000c0a:	f000 fd79 	bl	8001700 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );
 8000c0e:	4630      	mov	r0, r6
 8000c10:	f7ff fbaa 	bl	8000368 <PinPort>
 8000c14:	4607      	mov	r7, r0
 8000c16:	4630      	mov	r0, r6
 8000c18:	f7ff fbb8 	bl	800038c <PinSource>
 8000c1c:	4642      	mov	r2, r8
 8000c1e:	4601      	mov	r1, r0
 8000c20:	4638      	mov	r0, r7
 8000c22:	f000 fd6d 	bl	8001700 <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000c26:	230c      	movs	r3, #12

	USART_Init(USARTx /*usartx[usx]*/, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000c28:	a905      	add	r1, sp, #20
 8000c2a:	4628      	mov	r0, r5
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000c2c:	f8ad 301e 	strh.w	r3, [sp, #30]
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8000c30:	f8cd a014 	str.w	sl, [sp, #20]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000c34:	f8ad 4018 	strh.w	r4, [sp, #24]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8000c38:	f8ad 401a 	strh.w	r4, [sp, #26]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8000c3c:	f8ad 401c 	strh.w	r4, [sp, #28]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000c40:	f8ad 4020 	strh.w	r4, [sp, #32]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(USARTx /*usartx[usx]*/, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000c44:	f002 fb66 	bl	8003314 <USART_Init>

	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000c48:	4628      	mov	r0, r5
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f240 5125 	movw	r1, #1317	; 0x525
 8000c50:	f002 fcca 	bl	80035e8 <USART_ITConfig>
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
 8000c54:	4622      	mov	r2, r4
 8000c56:	4628      	mov	r0, r5
 8000c58:	f240 7127 	movw	r1, #1831	; 0x727
 8000c5c:	f002 fcc4 	bl	80035e8 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = irq;
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000c60:	2601      	movs	r6, #1
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000c62:	a809      	add	r0, sp, #36	; 0x24
	USART_Init(USARTx /*usartx[usx]*/, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 8000c64:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8000c68:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8000c6c:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000c70:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000c74:	f000 fbac 	bl	80013d0 <NVIC_Init>
	//
	buffer_clear(&rxring[usx]);
 8000c78:	9a03      	ldr	r2, [sp, #12]
	buffer_clear(&txring[usx]);
 8000c7a:	492b      	ldr	r1, [pc, #172]	; (8000d28 <usart_begin+0x1d8>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
 8000c7c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000c80:	fb03 f302 	mul.w	r3, r3, r2
 8000c84:	4a29      	ldr	r2, [pc, #164]	; (8000d2c <usart_begin+0x1dc>)
 8000c86:	189a      	adds	r2, r3, r2
	buffer_clear(&txring[usx]);
 8000c88:	185b      	adds	r3, r3, r1
	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx /*usartx[usx]*/, ENABLE);
 8000c8a:	4628      	mov	r0, r5
 8000c8c:	4631      	mov	r1, r6
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000c8e:	f8a2 4100 	strh.w	r4, [r2, #256]	; 0x100
	r->tail = 0;
 8000c92:	f8a2 4102 	strh.w	r4, [r2, #258]	; 0x102
	r->count = 0;
 8000c96:	f8a2 4104 	strh.w	r4, [r2, #260]	; 0x104
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000c9a:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	r->tail = 0;
 8000c9e:	f8a3 4102 	strh.w	r4, [r3, #258]	; 0x102
	r->count = 0;
 8000ca2:	f8a3 4104 	strh.w	r4, [r3, #260]	; 0x104
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx /*usartx[usx]*/, ENABLE);
 8000ca6:	f002 fbc5 	bl	8003434 <USART_Cmd>
}
 8000caa:	b00b      	add	sp, #44	; 0x2c
 8000cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		irq = UART4_IRQn;
		usx = 3;
//	break;
	} else if ( USARTx == UART5 ) {
//	case UART5Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8000cb0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	f001 f8ed 	bl	8001e94 <RCC_APB1PeriphClockCmd>
 8000cba:	2204      	movs	r2, #4
 8000cbc:	9203      	str	r2, [sp, #12]
 8000cbe:	f04f 0b35 	mov.w	fp, #53	; 0x35
		af = GPIO_AF_UART5;
 8000cc2:	f04f 0808 	mov.w	r8, #8
 8000cc6:	e777      	b.n	8000bb8 <usart_begin+0x68>
	IRQn_Type irq = USART1_IRQn;

//	switch(usx) {
//	case USART1Serial:
	if ( USARTx == USART1 ) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000cc8:	2010      	movs	r0, #16
 8000cca:	2101      	movs	r1, #1
 8000ccc:	f001 f8f0 	bl	8001eb0 <RCC_APB2PeriphClockCmd>
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	9203      	str	r2, [sp, #12]
 8000cd4:	f04f 0b25 	mov.w	fp, #37	; 0x25
		af = GPIO_AF_USART1;
 8000cd8:	f04f 0807 	mov.w	r8, #7
 8000cdc:	e76c      	b.n	8000bb8 <usart_begin+0x68>
		irq = USART1_IRQn;
		usx = 0;
//	break;
	} else if ( USARTx == USART2 ) {
//	case USART2Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000cde:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	f001 f8d6 	bl	8001e94 <RCC_APB1PeriphClockCmd>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	9303      	str	r3, [sp, #12]
 8000cec:	f04f 0b26 	mov.w	fp, #38	; 0x26
		af = GPIO_AF_USART2;
 8000cf0:	f04f 0807 	mov.w	r8, #7
 8000cf4:	e760      	b.n	8000bb8 <usart_begin+0x68>
		irq = USART2_IRQn;
		usx = 1;
//	break;
	} else if ( USARTx == USART3 ) {
//	case USART3Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000cf6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	f001 f8ca 	bl	8001e94 <RCC_APB1PeriphClockCmd>
 8000d00:	2202      	movs	r2, #2
 8000d02:	9203      	str	r2, [sp, #12]
 8000d04:	f04f 0b27 	mov.w	fp, #39	; 0x27
		af = GPIO_AF_USART3;
 8000d08:	f04f 0807 	mov.w	r8, #7
 8000d0c:	e754      	b.n	8000bb8 <usart_begin+0x68>
		irq = USART3_IRQn;
		usx = 2;
//	break;
	} else if ( USARTx == UART4 ) {
//	case UART4Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8000d0e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d12:	2101      	movs	r1, #1
 8000d14:	f001 f8be 	bl	8001e94 <RCC_APB1PeriphClockCmd>
 8000d18:	2303      	movs	r3, #3
 8000d1a:	9303      	str	r3, [sp, #12]
 8000d1c:	f04f 0b34 	mov.w	fp, #52	; 0x34
		af = GPIO_AF_UART4;
 8000d20:	f04f 0808 	mov.w	r8, #8
 8000d24:	e748      	b.n	8000bb8 <usart_begin+0x68>
 8000d26:	bf00      	nop
 8000d28:	200009b4 	.word	0x200009b4
 8000d2c:	20000fd8 	.word	0x20000fd8

08000d30 <usart_bare_write>:
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx /*usartx[usx]*/, ENABLE);
}

void usart_bare_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
 8000d30:	b538      	push	{r3, r4, r5, lr}
 8000d32:	4604      	mov	r4, r0
 8000d34:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
 8000d36:	4620      	mov	r0, r4
 8000d38:	2180      	movs	r1, #128	; 0x80
 8000d3a:	f002 fc71 	bl	8003620 <USART_GetFlagStatus>
 8000d3e:	2800      	cmp	r0, #0
 8000d40:	d0f9      	beq.n	8000d36 <usart_bare_write+0x6>
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
 8000d42:	4620      	mov	r0, r4
 8000d44:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}
 8000d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USART_Cmd(USARTx /*usartx[usx]*/, ENABLE);
}

void usart_bare_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
 8000d4a:	f002 bba7 	b.w	800349c <USART_SendData>
 8000d4e:	bf00      	nop

08000d50 <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d54:	f2c4 0301 	movt	r3, #16385	; 0x4001
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
 8000d58:	b570      	push	{r4, r5, r6, lr}
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000d5a:	2500      	movs	r5, #0
 8000d5c:	4298      	cmp	r0, r3
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460e      	mov	r6, r1
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000d62:	d01c      	beq.n	8000d9e <usart_write+0x4e>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000d64:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000d68:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d6c:	2501      	movs	r5, #1
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d015      	beq.n	8000d9e <usart_write+0x4e>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000d72:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000d76:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d7a:	2502      	movs	r5, #2
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	d00e      	beq.n	8000d9e <usart_write+0x4e>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000d80:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000d84:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d88:	2503      	movs	r5, #3
 8000d8a:	4298      	cmp	r0, r3
 8000d8c:	d007      	beq.n	8000d9e <usart_write+0x4e>
		usx = 3;
	} else if ( USARTx == UART5 ) {
 8000d8e:	f44f 45a0 	mov.w	r5, #20480	; 0x5000
 8000d92:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8000d96:	42a8      	cmp	r0, r5
 8000d98:	bf14      	ite	ne
 8000d9a:	2505      	movne	r5, #5
 8000d9c:	2504      	moveq	r5, #4
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <usart_write+0x9c>)
 8000da0:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000da4:	fb02 3505 	mla	r5, r2, r5, r3
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000da8:	f9b5 2100 	ldrsh.w	r2, [r5, #256]	; 0x100
 8000dac:	f9b5 3102 	ldrsh.w	r3, [r5, #258]	; 0x102
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d011      	beq.n	8000dd8 <usart_write+0x88>
		usx = 5;
	}
	//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_micros(833);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
 8000db4:	2200      	movs	r2, #0
 8000db6:	4620      	mov	r0, r4
 8000db8:	f240 7127 	movw	r1, #1831	; 0x727
 8000dbc:	f002 fc14 	bl	80035e8 <USART_ITConfig>
	buffer_enque(&txring[usx], w);
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	4628      	mov	r0, r5
 8000dc4:	f7ff fe84 	bl	8000ad0 <buffer_enque>
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f240 7127 	movw	r1, #1831	; 0x727
 8000dce:	2201      	movs	r2, #1
}
 8000dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_micros(833);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
 8000dd4:	f002 bc08 	b.w	80035e8 <USART_ITConfig>
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000dd8:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0e9      	beq.n	8000db4 <usart_write+0x64>
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_micros(833);
 8000de0:	f240 3041 	movw	r0, #833	; 0x341
 8000de4:	f7ff fa3a 	bl	800025c <delay_micros>
 8000de8:	e7e4      	b.n	8000db4 <usart_write+0x64>
 8000dea:	bf00      	nop
 8000dec:	200009b4 	.word	0x200009b4

08000df0 <usart_print>:
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
}

void usart_print(USART_TypeDef * USARTx /*usartx[usx]*/, const char * s) {
 8000df0:	b538      	push	{r3, r4, r5, lr}
 8000df2:	460c      	mov	r4, r1
	while (*s)
 8000df4:	7809      	ldrb	r1, [r1, #0]
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
}

void usart_print(USART_TypeDef * USARTx /*usartx[usx]*/, const char * s) {
 8000df6:	4605      	mov	r5, r0
	while (*s)
 8000df8:	b131      	cbz	r1, 8000e08 <usart_print+0x18>
		usart_write(USARTx /*usartx[usx]*/, (uint16_t) *s++);
 8000dfa:	4628      	mov	r0, r5
 8000dfc:	f7ff ffa8 	bl	8000d50 <usart_write>
	buffer_enque(&txring[usx], w);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
}

void usart_print(USART_TypeDef * USARTx /*usartx[usx]*/, const char * s) {
	while (*s)
 8000e00:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d1f8      	bne.n	8000dfa <usart_print+0xa>
 8000e08:	bd38      	pop	{r3, r4, r5, pc}
 8000e0a:	bf00      	nop

08000e0c <usart_bare_read>:
		usart_write(USARTx /*usartx[usx]*/, (uint16_t) *s++);
}

uint16_t usart_bare_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	return USART_ReceiveData(USARTx);
 8000e0c:	f002 bb4a 	b.w	80034a4 <USART_ReceiveData>

08000e10 <usart_read>:
}

uint16_t usart_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
 8000e10:	b508      	push	{r3, lr}
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e16:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e1a:	4298      	cmp	r0, r3
 8000e1c:	d026      	beq.n	8000e6c <usart_read+0x5c>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000e1e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000e22:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e26:	4298      	cmp	r0, r3
 8000e28:	d022      	beq.n	8000e70 <usart_read+0x60>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000e2a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000e2e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e32:	4298      	cmp	r0, r3
 8000e34:	d01e      	beq.n	8000e74 <usart_read+0x64>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000e36:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000e3a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d01a      	beq.n	8000e78 <usart_read+0x68>
		usx = 3;
	} else if ( USARTx == UART5 ) {
 8000e42:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000e46:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	bf14      	ite	ne
 8000e4e:	2005      	movne	r0, #5
 8000e50:	2004      	moveq	r0, #4
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	uint16_t w = buffer_deque(&rxring[usx]);
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <usart_read+0x6c>)
 8000e54:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000e58:	fb02 3000 	mla	r0, r2, r0, r3
 8000e5c:	f7ff fe5c 	bl	8000b18 <buffer_deque>
	if ( w == 0xffff ) return 0; // buffer is empty
 8000e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
	return w;
}
 8000e64:	4298      	cmp	r0, r3
 8000e66:	bf08      	it	eq
 8000e68:	2000      	moveq	r0, #0
 8000e6a:	bd08      	pop	{r3, pc}
	return USART_ReceiveData(USARTx);
}

uint16_t usart_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	e7f0      	b.n	8000e52 <usart_read+0x42>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000e70:	2001      	movs	r0, #1
 8000e72:	e7ee      	b.n	8000e52 <usart_read+0x42>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000e74:	2002      	movs	r0, #2
 8000e76:	e7ec      	b.n	8000e52 <usart_read+0x42>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000e78:	2003      	movs	r0, #3
 8000e7a:	e7ea      	b.n	8000e52 <usart_read+0x42>
 8000e7c:	20000fd8 	.word	0x20000fd8

08000e80 <usart_flush>:
	return w;
}

void usart_flush(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	f2c4 0301 	movt	r3, #16385	; 0x4001
	uint16_t w = buffer_deque(&rxring[usx]);
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}

void usart_flush(USART_TypeDef * USARTx /*usartx[usx]*/) {
 8000e88:	b570      	push	{r4, r5, r6, lr}
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000e8a:	2500      	movs	r5, #0
 8000e8c:	4298      	cmp	r0, r3
	uint16_t w = buffer_deque(&rxring[usx]);
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}

void usart_flush(USART_TypeDef * USARTx /*usartx[usx]*/) {
 8000e8e:	4604      	mov	r4, r0
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000e90:	d01c      	beq.n	8000ecc <usart_flush+0x4c>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000e92:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000e96:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e9a:	2501      	movs	r5, #1
 8000e9c:	4298      	cmp	r0, r3
 8000e9e:	d015      	beq.n	8000ecc <usart_flush+0x4c>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000ea0:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000ea4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000ea8:	2502      	movs	r5, #2
 8000eaa:	4298      	cmp	r0, r3
 8000eac:	d00e      	beq.n	8000ecc <usart_flush+0x4c>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000eae:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000eb2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000eb6:	2503      	movs	r5, #3
 8000eb8:	4298      	cmp	r0, r3
 8000eba:	d007      	beq.n	8000ecc <usart_flush+0x4c>
		usx = 3;
	} else if ( USARTx == UART5 ) {
 8000ebc:	f44f 45a0 	mov.w	r5, #20480	; 0x5000
 8000ec0:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8000ec4:	42a8      	cmp	r0, r5
 8000ec6:	bf14      	ite	ne
 8000ec8:	2505      	movne	r5, #5
 8000eca:	2504      	moveq	r5, #4
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	USART_ITConfig(USARTx, USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f240 5125 	movw	r1, #1317	; 0x525
 8000ed4:	f002 fb88 	bl	80035e8 <USART_ITConfig>
	buffer_clear(&rxring[usx]);
 8000ed8:	f44f 7683 	mov.w	r6, #262	; 0x106
 8000edc:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <usart_flush+0xe4>)
 8000ede:	fb06 f605 	mul.w	r6, r6, r5
 8000ee2:	18f3      	adds	r3, r6, r3
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000ee4:	2500      	movs	r5, #0
 8000ee6:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	r->tail = 0;
 8000eea:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	r->count = 0;
 8000eee:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	USART_ITConfig(USARTx, USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
 8000ef2:	f240 5125 	movw	r1, #1317	; 0x525
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	f002 fbc0 	bl	800367c <USART_ClearITPendingBit>
	USART_ITConfig(USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000efc:	4620      	mov	r0, r4
 8000efe:	f240 5125 	movw	r1, #1317	; 0x525
 8000f02:	2201      	movs	r2, #1
 8000f04:	f002 fb70 	bl	80035e8 <USART_ITConfig>
	USART_ITConfig(USARTx, USART_IT_TXE, DISABLE);
 8000f08:	462a      	mov	r2, r5
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	f240 7127 	movw	r1, #1831	; 0x727
 8000f10:	f002 fb6a 	bl	80035e8 <USART_ITConfig>
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <usart_flush+0xe8>)
	while ( buffer_count(&txring[usx]) > 0 ) {
 8000f16:	199e      	adds	r6, r3, r6
 8000f18:	f8b6 5104 	ldrh.w	r5, [r6, #260]	; 0x104
 8000f1c:	b1b5      	cbz	r5, 8000f4c <usart_flush+0xcc>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
 8000f1e:	4620      	mov	r0, r4
 8000f20:	2180      	movs	r1, #128	; 0x80
 8000f22:	f002 fb7d 	bl	8003620 <USART_GetFlagStatus>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d0f9      	beq.n	8000f1e <usart_flush+0x9e>
		USART_SendData(USARTx, buffer_deque(&txring[usx]));
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	f7ff fdf4 	bl	8000b18 <buffer_deque>
 8000f30:	4601      	mov	r1, r0
 8000f32:	4620      	mov	r0, r4
 8000f34:	f002 fab2 	bl	800349c <USART_SendData>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
 8000f38:	4620      	mov	r0, r4
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	f002 fb70 	bl	8003620 <USART_GetFlagStatus>
 8000f40:	2800      	cmp	r0, #0
 8000f42:	d0f9      	beq.n	8000f38 <usart_flush+0xb8>
	USART_ITConfig(USARTx, USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
	USART_ITConfig(USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx, USART_IT_TXE, DISABLE);
	while ( buffer_count(&txring[usx]) > 0 ) {
 8000f44:	f8b6 5104 	ldrh.w	r5, [r6, #260]	; 0x104
 8000f48:	2d00      	cmp	r5, #0
 8000f4a:	d1e8      	bne.n	8000f1e <usart_flush+0x9e>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
		USART_SendData(USARTx, buffer_deque(&txring[usx]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	f240 7127 	movw	r1, #1831	; 0x727
 8000f52:	f002 fb93 	bl	800367c <USART_ClearITPendingBit>
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000f56:	f8a6 5100 	strh.w	r5, [r6, #256]	; 0x100
	r->tail = 0;
 8000f5a:	f8a6 5102 	strh.w	r5, [r6, #258]	; 0x102
	r->count = 0;
 8000f5e:	f8a6 5104 	strh.w	r5, [r6, #260]	; 0x104
		USART_SendData(USARTx, buffer_deque(&txring[usx]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
	buffer_clear(&txring[usx]);
}
 8000f62:	bd70      	pop	{r4, r5, r6, pc}
 8000f64:	20000fd8 	.word	0x20000fd8
 8000f68:	200009b4 	.word	0x200009b4

08000f6c <usart_peek>:

uint16_t usart_peek(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f70:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000f74:	4298      	cmp	r0, r3
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
	buffer_clear(&txring[usx]);
}

uint16_t usart_peek(USART_TypeDef * USARTx /*usartx[usx]*/) {
 8000f76:	b410      	push	{r4}
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000f78:	d032      	beq.n	8000fe0 <usart_peek+0x74>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000f7a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000f7e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f82:	4298      	cmp	r0, r3
 8000f84:	d02f      	beq.n	8000fe6 <usart_peek+0x7a>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000f86:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000f8a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f8e:	4298      	cmp	r0, r3
 8000f90:	d02c      	beq.n	8000fec <usart_peek+0x80>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000f92:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000f96:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f9a:	4298      	cmp	r0, r3
 8000f9c:	d029      	beq.n	8000ff2 <usart_peek+0x86>
		usx = 3;
	} else if ( USARTx == UART5 ) {
 8000f9e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000fa2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000fa6:	4298      	cmp	r0, r3
 8000fa8:	bf14      	ite	ne
 8000faa:	2205      	movne	r2, #5
 8000fac:	2204      	moveq	r2, #4
 8000fae:	4610      	mov	r0, r2
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <usart_peek+0x8c>)
	} else if ( USARTx == UART5 ) {
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	if ( ! buffer_count(&rxring[usx]) == 0 )
 8000fb2:	f44f 7183 	mov.w	r1, #262	; 0x106
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000fb6:	fb01 3202 	mla	r2, r1, r2, r3
	} else if ( USARTx == UART5 ) {
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	if ( ! buffer_count(&rxring[usx]) == 0 )
 8000fba:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8000fbe:	b91a      	cbnz	r2, 8000fc8 <usart_peek+0x5c>
		return rxring[usx].buf[rxring[usx].tail];
	return 0xffff;
 8000fc0:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8000fc4:	bc10      	pop	{r4}
 8000fc6:	4770      	bx	lr
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	if ( ! buffer_count(&rxring[usx]) == 0 )
		return rxring[usx].buf[rxring[usx].tail];
 8000fc8:	fb01 3100 	mla	r1, r1, r0, r3
 8000fcc:	eb00 1480 	add.w	r4, r0, r0, lsl #6
 8000fd0:	f9b1 2102 	ldrsh.w	r2, [r1, #258]	; 0x102
 8000fd4:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8000fd8:	1880      	adds	r0, r0, r2
 8000fda:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8000fde:	e7f1      	b.n	8000fc4 <usart_peek+0x58>
	buffer_clear(&txring[usx]);
}

uint16_t usart_peek(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000fe0:	2200      	movs	r2, #0
		usx = 0;
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	e7e4      	b.n	8000fb0 <usart_peek+0x44>
	} else if ( USARTx == USART2 ) {
 8000fe6:	2201      	movs	r2, #1
		usx = 1;
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e7e1      	b.n	8000fb0 <usart_peek+0x44>
	} else if ( USARTx == USART3 ) {
 8000fec:	2202      	movs	r2, #2
		usx = 2;
 8000fee:	4610      	mov	r0, r2
 8000ff0:	e7de      	b.n	8000fb0 <usart_peek+0x44>
	} else if ( USARTx == UART4 ) {
 8000ff2:	2203      	movs	r2, #3
		usx = 3;
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	e7db      	b.n	8000fb0 <usart_peek+0x44>
 8000ff8:	20000fd8 	.word	0x20000fd8

08000ffc <usart_available>:
	return 0xffff;
}

uint16_t usart_available(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001000:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001004:	4298      	cmp	r0, r3
 8001006:	d021      	beq.n	800104c <usart_available+0x50>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8001008:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800100c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001010:	4298      	cmp	r0, r3
 8001012:	d01d      	beq.n	8001050 <usart_available+0x54>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8001014:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001018:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800101c:	4298      	cmp	r0, r3
 800101e:	d019      	beq.n	8001054 <usart_available+0x58>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8001020:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8001024:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001028:	4298      	cmp	r0, r3
 800102a:	d015      	beq.n	8001058 <usart_available+0x5c>
		usx = 3;
	} else if ( USARTx == UART5 ) {
 800102c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001030:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001034:	4298      	cmp	r0, r3
 8001036:	bf14      	ite	ne
 8001038:	2005      	movne	r0, #5
 800103a:	2004      	moveq	r0, #4
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <usart_available+0x60>)
 800103e:	f44f 7283 	mov.w	r2, #262	; 0x106
 8001042:	fb02 3000 	mla	r0, r2, r0, r3
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	return buffer_count(&rxring[usx]);
}
 8001046:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 800104a:	4770      	bx	lr
	return 0xffff;
}

uint16_t usart_available(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 800104c:	2000      	movs	r0, #0
 800104e:	e7f5      	b.n	800103c <usart_available+0x40>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8001050:	2001      	movs	r0, #1
 8001052:	e7f3      	b.n	800103c <usart_available+0x40>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8001054:	2002      	movs	r0, #2
 8001056:	e7f1      	b.n	800103c <usart_available+0x40>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8001058:	2003      	movs	r0, #3
 800105a:	e7ef      	b.n	800103c <usart_available+0x40>
 800105c:	20000fd8 	.word	0x20000fd8

08001060 <USART1_IRQHandler>:


// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8001060:	f44f 5080 	mov.w	r0, #4096	; 0x1000
}


// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 8001064:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8001066:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800106a:	f240 5125 	movw	r1, #1317	; 0x525
 800106e:	f002 fae1 	bl	8003634 <USART_GetITStatus>
 8001072:	2800      	cmp	r0, #0
 8001074:	d12b      	bne.n	80010ce <USART1_IRQHandler+0x6e>
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 8001076:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800107a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800107e:	f240 7127 	movw	r1, #1831	; 0x727
 8001082:	f002 fad7 	bl	8003634 <USART_GetITStatus>
 8001086:	2800      	cmp	r0, #0
 8001088:	d020      	beq.n	80010cc <USART1_IRQHandler+0x6c>
		if (txring[USART1Serial].count == 0) {
 800108a:	4816      	ldr	r0, [pc, #88]	; (80010e4 <USART1_IRQHandler+0x84>)
 800108c:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8001090:	b152      	cbz	r2, 80010a8 <USART1_IRQHandler+0x48>
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
 8001092:	f7ff fd41 	bl	8000b18 <buffer_deque>
 8001096:	4601      	mov	r1, r0
 8001098:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800109c:	f2c4 0001 	movt	r0, #16385	; 0x4001
		}
	}
}
 80010a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
 80010a4:	f002 b9fa 	b.w	800349c <USART_SendData>
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 80010a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80010ac:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80010b0:	f240 7127 	movw	r1, #1831	; 0x727
 80010b4:	f002 fa98 	bl	80035e8 <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 80010b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80010bc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80010c0:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
		}
	}
}
 80010c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 80010c8:	f002 bad8 	b.w	800367c <USART_ClearITPendingBit>
 80010cc:	bd08      	pop	{r3, pc}

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
 80010ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80010d2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80010d6:	f002 f9e5 	bl	80034a4 <USART_ReceiveData>
 80010da:	4601      	mov	r1, r0
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <USART1_IRQHandler+0x88>)
 80010de:	f7ff fcf7 	bl	8000ad0 <buffer_enque>
 80010e2:	e7c8      	b.n	8001076 <USART1_IRQHandler+0x16>
 80010e4:	200009b4 	.word	0x200009b4
 80010e8:	20000fd8 	.word	0x20000fd8

080010ec <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void) {
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 80010ec:	f44f 4088 	mov.w	r0, #17408	; 0x4400
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
		}
	}
}

void USART2_IRQHandler(void) {
 80010f0:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 80010f2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80010f6:	f240 5125 	movw	r1, #1317	; 0x525
 80010fa:	f002 fa9b 	bl	8003634 <USART_GetITStatus>
 80010fe:	2800      	cmp	r0, #0
 8001100:	d12d      	bne.n	800115e <USART2_IRQHandler+0x72>
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
 8001102:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8001106:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800110a:	f240 7127 	movw	r1, #1831	; 0x727
 800110e:	f002 fa91 	bl	8003634 <USART_GetITStatus>
 8001112:	2800      	cmp	r0, #0
 8001114:	d022      	beq.n	800115c <USART2_IRQHandler+0x70>
		if (txring[USART2Serial].count == 0) {
 8001116:	4817      	ldr	r0, [pc, #92]	; (8001174 <USART2_IRQHandler+0x88>)
 8001118:	f8b0 220a 	ldrh.w	r2, [r0, #522]	; 0x20a
 800111c:	b162      	cbz	r2, 8001138 <USART2_IRQHandler+0x4c>
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
 800111e:	f500 7083 	add.w	r0, r0, #262	; 0x106
 8001122:	f7ff fcf9 	bl	8000b18 <buffer_deque>
 8001126:	4601      	mov	r1, r0
 8001128:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800112c:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 8001130:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
 8001134:	f002 b9b2 	b.w	800349c <USART_SendData>
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
 8001138:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800113c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001140:	f240 7127 	movw	r1, #1831	; 0x727
 8001144:	f002 fa50 	bl	80035e8 <USART_ITConfig>
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8001148:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800114c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001150:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
		}
	}
}
 8001154:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8001158:	f002 ba90 	b.w	800367c <USART_ClearITPendingBit>
 800115c:	bd08      	pop	{r3, pc}
	}
}

void USART2_IRQHandler(void) {
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
 800115e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8001162:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001166:	f002 f99d 	bl	80034a4 <USART_ReceiveData>
 800116a:	4601      	mov	r1, r0
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <USART2_IRQHandler+0x8c>)
 800116e:	f7ff fcaf 	bl	8000ad0 <buffer_enque>
 8001172:	e7c6      	b.n	8001102 <USART2_IRQHandler+0x16>
 8001174:	200009b4 	.word	0x200009b4
 8001178:	200010de 	.word	0x200010de

0800117c <USART3_IRQHandler>:
		}
	}
}

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 800117c:	f44f 4090 	mov.w	r0, #18432	; 0x4800
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
		}
	}
}

void USART3_IRQHandler(void) {
 8001180:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8001182:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001186:	f240 5125 	movw	r1, #1317	; 0x525
 800118a:	f002 fa53 	bl	8003634 <USART_GetITStatus>
 800118e:	2800      	cmp	r0, #0
 8001190:	d12d      	bne.n	80011ee <USART3_IRQHandler+0x72>
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8001192:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001196:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800119a:	f240 7127 	movw	r1, #1831	; 0x727
 800119e:	f002 fa49 	bl	8003634 <USART_GetITStatus>
 80011a2:	2800      	cmp	r0, #0
 80011a4:	d022      	beq.n	80011ec <USART3_IRQHandler+0x70>
		if (txring[USART3Serial].count == 0) {
 80011a6:	4817      	ldr	r0, [pc, #92]	; (8001204 <USART3_IRQHandler+0x88>)
 80011a8:	f8b0 2310 	ldrh.w	r2, [r0, #784]	; 0x310
 80011ac:	b162      	cbz	r2, 80011c8 <USART3_IRQHandler+0x4c>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
 80011ae:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 80011b2:	f7ff fcb1 	bl	8000b18 <buffer_deque>
 80011b6:	4601      	mov	r1, r0
 80011b8:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80011bc:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 80011c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
 80011c4:	f002 b96a 	b.w	800349c <USART_SendData>
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 80011c8:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80011cc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80011d0:	f240 7127 	movw	r1, #1831	; 0x727
 80011d4:	f002 fa08 	bl	80035e8 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 80011d8:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80011dc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80011e0:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
		}
	}
}
 80011e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 80011e8:	f002 ba48 	b.w	800367c <USART_ClearITPendingBit>
 80011ec:	bd08      	pop	{r3, pc}
	}
}

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
 80011ee:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80011f2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80011f6:	f002 f955 	bl	80034a4 <USART_ReceiveData>
 80011fa:	4601      	mov	r1, r0
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <USART3_IRQHandler+0x8c>)
 80011fe:	f7ff fc67 	bl	8000ad0 <buffer_enque>
 8001202:	e7c6      	b.n	8001192 <USART3_IRQHandler+0x16>
 8001204:	200009b4 	.word	0x200009b4
 8001208:	200011e4 	.word	0x200011e4

0800120c <UART4_IRQHandler>:
		}
	}
}

void UART4_IRQHandler(void) {
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 800120c:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
		}
	}
}

void UART4_IRQHandler(void) {
 8001210:	b508      	push	{r3, lr}
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 8001212:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001216:	f240 5125 	movw	r1, #1317	; 0x525
 800121a:	f002 fa0b 	bl	8003634 <USART_GetITStatus>
 800121e:	2800      	cmp	r0, #0
 8001220:	d12d      	bne.n	800127e <UART4_IRQHandler+0x72>
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
 8001222:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8001226:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800122a:	f240 7127 	movw	r1, #1831	; 0x727
 800122e:	f002 fa01 	bl	8003634 <USART_GetITStatus>
 8001232:	2800      	cmp	r0, #0
 8001234:	d022      	beq.n	800127c <UART4_IRQHandler+0x70>
		if (txring[UART4Serial].count == 0) {
 8001236:	4817      	ldr	r0, [pc, #92]	; (8001294 <UART4_IRQHandler+0x88>)
 8001238:	f8b0 2416 	ldrh.w	r2, [r0, #1046]	; 0x416
 800123c:	b162      	cbz	r2, 8001258 <UART4_IRQHandler+0x4c>
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
 800123e:	f200 3012 	addw	r0, r0, #786	; 0x312
 8001242:	f7ff fc69 	bl	8000b18 <buffer_deque>
 8001246:	4601      	mov	r1, r0
 8001248:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 800124c:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 8001250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
 8001254:	f002 b922 	b.w	800349c <USART_SendData>
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
 8001258:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 800125c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001260:	f240 7127 	movw	r1, #1831	; 0x727
 8001264:	f002 f9c0 	bl	80035e8 <USART_ITConfig>
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8001268:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 800126c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001270:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
		}
	}
}
 8001274:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8001278:	f002 ba00 	b.w	800367c <USART_ClearITPendingBit>
 800127c:	bd08      	pop	{r3, pc}
	}
}

void UART4_IRQHandler(void) {
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
 800127e:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8001282:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001286:	f002 f90d 	bl	80034a4 <USART_ReceiveData>
 800128a:	4601      	mov	r1, r0
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <UART4_IRQHandler+0x8c>)
 800128e:	f7ff fc1f 	bl	8000ad0 <buffer_enque>
 8001292:	e7c6      	b.n	8001222 <UART4_IRQHandler+0x16>
 8001294:	200009b4 	.word	0x200009b4
 8001298:	200012ea 	.word	0x200012ea

0800129c <UART5_IRQHandler>:
		}
	}
}

void UART5_IRQHandler(void) {
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
 800129c:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
		}
	}
}

void UART5_IRQHandler(void) {
 80012a0:	b508      	push	{r3, lr}
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
 80012a2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80012a6:	f240 5125 	movw	r1, #1317	; 0x525
 80012aa:	f002 f9c3 	bl	8003634 <USART_GetITStatus>
 80012ae:	2800      	cmp	r0, #0
 80012b0:	d12d      	bne.n	800130e <UART5_IRQHandler+0x72>
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 80012b2:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80012b6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80012ba:	f240 7127 	movw	r1, #1831	; 0x727
 80012be:	f002 f9b9 	bl	8003634 <USART_GetITStatus>
 80012c2:	2800      	cmp	r0, #0
 80012c4:	d022      	beq.n	800130c <UART5_IRQHandler+0x70>
		if (txring[UART5Serial].count == 0) {
 80012c6:	4817      	ldr	r0, [pc, #92]	; (8001324 <UART5_IRQHandler+0x88>)
 80012c8:	f8b0 251c 	ldrh.w	r2, [r0, #1308]	; 0x51c
 80012cc:	b162      	cbz	r2, 80012e8 <UART5_IRQHandler+0x4c>
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
 80012ce:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 80012d2:	f7ff fc21 	bl	8000b18 <buffer_deque>
 80012d6:	4601      	mov	r1, r0
 80012d8:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 80012dc:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 80012e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
 80012e4:	f002 b8da 	b.w	800349c <USART_SendData>
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
 80012e8:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 80012ec:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80012f0:	f240 7127 	movw	r1, #1831	; 0x727
 80012f4:	f002 f978 	bl	80035e8 <USART_ITConfig>
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
 80012f8:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 80012fc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001300:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
		}
	}
}
 8001304:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
 8001308:	f002 b9b8 	b.w	800367c <USART_ClearITPendingBit>
 800130c:	bd08      	pop	{r3, pc}
	}
}

void UART5_IRQHandler(void) {
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
 800130e:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8001312:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001316:	f002 f8c5 	bl	80034a4 <USART_ReceiveData>
 800131a:	4601      	mov	r1, r0
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <UART5_IRQHandler+0x8c>)
 800131e:	f7ff fbd7 	bl	8000ad0 <buffer_enque>
 8001322:	e7c6      	b.n	80012b2 <UART5_IRQHandler+0x16>
 8001324:	200009b4 	.word	0x200009b4
 8001328:	200013f0 	.word	0x200013f0

0800132c <USART6_IRQHandler>:
		}
	}
}

void USART6_IRQHandler(void) {
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
 800132c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
		}
	}
}

void USART6_IRQHandler(void) {
 8001330:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
 8001332:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001336:	f240 5125 	movw	r1, #1317	; 0x525
 800133a:	f002 f97b 	bl	8003634 <USART_GetITStatus>
 800133e:	2800      	cmp	r0, #0
 8001340:	d12d      	bne.n	800139e <USART6_IRQHandler+0x72>
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
 8001342:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001346:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800134a:	f240 7127 	movw	r1, #1831	; 0x727
 800134e:	f002 f971 	bl	8003634 <USART_GetITStatus>
 8001352:	2800      	cmp	r0, #0
 8001354:	d022      	beq.n	800139c <USART6_IRQHandler+0x70>
		if (txring[USART6Serial].count == 0) {
 8001356:	4817      	ldr	r0, [pc, #92]	; (80013b4 <USART6_IRQHandler+0x88>)
 8001358:	f8b0 2622 	ldrh.w	r2, [r0, #1570]	; 0x622
 800135c:	b162      	cbz	r2, 8001378 <USART6_IRQHandler+0x4c>
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
 800135e:	f200 501e 	addw	r0, r0, #1310	; 0x51e
 8001362:	f7ff fbd9 	bl	8000b18 <buffer_deque>
 8001366:	4601      	mov	r1, r0
 8001368:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800136c:	f2c4 0001 	movt	r0, #16385	; 0x4001
		}
	}
}
 8001370:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
 8001374:	f002 b892 	b.w	800349c <USART_SendData>
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
 8001378:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800137c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001380:	f240 7127 	movw	r1, #1831	; 0x727
 8001384:	f002 f930 	bl	80035e8 <USART_ITConfig>
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
 8001388:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800138c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001390:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
		}
	}
}
 8001394:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
 8001398:	f002 b970 	b.w	800367c <USART_ClearITPendingBit>
 800139c:	bd08      	pop	{r3, pc}
	}
}

void USART6_IRQHandler(void) {
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
 800139e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80013a2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80013a6:	f002 f87d 	bl	80034a4 <USART_ReceiveData>
 80013aa:	4601      	mov	r1, r0
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <USART6_IRQHandler+0x8c>)
 80013ae:	f7ff fb8f 	bl	8000ad0 <buffer_enque>
 80013b2:	e7c6      	b.n	8001342 <USART6_IRQHandler+0x16>
 80013b4:	200009b4 	.word	0x200009b4
 80013b8:	200014f6 	.word	0x200014f6

080013bc <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80013bc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80013c0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80013c4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80013c8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80013cc:	60d8      	str	r0, [r3, #12]
}
 80013ce:	4770      	bx	lr

080013d0 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80013d0:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80013d2:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80013d4:	b97b      	cbnz	r3, 80013f6 <NVIC_Init+0x26>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013d6:	7802      	ldrb	r2, [r0, #0]
 80013d8:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80013dc:	0951      	lsrs	r1, r2, #5
 80013de:	f2ce 0300 	movt	r3, #57344	; 0xe000
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80013e2:	f002 021f 	and.w	r2, r2, #31
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013e6:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80013e8:	2001      	movs	r0, #1
 80013ea:	fa10 f202 	lsls.w	r2, r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80013ee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80013f2:	bc30      	pop	{r4, r5}
 80013f4:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80013f6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80013fa:	f2ce 0300 	movt	r3, #57344	; 0xe000
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80013fe:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001400:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001402:	7884      	ldrb	r4, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001404:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001406:	43d2      	mvns	r2, r2
 8001408:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 800140c:	f1c2 0104 	rsb	r1, r2, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001410:	b2c9      	uxtb	r1, r1
 8001412:	fa15 f101 	lsls.w	r1, r5, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8001416:	250f      	movs	r5, #15
 8001418:	fa55 f202 	asrs.w	r2, r5, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800141c:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800141e:	4022      	ands	r2, r4
 8001420:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001422:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001426:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800142e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001432:	7802      	ldrb	r2, [r0, #0]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001434:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001438:	0951      	lsrs	r1, r2, #5
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800143a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800143e:	f002 021f 	and.w	r2, r2, #31
 8001442:	2001      	movs	r0, #1
 8001444:	fa10 f202 	lsls.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001448:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800144c:	e7d1      	b.n	80013f2 <NVIC_Init+0x22>
 800144e:	bf00      	nop

08001450 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8001450:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8001454:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001458:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800145c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001460:	4301      	orrs	r1, r0
 8001462:	6099      	str	r1, [r3, #8]
}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8001468:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800146c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001470:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8001472:	b919      	cbnz	r1, 800147c <NVIC_SystemLPConfig+0x14>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8001474:	ea22 0000 	bic.w	r0, r2, r0
 8001478:	6118      	str	r0, [r3, #16]
 800147a:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800147c:	4310      	orrs	r0, r2
 800147e:	6118      	str	r0, [r3, #16]
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop

08001484 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001484:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001488:	f2ce 0300 	movt	r3, #57344	; 0xe000
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800148c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	bf0c      	ite	eq
 8001492:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8001496:	f022 0204 	bicne.w	r2, r2, #4
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop

080014a0 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80014a0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 80014a2:	2300      	movs	r3, #0
 80014a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014a8:	4298      	cmp	r0, r3
 80014aa:	d03c      	beq.n	8001526 <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 80014ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014b4:	4298      	cmp	r0, r3
 80014b6:	d040      	beq.n	800153a <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 80014b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014c0:	4298      	cmp	r0, r3
 80014c2:	d044      	beq.n	800154e <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 80014c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014cc:	4298      	cmp	r0, r3
 80014ce:	d048      	beq.n	8001562 <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 80014d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014d8:	4298      	cmp	r0, r3
 80014da:	d04c      	beq.n	8001576 <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 80014dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014e4:	4298      	cmp	r0, r3
 80014e6:	d050      	beq.n	800158a <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 80014e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014f0:	4298      	cmp	r0, r3
 80014f2:	d054      	beq.n	800159e <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 80014f4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014fc:	4298      	cmp	r0, r3
 80014fe:	d058      	beq.n	80015b2 <GPIO_DeInit+0x112>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOI)
 8001500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001504:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001508:	4298      	cmp	r0, r3
 800150a:	d000      	beq.n	800150e <GPIO_DeInit+0x6e>
 800150c:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800150e:	2101      	movs	r1, #1
 8001510:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001514:	f000 fcda 	bl	8001ecc <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001518:	f44f 7080 	mov.w	r0, #256	; 0x100
 800151c:	2100      	movs	r1, #0
    }
  }
}
 800151e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001522:	f000 bcd3 	b.w	8001ecc <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001526:	2001      	movs	r0, #1
 8001528:	4601      	mov	r1, r0
 800152a:	f000 fccf 	bl	8001ecc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800152e:	2001      	movs	r0, #1
 8001530:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8001536:	f000 bcc9 	b.w	8001ecc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800153a:	2002      	movs	r0, #2
 800153c:	2101      	movs	r1, #1
 800153e:	f000 fcc5 	bl	8001ecc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8001542:	2002      	movs	r0, #2
 8001544:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800154a:	f000 bcbf 	b.w	8001ecc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800154e:	2004      	movs	r0, #4
 8001550:	2101      	movs	r1, #1
 8001552:	f000 fcbb 	bl	8001ecc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8001556:	2004      	movs	r0, #4
 8001558:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800155a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800155e:	f000 bcb5 	b.w	8001ecc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001562:	2008      	movs	r0, #8
 8001564:	2101      	movs	r1, #1
 8001566:	f000 fcb1 	bl	8001ecc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800156a:	2008      	movs	r0, #8
 800156c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800156e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8001572:	f000 bcab 	b.w	8001ecc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001576:	2010      	movs	r0, #16
 8001578:	2101      	movs	r1, #1
 800157a:	f000 fca7 	bl	8001ecc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800157e:	2010      	movs	r0, #16
 8001580:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8001586:	f000 bca1 	b.w	8001ecc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800158a:	2020      	movs	r0, #32
 800158c:	2101      	movs	r1, #1
 800158e:	f000 fc9d 	bl	8001ecc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8001592:	2020      	movs	r0, #32
 8001594:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001596:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800159a:	f000 bc97 	b.w	8001ecc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800159e:	2040      	movs	r0, #64	; 0x40
 80015a0:	2101      	movs	r1, #1
 80015a2:	f000 fc93 	bl	8001ecc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80015a6:	2040      	movs	r0, #64	; 0x40
 80015a8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80015aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80015ae:	f000 bc8d 	b.w	8001ecc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80015b2:	2080      	movs	r0, #128	; 0x80
 80015b4:	2101      	movs	r1, #1
 80015b6:	f000 fc89 	bl	8001ecc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80015ba:	2080      	movs	r0, #128	; 0x80
 80015bc:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80015be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80015c2:	f000 bc83 	b.w	8001ecc <RCC_AHB1PeriphResetCmd>
 80015c6:	bf00      	nop

080015c8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80015c8:	2300      	movs	r3, #0
 80015ca:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80015ce:	680a      	ldr	r2, [r1, #0]
 80015d0:	461c      	mov	r4, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 80015d2:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80015d4:	f04f 0803 	mov.w	r8, #3
 80015d8:	e003      	b.n	80015e2 <GPIO_Init+0x1a>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80015da:	3401      	adds	r4, #1
 80015dc:	3302      	adds	r3, #2
 80015de:	2c10      	cmp	r4, #16
 80015e0:	d02b      	beq.n	800163a <GPIO_Init+0x72>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80015e2:	fa17 f504 	lsls.w	r5, r7, r4
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80015e6:	ea05 0602 	and.w	r6, r5, r2

    if (currentpin == pos)
 80015ea:	42ae      	cmp	r6, r5
 80015ec:	d1f5      	bne.n	80015da <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80015ee:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80015f2:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80015f6:	fa08 f503 	lsl.w	r5, r8, r3
 80015fa:	43ed      	mvns	r5, r5
 80015fc:	ea05 0909 	and.w	r9, r5, r9
 8001600:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001604:	f8d0 9000 	ldr.w	r9, [r0]
 8001608:	fa0c fa03 	lsl.w	sl, ip, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800160c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001610:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001614:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001618:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800161c:	d910      	bls.n	8001640 <GPIO_Init+0x78>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800161e:	68c6      	ldr	r6, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001620:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001624:	4035      	ands	r5, r6
 8001626:	60c5      	str	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001628:	68c6      	ldr	r6, [r0, #12]
 800162a:	fa0c f503 	lsl.w	r5, ip, r3
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800162e:	3401      	adds	r4, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001630:	4335      	orrs	r5, r6
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001632:	3302      	adds	r3, #2
 8001634:	2c10      	cmp	r4, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001636:	60c5      	str	r5, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001638:	d1d3      	bne.n	80015e2 <GPIO_Init+0x1a>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800163a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800163e:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001640:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001644:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001648:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800164c:	ea05 0a0a 	and.w	sl, r5, sl
 8001650:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001654:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8001658:	fa09 f903 	lsl.w	r9, r9, r3
 800165c:	ea49 090a 	orr.w	r9, r9, sl
 8001660:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001664:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8001668:	ea29 0606 	bic.w	r6, r9, r6
 800166c:	6046      	str	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800166e:	6846      	ldr	r6, [r0, #4]
 8001670:	fa0c fc04 	lsl.w	ip, ip, r4
 8001674:	fa1f fc8c 	uxth.w	ip, ip
 8001678:	ea4c 0606 	orr.w	r6, ip, r6
 800167c:	6046      	str	r6, [r0, #4]
 800167e:	e7ce      	b.n	800161e <GPIO_Init+0x56>

08001680 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001680:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001686:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001688:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800168a:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800168c:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800168e:	71c3      	strb	r3, [r0, #7]
}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop

08001694 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001694:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8001696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169a:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 800169c:	9b01      	ldr	r3, [sp, #4]
 800169e:	430b      	orrs	r3, r1
 80016a0:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80016a2:	9b01      	ldr	r3, [sp, #4]
 80016a4:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80016a6:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80016a8:	9b01      	ldr	r3, [sp, #4]
 80016aa:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80016ac:	69c3      	ldr	r3, [r0, #28]
 80016ae:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80016b0:	69c3      	ldr	r3, [r0, #28]
 80016b2:	9301      	str	r3, [sp, #4]
}
 80016b4:	b002      	add	sp, #8
 80016b6:	4770      	bx	lr

080016b8 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80016b8:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 80016ba:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80016bc:	bf0c      	ite	eq
 80016be:	2000      	moveq	r0, #0
 80016c0:	2001      	movne	r0, #1
 80016c2:	4770      	bx	lr

080016c4 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80016c4:	6900      	ldr	r0, [r0, #16]
}
 80016c6:	b280      	uxth	r0, r0
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop

080016cc <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80016cc:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 80016ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80016d0:	bf0c      	ite	eq
 80016d2:	2000      	moveq	r0, #0
 80016d4:	2001      	movne	r0, #1
 80016d6:	4770      	bx	lr

080016d8 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 80016d8:	6940      	ldr	r0, [r0, #20]
}
 80016da:	b280      	uxth	r0, r0
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop

080016e0 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80016e0:	8301      	strh	r1, [r0, #24]
}
 80016e2:	4770      	bx	lr

080016e4 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80016e4:	8341      	strh	r1, [r0, #26]
}
 80016e6:	4770      	bx	lr

080016e8 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80016e8:	b90a      	cbnz	r2, 80016ee <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80016ea:	8341      	strh	r1, [r0, #26]
 80016ec:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 80016ee:	8301      	strh	r1, [r0, #24]
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop

080016f4 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80016f4:	6141      	str	r1, [r0, #20]
}
 80016f6:	4770      	bx	lr

080016f8 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80016f8:	6943      	ldr	r3, [r0, #20]
 80016fa:	404b      	eors	r3, r1
 80016fc:	6143      	str	r3, [r0, #20]
}
 80016fe:	4770      	bx	lr

08001700 <GPIO_PinAFConfig>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001700:	08cb      	lsrs	r3, r1, #3
 8001702:	3308      	adds	r3, #8
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001704:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001708:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800170a:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800170c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8001710:	240f      	movs	r4, #15
 8001712:	408c      	lsls	r4, r1
 8001714:	ea25 0404 	bic.w	r4, r5, r4
 8001718:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800171c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001720:	fa12 f101 	lsls.w	r1, r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001724:	430c      	orrs	r4, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001726:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
 800172a:	bc30      	pop	{r4, r5}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop

08001730 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8001730:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8001732:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8001736:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800173a:	4298      	cmp	r0, r3
 800173c:	d018      	beq.n	8001770 <I2C_DeInit+0x40>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 800173e:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8001742:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001746:	4298      	cmp	r0, r3
 8001748:	d01e      	beq.n	8001788 <I2C_DeInit+0x58>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 800174a:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800174e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001752:	4298      	cmp	r0, r3
 8001754:	d000      	beq.n	8001758 <I2C_DeInit+0x28>
 8001756:	bd08      	pop	{r3, pc}
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8001758:	2101      	movs	r1, #1
 800175a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800175e:	f000 fbdf 	bl	8001f20 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8001762:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001766:	2100      	movs	r1, #0
    }
  }
}
 8001768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800176c:	f000 bbd8 	b.w	8001f20 <RCC_APB1PeriphResetCmd>
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001770:	2101      	movs	r1, #1
 8001772:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001776:	f000 fbd3 	bl	8001f20 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800177a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800177e:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8001780:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8001784:	f000 bbcc 	b.w	8001f20 <RCC_APB1PeriphResetCmd>
  }
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001788:	2101      	movs	r1, #1
 800178a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800178e:	f000 fbc7 	bl	8001f20 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8001792:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001796:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8001798:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800179c:	f000 bbc0 	b.w	8001f20 <RCC_APB1PeriphResetCmd>

080017a0 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80017a0:	b570      	push	{r4, r5, r6, lr}
 80017a2:	4604      	mov	r4, r0
 80017a4:	b084      	sub	sp, #16
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80017a6:	4668      	mov	r0, sp
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80017a8:	88a6      	ldrh	r6, [r4, #4]
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80017aa:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80017ac:	f000 fac4 	bl	8001d38 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80017b0:	9802      	ldr	r0, [sp, #8]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80017b2:	682a      	ldr	r2, [r5, #0]
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80017b4:	f64d 6183 	movw	r1, #56963	; 0xde83

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80017b8:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80017bc:	f2c4 311b 	movt	r1, #17179	; 0x431b

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80017c0:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80017c2:	fba1 3100 	umull	r3, r1, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80017c6:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80017c8:	0c89      	lsrs	r1, r1, #18
  tmpreg |= freqrange;
 80017ca:	430e      	orrs	r6, r1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80017cc:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80017ce:	8823      	ldrh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80017d0:	f248 66a0 	movw	r6, #34464	; 0x86a0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	041b      	lsls	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80017da:	f2c0 0601 	movt	r6, #1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80017de:	0c1b      	lsrs	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80017e0:	42b2      	cmp	r2, r6
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80017e2:	8023      	strh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80017e4:	d822      	bhi.n	800182c <I2C_Init+0x8c>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80017e6:	0052      	lsls	r2, r2, #1
 80017e8:	fbb0 f0f2 	udiv	r0, r0, r2
 80017ec:	b280      	uxth	r0, r0
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80017ee:	3101      	adds	r1, #1
 80017f0:	8421      	strh	r1, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80017f2:	2803      	cmp	r0, #3
 80017f4:	bf98      	it	ls
 80017f6:	2004      	movls	r0, #4
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80017f8:	83a0      	strh	r0, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80017fa:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80017fc:	896e      	ldrh	r6, [r5, #10]
 80017fe:	88a8      	ldrh	r0, [r5, #4]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001800:	8929      	ldrh	r1, [r5, #8]
 8001802:	89aa      	ldrh	r2, [r5, #12]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001804:	b29b      	uxth	r3, r3
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800180c:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 800180e:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8001812:	f023 0302 	bic.w	r3, r3, #2
 8001816:	041b      	lsls	r3, r3, #16
 8001818:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800181a:	4330      	orrs	r0, r6
 800181c:	4303      	orrs	r3, r0
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800181e:	430a      	orrs	r2, r1
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001820:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001822:	b292      	uxth	r2, r2
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001824:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001826:	8122      	strh	r2, [r4, #8]
}
 8001828:	b004      	add	sp, #16
 800182a:	bd70      	pop	{r4, r5, r6, pc}
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800182c:	88ee      	ldrh	r6, [r5, #6]
 800182e:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001832:	429e      	cmp	r6, r3
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001834:	bf1d      	ittte	ne
 8001836:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 800183a:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 800183e:	fbb0 f0f2 	udivne	r0, r0, r2
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001842:	eb02 0242 	addeq.w	r2, r2, r2, lsl #1
 8001846:	bf0b      	itete	eq
 8001848:	fbb0 f0f2 	udiveq	r0, r0, r2
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800184c:	b280      	uxthne	r0, r0
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800184e:	b280      	uxtheq	r0, r0
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001850:	f440 4080 	orrne.w	r0, r0, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001854:	0503      	lsls	r3, r0, #20
 8001856:	0d1b      	lsrs	r3, r3, #20
 8001858:	b90b      	cbnz	r3, 800185e <I2C_Init+0xbe>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800185a:	f040 0001 	orr.w	r0, r0, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800185e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001862:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8001866:	fb02 f101 	mul.w	r1, r2, r1
 800186a:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800186e:	fb83 2301 	smull	r2, r3, r3, r1
 8001872:	099b      	lsrs	r3, r3, #6
 8001874:	3301      	adds	r3, #1
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8001876:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800187a:	8423      	strh	r3, [r4, #32]
 800187c:	e7bc      	b.n	80017f8 <I2C_Init+0x58>
 800187e:	bf00      	nop

08001880 <I2C_StructInit>:
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8001880:	2300      	movs	r3, #0
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8001882:	f241 3288 	movw	r2, #5000	; 0x1388
 8001886:	6002      	str	r2, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8001888:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800188a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800188e:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8001890:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001892:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8001896:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001898:	8183      	strh	r3, [r0, #12]
}
 800189a:	4770      	bx	lr

0800189c <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800189c:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800189e:	b929      	cbnz	r1, 80018ac <I2C_Cmd+0x10>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	041b      	lsls	r3, r3, #16
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	8003      	strh	r3, [r0, #0]
 80018aa:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	8003      	strh	r3, [r0, #0]
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop

080018b8 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80018b8:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018ba:	b929      	cbnz	r1, 80018c8 <I2C_GenerateSTART+0x10>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80018bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018c0:	041b      	lsls	r3, r3, #16
 80018c2:	0c1b      	lsrs	r3, r3, #16
 80018c4:	8003      	strh	r3, [r0, #0]
 80018c6:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ce:	8003      	strh	r3, [r0, #0]
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop

080018d4 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80018d4:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018d6:	b929      	cbnz	r1, 80018e4 <I2C_GenerateSTOP+0x10>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80018d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018dc:	041b      	lsls	r3, r3, #16
 80018de:	0c1b      	lsrs	r3, r3, #16
 80018e0:	8003      	strh	r3, [r0, #0]
 80018e2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ea:	8003      	strh	r3, [r0, #0]
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop

080018f0 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80018f0:	b91a      	cbnz	r2, 80018fa <I2C_Send7bitAddress+0xa>
    Address |= I2C_OAR1_ADD0;
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 80018f2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 80018f6:	8201      	strh	r1, [r0, #16]
}
 80018f8:	4770      	bx	lr
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 80018fa:	f041 0101 	orr.w	r1, r1, #1
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
  }
  /* Send the address */
  I2Cx->DR = Address;
 80018fe:	8201      	strh	r1, [r0, #16]
}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop

08001904 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001904:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001906:	b929      	cbnz	r1, 8001914 <I2C_AcknowledgeConfig+0x10>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001908:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800190c:	041b      	lsls	r3, r3, #16
 800190e:	0c1b      	lsrs	r3, r3, #16
 8001910:	8003      	strh	r3, [r0, #0]
 8001912:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001914:	b29b      	uxth	r3, r3
 8001916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191a:	8003      	strh	r3, [r0, #0]
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop

08001920 <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8001920:	8983      	ldrh	r3, [r0, #12]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8001922:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8001926:	041b      	lsls	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8001928:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800192c:	0c1b      	lsrs	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800192e:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8001930:	8183      	strh	r3, [r0, #12]
}
 8001932:	4770      	bx	lr

08001934 <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8001934:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001936:	b929      	cbnz	r1, 8001944 <I2C_DualAddressCmd+0x10>
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	041b      	lsls	r3, r3, #16
 800193e:	0c1b      	lsrs	r3, r3, #16
 8001940:	8183      	strh	r3, [r0, #12]
 8001942:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8001944:	b29b      	uxth	r3, r3
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	8183      	strh	r3, [r0, #12]
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop

08001950 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8001950:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001952:	b929      	cbnz	r1, 8001960 <I2C_GeneralCallCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENGC;
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8001954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001958:	041b      	lsls	r3, r3, #16
 800195a:	0c1b      	lsrs	r3, r3, #16
 800195c:	8003      	strh	r3, [r0, #0]
 800195e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8001960:	b29b      	uxth	r3, r3
 8001962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001966:	8003      	strh	r3, [r0, #0]
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop

0800196c <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800196c:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800196e:	b919      	cbnz	r1, 8001978 <I2C_SoftwareResetCmd+0xc>
    I2Cx->CR1 |= I2C_CR1_SWRST;
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8001970:	045b      	lsls	r3, r3, #17
 8001972:	0c5b      	lsrs	r3, r3, #17
 8001974:	8003      	strh	r3, [r0, #0]
 8001976:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8001978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800197c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001980:	b29b      	uxth	r3, r3
 8001982:	8003      	strh	r3, [r0, #0]
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop

08001988 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8001988:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 800198a:	b129      	cbz	r1, 8001998 <I2C_StretchClockCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 800198c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001990:	041b      	lsls	r3, r3, #16
 8001992:	0c1b      	lsrs	r3, r3, #16
 8001994:	8003      	strh	r3, [r0, #0]
 8001996:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8001998:	b29b      	uxth	r3, r3
 800199a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800199e:	8003      	strh	r3, [r0, #0]
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop

080019a4 <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80019a4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80019a8:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80019aa:	d005      	beq.n	80019b8 <I2C_FastModeDutyCycleConfig+0x14>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80019ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019b0:	041b      	lsls	r3, r3, #16
 80019b2:	0c1b      	lsrs	r3, r3, #16
 80019b4:	8383      	strh	r3, [r0, #28]
 80019b6:	4770      	bx	lr
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019be:	8383      	strh	r3, [r0, #28]
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop

080019c4 <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80019c4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80019c8:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80019ca:	d005      	beq.n	80019d8 <I2C_NACKPositionConfig+0x14>
    I2Cx->CR1 |= I2C_NACKPosition_Next;
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 80019cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019d0:	041b      	lsls	r3, r3, #16
 80019d2:	0c1b      	lsrs	r3, r3, #16
 80019d4:	8003      	strh	r3, [r0, #0]
 80019d6:	4770      	bx	lr
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80019d8:	b29b      	uxth	r3, r3
 80019da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019de:	8003      	strh	r3, [r0, #0]
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop

080019e4 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80019e4:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80019e8:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80019ea:	d005      	beq.n	80019f8 <I2C_SMBusAlertConfig+0x14>
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 80019ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019f0:	041b      	lsls	r3, r3, #16
 80019f2:	0c1b      	lsrs	r3, r3, #16
 80019f4:	8003      	strh	r3, [r0, #0]
 80019f6:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019fe:	8003      	strh	r3, [r0, #0]
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop

08001a04 <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001a04:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a06:	b929      	cbnz	r1, 8001a14 <I2C_ARPCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENARP;
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8001a08:	f023 0310 	bic.w	r3, r3, #16
 8001a0c:	041b      	lsls	r3, r3, #16
 8001a0e:	0c1b      	lsrs	r3, r3, #16
 8001a10:	8003      	strh	r3, [r0, #0]
 8001a12:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	f043 0310 	orr.w	r3, r3, #16
 8001a1a:	8003      	strh	r3, [r0, #0]
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop

08001a20 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001a20:	8201      	strh	r1, [r0, #16]
}
 8001a22:	4770      	bx	lr

08001a24 <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001a24:	8a00      	ldrh	r0, [r0, #16]
}
 8001a26:	b2c0      	uxtb	r0, r0
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop

08001a2c <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001a2c:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a2e:	b929      	cbnz	r1, 8001a3c <I2C_TransmitPEC+0x10>
    I2Cx->CR1 |= I2C_CR1_PEC;
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8001a30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a34:	041b      	lsls	r3, r3, #16
 8001a36:	0c1b      	lsrs	r3, r3, #16
 8001a38:	8003      	strh	r3, [r0, #0]
 8001a3a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a42:	8003      	strh	r3, [r0, #0]
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop

08001a48 <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8001a48:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001a4c:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8001a4e:	d005      	beq.n	8001a5c <I2C_PECPositionConfig+0x14>
    I2Cx->CR1 |= I2C_PECPosition_Next;
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8001a50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a54:	041b      	lsls	r3, r3, #16
 8001a56:	0c1b      	lsrs	r3, r3, #16
 8001a58:	8003      	strh	r3, [r0, #0]
 8001a5a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a62:	8003      	strh	r3, [r0, #0]
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop

08001a68 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001a68:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a6a:	b929      	cbnz	r1, 8001a78 <I2C_CalculatePEC+0x10>
    I2Cx->CR1 |= I2C_CR1_ENPEC;
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8001a6c:	f023 0320 	bic.w	r3, r3, #32
 8001a70:	041b      	lsls	r3, r3, #16
 8001a72:	0c1b      	lsrs	r3, r3, #16
 8001a74:	8003      	strh	r3, [r0, #0]
 8001a76:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	f043 0320 	orr.w	r3, r3, #32
 8001a7e:	8003      	strh	r3, [r0, #0]
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop

08001a84 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8001a84:	8b00      	ldrh	r0, [r0, #24]
}
 8001a86:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001a8a:	4770      	bx	lr

08001a8c <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001a8c:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a8e:	b929      	cbnz	r1, 8001a9c <I2C_DMACmd+0x10>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8001a90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a94:	041b      	lsls	r3, r3, #16
 8001a96:	0c1b      	lsrs	r3, r3, #16
 8001a98:	8083      	strh	r3, [r0, #4]
 8001a9a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aa2:	8083      	strh	r3, [r0, #4]
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop

08001aa8 <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8001aa8:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001aaa:	b929      	cbnz	r1, 8001ab8 <I2C_DMALastTransferCmd+0x10>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8001aac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ab0:	041b      	lsls	r3, r3, #16
 8001ab2:	0c1b      	lsrs	r3, r3, #16
 8001ab4:	8083      	strh	r3, [r0, #4]
 8001ab6:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001abe:	8083      	strh	r3, [r0, #4]
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop

08001ac4 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8001ac4:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8001aca:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 8001acc:	9b01      	ldr	r3, [sp, #4]
 8001ace:	18cb      	adds	r3, r1, r3
 8001ad0:	9301      	str	r3, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 8001ad2:	9b01      	ldr	r3, [sp, #4]
 8001ad4:	8818      	ldrh	r0, [r3, #0]
}
 8001ad6:	b280      	uxth	r0, r0
 8001ad8:	b002      	add	sp, #8
 8001ada:	4770      	bx	lr

08001adc <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8001adc:	8883      	ldrh	r3, [r0, #4]
 8001ade:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8001ae0:	b91a      	cbnz	r2, 8001aea <I2C_ITConfig+0xe>
    I2Cx->CR2 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8001ae2:	ea23 0101 	bic.w	r1, r3, r1
 8001ae6:	8081      	strh	r1, [r0, #4]
 8001ae8:	4770      	bx	lr
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8001aea:	4319      	orrs	r1, r3
 8001aec:	8081      	strh	r1, [r0, #4]
 8001aee:	4770      	bx	lr

08001af0 <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001af0:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 8001af2:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001af4:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001af6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001afa:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001afc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 8001b00:	1a0b      	subs	r3, r1, r0
 8001b02:	4258      	negs	r0, r3
 8001b04:	eb40 0003 	adc.w	r0, r0, r3
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop

08001b0c <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001b0c:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 8001b0e:	8b03      	ldrh	r3, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001b10:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001b12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

  /* Return status */
  return lastevent;
}
 8001b16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001b1a:	4770      	bx	lr

08001b1c <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001b1c:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001b1e:	2300      	movs	r3, #0

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001b20:	0f0a      	lsrs	r2, r1, #28
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001b26:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001b28:	9200      	str	r2, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 8001b2a:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001b2c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 8001b30:	b153      	cbz	r3, 8001b48 <I2C_GetFlagStatus+0x2c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001b32:	9b01      	ldr	r3, [sp, #4]
 8001b34:	3314      	adds	r3, #20
 8001b36:	9301      	str	r3, [sp, #4]
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001b38:	9b01      	ldr	r3, [sp, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001b3c:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8001b3e:	bf0c      	ite	eq
 8001b40:	2000      	moveq	r0, #0
 8001b42:	2001      	movne	r0, #1
 8001b44:	b002      	add	sp, #8
 8001b46:	4770      	bx	lr
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001b48:	9b01      	ldr	r3, [sp, #4]
 8001b4a:	3318      	adds	r3, #24
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001b4c:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	e7f2      	b.n	8001b38 <I2C_GetFlagStatus+0x1c>
 8001b52:	bf00      	nop

08001b54 <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001b54:	43c9      	mvns	r1, r1
 8001b56:	b289      	uxth	r1, r1
 8001b58:	8281      	strh	r1, [r0, #20]
}
 8001b5a:	4770      	bx	lr

08001b5c <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001b5c:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001b5e:	8a80      	ldrh	r0, [r0, #20]
 8001b60:	b280      	uxth	r0, r0
 8001b62:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001b64:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001b66:	d006      	beq.n	8001b76 <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001b68:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 8001b6c:	ea13 4111 	ands.w	r1, r3, r1, lsr #16

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8001b70:	bf0c      	ite	eq
 8001b72:	2000      	moveq	r0, #0
 8001b74:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 8001b76:	4770      	bx	lr

08001b78 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001b78:	43c9      	mvns	r1, r1
 8001b7a:	b289      	uxth	r1, r1
 8001b7c:	8281      	strh	r1, [r0, #20]
}
 8001b7e:	4770      	bx	lr

08001b80 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b80:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b84:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b88:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b8a:	6819      	ldr	r1, [r3, #0]
 8001b8c:	f041 0101 	orr.w	r1, r1, #1
 8001b90:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b92:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b94:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b96:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b9a:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b9e:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001ba2:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8001ba6:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001ba8:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001baa:	6819      	ldr	r1, [r3, #0]
 8001bac:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001bb0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001bb2:	60da      	str	r2, [r3, #12]
}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop

08001bb8 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8001bb8:	f643 0302 	movw	r3, #14338	; 0x3802
 8001bbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8001bc4:	7018      	strb	r0, [r3, #0]
}
 8001bc6:	4770      	bx	lr

08001bc8 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001bc8:	b082      	sub	sp, #8

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001bca:	f44f 5160 	mov.w	r1, #14336	; 0x3800
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001bd2:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001bd6:	680a      	ldr	r2, [r1, #0]
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8001bd8:	9b01      	ldr	r3, [sp, #4]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8001bde:	9b01      	ldr	r3, [sp, #4]
 8001be0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001be4:	d001      	beq.n	8001bea <RCC_WaitForHSEStartUp+0x22>
 8001be6:	0393      	lsls	r3, r2, #14
 8001be8:	d5f5      	bpl.n	8001bd6 <RCC_WaitForHSEStartUp+0xe>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001bea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001bee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bf2:	6818      	ldr	r0, [r3, #0]
  else
  {
    status = ERROR;
  }
  return (status);
}
 8001bf4:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8001bf8:	b002      	add	sp, #8
 8001bfa:	4770      	bx	lr

08001bfc <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8001bfc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c04:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8001c06:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8001c0a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8001c0e:	601a      	str	r2, [r3, #0]
}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop

08001c14 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001c1a:	6018      	str	r0, [r3, #0]
}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop

08001c20 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001c20:	f643 0370 	movw	r3, #14448	; 0x3870
 8001c24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c28:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001c2a:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001c2c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001c2e:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001c30:	d004      	beq.n	8001c3c <RCC_LSEConfig+0x1c>
 8001c32:	2804      	cmp	r0, #4
 8001c34:	d101      	bne.n	8001c3a <RCC_LSEConfig+0x1a>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001c36:	2205      	movs	r2, #5
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8001c3c:	7018      	strb	r0, [r3, #0]
      break;
 8001c3e:	4770      	bx	lr

08001c40 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8001c40:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8001c44:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001c48:	6018      	str	r0, [r3, #0]
}
 8001c4a:	4770      	bx	lr

08001c4c <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001c4c:	4301      	orrs	r1, r0
 8001c4e:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8001c52:	9900      	ldr	r1, [sp, #0]
 8001c54:	085b      	lsrs	r3, r3, #1
 8001c56:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8001c5a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001c64:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8001c68:	6042      	str	r2, [r0, #4]
                 (PLLQ << 24);
}
 8001c6a:	4770      	bx	lr

08001c6c <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001c6c:	2360      	movs	r3, #96	; 0x60
 8001c6e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001c72:	6018      	str	r0, [r3, #0]
}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop

08001c78 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8001c78:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c7c:	0180      	lsls	r0, r0, #6
 8001c7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c82:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 8001c86:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 8001c8a:	4770      	bx	lr

08001c8c <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8001c8c:	2368      	movs	r3, #104	; 0x68
 8001c8e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001c92:	6018      	str	r0, [r3, #0]
}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop

08001c98 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001c98:	234c      	movs	r3, #76	; 0x4c
 8001c9a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001c9e:	6018      	str	r0, [r3, #0]
}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop

08001ca4 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8001ca4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ca8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cac:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8001cae:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8001cb2:	4302      	orrs	r2, r0
 8001cb4:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001cb6:	609a      	str	r2, [r3, #8]
}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop

08001cbc <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8001cbc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cc4:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8001cc6:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8001cca:	4302      	orrs	r2, r0
 8001ccc:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001cce:	609a      	str	r2, [r3, #8]
}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop

08001cd4 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8001cd4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cdc:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8001cde:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001ce2:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001ce4:	609a      	str	r2, [r3, #8]
}
 8001ce6:	4770      	bx	lr

08001ce8 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8001ce8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cf0:	6898      	ldr	r0, [r3, #8]
}
 8001cf2:	f000 000c 	and.w	r0, r0, #12
 8001cf6:	4770      	bx	lr

08001cf8 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8001cf8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d00:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8001d02:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001d06:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001d08:	609a      	str	r2, [r3, #8]
}
 8001d0a:	4770      	bx	lr

08001d0c <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001d0c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d14:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8001d16:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001d1a:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001d1c:	609a      	str	r2, [r3, #8]
}
 8001d1e:	4770      	bx	lr

08001d20 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001d20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d28:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8001d2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001d2e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001d32:	609a      	str	r2, [r3, #8]
}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop

08001d38 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001d38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001d40:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8001d48:	2a04      	cmp	r2, #4
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001d4a:	bf02      	ittt	eq
 8001d4c:	f44f 5290 	moveq.w	r2, #4608	; 0x1200
 8001d50:	f2c0 027a 	movteq	r2, #122	; 0x7a
 8001d54:	6002      	streq	r2, [r0, #0]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8001d56:	d006      	beq.n	8001d66 <RCC_GetClocksFreq+0x2e>
 8001d58:	2a08      	cmp	r2, #8
 8001d5a:	d01e      	beq.n	8001d9a <RCC_GetClocksFreq+0x62>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001d5c:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8001d60:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8001d64:	6002      	str	r2, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001d66:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8001d6e:	491c      	ldr	r1, [pc, #112]	; (8001de0 <RCC_GetClocksFreq+0xa8>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001d70:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 4;
 8001d72:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8001d76:	5d0c      	ldrb	r4, [r1, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001d78:	40e2      	lsrs	r2, r4
 8001d7a:	6042      	str	r2, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001d7c:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 10;
 8001d7e:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8001d82:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001d84:	fa32 f404 	lsrs.w	r4, r2, r4
 8001d88:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001d8a:	689b      	ldr	r3, [r3, #8]
  tmp = tmp >> 13;
 8001d8c:	f3c3 3342 	ubfx	r3, r3, #13, #3
  presc = APBAHBPrescTable[tmp];
 8001d90:	5ccb      	ldrb	r3, [r1, r3]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001d92:	40da      	lsrs	r2, r3
 8001d94:	60c2      	str	r2, [r0, #12]
}
 8001d96:	bc10      	pop	{r4}
 8001d98:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001d9a:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d9c:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
 8001d9e:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001da2:	685c      	ldr	r4, [r3, #4]
 8001da4:	bf15      	itete	ne
 8001da6:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001daa:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001dae:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001db2:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001db6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001dba:	fbb3 f2f1 	udiv	r2, r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001dbe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001dc2:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001dc6:	f3c4 1488 	ubfx	r4, r4, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001dd0:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001dd2:	fb02 f204 	mul.w	r2, r2, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001dd6:	005b      	lsls	r3, r3, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ddc:	6002      	str	r2, [r0, #0]
      break;
 8001dde:	e7c2      	b.n	8001d66 <RCC_GetClocksFreq+0x2e>
 8001de0:	20000074 	.word	0x20000074

08001de4 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8001de4:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8001de8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001dec:	d10c      	bne.n	8001e08 <RCC_RTCCLKConfig+0x24>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001dee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001df2:	f2c4 0302 	movt	r3, #16386	; 0x4002

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001df6:	f020 4170 	bic.w	r1, r0, #4026531840	; 0xf0000000
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001dfa:	689a      	ldr	r2, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001dfc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8001e00:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001e04:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8001e06:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8001e08:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e10:	0500      	lsls	r0, r0, #20
 8001e12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e14:	0d00      	lsrs	r0, r0, #20
 8001e16:	4310      	orrs	r0, r2
 8001e18:	6718      	str	r0, [r3, #112]	; 0x70
}
 8001e1a:	4770      	bx	lr

08001e1c <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001e1c:	f640 633c 	movw	r3, #3644	; 0xe3c
 8001e20:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001e24:	6018      	str	r0, [r3, #0]
}
 8001e26:	4770      	bx	lr

08001e28 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8001e28:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8001e2c:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001e30:	6018      	str	r0, [r3, #0]
}
 8001e32:	4770      	bx	lr

08001e34 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8001e34:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8001e38:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001e3c:	6018      	str	r0, [r3, #0]
}
 8001e3e:	4770      	bx	lr

08001e40 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001e40:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e4a:	b919      	cbnz	r1, 8001e54 <RCC_AHB1PeriphClockCmd+0x14>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001e4c:	ea22 0000 	bic.w	r0, r2, r0
 8001e50:	6318      	str	r0, [r3, #48]	; 0x30
 8001e52:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001e54:	4310      	orrs	r0, r2
 8001e56:	6318      	str	r0, [r3, #48]	; 0x30
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop

08001e5c <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001e5c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e66:	b919      	cbnz	r1, 8001e70 <RCC_AHB2PeriphClockCmd+0x14>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8001e68:	ea22 0000 	bic.w	r0, r2, r0
 8001e6c:	6358      	str	r0, [r3, #52]	; 0x34
 8001e6e:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001e70:	4310      	orrs	r0, r2
 8001e72:	6358      	str	r0, [r3, #52]	; 0x34
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop

08001e78 <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001e78:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e82:	b919      	cbnz	r1, 8001e8c <RCC_AHB3PeriphClockCmd+0x14>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8001e84:	ea22 0000 	bic.w	r0, r2, r0
 8001e88:	6398      	str	r0, [r3, #56]	; 0x38
 8001e8a:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001e8c:	4310      	orrs	r0, r2
 8001e8e:	6398      	str	r0, [r3, #56]	; 0x38
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop

08001e94 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001e94:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e9e:	b919      	cbnz	r1, 8001ea8 <RCC_APB1PeriphClockCmd+0x14>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001ea0:	ea22 0000 	bic.w	r0, r2, r0
 8001ea4:	6418      	str	r0, [r3, #64]	; 0x40
 8001ea6:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001ea8:	4310      	orrs	r0, r2
 8001eaa:	6418      	str	r0, [r3, #64]	; 0x40
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001eb0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001eb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001eba:	b919      	cbnz	r1, 8001ec4 <RCC_APB2PeriphClockCmd+0x14>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001ebc:	ea22 0000 	bic.w	r0, r2, r0
 8001ec0:	6458      	str	r0, [r3, #68]	; 0x44
 8001ec2:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001ec4:	4310      	orrs	r0, r2
 8001ec6:	6458      	str	r0, [r3, #68]	; 0x44
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop

08001ecc <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001ecc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ed0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ed4:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001ed6:	b919      	cbnz	r1, 8001ee0 <RCC_AHB1PeriphResetCmd+0x14>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8001ed8:	ea22 0000 	bic.w	r0, r2, r0
 8001edc:	6118      	str	r0, [r3, #16]
 8001ede:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001ee0:	4310      	orrs	r0, r2
 8001ee2:	6118      	str	r0, [r3, #16]
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop

08001ee8 <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001ee8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001eec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ef0:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001ef2:	b919      	cbnz	r1, 8001efc <RCC_AHB2PeriphResetCmd+0x14>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8001ef4:	ea22 0000 	bic.w	r0, r2, r0
 8001ef8:	6158      	str	r0, [r3, #20]
 8001efa:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001efc:	4310      	orrs	r0, r2
 8001efe:	6158      	str	r0, [r3, #20]
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop

08001f04 <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001f04:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f0c:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f0e:	b919      	cbnz	r1, 8001f18 <RCC_AHB3PeriphResetCmd+0x14>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8001f10:	ea22 0000 	bic.w	r0, r2, r0
 8001f14:	6198      	str	r0, [r3, #24]
 8001f16:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001f18:	4310      	orrs	r0, r2
 8001f1a:	6198      	str	r0, [r3, #24]
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop

08001f20 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001f20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f28:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f2a:	b919      	cbnz	r1, 8001f34 <RCC_APB1PeriphResetCmd+0x14>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001f2c:	ea22 0000 	bic.w	r0, r2, r0
 8001f30:	6218      	str	r0, [r3, #32]
 8001f32:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001f34:	4310      	orrs	r0, r2
 8001f36:	6218      	str	r0, [r3, #32]
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop

08001f3c <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001f3c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f46:	b919      	cbnz	r1, 8001f50 <RCC_APB2PeriphResetCmd+0x14>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001f48:	ea22 0000 	bic.w	r0, r2, r0
 8001f4c:	6258      	str	r0, [r3, #36]	; 0x24
 8001f4e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001f50:	4310      	orrs	r0, r2
 8001f52:	6258      	str	r0, [r3, #36]	; 0x24
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop

08001f58 <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001f58:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f62:	b919      	cbnz	r1, 8001f6c <RCC_AHB1PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8001f64:	ea22 0000 	bic.w	r0, r2, r0
 8001f68:	6518      	str	r0, [r3, #80]	; 0x50
 8001f6a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001f6c:	4310      	orrs	r0, r2
 8001f6e:	6518      	str	r0, [r3, #80]	; 0x50
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop

08001f74 <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001f74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f7e:	b919      	cbnz	r1, 8001f88 <RCC_AHB2PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8001f80:	ea22 0000 	bic.w	r0, r2, r0
 8001f84:	6558      	str	r0, [r3, #84]	; 0x54
 8001f86:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001f88:	4310      	orrs	r0, r2
 8001f8a:	6558      	str	r0, [r3, #84]	; 0x54
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop

08001f90 <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001f90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f9a:	b919      	cbnz	r1, 8001fa4 <RCC_AHB3PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8001f9c:	ea22 0000 	bic.w	r0, r2, r0
 8001fa0:	6598      	str	r0, [r3, #88]	; 0x58
 8001fa2:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001fa4:	4310      	orrs	r0, r2
 8001fa6:	6598      	str	r0, [r3, #88]	; 0x58
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop

08001fac <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001fac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001fb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001fb6:	b919      	cbnz	r1, 8001fc0 <RCC_APB1PeriphClockLPModeCmd+0x14>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8001fb8:	ea22 0000 	bic.w	r0, r2, r0
 8001fbc:	6618      	str	r0, [r3, #96]	; 0x60
 8001fbe:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001fc0:	4310      	orrs	r0, r2
 8001fc2:	6618      	str	r0, [r3, #96]	; 0x60
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop

08001fc8 <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001fc8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001fcc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001fd2:	b919      	cbnz	r1, 8001fdc <RCC_APB2PeriphClockLPModeCmd+0x14>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8001fd4:	ea22 0000 	bic.w	r0, r2, r0
 8001fd8:	6658      	str	r0, [r3, #100]	; 0x64
 8001fda:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001fdc:	4310      	orrs	r0, r2
 8001fde:	6658      	str	r0, [r3, #100]	; 0x64
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop

08001fe4 <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001fe4:	f643 030d 	movw	r3, #14349	; 0x380d
 8001fe8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fec:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001fee:	b919      	cbnz	r1, 8001ff8 <RCC_ITConfig+0x14>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001ff0:	ea22 0000 	bic.w	r0, r2, r0
 8001ff4:	7018      	strb	r0, [r3, #0]
 8001ff6:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001ff8:	4310      	orrs	r0, r2
 8001ffa:	7018      	strb	r0, [r3, #0]
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop

08002000 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8002000:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8002002:	2b01      	cmp	r3, #1
 8002004:	d00e      	beq.n	8002024 <RCC_GetFlagStatus+0x24>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8002006:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8002008:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800200c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002010:	bf0c      	ite	eq
 8002012:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8002014:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8002016:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800201a:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 800201e:	f000 0001 	and.w	r0, r0, #1
 8002022:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8002024:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002028:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	e7f2      	b.n	8002016 <RCC_GetFlagStatus+0x16>

08002030 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8002030:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002034:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002038:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800203a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800203e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop

08002044 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8002044:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002048:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800204c:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 800204e:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8002050:	bf0c      	ite	eq
 8002052:	2000      	moveq	r0, #0
 8002054:	2001      	movne	r0, #1
 8002056:	4770      	bx	lr

08002058 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8002058:	f643 030e 	movw	r3, #14350	; 0x380e
 800205c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002060:	7018      	strb	r0, [r3, #0]
}
 8002062:	4770      	bx	lr

08002064 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8002064:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8002066:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800206e:	4298      	cmp	r0, r3
 8002070:	d018      	beq.n	80020a4 <SPI_I2S_DeInit+0x40>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8002072:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002076:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800207a:	4298      	cmp	r0, r3
 800207c:	d01e      	beq.n	80020bc <SPI_I2S_DeInit+0x58>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
    }
  else
  {
    if (SPIx == SPI3)
 800207e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002082:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002086:	4298      	cmp	r0, r3
 8002088:	d000      	beq.n	800208c <SPI_I2S_DeInit+0x28>
 800208a:	bd08      	pop	{r3, pc}
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800208c:	2101      	movs	r1, #1
 800208e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002092:	f7ff ff45 	bl	8001f20 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8002096:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800209a:	2100      	movs	r1, #0
    }
  }
}
 800209c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80020a0:	f7ff bf3e 	b.w	8001f20 <RCC_APB1PeriphResetCmd>
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80020a4:	2101      	movs	r1, #1
 80020a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80020aa:	f7ff ff47 	bl	8001f3c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80020ae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80020b2:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 80020b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80020b8:	f7ff bf40 	b.w	8001f3c <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80020bc:	2101      	movs	r1, #1
 80020be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020c2:	f7ff ff2d 	bl	8001f20 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80020c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020ca:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 80020cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80020d0:	f7ff bf26 	b.w	8001f20 <RCC_APB1PeriphResetCmd>

080020d4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80020d4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80020d8:	880b      	ldrh	r3, [r1, #0]
 80020da:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 80020de:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 80020e2:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80020e6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80020ea:	894f      	ldrh	r7, [r1, #10]
 80020ec:	898e      	ldrh	r6, [r1, #12]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80020ee:	8805      	ldrh	r5, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80020f0:	89cc      	ldrh	r4, [r1, #14]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80020f2:	8a0a      	ldrh	r2, [r1, #16]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80020f4:	ea4a 0303 	orr.w	r3, sl, r3
 80020f8:	ea43 0309 	orr.w	r3, r3, r9
 80020fc:	ea43 0308 	orr.w	r3, r3, r8
 8002100:	ea43 030c 	orr.w	r3, r3, ip
 8002104:	433b      	orrs	r3, r7
 8002106:	4333      	orrs	r3, r6

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8002108:	f405 5141 	and.w	r1, r5, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800210c:	4323      	orrs	r3, r4
 800210e:	430b      	orrs	r3, r1
 8002110:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8002112:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8002114:	8b83      	ldrh	r3, [r0, #28]
 8002116:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800211a:	041b      	lsls	r3, r3, #16
 800211c:	0c1b      	lsrs	r3, r3, #16
 800211e:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8002120:	8202      	strh	r2, [r0, #16]
}
 8002122:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8002126:	4770      	bx	lr

08002128 <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8002128:	8b83      	ldrh	r3, [r0, #28]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800212a:	688a      	ldr	r2, [r1, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800212c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002130:	f023 030f 	bic.w	r3, r3, #15
 8002134:	041b      	lsls	r3, r3, #16
 8002136:	0c1b      	lsrs	r3, r3, #16
 8002138:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 800213a:	2302      	movs	r3, #2
 800213c:	8403      	strh	r3, [r0, #32]
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800213e:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8002142:	8b86      	ldrh	r6, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8002144:	429a      	cmp	r2, r3
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8002146:	b2b6      	uxth	r6, r6
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8002148:	d05d      	beq.n	8002206 <I2S_Init+0xde>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 800214a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800214e:	f2c4 0302 	movt	r3, #16386	; 0x4002
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8002152:	888c      	ldrh	r4, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8002154:	689d      	ldr	r5, [r3, #8]
      packetlength = 1;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8002156:	2c00      	cmp	r4, #0
 8002158:	bf0c      	ite	eq
 800215a:	f04f 0c01 	moveq.w	ip, #1
 800215e:	f04f 0c02 	movne.w	ip, #2
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8002162:	022d      	lsls	r5, r5, #8
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8002164:	bf42      	ittt	mi
 8002166:	689d      	ldrmi	r5, [r3, #8]
 8002168:	f425 0500 	bicmi.w	r5, r5, #8388608	; 0x800000
 800216c:	609d      	strmi	r5, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800216e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002172:	f2c4 0302 	movt	r3, #16386	; 0x4002
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8002176:	f44f 5590 	mov.w	r5, #4608	; 0x1200
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800217a:	f8d3 8084 	ldr.w	r8, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800217e:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8002182:	f8d3 9004 	ldr.w	r9, [r3, #4]
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8002186:	88cb      	ldrh	r3, [r1, #6]
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8002188:	f009 093f 	and.w	r9, r9, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800218c:	f2c0 057a 	movt	r5, #122	; 0x7a
 8002190:	fbb5 f5f9 	udiv	r5, r5, r9
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8002194:	f3c8 1888 	ubfx	r8, r8, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8002198:	fb08 f505 	mul.w	r5, r8, r5
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800219c:	f3c7 7702 	ubfx	r7, r7, #28, #3
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80021a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 80021a4:	fbb5 f5f7 	udiv	r5, r5, r7
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80021a8:	d030      	beq.n	800220c <I2S_Init+0xe4>
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80021aa:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 80021ae:	fbb5 f5fc 	udiv	r5, r5, ip
 80021b2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80021b6:	006d      	lsls	r5, r5, #1
 80021b8:	fbb5 f2f2 	udiv	r2, r5, r2
 80021bc:	3205      	adds	r2, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 80021be:	f64c 45cd 	movw	r5, #52429	; 0xcccd
 80021c2:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80021c6:	b292      	uxth	r2, r2
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 80021c8:	fba5 7202 	umull	r7, r2, r5, r2
 80021cc:	08d2      	lsrs	r2, r2, #3
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 80021ce:	0855      	lsrs	r5, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 80021d0:	1eaf      	subs	r7, r5, #2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 80021d2:	f002 0201 	and.w	r2, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 80021d6:	2ffd      	cmp	r7, #253	; 0xfd
 80021d8:	bf94      	ite	ls
 80021da:	ea45 2202 	orrls.w	r2, r5, r2, lsl #8
 80021de:	2202      	movhi	r2, #2
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80021e0:	f8b1 c000 	ldrh.w	ip, [r1]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80021e4:	884f      	ldrh	r7, [r1, #2]
 80021e6:	898d      	ldrh	r5, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80021e8:	ea46 010c 	orr.w	r1, r6, ip
 80021ec:	f441 6100 	orr.w	r1, r1, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80021f0:	4339      	orrs	r1, r7
 80021f2:	4329      	orrs	r1, r5
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80021f4:	4313      	orrs	r3, r2
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80021f6:	b289      	uxth	r1, r1
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80021f8:	b29b      	uxth	r3, r3
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80021fa:	430c      	orrs	r4, r1
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80021fc:	8403      	strh	r3, [r0, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 80021fe:	8384      	strh	r4, [r0, #28]
}
 8002200:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8002204:	4770      	bx	lr
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8002206:	888c      	ldrh	r4, [r1, #4]
 8002208:	88cb      	ldrh	r3, [r1, #6]
 800220a:	e7e9      	b.n	80021e0 <I2S_Init+0xb8>
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800220c:	0a2d      	lsrs	r5, r5, #8
 800220e:	e7d0      	b.n	80021b2 <I2S_Init+0x8a>

08002210 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002210:	2300      	movs	r3, #0
 8002212:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8002214:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8002216:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8002218:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800221a:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800221c:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800221e:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8002220:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8002222:	2307      	movs	r3, #7
 8002224:	8203      	strh	r3, [r0, #16]
}
 8002226:	4770      	bx	lr

08002228 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8002228:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800222a:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800222c:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 800222e:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8002230:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8002232:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8002234:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8002236:	8183      	strh	r3, [r0, #12]
}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop

0800223c <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800223c:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800223e:	b929      	cbnz	r1, 800224c <SPI_Cmd+0x10>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8002240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	0c1b      	lsrs	r3, r3, #16
 8002248:	8003      	strh	r3, [r0, #0]
 800224a:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800224c:	b29b      	uxth	r3, r3
 800224e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002252:	8003      	strh	r3, [r0, #0]
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop

08002258 <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8002258:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800225a:	b929      	cbnz	r1, 8002268 <I2S_Cmd+0x10>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 800225c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002260:	041b      	lsls	r3, r3, #16
 8002262:	0c1b      	lsrs	r3, r3, #16
 8002264:	8383      	strh	r3, [r0, #28]
 8002266:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8002268:	b29b      	uxth	r3, r3
 800226a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800226e:	8383      	strh	r3, [r0, #28]
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop

08002274 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8002274:	8803      	ldrh	r3, [r0, #0]
 8002276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800227a:	041b      	lsls	r3, r3, #16
 800227c:	0c1b      	lsrs	r3, r3, #16
 800227e:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8002280:	8803      	ldrh	r3, [r0, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	430b      	orrs	r3, r1
 8002286:	8003      	strh	r3, [r0, #0]
}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop

0800228c <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800228c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8002290:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8002292:	d005      	beq.n	80022a0 <SPI_BiDirectionalLineConfig+0x14>
    SPIx->CR1 |= SPI_Direction_Tx;
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8002294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002298:	041b      	lsls	r3, r3, #16
 800229a:	0c1b      	lsrs	r3, r3, #16
 800229c:	8003      	strh	r3, [r0, #0]
 800229e:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a6:	8003      	strh	r3, [r0, #0]
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop

080022ac <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 80022ac:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80022b0:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80022b2:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 80022b4:	d004      	beq.n	80022c0 <SPI_NSSInternalSoftwareConfig+0x14>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022bc:	8003      	strh	r3, [r0, #0]
 80022be:	4770      	bx	lr
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80022c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022c4:	041b      	lsls	r3, r3, #16
 80022c6:	0c1b      	lsrs	r3, r3, #16
 80022c8:	8003      	strh	r3, [r0, #0]
 80022ca:	4770      	bx	lr

080022cc <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 80022cc:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80022ce:	b929      	cbnz	r1, 80022dc <SPI_SSOutputCmd+0x10>
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 80022d0:	f023 0304 	bic.w	r3, r3, #4
 80022d4:	041b      	lsls	r3, r3, #16
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	8083      	strh	r3, [r0, #4]
 80022da:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 80022dc:	b29b      	uxth	r3, r3
 80022de:	f043 0304 	orr.w	r3, r3, #4
 80022e2:	8083      	strh	r3, [r0, #4]
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop

080022e8 <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 80022e8:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80022ea:	b929      	cbnz	r1, 80022f8 <SPI_TIModeCmd+0x10>
    SPIx->CR2 |= SPI_CR2_FRF;
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 80022ec:	f023 0310 	bic.w	r3, r3, #16
 80022f0:	041b      	lsls	r3, r3, #16
 80022f2:	0c1b      	lsrs	r3, r3, #16
 80022f4:	8083      	strh	r3, [r0, #4]
 80022f6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	f043 0310 	orr.w	r3, r3, #16
 80022fe:	8083      	strh	r3, [r0, #4]
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop

08002304 <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8002304:	8b83      	ldrh	r3, [r0, #28]
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002306:	898a      	ldrh	r2, [r1, #12]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8002308:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800230c:	f023 030f 	bic.w	r3, r3, #15
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	0c1b      	lsrs	r3, r3, #16
 8002314:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 8002316:	2302      	movs	r3, #2
 8002318:	8403      	strh	r3, [r0, #32]
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 800231a:	b470      	push	{r4, r5, r6}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 800231c:	8b86      	ldrh	r6, [r0, #28]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800231e:	884d      	ldrh	r5, [r1, #2]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8002320:	880b      	ldrh	r3, [r1, #0]
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002322:	888c      	ldrh	r4, [r1, #4]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8002324:	b2b1      	uxth	r1, r6
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8002326:	4329      	orrs	r1, r5
 8002328:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 800232c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002330:	bf18      	it	ne
 8002332:	2b00      	cmpne	r3, #0
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002334:	ea41 0104 	orr.w	r1, r1, r4
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8002338:	bf14      	ite	ne
 800233a:	2300      	movne	r3, #0
 800233c:	2301      	moveq	r3, #1
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800233e:	ea41 0102 	orr.w	r1, r1, r2
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
  {
    tmp = I2S_Mode_SlaveRx;
 8002342:	bf14      	ite	ne
 8002344:	461a      	movne	r2, r3
 8002346:	f44f 7280 	moveq.w	r2, #256	; 0x100
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800234a:	b28b      	uxth	r3, r1
 800234c:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 800234e:	8383      	strh	r3, [r0, #28]
}
 8002350:	bc70      	pop	{r4, r5, r6}
 8002352:	4770      	bx	lr

08002354 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8002354:	8980      	ldrh	r0, [r0, #12]
}
 8002356:	b280      	uxth	r0, r0
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop

0800235c <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800235c:	8181      	strh	r1, [r0, #12]
}
 800235e:	4770      	bx	lr

08002360 <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8002360:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002362:	b929      	cbnz	r1, 8002370 <SPI_CalculateCRC+0x10>
    SPIx->CR1 |= SPI_CR1_CRCEN;
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8002364:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	0c1b      	lsrs	r3, r3, #16
 800236c:	8003      	strh	r3, [r0, #0]
 800236e:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8002370:	b29b      	uxth	r3, r3
 8002372:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002376:	8003      	strh	r3, [r0, #0]
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop

0800237c <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 800237c:	8803      	ldrh	r3, [r0, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002384:	8003      	strh	r3, [r0, #0]
}
 8002386:	4770      	bx	lr

08002388 <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8002388:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800238a:	bf15      	itete	ne
 800238c:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800238e:	8a80      	ldrheq	r0, [r0, #20]
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8002390:	b280      	uxthne	r0, r0
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8002392:	b280      	uxtheq	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop

08002398 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8002398:	8a00      	ldrh	r0, [r0, #16]
}
 800239a:	b280      	uxth	r0, r0
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop

080023a0 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80023a0:	8883      	ldrh	r3, [r0, #4]
 80023a2:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 80023a4:	b91a      	cbnz	r2, 80023ae <SPI_I2S_DMACmd+0xe>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 80023a6:	ea23 0101 	bic.w	r1, r3, r1
 80023aa:	8081      	strh	r1, [r0, #4]
 80023ac:	4770      	bx	lr
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80023ae:	4319      	orrs	r1, r3
 80023b0:	8081      	strh	r1, [r0, #4]
 80023b2:	4770      	bx	lr

080023b4 <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 80023b4:	2301      	movs	r3, #1
 80023b6:	0909      	lsrs	r1, r1, #4
 80023b8:	fa13 f101 	lsls.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80023bc:	8883      	ldrh	r3, [r0, #4]

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 80023be:	b289      	uxth	r1, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80023c0:	b29b      	uxth	r3, r3
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 80023c2:	b91a      	cbnz	r2, 80023cc <SPI_I2S_ITConfig+0x18>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 80023c4:	ea23 0101 	bic.w	r1, r3, r1
 80023c8:	8081      	strh	r1, [r0, #4]
 80023ca:	4770      	bx	lr
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80023cc:	4319      	orrs	r1, r3
 80023ce:	8081      	strh	r1, [r0, #4]
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop

080023d4 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80023d4:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80023d6:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 80023d8:	bf0c      	ite	eq
 80023da:	2000      	moveq	r0, #0
 80023dc:	2001      	movne	r0, #1
 80023de:	4770      	bx	lr

080023e0 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 80023e0:	43c9      	mvns	r1, r1
 80023e2:	b289      	uxth	r1, r1
 80023e4:	8101      	strh	r1, [r0, #8]
}
 80023e6:	4770      	bx	lr

080023e8 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 80023e8:	b410      	push	{r4}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80023ea:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80023ec:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80023ee:	2201      	movs	r2, #1
 80023f0:	f001 030f 	and.w	r3, r1, #15

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80023f4:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80023f6:	fa12 f303 	lsls.w	r3, r2, r3

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80023fa:	4018      	ands	r0, r3

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80023fc:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80023fe:	d005      	beq.n	800240c <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8002400:	0909      	lsrs	r1, r1, #4
 8002402:	408a      	lsls	r2, r1
  *            @arg SPI_IT_CRCERR: CRC Error interrupt.
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 8002404:	4214      	tst	r4, r2

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8002406:	bf0c      	ite	eq
 8002408:	2000      	moveq	r0, #0
 800240a:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 800240c:	bc10      	pop	{r4}
 800240e:	4770      	bx	lr

08002410 <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8002410:	f001 010f 	and.w	r1, r1, #15
 8002414:	2301      	movs	r3, #1
 8002416:	fa13 f101 	lsls.w	r1, r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800241a:	43c9      	mvns	r1, r1
 800241c:	b289      	uxth	r1, r1
 800241e:	8101      	strh	r1, [r0, #8]
}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop

08002424 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8002424:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8002426:	2300      	movs	r3, #0
 8002428:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800242c:	4298      	cmp	r0, r3
 800242e:	d05b      	beq.n	80024e8 <TIM_DeInit+0xc4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 8002430:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002434:	d062      	beq.n	80024fc <TIM_DeInit+0xd8>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 8002436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800243a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800243e:	4298      	cmp	r0, r3
 8002440:	d066      	beq.n	8002510 <TIM_DeInit+0xec>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 8002442:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002446:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800244a:	4298      	cmp	r0, r3
 800244c:	d06a      	beq.n	8002524 <TIM_DeInit+0x100>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 800244e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002452:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002456:	4298      	cmp	r0, r3
 8002458:	d06e      	beq.n	8002538 <TIM_DeInit+0x114>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 800245a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800245e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002462:	4298      	cmp	r0, r3
 8002464:	d072      	beq.n	800254c <TIM_DeInit+0x128>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 8002466:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800246a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800246e:	4298      	cmp	r0, r3
 8002470:	d076      	beq.n	8002560 <TIM_DeInit+0x13c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 8002472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002476:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800247a:	4298      	cmp	r0, r3
 800247c:	d07a      	beq.n	8002574 <TIM_DeInit+0x150>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 800247e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002482:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002486:	4298      	cmp	r0, r3
 8002488:	d07e      	beq.n	8002588 <TIM_DeInit+0x164>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 800248a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800248e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002492:	4298      	cmp	r0, r3
 8002494:	f000 8084 	beq.w	80025a0 <TIM_DeInit+0x17c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 8002498:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800249c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80024a0:	4298      	cmp	r0, r3
 80024a2:	f000 8089 	beq.w	80025b8 <TIM_DeInit+0x194>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 80024a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80024aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80024ae:	4298      	cmp	r0, r3
 80024b0:	f000 808e 	beq.w	80025d0 <TIM_DeInit+0x1ac>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 80024b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80024bc:	4298      	cmp	r0, r3
 80024be:	f000 8091 	beq.w	80025e4 <TIM_DeInit+0x1c0>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 80024c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80024ca:	4298      	cmp	r0, r3
 80024cc:	d000      	beq.n	80024d0 <TIM_DeInit+0xac>
 80024ce:	bd08      	pop	{r3, pc}
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 80024d0:	2101      	movs	r1, #1
 80024d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024d6:	f7ff fd23 	bl	8001f20 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 80024da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024de:	2100      	movs	r1, #0
    }   
  }
}
 80024e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 80024e4:	f7ff bd1c 	b.w	8001f20 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80024e8:	2001      	movs	r0, #1
 80024ea:	4601      	mov	r1, r0
 80024ec:	f7ff fd26 	bl	8001f3c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80024f0:	2001      	movs	r0, #1
 80024f2:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80024f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80024f8:	f7ff bd20 	b.w	8001f3c <RCC_APB2PeriphResetCmd>
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 80024fc:	2001      	movs	r0, #1
 80024fe:	4601      	mov	r1, r0
 8002500:	f7ff fd0e 	bl	8001f20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8002504:	2001      	movs	r0, #1
 8002506:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800250c:	f7ff bd08 	b.w	8001f20 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8002510:	2002      	movs	r0, #2
 8002512:	2101      	movs	r1, #1
 8002514:	f7ff fd04 	bl	8001f20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8002518:	2002      	movs	r0, #2
 800251a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800251c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8002520:	f7ff bcfe 	b.w	8001f20 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8002524:	2004      	movs	r0, #4
 8002526:	2101      	movs	r1, #1
 8002528:	f7ff fcfa 	bl	8001f20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800252c:	2004      	movs	r0, #4
 800252e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002530:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8002534:	f7ff bcf4 	b.w	8001f20 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8002538:	2008      	movs	r0, #8
 800253a:	2101      	movs	r1, #1
 800253c:	f7ff fcf0 	bl	8001f20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8002540:	2008      	movs	r0, #8
 8002542:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002544:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8002548:	f7ff bcea 	b.w	8001f20 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800254c:	2010      	movs	r0, #16
 800254e:	2101      	movs	r1, #1
 8002550:	f7ff fce6 	bl	8001f20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8002554:	2010      	movs	r0, #16
 8002556:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002558:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800255c:	f7ff bce0 	b.w	8001f20 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8002560:	2020      	movs	r0, #32
 8002562:	2101      	movs	r1, #1
 8002564:	f7ff fcdc 	bl	8001f20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8002568:	2020      	movs	r0, #32
 800256a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800256c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8002570:	f7ff bcd6 	b.w	8001f20 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8002574:	2002      	movs	r0, #2
 8002576:	2101      	movs	r1, #1
 8002578:	f7ff fce0 	bl	8001f3c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800257c:	2002      	movs	r0, #2
 800257e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002580:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8002584:	f7ff bcda 	b.w	8001f3c <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8002588:	2101      	movs	r1, #1
 800258a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800258e:	f7ff fcd5 	bl	8001f3c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8002592:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002596:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800259c:	f7ff bcce 	b.w	8001f3c <RCC_APB2PeriphResetCmd>
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 80025a0:	2101      	movs	r1, #1
 80025a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80025a6:	f7ff fcc9 	bl	8001f3c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80025aa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80025ae:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80025b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80025b4:	f7ff bcc2 	b.w	8001f3c <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 80025b8:	2101      	movs	r1, #1
 80025ba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80025be:	f7ff fcbd 	bl	8001f3c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80025c2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80025c6:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80025c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80025cc:	f7ff bcb6 	b.w	8001f3c <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 80025d0:	2040      	movs	r0, #64	; 0x40
 80025d2:	2101      	movs	r1, #1
 80025d4:	f7ff fca4 	bl	8001f20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 80025d8:	2040      	movs	r0, #64	; 0x40
 80025da:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80025dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 80025e0:	f7ff bc9e 	b.w	8001f20 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 80025e4:	2080      	movs	r0, #128	; 0x80
 80025e6:	2101      	movs	r1, #1
 80025e8:	f7ff fc9a 	bl	8001f20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80025ec:	2080      	movs	r0, #128	; 0x80
 80025ee:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80025f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80025f4:	f7ff bc94 	b.w	8001f20 <RCC_APB1PeriphResetCmd>

080025f8 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80025f8:	2300      	movs	r3, #0
 80025fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002602:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002604:	f2c4 0201 	movt	r2, #16385	; 0x4001
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002608:	8804      	ldrh	r4, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800260a:	4298      	cmp	r0, r3
 800260c:	bf18      	it	ne
 800260e:	4290      	cmpne	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002610:	b2a4      	uxth	r4, r4

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002612:	bf14      	ite	ne
 8002614:	2300      	movne	r3, #0
 8002616:	2301      	moveq	r3, #1
 8002618:	d008      	beq.n	800262c <TIM_TimeBaseInit+0x34>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800261a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800261e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002622:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002626:	bf18      	it	ne
 8002628:	4290      	cmpne	r0, r2
 800262a:	d123      	bne.n	8002674 <TIM_TimeBaseInit+0x7c>
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800262c:	f64f 758f 	movw	r5, #65423	; 0xff8f
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002630:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002632:	4025      	ands	r5, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002634:	ea45 0402 	orr.w	r4, r5, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002638:	f44f 56a0 	mov.w	r6, #5120	; 0x1400
 800263c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8002640:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8002644:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8002648:	42b0      	cmp	r0, r6
 800264a:	bf18      	it	ne
 800264c:	42a8      	cmpne	r0, r5
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800264e:	bf1f      	itttt	ne
 8002650:	890d      	ldrhne	r5, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002652:	f64f 42ff 	movwne	r2, #64767	; 0xfcff
 8002656:	4022      	andne	r2, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002658:	ea42 0405 	orrne.w	r4, r2, r5
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800265c:	684d      	ldr	r5, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800265e:	880a      	ldrh	r2, [r1, #0]
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8002660:	8004      	strh	r4, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8002662:	62c5      	str	r5, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002664:	8502      	strh	r2, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8002666:	b10b      	cbz	r3, 800266c <TIM_TimeBaseInit+0x74>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002668:	7a8b      	ldrb	r3, [r1, #10]
 800266a:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800266c:	2301      	movs	r3, #1
 800266e:	8283      	strh	r3, [r0, #20]
}
 8002670:	bc70      	pop	{r4, r5, r6}
 8002672:	4770      	bx	lr

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002674:	f44f 6540 	mov.w	r5, #3072	; 0xc00
 8002678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800267c:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8002680:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002684:	4290      	cmp	r0, r2
 8002686:	bf18      	it	ne
 8002688:	42a8      	cmpne	r0, r5
 800268a:	d1d5      	bne.n	8002638 <TIM_TimeBaseInit+0x40>
 800268c:	e7ce      	b.n	800262c <TIM_TimeBaseInit+0x34>
 800268e:	bf00      	nop

08002690 <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002690:	2300      	movs	r3, #0
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8002692:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002696:	6041      	str	r1, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002698:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800269a:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800269c:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800269e:	7283      	strb	r3, [r0, #10]
}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop

080026a4 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80026a4:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80026a6:	8282      	strh	r2, [r0, #20]
}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop

080026ac <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 80026ac:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b2:	041b      	lsls	r3, r3, #16
 80026b4:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80026b6:	430b      	orrs	r3, r1

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80026b8:	8003      	strh	r3, [r0, #0]
}
 80026ba:	4770      	bx	lr

080026bc <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80026bc:	6241      	str	r1, [r0, #36]	; 0x24
}
 80026be:	4770      	bx	lr

080026c0 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80026c0:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 80026c2:	4770      	bx	lr

080026c4 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 80026c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 80026c6:	4770      	bx	lr

080026c8 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 80026c8:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 80026ca:	b280      	uxth	r0, r0
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop

080026d0 <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 80026d0:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80026d2:	b929      	cbnz	r1, 80026e0 <TIM_UpdateDisableConfig+0x10>
    TIMx->CR1 |= TIM_CR1_UDIS;
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 80026d4:	f023 0302 	bic.w	r3, r3, #2
 80026d8:	041b      	lsls	r3, r3, #16
 80026da:	0c1b      	lsrs	r3, r3, #16
 80026dc:	8003      	strh	r3, [r0, #0]
 80026de:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f043 0302 	orr.w	r3, r3, #2
 80026e6:	8003      	strh	r3, [r0, #0]
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop

080026ec <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80026ec:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 80026ee:	b929      	cbnz	r1, 80026fc <TIM_UpdateRequestConfig+0x10>
    TIMx->CR1 |= TIM_CR1_URS;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 80026f0:	f023 0304 	bic.w	r3, r3, #4
 80026f4:	041b      	lsls	r3, r3, #16
 80026f6:	0c1b      	lsrs	r3, r3, #16
 80026f8:	8003      	strh	r3, [r0, #0]
 80026fa:	4770      	bx	lr
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	8003      	strh	r3, [r0, #0]
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop

08002708 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8002708:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800270a:	b929      	cbnz	r1, 8002718 <TIM_ARRPreloadConfig+0x10>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800270c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002710:	041b      	lsls	r3, r3, #16
 8002712:	0c1b      	lsrs	r3, r3, #16
 8002714:	8003      	strh	r3, [r0, #0]
 8002716:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8002718:	b29b      	uxth	r3, r3
 800271a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800271e:	8003      	strh	r3, [r0, #0]
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop

08002724 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8002724:	8803      	ldrh	r3, [r0, #0]
 8002726:	f023 0308 	bic.w	r3, r3, #8
 800272a:	041b      	lsls	r3, r3, #16
 800272c:	0c1b      	lsrs	r3, r3, #16
 800272e:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8002730:	8803      	ldrh	r3, [r0, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	430b      	orrs	r3, r1
 8002736:	8003      	strh	r3, [r0, #0]
}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop

0800273c <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 800273c:	8803      	ldrh	r3, [r0, #0]
 800273e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002742:	041b      	lsls	r3, r3, #16
 8002744:	0c1b      	lsrs	r3, r3, #16
 8002746:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8002748:	8803      	ldrh	r3, [r0, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	430b      	orrs	r3, r1
 800274e:	8003      	strh	r3, [r0, #0]
}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop

08002754 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002754:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002756:	b929      	cbnz	r1, 8002764 <TIM_Cmd+0x10>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	041b      	lsls	r3, r3, #16
 800275e:	0c1b      	lsrs	r3, r3, #16
 8002760:	8003      	strh	r3, [r0, #0]
 8002762:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002764:	b29b      	uxth	r3, r3
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	8003      	strh	r3, [r0, #0]
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop

08002770 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002770:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002774:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002776:	898d      	ldrh	r5, [r1, #12]
 8002778:	884f      	ldrh	r7, [r1, #2]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800277a:	f8b1 c000 	ldrh.w	ip, [r1]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800277e:	f024 0401 	bic.w	r4, r4, #1
 8002782:	0424      	lsls	r4, r4, #16
 8002784:	0c24      	lsrs	r4, r4, #16
 8002786:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002788:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800278a:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800278c:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800278e:	432f      	orrs	r7, r5
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002790:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002794:	2500      	movs	r5, #0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8002796:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800279a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800279e:	0412      	lsls	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80027a0:	041b      	lsls	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80027a2:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80027a6:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80027aa:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80027ac:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80027ae:	b2bf      	uxth	r7, r7
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80027b0:	42a8      	cmp	r0, r5
 80027b2:	bf18      	it	ne
 80027b4:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b6:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80027b8:	ea42 020c 	orr.w	r2, r2, ip
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80027bc:	ea47 0303 	orr.w	r3, r7, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80027c0:	d116      	bne.n	80027f0 <TIM_OC1Init+0x80>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80027c2:	f64f 75f7 	movw	r5, #65527	; 0xfff7
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80027c6:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80027ca:	f8b1 8012 	ldrh.w	r8, [r1, #18]
 80027ce:	8a0f      	ldrh	r7, [r1, #16]
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80027d0:	888e      	ldrh	r6, [r1, #4]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80027d2:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80027d4:	ea45 0c0c 	orr.w	ip, r5, ip
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80027d8:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80027dc:	f64f 45ff 	movw	r5, #64767	; 0xfcff
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80027e0:	ea48 0707 	orr.w	r7, r8, r7
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80027e4:	4025      	ands	r5, r4
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80027e6:	ea0c 0303 	and.w	r3, ip, r3
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80027ea:	b2bc      	uxth	r4, r7
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80027ec:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80027ee:	432c      	orrs	r4, r5
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80027f0:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027f2:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027f4:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80027f6:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f8:	8403      	strh	r3, [r0, #32]
}
 80027fa:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80027fe:	4770      	bx	lr

08002800 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002800:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002804:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8002806:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002808:	f8b1 c000 	ldrh.w	ip, [r1]
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800280c:	884f      	ldrh	r7, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800280e:	f024 0410 	bic.w	r4, r4, #16
 8002812:	0424      	lsls	r4, r4, #16
 8002814:	0c24      	lsrs	r4, r4, #16
 8002816:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002818:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800281a:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800281c:	8b03      	ldrh	r3, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800281e:	f022 0220 	bic.w	r2, r2, #32
 8002822:	0412      	lsls	r2, r2, #16
 8002824:	0c12      	lsrs	r2, r2, #16
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8002826:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 800282a:	041b      	lsls	r3, r3, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800282c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002830:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8002834:	2500      	movs	r5, #0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8002836:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002838:	f2c4 0601 	movt	r6, #16385	; 0x4001
 800283c:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002840:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002844:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002848:	42a8      	cmp	r0, r5
 800284a:	bf18      	it	ne
 800284c:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800284e:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002850:	b29b      	uxth	r3, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002852:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002854:	d119      	bne.n	800288a <TIM_OC2Init+0x8a>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002856:	f64f 767f 	movw	r6, #65407	; 0xff7f
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800285a:	f8b1 900e 	ldrh.w	r9, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800285e:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002862:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002866:	8a4f      	ldrh	r7, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002868:	4016      	ands	r6, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800286a:	f24f 35ff 	movw	r5, #62463	; 0xf3ff
 800286e:	4025      	ands	r5, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002870:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8002874:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 8002878:	4032      	ands	r2, r6
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800287a:	ea45 0488 	orr.w	r4, r5, r8, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800287e:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002882:	ea44 0487 	orr.w	r4, r4, r7, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002886:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002888:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800288a:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800288c:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800288e:	8303      	strh	r3, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002890:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002892:	8402      	strh	r2, [r0, #32]
}
 8002894:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop

0800289c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800289c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80028a0:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80028a2:	898d      	ldrh	r5, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80028a4:	f8b1 c002 	ldrh.w	ip, [r1, #2]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80028a8:	880f      	ldrh	r7, [r1, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80028aa:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80028ae:	0424      	lsls	r4, r4, #16
 80028b0:	0c24      	lsrs	r4, r4, #16
 80028b2:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b4:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b6:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028b8:	8b83      	ldrh	r3, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80028ba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028be:	0412      	lsls	r2, r2, #16
 80028c0:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80028c2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80028c6:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80028ca:	2500      	movs	r5, #0
 80028cc:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80028d0:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80028d2:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80028d6:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80028da:	0c1b      	lsrs	r3, r3, #16
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80028dc:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80028e0:	42a8      	cmp	r0, r5
 80028e2:	bf18      	it	ne
 80028e4:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028e6:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80028e8:	ea43 0307 	orr.w	r3, r3, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80028ec:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80028ee:	d119      	bne.n	8002924 <TIM_OC3Init+0x88>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80028f0:	f24f 76ff 	movw	r6, #63487	; 0xf7ff
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80028f4:	f8b1 900e 	ldrh.w	r9, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80028f8:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80028fc:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002900:	8a4f      	ldrh	r7, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8002902:	4016      	ands	r6, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8002904:	f64c 75ff 	movw	r5, #53247	; 0xcfff
 8002908:	4025      	ands	r5, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800290a:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800290e:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8002912:	4032      	ands	r2, r6
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002914:	ea45 1408 	orr.w	r4, r5, r8, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002918:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800291c:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002920:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002922:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002924:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002926:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002928:	8383      	strh	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800292a:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800292c:	8402      	strh	r2, [r0, #32]
}
 800292e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8002932:	4770      	bx	lr

08002934 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002934:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002936:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002938:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800293a:	f8b1 c000 	ldrh.w	ip, [r1]
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800293e:	884f      	ldrh	r7, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002940:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002944:	0424      	lsls	r4, r4, #16
 8002946:	0c24      	lsrs	r4, r4, #16
 8002948:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294a:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800294c:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800294e:	8b83      	ldrh	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8002950:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002954:	0412      	lsls	r2, r2, #16
 8002956:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002958:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800295c:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002960:	2500      	movs	r5, #0
 8002962:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8002966:	f2c4 0501 	movt	r5, #16385	; 0x4001
 800296a:	f2c4 0601 	movt	r6, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002972:	42a8      	cmp	r0, r5
 8002974:	bf18      	it	ne
 8002976:	42b0      	cmpne	r0, r6
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002978:	bf08      	it	eq
 800297a:	8a0e      	ldrheq	r6, [r1, #16]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800297c:	6889      	ldr	r1, [r1, #8]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800297e:	b2a4      	uxth	r4, r4
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8002980:	bf02      	ittt	eq
 8002982:	f64b 75ff 	movweq	r5, #49151	; 0xbfff
 8002986:	4025      	andeq	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002988:	ea45 1486 	orreq.w	r4, r5, r6, lsl #6
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800298c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002990:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002994:	b29b      	uxth	r3, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002996:	b292      	uxth	r2, r2
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002998:	bf08      	it	eq
 800299a:	b2a4      	uxtheq	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800299c:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800299e:	8383      	strh	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80029a0:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a2:	8402      	strh	r2, [r0, #32]
}
 80029a4:	bcf0      	pop	{r4, r5, r6, r7}
 80029a6:	4770      	bx	lr

080029a8 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80029a8:	2300      	movs	r3, #0
 80029aa:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80029ac:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80029ae:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 80029b0:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80029b2:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80029b4:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80029b6:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80029b8:	8243      	strh	r3, [r0, #18]
}
 80029ba:	4770      	bx	lr

080029bc <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 80029bc:	b410      	push	{r4}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80029be:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 80029c0:	2301      	movs	r3, #1
 80029c2:	408b      	lsls	r3, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80029c4:	b2a4      	uxth	r4, r4
 80029c6:	ea24 0303 	bic.w	r3, r4, r3
 80029ca:	8403      	strh	r3, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 80029cc:	3018      	adds	r0, #24
  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 80029ce:	2900      	cmp	r1, #0
 80029d0:	bf18      	it	ne
 80029d2:	2908      	cmpne	r1, #8
 80029d4:	d00e      	beq.n	80029f4 <TIM_SelectOCxM+0x38>
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 80029d6:	3904      	subs	r1, #4
 80029d8:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 80029dc:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80029e0:	580c      	ldr	r4, [r1, r0]
 80029e2:	4023      	ands	r3, r4
 80029e4:	500b      	str	r3, [r1, r0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80029e6:	0212      	lsls	r2, r2, #8
 80029e8:	580b      	ldr	r3, [r1, r0]
 80029ea:	b292      	uxth	r2, r2
 80029ec:	431a      	orrs	r2, r3
 80029ee:	500a      	str	r2, [r1, r0]
  }
}
 80029f0:	bc10      	pop	{r4}
 80029f2:	4770      	bx	lr
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);
 80029f4:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 80029f6:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80029fa:	580c      	ldr	r4, [r1, r0]
 80029fc:	4023      	ands	r3, r4
 80029fe:	500b      	str	r3, [r1, r0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8002a00:	580b      	ldr	r3, [r1, r0]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	500a      	str	r2, [r1, r0]
 8002a06:	e7f3      	b.n	80029f0 <TIM_SelectOCxM+0x34>

08002a08 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8002a08:	6341      	str	r1, [r0, #52]	; 0x34
}
 8002a0a:	4770      	bx	lr

08002a0c <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8002a0c:	6381      	str	r1, [r0, #56]	; 0x38
}
 8002a0e:	4770      	bx	lr

08002a10 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8002a10:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8002a12:	4770      	bx	lr

08002a14 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8002a14:	6401      	str	r1, [r0, #64]	; 0x40
}
 8002a16:	4770      	bx	lr

08002a18 <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002a18:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8002a22:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002a24:	8303      	strh	r3, [r0, #24]
}
 8002a26:	4770      	bx	lr

08002a28 <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002a28:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8002a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a2e:	041b      	lsls	r3, r3, #16
 8002a30:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8002a32:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a36:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002a38:	8303      	strh	r3, [r0, #24]
}
 8002a3a:	4770      	bx	lr

08002a3c <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8002a3c:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8002a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a42:	041b      	lsls	r3, r3, #16
 8002a44:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8002a46:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002a48:	8383      	strh	r3, [r0, #28]
}
 8002a4a:	4770      	bx	lr

08002a4c <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8002a4c:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8002a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a52:	041b      	lsls	r3, r3, #16
 8002a54:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8002a56:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a5a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002a5c:	8383      	strh	r3, [r0, #28]
}
 8002a5e:	4770      	bx	lr

08002a60 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002a60:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8002a62:	f023 0308 	bic.w	r3, r3, #8
 8002a66:	041b      	lsls	r3, r3, #16
 8002a68:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8002a6a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002a6c:	8303      	strh	r3, [r0, #24]
}
 8002a6e:	4770      	bx	lr

08002a70 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002a70:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8002a72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a76:	041b      	lsls	r3, r3, #16
 8002a78:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8002a7a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a7e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002a80:	8303      	strh	r3, [r0, #24]
}
 8002a82:	4770      	bx	lr

08002a84 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002a84:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8002a86:	f023 0308 	bic.w	r3, r3, #8
 8002a8a:	041b      	lsls	r3, r3, #16
 8002a8c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8002a8e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002a90:	8383      	strh	r3, [r0, #28]
}
 8002a92:	4770      	bx	lr

08002a94 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002a94:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8002a96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a9a:	041b      	lsls	r3, r3, #16
 8002a9c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8002a9e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002aa2:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002aa4:	8383      	strh	r3, [r0, #28]
}
 8002aa6:	4770      	bx	lr

08002aa8 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002aa8:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8002aaa:	f023 0304 	bic.w	r3, r3, #4
 8002aae:	041b      	lsls	r3, r3, #16
 8002ab0:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8002ab2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002ab4:	8303      	strh	r3, [r0, #24]
}
 8002ab6:	4770      	bx	lr

08002ab8 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002ab8:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8002aba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002abe:	041b      	lsls	r3, r3, #16
 8002ac0:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8002ac2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ac6:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002ac8:	8303      	strh	r3, [r0, #24]
}
 8002aca:	4770      	bx	lr

08002acc <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002acc:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8002ace:	f023 0304 	bic.w	r3, r3, #4
 8002ad2:	041b      	lsls	r3, r3, #16
 8002ad4:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8002ad6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002ad8:	8383      	strh	r3, [r0, #28]
}
 8002ada:	4770      	bx	lr

08002adc <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002adc:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8002ade:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ae2:	041b      	lsls	r3, r3, #16
 8002ae4:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8002ae6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002aea:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002aec:	8383      	strh	r3, [r0, #28]
}
 8002aee:	4770      	bx	lr

08002af0 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002af0:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8002af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af6:	041b      	lsls	r3, r3, #16
 8002af8:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8002afa:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002afc:	8303      	strh	r3, [r0, #24]
}
 8002afe:	4770      	bx	lr

08002b00 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002b00:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8002b02:	045b      	lsls	r3, r3, #17
 8002b04:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8002b06:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b0a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002b0c:	8303      	strh	r3, [r0, #24]
}
 8002b0e:	4770      	bx	lr

08002b10 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002b10:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8002b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b16:	041b      	lsls	r3, r3, #16
 8002b18:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8002b1a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002b1c:	8383      	strh	r3, [r0, #28]
}
 8002b1e:	4770      	bx	lr

08002b20 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002b20:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8002b22:	045b      	lsls	r3, r3, #17
 8002b24:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8002b26:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b2a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002b2c:	8383      	strh	r3, [r0, #28]
}
 8002b2e:	4770      	bx	lr

08002b30 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002b30:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8002b32:	f023 0302 	bic.w	r3, r3, #2
 8002b36:	041b      	lsls	r3, r3, #16
 8002b38:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8002b3a:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002b3c:	8403      	strh	r3, [r0, #32]
}
 8002b3e:	4770      	bx	lr

08002b40 <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8002b40:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002b42:	f023 0308 	bic.w	r3, r3, #8
 8002b46:	041b      	lsls	r3, r3, #16
 8002b48:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8002b4a:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002b4c:	8403      	strh	r3, [r0, #32]
}
 8002b4e:	4770      	bx	lr

08002b50 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002b50:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8002b52:	f023 0320 	bic.w	r3, r3, #32
 8002b56:	041b      	lsls	r3, r3, #16
 8002b58:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8002b5a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002b5e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002b60:	8403      	strh	r3, [r0, #32]
}
 8002b62:	4770      	bx	lr

08002b64 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8002b64:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b6a:	041b      	lsls	r3, r3, #16
 8002b6c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8002b6e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002b72:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002b74:	8403      	strh	r3, [r0, #32]
}
 8002b76:	4770      	bx	lr

08002b78 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002b78:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002b7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b7e:	041b      	lsls	r3, r3, #16
 8002b80:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8002b82:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b86:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002b88:	8403      	strh	r3, [r0, #32]
}
 8002b8a:	4770      	bx	lr

08002b8c <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8002b8c:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8002b8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b92:	041b      	lsls	r3, r3, #16
 8002b94:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8002b96:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b9a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002b9c:	8403      	strh	r3, [r0, #32]
}
 8002b9e:	4770      	bx	lr

08002ba0 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002ba0:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8002ba2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ba6:	041b      	lsls	r3, r3, #16
 8002ba8:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8002baa:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002bae:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002bb0:	8403      	strh	r3, [r0, #32]
}
 8002bb2:	4770      	bx	lr

08002bb4 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8002bb4:	b410      	push	{r4}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002bb6:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002bbc:	b2a4      	uxth	r4, r4
 8002bbe:	ea24 0303 	bic.w	r3, r4, r3
 8002bc2:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002bc4:	8c03      	ldrh	r3, [r0, #32]
 8002bc6:	fa12 f101 	lsls.w	r1, r2, r1
 8002bca:	430b      	orrs	r3, r1
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	8403      	strh	r3, [r0, #32]
}
 8002bd0:	bc10      	pop	{r4}
 8002bd2:	4770      	bx	lr

08002bd4 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8002bd4:	b410      	push	{r4}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002bd6:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8002bd8:	2304      	movs	r3, #4
 8002bda:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002bdc:	b2a4      	uxth	r4, r4
 8002bde:	ea24 0303 	bic.w	r3, r4, r3
 8002be2:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8002be4:	8c03      	ldrh	r3, [r0, #32]
 8002be6:	fa12 f101 	lsls.w	r1, r2, r1
 8002bea:	430b      	orrs	r3, r1
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	8403      	strh	r3, [r0, #32]
}
 8002bf0:	bc10      	pop	{r4}
 8002bf2:	4770      	bx	lr

08002bf4 <TIM_ICInit>:
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002bf4:	880b      	ldrh	r3, [r1, #0]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002bf6:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d032      	beq.n	8002c62 <TIM_ICInit+0x6e>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d058      	beq.n	8002cb2 <TIM_ICInit+0xbe>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002c00:	2b08      	cmp	r3, #8
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002c02:	884e      	ldrh	r6, [r1, #2]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002c04:	8c03      	ldrh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002c06:	f000 8082 	beq.w	8002d0e <TIM_ICInit+0x11a>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002c0a:	888f      	ldrh	r7, [r1, #4]
 8002c0c:	890d      	ldrh	r5, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002c0e:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002c10:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c14:	0409      	lsls	r1, r1, #16
 8002c16:	0c09      	lsrs	r1, r1, #16
 8002c18:	8401      	strh	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c1a:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
 8002c1c:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002c1e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002c22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002c26:	0512      	lsls	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002c28:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002c2a:	0d12      	lsrs	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002c2c:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8002c2e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8002c32:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002c36:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002c40:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c42:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8002c44:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8002c46:	8b83      	ldrh	r3, [r0, #28]
 8002c48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c4c:	041b      	lsls	r3, r3, #16
 8002c4e:	0c1b      	lsrs	r3, r3, #16
 8002c50:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002c52:	8b83      	ldrh	r3, [r0, #28]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	8383      	strh	r3, [r0, #28]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002c5e:	bcf0      	pop	{r4, r5, r6, r7}
 8002c60:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002c62:	8c03      	ldrh	r3, [r0, #32]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002c64:	884e      	ldrh	r6, [r1, #2]
 8002c66:	888d      	ldrh	r5, [r1, #4]
 8002c68:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002c6a:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002c6c:	f023 0101 	bic.w	r1, r3, #1
 8002c70:	0409      	lsls	r1, r1, #16
 8002c72:	0c09      	lsrs	r1, r1, #16
 8002c74:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c76:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002c78:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002c7a:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 8002c7e:	0412      	lsls	r2, r2, #16
 8002c80:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c82:	f023 030a 	bic.w	r3, r3, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002c86:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c8a:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002c8c:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c8e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002c90:	f046 0101 	orr.w	r1, r6, #1
 8002c94:	430b      	orrs	r3, r1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002c96:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c98:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c9a:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002c9c:	8b03      	ldrh	r3, [r0, #24]
 8002c9e:	f023 030c 	bic.w	r3, r3, #12
 8002ca2:	041b      	lsls	r3, r3, #16
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002ca8:	8b03      	ldrh	r3, [r0, #24]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	4323      	orrs	r3, r4
 8002cae:	8303      	strh	r3, [r0, #24]
 8002cb0:	e7d5      	b.n	8002c5e <TIM_ICInit+0x6a>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002cb2:	8c03      	ldrh	r3, [r0, #32]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002cb4:	884e      	ldrh	r6, [r1, #2]
 8002cb6:	888d      	ldrh	r5, [r1, #4]
 8002cb8:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002cba:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002cbc:	f023 0110 	bic.w	r1, r3, #16
 8002cc0:	0409      	lsls	r1, r1, #16
 8002cc2:	0c09      	lsrs	r1, r1, #16
 8002cc4:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc6:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002cc8:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002cca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002cce:	0512      	lsls	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002cd4:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cd6:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002cd8:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cdc:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002cde:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002ce0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002ce4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	f043 0310 	orr.w	r3, r3, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002cee:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cf0:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002cf2:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002cf4:	8b03      	ldrh	r3, [r0, #24]
 8002cf6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002cfa:	041b      	lsls	r3, r3, #16
 8002cfc:	0c1b      	lsrs	r3, r3, #16
 8002cfe:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002d00:	8b03      	ldrh	r3, [r0, #24]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	8303      	strh	r3, [r0, #24]
 8002d0c:	e7a7      	b.n	8002c5e <TIM_ICInit+0x6a>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002d0e:	888d      	ldrh	r5, [r1, #4]
 8002d10:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002d12:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002d14:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8002d18:	0409      	lsls	r1, r1, #16
 8002d1a:	0c09      	lsrs	r1, r1, #16
 8002d1c:	8401      	strh	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d1e:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
 8002d20:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002d22:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002d26:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002d2a:	0412      	lsls	r2, r2, #16
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002d2c:	041b      	lsls	r3, r3, #16
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002d2e:	0c12      	lsrs	r2, r2, #16
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002d30:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002d32:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002d36:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002d3a:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002d42:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d44:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8002d46:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8002d48:	8b83      	ldrh	r3, [r0, #28]
 8002d4a:	f023 030c 	bic.w	r3, r3, #12
 8002d4e:	041b      	lsls	r3, r3, #16
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002d54:	8b83      	ldrh	r3, [r0, #28]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	4323      	orrs	r3, r4
 8002d5a:	8383      	strh	r3, [r0, #28]
 8002d5c:	e77f      	b.n	8002c5e <TIM_ICInit+0x6a>
 8002d5e:	bf00      	nop

08002d60 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002d60:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002d62:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002d64:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002d66:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002d68:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8002d6a:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8002d6c:	8103      	strh	r3, [r0, #8]
}
 8002d6e:	4770      	bx	lr

08002d70 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002d70:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002d74:	888a      	ldrh	r2, [r1, #4]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8002d76:	f8b1 8002 	ldrh.w	r8, [r1, #2]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002d7a:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8002d7c:	f1b8 0f00 	cmp.w	r8, #0
 8002d80:	bf0c      	ite	eq
 8002d82:	2502      	moveq	r5, #2
 8002d84:	2500      	movne	r5, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8002d86:	2a01      	cmp	r2, #1
 8002d88:	bf14      	ite	ne
 8002d8a:	2601      	movne	r6, #1
 8002d8c:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d051      	beq.n	8002e36 <TIM_PWMIConfig+0xc6>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002d92:	8c03      	ldrh	r3, [r0, #32]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002d94:	f8b1 c008 	ldrh.w	ip, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002d98:	88cf      	ldrh	r7, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002d9a:	f023 0310 	bic.w	r3, r3, #16
 8002d9e:	041b      	lsls	r3, r3, #16
 8002da0:	0c1b      	lsrs	r3, r3, #16
 8002da2:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002da4:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002da6:	8c01      	ldrh	r1, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002da8:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8002dac:	0524      	lsls	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dae:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002db2:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002db4:	0409      	lsls	r1, r1, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002db6:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dba:	0c09      	lsrs	r1, r1, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002dbc:	b2a4      	uxth	r4, r4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002dbe:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002dc2:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002dc6:	b289      	uxth	r1, r1
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002dc8:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002dca:	f041 0110 	orr.w	r1, r1, #16

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dce:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002dd0:	8401      	strh	r1, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002dd2:	8b01      	ldrh	r1, [r0, #24]
 8002dd4:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8002dd8:	0409      	lsls	r1, r1, #16
 8002dda:	0c09      	lsrs	r1, r1, #16
 8002ddc:	8301      	strh	r1, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002dde:	8b03      	ldrh	r3, [r0, #24]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002dea:	8c01      	ldrh	r1, [r0, #32]
 8002dec:	f021 0101 	bic.w	r1, r1, #1
 8002df0:	0409      	lsls	r1, r1, #16
 8002df2:	0c09      	lsrs	r1, r1, #16
 8002df4:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df6:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002df8:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002dfa:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 8002dfe:	0412      	lsls	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e00:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002e04:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e06:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002e08:	ea42 120c 	orr.w	r2, r2, ip, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e0c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002e12:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002e14:	431d      	orrs	r5, r3
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002e16:	4316      	orrs	r6, r2
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e18:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 8002e1a:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002e1c:	8b03      	ldrh	r3, [r0, #24]
 8002e1e:	f023 030c 	bic.w	r3, r3, #12
 8002e22:	041b      	lsls	r3, r3, #16
 8002e24:	0c1b      	lsrs	r3, r3, #16
 8002e26:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002e28:	8b03      	ldrh	r3, [r0, #24]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	431f      	orrs	r7, r3
 8002e2e:	8307      	strh	r7, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002e30:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8002e34:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002e36:	8c03      	ldrh	r3, [r0, #32]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002e38:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002e3a:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	041b      	lsls	r3, r3, #16
 8002e42:	0c1b      	lsrs	r3, r3, #16
 8002e44:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e46:	8b01      	ldrh	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8002e48:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002e4a:	f021 01f3 	bic.w	r1, r1, #243	; 0xf3
 8002e4e:	0409      	lsls	r1, r1, #16
 8002e50:	0c09      	lsrs	r1, r1, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e52:	f023 030a 	bic.w	r3, r3, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002e56:	ea41 1107 	orr.w	r1, r1, r7, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e5a:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002e5c:	b289      	uxth	r1, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e5e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002e60:	f048 0801 	orr.w	r8, r8, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002e64:	430a      	orrs	r2, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002e66:	ea43 0308 	orr.w	r3, r3, r8

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e6a:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002e6c:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002e6e:	8b03      	ldrh	r3, [r0, #24]
 8002e70:	f023 030c 	bic.w	r3, r3, #12
 8002e74:	041b      	lsls	r3, r3, #16
 8002e76:	0c1b      	lsrs	r3, r3, #16
 8002e78:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002e7a:	8b03      	ldrh	r3, [r0, #24]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	4323      	orrs	r3, r4
 8002e80:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002e82:	8c03      	ldrh	r3, [r0, #32]
 8002e84:	f023 0310 	bic.w	r3, r3, #16
 8002e88:	041b      	lsls	r3, r3, #16
 8002e8a:	0c1b      	lsrs	r3, r3, #16
 8002e8c:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e8e:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002e90:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002e92:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e96:	0512      	lsls	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002e9c:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e9e:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002ea0:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ea4:	0c1b      	lsrs	r3, r3, #16
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002ea6:	f043 0310 	orr.w	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002eaa:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002eac:	ea43 1505 	orr.w	r5, r3, r5, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002eb0:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eb4:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 8002eb6:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002eb8:	8b03      	ldrh	r3, [r0, #24]
 8002eba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ebe:	041b      	lsls	r3, r3, #16
 8002ec0:	0c1b      	lsrs	r3, r3, #16
 8002ec2:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002ec4:	8b03      	ldrh	r3, [r0, #24]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
 8002ecc:	b2a4      	uxth	r4, r4
 8002ece:	8304      	strh	r4, [r0, #24]
 8002ed0:	e7ae      	b.n	8002e30 <TIM_PWMIConfig+0xc0>
 8002ed2:	bf00      	nop

08002ed4 <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8002ed4:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8002ed6:	4770      	bx	lr

08002ed8 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8002ed8:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8002eda:	4770      	bx	lr

08002edc <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002edc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8002ede:	4770      	bx	lr

08002ee0 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8002ee0:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8002ee2:	4770      	bx	lr

08002ee4 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002ee4:	8b03      	ldrh	r3, [r0, #24]
 8002ee6:	f023 030c 	bic.w	r3, r3, #12
 8002eea:	041b      	lsls	r3, r3, #16
 8002eec:	0c1b      	lsrs	r3, r3, #16
 8002eee:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002ef0:	8b03      	ldrh	r3, [r0, #24]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	8303      	strh	r3, [r0, #24]
}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop

08002efc <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002efc:	8b03      	ldrh	r3, [r0, #24]
 8002efe:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f02:	041b      	lsls	r3, r3, #16
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002f08:	8b03      	ldrh	r3, [r0, #24]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	8303      	strh	r3, [r0, #24]
}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop

08002f18 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8002f18:	8b83      	ldrh	r3, [r0, #28]
 8002f1a:	f023 030c 	bic.w	r3, r3, #12
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	0c1b      	lsrs	r3, r3, #16
 8002f22:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002f24:	8b83      	ldrh	r3, [r0, #28]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	8383      	strh	r3, [r0, #28]
}
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop

08002f30 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8002f30:	8b83      	ldrh	r3, [r0, #28]
 8002f32:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f36:	041b      	lsls	r3, r3, #16
 8002f38:	0c1b      	lsrs	r3, r3, #16
 8002f3a:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002f3c:	8b83      	ldrh	r3, [r0, #28]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	8383      	strh	r3, [r0, #28]
}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop

08002f4c <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002f4c:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 8002f50:	880b      	ldrh	r3, [r1, #0]
 8002f52:	898a      	ldrh	r2, [r1, #12]
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8002f54:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002f56:	888f      	ldrh	r7, [r1, #4]
 8002f58:	88ce      	ldrh	r6, [r1, #6]
 8002f5a:	890d      	ldrh	r5, [r1, #8]
 8002f5c:	894c      	ldrh	r4, [r1, #10]
 8002f5e:	ea4c 0303 	orr.w	r3, ip, r3
 8002f62:	433b      	orrs	r3, r7
 8002f64:	4333      	orrs	r3, r6
 8002f66:	432b      	orrs	r3, r5
 8002f68:	4323      	orrs	r3, r4
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8002f72:	bcf0      	pop	{r4, r5, r6, r7}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop

08002f78 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8002f7c:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8002f7e:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8002f80:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8002f82:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8002f84:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8002f86:	8183      	strh	r3, [r0, #12]
}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop

08002f8c <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002f8c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002f90:	b921      	cbnz	r1, 8002f9c <TIM_CtrlPWMOutputs+0x10>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8002f92:	045b      	lsls	r3, r3, #17
 8002f94:	0c5b      	lsrs	r3, r3, #17
 8002f96:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8002f9a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8002faa:	4770      	bx	lr

08002fac <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8002fac:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002fae:	b929      	cbnz	r1, 8002fbc <TIM_SelectCOM+0x10>
    TIMx->CR2 |= TIM_CR2_CCUS;
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8002fb0:	f023 0304 	bic.w	r3, r3, #4
 8002fb4:	041b      	lsls	r3, r3, #16
 8002fb6:	0c1b      	lsrs	r3, r3, #16
 8002fb8:	8083      	strh	r3, [r0, #4]
 8002fba:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	f043 0304 	orr.w	r3, r3, #4
 8002fc2:	8083      	strh	r3, [r0, #4]
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop

08002fc8 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002fc8:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002fca:	b929      	cbnz	r1, 8002fd8 <TIM_CCPreloadControl+0x10>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	0c1b      	lsrs	r3, r3, #16
 8002fd4:	8083      	strh	r3, [r0, #4]
 8002fd6:	4770      	bx	lr
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	8083      	strh	r3, [r0, #4]
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop

08002fe4 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002fe4:	8983      	ldrh	r3, [r0, #12]
 8002fe6:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002fe8:	b91a      	cbnz	r2, 8002ff2 <TIM_ITConfig+0xe>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002fea:	ea23 0101 	bic.w	r1, r3, r1
 8002fee:	8181      	strh	r1, [r0, #12]
 8002ff0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002ff2:	4319      	orrs	r1, r3
 8002ff4:	8181      	strh	r1, [r0, #12]
 8002ff6:	4770      	bx	lr

08002ff8 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8002ff8:	8281      	strh	r1, [r0, #20]
}
 8002ffa:	4770      	bx	lr

08002ffc <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8002ffc:	8a03      	ldrh	r3, [r0, #16]
  {
    bitstatus = SET;
 8002ffe:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8003000:	bf0c      	ite	eq
 8003002:	2000      	moveq	r0, #0
 8003004:	2001      	movne	r0, #1
 8003006:	4770      	bx	lr

08003008 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8003008:	43c9      	mvns	r1, r1
 800300a:	b289      	uxth	r1, r1
 800300c:	8201      	strh	r1, [r0, #16]
}
 800300e:	4770      	bx	lr

08003010 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8003010:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8003012:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8003014:	4211      	tst	r1, r2
 8003016:	bf0c      	ite	eq
 8003018:	2000      	moveq	r0, #0
 800301a:	2001      	movne	r0, #1
 800301c:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800301e:	bf0c      	ite	eq
 8003020:	2000      	moveq	r0, #0
 8003022:	f000 0001 	andne.w	r0, r0, #1
 8003026:	4770      	bx	lr

08003028 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8003028:	43c9      	mvns	r1, r1
 800302a:	b289      	uxth	r1, r1
 800302c:	8201      	strh	r1, [r0, #16]
}
 800302e:	4770      	bx	lr

08003030 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8003030:	430a      	orrs	r2, r1
 8003032:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
}
 8003036:	4770      	bx	lr

08003038 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8003038:	8983      	ldrh	r3, [r0, #12]
 800303a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800303c:	b91a      	cbnz	r2, 8003046 <TIM_DMACmd+0xe>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 800303e:	ea23 0101 	bic.w	r1, r3, r1
 8003042:	8181      	strh	r1, [r0, #12]
 8003044:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8003046:	4319      	orrs	r1, r3
 8003048:	8181      	strh	r1, [r0, #12]
 800304a:	4770      	bx	lr

0800304c <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800304c:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800304e:	b929      	cbnz	r1, 800305c <TIM_SelectCCDMA+0x10>
    TIMx->CR2 |= TIM_CR2_CCDS;
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8003050:	f023 0308 	bic.w	r3, r3, #8
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	0c1b      	lsrs	r3, r3, #16
 8003058:	8083      	strh	r3, [r0, #4]
 800305a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800305c:	b29b      	uxth	r3, r3
 800305e:	f043 0308 	orr.w	r3, r3, #8
 8003062:	8083      	strh	r3, [r0, #4]
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop

08003068 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8003068:	8903      	ldrh	r3, [r0, #8]
 800306a:	f023 0307 	bic.w	r3, r3, #7
 800306e:	041b      	lsls	r3, r3, #16
 8003070:	0c1b      	lsrs	r3, r3, #16
 8003072:	8103      	strh	r3, [r0, #8]
}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop

08003078 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003078:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	041b      	lsls	r3, r3, #16
 8003080:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8003082:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003084:	8103      	strh	r3, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003086:	8903      	ldrh	r3, [r0, #8]
 8003088:	b29b      	uxth	r3, r3
 800308a:	f043 0307 	orr.w	r3, r3, #7
 800308e:	8103      	strh	r3, [r0, #8]
}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop

08003094 <TIM_TIxExternalClockConfig>:
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8003094:	2960      	cmp	r1, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8003096:	b430      	push	{r4, r5}
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8003098:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800309a:	d026      	beq.n	80030ea <TIM_TIxExternalClockConfig+0x56>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800309c:	f024 0401 	bic.w	r4, r4, #1
 80030a0:	0424      	lsls	r4, r4, #16
 80030a2:	0c24      	lsrs	r4, r4, #16
 80030a4:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030a6:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 80030a8:	8c04      	ldrh	r4, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 80030aa:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
 80030ae:	042d      	lsls	r5, r5, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030b0:	f024 040a 	bic.w	r4, r4, #10
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 80030b4:	0c2d      	lsrs	r5, r5, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030b6:	0424      	lsls	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80030b8:	f045 0501 	orr.w	r5, r5, #1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030bc:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80030be:	ea45 1303 	orr.w	r3, r5, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80030c2:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80030c6:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80030c8:	4322      	orrs	r2, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030ca:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80030cc:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030ce:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80030d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d4:	041b      	lsls	r3, r3, #16
 80030d6:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80030d8:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030da:	8101      	strh	r1, [r0, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80030dc:	8903      	ldrh	r3, [r0, #8]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	f043 0307 	orr.w	r3, r3, #7
 80030e4:	8103      	strh	r3, [r0, #8]
}
 80030e6:	bc30      	pop	{r4, r5}
 80030e8:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80030ea:	f024 0410 	bic.w	r4, r4, #16
 80030ee:	0424      	lsls	r4, r4, #16
 80030f0:	0c24      	lsrs	r4, r4, #16
 80030f2:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f4:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 80030f6:	8c04      	ldrh	r4, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80030f8:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030fc:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8003100:	052d      	lsls	r5, r5, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003102:	0424      	lsls	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8003104:	0d2d      	lsrs	r5, r5, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003106:	0c24      	lsrs	r4, r4, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8003108:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800310c:	f044 0410 	orr.w	r4, r4, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8003110:	ea45 3303 	orr.w	r3, r5, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8003114:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8003118:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800311a:	b292      	uxth	r2, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800311c:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800311e:	8402      	strh	r2, [r0, #32]
 8003120:	e7d5      	b.n	80030ce <TIM_TIxExternalClockConfig+0x3a>
 8003122:	bf00      	nop

08003124 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003124:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8003126:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8003128:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800312a:	430c      	orrs	r4, r1
 800312c:	4314      	orrs	r4, r2
 800312e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8003132:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003134:	8104      	strh	r4, [r0, #8]
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003136:	8903      	ldrh	r3, [r0, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8003138:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800313c:	041b      	lsls	r3, r3, #16
 800313e:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;
 8003140:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003144:	8103      	strh	r3, [r0, #8]
}
 8003146:	bc10      	pop	{r4}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop

0800314c <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800314c:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800314e:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8003150:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8003152:	430c      	orrs	r4, r1
 8003154:	4314      	orrs	r4, r2
 8003156:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800315a:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800315c:	8104      	strh	r4, [r0, #8]

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800315e:	8903      	ldrh	r3, [r0, #8]
 8003160:	b29b      	uxth	r3, r3
 8003162:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003166:	8103      	strh	r3, [r0, #8]
}
 8003168:	bc10      	pop	{r4}
 800316a:	4770      	bx	lr

0800316c <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800316c:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	041b      	lsls	r3, r3, #16
 8003174:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8003176:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003178:	8103      	strh	r3, [r0, #8]
}
 800317a:	4770      	bx	lr

0800317c <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 800317c:	8883      	ldrh	r3, [r0, #4]
 800317e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003182:	041b      	lsls	r3, r3, #16
 8003184:	0c1b      	lsrs	r3, r3, #16
 8003186:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8003188:	8883      	ldrh	r3, [r0, #4]
 800318a:	b29b      	uxth	r3, r3
 800318c:	430b      	orrs	r3, r1
 800318e:	8083      	strh	r3, [r0, #4]
}
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop

08003194 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8003194:	8903      	ldrh	r3, [r0, #8]
 8003196:	f023 0307 	bic.w	r3, r3, #7
 800319a:	041b      	lsls	r3, r3, #16
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80031a0:	8903      	ldrh	r3, [r0, #8]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	430b      	orrs	r3, r1
 80031a6:	8103      	strh	r3, [r0, #8]
}
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop

080031ac <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80031ac:	8903      	ldrh	r3, [r0, #8]
 80031ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031b2:	041b      	lsls	r3, r3, #16
 80031b4:	0c1b      	lsrs	r3, r3, #16
 80031b6:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80031b8:	8903      	ldrh	r3, [r0, #8]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	430b      	orrs	r3, r1
 80031be:	8103      	strh	r3, [r0, #8]
}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop

080031c4 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80031c4:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80031c6:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80031c8:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80031ca:	430c      	orrs	r4, r1
 80031cc:	4314      	orrs	r4, r2
 80031ce:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80031d2:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031d4:	8104      	strh	r4, [r0, #8]
}
 80031d6:	bc10      	pop	{r4}
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop

080031dc <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80031dc:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031de:	8905      	ldrh	r5, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80031e0:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e2:	8c06      	ldrh	r6, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80031e4:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80031e8:	f026 0622 	bic.w	r6, r6, #34	; 0x22
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80031ec:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80031f0:	0436      	lsls	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80031f2:	f025 0507 	bic.w	r5, r5, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80031f6:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80031f8:	0c36      	lsrs	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80031fa:	042d      	lsls	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80031fc:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80031fe:	4316      	orrs	r6, r2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8003200:	0c2d      	lsrs	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8003202:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8003206:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 800320a:	4329      	orrs	r1, r5

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800320c:	f044 0401 	orr.w	r4, r4, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8003210:	b2b6      	uxth	r6, r6

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003212:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003214:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003216:	8406      	strh	r6, [r0, #32]
}
 8003218:	bc70      	pop	{r4, r5, r6}
 800321a:	4770      	bx	lr

0800321c <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 800321c:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800321e:	b929      	cbnz	r1, 800322c <TIM_SelectHallSensor+0x10>
    TIMx->CR2 |= TIM_CR2_TI1S;
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8003220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003224:	041b      	lsls	r3, r3, #16
 8003226:	0c1b      	lsrs	r3, r3, #16
 8003228:	8083      	strh	r3, [r0, #4]
 800322a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 800322c:	b29b      	uxth	r3, r3
 800322e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003232:	8083      	strh	r3, [r0, #4]
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop

08003238 <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8003238:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
}
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop

08003240 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8003240:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8003242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003246:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800324a:	4298      	cmp	r0, r3
 800324c:	d028      	beq.n	80032a0 <USART_DeInit+0x60>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 800324e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8003252:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003256:	4298      	cmp	r0, r3
 8003258:	d02c      	beq.n	80032b4 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 800325a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800325e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003262:	4298      	cmp	r0, r3
 8003264:	d032      	beq.n	80032cc <USART_DeInit+0x8c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 8003266:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 800326a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800326e:	4298      	cmp	r0, r3
 8003270:	d038      	beq.n	80032e4 <USART_DeInit+0xa4>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 8003272:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003276:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800327a:	4298      	cmp	r0, r3
 800327c:	d03e      	beq.n	80032fc <USART_DeInit+0xbc>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }     
  else
  {
    if (USARTx == USART6)
 800327e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003282:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003286:	4298      	cmp	r0, r3
 8003288:	d000      	beq.n	800328c <USART_DeInit+0x4c>
 800328a:	bd08      	pop	{r3, pc}
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 800328c:	2020      	movs	r0, #32
 800328e:	2101      	movs	r1, #1
 8003290:	f7fe fe54 	bl	8001f3c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8003294:	2020      	movs	r0, #32
 8003296:	2100      	movs	r1, #0
    }
  }
}
 8003298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800329c:	f7fe be4e 	b.w	8001f3c <RCC_APB2PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80032a0:	2010      	movs	r0, #16
 80032a2:	2101      	movs	r1, #1
 80032a4:	f7fe fe4a 	bl	8001f3c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80032a8:	2010      	movs	r0, #16
 80032aa:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80032ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80032b0:	f7fe be44 	b.w	8001f3c <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80032b4:	2101      	movs	r1, #1
 80032b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80032ba:	f7fe fe31 	bl	8001f20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80032be:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80032c2:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80032c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80032c8:	f7fe be2a 	b.w	8001f20 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80032cc:	2101      	movs	r1, #1
 80032ce:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80032d2:	f7fe fe25 	bl	8001f20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80032d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80032da:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80032dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80032e0:	f7fe be1e 	b.w	8001f20 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80032e4:	2101      	movs	r1, #1
 80032e6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80032ea:	f7fe fe19 	bl	8001f20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80032ee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80032f2:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80032f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80032f8:	f7fe be12 	b.w	8001f20 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80032fc:	2101      	movs	r1, #1
 80032fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003302:	f7fe fe0d 	bl	8001f20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8003306:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800330a:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 800330c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8003310:	f7fe be06 	b.w	8001f20 <RCC_APB1PeriphResetCmd>

08003314 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8003314:	8a02      	ldrh	r2, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8003316:	88cb      	ldrh	r3, [r1, #6]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003318:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800331c:	0412      	lsls	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800331e:	b5f0      	push	{r4, r5, r6, r7, lr}

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003320:	0c12      	lsrs	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8003322:	4604      	mov	r4, r0
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8003324:	431a      	orrs	r2, r3

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003326:	8948      	ldrh	r0, [r1, #10]
 8003328:	890f      	ldrh	r7, [r1, #8]
 800332a:	888e      	ldrh	r6, [r1, #4]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800332c:	460d      	mov	r5, r1
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800332e:	8989      	ldrh	r1, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8003330:	8222      	strh	r2, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8003332:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8003334:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003338:	f023 030c 	bic.w	r3, r3, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800333c:	ea47 0206 	orr.w	r2, r7, r6

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8003340:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003342:	4302      	orrs	r2, r0
 8003344:	b292      	uxth	r2, r2

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8003346:	0c1b      	lsrs	r3, r3, #16
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8003348:	4313      	orrs	r3, r2
 800334a:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800334c:	8aa3      	ldrh	r3, [r4, #20]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800334e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003352:	041b      	lsls	r3, r3, #16
 8003354:	0c1b      	lsrs	r3, r3, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8003356:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8003358:	430b      	orrs	r3, r1
 800335a:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800335c:	4668      	mov	r0, sp
 800335e:	f7fe fceb 	bl	8001d38 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8003362:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8003366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800336a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800336e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003372:	429c      	cmp	r4, r3
 8003374:	bf18      	it	ne
 8003376:	4294      	cmpne	r4, r2
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003378:	89a2      	ldrh	r2, [r4, #12]
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800337a:	bf0c      	ite	eq
 800337c:	9b03      	ldreq	r3, [sp, #12]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800337e:	9b02      	ldrne	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003380:	b212      	sxth	r2, r2
 8003382:	2a00      	cmp	r2, #0
 8003384:	db21      	blt.n	80033ca <USART_Init+0xb6>
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8003386:	6828      	ldr	r0, [r5, #0]
 8003388:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800338c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003390:	0080      	lsls	r0, r0, #2
 8003392:	fbb3 f1f0 	udiv	r1, r3, r0
  }
  tmpreg = (integerdivider / 100) << 4;
 8003396:	f248 531f 	movw	r3, #34079	; 0x851f

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800339a:	89a0      	ldrh	r0, [r4, #12]
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 800339c:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80033a0:	fba3 5201 	umull	r5, r2, r3, r1
 80033a4:	0952      	lsrs	r2, r2, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80033a6:	b200      	sxth	r0, r0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80033a8:	0116      	lsls	r6, r2, #4
 80033aa:	2564      	movs	r5, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80033ac:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80033ae:	fb02 1215 	mls	r2, r2, r5, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80033b2:	db13      	blt.n	80033dc <USART_Init+0xc8>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80033b4:	0112      	lsls	r2, r2, #4
 80033b6:	3232      	adds	r2, #50	; 0x32
 80033b8:	fba3 5302 	umull	r5, r3, r3, r2
 80033bc:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80033c0:	4333      	orrs	r3, r6
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	8123      	strh	r3, [r4, #8]
}
 80033c6:	b005      	add	sp, #20
 80033c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80033ca:	682a      	ldr	r2, [r5, #0]
 80033cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033d4:	0052      	lsls	r2, r2, #1
 80033d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80033da:	e7dc      	b.n	8003396 <USART_Init+0x82>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80033dc:	00d2      	lsls	r2, r2, #3
 80033de:	3232      	adds	r2, #50	; 0x32
 80033e0:	fba3 1302 	umull	r1, r3, r3, r2
 80033e4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80033e8:	4333      	orrs	r3, r6
 80033ea:	e7ea      	b.n	80033c2 <USART_Init+0xae>

080033ec <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80033ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80033f0:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80033f2:	6002      	str	r2, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80033f4:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80033f6:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80033f8:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80033fa:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80033fc:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80033fe:	8183      	strh	r3, [r0, #12]
}
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop

08003404 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8003404:	880a      	ldrh	r2, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8003406:	8a03      	ldrh	r3, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8003408:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800340a:	884d      	ldrh	r5, [r1, #2]
 800340c:	888c      	ldrh	r4, [r1, #4]
 800340e:	88c9      	ldrh	r1, [r1, #6]
 8003410:	432a      	orrs	r2, r5
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8003412:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8003416:	4322      	orrs	r2, r4
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8003418:	041b      	lsls	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800341a:	430a      	orrs	r2, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800341c:	0c1b      	lsrs	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800341e:	b292      	uxth	r2, r2
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8003420:	4313      	orrs	r3, r2
 8003422:	8203      	strh	r3, [r0, #16]
}
 8003424:	bc30      	pop	{r4, r5}
 8003426:	4770      	bx	lr

08003428 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8003428:	2300      	movs	r3, #0
 800342a:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 800342c:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800342e:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8003430:	80c3      	strh	r3, [r0, #6]
}
 8003432:	4770      	bx	lr

08003434 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8003434:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003436:	b929      	cbnz	r1, 8003444 <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8003438:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	0c1b      	lsrs	r3, r3, #16
 8003440:	8183      	strh	r3, [r0, #12]
 8003442:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8003444:	b29b      	uxth	r3, r3
 8003446:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800344a:	8183      	strh	r3, [r0, #12]
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop

08003450 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8003450:	8b03      	ldrh	r3, [r0, #24]
 8003452:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003456:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8003458:	8b03      	ldrh	r3, [r0, #24]
 800345a:	b29b      	uxth	r3, r3
 800345c:	430b      	orrs	r3, r1
 800345e:	8303      	strh	r3, [r0, #24]
}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop

08003464 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8003464:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003466:	b919      	cbnz	r1, 8003470 <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8003468:	045b      	lsls	r3, r3, #17
 800346a:	0c5b      	lsrs	r3, r3, #17
 800346c:	8183      	strh	r3, [r0, #12]
 800346e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8003470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003478:	b29b      	uxth	r3, r3
 800347a:	8183      	strh	r3, [r0, #12]
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop

08003480 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8003480:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003482:	b929      	cbnz	r1, 8003490 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8003484:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	0c1b      	lsrs	r3, r3, #16
 800348c:	8283      	strh	r3, [r0, #20]
 800348e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8003490:	b29b      	uxth	r3, r3
 8003492:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003496:	8283      	strh	r3, [r0, #20]
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop

0800349c <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800349c:	05c9      	lsls	r1, r1, #23
 800349e:	0dc9      	lsrs	r1, r1, #23
 80034a0:	8081      	strh	r1, [r0, #4]
}
 80034a2:	4770      	bx	lr

080034a4 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80034a4:	8880      	ldrh	r0, [r0, #4]
}
 80034a6:	05c0      	lsls	r0, r0, #23
 80034a8:	0dc0      	lsrs	r0, r0, #23
 80034aa:	4770      	bx	lr

080034ac <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 80034ac:	8a03      	ldrh	r3, [r0, #16]
 80034ae:	f023 030f 	bic.w	r3, r3, #15
 80034b2:	041b      	lsls	r3, r3, #16
 80034b4:	0c1b      	lsrs	r3, r3, #16
 80034b6:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80034b8:	8a03      	ldrh	r3, [r0, #16]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	430b      	orrs	r3, r1
 80034be:	8203      	strh	r3, [r0, #16]
}
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop

080034c4 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80034c4:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80034c6:	b929      	cbnz	r1, 80034d4 <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 80034c8:	f023 0302 	bic.w	r3, r3, #2
 80034cc:	041b      	lsls	r3, r3, #16
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	8183      	strh	r3, [r0, #12]
 80034d2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	f043 0302 	orr.w	r3, r3, #2
 80034da:	8183      	strh	r3, [r0, #12]
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop

080034e0 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 80034e0:	8983      	ldrh	r3, [r0, #12]
 80034e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034e6:	041b      	lsls	r3, r3, #16
 80034e8:	0c1b      	lsrs	r3, r3, #16
 80034ea:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 80034ec:	8983      	ldrh	r3, [r0, #12]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	430b      	orrs	r3, r1
 80034f2:	8183      	strh	r3, [r0, #12]
}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop

080034f8 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 80034f8:	8a03      	ldrh	r3, [r0, #16]
 80034fa:	f023 0320 	bic.w	r3, r3, #32
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8003504:	8a03      	ldrh	r3, [r0, #16]
 8003506:	b29b      	uxth	r3, r3
 8003508:	430b      	orrs	r3, r1
 800350a:	8203      	strh	r3, [r0, #16]
}
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop

08003510 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8003510:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003512:	b929      	cbnz	r1, 8003520 <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8003514:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003518:	041b      	lsls	r3, r3, #16
 800351a:	0c1b      	lsrs	r3, r3, #16
 800351c:	8203      	strh	r3, [r0, #16]
 800351e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8003520:	b29b      	uxth	r3, r3
 8003522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003526:	8203      	strh	r3, [r0, #16]
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop

0800352c <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 800352c:	8983      	ldrh	r3, [r0, #12]
 800352e:	b29b      	uxth	r3, r3
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	8183      	strh	r3, [r0, #12]
}
 8003536:	4770      	bx	lr

08003538 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8003538:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800353a:	b929      	cbnz	r1, 8003548 <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 800353c:	f023 0308 	bic.w	r3, r3, #8
 8003540:	041b      	lsls	r3, r3, #16
 8003542:	0c1b      	lsrs	r3, r3, #16
 8003544:	8283      	strh	r3, [r0, #20]
 8003546:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8003548:	b29b      	uxth	r3, r3
 800354a:	f043 0308 	orr.w	r3, r3, #8
 800354e:	8283      	strh	r3, [r0, #20]
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop

08003554 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8003554:	8b03      	ldrh	r3, [r0, #24]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800355a:	8b03      	ldrh	r3, [r0, #24]
 800355c:	b29b      	uxth	r3, r3
 800355e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003562:	8303      	strh	r3, [r0, #24]
}
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop

08003568 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8003568:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800356a:	b929      	cbnz	r1, 8003578 <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 800356c:	f023 0320 	bic.w	r3, r3, #32
 8003570:	041b      	lsls	r3, r3, #16
 8003572:	0c1b      	lsrs	r3, r3, #16
 8003574:	8283      	strh	r3, [r0, #20]
 8003576:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8003578:	b29b      	uxth	r3, r3
 800357a:	f043 0320 	orr.w	r3, r3, #32
 800357e:	8283      	strh	r3, [r0, #20]
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop

08003584 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8003584:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003586:	b929      	cbnz	r1, 8003594 <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8003588:	f023 0310 	bic.w	r3, r3, #16
 800358c:	041b      	lsls	r3, r3, #16
 800358e:	0c1b      	lsrs	r3, r3, #16
 8003590:	8283      	strh	r3, [r0, #20]
 8003592:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8003594:	b29b      	uxth	r3, r3
 8003596:	f043 0310 	orr.w	r3, r3, #16
 800359a:	8283      	strh	r3, [r0, #20]
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop

080035a0 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 80035a0:	8a83      	ldrh	r3, [r0, #20]
 80035a2:	f023 0304 	bic.w	r3, r3, #4
 80035a6:	041b      	lsls	r3, r3, #16
 80035a8:	0c1b      	lsrs	r3, r3, #16
 80035aa:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80035ac:	8a83      	ldrh	r3, [r0, #20]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	430b      	orrs	r3, r1
 80035b2:	8283      	strh	r3, [r0, #20]
}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop

080035b8 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80035b8:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80035ba:	b929      	cbnz	r1, 80035c8 <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 80035bc:	f023 0302 	bic.w	r3, r3, #2
 80035c0:	041b      	lsls	r3, r3, #16
 80035c2:	0c1b      	lsrs	r3, r3, #16
 80035c4:	8283      	strh	r3, [r0, #20]
 80035c6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	f043 0302 	orr.w	r3, r3, #2
 80035ce:	8283      	strh	r3, [r0, #20]
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop

080035d4 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80035d4:	8a83      	ldrh	r3, [r0, #20]
 80035d6:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80035d8:	b91a      	cbnz	r2, 80035e2 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 80035da:	ea23 0101 	bic.w	r1, r3, r1
 80035de:	8281      	strh	r1, [r0, #20]
 80035e0:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80035e2:	4319      	orrs	r1, r3
 80035e4:	8281      	strh	r1, [r0, #20]
 80035e6:	4770      	bx	lr

080035e8 <USART_ITConfig>:

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80035e8:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80035ec:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80035ee:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80035f2:	2401      	movs	r4, #1
 80035f4:	fa14 f303 	lsls.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80035f8:	42a1      	cmp	r1, r4
 80035fa:	d00d      	beq.n	8003618 <USART_ITConfig+0x30>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80035fc:	2902      	cmp	r1, #2
 80035fe:	d00d      	beq.n	800361c <USART_ITConfig+0x34>
  {
    usartxbase += 0x10;
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8003600:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 8003602:	b92a      	cbnz	r2, 8003610 <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8003604:	6802      	ldr	r2, [r0, #0]
 8003606:	ea22 0303 	bic.w	r3, r2, r3
 800360a:	6003      	str	r3, [r0, #0]
  }
}
 800360c:	bc10      	pop	{r4}
 800360e:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8003610:	6802      	ldr	r2, [r0, #0]
 8003612:	4313      	orrs	r3, r2
 8003614:	6003      	str	r3, [r0, #0]
 8003616:	e7f9      	b.n	800360c <USART_ITConfig+0x24>
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 8003618:	300c      	adds	r0, #12
 800361a:	e7f2      	b.n	8003602 <USART_ITConfig+0x1a>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x10;
 800361c:	3010      	adds	r0, #16
 800361e:	e7f0      	b.n	8003602 <USART_ITConfig+0x1a>

08003620 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8003620:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 8003622:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8003624:	bf0c      	ite	eq
 8003626:	2000      	moveq	r0, #0
 8003628:	2001      	movne	r0, #1
 800362a:	4770      	bx	lr

0800362c <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 800362c:	43c9      	mvns	r1, r1
 800362e:	b289      	uxth	r1, r1
 8003630:	8001      	strh	r1, [r0, #0]
}
 8003632:	4770      	bx	lr

08003634 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8003634:	b410      	push	{r4}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8003636:	f001 021f 	and.w	r2, r1, #31
  itmask = (uint32_t)0x01 << itmask;
 800363a:	2401      	movs	r4, #1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800363c:	f3c1 1342 	ubfx	r3, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8003640:	4094      	lsls	r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8003642:	2b01      	cmp	r3, #1
 8003644:	d016      	beq.n	8003674 <USART_GetITStatus+0x40>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8003646:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 8003648:	bf0c      	ite	eq
 800364a:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800364c:	8a82      	ldrhne	r2, [r0, #20]
 800364e:	b292      	uxth	r2, r2
 8003650:	4022      	ands	r2, r4
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8003652:	8803      	ldrh	r3, [r0, #0]
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8003654:	2401      	movs	r4, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 8003656:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8003658:	fa14 f101 	lsls.w	r1, r4, r1
  bitpos &= USARTx->SR;
 800365c:	b29b      	uxth	r3, r3
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800365e:	4219      	tst	r1, r3
 8003660:	bf0c      	ite	eq
 8003662:	2300      	moveq	r3, #0
 8003664:	2301      	movne	r3, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 8003666:	2a00      	cmp	r2, #0
 8003668:	bf0c      	ite	eq
 800366a:	2000      	moveq	r0, #0
 800366c:	f003 0001 	andne.w	r0, r3, #1
 8003670:	bc10      	pop	{r4}
 8003672:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 8003674:	8982      	ldrh	r2, [r0, #12]
 8003676:	b292      	uxth	r2, r2
 8003678:	4022      	ands	r2, r4
 800367a:	e7ea      	b.n	8003652 <USART_GetITStatus+0x1e>

0800367c <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800367c:	0a09      	lsrs	r1, r1, #8
 800367e:	2301      	movs	r3, #1
 8003680:	fa13 f101 	lsls.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8003684:	43c9      	mvns	r1, r1
 8003686:	b289      	uxth	r1, r1
 8003688:	8001      	strh	r1, [r0, #0]
}
 800368a:	4770      	bx	lr

0800368c <_close>:
	}
}

int _close(int file) {
	return -1;
}
 800368c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop

08003694 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8003694:	f241 53fc 	movw	r3, #5628	; 0x15fc
 8003698:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800369c:	220c      	movs	r2, #12
 800369e:	601a      	str	r2, [r3, #0]
	return -1;
}
 80036a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop

080036a8 <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 80036a8:	f241 53fc 	movw	r3, #5628	; 0x15fc
 80036ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036b0:	220b      	movs	r2, #11
 80036b2:	601a      	str	r2, [r3, #0]
	return -1;
}
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop

080036bc <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 80036bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036c0:	604b      	str	r3, [r1, #4]
	return 0;
}
 80036c2:	2000      	movs	r0, #0
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop

080036c8 <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 80036c8:	2001      	movs	r0, #1
 80036ca:	4770      	bx	lr

080036cc <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 80036cc:	2802      	cmp	r0, #2
 80036ce:	d801      	bhi.n	80036d4 <_isatty+0x8>
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 80036d0:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 80036d2:	4770      	bx	lr
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 80036d4:	4b02      	ldr	r3, [pc, #8]	; (80036e0 <_isatty+0x14>)
 80036d6:	2209      	movs	r2, #9
 80036d8:	601a      	str	r2, [r3, #0]
		return 0;
 80036da:	2000      	movs	r0, #0
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	200015fc 	.word	0x200015fc

080036e4 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 80036e4:	f241 53fc 	movw	r3, #5628	; 0x15fc
 80036e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036ec:	2216      	movs	r2, #22
 80036ee:	601a      	str	r2, [r3, #0]
	return (-1);
}
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop

080036f8 <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 80036f8:	f241 53fc 	movw	r3, #5628	; 0x15fc
 80036fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003700:	221f      	movs	r2, #31
 8003702:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop

0800370c <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 800370c:	2000      	movs	r0, #0
 800370e:	4770      	bx	lr

08003710 <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8003710:	b430      	push	{r4, r5}
	int n;
	int num = 0;
	switch (file) {
 8003712:	b130      	cbz	r0, 8003722 <_read+0x12>
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <_read+0x34>)
 8003716:	2209      	movs	r2, #9
 8003718:	601a      	str	r2, [r3, #0]
				return -1;
 800371a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 800371e:	bc30      	pop	{r4, r5}
 8003720:	4770      	bx	lr
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8003722:	2a00      	cmp	r2, #0
 8003724:	ddfb      	ble.n	800371e <_read+0xe>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8003726:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 800372a:	188d      	adds	r5, r1, r2
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 800372c:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8003730:	8823      	ldrh	r3, [r4, #0]
 8003732:	069b      	lsls	r3, r3, #26
 8003734:	d5fc      	bpl.n	8003730 <_read+0x20>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 8003736:	88a3      	ldrh	r3, [r4, #4]
 8003738:	f801 3b01 	strb.w	r3, [r1], #1
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 800373c:	42a9      	cmp	r1, r5
 800373e:	d1f7      	bne.n	8003730 <_read+0x20>
 8003740:	4610      	mov	r0, r2
 8003742:	e7ec      	b.n	800371e <_read+0xe>
 8003744:	200015fc 	.word	0x200015fc

08003748 <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 8003748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800374c:	604b      	str	r3, [r1, #4]
	return 0;
}
 800374e:	2000      	movs	r0, #0
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop

08003754 <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8003754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop

0800375c <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 800375c:	f241 53fc 	movw	r3, #5628	; 0x15fc
 8003760:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003764:	2202      	movs	r2, #2
 8003766:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop

08003770 <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 8003770:	f241 53fc 	movw	r3, #5628	; 0x15fc
 8003774:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003778:	220a      	movs	r2, #10
 800377a:	601a      	str	r2, [r3, #0]
	return -1;
}
 800377c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop

08003784 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8003784:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8003786:	b430      	push	{r4, r5}
	int n;
	switch (file) {
 8003788:	d009      	beq.n	800379e <_write+0x1a>
 800378a:	2802      	cmp	r0, #2
 800378c:	d017      	beq.n	80037be <_write+0x3a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 800378e:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <_write+0x5c>)
 8003790:	2209      	movs	r2, #9
 8003792:	601a      	str	r2, [r3, #0]
				return -1;
 8003794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 8003798:	4610      	mov	r0, r2
 800379a:	bc30      	pop	{r4, r5}
 800379c:	4770      	bx	lr
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 800379e:	2a00      	cmp	r2, #0
 80037a0:	ddfa      	ble.n	8003798 <_write+0x14>
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80037a2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 80037a6:	188d      	adds	r5, r1, r2
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80037a8:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80037ac:	8823      	ldrh	r3, [r4, #0]
 80037ae:	065b      	lsls	r3, r3, #25
 80037b0:	d5fc      	bpl.n	80037ac <_write+0x28>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 80037b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 80037b6:	42a9      	cmp	r1, r5
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 80037b8:	80a3      	strh	r3, [r4, #4]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 80037ba:	d1f7      	bne.n	80037ac <_write+0x28>
 80037bc:	e7ec      	b.n	8003798 <_write+0x14>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 80037be:	2a00      	cmp	r2, #0
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80037c0:	bfc2      	ittt	gt
 80037c2:	f44f 5480 	movgt.w	r4, #4096	; 0x1000
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 80037c6:	188d      	addgt	r5, r1, r2
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80037c8:	f2c4 0401 	movtgt	r4, #16385	; 0x4001
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 80037cc:	dde4      	ble.n	8003798 <_write+0x14>
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80037ce:	8823      	ldrh	r3, [r4, #0]
 80037d0:	0658      	lsls	r0, r3, #25
 80037d2:	d5fc      	bpl.n	80037ce <_write+0x4a>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 80037d4:	f811 3b01 	ldrb.w	r3, [r1], #1
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 80037d8:	42a9      	cmp	r1, r5
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 80037da:	80a3      	strh	r3, [r4, #4]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 80037dc:	d1f7      	bne.n	80037ce <_write+0x4a>
 80037de:	e7db      	b.n	8003798 <_write+0x14>
 80037e0:	200015fc 	.word	0x200015fc

080037e4 <_sbrk>:

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 80037e4:	4a0d      	ldr	r2, [pc, #52]	; (800381c <_sbrk+0x38>)
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 80037e6:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 80037e8:	6813      	ldr	r3, [r2, #0]
 80037ea:	b1a3      	cbz	r3, 8003816 <_sbrk+0x32>
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 80037ec:	f3ef 8108 	mrs	r1, MSP
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 80037f0:	1818      	adds	r0, r3, r0
 80037f2:	4288      	cmp	r0, r1
		errno = ENOMEM;
		return (caddr_t) -1;
		//abort ();
	}

	heap_end += incr;
 80037f4:	bf98      	it	ls
 80037f6:	6010      	strls	r0, [r2, #0]
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 80037f8:	d801      	bhi.n	80037fe <_sbrk+0x1a>
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 80037fa:	4618      	mov	r0, r3
 80037fc:	bd08      	pop	{r3, pc}
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 80037fe:	2219      	movs	r2, #25
 8003800:	2002      	movs	r0, #2
 8003802:	4907      	ldr	r1, [pc, #28]	; (8003820 <_sbrk+0x3c>)
 8003804:	f7ff ffbe 	bl	8003784 <_write>
		errno = ENOMEM;
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <_sbrk+0x40>)
 800380a:	220c      	movs	r2, #12
 800380c:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800380e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 8003812:	4618      	mov	r0, r3
 8003814:	bd08      	pop	{r3, pc}
	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
		heap_end = &_ebss;
 8003816:	4b04      	ldr	r3, [pc, #16]	; (8003828 <_sbrk+0x44>)
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	e7e7      	b.n	80037ec <_sbrk+0x8>
 800381c:	2000095c 	.word	0x2000095c
 8003820:	08009064 	.word	0x08009064
 8003824:	200015fc 	.word	0x200015fc
 8003828:	20001600 	.word	0x20001600

0800382c <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 800382c:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 800382e:	2001      	movs	r0, #1
 8003830:	4902      	ldr	r1, [pc, #8]	; (800383c <_exit+0x10>)
 8003832:	2204      	movs	r2, #4
 8003834:	f7ff ffa6 	bl	8003784 <_write>
 8003838:	e7fe      	b.n	8003838 <_exit+0xc>
 800383a:	bf00      	nop
 800383c:	08009080 	.word	0x08009080
 8003840:	080090ec 	.word	0x080090ec
 8003844:	20000000 	.word	0x20000000
 8003848:	2000095c 	.word	0x2000095c
 800384c:	2000095c 	.word	0x2000095c
 8003850:	20001600 	.word	0x20001600

08003854 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop

08003858 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003858:	e7fe      	b.n	8003858 <HardFault_Handler>
 800385a:	bf00      	nop

0800385c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800385c:	e7fe      	b.n	800385c <MemManage_Handler>
 800385e:	bf00      	nop

08003860 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003860:	e7fe      	b.n	8003860 <BusFault_Handler>
 8003862:	bf00      	nop

08003864 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003864:	e7fe      	b.n	8003864 <UsageFault_Handler>
 8003866:	bf00      	nop

08003868 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop

0800386c <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop

08003870 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop

08003874 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003874:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003878:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800387c:	2200      	movs	r2, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800387e:	6819      	ldr	r1, [r3, #0]
 8003880:	f041 0101 	orr.w	r1, r1, #1
 8003884:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003886:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003888:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800388a:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800388e:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003892:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003896:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800389a:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800389c:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800389e:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038a0:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80038a2:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80038a6:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80038a8:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80038aa:	9200      	str	r2, [sp, #0]
 80038ac:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038b4:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80038b6:	461a      	mov	r2, r3
 80038b8:	e003      	b.n	80038c2 <SystemInit+0x4e>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80038ba:	9b00      	ldr	r3, [sp, #0]
 80038bc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80038c0:	d009      	beq.n	80038d6 <SystemInit+0x62>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80038c2:	6813      	ldr	r3, [r2, #0]
 80038c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c8:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 80038ca:	9b00      	ldr	r3, [sp, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80038d0:	9b01      	ldr	r3, [sp, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f1      	beq.n	80038ba <SystemInit+0x46>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80038d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80038da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80038e4:	bf08      	it	eq
 80038e6:	9301      	streq	r3, [sp, #4]
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80038e8:	d001      	beq.n	80038ee <SystemInit+0x7a>
  {
    HSEStatus = (uint32_t)0x01;
 80038ea:	2301      	movs	r3, #1
 80038ec:	9301      	str	r3, [sp, #4]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
 80038ee:	9b01      	ldr	r3, [sp, #4]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d008      	beq.n	8003906 <SystemInit+0x92>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038f4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80038f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80038fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003900:	609a      	str	r2, [r3, #8]
#endif
}
 8003902:	b002      	add	sp, #8
 8003904:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003906:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800390a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    PWR->CR |= PWR_CR_VOS;
 800390e:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003912:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003914:	f2c4 0200 	movt	r2, #16384	; 0x4000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003918:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800391c:	6419      	str	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800391e:	6811      	ldr	r1, [r2, #0]
 8003920:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003924:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003930:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003932:	6899      	ldr	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003934:	f245 4219 	movw	r2, #21529	; 0x5419
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003938:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800393c:	f2c0 7240 	movt	r2, #1856	; 0x740
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003940:	6099      	str	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003942:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800394a:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800394c:	4619      	mov	r1, r3
 800394e:	680a      	ldr	r2, [r1, #0]
 8003950:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003954:	0192      	lsls	r2, r2, #6
 8003956:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800395a:	d5f8      	bpl.n	800394e <SystemInit+0xda>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800395c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003960:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003964:	f240 6105 	movw	r1, #1541	; 0x605
 8003968:	6011      	str	r1, [r2, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	f022 0203 	bic.w	r2, r2, #3
 8003970:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	f042 0202 	orr.w	r2, r2, #2
 8003978:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	f002 020c 	and.w	r2, r2, #12
 8003980:	2a08      	cmp	r2, #8
 8003982:	d1fa      	bne.n	800397a <SystemInit+0x106>
 8003984:	e7b6      	b.n	80038f4 <SystemInit+0x80>
 8003986:	bf00      	nop

08003988 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003988:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800398c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8003996:	2a04      	cmp	r2, #4
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 8003998:	bf04      	itt	eq
 800399a:	f44f 5190 	moveq.w	r1, #4608	; 0x1200
 800399e:	f2c0 017a 	movteq	r1, #122	; 0x7a
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 80039a2:	d006      	beq.n	80039b2 <SystemCoreClockUpdate+0x2a>
 80039a4:	2a08      	cmp	r2, #8
 80039a6:	bf1c      	itt	ne
 80039a8:	f44f 5110 	movne.w	r1, #9216	; 0x2400
 80039ac:	f2c0 01f4 	movtne	r1, #244	; 0xf4
 80039b0:	d00b      	beq.n	80039ca <SystemCoreClockUpdate+0x42>
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80039b2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80039b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80039ba:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <SystemCoreClockUpdate+0x88>)
 80039bc:	6892      	ldr	r2, [r2, #8]
 80039be:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80039c2:	5c9a      	ldrb	r2, [r3, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80039c4:	40d1      	lsrs	r1, r2
 80039c6:	6119      	str	r1, [r3, #16]
}
 80039c8:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80039ca:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039cc:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80039ce:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80039d2:	6858      	ldr	r0, [r3, #4]
 80039d4:	bf15      	itete	ne
 80039d6:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80039da:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80039de:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80039e2:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80039ea:	fbb3 f1f2 	udiv	r1, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80039ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80039f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80039f6:	f3c0 1088 	ubfx	r0, r0, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003a00:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003a02:	fb01 f100 	mul.w	r1, r1, r0
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003a06:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 8003a08:	fbb1 f1f3 	udiv	r1, r1, r3
      break;
 8003a0c:	e7d1      	b.n	80039b2 <SystemCoreClockUpdate+0x2a>
 8003a0e:	bf00      	nop
 8003a10:	20000088 	.word	0x20000088

08003a14 <cleanup_glue>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	460c      	mov	r4, r1
 8003a18:	6809      	ldr	r1, [r1, #0]
 8003a1a:	4605      	mov	r5, r0
 8003a1c:	b109      	cbz	r1, 8003a22 <cleanup_glue+0xe>
 8003a1e:	f7ff fff9 	bl	8003a14 <cleanup_glue>
 8003a22:	4628      	mov	r0, r5
 8003a24:	4621      	mov	r1, r4
 8003a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a2a:	f002 ba21 	b.w	8005e70 <_free_r>
 8003a2e:	bf00      	nop

08003a30 <_reclaim_reent>:
 8003a30:	4b22      	ldr	r3, [pc, #136]	; (8003abc <_reclaim_reent+0x8c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4298      	cmp	r0, r3
 8003a36:	b570      	push	{r4, r5, r6, lr}
 8003a38:	4605      	mov	r5, r0
 8003a3a:	d032      	beq.n	8003aa2 <_reclaim_reent+0x72>
 8003a3c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003a3e:	b1ab      	cbz	r3, 8003a6c <_reclaim_reent+0x3c>
 8003a40:	2200      	movs	r2, #0
 8003a42:	4616      	mov	r6, r2
 8003a44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a48:	b909      	cbnz	r1, 8003a4e <_reclaim_reent+0x1e>
 8003a4a:	e007      	b.n	8003a5c <_reclaim_reent+0x2c>
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	680c      	ldr	r4, [r1, #0]
 8003a50:	4628      	mov	r0, r5
 8003a52:	f002 fa0d 	bl	8005e70 <_free_r>
 8003a56:	2c00      	cmp	r4, #0
 8003a58:	d1f8      	bne.n	8003a4c <_reclaim_reent+0x1c>
 8003a5a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003a5c:	3601      	adds	r6, #1
 8003a5e:	2e20      	cmp	r6, #32
 8003a60:	4632      	mov	r2, r6
 8003a62:	d1ef      	bne.n	8003a44 <_reclaim_reent+0x14>
 8003a64:	4628      	mov	r0, r5
 8003a66:	4619      	mov	r1, r3
 8003a68:	f002 fa02 	bl	8005e70 <_free_r>
 8003a6c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8003a6e:	b111      	cbz	r1, 8003a76 <_reclaim_reent+0x46>
 8003a70:	4628      	mov	r0, r5
 8003a72:	f002 f9fd 	bl	8005e70 <_free_r>
 8003a76:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 8003a7a:	b159      	cbz	r1, 8003a94 <_reclaim_reent+0x64>
 8003a7c:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8003a80:	42b1      	cmp	r1, r6
 8003a82:	d101      	bne.n	8003a88 <_reclaim_reent+0x58>
 8003a84:	e006      	b.n	8003a94 <_reclaim_reent+0x64>
 8003a86:	4621      	mov	r1, r4
 8003a88:	680c      	ldr	r4, [r1, #0]
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	f002 f9f0 	bl	8005e70 <_free_r>
 8003a90:	42a6      	cmp	r6, r4
 8003a92:	d1f8      	bne.n	8003a86 <_reclaim_reent+0x56>
 8003a94:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8003a96:	b111      	cbz	r1, 8003a9e <_reclaim_reent+0x6e>
 8003a98:	4628      	mov	r0, r5
 8003a9a:	f002 f9e9 	bl	8005e70 <_free_r>
 8003a9e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003aa0:	b903      	cbnz	r3, 8003aa4 <_reclaim_reent+0x74>
 8003aa2:	bd70      	pop	{r4, r5, r6, pc}
 8003aa4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	4798      	blx	r3
 8003aaa:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 8003aae:	2900      	cmp	r1, #0
 8003ab0:	d0f7      	beq.n	8003aa2 <_reclaim_reent+0x72>
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003ab8:	e7ac      	b.n	8003a14 <cleanup_glue>
 8003aba:	bf00      	nop
 8003abc:	200000a0 	.word	0x200000a0

08003ac0 <_wrapup_reent>:
 8003ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac2:	4607      	mov	r7, r0
 8003ac4:	b1b0      	cbz	r0, 8003af4 <_wrapup_reent+0x34>
 8003ac6:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 8003aca:	b176      	cbz	r6, 8003aea <_wrapup_reent+0x2a>
 8003acc:	6875      	ldr	r5, [r6, #4]
 8003ace:	1e6c      	subs	r4, r5, #1
 8003ad0:	d408      	bmi.n	8003ae4 <_wrapup_reent+0x24>
 8003ad2:	3502      	adds	r5, #2
 8003ad4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8003ad8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003adc:	3c01      	subs	r4, #1
 8003ade:	4798      	blx	r3
 8003ae0:	1c63      	adds	r3, r4, #1
 8003ae2:	d1f9      	bne.n	8003ad8 <_wrapup_reent+0x18>
 8003ae4:	6836      	ldr	r6, [r6, #0]
 8003ae6:	2e00      	cmp	r6, #0
 8003ae8:	d1f0      	bne.n	8003acc <_wrapup_reent+0xc>
 8003aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aec:	b10b      	cbz	r3, 8003af2 <_wrapup_reent+0x32>
 8003aee:	4638      	mov	r0, r7
 8003af0:	4798      	blx	r3
 8003af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003af4:	4b01      	ldr	r3, [pc, #4]	; (8003afc <_wrapup_reent+0x3c>)
 8003af6:	681f      	ldr	r7, [r3, #0]
 8003af8:	e7e5      	b.n	8003ac6 <_wrapup_reent+0x6>
 8003afa:	bf00      	nop
 8003afc:	200000a0 	.word	0x200000a0

08003b00 <_sprintf_r>:
 8003b00:	b40c      	push	{r2, r3}
 8003b02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b04:	b09d      	sub	sp, #116	; 0x74
 8003b06:	ac22      	add	r4, sp, #136	; 0x88
 8003b08:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8003b0c:	f854 2b04 	ldr.w	r2, [r4], #4
 8003b10:	9101      	str	r1, [sp, #4]
 8003b12:	460e      	mov	r6, r1
 8003b14:	4623      	mov	r3, r4
 8003b16:	9503      	str	r5, [sp, #12]
 8003b18:	9506      	str	r5, [sp, #24]
 8003b1a:	a901      	add	r1, sp, #4
 8003b1c:	f44f 7702 	mov.w	r7, #520	; 0x208
 8003b20:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003b24:	f8ad 7010 	strh.w	r7, [sp, #16]
 8003b28:	9605      	str	r6, [sp, #20]
 8003b2a:	f8ad 5012 	strh.w	r5, [sp, #18]
 8003b2e:	941b      	str	r4, [sp, #108]	; 0x6c
 8003b30:	f000 f830 	bl	8003b94 <_svfprintf_r>
 8003b34:	9b01      	ldr	r3, [sp, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	b01d      	add	sp, #116	; 0x74
 8003b3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003b40:	b002      	add	sp, #8
 8003b42:	4770      	bx	lr

08003b44 <sprintf>:
 8003b44:	b40e      	push	{r1, r2, r3}
 8003b46:	b570      	push	{r4, r5, r6, lr}
 8003b48:	b09d      	sub	sp, #116	; 0x74
 8003b4a:	ac21      	add	r4, sp, #132	; 0x84
 8003b4c:	f240 03a0 	movw	r3, #160	; 0xa0
 8003b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b54:	f854 2b04 	ldr.w	r2, [r4], #4
 8003b58:	4606      	mov	r6, r0
 8003b5a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	9503      	str	r5, [sp, #12]
 8003b62:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003b66:	f8ad 3010 	strh.w	r3, [sp, #16]
 8003b6a:	9506      	str	r5, [sp, #24]
 8003b6c:	4623      	mov	r3, r4
 8003b6e:	a901      	add	r1, sp, #4
 8003b70:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003b74:	9601      	str	r6, [sp, #4]
 8003b76:	9605      	str	r6, [sp, #20]
 8003b78:	f8ad 5012 	strh.w	r5, [sp, #18]
 8003b7c:	941b      	str	r4, [sp, #108]	; 0x6c
 8003b7e:	f000 f809 	bl	8003b94 <_svfprintf_r>
 8003b82:	9b01      	ldr	r3, [sp, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	b01d      	add	sp, #116	; 0x74
 8003b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003b8e:	b003      	add	sp, #12
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop

08003b94 <_svfprintf_r>:
 8003b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b98:	b0c5      	sub	sp, #276	; 0x114
 8003b9a:	468a      	mov	sl, r1
 8003b9c:	4614      	mov	r4, r2
 8003b9e:	930e      	str	r3, [sp, #56]	; 0x38
 8003ba0:	900f      	str	r0, [sp, #60]	; 0x3c
 8003ba2:	f002 fa5d 	bl	8006060 <_localeconv_r>
 8003ba6:	6800      	ldr	r0, [r0, #0]
 8003ba8:	9017      	str	r0, [sp, #92]	; 0x5c
 8003baa:	f003 fb33 	bl	8007214 <strlen>
 8003bae:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003bb2:	901a      	str	r0, [sp, #104]	; 0x68
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	061a      	lsls	r2, r3, #24
 8003bba:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8003bbe:	d504      	bpl.n	8003bca <_svfprintf_r+0x36>
 8003bc0:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f001 8004 	beq.w	8004bd2 <_svfprintf_r+0x103e>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f10d 00e3 	add.w	r0, sp, #227	; 0xe3
 8003bd0:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8003bd4:	a91f      	add	r1, sp, #124	; 0x7c
 8003bd6:	9310      	str	r3, [sp, #64]	; 0x40
 8003bd8:	933b      	str	r3, [sp, #236]	; 0xec
 8003bda:	933a      	str	r3, [sp, #232]	; 0xe8
 8003bdc:	931c      	str	r3, [sp, #112]	; 0x70
 8003bde:	931b      	str	r3, [sp, #108]	; 0x6c
 8003be0:	930c      	str	r3, [sp, #48]	; 0x30
 8003be2:	ebc0 030b 	rsb	r3, r0, fp
 8003be6:	9007      	str	r0, [sp, #28]
 8003be8:	9139      	str	r1, [sp, #228]	; 0xe4
 8003bea:	9409      	str	r4, [sp, #36]	; 0x24
 8003bec:	460e      	mov	r6, r1
 8003bee:	931d      	str	r3, [sp, #116]	; 0x74
 8003bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bf2:	7803      	ldrb	r3, [r0, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	bf18      	it	ne
 8003bf8:	2b25      	cmpne	r3, #37	; 0x25
 8003bfa:	f000 80af 	beq.w	8003d5c <_svfprintf_r+0x1c8>
 8003bfe:	4607      	mov	r7, r0
 8003c00:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8003c04:	2b25      	cmp	r3, #37	; 0x25
 8003c06:	bf18      	it	ne
 8003c08:	2b00      	cmpne	r3, #0
 8003c0a:	d1f9      	bne.n	8003c00 <_svfprintf_r+0x6c>
 8003c0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c0e:	ebb7 0801 	subs.w	r8, r7, r1
 8003c12:	d00e      	beq.n	8003c32 <_svfprintf_r+0x9e>
 8003c14:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003c16:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003c18:	6031      	str	r1, [r6, #0]
 8003c1a:	3401      	adds	r4, #1
 8003c1c:	4445      	add	r5, r8
 8003c1e:	2c07      	cmp	r4, #7
 8003c20:	f8c6 8004 	str.w	r8, [r6, #4]
 8003c24:	953b      	str	r5, [sp, #236]	; 0xec
 8003c26:	943a      	str	r4, [sp, #232]	; 0xe8
 8003c28:	dc7c      	bgt.n	8003d24 <_svfprintf_r+0x190>
 8003c2a:	3608      	adds	r6, #8
 8003c2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c2e:	4442      	add	r2, r8
 8003c30:	920c      	str	r2, [sp, #48]	; 0x30
 8003c32:	783b      	ldrb	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d07d      	beq.n	8003d34 <_svfprintf_r+0x1a0>
 8003c38:	3701      	adds	r7, #1
 8003c3a:	9709      	str	r7, [sp, #36]	; 0x24
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c42:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8003c46:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003c4a:	9308      	str	r3, [sp, #32]
 8003c4c:	2720      	movs	r7, #32
 8003c4e:	252b      	movs	r5, #43	; 0x2b
 8003c50:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003c54:	f1a3 0220 	sub.w	r2, r3, #32
 8003c58:	2a58      	cmp	r2, #88	; 0x58
 8003c5a:	f200 823b 	bhi.w	80040d4 <_svfprintf_r+0x540>
 8003c5e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003c62:	024c      	.short	0x024c
 8003c64:	02390239 	.word	0x02390239
 8003c68:	02390254 	.word	0x02390254
 8003c6c:	02390239 	.word	0x02390239
 8003c70:	02390239 	.word	0x02390239
 8003c74:	02590239 	.word	0x02590239
 8003c78:	0239007f 	.word	0x0239007f
 8003c7c:	0082005c 	.word	0x0082005c
 8003c80:	009d0239 	.word	0x009d0239
 8003c84:	00a200a2 	.word	0x00a200a2
 8003c88:	00a200a2 	.word	0x00a200a2
 8003c8c:	00a200a2 	.word	0x00a200a2
 8003c90:	00a200a2 	.word	0x00a200a2
 8003c94:	023900a2 	.word	0x023900a2
 8003c98:	02390239 	.word	0x02390239
 8003c9c:	02390239 	.word	0x02390239
 8003ca0:	02390239 	.word	0x02390239
 8003ca4:	02390239 	.word	0x02390239
 8003ca8:	00b50239 	.word	0x00b50239
 8003cac:	02390154 	.word	0x02390154
 8003cb0:	02390154 	.word	0x02390154
 8003cb4:	02390239 	.word	0x02390239
 8003cb8:	018b0239 	.word	0x018b0239
 8003cbc:	02390239 	.word	0x02390239
 8003cc0:	02390190 	.word	0x02390190
 8003cc4:	02390239 	.word	0x02390239
 8003cc8:	02390239 	.word	0x02390239
 8003ccc:	023901a7 	.word	0x023901a7
 8003cd0:	01ba0239 	.word	0x01ba0239
 8003cd4:	02390239 	.word	0x02390239
 8003cd8:	02390239 	.word	0x02390239
 8003cdc:	02390239 	.word	0x02390239
 8003ce0:	02390239 	.word	0x02390239
 8003ce4:	02390239 	.word	0x02390239
 8003ce8:	02780293 	.word	0x02780293
 8003cec:	01540154 	.word	0x01540154
 8003cf0:	028e0154 	.word	0x028e0154
 8003cf4:	02390278 	.word	0x02390278
 8003cf8:	02130239 	.word	0x02130239
 8003cfc:	02180239 	.word	0x02180239
 8003d00:	02a50224 	.word	0x02a50224
 8003d04:	023901de 	.word	0x023901de
 8003d08:	023901e3 	.word	0x023901e3
 8003d0c:	02390264 	.word	0x02390264
 8003d10:	02c70239 	.word	0x02c70239
 8003d14:	4252      	negs	r2, r2
 8003d16:	920b      	str	r2, [sp, #44]	; 0x2c
 8003d18:	930e      	str	r3, [sp, #56]	; 0x38
 8003d1a:	9b08      	ldr	r3, [sp, #32]
 8003d1c:	f043 0304 	orr.w	r3, r3, #4
 8003d20:	9308      	str	r3, [sp, #32]
 8003d22:	e795      	b.n	8003c50 <_svfprintf_r+0xbc>
 8003d24:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003d26:	4651      	mov	r1, sl
 8003d28:	465a      	mov	r2, fp
 8003d2a:	f003 faa3 	bl	8007274 <__ssprint_r>
 8003d2e:	b940      	cbnz	r0, 8003d42 <_svfprintf_r+0x1ae>
 8003d30:	ae1f      	add	r6, sp, #124	; 0x7c
 8003d32:	e77b      	b.n	8003c2c <_svfprintf_r+0x98>
 8003d34:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8003d36:	b123      	cbz	r3, 8003d42 <_svfprintf_r+0x1ae>
 8003d38:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003d3a:	4651      	mov	r1, sl
 8003d3c:	aa39      	add	r2, sp, #228	; 0xe4
 8003d3e:	f003 fa99 	bl	8007274 <__ssprint_r>
 8003d42:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003d46:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d4c:	bf18      	it	ne
 8003d4e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8003d52:	930c      	str	r3, [sp, #48]	; 0x30
 8003d54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003d56:	b045      	add	sp, #276	; 0x114
 8003d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d5c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003d5e:	e768      	b.n	8003c32 <_svfprintf_r+0x9e>
 8003d60:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8003d64:	e774      	b.n	8003c50 <_svfprintf_r+0xbc>
 8003d66:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003d6a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d6c:	f001 804c 	beq.w	8004e08 <_svfprintf_r+0x1274>
 8003d70:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003d74:	2400      	movs	r4, #0
 8003d76:	2a09      	cmp	r2, #9
 8003d78:	f63f af6c 	bhi.w	8003c54 <_svfprintf_r+0xc0>
 8003d7c:	4601      	mov	r1, r0
 8003d7e:	2400      	movs	r4, #0
 8003d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d84:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003d88:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8003d8c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003d90:	2a09      	cmp	r2, #9
 8003d92:	4608      	mov	r0, r1
 8003d94:	d9f4      	bls.n	8003d80 <_svfprintf_r+0x1ec>
 8003d96:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8003d9a:	e75b      	b.n	8003c54 <_svfprintf_r+0xc0>
 8003d9c:	9a08      	ldr	r2, [sp, #32]
 8003d9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003da2:	9208      	str	r2, [sp, #32]
 8003da4:	e754      	b.n	8003c50 <_svfprintf_r+0xbc>
 8003da6:	4601      	mov	r1, r0
 8003da8:	2200      	movs	r2, #0
 8003daa:	46b4      	mov	ip, r6
 8003dac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8003db0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003db4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8003db8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003dbc:	2e09      	cmp	r6, #9
 8003dbe:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003dc2:	4608      	mov	r0, r1
 8003dc4:	d9f2      	bls.n	8003dac <_svfprintf_r+0x218>
 8003dc6:	4666      	mov	r6, ip
 8003dc8:	920b      	str	r2, [sp, #44]	; 0x2c
 8003dca:	e743      	b.n	8003c54 <_svfprintf_r+0xc0>
 8003dcc:	9315      	str	r3, [sp, #84]	; 0x54
 8003dce:	9b08      	ldr	r3, [sp, #32]
 8003dd0:	9009      	str	r0, [sp, #36]	; 0x24
 8003dd2:	f043 0310 	orr.w	r3, r3, #16
 8003dd6:	9308      	str	r3, [sp, #32]
 8003dd8:	9808      	ldr	r0, [sp, #32]
 8003dda:	06c3      	lsls	r3, r0, #27
 8003ddc:	f100 81bf 	bmi.w	800415e <_svfprintf_r+0x5ca>
 8003de0:	9a08      	ldr	r2, [sp, #32]
 8003de2:	0655      	lsls	r5, r2, #25
 8003de4:	f140 81bb 	bpl.w	800415e <_svfprintf_r+0x5ca>
 8003de8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003dea:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003dee:	3004      	adds	r0, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	900e      	str	r0, [sp, #56]	; 0x38
 8003df4:	f2c0 81ba 	blt.w	800416c <_svfprintf_r+0x5d8>
 8003df8:	bf0c      	ite	eq
 8003dfa:	2100      	moveq	r1, #0
 8003dfc:	2101      	movne	r1, #1
 8003dfe:	2201      	movs	r2, #1
 8003e00:	2c00      	cmp	r4, #0
 8003e02:	bfa2      	ittt	ge
 8003e04:	9808      	ldrge	r0, [sp, #32]
 8003e06:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8003e0a:	9008      	strge	r0, [sp, #32]
 8003e0c:	2c00      	cmp	r4, #0
 8003e0e:	bf18      	it	ne
 8003e10:	f041 0101 	orrne.w	r1, r1, #1
 8003e14:	2900      	cmp	r1, #0
 8003e16:	f000 8323 	beq.w	8004460 <_svfprintf_r+0x8cc>
 8003e1a:	2a01      	cmp	r2, #1
 8003e1c:	f000 845f 	beq.w	80046de <_svfprintf_r+0xb4a>
 8003e20:	2a02      	cmp	r2, #2
 8003e22:	bf18      	it	ne
 8003e24:	465a      	movne	r2, fp
 8003e26:	d102      	bne.n	8003e2e <_svfprintf_r+0x29a>
 8003e28:	f000 bc48 	b.w	80046bc <_svfprintf_r+0xb28>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	f003 0107 	and.w	r1, r3, #7
 8003e32:	3130      	adds	r1, #48	; 0x30
 8003e34:	1e50      	subs	r0, r2, #1
 8003e36:	08db      	lsrs	r3, r3, #3
 8003e38:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003e3c:	d1f6      	bne.n	8003e2c <_svfprintf_r+0x298>
 8003e3e:	9b08      	ldr	r3, [sp, #32]
 8003e40:	9011      	str	r0, [sp, #68]	; 0x44
 8003e42:	07dd      	lsls	r5, r3, #31
 8003e44:	d507      	bpl.n	8003e56 <_svfprintf_r+0x2c2>
 8003e46:	2930      	cmp	r1, #48	; 0x30
 8003e48:	f000 8733 	beq.w	8004cb2 <_svfprintf_r+0x111e>
 8003e4c:	1e90      	subs	r0, r2, #2
 8003e4e:	2330      	movs	r3, #48	; 0x30
 8003e50:	9011      	str	r0, [sp, #68]	; 0x44
 8003e52:	f802 3c02 	strb.w	r3, [r2, #-2]
 8003e56:	ebc0 030b 	rsb	r3, r0, fp
 8003e5a:	930d      	str	r3, [sp, #52]	; 0x34
 8003e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e5e:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003e62:	9412      	str	r4, [sp, #72]	; 0x48
 8003e64:	42a3      	cmp	r3, r4
 8003e66:	bfb8      	it	lt
 8003e68:	4623      	movlt	r3, r4
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8003e6e:	9016      	str	r0, [sp, #88]	; 0x58
 8003e70:	b111      	cbz	r1, 8003e78 <_svfprintf_r+0x2e4>
 8003e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e74:	3301      	adds	r3, #1
 8003e76:	930a      	str	r3, [sp, #40]	; 0x28
 8003e78:	9b08      	ldr	r3, [sp, #32]
 8003e7a:	f013 0302 	ands.w	r3, r3, #2
 8003e7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003e80:	d002      	beq.n	8003e88 <_svfprintf_r+0x2f4>
 8003e82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003e84:	3002      	adds	r0, #2
 8003e86:	900a      	str	r0, [sp, #40]	; 0x28
 8003e88:	9b08      	ldr	r3, [sp, #32]
 8003e8a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8003e8e:	9314      	str	r3, [sp, #80]	; 0x50
 8003e90:	f040 81bb 	bne.w	800420a <_svfprintf_r+0x676>
 8003e94:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003e96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003e98:	1a47      	subs	r7, r0, r1
 8003e9a:	2f00      	cmp	r7, #0
 8003e9c:	f340 81b5 	ble.w	800420a <_svfprintf_r+0x676>
 8003ea0:	2f10      	cmp	r7, #16
 8003ea2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003ea4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003ea6:	f8df 8344 	ldr.w	r8, [pc, #836]	; 80041ec <_svfprintf_r+0x658>
 8003eaa:	dd22      	ble.n	8003ef2 <_svfprintf_r+0x35e>
 8003eac:	4623      	mov	r3, r4
 8003eae:	f04f 0910 	mov.w	r9, #16
 8003eb2:	4644      	mov	r4, r8
 8003eb4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003eb8:	e003      	b.n	8003ec2 <_svfprintf_r+0x32e>
 8003eba:	3f10      	subs	r7, #16
 8003ebc:	3608      	adds	r6, #8
 8003ebe:	2f10      	cmp	r7, #16
 8003ec0:	dd15      	ble.n	8003eee <_svfprintf_r+0x35a>
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	3510      	adds	r5, #16
 8003ec6:	2b07      	cmp	r3, #7
 8003ec8:	e886 0210 	stmia.w	r6, {r4, r9}
 8003ecc:	953b      	str	r5, [sp, #236]	; 0xec
 8003ece:	933a      	str	r3, [sp, #232]	; 0xe8
 8003ed0:	ddf3      	ble.n	8003eba <_svfprintf_r+0x326>
 8003ed2:	4640      	mov	r0, r8
 8003ed4:	4651      	mov	r1, sl
 8003ed6:	465a      	mov	r2, fp
 8003ed8:	f003 f9cc 	bl	8007274 <__ssprint_r>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	f47f af30 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 8003ee2:	3f10      	subs	r7, #16
 8003ee4:	2f10      	cmp	r7, #16
 8003ee6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003ee8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003eea:	ae1f      	add	r6, sp, #124	; 0x7c
 8003eec:	dce9      	bgt.n	8003ec2 <_svfprintf_r+0x32e>
 8003eee:	46a0      	mov	r8, r4
 8003ef0:	461c      	mov	r4, r3
 8003ef2:	3401      	adds	r4, #1
 8003ef4:	19ed      	adds	r5, r5, r7
 8003ef6:	2c07      	cmp	r4, #7
 8003ef8:	f8c6 8000 	str.w	r8, [r6]
 8003efc:	6077      	str	r7, [r6, #4]
 8003efe:	953b      	str	r5, [sp, #236]	; 0xec
 8003f00:	943a      	str	r4, [sp, #232]	; 0xe8
 8003f02:	f300 8414 	bgt.w	800472e <_svfprintf_r+0xb9a>
 8003f06:	3608      	adds	r6, #8
 8003f08:	e180      	b.n	800420c <_svfprintf_r+0x678>
 8003f0a:	9009      	str	r0, [sp, #36]	; 0x24
 8003f0c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003f0e:	9315      	str	r3, [sp, #84]	; 0x54
 8003f10:	1dc3      	adds	r3, r0, #7
 8003f12:	f023 0307 	bic.w	r3, r3, #7
 8003f16:	f103 0108 	add.w	r1, r3, #8
 8003f1a:	910e      	str	r1, [sp, #56]	; 0x38
 8003f1c:	f8d3 8000 	ldr.w	r8, [r3]
 8003f20:	685d      	ldr	r5, [r3, #4]
 8003f22:	4642      	mov	r2, r8
 8003f24:	462b      	mov	r3, r5
 8003f26:	4629      	mov	r1, r5
 8003f28:	4640      	mov	r0, r8
 8003f2a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8003f2e:	f003 f839 	bl	8006fa4 <__fpclassifyd>
 8003f32:	2801      	cmp	r0, #1
 8003f34:	4629      	mov	r1, r5
 8003f36:	4640      	mov	r0, r8
 8003f38:	f040 84d0 	bne.w	80048dc <_svfprintf_r+0xd48>
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f004 fd60 	bl	8008a04 <__aeabi_dcmplt>
 8003f44:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003f48:	b110      	cbz	r0, 8003f50 <_svfprintf_r+0x3bc>
 8003f4a:	212d      	movs	r1, #45	; 0x2d
 8003f4c:	f88d 110f 	strb.w	r1, [sp, #271]	; 0x10f
 8003f50:	2303      	movs	r3, #3
 8003f52:	930a      	str	r3, [sp, #40]	; 0x28
 8003f54:	2300      	movs	r3, #0
 8003f56:	9312      	str	r3, [sp, #72]	; 0x48
 8003f58:	4aa0      	ldr	r2, [pc, #640]	; (80041dc <_svfprintf_r+0x648>)
 8003f5a:	4ba1      	ldr	r3, [pc, #644]	; (80041e0 <_svfprintf_r+0x64c>)
 8003f5c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003f5e:	2847      	cmp	r0, #71	; 0x47
 8003f60:	bfd8      	it	le
 8003f62:	461a      	movle	r2, r3
 8003f64:	9211      	str	r2, [sp, #68]	; 0x44
 8003f66:	9a08      	ldr	r2, [sp, #32]
 8003f68:	2303      	movs	r3, #3
 8003f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f6e:	930d      	str	r3, [sp, #52]	; 0x34
 8003f70:	2300      	movs	r3, #0
 8003f72:	9208      	str	r2, [sp, #32]
 8003f74:	9316      	str	r3, [sp, #88]	; 0x58
 8003f76:	e77b      	b.n	8003e70 <_svfprintf_r+0x2dc>
 8003f78:	9b08      	ldr	r3, [sp, #32]
 8003f7a:	f043 0308 	orr.w	r3, r3, #8
 8003f7e:	9308      	str	r3, [sp, #32]
 8003f80:	e666      	b.n	8003c50 <_svfprintf_r+0xbc>
 8003f82:	9908      	ldr	r1, [sp, #32]
 8003f84:	9009      	str	r0, [sp, #36]	; 0x24
 8003f86:	f041 0110 	orr.w	r1, r1, #16
 8003f8a:	9108      	str	r1, [sp, #32]
 8003f8c:	9a08      	ldr	r2, [sp, #32]
 8003f8e:	9315      	str	r3, [sp, #84]	; 0x54
 8003f90:	f012 0110 	ands.w	r1, r2, #16
 8003f94:	f000 8090 	beq.w	80040b8 <_svfprintf_r+0x524>
 8003f98:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003f9a:	6803      	ldr	r3, [r0, #0]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	1a99      	subs	r1, r3, r2
 8003fa0:	bf18      	it	ne
 8003fa2:	2101      	movne	r1, #1
 8003fa4:	3004      	adds	r0, #4
 8003fa6:	900e      	str	r0, [sp, #56]	; 0x38
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f88d 010f 	strb.w	r0, [sp, #271]	; 0x10f
 8003fae:	e727      	b.n	8003e00 <_svfprintf_r+0x26c>
 8003fb0:	9908      	ldr	r1, [sp, #32]
 8003fb2:	9009      	str	r0, [sp, #36]	; 0x24
 8003fb4:	f041 0110 	orr.w	r1, r1, #16
 8003fb8:	9108      	str	r1, [sp, #32]
 8003fba:	9a08      	ldr	r2, [sp, #32]
 8003fbc:	9315      	str	r3, [sp, #84]	; 0x54
 8003fbe:	06d0      	lsls	r0, r2, #27
 8003fc0:	f140 80b9 	bpl.w	8004136 <_svfprintf_r+0x5a2>
 8003fc4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003fc6:	6803      	ldr	r3, [r0, #0]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	1c19      	adds	r1, r3, #0
 8003fcc:	bf18      	it	ne
 8003fce:	2101      	movne	r1, #1
 8003fd0:	3004      	adds	r0, #4
 8003fd2:	900e      	str	r0, [sp, #56]	; 0x38
 8003fd4:	e7e8      	b.n	8003fa8 <_svfprintf_r+0x414>
 8003fd6:	4a83      	ldr	r2, [pc, #524]	; (80041e4 <_svfprintf_r+0x650>)
 8003fd8:	9315      	str	r3, [sp, #84]	; 0x54
 8003fda:	9b08      	ldr	r3, [sp, #32]
 8003fdc:	921c      	str	r2, [sp, #112]	; 0x70
 8003fde:	06da      	lsls	r2, r3, #27
 8003fe0:	9009      	str	r0, [sp, #36]	; 0x24
 8003fe2:	f100 810d 	bmi.w	8004200 <_svfprintf_r+0x66c>
 8003fe6:	9908      	ldr	r1, [sp, #32]
 8003fe8:	064b      	lsls	r3, r1, #25
 8003fea:	f140 8109 	bpl.w	8004200 <_svfprintf_r+0x66c>
 8003fee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ff0:	8813      	ldrh	r3, [r2, #0]
 8003ff2:	3204      	adds	r2, #4
 8003ff4:	920e      	str	r2, [sp, #56]	; 0x38
 8003ff6:	1c19      	adds	r1, r3, #0
 8003ff8:	9a08      	ldr	r2, [sp, #32]
 8003ffa:	bf18      	it	ne
 8003ffc:	2101      	movne	r1, #1
 8003ffe:	420a      	tst	r2, r1
 8004000:	f000 83ca 	beq.w	8004798 <_svfprintf_r+0xc04>
 8004004:	9908      	ldr	r1, [sp, #32]
 8004006:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004008:	2230      	movs	r2, #48	; 0x30
 800400a:	f041 0102 	orr.w	r1, r1, #2
 800400e:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8004012:	9108      	str	r1, [sp, #32]
 8004014:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8004018:	2101      	movs	r1, #1
 800401a:	2202      	movs	r2, #2
 800401c:	e7c4      	b.n	8003fa8 <_svfprintf_r+0x414>
 800401e:	9b08      	ldr	r3, [sp, #32]
 8004020:	f043 0310 	orr.w	r3, r3, #16
 8004024:	9308      	str	r3, [sp, #32]
 8004026:	e613      	b.n	8003c50 <_svfprintf_r+0xbc>
 8004028:	2500      	movs	r5, #0
 800402a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800402c:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8004030:	9315      	str	r3, [sp, #84]	; 0x54
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004036:	9009      	str	r0, [sp, #36]	; 0x24
 8004038:	9211      	str	r2, [sp, #68]	; 0x44
 800403a:	1d1f      	adds	r7, r3, #4
 800403c:	2a00      	cmp	r2, #0
 800403e:	f000 864b 	beq.w	8004cd8 <_svfprintf_r+0x1144>
 8004042:	2c00      	cmp	r4, #0
 8004044:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004046:	f2c0 8602 	blt.w	8004c4e <_svfprintf_r+0x10ba>
 800404a:	4629      	mov	r1, r5
 800404c:	4622      	mov	r2, r4
 800404e:	f002 facf 	bl	80065f0 <memchr>
 8004052:	2800      	cmp	r0, #0
 8004054:	f000 866f 	beq.w	8004d36 <_svfprintf_r+0x11a2>
 8004058:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800405a:	9512      	str	r5, [sp, #72]	; 0x48
 800405c:	1ac0      	subs	r0, r0, r3
 800405e:	42a0      	cmp	r0, r4
 8004060:	900d      	str	r0, [sp, #52]	; 0x34
 8004062:	bfd1      	iteee	le
 8004064:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 8004066:	f89d 110f 	ldrbgt.w	r1, [sp, #271]	; 0x10f
 800406a:	970e      	strgt	r7, [sp, #56]	; 0x38
 800406c:	ea24 70e4 	bicgt.w	r0, r4, r4, asr #31
 8004070:	bfd3      	iteet	le
 8004072:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8004076:	900a      	strgt	r0, [sp, #40]	; 0x28
 8004078:	940d      	strgt	r4, [sp, #52]	; 0x34
 800407a:	930a      	strle	r3, [sp, #40]	; 0x28
 800407c:	bfdc      	itt	le
 800407e:	f89d 110f 	ldrble.w	r1, [sp, #271]	; 0x10f
 8004082:	970e      	strle	r7, [sp, #56]	; 0x38
 8004084:	9516      	str	r5, [sp, #88]	; 0x58
 8004086:	e6f3      	b.n	8003e70 <_svfprintf_r+0x2dc>
 8004088:	9a08      	ldr	r2, [sp, #32]
 800408a:	f042 0210 	orr.w	r2, r2, #16
 800408e:	9208      	str	r2, [sp, #32]
 8004090:	e5de      	b.n	8003c50 <_svfprintf_r+0xbc>
 8004092:	9009      	str	r0, [sp, #36]	; 0x24
 8004094:	9808      	ldr	r0, [sp, #32]
 8004096:	06c3      	lsls	r3, r0, #27
 8004098:	f140 843f 	bpl.w	800491a <_svfprintf_r+0xd86>
 800409c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800409e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040a0:	680b      	ldr	r3, [r1, #0]
 80040a2:	3104      	adds	r1, #4
 80040a4:	910e      	str	r1, [sp, #56]	; 0x38
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	e5a2      	b.n	8003bf0 <_svfprintf_r+0x5c>
 80040aa:	9a08      	ldr	r2, [sp, #32]
 80040ac:	9009      	str	r0, [sp, #36]	; 0x24
 80040ae:	f012 0110 	ands.w	r1, r2, #16
 80040b2:	9315      	str	r3, [sp, #84]	; 0x54
 80040b4:	f47f af70 	bne.w	8003f98 <_svfprintf_r+0x404>
 80040b8:	9b08      	ldr	r3, [sp, #32]
 80040ba:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 80040be:	f000 8437 	beq.w	8004930 <_svfprintf_r+0xd9c>
 80040c2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80040c4:	8803      	ldrh	r3, [r0, #0]
 80040c6:	460a      	mov	r2, r1
 80040c8:	1c19      	adds	r1, r3, #0
 80040ca:	bf18      	it	ne
 80040cc:	2101      	movne	r1, #1
 80040ce:	3004      	adds	r0, #4
 80040d0:	900e      	str	r0, [sp, #56]	; 0x38
 80040d2:	e769      	b.n	8003fa8 <_svfprintf_r+0x414>
 80040d4:	9009      	str	r0, [sp, #36]	; 0x24
 80040d6:	9315      	str	r3, [sp, #84]	; 0x54
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f43f ae2b 	beq.w	8003d34 <_svfprintf_r+0x1a0>
 80040de:	2101      	movs	r1, #1
 80040e0:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 80040e4:	aa2f      	add	r2, sp, #188	; 0xbc
 80040e6:	2300      	movs	r3, #0
 80040e8:	910a      	str	r1, [sp, #40]	; 0x28
 80040ea:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 80040ee:	910d      	str	r1, [sp, #52]	; 0x34
 80040f0:	9211      	str	r2, [sp, #68]	; 0x44
 80040f2:	2300      	movs	r3, #0
 80040f4:	9312      	str	r3, [sp, #72]	; 0x48
 80040f6:	9316      	str	r3, [sp, #88]	; 0x58
 80040f8:	e6be      	b.n	8003e78 <_svfprintf_r+0x2e4>
 80040fa:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f47f ada6 	bne.w	8003c50 <_svfprintf_r+0xbc>
 8004104:	f88d 710f 	strb.w	r7, [sp, #271]	; 0x10f
 8004108:	e5a2      	b.n	8003c50 <_svfprintf_r+0xbc>
 800410a:	9a08      	ldr	r2, [sp, #32]
 800410c:	f042 0201 	orr.w	r2, r2, #1
 8004110:	9208      	str	r2, [sp, #32]
 8004112:	e59d      	b.n	8003c50 <_svfprintf_r+0xbc>
 8004114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004116:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	930b      	str	r3, [sp, #44]	; 0x2c
 800411c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800411e:	1d0b      	adds	r3, r1, #4
 8004120:	2a00      	cmp	r2, #0
 8004122:	f6ff adf7 	blt.w	8003d14 <_svfprintf_r+0x180>
 8004126:	930e      	str	r3, [sp, #56]	; 0x38
 8004128:	e592      	b.n	8003c50 <_svfprintf_r+0xbc>
 800412a:	9a08      	ldr	r2, [sp, #32]
 800412c:	9009      	str	r0, [sp, #36]	; 0x24
 800412e:	06d0      	lsls	r0, r2, #27
 8004130:	9315      	str	r3, [sp, #84]	; 0x54
 8004132:	f53f af47 	bmi.w	8003fc4 <_svfprintf_r+0x430>
 8004136:	9908      	ldr	r1, [sp, #32]
 8004138:	0649      	lsls	r1, r1, #25
 800413a:	f140 83ea 	bpl.w	8004912 <_svfprintf_r+0xd7e>
 800413e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004140:	8813      	ldrh	r3, [r2, #0]
 8004142:	2201      	movs	r2, #1
 8004144:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004146:	1c19      	adds	r1, r3, #0
 8004148:	bf18      	it	ne
 800414a:	2101      	movne	r1, #1
 800414c:	3004      	adds	r0, #4
 800414e:	900e      	str	r0, [sp, #56]	; 0x38
 8004150:	e72a      	b.n	8003fa8 <_svfprintf_r+0x414>
 8004152:	9009      	str	r0, [sp, #36]	; 0x24
 8004154:	9808      	ldr	r0, [sp, #32]
 8004156:	9315      	str	r3, [sp, #84]	; 0x54
 8004158:	06c3      	lsls	r3, r0, #27
 800415a:	f57f ae41 	bpl.w	8003de0 <_svfprintf_r+0x24c>
 800415e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004160:	680b      	ldr	r3, [r1, #0]
 8004162:	3104      	adds	r1, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	910e      	str	r1, [sp, #56]	; 0x38
 8004168:	f6bf ae46 	bge.w	8003df8 <_svfprintf_r+0x264>
 800416c:	425b      	negs	r3, r3
 800416e:	222d      	movs	r2, #45	; 0x2d
 8004170:	1c19      	adds	r1, r3, #0
 8004172:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8004176:	bf18      	it	ne
 8004178:	2101      	movne	r1, #1
 800417a:	2201      	movs	r2, #1
 800417c:	e640      	b.n	8003e00 <_svfprintf_r+0x26c>
 800417e:	9908      	ldr	r1, [sp, #32]
 8004180:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004184:	9108      	str	r1, [sp, #32]
 8004186:	e563      	b.n	8003c50 <_svfprintf_r+0xbc>
 8004188:	9315      	str	r3, [sp, #84]	; 0x54
 800418a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800418c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	9009      	str	r0, [sp, #36]	; 0x24
 8004192:	2200      	movs	r2, #0
 8004194:	2001      	movs	r0, #1
 8004196:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 800419a:	3104      	adds	r1, #4
 800419c:	aa2f      	add	r2, sp, #188	; 0xbc
 800419e:	900a      	str	r0, [sp, #40]	; 0x28
 80041a0:	910e      	str	r1, [sp, #56]	; 0x38
 80041a2:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 80041a6:	900d      	str	r0, [sp, #52]	; 0x34
 80041a8:	9211      	str	r2, [sp, #68]	; 0x44
 80041aa:	e7a2      	b.n	80040f2 <_svfprintf_r+0x55e>
 80041ac:	490e      	ldr	r1, [pc, #56]	; (80041e8 <_svfprintf_r+0x654>)
 80041ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041b2:	911c      	str	r1, [sp, #112]	; 0x70
 80041b4:	9908      	ldr	r1, [sp, #32]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	9009      	str	r0, [sp, #36]	; 0x24
 80041ba:	3204      	adds	r2, #4
 80041bc:	f041 0102 	orr.w	r1, r1, #2
 80041c0:	2078      	movs	r0, #120	; 0x78
 80041c2:	920e      	str	r2, [sp, #56]	; 0x38
 80041c4:	9108      	str	r1, [sp, #32]
 80041c6:	2230      	movs	r2, #48	; 0x30
 80041c8:	1c19      	adds	r1, r3, #0
 80041ca:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 80041ce:	bf18      	it	ne
 80041d0:	2101      	movne	r1, #1
 80041d2:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 80041d6:	2202      	movs	r2, #2
 80041d8:	9015      	str	r0, [sp, #84]	; 0x54
 80041da:	e6e5      	b.n	8003fa8 <_svfprintf_r+0x414>
 80041dc:	0800908c 	.word	0x0800908c
 80041e0:	08009088 	.word	0x08009088
 80041e4:	08009098 	.word	0x08009098
 80041e8:	080090ac 	.word	0x080090ac
 80041ec:	08008df0 	.word	0x08008df0
 80041f0:	9315      	str	r3, [sp, #84]	; 0x54
 80041f2:	9b08      	ldr	r3, [sp, #32]
 80041f4:	49a4      	ldr	r1, [pc, #656]	; (8004488 <_svfprintf_r+0x8f4>)
 80041f6:	9009      	str	r0, [sp, #36]	; 0x24
 80041f8:	06da      	lsls	r2, r3, #27
 80041fa:	911c      	str	r1, [sp, #112]	; 0x70
 80041fc:	f57f aef3 	bpl.w	8003fe6 <_svfprintf_r+0x452>
 8004200:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004202:	6803      	ldr	r3, [r0, #0]
 8004204:	3004      	adds	r0, #4
 8004206:	900e      	str	r0, [sp, #56]	; 0x38
 8004208:	e6f5      	b.n	8003ff6 <_svfprintf_r+0x462>
 800420a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800420c:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8004210:	b16b      	cbz	r3, 800422e <_svfprintf_r+0x69a>
 8004212:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004214:	f20d 130f 	addw	r3, sp, #271	; 0x10f
 8004218:	3401      	adds	r4, #1
 800421a:	6033      	str	r3, [r6, #0]
 800421c:	3501      	adds	r5, #1
 800421e:	2301      	movs	r3, #1
 8004220:	2c07      	cmp	r4, #7
 8004222:	6073      	str	r3, [r6, #4]
 8004224:	953b      	str	r5, [sp, #236]	; 0xec
 8004226:	943a      	str	r4, [sp, #232]	; 0xe8
 8004228:	f300 81f5 	bgt.w	8004616 <_svfprintf_r+0xa82>
 800422c:	3608      	adds	r6, #8
 800422e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004230:	b163      	cbz	r3, 800424c <_svfprintf_r+0x6b8>
 8004232:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004234:	ab43      	add	r3, sp, #268	; 0x10c
 8004236:	3401      	adds	r4, #1
 8004238:	6033      	str	r3, [r6, #0]
 800423a:	3502      	adds	r5, #2
 800423c:	2302      	movs	r3, #2
 800423e:	2c07      	cmp	r4, #7
 8004240:	6073      	str	r3, [r6, #4]
 8004242:	953b      	str	r5, [sp, #236]	; 0xec
 8004244:	943a      	str	r4, [sp, #232]	; 0xe8
 8004246:	f300 81db 	bgt.w	8004600 <_svfprintf_r+0xa6c>
 800424a:	3608      	adds	r6, #8
 800424c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800424e:	2b80      	cmp	r3, #128	; 0x80
 8004250:	f000 8122 	beq.w	8004498 <_svfprintf_r+0x904>
 8004254:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004258:	1ac7      	subs	r7, r0, r3
 800425a:	2f00      	cmp	r7, #0
 800425c:	dd32      	ble.n	80042c4 <_svfprintf_r+0x730>
 800425e:	2f10      	cmp	r7, #16
 8004260:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004262:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8004490 <_svfprintf_r+0x8fc>
 8004266:	dd22      	ble.n	80042ae <_svfprintf_r+0x71a>
 8004268:	4623      	mov	r3, r4
 800426a:	f04f 0910 	mov.w	r9, #16
 800426e:	4644      	mov	r4, r8
 8004270:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004274:	e003      	b.n	800427e <_svfprintf_r+0x6ea>
 8004276:	3f10      	subs	r7, #16
 8004278:	3608      	adds	r6, #8
 800427a:	2f10      	cmp	r7, #16
 800427c:	dd15      	ble.n	80042aa <_svfprintf_r+0x716>
 800427e:	3301      	adds	r3, #1
 8004280:	3510      	adds	r5, #16
 8004282:	2b07      	cmp	r3, #7
 8004284:	e886 0210 	stmia.w	r6, {r4, r9}
 8004288:	953b      	str	r5, [sp, #236]	; 0xec
 800428a:	933a      	str	r3, [sp, #232]	; 0xe8
 800428c:	ddf3      	ble.n	8004276 <_svfprintf_r+0x6e2>
 800428e:	4640      	mov	r0, r8
 8004290:	4651      	mov	r1, sl
 8004292:	465a      	mov	r2, fp
 8004294:	f002 ffee 	bl	8007274 <__ssprint_r>
 8004298:	2800      	cmp	r0, #0
 800429a:	f47f ad52 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 800429e:	3f10      	subs	r7, #16
 80042a0:	2f10      	cmp	r7, #16
 80042a2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042a4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80042a6:	ae1f      	add	r6, sp, #124	; 0x7c
 80042a8:	dce9      	bgt.n	800427e <_svfprintf_r+0x6ea>
 80042aa:	46a0      	mov	r8, r4
 80042ac:	461c      	mov	r4, r3
 80042ae:	3401      	adds	r4, #1
 80042b0:	19ed      	adds	r5, r5, r7
 80042b2:	2c07      	cmp	r4, #7
 80042b4:	f8c6 8000 	str.w	r8, [r6]
 80042b8:	6077      	str	r7, [r6, #4]
 80042ba:	953b      	str	r5, [sp, #236]	; 0xec
 80042bc:	943a      	str	r4, [sp, #232]	; 0xe8
 80042be:	f300 8194 	bgt.w	80045ea <_svfprintf_r+0xa56>
 80042c2:	3608      	adds	r6, #8
 80042c4:	9908      	ldr	r1, [sp, #32]
 80042c6:	05ca      	lsls	r2, r1, #23
 80042c8:	d472      	bmi.n	80043b0 <_svfprintf_r+0x81c>
 80042ca:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80042cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80042d0:	6073      	str	r3, [r6, #4]
 80042d2:	3401      	adds	r4, #1
 80042d4:	18ed      	adds	r5, r5, r3
 80042d6:	2c07      	cmp	r4, #7
 80042d8:	6032      	str	r2, [r6, #0]
 80042da:	953b      	str	r5, [sp, #236]	; 0xec
 80042dc:	943a      	str	r4, [sp, #232]	; 0xe8
 80042de:	dc5c      	bgt.n	800439a <_svfprintf_r+0x806>
 80042e0:	3608      	adds	r6, #8
 80042e2:	9908      	ldr	r1, [sp, #32]
 80042e4:	074b      	lsls	r3, r1, #29
 80042e6:	d53e      	bpl.n	8004366 <_svfprintf_r+0x7d2>
 80042e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042ec:	1ad7      	subs	r7, r2, r3
 80042ee:	2f00      	cmp	r7, #0
 80042f0:	dd39      	ble.n	8004366 <_svfprintf_r+0x7d2>
 80042f2:	2f10      	cmp	r7, #16
 80042f4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80042f6:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8004494 <_svfprintf_r+0x900>
 80042fa:	dd22      	ble.n	8004342 <_svfprintf_r+0x7ae>
 80042fc:	4623      	mov	r3, r4
 80042fe:	f04f 0910 	mov.w	r9, #16
 8004302:	4644      	mov	r4, r8
 8004304:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004308:	e003      	b.n	8004312 <_svfprintf_r+0x77e>
 800430a:	3f10      	subs	r7, #16
 800430c:	3608      	adds	r6, #8
 800430e:	2f10      	cmp	r7, #16
 8004310:	dd15      	ble.n	800433e <_svfprintf_r+0x7aa>
 8004312:	3301      	adds	r3, #1
 8004314:	3510      	adds	r5, #16
 8004316:	2b07      	cmp	r3, #7
 8004318:	e886 0210 	stmia.w	r6, {r4, r9}
 800431c:	953b      	str	r5, [sp, #236]	; 0xec
 800431e:	933a      	str	r3, [sp, #232]	; 0xe8
 8004320:	ddf3      	ble.n	800430a <_svfprintf_r+0x776>
 8004322:	4640      	mov	r0, r8
 8004324:	4651      	mov	r1, sl
 8004326:	465a      	mov	r2, fp
 8004328:	f002 ffa4 	bl	8007274 <__ssprint_r>
 800432c:	2800      	cmp	r0, #0
 800432e:	f47f ad08 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 8004332:	3f10      	subs	r7, #16
 8004334:	2f10      	cmp	r7, #16
 8004336:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004338:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800433a:	ae1f      	add	r6, sp, #124	; 0x7c
 800433c:	dce9      	bgt.n	8004312 <_svfprintf_r+0x77e>
 800433e:	46a0      	mov	r8, r4
 8004340:	461c      	mov	r4, r3
 8004342:	3401      	adds	r4, #1
 8004344:	197d      	adds	r5, r7, r5
 8004346:	2c07      	cmp	r4, #7
 8004348:	f8c6 8000 	str.w	r8, [r6]
 800434c:	6077      	str	r7, [r6, #4]
 800434e:	953b      	str	r5, [sp, #236]	; 0xec
 8004350:	943a      	str	r4, [sp, #232]	; 0xe8
 8004352:	dd08      	ble.n	8004366 <_svfprintf_r+0x7d2>
 8004354:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004356:	4651      	mov	r1, sl
 8004358:	465a      	mov	r2, fp
 800435a:	f002 ff8b 	bl	8007274 <__ssprint_r>
 800435e:	2800      	cmp	r0, #0
 8004360:	f47f acef 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 8004364:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004366:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800436a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800436c:	428a      	cmp	r2, r1
 800436e:	bfac      	ite	ge
 8004370:	1880      	addge	r0, r0, r2
 8004372:	1840      	addlt	r0, r0, r1
 8004374:	900c      	str	r0, [sp, #48]	; 0x30
 8004376:	2d00      	cmp	r5, #0
 8004378:	f040 8129 	bne.w	80045ce <_svfprintf_r+0xa3a>
 800437c:	2300      	movs	r3, #0
 800437e:	933a      	str	r3, [sp, #232]	; 0xe8
 8004380:	ae1f      	add	r6, sp, #124	; 0x7c
 8004382:	e435      	b.n	8003bf0 <_svfprintf_r+0x5c>
 8004384:	46a0      	mov	r8, r4
 8004386:	461c      	mov	r4, r3
 8004388:	3401      	adds	r4, #1
 800438a:	19ed      	adds	r5, r5, r7
 800438c:	2c07      	cmp	r4, #7
 800438e:	f8c6 8000 	str.w	r8, [r6]
 8004392:	6077      	str	r7, [r6, #4]
 8004394:	953b      	str	r5, [sp, #236]	; 0xec
 8004396:	943a      	str	r4, [sp, #232]	; 0xe8
 8004398:	dda2      	ble.n	80042e0 <_svfprintf_r+0x74c>
 800439a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800439c:	4651      	mov	r1, sl
 800439e:	465a      	mov	r2, fp
 80043a0:	f002 ff68 	bl	8007274 <__ssprint_r>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	f47f accc 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 80043aa:	ae1f      	add	r6, sp, #124	; 0x7c
 80043ac:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80043ae:	e798      	b.n	80042e2 <_svfprintf_r+0x74e>
 80043b0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80043b2:	2865      	cmp	r0, #101	; 0x65
 80043b4:	f340 80aa 	ble.w	800450c <_svfprintf_r+0x978>
 80043b8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80043bc:	2200      	movs	r2, #0
 80043be:	2300      	movs	r3, #0
 80043c0:	f004 fb16 	bl	80089f0 <__aeabi_dcmpeq>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	f000 8131 	beq.w	800462c <_svfprintf_r+0xa98>
 80043ca:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80043cc:	4b2f      	ldr	r3, [pc, #188]	; (800448c <_svfprintf_r+0x8f8>)
 80043ce:	3401      	adds	r4, #1
 80043d0:	6033      	str	r3, [r6, #0]
 80043d2:	3501      	adds	r5, #1
 80043d4:	2301      	movs	r3, #1
 80043d6:	2c07      	cmp	r4, #7
 80043d8:	6073      	str	r3, [r6, #4]
 80043da:	953b      	str	r5, [sp, #236]	; 0xec
 80043dc:	943a      	str	r4, [sp, #232]	; 0xe8
 80043de:	f300 82b8 	bgt.w	8004952 <_svfprintf_r+0xdbe>
 80043e2:	3608      	adds	r6, #8
 80043e4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80043e6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80043e8:	4299      	cmp	r1, r3
 80043ea:	dc03      	bgt.n	80043f4 <_svfprintf_r+0x860>
 80043ec:	9a08      	ldr	r2, [sp, #32]
 80043ee:	07d3      	lsls	r3, r2, #31
 80043f0:	f57f af77 	bpl.w	80042e2 <_svfprintf_r+0x74e>
 80043f4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80043f6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80043f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043fa:	6070      	str	r0, [r6, #4]
 80043fc:	3401      	adds	r4, #1
 80043fe:	182d      	adds	r5, r5, r0
 8004400:	2c07      	cmp	r4, #7
 8004402:	6033      	str	r3, [r6, #0]
 8004404:	953b      	str	r5, [sp, #236]	; 0xec
 8004406:	943a      	str	r4, [sp, #232]	; 0xe8
 8004408:	f300 8300 	bgt.w	8004a0c <_svfprintf_r+0xe78>
 800440c:	3608      	adds	r6, #8
 800440e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004410:	1e4f      	subs	r7, r1, #1
 8004412:	2f00      	cmp	r7, #0
 8004414:	f77f af65 	ble.w	80042e2 <_svfprintf_r+0x74e>
 8004418:	2f10      	cmp	r7, #16
 800441a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800441c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8004490 <_svfprintf_r+0x8fc>
 8004420:	ddb2      	ble.n	8004388 <_svfprintf_r+0x7f4>
 8004422:	4623      	mov	r3, r4
 8004424:	f04f 0910 	mov.w	r9, #16
 8004428:	4644      	mov	r4, r8
 800442a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800442e:	e003      	b.n	8004438 <_svfprintf_r+0x8a4>
 8004430:	3608      	adds	r6, #8
 8004432:	3f10      	subs	r7, #16
 8004434:	2f10      	cmp	r7, #16
 8004436:	dda5      	ble.n	8004384 <_svfprintf_r+0x7f0>
 8004438:	3301      	adds	r3, #1
 800443a:	3510      	adds	r5, #16
 800443c:	2b07      	cmp	r3, #7
 800443e:	e886 0210 	stmia.w	r6, {r4, r9}
 8004442:	953b      	str	r5, [sp, #236]	; 0xec
 8004444:	933a      	str	r3, [sp, #232]	; 0xe8
 8004446:	ddf3      	ble.n	8004430 <_svfprintf_r+0x89c>
 8004448:	4640      	mov	r0, r8
 800444a:	4651      	mov	r1, sl
 800444c:	465a      	mov	r2, fp
 800444e:	f002 ff11 	bl	8007274 <__ssprint_r>
 8004452:	2800      	cmp	r0, #0
 8004454:	f47f ac75 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 8004458:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800445a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800445c:	ae1f      	add	r6, sp, #124	; 0x7c
 800445e:	e7e8      	b.n	8004432 <_svfprintf_r+0x89e>
 8004460:	2a00      	cmp	r2, #0
 8004462:	f040 80be 	bne.w	80045e2 <_svfprintf_r+0xa4e>
 8004466:	9808      	ldr	r0, [sp, #32]
 8004468:	07c1      	lsls	r1, r0, #31
 800446a:	bf5c      	itt	pl
 800446c:	920d      	strpl	r2, [sp, #52]	; 0x34
 800446e:	f8cd b044 	strpl.w	fp, [sp, #68]	; 0x44
 8004472:	f57f acf3 	bpl.w	8003e5c <_svfprintf_r+0x2c8>
 8004476:	991d      	ldr	r1, [sp, #116]	; 0x74
 8004478:	2330      	movs	r3, #48	; 0x30
 800447a:	f10d 02e3 	add.w	r2, sp, #227	; 0xe3
 800447e:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8004482:	910d      	str	r1, [sp, #52]	; 0x34
 8004484:	9211      	str	r2, [sp, #68]	; 0x44
 8004486:	e4e9      	b.n	8003e5c <_svfprintf_r+0x2c8>
 8004488:	080090ac 	.word	0x080090ac
 800448c:	080090c8 	.word	0x080090c8
 8004490:	08008e00 	.word	0x08008e00
 8004494:	08008df0 	.word	0x08008df0
 8004498:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800449a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800449c:	1a47      	subs	r7, r0, r1
 800449e:	2f00      	cmp	r7, #0
 80044a0:	f77f aed8 	ble.w	8004254 <_svfprintf_r+0x6c0>
 80044a4:	2f10      	cmp	r7, #16
 80044a6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80044a8:	f8df 86d8 	ldr.w	r8, [pc, #1752]	; 8004b84 <_svfprintf_r+0xff0>
 80044ac:	dd22      	ble.n	80044f4 <_svfprintf_r+0x960>
 80044ae:	4623      	mov	r3, r4
 80044b0:	f04f 0910 	mov.w	r9, #16
 80044b4:	4644      	mov	r4, r8
 80044b6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80044ba:	e003      	b.n	80044c4 <_svfprintf_r+0x930>
 80044bc:	3f10      	subs	r7, #16
 80044be:	3608      	adds	r6, #8
 80044c0:	2f10      	cmp	r7, #16
 80044c2:	dd15      	ble.n	80044f0 <_svfprintf_r+0x95c>
 80044c4:	3301      	adds	r3, #1
 80044c6:	3510      	adds	r5, #16
 80044c8:	2b07      	cmp	r3, #7
 80044ca:	e886 0210 	stmia.w	r6, {r4, r9}
 80044ce:	953b      	str	r5, [sp, #236]	; 0xec
 80044d0:	933a      	str	r3, [sp, #232]	; 0xe8
 80044d2:	ddf3      	ble.n	80044bc <_svfprintf_r+0x928>
 80044d4:	4640      	mov	r0, r8
 80044d6:	4651      	mov	r1, sl
 80044d8:	465a      	mov	r2, fp
 80044da:	f002 fecb 	bl	8007274 <__ssprint_r>
 80044de:	2800      	cmp	r0, #0
 80044e0:	f47f ac2f 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 80044e4:	3f10      	subs	r7, #16
 80044e6:	2f10      	cmp	r7, #16
 80044e8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80044ea:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80044ec:	ae1f      	add	r6, sp, #124	; 0x7c
 80044ee:	dce9      	bgt.n	80044c4 <_svfprintf_r+0x930>
 80044f0:	46a0      	mov	r8, r4
 80044f2:	461c      	mov	r4, r3
 80044f4:	3401      	adds	r4, #1
 80044f6:	19ed      	adds	r5, r5, r7
 80044f8:	2c07      	cmp	r4, #7
 80044fa:	f8c6 8000 	str.w	r8, [r6]
 80044fe:	6077      	str	r7, [r6, #4]
 8004500:	953b      	str	r5, [sp, #236]	; 0xec
 8004502:	943a      	str	r4, [sp, #232]	; 0xe8
 8004504:	f300 81df 	bgt.w	80048c6 <_svfprintf_r+0xd32>
 8004508:	3608      	adds	r6, #8
 800450a:	e6a3      	b.n	8004254 <_svfprintf_r+0x6c0>
 800450c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800450e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004510:	2a01      	cmp	r2, #1
 8004512:	f340 81a5 	ble.w	8004860 <_svfprintf_r+0xccc>
 8004516:	3401      	adds	r4, #1
 8004518:	9811      	ldr	r0, [sp, #68]	; 0x44
 800451a:	3501      	adds	r5, #1
 800451c:	2301      	movs	r3, #1
 800451e:	2c07      	cmp	r4, #7
 8004520:	6030      	str	r0, [r6, #0]
 8004522:	6073      	str	r3, [r6, #4]
 8004524:	953b      	str	r5, [sp, #236]	; 0xec
 8004526:	943a      	str	r4, [sp, #232]	; 0xe8
 8004528:	f300 81c1 	bgt.w	80048ae <_svfprintf_r+0xd1a>
 800452c:	3608      	adds	r6, #8
 800452e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004530:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004532:	6071      	str	r1, [r6, #4]
 8004534:	3401      	adds	r4, #1
 8004536:	186d      	adds	r5, r5, r1
 8004538:	2c07      	cmp	r4, #7
 800453a:	6032      	str	r2, [r6, #0]
 800453c:	953b      	str	r5, [sp, #236]	; 0xec
 800453e:	943a      	str	r4, [sp, #232]	; 0xe8
 8004540:	f300 81a9 	bgt.w	8004896 <_svfprintf_r+0xd02>
 8004544:	3608      	adds	r6, #8
 8004546:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800454a:	2200      	movs	r2, #0
 800454c:	2300      	movs	r3, #0
 800454e:	f004 fa4f 	bl	80089f0 <__aeabi_dcmpeq>
 8004552:	2800      	cmp	r0, #0
 8004554:	f040 80f6 	bne.w	8004744 <_svfprintf_r+0xbb0>
 8004558:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800455a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800455c:	1e5a      	subs	r2, r3, #1
 800455e:	3401      	adds	r4, #1
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	18ad      	adds	r5, r5, r2
 8004564:	2c07      	cmp	r4, #7
 8004566:	6033      	str	r3, [r6, #0]
 8004568:	6072      	str	r2, [r6, #4]
 800456a:	953b      	str	r5, [sp, #236]	; 0xec
 800456c:	943a      	str	r4, [sp, #232]	; 0xe8
 800456e:	dc22      	bgt.n	80045b6 <_svfprintf_r+0xa22>
 8004570:	3608      	adds	r6, #8
 8004572:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004574:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004576:	3401      	adds	r4, #1
 8004578:	18ed      	adds	r5, r5, r3
 800457a:	2c07      	cmp	r4, #7
 800457c:	ab3c      	add	r3, sp, #240	; 0xf0
 800457e:	6033      	str	r3, [r6, #0]
 8004580:	6070      	str	r0, [r6, #4]
 8004582:	953b      	str	r5, [sp, #236]	; 0xec
 8004584:	943a      	str	r4, [sp, #232]	; 0xe8
 8004586:	f77f aeab 	ble.w	80042e0 <_svfprintf_r+0x74c>
 800458a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800458c:	4651      	mov	r1, sl
 800458e:	465a      	mov	r2, fp
 8004590:	f002 fe70 	bl	8007274 <__ssprint_r>
 8004594:	2800      	cmp	r0, #0
 8004596:	f47f abd4 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 800459a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800459c:	ae1f      	add	r6, sp, #124	; 0x7c
 800459e:	e6a0      	b.n	80042e2 <_svfprintf_r+0x74e>
 80045a0:	46a0      	mov	r8, r4
 80045a2:	461c      	mov	r4, r3
 80045a4:	3401      	adds	r4, #1
 80045a6:	19ed      	adds	r5, r5, r7
 80045a8:	2c07      	cmp	r4, #7
 80045aa:	f8c6 8000 	str.w	r8, [r6]
 80045ae:	6077      	str	r7, [r6, #4]
 80045b0:	953b      	str	r5, [sp, #236]	; 0xec
 80045b2:	943a      	str	r4, [sp, #232]	; 0xe8
 80045b4:	dddc      	ble.n	8004570 <_svfprintf_r+0x9dc>
 80045b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80045b8:	4651      	mov	r1, sl
 80045ba:	465a      	mov	r2, fp
 80045bc:	f002 fe5a 	bl	8007274 <__ssprint_r>
 80045c0:	2800      	cmp	r0, #0
 80045c2:	f47f abbe 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 80045c6:	ae1f      	add	r6, sp, #124	; 0x7c
 80045c8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80045ca:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80045cc:	e7d1      	b.n	8004572 <_svfprintf_r+0x9de>
 80045ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80045d0:	4651      	mov	r1, sl
 80045d2:	465a      	mov	r2, fp
 80045d4:	f002 fe4e 	bl	8007274 <__ssprint_r>
 80045d8:	2800      	cmp	r0, #0
 80045da:	f43f aecf 	beq.w	800437c <_svfprintf_r+0x7e8>
 80045de:	f7ff bbb0 	b.w	8003d42 <_svfprintf_r+0x1ae>
 80045e2:	910d      	str	r1, [sp, #52]	; 0x34
 80045e4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80045e8:	e438      	b.n	8003e5c <_svfprintf_r+0x2c8>
 80045ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80045ec:	4651      	mov	r1, sl
 80045ee:	465a      	mov	r2, fp
 80045f0:	f002 fe40 	bl	8007274 <__ssprint_r>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	f47f aba4 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 80045fa:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80045fc:	ae1f      	add	r6, sp, #124	; 0x7c
 80045fe:	e661      	b.n	80042c4 <_svfprintf_r+0x730>
 8004600:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004602:	4651      	mov	r1, sl
 8004604:	465a      	mov	r2, fp
 8004606:	f002 fe35 	bl	8007274 <__ssprint_r>
 800460a:	2800      	cmp	r0, #0
 800460c:	f47f ab99 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 8004610:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004612:	ae1f      	add	r6, sp, #124	; 0x7c
 8004614:	e61a      	b.n	800424c <_svfprintf_r+0x6b8>
 8004616:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004618:	4651      	mov	r1, sl
 800461a:	465a      	mov	r2, fp
 800461c:	f002 fe2a 	bl	8007274 <__ssprint_r>
 8004620:	2800      	cmp	r0, #0
 8004622:	f47f ab8e 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 8004626:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004628:	ae1f      	add	r6, sp, #124	; 0x7c
 800462a:	e600      	b.n	800422e <_svfprintf_r+0x69a>
 800462c:	9f40      	ldr	r7, [sp, #256]	; 0x100
 800462e:	2f00      	cmp	r7, #0
 8004630:	f340 819a 	ble.w	8004968 <_svfprintf_r+0xdd4>
 8004634:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004636:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004638:	9911      	ldr	r1, [sp, #68]	; 0x44
 800463a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800463c:	4287      	cmp	r7, r0
 800463e:	bfa8      	it	ge
 8004640:	4607      	movge	r7, r0
 8004642:	1889      	adds	r1, r1, r2
 8004644:	2f00      	cmp	r7, #0
 8004646:	910d      	str	r1, [sp, #52]	; 0x34
 8004648:	dd0b      	ble.n	8004662 <_svfprintf_r+0xace>
 800464a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800464c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800464e:	6077      	str	r7, [r6, #4]
 8004650:	3401      	adds	r4, #1
 8004652:	19ed      	adds	r5, r5, r7
 8004654:	2c07      	cmp	r4, #7
 8004656:	6032      	str	r2, [r6, #0]
 8004658:	953b      	str	r5, [sp, #236]	; 0xec
 800465a:	943a      	str	r4, [sp, #232]	; 0xe8
 800465c:	f300 8304 	bgt.w	8004c68 <_svfprintf_r+0x10d4>
 8004660:	3608      	adds	r6, #8
 8004662:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004664:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8004668:	1bdf      	subs	r7, r3, r7
 800466a:	2f00      	cmp	r7, #0
 800466c:	f340 80a0 	ble.w	80047b0 <_svfprintf_r+0xc1c>
 8004670:	2f10      	cmp	r7, #16
 8004672:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004674:	f8df 850c 	ldr.w	r8, [pc, #1292]	; 8004b84 <_svfprintf_r+0xff0>
 8004678:	f340 815f 	ble.w	800493a <_svfprintf_r+0xda6>
 800467c:	4623      	mov	r3, r4
 800467e:	f04f 0910 	mov.w	r9, #16
 8004682:	4644      	mov	r4, r8
 8004684:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004688:	e004      	b.n	8004694 <_svfprintf_r+0xb00>
 800468a:	3608      	adds	r6, #8
 800468c:	3f10      	subs	r7, #16
 800468e:	2f10      	cmp	r7, #16
 8004690:	f340 8151 	ble.w	8004936 <_svfprintf_r+0xda2>
 8004694:	3301      	adds	r3, #1
 8004696:	3510      	adds	r5, #16
 8004698:	2b07      	cmp	r3, #7
 800469a:	e886 0210 	stmia.w	r6, {r4, r9}
 800469e:	953b      	str	r5, [sp, #236]	; 0xec
 80046a0:	933a      	str	r3, [sp, #232]	; 0xe8
 80046a2:	ddf2      	ble.n	800468a <_svfprintf_r+0xaf6>
 80046a4:	4640      	mov	r0, r8
 80046a6:	4651      	mov	r1, sl
 80046a8:	465a      	mov	r2, fp
 80046aa:	f002 fde3 	bl	8007274 <__ssprint_r>
 80046ae:	2800      	cmp	r0, #0
 80046b0:	f47f ab47 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 80046b4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80046b6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80046b8:	ae1f      	add	r6, sp, #124	; 0x7c
 80046ba:	e7e7      	b.n	800468c <_svfprintf_r+0xaf8>
 80046bc:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80046be:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 80046c2:	f003 000f 	and.w	r0, r3, #15
 80046c6:	460a      	mov	r2, r1
 80046c8:	5c28      	ldrb	r0, [r5, r0]
 80046ca:	3901      	subs	r1, #1
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	7010      	strb	r0, [r2, #0]
 80046d0:	d1f7      	bne.n	80046c2 <_svfprintf_r+0xb2e>
 80046d2:	ebc2 030b 	rsb	r3, r2, fp
 80046d6:	9211      	str	r2, [sp, #68]	; 0x44
 80046d8:	930d      	str	r3, [sp, #52]	; 0x34
 80046da:	f7ff bbbf 	b.w	8003e5c <_svfprintf_r+0x2c8>
 80046de:	2b09      	cmp	r3, #9
 80046e0:	bf82      	ittt	hi
 80046e2:	f64c 45cd 	movwhi	r5, #52429	; 0xcccd
 80046e6:	f10d 01e3 	addhi.w	r1, sp, #227	; 0xe3
 80046ea:	f6cc 45cc 	movthi	r5, #52428	; 0xcccc
 80046ee:	d809      	bhi.n	8004704 <_svfprintf_r+0xb70>
 80046f0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80046f2:	3330      	adds	r3, #48	; 0x30
 80046f4:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 80046f8:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 80046fc:	900d      	str	r0, [sp, #52]	; 0x34
 80046fe:	9111      	str	r1, [sp, #68]	; 0x44
 8004700:	f7ff bbac 	b.w	8003e5c <_svfprintf_r+0x2c8>
 8004704:	fba5 0203 	umull	r0, r2, r5, r3
 8004708:	08d2      	lsrs	r2, r2, #3
 800470a:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 800470e:	4608      	mov	r0, r1
 8004710:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 8004714:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004718:	7001      	strb	r1, [r0, #0]
 800471a:	4613      	mov	r3, r2
 800471c:	1e41      	subs	r1, r0, #1
 800471e:	2a00      	cmp	r2, #0
 8004720:	d1f0      	bne.n	8004704 <_svfprintf_r+0xb70>
 8004722:	ebc0 030b 	rsb	r3, r0, fp
 8004726:	9011      	str	r0, [sp, #68]	; 0x44
 8004728:	930d      	str	r3, [sp, #52]	; 0x34
 800472a:	f7ff bb97 	b.w	8003e5c <_svfprintf_r+0x2c8>
 800472e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004730:	4651      	mov	r1, sl
 8004732:	465a      	mov	r2, fp
 8004734:	f002 fd9e 	bl	8007274 <__ssprint_r>
 8004738:	2800      	cmp	r0, #0
 800473a:	f47f ab02 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 800473e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004740:	ae1f      	add	r6, sp, #124	; 0x7c
 8004742:	e563      	b.n	800420c <_svfprintf_r+0x678>
 8004744:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004746:	1e4f      	subs	r7, r1, #1
 8004748:	2f00      	cmp	r7, #0
 800474a:	f77f af12 	ble.w	8004572 <_svfprintf_r+0x9de>
 800474e:	2f10      	cmp	r7, #16
 8004750:	f8df 8430 	ldr.w	r8, [pc, #1072]	; 8004b84 <_svfprintf_r+0xff0>
 8004754:	f77f af26 	ble.w	80045a4 <_svfprintf_r+0xa10>
 8004758:	4623      	mov	r3, r4
 800475a:	f04f 0910 	mov.w	r9, #16
 800475e:	4644      	mov	r4, r8
 8004760:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004764:	e004      	b.n	8004770 <_svfprintf_r+0xbdc>
 8004766:	3608      	adds	r6, #8
 8004768:	3f10      	subs	r7, #16
 800476a:	2f10      	cmp	r7, #16
 800476c:	f77f af18 	ble.w	80045a0 <_svfprintf_r+0xa0c>
 8004770:	3301      	adds	r3, #1
 8004772:	3510      	adds	r5, #16
 8004774:	2b07      	cmp	r3, #7
 8004776:	e886 0210 	stmia.w	r6, {r4, r9}
 800477a:	953b      	str	r5, [sp, #236]	; 0xec
 800477c:	933a      	str	r3, [sp, #232]	; 0xe8
 800477e:	ddf2      	ble.n	8004766 <_svfprintf_r+0xbd2>
 8004780:	4640      	mov	r0, r8
 8004782:	4651      	mov	r1, sl
 8004784:	465a      	mov	r2, fp
 8004786:	f002 fd75 	bl	8007274 <__ssprint_r>
 800478a:	2800      	cmp	r0, #0
 800478c:	f47f aad9 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 8004790:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004792:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004794:	ae1f      	add	r6, sp, #124	; 0x7c
 8004796:	e7e7      	b.n	8004768 <_svfprintf_r+0xbd4>
 8004798:	2202      	movs	r2, #2
 800479a:	e405      	b.n	8003fa8 <_svfprintf_r+0x414>
 800479c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800479e:	4651      	mov	r1, sl
 80047a0:	465a      	mov	r2, fp
 80047a2:	f002 fd67 	bl	8007274 <__ssprint_r>
 80047a6:	2800      	cmp	r0, #0
 80047a8:	f47f aacb 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 80047ac:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80047ae:	ae1f      	add	r6, sp, #124	; 0x7c
 80047b0:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80047b2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80047b4:	4298      	cmp	r0, r3
 80047b6:	dc45      	bgt.n	8004844 <_svfprintf_r+0xcb0>
 80047b8:	9908      	ldr	r1, [sp, #32]
 80047ba:	07c9      	lsls	r1, r1, #31
 80047bc:	d442      	bmi.n	8004844 <_svfprintf_r+0xcb0>
 80047be:	9911      	ldr	r1, [sp, #68]	; 0x44
 80047c0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80047c2:	180a      	adds	r2, r1, r0
 80047c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80047c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80047c8:	1a8f      	subs	r7, r1, r2
 80047ca:	1ac3      	subs	r3, r0, r3
 80047cc:	42bb      	cmp	r3, r7
 80047ce:	bfb8      	it	lt
 80047d0:	461f      	movlt	r7, r3
 80047d2:	2f00      	cmp	r7, #0
 80047d4:	dd0a      	ble.n	80047ec <_svfprintf_r+0xc58>
 80047d6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80047d8:	6032      	str	r2, [r6, #0]
 80047da:	3401      	adds	r4, #1
 80047dc:	19ed      	adds	r5, r5, r7
 80047de:	2c07      	cmp	r4, #7
 80047e0:	6077      	str	r7, [r6, #4]
 80047e2:	953b      	str	r5, [sp, #236]	; 0xec
 80047e4:	943a      	str	r4, [sp, #232]	; 0xe8
 80047e6:	f300 8256 	bgt.w	8004c96 <_svfprintf_r+0x1102>
 80047ea:	3608      	adds	r6, #8
 80047ec:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 80047f0:	1bdf      	subs	r7, r3, r7
 80047f2:	2f00      	cmp	r7, #0
 80047f4:	f77f ad75 	ble.w	80042e2 <_svfprintf_r+0x74e>
 80047f8:	2f10      	cmp	r7, #16
 80047fa:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80047fc:	f8df 8384 	ldr.w	r8, [pc, #900]	; 8004b84 <_svfprintf_r+0xff0>
 8004800:	f77f adc2 	ble.w	8004388 <_svfprintf_r+0x7f4>
 8004804:	4623      	mov	r3, r4
 8004806:	f04f 0910 	mov.w	r9, #16
 800480a:	4644      	mov	r4, r8
 800480c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004810:	e004      	b.n	800481c <_svfprintf_r+0xc88>
 8004812:	3608      	adds	r6, #8
 8004814:	3f10      	subs	r7, #16
 8004816:	2f10      	cmp	r7, #16
 8004818:	f77f adb4 	ble.w	8004384 <_svfprintf_r+0x7f0>
 800481c:	3301      	adds	r3, #1
 800481e:	3510      	adds	r5, #16
 8004820:	2b07      	cmp	r3, #7
 8004822:	e886 0210 	stmia.w	r6, {r4, r9}
 8004826:	953b      	str	r5, [sp, #236]	; 0xec
 8004828:	933a      	str	r3, [sp, #232]	; 0xe8
 800482a:	ddf2      	ble.n	8004812 <_svfprintf_r+0xc7e>
 800482c:	4640      	mov	r0, r8
 800482e:	4651      	mov	r1, sl
 8004830:	465a      	mov	r2, fp
 8004832:	f002 fd1f 	bl	8007274 <__ssprint_r>
 8004836:	2800      	cmp	r0, #0
 8004838:	f47f aa83 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 800483c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800483e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004840:	ae1f      	add	r6, sp, #124	; 0x7c
 8004842:	e7e7      	b.n	8004814 <_svfprintf_r+0xc80>
 8004844:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004846:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004848:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800484a:	6070      	str	r0, [r6, #4]
 800484c:	3401      	adds	r4, #1
 800484e:	182d      	adds	r5, r5, r0
 8004850:	2c07      	cmp	r4, #7
 8004852:	6032      	str	r2, [r6, #0]
 8004854:	953b      	str	r5, [sp, #236]	; 0xec
 8004856:	943a      	str	r4, [sp, #232]	; 0xe8
 8004858:	f300 8211 	bgt.w	8004c7e <_svfprintf_r+0x10ea>
 800485c:	3608      	adds	r6, #8
 800485e:	e7ae      	b.n	80047be <_svfprintf_r+0xc2a>
 8004860:	9b08      	ldr	r3, [sp, #32]
 8004862:	07da      	lsls	r2, r3, #31
 8004864:	f53f ae57 	bmi.w	8004516 <_svfprintf_r+0x982>
 8004868:	3401      	adds	r4, #1
 800486a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800486c:	3501      	adds	r5, #1
 800486e:	2301      	movs	r3, #1
 8004870:	2c07      	cmp	r4, #7
 8004872:	6032      	str	r2, [r6, #0]
 8004874:	6073      	str	r3, [r6, #4]
 8004876:	953b      	str	r5, [sp, #236]	; 0xec
 8004878:	943a      	str	r4, [sp, #232]	; 0xe8
 800487a:	f77f ae79 	ble.w	8004570 <_svfprintf_r+0x9dc>
 800487e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004880:	4651      	mov	r1, sl
 8004882:	465a      	mov	r2, fp
 8004884:	f002 fcf6 	bl	8007274 <__ssprint_r>
 8004888:	2800      	cmp	r0, #0
 800488a:	f47f aa5a 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 800488e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004890:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004892:	ae1f      	add	r6, sp, #124	; 0x7c
 8004894:	e66d      	b.n	8004572 <_svfprintf_r+0x9de>
 8004896:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004898:	4651      	mov	r1, sl
 800489a:	465a      	mov	r2, fp
 800489c:	f002 fcea 	bl	8007274 <__ssprint_r>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	f47f aa4e 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 80048a6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80048a8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80048aa:	ae1f      	add	r6, sp, #124	; 0x7c
 80048ac:	e64b      	b.n	8004546 <_svfprintf_r+0x9b2>
 80048ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80048b0:	4651      	mov	r1, sl
 80048b2:	465a      	mov	r2, fp
 80048b4:	f002 fcde 	bl	8007274 <__ssprint_r>
 80048b8:	2800      	cmp	r0, #0
 80048ba:	f47f aa42 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 80048be:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80048c0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80048c2:	ae1f      	add	r6, sp, #124	; 0x7c
 80048c4:	e633      	b.n	800452e <_svfprintf_r+0x99a>
 80048c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80048c8:	4651      	mov	r1, sl
 80048ca:	465a      	mov	r2, fp
 80048cc:	f002 fcd2 	bl	8007274 <__ssprint_r>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	f47f aa36 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 80048d6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80048d8:	ae1f      	add	r6, sp, #124	; 0x7c
 80048da:	e4bb      	b.n	8004254 <_svfprintf_r+0x6c0>
 80048dc:	f002 fb62 	bl	8006fa4 <__fpclassifyd>
 80048e0:	2800      	cmp	r0, #0
 80048e2:	f040 809e 	bne.w	8004a22 <_svfprintf_r+0xe8e>
 80048e6:	2203      	movs	r2, #3
 80048e8:	9012      	str	r0, [sp, #72]	; 0x48
 80048ea:	4ba3      	ldr	r3, [pc, #652]	; (8004b78 <_svfprintf_r+0xfe4>)
 80048ec:	920a      	str	r2, [sp, #40]	; 0x28
 80048ee:	9815      	ldr	r0, [sp, #84]	; 0x54
 80048f0:	4aa2      	ldr	r2, [pc, #648]	; (8004b7c <_svfprintf_r+0xfe8>)
 80048f2:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80048f6:	2847      	cmp	r0, #71	; 0x47
 80048f8:	bfd8      	it	le
 80048fa:	461a      	movle	r2, r3
 80048fc:	9211      	str	r2, [sp, #68]	; 0x44
 80048fe:	2303      	movs	r3, #3
 8004900:	9a08      	ldr	r2, [sp, #32]
 8004902:	930d      	str	r3, [sp, #52]	; 0x34
 8004904:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800490a:	9208      	str	r2, [sp, #32]
 800490c:	9316      	str	r3, [sp, #88]	; 0x58
 800490e:	f7ff baaf 	b.w	8003e70 <_svfprintf_r+0x2dc>
 8004912:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004914:	2201      	movs	r2, #1
 8004916:	680b      	ldr	r3, [r1, #0]
 8004918:	e414      	b.n	8004144 <_svfprintf_r+0x5b0>
 800491a:	9b08      	ldr	r3, [sp, #32]
 800491c:	065f      	lsls	r7, r3, #25
 800491e:	d56d      	bpl.n	80049fc <_svfprintf_r+0xe68>
 8004920:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004922:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004924:	6803      	ldr	r3, [r0, #0]
 8004926:	3004      	adds	r0, #4
 8004928:	900e      	str	r0, [sp, #56]	; 0x38
 800492a:	8019      	strh	r1, [r3, #0]
 800492c:	f7ff b960 	b.w	8003bf0 <_svfprintf_r+0x5c>
 8004930:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004932:	680b      	ldr	r3, [r1, #0]
 8004934:	e406      	b.n	8004144 <_svfprintf_r+0x5b0>
 8004936:	46a0      	mov	r8, r4
 8004938:	461c      	mov	r4, r3
 800493a:	3401      	adds	r4, #1
 800493c:	19ed      	adds	r5, r5, r7
 800493e:	2c07      	cmp	r4, #7
 8004940:	f8c6 8000 	str.w	r8, [r6]
 8004944:	6077      	str	r7, [r6, #4]
 8004946:	953b      	str	r5, [sp, #236]	; 0xec
 8004948:	943a      	str	r4, [sp, #232]	; 0xe8
 800494a:	f73f af27 	bgt.w	800479c <_svfprintf_r+0xc08>
 800494e:	3608      	adds	r6, #8
 8004950:	e72e      	b.n	80047b0 <_svfprintf_r+0xc1c>
 8004952:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004954:	4651      	mov	r1, sl
 8004956:	465a      	mov	r2, fp
 8004958:	f002 fc8c 	bl	8007274 <__ssprint_r>
 800495c:	2800      	cmp	r0, #0
 800495e:	f47f a9f0 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 8004962:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004964:	ae1f      	add	r6, sp, #124	; 0x7c
 8004966:	e53d      	b.n	80043e4 <_svfprintf_r+0x850>
 8004968:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800496a:	4b85      	ldr	r3, [pc, #532]	; (8004b80 <_svfprintf_r+0xfec>)
 800496c:	3401      	adds	r4, #1
 800496e:	6033      	str	r3, [r6, #0]
 8004970:	3501      	adds	r5, #1
 8004972:	2301      	movs	r3, #1
 8004974:	2c07      	cmp	r4, #7
 8004976:	6073      	str	r3, [r6, #4]
 8004978:	953b      	str	r5, [sp, #236]	; 0xec
 800497a:	943a      	str	r4, [sp, #232]	; 0xe8
 800497c:	f300 8139 	bgt.w	8004bf2 <_svfprintf_r+0x105e>
 8004980:	3608      	adds	r6, #8
 8004982:	b92f      	cbnz	r7, 8004990 <_svfprintf_r+0xdfc>
 8004984:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004986:	b91a      	cbnz	r2, 8004990 <_svfprintf_r+0xdfc>
 8004988:	9b08      	ldr	r3, [sp, #32]
 800498a:	07d8      	lsls	r0, r3, #31
 800498c:	f57f aca9 	bpl.w	80042e2 <_svfprintf_r+0x74e>
 8004990:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004992:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004994:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004996:	6071      	str	r1, [r6, #4]
 8004998:	3401      	adds	r4, #1
 800499a:	186d      	adds	r5, r5, r1
 800499c:	2c07      	cmp	r4, #7
 800499e:	6030      	str	r0, [r6, #0]
 80049a0:	953b      	str	r5, [sp, #236]	; 0xec
 80049a2:	943a      	str	r4, [sp, #232]	; 0xe8
 80049a4:	f300 81d2 	bgt.w	8004d4c <_svfprintf_r+0x11b8>
 80049a8:	3608      	adds	r6, #8
 80049aa:	427f      	negs	r7, r7
 80049ac:	2f00      	cmp	r7, #0
 80049ae:	f340 8141 	ble.w	8004c34 <_svfprintf_r+0x10a0>
 80049b2:	2f10      	cmp	r7, #16
 80049b4:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8004b84 <_svfprintf_r+0xff0>
 80049b8:	f340 8183 	ble.w	8004cc2 <_svfprintf_r+0x112e>
 80049bc:	4623      	mov	r3, r4
 80049be:	f04f 0910 	mov.w	r9, #16
 80049c2:	4644      	mov	r4, r8
 80049c4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80049c8:	e004      	b.n	80049d4 <_svfprintf_r+0xe40>
 80049ca:	3608      	adds	r6, #8
 80049cc:	3f10      	subs	r7, #16
 80049ce:	2f10      	cmp	r7, #16
 80049d0:	f340 8175 	ble.w	8004cbe <_svfprintf_r+0x112a>
 80049d4:	3301      	adds	r3, #1
 80049d6:	3510      	adds	r5, #16
 80049d8:	2b07      	cmp	r3, #7
 80049da:	e886 0210 	stmia.w	r6, {r4, r9}
 80049de:	953b      	str	r5, [sp, #236]	; 0xec
 80049e0:	933a      	str	r3, [sp, #232]	; 0xe8
 80049e2:	ddf2      	ble.n	80049ca <_svfprintf_r+0xe36>
 80049e4:	4640      	mov	r0, r8
 80049e6:	4651      	mov	r1, sl
 80049e8:	465a      	mov	r2, fp
 80049ea:	f002 fc43 	bl	8007274 <__ssprint_r>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	f47f a9a7 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 80049f4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80049f6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80049f8:	ae1f      	add	r6, sp, #124	; 0x7c
 80049fa:	e7e7      	b.n	80049cc <_svfprintf_r+0xe38>
 80049fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004a00:	6813      	ldr	r3, [r2, #0]
 8004a02:	3204      	adds	r2, #4
 8004a04:	920e      	str	r2, [sp, #56]	; 0x38
 8004a06:	6018      	str	r0, [r3, #0]
 8004a08:	f7ff b8f2 	b.w	8003bf0 <_svfprintf_r+0x5c>
 8004a0c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004a0e:	4651      	mov	r1, sl
 8004a10:	465a      	mov	r2, fp
 8004a12:	f002 fc2f 	bl	8007274 <__ssprint_r>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	f47f a993 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 8004a1c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004a1e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004a20:	e4f5      	b.n	800440e <_svfprintf_r+0x87a>
 8004a22:	1c60      	adds	r0, r4, #1
 8004a24:	f000 80f1 	beq.w	8004c0a <_svfprintf_r+0x1076>
 8004a28:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004a2a:	2967      	cmp	r1, #103	; 0x67
 8004a2c:	bf18      	it	ne
 8004a2e:	2947      	cmpne	r1, #71	; 0x47
 8004a30:	bf14      	ite	ne
 8004a32:	2300      	movne	r3, #0
 8004a34:	2301      	moveq	r3, #1
 8004a36:	bf18      	it	ne
 8004a38:	930a      	strne	r3, [sp, #40]	; 0x28
 8004a3a:	d104      	bne.n	8004a46 <_svfprintf_r+0xeb2>
 8004a3c:	2c00      	cmp	r4, #0
 8004a3e:	f000 81ad 	beq.w	8004d9c <_svfprintf_r+0x1208>
 8004a42:	2201      	movs	r2, #1
 8004a44:	920a      	str	r2, [sp, #40]	; 0x28
 8004a46:	9808      	ldr	r0, [sp, #32]
 8004a48:	2d00      	cmp	r5, #0
 8004a4a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8004a4e:	9008      	str	r0, [sp, #32]
 8004a50:	f2c0 8189 	blt.w	8004d66 <_svfprintf_r+0x11d2>
 8004a54:	2200      	movs	r2, #0
 8004a56:	9212      	str	r2, [sp, #72]	; 0x48
 8004a58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a5a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004a5c:	f1a3 0166 	sub.w	r1, r3, #102	; 0x66
 8004a60:	424b      	negs	r3, r1
 8004a62:	eb43 0301 	adc.w	r3, r3, r1
 8004a66:	469c      	mov	ip, r3
 8004a68:	2846      	cmp	r0, #70	; 0x46
 8004a6a:	bf08      	it	eq
 8004a6c:	f04c 0c01 	orreq.w	ip, ip, #1
 8004a70:	930d      	str	r3, [sp, #52]	; 0x34
 8004a72:	46a1      	mov	r9, r4
 8004a74:	2103      	movs	r1, #3
 8004a76:	f1bc 0f00 	cmp.w	ip, #0
 8004a7a:	d107      	bne.n	8004a8c <_svfprintf_r+0xef8>
 8004a7c:	2865      	cmp	r0, #101	; 0x65
 8004a7e:	bf18      	it	ne
 8004a80:	2845      	cmpne	r0, #69	; 0x45
 8004a82:	bf0c      	ite	eq
 8004a84:	f104 0901 	addeq.w	r9, r4, #1
 8004a88:	46a1      	movne	r9, r4
 8004a8a:	2102      	movs	r1, #2
 8004a8c:	e88d 0202 	stmia.w	sp, {r1, r9}
 8004a90:	a940      	add	r1, sp, #256	; 0x100
 8004a92:	9102      	str	r1, [sp, #8]
 8004a94:	a941      	add	r1, sp, #260	; 0x104
 8004a96:	9103      	str	r1, [sp, #12]
 8004a98:	4642      	mov	r2, r8
 8004a9a:	a942      	add	r1, sp, #264	; 0x108
 8004a9c:	462b      	mov	r3, r5
 8004a9e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004aa0:	9104      	str	r1, [sp, #16]
 8004aa2:	f8cd c018 	str.w	ip, [sp, #24]
 8004aa6:	f000 fa6b 	bl	8004f80 <_dtoa_r>
 8004aaa:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004aac:	9011      	str	r0, [sp, #68]	; 0x44
 8004aae:	2947      	cmp	r1, #71	; 0x47
 8004ab0:	bf18      	it	ne
 8004ab2:	2967      	cmpne	r1, #103	; 0x67
 8004ab4:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004ab8:	d104      	bne.n	8004ac4 <_svfprintf_r+0xf30>
 8004aba:	9a08      	ldr	r2, [sp, #32]
 8004abc:	07d2      	lsls	r2, r2, #31
 8004abe:	bf58      	it	pl
 8004ac0:	9f42      	ldrpl	r7, [sp, #264]	; 0x108
 8004ac2:	d515      	bpl.n	8004af0 <_svfprintf_r+0xf5c>
 8004ac4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ac6:	eb03 0709 	add.w	r7, r3, r9
 8004aca:	f1bc 0f00 	cmp.w	ip, #0
 8004ace:	d005      	beq.n	8004adc <_svfprintf_r+0xf48>
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b30      	cmp	r3, #48	; 0x30
 8004ad4:	f000 8165 	beq.w	8004da2 <_svfprintf_r+0x120e>
 8004ad8:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004ada:	18ff      	adds	r7, r7, r3
 8004adc:	4640      	mov	r0, r8
 8004ade:	4629      	mov	r1, r5
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f003 ff84 	bl	80089f0 <__aeabi_dcmpeq>
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	f000 8117 	beq.w	8004d1c <_svfprintf_r+0x1188>
 8004aee:	9742      	str	r7, [sp, #264]	; 0x108
 8004af0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004af2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004af4:	1a3f      	subs	r7, r7, r0
 8004af6:	9710      	str	r7, [sp, #64]	; 0x40
 8004af8:	2900      	cmp	r1, #0
 8004afa:	f000 80f9 	beq.w	8004cf0 <_svfprintf_r+0x115c>
 8004afe:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004b00:	1ccb      	adds	r3, r1, #3
 8004b02:	db02      	blt.n	8004b0a <_svfprintf_r+0xf76>
 8004b04:	428c      	cmp	r4, r1
 8004b06:	f280 80fa 	bge.w	8004cfe <_svfprintf_r+0x116a>
 8004b0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b0c:	3a02      	subs	r2, #2
 8004b0e:	9215      	str	r2, [sp, #84]	; 0x54
 8004b10:	3901      	subs	r1, #1
 8004b12:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004b14:	9140      	str	r1, [sp, #256]	; 0x100
 8004b16:	2900      	cmp	r1, #0
 8004b18:	f88d 00f0 	strb.w	r0, [sp, #240]	; 0xf0
 8004b1c:	f2c0 815d 	blt.w	8004dda <_svfprintf_r+0x1246>
 8004b20:	232b      	movs	r3, #43	; 0x2b
 8004b22:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8004b26:	2909      	cmp	r1, #9
 8004b28:	f340 8122 	ble.w	8004d70 <_svfprintf_r+0x11dc>
 8004b2c:	f10d 07ff 	add.w	r7, sp, #255	; 0xff
 8004b30:	f246 6467 	movw	r4, #26215	; 0x6667
 8004b34:	4638      	mov	r0, r7
 8004b36:	f2c6 6466 	movt	r4, #26214	; 0x6666
 8004b3a:	fb84 3201 	smull	r3, r2, r4, r1
 8004b3e:	17cb      	asrs	r3, r1, #31
 8004b40:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8004b44:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004b48:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8004b4c:	3230      	adds	r2, #48	; 0x30
 8004b4e:	2b09      	cmp	r3, #9
 8004b50:	4605      	mov	r5, r0
 8004b52:	4619      	mov	r1, r3
 8004b54:	f800 2d01 	strb.w	r2, [r0, #-1]!
 8004b58:	dcef      	bgt.n	8004b3a <_svfprintf_r+0xfa6>
 8004b5a:	3130      	adds	r1, #48	; 0x30
 8004b5c:	1eaa      	subs	r2, r5, #2
 8004b5e:	b2c9      	uxtb	r1, r1
 8004b60:	42ba      	cmp	r2, r7
 8004b62:	f805 1c02 	strb.w	r1, [r5, #-2]
 8004b66:	bf28      	it	cs
 8004b68:	f10d 01f2 	addcs.w	r1, sp, #242	; 0xf2
 8004b6c:	d213      	bcs.n	8004b96 <_svfprintf_r+0x1002>
 8004b6e:	f10d 03f2 	add.w	r3, sp, #242	; 0xf2
 8004b72:	f10d 00fe 	add.w	r0, sp, #254	; 0xfe
 8004b76:	e009      	b.n	8004b8c <_svfprintf_r+0xff8>
 8004b78:	08009090 	.word	0x08009090
 8004b7c:	08009094 	.word	0x08009094
 8004b80:	080090c8 	.word	0x080090c8
 8004b84:	08008e00 	.word	0x08008e00
 8004b88:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004b8c:	f803 1b01 	strb.w	r1, [r3], #1
 8004b90:	4282      	cmp	r2, r0
 8004b92:	4619      	mov	r1, r3
 8004b94:	d1f8      	bne.n	8004b88 <_svfprintf_r+0xff4>
 8004b96:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004b98:	ab3c      	add	r3, sp, #240	; 0xf0
 8004b9a:	1acb      	subs	r3, r1, r3
 8004b9c:	931b      	str	r3, [sp, #108]	; 0x6c
 8004b9e:	2801      	cmp	r0, #1
 8004ba0:	4403      	add	r3, r0
 8004ba2:	930d      	str	r3, [sp, #52]	; 0x34
 8004ba4:	f340 8125 	ble.w	8004df2 <_svfprintf_r+0x125e>
 8004ba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004baa:	3301      	adds	r3, #1
 8004bac:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	930d      	str	r3, [sp, #52]	; 0x34
 8004bb4:	900a      	str	r0, [sp, #40]	; 0x28
 8004bb6:	9116      	str	r1, [sp, #88]	; 0x58
 8004bb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004bba:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f43f a956 	beq.w	8003e70 <_svfprintf_r+0x2dc>
 8004bc4:	232d      	movs	r3, #45	; 0x2d
 8004bc6:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8004bca:	2300      	movs	r3, #0
 8004bcc:	9312      	str	r3, [sp, #72]	; 0x48
 8004bce:	f7ff b950 	b.w	8003e72 <_svfprintf_r+0x2de>
 8004bd2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004bd4:	2140      	movs	r1, #64	; 0x40
 8004bd6:	f001 fa57 	bl	8006088 <_malloc_r>
 8004bda:	f8ca 0000 	str.w	r0, [sl]
 8004bde:	f8ca 0010 	str.w	r0, [sl, #16]
 8004be2:	2800      	cmp	r0, #0
 8004be4:	f000 812b 	beq.w	8004e3e <_svfprintf_r+0x12aa>
 8004be8:	2340      	movs	r3, #64	; 0x40
 8004bea:	f8ca 3014 	str.w	r3, [sl, #20]
 8004bee:	f7fe bfec 	b.w	8003bca <_svfprintf_r+0x36>
 8004bf2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004bf4:	4651      	mov	r1, sl
 8004bf6:	465a      	mov	r2, fp
 8004bf8:	f002 fb3c 	bl	8007274 <__ssprint_r>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	f47f a8a0 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 8004c02:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8004c04:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004c06:	ae1f      	add	r6, sp, #124	; 0x7c
 8004c08:	e6bb      	b.n	8004982 <_svfprintf_r+0xdee>
 8004c0a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004c0c:	2847      	cmp	r0, #71	; 0x47
 8004c0e:	bf18      	it	ne
 8004c10:	2867      	cmpne	r0, #103	; 0x67
 8004c12:	bf14      	ite	ne
 8004c14:	2000      	movne	r0, #0
 8004c16:	2001      	moveq	r0, #1
 8004c18:	900a      	str	r0, [sp, #40]	; 0x28
 8004c1a:	2406      	movs	r4, #6
 8004c1c:	e713      	b.n	8004a46 <_svfprintf_r+0xeb2>
 8004c1e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004c20:	4651      	mov	r1, sl
 8004c22:	465a      	mov	r2, fp
 8004c24:	f002 fb26 	bl	8007274 <__ssprint_r>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	f47f a88a 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 8004c2e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004c30:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004c32:	ae1f      	add	r6, sp, #124	; 0x7c
 8004c34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c38:	6072      	str	r2, [r6, #4]
 8004c3a:	3401      	adds	r4, #1
 8004c3c:	18ad      	adds	r5, r5, r2
 8004c3e:	2c07      	cmp	r4, #7
 8004c40:	6033      	str	r3, [r6, #0]
 8004c42:	953b      	str	r5, [sp, #236]	; 0xec
 8004c44:	943a      	str	r4, [sp, #232]	; 0xe8
 8004c46:	f77f ab4b 	ble.w	80042e0 <_svfprintf_r+0x74c>
 8004c4a:	f7ff bba6 	b.w	800439a <_svfprintf_r+0x806>
 8004c4e:	f002 fae1 	bl	8007214 <strlen>
 8004c52:	900d      	str	r0, [sp, #52]	; 0x34
 8004c54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8004c58:	9512      	str	r5, [sp, #72]	; 0x48
 8004c5a:	900a      	str	r0, [sp, #40]	; 0x28
 8004c5c:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004c60:	970e      	str	r7, [sp, #56]	; 0x38
 8004c62:	9516      	str	r5, [sp, #88]	; 0x58
 8004c64:	f7ff b904 	b.w	8003e70 <_svfprintf_r+0x2dc>
 8004c68:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004c6a:	4651      	mov	r1, sl
 8004c6c:	465a      	mov	r2, fp
 8004c6e:	f002 fb01 	bl	8007274 <__ssprint_r>
 8004c72:	2800      	cmp	r0, #0
 8004c74:	f47f a865 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 8004c78:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004c7a:	ae1f      	add	r6, sp, #124	; 0x7c
 8004c7c:	e4f1      	b.n	8004662 <_svfprintf_r+0xace>
 8004c7e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004c80:	4651      	mov	r1, sl
 8004c82:	465a      	mov	r2, fp
 8004c84:	f002 faf6 	bl	8007274 <__ssprint_r>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	f47f a85a 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 8004c8e:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004c90:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004c92:	ae1f      	add	r6, sp, #124	; 0x7c
 8004c94:	e593      	b.n	80047be <_svfprintf_r+0xc2a>
 8004c96:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004c98:	4651      	mov	r1, sl
 8004c9a:	465a      	mov	r2, fp
 8004c9c:	f002 faea 	bl	8007274 <__ssprint_r>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	f47f a84e 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 8004ca6:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004ca8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004caa:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004cac:	1acb      	subs	r3, r1, r3
 8004cae:	ae1f      	add	r6, sp, #124	; 0x7c
 8004cb0:	e59c      	b.n	80047ec <_svfprintf_r+0xc58>
 8004cb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004cb4:	ebc3 030b 	rsb	r3, r3, fp
 8004cb8:	930d      	str	r3, [sp, #52]	; 0x34
 8004cba:	f7ff b8cf 	b.w	8003e5c <_svfprintf_r+0x2c8>
 8004cbe:	46a0      	mov	r8, r4
 8004cc0:	461c      	mov	r4, r3
 8004cc2:	3401      	adds	r4, #1
 8004cc4:	19ed      	adds	r5, r5, r7
 8004cc6:	2c07      	cmp	r4, #7
 8004cc8:	f8c6 8000 	str.w	r8, [r6]
 8004ccc:	6077      	str	r7, [r6, #4]
 8004cce:	953b      	str	r5, [sp, #236]	; 0xec
 8004cd0:	943a      	str	r4, [sp, #232]	; 0xe8
 8004cd2:	dca4      	bgt.n	8004c1e <_svfprintf_r+0x108a>
 8004cd4:	3608      	adds	r6, #8
 8004cd6:	e7ad      	b.n	8004c34 <_svfprintf_r+0x10a0>
 8004cd8:	2c06      	cmp	r4, #6
 8004cda:	bf28      	it	cs
 8004cdc:	2406      	movcs	r4, #6
 8004cde:	495f      	ldr	r1, [pc, #380]	; (8004e5c <_svfprintf_r+0x12c8>)
 8004ce0:	940d      	str	r4, [sp, #52]	; 0x34
 8004ce2:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 8004ce6:	900a      	str	r0, [sp, #40]	; 0x28
 8004ce8:	970e      	str	r7, [sp, #56]	; 0x38
 8004cea:	9111      	str	r1, [sp, #68]	; 0x44
 8004cec:	f7ff ba01 	b.w	80040f2 <_svfprintf_r+0x55e>
 8004cf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004cf2:	2b65      	cmp	r3, #101	; 0x65
 8004cf4:	dd6f      	ble.n	8004dd6 <_svfprintf_r+0x1242>
 8004cf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004cf8:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004cfa:	2a00      	cmp	r2, #0
 8004cfc:	d15e      	bne.n	8004dbc <_svfprintf_r+0x1228>
 8004cfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004d00:	428a      	cmp	r2, r1
 8004d02:	dc3d      	bgt.n	8004d80 <_svfprintf_r+0x11ec>
 8004d04:	9b08      	ldr	r3, [sp, #32]
 8004d06:	07da      	lsls	r2, r3, #31
 8004d08:	d56c      	bpl.n	8004de4 <_svfprintf_r+0x1250>
 8004d0a:	1c4b      	adds	r3, r1, #1
 8004d0c:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8004d10:	2267      	movs	r2, #103	; 0x67
 8004d12:	930d      	str	r3, [sp, #52]	; 0x34
 8004d14:	900a      	str	r0, [sp, #40]	; 0x28
 8004d16:	9215      	str	r2, [sp, #84]	; 0x54
 8004d18:	9116      	str	r1, [sp, #88]	; 0x58
 8004d1a:	e74d      	b.n	8004bb8 <_svfprintf_r+0x1024>
 8004d1c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8004d1e:	429f      	cmp	r7, r3
 8004d20:	bf98      	it	ls
 8004d22:	461f      	movls	r7, r3
 8004d24:	f67f aee4 	bls.w	8004af0 <_svfprintf_r+0xf5c>
 8004d28:	2230      	movs	r2, #48	; 0x30
 8004d2a:	f803 2b01 	strb.w	r2, [r3], #1
 8004d2e:	42bb      	cmp	r3, r7
 8004d30:	9342      	str	r3, [sp, #264]	; 0x108
 8004d32:	d1fa      	bne.n	8004d2a <_svfprintf_r+0x1196>
 8004d34:	e6dc      	b.n	8004af0 <_svfprintf_r+0xf5c>
 8004d36:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 8004d3a:	9012      	str	r0, [sp, #72]	; 0x48
 8004d3c:	920a      	str	r2, [sp, #40]	; 0x28
 8004d3e:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004d42:	970e      	str	r7, [sp, #56]	; 0x38
 8004d44:	940d      	str	r4, [sp, #52]	; 0x34
 8004d46:	9016      	str	r0, [sp, #88]	; 0x58
 8004d48:	f7ff b892 	b.w	8003e70 <_svfprintf_r+0x2dc>
 8004d4c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004d4e:	4651      	mov	r1, sl
 8004d50:	465a      	mov	r2, fp
 8004d52:	f002 fa8f 	bl	8007274 <__ssprint_r>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	f47e aff3 	bne.w	8003d42 <_svfprintf_r+0x1ae>
 8004d5c:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8004d5e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004d60:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004d62:	ae1f      	add	r6, sp, #124	; 0x7c
 8004d64:	e621      	b.n	80049aa <_svfprintf_r+0xe16>
 8004d66:	212d      	movs	r1, #45	; 0x2d
 8004d68:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8004d6c:	9112      	str	r1, [sp, #72]	; 0x48
 8004d6e:	e673      	b.n	8004a58 <_svfprintf_r+0xec4>
 8004d70:	3130      	adds	r1, #48	; 0x30
 8004d72:	2330      	movs	r3, #48	; 0x30
 8004d74:	f88d 10f3 	strb.w	r1, [sp, #243]	; 0xf3
 8004d78:	f88d 30f2 	strb.w	r3, [sp, #242]	; 0xf2
 8004d7c:	a93d      	add	r1, sp, #244	; 0xf4
 8004d7e:	e70a      	b.n	8004b96 <_svfprintf_r+0x1002>
 8004d80:	2900      	cmp	r1, #0
 8004d82:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004d84:	bfd4      	ite	le
 8004d86:	f1c1 0302 	rsble	r3, r1, #2
 8004d8a:	2301      	movgt	r3, #1
 8004d8c:	181b      	adds	r3, r3, r0
 8004d8e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8004d92:	930d      	str	r3, [sp, #52]	; 0x34
 8004d94:	2367      	movs	r3, #103	; 0x67
 8004d96:	920a      	str	r2, [sp, #40]	; 0x28
 8004d98:	9315      	str	r3, [sp, #84]	; 0x54
 8004d9a:	e7bd      	b.n	8004d18 <_svfprintf_r+0x1184>
 8004d9c:	2401      	movs	r4, #1
 8004d9e:	940a      	str	r4, [sp, #40]	; 0x28
 8004da0:	e651      	b.n	8004a46 <_svfprintf_r+0xeb2>
 8004da2:	4640      	mov	r0, r8
 8004da4:	4629      	mov	r1, r5
 8004da6:	2200      	movs	r2, #0
 8004da8:	2300      	movs	r3, #0
 8004daa:	f003 fe21 	bl	80089f0 <__aeabi_dcmpeq>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	f47f ae92 	bne.w	8004ad8 <_svfprintf_r+0xf44>
 8004db4:	f1c9 0301 	rsb	r3, r9, #1
 8004db8:	9340      	str	r3, [sp, #256]	; 0x100
 8004dba:	e68e      	b.n	8004ada <_svfprintf_r+0xf46>
 8004dbc:	2900      	cmp	r1, #0
 8004dbe:	dd38      	ble.n	8004e32 <_svfprintf_r+0x129e>
 8004dc0:	bb74      	cbnz	r4, 8004e20 <_svfprintf_r+0x128c>
 8004dc2:	9b08      	ldr	r3, [sp, #32]
 8004dc4:	07dd      	lsls	r5, r3, #31
 8004dc6:	d42b      	bmi.n	8004e20 <_svfprintf_r+0x128c>
 8004dc8:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004dcc:	2266      	movs	r2, #102	; 0x66
 8004dce:	900a      	str	r0, [sp, #40]	; 0x28
 8004dd0:	910d      	str	r1, [sp, #52]	; 0x34
 8004dd2:	9215      	str	r2, [sp, #84]	; 0x54
 8004dd4:	e7a0      	b.n	8004d18 <_svfprintf_r+0x1184>
 8004dd6:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004dd8:	e69a      	b.n	8004b10 <_svfprintf_r+0xf7c>
 8004dda:	232d      	movs	r3, #45	; 0x2d
 8004ddc:	4249      	negs	r1, r1
 8004dde:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8004de2:	e6a0      	b.n	8004b26 <_svfprintf_r+0xf92>
 8004de4:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004de8:	2267      	movs	r2, #103	; 0x67
 8004dea:	900a      	str	r0, [sp, #40]	; 0x28
 8004dec:	910d      	str	r1, [sp, #52]	; 0x34
 8004dee:	9215      	str	r2, [sp, #84]	; 0x54
 8004df0:	e792      	b.n	8004d18 <_svfprintf_r+0x1184>
 8004df2:	9908      	ldr	r1, [sp, #32]
 8004df4:	f011 0301 	ands.w	r3, r1, #1
 8004df8:	f47f aed6 	bne.w	8004ba8 <_svfprintf_r+0x1014>
 8004dfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004dfe:	9316      	str	r3, [sp, #88]	; 0x58
 8004e00:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004e04:	920a      	str	r2, [sp, #40]	; 0x28
 8004e06:	e6d7      	b.n	8004bb8 <_svfprintf_r+0x1024>
 8004e08:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004e0a:	680c      	ldr	r4, [r1, #0]
 8004e0c:	1d0b      	adds	r3, r1, #4
 8004e0e:	2c00      	cmp	r4, #0
 8004e10:	bfbc      	itt	lt
 8004e12:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004e14:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 8004e18:	f6bf a985 	bge.w	8004126 <_svfprintf_r+0x592>
 8004e1c:	f7fe bf18 	b.w	8003c50 <_svfprintf_r+0xbc>
 8004e20:	3401      	adds	r4, #1
 8004e22:	190c      	adds	r4, r1, r4
 8004e24:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004e28:	2066      	movs	r0, #102	; 0x66
 8004e2a:	940d      	str	r4, [sp, #52]	; 0x34
 8004e2c:	930a      	str	r3, [sp, #40]	; 0x28
 8004e2e:	9015      	str	r0, [sp, #84]	; 0x54
 8004e30:	e772      	b.n	8004d18 <_svfprintf_r+0x1184>
 8004e32:	b914      	cbnz	r4, 8004e3a <_svfprintf_r+0x12a6>
 8004e34:	9a08      	ldr	r2, [sp, #32]
 8004e36:	07d0      	lsls	r0, r2, #31
 8004e38:	d509      	bpl.n	8004e4e <_svfprintf_r+0x12ba>
 8004e3a:	3402      	adds	r4, #2
 8004e3c:	e7f2      	b.n	8004e24 <_svfprintf_r+0x1290>
 8004e3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e40:	230c      	movs	r3, #12
 8004e42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e46:	600b      	str	r3, [r1, #0]
 8004e48:	920c      	str	r2, [sp, #48]	; 0x30
 8004e4a:	f7fe bf83 	b.w	8003d54 <_svfprintf_r+0x1c0>
 8004e4e:	2001      	movs	r0, #1
 8004e50:	2266      	movs	r2, #102	; 0x66
 8004e52:	900a      	str	r0, [sp, #40]	; 0x28
 8004e54:	9215      	str	r2, [sp, #84]	; 0x54
 8004e56:	900d      	str	r0, [sp, #52]	; 0x34
 8004e58:	e75e      	b.n	8004d18 <_svfprintf_r+0x1184>
 8004e5a:	bf00      	nop
 8004e5c:	080090c0 	.word	0x080090c0

08004e60 <quorem>:
 8004e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e64:	6903      	ldr	r3, [r0, #16]
 8004e66:	690d      	ldr	r5, [r1, #16]
 8004e68:	429d      	cmp	r5, r3
 8004e6a:	4681      	mov	r9, r0
 8004e6c:	f300 8084 	bgt.w	8004f78 <quorem+0x118>
 8004e70:	1ceb      	adds	r3, r5, #3
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	18cf      	adds	r7, r1, r3
 8004e76:	18c3      	adds	r3, r0, r3
 8004e78:	687e      	ldr	r6, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	3601      	adds	r6, #1
 8004e7e:	fbb3 f6f6 	udiv	r6, r3, r6
 8004e82:	f101 0414 	add.w	r4, r1, #20
 8004e86:	3d01      	subs	r5, #1
 8004e88:	3704      	adds	r7, #4
 8004e8a:	f100 0814 	add.w	r8, r0, #20
 8004e8e:	2e00      	cmp	r6, #0
 8004e90:	d03c      	beq.n	8004f0c <quorem+0xac>
 8004e92:	f04f 0e00 	mov.w	lr, #0
 8004e96:	4642      	mov	r2, r8
 8004e98:	4623      	mov	r3, r4
 8004e9a:	46f4      	mov	ip, lr
 8004e9c:	f853 bb04 	ldr.w	fp, [r3], #4
 8004ea0:	6810      	ldr	r0, [r2, #0]
 8004ea2:	fa1f fa8b 	uxth.w	sl, fp
 8004ea6:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 8004eaa:	fb06 ea0a 	mla	sl, r6, sl, lr
 8004eae:	fb06 fe0b 	mul.w	lr, r6, fp
 8004eb2:	eb0e 4e1a 	add.w	lr, lr, sl, lsr #16
 8004eb6:	fa1c fc80 	uxtah	ip, ip, r0
 8004eba:	fa1f fb8e 	uxth.w	fp, lr
 8004ebe:	fa1f fa8a 	uxth.w	sl, sl
 8004ec2:	ebca 0c0c 	rsb	ip, sl, ip
 8004ec6:	ebcb 4010 	rsb	r0, fp, r0, lsr #16
 8004eca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004ece:	fa1f fc8c 	uxth.w	ip, ip
 8004ed2:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8004ed6:	429f      	cmp	r7, r3
 8004ed8:	f842 cb04 	str.w	ip, [r2], #4
 8004edc:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8004ee0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004ee4:	d2da      	bcs.n	8004e9c <quorem+0x3c>
 8004ee6:	1d2a      	adds	r2, r5, #4
 8004ee8:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004eec:	6858      	ldr	r0, [r3, #4]
 8004eee:	b968      	cbnz	r0, 8004f0c <quorem+0xac>
 8004ef0:	4598      	cmp	r8, r3
 8004ef2:	d209      	bcs.n	8004f08 <quorem+0xa8>
 8004ef4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004ef8:	b112      	cbz	r2, 8004f00 <quorem+0xa0>
 8004efa:	e005      	b.n	8004f08 <quorem+0xa8>
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	b91a      	cbnz	r2, 8004f08 <quorem+0xa8>
 8004f00:	3b04      	subs	r3, #4
 8004f02:	3d01      	subs	r5, #1
 8004f04:	4598      	cmp	r8, r3
 8004f06:	d3f9      	bcc.n	8004efc <quorem+0x9c>
 8004f08:	f8c9 5010 	str.w	r5, [r9, #16]
 8004f0c:	4648      	mov	r0, r9
 8004f0e:	f001 fe4f 	bl	8006bb0 <__mcmp>
 8004f12:	2800      	cmp	r0, #0
 8004f14:	db2d      	blt.n	8004f72 <quorem+0x112>
 8004f16:	3601      	adds	r6, #1
 8004f18:	4643      	mov	r3, r8
 8004f1a:	f04f 0c00 	mov.w	ip, #0
 8004f1e:	f854 2b04 	ldr.w	r2, [r4], #4
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	b291      	uxth	r1, r2
 8004f26:	fa1f fa80 	uxth.w	sl, r0
 8004f2a:	0c12      	lsrs	r2, r2, #16
 8004f2c:	ebc1 010a 	rsb	r1, r1, sl
 8004f30:	4461      	add	r1, ip
 8004f32:	ebc2 4210 	rsb	r2, r2, r0, lsr #16
 8004f36:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8004f3a:	b289      	uxth	r1, r1
 8004f3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004f40:	42a7      	cmp	r7, r4
 8004f42:	f843 1b04 	str.w	r1, [r3], #4
 8004f46:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f4a:	d2e8      	bcs.n	8004f1e <quorem+0xbe>
 8004f4c:	1d2a      	adds	r2, r5, #4
 8004f4e:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004f52:	6859      	ldr	r1, [r3, #4]
 8004f54:	b969      	cbnz	r1, 8004f72 <quorem+0x112>
 8004f56:	4598      	cmp	r8, r3
 8004f58:	d209      	bcs.n	8004f6e <quorem+0x10e>
 8004f5a:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004f5e:	b112      	cbz	r2, 8004f66 <quorem+0x106>
 8004f60:	e005      	b.n	8004f6e <quorem+0x10e>
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	b91a      	cbnz	r2, 8004f6e <quorem+0x10e>
 8004f66:	3b04      	subs	r3, #4
 8004f68:	3d01      	subs	r5, #1
 8004f6a:	4598      	cmp	r8, r3
 8004f6c:	d3f9      	bcc.n	8004f62 <quorem+0x102>
 8004f6e:	f8c9 5010 	str.w	r5, [r9, #16]
 8004f72:	4630      	mov	r0, r6
 8004f74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f78:	2000      	movs	r0, #0
 8004f7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f7e:	bf00      	nop

08004f80 <_dtoa_r>:
 8004f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f84:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004f86:	b09d      	sub	sp, #116	; 0x74
 8004f88:	4607      	mov	r7, r0
 8004f8a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004f8c:	4692      	mov	sl, r2
 8004f8e:	469b      	mov	fp, r3
 8004f90:	b141      	cbz	r1, 8004fa4 <_dtoa_r+0x24>
 8004f92:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004f94:	2201      	movs	r2, #1
 8004f96:	409a      	lsls	r2, r3
 8004f98:	604b      	str	r3, [r1, #4]
 8004f9a:	608a      	str	r2, [r1, #8]
 8004f9c:	f001 fbd4 	bl	8006748 <_Bfree>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8004fa4:	f1bb 0500 	subs.w	r5, fp, #0
 8004fa8:	f2c0 80df 	blt.w	800516a <_dtoa_r+0x1ea>
 8004fac:	2300      	movs	r3, #0
 8004fae:	6023      	str	r3, [r4, #0]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8004fb8:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8004fbc:	402b      	ands	r3, r5
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	f000 80be 	beq.w	8005140 <_dtoa_r+0x1c0>
 8004fc4:	4650      	mov	r0, sl
 8004fc6:	4659      	mov	r1, fp
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2300      	movs	r3, #0
 8004fcc:	46d0      	mov	r8, sl
 8004fce:	46d9      	mov	r9, fp
 8004fd0:	2401      	movs	r4, #1
 8004fd2:	f003 fd0d 	bl	80089f0 <__aeabi_dcmpeq>
 8004fd6:	b978      	cbnz	r0, 8004ff8 <_dtoa_r+0x78>
 8004fd8:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004fdc:	d110      	bne.n	8005000 <_dtoa_r+0x80>
 8004fde:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004fe0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	602b      	str	r3, [r5, #0]
 8004fe6:	4d78      	ldr	r5, [pc, #480]	; (80051c8 <_dtoa_r+0x248>)
 8004fe8:	b114      	cbz	r4, 8004ff0 <_dtoa_r+0x70>
 8004fea:	4d78      	ldr	r5, [pc, #480]	; (80051cc <_dtoa_r+0x24c>)
 8004fec:	6025      	str	r5, [r4, #0]
 8004fee:	3d01      	subs	r5, #1
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	b01d      	add	sp, #116	; 0x74
 8004ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff8:	2400      	movs	r4, #0
 8004ffa:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004ffe:	d0ee      	beq.n	8004fde <_dtoa_r+0x5e>
 8005000:	a91b      	add	r1, sp, #108	; 0x6c
 8005002:	9100      	str	r1, [sp, #0]
 8005004:	4638      	mov	r0, r7
 8005006:	a91a      	add	r1, sp, #104	; 0x68
 8005008:	4642      	mov	r2, r8
 800500a:	464b      	mov	r3, r9
 800500c:	9101      	str	r1, [sp, #4]
 800500e:	f001 fed1 	bl	8006db4 <__d2b>
 8005012:	f3c5 540a 	ubfx	r4, r5, #20, #11
 8005016:	900a      	str	r0, [sp, #40]	; 0x28
 8005018:	2c00      	cmp	r4, #0
 800501a:	f040 80b5 	bne.w	8005188 <_dtoa_r+0x208>
 800501e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8005020:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8005022:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8005026:	1934      	adds	r4, r6, r4
 8005028:	429c      	cmp	r4, r3
 800502a:	f2c0 8281 	blt.w	8005530 <_dtoa_r+0x5b0>
 800502e:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8005032:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8005036:	1b1b      	subs	r3, r3, r4
 8005038:	f204 4212 	addw	r2, r4, #1042	; 0x412
 800503c:	fa15 f303 	lsls.w	r3, r5, r3
 8005040:	fa2a f002 	lsr.w	r0, sl, r2
 8005044:	4318      	orrs	r0, r3
 8005046:	f003 f9f5 	bl	8008434 <__aeabi_ui2d>
 800504a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800504e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005050:	2501      	movs	r5, #1
 8005052:	f1a0 70f8 	sub.w	r0, r0, #32505856	; 0x1f00000
 8005056:	900d      	str	r0, [sp, #52]	; 0x34
 8005058:	3c01      	subs	r4, #1
 800505a:	9516      	str	r5, [sp, #88]	; 0x58
 800505c:	2300      	movs	r3, #0
 800505e:	2200      	movs	r2, #0
 8005060:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8005064:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005068:	f003 f8a6 	bl	80081b8 <__aeabi_dsub>
 800506c:	a350      	add	r3, pc, #320	; (adr r3, 80051b0 <_dtoa_r+0x230>)
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	f003 fa55 	bl	8008520 <__aeabi_dmul>
 8005076:	a350      	add	r3, pc, #320	; (adr r3, 80051b8 <_dtoa_r+0x238>)
 8005078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507c:	f003 f89e 	bl	80081bc <__adddf3>
 8005080:	4680      	mov	r8, r0
 8005082:	4620      	mov	r0, r4
 8005084:	4689      	mov	r9, r1
 8005086:	f003 f9e5 	bl	8008454 <__aeabi_i2d>
 800508a:	a34d      	add	r3, pc, #308	; (adr r3, 80051c0 <_dtoa_r+0x240>)
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	f003 fa46 	bl	8008520 <__aeabi_dmul>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4640      	mov	r0, r8
 800509a:	4649      	mov	r1, r9
 800509c:	f003 f88e 	bl	80081bc <__adddf3>
 80050a0:	4680      	mov	r8, r0
 80050a2:	4689      	mov	r9, r1
 80050a4:	f003 fcd6 	bl	8008a54 <__aeabi_d2iz>
 80050a8:	4649      	mov	r1, r9
 80050aa:	9005      	str	r0, [sp, #20]
 80050ac:	2200      	movs	r2, #0
 80050ae:	4640      	mov	r0, r8
 80050b0:	2300      	movs	r3, #0
 80050b2:	f003 fca7 	bl	8008a04 <__aeabi_dcmplt>
 80050b6:	b150      	cbz	r0, 80050ce <_dtoa_r+0x14e>
 80050b8:	9805      	ldr	r0, [sp, #20]
 80050ba:	f003 f9cb 	bl	8008454 <__aeabi_i2d>
 80050be:	4642      	mov	r2, r8
 80050c0:	464b      	mov	r3, r9
 80050c2:	f003 fc95 	bl	80089f0 <__aeabi_dcmpeq>
 80050c6:	b910      	cbnz	r0, 80050ce <_dtoa_r+0x14e>
 80050c8:	9d05      	ldr	r5, [sp, #20]
 80050ca:	3d01      	subs	r5, #1
 80050cc:	9505      	str	r5, [sp, #20]
 80050ce:	9d05      	ldr	r5, [sp, #20]
 80050d0:	2d16      	cmp	r5, #22
 80050d2:	f200 815e 	bhi.w	8005392 <_dtoa_r+0x412>
 80050d6:	4b3e      	ldr	r3, [pc, #248]	; (80051d0 <_dtoa_r+0x250>)
 80050d8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80050dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050e0:	4652      	mov	r2, sl
 80050e2:	465b      	mov	r3, fp
 80050e4:	f003 fcac 	bl	8008a40 <__aeabi_dcmpgt>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	f000 8229 	beq.w	8005540 <_dtoa_r+0x5c0>
 80050ee:	9d05      	ldr	r5, [sp, #20]
 80050f0:	3d01      	subs	r5, #1
 80050f2:	9505      	str	r5, [sp, #20]
 80050f4:	2500      	movs	r5, #0
 80050f6:	9514      	str	r5, [sp, #80]	; 0x50
 80050f8:	1b34      	subs	r4, r6, r4
 80050fa:	3c01      	subs	r4, #1
 80050fc:	f100 8213 	bmi.w	8005526 <_dtoa_r+0x5a6>
 8005100:	2500      	movs	r5, #0
 8005102:	940b      	str	r4, [sp, #44]	; 0x2c
 8005104:	950f      	str	r5, [sp, #60]	; 0x3c
 8005106:	9c05      	ldr	r4, [sp, #20]
 8005108:	2c00      	cmp	r4, #0
 800510a:	f2c0 8203 	blt.w	8005514 <_dtoa_r+0x594>
 800510e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005110:	9413      	str	r4, [sp, #76]	; 0x4c
 8005112:	192d      	adds	r5, r5, r4
 8005114:	2400      	movs	r4, #0
 8005116:	950b      	str	r5, [sp, #44]	; 0x2c
 8005118:	9410      	str	r4, [sp, #64]	; 0x40
 800511a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800511c:	2d09      	cmp	r5, #9
 800511e:	d85d      	bhi.n	80051dc <_dtoa_r+0x25c>
 8005120:	2401      	movs	r4, #1
 8005122:	2d05      	cmp	r5, #5
 8005124:	dd02      	ble.n	800512c <_dtoa_r+0x1ac>
 8005126:	3d04      	subs	r5, #4
 8005128:	9526      	str	r5, [sp, #152]	; 0x98
 800512a:	2400      	movs	r4, #0
 800512c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800512e:	1eab      	subs	r3, r5, #2
 8005130:	2b03      	cmp	r3, #3
 8005132:	d855      	bhi.n	80051e0 <_dtoa_r+0x260>
 8005134:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005138:	036d0382 	.word	0x036d0382
 800513c:	03850246 	.word	0x03850246
 8005140:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8005142:	f242 730f 	movw	r3, #9999	; 0x270f
 8005146:	6023      	str	r3, [r4, #0]
 8005148:	f1ba 0f00 	cmp.w	sl, #0
 800514c:	d013      	beq.n	8005176 <_dtoa_r+0x1f6>
 800514e:	4d21      	ldr	r5, [pc, #132]	; (80051d4 <_dtoa_r+0x254>)
 8005150:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8005152:	2c00      	cmp	r4, #0
 8005154:	f43f af4c 	beq.w	8004ff0 <_dtoa_r+0x70>
 8005158:	78eb      	ldrb	r3, [r5, #3]
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 8117 	beq.w	800538e <_dtoa_r+0x40e>
 8005160:	f105 0308 	add.w	r3, r5, #8
 8005164:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8005166:	6023      	str	r3, [r4, #0]
 8005168:	e742      	b.n	8004ff0 <_dtoa_r+0x70>
 800516a:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 800516e:	2301      	movs	r3, #1
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	46ab      	mov	fp, r5
 8005174:	e71c      	b.n	8004fb0 <_dtoa_r+0x30>
 8005176:	4b17      	ldr	r3, [pc, #92]	; (80051d4 <_dtoa_r+0x254>)
 8005178:	4a17      	ldr	r2, [pc, #92]	; (80051d8 <_dtoa_r+0x258>)
 800517a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800517e:	2d00      	cmp	r5, #0
 8005180:	bf0c      	ite	eq
 8005182:	4615      	moveq	r5, r2
 8005184:	461d      	movne	r5, r3
 8005186:	e7e3      	b.n	8005150 <_dtoa_r+0x1d0>
 8005188:	4649      	mov	r1, r9
 800518a:	4640      	mov	r0, r8
 800518c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005190:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005192:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8005194:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 8005198:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800519c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80051a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80051a4:	2500      	movs	r5, #0
 80051a6:	930d      	str	r3, [sp, #52]	; 0x34
 80051a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80051ac:	9516      	str	r5, [sp, #88]	; 0x58
 80051ae:	e755      	b.n	800505c <_dtoa_r+0xdc>
 80051b0:	636f4361 	.word	0x636f4361
 80051b4:	3fd287a7 	.word	0x3fd287a7
 80051b8:	8b60c8b3 	.word	0x8b60c8b3
 80051bc:	3fc68a28 	.word	0x3fc68a28
 80051c0:	509f79fb 	.word	0x509f79fb
 80051c4:	3fd34413 	.word	0x3fd34413
 80051c8:	080090c8 	.word	0x080090c8
 80051cc:	080090c9 	.word	0x080090c9
 80051d0:	08008e28 	.word	0x08008e28
 80051d4:	080090d8 	.word	0x080090d8
 80051d8:	080090cc 	.word	0x080090cc
 80051dc:	2400      	movs	r4, #0
 80051de:	9426      	str	r4, [sp, #152]	; 0x98
 80051e0:	2400      	movs	r4, #0
 80051e2:	647c      	str	r4, [r7, #68]	; 0x44
 80051e4:	4638      	mov	r0, r7
 80051e6:	4621      	mov	r1, r4
 80051e8:	f001 fa88 	bl	80066fc <_Balloc>
 80051ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80051f0:	950e      	str	r5, [sp, #56]	; 0x38
 80051f2:	2501      	movs	r5, #1
 80051f4:	9512      	str	r5, [sp, #72]	; 0x48
 80051f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80051fa:	9009      	str	r0, [sp, #36]	; 0x24
 80051fc:	6438      	str	r0, [r7, #64]	; 0x40
 80051fe:	9515      	str	r5, [sp, #84]	; 0x54
 8005200:	9427      	str	r4, [sp, #156]	; 0x9c
 8005202:	9c05      	ldr	r4, [sp, #20]
 8005204:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005206:	2c0e      	cmp	r4, #14
 8005208:	bfcc      	ite	gt
 800520a:	2500      	movgt	r5, #0
 800520c:	2501      	movle	r5, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	bfb8      	it	lt
 8005212:	2500      	movlt	r5, #0
 8005214:	2d00      	cmp	r5, #0
 8005216:	f000 80c1 	beq.w	800539c <_dtoa_r+0x41c>
 800521a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800521c:	4b5e      	ldr	r3, [pc, #376]	; (8005398 <_dtoa_r+0x418>)
 800521e:	0fe5      	lsrs	r5, r4, #31
 8005220:	9c05      	ldr	r4, [sp, #20]
 8005222:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800522a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800522c:	2c00      	cmp	r4, #0
 800522e:	bfcc      	ite	gt
 8005230:	2500      	movgt	r5, #0
 8005232:	f005 0501 	andle.w	r5, r5, #1
 8005236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800523a:	2d00      	cmp	r5, #0
 800523c:	f040 81a8 	bne.w	8005590 <_dtoa_r+0x610>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4650      	mov	r0, sl
 8005246:	4659      	mov	r1, fp
 8005248:	f003 fa94 	bl	8008774 <__aeabi_ddiv>
 800524c:	f003 fc02 	bl	8008a54 <__aeabi_d2iz>
 8005250:	4606      	mov	r6, r0
 8005252:	f003 f8ff 	bl	8008454 <__aeabi_i2d>
 8005256:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800525a:	f003 f961 	bl	8008520 <__aeabi_dmul>
 800525e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005260:	460b      	mov	r3, r1
 8005262:	4602      	mov	r2, r0
 8005264:	4659      	mov	r1, fp
 8005266:	4650      	mov	r0, sl
 8005268:	f002 ffa6 	bl	80081b8 <__aeabi_dsub>
 800526c:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8005270:	f804 3b01 	strb.w	r3, [r4], #1
 8005274:	9411      	str	r4, [sp, #68]	; 0x44
 8005276:	46a0      	mov	r8, r4
 8005278:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800527a:	2c01      	cmp	r4, #1
 800527c:	4682      	mov	sl, r0
 800527e:	468b      	mov	fp, r1
 8005280:	d04c      	beq.n	800531c <_dtoa_r+0x39c>
 8005282:	2300      	movs	r3, #0
 8005284:	2200      	movs	r2, #0
 8005286:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800528a:	f003 f949 	bl	8008520 <__aeabi_dmul>
 800528e:	2200      	movs	r2, #0
 8005290:	2300      	movs	r3, #0
 8005292:	4682      	mov	sl, r0
 8005294:	468b      	mov	fp, r1
 8005296:	2401      	movs	r4, #1
 8005298:	f003 fbaa 	bl	80089f0 <__aeabi_dcmpeq>
 800529c:	b100      	cbz	r0, 80052a0 <_dtoa_r+0x320>
 800529e:	462c      	mov	r4, r5
 80052a0:	f014 0fff 	tst.w	r4, #255	; 0xff
 80052a4:	f000 8575 	beq.w	8005d92 <_dtoa_r+0xe12>
 80052a8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80052aa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80052ac:	1ca5      	adds	r5, r4, #2
 80052ae:	eb04 0900 	add.w	r9, r4, r0
 80052b2:	e00d      	b.n	80052d0 <_dtoa_r+0x350>
 80052b4:	f003 f934 	bl	8008520 <__aeabi_dmul>
 80052b8:	2200      	movs	r2, #0
 80052ba:	2300      	movs	r3, #0
 80052bc:	4682      	mov	sl, r0
 80052be:	468b      	mov	fp, r1
 80052c0:	f003 fb96 	bl	80089f0 <__aeabi_dcmpeq>
 80052c4:	b100      	cbz	r0, 80052c8 <_dtoa_r+0x348>
 80052c6:	2400      	movs	r4, #0
 80052c8:	f014 0fff 	tst.w	r4, #255	; 0xff
 80052cc:	f000 8423 	beq.w	8005b16 <_dtoa_r+0xb96>
 80052d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052d4:	4650      	mov	r0, sl
 80052d6:	4659      	mov	r1, fp
 80052d8:	f003 fa4c 	bl	8008774 <__aeabi_ddiv>
 80052dc:	f003 fbba 	bl	8008a54 <__aeabi_d2iz>
 80052e0:	4606      	mov	r6, r0
 80052e2:	f003 f8b7 	bl	8008454 <__aeabi_i2d>
 80052e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052ea:	f003 f919 	bl	8008520 <__aeabi_dmul>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	4650      	mov	r0, sl
 80052f4:	4659      	mov	r1, fp
 80052f6:	f002 ff5f 	bl	80081b8 <__aeabi_dsub>
 80052fa:	f106 0430 	add.w	r4, r6, #48	; 0x30
 80052fe:	2300      	movs	r3, #0
 8005300:	2200      	movs	r2, #0
 8005302:	454d      	cmp	r5, r9
 8005304:	f805 4c01 	strb.w	r4, [r5, #-1]
 8005308:	46a8      	mov	r8, r5
 800530a:	4682      	mov	sl, r0
 800530c:	468b      	mov	fp, r1
 800530e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005312:	f04f 0401 	mov.w	r4, #1
 8005316:	f105 0501 	add.w	r5, r5, #1
 800531a:	d1cb      	bne.n	80052b4 <_dtoa_r+0x334>
 800531c:	4652      	mov	r2, sl
 800531e:	465b      	mov	r3, fp
 8005320:	4650      	mov	r0, sl
 8005322:	4659      	mov	r1, fp
 8005324:	f002 ff4a 	bl	80081bc <__adddf3>
 8005328:	4604      	mov	r4, r0
 800532a:	460d      	mov	r5, r1
 800532c:	4622      	mov	r2, r4
 800532e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005332:	462b      	mov	r3, r5
 8005334:	f003 fb66 	bl	8008a04 <__aeabi_dcmplt>
 8005338:	b958      	cbnz	r0, 8005352 <_dtoa_r+0x3d2>
 800533a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800533e:	4622      	mov	r2, r4
 8005340:	462b      	mov	r3, r5
 8005342:	f003 fb55 	bl	80089f0 <__aeabi_dcmpeq>
 8005346:	2800      	cmp	r0, #0
 8005348:	f000 83e5 	beq.w	8005b16 <_dtoa_r+0xb96>
 800534c:	07f3      	lsls	r3, r6, #31
 800534e:	f140 83e2 	bpl.w	8005b16 <_dtoa_r+0xb96>
 8005352:	9c05      	ldr	r4, [sp, #20]
 8005354:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8005358:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800535a:	9417      	str	r4, [sp, #92]	; 0x5c
 800535c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800535e:	e003      	b.n	8005368 <_dtoa_r+0x3e8>
 8005360:	f818 6c02 	ldrb.w	r6, [r8, #-2]
 8005364:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005368:	2e39      	cmp	r6, #57	; 0x39
 800536a:	4643      	mov	r3, r8
 800536c:	f040 8489 	bne.w	8005c82 <_dtoa_r+0xd02>
 8005370:	4590      	cmp	r8, r2
 8005372:	d1f5      	bne.n	8005360 <_dtoa_r+0x3e0>
 8005374:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005376:	9309      	str	r3, [sp, #36]	; 0x24
 8005378:	3401      	adds	r4, #1
 800537a:	9405      	str	r4, [sp, #20]
 800537c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800537e:	2330      	movs	r3, #48	; 0x30
 8005380:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005384:	2231      	movs	r2, #49	; 0x31
 8005386:	4623      	mov	r3, r4
 8005388:	f803 2c01 	strb.w	r2, [r3, #-1]
 800538c:	e0b0      	b.n	80054f0 <_dtoa_r+0x570>
 800538e:	1ceb      	adds	r3, r5, #3
 8005390:	e6e8      	b.n	8005164 <_dtoa_r+0x1e4>
 8005392:	2501      	movs	r5, #1
 8005394:	9514      	str	r5, [sp, #80]	; 0x50
 8005396:	e6af      	b.n	80050f8 <_dtoa_r+0x178>
 8005398:	08008e28 	.word	0x08008e28
 800539c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800539e:	2c00      	cmp	r4, #0
 80053a0:	f040 80d1 	bne.w	8005546 <_dtoa_r+0x5c6>
 80053a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80053a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80053aa:	9306      	str	r3, [sp, #24]
 80053ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80053ae:	2800      	cmp	r0, #0
 80053b0:	bfc8      	it	gt
 80053b2:	2c00      	cmpgt	r4, #0
 80053b4:	dd09      	ble.n	80053ca <_dtoa_r+0x44a>
 80053b6:	4603      	mov	r3, r0
 80053b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80053ba:	42a3      	cmp	r3, r4
 80053bc:	bfa8      	it	ge
 80053be:	4623      	movge	r3, r4
 80053c0:	1ac9      	subs	r1, r1, r3
 80053c2:	1ac0      	subs	r0, r0, r3
 80053c4:	910f      	str	r1, [sp, #60]	; 0x3c
 80053c6:	1ae4      	subs	r4, r4, r3
 80053c8:	900b      	str	r0, [sp, #44]	; 0x2c
 80053ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053cc:	2a00      	cmp	r2, #0
 80053ce:	dd1a      	ble.n	8005406 <_dtoa_r+0x486>
 80053d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 841d 	beq.w	8005c12 <_dtoa_r+0xc92>
 80053d8:	2d00      	cmp	r5, #0
 80053da:	dd10      	ble.n	80053fe <_dtoa_r+0x47e>
 80053dc:	9906      	ldr	r1, [sp, #24]
 80053de:	462a      	mov	r2, r5
 80053e0:	4638      	mov	r0, r7
 80053e2:	f001 fb39 	bl	8006a58 <__pow5mult>
 80053e6:	9006      	str	r0, [sp, #24]
 80053e8:	9906      	ldr	r1, [sp, #24]
 80053ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053ec:	4638      	mov	r0, r7
 80053ee:	f001 fa9b 	bl	8006928 <__multiply>
 80053f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80053f4:	4606      	mov	r6, r0
 80053f6:	4638      	mov	r0, r7
 80053f8:	f001 f9a6 	bl	8006748 <_Bfree>
 80053fc:	960a      	str	r6, [sp, #40]	; 0x28
 80053fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005400:	1b42      	subs	r2, r0, r5
 8005402:	f040 8429 	bne.w	8005c58 <_dtoa_r+0xcd8>
 8005406:	2101      	movs	r1, #1
 8005408:	4638      	mov	r0, r7
 800540a:	f001 fa83 	bl	8006914 <__i2b>
 800540e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8005410:	2d00      	cmp	r5, #0
 8005412:	4606      	mov	r6, r0
 8005414:	dd05      	ble.n	8005422 <_dtoa_r+0x4a2>
 8005416:	4631      	mov	r1, r6
 8005418:	4638      	mov	r0, r7
 800541a:	462a      	mov	r2, r5
 800541c:	f001 fb1c 	bl	8006a58 <__pow5mult>
 8005420:	4606      	mov	r6, r0
 8005422:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8005424:	2d01      	cmp	r5, #1
 8005426:	f340 820f 	ble.w	8005848 <_dtoa_r+0x8c8>
 800542a:	2500      	movs	r5, #0
 800542c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800542e:	2301      	movs	r3, #1
 8005430:	2800      	cmp	r0, #0
 8005432:	f040 838c 	bne.w	8005b4e <_dtoa_r+0xbce>
 8005436:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005438:	185b      	adds	r3, r3, r1
 800543a:	f013 031f 	ands.w	r3, r3, #31
 800543e:	f000 82cb 	beq.w	80059d8 <_dtoa_r+0xa58>
 8005442:	f1c3 0220 	rsb	r2, r3, #32
 8005446:	2a04      	cmp	r2, #4
 8005448:	f340 84bf 	ble.w	8005dca <_dtoa_r+0xe4a>
 800544c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800544e:	f1c3 031c 	rsb	r3, r3, #28
 8005452:	18d2      	adds	r2, r2, r3
 8005454:	18c9      	adds	r1, r1, r3
 8005456:	920f      	str	r2, [sp, #60]	; 0x3c
 8005458:	18e4      	adds	r4, r4, r3
 800545a:	910b      	str	r1, [sp, #44]	; 0x2c
 800545c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800545e:	2a00      	cmp	r2, #0
 8005460:	dd04      	ble.n	800546c <_dtoa_r+0x4ec>
 8005462:	4638      	mov	r0, r7
 8005464:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005466:	f001 fb43 	bl	8006af0 <__lshift>
 800546a:	900a      	str	r0, [sp, #40]	; 0x28
 800546c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800546e:	2b00      	cmp	r3, #0
 8005470:	dd05      	ble.n	800547e <_dtoa_r+0x4fe>
 8005472:	4631      	mov	r1, r6
 8005474:	4638      	mov	r0, r7
 8005476:	461a      	mov	r2, r3
 8005478:	f001 fb3a 	bl	8006af0 <__lshift>
 800547c:	4606      	mov	r6, r0
 800547e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005480:	2800      	cmp	r0, #0
 8005482:	f040 834c 	bne.w	8005b1e <_dtoa_r+0xb9e>
 8005486:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005488:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800548a:	2900      	cmp	r1, #0
 800548c:	bfcc      	ite	gt
 800548e:	2300      	movgt	r3, #0
 8005490:	2301      	movle	r3, #1
 8005492:	2a02      	cmp	r2, #2
 8005494:	bfd8      	it	le
 8005496:	2300      	movle	r3, #0
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 8226 	beq.w	80058ea <_dtoa_r+0x96a>
 800549e:	2900      	cmp	r1, #0
 80054a0:	f040 808a 	bne.w	80055b8 <_dtoa_r+0x638>
 80054a4:	4631      	mov	r1, r6
 80054a6:	2205      	movs	r2, #5
 80054a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054aa:	4638      	mov	r0, r7
 80054ac:	f001 f956 	bl	800675c <__multadd>
 80054b0:	4606      	mov	r6, r0
 80054b2:	4631      	mov	r1, r6
 80054b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80054b6:	f001 fb7b 	bl	8006bb0 <__mcmp>
 80054ba:	2800      	cmp	r0, #0
 80054bc:	dd7c      	ble.n	80055b8 <_dtoa_r+0x638>
 80054be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c0:	9c05      	ldr	r4, [sp, #20]
 80054c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80054c4:	2231      	movs	r2, #49	; 0x31
 80054c6:	f803 2b01 	strb.w	r2, [r3], #1
 80054ca:	3401      	adds	r4, #1
 80054cc:	9405      	str	r4, [sp, #20]
 80054ce:	9309      	str	r3, [sp, #36]	; 0x24
 80054d0:	2400      	movs	r4, #0
 80054d2:	4638      	mov	r0, r7
 80054d4:	4631      	mov	r1, r6
 80054d6:	f001 f937 	bl	8006748 <_Bfree>
 80054da:	9806      	ldr	r0, [sp, #24]
 80054dc:	b140      	cbz	r0, 80054f0 <_dtoa_r+0x570>
 80054de:	4284      	cmp	r4, r0
 80054e0:	bf18      	it	ne
 80054e2:	2c00      	cmpne	r4, #0
 80054e4:	f040 8273 	bne.w	80059ce <_dtoa_r+0xa4e>
 80054e8:	4638      	mov	r0, r7
 80054ea:	9906      	ldr	r1, [sp, #24]
 80054ec:	f001 f92c 	bl	8006748 <_Bfree>
 80054f0:	4638      	mov	r0, r7
 80054f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054f4:	f001 f928 	bl	8006748 <_Bfree>
 80054f8:	9c05      	ldr	r4, [sp, #20]
 80054fa:	1c63      	adds	r3, r4, #1
 80054fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80054fe:	2200      	movs	r2, #0
 8005500:	7022      	strb	r2, [r4, #0]
 8005502:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8005508:	2c00      	cmp	r4, #0
 800550a:	f43f ad71 	beq.w	8004ff0 <_dtoa_r+0x70>
 800550e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005510:	6020      	str	r0, [r4, #0]
 8005512:	e56d      	b.n	8004ff0 <_dtoa_r+0x70>
 8005514:	9c05      	ldr	r4, [sp, #20]
 8005516:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005518:	1b2d      	subs	r5, r5, r4
 800551a:	950f      	str	r5, [sp, #60]	; 0x3c
 800551c:	4265      	negs	r5, r4
 800551e:	2400      	movs	r4, #0
 8005520:	9510      	str	r5, [sp, #64]	; 0x40
 8005522:	9413      	str	r4, [sp, #76]	; 0x4c
 8005524:	e5f9      	b.n	800511a <_dtoa_r+0x19a>
 8005526:	4264      	negs	r4, r4
 8005528:	940f      	str	r4, [sp, #60]	; 0x3c
 800552a:	2400      	movs	r4, #0
 800552c:	940b      	str	r4, [sp, #44]	; 0x2c
 800552e:	e5ea      	b.n	8005106 <_dtoa_r+0x186>
 8005530:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8005534:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8005538:	1b00      	subs	r0, r0, r4
 800553a:	fa0a f000 	lsl.w	r0, sl, r0
 800553e:	e582      	b.n	8005046 <_dtoa_r+0xc6>
 8005540:	2500      	movs	r5, #0
 8005542:	9514      	str	r5, [sp, #80]	; 0x50
 8005544:	e5d8      	b.n	80050f8 <_dtoa_r+0x178>
 8005546:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8005548:	2c01      	cmp	r4, #1
 800554a:	f340 838f 	ble.w	8005c6c <_dtoa_r+0xcec>
 800554e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005550:	1e62      	subs	r2, r4, #1
 8005552:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005554:	4294      	cmp	r4, r2
 8005556:	bfbf      	itttt	lt
 8005558:	9c10      	ldrlt	r4, [sp, #64]	; 0x40
 800555a:	9210      	strlt	r2, [sp, #64]	; 0x40
 800555c:	ebc4 0302 	rsblt	r3, r4, r2
 8005560:	9c13      	ldrlt	r4, [sp, #76]	; 0x4c
 8005562:	bfb6      	itet	lt
 8005564:	18e4      	addlt	r4, r4, r3
 8005566:	ebc2 0504 	rsbge	r5, r2, r4
 800556a:	9413      	strlt	r4, [sp, #76]	; 0x4c
 800556c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800556e:	2c00      	cmp	r4, #0
 8005570:	f2c0 838f 	blt.w	8005c92 <_dtoa_r+0xd12>
 8005574:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005578:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800557a:	18d2      	adds	r2, r2, r3
 800557c:	920f      	str	r2, [sp, #60]	; 0x3c
 800557e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005580:	4638      	mov	r0, r7
 8005582:	18d2      	adds	r2, r2, r3
 8005584:	2101      	movs	r1, #1
 8005586:	920b      	str	r2, [sp, #44]	; 0x2c
 8005588:	f001 f9c4 	bl	8006914 <__i2b>
 800558c:	9006      	str	r0, [sp, #24]
 800558e:	e70d      	b.n	80053ac <_dtoa_r+0x42c>
 8005590:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005592:	2d00      	cmp	r5, #0
 8005594:	f040 8367 	bne.w	8005c66 <_dtoa_r+0xce6>
 8005598:	2300      	movs	r3, #0
 800559a:	2200      	movs	r2, #0
 800559c:	f2c4 0314 	movt	r3, #16404	; 0x4014
 80055a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055a4:	f002 ffbc 	bl	8008520 <__aeabi_dmul>
 80055a8:	4652      	mov	r2, sl
 80055aa:	465b      	mov	r3, fp
 80055ac:	f003 fa3e 	bl	8008a2c <__aeabi_dcmpge>
 80055b0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80055b2:	9606      	str	r6, [sp, #24]
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d082      	beq.n	80054be <_dtoa_r+0x53e>
 80055b8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80055ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80055bc:	43e4      	mvns	r4, r4
 80055be:	9405      	str	r4, [sp, #20]
 80055c0:	2400      	movs	r4, #0
 80055c2:	e786      	b.n	80054d2 <_dtoa_r+0x552>
 80055c4:	2501      	movs	r5, #1
 80055c6:	9512      	str	r5, [sp, #72]	; 0x48
 80055c8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80055ca:	2d00      	cmp	r5, #0
 80055cc:	f340 82d3 	ble.w	8005b76 <_dtoa_r+0xbf6>
 80055d0:	46a9      	mov	r9, r5
 80055d2:	2d0e      	cmp	r5, #14
 80055d4:	bf8c      	ite	hi
 80055d6:	2400      	movhi	r4, #0
 80055d8:	f004 0401 	andls.w	r4, r4, #1
 80055dc:	9515      	str	r5, [sp, #84]	; 0x54
 80055de:	950e      	str	r5, [sp, #56]	; 0x38
 80055e0:	2100      	movs	r1, #0
 80055e2:	f1b9 0f17 	cmp.w	r9, #23
 80055e6:	6479      	str	r1, [r7, #68]	; 0x44
 80055e8:	d909      	bls.n	80055fe <_dtoa_r+0x67e>
 80055ea:	2201      	movs	r2, #1
 80055ec:	2304      	movs	r3, #4
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	f103 0014 	add.w	r0, r3, #20
 80055f4:	4611      	mov	r1, r2
 80055f6:	3201      	adds	r2, #1
 80055f8:	4548      	cmp	r0, r9
 80055fa:	d9f8      	bls.n	80055ee <_dtoa_r+0x66e>
 80055fc:	6479      	str	r1, [r7, #68]	; 0x44
 80055fe:	4638      	mov	r0, r7
 8005600:	f001 f87c 	bl	80066fc <_Balloc>
 8005604:	9009      	str	r0, [sp, #36]	; 0x24
 8005606:	6438      	str	r0, [r7, #64]	; 0x40
 8005608:	2c00      	cmp	r4, #0
 800560a:	f43f adfa 	beq.w	8005202 <_dtoa_r+0x282>
 800560e:	9c05      	ldr	r4, [sp, #20]
 8005610:	4652      	mov	r2, sl
 8005612:	465b      	mov	r3, fp
 8005614:	2c00      	cmp	r4, #0
 8005616:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800561a:	f340 81f8 	ble.w	8005a0e <_dtoa_r+0xa8e>
 800561e:	4b97      	ldr	r3, [pc, #604]	; (800587c <_dtoa_r+0x8fc>)
 8005620:	f004 020f 	and.w	r2, r4, #15
 8005624:	1124      	asrs	r4, r4, #4
 8005626:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800562a:	2602      	movs	r6, #2
 800562c:	06e2      	lsls	r2, r4, #27
 800562e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005632:	d50b      	bpl.n	800564c <_dtoa_r+0x6cc>
 8005634:	4b92      	ldr	r3, [pc, #584]	; (8005880 <_dtoa_r+0x900>)
 8005636:	4650      	mov	r0, sl
 8005638:	4659      	mov	r1, fp
 800563a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800563e:	f003 f899 	bl	8008774 <__aeabi_ddiv>
 8005642:	f004 040f 	and.w	r4, r4, #15
 8005646:	4682      	mov	sl, r0
 8005648:	468b      	mov	fp, r1
 800564a:	2603      	movs	r6, #3
 800564c:	b174      	cbz	r4, 800566c <_dtoa_r+0x6ec>
 800564e:	4d8c      	ldr	r5, [pc, #560]	; (8005880 <_dtoa_r+0x900>)
 8005650:	4640      	mov	r0, r8
 8005652:	4649      	mov	r1, r9
 8005654:	07e3      	lsls	r3, r4, #31
 8005656:	d504      	bpl.n	8005662 <_dtoa_r+0x6e2>
 8005658:	e9d5 2300 	ldrd	r2, r3, [r5]
 800565c:	f002 ff60 	bl	8008520 <__aeabi_dmul>
 8005660:	3601      	adds	r6, #1
 8005662:	3508      	adds	r5, #8
 8005664:	1064      	asrs	r4, r4, #1
 8005666:	d1f5      	bne.n	8005654 <_dtoa_r+0x6d4>
 8005668:	4680      	mov	r8, r0
 800566a:	4689      	mov	r9, r1
 800566c:	4650      	mov	r0, sl
 800566e:	4659      	mov	r1, fp
 8005670:	4642      	mov	r2, r8
 8005672:	464b      	mov	r3, r9
 8005674:	f003 f87e 	bl	8008774 <__aeabi_ddiv>
 8005678:	4682      	mov	sl, r0
 800567a:	468b      	mov	fp, r1
 800567c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800567e:	2c00      	cmp	r4, #0
 8005680:	f000 8100 	beq.w	8005884 <_dtoa_r+0x904>
 8005684:	2300      	movs	r3, #0
 8005686:	4650      	mov	r0, sl
 8005688:	4659      	mov	r1, fp
 800568a:	2200      	movs	r2, #0
 800568c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8005690:	2401      	movs	r4, #1
 8005692:	f003 f9b7 	bl	8008a04 <__aeabi_dcmplt>
 8005696:	b900      	cbnz	r0, 800569a <_dtoa_r+0x71a>
 8005698:	2400      	movs	r4, #0
 800569a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800569c:	2d00      	cmp	r5, #0
 800569e:	bfd4      	ite	le
 80056a0:	2400      	movle	r4, #0
 80056a2:	f004 0401 	andgt.w	r4, r4, #1
 80056a6:	2c00      	cmp	r4, #0
 80056a8:	f000 80ec 	beq.w	8005884 <_dtoa_r+0x904>
 80056ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80056ae:	2c00      	cmp	r4, #0
 80056b0:	f340 819b 	ble.w	80059ea <_dtoa_r+0xa6a>
 80056b4:	2300      	movs	r3, #0
 80056b6:	2200      	movs	r2, #0
 80056b8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80056bc:	4650      	mov	r0, sl
 80056be:	4659      	mov	r1, fp
 80056c0:	f002 ff2e 	bl	8008520 <__aeabi_dmul>
 80056c4:	4682      	mov	sl, r0
 80056c6:	1c70      	adds	r0, r6, #1
 80056c8:	468b      	mov	fp, r1
 80056ca:	f002 fec3 	bl	8008454 <__aeabi_i2d>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4650      	mov	r0, sl
 80056d4:	4659      	mov	r1, fp
 80056d6:	f002 ff23 	bl	8008520 <__aeabi_dmul>
 80056da:	2300      	movs	r3, #0
 80056dc:	2200      	movs	r2, #0
 80056de:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80056e2:	f002 fd6b 	bl	80081bc <__adddf3>
 80056e6:	9d05      	ldr	r5, [sp, #20]
 80056e8:	3d01      	subs	r5, #1
 80056ea:	9517      	str	r5, [sp, #92]	; 0x5c
 80056ec:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80056ee:	4680      	mov	r8, r0
 80056f0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80056f4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80056f6:	2c00      	cmp	r4, #0
 80056f8:	f000 81b0 	beq.w	8005a5c <_dtoa_r+0xadc>
 80056fc:	4b5f      	ldr	r3, [pc, #380]	; (800587c <_dtoa_r+0x8fc>)
 80056fe:	2100      	movs	r1, #0
 8005700:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005704:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005708:	2000      	movs	r0, #0
 800570a:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800570e:	f003 f831 	bl	8008774 <__aeabi_ddiv>
 8005712:	4642      	mov	r2, r8
 8005714:	464b      	mov	r3, r9
 8005716:	f002 fd4f 	bl	80081b8 <__aeabi_dsub>
 800571a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800571e:	4659      	mov	r1, fp
 8005720:	4650      	mov	r0, sl
 8005722:	f003 f997 	bl	8008a54 <__aeabi_d2iz>
 8005726:	4606      	mov	r6, r0
 8005728:	f002 fe94 	bl	8008454 <__aeabi_i2d>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4650      	mov	r0, sl
 8005732:	4659      	mov	r1, fp
 8005734:	f002 fd40 	bl	80081b8 <__aeabi_dsub>
 8005738:	3630      	adds	r6, #48	; 0x30
 800573a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800573c:	b2f6      	uxtb	r6, r6
 800573e:	4682      	mov	sl, r0
 8005740:	468b      	mov	fp, r1
 8005742:	f804 6b01 	strb.w	r6, [r4], #1
 8005746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800574a:	4652      	mov	r2, sl
 800574c:	465b      	mov	r3, fp
 800574e:	9411      	str	r4, [sp, #68]	; 0x44
 8005750:	46a0      	mov	r8, r4
 8005752:	f003 f975 	bl	8008a40 <__aeabi_dcmpgt>
 8005756:	2800      	cmp	r0, #0
 8005758:	f040 8325 	bne.w	8005da6 <_dtoa_r+0xe26>
 800575c:	2100      	movs	r1, #0
 800575e:	4652      	mov	r2, sl
 8005760:	465b      	mov	r3, fp
 8005762:	2000      	movs	r0, #0
 8005764:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8005768:	f002 fd26 	bl	80081b8 <__aeabi_dsub>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005774:	f003 f964 	bl	8008a40 <__aeabi_dcmpgt>
 8005778:	2800      	cmp	r0, #0
 800577a:	f040 827f 	bne.w	8005c7c <_dtoa_r+0xcfc>
 800577e:	2d01      	cmp	r5, #1
 8005780:	f340 8133 	ble.w	80059ea <_dtoa_r+0xa6a>
 8005784:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005786:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005788:	1945      	adds	r5, r0, r5
 800578a:	e00f      	b.n	80057ac <_dtoa_r+0x82c>
 800578c:	2100      	movs	r1, #0
 800578e:	2000      	movs	r0, #0
 8005790:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8005794:	f002 fd10 	bl	80081b8 <__aeabi_dsub>
 8005798:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800579c:	f003 f932 	bl	8008a04 <__aeabi_dcmplt>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	f040 826b 	bne.w	8005c7c <_dtoa_r+0xcfc>
 80057a6:	42ac      	cmp	r4, r5
 80057a8:	f000 811f 	beq.w	80059ea <_dtoa_r+0xa6a>
 80057ac:	2300      	movs	r3, #0
 80057ae:	2200      	movs	r2, #0
 80057b0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80057b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057b8:	f002 feb2 	bl	8008520 <__aeabi_dmul>
 80057bc:	2300      	movs	r3, #0
 80057be:	2200      	movs	r2, #0
 80057c0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80057c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80057c8:	4650      	mov	r0, sl
 80057ca:	4659      	mov	r1, fp
 80057cc:	f002 fea8 	bl	8008520 <__aeabi_dmul>
 80057d0:	4680      	mov	r8, r0
 80057d2:	4689      	mov	r9, r1
 80057d4:	f003 f93e 	bl	8008a54 <__aeabi_d2iz>
 80057d8:	4606      	mov	r6, r0
 80057da:	f002 fe3b 	bl	8008454 <__aeabi_i2d>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4640      	mov	r0, r8
 80057e4:	4649      	mov	r1, r9
 80057e6:	f002 fce7 	bl	80081b8 <__aeabi_dsub>
 80057ea:	3630      	adds	r6, #48	; 0x30
 80057ec:	b2f6      	uxtb	r6, r6
 80057ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057f2:	f804 6b01 	strb.w	r6, [r4], #1
 80057f6:	4682      	mov	sl, r0
 80057f8:	468b      	mov	fp, r1
 80057fa:	f003 f903 	bl	8008a04 <__aeabi_dcmplt>
 80057fe:	46a0      	mov	r8, r4
 8005800:	4652      	mov	r2, sl
 8005802:	465b      	mov	r3, fp
 8005804:	2800      	cmp	r0, #0
 8005806:	d0c1      	beq.n	800578c <_dtoa_r+0x80c>
 8005808:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800580a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800580c:	9005      	str	r0, [sp, #20]
 800580e:	9409      	str	r4, [sp, #36]	; 0x24
 8005810:	e66e      	b.n	80054f0 <_dtoa_r+0x570>
 8005812:	2500      	movs	r5, #0
 8005814:	9512      	str	r5, [sp, #72]	; 0x48
 8005816:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8005818:	9805      	ldr	r0, [sp, #20]
 800581a:	182d      	adds	r5, r5, r0
 800581c:	f105 0901 	add.w	r9, r5, #1
 8005820:	f1b9 0f00 	cmp.w	r9, #0
 8005824:	9515      	str	r5, [sp, #84]	; 0x54
 8005826:	f340 819b 	ble.w	8005b60 <_dtoa_r+0xbe0>
 800582a:	f1b9 0f0e 	cmp.w	r9, #14
 800582e:	bf8c      	ite	hi
 8005830:	2400      	movhi	r4, #0
 8005832:	f004 0401 	andls.w	r4, r4, #1
 8005836:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800583a:	e6d1      	b.n	80055e0 <_dtoa_r+0x660>
 800583c:	2500      	movs	r5, #0
 800583e:	9512      	str	r5, [sp, #72]	; 0x48
 8005840:	e6c2      	b.n	80055c8 <_dtoa_r+0x648>
 8005842:	2501      	movs	r5, #1
 8005844:	9512      	str	r5, [sp, #72]	; 0x48
 8005846:	e7e6      	b.n	8005816 <_dtoa_r+0x896>
 8005848:	f1ba 0f00 	cmp.w	sl, #0
 800584c:	f47f aded 	bne.w	800542a <_dtoa_r+0x4aa>
 8005850:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005854:	4655      	mov	r5, sl
 8005856:	2b00      	cmp	r3, #0
 8005858:	f47f ade8 	bne.w	800542c <_dtoa_r+0x4ac>
 800585c:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8005860:	ea0b 0303 	and.w	r3, fp, r3
 8005864:	461d      	mov	r5, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	f43f ade0 	beq.w	800542c <_dtoa_r+0x4ac>
 800586c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800586e:	3501      	adds	r5, #1
 8005870:	950f      	str	r5, [sp, #60]	; 0x3c
 8005872:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005874:	3501      	adds	r5, #1
 8005876:	950b      	str	r5, [sp, #44]	; 0x2c
 8005878:	2501      	movs	r5, #1
 800587a:	e5d7      	b.n	800542c <_dtoa_r+0x4ac>
 800587c:	08008e28 	.word	0x08008e28
 8005880:	08008f18 	.word	0x08008f18
 8005884:	4630      	mov	r0, r6
 8005886:	f002 fde5 	bl	8008454 <__aeabi_i2d>
 800588a:	4652      	mov	r2, sl
 800588c:	465b      	mov	r3, fp
 800588e:	f002 fe47 	bl	8008520 <__aeabi_dmul>
 8005892:	2300      	movs	r3, #0
 8005894:	2200      	movs	r2, #0
 8005896:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800589a:	f002 fc8f 	bl	80081bc <__adddf3>
 800589e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80058a0:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 80058a4:	4680      	mov	r8, r0
 80058a6:	46a1      	mov	r9, r4
 80058a8:	2d00      	cmp	r5, #0
 80058aa:	f040 80ac 	bne.w	8005a06 <_dtoa_r+0xa86>
 80058ae:	2300      	movs	r3, #0
 80058b0:	2200      	movs	r2, #0
 80058b2:	f2c4 0314 	movt	r3, #16404	; 0x4014
 80058b6:	4650      	mov	r0, sl
 80058b8:	4659      	mov	r1, fp
 80058ba:	f002 fc7d 	bl	80081b8 <__aeabi_dsub>
 80058be:	4642      	mov	r2, r8
 80058c0:	4623      	mov	r3, r4
 80058c2:	4682      	mov	sl, r0
 80058c4:	468b      	mov	fp, r1
 80058c6:	f003 f8bb 	bl	8008a40 <__aeabi_dcmpgt>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	f040 80c3 	bne.w	8005a56 <_dtoa_r+0xad6>
 80058d0:	4642      	mov	r2, r8
 80058d2:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 80058d6:	4650      	mov	r0, sl
 80058d8:	4659      	mov	r1, fp
 80058da:	f003 f893 	bl	8008a04 <__aeabi_dcmplt>
 80058de:	2800      	cmp	r0, #0
 80058e0:	f000 8083 	beq.w	80059ea <_dtoa_r+0xa6a>
 80058e4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80058e6:	9606      	str	r6, [sp, #24]
 80058e8:	e666      	b.n	80055b8 <_dtoa_r+0x638>
 80058ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80058ec:	2800      	cmp	r0, #0
 80058ee:	f000 8147 	beq.w	8005b80 <_dtoa_r+0xc00>
 80058f2:	2c00      	cmp	r4, #0
 80058f4:	dd05      	ble.n	8005902 <_dtoa_r+0x982>
 80058f6:	4638      	mov	r0, r7
 80058f8:	9906      	ldr	r1, [sp, #24]
 80058fa:	4622      	mov	r2, r4
 80058fc:	f001 f8f8 	bl	8006af0 <__lshift>
 8005900:	9006      	str	r0, [sp, #24]
 8005902:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005906:	2d00      	cmp	r5, #0
 8005908:	f040 8201 	bne.w	8005d0e <_dtoa_r+0xd8e>
 800590c:	f00a 0001 	and.w	r0, sl, #1
 8005910:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005912:	9c06      	ldr	r4, [sp, #24]
 8005914:	900b      	str	r0, [sp, #44]	; 0x2c
 8005916:	4631      	mov	r1, r6
 8005918:	980a      	ldr	r0, [sp, #40]	; 0x28
 800591a:	f7ff faa1 	bl	8004e60 <quorem>
 800591e:	4621      	mov	r1, r4
 8005920:	9008      	str	r0, [sp, #32]
 8005922:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005924:	f001 f944 	bl	8006bb0 <__mcmp>
 8005928:	4642      	mov	r2, r8
 800592a:	4681      	mov	r9, r0
 800592c:	4631      	mov	r1, r6
 800592e:	4638      	mov	r0, r7
 8005930:	f001 f95e 	bl	8006bf0 <__mdiff>
 8005934:	9a08      	ldr	r2, [sp, #32]
 8005936:	68c3      	ldr	r3, [r0, #12]
 8005938:	3230      	adds	r2, #48	; 0x30
 800593a:	4682      	mov	sl, r0
 800593c:	9206      	str	r2, [sp, #24]
 800593e:	f04f 0b01 	mov.w	fp, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d03d      	beq.n	80059c2 <_dtoa_r+0xa42>
 8005946:	4638      	mov	r0, r7
 8005948:	4651      	mov	r1, sl
 800594a:	f000 fefd 	bl	8006748 <_Bfree>
 800594e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005950:	ea5b 0303 	orrs.w	r3, fp, r3
 8005954:	d103      	bne.n	800595e <_dtoa_r+0x9de>
 8005956:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005958:	2800      	cmp	r0, #0
 800595a:	f000 8211 	beq.w	8005d80 <_dtoa_r+0xe00>
 800595e:	f1b9 0f00 	cmp.w	r9, #0
 8005962:	f2c0 819f 	blt.w	8005ca4 <_dtoa_r+0xd24>
 8005966:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005968:	ea59 0000 	orrs.w	r0, r9, r0
 800596c:	d103      	bne.n	8005976 <_dtoa_r+0x9f6>
 800596e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005970:	2900      	cmp	r1, #0
 8005972:	f000 8197 	beq.w	8005ca4 <_dtoa_r+0xd24>
 8005976:	f1bb 0f00 	cmp.w	fp, #0
 800597a:	f300 81ea 	bgt.w	8005d52 <_dtoa_r+0xdd2>
 800597e:	9a06      	ldr	r2, [sp, #24]
 8005980:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005982:	f805 2b01 	strb.w	r2, [r5], #1
 8005986:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005988:	1a2b      	subs	r3, r5, r0
 800598a:	428b      	cmp	r3, r1
 800598c:	46aa      	mov	sl, r5
 800598e:	f000 81db 	beq.w	8005d48 <_dtoa_r+0xdc8>
 8005992:	220a      	movs	r2, #10
 8005994:	2300      	movs	r3, #0
 8005996:	4638      	mov	r0, r7
 8005998:	990a      	ldr	r1, [sp, #40]	; 0x28
 800599a:	f000 fedf 	bl	800675c <__multadd>
 800599e:	4544      	cmp	r4, r8
 80059a0:	900a      	str	r0, [sp, #40]	; 0x28
 80059a2:	d027      	beq.n	80059f4 <_dtoa_r+0xa74>
 80059a4:	4621      	mov	r1, r4
 80059a6:	220a      	movs	r2, #10
 80059a8:	2300      	movs	r3, #0
 80059aa:	4638      	mov	r0, r7
 80059ac:	f000 fed6 	bl	800675c <__multadd>
 80059b0:	4641      	mov	r1, r8
 80059b2:	4604      	mov	r4, r0
 80059b4:	220a      	movs	r2, #10
 80059b6:	4638      	mov	r0, r7
 80059b8:	2300      	movs	r3, #0
 80059ba:	f000 fecf 	bl	800675c <__multadd>
 80059be:	4680      	mov	r8, r0
 80059c0:	e7a9      	b.n	8005916 <_dtoa_r+0x996>
 80059c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80059c4:	4651      	mov	r1, sl
 80059c6:	f001 f8f3 	bl	8006bb0 <__mcmp>
 80059ca:	4683      	mov	fp, r0
 80059cc:	e7bb      	b.n	8005946 <_dtoa_r+0x9c6>
 80059ce:	4638      	mov	r0, r7
 80059d0:	4621      	mov	r1, r4
 80059d2:	f000 feb9 	bl	8006748 <_Bfree>
 80059d6:	e587      	b.n	80054e8 <_dtoa_r+0x568>
 80059d8:	231c      	movs	r3, #28
 80059da:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80059dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059de:	18c0      	adds	r0, r0, r3
 80059e0:	18c9      	adds	r1, r1, r3
 80059e2:	900f      	str	r0, [sp, #60]	; 0x3c
 80059e4:	18e4      	adds	r4, r4, r3
 80059e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80059e8:	e538      	b.n	800545c <_dtoa_r+0x4dc>
 80059ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059ee:	4682      	mov	sl, r0
 80059f0:	468b      	mov	fp, r1
 80059f2:	e406      	b.n	8005202 <_dtoa_r+0x282>
 80059f4:	4621      	mov	r1, r4
 80059f6:	4638      	mov	r0, r7
 80059f8:	220a      	movs	r2, #10
 80059fa:	2300      	movs	r3, #0
 80059fc:	f000 feae 	bl	800675c <__multadd>
 8005a00:	4604      	mov	r4, r0
 8005a02:	4680      	mov	r8, r0
 8005a04:	e787      	b.n	8005916 <_dtoa_r+0x996>
 8005a06:	9c05      	ldr	r4, [sp, #20]
 8005a08:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005a0a:	9417      	str	r4, [sp, #92]	; 0x5c
 8005a0c:	e672      	b.n	80056f4 <_dtoa_r+0x774>
 8005a0e:	9d05      	ldr	r5, [sp, #20]
 8005a10:	426c      	negs	r4, r5
 8005a12:	2c00      	cmp	r4, #0
 8005a14:	f000 80fb 	beq.w	8005c0e <_dtoa_r+0xc8e>
 8005a18:	4ba0      	ldr	r3, [pc, #640]	; (8005c9c <_dtoa_r+0xd1c>)
 8005a1a:	f004 020f 	and.w	r2, r4, #15
 8005a1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a22:	4650      	mov	r0, sl
 8005a24:	4659      	mov	r1, fp
 8005a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2a:	f002 fd79 	bl	8008520 <__aeabi_dmul>
 8005a2e:	1124      	asrs	r4, r4, #4
 8005a30:	4682      	mov	sl, r0
 8005a32:	468b      	mov	fp, r1
 8005a34:	f000 80eb 	beq.w	8005c0e <_dtoa_r+0xc8e>
 8005a38:	4d99      	ldr	r5, [pc, #612]	; (8005ca0 <_dtoa_r+0xd20>)
 8005a3a:	2602      	movs	r6, #2
 8005a3c:	07e2      	lsls	r2, r4, #31
 8005a3e:	d504      	bpl.n	8005a4a <_dtoa_r+0xaca>
 8005a40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a44:	f002 fd6c 	bl	8008520 <__aeabi_dmul>
 8005a48:	3601      	adds	r6, #1
 8005a4a:	3508      	adds	r5, #8
 8005a4c:	1064      	asrs	r4, r4, #1
 8005a4e:	d1f5      	bne.n	8005a3c <_dtoa_r+0xabc>
 8005a50:	4682      	mov	sl, r0
 8005a52:	468b      	mov	fp, r1
 8005a54:	e612      	b.n	800567c <_dtoa_r+0x6fc>
 8005a56:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005a58:	9606      	str	r6, [sp, #24]
 8005a5a:	e530      	b.n	80054be <_dtoa_r+0x53e>
 8005a5c:	498f      	ldr	r1, [pc, #572]	; (8005c9c <_dtoa_r+0xd1c>)
 8005a5e:	1e6c      	subs	r4, r5, #1
 8005a60:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005a64:	4642      	mov	r2, r8
 8005a66:	464b      	mov	r3, r9
 8005a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a6c:	9406      	str	r4, [sp, #24]
 8005a6e:	f002 fd57 	bl	8008520 <__aeabi_dmul>
 8005a72:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8005a76:	4659      	mov	r1, fp
 8005a78:	4650      	mov	r0, sl
 8005a7a:	f002 ffeb 	bl	8008a54 <__aeabi_d2iz>
 8005a7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a80:	4604      	mov	r4, r0
 8005a82:	9111      	str	r1, [sp, #68]	; 0x44
 8005a84:	f002 fce6 	bl	8008454 <__aeabi_i2d>
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	4659      	mov	r1, fp
 8005a8e:	4650      	mov	r0, sl
 8005a90:	f002 fb92 	bl	80081b8 <__aeabi_dsub>
 8005a94:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8005a98:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005a9a:	f804 3b01 	strb.w	r3, [r4], #1
 8005a9e:	2d01      	cmp	r5, #1
 8005aa0:	4682      	mov	sl, r0
 8005aa2:	468b      	mov	fp, r1
 8005aa4:	9411      	str	r4, [sp, #68]	; 0x44
 8005aa6:	46a0      	mov	r8, r4
 8005aa8:	d020      	beq.n	8005aec <_dtoa_r+0xb6c>
 8005aaa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005aac:	1e66      	subs	r6, r4, #1
 8005aae:	1976      	adds	r6, r6, r5
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005ab8:	f002 fd32 	bl	8008520 <__aeabi_dmul>
 8005abc:	4689      	mov	r9, r1
 8005abe:	4680      	mov	r8, r0
 8005ac0:	f002 ffc8 	bl	8008a54 <__aeabi_d2iz>
 8005ac4:	4605      	mov	r5, r0
 8005ac6:	f002 fcc5 	bl	8008454 <__aeabi_i2d>
 8005aca:	3530      	adds	r5, #48	; 0x30
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4640      	mov	r0, r8
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	f002 fb70 	bl	80081b8 <__aeabi_dsub>
 8005ad8:	f804 5f01 	strb.w	r5, [r4, #1]!
 8005adc:	42b4      	cmp	r4, r6
 8005ade:	d1e7      	bne.n	8005ab0 <_dtoa_r+0xb30>
 8005ae0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8005ae2:	9c06      	ldr	r4, [sp, #24]
 8005ae4:	4682      	mov	sl, r0
 8005ae6:	468b      	mov	fp, r1
 8005ae8:	eb05 0804 	add.w	r8, r5, r4
 8005aec:	2300      	movs	r3, #0
 8005aee:	2200      	movs	r2, #0
 8005af0:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8005af4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8005af8:	f002 fb60 	bl	80081bc <__adddf3>
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4650      	mov	r0, sl
 8005b02:	4659      	mov	r1, fp
 8005b04:	f002 ff9c 	bl	8008a40 <__aeabi_dcmpgt>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	f000 808a 	beq.w	8005c22 <_dtoa_r+0xca2>
 8005b0e:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8005b12:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005b14:	e422      	b.n	800535c <_dtoa_r+0x3dc>
 8005b16:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005b18:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005b1c:	e4e8      	b.n	80054f0 <_dtoa_r+0x570>
 8005b1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005b20:	4631      	mov	r1, r6
 8005b22:	f001 f845 	bl	8006bb0 <__mcmp>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	f6bf acad 	bge.w	8005486 <_dtoa_r+0x506>
 8005b2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b2e:	220a      	movs	r2, #10
 8005b30:	4638      	mov	r0, r7
 8005b32:	2300      	movs	r3, #0
 8005b34:	f000 fe12 	bl	800675c <__multadd>
 8005b38:	9905      	ldr	r1, [sp, #20]
 8005b3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b3c:	900a      	str	r0, [sp, #40]	; 0x28
 8005b3e:	3901      	subs	r1, #1
 8005b40:	9105      	str	r1, [sp, #20]
 8005b42:	2a00      	cmp	r2, #0
 8005b44:	f040 8136 	bne.w	8005db4 <_dtoa_r+0xe34>
 8005b48:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005b4a:	900e      	str	r0, [sp, #56]	; 0x38
 8005b4c:	e49b      	b.n	8005486 <_dtoa_r+0x506>
 8005b4e:	6933      	ldr	r3, [r6, #16]
 8005b50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b54:	6918      	ldr	r0, [r3, #16]
 8005b56:	f000 fe91 	bl	800687c <__hi0bits>
 8005b5a:	f1c0 0320 	rsb	r3, r0, #32
 8005b5e:	e46a      	b.n	8005436 <_dtoa_r+0x4b6>
 8005b60:	f1b9 0f0e 	cmp.w	r9, #14
 8005b64:	bf8c      	ite	hi
 8005b66:	2300      	movhi	r3, #0
 8005b68:	2301      	movls	r3, #1
 8005b6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005b6e:	2100      	movs	r1, #0
 8005b70:	6479      	str	r1, [r7, #68]	; 0x44
 8005b72:	401c      	ands	r4, r3
 8005b74:	e543      	b.n	80055fe <_dtoa_r+0x67e>
 8005b76:	2301      	movs	r3, #1
 8005b78:	9315      	str	r3, [sp, #84]	; 0x54
 8005b7a:	930e      	str	r3, [sp, #56]	; 0x38
 8005b7c:	9327      	str	r3, [sp, #156]	; 0x9c
 8005b7e:	e7f6      	b.n	8005b6e <_dtoa_r+0xbee>
 8005b80:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005b82:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8005b86:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005b8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005b8c:	e006      	b.n	8005b9c <_dtoa_r+0xc1c>
 8005b8e:	4651      	mov	r1, sl
 8005b90:	4638      	mov	r0, r7
 8005b92:	220a      	movs	r2, #10
 8005b94:	2300      	movs	r3, #0
 8005b96:	f000 fde1 	bl	800675c <__multadd>
 8005b9a:	4682      	mov	sl, r0
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4650      	mov	r0, sl
 8005ba0:	f7ff f95e 	bl	8004e60 <quorem>
 8005ba4:	3030      	adds	r0, #48	; 0x30
 8005ba6:	5528      	strb	r0, [r5, r4]
 8005ba8:	3401      	adds	r4, #1
 8005baa:	45a0      	cmp	r8, r4
 8005bac:	dcef      	bgt.n	8005b8e <_dtoa_r+0xc0e>
 8005bae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005bb0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005bb4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005bb8:	4681      	mov	r9, r0
 8005bba:	2c01      	cmp	r4, #1
 8005bbc:	bfac      	ite	ge
 8005bbe:	44a2      	addge	sl, r4
 8005bc0:	f10a 0a01 	addlt.w	sl, sl, #1
 8005bc4:	2400      	movs	r4, #0
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005bca:	4638      	mov	r0, r7
 8005bcc:	f000 ff90 	bl	8006af0 <__lshift>
 8005bd0:	4631      	mov	r1, r6
 8005bd2:	900a      	str	r0, [sp, #40]	; 0x28
 8005bd4:	f000 ffec 	bl	8006bb0 <__mcmp>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	f340 8082 	ble.w	8005ce2 <_dtoa_r+0xd62>
 8005bde:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8005be2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005be4:	1c6a      	adds	r2, r5, #1
 8005be6:	e003      	b.n	8005bf0 <_dtoa_r+0xc70>
 8005be8:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 8005bec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005bf0:	2b39      	cmp	r3, #57	; 0x39
 8005bf2:	f040 8084 	bne.w	8005cfe <_dtoa_r+0xd7e>
 8005bf6:	4592      	cmp	sl, r2
 8005bf8:	d1f6      	bne.n	8005be8 <_dtoa_r+0xc68>
 8005bfa:	9805      	ldr	r0, [sp, #20]
 8005bfc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005bfe:	3001      	adds	r0, #1
 8005c00:	2331      	movs	r3, #49	; 0x31
 8005c02:	9005      	str	r0, [sp, #20]
 8005c04:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8005c08:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005c0c:	e461      	b.n	80054d2 <_dtoa_r+0x552>
 8005c0e:	2602      	movs	r6, #2
 8005c10:	e534      	b.n	800567c <_dtoa_r+0x6fc>
 8005c12:	4638      	mov	r0, r7
 8005c14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c18:	f000 ff1e 	bl	8006a58 <__pow5mult>
 8005c1c:	900a      	str	r0, [sp, #40]	; 0x28
 8005c1e:	f7ff bbf2 	b.w	8005406 <_dtoa_r+0x486>
 8005c22:	2100      	movs	r1, #0
 8005c24:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005c28:	2000      	movs	r0, #0
 8005c2a:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8005c2e:	f002 fac3 	bl	80081b8 <__aeabi_dsub>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4650      	mov	r0, sl
 8005c38:	4659      	mov	r1, fp
 8005c3a:	f002 fee3 	bl	8008a04 <__aeabi_dcmplt>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	f43f aed3 	beq.w	80059ea <_dtoa_r+0xa6a>
 8005c44:	4642      	mov	r2, r8
 8005c46:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
 8005c4a:	2b30      	cmp	r3, #48	; 0x30
 8005c4c:	d0fa      	beq.n	8005c44 <_dtoa_r+0xcc4>
 8005c4e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005c50:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005c52:	9405      	str	r4, [sp, #20]
 8005c54:	9209      	str	r2, [sp, #36]	; 0x24
 8005c56:	e44b      	b.n	80054f0 <_dtoa_r+0x570>
 8005c58:	4638      	mov	r0, r7
 8005c5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c5c:	f000 fefc 	bl	8006a58 <__pow5mult>
 8005c60:	900a      	str	r0, [sp, #40]	; 0x28
 8005c62:	f7ff bbd0 	b.w	8005406 <_dtoa_r+0x486>
 8005c66:	2600      	movs	r6, #0
 8005c68:	9606      	str	r6, [sp, #24]
 8005c6a:	e4a5      	b.n	80055b8 <_dtoa_r+0x638>
 8005c6c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8005c6e:	2d00      	cmp	r5, #0
 8005c70:	d064      	beq.n	8005d3c <_dtoa_r+0xdbc>
 8005c72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c76:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005c78:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005c7a:	e47d      	b.n	8005578 <_dtoa_r+0x5f8>
 8005c7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005c7e:	f7ff bb6d 	b.w	800535c <_dtoa_r+0x3dc>
 8005c82:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005c84:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005c88:	1c72      	adds	r2, r6, #1
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	9405      	str	r4, [sp, #20]
 8005c8e:	f7ff bb7b 	b.w	8005388 <_dtoa_r+0x408>
 8005c92:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005c94:	2300      	movs	r3, #0
 8005c96:	1b04      	subs	r4, r0, r4
 8005c98:	e46e      	b.n	8005578 <_dtoa_r+0x5f8>
 8005c9a:	bf00      	nop
 8005c9c:	08008e28 	.word	0x08008e28
 8005ca0:	08008f18 	.word	0x08008f18
 8005ca4:	f1bb 0f00 	cmp.w	fp, #0
 8005ca8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005cac:	dd10      	ble.n	8005cd0 <_dtoa_r+0xd50>
 8005cae:	2201      	movs	r2, #1
 8005cb0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	f000 ff1c 	bl	8006af0 <__lshift>
 8005cb8:	4631      	mov	r1, r6
 8005cba:	900a      	str	r0, [sp, #40]	; 0x28
 8005cbc:	f000 ff78 	bl	8006bb0 <__mcmp>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	dd6b      	ble.n	8005d9c <_dtoa_r+0xe1c>
 8005cc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005cc8:	d053      	beq.n	8005d72 <_dtoa_r+0xdf2>
 8005cca:	9b08      	ldr	r3, [sp, #32]
 8005ccc:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005cd0:	462b      	mov	r3, r5
 8005cd2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005cd4:	f803 9b01 	strb.w	r9, [r3], #1
 8005cd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cde:	f7ff bbf8 	b.w	80054d2 <_dtoa_r+0x552>
 8005ce2:	d103      	bne.n	8005cec <_dtoa_r+0xd6c>
 8005ce4:	f019 0f01 	tst.w	r9, #1
 8005ce8:	f47f af79 	bne.w	8005bde <_dtoa_r+0xc5e>
 8005cec:	4652      	mov	r2, sl
 8005cee:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 8005cf2:	2b30      	cmp	r3, #48	; 0x30
 8005cf4:	d0fa      	beq.n	8005cec <_dtoa_r+0xd6c>
 8005cf6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8005cfa:	f7ff bbea 	b.w	80054d2 <_dtoa_r+0x552>
 8005cfe:	3301      	adds	r3, #1
 8005d00:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d02:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8005d06:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005d0a:	f7ff bbe2 	b.w	80054d2 <_dtoa_r+0x552>
 8005d0e:	9c06      	ldr	r4, [sp, #24]
 8005d10:	4638      	mov	r0, r7
 8005d12:	6861      	ldr	r1, [r4, #4]
 8005d14:	f000 fcf2 	bl	80066fc <_Balloc>
 8005d18:	9d06      	ldr	r5, [sp, #24]
 8005d1a:	692a      	ldr	r2, [r5, #16]
 8005d1c:	3202      	adds	r2, #2
 8005d1e:	4604      	mov	r4, r0
 8005d20:	0092      	lsls	r2, r2, #2
 8005d22:	f105 010c 	add.w	r1, r5, #12
 8005d26:	f100 000c 	add.w	r0, r0, #12
 8005d2a:	f000 fc9f 	bl	800666c <memcpy>
 8005d2e:	4638      	mov	r0, r7
 8005d30:	4621      	mov	r1, r4
 8005d32:	2201      	movs	r2, #1
 8005d34:	f000 fedc 	bl	8006af0 <__lshift>
 8005d38:	4680      	mov	r8, r0
 8005d3a:	e5e7      	b.n	800590c <_dtoa_r+0x98c>
 8005d3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005d3e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005d40:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005d42:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d46:	e417      	b.n	8005578 <_dtoa_r+0x5f8>
 8005d48:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005d4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d50:	e739      	b.n	8005bc6 <_dtoa_r+0xc46>
 8005d52:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005d56:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d5a:	d00a      	beq.n	8005d72 <_dtoa_r+0xdf2>
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	f109 0901 	add.w	r9, r9, #1
 8005d62:	f803 9b01 	strb.w	r9, [r3], #1
 8005d66:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d68:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d6e:	f7ff bbb0 	b.w	80054d2 <_dtoa_r+0x552>
 8005d72:	46aa      	mov	sl, r5
 8005d74:	2339      	movs	r3, #57	; 0x39
 8005d76:	f80a 3b01 	strb.w	r3, [sl], #1
 8005d7a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d7e:	e730      	b.n	8005be2 <_dtoa_r+0xc62>
 8005d80:	464b      	mov	r3, r9
 8005d82:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005d86:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d8a:	d0f2      	beq.n	8005d72 <_dtoa_r+0xdf2>
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	dc9c      	bgt.n	8005cca <_dtoa_r+0xd4a>
 8005d90:	e79e      	b.n	8005cd0 <_dtoa_r+0xd50>
 8005d92:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005d94:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d96:	9409      	str	r4, [sp, #36]	; 0x24
 8005d98:	f7ff bbaa 	b.w	80054f0 <_dtoa_r+0x570>
 8005d9c:	d198      	bne.n	8005cd0 <_dtoa_r+0xd50>
 8005d9e:	f019 0f01 	tst.w	r9, #1
 8005da2:	d095      	beq.n	8005cd0 <_dtoa_r+0xd50>
 8005da4:	e78e      	b.n	8005cc4 <_dtoa_r+0xd44>
 8005da6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005da8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005daa:	9405      	str	r4, [sp, #20]
 8005dac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005dae:	9409      	str	r4, [sp, #36]	; 0x24
 8005db0:	f7ff bb9e 	b.w	80054f0 <_dtoa_r+0x570>
 8005db4:	2300      	movs	r3, #0
 8005db6:	4638      	mov	r0, r7
 8005db8:	9906      	ldr	r1, [sp, #24]
 8005dba:	220a      	movs	r2, #10
 8005dbc:	f000 fcce 	bl	800675c <__multadd>
 8005dc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005dc2:	9006      	str	r0, [sp, #24]
 8005dc4:	930e      	str	r3, [sp, #56]	; 0x38
 8005dc6:	f7ff bb5e 	b.w	8005486 <_dtoa_r+0x506>
 8005dca:	f43f ab47 	beq.w	800545c <_dtoa_r+0x4dc>
 8005dce:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8005dd2:	e602      	b.n	80059da <_dtoa_r+0xa5a>
 8005dd4:	f3af 8000 	nop.w

08005dd8 <_malloc_trim_r>:
 8005dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dda:	4d22      	ldr	r5, [pc, #136]	; (8005e64 <_malloc_trim_r+0x8c>)
 8005ddc:	460f      	mov	r7, r1
 8005dde:	4604      	mov	r4, r0
 8005de0:	f000 fc88 	bl	80066f4 <__malloc_lock>
 8005de4:	68ab      	ldr	r3, [r5, #8]
 8005de6:	685e      	ldr	r6, [r3, #4]
 8005de8:	f026 0603 	bic.w	r6, r6, #3
 8005dec:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 8005df0:	1bdf      	subs	r7, r3, r7
 8005df2:	0b3f      	lsrs	r7, r7, #12
 8005df4:	3f01      	subs	r7, #1
 8005df6:	033f      	lsls	r7, r7, #12
 8005df8:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	db07      	blt.n	8005e10 <_malloc_trim_r+0x38>
 8005e00:	2100      	movs	r1, #0
 8005e02:	f001 f907 	bl	8007014 <_sbrk_r>
 8005e06:	68ab      	ldr	r3, [r5, #8]
 8005e08:	199b      	adds	r3, r3, r6
 8005e0a:	4298      	cmp	r0, r3
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	d003      	beq.n	8005e18 <_malloc_trim_r+0x40>
 8005e10:	f000 fc72 	bl	80066f8 <__malloc_unlock>
 8005e14:	2000      	movs	r0, #0
 8005e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e18:	4279      	negs	r1, r7
 8005e1a:	f001 f8fb 	bl	8007014 <_sbrk_r>
 8005e1e:	3001      	adds	r0, #1
 8005e20:	d00d      	beq.n	8005e3e <_malloc_trim_r+0x66>
 8005e22:	4b11      	ldr	r3, [pc, #68]	; (8005e68 <_malloc_trim_r+0x90>)
 8005e24:	68aa      	ldr	r2, [r5, #8]
 8005e26:	6819      	ldr	r1, [r3, #0]
 8005e28:	1bf6      	subs	r6, r6, r7
 8005e2a:	f046 0601 	orr.w	r6, r6, #1
 8005e2e:	1bcf      	subs	r7, r1, r7
 8005e30:	4620      	mov	r0, r4
 8005e32:	6056      	str	r6, [r2, #4]
 8005e34:	601f      	str	r7, [r3, #0]
 8005e36:	f000 fc5f 	bl	80066f8 <__malloc_unlock>
 8005e3a:	2001      	movs	r0, #1
 8005e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e3e:	2100      	movs	r1, #0
 8005e40:	4620      	mov	r0, r4
 8005e42:	f001 f8e7 	bl	8007014 <_sbrk_r>
 8005e46:	68ab      	ldr	r3, [r5, #8]
 8005e48:	1ac2      	subs	r2, r0, r3
 8005e4a:	2a0f      	cmp	r2, #15
 8005e4c:	dd07      	ble.n	8005e5e <_malloc_trim_r+0x86>
 8005e4e:	4907      	ldr	r1, [pc, #28]	; (8005e6c <_malloc_trim_r+0x94>)
 8005e50:	6809      	ldr	r1, [r1, #0]
 8005e52:	1a40      	subs	r0, r0, r1
 8005e54:	4904      	ldr	r1, [pc, #16]	; (8005e68 <_malloc_trim_r+0x90>)
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	6008      	str	r0, [r1, #0]
 8005e5c:	605a      	str	r2, [r3, #4]
 8005e5e:	4620      	mov	r0, r4
 8005e60:	e7d6      	b.n	8005e10 <_malloc_trim_r+0x38>
 8005e62:	bf00      	nop
 8005e64:	2000054c 	.word	0x2000054c
 8005e68:	20000974 	.word	0x20000974
 8005e6c:	20000954 	.word	0x20000954

08005e70 <_free_r>:
 8005e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e74:	460d      	mov	r5, r1
 8005e76:	4604      	mov	r4, r0
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	d06f      	beq.n	8005f5c <_free_r+0xec>
 8005e7c:	f000 fc3a 	bl	80066f4 <__malloc_lock>
 8005e80:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8005e84:	4e58      	ldr	r6, [pc, #352]	; (8005fe8 <_free_r+0x178>)
 8005e86:	f1a5 0108 	sub.w	r1, r5, #8
 8005e8a:	f020 0301 	bic.w	r3, r0, #1
 8005e8e:	18ca      	adds	r2, r1, r3
 8005e90:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8005e94:	6857      	ldr	r7, [r2, #4]
 8005e96:	4594      	cmp	ip, r2
 8005e98:	f027 0703 	bic.w	r7, r7, #3
 8005e9c:	d07c      	beq.n	8005f98 <_free_r+0x128>
 8005e9e:	f010 0001 	ands.w	r0, r0, #1
 8005ea2:	6057      	str	r7, [r2, #4]
 8005ea4:	d049      	beq.n	8005f3a <_free_r+0xca>
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	19d5      	adds	r5, r2, r7
 8005eaa:	686d      	ldr	r5, [r5, #4]
 8005eac:	f015 0f01 	tst.w	r5, #1
 8005eb0:	d106      	bne.n	8005ec0 <_free_r+0x50>
 8005eb2:	19db      	adds	r3, r3, r7
 8005eb4:	6895      	ldr	r5, [r2, #8]
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d062      	beq.n	8005f80 <_free_r+0x110>
 8005eba:	68d2      	ldr	r2, [r2, #12]
 8005ebc:	60ea      	str	r2, [r5, #12]
 8005ebe:	6095      	str	r5, [r2, #8]
 8005ec0:	f043 0201 	orr.w	r2, r3, #1
 8005ec4:	604a      	str	r2, [r1, #4]
 8005ec6:	50cb      	str	r3, [r1, r3]
 8005ec8:	bb90      	cbnz	r0, 8005f30 <_free_r+0xc0>
 8005eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ece:	d347      	bcc.n	8005f60 <_free_r+0xf0>
 8005ed0:	099d      	lsrs	r5, r3, #6
 8005ed2:	3538      	adds	r5, #56	; 0x38
 8005ed4:	0a5a      	lsrs	r2, r3, #9
 8005ed6:	00e8      	lsls	r0, r5, #3
 8005ed8:	2a04      	cmp	r2, #4
 8005eda:	d916      	bls.n	8005f0a <_free_r+0x9a>
 8005edc:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8005ee0:	00e8      	lsls	r0, r5, #3
 8005ee2:	2a14      	cmp	r2, #20
 8005ee4:	d911      	bls.n	8005f0a <_free_r+0x9a>
 8005ee6:	0b1d      	lsrs	r5, r3, #12
 8005ee8:	356e      	adds	r5, #110	; 0x6e
 8005eea:	00e8      	lsls	r0, r5, #3
 8005eec:	2a54      	cmp	r2, #84	; 0x54
 8005eee:	d90c      	bls.n	8005f0a <_free_r+0x9a>
 8005ef0:	0bdd      	lsrs	r5, r3, #15
 8005ef2:	3577      	adds	r5, #119	; 0x77
 8005ef4:	00e8      	lsls	r0, r5, #3
 8005ef6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005efa:	d906      	bls.n	8005f0a <_free_r+0x9a>
 8005efc:	f240 5054 	movw	r0, #1364	; 0x554
 8005f00:	4282      	cmp	r2, r0
 8005f02:	d86d      	bhi.n	8005fe0 <_free_r+0x170>
 8005f04:	0c9d      	lsrs	r5, r3, #18
 8005f06:	357c      	adds	r5, #124	; 0x7c
 8005f08:	00e8      	lsls	r0, r5, #3
 8005f0a:	1986      	adds	r6, r0, r6
 8005f0c:	4836      	ldr	r0, [pc, #216]	; (8005fe8 <_free_r+0x178>)
 8005f0e:	68b2      	ldr	r2, [r6, #8]
 8005f10:	42b2      	cmp	r2, r6
 8005f12:	d103      	bne.n	8005f1c <_free_r+0xac>
 8005f14:	e05b      	b.n	8005fce <_free_r+0x15e>
 8005f16:	6892      	ldr	r2, [r2, #8]
 8005f18:	4296      	cmp	r6, r2
 8005f1a:	d004      	beq.n	8005f26 <_free_r+0xb6>
 8005f1c:	6850      	ldr	r0, [r2, #4]
 8005f1e:	f020 0003 	bic.w	r0, r0, #3
 8005f22:	4283      	cmp	r3, r0
 8005f24:	d3f7      	bcc.n	8005f16 <_free_r+0xa6>
 8005f26:	68d3      	ldr	r3, [r2, #12]
 8005f28:	60cb      	str	r3, [r1, #12]
 8005f2a:	608a      	str	r2, [r1, #8]
 8005f2c:	60d1      	str	r1, [r2, #12]
 8005f2e:	6099      	str	r1, [r3, #8]
 8005f30:	4620      	mov	r0, r4
 8005f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f36:	f000 bbdf 	b.w	80066f8 <__malloc_unlock>
 8005f3a:	f855 cc08 	ldr.w	ip, [r5, #-8]
 8005f3e:	ebcc 0101 	rsb	r1, ip, r1
 8005f42:	f106 0808 	add.w	r8, r6, #8
 8005f46:	688d      	ldr	r5, [r1, #8]
 8005f48:	4545      	cmp	r5, r8
 8005f4a:	4463      	add	r3, ip
 8005f4c:	d03d      	beq.n	8005fca <_free_r+0x15a>
 8005f4e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8005f52:	f8c5 c00c 	str.w	ip, [r5, #12]
 8005f56:	f8cc 5008 	str.w	r5, [ip, #8]
 8005f5a:	e7a5      	b.n	8005ea8 <_free_r+0x38>
 8005f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f60:	08db      	lsrs	r3, r3, #3
 8005f62:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8005f66:	6875      	ldr	r5, [r6, #4]
 8005f68:	6890      	ldr	r0, [r2, #8]
 8005f6a:	60ca      	str	r2, [r1, #12]
 8005f6c:	109b      	asrs	r3, r3, #2
 8005f6e:	2701      	movs	r7, #1
 8005f70:	fa17 f303 	lsls.w	r3, r7, r3
 8005f74:	432b      	orrs	r3, r5
 8005f76:	6088      	str	r0, [r1, #8]
 8005f78:	6073      	str	r3, [r6, #4]
 8005f7a:	6091      	str	r1, [r2, #8]
 8005f7c:	60c1      	str	r1, [r0, #12]
 8005f7e:	e7d7      	b.n	8005f30 <_free_r+0xc0>
 8005f80:	4f1a      	ldr	r7, [pc, #104]	; (8005fec <_free_r+0x17c>)
 8005f82:	42bd      	cmp	r5, r7
 8005f84:	d199      	bne.n	8005eba <_free_r+0x4a>
 8005f86:	f043 0201 	orr.w	r2, r3, #1
 8005f8a:	6171      	str	r1, [r6, #20]
 8005f8c:	6131      	str	r1, [r6, #16]
 8005f8e:	60cd      	str	r5, [r1, #12]
 8005f90:	608d      	str	r5, [r1, #8]
 8005f92:	604a      	str	r2, [r1, #4]
 8005f94:	50cb      	str	r3, [r1, r3]
 8005f96:	e7cb      	b.n	8005f30 <_free_r+0xc0>
 8005f98:	07c2      	lsls	r2, r0, #31
 8005f9a:	443b      	add	r3, r7
 8005f9c:	d407      	bmi.n	8005fae <_free_r+0x13e>
 8005f9e:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8005fa2:	1a89      	subs	r1, r1, r2
 8005fa4:	189b      	adds	r3, r3, r2
 8005fa6:	6888      	ldr	r0, [r1, #8]
 8005fa8:	68ca      	ldr	r2, [r1, #12]
 8005faa:	60c2      	str	r2, [r0, #12]
 8005fac:	6090      	str	r0, [r2, #8]
 8005fae:	4a10      	ldr	r2, [pc, #64]	; (8005ff0 <_free_r+0x180>)
 8005fb0:	60b1      	str	r1, [r6, #8]
 8005fb2:	6812      	ldr	r2, [r2, #0]
 8005fb4:	f043 0001 	orr.w	r0, r3, #1
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	6048      	str	r0, [r1, #4]
 8005fbc:	d3b8      	bcc.n	8005f30 <_free_r+0xc0>
 8005fbe:	4b0d      	ldr	r3, [pc, #52]	; (8005ff4 <_free_r+0x184>)
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	6819      	ldr	r1, [r3, #0]
 8005fc4:	f7ff ff08 	bl	8005dd8 <_malloc_trim_r>
 8005fc8:	e7b2      	b.n	8005f30 <_free_r+0xc0>
 8005fca:	2001      	movs	r0, #1
 8005fcc:	e76c      	b.n	8005ea8 <_free_r+0x38>
 8005fce:	6843      	ldr	r3, [r0, #4]
 8005fd0:	10ad      	asrs	r5, r5, #2
 8005fd2:	2601      	movs	r6, #1
 8005fd4:	fa16 f505 	lsls.w	r5, r6, r5
 8005fd8:	432b      	orrs	r3, r5
 8005fda:	6043      	str	r3, [r0, #4]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	e7a3      	b.n	8005f28 <_free_r+0xb8>
 8005fe0:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8005fe4:	257e      	movs	r5, #126	; 0x7e
 8005fe6:	e790      	b.n	8005f0a <_free_r+0x9a>
 8005fe8:	2000054c 	.word	0x2000054c
 8005fec:	20000554 	.word	0x20000554
 8005ff0:	20000958 	.word	0x20000958
 8005ff4:	20000970 	.word	0x20000970

08005ff8 <_setlocale_r>:
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	4614      	mov	r4, r2
 8005ffc:	b122      	cbz	r2, 8006008 <_setlocale_r+0x10>
 8005ffe:	4610      	mov	r0, r2
 8006000:	490b      	ldr	r1, [pc, #44]	; (8006030 <_setlocale_r+0x38>)
 8006002:	f001 f819 	bl	8007038 <strcmp>
 8006006:	b908      	cbnz	r0, 800600c <_setlocale_r+0x14>
 8006008:	480a      	ldr	r0, [pc, #40]	; (8006034 <_setlocale_r+0x3c>)
 800600a:	bd10      	pop	{r4, pc}
 800600c:	4620      	mov	r0, r4
 800600e:	4909      	ldr	r1, [pc, #36]	; (8006034 <_setlocale_r+0x3c>)
 8006010:	f001 f812 	bl	8007038 <strcmp>
 8006014:	b908      	cbnz	r0, 800601a <_setlocale_r+0x22>
 8006016:	4807      	ldr	r0, [pc, #28]	; (8006034 <_setlocale_r+0x3c>)
 8006018:	bd10      	pop	{r4, pc}
 800601a:	4620      	mov	r0, r4
 800601c:	4906      	ldr	r1, [pc, #24]	; (8006038 <_setlocale_r+0x40>)
 800601e:	f001 f80b 	bl	8007038 <strcmp>
 8006022:	4b04      	ldr	r3, [pc, #16]	; (8006034 <_setlocale_r+0x3c>)
 8006024:	2800      	cmp	r0, #0
 8006026:	bf0c      	ite	eq
 8006028:	4618      	moveq	r0, r3
 800602a:	2000      	movne	r0, #0
 800602c:	bd10      	pop	{r4, pc}
 800602e:	bf00      	nop
 8006030:	080090e0 	.word	0x080090e0
 8006034:	080090dc 	.word	0x080090dc
 8006038:	08009034 	.word	0x08009034

0800603c <__locale_charset>:
 800603c:	f240 40d0 	movw	r0, #1232	; 0x4d0
 8006040:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop

08006048 <__locale_mb_cur_max>:
 8006048:	f240 43d0 	movw	r3, #1232	; 0x4d0
 800604c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006050:	6a18      	ldr	r0, [r3, #32]
 8006052:	4770      	bx	lr

08006054 <__locale_msgcharset>:
 8006054:	4800      	ldr	r0, [pc, #0]	; (8006058 <__locale_msgcharset+0x4>)
 8006056:	4770      	bx	lr
 8006058:	200004f4 	.word	0x200004f4

0800605c <__locale_cjk_lang>:
 800605c:	2000      	movs	r0, #0
 800605e:	4770      	bx	lr

08006060 <_localeconv_r>:
 8006060:	4800      	ldr	r0, [pc, #0]	; (8006064 <_localeconv_r+0x4>)
 8006062:	4770      	bx	lr
 8006064:	20000514 	.word	0x20000514

08006068 <setlocale>:
 8006068:	b410      	push	{r4}
 800606a:	f240 03a0 	movw	r3, #160	; 0xa0
 800606e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006072:	4604      	mov	r4, r0
 8006074:	6818      	ldr	r0, [r3, #0]
 8006076:	460a      	mov	r2, r1
 8006078:	4621      	mov	r1, r4
 800607a:	bc10      	pop	{r4}
 800607c:	e7bc      	b.n	8005ff8 <_setlocale_r>
 800607e:	bf00      	nop

08006080 <localeconv>:
 8006080:	4800      	ldr	r0, [pc, #0]	; (8006084 <localeconv+0x4>)
 8006082:	4770      	bx	lr
 8006084:	20000514 	.word	0x20000514

08006088 <_malloc_r>:
 8006088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608c:	f101 040b 	add.w	r4, r1, #11
 8006090:	2c16      	cmp	r4, #22
 8006092:	4605      	mov	r5, r0
 8006094:	d92a      	bls.n	80060ec <_malloc_r+0x64>
 8006096:	f024 0407 	bic.w	r4, r4, #7
 800609a:	0fe3      	lsrs	r3, r4, #31
 800609c:	428c      	cmp	r4, r1
 800609e:	bf2c      	ite	cs
 80060a0:	4619      	movcs	r1, r3
 80060a2:	f043 0101 	orrcc.w	r1, r3, #1
 80060a6:	bb51      	cbnz	r1, 80060fe <_malloc_r+0x76>
 80060a8:	4628      	mov	r0, r5
 80060aa:	f000 fb23 	bl	80066f4 <__malloc_lock>
 80060ae:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80060b2:	d22a      	bcs.n	800610a <_malloc_r+0x82>
 80060b4:	4e7d      	ldr	r6, [pc, #500]	; (80062ac <_malloc_r+0x224>)
 80060b6:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 80060ba:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 80060be:	68df      	ldr	r7, [r3, #12]
 80060c0:	429f      	cmp	r7, r3
 80060c2:	f000 8235 	beq.w	8006530 <_malloc_r+0x4a8>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	68b9      	ldr	r1, [r7, #8]
 80060cc:	f023 0303 	bic.w	r3, r3, #3
 80060d0:	18fb      	adds	r3, r7, r3
 80060d2:	60ca      	str	r2, [r1, #12]
 80060d4:	6858      	ldr	r0, [r3, #4]
 80060d6:	6091      	str	r1, [r2, #8]
 80060d8:	f040 0201 	orr.w	r2, r0, #1
 80060dc:	605a      	str	r2, [r3, #4]
 80060de:	4628      	mov	r0, r5
 80060e0:	f000 fb0a 	bl	80066f8 <__malloc_unlock>
 80060e4:	3708      	adds	r7, #8
 80060e6:	4638      	mov	r0, r7
 80060e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ec:	2300      	movs	r3, #0
 80060ee:	2410      	movs	r4, #16
 80060f0:	428c      	cmp	r4, r1
 80060f2:	bf2c      	ite	cs
 80060f4:	4619      	movcs	r1, r3
 80060f6:	f043 0101 	orrcc.w	r1, r3, #1
 80060fa:	2900      	cmp	r1, #0
 80060fc:	d0d4      	beq.n	80060a8 <_malloc_r+0x20>
 80060fe:	230c      	movs	r3, #12
 8006100:	2700      	movs	r7, #0
 8006102:	602b      	str	r3, [r5, #0]
 8006104:	4638      	mov	r0, r7
 8006106:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800610a:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 800610e:	bf04      	itt	eq
 8006110:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 8006114:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 8006118:	f040 8081 	bne.w	800621e <_malloc_r+0x196>
 800611c:	4e63      	ldr	r6, [pc, #396]	; (80062ac <_malloc_r+0x224>)
 800611e:	1871      	adds	r1, r6, r1
 8006120:	68cf      	ldr	r7, [r1, #12]
 8006122:	42b9      	cmp	r1, r7
 8006124:	d106      	bne.n	8006134 <_malloc_r+0xac>
 8006126:	e00d      	b.n	8006144 <_malloc_r+0xbc>
 8006128:	2b00      	cmp	r3, #0
 800612a:	f280 8169 	bge.w	8006400 <_malloc_r+0x378>
 800612e:	68ff      	ldr	r7, [r7, #12]
 8006130:	42b9      	cmp	r1, r7
 8006132:	d007      	beq.n	8006144 <_malloc_r+0xbc>
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	f022 0203 	bic.w	r2, r2, #3
 800613a:	1b13      	subs	r3, r2, r4
 800613c:	2b0f      	cmp	r3, #15
 800613e:	ddf3      	ble.n	8006128 <_malloc_r+0xa0>
 8006140:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006144:	f10e 0e01 	add.w	lr, lr, #1
 8006148:	4a58      	ldr	r2, [pc, #352]	; (80062ac <_malloc_r+0x224>)
 800614a:	6937      	ldr	r7, [r6, #16]
 800614c:	f102 0c08 	add.w	ip, r2, #8
 8006150:	4567      	cmp	r7, ip
 8006152:	bf08      	it	eq
 8006154:	6853      	ldreq	r3, [r2, #4]
 8006156:	d023      	beq.n	80061a0 <_malloc_r+0x118>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f023 0303 	bic.w	r3, r3, #3
 800615e:	1b19      	subs	r1, r3, r4
 8006160:	290f      	cmp	r1, #15
 8006162:	f300 81b4 	bgt.w	80064ce <_malloc_r+0x446>
 8006166:	2900      	cmp	r1, #0
 8006168:	f8c2 c014 	str.w	ip, [r2, #20]
 800616c:	f8c2 c010 	str.w	ip, [r2, #16]
 8006170:	f280 808f 	bge.w	8006292 <_malloc_r+0x20a>
 8006174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006178:	f080 8161 	bcs.w	800643e <_malloc_r+0x3b6>
 800617c:	08db      	lsrs	r3, r3, #3
 800617e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8006182:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8006186:	6888      	ldr	r0, [r1, #8]
 8006188:	60f9      	str	r1, [r7, #12]
 800618a:	109b      	asrs	r3, r3, #2
 800618c:	f04f 0901 	mov.w	r9, #1
 8006190:	fa09 f303 	lsl.w	r3, r9, r3
 8006194:	ea43 0308 	orr.w	r3, r3, r8
 8006198:	60b8      	str	r0, [r7, #8]
 800619a:	6053      	str	r3, [r2, #4]
 800619c:	608f      	str	r7, [r1, #8]
 800619e:	60c7      	str	r7, [r0, #12]
 80061a0:	2001      	movs	r0, #1
 80061a2:	ea4f 02ae 	mov.w	r2, lr, asr #2
 80061a6:	4090      	lsls	r0, r2
 80061a8:	4298      	cmp	r0, r3
 80061aa:	f200 8081 	bhi.w	80062b0 <_malloc_r+0x228>
 80061ae:	4203      	tst	r3, r0
 80061b0:	d106      	bne.n	80061c0 <_malloc_r+0x138>
 80061b2:	f02e 0e03 	bic.w	lr, lr, #3
 80061b6:	0040      	lsls	r0, r0, #1
 80061b8:	4203      	tst	r3, r0
 80061ba:	f10e 0e04 	add.w	lr, lr, #4
 80061be:	d0fa      	beq.n	80061b6 <_malloc_r+0x12e>
 80061c0:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 80061c4:	464f      	mov	r7, r9
 80061c6:	46f0      	mov	r8, lr
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	429f      	cmp	r7, r3
 80061cc:	d107      	bne.n	80061de <_malloc_r+0x156>
 80061ce:	e191      	b.n	80064f4 <_malloc_r+0x46c>
 80061d0:	2a00      	cmp	r2, #0
 80061d2:	f280 81b7 	bge.w	8006544 <_malloc_r+0x4bc>
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	429f      	cmp	r7, r3
 80061da:	f000 818b 	beq.w	80064f4 <_malloc_r+0x46c>
 80061de:	6859      	ldr	r1, [r3, #4]
 80061e0:	f021 0103 	bic.w	r1, r1, #3
 80061e4:	1b0a      	subs	r2, r1, r4
 80061e6:	2a0f      	cmp	r2, #15
 80061e8:	ddf2      	ble.n	80061d0 <_malloc_r+0x148>
 80061ea:	461f      	mov	r7, r3
 80061ec:	1919      	adds	r1, r3, r4
 80061ee:	68d8      	ldr	r0, [r3, #12]
 80061f0:	f857 ef08 	ldr.w	lr, [r7, #8]!
 80061f4:	508a      	str	r2, [r1, r2]
 80061f6:	f044 0401 	orr.w	r4, r4, #1
 80061fa:	f042 0201 	orr.w	r2, r2, #1
 80061fe:	f8ce 000c 	str.w	r0, [lr, #12]
 8006202:	f8c0 e008 	str.w	lr, [r0, #8]
 8006206:	605c      	str	r4, [r3, #4]
 8006208:	6171      	str	r1, [r6, #20]
 800620a:	6131      	str	r1, [r6, #16]
 800620c:	f8c1 c00c 	str.w	ip, [r1, #12]
 8006210:	f8c1 c008 	str.w	ip, [r1, #8]
 8006214:	604a      	str	r2, [r1, #4]
 8006216:	4628      	mov	r0, r5
 8006218:	f000 fa6e 	bl	80066f8 <__malloc_unlock>
 800621c:	e763      	b.n	80060e6 <_malloc_r+0x5e>
 800621e:	f1be 0f04 	cmp.w	lr, #4
 8006222:	bf9e      	ittt	ls
 8006224:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 8006228:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 800622c:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8006230:	f67f af74 	bls.w	800611c <_malloc_r+0x94>
 8006234:	f1be 0f14 	cmp.w	lr, #20
 8006238:	bf9c      	itt	ls
 800623a:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 800623e:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8006242:	f67f af6b 	bls.w	800611c <_malloc_r+0x94>
 8006246:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 800624a:	bf9e      	ittt	ls
 800624c:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8006250:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 8006254:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8006258:	f67f af60 	bls.w	800611c <_malloc_r+0x94>
 800625c:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8006260:	bf9e      	ittt	ls
 8006262:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 8006266:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 800626a:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800626e:	f67f af55 	bls.w	800611c <_malloc_r+0x94>
 8006272:	f240 5354 	movw	r3, #1364	; 0x554
 8006276:	459e      	cmp	lr, r3
 8006278:	bf9d      	ittte	ls
 800627a:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 800627e:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 8006282:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8006286:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 800628a:	bf88      	it	hi
 800628c:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8006290:	e744      	b.n	800611c <_malloc_r+0x94>
 8006292:	18fb      	adds	r3, r7, r3
 8006294:	4628      	mov	r0, r5
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	f042 0201 	orr.w	r2, r2, #1
 800629c:	605a      	str	r2, [r3, #4]
 800629e:	3708      	adds	r7, #8
 80062a0:	f000 fa2a 	bl	80066f8 <__malloc_unlock>
 80062a4:	4638      	mov	r0, r7
 80062a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062aa:	bf00      	nop
 80062ac:	2000054c 	.word	0x2000054c
 80062b0:	68b7      	ldr	r7, [r6, #8]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f023 0803 	bic.w	r8, r3, #3
 80062b8:	4544      	cmp	r4, r8
 80062ba:	ebc4 0208 	rsb	r2, r4, r8
 80062be:	bf94      	ite	ls
 80062c0:	2300      	movls	r3, #0
 80062c2:	2301      	movhi	r3, #1
 80062c4:	2a0f      	cmp	r2, #15
 80062c6:	bfd8      	it	le
 80062c8:	f043 0301 	orrle.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 80a7 	beq.w	8006420 <_malloc_r+0x398>
 80062d2:	4bb3      	ldr	r3, [pc, #716]	; (80065a0 <_malloc_r+0x518>)
 80062d4:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 80065a4 <_malloc_r+0x51c>
 80062d8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80062dc:	f8da 3000 	ldr.w	r3, [sl]
 80062e0:	3201      	adds	r2, #1
 80062e2:	4423      	add	r3, r4
 80062e4:	bf08      	it	eq
 80062e6:	f103 0b10 	addeq.w	fp, r3, #16
 80062ea:	d006      	beq.n	80062fa <_malloc_r+0x272>
 80062ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062f0:	330f      	adds	r3, #15
 80062f2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80062f6:	f023 0b0f 	bic.w	fp, r3, #15
 80062fa:	4628      	mov	r0, r5
 80062fc:	4659      	mov	r1, fp
 80062fe:	f000 fe89 	bl	8007014 <_sbrk_r>
 8006302:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006306:	4681      	mov	r9, r0
 8006308:	f000 8144 	beq.w	8006594 <_malloc_r+0x50c>
 800630c:	eb07 0208 	add.w	r2, r7, r8
 8006310:	4282      	cmp	r2, r0
 8006312:	f200 8126 	bhi.w	8006562 <_malloc_r+0x4da>
 8006316:	f8da 3004 	ldr.w	r3, [sl, #4]
 800631a:	454a      	cmp	r2, r9
 800631c:	445b      	add	r3, fp
 800631e:	f8ca 3004 	str.w	r3, [sl, #4]
 8006322:	f000 8141 	beq.w	80065a8 <_malloc_r+0x520>
 8006326:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 800632a:	3101      	adds	r1, #1
 800632c:	bf15      	itete	ne
 800632e:	ebc2 0209 	rsbne	r2, r2, r9
 8006332:	4b9b      	ldreq	r3, [pc, #620]	; (80065a0 <_malloc_r+0x518>)
 8006334:	189b      	addne	r3, r3, r2
 8006336:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 800633a:	bf18      	it	ne
 800633c:	f8ca 3004 	strne.w	r3, [sl, #4]
 8006340:	f019 0307 	ands.w	r3, r9, #7
 8006344:	bf1f      	itttt	ne
 8006346:	f1c3 0208 	rsbne	r2, r3, #8
 800634a:	4491      	addne	r9, r2
 800634c:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8006350:	f103 0208 	addne.w	r2, r3, #8
 8006354:	eb09 030b 	add.w	r3, r9, fp
 8006358:	bf08      	it	eq
 800635a:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 800635e:	051b      	lsls	r3, r3, #20
 8006360:	0d1b      	lsrs	r3, r3, #20
 8006362:	ebc3 0b02 	rsb	fp, r3, r2
 8006366:	4628      	mov	r0, r5
 8006368:	4659      	mov	r1, fp
 800636a:	f000 fe53 	bl	8007014 <_sbrk_r>
 800636e:	1c43      	adds	r3, r0, #1
 8006370:	f000 8126 	beq.w	80065c0 <_malloc_r+0x538>
 8006374:	ebc9 0200 	rsb	r2, r9, r0
 8006378:	445a      	add	r2, fp
 800637a:	f042 0201 	orr.w	r2, r2, #1
 800637e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006382:	f8c6 9008 	str.w	r9, [r6, #8]
 8006386:	445b      	add	r3, fp
 8006388:	42b7      	cmp	r7, r6
 800638a:	f8ca 3004 	str.w	r3, [sl, #4]
 800638e:	f8c9 2004 	str.w	r2, [r9, #4]
 8006392:	d015      	beq.n	80063c0 <_malloc_r+0x338>
 8006394:	f1b8 0f0f 	cmp.w	r8, #15
 8006398:	f240 80f6 	bls.w	8006588 <_malloc_r+0x500>
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f1a8 020c 	sub.w	r2, r8, #12
 80063a2:	f022 0207 	bic.w	r2, r2, #7
 80063a6:	18b9      	adds	r1, r7, r2
 80063a8:	f000 0e01 	and.w	lr, r0, #1
 80063ac:	ea42 0e0e 	orr.w	lr, r2, lr
 80063b0:	2005      	movs	r0, #5
 80063b2:	2a0f      	cmp	r2, #15
 80063b4:	f8c7 e004 	str.w	lr, [r7, #4]
 80063b8:	6048      	str	r0, [r1, #4]
 80063ba:	6088      	str	r0, [r1, #8]
 80063bc:	f200 8104 	bhi.w	80065c8 <_malloc_r+0x540>
 80063c0:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 80063c4:	68b7      	ldr	r7, [r6, #8]
 80063c6:	4293      	cmp	r3, r2
 80063c8:	bf84      	itt	hi
 80063ca:	4a76      	ldrhi	r2, [pc, #472]	; (80065a4 <_malloc_r+0x51c>)
 80063cc:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 80063ce:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 80063d2:	4293      	cmp	r3, r2
 80063d4:	bf84      	itt	hi
 80063d6:	4a73      	ldrhi	r2, [pc, #460]	; (80065a4 <_malloc_r+0x51c>)
 80063d8:	6313      	strhi	r3, [r2, #48]	; 0x30
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f023 0303 	bic.w	r3, r3, #3
 80063e0:	429c      	cmp	r4, r3
 80063e2:	ebc4 0203 	rsb	r2, r4, r3
 80063e6:	bf94      	ite	ls
 80063e8:	2300      	movls	r3, #0
 80063ea:	2301      	movhi	r3, #1
 80063ec:	2a0f      	cmp	r2, #15
 80063ee:	bfd8      	it	le
 80063f0:	f043 0301 	orrle.w	r3, r3, #1
 80063f4:	b1a3      	cbz	r3, 8006420 <_malloc_r+0x398>
 80063f6:	4628      	mov	r0, r5
 80063f8:	f000 f97e 	bl	80066f8 <__malloc_unlock>
 80063fc:	2700      	movs	r7, #0
 80063fe:	e672      	b.n	80060e6 <_malloc_r+0x5e>
 8006400:	18ba      	adds	r2, r7, r2
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6850      	ldr	r0, [r2, #4]
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	f040 0001 	orr.w	r0, r0, #1
 800640c:	6050      	str	r0, [r2, #4]
 800640e:	60cb      	str	r3, [r1, #12]
 8006410:	4628      	mov	r0, r5
 8006412:	6099      	str	r1, [r3, #8]
 8006414:	3708      	adds	r7, #8
 8006416:	f000 f96f 	bl	80066f8 <__malloc_unlock>
 800641a:	4638      	mov	r0, r7
 800641c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006420:	193b      	adds	r3, r7, r4
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	f044 0401 	orr.w	r4, r4, #1
 800642a:	607c      	str	r4, [r7, #4]
 800642c:	4628      	mov	r0, r5
 800642e:	605a      	str	r2, [r3, #4]
 8006430:	3708      	adds	r7, #8
 8006432:	60b3      	str	r3, [r6, #8]
 8006434:	f000 f960 	bl	80066f8 <__malloc_unlock>
 8006438:	4638      	mov	r0, r7
 800643a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643e:	0a5a      	lsrs	r2, r3, #9
 8006440:	2a04      	cmp	r2, #4
 8006442:	bf9e      	ittt	ls
 8006444:	ea4f 1893 	movls.w	r8, r3, lsr #6
 8006448:	f108 0838 	addls.w	r8, r8, #56	; 0x38
 800644c:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006450:	d928      	bls.n	80064a4 <_malloc_r+0x41c>
 8006452:	2a14      	cmp	r2, #20
 8006454:	bf9c      	itt	ls
 8006456:	f102 085b 	addls.w	r8, r2, #91	; 0x5b
 800645a:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800645e:	d921      	bls.n	80064a4 <_malloc_r+0x41c>
 8006460:	2a54      	cmp	r2, #84	; 0x54
 8006462:	bf9e      	ittt	ls
 8006464:	ea4f 3813 	movls.w	r8, r3, lsr #12
 8006468:	f108 086e 	addls.w	r8, r8, #110	; 0x6e
 800646c:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006470:	d918      	bls.n	80064a4 <_malloc_r+0x41c>
 8006472:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006476:	bf9e      	ittt	ls
 8006478:	ea4f 38d3 	movls.w	r8, r3, lsr #15
 800647c:	f108 0877 	addls.w	r8, r8, #119	; 0x77
 8006480:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006484:	d90e      	bls.n	80064a4 <_malloc_r+0x41c>
 8006486:	f240 5154 	movw	r1, #1364	; 0x554
 800648a:	428a      	cmp	r2, r1
 800648c:	bf9d      	ittte	ls
 800648e:	ea4f 4893 	movls.w	r8, r3, lsr #18
 8006492:	f108 087c 	addls.w	r8, r8, #124	; 0x7c
 8006496:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800649a:	f44f 707c 	movhi.w	r0, #1008	; 0x3f0
 800649e:	bf88      	it	hi
 80064a0:	f04f 087e 	movhi.w	r8, #126	; 0x7e
 80064a4:	1830      	adds	r0, r6, r0
 80064a6:	493e      	ldr	r1, [pc, #248]	; (80065a0 <_malloc_r+0x518>)
 80064a8:	6882      	ldr	r2, [r0, #8]
 80064aa:	4282      	cmp	r2, r0
 80064ac:	d103      	bne.n	80064b6 <_malloc_r+0x42e>
 80064ae:	e061      	b.n	8006574 <_malloc_r+0x4ec>
 80064b0:	6892      	ldr	r2, [r2, #8]
 80064b2:	4290      	cmp	r0, r2
 80064b4:	d004      	beq.n	80064c0 <_malloc_r+0x438>
 80064b6:	6851      	ldr	r1, [r2, #4]
 80064b8:	f021 0103 	bic.w	r1, r1, #3
 80064bc:	428b      	cmp	r3, r1
 80064be:	d3f7      	bcc.n	80064b0 <_malloc_r+0x428>
 80064c0:	68d1      	ldr	r1, [r2, #12]
 80064c2:	6873      	ldr	r3, [r6, #4]
 80064c4:	60f9      	str	r1, [r7, #12]
 80064c6:	60ba      	str	r2, [r7, #8]
 80064c8:	60d7      	str	r7, [r2, #12]
 80064ca:	608f      	str	r7, [r1, #8]
 80064cc:	e668      	b.n	80061a0 <_malloc_r+0x118>
 80064ce:	193b      	adds	r3, r7, r4
 80064d0:	f041 0001 	orr.w	r0, r1, #1
 80064d4:	f044 0401 	orr.w	r4, r4, #1
 80064d8:	607c      	str	r4, [r7, #4]
 80064da:	6153      	str	r3, [r2, #20]
 80064dc:	6113      	str	r3, [r2, #16]
 80064de:	6058      	str	r0, [r3, #4]
 80064e0:	f8c3 c00c 	str.w	ip, [r3, #12]
 80064e4:	f8c3 c008 	str.w	ip, [r3, #8]
 80064e8:	5059      	str	r1, [r3, r1]
 80064ea:	4628      	mov	r0, r5
 80064ec:	f000 f904 	bl	80066f8 <__malloc_unlock>
 80064f0:	3708      	adds	r7, #8
 80064f2:	e5f8      	b.n	80060e6 <_malloc_r+0x5e>
 80064f4:	f108 0801 	add.w	r8, r8, #1
 80064f8:	3708      	adds	r7, #8
 80064fa:	f018 0f03 	tst.w	r8, #3
 80064fe:	f47f ae63 	bne.w	80061c8 <_malloc_r+0x140>
 8006502:	464b      	mov	r3, r9
 8006504:	f01e 0f03 	tst.w	lr, #3
 8006508:	f1a3 0208 	sub.w	r2, r3, #8
 800650c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006510:	d062      	beq.n	80065d8 <_malloc_r+0x550>
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4293      	cmp	r3, r2
 8006516:	d0f5      	beq.n	8006504 <_malloc_r+0x47c>
 8006518:	6873      	ldr	r3, [r6, #4]
 800651a:	0040      	lsls	r0, r0, #1
 800651c:	4298      	cmp	r0, r3
 800651e:	f63f aec7 	bhi.w	80062b0 <_malloc_r+0x228>
 8006522:	2800      	cmp	r0, #0
 8006524:	f43f aec4 	beq.w	80062b0 <_malloc_r+0x228>
 8006528:	4218      	tst	r0, r3
 800652a:	d05a      	beq.n	80065e2 <_malloc_r+0x55a>
 800652c:	46c6      	mov	lr, r8
 800652e:	e647      	b.n	80061c0 <_malloc_r+0x138>
 8006530:	f107 0308 	add.w	r3, r7, #8
 8006534:	697f      	ldr	r7, [r7, #20]
 8006536:	42bb      	cmp	r3, r7
 8006538:	bf08      	it	eq
 800653a:	f10e 0e02 	addeq.w	lr, lr, #2
 800653e:	f43f ae03 	beq.w	8006148 <_malloc_r+0xc0>
 8006542:	e5c0      	b.n	80060c6 <_malloc_r+0x3e>
 8006544:	1859      	adds	r1, r3, r1
 8006546:	461f      	mov	r7, r3
 8006548:	6848      	ldr	r0, [r1, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f857 2f08 	ldr.w	r2, [r7, #8]!
 8006550:	f040 0001 	orr.w	r0, r0, #1
 8006554:	6048      	str	r0, [r1, #4]
 8006556:	60d3      	str	r3, [r2, #12]
 8006558:	609a      	str	r2, [r3, #8]
 800655a:	4628      	mov	r0, r5
 800655c:	f000 f8cc 	bl	80066f8 <__malloc_unlock>
 8006560:	e5c1      	b.n	80060e6 <_malloc_r+0x5e>
 8006562:	42b7      	cmp	r7, r6
 8006564:	f43f aed7 	beq.w	8006316 <_malloc_r+0x28e>
 8006568:	4b0d      	ldr	r3, [pc, #52]	; (80065a0 <_malloc_r+0x518>)
 800656a:	689f      	ldr	r7, [r3, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f023 0303 	bic.w	r3, r3, #3
 8006572:	e735      	b.n	80063e0 <_malloc_r+0x358>
 8006574:	684b      	ldr	r3, [r1, #4]
 8006576:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800657a:	2001      	movs	r0, #1
 800657c:	fa00 f008 	lsl.w	r0, r0, r8
 8006580:	4303      	orrs	r3, r0
 8006582:	604b      	str	r3, [r1, #4]
 8006584:	4611      	mov	r1, r2
 8006586:	e79d      	b.n	80064c4 <_malloc_r+0x43c>
 8006588:	2301      	movs	r3, #1
 800658a:	f8c9 3004 	str.w	r3, [r9, #4]
 800658e:	464f      	mov	r7, r9
 8006590:	2300      	movs	r3, #0
 8006592:	e725      	b.n	80063e0 <_malloc_r+0x358>
 8006594:	68b7      	ldr	r7, [r6, #8]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f023 0303 	bic.w	r3, r3, #3
 800659c:	e720      	b.n	80063e0 <_malloc_r+0x358>
 800659e:	bf00      	nop
 80065a0:	2000054c 	.word	0x2000054c
 80065a4:	20000970 	.word	0x20000970
 80065a8:	0511      	lsls	r1, r2, #20
 80065aa:	0d09      	lsrs	r1, r1, #20
 80065ac:	2900      	cmp	r1, #0
 80065ae:	f47f aeba 	bne.w	8006326 <_malloc_r+0x29e>
 80065b2:	68b2      	ldr	r2, [r6, #8]
 80065b4:	eb0b 0108 	add.w	r1, fp, r8
 80065b8:	f041 0101 	orr.w	r1, r1, #1
 80065bc:	6051      	str	r1, [r2, #4]
 80065be:	e6ff      	b.n	80063c0 <_malloc_r+0x338>
 80065c0:	2201      	movs	r2, #1
 80065c2:	f04f 0b00 	mov.w	fp, #0
 80065c6:	e6da      	b.n	800637e <_malloc_r+0x2f6>
 80065c8:	4628      	mov	r0, r5
 80065ca:	f107 0108 	add.w	r1, r7, #8
 80065ce:	f7ff fc4f 	bl	8005e70 <_free_r>
 80065d2:	4b06      	ldr	r3, [pc, #24]	; (80065ec <_malloc_r+0x564>)
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	e6f3      	b.n	80063c0 <_malloc_r+0x338>
 80065d8:	6873      	ldr	r3, [r6, #4]
 80065da:	ea23 0300 	bic.w	r3, r3, r0
 80065de:	6073      	str	r3, [r6, #4]
 80065e0:	e79b      	b.n	800651a <_malloc_r+0x492>
 80065e2:	0040      	lsls	r0, r0, #1
 80065e4:	f108 0804 	add.w	r8, r8, #4
 80065e8:	e79e      	b.n	8006528 <_malloc_r+0x4a0>
 80065ea:	bf00      	nop
 80065ec:	20000970 	.word	0x20000970

080065f0 <memchr>:
 80065f0:	0783      	lsls	r3, r0, #30
 80065f2:	b470      	push	{r4, r5, r6}
 80065f4:	b2c9      	uxtb	r1, r1
 80065f6:	d00f      	beq.n	8006618 <memchr+0x28>
 80065f8:	2a00      	cmp	r2, #0
 80065fa:	d033      	beq.n	8006664 <memchr+0x74>
 80065fc:	7803      	ldrb	r3, [r0, #0]
 80065fe:	3a01      	subs	r2, #1
 8006600:	428b      	cmp	r3, r1
 8006602:	d106      	bne.n	8006612 <memchr+0x22>
 8006604:	e01d      	b.n	8006642 <memchr+0x52>
 8006606:	2a00      	cmp	r2, #0
 8006608:	d02c      	beq.n	8006664 <memchr+0x74>
 800660a:	7803      	ldrb	r3, [r0, #0]
 800660c:	3a01      	subs	r2, #1
 800660e:	428b      	cmp	r3, r1
 8006610:	d017      	beq.n	8006642 <memchr+0x52>
 8006612:	3001      	adds	r0, #1
 8006614:	0783      	lsls	r3, r0, #30
 8006616:	d1f6      	bne.n	8006606 <memchr+0x16>
 8006618:	2a03      	cmp	r2, #3
 800661a:	bf84      	itt	hi
 800661c:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 8006620:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 8006624:	d80f      	bhi.n	8006646 <memchr+0x56>
 8006626:	b1ea      	cbz	r2, 8006664 <memchr+0x74>
 8006628:	7803      	ldrb	r3, [r0, #0]
 800662a:	3a01      	subs	r2, #1
 800662c:	428b      	cmp	r3, r1
 800662e:	4402      	add	r2, r0
 8006630:	d104      	bne.n	800663c <memchr+0x4c>
 8006632:	e006      	b.n	8006642 <memchr+0x52>
 8006634:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8006638:	428b      	cmp	r3, r1
 800663a:	d002      	beq.n	8006642 <memchr+0x52>
 800663c:	4290      	cmp	r0, r2
 800663e:	d1f9      	bne.n	8006634 <memchr+0x44>
 8006640:	2000      	movs	r0, #0
 8006642:	bc70      	pop	{r4, r5, r6}
 8006644:	4770      	bx	lr
 8006646:	4604      	mov	r4, r0
 8006648:	3004      	adds	r0, #4
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	4073      	eors	r3, r6
 800664e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8006652:	ea25 0303 	bic.w	r3, r5, r3
 8006656:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800665a:	d105      	bne.n	8006668 <memchr+0x78>
 800665c:	3a04      	subs	r2, #4
 800665e:	2a03      	cmp	r2, #3
 8006660:	d8f1      	bhi.n	8006646 <memchr+0x56>
 8006662:	e7e0      	b.n	8006626 <memchr+0x36>
 8006664:	4610      	mov	r0, r2
 8006666:	e7ec      	b.n	8006642 <memchr+0x52>
 8006668:	4620      	mov	r0, r4
 800666a:	e7dc      	b.n	8006626 <memchr+0x36>

0800666c <memcpy>:
 800666c:	2a0f      	cmp	r2, #15
 800666e:	b4f0      	push	{r4, r5, r6, r7}
 8006670:	bf98      	it	ls
 8006672:	4603      	movls	r3, r0
 8006674:	d931      	bls.n	80066da <memcpy+0x6e>
 8006676:	ea41 0300 	orr.w	r3, r1, r0
 800667a:	079b      	lsls	r3, r3, #30
 800667c:	d137      	bne.n	80066ee <memcpy+0x82>
 800667e:	460c      	mov	r4, r1
 8006680:	4603      	mov	r3, r0
 8006682:	4615      	mov	r5, r2
 8006684:	6826      	ldr	r6, [r4, #0]
 8006686:	601e      	str	r6, [r3, #0]
 8006688:	6866      	ldr	r6, [r4, #4]
 800668a:	605e      	str	r6, [r3, #4]
 800668c:	68a6      	ldr	r6, [r4, #8]
 800668e:	609e      	str	r6, [r3, #8]
 8006690:	68e6      	ldr	r6, [r4, #12]
 8006692:	3d10      	subs	r5, #16
 8006694:	60de      	str	r6, [r3, #12]
 8006696:	3410      	adds	r4, #16
 8006698:	3310      	adds	r3, #16
 800669a:	2d0f      	cmp	r5, #15
 800669c:	d8f2      	bhi.n	8006684 <memcpy+0x18>
 800669e:	f1a2 0410 	sub.w	r4, r2, #16
 80066a2:	f024 040f 	bic.w	r4, r4, #15
 80066a6:	f002 020f 	and.w	r2, r2, #15
 80066aa:	3410      	adds	r4, #16
 80066ac:	2a03      	cmp	r2, #3
 80066ae:	eb00 0304 	add.w	r3, r0, r4
 80066b2:	4421      	add	r1, r4
 80066b4:	d911      	bls.n	80066da <memcpy+0x6e>
 80066b6:	1f0e      	subs	r6, r1, #4
 80066b8:	461d      	mov	r5, r3
 80066ba:	4614      	mov	r4, r2
 80066bc:	f856 7f04 	ldr.w	r7, [r6, #4]!
 80066c0:	3c04      	subs	r4, #4
 80066c2:	2c03      	cmp	r4, #3
 80066c4:	f845 7b04 	str.w	r7, [r5], #4
 80066c8:	d8f8      	bhi.n	80066bc <memcpy+0x50>
 80066ca:	1f14      	subs	r4, r2, #4
 80066cc:	f024 0403 	bic.w	r4, r4, #3
 80066d0:	3404      	adds	r4, #4
 80066d2:	f002 0203 	and.w	r2, r2, #3
 80066d6:	1909      	adds	r1, r1, r4
 80066d8:	191b      	adds	r3, r3, r4
 80066da:	b132      	cbz	r2, 80066ea <memcpy+0x7e>
 80066dc:	3901      	subs	r1, #1
 80066de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80066e2:	3a01      	subs	r2, #1
 80066e4:	f803 4b01 	strb.w	r4, [r3], #1
 80066e8:	d1f9      	bne.n	80066de <memcpy+0x72>
 80066ea:	bcf0      	pop	{r4, r5, r6, r7}
 80066ec:	4770      	bx	lr
 80066ee:	4603      	mov	r3, r0
 80066f0:	e7f4      	b.n	80066dc <memcpy+0x70>
 80066f2:	bf00      	nop

080066f4 <__malloc_lock>:
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop

080066f8 <__malloc_unlock>:
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop

080066fc <_Balloc>:
 80066fc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80066fe:	b570      	push	{r4, r5, r6, lr}
 8006700:	4605      	mov	r5, r0
 8006702:	460c      	mov	r4, r1
 8006704:	b14b      	cbz	r3, 800671a <_Balloc+0x1e>
 8006706:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800670a:	b178      	cbz	r0, 800672c <_Balloc+0x30>
 800670c:	6802      	ldr	r2, [r0, #0]
 800670e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8006712:	2300      	movs	r3, #0
 8006714:	6103      	str	r3, [r0, #16]
 8006716:	60c3      	str	r3, [r0, #12]
 8006718:	bd70      	pop	{r4, r5, r6, pc}
 800671a:	2104      	movs	r1, #4
 800671c:	2221      	movs	r2, #33	; 0x21
 800671e:	f001 fa7f 	bl	8007c20 <_calloc_r>
 8006722:	4603      	mov	r3, r0
 8006724:	64e8      	str	r0, [r5, #76]	; 0x4c
 8006726:	2800      	cmp	r0, #0
 8006728:	d1ed      	bne.n	8006706 <_Balloc+0xa>
 800672a:	bd70      	pop	{r4, r5, r6, pc}
 800672c:	2101      	movs	r1, #1
 800672e:	fa11 f604 	lsls.w	r6, r1, r4
 8006732:	1d72      	adds	r2, r6, #5
 8006734:	4628      	mov	r0, r5
 8006736:	0092      	lsls	r2, r2, #2
 8006738:	f001 fa72 	bl	8007c20 <_calloc_r>
 800673c:	2800      	cmp	r0, #0
 800673e:	d0f4      	beq.n	800672a <_Balloc+0x2e>
 8006740:	6044      	str	r4, [r0, #4]
 8006742:	6086      	str	r6, [r0, #8]
 8006744:	e7e5      	b.n	8006712 <_Balloc+0x16>
 8006746:	bf00      	nop

08006748 <_Bfree>:
 8006748:	b131      	cbz	r1, 8006758 <_Bfree+0x10>
 800674a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800674c:	684a      	ldr	r2, [r1, #4]
 800674e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006752:	6008      	str	r0, [r1, #0]
 8006754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop

0800675c <__multadd>:
 800675c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800675e:	460d      	mov	r5, r1
 8006760:	4606      	mov	r6, r0
 8006762:	690c      	ldr	r4, [r1, #16]
 8006764:	f101 0014 	add.w	r0, r1, #20
 8006768:	b083      	sub	sp, #12
 800676a:	2100      	movs	r1, #0
 800676c:	6807      	ldr	r7, [r0, #0]
 800676e:	fa1f fc87 	uxth.w	ip, r7
 8006772:	0c3f      	lsrs	r7, r7, #16
 8006774:	fb02 330c 	mla	r3, r2, ip, r3
 8006778:	fb02 f707 	mul.w	r7, r2, r7
 800677c:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006780:	b29b      	uxth	r3, r3
 8006782:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 8006786:	3101      	adds	r1, #1
 8006788:	f840 3b04 	str.w	r3, [r0], #4
 800678c:	0c3b      	lsrs	r3, r7, #16
 800678e:	428c      	cmp	r4, r1
 8006790:	dcec      	bgt.n	800676c <__multadd+0x10>
 8006792:	b13b      	cbz	r3, 80067a4 <__multadd+0x48>
 8006794:	68aa      	ldr	r2, [r5, #8]
 8006796:	4294      	cmp	r4, r2
 8006798:	da07      	bge.n	80067aa <__multadd+0x4e>
 800679a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800679e:	3401      	adds	r4, #1
 80067a0:	6153      	str	r3, [r2, #20]
 80067a2:	612c      	str	r4, [r5, #16]
 80067a4:	4628      	mov	r0, r5
 80067a6:	b003      	add	sp, #12
 80067a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067aa:	6869      	ldr	r1, [r5, #4]
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	3101      	adds	r1, #1
 80067b0:	4630      	mov	r0, r6
 80067b2:	f7ff ffa3 	bl	80066fc <_Balloc>
 80067b6:	692a      	ldr	r2, [r5, #16]
 80067b8:	3202      	adds	r2, #2
 80067ba:	f105 010c 	add.w	r1, r5, #12
 80067be:	4607      	mov	r7, r0
 80067c0:	0092      	lsls	r2, r2, #2
 80067c2:	f100 000c 	add.w	r0, r0, #12
 80067c6:	f7ff ff51 	bl	800666c <memcpy>
 80067ca:	6869      	ldr	r1, [r5, #4]
 80067cc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80067ce:	9b01      	ldr	r3, [sp, #4]
 80067d0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80067d4:	6028      	str	r0, [r5, #0]
 80067d6:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80067da:	463d      	mov	r5, r7
 80067dc:	e7dd      	b.n	800679a <__multadd+0x3e>
 80067de:	bf00      	nop

080067e0 <__s2b>:
 80067e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067e4:	461e      	mov	r6, r3
 80067e6:	f648 6339 	movw	r3, #36409	; 0x8e39
 80067ea:	f106 0408 	add.w	r4, r6, #8
 80067ee:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 80067f2:	fb83 5304 	smull	r5, r3, r3, r4
 80067f6:	17e4      	asrs	r4, r4, #31
 80067f8:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 80067fc:	460f      	mov	r7, r1
 80067fe:	2100      	movs	r1, #0
 8006800:	2b01      	cmp	r3, #1
 8006802:	4604      	mov	r4, r0
 8006804:	4690      	mov	r8, r2
 8006806:	dd05      	ble.n	8006814 <__s2b+0x34>
 8006808:	2201      	movs	r2, #1
 800680a:	2100      	movs	r1, #0
 800680c:	0052      	lsls	r2, r2, #1
 800680e:	3101      	adds	r1, #1
 8006810:	4293      	cmp	r3, r2
 8006812:	dcfb      	bgt.n	800680c <__s2b+0x2c>
 8006814:	4620      	mov	r0, r4
 8006816:	f7ff ff71 	bl	80066fc <_Balloc>
 800681a:	9b08      	ldr	r3, [sp, #32]
 800681c:	6143      	str	r3, [r0, #20]
 800681e:	2301      	movs	r3, #1
 8006820:	f1b8 0f09 	cmp.w	r8, #9
 8006824:	4601      	mov	r1, r0
 8006826:	6103      	str	r3, [r0, #16]
 8006828:	dd23      	ble.n	8006872 <__s2b+0x92>
 800682a:	f107 0909 	add.w	r9, r7, #9
 800682e:	464d      	mov	r5, r9
 8006830:	4447      	add	r7, r8
 8006832:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006836:	220a      	movs	r2, #10
 8006838:	3b30      	subs	r3, #48	; 0x30
 800683a:	4620      	mov	r0, r4
 800683c:	f7ff ff8e 	bl	800675c <__multadd>
 8006840:	42bd      	cmp	r5, r7
 8006842:	4601      	mov	r1, r0
 8006844:	d1f5      	bne.n	8006832 <__s2b+0x52>
 8006846:	eb09 0708 	add.w	r7, r9, r8
 800684a:	3f08      	subs	r7, #8
 800684c:	4546      	cmp	r6, r8
 800684e:	dd0d      	ble.n	800686c <__s2b+0x8c>
 8006850:	ebc8 0707 	rsb	r7, r8, r7
 8006854:	f817 3008 	ldrb.w	r3, [r7, r8]
 8006858:	220a      	movs	r2, #10
 800685a:	3b30      	subs	r3, #48	; 0x30
 800685c:	4620      	mov	r0, r4
 800685e:	f7ff ff7d 	bl	800675c <__multadd>
 8006862:	f108 0801 	add.w	r8, r8, #1
 8006866:	45b0      	cmp	r8, r6
 8006868:	4601      	mov	r1, r0
 800686a:	d1f3      	bne.n	8006854 <__s2b+0x74>
 800686c:	4608      	mov	r0, r1
 800686e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006872:	370a      	adds	r7, #10
 8006874:	f04f 0809 	mov.w	r8, #9
 8006878:	e7e8      	b.n	800684c <__s2b+0x6c>
 800687a:	bf00      	nop

0800687c <__hi0bits>:
 800687c:	4603      	mov	r3, r0
 800687e:	2000      	movs	r0, #0
 8006880:	0c1a      	lsrs	r2, r3, #16
 8006882:	d101      	bne.n	8006888 <__hi0bits+0xc>
 8006884:	041b      	lsls	r3, r3, #16
 8006886:	2010      	movs	r0, #16
 8006888:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800688c:	d101      	bne.n	8006892 <__hi0bits+0x16>
 800688e:	3008      	adds	r0, #8
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006896:	d101      	bne.n	800689c <__hi0bits+0x20>
 8006898:	3004      	adds	r0, #4
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80068a0:	d101      	bne.n	80068a6 <__hi0bits+0x2a>
 80068a2:	3002      	adds	r0, #2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	db02      	blt.n	80068b0 <__hi0bits+0x34>
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	d401      	bmi.n	80068b2 <__hi0bits+0x36>
 80068ae:	2020      	movs	r0, #32
 80068b0:	4770      	bx	lr
 80068b2:	3001      	adds	r0, #1
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop

080068b8 <__lo0bits>:
 80068b8:	6803      	ldr	r3, [r0, #0]
 80068ba:	4602      	mov	r2, r0
 80068bc:	f013 0007 	ands.w	r0, r3, #7
 80068c0:	d007      	beq.n	80068d2 <__lo0bits+0x1a>
 80068c2:	07d9      	lsls	r1, r3, #31
 80068c4:	d41f      	bmi.n	8006906 <__lo0bits+0x4e>
 80068c6:	0798      	lsls	r0, r3, #30
 80068c8:	d41f      	bmi.n	800690a <__lo0bits+0x52>
 80068ca:	089b      	lsrs	r3, r3, #2
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	2002      	movs	r0, #2
 80068d0:	4770      	bx	lr
 80068d2:	b299      	uxth	r1, r3
 80068d4:	b909      	cbnz	r1, 80068da <__lo0bits+0x22>
 80068d6:	0c1b      	lsrs	r3, r3, #16
 80068d8:	2010      	movs	r0, #16
 80068da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80068de:	d101      	bne.n	80068e4 <__lo0bits+0x2c>
 80068e0:	3008      	adds	r0, #8
 80068e2:	0a1b      	lsrs	r3, r3, #8
 80068e4:	0719      	lsls	r1, r3, #28
 80068e6:	d101      	bne.n	80068ec <__lo0bits+0x34>
 80068e8:	3004      	adds	r0, #4
 80068ea:	091b      	lsrs	r3, r3, #4
 80068ec:	0799      	lsls	r1, r3, #30
 80068ee:	d101      	bne.n	80068f4 <__lo0bits+0x3c>
 80068f0:	3002      	adds	r0, #2
 80068f2:	089b      	lsrs	r3, r3, #2
 80068f4:	07d9      	lsls	r1, r3, #31
 80068f6:	d404      	bmi.n	8006902 <__lo0bits+0x4a>
 80068f8:	085b      	lsrs	r3, r3, #1
 80068fa:	d101      	bne.n	8006900 <__lo0bits+0x48>
 80068fc:	2020      	movs	r0, #32
 80068fe:	4770      	bx	lr
 8006900:	3001      	adds	r0, #1
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	4770      	bx	lr
 8006906:	2000      	movs	r0, #0
 8006908:	4770      	bx	lr
 800690a:	085b      	lsrs	r3, r3, #1
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	2001      	movs	r0, #1
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop

08006914 <__i2b>:
 8006914:	b510      	push	{r4, lr}
 8006916:	460c      	mov	r4, r1
 8006918:	2101      	movs	r1, #1
 800691a:	f7ff feef 	bl	80066fc <_Balloc>
 800691e:	2201      	movs	r2, #1
 8006920:	6144      	str	r4, [r0, #20]
 8006922:	6102      	str	r2, [r0, #16]
 8006924:	bd10      	pop	{r4, pc}
 8006926:	bf00      	nop

08006928 <__multiply>:
 8006928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	690f      	ldr	r7, [r1, #16]
 800692e:	6916      	ldr	r6, [r2, #16]
 8006930:	42b7      	cmp	r7, r6
 8006932:	b085      	sub	sp, #20
 8006934:	460d      	mov	r5, r1
 8006936:	4692      	mov	sl, r2
 8006938:	da04      	bge.n	8006944 <__multiply+0x1c>
 800693a:	463a      	mov	r2, r7
 800693c:	4655      	mov	r5, sl
 800693e:	4637      	mov	r7, r6
 8006940:	468a      	mov	sl, r1
 8006942:	4616      	mov	r6, r2
 8006944:	68ab      	ldr	r3, [r5, #8]
 8006946:	6869      	ldr	r1, [r5, #4]
 8006948:	19bc      	adds	r4, r7, r6
 800694a:	429c      	cmp	r4, r3
 800694c:	bfc8      	it	gt
 800694e:	3101      	addgt	r1, #1
 8006950:	f7ff fed4 	bl	80066fc <_Balloc>
 8006954:	1d21      	adds	r1, r4, #4
 8006956:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
 800695a:	f100 0914 	add.w	r9, r0, #20
 800695e:	f10b 0b04 	add.w	fp, fp, #4
 8006962:	45d9      	cmp	r9, fp
 8006964:	9000      	str	r0, [sp, #0]
 8006966:	9101      	str	r1, [sp, #4]
 8006968:	d205      	bcs.n	8006976 <__multiply+0x4e>
 800696a:	464b      	mov	r3, r9
 800696c:	2200      	movs	r2, #0
 800696e:	f843 2b04 	str.w	r2, [r3], #4
 8006972:	459b      	cmp	fp, r3
 8006974:	d8fb      	bhi.n	800696e <__multiply+0x46>
 8006976:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 800697a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800697e:	f10a 0a14 	add.w	sl, sl, #20
 8006982:	f106 0814 	add.w	r8, r6, #20
 8006986:	3514      	adds	r5, #20
 8006988:	3714      	adds	r7, #20
 800698a:	45c2      	cmp	sl, r8
 800698c:	d24f      	bcs.n	8006a2e <__multiply+0x106>
 800698e:	f8cd b008 	str.w	fp, [sp, #8]
 8006992:	9403      	str	r4, [sp, #12]
 8006994:	46ab      	mov	fp, r5
 8006996:	f85a 5b04 	ldr.w	r5, [sl], #4
 800699a:	b2ac      	uxth	r4, r5
 800699c:	b1e4      	cbz	r4, 80069d8 <__multiply+0xb0>
 800699e:	465a      	mov	r2, fp
 80069a0:	464b      	mov	r3, r9
 80069a2:	2100      	movs	r1, #0
 80069a4:	f852 6b04 	ldr.w	r6, [r2], #4
 80069a8:	681d      	ldr	r5, [r3, #0]
 80069aa:	b2b0      	uxth	r0, r6
 80069ac:	fa11 f185 	uxtah	r1, r1, r5
 80069b0:	0c36      	lsrs	r6, r6, #16
 80069b2:	0c2d      	lsrs	r5, r5, #16
 80069b4:	fb04 1000 	mla	r0, r4, r0, r1
 80069b8:	fb04 5106 	mla	r1, r4, r6, r5
 80069bc:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 80069c0:	b280      	uxth	r0, r0
 80069c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80069c6:	0c09      	lsrs	r1, r1, #16
 80069c8:	4297      	cmp	r7, r2
 80069ca:	461d      	mov	r5, r3
 80069cc:	f843 0b04 	str.w	r0, [r3], #4
 80069d0:	d8e8      	bhi.n	80069a4 <__multiply+0x7c>
 80069d2:	6069      	str	r1, [r5, #4]
 80069d4:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 80069d8:	0c2d      	lsrs	r5, r5, #16
 80069da:	d021      	beq.n	8006a20 <__multiply+0xf8>
 80069dc:	f8d9 6000 	ldr.w	r6, [r9]
 80069e0:	465b      	mov	r3, fp
 80069e2:	4630      	mov	r0, r6
 80069e4:	4649      	mov	r1, r9
 80069e6:	f04f 0c00 	mov.w	ip, #0
 80069ea:	e000      	b.n	80069ee <__multiply+0xc6>
 80069ec:	4611      	mov	r1, r2
 80069ee:	881a      	ldrh	r2, [r3, #0]
 80069f0:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
 80069f4:	fb05 cc02 	mla	ip, r5, r2, ip
 80069f8:	b2b6      	uxth	r6, r6
 80069fa:	460a      	mov	r2, r1
 80069fc:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 8006a00:	f842 6b04 	str.w	r6, [r2], #4
 8006a04:	f853 6b04 	ldr.w	r6, [r3], #4
 8006a08:	6848      	ldr	r0, [r1, #4]
 8006a0a:	0c36      	lsrs	r6, r6, #16
 8006a0c:	b284      	uxth	r4, r0
 8006a0e:	fb05 4606 	mla	r6, r5, r6, r4
 8006a12:	eb06 461c 	add.w	r6, r6, ip, lsr #16
 8006a16:	429f      	cmp	r7, r3
 8006a18:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 8006a1c:	d8e6      	bhi.n	80069ec <__multiply+0xc4>
 8006a1e:	604e      	str	r6, [r1, #4]
 8006a20:	45d0      	cmp	r8, sl
 8006a22:	f109 0904 	add.w	r9, r9, #4
 8006a26:	d8b6      	bhi.n	8006996 <__multiply+0x6e>
 8006a28:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006a2c:	9c03      	ldr	r4, [sp, #12]
 8006a2e:	2c00      	cmp	r4, #0
 8006a30:	dd0c      	ble.n	8006a4c <__multiply+0x124>
 8006a32:	e89d 0006 	ldmia.w	sp, {r1, r2}
 8006a36:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8006a3a:	b93b      	cbnz	r3, 8006a4c <__multiply+0x124>
 8006a3c:	f1ab 0b04 	sub.w	fp, fp, #4
 8006a40:	e002      	b.n	8006a48 <__multiply+0x120>
 8006a42:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
 8006a46:	b90b      	cbnz	r3, 8006a4c <__multiply+0x124>
 8006a48:	3c01      	subs	r4, #1
 8006a4a:	d1fa      	bne.n	8006a42 <__multiply+0x11a>
 8006a4c:	9a00      	ldr	r2, [sp, #0]
 8006a4e:	6114      	str	r4, [r2, #16]
 8006a50:	4610      	mov	r0, r2
 8006a52:	b005      	add	sp, #20
 8006a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a58 <__pow5mult>:
 8006a58:	f012 0303 	ands.w	r3, r2, #3
 8006a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a60:	4615      	mov	r5, r2
 8006a62:	4604      	mov	r4, r0
 8006a64:	4688      	mov	r8, r1
 8006a66:	d12d      	bne.n	8006ac4 <__pow5mult+0x6c>
 8006a68:	10ad      	asrs	r5, r5, #2
 8006a6a:	d01d      	beq.n	8006aa8 <__pow5mult+0x50>
 8006a6c:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8006a6e:	b92f      	cbnz	r7, 8006a7c <__pow5mult+0x24>
 8006a70:	e031      	b.n	8006ad6 <__pow5mult+0x7e>
 8006a72:	106d      	asrs	r5, r5, #1
 8006a74:	d018      	beq.n	8006aa8 <__pow5mult+0x50>
 8006a76:	683e      	ldr	r6, [r7, #0]
 8006a78:	b1ce      	cbz	r6, 8006aae <__pow5mult+0x56>
 8006a7a:	4637      	mov	r7, r6
 8006a7c:	07e8      	lsls	r0, r5, #31
 8006a7e:	d5f8      	bpl.n	8006a72 <__pow5mult+0x1a>
 8006a80:	4641      	mov	r1, r8
 8006a82:	463a      	mov	r2, r7
 8006a84:	4620      	mov	r0, r4
 8006a86:	f7ff ff4f 	bl	8006928 <__multiply>
 8006a8a:	f1b8 0f00 	cmp.w	r8, #0
 8006a8e:	d017      	beq.n	8006ac0 <__pow5mult+0x68>
 8006a90:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006a94:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006a96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a9a:	106d      	asrs	r5, r5, #1
 8006a9c:	f8c8 1000 	str.w	r1, [r8]
 8006aa0:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 8006aa4:	4680      	mov	r8, r0
 8006aa6:	d1e6      	bne.n	8006a76 <__pow5mult+0x1e>
 8006aa8:	4640      	mov	r0, r8
 8006aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aae:	4639      	mov	r1, r7
 8006ab0:	463a      	mov	r2, r7
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f7ff ff38 	bl	8006928 <__multiply>
 8006ab8:	6038      	str	r0, [r7, #0]
 8006aba:	6006      	str	r6, [r0, #0]
 8006abc:	4607      	mov	r7, r0
 8006abe:	e7dd      	b.n	8006a7c <__pow5mult+0x24>
 8006ac0:	4680      	mov	r8, r0
 8006ac2:	e7d6      	b.n	8006a72 <__pow5mult+0x1a>
 8006ac4:	1e5e      	subs	r6, r3, #1
 8006ac6:	4a09      	ldr	r2, [pc, #36]	; (8006aec <__pow5mult+0x94>)
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8006ace:	f7ff fe45 	bl	800675c <__multadd>
 8006ad2:	4680      	mov	r8, r0
 8006ad4:	e7c8      	b.n	8006a68 <__pow5mult+0x10>
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f240 2171 	movw	r1, #625	; 0x271
 8006adc:	f7ff ff1a 	bl	8006914 <__i2b>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	64a0      	str	r0, [r4, #72]	; 0x48
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	6003      	str	r3, [r0, #0]
 8006ae8:	e7c8      	b.n	8006a7c <__pow5mult+0x24>
 8006aea:	bf00      	nop
 8006aec:	08008e18 	.word	0x08008e18

08006af0 <__lshift>:
 8006af0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af4:	4691      	mov	r9, r2
 8006af6:	690a      	ldr	r2, [r1, #16]
 8006af8:	688b      	ldr	r3, [r1, #8]
 8006afa:	ea4f 1769 	mov.w	r7, r9, asr #5
 8006afe:	eb07 0b02 	add.w	fp, r7, r2
 8006b02:	f10b 0501 	add.w	r5, fp, #1
 8006b06:	429d      	cmp	r5, r3
 8006b08:	460c      	mov	r4, r1
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	6849      	ldr	r1, [r1, #4]
 8006b0e:	dd03      	ble.n	8006b18 <__lshift+0x28>
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	3101      	adds	r1, #1
 8006b14:	429d      	cmp	r5, r3
 8006b16:	dcfb      	bgt.n	8006b10 <__lshift+0x20>
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f7ff fdef 	bl	80066fc <_Balloc>
 8006b1e:	2f00      	cmp	r7, #0
 8006b20:	f100 0314 	add.w	r3, r0, #20
 8006b24:	dd09      	ble.n	8006b3a <__lshift+0x4a>
 8006b26:	2200      	movs	r2, #0
 8006b28:	4611      	mov	r1, r2
 8006b2a:	3201      	adds	r2, #1
 8006b2c:	42ba      	cmp	r2, r7
 8006b2e:	f843 1b04 	str.w	r1, [r3], #4
 8006b32:	d1fa      	bne.n	8006b2a <__lshift+0x3a>
 8006b34:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006b38:	3314      	adds	r3, #20
 8006b3a:	6922      	ldr	r2, [r4, #16]
 8006b3c:	f019 091f 	ands.w	r9, r9, #31
 8006b40:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8006b44:	f104 0114 	add.w	r1, r4, #20
 8006b48:	f10c 0c14 	add.w	ip, ip, #20
 8006b4c:	d022      	beq.n	8006b94 <__lshift+0xa4>
 8006b4e:	f1c9 0a20 	rsb	sl, r9, #32
 8006b52:	2200      	movs	r2, #0
 8006b54:	e000      	b.n	8006b58 <__lshift+0x68>
 8006b56:	463b      	mov	r3, r7
 8006b58:	f8d1 8000 	ldr.w	r8, [r1]
 8006b5c:	461f      	mov	r7, r3
 8006b5e:	fa08 f809 	lsl.w	r8, r8, r9
 8006b62:	ea48 0202 	orr.w	r2, r8, r2
 8006b66:	f847 2b04 	str.w	r2, [r7], #4
 8006b6a:	f851 2b04 	ldr.w	r2, [r1], #4
 8006b6e:	458c      	cmp	ip, r1
 8006b70:	fa22 f20a 	lsr.w	r2, r2, sl
 8006b74:	d8ef      	bhi.n	8006b56 <__lshift+0x66>
 8006b76:	605a      	str	r2, [r3, #4]
 8006b78:	b10a      	cbz	r2, 8006b7e <__lshift+0x8e>
 8006b7a:	f10b 0502 	add.w	r5, fp, #2
 8006b7e:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8006b80:	6862      	ldr	r2, [r4, #4]
 8006b82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b86:	3d01      	subs	r5, #1
 8006b88:	6105      	str	r5, [r0, #16]
 8006b8a:	6021      	str	r1, [r4, #0]
 8006b8c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b94:	f851 2b04 	ldr.w	r2, [r1], #4
 8006b98:	458c      	cmp	ip, r1
 8006b9a:	f843 2b04 	str.w	r2, [r3], #4
 8006b9e:	d9ee      	bls.n	8006b7e <__lshift+0x8e>
 8006ba0:	f851 2b04 	ldr.w	r2, [r1], #4
 8006ba4:	458c      	cmp	ip, r1
 8006ba6:	f843 2b04 	str.w	r2, [r3], #4
 8006baa:	d8f3      	bhi.n	8006b94 <__lshift+0xa4>
 8006bac:	e7e7      	b.n	8006b7e <__lshift+0x8e>
 8006bae:	bf00      	nop

08006bb0 <__mcmp>:
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	690a      	ldr	r2, [r1, #16]
 8006bb4:	6900      	ldr	r0, [r0, #16]
 8006bb6:	1a80      	subs	r0, r0, r2
 8006bb8:	b430      	push	{r4, r5}
 8006bba:	d111      	bne.n	8006be0 <__mcmp+0x30>
 8006bbc:	3204      	adds	r2, #4
 8006bbe:	0094      	lsls	r4, r2, #2
 8006bc0:	191a      	adds	r2, r3, r4
 8006bc2:	1909      	adds	r1, r1, r4
 8006bc4:	3314      	adds	r3, #20
 8006bc6:	3204      	adds	r2, #4
 8006bc8:	3104      	adds	r1, #4
 8006bca:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8006bce:	f851 4c04 	ldr.w	r4, [r1, #-4]
 8006bd2:	3a04      	subs	r2, #4
 8006bd4:	42a5      	cmp	r5, r4
 8006bd6:	f1a1 0104 	sub.w	r1, r1, #4
 8006bda:	d103      	bne.n	8006be4 <__mcmp+0x34>
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d3f4      	bcc.n	8006bca <__mcmp+0x1a>
 8006be0:	bc30      	pop	{r4, r5}
 8006be2:	4770      	bx	lr
 8006be4:	bf38      	it	cc
 8006be6:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
 8006bea:	d3f9      	bcc.n	8006be0 <__mcmp+0x30>
 8006bec:	2001      	movs	r0, #1
 8006bee:	e7f7      	b.n	8006be0 <__mcmp+0x30>

08006bf0 <__mdiff>:
 8006bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf4:	460c      	mov	r4, r1
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	4615      	mov	r5, r2
 8006bfe:	f7ff ffd7 	bl	8006bb0 <__mcmp>
 8006c02:	1e07      	subs	r7, r0, #0
 8006c04:	d058      	beq.n	8006cb8 <__mdiff+0xc8>
 8006c06:	db52      	blt.n	8006cae <__mdiff+0xbe>
 8006c08:	2700      	movs	r7, #0
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	6861      	ldr	r1, [r4, #4]
 8006c0e:	f7ff fd75 	bl	80066fc <_Balloc>
 8006c12:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8006c16:	692b      	ldr	r3, [r5, #16]
 8006c18:	60c7      	str	r7, [r0, #12]
 8006c1a:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 8006c1e:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8006c22:	3714      	adds	r7, #20
 8006c24:	f108 0814 	add.w	r8, r8, #20
 8006c28:	3414      	adds	r4, #20
 8006c2a:	3514      	adds	r5, #20
 8006c2c:	f100 0914 	add.w	r9, r0, #20
 8006c30:	2600      	movs	r6, #0
 8006c32:	f854 3b04 	ldr.w	r3, [r4], #4
 8006c36:	f855 2b04 	ldr.w	r2, [r5], #4
 8006c3a:	fa16 f183 	uxtah	r1, r6, r3
 8006c3e:	fa1f fa82 	uxth.w	sl, r2
 8006c42:	0c12      	lsrs	r2, r2, #16
 8006c44:	ebc2 4613 	rsb	r6, r2, r3, lsr #16
 8006c48:	ebca 0101 	rsb	r1, sl, r1
 8006c4c:	eb06 4621 	add.w	r6, r6, r1, asr #16
 8006c50:	464b      	mov	r3, r9
 8006c52:	b289      	uxth	r1, r1
 8006c54:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8006c58:	f843 1b04 	str.w	r1, [r3], #4
 8006c5c:	1436      	asrs	r6, r6, #16
 8006c5e:	45a8      	cmp	r8, r5
 8006c60:	4622      	mov	r2, r4
 8006c62:	4699      	mov	r9, r3
 8006c64:	d8e5      	bhi.n	8006c32 <__mdiff+0x42>
 8006c66:	42a7      	cmp	r7, r4
 8006c68:	4698      	mov	r8, r3
 8006c6a:	d914      	bls.n	8006c96 <__mdiff+0xa6>
 8006c6c:	f852 5b04 	ldr.w	r5, [r2], #4
 8006c70:	fa16 f685 	uxtah	r6, r6, r5
 8006c74:	0c2d      	lsrs	r5, r5, #16
 8006c76:	eb05 4526 	add.w	r5, r5, r6, asr #16
 8006c7a:	b2b6      	uxth	r6, r6
 8006c7c:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 8006c80:	142e      	asrs	r6, r5, #16
 8006c82:	4297      	cmp	r7, r2
 8006c84:	f843 1b04 	str.w	r1, [r3], #4
 8006c88:	d8f0      	bhi.n	8006c6c <__mdiff+0x7c>
 8006c8a:	43e3      	mvns	r3, r4
 8006c8c:	19db      	adds	r3, r3, r7
 8006c8e:	f023 0303 	bic.w	r3, r3, #3
 8006c92:	3304      	adds	r3, #4
 8006c94:	4443      	add	r3, r8
 8006c96:	b931      	cbnz	r1, 8006ca6 <__mdiff+0xb6>
 8006c98:	3b04      	subs	r3, #4
 8006c9a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006c9e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006ca2:	2a00      	cmp	r2, #0
 8006ca4:	d0f9      	beq.n	8006c9a <__mdiff+0xaa>
 8006ca6:	f8c0 c010 	str.w	ip, [r0, #16]
 8006caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cae:	4623      	mov	r3, r4
 8006cb0:	2701      	movs	r7, #1
 8006cb2:	462c      	mov	r4, r5
 8006cb4:	461d      	mov	r5, r3
 8006cb6:	e7a8      	b.n	8006c0a <__mdiff+0x1a>
 8006cb8:	4630      	mov	r0, r6
 8006cba:	4639      	mov	r1, r7
 8006cbc:	f7ff fd1e 	bl	80066fc <_Balloc>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	6103      	str	r3, [r0, #16]
 8006cc4:	6147      	str	r7, [r0, #20]
 8006cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cca:	bf00      	nop

08006ccc <__ulp>:
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8006cd2:	400b      	ands	r3, r1
 8006cd4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	dd02      	ble.n	8006ce2 <__ulp+0x16>
 8006cdc:	4619      	mov	r1, r3
 8006cde:	2000      	movs	r0, #0
 8006ce0:	4770      	bx	lr
 8006ce2:	425b      	negs	r3, r3
 8006ce4:	151b      	asrs	r3, r3, #20
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	2b13      	cmp	r3, #19
 8006cea:	dd0b      	ble.n	8006d04 <__ulp+0x38>
 8006cec:	2b32      	cmp	r3, #50	; 0x32
 8006cee:	dd02      	ble.n	8006cf6 <__ulp+0x2a>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	4770      	bx	lr
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8006cfc:	fa12 f303 	lsls.w	r3, r2, r3
 8006d00:	4618      	mov	r0, r3
 8006d02:	4770      	bx	lr
 8006d04:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006d08:	fa52 f103 	asrs.w	r1, r2, r3
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	4770      	bx	lr

08006d10 <__b2d>:
 8006d10:	6902      	ldr	r2, [r0, #16]
 8006d12:	3204      	adds	r2, #4
 8006d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d16:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8006d20:	4628      	mov	r0, r5
 8006d22:	460f      	mov	r7, r1
 8006d24:	f103 0614 	add.w	r6, r3, #20
 8006d28:	f7ff fda8 	bl	800687c <__hi0bits>
 8006d2c:	f1c0 0320 	rsb	r3, r0, #32
 8006d30:	280a      	cmp	r0, #10
 8006d32:	603b      	str	r3, [r7, #0]
 8006d34:	4623      	mov	r3, r4
 8006d36:	dc14      	bgt.n	8006d62 <__b2d+0x52>
 8006d38:	f1c0 010b 	rsb	r1, r0, #11
 8006d3c:	fa35 f701 	lsrs.w	r7, r5, r1
 8006d40:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 8006d44:	42a6      	cmp	r6, r4
 8006d46:	f447 1340 	orr.w	r3, r7, #3145728	; 0x300000
 8006d4a:	d22e      	bcs.n	8006daa <__b2d+0x9a>
 8006d4c:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006d50:	fa34 f101 	lsrs.w	r1, r4, r1
 8006d54:	3015      	adds	r0, #21
 8006d56:	4085      	lsls	r5, r0
 8006d58:	ea41 0205 	orr.w	r2, r1, r5
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	4619      	mov	r1, r3
 8006d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d62:	2100      	movs	r1, #0
 8006d64:	42a6      	cmp	r6, r4
 8006d66:	d202      	bcs.n	8006d6e <__b2d+0x5e>
 8006d68:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8006d6c:	3c04      	subs	r4, #4
 8006d6e:	f1b0 070b 	subs.w	r7, r0, #11
 8006d72:	bf02      	ittt	eq
 8006d74:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
 8006d78:	f445 1340 	orreq.w	r3, r5, #3145728	; 0x300000
 8006d7c:	460a      	moveq	r2, r1
 8006d7e:	d0ed      	beq.n	8006d5c <__b2d+0x4c>
 8006d80:	40bd      	lsls	r5, r7
 8006d82:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 8006d86:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 8006d8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006d8e:	fa21 fc00 	lsr.w	ip, r1, r0
 8006d92:	42b4      	cmp	r4, r6
 8006d94:	ea45 030c 	orr.w	r3, r5, ip
 8006d98:	d909      	bls.n	8006dae <__b2d+0x9e>
 8006d9a:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006d9e:	fa34 f000 	lsrs.w	r0, r4, r0
 8006da2:	40b9      	lsls	r1, r7
 8006da4:	ea40 0201 	orr.w	r2, r0, r1
 8006da8:	e7d8      	b.n	8006d5c <__b2d+0x4c>
 8006daa:	2100      	movs	r1, #0
 8006dac:	e7d2      	b.n	8006d54 <__b2d+0x44>
 8006dae:	2000      	movs	r0, #0
 8006db0:	e7f7      	b.n	8006da2 <__b2d+0x92>
 8006db2:	bf00      	nop

08006db4 <__d2b>:
 8006db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006db8:	b083      	sub	sp, #12
 8006dba:	2101      	movs	r1, #1
 8006dbc:	461d      	mov	r5, r3
 8006dbe:	4614      	mov	r4, r2
 8006dc0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006dc2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006dc4:	f7ff fc9a 	bl	80066fc <_Balloc>
 8006dc8:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 8006dcc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006dd0:	f3c5 590a 	ubfx	r9, r5, #20, #11
 8006dd4:	4680      	mov	r8, r0
 8006dd6:	9301      	str	r3, [sp, #4]
 8006dd8:	f1b9 0f00 	cmp.w	r9, #0
 8006ddc:	d002      	beq.n	8006de4 <__d2b+0x30>
 8006dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006de2:	9301      	str	r3, [sp, #4]
 8006de4:	2c00      	cmp	r4, #0
 8006de6:	d025      	beq.n	8006e34 <__d2b+0x80>
 8006de8:	a802      	add	r0, sp, #8
 8006dea:	f840 4d08 	str.w	r4, [r0, #-8]!
 8006dee:	4668      	mov	r0, sp
 8006df0:	f7ff fd62 	bl	80068b8 <__lo0bits>
 8006df4:	9b01      	ldr	r3, [sp, #4]
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d132      	bne.n	8006e60 <__d2b+0xac>
 8006dfa:	9a00      	ldr	r2, [sp, #0]
 8006dfc:	f8c8 2014 	str.w	r2, [r8, #20]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	bf0c      	ite	eq
 8006e04:	2401      	moveq	r4, #1
 8006e06:	2402      	movne	r4, #2
 8006e08:	f8c8 3018 	str.w	r3, [r8, #24]
 8006e0c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006e10:	f1b9 0f00 	cmp.w	r9, #0
 8006e14:	d11b      	bne.n	8006e4e <__d2b+0x9a>
 8006e16:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8006e1a:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 8006e1e:	6910      	ldr	r0, [r2, #16]
 8006e20:	603b      	str	r3, [r7, #0]
 8006e22:	f7ff fd2b 	bl	800687c <__hi0bits>
 8006e26:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8006e2a:	6030      	str	r0, [r6, #0]
 8006e2c:	4640      	mov	r0, r8
 8006e2e:	b003      	add	sp, #12
 8006e30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e34:	a801      	add	r0, sp, #4
 8006e36:	f7ff fd3f 	bl	80068b8 <__lo0bits>
 8006e3a:	9b01      	ldr	r3, [sp, #4]
 8006e3c:	2401      	movs	r4, #1
 8006e3e:	f8c8 3014 	str.w	r3, [r8, #20]
 8006e42:	f8c8 4010 	str.w	r4, [r8, #16]
 8006e46:	3020      	adds	r0, #32
 8006e48:	f1b9 0f00 	cmp.w	r9, #0
 8006e4c:	d0e3      	beq.n	8006e16 <__d2b+0x62>
 8006e4e:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 8006e52:	eb09 0300 	add.w	r3, r9, r0
 8006e56:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	6030      	str	r0, [r6, #0]
 8006e5e:	e7e5      	b.n	8006e2c <__d2b+0x78>
 8006e60:	f1c0 0220 	rsb	r2, r0, #32
 8006e64:	9900      	ldr	r1, [sp, #0]
 8006e66:	fa13 f202 	lsls.w	r2, r3, r2
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	40c3      	lsrs	r3, r0
 8006e6e:	f8c8 2014 	str.w	r2, [r8, #20]
 8006e72:	9301      	str	r3, [sp, #4]
 8006e74:	e7c4      	b.n	8006e00 <__d2b+0x4c>
 8006e76:	bf00      	nop

08006e78 <__ratio>:
 8006e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	460d      	mov	r5, r1
 8006e80:	4669      	mov	r1, sp
 8006e82:	4604      	mov	r4, r0
 8006e84:	f7ff ff44 	bl	8006d10 <__b2d>
 8006e88:	4689      	mov	r9, r1
 8006e8a:	4680      	mov	r8, r0
 8006e8c:	a901      	add	r1, sp, #4
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f7ff ff3e 	bl	8006d10 <__b2d>
 8006e94:	460f      	mov	r7, r1
 8006e96:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8006e9a:	692a      	ldr	r2, [r5, #16]
 8006e9c:	6924      	ldr	r4, [r4, #16]
 8006e9e:	1acb      	subs	r3, r1, r3
 8006ea0:	1aa4      	subs	r4, r4, r2
 8006ea2:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8006ea6:	2c00      	cmp	r4, #0
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	464b      	mov	r3, r9
 8006eac:	4639      	mov	r1, r7
 8006eae:	bfcb      	itete	gt
 8006eb0:	eb09 5304 	addgt.w	r3, r9, r4, lsl #20
 8006eb4:	eba7 5104 	suble.w	r1, r7, r4, lsl #20
 8006eb8:	4699      	movgt	r9, r3
 8006eba:	460f      	movle	r7, r1
 8006ebc:	bfcc      	ite	gt
 8006ebe:	46c0      	nopgt			; (mov r8, r8)
 8006ec0:	4636      	movle	r6, r6
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	4632      	mov	r2, r6
 8006ec8:	463b      	mov	r3, r7
 8006eca:	f001 fc53 	bl	8008774 <__aeabi_ddiv>
 8006ece:	b003      	add	sp, #12
 8006ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006ed4 <_mprec_log10>:
 8006ed4:	b510      	push	{r4, lr}
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	2100      	movs	r1, #0
 8006eda:	2000      	movs	r0, #0
 8006edc:	2c17      	cmp	r4, #23
 8006ede:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8006ee2:	dd08      	ble.n	8006ef6 <_mprec_log10+0x22>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006eec:	f001 fb18 	bl	8008520 <__aeabi_dmul>
 8006ef0:	3c01      	subs	r4, #1
 8006ef2:	d1f7      	bne.n	8006ee4 <_mprec_log10+0x10>
 8006ef4:	bd10      	pop	{r4, pc}
 8006ef6:	4b03      	ldr	r3, [pc, #12]	; (8006f04 <_mprec_log10+0x30>)
 8006ef8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006efc:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8006f00:	bd10      	pop	{r4, pc}
 8006f02:	bf00      	nop
 8006f04:	08008e18 	.word	0x08008e18

08006f08 <__copybits>:
 8006f08:	6913      	ldr	r3, [r2, #16]
 8006f0a:	3901      	subs	r1, #1
 8006f0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f10:	1149      	asrs	r1, r1, #5
 8006f12:	b470      	push	{r4, r5, r6}
 8006f14:	3314      	adds	r3, #20
 8006f16:	f102 0414 	add.w	r4, r2, #20
 8006f1a:	3101      	adds	r1, #1
 8006f1c:	429c      	cmp	r4, r3
 8006f1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f22:	d20c      	bcs.n	8006f3e <__copybits+0x36>
 8006f24:	4605      	mov	r5, r0
 8006f26:	f854 6b04 	ldr.w	r6, [r4], #4
 8006f2a:	42a3      	cmp	r3, r4
 8006f2c:	f845 6b04 	str.w	r6, [r5], #4
 8006f30:	d8f9      	bhi.n	8006f26 <__copybits+0x1e>
 8006f32:	1a9b      	subs	r3, r3, r2
 8006f34:	3b15      	subs	r3, #21
 8006f36:	f023 0303 	bic.w	r3, r3, #3
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	18c0      	adds	r0, r0, r3
 8006f3e:	4281      	cmp	r1, r0
 8006f40:	d904      	bls.n	8006f4c <__copybits+0x44>
 8006f42:	2300      	movs	r3, #0
 8006f44:	f840 3b04 	str.w	r3, [r0], #4
 8006f48:	4281      	cmp	r1, r0
 8006f4a:	d8fb      	bhi.n	8006f44 <__copybits+0x3c>
 8006f4c:	bc70      	pop	{r4, r5, r6}
 8006f4e:	4770      	bx	lr

08006f50 <__any_on>:
 8006f50:	6902      	ldr	r2, [r0, #16]
 8006f52:	114b      	asrs	r3, r1, #5
 8006f54:	429a      	cmp	r2, r3
 8006f56:	b410      	push	{r4}
 8006f58:	db01      	blt.n	8006f5e <__any_on+0xe>
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	dc13      	bgt.n	8006f86 <__any_on+0x36>
 8006f5e:	3204      	adds	r2, #4
 8006f60:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006f64:	f100 0114 	add.w	r1, r0, #20
 8006f68:	1d1c      	adds	r4, r3, #4
 8006f6a:	42a1      	cmp	r1, r4
 8006f6c:	d218      	bcs.n	8006fa0 <__any_on+0x50>
 8006f6e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8006f72:	b92a      	cbnz	r2, 8006f80 <__any_on+0x30>
 8006f74:	4299      	cmp	r1, r3
 8006f76:	d213      	bcs.n	8006fa0 <__any_on+0x50>
 8006f78:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006f7c:	2a00      	cmp	r2, #0
 8006f7e:	d0f9      	beq.n	8006f74 <__any_on+0x24>
 8006f80:	2001      	movs	r0, #1
 8006f82:	bc10      	pop	{r4}
 8006f84:	4770      	bx	lr
 8006f86:	f011 011f 	ands.w	r1, r1, #31
 8006f8a:	d0e8      	beq.n	8006f5e <__any_on+0xe>
 8006f8c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	fa33 f401 	lsrs.w	r4, r3, r1
 8006f96:	fa14 f101 	lsls.w	r1, r4, r1
 8006f9a:	4299      	cmp	r1, r3
 8006f9c:	d1f0      	bne.n	8006f80 <__any_on+0x30>
 8006f9e:	e7de      	b.n	8006f5e <__any_on+0xe>
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	e7ee      	b.n	8006f82 <__any_on+0x32>

08006fa4 <__fpclassifyd>:
 8006fa4:	ea50 0201 	orrs.w	r2, r0, r1
 8006fa8:	b410      	push	{r4}
 8006faa:	460b      	mov	r3, r1
 8006fac:	d102      	bne.n	8006fb4 <__fpclassifyd+0x10>
 8006fae:	2002      	movs	r0, #2
 8006fb0:	bc10      	pop	{r4}
 8006fb2:	4770      	bx	lr
 8006fb4:	f1d0 0101 	rsbs	r1, r0, #1
 8006fb8:	bf38      	it	cc
 8006fba:	2100      	movcc	r1, #0
 8006fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fc0:	bf08      	it	eq
 8006fc2:	2800      	cmpeq	r0, #0
 8006fc4:	d0f3      	beq.n	8006fae <__fpclassifyd+0xa>
 8006fc6:	f103 44ff 	add.w	r4, r3, #2139095040	; 0x7f800000
 8006fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fce:	f504 04e0 	add.w	r4, r4, #7340032	; 0x700000
 8006fd2:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 8006fd6:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 8006fda:	4290      	cmp	r0, r2
 8006fdc:	bf88      	it	hi
 8006fde:	4294      	cmphi	r4, r2
 8006fe0:	d801      	bhi.n	8006fe6 <__fpclassifyd+0x42>
 8006fe2:	2004      	movs	r0, #4
 8006fe4:	e7e4      	b.n	8006fb0 <__fpclassifyd+0xc>
 8006fe6:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8006fea:	2003      	movs	r0, #3
 8006fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff0:	bf28      	it	cs
 8006ff2:	f5b2 1f80 	cmpcs.w	r2, #1048576	; 0x100000
 8006ff6:	d3db      	bcc.n	8006fb0 <__fpclassifyd+0xc>
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8006ffe:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8007002:	bf18      	it	ne
 8007004:	4293      	cmpne	r3, r2
 8007006:	bf14      	ite	ne
 8007008:	2300      	movne	r3, #0
 800700a:	2301      	moveq	r3, #1
 800700c:	ea01 0003 	and.w	r0, r1, r3
 8007010:	e7ce      	b.n	8006fb0 <__fpclassifyd+0xc>
 8007012:	bf00      	nop

08007014 <_sbrk_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4c07      	ldr	r4, [pc, #28]	; (8007034 <_sbrk_r+0x20>)
 8007018:	2300      	movs	r3, #0
 800701a:	4605      	mov	r5, r0
 800701c:	4608      	mov	r0, r1
 800701e:	6023      	str	r3, [r4, #0]
 8007020:	f7fc fbe0 	bl	80037e4 <_sbrk>
 8007024:	1c43      	adds	r3, r0, #1
 8007026:	d000      	beq.n	800702a <_sbrk_r+0x16>
 8007028:	bd38      	pop	{r3, r4, r5, pc}
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0fb      	beq.n	8007028 <_sbrk_r+0x14>
 8007030:	602b      	str	r3, [r5, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	200015fc 	.word	0x200015fc

08007038 <strcmp>:
 8007038:	ea80 0201 	eor.w	r2, r0, r1
 800703c:	f012 0f03 	tst.w	r2, #3
 8007040:	d13a      	bne.n	80070b8 <strcmp_unaligned>
 8007042:	f010 0203 	ands.w	r2, r0, #3
 8007046:	f020 0003 	bic.w	r0, r0, #3
 800704a:	f021 0103 	bic.w	r1, r1, #3
 800704e:	f850 cb04 	ldr.w	ip, [r0], #4
 8007052:	bf08      	it	eq
 8007054:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007058:	d00d      	beq.n	8007076 <strcmp+0x3e>
 800705a:	f082 0203 	eor.w	r2, r2, #3
 800705e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007062:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007066:	fa23 f202 	lsr.w	r2, r3, r2
 800706a:	f851 3b04 	ldr.w	r3, [r1], #4
 800706e:	ea4c 0c02 	orr.w	ip, ip, r2
 8007072:	ea43 0302 	orr.w	r3, r3, r2
 8007076:	bf00      	nop
 8007078:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 800707c:	459c      	cmp	ip, r3
 800707e:	bf01      	itttt	eq
 8007080:	ea22 020c 	biceq.w	r2, r2, ip
 8007084:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8007088:	f850 cb04 	ldreq.w	ip, [r0], #4
 800708c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007090:	d0f2      	beq.n	8007078 <strcmp+0x40>
 8007092:	ea4f 600c 	mov.w	r0, ip, lsl #24
 8007096:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800709a:	2801      	cmp	r0, #1
 800709c:	bf28      	it	cs
 800709e:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 80070a2:	bf08      	it	eq
 80070a4:	0a1b      	lsreq	r3, r3, #8
 80070a6:	d0f4      	beq.n	8007092 <strcmp+0x5a>
 80070a8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80070ac:	ea4f 6010 	mov.w	r0, r0, lsr #24
 80070b0:	eba0 0003 	sub.w	r0, r0, r3
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop

080070b8 <strcmp_unaligned>:
 80070b8:	f010 0f03 	tst.w	r0, #3
 80070bc:	d00a      	beq.n	80070d4 <strcmp_unaligned+0x1c>
 80070be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070c6:	2a01      	cmp	r2, #1
 80070c8:	bf28      	it	cs
 80070ca:	429a      	cmpcs	r2, r3
 80070cc:	d0f4      	beq.n	80070b8 <strcmp_unaligned>
 80070ce:	eba2 0003 	sub.w	r0, r2, r3
 80070d2:	4770      	bx	lr
 80070d4:	f84d 5d04 	str.w	r5, [sp, #-4]!
 80070d8:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80070dc:	f04f 0201 	mov.w	r2, #1
 80070e0:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 80070e4:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 80070e8:	f001 0c03 	and.w	ip, r1, #3
 80070ec:	f021 0103 	bic.w	r1, r1, #3
 80070f0:	f850 4b04 	ldr.w	r4, [r0], #4
 80070f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80070f8:	f1bc 0f02 	cmp.w	ip, #2
 80070fc:	d026      	beq.n	800714c <strcmp_unaligned+0x94>
 80070fe:	d84b      	bhi.n	8007198 <strcmp_unaligned+0xe0>
 8007100:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 8007104:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8007108:	eba4 0302 	sub.w	r3, r4, r2
 800710c:	ea23 0304 	bic.w	r3, r3, r4
 8007110:	d10d      	bne.n	800712e <strcmp_unaligned+0x76>
 8007112:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8007116:	bf08      	it	eq
 8007118:	f851 5b04 	ldreq.w	r5, [r1], #4
 800711c:	d10a      	bne.n	8007134 <strcmp_unaligned+0x7c>
 800711e:	ea8c 0c04 	eor.w	ip, ip, r4
 8007122:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 8007126:	d10c      	bne.n	8007142 <strcmp_unaligned+0x8a>
 8007128:	f850 4b04 	ldr.w	r4, [r0], #4
 800712c:	e7e8      	b.n	8007100 <strcmp_unaligned+0x48>
 800712e:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8007132:	e05c      	b.n	80071ee <strcmp_unaligned+0x136>
 8007134:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8007138:	d152      	bne.n	80071e0 <strcmp_unaligned+0x128>
 800713a:	780d      	ldrb	r5, [r1, #0]
 800713c:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8007140:	e055      	b.n	80071ee <strcmp_unaligned+0x136>
 8007142:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8007146:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 800714a:	e050      	b.n	80071ee <strcmp_unaligned+0x136>
 800714c:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8007150:	eba4 0302 	sub.w	r3, r4, r2
 8007154:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007158:	ea23 0304 	bic.w	r3, r3, r4
 800715c:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8007160:	d117      	bne.n	8007192 <strcmp_unaligned+0xda>
 8007162:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8007166:	bf08      	it	eq
 8007168:	f851 5b04 	ldreq.w	r5, [r1], #4
 800716c:	d107      	bne.n	800717e <strcmp_unaligned+0xc6>
 800716e:	ea8c 0c04 	eor.w	ip, ip, r4
 8007172:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 8007176:	d108      	bne.n	800718a <strcmp_unaligned+0xd2>
 8007178:	f850 4b04 	ldr.w	r4, [r0], #4
 800717c:	e7e6      	b.n	800714c <strcmp_unaligned+0x94>
 800717e:	041b      	lsls	r3, r3, #16
 8007180:	d12e      	bne.n	80071e0 <strcmp_unaligned+0x128>
 8007182:	880d      	ldrh	r5, [r1, #0]
 8007184:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007188:	e031      	b.n	80071ee <strcmp_unaligned+0x136>
 800718a:	ea4f 4505 	mov.w	r5, r5, lsl #16
 800718e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007192:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8007196:	e02a      	b.n	80071ee <strcmp_unaligned+0x136>
 8007198:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 800719c:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 80071a0:	eba4 0302 	sub.w	r3, r4, r2
 80071a4:	ea23 0304 	bic.w	r3, r3, r4
 80071a8:	d10d      	bne.n	80071c6 <strcmp_unaligned+0x10e>
 80071aa:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 80071ae:	bf08      	it	eq
 80071b0:	f851 5b04 	ldreq.w	r5, [r1], #4
 80071b4:	d10a      	bne.n	80071cc <strcmp_unaligned+0x114>
 80071b6:	ea8c 0c04 	eor.w	ip, ip, r4
 80071ba:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 80071be:	d10a      	bne.n	80071d6 <strcmp_unaligned+0x11e>
 80071c0:	f850 4b04 	ldr.w	r4, [r0], #4
 80071c4:	e7e8      	b.n	8007198 <strcmp_unaligned+0xe0>
 80071c6:	ea4f 6515 	mov.w	r5, r5, lsr #24
 80071ca:	e010      	b.n	80071ee <strcmp_unaligned+0x136>
 80071cc:	f014 0fff 	tst.w	r4, #255	; 0xff
 80071d0:	d006      	beq.n	80071e0 <strcmp_unaligned+0x128>
 80071d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80071d6:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 80071da:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80071de:	e006      	b.n	80071ee <strcmp_unaligned+0x136>
 80071e0:	f04f 0000 	mov.w	r0, #0
 80071e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071e8:	f85d 5b04 	ldr.w	r5, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 80071f2:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 80071f6:	2801      	cmp	r0, #1
 80071f8:	bf28      	it	cs
 80071fa:	4290      	cmpcs	r0, r2
 80071fc:	bf04      	itt	eq
 80071fe:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 8007202:	0a2d      	lsreq	r5, r5, #8
 8007204:	d0f3      	beq.n	80071ee <strcmp_unaligned+0x136>
 8007206:	eba2 0000 	sub.w	r0, r2, r0
 800720a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800720e:	f85d 5b04 	ldr.w	r5, [sp], #4
 8007212:	4770      	bx	lr

08007214 <strlen>:
 8007214:	f020 0103 	bic.w	r1, r0, #3
 8007218:	f010 0003 	ands.w	r0, r0, #3
 800721c:	f1c0 0000 	rsb	r0, r0, #0
 8007220:	f851 3b04 	ldr.w	r3, [r1], #4
 8007224:	f100 0c04 	add.w	ip, r0, #4
 8007228:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800722c:	f06f 0200 	mvn.w	r2, #0
 8007230:	bf1c      	itt	ne
 8007232:	fa22 f20c 	lsrne.w	r2, r2, ip
 8007236:	4313      	orrne	r3, r2
 8007238:	f04f 0c01 	mov.w	ip, #1
 800723c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8007240:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8007244:	eba3 020c 	sub.w	r2, r3, ip
 8007248:	ea22 0203 	bic.w	r2, r2, r3
 800724c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8007250:	bf04      	itt	eq
 8007252:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007256:	3004      	addeq	r0, #4
 8007258:	d0f4      	beq.n	8007244 <strlen+0x30>
 800725a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800725e:	bf1f      	itttt	ne
 8007260:	3001      	addne	r0, #1
 8007262:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8007266:	3001      	addne	r0, #1
 8007268:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 800726c:	bf18      	it	ne
 800726e:	3001      	addne	r0, #1
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop

08007274 <__ssprint_r>:
 8007274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007278:	b083      	sub	sp, #12
 800727a:	4691      	mov	r9, r2
 800727c:	9001      	str	r0, [sp, #4]
 800727e:	6890      	ldr	r0, [r2, #8]
 8007280:	6817      	ldr	r7, [r2, #0]
 8007282:	460d      	mov	r5, r1
 8007284:	2800      	cmp	r0, #0
 8007286:	d072      	beq.n	800736e <__ssprint_r+0xfa>
 8007288:	f04f 0a00 	mov.w	sl, #0
 800728c:	6808      	ldr	r0, [r1, #0]
 800728e:	688b      	ldr	r3, [r1, #8]
 8007290:	4654      	mov	r4, sl
 8007292:	2c00      	cmp	r4, #0
 8007294:	d048      	beq.n	8007328 <__ssprint_r+0xb4>
 8007296:	429c      	cmp	r4, r3
 8007298:	461e      	mov	r6, r3
 800729a:	4698      	mov	r8, r3
 800729c:	bf3c      	itt	cc
 800729e:	4626      	movcc	r6, r4
 80072a0:	46a0      	movcc	r8, r4
 80072a2:	d331      	bcc.n	8007308 <__ssprint_r+0x94>
 80072a4:	89ab      	ldrh	r3, [r5, #12]
 80072a6:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80072aa:	d02d      	beq.n	8007308 <__ssprint_r+0x94>
 80072ac:	696e      	ldr	r6, [r5, #20]
 80072ae:	6929      	ldr	r1, [r5, #16]
 80072b0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80072b4:	ebc1 0800 	rsb	r8, r1, r0
 80072b8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80072bc:	1c60      	adds	r0, r4, #1
 80072be:	1076      	asrs	r6, r6, #1
 80072c0:	4440      	add	r0, r8
 80072c2:	4286      	cmp	r6, r0
 80072c4:	4632      	mov	r2, r6
 80072c6:	bf3c      	itt	cc
 80072c8:	4606      	movcc	r6, r0
 80072ca:	4632      	movcc	r2, r6
 80072cc:	055b      	lsls	r3, r3, #21
 80072ce:	9801      	ldr	r0, [sp, #4]
 80072d0:	d52f      	bpl.n	8007332 <__ssprint_r+0xbe>
 80072d2:	4611      	mov	r1, r2
 80072d4:	f7fe fed8 	bl	8006088 <_malloc_r>
 80072d8:	4683      	mov	fp, r0
 80072da:	2800      	cmp	r0, #0
 80072dc:	d032      	beq.n	8007344 <__ssprint_r+0xd0>
 80072de:	6929      	ldr	r1, [r5, #16]
 80072e0:	4642      	mov	r2, r8
 80072e2:	f7ff f9c3 	bl	800666c <memcpy>
 80072e6:	89ab      	ldrh	r3, [r5, #12]
 80072e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f0:	81ab      	strh	r3, [r5, #12]
 80072f2:	ebc8 0306 	rsb	r3, r8, r6
 80072f6:	eb0b 0008 	add.w	r0, fp, r8
 80072fa:	616e      	str	r6, [r5, #20]
 80072fc:	f8c5 b010 	str.w	fp, [r5, #16]
 8007300:	6028      	str	r0, [r5, #0]
 8007302:	4626      	mov	r6, r4
 8007304:	60ab      	str	r3, [r5, #8]
 8007306:	46a0      	mov	r8, r4
 8007308:	4642      	mov	r2, r8
 800730a:	4651      	mov	r1, sl
 800730c:	f000 fcb8 	bl	8007c80 <memmove>
 8007310:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8007314:	68ab      	ldr	r3, [r5, #8]
 8007316:	6828      	ldr	r0, [r5, #0]
 8007318:	1b9b      	subs	r3, r3, r6
 800731a:	4440      	add	r0, r8
 800731c:	1b14      	subs	r4, r2, r4
 800731e:	60ab      	str	r3, [r5, #8]
 8007320:	6028      	str	r0, [r5, #0]
 8007322:	f8c9 4008 	str.w	r4, [r9, #8]
 8007326:	b1e4      	cbz	r4, 8007362 <__ssprint_r+0xee>
 8007328:	f8d7 a000 	ldr.w	sl, [r7]
 800732c:	687c      	ldr	r4, [r7, #4]
 800732e:	3708      	adds	r7, #8
 8007330:	e7af      	b.n	8007292 <__ssprint_r+0x1e>
 8007332:	f000 fd47 	bl	8007dc4 <_realloc_r>
 8007336:	4683      	mov	fp, r0
 8007338:	2800      	cmp	r0, #0
 800733a:	d1da      	bne.n	80072f2 <__ssprint_r+0x7e>
 800733c:	9801      	ldr	r0, [sp, #4]
 800733e:	6929      	ldr	r1, [r5, #16]
 8007340:	f7fe fd96 	bl	8005e70 <_free_r>
 8007344:	9a01      	ldr	r2, [sp, #4]
 8007346:	230c      	movs	r3, #12
 8007348:	6013      	str	r3, [r2, #0]
 800734a:	89aa      	ldrh	r2, [r5, #12]
 800734c:	2300      	movs	r3, #0
 800734e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007352:	81aa      	strh	r2, [r5, #12]
 8007354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007358:	f8c9 3008 	str.w	r3, [r9, #8]
 800735c:	f8c9 3004 	str.w	r3, [r9, #4]
 8007360:	e002      	b.n	8007368 <__ssprint_r+0xf4>
 8007362:	f8c9 4004 	str.w	r4, [r9, #4]
 8007366:	4620      	mov	r0, r4
 8007368:	b003      	add	sp, #12
 800736a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736e:	6050      	str	r0, [r2, #4]
 8007370:	e7fa      	b.n	8007368 <__ssprint_r+0xf4>
 8007372:	bf00      	nop

08007374 <_svfiprintf_r>:
 8007374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007378:	468a      	mov	sl, r1
 800737a:	8989      	ldrh	r1, [r1, #12]
 800737c:	b0ad      	sub	sp, #180	; 0xb4
 800737e:	0609      	lsls	r1, r1, #24
 8007380:	9007      	str	r0, [sp, #28]
 8007382:	9305      	str	r3, [sp, #20]
 8007384:	d504      	bpl.n	8007390 <_svfiprintf_r+0x1c>
 8007386:	f8da 3010 	ldr.w	r3, [sl, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 8422 	beq.w	8007bd4 <_svfiprintf_r+0x860>
 8007390:	2300      	movs	r3, #0
 8007392:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8007396:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 800739a:	a90e      	add	r1, sp, #56	; 0x38
 800739c:	930c      	str	r3, [sp, #48]	; 0x30
 800739e:	932a      	str	r3, [sp, #168]	; 0xa8
 80073a0:	9329      	str	r3, [sp, #164]	; 0xa4
 80073a2:	9304      	str	r3, [sp, #16]
 80073a4:	ebc0 0308 	rsb	r3, r0, r8
 80073a8:	9001      	str	r0, [sp, #4]
 80073aa:	9128      	str	r1, [sp, #160]	; 0xa0
 80073ac:	4617      	mov	r7, r2
 80073ae:	460c      	mov	r4, r1
 80073b0:	930d      	str	r3, [sp, #52]	; 0x34
 80073b2:	783b      	ldrb	r3, [r7, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	bf18      	it	ne
 80073b8:	2b25      	cmpne	r3, #37	; 0x25
 80073ba:	463d      	mov	r5, r7
 80073bc:	d016      	beq.n	80073ec <_svfiprintf_r+0x78>
 80073be:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80073c2:	2b25      	cmp	r3, #37	; 0x25
 80073c4:	bf18      	it	ne
 80073c6:	2b00      	cmpne	r3, #0
 80073c8:	d1f9      	bne.n	80073be <_svfiprintf_r+0x4a>
 80073ca:	1bee      	subs	r6, r5, r7
 80073cc:	d00e      	beq.n	80073ec <_svfiprintf_r+0x78>
 80073ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80073d0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80073d2:	6027      	str	r7, [r4, #0]
 80073d4:	3301      	adds	r3, #1
 80073d6:	1992      	adds	r2, r2, r6
 80073d8:	2b07      	cmp	r3, #7
 80073da:	6066      	str	r6, [r4, #4]
 80073dc:	922a      	str	r2, [sp, #168]	; 0xa8
 80073de:	9329      	str	r3, [sp, #164]	; 0xa4
 80073e0:	f300 832a 	bgt.w	8007a38 <_svfiprintf_r+0x6c4>
 80073e4:	3408      	adds	r4, #8
 80073e6:	9b04      	ldr	r3, [sp, #16]
 80073e8:	199b      	adds	r3, r3, r6
 80073ea:	9304      	str	r3, [sp, #16]
 80073ec:	782b      	ldrb	r3, [r5, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 82c5 	beq.w	800797e <_svfiprintf_r+0x60a>
 80073f4:	2200      	movs	r2, #0
 80073f6:	1c6f      	adds	r7, r5, #1
 80073f8:	4613      	mov	r3, r2
 80073fa:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 80073fe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007402:	9206      	str	r2, [sp, #24]
 8007404:	4693      	mov	fp, r2
 8007406:	f817 2b01 	ldrb.w	r2, [r7], #1
 800740a:	f1a2 0120 	sub.w	r1, r2, #32
 800740e:	2958      	cmp	r1, #88	; 0x58
 8007410:	f200 8178 	bhi.w	8007704 <_svfiprintf_r+0x390>
 8007414:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007418:	01760172 	.word	0x01760172
 800741c:	016f0176 	.word	0x016f0176
 8007420:	01760176 	.word	0x01760176
 8007424:	01760176 	.word	0x01760176
 8007428:	01760176 	.word	0x01760176
 800742c:	01d800af 	.word	0x01d800af
 8007430:	00ba0176 	.word	0x00ba0176
 8007434:	017601da 	.word	0x017601da
 8007438:	01c401d5 	.word	0x01c401d5
 800743c:	01c401c4 	.word	0x01c401c4
 8007440:	01c401c4 	.word	0x01c401c4
 8007444:	01c401c4 	.word	0x01c401c4
 8007448:	01c401c4 	.word	0x01c401c4
 800744c:	01760176 	.word	0x01760176
 8007450:	01760176 	.word	0x01760176
 8007454:	01760176 	.word	0x01760176
 8007458:	01760176 	.word	0x01760176
 800745c:	01760176 	.word	0x01760176
 8007460:	017601a7 	.word	0x017601a7
 8007464:	01760176 	.word	0x01760176
 8007468:	01760176 	.word	0x01760176
 800746c:	01760176 	.word	0x01760176
 8007470:	01760176 	.word	0x01760176
 8007474:	005c0176 	.word	0x005c0176
 8007478:	01760176 	.word	0x01760176
 800747c:	01760176 	.word	0x01760176
 8007480:	00a00176 	.word	0x00a00176
 8007484:	01760176 	.word	0x01760176
 8007488:	0176016a 	.word	0x0176016a
 800748c:	01760176 	.word	0x01760176
 8007490:	01760176 	.word	0x01760176
 8007494:	01760176 	.word	0x01760176
 8007498:	01760176 	.word	0x01760176
 800749c:	01170176 	.word	0x01170176
 80074a0:	01760105 	.word	0x01760105
 80074a4:	01760176 	.word	0x01760176
 80074a8:	01050102 	.word	0x01050102
 80074ac:	01760176 	.word	0x01760176
 80074b0:	01760059 	.word	0x01760059
 80074b4:	005e00d1 	.word	0x005e00d1
 80074b8:	005900bd 	.word	0x005900bd
 80074bc:	01870176 	.word	0x01870176
 80074c0:	00a20176 	.word	0x00a20176
 80074c4:	01760176 	.word	0x01760176
 80074c8:	00e2      	.short	0x00e2
 80074ca:	f04b 0b10 	orr.w	fp, fp, #16
 80074ce:	e79a      	b.n	8007406 <_svfiprintf_r+0x92>
 80074d0:	f04b 0b10 	orr.w	fp, fp, #16
 80074d4:	f01b 0210 	ands.w	r2, fp, #16
 80074d8:	f000 8313 	beq.w	8007b02 <_svfiprintf_r+0x78e>
 80074dc:	9805      	ldr	r0, [sp, #20]
 80074de:	6803      	ldr	r3, [r0, #0]
 80074e0:	2200      	movs	r2, #0
 80074e2:	1a99      	subs	r1, r3, r2
 80074e4:	bf18      	it	ne
 80074e6:	2101      	movne	r1, #1
 80074e8:	3004      	adds	r0, #4
 80074ea:	9005      	str	r0, [sp, #20]
 80074ec:	2000      	movs	r0, #0
 80074ee:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 80074f2:	2d00      	cmp	r5, #0
 80074f4:	bfa8      	it	ge
 80074f6:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 80074fa:	2d00      	cmp	r5, #0
 80074fc:	bf18      	it	ne
 80074fe:	f041 0101 	orrne.w	r1, r1, #1
 8007502:	2900      	cmp	r1, #0
 8007504:	f000 8228 	beq.w	8007958 <_svfiprintf_r+0x5e4>
 8007508:	2a01      	cmp	r2, #1
 800750a:	f000 82cf 	beq.w	8007aac <_svfiprintf_r+0x738>
 800750e:	2a02      	cmp	r2, #2
 8007510:	bf18      	it	ne
 8007512:	4642      	movne	r2, r8
 8007514:	d101      	bne.n	800751a <_svfiprintf_r+0x1a6>
 8007516:	e2b9      	b.n	8007a8c <_svfiprintf_r+0x718>
 8007518:	4602      	mov	r2, r0
 800751a:	f003 0107 	and.w	r1, r3, #7
 800751e:	3130      	adds	r1, #48	; 0x30
 8007520:	1e50      	subs	r0, r2, #1
 8007522:	08db      	lsrs	r3, r3, #3
 8007524:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007528:	d1f6      	bne.n	8007518 <_svfiprintf_r+0x1a4>
 800752a:	f01b 0f01 	tst.w	fp, #1
 800752e:	9009      	str	r0, [sp, #36]	; 0x24
 8007530:	f040 831a 	bne.w	8007b68 <_svfiprintf_r+0x7f4>
 8007534:	ebc0 0308 	rsb	r3, r0, r8
 8007538:	9303      	str	r3, [sp, #12]
 800753a:	9508      	str	r5, [sp, #32]
 800753c:	9803      	ldr	r0, [sp, #12]
 800753e:	9908      	ldr	r1, [sp, #32]
 8007540:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 8007544:	4288      	cmp	r0, r1
 8007546:	bfb8      	it	lt
 8007548:	4608      	movlt	r0, r1
 800754a:	9002      	str	r0, [sp, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 808b 	beq.w	8007668 <_svfiprintf_r+0x2f4>
 8007552:	3001      	adds	r0, #1
 8007554:	9002      	str	r0, [sp, #8]
 8007556:	e087      	b.n	8007668 <_svfiprintf_r+0x2f4>
 8007558:	f04b 0b10 	orr.w	fp, fp, #16
 800755c:	f01b 0f10 	tst.w	fp, #16
 8007560:	f000 82c1 	beq.w	8007ae6 <_svfiprintf_r+0x772>
 8007564:	9805      	ldr	r0, [sp, #20]
 8007566:	6803      	ldr	r3, [r0, #0]
 8007568:	2201      	movs	r2, #1
 800756a:	1c19      	adds	r1, r3, #0
 800756c:	bf18      	it	ne
 800756e:	2101      	movne	r1, #1
 8007570:	3004      	adds	r0, #4
 8007572:	9005      	str	r0, [sp, #20]
 8007574:	e7ba      	b.n	80074ec <_svfiprintf_r+0x178>
 8007576:	9805      	ldr	r0, [sp, #20]
 8007578:	9905      	ldr	r1, [sp, #20]
 800757a:	6800      	ldr	r0, [r0, #0]
 800757c:	1d0a      	adds	r2, r1, #4
 800757e:	2800      	cmp	r0, #0
 8007580:	9006      	str	r0, [sp, #24]
 8007582:	f280 82e0 	bge.w	8007b46 <_svfiprintf_r+0x7d2>
 8007586:	4240      	negs	r0, r0
 8007588:	9006      	str	r0, [sp, #24]
 800758a:	9205      	str	r2, [sp, #20]
 800758c:	f04b 0b04 	orr.w	fp, fp, #4
 8007590:	e739      	b.n	8007406 <_svfiprintf_r+0x92>
 8007592:	9b05      	ldr	r3, [sp, #20]
 8007594:	9905      	ldr	r1, [sp, #20]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2230      	movs	r2, #48	; 0x30
 800759a:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 800759e:	2278      	movs	r2, #120	; 0x78
 80075a0:	3104      	adds	r1, #4
 80075a2:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 80075a6:	4aaf      	ldr	r2, [pc, #700]	; (8007864 <_svfiprintf_r+0x4f0>)
 80075a8:	9105      	str	r1, [sp, #20]
 80075aa:	1c19      	adds	r1, r3, #0
 80075ac:	bf18      	it	ne
 80075ae:	2101      	movne	r1, #1
 80075b0:	920c      	str	r2, [sp, #48]	; 0x30
 80075b2:	f04b 0b02 	orr.w	fp, fp, #2
 80075b6:	2202      	movs	r2, #2
 80075b8:	e798      	b.n	80074ec <_svfiprintf_r+0x178>
 80075ba:	f01b 0f10 	tst.w	fp, #16
 80075be:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80075c2:	f040 82dd 	bne.w	8007b80 <_svfiprintf_r+0x80c>
 80075c6:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80075ca:	f000 82fb 	beq.w	8007bc4 <_svfiprintf_r+0x850>
 80075ce:	9a05      	ldr	r2, [sp, #20]
 80075d0:	9804      	ldr	r0, [sp, #16]
 80075d2:	6813      	ldr	r3, [r2, #0]
 80075d4:	3204      	adds	r2, #4
 80075d6:	9205      	str	r2, [sp, #20]
 80075d8:	8018      	strh	r0, [r3, #0]
 80075da:	e6ea      	b.n	80073b2 <_svfiprintf_r+0x3e>
 80075dc:	49a1      	ldr	r1, [pc, #644]	; (8007864 <_svfiprintf_r+0x4f0>)
 80075de:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80075e2:	910c      	str	r1, [sp, #48]	; 0x30
 80075e4:	f01b 0f10 	tst.w	fp, #16
 80075e8:	d103      	bne.n	80075f2 <_svfiprintf_r+0x27e>
 80075ea:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80075ee:	f040 82d3 	bne.w	8007b98 <_svfiprintf_r+0x824>
 80075f2:	9805      	ldr	r0, [sp, #20]
 80075f4:	6803      	ldr	r3, [r0, #0]
 80075f6:	3004      	adds	r0, #4
 80075f8:	9005      	str	r0, [sp, #20]
 80075fa:	1c19      	adds	r1, r3, #0
 80075fc:	bf18      	it	ne
 80075fe:	2101      	movne	r1, #1
 8007600:	ea1b 0f01 	tst.w	fp, r1
 8007604:	f000 8287 	beq.w	8007b16 <_svfiprintf_r+0x7a2>
 8007608:	2130      	movs	r1, #48	; 0x30
 800760a:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800760e:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 8007612:	f04b 0b02 	orr.w	fp, fp, #2
 8007616:	2101      	movs	r1, #1
 8007618:	2202      	movs	r2, #2
 800761a:	e767      	b.n	80074ec <_svfiprintf_r+0x178>
 800761c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8007620:	e6f1      	b.n	8007406 <_svfiprintf_r+0x92>
 8007622:	f01b 0f10 	tst.w	fp, #16
 8007626:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800762a:	f000 80a4 	beq.w	8007776 <_svfiprintf_r+0x402>
 800762e:	9805      	ldr	r0, [sp, #20]
 8007630:	6803      	ldr	r3, [r0, #0]
 8007632:	3004      	adds	r0, #4
 8007634:	9005      	str	r0, [sp, #20]
 8007636:	2b00      	cmp	r3, #0
 8007638:	f2c0 80a9 	blt.w	800778e <_svfiprintf_r+0x41a>
 800763c:	bf0c      	ite	eq
 800763e:	2100      	moveq	r1, #0
 8007640:	2101      	movne	r1, #1
 8007642:	2201      	movs	r2, #1
 8007644:	e755      	b.n	80074f2 <_svfiprintf_r+0x17e>
 8007646:	9b05      	ldr	r3, [sp, #20]
 8007648:	9905      	ldr	r1, [sp, #20]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2001      	movs	r0, #1
 800764e:	2200      	movs	r2, #0
 8007650:	3104      	adds	r1, #4
 8007652:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 8007656:	ab1e      	add	r3, sp, #120	; 0x78
 8007658:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 800765c:	9002      	str	r0, [sp, #8]
 800765e:	9105      	str	r1, [sp, #20]
 8007660:	9003      	str	r0, [sp, #12]
 8007662:	9309      	str	r3, [sp, #36]	; 0x24
 8007664:	2300      	movs	r3, #0
 8007666:	9308      	str	r3, [sp, #32]
 8007668:	f01b 0302 	ands.w	r3, fp, #2
 800766c:	930a      	str	r3, [sp, #40]	; 0x28
 800766e:	d002      	beq.n	8007676 <_svfiprintf_r+0x302>
 8007670:	9b02      	ldr	r3, [sp, #8]
 8007672:	3302      	adds	r3, #2
 8007674:	9302      	str	r3, [sp, #8]
 8007676:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800767a:	930b      	str	r3, [sp, #44]	; 0x2c
 800767c:	f040 80c1 	bne.w	8007802 <_svfiprintf_r+0x48e>
 8007680:	9b06      	ldr	r3, [sp, #24]
 8007682:	9802      	ldr	r0, [sp, #8]
 8007684:	1a1d      	subs	r5, r3, r0
 8007686:	2d00      	cmp	r5, #0
 8007688:	f340 80bb 	ble.w	8007802 <_svfiprintf_r+0x48e>
 800768c:	2d10      	cmp	r5, #16
 800768e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007690:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007692:	4e75      	ldr	r6, [pc, #468]	; (8007868 <_svfiprintf_r+0x4f4>)
 8007694:	dd1f      	ble.n	80076d6 <_svfiprintf_r+0x362>
 8007696:	4621      	mov	r1, r4
 8007698:	f04f 0910 	mov.w	r9, #16
 800769c:	9c07      	ldr	r4, [sp, #28]
 800769e:	e002      	b.n	80076a6 <_svfiprintf_r+0x332>
 80076a0:	3d10      	subs	r5, #16
 80076a2:	2d10      	cmp	r5, #16
 80076a4:	dd16      	ble.n	80076d4 <_svfiprintf_r+0x360>
 80076a6:	3301      	adds	r3, #1
 80076a8:	3210      	adds	r2, #16
 80076aa:	e881 0240 	stmia.w	r1, {r6, r9}
 80076ae:	3108      	adds	r1, #8
 80076b0:	2b07      	cmp	r3, #7
 80076b2:	922a      	str	r2, [sp, #168]	; 0xa8
 80076b4:	9329      	str	r3, [sp, #164]	; 0xa4
 80076b6:	ddf3      	ble.n	80076a0 <_svfiprintf_r+0x32c>
 80076b8:	4620      	mov	r0, r4
 80076ba:	4651      	mov	r1, sl
 80076bc:	4642      	mov	r2, r8
 80076be:	f7ff fdd9 	bl	8007274 <__ssprint_r>
 80076c2:	2800      	cmp	r0, #0
 80076c4:	f040 8162 	bne.w	800798c <_svfiprintf_r+0x618>
 80076c8:	3d10      	subs	r5, #16
 80076ca:	2d10      	cmp	r5, #16
 80076cc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80076ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80076d0:	a90e      	add	r1, sp, #56	; 0x38
 80076d2:	dce8      	bgt.n	80076a6 <_svfiprintf_r+0x332>
 80076d4:	460c      	mov	r4, r1
 80076d6:	3301      	adds	r3, #1
 80076d8:	1952      	adds	r2, r2, r5
 80076da:	2b07      	cmp	r3, #7
 80076dc:	6026      	str	r6, [r4, #0]
 80076de:	6065      	str	r5, [r4, #4]
 80076e0:	922a      	str	r2, [sp, #168]	; 0xa8
 80076e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80076e4:	f300 8219 	bgt.w	8007b1a <_svfiprintf_r+0x7a6>
 80076e8:	3408      	adds	r4, #8
 80076ea:	e08c      	b.n	8007806 <_svfiprintf_r+0x492>
 80076ec:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80076f0:	4b5e      	ldr	r3, [pc, #376]	; (800786c <_svfiprintf_r+0x4f8>)
 80076f2:	930c      	str	r3, [sp, #48]	; 0x30
 80076f4:	e776      	b.n	80075e4 <_svfiprintf_r+0x270>
 80076f6:	f04b 0b01 	orr.w	fp, fp, #1
 80076fa:	e684      	b.n	8007406 <_svfiprintf_r+0x92>
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	bf08      	it	eq
 8007700:	2320      	moveq	r3, #32
 8007702:	e680      	b.n	8007406 <_svfiprintf_r+0x92>
 8007704:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007708:	2a00      	cmp	r2, #0
 800770a:	f000 8138 	beq.w	800797e <_svfiprintf_r+0x60a>
 800770e:	2301      	movs	r3, #1
 8007710:	9302      	str	r3, [sp, #8]
 8007712:	2300      	movs	r3, #0
 8007714:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007718:	2301      	movs	r3, #1
 800771a:	9303      	str	r3, [sp, #12]
 800771c:	ab1e      	add	r3, sp, #120	; 0x78
 800771e:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8007722:	9309      	str	r3, [sp, #36]	; 0x24
 8007724:	e79e      	b.n	8007664 <_svfiprintf_r+0x2f0>
 8007726:	9b05      	ldr	r3, [sp, #20]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	9309      	str	r3, [sp, #36]	; 0x24
 800772c:	9b05      	ldr	r3, [sp, #20]
 800772e:	3304      	adds	r3, #4
 8007730:	9305      	str	r3, [sp, #20]
 8007732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007734:	2600      	movs	r6, #0
 8007736:	f88d 60af 	strb.w	r6, [sp, #175]	; 0xaf
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 8259 	beq.w	8007bf2 <_svfiprintf_r+0x87e>
 8007740:	2d00      	cmp	r5, #0
 8007742:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007744:	f2c0 822d 	blt.w	8007ba2 <_svfiprintf_r+0x82e>
 8007748:	4631      	mov	r1, r6
 800774a:	462a      	mov	r2, r5
 800774c:	f7fe ff50 	bl	80065f0 <memchr>
 8007750:	2800      	cmp	r0, #0
 8007752:	f000 8258 	beq.w	8007c06 <_svfiprintf_r+0x892>
 8007756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007758:	9608      	str	r6, [sp, #32]
 800775a:	1ac0      	subs	r0, r0, r3
 800775c:	42a8      	cmp	r0, r5
 800775e:	9003      	str	r0, [sp, #12]
 8007760:	bfc8      	it	gt
 8007762:	9503      	strgt	r5, [sp, #12]
 8007764:	e6ea      	b.n	800753c <_svfiprintf_r+0x1c8>
 8007766:	f04b 0b10 	orr.w	fp, fp, #16
 800776a:	f01b 0f10 	tst.w	fp, #16
 800776e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007772:	f47f af5c 	bne.w	800762e <_svfiprintf_r+0x2ba>
 8007776:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800777a:	f000 8208 	beq.w	8007b8e <_svfiprintf_r+0x81a>
 800777e:	9905      	ldr	r1, [sp, #20]
 8007780:	f9b1 3000 	ldrsh.w	r3, [r1]
 8007784:	3104      	adds	r1, #4
 8007786:	2b00      	cmp	r3, #0
 8007788:	9105      	str	r1, [sp, #20]
 800778a:	f6bf af57 	bge.w	800763c <_svfiprintf_r+0x2c8>
 800778e:	425b      	negs	r3, r3
 8007790:	222d      	movs	r2, #45	; 0x2d
 8007792:	1c19      	adds	r1, r3, #0
 8007794:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8007798:	bf18      	it	ne
 800779a:	2101      	movne	r1, #1
 800779c:	2201      	movs	r2, #1
 800779e:	e6a8      	b.n	80074f2 <_svfiprintf_r+0x17e>
 80077a0:	4638      	mov	r0, r7
 80077a2:	2100      	movs	r1, #0
 80077a4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80077a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077ac:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80077b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80077b4:	2e09      	cmp	r6, #9
 80077b6:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 80077ba:	4607      	mov	r7, r0
 80077bc:	d9f2      	bls.n	80077a4 <_svfiprintf_r+0x430>
 80077be:	9106      	str	r1, [sp, #24]
 80077c0:	e623      	b.n	800740a <_svfiprintf_r+0x96>
 80077c2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 80077c6:	e61e      	b.n	8007406 <_svfiprintf_r+0x92>
 80077c8:	232b      	movs	r3, #43	; 0x2b
 80077ca:	e61c      	b.n	8007406 <_svfiprintf_r+0x92>
 80077cc:	f817 2b01 	ldrb.w	r2, [r7], #1
 80077d0:	2a2a      	cmp	r2, #42	; 0x2a
 80077d2:	f000 81ae 	beq.w	8007b32 <_svfiprintf_r+0x7be>
 80077d6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80077da:	2500      	movs	r5, #0
 80077dc:	2909      	cmp	r1, #9
 80077de:	f63f ae14 	bhi.w	800740a <_svfiprintf_r+0x96>
 80077e2:	4638      	mov	r0, r7
 80077e4:	2500      	movs	r5, #0
 80077e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077ea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80077ee:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 80077f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80077f6:	2909      	cmp	r1, #9
 80077f8:	4607      	mov	r7, r0
 80077fa:	d9f4      	bls.n	80077e6 <_svfiprintf_r+0x472>
 80077fc:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8007800:	e603      	b.n	800740a <_svfiprintf_r+0x96>
 8007802:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007804:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007806:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
 800780a:	b161      	cbz	r1, 8007826 <_svfiprintf_r+0x4b2>
 800780c:	3301      	adds	r3, #1
 800780e:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
 8007812:	3201      	adds	r2, #1
 8007814:	6021      	str	r1, [r4, #0]
 8007816:	2101      	movs	r1, #1
 8007818:	2b07      	cmp	r3, #7
 800781a:	6061      	str	r1, [r4, #4]
 800781c:	922a      	str	r2, [sp, #168]	; 0xa8
 800781e:	9329      	str	r3, [sp, #164]	; 0xa4
 8007820:	f300 811e 	bgt.w	8007a60 <_svfiprintf_r+0x6ec>
 8007824:	3408      	adds	r4, #8
 8007826:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007828:	b159      	cbz	r1, 8007842 <_svfiprintf_r+0x4ce>
 800782a:	3301      	adds	r3, #1
 800782c:	a92b      	add	r1, sp, #172	; 0xac
 800782e:	3202      	adds	r2, #2
 8007830:	6021      	str	r1, [r4, #0]
 8007832:	2102      	movs	r1, #2
 8007834:	2b07      	cmp	r3, #7
 8007836:	6061      	str	r1, [r4, #4]
 8007838:	922a      	str	r2, [sp, #168]	; 0xa8
 800783a:	9329      	str	r3, [sp, #164]	; 0xa4
 800783c:	f300 811b 	bgt.w	8007a76 <_svfiprintf_r+0x702>
 8007840:	3408      	adds	r4, #8
 8007842:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007844:	2880      	cmp	r0, #128	; 0x80
 8007846:	f000 80ae 	beq.w	80079a6 <_svfiprintf_r+0x632>
 800784a:	9808      	ldr	r0, [sp, #32]
 800784c:	9903      	ldr	r1, [sp, #12]
 800784e:	1a45      	subs	r5, r0, r1
 8007850:	2d00      	cmp	r5, #0
 8007852:	dd33      	ble.n	80078bc <_svfiprintf_r+0x548>
 8007854:	2d10      	cmp	r5, #16
 8007856:	4e06      	ldr	r6, [pc, #24]	; (8007870 <_svfiprintf_r+0x4fc>)
 8007858:	dd26      	ble.n	80078a8 <_svfiprintf_r+0x534>
 800785a:	4621      	mov	r1, r4
 800785c:	f04f 0910 	mov.w	r9, #16
 8007860:	9c07      	ldr	r4, [sp, #28]
 8007862:	e00a      	b.n	800787a <_svfiprintf_r+0x506>
 8007864:	080090ac 	.word	0x080090ac
 8007868:	08008f40 	.word	0x08008f40
 800786c:	08009098 	.word	0x08009098
 8007870:	08008f50 	.word	0x08008f50
 8007874:	3d10      	subs	r5, #16
 8007876:	2d10      	cmp	r5, #16
 8007878:	dd15      	ble.n	80078a6 <_svfiprintf_r+0x532>
 800787a:	3301      	adds	r3, #1
 800787c:	3210      	adds	r2, #16
 800787e:	e881 0240 	stmia.w	r1, {r6, r9}
 8007882:	3108      	adds	r1, #8
 8007884:	2b07      	cmp	r3, #7
 8007886:	922a      	str	r2, [sp, #168]	; 0xa8
 8007888:	9329      	str	r3, [sp, #164]	; 0xa4
 800788a:	ddf3      	ble.n	8007874 <_svfiprintf_r+0x500>
 800788c:	4620      	mov	r0, r4
 800788e:	4651      	mov	r1, sl
 8007890:	4642      	mov	r2, r8
 8007892:	f7ff fcef 	bl	8007274 <__ssprint_r>
 8007896:	2800      	cmp	r0, #0
 8007898:	d178      	bne.n	800798c <_svfiprintf_r+0x618>
 800789a:	3d10      	subs	r5, #16
 800789c:	2d10      	cmp	r5, #16
 800789e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80078a0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80078a2:	a90e      	add	r1, sp, #56	; 0x38
 80078a4:	dce9      	bgt.n	800787a <_svfiprintf_r+0x506>
 80078a6:	460c      	mov	r4, r1
 80078a8:	3301      	adds	r3, #1
 80078aa:	1952      	adds	r2, r2, r5
 80078ac:	2b07      	cmp	r3, #7
 80078ae:	6026      	str	r6, [r4, #0]
 80078b0:	6065      	str	r5, [r4, #4]
 80078b2:	922a      	str	r2, [sp, #168]	; 0xa8
 80078b4:	9329      	str	r3, [sp, #164]	; 0xa4
 80078b6:	f300 80c8 	bgt.w	8007a4a <_svfiprintf_r+0x6d6>
 80078ba:	3408      	adds	r4, #8
 80078bc:	9903      	ldr	r1, [sp, #12]
 80078be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078c0:	3301      	adds	r3, #1
 80078c2:	1852      	adds	r2, r2, r1
 80078c4:	2b07      	cmp	r3, #7
 80078c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80078ca:	922a      	str	r2, [sp, #168]	; 0xa8
 80078cc:	9329      	str	r3, [sp, #164]	; 0xa4
 80078ce:	bfd8      	it	le
 80078d0:	f104 0108 	addle.w	r1, r4, #8
 80078d4:	f300 809a 	bgt.w	8007a0c <_svfiprintf_r+0x698>
 80078d8:	f01b 0f04 	tst.w	fp, #4
 80078dc:	d02e      	beq.n	800793c <_svfiprintf_r+0x5c8>
 80078de:	9b06      	ldr	r3, [sp, #24]
 80078e0:	9802      	ldr	r0, [sp, #8]
 80078e2:	1a1d      	subs	r5, r3, r0
 80078e4:	2d00      	cmp	r5, #0
 80078e6:	dd29      	ble.n	800793c <_svfiprintf_r+0x5c8>
 80078e8:	2d10      	cmp	r5, #16
 80078ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80078ec:	4e97      	ldr	r6, [pc, #604]	; (8007b4c <_svfiprintf_r+0x7d8>)
 80078ee:	dd1c      	ble.n	800792a <_svfiprintf_r+0x5b6>
 80078f0:	2410      	movs	r4, #16
 80078f2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80078f6:	e002      	b.n	80078fe <_svfiprintf_r+0x58a>
 80078f8:	3d10      	subs	r5, #16
 80078fa:	2d10      	cmp	r5, #16
 80078fc:	dd15      	ble.n	800792a <_svfiprintf_r+0x5b6>
 80078fe:	3301      	adds	r3, #1
 8007900:	3210      	adds	r2, #16
 8007902:	600e      	str	r6, [r1, #0]
 8007904:	604c      	str	r4, [r1, #4]
 8007906:	3108      	adds	r1, #8
 8007908:	2b07      	cmp	r3, #7
 800790a:	922a      	str	r2, [sp, #168]	; 0xa8
 800790c:	9329      	str	r3, [sp, #164]	; 0xa4
 800790e:	ddf3      	ble.n	80078f8 <_svfiprintf_r+0x584>
 8007910:	4648      	mov	r0, r9
 8007912:	4651      	mov	r1, sl
 8007914:	4642      	mov	r2, r8
 8007916:	f7ff fcad 	bl	8007274 <__ssprint_r>
 800791a:	2800      	cmp	r0, #0
 800791c:	d136      	bne.n	800798c <_svfiprintf_r+0x618>
 800791e:	3d10      	subs	r5, #16
 8007920:	2d10      	cmp	r5, #16
 8007922:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007924:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007926:	a90e      	add	r1, sp, #56	; 0x38
 8007928:	dce9      	bgt.n	80078fe <_svfiprintf_r+0x58a>
 800792a:	3301      	adds	r3, #1
 800792c:	18aa      	adds	r2, r5, r2
 800792e:	2b07      	cmp	r3, #7
 8007930:	600e      	str	r6, [r1, #0]
 8007932:	604d      	str	r5, [r1, #4]
 8007934:	922a      	str	r2, [sp, #168]	; 0xa8
 8007936:	9329      	str	r3, [sp, #164]	; 0xa4
 8007938:	f300 810c 	bgt.w	8007b54 <_svfiprintf_r+0x7e0>
 800793c:	9b04      	ldr	r3, [sp, #16]
 800793e:	9902      	ldr	r1, [sp, #8]
 8007940:	9806      	ldr	r0, [sp, #24]
 8007942:	4281      	cmp	r1, r0
 8007944:	bfac      	ite	ge
 8007946:	185b      	addge	r3, r3, r1
 8007948:	181b      	addlt	r3, r3, r0
 800794a:	9304      	str	r3, [sp, #16]
 800794c:	2a00      	cmp	r2, #0
 800794e:	d167      	bne.n	8007a20 <_svfiprintf_r+0x6ac>
 8007950:	2300      	movs	r3, #0
 8007952:	9329      	str	r3, [sp, #164]	; 0xa4
 8007954:	ac0e      	add	r4, sp, #56	; 0x38
 8007956:	e52c      	b.n	80073b2 <_svfiprintf_r+0x3e>
 8007958:	2a00      	cmp	r2, #0
 800795a:	d169      	bne.n	8007a30 <_svfiprintf_r+0x6bc>
 800795c:	f01b 0f01 	tst.w	fp, #1
 8007960:	bf04      	itt	eq
 8007962:	9203      	streq	r2, [sp, #12]
 8007964:	f8cd 8024 	streq.w	r8, [sp, #36]	; 0x24
 8007968:	f43f ade7 	beq.w	800753a <_svfiprintf_r+0x1c6>
 800796c:	2330      	movs	r3, #48	; 0x30
 800796e:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 8007972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007974:	9303      	str	r3, [sp, #12]
 8007976:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 800797a:	9309      	str	r3, [sp, #36]	; 0x24
 800797c:	e5dd      	b.n	800753a <_svfiprintf_r+0x1c6>
 800797e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007980:	b123      	cbz	r3, 800798c <_svfiprintf_r+0x618>
 8007982:	9807      	ldr	r0, [sp, #28]
 8007984:	4651      	mov	r1, sl
 8007986:	aa28      	add	r2, sp, #160	; 0xa0
 8007988:	f7ff fc74 	bl	8007274 <__ssprint_r>
 800798c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007990:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007994:	9b04      	ldr	r3, [sp, #16]
 8007996:	bf18      	it	ne
 8007998:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800799c:	9304      	str	r3, [sp, #16]
 800799e:	9804      	ldr	r0, [sp, #16]
 80079a0:	b02d      	add	sp, #180	; 0xb4
 80079a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a6:	9906      	ldr	r1, [sp, #24]
 80079a8:	9802      	ldr	r0, [sp, #8]
 80079aa:	1a0d      	subs	r5, r1, r0
 80079ac:	2d00      	cmp	r5, #0
 80079ae:	f77f af4c 	ble.w	800784a <_svfiprintf_r+0x4d6>
 80079b2:	2d10      	cmp	r5, #16
 80079b4:	4e66      	ldr	r6, [pc, #408]	; (8007b50 <_svfiprintf_r+0x7dc>)
 80079b6:	dd1e      	ble.n	80079f6 <_svfiprintf_r+0x682>
 80079b8:	4621      	mov	r1, r4
 80079ba:	f04f 0910 	mov.w	r9, #16
 80079be:	9c07      	ldr	r4, [sp, #28]
 80079c0:	e002      	b.n	80079c8 <_svfiprintf_r+0x654>
 80079c2:	3d10      	subs	r5, #16
 80079c4:	2d10      	cmp	r5, #16
 80079c6:	dd15      	ble.n	80079f4 <_svfiprintf_r+0x680>
 80079c8:	3301      	adds	r3, #1
 80079ca:	3210      	adds	r2, #16
 80079cc:	e881 0240 	stmia.w	r1, {r6, r9}
 80079d0:	3108      	adds	r1, #8
 80079d2:	2b07      	cmp	r3, #7
 80079d4:	922a      	str	r2, [sp, #168]	; 0xa8
 80079d6:	9329      	str	r3, [sp, #164]	; 0xa4
 80079d8:	ddf3      	ble.n	80079c2 <_svfiprintf_r+0x64e>
 80079da:	4620      	mov	r0, r4
 80079dc:	4651      	mov	r1, sl
 80079de:	4642      	mov	r2, r8
 80079e0:	f7ff fc48 	bl	8007274 <__ssprint_r>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d1d1      	bne.n	800798c <_svfiprintf_r+0x618>
 80079e8:	3d10      	subs	r5, #16
 80079ea:	2d10      	cmp	r5, #16
 80079ec:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80079ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80079f0:	a90e      	add	r1, sp, #56	; 0x38
 80079f2:	dce9      	bgt.n	80079c8 <_svfiprintf_r+0x654>
 80079f4:	460c      	mov	r4, r1
 80079f6:	3301      	adds	r3, #1
 80079f8:	1952      	adds	r2, r2, r5
 80079fa:	2b07      	cmp	r3, #7
 80079fc:	6026      	str	r6, [r4, #0]
 80079fe:	6065      	str	r5, [r4, #4]
 8007a00:	922a      	str	r2, [sp, #168]	; 0xa8
 8007a02:	9329      	str	r3, [sp, #164]	; 0xa4
 8007a04:	f300 80d2 	bgt.w	8007bac <_svfiprintf_r+0x838>
 8007a08:	3408      	adds	r4, #8
 8007a0a:	e71e      	b.n	800784a <_svfiprintf_r+0x4d6>
 8007a0c:	9807      	ldr	r0, [sp, #28]
 8007a0e:	4651      	mov	r1, sl
 8007a10:	4642      	mov	r2, r8
 8007a12:	f7ff fc2f 	bl	8007274 <__ssprint_r>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d1b8      	bne.n	800798c <_svfiprintf_r+0x618>
 8007a1a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007a1c:	a90e      	add	r1, sp, #56	; 0x38
 8007a1e:	e75b      	b.n	80078d8 <_svfiprintf_r+0x564>
 8007a20:	9807      	ldr	r0, [sp, #28]
 8007a22:	4651      	mov	r1, sl
 8007a24:	4642      	mov	r2, r8
 8007a26:	f7ff fc25 	bl	8007274 <__ssprint_r>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	d090      	beq.n	8007950 <_svfiprintf_r+0x5dc>
 8007a2e:	e7ad      	b.n	800798c <_svfiprintf_r+0x618>
 8007a30:	9103      	str	r1, [sp, #12]
 8007a32:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8007a36:	e580      	b.n	800753a <_svfiprintf_r+0x1c6>
 8007a38:	9807      	ldr	r0, [sp, #28]
 8007a3a:	4651      	mov	r1, sl
 8007a3c:	4642      	mov	r2, r8
 8007a3e:	f7ff fc19 	bl	8007274 <__ssprint_r>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d1a2      	bne.n	800798c <_svfiprintf_r+0x618>
 8007a46:	ac0e      	add	r4, sp, #56	; 0x38
 8007a48:	e4cd      	b.n	80073e6 <_svfiprintf_r+0x72>
 8007a4a:	9807      	ldr	r0, [sp, #28]
 8007a4c:	4651      	mov	r1, sl
 8007a4e:	4642      	mov	r2, r8
 8007a50:	f7ff fc10 	bl	8007274 <__ssprint_r>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d199      	bne.n	800798c <_svfiprintf_r+0x618>
 8007a58:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007a5a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007a5c:	ac0e      	add	r4, sp, #56	; 0x38
 8007a5e:	e72d      	b.n	80078bc <_svfiprintf_r+0x548>
 8007a60:	9807      	ldr	r0, [sp, #28]
 8007a62:	4651      	mov	r1, sl
 8007a64:	4642      	mov	r2, r8
 8007a66:	f7ff fc05 	bl	8007274 <__ssprint_r>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	d18e      	bne.n	800798c <_svfiprintf_r+0x618>
 8007a6e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007a70:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007a72:	ac0e      	add	r4, sp, #56	; 0x38
 8007a74:	e6d7      	b.n	8007826 <_svfiprintf_r+0x4b2>
 8007a76:	9807      	ldr	r0, [sp, #28]
 8007a78:	4651      	mov	r1, sl
 8007a7a:	4642      	mov	r2, r8
 8007a7c:	f7ff fbfa 	bl	8007274 <__ssprint_r>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d183      	bne.n	800798c <_svfiprintf_r+0x618>
 8007a84:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007a86:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007a88:	ac0e      	add	r4, sp, #56	; 0x38
 8007a8a:	e6da      	b.n	8007842 <_svfiprintf_r+0x4ce>
 8007a8c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007a8e:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8007a92:	f003 000f 	and.w	r0, r3, #15
 8007a96:	4611      	mov	r1, r2
 8007a98:	5c30      	ldrb	r0, [r6, r0]
 8007a9a:	3a01      	subs	r2, #1
 8007a9c:	091b      	lsrs	r3, r3, #4
 8007a9e:	7008      	strb	r0, [r1, #0]
 8007aa0:	d1f7      	bne.n	8007a92 <_svfiprintf_r+0x71e>
 8007aa2:	ebc1 0308 	rsb	r3, r1, r8
 8007aa6:	9109      	str	r1, [sp, #36]	; 0x24
 8007aa8:	9303      	str	r3, [sp, #12]
 8007aaa:	e546      	b.n	800753a <_svfiprintf_r+0x1c6>
 8007aac:	2b09      	cmp	r3, #9
 8007aae:	bf82      	ittt	hi
 8007ab0:	f64c 46cd 	movwhi	r6, #52429	; 0xcccd
 8007ab4:	f10d 019f 	addhi.w	r1, sp, #159	; 0x9f
 8007ab8:	f6cc 46cc 	movthi	r6, #52428	; 0xcccc
 8007abc:	d801      	bhi.n	8007ac2 <_svfiprintf_r+0x74e>
 8007abe:	3330      	adds	r3, #48	; 0x30
 8007ac0:	e755      	b.n	800796e <_svfiprintf_r+0x5fa>
 8007ac2:	fba6 0203 	umull	r0, r2, r6, r3
 8007ac6:	08d2      	lsrs	r2, r2, #3
 8007ac8:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8007acc:	eba3 0c4c 	sub.w	ip, r3, ip, lsl #1
 8007ad0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8007ad4:	4608      	mov	r0, r1
 8007ad6:	f881 c000 	strb.w	ip, [r1]
 8007ada:	4613      	mov	r3, r2
 8007adc:	3901      	subs	r1, #1
 8007ade:	2a00      	cmp	r2, #0
 8007ae0:	d1ef      	bne.n	8007ac2 <_svfiprintf_r+0x74e>
 8007ae2:	9009      	str	r0, [sp, #36]	; 0x24
 8007ae4:	e526      	b.n	8007534 <_svfiprintf_r+0x1c0>
 8007ae6:	9905      	ldr	r1, [sp, #20]
 8007ae8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007aec:	bf14      	ite	ne
 8007aee:	880b      	ldrhne	r3, [r1, #0]
 8007af0:	680b      	ldreq	r3, [r1, #0]
 8007af2:	2201      	movs	r2, #1
 8007af4:	9805      	ldr	r0, [sp, #20]
 8007af6:	1c19      	adds	r1, r3, #0
 8007af8:	bf18      	it	ne
 8007afa:	2101      	movne	r1, #1
 8007afc:	3004      	adds	r0, #4
 8007afe:	9005      	str	r0, [sp, #20]
 8007b00:	e4f4      	b.n	80074ec <_svfiprintf_r+0x178>
 8007b02:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8007b06:	bf0b      	itete	eq
 8007b08:	9a05      	ldreq	r2, [sp, #20]
 8007b0a:	9905      	ldrne	r1, [sp, #20]
 8007b0c:	6813      	ldreq	r3, [r2, #0]
 8007b0e:	880b      	ldrhne	r3, [r1, #0]
 8007b10:	bf08      	it	eq
 8007b12:	460a      	moveq	r2, r1
 8007b14:	e7ee      	b.n	8007af4 <_svfiprintf_r+0x780>
 8007b16:	2202      	movs	r2, #2
 8007b18:	e4e8      	b.n	80074ec <_svfiprintf_r+0x178>
 8007b1a:	9807      	ldr	r0, [sp, #28]
 8007b1c:	4651      	mov	r1, sl
 8007b1e:	4642      	mov	r2, r8
 8007b20:	f7ff fba8 	bl	8007274 <__ssprint_r>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	f47f af31 	bne.w	800798c <_svfiprintf_r+0x618>
 8007b2a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007b2c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007b2e:	ac0e      	add	r4, sp, #56	; 0x38
 8007b30:	e669      	b.n	8007806 <_svfiprintf_r+0x492>
 8007b32:	9a05      	ldr	r2, [sp, #20]
 8007b34:	6815      	ldr	r5, [r2, #0]
 8007b36:	3204      	adds	r2, #4
 8007b38:	2d00      	cmp	r5, #0
 8007b3a:	bfbc      	itt	lt
 8007b3c:	9205      	strlt	r2, [sp, #20]
 8007b3e:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8007b42:	f6ff ac60 	blt.w	8007406 <_svfiprintf_r+0x92>
 8007b46:	9205      	str	r2, [sp, #20]
 8007b48:	e45d      	b.n	8007406 <_svfiprintf_r+0x92>
 8007b4a:	bf00      	nop
 8007b4c:	08008f40 	.word	0x08008f40
 8007b50:	08008f50 	.word	0x08008f50
 8007b54:	9807      	ldr	r0, [sp, #28]
 8007b56:	4651      	mov	r1, sl
 8007b58:	4642      	mov	r2, r8
 8007b5a:	f7ff fb8b 	bl	8007274 <__ssprint_r>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	f47f af14 	bne.w	800798c <_svfiprintf_r+0x618>
 8007b64:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007b66:	e6e9      	b.n	800793c <_svfiprintf_r+0x5c8>
 8007b68:	2930      	cmp	r1, #48	; 0x30
 8007b6a:	d004      	beq.n	8007b76 <_svfiprintf_r+0x802>
 8007b6c:	1e93      	subs	r3, r2, #2
 8007b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b70:	2330      	movs	r3, #48	; 0x30
 8007b72:	f802 3c02 	strb.w	r3, [r2, #-2]
 8007b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b78:	ebc3 0308 	rsb	r3, r3, r8
 8007b7c:	9303      	str	r3, [sp, #12]
 8007b7e:	e4dc      	b.n	800753a <_svfiprintf_r+0x1c6>
 8007b80:	9805      	ldr	r0, [sp, #20]
 8007b82:	9904      	ldr	r1, [sp, #16]
 8007b84:	6803      	ldr	r3, [r0, #0]
 8007b86:	3004      	adds	r0, #4
 8007b88:	9005      	str	r0, [sp, #20]
 8007b8a:	6019      	str	r1, [r3, #0]
 8007b8c:	e411      	b.n	80073b2 <_svfiprintf_r+0x3e>
 8007b8e:	9a05      	ldr	r2, [sp, #20]
 8007b90:	6813      	ldr	r3, [r2, #0]
 8007b92:	3204      	adds	r2, #4
 8007b94:	9205      	str	r2, [sp, #20]
 8007b96:	e54e      	b.n	8007636 <_svfiprintf_r+0x2c2>
 8007b98:	9905      	ldr	r1, [sp, #20]
 8007b9a:	880b      	ldrh	r3, [r1, #0]
 8007b9c:	3104      	adds	r1, #4
 8007b9e:	9105      	str	r1, [sp, #20]
 8007ba0:	e52b      	b.n	80075fa <_svfiprintf_r+0x286>
 8007ba2:	f7ff fb37 	bl	8007214 <strlen>
 8007ba6:	9608      	str	r6, [sp, #32]
 8007ba8:	9003      	str	r0, [sp, #12]
 8007baa:	e4c7      	b.n	800753c <_svfiprintf_r+0x1c8>
 8007bac:	9807      	ldr	r0, [sp, #28]
 8007bae:	4651      	mov	r1, sl
 8007bb0:	4642      	mov	r2, r8
 8007bb2:	f7ff fb5f 	bl	8007274 <__ssprint_r>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	f47f aee8 	bne.w	800798c <_svfiprintf_r+0x618>
 8007bbc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007bbe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007bc0:	ac0e      	add	r4, sp, #56	; 0x38
 8007bc2:	e642      	b.n	800784a <_svfiprintf_r+0x4d6>
 8007bc4:	9905      	ldr	r1, [sp, #20]
 8007bc6:	9a04      	ldr	r2, [sp, #16]
 8007bc8:	680b      	ldr	r3, [r1, #0]
 8007bca:	3104      	adds	r1, #4
 8007bcc:	9105      	str	r1, [sp, #20]
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	f7ff bbef 	b.w	80073b2 <_svfiprintf_r+0x3e>
 8007bd4:	2140      	movs	r1, #64	; 0x40
 8007bd6:	9200      	str	r2, [sp, #0]
 8007bd8:	f7fe fa56 	bl	8006088 <_malloc_r>
 8007bdc:	9a00      	ldr	r2, [sp, #0]
 8007bde:	f8ca 0000 	str.w	r0, [sl]
 8007be2:	f8ca 0010 	str.w	r0, [sl, #16]
 8007be6:	b188      	cbz	r0, 8007c0c <_svfiprintf_r+0x898>
 8007be8:	2340      	movs	r3, #64	; 0x40
 8007bea:	f8ca 3014 	str.w	r3, [sl, #20]
 8007bee:	f7ff bbcf 	b.w	8007390 <_svfiprintf_r+0x1c>
 8007bf2:	2d06      	cmp	r5, #6
 8007bf4:	bf28      	it	cs
 8007bf6:	2506      	movcs	r5, #6
 8007bf8:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8007bfc:	9302      	str	r3, [sp, #8]
 8007bfe:	4b07      	ldr	r3, [pc, #28]	; (8007c1c <_svfiprintf_r+0x8a8>)
 8007c00:	9503      	str	r5, [sp, #12]
 8007c02:	9309      	str	r3, [sp, #36]	; 0x24
 8007c04:	e52e      	b.n	8007664 <_svfiprintf_r+0x2f0>
 8007c06:	9503      	str	r5, [sp, #12]
 8007c08:	9008      	str	r0, [sp, #32]
 8007c0a:	e497      	b.n	800753c <_svfiprintf_r+0x1c8>
 8007c0c:	9807      	ldr	r0, [sp, #28]
 8007c0e:	230c      	movs	r3, #12
 8007c10:	6003      	str	r3, [r0, #0]
 8007c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c16:	9304      	str	r3, [sp, #16]
 8007c18:	e6c1      	b.n	800799e <_svfiprintf_r+0x62a>
 8007c1a:	bf00      	nop
 8007c1c:	080090c0 	.word	0x080090c0

08007c20 <_calloc_r>:
 8007c20:	b510      	push	{r4, lr}
 8007c22:	fb01 f102 	mul.w	r1, r1, r2
 8007c26:	f7fe fa2f 	bl	8006088 <_malloc_r>
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	b300      	cbz	r0, 8007c70 <_calloc_r+0x50>
 8007c2e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007c32:	f022 0203 	bic.w	r2, r2, #3
 8007c36:	3a04      	subs	r2, #4
 8007c38:	2a24      	cmp	r2, #36	; 0x24
 8007c3a:	d81b      	bhi.n	8007c74 <_calloc_r+0x54>
 8007c3c:	2a13      	cmp	r2, #19
 8007c3e:	bf98      	it	ls
 8007c40:	4602      	movls	r2, r0
 8007c42:	d911      	bls.n	8007c68 <_calloc_r+0x48>
 8007c44:	2300      	movs	r3, #0
 8007c46:	2a1b      	cmp	r2, #27
 8007c48:	6003      	str	r3, [r0, #0]
 8007c4a:	6043      	str	r3, [r0, #4]
 8007c4c:	bf98      	it	ls
 8007c4e:	f100 0208 	addls.w	r2, r0, #8
 8007c52:	d909      	bls.n	8007c68 <_calloc_r+0x48>
 8007c54:	2a24      	cmp	r2, #36	; 0x24
 8007c56:	6083      	str	r3, [r0, #8]
 8007c58:	60c3      	str	r3, [r0, #12]
 8007c5a:	bf11      	iteee	ne
 8007c5c:	f100 0210 	addne.w	r2, r0, #16
 8007c60:	6103      	streq	r3, [r0, #16]
 8007c62:	6143      	streq	r3, [r0, #20]
 8007c64:	f100 0218 	addeq.w	r2, r0, #24
 8007c68:	2300      	movs	r3, #0
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	6053      	str	r3, [r2, #4]
 8007c6e:	6093      	str	r3, [r2, #8]
 8007c70:	4620      	mov	r0, r4
 8007c72:	bd10      	pop	{r4, pc}
 8007c74:	2100      	movs	r1, #0
 8007c76:	f000 f85b 	bl	8007d30 <memset>
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	bd10      	pop	{r4, pc}
 8007c7e:	bf00      	nop

08007c80 <memmove>:
 8007c80:	4288      	cmp	r0, r1
 8007c82:	b4f0      	push	{r4, r5, r6, r7}
 8007c84:	d912      	bls.n	8007cac <memmove+0x2c>
 8007c86:	188d      	adds	r5, r1, r2
 8007c88:	42a8      	cmp	r0, r5
 8007c8a:	d20f      	bcs.n	8007cac <memmove+0x2c>
 8007c8c:	b162      	cbz	r2, 8007ca8 <memmove+0x28>
 8007c8e:	4251      	negs	r1, r2
 8007c90:	4613      	mov	r3, r2
 8007c92:	1882      	adds	r2, r0, r2
 8007c94:	186d      	adds	r5, r5, r1
 8007c96:	1852      	adds	r2, r2, r1
 8007c98:	18ec      	adds	r4, r5, r3
 8007c9a:	18d1      	adds	r1, r2, r3
 8007c9c:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	f801 4c01 	strb.w	r4, [r1, #-1]
 8007ca6:	d1f7      	bne.n	8007c98 <memmove+0x18>
 8007ca8:	bcf0      	pop	{r4, r5, r6, r7}
 8007caa:	4770      	bx	lr
 8007cac:	2a0f      	cmp	r2, #15
 8007cae:	bf98      	it	ls
 8007cb0:	4603      	movls	r3, r0
 8007cb2:	d931      	bls.n	8007d18 <memmove+0x98>
 8007cb4:	ea41 0300 	orr.w	r3, r1, r0
 8007cb8:	079b      	lsls	r3, r3, #30
 8007cba:	d137      	bne.n	8007d2c <memmove+0xac>
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	4615      	mov	r5, r2
 8007cc2:	6826      	ldr	r6, [r4, #0]
 8007cc4:	601e      	str	r6, [r3, #0]
 8007cc6:	6866      	ldr	r6, [r4, #4]
 8007cc8:	605e      	str	r6, [r3, #4]
 8007cca:	68a6      	ldr	r6, [r4, #8]
 8007ccc:	609e      	str	r6, [r3, #8]
 8007cce:	68e6      	ldr	r6, [r4, #12]
 8007cd0:	3d10      	subs	r5, #16
 8007cd2:	60de      	str	r6, [r3, #12]
 8007cd4:	3410      	adds	r4, #16
 8007cd6:	3310      	adds	r3, #16
 8007cd8:	2d0f      	cmp	r5, #15
 8007cda:	d8f2      	bhi.n	8007cc2 <memmove+0x42>
 8007cdc:	f1a2 0410 	sub.w	r4, r2, #16
 8007ce0:	f024 040f 	bic.w	r4, r4, #15
 8007ce4:	f002 020f 	and.w	r2, r2, #15
 8007ce8:	3410      	adds	r4, #16
 8007cea:	2a03      	cmp	r2, #3
 8007cec:	eb00 0304 	add.w	r3, r0, r4
 8007cf0:	4421      	add	r1, r4
 8007cf2:	d911      	bls.n	8007d18 <memmove+0x98>
 8007cf4:	1f0e      	subs	r6, r1, #4
 8007cf6:	461d      	mov	r5, r3
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8007cfe:	3c04      	subs	r4, #4
 8007d00:	2c03      	cmp	r4, #3
 8007d02:	f845 7b04 	str.w	r7, [r5], #4
 8007d06:	d8f8      	bhi.n	8007cfa <memmove+0x7a>
 8007d08:	1f14      	subs	r4, r2, #4
 8007d0a:	f024 0403 	bic.w	r4, r4, #3
 8007d0e:	3404      	adds	r4, #4
 8007d10:	f002 0203 	and.w	r2, r2, #3
 8007d14:	1909      	adds	r1, r1, r4
 8007d16:	191b      	adds	r3, r3, r4
 8007d18:	2a00      	cmp	r2, #0
 8007d1a:	d0c5      	beq.n	8007ca8 <memmove+0x28>
 8007d1c:	3901      	subs	r1, #1
 8007d1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007d22:	3a01      	subs	r2, #1
 8007d24:	f803 4b01 	strb.w	r4, [r3], #1
 8007d28:	d1f9      	bne.n	8007d1e <memmove+0x9e>
 8007d2a:	e7bd      	b.n	8007ca8 <memmove+0x28>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	e7f5      	b.n	8007d1c <memmove+0x9c>

08007d30 <memset>:
 8007d30:	f010 0f03 	tst.w	r0, #3
 8007d34:	b470      	push	{r4, r5, r6}
 8007d36:	4603      	mov	r3, r0
 8007d38:	d042      	beq.n	8007dc0 <memset+0x90>
 8007d3a:	2a00      	cmp	r2, #0
 8007d3c:	d03e      	beq.n	8007dbc <memset+0x8c>
 8007d3e:	3a01      	subs	r2, #1
 8007d40:	b2cd      	uxtb	r5, r1
 8007d42:	e003      	b.n	8007d4c <memset+0x1c>
 8007d44:	1e54      	subs	r4, r2, #1
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	d038      	beq.n	8007dbc <memset+0x8c>
 8007d4a:	4622      	mov	r2, r4
 8007d4c:	f803 5b01 	strb.w	r5, [r3], #1
 8007d50:	f013 0f03 	tst.w	r3, #3
 8007d54:	461c      	mov	r4, r3
 8007d56:	d1f5      	bne.n	8007d44 <memset+0x14>
 8007d58:	2a03      	cmp	r2, #3
 8007d5a:	d929      	bls.n	8007db0 <memset+0x80>
 8007d5c:	b2cd      	uxtb	r5, r1
 8007d5e:	2a0f      	cmp	r2, #15
 8007d60:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007d64:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007d68:	bf84      	itt	hi
 8007d6a:	4623      	movhi	r3, r4
 8007d6c:	4616      	movhi	r6, r2
 8007d6e:	d911      	bls.n	8007d94 <memset+0x64>
 8007d70:	3e10      	subs	r6, #16
 8007d72:	601d      	str	r5, [r3, #0]
 8007d74:	605d      	str	r5, [r3, #4]
 8007d76:	609d      	str	r5, [r3, #8]
 8007d78:	60dd      	str	r5, [r3, #12]
 8007d7a:	3310      	adds	r3, #16
 8007d7c:	2e0f      	cmp	r6, #15
 8007d7e:	d8f7      	bhi.n	8007d70 <memset+0x40>
 8007d80:	f1a2 0310 	sub.w	r3, r2, #16
 8007d84:	f023 030f 	bic.w	r3, r3, #15
 8007d88:	f002 020f 	and.w	r2, r2, #15
 8007d8c:	3310      	adds	r3, #16
 8007d8e:	2a03      	cmp	r2, #3
 8007d90:	441c      	add	r4, r3
 8007d92:	d90d      	bls.n	8007db0 <memset+0x80>
 8007d94:	4626      	mov	r6, r4
 8007d96:	4613      	mov	r3, r2
 8007d98:	3b04      	subs	r3, #4
 8007d9a:	2b03      	cmp	r3, #3
 8007d9c:	f846 5b04 	str.w	r5, [r6], #4
 8007da0:	d8fa      	bhi.n	8007d98 <memset+0x68>
 8007da2:	1f13      	subs	r3, r2, #4
 8007da4:	f023 0303 	bic.w	r3, r3, #3
 8007da8:	3304      	adds	r3, #4
 8007daa:	f002 0203 	and.w	r2, r2, #3
 8007dae:	18e4      	adds	r4, r4, r3
 8007db0:	b2c9      	uxtb	r1, r1
 8007db2:	b11a      	cbz	r2, 8007dbc <memset+0x8c>
 8007db4:	3a01      	subs	r2, #1
 8007db6:	f804 1b01 	strb.w	r1, [r4], #1
 8007dba:	d1fb      	bne.n	8007db4 <memset+0x84>
 8007dbc:	bc70      	pop	{r4, r5, r6}
 8007dbe:	4770      	bx	lr
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	e7c9      	b.n	8007d58 <memset+0x28>

08007dc4 <_realloc_r>:
 8007dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc8:	460c      	mov	r4, r1
 8007dca:	b083      	sub	sp, #12
 8007dcc:	4607      	mov	r7, r0
 8007dce:	4690      	mov	r8, r2
 8007dd0:	2900      	cmp	r1, #0
 8007dd2:	f000 80fe 	beq.w	8007fd2 <_realloc_r+0x20e>
 8007dd6:	f108 050b 	add.w	r5, r8, #11
 8007dda:	f7fe fc8b 	bl	80066f4 <__malloc_lock>
 8007dde:	2d16      	cmp	r5, #22
 8007de0:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007de4:	d87d      	bhi.n	8007ee2 <_realloc_r+0x11e>
 8007de6:	2210      	movs	r2, #16
 8007de8:	2600      	movs	r6, #0
 8007dea:	4615      	mov	r5, r2
 8007dec:	4545      	cmp	r5, r8
 8007dee:	bf38      	it	cc
 8007df0:	f046 0601 	orrcc.w	r6, r6, #1
 8007df4:	2e00      	cmp	r6, #0
 8007df6:	f040 80f2 	bne.w	8007fde <_realloc_r+0x21a>
 8007dfa:	f021 0a03 	bic.w	sl, r1, #3
 8007dfe:	4592      	cmp	sl, r2
 8007e00:	f1a4 0b08 	sub.w	fp, r4, #8
 8007e04:	bfa8      	it	ge
 8007e06:	4656      	movge	r6, sl
 8007e08:	da55      	bge.n	8007eb6 <_realloc_r+0xf2>
 8007e0a:	4ba0      	ldr	r3, [pc, #640]	; (800808c <_realloc_r+0x2c8>)
 8007e0c:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8007e10:	eb0b 000a 	add.w	r0, fp, sl
 8007e14:	4584      	cmp	ip, r0
 8007e16:	f000 80e7 	beq.w	8007fe8 <_realloc_r+0x224>
 8007e1a:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8007e1e:	f02e 0901 	bic.w	r9, lr, #1
 8007e22:	4481      	add	r9, r0
 8007e24:	f8d9 9004 	ldr.w	r9, [r9, #4]
 8007e28:	f019 0f01 	tst.w	r9, #1
 8007e2c:	bf1c      	itt	ne
 8007e2e:	46b6      	movne	lr, r6
 8007e30:	4670      	movne	r0, lr
 8007e32:	d05b      	beq.n	8007eec <_realloc_r+0x128>
 8007e34:	07c9      	lsls	r1, r1, #31
 8007e36:	d479      	bmi.n	8007f2c <_realloc_r+0x168>
 8007e38:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8007e3c:	ebc1 090b 	rsb	r9, r1, fp
 8007e40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e44:	f021 0103 	bic.w	r1, r1, #3
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	f000 8097 	beq.w	8007f7c <_realloc_r+0x1b8>
 8007e4e:	4560      	cmp	r0, ip
 8007e50:	eb01 0c0a 	add.w	ip, r1, sl
 8007e54:	eb0e 060c 	add.w	r6, lr, ip
 8007e58:	f000 811a 	beq.w	8008090 <_realloc_r+0x2cc>
 8007e5c:	42b2      	cmp	r2, r6
 8007e5e:	f300 808f 	bgt.w	8007f80 <_realloc_r+0x1bc>
 8007e62:	68c3      	ldr	r3, [r0, #12]
 8007e64:	6882      	ldr	r2, [r0, #8]
 8007e66:	46c8      	mov	r8, r9
 8007e68:	609a      	str	r2, [r3, #8]
 8007e6a:	60d3      	str	r3, [r2, #12]
 8007e6c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007e70:	f858 1f08 	ldr.w	r1, [r8, #8]!
 8007e74:	f1aa 0204 	sub.w	r2, sl, #4
 8007e78:	2a24      	cmp	r2, #36	; 0x24
 8007e7a:	60cb      	str	r3, [r1, #12]
 8007e7c:	6099      	str	r1, [r3, #8]
 8007e7e:	f200 8144 	bhi.w	800810a <_realloc_r+0x346>
 8007e82:	2a13      	cmp	r2, #19
 8007e84:	bf98      	it	ls
 8007e86:	4643      	movls	r3, r8
 8007e88:	d90b      	bls.n	8007ea2 <_realloc_r+0xde>
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	f8c9 3008 	str.w	r3, [r9, #8]
 8007e90:	6863      	ldr	r3, [r4, #4]
 8007e92:	2a1b      	cmp	r2, #27
 8007e94:	f8c9 300c 	str.w	r3, [r9, #12]
 8007e98:	f200 8140 	bhi.w	800811c <_realloc_r+0x358>
 8007e9c:	f109 0310 	add.w	r3, r9, #16
 8007ea0:	3408      	adds	r4, #8
 8007ea2:	6822      	ldr	r2, [r4, #0]
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	6862      	ldr	r2, [r4, #4]
 8007ea8:	605a      	str	r2, [r3, #4]
 8007eaa:	68a2      	ldr	r2, [r4, #8]
 8007eac:	609a      	str	r2, [r3, #8]
 8007eae:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007eb2:	4644      	mov	r4, r8
 8007eb4:	46cb      	mov	fp, r9
 8007eb6:	1b72      	subs	r2, r6, r5
 8007eb8:	2a0f      	cmp	r2, #15
 8007eba:	d822      	bhi.n	8007f02 <_realloc_r+0x13e>
 8007ebc:	f001 0101 	and.w	r1, r1, #1
 8007ec0:	eb0b 0306 	add.w	r3, fp, r6
 8007ec4:	430e      	orrs	r6, r1
 8007ec6:	f8cb 6004 	str.w	r6, [fp, #4]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	f042 0201 	orr.w	r2, r2, #1
 8007ed0:	605a      	str	r2, [r3, #4]
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	f7fe fc10 	bl	80066f8 <__malloc_unlock>
 8007ed8:	46a0      	mov	r8, r4
 8007eda:	4640      	mov	r0, r8
 8007edc:	b003      	add	sp, #12
 8007ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee2:	f025 0507 	bic.w	r5, r5, #7
 8007ee6:	462a      	mov	r2, r5
 8007ee8:	0fee      	lsrs	r6, r5, #31
 8007eea:	e77f      	b.n	8007dec <_realloc_r+0x28>
 8007eec:	f02e 0e03 	bic.w	lr, lr, #3
 8007ef0:	eb0e 060a 	add.w	r6, lr, sl
 8007ef4:	42b2      	cmp	r2, r6
 8007ef6:	dc9d      	bgt.n	8007e34 <_realloc_r+0x70>
 8007ef8:	68c3      	ldr	r3, [r0, #12]
 8007efa:	6882      	ldr	r2, [r0, #8]
 8007efc:	60d3      	str	r3, [r2, #12]
 8007efe:	609a      	str	r2, [r3, #8]
 8007f00:	e7d9      	b.n	8007eb6 <_realloc_r+0xf2>
 8007f02:	eb0b 0305 	add.w	r3, fp, r5
 8007f06:	f001 0101 	and.w	r1, r1, #1
 8007f0a:	1898      	adds	r0, r3, r2
 8007f0c:	430d      	orrs	r5, r1
 8007f0e:	f042 0201 	orr.w	r2, r2, #1
 8007f12:	f8cb 5004 	str.w	r5, [fp, #4]
 8007f16:	605a      	str	r2, [r3, #4]
 8007f18:	6842      	ldr	r2, [r0, #4]
 8007f1a:	f042 0201 	orr.w	r2, r2, #1
 8007f1e:	6042      	str	r2, [r0, #4]
 8007f20:	f103 0108 	add.w	r1, r3, #8
 8007f24:	4638      	mov	r0, r7
 8007f26:	f7fd ffa3 	bl	8005e70 <_free_r>
 8007f2a:	e7d2      	b.n	8007ed2 <_realloc_r+0x10e>
 8007f2c:	4641      	mov	r1, r8
 8007f2e:	4638      	mov	r0, r7
 8007f30:	f7fe f8aa 	bl	8006088 <_malloc_r>
 8007f34:	4680      	mov	r8, r0
 8007f36:	b1e8      	cbz	r0, 8007f74 <_realloc_r+0x1b0>
 8007f38:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007f3c:	f021 0301 	bic.w	r3, r1, #1
 8007f40:	f1a0 0208 	sub.w	r2, r0, #8
 8007f44:	445b      	add	r3, fp
 8007f46:	429a      	cmp	r2, r3
 8007f48:	f000 80d9 	beq.w	80080fe <_realloc_r+0x33a>
 8007f4c:	f1aa 0204 	sub.w	r2, sl, #4
 8007f50:	2a24      	cmp	r2, #36	; 0x24
 8007f52:	f200 8096 	bhi.w	8008082 <_realloc_r+0x2be>
 8007f56:	2a13      	cmp	r2, #19
 8007f58:	bf9c      	itt	ls
 8007f5a:	4603      	movls	r3, r0
 8007f5c:	4622      	movls	r2, r4
 8007f5e:	d863      	bhi.n	8008028 <_realloc_r+0x264>
 8007f60:	6811      	ldr	r1, [r2, #0]
 8007f62:	6019      	str	r1, [r3, #0]
 8007f64:	6851      	ldr	r1, [r2, #4]
 8007f66:	6059      	str	r1, [r3, #4]
 8007f68:	6892      	ldr	r2, [r2, #8]
 8007f6a:	609a      	str	r2, [r3, #8]
 8007f6c:	4638      	mov	r0, r7
 8007f6e:	4621      	mov	r1, r4
 8007f70:	f7fd ff7e 	bl	8005e70 <_free_r>
 8007f74:	4638      	mov	r0, r7
 8007f76:	f7fe fbbf 	bl	80066f8 <__malloc_unlock>
 8007f7a:	e7ae      	b.n	8007eda <_realloc_r+0x116>
 8007f7c:	eb01 0c0a 	add.w	ip, r1, sl
 8007f80:	4562      	cmp	r2, ip
 8007f82:	dcd3      	bgt.n	8007f2c <_realloc_r+0x168>
 8007f84:	464e      	mov	r6, r9
 8007f86:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007f8a:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8007f8e:	f1aa 0204 	sub.w	r2, sl, #4
 8007f92:	2a24      	cmp	r2, #36	; 0x24
 8007f94:	60cb      	str	r3, [r1, #12]
 8007f96:	6099      	str	r1, [r3, #8]
 8007f98:	d865      	bhi.n	8008066 <_realloc_r+0x2a2>
 8007f9a:	2a13      	cmp	r2, #19
 8007f9c:	bf98      	it	ls
 8007f9e:	4633      	movls	r3, r6
 8007fa0:	d90b      	bls.n	8007fba <_realloc_r+0x1f6>
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	f8c9 3008 	str.w	r3, [r9, #8]
 8007fa8:	6863      	ldr	r3, [r4, #4]
 8007faa:	2a1b      	cmp	r2, #27
 8007fac:	f8c9 300c 	str.w	r3, [r9, #12]
 8007fb0:	f200 80c0 	bhi.w	8008134 <_realloc_r+0x370>
 8007fb4:	f109 0310 	add.w	r3, r9, #16
 8007fb8:	3408      	adds	r4, #8
 8007fba:	6822      	ldr	r2, [r4, #0]
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	6862      	ldr	r2, [r4, #4]
 8007fc0:	605a      	str	r2, [r3, #4]
 8007fc2:	68a2      	ldr	r2, [r4, #8]
 8007fc4:	609a      	str	r2, [r3, #8]
 8007fc6:	4634      	mov	r4, r6
 8007fc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007fcc:	4666      	mov	r6, ip
 8007fce:	46cb      	mov	fp, r9
 8007fd0:	e771      	b.n	8007eb6 <_realloc_r+0xf2>
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	b003      	add	sp, #12
 8007fd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fda:	f7fe b855 	b.w	8006088 <_malloc_r>
 8007fde:	230c      	movs	r3, #12
 8007fe0:	603b      	str	r3, [r7, #0]
 8007fe2:	f04f 0800 	mov.w	r8, #0
 8007fe6:	e778      	b.n	8007eda <_realloc_r+0x116>
 8007fe8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007fec:	f026 0e03 	bic.w	lr, r6, #3
 8007ff0:	eb0e 000a 	add.w	r0, lr, sl
 8007ff4:	f105 0610 	add.w	r6, r5, #16
 8007ff8:	42b0      	cmp	r0, r6
 8007ffa:	bfb8      	it	lt
 8007ffc:	4660      	movlt	r0, ip
 8007ffe:	f6ff af19 	blt.w	8007e34 <_realloc_r+0x70>
 8008002:	eb0b 0205 	add.w	r2, fp, r5
 8008006:	1b41      	subs	r1, r0, r5
 8008008:	f041 0101 	orr.w	r1, r1, #1
 800800c:	6051      	str	r1, [r2, #4]
 800800e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008012:	609a      	str	r2, [r3, #8]
 8008014:	f001 0301 	and.w	r3, r1, #1
 8008018:	431d      	orrs	r5, r3
 800801a:	f844 5c04 	str.w	r5, [r4, #-4]
 800801e:	4638      	mov	r0, r7
 8008020:	f7fe fb6a 	bl	80066f8 <__malloc_unlock>
 8008024:	46a0      	mov	r8, r4
 8008026:	e758      	b.n	8007eda <_realloc_r+0x116>
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	6003      	str	r3, [r0, #0]
 800802c:	6863      	ldr	r3, [r4, #4]
 800802e:	2a1b      	cmp	r2, #27
 8008030:	6043      	str	r3, [r0, #4]
 8008032:	bf9c      	itt	ls
 8008034:	f104 0208 	addls.w	r2, r4, #8
 8008038:	f100 0308 	addls.w	r3, r0, #8
 800803c:	d990      	bls.n	8007f60 <_realloc_r+0x19c>
 800803e:	68a3      	ldr	r3, [r4, #8]
 8008040:	6083      	str	r3, [r0, #8]
 8008042:	68e3      	ldr	r3, [r4, #12]
 8008044:	2a24      	cmp	r2, #36	; 0x24
 8008046:	60c3      	str	r3, [r0, #12]
 8008048:	bf03      	ittte	eq
 800804a:	6923      	ldreq	r3, [r4, #16]
 800804c:	6103      	streq	r3, [r0, #16]
 800804e:	6962      	ldreq	r2, [r4, #20]
 8008050:	f100 0310 	addne.w	r3, r0, #16
 8008054:	bf09      	itett	eq
 8008056:	6142      	streq	r2, [r0, #20]
 8008058:	f104 0210 	addne.w	r2, r4, #16
 800805c:	f100 0318 	addeq.w	r3, r0, #24
 8008060:	f104 0218 	addeq.w	r2, r4, #24
 8008064:	e77c      	b.n	8007f60 <_realloc_r+0x19c>
 8008066:	4621      	mov	r1, r4
 8008068:	4630      	mov	r0, r6
 800806a:	f8cd c004 	str.w	ip, [sp, #4]
 800806e:	f7ff fe07 	bl	8007c80 <memmove>
 8008072:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008076:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800807a:	4634      	mov	r4, r6
 800807c:	46cb      	mov	fp, r9
 800807e:	4666      	mov	r6, ip
 8008080:	e719      	b.n	8007eb6 <_realloc_r+0xf2>
 8008082:	4621      	mov	r1, r4
 8008084:	f7ff fdfc 	bl	8007c80 <memmove>
 8008088:	e770      	b.n	8007f6c <_realloc_r+0x1a8>
 800808a:	bf00      	nop
 800808c:	2000054c 	.word	0x2000054c
 8008090:	f105 0110 	add.w	r1, r5, #16
 8008094:	428e      	cmp	r6, r1
 8008096:	f6ff af73 	blt.w	8007f80 <_realloc_r+0x1bc>
 800809a:	46c8      	mov	r8, r9
 800809c:	f8d9 100c 	ldr.w	r1, [r9, #12]
 80080a0:	f858 0f08 	ldr.w	r0, [r8, #8]!
 80080a4:	f1aa 0204 	sub.w	r2, sl, #4
 80080a8:	2a24      	cmp	r2, #36	; 0x24
 80080aa:	60c1      	str	r1, [r0, #12]
 80080ac:	6088      	str	r0, [r1, #8]
 80080ae:	d861      	bhi.n	8008174 <_realloc_r+0x3b0>
 80080b0:	2a13      	cmp	r2, #19
 80080b2:	bf98      	it	ls
 80080b4:	4642      	movls	r2, r8
 80080b6:	d90a      	bls.n	80080ce <_realloc_r+0x30a>
 80080b8:	6821      	ldr	r1, [r4, #0]
 80080ba:	f8c9 1008 	str.w	r1, [r9, #8]
 80080be:	6861      	ldr	r1, [r4, #4]
 80080c0:	2a1b      	cmp	r2, #27
 80080c2:	f8c9 100c 	str.w	r1, [r9, #12]
 80080c6:	d85c      	bhi.n	8008182 <_realloc_r+0x3be>
 80080c8:	f109 0210 	add.w	r2, r9, #16
 80080cc:	3408      	adds	r4, #8
 80080ce:	6821      	ldr	r1, [r4, #0]
 80080d0:	6011      	str	r1, [r2, #0]
 80080d2:	6861      	ldr	r1, [r4, #4]
 80080d4:	6051      	str	r1, [r2, #4]
 80080d6:	68a1      	ldr	r1, [r4, #8]
 80080d8:	6091      	str	r1, [r2, #8]
 80080da:	eb09 0205 	add.w	r2, r9, r5
 80080de:	1b71      	subs	r1, r6, r5
 80080e0:	f041 0101 	orr.w	r1, r1, #1
 80080e4:	6051      	str	r1, [r2, #4]
 80080e6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80080ea:	609a      	str	r2, [r3, #8]
 80080ec:	f001 0301 	and.w	r3, r1, #1
 80080f0:	431d      	orrs	r5, r3
 80080f2:	f8c9 5004 	str.w	r5, [r9, #4]
 80080f6:	4638      	mov	r0, r7
 80080f8:	f7fe fafe 	bl	80066f8 <__malloc_unlock>
 80080fc:	e6ed      	b.n	8007eda <_realloc_r+0x116>
 80080fe:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8008102:	f026 0603 	bic.w	r6, r6, #3
 8008106:	4456      	add	r6, sl
 8008108:	e6d5      	b.n	8007eb6 <_realloc_r+0xf2>
 800810a:	4621      	mov	r1, r4
 800810c:	4640      	mov	r0, r8
 800810e:	f7ff fdb7 	bl	8007c80 <memmove>
 8008112:	4644      	mov	r4, r8
 8008114:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008118:	46cb      	mov	fp, r9
 800811a:	e6cc      	b.n	8007eb6 <_realloc_r+0xf2>
 800811c:	68a3      	ldr	r3, [r4, #8]
 800811e:	f8c9 3010 	str.w	r3, [r9, #16]
 8008122:	68e3      	ldr	r3, [r4, #12]
 8008124:	2a24      	cmp	r2, #36	; 0x24
 8008126:	f8c9 3014 	str.w	r3, [r9, #20]
 800812a:	d00f      	beq.n	800814c <_realloc_r+0x388>
 800812c:	f109 0318 	add.w	r3, r9, #24
 8008130:	3410      	adds	r4, #16
 8008132:	e6b6      	b.n	8007ea2 <_realloc_r+0xde>
 8008134:	68a3      	ldr	r3, [r4, #8]
 8008136:	f8c9 3010 	str.w	r3, [r9, #16]
 800813a:	68e3      	ldr	r3, [r4, #12]
 800813c:	2a24      	cmp	r2, #36	; 0x24
 800813e:	f8c9 3014 	str.w	r3, [r9, #20]
 8008142:	d00d      	beq.n	8008160 <_realloc_r+0x39c>
 8008144:	f109 0318 	add.w	r3, r9, #24
 8008148:	3410      	adds	r4, #16
 800814a:	e736      	b.n	8007fba <_realloc_r+0x1f6>
 800814c:	6923      	ldr	r3, [r4, #16]
 800814e:	f8c9 3018 	str.w	r3, [r9, #24]
 8008152:	6962      	ldr	r2, [r4, #20]
 8008154:	f109 0320 	add.w	r3, r9, #32
 8008158:	f8c9 201c 	str.w	r2, [r9, #28]
 800815c:	3418      	adds	r4, #24
 800815e:	e6a0      	b.n	8007ea2 <_realloc_r+0xde>
 8008160:	6923      	ldr	r3, [r4, #16]
 8008162:	f8c9 3018 	str.w	r3, [r9, #24]
 8008166:	6962      	ldr	r2, [r4, #20]
 8008168:	f109 0320 	add.w	r3, r9, #32
 800816c:	f8c9 201c 	str.w	r2, [r9, #28]
 8008170:	3418      	adds	r4, #24
 8008172:	e722      	b.n	8007fba <_realloc_r+0x1f6>
 8008174:	4640      	mov	r0, r8
 8008176:	4621      	mov	r1, r4
 8008178:	9301      	str	r3, [sp, #4]
 800817a:	f7ff fd81 	bl	8007c80 <memmove>
 800817e:	9b01      	ldr	r3, [sp, #4]
 8008180:	e7ab      	b.n	80080da <_realloc_r+0x316>
 8008182:	68a1      	ldr	r1, [r4, #8]
 8008184:	f8c9 1010 	str.w	r1, [r9, #16]
 8008188:	68e1      	ldr	r1, [r4, #12]
 800818a:	2a24      	cmp	r2, #36	; 0x24
 800818c:	f8c9 1014 	str.w	r1, [r9, #20]
 8008190:	d003      	beq.n	800819a <_realloc_r+0x3d6>
 8008192:	f109 0218 	add.w	r2, r9, #24
 8008196:	3410      	adds	r4, #16
 8008198:	e799      	b.n	80080ce <_realloc_r+0x30a>
 800819a:	6922      	ldr	r2, [r4, #16]
 800819c:	f8c9 2018 	str.w	r2, [r9, #24]
 80081a0:	6961      	ldr	r1, [r4, #20]
 80081a2:	f109 0220 	add.w	r2, r9, #32
 80081a6:	f8c9 101c 	str.w	r1, [r9, #28]
 80081aa:	3418      	adds	r4, #24
 80081ac:	e78f      	b.n	80080ce <_realloc_r+0x30a>
 80081ae:	bf00      	nop

080081b0 <__aeabi_drsub>:
 80081b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80081b4:	e002      	b.n	80081bc <__adddf3>
 80081b6:	bf00      	nop

080081b8 <__aeabi_dsub>:
 80081b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080081bc <__adddf3>:
 80081bc:	b530      	push	{r4, r5, lr}
 80081be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80081c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80081c6:	ea94 0f05 	teq	r4, r5
 80081ca:	bf08      	it	eq
 80081cc:	ea90 0f02 	teqeq	r0, r2
 80081d0:	bf1f      	itttt	ne
 80081d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80081d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80081da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80081de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80081e2:	f000 80e2 	beq.w	80083aa <__adddf3+0x1ee>
 80081e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80081ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80081ee:	bfb8      	it	lt
 80081f0:	426d      	neglt	r5, r5
 80081f2:	dd0c      	ble.n	800820e <__adddf3+0x52>
 80081f4:	442c      	add	r4, r5
 80081f6:	ea80 0202 	eor.w	r2, r0, r2
 80081fa:	ea81 0303 	eor.w	r3, r1, r3
 80081fe:	ea82 0000 	eor.w	r0, r2, r0
 8008202:	ea83 0101 	eor.w	r1, r3, r1
 8008206:	ea80 0202 	eor.w	r2, r0, r2
 800820a:	ea81 0303 	eor.w	r3, r1, r3
 800820e:	2d36      	cmp	r5, #54	; 0x36
 8008210:	bf88      	it	hi
 8008212:	bd30      	pophi	{r4, r5, pc}
 8008214:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008218:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800821c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008220:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008224:	d002      	beq.n	800822c <__adddf3+0x70>
 8008226:	4240      	negs	r0, r0
 8008228:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800822c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008230:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008234:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008238:	d002      	beq.n	8008240 <__adddf3+0x84>
 800823a:	4252      	negs	r2, r2
 800823c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008240:	ea94 0f05 	teq	r4, r5
 8008244:	f000 80a7 	beq.w	8008396 <__adddf3+0x1da>
 8008248:	f1a4 0401 	sub.w	r4, r4, #1
 800824c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008250:	db0d      	blt.n	800826e <__adddf3+0xb2>
 8008252:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008256:	fa22 f205 	lsr.w	r2, r2, r5
 800825a:	1880      	adds	r0, r0, r2
 800825c:	f141 0100 	adc.w	r1, r1, #0
 8008260:	fa03 f20e 	lsl.w	r2, r3, lr
 8008264:	1880      	adds	r0, r0, r2
 8008266:	fa43 f305 	asr.w	r3, r3, r5
 800826a:	4159      	adcs	r1, r3
 800826c:	e00e      	b.n	800828c <__adddf3+0xd0>
 800826e:	f1a5 0520 	sub.w	r5, r5, #32
 8008272:	f10e 0e20 	add.w	lr, lr, #32
 8008276:	2a01      	cmp	r2, #1
 8008278:	fa03 fc0e 	lsl.w	ip, r3, lr
 800827c:	bf28      	it	cs
 800827e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008282:	fa43 f305 	asr.w	r3, r3, r5
 8008286:	18c0      	adds	r0, r0, r3
 8008288:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800828c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008290:	d507      	bpl.n	80082a2 <__adddf3+0xe6>
 8008292:	f04f 0e00 	mov.w	lr, #0
 8008296:	f1dc 0c00 	rsbs	ip, ip, #0
 800829a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800829e:	eb6e 0101 	sbc.w	r1, lr, r1
 80082a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80082a6:	d31b      	bcc.n	80082e0 <__adddf3+0x124>
 80082a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80082ac:	d30c      	bcc.n	80082c8 <__adddf3+0x10c>
 80082ae:	0849      	lsrs	r1, r1, #1
 80082b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80082b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80082b8:	f104 0401 	add.w	r4, r4, #1
 80082bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80082c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80082c4:	f080 809a 	bcs.w	80083fc <__adddf3+0x240>
 80082c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80082cc:	bf08      	it	eq
 80082ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80082d2:	f150 0000 	adcs.w	r0, r0, #0
 80082d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80082da:	ea41 0105 	orr.w	r1, r1, r5
 80082de:	bd30      	pop	{r4, r5, pc}
 80082e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80082e4:	4140      	adcs	r0, r0
 80082e6:	eb41 0101 	adc.w	r1, r1, r1
 80082ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80082ee:	f1a4 0401 	sub.w	r4, r4, #1
 80082f2:	d1e9      	bne.n	80082c8 <__adddf3+0x10c>
 80082f4:	f091 0f00 	teq	r1, #0
 80082f8:	bf04      	itt	eq
 80082fa:	4601      	moveq	r1, r0
 80082fc:	2000      	moveq	r0, #0
 80082fe:	fab1 f381 	clz	r3, r1
 8008302:	bf08      	it	eq
 8008304:	3320      	addeq	r3, #32
 8008306:	f1a3 030b 	sub.w	r3, r3, #11
 800830a:	f1b3 0220 	subs.w	r2, r3, #32
 800830e:	da0c      	bge.n	800832a <__adddf3+0x16e>
 8008310:	320c      	adds	r2, #12
 8008312:	dd08      	ble.n	8008326 <__adddf3+0x16a>
 8008314:	f102 0c14 	add.w	ip, r2, #20
 8008318:	f1c2 020c 	rsb	r2, r2, #12
 800831c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008320:	fa21 f102 	lsr.w	r1, r1, r2
 8008324:	e00c      	b.n	8008340 <__adddf3+0x184>
 8008326:	f102 0214 	add.w	r2, r2, #20
 800832a:	bfd8      	it	le
 800832c:	f1c2 0c20 	rsble	ip, r2, #32
 8008330:	fa01 f102 	lsl.w	r1, r1, r2
 8008334:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008338:	bfdc      	itt	le
 800833a:	ea41 010c 	orrle.w	r1, r1, ip
 800833e:	4090      	lslle	r0, r2
 8008340:	1ae4      	subs	r4, r4, r3
 8008342:	bfa2      	ittt	ge
 8008344:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008348:	4329      	orrge	r1, r5
 800834a:	bd30      	popge	{r4, r5, pc}
 800834c:	ea6f 0404 	mvn.w	r4, r4
 8008350:	3c1f      	subs	r4, #31
 8008352:	da1c      	bge.n	800838e <__adddf3+0x1d2>
 8008354:	340c      	adds	r4, #12
 8008356:	dc0e      	bgt.n	8008376 <__adddf3+0x1ba>
 8008358:	f104 0414 	add.w	r4, r4, #20
 800835c:	f1c4 0220 	rsb	r2, r4, #32
 8008360:	fa20 f004 	lsr.w	r0, r0, r4
 8008364:	fa01 f302 	lsl.w	r3, r1, r2
 8008368:	ea40 0003 	orr.w	r0, r0, r3
 800836c:	fa21 f304 	lsr.w	r3, r1, r4
 8008370:	ea45 0103 	orr.w	r1, r5, r3
 8008374:	bd30      	pop	{r4, r5, pc}
 8008376:	f1c4 040c 	rsb	r4, r4, #12
 800837a:	f1c4 0220 	rsb	r2, r4, #32
 800837e:	fa20 f002 	lsr.w	r0, r0, r2
 8008382:	fa01 f304 	lsl.w	r3, r1, r4
 8008386:	ea40 0003 	orr.w	r0, r0, r3
 800838a:	4629      	mov	r1, r5
 800838c:	bd30      	pop	{r4, r5, pc}
 800838e:	fa21 f004 	lsr.w	r0, r1, r4
 8008392:	4629      	mov	r1, r5
 8008394:	bd30      	pop	{r4, r5, pc}
 8008396:	f094 0f00 	teq	r4, #0
 800839a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800839e:	bf06      	itte	eq
 80083a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80083a4:	3401      	addeq	r4, #1
 80083a6:	3d01      	subne	r5, #1
 80083a8:	e74e      	b.n	8008248 <__adddf3+0x8c>
 80083aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80083ae:	bf18      	it	ne
 80083b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80083b4:	d029      	beq.n	800840a <__adddf3+0x24e>
 80083b6:	ea94 0f05 	teq	r4, r5
 80083ba:	bf08      	it	eq
 80083bc:	ea90 0f02 	teqeq	r0, r2
 80083c0:	d005      	beq.n	80083ce <__adddf3+0x212>
 80083c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80083c6:	bf04      	itt	eq
 80083c8:	4619      	moveq	r1, r3
 80083ca:	4610      	moveq	r0, r2
 80083cc:	bd30      	pop	{r4, r5, pc}
 80083ce:	ea91 0f03 	teq	r1, r3
 80083d2:	bf1e      	ittt	ne
 80083d4:	2100      	movne	r1, #0
 80083d6:	2000      	movne	r0, #0
 80083d8:	bd30      	popne	{r4, r5, pc}
 80083da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80083de:	d105      	bne.n	80083ec <__adddf3+0x230>
 80083e0:	0040      	lsls	r0, r0, #1
 80083e2:	4149      	adcs	r1, r1
 80083e4:	bf28      	it	cs
 80083e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80083ea:	bd30      	pop	{r4, r5, pc}
 80083ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80083f0:	bf3c      	itt	cc
 80083f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80083f6:	bd30      	popcc	{r4, r5, pc}
 80083f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008400:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008404:	f04f 0000 	mov.w	r0, #0
 8008408:	bd30      	pop	{r4, r5, pc}
 800840a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800840e:	bf1a      	itte	ne
 8008410:	4619      	movne	r1, r3
 8008412:	4610      	movne	r0, r2
 8008414:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008418:	bf1c      	itt	ne
 800841a:	460b      	movne	r3, r1
 800841c:	4602      	movne	r2, r0
 800841e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008422:	bf06      	itte	eq
 8008424:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008428:	ea91 0f03 	teqeq	r1, r3
 800842c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008430:	bd30      	pop	{r4, r5, pc}
 8008432:	bf00      	nop

08008434 <__aeabi_ui2d>:
 8008434:	f090 0f00 	teq	r0, #0
 8008438:	bf04      	itt	eq
 800843a:	2100      	moveq	r1, #0
 800843c:	4770      	bxeq	lr
 800843e:	b530      	push	{r4, r5, lr}
 8008440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008448:	f04f 0500 	mov.w	r5, #0
 800844c:	f04f 0100 	mov.w	r1, #0
 8008450:	e750      	b.n	80082f4 <__adddf3+0x138>
 8008452:	bf00      	nop

08008454 <__aeabi_i2d>:
 8008454:	f090 0f00 	teq	r0, #0
 8008458:	bf04      	itt	eq
 800845a:	2100      	moveq	r1, #0
 800845c:	4770      	bxeq	lr
 800845e:	b530      	push	{r4, r5, lr}
 8008460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008468:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800846c:	bf48      	it	mi
 800846e:	4240      	negmi	r0, r0
 8008470:	f04f 0100 	mov.w	r1, #0
 8008474:	e73e      	b.n	80082f4 <__adddf3+0x138>
 8008476:	bf00      	nop

08008478 <__aeabi_f2d>:
 8008478:	0042      	lsls	r2, r0, #1
 800847a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800847e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008482:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008486:	bf1f      	itttt	ne
 8008488:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800848c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008490:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008494:	4770      	bxne	lr
 8008496:	f092 0f00 	teq	r2, #0
 800849a:	bf14      	ite	ne
 800849c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80084a0:	4770      	bxeq	lr
 80084a2:	b530      	push	{r4, r5, lr}
 80084a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80084a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80084ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80084b0:	e720      	b.n	80082f4 <__adddf3+0x138>
 80084b2:	bf00      	nop

080084b4 <__aeabi_ul2d>:
 80084b4:	ea50 0201 	orrs.w	r2, r0, r1
 80084b8:	bf08      	it	eq
 80084ba:	4770      	bxeq	lr
 80084bc:	b530      	push	{r4, r5, lr}
 80084be:	f04f 0500 	mov.w	r5, #0
 80084c2:	e00a      	b.n	80084da <__aeabi_l2d+0x16>

080084c4 <__aeabi_l2d>:
 80084c4:	ea50 0201 	orrs.w	r2, r0, r1
 80084c8:	bf08      	it	eq
 80084ca:	4770      	bxeq	lr
 80084cc:	b530      	push	{r4, r5, lr}
 80084ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80084d2:	d502      	bpl.n	80084da <__aeabi_l2d+0x16>
 80084d4:	4240      	negs	r0, r0
 80084d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80084da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80084de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80084e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80084e6:	f43f aedc 	beq.w	80082a2 <__adddf3+0xe6>
 80084ea:	f04f 0203 	mov.w	r2, #3
 80084ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80084f2:	bf18      	it	ne
 80084f4:	3203      	addne	r2, #3
 80084f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80084fa:	bf18      	it	ne
 80084fc:	3203      	addne	r2, #3
 80084fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008502:	f1c2 0320 	rsb	r3, r2, #32
 8008506:	fa00 fc03 	lsl.w	ip, r0, r3
 800850a:	fa20 f002 	lsr.w	r0, r0, r2
 800850e:	fa01 fe03 	lsl.w	lr, r1, r3
 8008512:	ea40 000e 	orr.w	r0, r0, lr
 8008516:	fa21 f102 	lsr.w	r1, r1, r2
 800851a:	4414      	add	r4, r2
 800851c:	e6c1      	b.n	80082a2 <__adddf3+0xe6>
 800851e:	bf00      	nop

08008520 <__aeabi_dmul>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008526:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800852a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800852e:	bf1d      	ittte	ne
 8008530:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008534:	ea94 0f0c 	teqne	r4, ip
 8008538:	ea95 0f0c 	teqne	r5, ip
 800853c:	f000 f8de 	bleq	80086fc <__aeabi_dmul+0x1dc>
 8008540:	442c      	add	r4, r5
 8008542:	ea81 0603 	eor.w	r6, r1, r3
 8008546:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800854a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800854e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008552:	bf18      	it	ne
 8008554:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008558:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800855c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008560:	d038      	beq.n	80085d4 <__aeabi_dmul+0xb4>
 8008562:	fba0 ce02 	umull	ip, lr, r0, r2
 8008566:	f04f 0500 	mov.w	r5, #0
 800856a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800856e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008572:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008576:	f04f 0600 	mov.w	r6, #0
 800857a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800857e:	f09c 0f00 	teq	ip, #0
 8008582:	bf18      	it	ne
 8008584:	f04e 0e01 	orrne.w	lr, lr, #1
 8008588:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800858c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008590:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008594:	d204      	bcs.n	80085a0 <__aeabi_dmul+0x80>
 8008596:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800859a:	416d      	adcs	r5, r5
 800859c:	eb46 0606 	adc.w	r6, r6, r6
 80085a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80085a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80085a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80085ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80085b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80085b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80085b8:	bf88      	it	hi
 80085ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80085be:	d81e      	bhi.n	80085fe <__aeabi_dmul+0xde>
 80085c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80085c4:	bf08      	it	eq
 80085c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80085ca:	f150 0000 	adcs.w	r0, r0, #0
 80085ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80085d2:	bd70      	pop	{r4, r5, r6, pc}
 80085d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80085d8:	ea46 0101 	orr.w	r1, r6, r1
 80085dc:	ea40 0002 	orr.w	r0, r0, r2
 80085e0:	ea81 0103 	eor.w	r1, r1, r3
 80085e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80085e8:	bfc2      	ittt	gt
 80085ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80085ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80085f2:	bd70      	popgt	{r4, r5, r6, pc}
 80085f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80085f8:	f04f 0e00 	mov.w	lr, #0
 80085fc:	3c01      	subs	r4, #1
 80085fe:	f300 80ab 	bgt.w	8008758 <__aeabi_dmul+0x238>
 8008602:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8008606:	bfde      	ittt	le
 8008608:	2000      	movle	r0, #0
 800860a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800860e:	bd70      	pople	{r4, r5, r6, pc}
 8008610:	f1c4 0400 	rsb	r4, r4, #0
 8008614:	3c20      	subs	r4, #32
 8008616:	da35      	bge.n	8008684 <__aeabi_dmul+0x164>
 8008618:	340c      	adds	r4, #12
 800861a:	dc1b      	bgt.n	8008654 <__aeabi_dmul+0x134>
 800861c:	f104 0414 	add.w	r4, r4, #20
 8008620:	f1c4 0520 	rsb	r5, r4, #32
 8008624:	fa00 f305 	lsl.w	r3, r0, r5
 8008628:	fa20 f004 	lsr.w	r0, r0, r4
 800862c:	fa01 f205 	lsl.w	r2, r1, r5
 8008630:	ea40 0002 	orr.w	r0, r0, r2
 8008634:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008638:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800863c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008640:	fa21 f604 	lsr.w	r6, r1, r4
 8008644:	eb42 0106 	adc.w	r1, r2, r6
 8008648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800864c:	bf08      	it	eq
 800864e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008652:	bd70      	pop	{r4, r5, r6, pc}
 8008654:	f1c4 040c 	rsb	r4, r4, #12
 8008658:	f1c4 0520 	rsb	r5, r4, #32
 800865c:	fa00 f304 	lsl.w	r3, r0, r4
 8008660:	fa20 f005 	lsr.w	r0, r0, r5
 8008664:	fa01 f204 	lsl.w	r2, r1, r4
 8008668:	ea40 0002 	orr.w	r0, r0, r2
 800866c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008670:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008674:	f141 0100 	adc.w	r1, r1, #0
 8008678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800867c:	bf08      	it	eq
 800867e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008682:	bd70      	pop	{r4, r5, r6, pc}
 8008684:	f1c4 0520 	rsb	r5, r4, #32
 8008688:	fa00 f205 	lsl.w	r2, r0, r5
 800868c:	ea4e 0e02 	orr.w	lr, lr, r2
 8008690:	fa20 f304 	lsr.w	r3, r0, r4
 8008694:	fa01 f205 	lsl.w	r2, r1, r5
 8008698:	ea43 0302 	orr.w	r3, r3, r2
 800869c:	fa21 f004 	lsr.w	r0, r1, r4
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	fa21 f204 	lsr.w	r2, r1, r4
 80086a8:	ea20 0002 	bic.w	r0, r0, r2
 80086ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80086b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80086b4:	bf08      	it	eq
 80086b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80086ba:	bd70      	pop	{r4, r5, r6, pc}
 80086bc:	f094 0f00 	teq	r4, #0
 80086c0:	d10f      	bne.n	80086e2 <__aeabi_dmul+0x1c2>
 80086c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80086c6:	0040      	lsls	r0, r0, #1
 80086c8:	eb41 0101 	adc.w	r1, r1, r1
 80086cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80086d0:	bf08      	it	eq
 80086d2:	3c01      	subeq	r4, #1
 80086d4:	d0f7      	beq.n	80086c6 <__aeabi_dmul+0x1a6>
 80086d6:	ea41 0106 	orr.w	r1, r1, r6
 80086da:	f095 0f00 	teq	r5, #0
 80086de:	bf18      	it	ne
 80086e0:	4770      	bxne	lr
 80086e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80086e6:	0052      	lsls	r2, r2, #1
 80086e8:	eb43 0303 	adc.w	r3, r3, r3
 80086ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80086f0:	bf08      	it	eq
 80086f2:	3d01      	subeq	r5, #1
 80086f4:	d0f7      	beq.n	80086e6 <__aeabi_dmul+0x1c6>
 80086f6:	ea43 0306 	orr.w	r3, r3, r6
 80086fa:	4770      	bx	lr
 80086fc:	ea94 0f0c 	teq	r4, ip
 8008700:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008704:	bf18      	it	ne
 8008706:	ea95 0f0c 	teqne	r5, ip
 800870a:	d00c      	beq.n	8008726 <__aeabi_dmul+0x206>
 800870c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008710:	bf18      	it	ne
 8008712:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008716:	d1d1      	bne.n	80086bc <__aeabi_dmul+0x19c>
 8008718:	ea81 0103 	eor.w	r1, r1, r3
 800871c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008720:	f04f 0000 	mov.w	r0, #0
 8008724:	bd70      	pop	{r4, r5, r6, pc}
 8008726:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800872a:	bf06      	itte	eq
 800872c:	4610      	moveq	r0, r2
 800872e:	4619      	moveq	r1, r3
 8008730:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008734:	d019      	beq.n	800876a <__aeabi_dmul+0x24a>
 8008736:	ea94 0f0c 	teq	r4, ip
 800873a:	d102      	bne.n	8008742 <__aeabi_dmul+0x222>
 800873c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008740:	d113      	bne.n	800876a <__aeabi_dmul+0x24a>
 8008742:	ea95 0f0c 	teq	r5, ip
 8008746:	d105      	bne.n	8008754 <__aeabi_dmul+0x234>
 8008748:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800874c:	bf1c      	itt	ne
 800874e:	4610      	movne	r0, r2
 8008750:	4619      	movne	r1, r3
 8008752:	d10a      	bne.n	800876a <__aeabi_dmul+0x24a>
 8008754:	ea81 0103 	eor.w	r1, r1, r3
 8008758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800875c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008760:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008764:	f04f 0000 	mov.w	r0, #0
 8008768:	bd70      	pop	{r4, r5, r6, pc}
 800876a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800876e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008772:	bd70      	pop	{r4, r5, r6, pc}

08008774 <__aeabi_ddiv>:
 8008774:	b570      	push	{r4, r5, r6, lr}
 8008776:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800877a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800877e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008782:	bf1d      	ittte	ne
 8008784:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008788:	ea94 0f0c 	teqne	r4, ip
 800878c:	ea95 0f0c 	teqne	r5, ip
 8008790:	f000 f8a7 	bleq	80088e2 <__aeabi_ddiv+0x16e>
 8008794:	eba4 0405 	sub.w	r4, r4, r5
 8008798:	ea81 0e03 	eor.w	lr, r1, r3
 800879c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80087a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80087a4:	f000 8088 	beq.w	80088b8 <__aeabi_ddiv+0x144>
 80087a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80087ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80087b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80087b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80087b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80087bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80087c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80087c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80087c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80087cc:	429d      	cmp	r5, r3
 80087ce:	bf08      	it	eq
 80087d0:	4296      	cmpeq	r6, r2
 80087d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80087d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80087da:	d202      	bcs.n	80087e2 <__aeabi_ddiv+0x6e>
 80087dc:	085b      	lsrs	r3, r3, #1
 80087de:	ea4f 0232 	mov.w	r2, r2, rrx
 80087e2:	1ab6      	subs	r6, r6, r2
 80087e4:	eb65 0503 	sbc.w	r5, r5, r3
 80087e8:	085b      	lsrs	r3, r3, #1
 80087ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80087ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80087f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80087f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80087fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087fe:	bf22      	ittt	cs
 8008800:	1ab6      	subcs	r6, r6, r2
 8008802:	4675      	movcs	r5, lr
 8008804:	ea40 000c 	orrcs.w	r0, r0, ip
 8008808:	085b      	lsrs	r3, r3, #1
 800880a:	ea4f 0232 	mov.w	r2, r2, rrx
 800880e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008816:	bf22      	ittt	cs
 8008818:	1ab6      	subcs	r6, r6, r2
 800881a:	4675      	movcs	r5, lr
 800881c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008820:	085b      	lsrs	r3, r3, #1
 8008822:	ea4f 0232 	mov.w	r2, r2, rrx
 8008826:	ebb6 0e02 	subs.w	lr, r6, r2
 800882a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800882e:	bf22      	ittt	cs
 8008830:	1ab6      	subcs	r6, r6, r2
 8008832:	4675      	movcs	r5, lr
 8008834:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008838:	085b      	lsrs	r3, r3, #1
 800883a:	ea4f 0232 	mov.w	r2, r2, rrx
 800883e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008846:	bf22      	ittt	cs
 8008848:	1ab6      	subcs	r6, r6, r2
 800884a:	4675      	movcs	r5, lr
 800884c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008850:	ea55 0e06 	orrs.w	lr, r5, r6
 8008854:	d018      	beq.n	8008888 <__aeabi_ddiv+0x114>
 8008856:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800885a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800885e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008862:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008866:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800886a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800886e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008872:	d1c0      	bne.n	80087f6 <__aeabi_ddiv+0x82>
 8008874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008878:	d10b      	bne.n	8008892 <__aeabi_ddiv+0x11e>
 800887a:	ea41 0100 	orr.w	r1, r1, r0
 800887e:	f04f 0000 	mov.w	r0, #0
 8008882:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008886:	e7b6      	b.n	80087f6 <__aeabi_ddiv+0x82>
 8008888:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800888c:	bf04      	itt	eq
 800888e:	4301      	orreq	r1, r0
 8008890:	2000      	moveq	r0, #0
 8008892:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008896:	bf88      	it	hi
 8008898:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800889c:	f63f aeaf 	bhi.w	80085fe <__aeabi_dmul+0xde>
 80088a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80088a4:	bf04      	itt	eq
 80088a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80088aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80088ae:	f150 0000 	adcs.w	r0, r0, #0
 80088b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80088b6:	bd70      	pop	{r4, r5, r6, pc}
 80088b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80088bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80088c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80088c4:	bfc2      	ittt	gt
 80088c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80088ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80088ce:	bd70      	popgt	{r4, r5, r6, pc}
 80088d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80088d4:	f04f 0e00 	mov.w	lr, #0
 80088d8:	3c01      	subs	r4, #1
 80088da:	e690      	b.n	80085fe <__aeabi_dmul+0xde>
 80088dc:	ea45 0e06 	orr.w	lr, r5, r6
 80088e0:	e68d      	b.n	80085fe <__aeabi_dmul+0xde>
 80088e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80088e6:	ea94 0f0c 	teq	r4, ip
 80088ea:	bf08      	it	eq
 80088ec:	ea95 0f0c 	teqeq	r5, ip
 80088f0:	f43f af3b 	beq.w	800876a <__aeabi_dmul+0x24a>
 80088f4:	ea94 0f0c 	teq	r4, ip
 80088f8:	d10a      	bne.n	8008910 <__aeabi_ddiv+0x19c>
 80088fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80088fe:	f47f af34 	bne.w	800876a <__aeabi_dmul+0x24a>
 8008902:	ea95 0f0c 	teq	r5, ip
 8008906:	f47f af25 	bne.w	8008754 <__aeabi_dmul+0x234>
 800890a:	4610      	mov	r0, r2
 800890c:	4619      	mov	r1, r3
 800890e:	e72c      	b.n	800876a <__aeabi_dmul+0x24a>
 8008910:	ea95 0f0c 	teq	r5, ip
 8008914:	d106      	bne.n	8008924 <__aeabi_ddiv+0x1b0>
 8008916:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800891a:	f43f aefd 	beq.w	8008718 <__aeabi_dmul+0x1f8>
 800891e:	4610      	mov	r0, r2
 8008920:	4619      	mov	r1, r3
 8008922:	e722      	b.n	800876a <__aeabi_dmul+0x24a>
 8008924:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008928:	bf18      	it	ne
 800892a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800892e:	f47f aec5 	bne.w	80086bc <__aeabi_dmul+0x19c>
 8008932:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008936:	f47f af0d 	bne.w	8008754 <__aeabi_dmul+0x234>
 800893a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800893e:	f47f aeeb 	bne.w	8008718 <__aeabi_dmul+0x1f8>
 8008942:	e712      	b.n	800876a <__aeabi_dmul+0x24a>

08008944 <__gedf2>:
 8008944:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008948:	e006      	b.n	8008958 <__cmpdf2+0x4>
 800894a:	bf00      	nop

0800894c <__ledf2>:
 800894c:	f04f 0c01 	mov.w	ip, #1
 8008950:	e002      	b.n	8008958 <__cmpdf2+0x4>
 8008952:	bf00      	nop

08008954 <__cmpdf2>:
 8008954:	f04f 0c01 	mov.w	ip, #1
 8008958:	f84d cd04 	str.w	ip, [sp, #-4]!
 800895c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008964:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008968:	bf18      	it	ne
 800896a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800896e:	d01b      	beq.n	80089a8 <__cmpdf2+0x54>
 8008970:	b001      	add	sp, #4
 8008972:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008976:	bf0c      	ite	eq
 8008978:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800897c:	ea91 0f03 	teqne	r1, r3
 8008980:	bf02      	ittt	eq
 8008982:	ea90 0f02 	teqeq	r0, r2
 8008986:	2000      	moveq	r0, #0
 8008988:	4770      	bxeq	lr
 800898a:	f110 0f00 	cmn.w	r0, #0
 800898e:	ea91 0f03 	teq	r1, r3
 8008992:	bf58      	it	pl
 8008994:	4299      	cmppl	r1, r3
 8008996:	bf08      	it	eq
 8008998:	4290      	cmpeq	r0, r2
 800899a:	bf2c      	ite	cs
 800899c:	17d8      	asrcs	r0, r3, #31
 800899e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80089a2:	f040 0001 	orr.w	r0, r0, #1
 80089a6:	4770      	bx	lr
 80089a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b0:	d102      	bne.n	80089b8 <__cmpdf2+0x64>
 80089b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089b6:	d107      	bne.n	80089c8 <__cmpdf2+0x74>
 80089b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089c0:	d1d6      	bne.n	8008970 <__cmpdf2+0x1c>
 80089c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089c6:	d0d3      	beq.n	8008970 <__cmpdf2+0x1c>
 80089c8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop

080089d0 <__aeabi_cdrcmple>:
 80089d0:	4684      	mov	ip, r0
 80089d2:	4610      	mov	r0, r2
 80089d4:	4662      	mov	r2, ip
 80089d6:	468c      	mov	ip, r1
 80089d8:	4619      	mov	r1, r3
 80089da:	4663      	mov	r3, ip
 80089dc:	e000      	b.n	80089e0 <__aeabi_cdcmpeq>
 80089de:	bf00      	nop

080089e0 <__aeabi_cdcmpeq>:
 80089e0:	b501      	push	{r0, lr}
 80089e2:	f7ff ffb7 	bl	8008954 <__cmpdf2>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	bf48      	it	mi
 80089ea:	f110 0f00 	cmnmi.w	r0, #0
 80089ee:	bd01      	pop	{r0, pc}

080089f0 <__aeabi_dcmpeq>:
 80089f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089f4:	f7ff fff4 	bl	80089e0 <__aeabi_cdcmpeq>
 80089f8:	bf0c      	ite	eq
 80089fa:	2001      	moveq	r0, #1
 80089fc:	2000      	movne	r0, #0
 80089fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8008a02:	bf00      	nop

08008a04 <__aeabi_dcmplt>:
 8008a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008a08:	f7ff ffea 	bl	80089e0 <__aeabi_cdcmpeq>
 8008a0c:	bf34      	ite	cc
 8008a0e:	2001      	movcc	r0, #1
 8008a10:	2000      	movcs	r0, #0
 8008a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8008a16:	bf00      	nop

08008a18 <__aeabi_dcmple>:
 8008a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008a1c:	f7ff ffe0 	bl	80089e0 <__aeabi_cdcmpeq>
 8008a20:	bf94      	ite	ls
 8008a22:	2001      	movls	r0, #1
 8008a24:	2000      	movhi	r0, #0
 8008a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8008a2a:	bf00      	nop

08008a2c <__aeabi_dcmpge>:
 8008a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008a30:	f7ff ffce 	bl	80089d0 <__aeabi_cdrcmple>
 8008a34:	bf94      	ite	ls
 8008a36:	2001      	movls	r0, #1
 8008a38:	2000      	movhi	r0, #0
 8008a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008a3e:	bf00      	nop

08008a40 <__aeabi_dcmpgt>:
 8008a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008a44:	f7ff ffc4 	bl	80089d0 <__aeabi_cdrcmple>
 8008a48:	bf34      	ite	cc
 8008a4a:	2001      	movcc	r0, #1
 8008a4c:	2000      	movcs	r0, #0
 8008a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008a52:	bf00      	nop

08008a54 <__aeabi_d2iz>:
 8008a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a5c:	d215      	bcs.n	8008a8a <__aeabi_d2iz+0x36>
 8008a5e:	d511      	bpl.n	8008a84 <__aeabi_d2iz+0x30>
 8008a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a68:	d912      	bls.n	8008a90 <__aeabi_d2iz+0x3c>
 8008a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008a7a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a7e:	bf18      	it	ne
 8008a80:	4240      	negne	r0, r0
 8008a82:	4770      	bx	lr
 8008a84:	f04f 0000 	mov.w	r0, #0
 8008a88:	4770      	bx	lr
 8008a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a8e:	d105      	bne.n	8008a9c <__aeabi_d2iz+0x48>
 8008a90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a94:	bf08      	it	eq
 8008a96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a9a:	4770      	bx	lr
 8008a9c:	f04f 0000 	mov.w	r0, #0
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop

08008aa4 <main>:
#include "gpio.h"
#include "delay.h"
#include "usart.h"
#include "spi.h"

int main(void) {
 8008aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa8:	b09e      	sub	sp, #120	; 0x78
	uint16_t bits;
	uint32_t intval = 24;
	uint32_t tnow;
	char tmp[92];

	TIM2_timer_start();
 8008aaa:	f7f7 fb6d 	bl	8000188 <TIM2_timer_start>

	usart_begin(USART2, PA3, PA2, 19200);
 8008aae:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008ab2:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8008ab6:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008aba:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008abe:	f240 1103 	movw	r1, #259	; 0x103
 8008ac2:	f7f8 f845 	bl	8000b50 <usart_begin>
	usart_print(USART2, "Happy are those who know they are spiritually poor; \n");
 8008ac6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008aca:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008ace:	49ab      	ldr	r1, [pc, #684]	; (8008d7c <main+0x2d8>)
 8008ad0:	f7f8 f98e 	bl	8000df0 <usart_print>
	usart_print(USART2, "The kingdom of heaven belongs to them!\n");
 8008ad4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008ad8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008adc:	49a8      	ldr	r1, [pc, #672]	; (8008d80 <main+0x2dc>)
 8008ade:	f7f8 f987 	bl	8000df0 <usart_print>
	usart_print(USART2, "How many eyes does Mississipi river have?\n");
 8008ae2:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008ae6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008aea:	49a6      	ldr	r1, [pc, #664]	; (8008d84 <main+0x2e0>)
 8008aec:	f7f8 f980 	bl	8000df0 <usart_print>
	usart_print(USART2, "Quick brown fox jumped over the lazy dog!\n");
 8008af0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008af4:	49a4      	ldr	r1, [pc, #656]	; (8008d88 <main+0x2e4>)
 8008af6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008afa:	f7f8 f979 	bl	8000df0 <usart_print>
	usart_flush(USART2);
 8008afe:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008b02:	f2c4 0000 	movt	r0, #16384	; 0x4000

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);

	sprintf(tmp, "SYSCLK = %ld, ", RCC_Clocks.SYSCLK_Frequency);
 8008b06:	ac03      	add	r4, sp, #12
	usart_begin(USART2, PA3, PA2, 19200);
	usart_print(USART2, "Happy are those who know they are spiritually poor; \n");
	usart_print(USART2, "The kingdom of heaven belongs to them!\n");
	usart_print(USART2, "How many eyes does Mississipi river have?\n");
	usart_print(USART2, "Quick brown fox jumped over the lazy dog!\n");
	usart_flush(USART2);
 8008b08:	f7f8 f9ba 	bl	8000e80 <usart_flush>

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 8008b0c:	a81a      	add	r0, sp, #104	; 0x68
 8008b0e:	f7f9 f913 	bl	8001d38 <RCC_GetClocksFreq>

	sprintf(tmp, "SYSCLK = %ld, ", RCC_Clocks.SYSCLK_Frequency);
 8008b12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008b14:	499d      	ldr	r1, [pc, #628]	; (8008d8c <main+0x2e8>)
 8008b16:	4620      	mov	r0, r4
 8008b18:	f7fb f814 	bl	8003b44 <sprintf>
	usart_print(USART2, tmp);
 8008b1c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008b20:	4621      	mov	r1, r4
 8008b22:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008b26:	f7f8 f963 	bl	8000df0 <usart_print>
	sprintf(tmp, "HCLK = %ld, ", RCC_Clocks.HCLK_Frequency);
 8008b2a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008b2c:	4998      	ldr	r1, [pc, #608]	; (8008d90 <main+0x2ec>)
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f7fb f808 	bl	8003b44 <sprintf>
	usart_print(USART2, tmp);
 8008b34:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008b38:	4621      	mov	r1, r4
 8008b3a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008b3e:	f7f8 f957 	bl	8000df0 <usart_print>
	sprintf(tmp, "PCLK1 = %ld, ", RCC_Clocks.PCLK1_Frequency);
 8008b42:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b44:	4993      	ldr	r1, [pc, #588]	; (8008d94 <main+0x2f0>)
 8008b46:	4620      	mov	r0, r4
 8008b48:	f7fa fffc 	bl	8003b44 <sprintf>
	usart_print(USART2, tmp);
 8008b4c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008b50:	4621      	mov	r1, r4
 8008b52:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008b56:	f7f8 f94b 	bl	8000df0 <usart_print>
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
 8008b5a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008b5c:	498e      	ldr	r1, [pc, #568]	; (8008d98 <main+0x2f4>)
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f7fa fff0 	bl	8003b44 <sprintf>
	usart_print(USART2, tmp);
 8008b64:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008b68:	4621      	mov	r1, r4
 8008b6a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008b6e:	f7f8 f93f 	bl	8000df0 <usart_print>
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12), (PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)),
 8008b72:	f240 400c 	movw	r0, #1036	; 0x40c
 8008b76:	f7f7 fbf7 	bl	8000368 <PinPort>
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	f240 400c 	movw	r0, #1036	; 0x40c
 8008b80:	f7f7 fbfc 	bl	800037c <PinBit>
 8008b84:	4605      	mov	r5, r0
 8008b86:	f240 400d 	movw	r0, #1037	; 0x40d
 8008b8a:	f7f7 fbf7 	bl	800037c <PinBit>
 8008b8e:	4305      	orrs	r5, r0
 8008b90:	f240 400e 	movw	r0, #1038	; 0x40e
 8008b94:	f7f7 fbf2 	bl	800037c <PinBit>
 8008b98:	b2ad      	uxth	r5, r5
 8008b9a:	4305      	orrs	r5, r0
 8008b9c:	f240 400f 	movw	r0, #1039	; 0x40f
 8008ba0:	f7f7 fbec 	bl	800037c <PinBit>
 8008ba4:	b2af      	uxth	r7, r5
 8008ba6:	ea47 0100 	orr.w	r1, r7, r0
 8008baa:	2500      	movs	r5, #0
 8008bac:	4630      	mov	r0, r6
 8008bae:	462b      	mov	r3, r5
 8008bb0:	b289      	uxth	r1, r1
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	9500      	str	r5, [sp, #0]
 8008bb6:	9501      	str	r5, [sp, #4]
 8008bb8:	f7f7 fbec 	bl	8000394 <GPIOMode>
	pinMode(PD14, OUTPUT);
	pinMode(PD15, OUTPUT);
	| GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15),
			GPIO_Mode_OUT, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
*/
	spi_begin(SPI2, PB13, PB14, PB15, PB12);
 8008bbc:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8008bc0:	f240 220e 	movw	r2, #526	; 0x20e
 8008bc4:	f240 230f 	movw	r3, #527	; 0x20f
 8008bc8:	f44f 7503 	mov.w	r5, #524	; 0x20c
 8008bcc:	f240 210d 	movw	r1, #525	; 0x20d
 8008bd0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008bd4:	9500      	str	r5, [sp, #0]
 8008bd6:	f7f7 fe45 	bl	8000864 <spi_begin>
	digitalWrite(PB12, HIGH);
 8008bda:	4628      	mov	r0, r5
 8008bdc:	2101      	movs	r1, #1
 8008bde:	f7f7 fb89 	bl	80002f4 <digitalWrite>

	tnow = millis()/1000;
 8008be2:	f7f7 fb2b 	bl	800023c <millis>
	while (tnow == millis()/1000);
 8008be6:	f644 55d3 	movw	r5, #19923	; 0x4dd3
			GPIO_Mode_OUT, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
*/
	spi_begin(SPI2, PB13, PB14, PB15, PB12);
	digitalWrite(PB12, HIGH);

	tnow = millis()/1000;
 8008bea:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8008bee:	fbb0 f6f6 	udiv	r6, r0, r6
	while (tnow == millis()/1000);
 8008bf2:	f2c1 0562 	movt	r5, #4194	; 0x1062
 8008bf6:	f7f7 fb21 	bl	800023c <millis>
 8008bfa:	fba5 2300 	umull	r2, r3, r5, r0
 8008bfe:	ebb6 1f93 	cmp.w	r6, r3, lsr #6
 8008c02:	d0f8      	beq.n	8008bf6 <main+0x152>
	tnow = millis()/1000;
 8008c04:	f7f7 fb1a 	bl	800023c <millis>
		delay_millis(intval);
		//
		bits = 1<<12 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);

		while (tnow == millis()/1000);
 8008c08:	f644 56d3 	movw	r6, #19923	; 0x4dd3
	spi_begin(SPI2, PB13, PB14, PB15, PB12);
	digitalWrite(PB12, HIGH);

	tnow = millis()/1000;
	while (tnow == millis()/1000);
	tnow = millis()/1000;
 8008c0c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8008c10:	fbb0 f5f5 	udiv	r5, r0, r5
		delay_millis(intval);
		//
		bits = 1<<12 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);

		while (tnow == millis()/1000);
 8008c14:	f2c1 0662 	movt	r6, #4194	; 0x1062
	tnow = millis()/1000;
	while (tnow == millis()/1000);
	tnow = millis()/1000;

	while (1) {
		bits = GPIO_ReadOutputData(GPIOD);
 8008c18:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c1c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008c20:	f7f8 fd5a 	bl	80016d8 <GPIO_ReadOutputData>
		bits = 1<<12 | (bits & 0x0fff);
 8008c24:	0507      	lsls	r7, r0, #20
 8008c26:	0d3f      	lsrs	r7, r7, #20
 8008c28:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
		GPIO_Write(GPIOD, bits);
 8008c2c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c30:	4639      	mov	r1, r7
 8008c32:	f2c4 0002 	movt	r0, #16386	; 0x4002
		delay_millis(intval);

		bits = 1<<13 | (bits & 0x0fff);
 8008c36:	053f      	lsls	r7, r7, #20
	tnow = millis()/1000;

	while (1) {
		bits = GPIO_ReadOutputData(GPIOD);
		bits = 1<<12 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);
 8008c38:	f7f8 fd5c 	bl	80016f4 <GPIO_Write>
		delay_millis(intval);

		bits = 1<<13 | (bits & 0x0fff);
 8008c3c:	0d3f      	lsrs	r7, r7, #20

	while (1) {
		bits = GPIO_ReadOutputData(GPIOD);
		bits = 1<<12 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);
		delay_millis(intval);
 8008c3e:	2018      	movs	r0, #24
 8008c40:	f7f7 fb02 	bl	8000248 <delay_millis>

		bits = 1<<13 | (bits & 0x0fff);
 8008c44:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
		GPIO_Write(GPIOD, bits);
 8008c48:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c4c:	4639      	mov	r1, r7
 8008c4e:	f2c4 0002 	movt	r0, #16386	; 0x4002
		delay_millis(intval);

		bits = 1<<14 | (bits & 0x0fff);
 8008c52:	053f      	lsls	r7, r7, #20
		bits = 1<<12 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);
		delay_millis(intval);

		bits = 1<<13 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);
 8008c54:	f7f8 fd4e 	bl	80016f4 <GPIO_Write>
		delay_millis(intval);

		bits = 1<<14 | (bits & 0x0fff);
 8008c58:	0d3f      	lsrs	r7, r7, #20
		GPIO_Write(GPIOD, bits);
		delay_millis(intval);

		bits = 1<<13 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);
		delay_millis(intval);
 8008c5a:	2018      	movs	r0, #24
 8008c5c:	f7f7 faf4 	bl	8000248 <delay_millis>

		bits = 1<<14 | (bits & 0x0fff);
 8008c60:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
		GPIO_Write(GPIOD, bits);
 8008c64:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c68:	4639      	mov	r1, r7
 8008c6a:	f2c4 0002 	movt	r0, #16386	; 0x4002
		delay_millis(intval);

		bits = 1<<15 | (bits & 0x0fff);
 8008c6e:	053f      	lsls	r7, r7, #20
		bits = 1<<13 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);
		delay_millis(intval);

		bits = 1<<14 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);
 8008c70:	f7f8 fd40 	bl	80016f4 <GPIO_Write>
		delay_millis(intval);

		bits = 1<<15 | (bits & 0x0fff);
 8008c74:	0d3f      	lsrs	r7, r7, #20
		GPIO_Write(GPIOD, bits);
		delay_millis(intval);

		bits = 1<<14 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);
		delay_millis(intval);
 8008c76:	2018      	movs	r0, #24
 8008c78:	f7f7 fae6 	bl	8000248 <delay_millis>

		bits = 1<<15 | (bits & 0x0fff);
 8008c7c:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
		GPIO_Write(GPIOD, bits);
 8008c80:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c84:	4639      	mov	r1, r7
 8008c86:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008c8a:	f7f8 fd33 	bl	80016f4 <GPIO_Write>
		delay_millis(intval);
 8008c8e:	2018      	movs	r0, #24
 8008c90:	f7f7 fada 	bl	8000248 <delay_millis>
		//
		bits = 1<<12 | (bits & 0x0fff);
 8008c94:	0539      	lsls	r1, r7, #20
 8008c96:	0d09      	lsrs	r1, r1, #20
		GPIO_Write(GPIOD, bits);
 8008c98:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c9c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008ca0:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8008ca4:	f7f8 fd26 	bl	80016f4 <GPIO_Write>

		while (tnow == millis()/1000);
 8008ca8:	f7f7 fac8 	bl	800023c <millis>
 8008cac:	fba6 3000 	umull	r3, r0, r6, r0
 8008cb0:	f644 57d3 	movw	r7, #19923	; 0x4dd3
 8008cb4:	ebb5 1f90 	cmp.w	r5, r0, lsr #6
 8008cb8:	f2c1 0762 	movt	r7, #4194	; 0x1062
 8008cbc:	d0f4      	beq.n	8008ca8 <main+0x204>
		tnow = millis()/1000;
 8008cbe:	f7f7 fabd 	bl	800023c <millis>
 8008cc2:	fba7 2500 	umull	r2, r5, r7, r0
		usart3.print((float)(count++ / 32.0f), 3);
		*/
//		uint16_t h, t;
//		h = tx_head();
//		t = tx_tail();
		sprintf(tmp, /*"head =% 4d, tail =% 4d,*/ "%04ld\n", millis());
 8008cc6:	f7f7 fab9 	bl	800023c <millis>
 8008cca:	4934      	ldr	r1, [pc, #208]	; (8008d9c <main+0x2f8>)
 8008ccc:	4602      	mov	r2, r0
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f7fa ff38 	bl	8003b44 <sprintf>
		usart_print(USART2, tmp);
 8008cd4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008cd8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008cdc:	4621      	mov	r1, r4
 8008cde:	f7f8 f887 	bl	8000df0 <usart_print>

		digitalWrite(PB12, LOW);
 8008ce2:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	f7f7 fb04 	bl	80002f4 <digitalWrite>
		spi_transfer(SPI2, (uint8_t *)tmp, 8);
 8008cec:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8008cf0:	2208      	movs	r2, #8
 8008cf2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008cf6:	4621      	mov	r1, r4
 8008cf8:	f7f7 fe78 	bl	80009ec <spi_transfer>
		digitalWrite(PB12, HIGH);
 8008cfc:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8008d00:	2101      	movs	r1, #1
 8008d02:	f7f7 faf7 	bl	80002f4 <digitalWrite>
		/*
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
 8008d06:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008d0a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008d0e:	f7f8 f975 	bl	8000ffc <usart_available>
		//
		bits = 1<<12 | (bits & 0x0fff);
		GPIO_Write(GPIOD, bits);

		while (tnow == millis()/1000);
		tnow = millis()/1000;
 8008d12:	09ad      	lsrs	r5, r5, #6
		/*
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
 8008d14:	2700      	movs	r7, #0
 8008d16:	b950      	cbnz	r0, 8008d2e <main+0x28a>
 8008d18:	e77e      	b.n	8008c18 <main+0x174>
			while ( usart_available(USART2) > 0 && i < 92 ) {
				tmp[i++] = (char) usart_read(USART2);
 8008d1a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
 8008d1e:	2f5c      	cmp	r7, #92	; 0x5c
				tmp[i++] = (char) usart_read(USART2);
 8008d20:	f2c4 0000 	movt	r0, #16384	; 0x4000
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
 8008d24:	d028      	beq.n	8008d78 <main+0x2d4>
				tmp[i++] = (char) usart_read(USART2);
 8008d26:	f7f8 f873 	bl	8000e10 <usart_read>
 8008d2a:	55e0      	strb	r0, [r4, r7]
 8008d2c:	3701      	adds	r7, #1
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
 8008d2e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008d32:	f2c4 0000 	movt	r0, #16384	; 0x4000
				tmp[i++] = (char) usart_read(USART2);
 8008d36:	fa1f f887 	uxth.w	r8, r7
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
 8008d3a:	f7f8 f95f 	bl	8000ffc <usart_available>
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	d1eb      	bne.n	8008d1a <main+0x276>
				tmp[i++] = (char) usart_read(USART2);
			}
			tmp[i] = 0;
 8008d42:	ab1e      	add	r3, sp, #120	; 0x78
 8008d44:	4498      	add	r8, r3
			usart_print(USART2, "> ");
 8008d46:	f44f 4088 	mov.w	r0, #17408	; 0x4400
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
				tmp[i++] = (char) usart_read(USART2);
			}
			tmp[i] = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	f808 3c6c 	strb.w	r3, [r8, #-108]
			usart_print(USART2, "> ");
 8008d50:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008d54:	4912      	ldr	r1, [pc, #72]	; (8008da0 <main+0x2fc>)
 8008d56:	f7f8 f84b 	bl	8000df0 <usart_print>
			usart_print(USART2, tmp);
 8008d5a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008d5e:	4621      	mov	r1, r4
 8008d60:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008d64:	f7f8 f844 	bl	8000df0 <usart_print>
			usart_print(USART2, "\n");
 8008d68:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008d6c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008d70:	490c      	ldr	r1, [pc, #48]	; (8008da4 <main+0x300>)
 8008d72:	f7f8 f83d 	bl	8000df0 <usart_print>
 8008d76:	e74f      	b.n	8008c18 <main+0x174>
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
 8008d78:	46b8      	mov	r8, r7
 8008d7a:	e7e2      	b.n	8008d42 <main+0x29e>
 8008d7c:	08008f60 	.word	0x08008f60
 8008d80:	08008f98 	.word	0x08008f98
 8008d84:	08008fc0 	.word	0x08008fc0
 8008d88:	08008fec 	.word	0x08008fec
 8008d8c:	08009018 	.word	0x08009018
 8008d90:	08009028 	.word	0x08009028
 8008d94:	08009038 	.word	0x08009038
 8008d98:	08009048 	.word	0x08009048
 8008d9c:	08009058 	.word	0x08009058
 8008da0:	08009060 	.word	0x08009060
 8008da4:	08009054 	.word	0x08009054

08008da8 <Reset_Handler>:
 8008da8:	2100      	movs	r1, #0
 8008daa:	e003      	b.n	8008db4 <LoopCopyDataInit>

08008dac <CopyDataInit>:
 8008dac:	4b0a      	ldr	r3, [pc, #40]	; (8008dd8 <LoopFillZerobss+0x10>)
 8008dae:	585b      	ldr	r3, [r3, r1]
 8008db0:	5043      	str	r3, [r0, r1]
 8008db2:	3104      	adds	r1, #4

08008db4 <LoopCopyDataInit>:
 8008db4:	4809      	ldr	r0, [pc, #36]	; (8008ddc <LoopFillZerobss+0x14>)
 8008db6:	4b0a      	ldr	r3, [pc, #40]	; (8008de0 <LoopFillZerobss+0x18>)
 8008db8:	1842      	adds	r2, r0, r1
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d3f6      	bcc.n	8008dac <CopyDataInit>
 8008dbe:	4a09      	ldr	r2, [pc, #36]	; (8008de4 <LoopFillZerobss+0x1c>)
 8008dc0:	e002      	b.n	8008dc8 <LoopFillZerobss>

08008dc2 <FillZerobss>:
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f842 3b04 	str.w	r3, [r2], #4

08008dc8 <LoopFillZerobss>:
 8008dc8:	4b07      	ldr	r3, [pc, #28]	; (8008de8 <LoopFillZerobss+0x20>)
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d3f9      	bcc.n	8008dc2 <FillZerobss>
 8008dce:	f7fa fd51 	bl	8003874 <SystemInit>
 8008dd2:	f7ff fe67 	bl	8008aa4 <main>
 8008dd6:	4770      	bx	lr
 8008dd8:	080090ec 	.word	0x080090ec
 8008ddc:	20000000 	.word	0x20000000
 8008de0:	2000095c 	.word	0x2000095c
 8008de4:	2000095c 	.word	0x2000095c
 8008de8:	20001600 	.word	0x20001600

08008dec <ADC_IRQHandler>:
 8008dec:	e7fe      	b.n	8008dec <ADC_IRQHandler>
	...

08008df0 <blanks.3927>:
 8008df0:	2020 2020 2020 2020 2020 2020 2020 2020                     

08008e00 <zeroes.3928>:
 8008e00:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

08008e10 <_global_impure_ptr>:
 8008e10:	00a8 2000 0000 0000                         ... ....

08008e18 <p05.2449>:
 8008e18:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

08008e28 <__mprec_tens>:
 8008e28:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8008e38:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8008e48:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8008e58:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8008e68:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8008e78:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8008e88:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8008e98:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8008ea8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8008eb8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8008ec8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8008ed8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8008ee8:	9db4 79d9 7843 44ea                         ...yCx.D

08008ef0 <__mprec_tinytens>:
 8008ef0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8008f00:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8008f10:	6f43 64ac 0628 0ac8                         Co.d(...

08008f18 <__mprec_bigtens>:
 8008f18:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8008f28:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8008f38:	bf3c 7f73 4fdd 7515                         <.s..O.u

08008f40 <blanks.3871>:
 8008f40:	2020 2020 2020 2020 2020 2020 2020 2020                     

08008f50 <zeroes.3872>:
 8008f50:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 8008f60:	6148 7070 2079 7261 2065 6874 736f 2065     Happy are those 
 8008f70:	6877 206f 6e6b 776f 7420 6568 2079 7261     who know they ar
 8008f80:	2065 7073 7269 7469 6175 6c6c 2079 6f70     e spiritually po
 8008f90:	726f 203b 000a 0000 6854 2065 696b 676e     or; ....The king
 8008fa0:	6f64 206d 666f 6820 6165 6576 206e 6562     dom of heaven be
 8008fb0:	6f6c 676e 2073 6f74 7420 6568 216d 000a     longs to them!..
 8008fc0:	6f48 2077 616d 796e 6520 6579 2073 6f64     How many eyes do
 8008fd0:	7365 4d20 7369 6973 7373 7069 2069 6972     es Mississipi ri
 8008fe0:	6576 2072 6168 6576 0a3f 0000 7551 6369     ver have?...Quic
 8008ff0:	206b 7262 776f 206e 6f66 2078 756a 706d     k brown fox jump
 8009000:	6465 6f20 6576 2072 6874 2065 616c 797a     ed over the lazy
 8009010:	6420 676f 0a21 0000 5953 4353 4b4c 3d20      dog!...SYSCLK =
 8009020:	2520 646c 202c 0000 4348 4b4c 3d20 2520      %ld, ..HCLK = %
 8009030:	646c 202c 0000 0000 4350 4b4c 2031 203d     ld, ....PCLK1 = 
 8009040:	6c25 2c64 0020 0000 4350 4b4c 2032 203d     %ld, ...PCLK2 = 
 8009050:	6c25 0d64 000a 0000 3025 6c34 0a64 0000     %ld.....%04ld...
 8009060:	203e 0000 6548 7061 6120 646e 7320 6174     > ..Heap and sta
 8009070:	6b63 6320 6c6f 696c 6973 6e6f 000a 0000     ck collision....
 8009080:	7865 7469 0000 0000 4e49 0046 6e69 0066     exit....INF.inf.
 8009090:	414e 004e 616e 006e 3130 3332 3534 3736     NAN.nan.01234567
 80090a0:	3938 4241 4443 4645 0000 0000 3130 3332     89ABCDEF....0123
 80090b0:	3534 3736 3938 6261 6463 6665 0000 0000     456789abcdef....
 80090c0:	6e28 6c75 296c 0000 0030 0000 6e49 6966     (null)..0...Infi
 80090d0:	696e 7974 0000 0000 614e 004e 0043 0000     nity....NaN.C...
 80090e0:	4f50 4953 0058 0000 002e 0000               POSIX.......
