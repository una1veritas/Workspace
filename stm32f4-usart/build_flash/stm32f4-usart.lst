
stm32f4-usart.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <TIM2_timer_start>:
/**
 * @brief  millisecond
 * @param  none
 * @retval None
 */
void TIM2_timer_start(void) {
 8000188:	b570      	push	{r4, r5, r6, lr}
 800018a:	b088      	sub	sp, #32
	// TIM_TimeBaseInitTypeDef's order is {uint16_t TIM_Prescaler, uint16_t TIM_CounterMode, uint16_t TIM_Period, uint16_t TIM_ClockDivision, uint8_t TIM_RepetitionCounter}
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 800018c:	4668      	mov	r0, sp
 800018e:	f001 fe35 	bl	8001dfc <RCC_GetClocksFreq>
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 8000192:	9b00      	ldr	r3, [sp, #0]
 8000194:	f64d 6283 	movw	r2, #56963	; 0xde83
 8000198:	f2c4 321b 	movt	r2, #17179	; 0x431b
 800019c:	085b      	lsrs	r3, r3, #1
 800019e:	fba2 1303 	umull	r1, r3, r2, r3
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001a2:	2001      	movs	r0, #1
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 80001a4:	0c9b      	lsrs	r3, r3, #18
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80001a6:	2400      	movs	r4, #0
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001a8:	4601      	mov	r1, r0
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 80001aa:	f8ad 3010 	strh.w	r3, [sp, #16]
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TimeBaseStructure.TIM_Period = 1000 - 1;
 80001ae:	f240 33e7 	movw	r3, #999	; 0x3e7
 80001b2:	9305      	str	r3, [sp, #20]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80001b4:	f8ad 4012 	strh.w	r4, [sp, #18]
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80001b8:	f8ad 4018 	strh.w	r4, [sp, #24]
	TimeBaseStructure.TIM_RepetitionCounter = 0;
 80001bc:	f88d 401a 	strb.w	r4, [sp, #26]

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001c0:	f001 feca 	bl	8001f58 <RCC_APB1PeriphClockCmd>

	/* Time base configuration */
	TIM_TimeBaseInit(TIM2, &TimeBaseStructure);
 80001c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001c8:	a904      	add	r1, sp, #16
 80001ca:	f002 fa77 	bl	80026bc <TIM_TimeBaseInit>
//  TIM_SelectOnePulseMode(TIM2, TIM_OPMode_Repetitive);
	TIM_SetCounter(TIM2, 0);
 80001ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001d2:	4621      	mov	r1, r4
 80001d4:	f002 fad4 	bl	8002780 <TIM_SetCounter>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80001d8:	2101      	movs	r1, #1
 80001da:	460a      	mov	r2, r1
 80001dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001e0:	f002 ff62 	bl	80030a8 <TIM_ITConfig>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001e4:	2601      	movs	r6, #1
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001e6:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80001e8:	a807      	add	r0, sp, #28
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001ea:	f88d 301c 	strb.w	r3, [sp, #28]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80001ee:	f88d 401d 	strb.w	r4, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001f2:	f88d 601e 	strb.w	r6, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80001f6:	f88d 601f 	strb.w	r6, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);
 80001fa:	f001 f94b 	bl	8001494 <NVIC_Init>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 80001fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000202:	4631      	mov	r1, r6
 8000204:	f002 fb08 	bl	8002818 <TIM_Cmd>

	__counter_micros = 0;
 8000208:	f640 12a4 	movw	r2, #2468	; 0x9a4
	__counter_millis = 0;
 800020c:	f640 13a8 	movw	r3, #2472	; 0x9a8
	NVIC_Init(&NVIC_InitStructure);

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);

	__counter_micros = 0;
 8000210:	f2c2 0200 	movt	r2, #8192	; 0x2000
	__counter_millis = 0;
 8000214:	f2c2 0300 	movt	r3, #8192	; 0x2000
	NVIC_Init(&NVIC_InitStructure);

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);

	__counter_micros = 0;
 8000218:	6014      	str	r4, [r2, #0]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800021a:	4625      	mov	r5, r4

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);

	__counter_micros = 0;
	__counter_millis = 0;
 800021c:	601c      	str	r4, [r3, #0]
}
 800021e:	b008      	add	sp, #32
 8000220:	bd70      	pop	{r4, r5, r6, pc}
 8000222:	bf00      	nop

08000224 <micros>:

uint32_t micros(void) {
 8000224:	b508      	push	{r3, lr}
	return __counter_micros + TIM_GetCounter(TIM2 );
 8000226:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800022a:	f002 faad 	bl	8002788 <TIM_GetCounter>
 800022e:	f640 13a4 	movw	r3, #2468	; 0x9a4
 8000232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000236:	681b      	ldr	r3, [r3, #0]
}
 8000238:	18c0      	adds	r0, r0, r3
 800023a:	bd08      	pop	{r3, pc}

0800023c <millis>:

uint32_t millis(void) {
	return __counter_millis;
 800023c:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8000240:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000244:	6818      	ldr	r0, [r3, #0]
}
 8000246:	4770      	bx	lr

08000248 <delay_ms>:
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000248:	4b03      	ldr	r3, [pc, #12]	; (8000258 <delay_ms+0x10>)
 800024a:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
 800024c:	1882      	adds	r2, r0, r2
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 800024e:	6819      	ldr	r1, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	while (millis() < wtill)
 8000250:	428a      	cmp	r2, r1
 8000252:	d8fc      	bhi.n	800024e <delay_ms+0x6>
		;
}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	200009a8 	.word	0x200009a8

0800025c <delay_us>:

void delay_us(uint32_t w) {
 800025c:	b510      	push	{r4, lr}
 800025e:	4604      	mov	r4, r0
	uint32_t wtill = micros() + w;
 8000260:	f7ff ffe0 	bl	8000224 <micros>
 8000264:	1904      	adds	r4, r0, r4
	while (micros() < wtill)
 8000266:	f7ff ffdd 	bl	8000224 <micros>
 800026a:	4284      	cmp	r4, r0
 800026c:	d8fb      	bhi.n	8000266 <delay_us+0xa>
		;
}
 800026e:	bd10      	pop	{r4, pc}

08000270 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000270:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
 8000272:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000276:	2101      	movs	r1, #1
 8000278:	f002 ff2c 	bl	80030d4 <TIM_GetITStatus>
 800027c:	b168      	cbz	r0, 800029a <TIM2_IRQHandler+0x2a>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
 800027e:	2101      	movs	r1, #1
 8000280:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000284:	f002 ff32 	bl	80030ec <TIM_ClearITPendingBit>
		__counter_micros += 1000;
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <TIM2_IRQHandler+0x2c>)
		__counter_millis += 1;
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <TIM2_IRQHandler+0x30>)
}

void TIM2_IRQHandler(void) {
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
		__counter_micros += 1000;
 800028c:	6811      	ldr	r1, [r2, #0]
 800028e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8000292:	6011      	str	r1, [r2, #0]
		__counter_millis += 1;
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	3201      	adds	r2, #1
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	bd08      	pop	{r3, pc}
 800029c:	200009a4 	.word	0x200009a4
 80002a0:	200009a8 	.word	0x200009a8

080002a4 <PinPort>:
		GPIO_Pin_4, GPIO_Pin_5, GPIO_Pin_6, GPIO_Pin_7, GPIO_Pin_8, GPIO_Pin_9,
		GPIO_Pin_10, GPIO_Pin_11, GPIO_Pin_12, GPIO_Pin_13, GPIO_Pin_14,
		GPIO_Pin_15, GPIO_Pin_All };

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
 80002a4:	f240 0300 	movw	r3, #0
 80002a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002ac:	f3c0 2003 	ubfx	r0, r0, #8, #4
}
 80002b0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop

080002b8 <PinBit>:

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002b8:	2301      	movs	r3, #1
 80002ba:	f000 000f 	and.w	r0, r0, #15
 80002be:	fa13 f000 	lsls.w	r0, r3, r0
}
 80002c2:	b280      	uxth	r0, r0
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop

080002c8 <PinSource>:

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}
 80002c8:	f000 000f 	and.w	r0, r0, #15
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <pinMode>:

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 80002d2:	f240 0400 	movw	r4, #0
 80002d6:	f3c0 2503 	ubfx	r5, r0, #8, #4
 80002da:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80002de:	eb04 0385 	add.w	r3, r4, r5, lsl #2

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002e2:	b083      	sub	sp, #12
 80002e4:	460f      	mov	r7, r1
 80002e6:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 80002e8:	2101      	movs	r1, #1
 80002ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80002ec:	f001 fe0a 	bl	8001f04 <RCC_AHB1PeriphClockCmd>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002f0:	f006 060f 	and.w	r6, r6, #15
 80002f4:	2301      	movs	r3, #1
 80002f6:	fa13 f606 	lsls.w	r6, r3, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002fa:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80002fc:	b2b6      	uxth	r6, r6
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002fe:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000302:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 8000306:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 800030a:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800030c:	2302      	movs	r3, #2
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 800030e:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
 8000310:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000314:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 8000318:	f001 f9b8 	bl	800168c <GPIO_Init>
}
 800031c:	b003      	add	sp, #12
 800031e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000320 <digitalWrite>:

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000320:	f3c0 2203 	ubfx	r2, r0, #8, #4
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000324:	f000 000f 	and.w	r0, r0, #15
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
 8000328:	b939      	cbnz	r1, 800033a <digitalWrite+0x1a>
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <digitalWrite+0x2c>)
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800032c:	2101      	movs	r1, #1
 800032e:	4081      	lsls	r1, r0
void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000330:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000334:	b289      	uxth	r1, r1
 8000336:	f001 ba37 	b.w	80017a8 <GPIO_ResetBits>
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 800033a:	4b04      	ldr	r3, [pc, #16]	; (800034c <digitalWrite+0x2c>)
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800033c:	2101      	movs	r1, #1
 800033e:	4081      	lsls	r1, r0
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000340:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000344:	b289      	uxth	r1, r1
 8000346:	f001 ba2d 	b.w	80017a4 <GPIO_SetBits>
 800034a:	bf00      	nop
 800034c:	20000000 	.word	0x20000000

08000350 <digitalRead>:
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000350:	f3c0 2203 	ubfx	r2, r0, #8, #4
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 8000354:	b508      	push	{r3, lr}
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 8000356:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <digitalRead+0x40>)
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000358:	f000 010f 	and.w	r1, r0, #15
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 800035c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000360:	2301      	movs	r3, #1
 8000362:	fa13 f101 	lsls.w	r1, r3, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000366:	6802      	ldr	r2, [r0, #0]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000368:	b289      	uxth	r1, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 800036a:	fa11 f303 	lsls.w	r3, r1, r3
 800036e:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 8000372:	b2db      	uxtb	r3, r3
 8000374:	2b01      	cmp	r3, #1
 8000376:	d005      	beq.n	8000384 <digitalRead+0x34>
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000378:	f001 fa00 	bl	800177c <GPIO_ReadInputDataBit>
 800037c:	3000      	adds	r0, #0
 800037e:	bf18      	it	ne
 8000380:	2001      	movne	r0, #1
}
 8000382:	bd08      	pop	{r3, pc}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
	if (mode == GPIO_Mode_OUT)
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000384:	f001 fa04 	bl	8001790 <GPIO_ReadOutputDataBit>
 8000388:	3000      	adds	r0, #0
 800038a:	bf18      	it	ne
 800038c:	2001      	movne	r0, #1
 800038e:	bd08      	pop	{r3, pc}
 8000390:	20000000 	.word	0x20000000

08000394 <GPIOMode>:
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ( port == GPIOB ) {
 8000398:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800039c:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80003a0:	42b0      	cmp	r0, r6
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 80003a2:	b082      	sub	sp, #8
 80003a4:	4604      	mov	r4, r0
 80003a6:	460d      	mov	r5, r1
 80003a8:	4617      	mov	r7, r2
 80003aa:	4698      	mov	r8, r3
	if ( port == GPIOB ) {
 80003ac:	d047      	beq.n	800043e <GPIOMode+0xaa>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
 80003ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d046      	beq.n	8000448 <GPIOMode+0xb4>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
 80003ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80003be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003c2:	4298      	cmp	r0, r3
 80003c4:	d045      	beq.n	8000452 <GPIOMode+0xbe>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
 80003c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003ce:	4298      	cmp	r0, r3
 80003d0:	d044      	beq.n	800045c <GPIOMode+0xc8>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
 80003d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80003d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003da:	4298      	cmp	r0, r3
 80003dc:	d043      	beq.n	8000466 <GPIOMode+0xd2>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
 80003de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80003e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d042      	beq.n	8000470 <GPIOMode+0xdc>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	} else if ( port == GPIOH ) {
 80003ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80003ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003f2:	4298      	cmp	r0, r3
 80003f4:	d041      	beq.n	800047a <GPIOMode+0xe6>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
 80003f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003fe:	4298      	cmp	r0, r3
 8000400:	d040      	beq.n	8000484 <GPIOMode+0xf0>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
	} else if ( port == GPIOA ) {
 8000402:	2300      	movs	r3, #0
 8000404:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000408:	4298      	cmp	r0, r3
 800040a:	d013      	beq.n	8000434 <GPIOMode+0xa0>

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 800040c:	f89d 3020 	ldrb.w	r3, [sp, #32]
	}
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
 8000410:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 8000412:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8000416:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
 800041a:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 800041e:	4620      	mov	r0, r4
 8000420:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8000422:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 8000426:	f88d 8005 	strb.w	r8, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 800042a:	f001 f92f 	bl	800168c <GPIO_Init>
}
 800042e:	b002      	add	sp, #8
 8000430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ( port == GPIOH ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
	} else if ( port == GPIOA ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000434:	2001      	movs	r0, #1
 8000436:	4601      	mov	r1, r0
 8000438:	f001 fd64 	bl	8001f04 <RCC_AHB1PeriphClockCmd>
 800043c:	e7e6      	b.n	800040c <GPIOMode+0x78>
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800043e:	2002      	movs	r0, #2
 8000440:	2101      	movs	r1, #1
 8000442:	f001 fd5f 	bl	8001f04 <RCC_AHB1PeriphClockCmd>
 8000446:	e7e1      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOC ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000448:	2004      	movs	r0, #4
 800044a:	2101      	movs	r1, #1
 800044c:	f001 fd5a 	bl	8001f04 <RCC_AHB1PeriphClockCmd>
 8000450:	e7dc      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOD ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000452:	2008      	movs	r0, #8
 8000454:	2101      	movs	r1, #1
 8000456:	f001 fd55 	bl	8001f04 <RCC_AHB1PeriphClockCmd>
 800045a:	e7d7      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOE ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800045c:	2010      	movs	r0, #16
 800045e:	2101      	movs	r1, #1
 8000460:	f001 fd50 	bl	8001f04 <RCC_AHB1PeriphClockCmd>
 8000464:	e7d2      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOF ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000466:	2020      	movs	r0, #32
 8000468:	2101      	movs	r1, #1
 800046a:	f001 fd4b 	bl	8001f04 <RCC_AHB1PeriphClockCmd>
 800046e:	e7cd      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOG ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000470:	2040      	movs	r0, #64	; 0x40
 8000472:	2101      	movs	r1, #1
 8000474:	f001 fd46 	bl	8001f04 <RCC_AHB1PeriphClockCmd>
 8000478:	e7c8      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOH ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800047a:	2080      	movs	r0, #128	; 0x80
 800047c:	2101      	movs	r1, #1
 800047e:	f001 fd41 	bl	8001f04 <RCC_AHB1PeriphClockCmd>
 8000482:	e7c3      	b.n	800040c <GPIOMode+0x78>
	} else if ( port == GPIOI ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000484:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000488:	2101      	movs	r1, #1
 800048a:	f001 fd3b 	bl	8001f04 <RCC_AHB1PeriphClockCmd>
 800048e:	e7bd      	b.n	800040c <GPIOMode+0x78>

08000490 <GPIOWrite>:
	GPIO_Init(port, &GPIO_InitStructure);
}


inline void GPIOWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 8000490:	f001 b992 	b.w	80017b8 <GPIO_Write>

08000494 <i2c_begin>:
} CommDirection;

I2C_Status i2c1_status;
CommDirection i2c1_direction;

boolean i2c_begin(uint32_t clkspeed) {
 8000494:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8000496:	2101      	movs	r1, #1
} CommDirection;

I2C_Status i2c1_status;
CommDirection i2c1_direction;

boolean i2c_begin(uint32_t clkspeed) {
 8000498:	b086      	sub	sp, #24
 800049a:	4605      	mov	r5, r0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 800049c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80004a0:	f001 fd5a 	bl	8001f58 <RCC_APB1PeriphClockCmd>
	/* GPIO Periph clock enable */
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
	GPIOMode(PinPort(PB6), PinBit(PB6), GPIO_Mode_AF, GPIO_Speed_50MHz,
 80004a4:	f240 2006 	movw	r0, #518	; 0x206
 80004a8:	f7ff fefc 	bl	80002a4 <PinPort>
 80004ac:	4606      	mov	r6, r0
 80004ae:	f240 2006 	movw	r0, #518	; 0x206
 80004b2:	f7ff ff01 	bl	80002b8 <PinBit>
 80004b6:	2202      	movs	r2, #2
 80004b8:	2401      	movs	r4, #1
 80004ba:	4601      	mov	r1, r0
 80004bc:	4613      	mov	r3, r2
 80004be:	4630      	mov	r0, r6
 80004c0:	9400      	str	r4, [sp, #0]
 80004c2:	9401      	str	r4, [sp, #4]
 80004c4:	f7ff ff66 	bl	8000394 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);
	GPIOMode(PinPort(PB9), PinBit(PB9), GPIO_Mode_AF, GPIO_Speed_50MHz,
 80004c8:	f240 2009 	movw	r0, #521	; 0x209
 80004cc:	f7ff feea 	bl	80002a4 <PinPort>
 80004d0:	4606      	mov	r6, r0
 80004d2:	f240 2009 	movw	r0, #521	; 0x209
 80004d6:	f7ff feef 	bl	80002b8 <PinBit>
 80004da:	2202      	movs	r2, #2
 80004dc:	4613      	mov	r3, r2
 80004de:	4601      	mov	r1, r0
 80004e0:	4630      	mov	r0, r6
 80004e2:	9400      	str	r4, [sp, #0]
 80004e4:	9401      	str	r4, [sp, #4]
 80004e6:	f7ff ff55 	bl	8000394 <GPIOMode>
			GPIO_OType_OD, GPIO_PuPd_UP);

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
 80004ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80004ee:	2106      	movs	r1, #6
 80004f0:	2204      	movs	r2, #4
 80004f2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80004f6:	f001 f965 	bl	80017c4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );
 80004fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80004fe:	2109      	movs	r1, #9
 8000500:	2204      	movs	r2, #4
 8000502:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000506:	f001 f95d 	bl	80017c4 <GPIO_PinAFConfig>
	 GPIO_Init(GPIOB, &GPIO_InitStructure);
	 */
//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif
	switch (clkspeed) {
 800050a:	f248 63a0 	movw	r3, #34464	; 0x86a0
 800050e:	f364 431f 	bfi	r3, r4, #16, #16
 8000512:	429d      	cmp	r5, r3
 8000514:	d00b      	beq.n	800052e <i2c_begin+0x9a>
 8000516:	f44f 53d4 	mov.w	r3, #6784	; 0x1a80
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 800051a:	f248 62a0 	movw	r2, #34464	; 0x86a0
	 GPIO_Init(GPIOB, &GPIO_InitStructure);
	 */
//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif
	switch (clkspeed) {
 800051e:	f2c0 0306 	movt	r3, #6
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 8000522:	f364 421f 	bfi	r2, r4, #16, #16
 8000526:	429d      	cmp	r5, r3
 8000528:	bf0c      	ite	eq
 800052a:	461d      	moveq	r5, r3
 800052c:	4615      	movne	r5, r2
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 800052e:	a906      	add	r1, sp, #24
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000530:	f44f 4480 	mov.w	r4, #16384	; 0x4000
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8000534:	2300      	movs	r3, #0
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 8000536:	f841 5d10 	str.w	r5, [r1, #-16]!
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800053a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800053e:	461d      	mov	r5, r3
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 8000540:	0420      	lsls	r0, r4, #16
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8000542:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000546:	f8ad 300e 	strh.w	r3, [sp, #14]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 800054a:	f440 40a8 	orr.w	r0, r0, #21504	; 0x5400
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800054e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000552:	f8ad 3012 	strh.w	r3, [sp, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000556:	f8ad 4014 	strh.w	r4, [sp, #20]
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 800055a:	f001 f983 	bl	8001864 <I2C_Init>
	/* I2C Peripheral Enable */
	I2C_Cmd(I2C1, ENABLE);
 800055e:	0420      	lsls	r0, r4, #16
 8000560:	f440 40a8 	orr.w	r0, r0, #21504	; 0x5400
 8000564:	2101      	movs	r1, #1
 8000566:	f001 f9fb 	bl	8001960 <I2C_Cmd>

	i2c1_status = NOT_READY;
 800056a:	4b03      	ldr	r3, [pc, #12]	; (8000578 <i2c_begin+0xe4>)
 800056c:	20ff      	movs	r0, #255	; 0xff
 800056e:	7018      	strb	r0, [r3, #0]
	i2c1_direction = NOT_DEFINED;
 8000570:	4b02      	ldr	r3, [pc, #8]	; (800057c <i2c_begin+0xe8>)
 8000572:	701d      	strb	r5, [r3, #0]

	return true;
}
 8000574:	b006      	add	sp, #24
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	200009ad 	.word	0x200009ad
 800057c:	200009ac 	.word	0x200009ac

08000580 <i2c_transmit>:

boolean i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
 8000580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000584:	b083      	sub	sp, #12
 8000586:	4607      	mov	r7, r0
 8000588:	4688      	mov	r8, r1
 800058a:	4691      	mov	r9, r2
	uint16_t i;
	uint32_t resigmillis = millis() + 100;

	i2c1_direction = TRANSMITTER;
 800058c:	4e4c      	ldr	r6, [pc, #304]	; (80006c0 <i2c_transmit+0x140>)
	//
	i2c1_status = NOT_READY;
 800058e:	4d4d      	ldr	r5, [pc, #308]	; (80006c4 <i2c_transmit+0x144>)
	return true;
}

boolean i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
	uint16_t i;
	uint32_t resigmillis = millis() + 100;
 8000590:	f7ff fe54 	bl	800023c <millis>

	i2c1_direction = TRANSMITTER;
 8000594:	2301      	movs	r3, #1
 8000596:	7033      	strb	r3, [r6, #0]
	//
	i2c1_status = NOT_READY;
 8000598:	23ff      	movs	r3, #255	; 0xff
	return true;
}

boolean i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
	uint16_t i;
	uint32_t resigmillis = millis() + 100;
 800059a:	f100 0464 	add.w	r4, r0, #100	; 0x64

	i2c1_direction = TRANSMITTER;
	//
	i2c1_status = NOT_READY;
 800059e:	702b      	strb	r3, [r5, #0]
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
 80005a0:	e003      	b.n	80005aa <i2c_transmit+0x2a>
		if (millis() > resigmillis)
 80005a2:	f7ff fe4b 	bl	800023c <millis>
 80005a6:	4284      	cmp	r4, r0
 80005a8:	d37f      	bcc.n	80006aa <i2c_transmit+0x12a>
	uint32_t resigmillis = millis() + 100;

	i2c1_direction = TRANSMITTER;
	//
	i2c1_status = NOT_READY;
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
 80005aa:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80005ae:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80005b2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80005b6:	f001 fb13 	bl	8001be0 <I2C_GetFlagStatus>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2800      	cmp	r0, #0
 80005be:	d1f0      	bne.n	80005a2 <i2c_transmit+0x22>
			return false;
	}
	i2c1_status = READY;

	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 80005c0:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80005c4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80005c8:	2101      	movs	r1, #1
	i2c1_status = NOT_READY;
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = READY;
 80005ca:	702b      	strb	r3, [r5, #0]

	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 80005cc:	f001 f9d6 	bl	800197c <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
 80005d0:	e003      	b.n	80005da <i2c_transmit+0x5a>
		if (millis() > resigmillis)
 80005d2:	f7ff fe33 	bl	800023c <millis>
 80005d6:	4284      	cmp	r4, r0
 80005d8:	d36b      	bcc.n	80006b2 <i2c_transmit+0x132>
	i2c1_status = READY;

	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
 80005da:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80005de:	2101      	movs	r1, #1
 80005e0:	f2c0 0103 	movt	r1, #3
 80005e4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80005e8:	f001 fae4 	bl	8001bb4 <I2C_CheckEvent>
 80005ec:	4682      	mov	sl, r0
 80005ee:	2800      	cmp	r0, #0
 80005f0:	d0ef      	beq.n	80005d2 <i2c_transmit+0x52>
			return false;
	}
	i2c1_status = START_ISSUED;

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 80005f2:	0079      	lsls	r1, r7, #1
 80005f4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = START_ISSUED;
 80005f8:	2301      	movs	r3, #1

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 80005fa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80005fe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8000602:	2200      	movs	r2, #0
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = START_ISSUED;
 8000604:	702b      	strb	r3, [r5, #0]

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8000606:	f001 f9d5 	bl	80019b4 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
 800060a:	e003      	b.n	8000614 <i2c_transmit+0x94>
		if (millis() > resigmillis)
 800060c:	f7ff fe16 	bl	800023c <millis>
 8000610:	4284      	cmp	r4, r0
 8000612:	d350      	bcc.n	80006b6 <i2c_transmit+0x136>
	i2c1_status = START_ISSUED;

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
 8000614:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000618:	2182      	movs	r1, #130	; 0x82
 800061a:	f2c0 0107 	movt	r1, #7
 800061e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000622:	f001 fac7 	bl	8001bb4 <I2C_CheckEvent>
 8000626:	4607      	mov	r7, r0
 8000628:	2800      	cmp	r0, #0
 800062a:	d0ef      	beq.n	800060c <i2c_transmit+0x8c>
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = DST_ADDRESS_SENT;
 800062c:	2302      	movs	r3, #2
 800062e:	702b      	strb	r3, [r5, #0]

	resigmillis = millis() + 100;
 8000630:	f7ff fe04 	bl	800023c <millis>
 8000634:	f100 0464 	add.w	r4, r0, #100	; 0x64
	for (i = 0; i < length; i++) {
 8000638:	f1b9 0f00 	cmp.w	r9, #0
 800063c:	d027      	beq.n	800068e <i2c_transmit+0x10e>
 800063e:	2700      	movs	r7, #0
		I2C_SendData(I2C1, data[i]);
		i2c1_status = BYTE_TRANSMITTING;
 8000640:	f04f 0a04 	mov.w	sl, #4
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
			if (millis() > resigmillis)
				return false;
		}
		i2c1_status = BYTE_TRANSMITTED;
 8000644:	f04f 0b05 	mov.w	fp, #5
	}
	i2c1_status = DST_ADDRESS_SENT;

	resigmillis = millis() + 100;
	for (i = 0; i < length; i++) {
		I2C_SendData(I2C1, data[i]);
 8000648:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800064c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000650:	f818 1007 	ldrb.w	r1, [r8, r7]
 8000654:	f001 fa46 	bl	8001ae4 <I2C_SendData>
		i2c1_status = BYTE_TRANSMITTING;
 8000658:	f885 a000 	strb.w	sl, [r5]
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 800065c:	e005      	b.n	800066a <i2c_transmit+0xea>
			if (millis() > resigmillis)
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	f7ff fdec 	bl	800023c <millis>
 8000664:	4284      	cmp	r4, r0
 8000666:	9b01      	ldr	r3, [sp, #4]
 8000668:	d327      	bcc.n	80006ba <i2c_transmit+0x13a>
	resigmillis = millis() + 100;
	for (i = 0; i < length; i++) {
		I2C_SendData(I2C1, data[i]);
		i2c1_status = BYTE_TRANSMITTING;
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 800066a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800066e:	2184      	movs	r1, #132	; 0x84
 8000670:	f2c0 0107 	movt	r1, #7
 8000674:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000678:	f001 fa9c 	bl	8001bb4 <I2C_CheckEvent>
 800067c:	4603      	mov	r3, r0
 800067e:	2800      	cmp	r0, #0
 8000680:	d0ed      	beq.n	800065e <i2c_transmit+0xde>
			if (millis() > resigmillis)
				return false;
		}
		i2c1_status = BYTE_TRANSMITTED;
 8000682:	3701      	adds	r7, #1
			return false;
	}
	i2c1_status = DST_ADDRESS_SENT;

	resigmillis = millis() + 100;
	for (i = 0; i < length; i++) {
 8000684:	b2bb      	uxth	r3, r7
 8000686:	4599      	cmp	r9, r3
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
			if (millis() > resigmillis)
				return false;
		}
		i2c1_status = BYTE_TRANSMITTED;
 8000688:	f885 b000 	strb.w	fp, [r5]
			return false;
	}
	i2c1_status = DST_ADDRESS_SENT;

	resigmillis = millis() + 100;
	for (i = 0; i < length; i++) {
 800068c:	d8dc      	bhi.n	8000648 <i2c_transmit+0xc8>
		}
		i2c1_status = BYTE_TRANSMITTED;
	}
	i2c1_status = TRANSMISSION_COMPLETED;

	I2C_GenerateSTOP(I2C1, ENABLE);
 800068e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
			if (millis() > resigmillis)
				return false;
		}
		i2c1_status = BYTE_TRANSMITTED;
	}
	i2c1_status = TRANSMISSION_COMPLETED;
 8000692:	2306      	movs	r3, #6

	I2C_GenerateSTOP(I2C1, ENABLE);
 8000694:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000698:	2101      	movs	r1, #1
			if (millis() > resigmillis)
				return false;
		}
		i2c1_status = BYTE_TRANSMITTED;
	}
	i2c1_status = TRANSMISSION_COMPLETED;
 800069a:	702b      	strb	r3, [r5, #0]

	I2C_GenerateSTOP(I2C1, ENABLE);
 800069c:	f001 f97c 	bl	8001998 <I2C_GenerateSTOP>
	i2c1_status = NOT_READY;
 80006a0:	20ff      	movs	r0, #255	; 0xff
	i2c1_direction = NOT_DEFINED;
 80006a2:	2300      	movs	r3, #0
		i2c1_status = BYTE_TRANSMITTED;
	}
	i2c1_status = TRANSMISSION_COMPLETED;

	I2C_GenerateSTOP(I2C1, ENABLE);
	i2c1_status = NOT_READY;
 80006a4:	7028      	strb	r0, [r5, #0]
	i2c1_direction = NOT_DEFINED;
 80006a6:	7033      	strb	r3, [r6, #0]

	return true;
 80006a8:	e000      	b.n	80006ac <i2c_transmit+0x12c>
	i2c1_direction = TRANSMITTER;
	//
	i2c1_status = NOT_READY;
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
		if (millis() > resigmillis)
			return false;
 80006aa:	2000      	movs	r0, #0
	I2C_GenerateSTOP(I2C1, ENABLE);
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;

	return true;
}
 80006ac:	b003      	add	sp, #12
 80006ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
		if (millis() > resigmillis)
			return false;
 80006b2:	4650      	mov	r0, sl
 80006b4:	e7fa      	b.n	80006ac <i2c_transmit+0x12c>
	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
		if (millis() > resigmillis)
			return false;
 80006b6:	4638      	mov	r0, r7
 80006b8:	e7f8      	b.n	80006ac <i2c_transmit+0x12c>
		I2C_SendData(I2C1, data[i]);
		i2c1_status = BYTE_TRANSMITTING;
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
			if (millis() > resigmillis)
				return false;
 80006ba:	4618      	mov	r0, r3
 80006bc:	e7f6      	b.n	80006ac <i2c_transmit+0x12c>
 80006be:	bf00      	nop
 80006c0:	200009ac 	.word	0x200009ac
 80006c4:	200009ad 	.word	0x200009ad

080006c8 <i2c_requestFrom>:
	i2c1_direction = NOT_DEFINED;

	return true;
}

boolean i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80006c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006cc:	4699      	mov	r9, r3
 80006ce:	4604      	mov	r4, r0
 80006d0:	460d      	mov	r5, r1
 80006d2:	4692      	mov	sl, r2
	uint16_t i;
	uint32_t resigmillis = millis() + 100;

	i2c1_direction = RECEIVER;
 80006d4:	f8df 8248 	ldr.w	r8, [pc, #584]	; 8000920 <i2c_requestFrom+0x258>
	//
	i2c1_status = NOT_READY;
 80006d8:	4f90      	ldr	r7, [pc, #576]	; (800091c <i2c_requestFrom+0x254>)
	return true;
}

boolean i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
	uint16_t i;
	uint32_t resigmillis = millis() + 100;
 80006da:	f7ff fdaf 	bl	800023c <millis>

	i2c1_direction = RECEIVER;
 80006de:	2302      	movs	r3, #2
 80006e0:	f888 3000 	strb.w	r3, [r8]
	//
	i2c1_status = NOT_READY;
 80006e4:	23ff      	movs	r3, #255	; 0xff
	return true;
}

boolean i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
	uint16_t i;
	uint32_t resigmillis = millis() + 100;
 80006e6:	f100 0664 	add.w	r6, r0, #100	; 0x64

	i2c1_direction = RECEIVER;
	//
	i2c1_status = NOT_READY;
 80006ea:	703b      	strb	r3, [r7, #0]
	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
 80006ec:	e004      	b.n	80006f8 <i2c_requestFrom+0x30>
		if (millis() > resigmillis)
 80006ee:	f7ff fda5 	bl	800023c <millis>
 80006f2:	4286      	cmp	r6, r0
 80006f4:	f0c0 80fc 	bcc.w	80008f0 <i2c_requestFrom+0x228>

	i2c1_direction = RECEIVER;
	//
	i2c1_status = NOT_READY;
	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
 80006f8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80006fc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000700:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000704:	f001 fa6c 	bl	8001be0 <I2C_GetFlagStatus>
 8000708:	4603      	mov	r3, r0
 800070a:	2800      	cmp	r0, #0
 800070c:	d1ef      	bne.n	80006ee <i2c_requestFrom+0x26>
			return false;
	}
	i2c1_status = READY;

	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 800070e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000712:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000716:	2101      	movs	r1, #1
	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = READY;
 8000718:	703b      	strb	r3, [r7, #0]

	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 800071a:	f001 f92f 	bl	800197c <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
 800071e:	e004      	b.n	800072a <i2c_requestFrom+0x62>
		if (millis() > resigmillis)
 8000720:	f7ff fd8c 	bl	800023c <millis>
 8000724:	4286      	cmp	r6, r0
 8000726:	f0c0 80e6 	bcc.w	80008f6 <i2c_requestFrom+0x22e>
	i2c1_status = READY;

	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
 800072a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800072e:	2101      	movs	r1, #1
 8000730:	f2c0 0103 	movt	r1, #3
 8000734:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000738:	f001 fa3c 	bl	8001bb4 <I2C_CheckEvent>
 800073c:	4683      	mov	fp, r0
 800073e:	2800      	cmp	r0, #0
 8000740:	d0ee      	beq.n	8000720 <i2c_requestFrom+0x58>
			return false;
	}
	i2c1_status = START_ISSUED;

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8000742:	0064      	lsls	r4, r4, #1
 8000744:	b2e4      	uxtb	r4, r4
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = START_ISSUED;
 8000746:	2301      	movs	r3, #1

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8000748:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800074c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000750:	4621      	mov	r1, r4
 8000752:	2200      	movs	r2, #0
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = START_ISSUED;
 8000754:	703b      	strb	r3, [r7, #0]

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8000756:	f001 f92d 	bl	80019b4 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
 800075a:	e004      	b.n	8000766 <i2c_requestFrom+0x9e>
		if (millis() > resigmillis)
 800075c:	f7ff fd6e 	bl	800023c <millis>
 8000760:	4286      	cmp	r6, r0
 8000762:	f0c0 80c8 	bcc.w	80008f6 <i2c_requestFrom+0x22e>
	i2c1_status = START_ISSUED;

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
 8000766:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800076a:	2182      	movs	r1, #130	; 0x82
 800076c:	f2c0 0107 	movt	r1, #7
 8000770:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000774:	f001 fa1e 	bl	8001bb4 <I2C_CheckEvent>
 8000778:	4683      	mov	fp, r0
 800077a:	2800      	cmp	r0, #0
 800077c:	d0ee      	beq.n	800075c <i2c_requestFrom+0x94>
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = DST_ADDRESS_SENT;
 800077e:	2302      	movs	r3, #2

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(I2C1, req);
 8000780:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = DST_ADDRESS_SENT;
 8000784:	703b      	strb	r3, [r7, #0]

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(I2C1, req);
 8000786:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800078a:	4629      	mov	r1, r5
 800078c:	f001 f9aa 	bl	8001ae4 <I2C_SendData>
	i2c1_status = BYTE_TRANSMITTING;
 8000790:	2304      	movs	r3, #4
 8000792:	703b      	strb	r3, [r7, #0]
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 8000794:	e004      	b.n	80007a0 <i2c_requestFrom+0xd8>
		if (millis() > resigmillis)
 8000796:	f7ff fd51 	bl	800023c <millis>
 800079a:	4286      	cmp	r6, r0
 800079c:	f0c0 80ae 	bcc.w	80008fc <i2c_requestFrom+0x234>

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(I2C1, req);
	i2c1_status = BYTE_TRANSMITTING;
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
 80007a0:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80007a4:	2184      	movs	r1, #132	; 0x84
 80007a6:	f2c0 0107 	movt	r1, #7
 80007aa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007ae:	f001 fa01 	bl	8001bb4 <I2C_CheckEvent>
 80007b2:	4605      	mov	r5, r0
 80007b4:	2800      	cmp	r0, #0
 80007b6:	d0ee      	beq.n	8000796 <i2c_requestFrom+0xce>
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = TRANSMISSION_COMPLETED;
 80007b8:	2306      	movs	r3, #6
 80007ba:	703b      	strb	r3, [r7, #0]

	//	  I2C_GenerateSTOP(I2C1, ENABLE);

	resigmillis = millis() + 100;
 80007bc:	f7ff fd3e 	bl	800023c <millis>
 80007c0:	f100 0564 	add.w	r5, r0, #100	; 0x64
	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 80007c4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80007c8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007cc:	2101      	movs	r1, #1
 80007ce:	f001 f8d5 	bl	800197c <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
 80007d2:	e004      	b.n	80007de <i2c_requestFrom+0x116>
		if (millis() > resigmillis)
 80007d4:	f7ff fd32 	bl	800023c <millis>
 80007d8:	4285      	cmp	r5, r0
 80007da:	f0c0 8092 	bcc.w	8000902 <i2c_requestFrom+0x23a>

	resigmillis = millis() + 100;
	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
 80007de:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80007e2:	2101      	movs	r1, #1
 80007e4:	f2c0 0103 	movt	r1, #3
 80007e8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007ec:	f001 f9e2 	bl	8001bb4 <I2C_CheckEvent>
 80007f0:	4606      	mov	r6, r0
 80007f2:	2800      	cmp	r0, #0
 80007f4:	d0ee      	beq.n	80007d4 <i2c_requestFrom+0x10c>
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = RESTART_ISSUED;
 80007f6:	2307      	movs	r3, #7

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
 80007f8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80007fc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000800:	4621      	mov	r1, r4
 8000802:	2201      	movs	r2, #1
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = RESTART_ISSUED;
 8000804:	703b      	strb	r3, [r7, #0]

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
 8000806:	f001 f8d5 	bl	80019b4 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED )) {
 800080a:	e003      	b.n	8000814 <i2c_requestFrom+0x14c>
		if (millis() > resigmillis)
 800080c:	f7ff fd16 	bl	800023c <millis>
 8000810:	4285      	cmp	r5, r0
 8000812:	d379      	bcc.n	8000908 <i2c_requestFrom+0x240>
	i2c1_status = RESTART_ISSUED;

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED )) {
 8000814:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000818:	2102      	movs	r1, #2
 800081a:	f2c0 0103 	movt	r1, #3
 800081e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000822:	f001 f9c7 	bl	8001bb4 <I2C_CheckEvent>
 8000826:	4604      	mov	r4, r0
 8000828:	2800      	cmp	r0, #0
 800082a:	d0ef      	beq.n	800080c <i2c_requestFrom+0x144>
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 800082c:	f1b9 0f01 	cmp.w	r9, #1
 8000830:	d923      	bls.n	800087a <i2c_requestFrom+0x1b2>
 8000832:	4654      	mov	r4, sl
	i2c1_direction = NOT_DEFINED;

	return true;
}

boolean i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 8000834:	1c63      	adds	r3, r4, #1
 8000836:	f1a9 0902 	sub.w	r9, r9, #2
 800083a:	fa13 f989 	uxtah	r9, r3, r9
			return false;
	}
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
		i2c1_status = RECEIVE_BYTE_READY;
 800083e:	2608      	movs	r6, #8
 8000840:	703e      	strb	r6, [r7, #0]
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 8000842:	e003      	b.n	800084c <i2c_requestFrom+0x184>
			if (millis() > resigmillis)
 8000844:	f7ff fcfa 	bl	800023c <millis>
 8000848:	4285      	cmp	r5, r0
 800084a:	d360      	bcc.n	800090e <i2c_requestFrom+0x246>
	}
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
		i2c1_status = RECEIVE_BYTE_READY;
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 800084c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000850:	2140      	movs	r1, #64	; 0x40
 8000852:	f2c0 0103 	movt	r1, #3
 8000856:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800085a:	f001 f9ab 	bl	8001bb4 <I2C_CheckEvent>
 800085e:	4682      	mov	sl, r0
 8000860:	2800      	cmp	r0, #0
 8000862:	d0ef      	beq.n	8000844 <i2c_requestFrom+0x17c>
			if (millis() > resigmillis)
				return false;
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
 8000864:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000868:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800086c:	f001 f93c 	bl	8001ae8 <I2C_ReceiveData>
 8000870:	f804 0b01 	strb.w	r0, [r4], #1
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 8000874:	454c      	cmp	r4, r9
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
			if (millis() > resigmillis)
				return false;
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
 8000876:	46a2      	mov	sl, r4
		if (millis() > resigmillis)
			return false;
	}
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 8000878:	d1e2      	bne.n	8000840 <i2c_requestFrom+0x178>
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
		i2c1_status = BYTE_RECEIVED;
	}
	i2c1_status = BEFORELAST_BYTE_RECEIVED;
 800087a:	230a      	movs	r3, #10

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(I2C1, DISABLE);
 800087c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
		i2c1_status = BYTE_RECEIVED;
	}
	i2c1_status = BEFORELAST_BYTE_RECEIVED;
 8000880:	703b      	strb	r3, [r7, #0]

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(I2C1, DISABLE);
 8000882:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000886:	2100      	movs	r1, #0
 8000888:	f001 f89e 	bl	80019c8 <I2C_AcknowledgeConfig>
	/* Send STOP Condition */
	I2C_GenerateSTOP(I2C1, ENABLE);
 800088c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000890:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000894:	2101      	movs	r1, #1
 8000896:	f001 f87f 	bl	8001998 <I2C_GenerateSTOP>
	i2c1_status = LAST_BYTE_READY;
 800089a:	230b      	movs	r3, #11
 800089c:	703b      	strb	r3, [r7, #0]

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 800089e:	e003      	b.n	80008a8 <i2c_requestFrom+0x1e0>
		if (millis() > resigmillis)
 80008a0:	f7ff fccc 	bl	800023c <millis>
 80008a4:	4285      	cmp	r5, r0
 80008a6:	d335      	bcc.n	8000914 <i2c_requestFrom+0x24c>
	I2C_AcknowledgeConfig(I2C1, DISABLE);
	/* Send STOP Condition */
	I2C_GenerateSTOP(I2C1, ENABLE);
	i2c1_status = LAST_BYTE_READY;

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 80008a8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80008ac:	2140      	movs	r1, #64	; 0x40
 80008ae:	f2c0 0103 	movt	r1, #3
 80008b2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80008b6:	f001 f97d 	bl	8001bb4 <I2C_CheckEvent>
 80008ba:	4604      	mov	r4, r0
 80008bc:	2800      	cmp	r0, #0
 80008be:	d0ef      	beq.n	80008a0 <i2c_requestFrom+0x1d8>
		if (millis() > resigmillis)
			return false;
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
 80008c0:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80008c4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80008c8:	f001 f90e 	bl	8001ae8 <I2C_ReceiveData>
	i2c1_status = RECEIVE_BYTE_COMPLETED;
 80008cc:	230c      	movs	r3, #12
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
		if (millis() > resigmillis)
			return false;
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
 80008ce:	f88a 0000 	strb.w	r0, [sl]
	i2c1_status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80008d2:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80008d6:	f2c4 0000 	movt	r0, #16384	; 0x4000
		if (millis() > resigmillis)
			return false;
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
	i2c1_status = RECEIVE_BYTE_COMPLETED;
 80008da:	703b      	strb	r3, [r7, #0]

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80008dc:	2101      	movs	r1, #1
 80008de:	f001 f873 	bl	80019c8 <I2C_AcknowledgeConfig>
	i2c1_status = NOT_READY;
 80008e2:	20ff      	movs	r0, #255	; 0xff
	i2c1_direction = NOT_DEFINED;
 80008e4:	2300      	movs	r3, #0
	*recv = I2C_ReceiveData(I2C1 );
	i2c1_status = RECEIVE_BYTE_COMPLETED;

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
	i2c1_status = NOT_READY;
 80008e6:	7038      	strb	r0, [r7, #0]
	i2c1_direction = NOT_DEFINED;
 80008e8:	f888 3000 	strb.w	r3, [r8]

	return true;
 80008ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	//
	i2c1_status = NOT_READY;
	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY )) {
		if (millis() > resigmillis)
			return false;
 80008f0:	2000      	movs	r0, #0
 80008f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
		if (millis() > resigmillis)
			return false;
 80008f6:	4658      	mov	r0, fp
 80008f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_SendData(I2C1, req);
	i2c1_status = BYTE_TRANSMITTING;
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED )) {
		if (millis() > resigmillis)
			return false;
 80008fc:	4628      	mov	r0, r5
 80008fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT )) {
		if (millis() > resigmillis)
			return false;
 8000902:	4630      	mov	r0, r6
 8000904:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED )) {
		if (millis() > resigmillis)
			return false;
 8000908:	4620      	mov	r0, r4
 800090a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

	for (i = 1; i < lim; i++) {
		i2c1_status = RECEIVE_BYTE_READY;
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
			if (millis() > resigmillis)
				return false;
 800090e:	4650      	mov	r0, sl
 8000910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_GenerateSTOP(I2C1, ENABLE);
	i2c1_status = LAST_BYTE_READY;

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
		if (millis() > resigmillis)
			return false;
 8000914:	4620      	mov	r0, r4
	I2C_AcknowledgeConfig(I2C1, ENABLE);
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;

	return true;
}
 8000916:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800091a:	bf00      	nop
 800091c:	200009ad 	.word	0x200009ad
 8000920:	200009ac 	.word	0x200009ac

08000924 <i2c_send>:

boolean i2c_send(uint8_t addr, uint8_t * data, uint16_t length) {
return true;
}
 8000924:	20ff      	movs	r0, #255	; 0xff
 8000926:	4770      	bx	lr

08000928 <spi_begin>:
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 800092c:	f44f 5440 	mov.w	r4, #12288	; 0x3000
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000930:	b08b      	sub	sp, #44	; 0x2c
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000932:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000936:	42a0      	cmp	r0, r4
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000938:	4681      	mov	r9, r0
 800093a:	460f      	mov	r7, r1
 800093c:	4616      	mov	r6, r2
 800093e:	4698      	mov	r8, r3
 8000940:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 8000944:	f000 80ac 	beq.w	8000aa0 <spi_begin+0x178>
//		 sck = PA5; // PB3
//		 miso = PA6; // PB4
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
 8000948:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800094c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000950:	4298      	cmp	r0, r3
 8000952:	f000 809d 	beq.w	8000a90 <spi_begin+0x168>
		// PB12, 13, 14, 15
//		break;
	} else {
//	case SPI3Bus:
//	default:
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8000956:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800095a:	2101      	movs	r1, #1
 800095c:	f001 fb42 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
		af = GPIO_AF_SPI3;
 8000960:	f04f 0b06 	mov.w	fp, #6
//		 mosi = PB5;
//		 nss = PA15; // PA4;
//		break;
	}

	GPIOMode(PinPort(sck), PinBit(sck), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000964:	4638      	mov	r0, r7
 8000966:	f7ff fc9d 	bl	80002a4 <PinPort>
 800096a:	4684      	mov	ip, r0
 800096c:	4638      	mov	r0, r7
 800096e:	f8cd c00c 	str.w	ip, [sp, #12]
 8000972:	f7ff fca1 	bl	80002b8 <PinBit>
 8000976:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800097a:	2401      	movs	r4, #1
 800097c:	2500      	movs	r5, #0
 800097e:	4601      	mov	r1, r0
 8000980:	2202      	movs	r2, #2
 8000982:	4623      	mov	r3, r4
 8000984:	4660      	mov	r0, ip
 8000986:	9500      	str	r5, [sp, #0]
 8000988:	9401      	str	r4, [sp, #4]
 800098a:	f7ff fd03 	bl	8000394 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(miso), PinBit(miso), GPIO_Mode_AF, GPIO_Speed_25MHz,
 800098e:	4630      	mov	r0, r6
 8000990:	f7ff fc88 	bl	80002a4 <PinPort>
 8000994:	4684      	mov	ip, r0
 8000996:	4630      	mov	r0, r6
 8000998:	f8cd c00c 	str.w	ip, [sp, #12]
 800099c:	f7ff fc8c 	bl	80002b8 <PinBit>
 80009a0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80009a4:	9500      	str	r5, [sp, #0]
 80009a6:	4601      	mov	r1, r0
 80009a8:	2202      	movs	r2, #2
 80009aa:	4623      	mov	r3, r4
 80009ac:	4660      	mov	r0, ip
 80009ae:	9401      	str	r4, [sp, #4]
 80009b0:	f7ff fcf0 	bl	8000394 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(mosi), PinBit(mosi), GPIO_Mode_AF, GPIO_Speed_25MHz,
 80009b4:	4640      	mov	r0, r8
 80009b6:	f7ff fc75 	bl	80002a4 <PinPort>
 80009ba:	4684      	mov	ip, r0
 80009bc:	4640      	mov	r0, r8
 80009be:	f8cd c00c 	str.w	ip, [sp, #12]
 80009c2:	f7ff fc79 	bl	80002b8 <PinBit>
 80009c6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80009ca:	9500      	str	r5, [sp, #0]
 80009cc:	4601      	mov	r1, r0
 80009ce:	2202      	movs	r2, #2
 80009d0:	4660      	mov	r0, ip
 80009d2:	4623      	mov	r3, r4
 80009d4:	9401      	str	r4, [sp, #4]
 80009d6:	f7ff fcdd 	bl	8000394 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIO_PinAFConfig(PinPort(sck), PinSource(sck), af);
 80009da:	4638      	mov	r0, r7
 80009dc:	f7ff fc62 	bl	80002a4 <PinPort>
 80009e0:	4603      	mov	r3, r0
 80009e2:	4638      	mov	r0, r7
 80009e4:	9303      	str	r3, [sp, #12]
 80009e6:	f7ff fc6f 	bl	80002c8 <PinSource>
 80009ea:	9b03      	ldr	r3, [sp, #12]
 80009ec:	4601      	mov	r1, r0
 80009ee:	465a      	mov	r2, fp
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 fee7 	bl	80017c4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(miso), PinSource(miso), af);
 80009f6:	4630      	mov	r0, r6
 80009f8:	f7ff fc54 	bl	80002a4 <PinPort>
 80009fc:	4607      	mov	r7, r0
 80009fe:	4630      	mov	r0, r6
 8000a00:	f7ff fc62 	bl	80002c8 <PinSource>
 8000a04:	465a      	mov	r2, fp
 8000a06:	4601      	mov	r1, r0
 8000a08:	4638      	mov	r0, r7
 8000a0a:	f000 fedb 	bl	80017c4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(mosi), PinSource(mosi), af);
 8000a0e:	4640      	mov	r0, r8
 8000a10:	f7ff fc48 	bl	80002a4 <PinPort>
 8000a14:	4606      	mov	r6, r0
 8000a16:	4640      	mov	r0, r8
 8000a18:	f7ff fc56 	bl	80002c8 <PinSource>
 8000a1c:	465a      	mov	r2, fp
 8000a1e:	4601      	mov	r1, r0
 8000a20:	4630      	mov	r0, r6
 8000a22:	f000 fecf 	bl	80017c4 <GPIO_PinAFConfig>
	// nSS by software
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
 8000a26:	4650      	mov	r0, sl
 8000a28:	f7ff fc3c 	bl	80002a4 <PinPort>
 8000a2c:	4606      	mov	r6, r0
 8000a2e:	4650      	mov	r0, sl
 8000a30:	f7ff fc42 	bl	80002b8 <PinBit>
 8000a34:	4622      	mov	r2, r4
 8000a36:	4623      	mov	r3, r4
 8000a38:	4601      	mov	r1, r0
 8000a3a:	4630      	mov	r0, r6
 8000a3c:	9500      	str	r5, [sp, #0]
 8000a3e:	9401      	str	r4, [sp, #4]
 8000a40:	f7ff fca8 	bl	8000394 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
 8000a44:	4650      	mov	r0, sl
 8000a46:	4621      	mov	r1, r4
 8000a48:	f7ff fc6a 	bl	8000320 <digitalWrite>
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000a4c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a50:	f8ad 3016 	strh.w	r3, [sp, #22]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000a54:	f44f 7300 	mov.w	r3, #512	; 0x200
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 8000a58:	4648      	mov	r0, r9
 8000a5a:	a905      	add	r1, sp, #20
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000a5c:	f8ad 301e 	strh.w	r3, [sp, #30]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8000a60:	2310      	movs	r3, #16
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000a62:	f8ad 5014 	strh.w	r5, [sp, #20]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8000a66:	f8ad 5018 	strh.w	r5, [sp, #24]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8000a6a:	f8ad 501a 	strh.w	r5, [sp, #26]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8000a6e:	f8ad 501c 	strh.w	r5, [sp, #28]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8000a72:	f8ad 3020 	strh.w	r3, [sp, #32]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8000a76:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;
 8000a7a:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24

	SPI_Init(SPIx, &SPI_InitStruct);
 8000a7e:	f001 fb8b 	bl	8002198 <SPI_Init>

	SPI_Cmd(SPIx, ENABLE);
 8000a82:	4648      	mov	r0, r9
 8000a84:	4621      	mov	r1, r4
 8000a86:	f001 fc3b 	bl	8002300 <SPI_Cmd>
	 *              - Enable or disable the SS output using the SPI_SSOutputCmd() function
	 *
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}
 8000a8a:	b00b      	add	sp, #44	; 0x2c
 8000a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
//	case SPI2Bus:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8000a90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a94:	2101      	movs	r1, #1
 8000a96:	f001 fa5f 	bl	8001f58 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_SPI2;
 8000a9a:	f04f 0b05 	mov.w	fp, #5
 8000a9e:	e761      	b.n	8000964 <spi_begin+0x3c>
	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
//	case SPI1Bus:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000aa0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	f001 fa65 	bl	8001f74 <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_SPI1;
 8000aaa:	f04f 0b05 	mov.w	fp, #5
 8000aae:	e759      	b.n	8000964 <spi_begin+0x3c>

08000ab0 <spi_transfer>:
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 8000ab0:	b570      	push	{r4, r5, r6, lr}
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000ab2:	4615      	mov	r5, r2
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 8000ab4:	4604      	mov	r4, r0
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000ab6:	b1ca      	cbz	r2, 8000aec <spi_transfer+0x3c>
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 8000ab8:	1e4e      	subs	r6, r1, #1
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
		/* Wait for SPIx Tx buffer empty */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE ) == RESET)
 8000aba:	4620      	mov	r0, r4
 8000abc:	2102      	movs	r1, #2
 8000abe:	f001 fceb 	bl	8002498 <SPI_I2S_GetFlagStatus>
 8000ac2:	2800      	cmp	r0, #0
 8000ac4:	d0f9      	beq.n	8000aba <spi_transfer+0xa>
			;
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	7871      	ldrb	r1, [r6, #1]
 8000aca:	f001 fca9 	bl	8002420 <SPI_I2S_SendData>
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
 8000ace:	4620      	mov	r0, r4
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	f001 fce1 	bl	8002498 <SPI_I2S_GetFlagStatus>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	d0f9      	beq.n	8000ace <spi_transfer+0x1e>
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 8000ada:	4620      	mov	r0, r4
 8000adc:	f001 fc9c 	bl	8002418 <SPI_I2S_ReceiveData>

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000ae0:	3d01      	subs	r5, #1
 8000ae2:	b2ad      	uxth	r5, r5
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 8000ae4:	f806 0f01 	strb.w	r0, [r6, #1]!

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	d1e6      	bne.n	8000aba <spi_transfer+0xa>
 8000aec:	bd70      	pop	{r4, r5, r6, pc}
 8000aee:	bf00      	nop

08000af0 <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 8000af0:	f640 13b0 	movw	r3, #2480	; 0x9b0
 8000af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	3201      	adds	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
}
 8000afe:	4770      	bx	lr

08000b00 <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <SysTick_delay+0x10>)
 8000b02:	681a      	ldr	r2, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 8000b04:	6819      	ldr	r1, [r3, #0]
 8000b06:	1a89      	subs	r1, r1, r2
 8000b08:	4281      	cmp	r1, r0
 8000b0a:	d3fb      	bcc.n	8000b04 <SysTick_delay+0x4>
		;
}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	200009b0 	.word	0x200009b0

08000b14 <SysTick_Start>:

void SysTick_Start(void) {
 8000b14:	b500      	push	{lr}
 8000b16:	b085      	sub	sp, #20
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 8000b18:	4668      	mov	r0, sp
 8000b1a:	f001 f96f 	bl	8001dfc <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000b1e:	9901      	ldr	r1, [sp, #4]
 8000b20:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8000b24:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8000b28:	fba3 2101 	umull	r2, r1, r3, r1
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000b2c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000b30:	f2ce 0300 	movt	r3, #57344	; 0xe000
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000b34:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000b38:	0989      	lsrs	r1, r1, #6
 8000b3a:	f2ce 0200 	movt	r2, #57344	; 0xe000
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000b3e:	3901      	subs	r1, #1
 8000b40:	6059      	str	r1, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000b42:	21f0      	movs	r1, #240	; 0xf0
 8000b44:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4c:	2207      	movs	r2, #7
 8000b4e:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 8000b50:	b005      	add	sp, #20
 8000b52:	bd00      	pop	{pc}

08000b54 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 8000b54:	f640 13b0 	movw	r3, #2480	; 0x9b0
 8000b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b5c:	6818      	ldr	r0, [r3, #0]
}
 8000b5e:	4770      	bx	lr

08000b60 <buffer_clear>:
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 8000b66:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 8000b6a:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 8000b6e:	4770      	bx	lr

08000b70 <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 8000b70:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000b78:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 8000b7c:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d001      	beq.n	8000b88 <buffer_is_full+0x10>
		return 1;
	}
	return 0;
 8000b84:	2000      	movs	r0, #0
}
 8000b86:	4770      	bx	lr

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
 8000b88:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
	if ( (r->head == r->tail) && (r->count > 0) ) {
		return 1;
 8000b8c:	3000      	adds	r0, #0
 8000b8e:	bf18      	it	ne
 8000b90:	2001      	movne	r0, #1
 8000b92:	4770      	bx	lr

08000b94 <buffer_enque>:
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000b94:	4603      	mov	r3, r0
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000b96:	f8b0 0100 	ldrh.w	r0, [r0, #256]	; 0x100
		return 1;
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000b9a:	b430      	push	{r4, r5}
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000b9c:	f9b3 4102 	ldrsh.w	r4, [r3, #258]	; 0x102
 8000ba0:	b202      	sxth	r2, r0
 8000ba2:	4294      	cmp	r4, r2
 8000ba4:	d013      	beq.n	8000bce <buffer_enque+0x3a>
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
 8000ba6:	3001      	adds	r0, #1
	r->count++;
	r->head %= USART_BUFFER_SIZE;
 8000ba8:	b200      	sxth	r0, r0
 8000baa:	17c4      	asrs	r4, r0, #31
 8000bac:	0e64      	lsrs	r4, r4, #25

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000bae:	f8b3 5104 	ldrh.w	r5, [r3, #260]	; 0x104
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
 8000bb2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	r->count++;
	r->head %= USART_BUFFER_SIZE;
 8000bb6:	1900      	adds	r0, r0, r4
 8000bb8:	f000 007f 	and.w	r0, r0, #127	; 0x7f

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000bbc:	1c6a      	adds	r2, r5, #1
	r->head %= USART_BUFFER_SIZE;
 8000bbe:	1b04      	subs	r4, r0, r4

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000bc0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8000bc4:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	return w;
}
 8000bc8:	4608      	mov	r0, r1
 8000bca:	bc30      	pop	{r4, r5}
 8000bcc:	4770      	bx	lr
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000bce:	f8b3 4104 	ldrh.w	r4, [r3, #260]	; 0x104
 8000bd2:	2c00      	cmp	r4, #0
 8000bd4:	d0e7      	beq.n	8000ba6 <buffer_enque+0x12>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
 8000bd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000bda:	e7f5      	b.n	8000bc8 <buffer_enque+0x34>

08000bdc <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000bdc:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8000be0:	4603      	mov	r3, r0
 8000be2:	b410      	push	{r4}
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
 8000be4:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
 8000be8:	b90a      	cbnz	r2, 8000bee <buffer_deque+0x12>
		return 0xffff;
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 8000bea:	bc10      	pop	{r4}
 8000bec:	4770      	bx	lr

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8000bee:	f8b3 0102 	ldrh.w	r0, [r3, #258]	; 0x102
 8000bf2:	1c44      	adds	r4, r0, #1
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000bf4:	b224      	sxth	r4, r4
 8000bf6:	17e1      	asrs	r1, r4, #31
 8000bf8:	0e49      	lsrs	r1, r1, #25
 8000bfa:	1864      	adds	r4, r4, r1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8000bfc:	b200      	sxth	r0, r0
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000bfe:	f004 047f 	and.w	r4, r4, #127	; 0x7f
uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
	r->count--;
 8000c02:	3a01      	subs	r2, #1
	r->tail %= USART_BUFFER_SIZE;
 8000c04:	1a61      	subs	r1, r4, r1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8000c06:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	r->count--;
 8000c0a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 8000c0e:	f8a3 1102 	strh.w	r1, [r3, #258]	; 0x102
 8000c12:	e7ea      	b.n	8000bea <buffer_deque+0xe>

08000c14 <usart_begin>:
	return w;
}

void usart_begin(USART_TypeDef * /*USARTSerial*/ USARTx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

//	switch(usx) {
//	case USART1Serial:
	if ( USARTx == USART1 ) {
 8000c18:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000c1c:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000c20:	42a0      	cmp	r0, r4
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}

void usart_begin(USART_TypeDef * /*USARTSerial*/ USARTx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 8000c22:	b08b      	sub	sp, #44	; 0x2c
 8000c24:	4605      	mov	r5, r0
 8000c26:	460f      	mov	r7, r1
 8000c28:	4616      	mov	r6, r2
 8000c2a:	469a      	mov	sl, r3
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

//	switch(usx) {
//	case USART1Serial:
	if ( USARTx == USART1 ) {
 8000c2c:	f000 80ae 	beq.w	8000d8c <usart_begin+0x178>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
		usx = 0;
//	break;
	} else if ( USARTx == USART2 ) {
 8000c30:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000c34:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000c38:	4298      	cmp	r0, r3
 8000c3a:	f000 80b2 	beq.w	8000da2 <usart_begin+0x18e>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
		usx = 1;
//	break;
	} else if ( USARTx == USART3 ) {
 8000c3e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000c42:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000c46:	4298      	cmp	r0, r3
 8000c48:	f000 80b7 	beq.w	8000dba <usart_begin+0x1a6>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
		usx = 2;
//	break;
	} else if ( USARTx == UART4 ) {
 8000c4c:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000c50:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000c54:	4298      	cmp	r0, r3
 8000c56:	f000 80bc 	beq.w	8000dd2 <usart_begin+0x1be>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
		usx = 3;
//	break;
	} else if ( USARTx == UART5 ) {
 8000c5a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000c5e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000c62:	4298      	cmp	r0, r3
 8000c64:	f000 8086 	beq.w	8000d74 <usart_begin+0x160>
//		break;
	} else { //if ( USARTx == USART6 ) {
//	case USART6Serial:
//	default:
//		usx = USART6Serial;
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 8000c68:	2020      	movs	r0, #32
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	f001 f982 	bl	8001f74 <RCC_APB2PeriphClockCmd>
 8000c70:	2305      	movs	r3, #5
 8000c72:	9303      	str	r3, [sp, #12]
 8000c74:	f04f 0b47 	mov.w	fp, #71	; 0x47
		af = GPIO_AF_USART6;
 8000c78:	f04f 0808 	mov.w	r8, #8
		irq = USART6_IRQn;
		usx = 5;
//		break;
	}
	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
 8000c7c:	4638      	mov	r0, r7
 8000c7e:	f7ff fb11 	bl	80002a4 <PinPort>
 8000c82:	4681      	mov	r9, r0
 8000c84:	4638      	mov	r0, r7
 8000c86:	f7ff fb17 	bl	80002b8 <PinBit>
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	2400      	movs	r4, #0
 8000c8e:	4601      	mov	r1, r0
 8000c90:	4613      	mov	r3, r2
 8000c92:	4648      	mov	r0, r9
 8000c94:	9400      	str	r4, [sp, #0]
 8000c96:	9401      	str	r4, [sp, #4]
 8000c98:	f7ff fb7c 	bl	8000394 <GPIOMode>
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	f7ff fb01 	bl	80002a4 <PinPort>
 8000ca2:	4681      	mov	r9, r0
 8000ca4:	4630      	mov	r0, r6
 8000ca6:	f7ff fb07 	bl	80002b8 <PinBit>
 8000caa:	2202      	movs	r2, #2
 8000cac:	4613      	mov	r3, r2
 8000cae:	4601      	mov	r1, r0
 8000cb0:	4648      	mov	r0, r9
 8000cb2:	9400      	str	r4, [sp, #0]
 8000cb4:	9401      	str	r4, [sp, #4]
 8000cb6:	f7ff fb6d 	bl	8000394 <GPIOMode>

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
 8000cba:	4638      	mov	r0, r7
 8000cbc:	f7ff faf2 	bl	80002a4 <PinPort>
 8000cc0:	4681      	mov	r9, r0
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	f7ff fb00 	bl	80002c8 <PinSource>
 8000cc8:	4642      	mov	r2, r8
 8000cca:	4601      	mov	r1, r0
 8000ccc:	4648      	mov	r0, r9
 8000cce:	f000 fd79 	bl	80017c4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	f7ff fae6 	bl	80002a4 <PinPort>
 8000cd8:	4607      	mov	r7, r0
 8000cda:	4630      	mov	r0, r6
 8000cdc:	f7ff faf4 	bl	80002c8 <PinSource>
 8000ce0:	4642      	mov	r2, r8
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	4638      	mov	r0, r7
 8000ce6:	f000 fd6d 	bl	80017c4 <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000cea:	230c      	movs	r3, #12

	USART_Init(USARTx /*usartx[usx]*/, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000cec:	a905      	add	r1, sp, #20
 8000cee:	4628      	mov	r0, r5
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000cf0:	f8ad 301e 	strh.w	r3, [sp, #30]
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8000cf4:	f8cd a014 	str.w	sl, [sp, #20]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000cf8:	f8ad 4018 	strh.w	r4, [sp, #24]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8000cfc:	f8ad 401a 	strh.w	r4, [sp, #26]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8000d00:	f8ad 401c 	strh.w	r4, [sp, #28]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000d04:	f8ad 4020 	strh.w	r4, [sp, #32]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(USARTx /*usartx[usx]*/, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000d08:	f002 fb66 	bl	80033d8 <USART_Init>

	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000d0c:	4628      	mov	r0, r5
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f240 5125 	movw	r1, #1317	; 0x525
 8000d14:	f002 fcca 	bl	80036ac <USART_ITConfig>
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
 8000d18:	4622      	mov	r2, r4
 8000d1a:	4628      	mov	r0, r5
 8000d1c:	f240 7127 	movw	r1, #1831	; 0x727
 8000d20:	f002 fcc4 	bl	80036ac <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = irq;
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000d24:	2601      	movs	r6, #1
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000d26:	a809      	add	r0, sp, #36	; 0x24
	USART_Init(USARTx /*usartx[usx]*/, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 8000d28:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8000d2c:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8000d30:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000d34:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000d38:	f000 fbac 	bl	8001494 <NVIC_Init>
	//
	buffer_clear(&rxring[usx]);
 8000d3c:	9a03      	ldr	r2, [sp, #12]
	buffer_clear(&txring[usx]);
 8000d3e:	492b      	ldr	r1, [pc, #172]	; (8000dec <usart_begin+0x1d8>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
 8000d40:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000d44:	fb03 f302 	mul.w	r3, r3, r2
 8000d48:	4a29      	ldr	r2, [pc, #164]	; (8000df0 <usart_begin+0x1dc>)
 8000d4a:	189a      	adds	r2, r3, r2
	buffer_clear(&txring[usx]);
 8000d4c:	185b      	adds	r3, r3, r1
	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx /*usartx[usx]*/, ENABLE);
 8000d4e:	4628      	mov	r0, r5
 8000d50:	4631      	mov	r1, r6
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000d52:	f8a2 4100 	strh.w	r4, [r2, #256]	; 0x100
	r->tail = 0;
 8000d56:	f8a2 4102 	strh.w	r4, [r2, #258]	; 0x102
	r->count = 0;
 8000d5a:	f8a2 4104 	strh.w	r4, [r2, #260]	; 0x104
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000d5e:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	r->tail = 0;
 8000d62:	f8a3 4102 	strh.w	r4, [r3, #258]	; 0x102
	r->count = 0;
 8000d66:	f8a3 4104 	strh.w	r4, [r3, #260]	; 0x104
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx /*usartx[usx]*/, ENABLE);
 8000d6a:	f002 fbc5 	bl	80034f8 <USART_Cmd>
}
 8000d6e:	b00b      	add	sp, #44	; 0x2c
 8000d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		irq = UART4_IRQn;
		usx = 3;
//	break;
	} else if ( USARTx == UART5 ) {
//	case UART5Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8000d74:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000d78:	2101      	movs	r1, #1
 8000d7a:	f001 f8ed 	bl	8001f58 <RCC_APB1PeriphClockCmd>
 8000d7e:	2204      	movs	r2, #4
 8000d80:	9203      	str	r2, [sp, #12]
 8000d82:	f04f 0b35 	mov.w	fp, #53	; 0x35
		af = GPIO_AF_UART5;
 8000d86:	f04f 0808 	mov.w	r8, #8
 8000d8a:	e777      	b.n	8000c7c <usart_begin+0x68>
	IRQn_Type irq = USART1_IRQn;

//	switch(usx) {
//	case USART1Serial:
	if ( USARTx == USART1 ) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000d8c:	2010      	movs	r0, #16
 8000d8e:	2101      	movs	r1, #1
 8000d90:	f001 f8f0 	bl	8001f74 <RCC_APB2PeriphClockCmd>
 8000d94:	2200      	movs	r2, #0
 8000d96:	9203      	str	r2, [sp, #12]
 8000d98:	f04f 0b25 	mov.w	fp, #37	; 0x25
		af = GPIO_AF_USART1;
 8000d9c:	f04f 0807 	mov.w	r8, #7
 8000da0:	e76c      	b.n	8000c7c <usart_begin+0x68>
		irq = USART1_IRQn;
		usx = 0;
//	break;
	} else if ( USARTx == USART2 ) {
//	case USART2Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000da2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000da6:	2101      	movs	r1, #1
 8000da8:	f001 f8d6 	bl	8001f58 <RCC_APB1PeriphClockCmd>
 8000dac:	2301      	movs	r3, #1
 8000dae:	9303      	str	r3, [sp, #12]
 8000db0:	f04f 0b26 	mov.w	fp, #38	; 0x26
		af = GPIO_AF_USART2;
 8000db4:	f04f 0807 	mov.w	r8, #7
 8000db8:	e760      	b.n	8000c7c <usart_begin+0x68>
		irq = USART2_IRQn;
		usx = 1;
//	break;
	} else if ( USARTx == USART3 ) {
//	case USART3Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000dba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	f001 f8ca 	bl	8001f58 <RCC_APB1PeriphClockCmd>
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	9203      	str	r2, [sp, #12]
 8000dc8:	f04f 0b27 	mov.w	fp, #39	; 0x27
		af = GPIO_AF_USART3;
 8000dcc:	f04f 0807 	mov.w	r8, #7
 8000dd0:	e754      	b.n	8000c7c <usart_begin+0x68>
		irq = USART3_IRQn;
		usx = 2;
//	break;
	} else if ( USARTx == UART4 ) {
//	case UART4Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8000dd2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	f001 f8be 	bl	8001f58 <RCC_APB1PeriphClockCmd>
 8000ddc:	2303      	movs	r3, #3
 8000dde:	9303      	str	r3, [sp, #12]
 8000de0:	f04f 0b34 	mov.w	fp, #52	; 0x34
		af = GPIO_AF_UART4;
 8000de4:	f04f 0808 	mov.w	r8, #8
 8000de8:	e748      	b.n	8000c7c <usart_begin+0x68>
 8000dea:	bf00      	nop
 8000dec:	200009b4 	.word	0x200009b4
 8000df0:	20000fd8 	.word	0x20000fd8

08000df4 <usart_bare_write>:
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx /*usartx[usx]*/, ENABLE);
}

void usart_bare_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
 8000df4:	b538      	push	{r3, r4, r5, lr}
 8000df6:	4604      	mov	r4, r0
 8000df8:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	f002 fc71 	bl	80036e4 <USART_GetFlagStatus>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d0f9      	beq.n	8000dfa <usart_bare_write+0x6>
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
 8000e06:	4620      	mov	r0, r4
 8000e08:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}
 8000e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USART_Cmd(USARTx /*usartx[usx]*/, ENABLE);
}

void usart_bare_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
 8000e0e:	f002 bba7 	b.w	8003560 <USART_SendData>
 8000e12:	bf00      	nop

08000e14 <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	f2c4 0301 	movt	r3, #16385	; 0x4001
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
 8000e1c:	b570      	push	{r4, r5, r6, lr}
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000e1e:	2500      	movs	r5, #0
 8000e20:	4298      	cmp	r0, r3
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
 8000e22:	4604      	mov	r4, r0
 8000e24:	460e      	mov	r6, r1
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000e26:	d01c      	beq.n	8000e62 <usart_write+0x4e>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000e28:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000e2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e30:	2501      	movs	r5, #1
 8000e32:	4298      	cmp	r0, r3
 8000e34:	d015      	beq.n	8000e62 <usart_write+0x4e>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000e36:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000e3a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e3e:	2502      	movs	r5, #2
 8000e40:	4298      	cmp	r0, r3
 8000e42:	d00e      	beq.n	8000e62 <usart_write+0x4e>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000e44:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000e48:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e4c:	2503      	movs	r5, #3
 8000e4e:	4298      	cmp	r0, r3
 8000e50:	d007      	beq.n	8000e62 <usart_write+0x4e>
		usx = 3;
	} else if ( USARTx == UART5 ) {
 8000e52:	f44f 45a0 	mov.w	r5, #20480	; 0x5000
 8000e56:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8000e5a:	42a8      	cmp	r0, r5
 8000e5c:	bf14      	ite	ne
 8000e5e:	2505      	movne	r5, #5
 8000e60:	2504      	moveq	r5, #4
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <usart_write+0x9c>)
 8000e64:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000e68:	fb02 3505 	mla	r5, r2, r5, r3
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000e6c:	f9b5 2100 	ldrsh.w	r2, [r5, #256]	; 0x100
 8000e70:	f9b5 3102 	ldrsh.w	r3, [r5, #258]	; 0x102
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d011      	beq.n	8000e9c <usart_write+0x88>
		usx = 5;
	}
	//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_us(833);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	f240 7127 	movw	r1, #1831	; 0x727
 8000e80:	f002 fc14 	bl	80036ac <USART_ITConfig>
	buffer_enque(&txring[usx], w);
 8000e84:	4631      	mov	r1, r6
 8000e86:	4628      	mov	r0, r5
 8000e88:	f7ff fe84 	bl	8000b94 <buffer_enque>
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	f240 7127 	movw	r1, #1831	; 0x727
 8000e92:	2201      	movs	r2, #1
}
 8000e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_us(833);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
 8000e98:	f002 bc08 	b.w	80036ac <USART_ITConfig>
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000e9c:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0e9      	beq.n	8000e78 <usart_write+0x64>
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_us(833);
 8000ea4:	f240 3041 	movw	r0, #833	; 0x341
 8000ea8:	f7ff f9d8 	bl	800025c <delay_us>
 8000eac:	e7e4      	b.n	8000e78 <usart_write+0x64>
 8000eae:	bf00      	nop
 8000eb0:	200009b4 	.word	0x200009b4

08000eb4 <usart_print>:
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
}

void usart_print(USART_TypeDef * USARTx /*usartx[usx]*/, const char * s) {
 8000eb4:	b538      	push	{r3, r4, r5, lr}
 8000eb6:	460c      	mov	r4, r1
	while (*s)
 8000eb8:	7809      	ldrb	r1, [r1, #0]
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
}

void usart_print(USART_TypeDef * USARTx /*usartx[usx]*/, const char * s) {
 8000eba:	4605      	mov	r5, r0
	while (*s)
 8000ebc:	b131      	cbz	r1, 8000ecc <usart_print+0x18>
		usart_write(USARTx /*usartx[usx]*/, (uint16_t) *s++);
 8000ebe:	4628      	mov	r0, r5
 8000ec0:	f7ff ffa8 	bl	8000e14 <usart_write>
	buffer_enque(&txring[usx], w);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
}

void usart_print(USART_TypeDef * USARTx /*usartx[usx]*/, const char * s) {
	while (*s)
 8000ec4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	d1f8      	bne.n	8000ebe <usart_print+0xa>
 8000ecc:	bd38      	pop	{r3, r4, r5, pc}
 8000ece:	bf00      	nop

08000ed0 <usart_bare_read>:
		usart_write(USARTx /*usartx[usx]*/, (uint16_t) *s++);
}

uint16_t usart_bare_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	return USART_ReceiveData(USARTx);
 8000ed0:	f002 bb4a 	b.w	8003568 <USART_ReceiveData>

08000ed4 <usart_read>:
}

uint16_t usart_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
 8000ed4:	b508      	push	{r3, lr}
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eda:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000ede:	4298      	cmp	r0, r3
 8000ee0:	d026      	beq.n	8000f30 <usart_read+0x5c>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000ee2:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000ee6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000eea:	4298      	cmp	r0, r3
 8000eec:	d022      	beq.n	8000f34 <usart_read+0x60>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000eee:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000ef2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000ef6:	4298      	cmp	r0, r3
 8000ef8:	d01e      	beq.n	8000f38 <usart_read+0x64>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000efa:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000efe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f02:	4298      	cmp	r0, r3
 8000f04:	d01a      	beq.n	8000f3c <usart_read+0x68>
		usx = 3;
	} else if ( USARTx == UART5 ) {
 8000f06:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000f0a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f0e:	4298      	cmp	r0, r3
 8000f10:	bf14      	ite	ne
 8000f12:	2005      	movne	r0, #5
 8000f14:	2004      	moveq	r0, #4
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	uint16_t w = buffer_deque(&rxring[usx]);
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <usart_read+0x6c>)
 8000f18:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000f1c:	fb02 3000 	mla	r0, r2, r0, r3
 8000f20:	f7ff fe5c 	bl	8000bdc <buffer_deque>
	if ( w == 0xffff ) return 0; // buffer is empty
 8000f24:	f64f 73ff 	movw	r3, #65535	; 0xffff
	return w;
}
 8000f28:	4298      	cmp	r0, r3
 8000f2a:	bf08      	it	eq
 8000f2c:	2000      	moveq	r0, #0
 8000f2e:	bd08      	pop	{r3, pc}
	return USART_ReceiveData(USARTx);
}

uint16_t usart_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000f30:	2000      	movs	r0, #0
 8000f32:	e7f0      	b.n	8000f16 <usart_read+0x42>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000f34:	2001      	movs	r0, #1
 8000f36:	e7ee      	b.n	8000f16 <usart_read+0x42>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000f38:	2002      	movs	r0, #2
 8000f3a:	e7ec      	b.n	8000f16 <usart_read+0x42>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	e7ea      	b.n	8000f16 <usart_read+0x42>
 8000f40:	20000fd8 	.word	0x20000fd8

08000f44 <usart_flush>:
	return w;
}

void usart_flush(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f48:	f2c4 0301 	movt	r3, #16385	; 0x4001
	uint16_t w = buffer_deque(&rxring[usx]);
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}

void usart_flush(USART_TypeDef * USARTx /*usartx[usx]*/) {
 8000f4c:	b570      	push	{r4, r5, r6, lr}
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000f4e:	2500      	movs	r5, #0
 8000f50:	4298      	cmp	r0, r3
	uint16_t w = buffer_deque(&rxring[usx]);
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}

void usart_flush(USART_TypeDef * USARTx /*usartx[usx]*/) {
 8000f52:	4604      	mov	r4, r0
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000f54:	d01c      	beq.n	8000f90 <usart_flush+0x4c>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000f56:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000f5a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f5e:	2501      	movs	r5, #1
 8000f60:	4298      	cmp	r0, r3
 8000f62:	d015      	beq.n	8000f90 <usart_flush+0x4c>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000f64:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000f68:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f6c:	2502      	movs	r5, #2
 8000f6e:	4298      	cmp	r0, r3
 8000f70:	d00e      	beq.n	8000f90 <usart_flush+0x4c>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000f72:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000f76:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f7a:	2503      	movs	r5, #3
 8000f7c:	4298      	cmp	r0, r3
 8000f7e:	d007      	beq.n	8000f90 <usart_flush+0x4c>
		usx = 3;
	} else if ( USARTx == UART5 ) {
 8000f80:	f44f 45a0 	mov.w	r5, #20480	; 0x5000
 8000f84:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8000f88:	42a8      	cmp	r0, r5
 8000f8a:	bf14      	ite	ne
 8000f8c:	2505      	movne	r5, #5
 8000f8e:	2504      	moveq	r5, #4
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	USART_ITConfig(USARTx, USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
 8000f90:	2200      	movs	r2, #0
 8000f92:	4620      	mov	r0, r4
 8000f94:	f240 5125 	movw	r1, #1317	; 0x525
 8000f98:	f002 fb88 	bl	80036ac <USART_ITConfig>
	buffer_clear(&rxring[usx]);
 8000f9c:	f44f 7683 	mov.w	r6, #262	; 0x106
 8000fa0:	4b21      	ldr	r3, [pc, #132]	; (8001028 <usart_flush+0xe4>)
 8000fa2:	fb06 f605 	mul.w	r6, r6, r5
 8000fa6:	18f3      	adds	r3, r6, r3
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000fa8:	2500      	movs	r5, #0
 8000faa:	f8a3 5100 	strh.w	r5, [r3, #256]	; 0x100
	r->tail = 0;
 8000fae:	f8a3 5102 	strh.w	r5, [r3, #258]	; 0x102
	r->count = 0;
 8000fb2:	f8a3 5104 	strh.w	r5, [r3, #260]	; 0x104
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	USART_ITConfig(USARTx, USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
 8000fb6:	f240 5125 	movw	r1, #1317	; 0x525
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f002 fbc0 	bl	8003740 <USART_ClearITPendingBit>
	USART_ITConfig(USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	f240 5125 	movw	r1, #1317	; 0x525
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f002 fb70 	bl	80036ac <USART_ITConfig>
	USART_ITConfig(USARTx, USART_IT_TXE, DISABLE);
 8000fcc:	462a      	mov	r2, r5
 8000fce:	4620      	mov	r0, r4
 8000fd0:	f240 7127 	movw	r1, #1831	; 0x727
 8000fd4:	f002 fb6a 	bl	80036ac <USART_ITConfig>
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <usart_flush+0xe8>)
	while ( buffer_count(&txring[usx]) > 0 ) {
 8000fda:	199e      	adds	r6, r3, r6
 8000fdc:	f8b6 5104 	ldrh.w	r5, [r6, #260]	; 0x104
 8000fe0:	b1b5      	cbz	r5, 8001010 <usart_flush+0xcc>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	2180      	movs	r1, #128	; 0x80
 8000fe6:	f002 fb7d 	bl	80036e4 <USART_GetFlagStatus>
 8000fea:	2800      	cmp	r0, #0
 8000fec:	d0f9      	beq.n	8000fe2 <usart_flush+0x9e>
		USART_SendData(USARTx, buffer_deque(&txring[usx]));
 8000fee:	4630      	mov	r0, r6
 8000ff0:	f7ff fdf4 	bl	8000bdc <buffer_deque>
 8000ff4:	4601      	mov	r1, r0
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f002 fab2 	bl	8003560 <USART_SendData>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	2140      	movs	r1, #64	; 0x40
 8001000:	f002 fb70 	bl	80036e4 <USART_GetFlagStatus>
 8001004:	2800      	cmp	r0, #0
 8001006:	d0f9      	beq.n	8000ffc <usart_flush+0xb8>
	USART_ITConfig(USARTx, USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
	USART_ITConfig(USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx, USART_IT_TXE, DISABLE);
	while ( buffer_count(&txring[usx]) > 0 ) {
 8001008:	f8b6 5104 	ldrh.w	r5, [r6, #260]	; 0x104
 800100c:	2d00      	cmp	r5, #0
 800100e:	d1e8      	bne.n	8000fe2 <usart_flush+0x9e>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
		USART_SendData(USARTx, buffer_deque(&txring[usx]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
 8001010:	4620      	mov	r0, r4
 8001012:	f240 7127 	movw	r1, #1831	; 0x727
 8001016:	f002 fb93 	bl	8003740 <USART_ClearITPendingBit>
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 800101a:	f8a6 5100 	strh.w	r5, [r6, #256]	; 0x100
	r->tail = 0;
 800101e:	f8a6 5102 	strh.w	r5, [r6, #258]	; 0x102
	r->count = 0;
 8001022:	f8a6 5104 	strh.w	r5, [r6, #260]	; 0x104
		USART_SendData(USARTx, buffer_deque(&txring[usx]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
	buffer_clear(&txring[usx]);
}
 8001026:	bd70      	pop	{r4, r5, r6, pc}
 8001028:	20000fd8 	.word	0x20000fd8
 800102c:	200009b4 	.word	0x200009b4

08001030 <usart_peek>:

uint16_t usart_peek(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8001030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001034:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001038:	4298      	cmp	r0, r3
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
	buffer_clear(&txring[usx]);
}

uint16_t usart_peek(USART_TypeDef * USARTx /*usartx[usx]*/) {
 800103a:	b410      	push	{r4}
	uint8_t usx;
	if ( USARTx == USART1 ) {
 800103c:	d032      	beq.n	80010a4 <usart_peek+0x74>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 800103e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8001042:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001046:	4298      	cmp	r0, r3
 8001048:	d02f      	beq.n	80010aa <usart_peek+0x7a>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 800104a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800104e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001052:	4298      	cmp	r0, r3
 8001054:	d02c      	beq.n	80010b0 <usart_peek+0x80>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8001056:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 800105a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800105e:	4298      	cmp	r0, r3
 8001060:	d029      	beq.n	80010b6 <usart_peek+0x86>
		usx = 3;
	} else if ( USARTx == UART5 ) {
 8001062:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001066:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800106a:	4298      	cmp	r0, r3
 800106c:	bf14      	ite	ne
 800106e:	2205      	movne	r2, #5
 8001070:	2204      	moveq	r2, #4
 8001072:	4610      	mov	r0, r2
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <usart_peek+0x8c>)
	} else if ( USARTx == UART5 ) {
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	if ( ! buffer_count(&rxring[usx]) == 0 )
 8001076:	f44f 7183 	mov.w	r1, #262	; 0x106
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 800107a:	fb01 3202 	mla	r2, r1, r2, r3
	} else if ( USARTx == UART5 ) {
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	if ( ! buffer_count(&rxring[usx]) == 0 )
 800107e:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8001082:	b91a      	cbnz	r2, 800108c <usart_peek+0x5c>
		return rxring[usx].buf[rxring[usx].tail];
	return 0xffff;
 8001084:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8001088:	bc10      	pop	{r4}
 800108a:	4770      	bx	lr
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	if ( ! buffer_count(&rxring[usx]) == 0 )
		return rxring[usx].buf[rxring[usx].tail];
 800108c:	fb01 3100 	mla	r1, r1, r0, r3
 8001090:	eb00 1480 	add.w	r4, r0, r0, lsl #6
 8001094:	f9b1 2102 	ldrsh.w	r2, [r1, #258]	; 0x102
 8001098:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 800109c:	1880      	adds	r0, r0, r2
 800109e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80010a2:	e7f1      	b.n	8001088 <usart_peek+0x58>
	buffer_clear(&txring[usx]);
}

uint16_t usart_peek(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 80010a4:	2200      	movs	r2, #0
		usx = 0;
 80010a6:	4610      	mov	r0, r2
 80010a8:	e7e4      	b.n	8001074 <usart_peek+0x44>
	} else if ( USARTx == USART2 ) {
 80010aa:	2201      	movs	r2, #1
		usx = 1;
 80010ac:	4610      	mov	r0, r2
 80010ae:	e7e1      	b.n	8001074 <usart_peek+0x44>
	} else if ( USARTx == USART3 ) {
 80010b0:	2202      	movs	r2, #2
		usx = 2;
 80010b2:	4610      	mov	r0, r2
 80010b4:	e7de      	b.n	8001074 <usart_peek+0x44>
	} else if ( USARTx == UART4 ) {
 80010b6:	2203      	movs	r2, #3
		usx = 3;
 80010b8:	4610      	mov	r0, r2
 80010ba:	e7db      	b.n	8001074 <usart_peek+0x44>
 80010bc:	20000fd8 	.word	0x20000fd8

080010c0 <usart_available>:
	return 0xffff;
}

uint16_t usart_available(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 80010c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80010c8:	4298      	cmp	r0, r3
 80010ca:	d021      	beq.n	8001110 <usart_available+0x50>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 80010cc:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80010d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80010d4:	4298      	cmp	r0, r3
 80010d6:	d01d      	beq.n	8001114 <usart_available+0x54>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 80010d8:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80010dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80010e0:	4298      	cmp	r0, r3
 80010e2:	d019      	beq.n	8001118 <usart_available+0x58>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 80010e4:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 80010e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80010ec:	4298      	cmp	r0, r3
 80010ee:	d015      	beq.n	800111c <usart_available+0x5c>
		usx = 3;
	} else if ( USARTx == UART5 ) {
 80010f0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80010f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80010f8:	4298      	cmp	r0, r3
 80010fa:	bf14      	ite	ne
 80010fc:	2005      	movne	r0, #5
 80010fe:	2004      	moveq	r0, #4
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <usart_available+0x60>)
 8001102:	f44f 7283 	mov.w	r2, #262	; 0x106
 8001106:	fb02 3000 	mla	r0, r2, r0, r3
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	return buffer_count(&rxring[usx]);
}
 800110a:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 800110e:	4770      	bx	lr
	return 0xffff;
}

uint16_t usart_available(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8001110:	2000      	movs	r0, #0
 8001112:	e7f5      	b.n	8001100 <usart_available+0x40>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8001114:	2001      	movs	r0, #1
 8001116:	e7f3      	b.n	8001100 <usart_available+0x40>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8001118:	2002      	movs	r0, #2
 800111a:	e7f1      	b.n	8001100 <usart_available+0x40>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 800111c:	2003      	movs	r0, #3
 800111e:	e7ef      	b.n	8001100 <usart_available+0x40>
 8001120:	20000fd8 	.word	0x20000fd8

08001124 <USART1_IRQHandler>:


// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8001124:	f44f 5080 	mov.w	r0, #4096	; 0x1000
}


// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 8001128:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 800112a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800112e:	f240 5125 	movw	r1, #1317	; 0x525
 8001132:	f002 fae1 	bl	80036f8 <USART_GetITStatus>
 8001136:	2800      	cmp	r0, #0
 8001138:	d12b      	bne.n	8001192 <USART1_IRQHandler+0x6e>
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 800113a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800113e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001142:	f240 7127 	movw	r1, #1831	; 0x727
 8001146:	f002 fad7 	bl	80036f8 <USART_GetITStatus>
 800114a:	2800      	cmp	r0, #0
 800114c:	d020      	beq.n	8001190 <USART1_IRQHandler+0x6c>
		if (txring[USART1Serial].count == 0) {
 800114e:	4816      	ldr	r0, [pc, #88]	; (80011a8 <USART1_IRQHandler+0x84>)
 8001150:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8001154:	b152      	cbz	r2, 800116c <USART1_IRQHandler+0x48>
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
 8001156:	f7ff fd41 	bl	8000bdc <buffer_deque>
 800115a:	4601      	mov	r1, r0
 800115c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001160:	f2c4 0001 	movt	r0, #16385	; 0x4001
		}
	}
}
 8001164:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
 8001168:	f002 b9fa 	b.w	8003560 <USART_SendData>
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 800116c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001170:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001174:	f240 7127 	movw	r1, #1831	; 0x727
 8001178:	f002 fa98 	bl	80036ac <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 800117c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001180:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001184:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
		}
	}
}
 8001188:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 800118c:	f002 bad8 	b.w	8003740 <USART_ClearITPendingBit>
 8001190:	bd08      	pop	{r3, pc}

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
 8001192:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001196:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800119a:	f002 f9e5 	bl	8003568 <USART_ReceiveData>
 800119e:	4601      	mov	r1, r0
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <USART1_IRQHandler+0x88>)
 80011a2:	f7ff fcf7 	bl	8000b94 <buffer_enque>
 80011a6:	e7c8      	b.n	800113a <USART1_IRQHandler+0x16>
 80011a8:	200009b4 	.word	0x200009b4
 80011ac:	20000fd8 	.word	0x20000fd8

080011b0 <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void) {
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 80011b0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
		}
	}
}

void USART2_IRQHandler(void) {
 80011b4:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 80011b6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80011ba:	f240 5125 	movw	r1, #1317	; 0x525
 80011be:	f002 fa9b 	bl	80036f8 <USART_GetITStatus>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d12d      	bne.n	8001222 <USART2_IRQHandler+0x72>
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
 80011c6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 80011ca:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80011ce:	f240 7127 	movw	r1, #1831	; 0x727
 80011d2:	f002 fa91 	bl	80036f8 <USART_GetITStatus>
 80011d6:	2800      	cmp	r0, #0
 80011d8:	d022      	beq.n	8001220 <USART2_IRQHandler+0x70>
		if (txring[USART2Serial].count == 0) {
 80011da:	4817      	ldr	r0, [pc, #92]	; (8001238 <USART2_IRQHandler+0x88>)
 80011dc:	f8b0 220a 	ldrh.w	r2, [r0, #522]	; 0x20a
 80011e0:	b162      	cbz	r2, 80011fc <USART2_IRQHandler+0x4c>
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
 80011e2:	f500 7083 	add.w	r0, r0, #262	; 0x106
 80011e6:	f7ff fcf9 	bl	8000bdc <buffer_deque>
 80011ea:	4601      	mov	r1, r0
 80011ec:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 80011f0:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 80011f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
 80011f8:	f002 b9b2 	b.w	8003560 <USART_SendData>
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
 80011fc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8001200:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001204:	f240 7127 	movw	r1, #1831	; 0x727
 8001208:	f002 fa50 	bl	80036ac <USART_ITConfig>
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 800120c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8001210:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001214:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
		}
	}
}
 8001218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 800121c:	f002 ba90 	b.w	8003740 <USART_ClearITPendingBit>
 8001220:	bd08      	pop	{r3, pc}
	}
}

void USART2_IRQHandler(void) {
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
 8001222:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8001226:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800122a:	f002 f99d 	bl	8003568 <USART_ReceiveData>
 800122e:	4601      	mov	r1, r0
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <USART2_IRQHandler+0x8c>)
 8001232:	f7ff fcaf 	bl	8000b94 <buffer_enque>
 8001236:	e7c6      	b.n	80011c6 <USART2_IRQHandler+0x16>
 8001238:	200009b4 	.word	0x200009b4
 800123c:	200010de 	.word	0x200010de

08001240 <USART3_IRQHandler>:
		}
	}
}

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8001240:	f44f 4090 	mov.w	r0, #18432	; 0x4800
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
		}
	}
}

void USART3_IRQHandler(void) {
 8001244:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8001246:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800124a:	f240 5125 	movw	r1, #1317	; 0x525
 800124e:	f002 fa53 	bl	80036f8 <USART_GetITStatus>
 8001252:	2800      	cmp	r0, #0
 8001254:	d12d      	bne.n	80012b2 <USART3_IRQHandler+0x72>
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8001256:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800125a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800125e:	f240 7127 	movw	r1, #1831	; 0x727
 8001262:	f002 fa49 	bl	80036f8 <USART_GetITStatus>
 8001266:	2800      	cmp	r0, #0
 8001268:	d022      	beq.n	80012b0 <USART3_IRQHandler+0x70>
		if (txring[USART3Serial].count == 0) {
 800126a:	4817      	ldr	r0, [pc, #92]	; (80012c8 <USART3_IRQHandler+0x88>)
 800126c:	f8b0 2310 	ldrh.w	r2, [r0, #784]	; 0x310
 8001270:	b162      	cbz	r2, 800128c <USART3_IRQHandler+0x4c>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
 8001272:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 8001276:	f7ff fcb1 	bl	8000bdc <buffer_deque>
 800127a:	4601      	mov	r1, r0
 800127c:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001280:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 8001284:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
 8001288:	f002 b96a 	b.w	8003560 <USART_SendData>
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 800128c:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001290:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001294:	f240 7127 	movw	r1, #1831	; 0x727
 8001298:	f002 fa08 	bl	80036ac <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 800129c:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80012a0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80012a4:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
		}
	}
}
 80012a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 80012ac:	f002 ba48 	b.w	8003740 <USART_ClearITPendingBit>
 80012b0:	bd08      	pop	{r3, pc}
	}
}

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
 80012b2:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80012b6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80012ba:	f002 f955 	bl	8003568 <USART_ReceiveData>
 80012be:	4601      	mov	r1, r0
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <USART3_IRQHandler+0x8c>)
 80012c2:	f7ff fc67 	bl	8000b94 <buffer_enque>
 80012c6:	e7c6      	b.n	8001256 <USART3_IRQHandler+0x16>
 80012c8:	200009b4 	.word	0x200009b4
 80012cc:	200011e4 	.word	0x200011e4

080012d0 <UART4_IRQHandler>:
		}
	}
}

void UART4_IRQHandler(void) {
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 80012d0:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
		}
	}
}

void UART4_IRQHandler(void) {
 80012d4:	b508      	push	{r3, lr}
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 80012d6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80012da:	f240 5125 	movw	r1, #1317	; 0x525
 80012de:	f002 fa0b 	bl	80036f8 <USART_GetITStatus>
 80012e2:	2800      	cmp	r0, #0
 80012e4:	d12d      	bne.n	8001342 <UART4_IRQHandler+0x72>
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
 80012e6:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 80012ea:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80012ee:	f240 7127 	movw	r1, #1831	; 0x727
 80012f2:	f002 fa01 	bl	80036f8 <USART_GetITStatus>
 80012f6:	2800      	cmp	r0, #0
 80012f8:	d022      	beq.n	8001340 <UART4_IRQHandler+0x70>
		if (txring[UART4Serial].count == 0) {
 80012fa:	4817      	ldr	r0, [pc, #92]	; (8001358 <UART4_IRQHandler+0x88>)
 80012fc:	f8b0 2416 	ldrh.w	r2, [r0, #1046]	; 0x416
 8001300:	b162      	cbz	r2, 800131c <UART4_IRQHandler+0x4c>
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
 8001302:	f200 3012 	addw	r0, r0, #786	; 0x312
 8001306:	f7ff fc69 	bl	8000bdc <buffer_deque>
 800130a:	4601      	mov	r1, r0
 800130c:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8001310:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 8001314:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
 8001318:	f002 b922 	b.w	8003560 <USART_SendData>
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
 800131c:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8001320:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001324:	f240 7127 	movw	r1, #1831	; 0x727
 8001328:	f002 f9c0 	bl	80036ac <USART_ITConfig>
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 800132c:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8001330:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001334:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
		}
	}
}
 8001338:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 800133c:	f002 ba00 	b.w	8003740 <USART_ClearITPendingBit>
 8001340:	bd08      	pop	{r3, pc}
	}
}

void UART4_IRQHandler(void) {
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
 8001342:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8001346:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800134a:	f002 f90d 	bl	8003568 <USART_ReceiveData>
 800134e:	4601      	mov	r1, r0
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <UART4_IRQHandler+0x8c>)
 8001352:	f7ff fc1f 	bl	8000b94 <buffer_enque>
 8001356:	e7c6      	b.n	80012e6 <UART4_IRQHandler+0x16>
 8001358:	200009b4 	.word	0x200009b4
 800135c:	200012ea 	.word	0x200012ea

08001360 <UART5_IRQHandler>:
		}
	}
}

void UART5_IRQHandler(void) {
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
 8001360:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
		}
	}
}

void UART5_IRQHandler(void) {
 8001364:	b508      	push	{r3, lr}
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
 8001366:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800136a:	f240 5125 	movw	r1, #1317	; 0x525
 800136e:	f002 f9c3 	bl	80036f8 <USART_GetITStatus>
 8001372:	2800      	cmp	r0, #0
 8001374:	d12d      	bne.n	80013d2 <UART5_IRQHandler+0x72>
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8001376:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800137a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800137e:	f240 7127 	movw	r1, #1831	; 0x727
 8001382:	f002 f9b9 	bl	80036f8 <USART_GetITStatus>
 8001386:	2800      	cmp	r0, #0
 8001388:	d022      	beq.n	80013d0 <UART5_IRQHandler+0x70>
		if (txring[UART5Serial].count == 0) {
 800138a:	4817      	ldr	r0, [pc, #92]	; (80013e8 <UART5_IRQHandler+0x88>)
 800138c:	f8b0 251c 	ldrh.w	r2, [r0, #1308]	; 0x51c
 8001390:	b162      	cbz	r2, 80013ac <UART5_IRQHandler+0x4c>
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
 8001392:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 8001396:	f7ff fc21 	bl	8000bdc <buffer_deque>
 800139a:	4601      	mov	r1, r0
 800139c:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 80013a0:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 80013a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
 80013a8:	f002 b8da 	b.w	8003560 <USART_SendData>
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
 80013ac:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 80013b0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80013b4:	f240 7127 	movw	r1, #1831	; 0x727
 80013b8:	f002 f978 	bl	80036ac <USART_ITConfig>
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
 80013bc:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 80013c0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80013c4:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
		}
	}
}
 80013c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
 80013cc:	f002 b9b8 	b.w	8003740 <USART_ClearITPendingBit>
 80013d0:	bd08      	pop	{r3, pc}
	}
}

void UART5_IRQHandler(void) {
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
 80013d2:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 80013d6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80013da:	f002 f8c5 	bl	8003568 <USART_ReceiveData>
 80013de:	4601      	mov	r1, r0
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <UART5_IRQHandler+0x8c>)
 80013e2:	f7ff fbd7 	bl	8000b94 <buffer_enque>
 80013e6:	e7c6      	b.n	8001376 <UART5_IRQHandler+0x16>
 80013e8:	200009b4 	.word	0x200009b4
 80013ec:	200013f0 	.word	0x200013f0

080013f0 <USART6_IRQHandler>:
		}
	}
}

void USART6_IRQHandler(void) {
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
 80013f0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
		}
	}
}

void USART6_IRQHandler(void) {
 80013f4:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
 80013f6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80013fa:	f240 5125 	movw	r1, #1317	; 0x525
 80013fe:	f002 f97b 	bl	80036f8 <USART_GetITStatus>
 8001402:	2800      	cmp	r0, #0
 8001404:	d12d      	bne.n	8001462 <USART6_IRQHandler+0x72>
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
 8001406:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800140a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800140e:	f240 7127 	movw	r1, #1831	; 0x727
 8001412:	f002 f971 	bl	80036f8 <USART_GetITStatus>
 8001416:	2800      	cmp	r0, #0
 8001418:	d022      	beq.n	8001460 <USART6_IRQHandler+0x70>
		if (txring[USART6Serial].count == 0) {
 800141a:	4817      	ldr	r0, [pc, #92]	; (8001478 <USART6_IRQHandler+0x88>)
 800141c:	f8b0 2622 	ldrh.w	r2, [r0, #1570]	; 0x622
 8001420:	b162      	cbz	r2, 800143c <USART6_IRQHandler+0x4c>
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
 8001422:	f200 501e 	addw	r0, r0, #1310	; 0x51e
 8001426:	f7ff fbd9 	bl	8000bdc <buffer_deque>
 800142a:	4601      	mov	r1, r0
 800142c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001430:	f2c4 0001 	movt	r0, #16385	; 0x4001
		}
	}
}
 8001434:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
 8001438:	f002 b892 	b.w	8003560 <USART_SendData>
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
 800143c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001440:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001444:	f240 7127 	movw	r1, #1831	; 0x727
 8001448:	f002 f930 	bl	80036ac <USART_ITConfig>
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
 800144c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001450:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001454:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
		}
	}
}
 8001458:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
 800145c:	f002 b970 	b.w	8003740 <USART_ClearITPendingBit>
 8001460:	bd08      	pop	{r3, pc}
	}
}

void USART6_IRQHandler(void) {
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
 8001462:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001466:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800146a:	f002 f87d 	bl	8003568 <USART_ReceiveData>
 800146e:	4601      	mov	r1, r0
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <USART6_IRQHandler+0x8c>)
 8001472:	f7ff fb8f 	bl	8000b94 <buffer_enque>
 8001476:	e7c6      	b.n	8001406 <USART6_IRQHandler+0x16>
 8001478:	200009b4 	.word	0x200009b4
 800147c:	200014f6 	.word	0x200014f6

08001480 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001480:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001484:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001488:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800148c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8001490:	60d8      	str	r0, [r3, #12]
}
 8001492:	4770      	bx	lr

08001494 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001494:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001496:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001498:	b97b      	cbnz	r3, 80014ba <NVIC_Init+0x26>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800149a:	7802      	ldrb	r2, [r0, #0]
 800149c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80014a0:	0951      	lsrs	r1, r2, #5
 80014a2:	f2ce 0300 	movt	r3, #57344	; 0xe000
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80014a6:	f002 021f 	and.w	r2, r2, #31
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80014aa:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80014ac:	2001      	movs	r0, #1
 80014ae:	fa10 f202 	lsls.w	r2, r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80014b2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80014b6:	bc30      	pop	{r4, r5}
 80014b8:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80014ba:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80014be:	f2ce 0300 	movt	r3, #57344	; 0xe000
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80014c2:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80014c4:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80014c6:	7884      	ldrb	r4, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80014c8:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80014ca:	43d2      	mvns	r2, r2
 80014cc:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 80014d0:	f1c2 0104 	rsb	r1, r2, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80014d4:	b2c9      	uxtb	r1, r1
 80014d6:	fa15 f101 	lsls.w	r1, r5, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80014da:	250f      	movs	r5, #15
 80014dc:	fa55 f202 	asrs.w	r2, r5, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80014e0:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80014e2:	4022      	ands	r2, r4
 80014e4:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80014e6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80014ea:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80014f2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80014f6:	7802      	ldrb	r2, [r0, #0]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80014f8:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80014fc:	0951      	lsrs	r1, r2, #5
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80014fe:	f2ce 0300 	movt	r3, #57344	; 0xe000
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001502:	f002 021f 	and.w	r2, r2, #31
 8001506:	2001      	movs	r0, #1
 8001508:	fa10 f202 	lsls.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800150c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001510:	e7d1      	b.n	80014b6 <NVIC_Init+0x22>
 8001512:	bf00      	nop

08001514 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8001514:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8001518:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800151c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8001520:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001524:	4301      	orrs	r1, r0
 8001526:	6099      	str	r1, [r3, #8]
}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop

0800152c <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800152c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001530:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001534:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8001536:	b919      	cbnz	r1, 8001540 <NVIC_SystemLPConfig+0x14>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8001538:	ea22 0000 	bic.w	r0, r2, r0
 800153c:	6118      	str	r0, [r3, #16]
 800153e:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8001540:	4310      	orrs	r0, r2
 8001542:	6118      	str	r0, [r3, #16]
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001548:	f24e 0310 	movw	r3, #57360	; 0xe010
 800154c:	f2ce 0300 	movt	r3, #57344	; 0xe000
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8001550:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	bf0c      	ite	eq
 8001556:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 800155a:	f022 0204 	bicne.w	r2, r2, #4
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop

08001564 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8001564:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8001566:	2300      	movs	r3, #0
 8001568:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800156c:	4298      	cmp	r0, r3
 800156e:	d03c      	beq.n	80015ea <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8001570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001574:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001578:	4298      	cmp	r0, r3
 800157a:	d040      	beq.n	80015fe <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 800157c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001580:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001584:	4298      	cmp	r0, r3
 8001586:	d044      	beq.n	8001612 <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8001588:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800158c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001590:	4298      	cmp	r0, r3
 8001592:	d048      	beq.n	8001626 <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 8001594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001598:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800159c:	4298      	cmp	r0, r3
 800159e:	d04c      	beq.n	800163a <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 80015a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015a8:	4298      	cmp	r0, r3
 80015aa:	d050      	beq.n	800164e <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 80015ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015b4:	4298      	cmp	r0, r3
 80015b6:	d054      	beq.n	8001662 <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 80015b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015c0:	4298      	cmp	r0, r3
 80015c2:	d058      	beq.n	8001676 <GPIO_DeInit+0x112>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOI)
 80015c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015cc:	4298      	cmp	r0, r3
 80015ce:	d000      	beq.n	80015d2 <GPIO_DeInit+0x6e>
 80015d0:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80015d2:	2101      	movs	r1, #1
 80015d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015d8:	f000 fcda 	bl	8001f90 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80015dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015e0:	2100      	movs	r1, #0
    }
  }
}
 80015e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80015e6:	f000 bcd3 	b.w	8001f90 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80015ea:	2001      	movs	r0, #1
 80015ec:	4601      	mov	r1, r0
 80015ee:	f000 fccf 	bl	8001f90 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80015f2:	2001      	movs	r0, #1
 80015f4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80015f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80015fa:	f000 bcc9 	b.w	8001f90 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80015fe:	2002      	movs	r0, #2
 8001600:	2101      	movs	r1, #1
 8001602:	f000 fcc5 	bl	8001f90 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8001606:	2002      	movs	r0, #2
 8001608:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800160a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800160e:	f000 bcbf 	b.w	8001f90 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001612:	2004      	movs	r0, #4
 8001614:	2101      	movs	r1, #1
 8001616:	f000 fcbb 	bl	8001f90 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800161a:	2004      	movs	r0, #4
 800161c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800161e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8001622:	f000 bcb5 	b.w	8001f90 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001626:	2008      	movs	r0, #8
 8001628:	2101      	movs	r1, #1
 800162a:	f000 fcb1 	bl	8001f90 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800162e:	2008      	movs	r0, #8
 8001630:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001632:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8001636:	f000 bcab 	b.w	8001f90 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800163a:	2010      	movs	r0, #16
 800163c:	2101      	movs	r1, #1
 800163e:	f000 fca7 	bl	8001f90 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8001642:	2010      	movs	r0, #16
 8001644:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800164a:	f000 bca1 	b.w	8001f90 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800164e:	2020      	movs	r0, #32
 8001650:	2101      	movs	r1, #1
 8001652:	f000 fc9d 	bl	8001f90 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8001656:	2020      	movs	r0, #32
 8001658:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800165a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800165e:	f000 bc97 	b.w	8001f90 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8001662:	2040      	movs	r0, #64	; 0x40
 8001664:	2101      	movs	r1, #1
 8001666:	f000 fc93 	bl	8001f90 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800166a:	2040      	movs	r0, #64	; 0x40
 800166c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800166e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8001672:	f000 bc8d 	b.w	8001f90 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8001676:	2080      	movs	r0, #128	; 0x80
 8001678:	2101      	movs	r1, #1
 800167a:	f000 fc89 	bl	8001f90 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800167e:	2080      	movs	r0, #128	; 0x80
 8001680:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8001686:	f000 bc83 	b.w	8001f90 <RCC_AHB1PeriphResetCmd>
 800168a:	bf00      	nop

0800168c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800168c:	2300      	movs	r3, #0
 800168e:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001692:	680a      	ldr	r2, [r1, #0]
 8001694:	461c      	mov	r4, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001696:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001698:	f04f 0803 	mov.w	r8, #3
 800169c:	e003      	b.n	80016a6 <GPIO_Init+0x1a>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800169e:	3401      	adds	r4, #1
 80016a0:	3302      	adds	r3, #2
 80016a2:	2c10      	cmp	r4, #16
 80016a4:	d02b      	beq.n	80016fe <GPIO_Init+0x72>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80016a6:	fa17 f504 	lsls.w	r5, r7, r4
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80016aa:	ea05 0602 	and.w	r6, r5, r2

    if (currentpin == pos)
 80016ae:	42ae      	cmp	r6, r5
 80016b0:	d1f5      	bne.n	800169e <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80016b2:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80016b6:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80016ba:	fa08 f503 	lsl.w	r5, r8, r3
 80016be:	43ed      	mvns	r5, r5
 80016c0:	ea05 0909 	and.w	r9, r5, r9
 80016c4:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80016c8:	f8d0 9000 	ldr.w	r9, [r0]
 80016cc:	fa0c fa03 	lsl.w	sl, ip, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80016d0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80016d4:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80016d8:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80016dc:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80016e0:	d910      	bls.n	8001704 <GPIO_Init+0x78>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80016e2:	68c6      	ldr	r6, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80016e4:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80016e8:	4035      	ands	r5, r6
 80016ea:	60c5      	str	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80016ec:	68c6      	ldr	r6, [r0, #12]
 80016ee:	fa0c f503 	lsl.w	r5, ip, r3
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80016f2:	3401      	adds	r4, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80016f4:	4335      	orrs	r5, r6
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80016f6:	3302      	adds	r3, #2
 80016f8:	2c10      	cmp	r4, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80016fa:	60c5      	str	r5, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80016fc:	d1d3      	bne.n	80016a6 <GPIO_Init+0x1a>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80016fe:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8001702:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001704:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001708:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800170c:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001710:	ea05 0a0a 	and.w	sl, r5, sl
 8001714:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001718:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800171c:	fa09 f903 	lsl.w	r9, r9, r3
 8001720:	ea49 090a 	orr.w	r9, r9, sl
 8001724:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001728:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800172c:	ea29 0606 	bic.w	r6, r9, r6
 8001730:	6046      	str	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001732:	6846      	ldr	r6, [r0, #4]
 8001734:	fa0c fc04 	lsl.w	ip, ip, r4
 8001738:	fa1f fc8c 	uxth.w	ip, ip
 800173c:	ea4c 0606 	orr.w	r6, ip, r6
 8001740:	6046      	str	r6, [r0, #4]
 8001742:	e7ce      	b.n	80016e2 <GPIO_Init+0x56>

08001744 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001744:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001746:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800174a:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800174c:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800174e:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001750:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001752:	71c3      	strb	r3, [r0, #7]
}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop

08001758 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001758:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 800175a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175e:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8001760:	9b01      	ldr	r3, [sp, #4]
 8001762:	430b      	orrs	r3, r1
 8001764:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001766:	9b01      	ldr	r3, [sp, #4]
 8001768:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800176a:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800176c:	9b01      	ldr	r3, [sp, #4]
 800176e:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001770:	69c3      	ldr	r3, [r0, #28]
 8001772:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001774:	69c3      	ldr	r3, [r0, #28]
 8001776:	9301      	str	r3, [sp, #4]
}
 8001778:	b002      	add	sp, #8
 800177a:	4770      	bx	lr

0800177c <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800177c:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 800177e:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001780:	bf0c      	ite	eq
 8001782:	2000      	moveq	r0, #0
 8001784:	2001      	movne	r0, #1
 8001786:	4770      	bx	lr

08001788 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8001788:	6900      	ldr	r0, [r0, #16]
}
 800178a:	b280      	uxth	r0, r0
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001790:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 8001792:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001794:	bf0c      	ite	eq
 8001796:	2000      	moveq	r0, #0
 8001798:	2001      	movne	r0, #1
 800179a:	4770      	bx	lr

0800179c <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800179c:	6940      	ldr	r0, [r0, #20]
}
 800179e:	b280      	uxth	r0, r0
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop

080017a4 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80017a4:	8301      	strh	r1, [r0, #24]
}
 80017a6:	4770      	bx	lr

080017a8 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80017a8:	8341      	strh	r1, [r0, #26]
}
 80017aa:	4770      	bx	lr

080017ac <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80017ac:	b90a      	cbnz	r2, 80017b2 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80017ae:	8341      	strh	r1, [r0, #26]
 80017b0:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 80017b2:	8301      	strh	r1, [r0, #24]
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop

080017b8 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80017b8:	6141      	str	r1, [r0, #20]
}
 80017ba:	4770      	bx	lr

080017bc <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80017bc:	6943      	ldr	r3, [r0, #20]
 80017be:	404b      	eors	r3, r1
 80017c0:	6143      	str	r3, [r0, #20]
}
 80017c2:	4770      	bx	lr

080017c4 <GPIO_PinAFConfig>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80017c4:	08cb      	lsrs	r3, r1, #3
 80017c6:	3308      	adds	r3, #8
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80017c8:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80017cc:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80017ce:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80017d0:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 80017d4:	240f      	movs	r4, #15
 80017d6:	408c      	lsls	r4, r1
 80017d8:	ea25 0404 	bic.w	r4, r5, r4
 80017dc:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80017e0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80017e4:	fa12 f101 	lsls.w	r1, r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80017e8:	430c      	orrs	r4, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80017ea:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
 80017ee:	bc30      	pop	{r4, r5}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop

080017f4 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80017f4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80017f6:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80017fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80017fe:	4298      	cmp	r0, r3
 8001800:	d018      	beq.n	8001834 <I2C_DeInit+0x40>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 8001802:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8001806:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800180a:	4298      	cmp	r0, r3
 800180c:	d01e      	beq.n	800184c <I2C_DeInit+0x58>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 800180e:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8001812:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001816:	4298      	cmp	r0, r3
 8001818:	d000      	beq.n	800181c <I2C_DeInit+0x28>
 800181a:	bd08      	pop	{r3, pc}
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 800181c:	2101      	movs	r1, #1
 800181e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001822:	f000 fbdf 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8001826:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800182a:	2100      	movs	r1, #0
    }
  }
}
 800182c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8001830:	f000 bbd8 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001834:	2101      	movs	r1, #1
 8001836:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800183a:	f000 fbd3 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800183e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001842:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8001844:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8001848:	f000 bbcc 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>
  }
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800184c:	2101      	movs	r1, #1
 800184e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001852:	f000 fbc7 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8001856:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800185a:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 800185c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8001860:	f000 bbc0 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>

08001864 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001864:	b570      	push	{r4, r5, r6, lr}
 8001866:	4604      	mov	r4, r0
 8001868:	b084      	sub	sp, #16
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800186a:	4668      	mov	r0, sp
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800186c:	88a6      	ldrh	r6, [r4, #4]
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800186e:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001870:	f000 fac4 	bl	8001dfc <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8001874:	9802      	ldr	r0, [sp, #8]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001876:	682a      	ldr	r2, [r5, #0]
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001878:	f64d 6183 	movw	r1, #56963	; 0xde83

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800187c:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001880:	f2c4 311b 	movt	r1, #17179	; 0x431b

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001884:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001886:	fba1 3100 	umull	r3, r1, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800188a:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800188c:	0c89      	lsrs	r1, r1, #18
  tmpreg |= freqrange;
 800188e:	430e      	orrs	r6, r1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001890:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001892:	8823      	ldrh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001894:	f248 66a0 	movw	r6, #34464	; 0x86a0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	041b      	lsls	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800189e:	f2c0 0601 	movt	r6, #1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80018a2:	0c1b      	lsrs	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80018a4:	42b2      	cmp	r2, r6
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80018a6:	8023      	strh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80018a8:	d822      	bhi.n	80018f0 <I2C_Init+0x8c>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80018aa:	0052      	lsls	r2, r2, #1
 80018ac:	fbb0 f0f2 	udiv	r0, r0, r2
 80018b0:	b280      	uxth	r0, r0
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80018b2:	3101      	adds	r1, #1
 80018b4:	8421      	strh	r1, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80018b6:	2803      	cmp	r0, #3
 80018b8:	bf98      	it	ls
 80018ba:	2004      	movls	r0, #4
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80018bc:	83a0      	strh	r0, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80018be:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80018c0:	896e      	ldrh	r6, [r5, #10]
 80018c2:	88a8      	ldrh	r0, [r5, #4]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80018c4:	8929      	ldrh	r1, [r5, #8]
 80018c6:	89aa      	ldrh	r2, [r5, #12]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80018d0:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80018d2:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80018d6:	f023 0302 	bic.w	r3, r3, #2
 80018da:	041b      	lsls	r3, r3, #16
 80018dc:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80018de:	4330      	orrs	r0, r6
 80018e0:	4303      	orrs	r3, r0
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80018e2:	430a      	orrs	r2, r1
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80018e4:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80018e6:	b292      	uxth	r2, r2
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80018e8:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80018ea:	8122      	strh	r2, [r4, #8]
}
 80018ec:	b004      	add	sp, #16
 80018ee:	bd70      	pop	{r4, r5, r6, pc}
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80018f0:	88ee      	ldrh	r6, [r5, #6]
 80018f2:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80018f6:	429e      	cmp	r6, r3
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80018f8:	bf1d      	ittte	ne
 80018fa:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 80018fe:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 8001902:	fbb0 f0f2 	udivne	r0, r0, r2
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001906:	eb02 0242 	addeq.w	r2, r2, r2, lsl #1
 800190a:	bf0b      	itete	eq
 800190c:	fbb0 f0f2 	udiveq	r0, r0, r2
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001910:	b280      	uxthne	r0, r0
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001912:	b280      	uxtheq	r0, r0
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001914:	f440 4080 	orrne.w	r0, r0, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001918:	0503      	lsls	r3, r0, #20
 800191a:	0d1b      	lsrs	r3, r3, #20
 800191c:	b90b      	cbnz	r3, 8001922 <I2C_Init+0xbe>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800191e:	f040 0001 	orr.w	r0, r0, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001922:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001926:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 800192a:	fb02 f101 	mul.w	r1, r2, r1
 800192e:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8001932:	fb83 2301 	smull	r2, r3, r3, r1
 8001936:	099b      	lsrs	r3, r3, #6
 8001938:	3301      	adds	r3, #1
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800193a:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800193e:	8423      	strh	r3, [r4, #32]
 8001940:	e7bc      	b.n	80018bc <I2C_Init+0x58>
 8001942:	bf00      	nop

08001944 <I2C_StructInit>:
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8001944:	2300      	movs	r3, #0
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8001946:	f241 3288 	movw	r2, #5000	; 0x1388
 800194a:	6002      	str	r2, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 800194c:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800194e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8001952:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8001954:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001956:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800195a:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800195c:	8183      	strh	r3, [r0, #12]
}
 800195e:	4770      	bx	lr

08001960 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001960:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001962:	b929      	cbnz	r1, 8001970 <I2C_Cmd+0x10>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	0c1b      	lsrs	r3, r3, #16
 800196c:	8003      	strh	r3, [r0, #0]
 800196e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001970:	b29b      	uxth	r3, r3
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	8003      	strh	r3, [r0, #0]
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop

0800197c <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800197c:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800197e:	b929      	cbnz	r1, 800198c <I2C_GenerateSTART+0x10>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	0c1b      	lsrs	r3, r3, #16
 8001988:	8003      	strh	r3, [r0, #0]
 800198a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800198c:	b29b      	uxth	r3, r3
 800198e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001992:	8003      	strh	r3, [r0, #0]
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop

08001998 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001998:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800199a:	b929      	cbnz	r1, 80019a8 <I2C_GenerateSTOP+0x10>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 800199c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019a0:	041b      	lsls	r3, r3, #16
 80019a2:	0c1b      	lsrs	r3, r3, #16
 80019a4:	8003      	strh	r3, [r0, #0]
 80019a6:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ae:	8003      	strh	r3, [r0, #0]
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop

080019b4 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80019b4:	b91a      	cbnz	r2, 80019be <I2C_Send7bitAddress+0xa>
    Address |= I2C_OAR1_ADD0;
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 80019b6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 80019ba:	8201      	strh	r1, [r0, #16]
}
 80019bc:	4770      	bx	lr
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 80019be:	f041 0101 	orr.w	r1, r1, #1
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
  }
  /* Send the address */
  I2Cx->DR = Address;
 80019c2:	8201      	strh	r1, [r0, #16]
}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80019c8:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019ca:	b929      	cbnz	r1, 80019d8 <I2C_AcknowledgeConfig+0x10>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80019cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019d0:	041b      	lsls	r3, r3, #16
 80019d2:	0c1b      	lsrs	r3, r3, #16
 80019d4:	8003      	strh	r3, [r0, #0]
 80019d6:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80019d8:	b29b      	uxth	r3, r3
 80019da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019de:	8003      	strh	r3, [r0, #0]
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop

080019e4 <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 80019e4:	8983      	ldrh	r3, [r0, #12]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 80019e6:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80019ea:	041b      	lsls	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80019ec:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 80019f0:	0c1b      	lsrs	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80019f2:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 80019f4:	8183      	strh	r3, [r0, #12]
}
 80019f6:	4770      	bx	lr

080019f8 <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80019f8:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019fa:	b929      	cbnz	r1, 8001a08 <I2C_DualAddressCmd+0x10>
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	041b      	lsls	r3, r3, #16
 8001a02:	0c1b      	lsrs	r3, r3, #16
 8001a04:	8183      	strh	r3, [r0, #12]
 8001a06:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	8183      	strh	r3, [r0, #12]
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop

08001a14 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8001a14:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a16:	b929      	cbnz	r1, 8001a24 <I2C_GeneralCallCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENGC;
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8001a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a1c:	041b      	lsls	r3, r3, #16
 8001a1e:	0c1b      	lsrs	r3, r3, #16
 8001a20:	8003      	strh	r3, [r0, #0]
 8001a22:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a2a:	8003      	strh	r3, [r0, #0]
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop

08001a30 <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8001a30:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a32:	b919      	cbnz	r1, 8001a3c <I2C_SoftwareResetCmd+0xc>
    I2Cx->CR1 |= I2C_CR1_SWRST;
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8001a34:	045b      	lsls	r3, r3, #17
 8001a36:	0c5b      	lsrs	r3, r3, #17
 8001a38:	8003      	strh	r3, [r0, #0]
 8001a3a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8001a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	8003      	strh	r3, [r0, #0]
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop

08001a4c <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8001a4c:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8001a4e:	b129      	cbz	r1, 8001a5c <I2C_StretchClockCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8001a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a54:	041b      	lsls	r3, r3, #16
 8001a56:	0c1b      	lsrs	r3, r3, #16
 8001a58:	8003      	strh	r3, [r0, #0]
 8001a5a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a62:	8003      	strh	r3, [r0, #0]
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop

08001a68 <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8001a68:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8001a6c:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8001a6e:	d005      	beq.n	8001a7c <I2C_FastModeDutyCycleConfig+0x14>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8001a70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a74:	041b      	lsls	r3, r3, #16
 8001a76:	0c1b      	lsrs	r3, r3, #16
 8001a78:	8383      	strh	r3, [r0, #28]
 8001a7a:	4770      	bx	lr
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a82:	8383      	strh	r3, [r0, #28]
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop

08001a88 <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8001a88:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8001a8c:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8001a8e:	d005      	beq.n	8001a9c <I2C_NACKPositionConfig+0x14>
    I2Cx->CR1 |= I2C_NACKPosition_Next;
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8001a90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a94:	041b      	lsls	r3, r3, #16
 8001a96:	0c1b      	lsrs	r3, r3, #16
 8001a98:	8003      	strh	r3, [r0, #0]
 8001a9a:	4770      	bx	lr
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aa2:	8003      	strh	r3, [r0, #0]
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop

08001aa8 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8001aa8:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8001aac:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8001aae:	d005      	beq.n	8001abc <I2C_SMBusAlertConfig+0x14>
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8001ab0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ab4:	041b      	lsls	r3, r3, #16
 8001ab6:	0c1b      	lsrs	r3, r3, #16
 8001ab8:	8003      	strh	r3, [r0, #0]
 8001aba:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ac2:	8003      	strh	r3, [r0, #0]
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop

08001ac8 <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001ac8:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001aca:	b929      	cbnz	r1, 8001ad8 <I2C_ARPCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENARP;
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8001acc:	f023 0310 	bic.w	r3, r3, #16
 8001ad0:	041b      	lsls	r3, r3, #16
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	8003      	strh	r3, [r0, #0]
 8001ad6:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f043 0310 	orr.w	r3, r3, #16
 8001ade:	8003      	strh	r3, [r0, #0]
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop

08001ae4 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001ae4:	8201      	strh	r1, [r0, #16]
}
 8001ae6:	4770      	bx	lr

08001ae8 <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001ae8:	8a00      	ldrh	r0, [r0, #16]
}
 8001aea:	b2c0      	uxtb	r0, r0
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop

08001af0 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001af0:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001af2:	b929      	cbnz	r1, 8001b00 <I2C_TransmitPEC+0x10>
    I2Cx->CR1 |= I2C_CR1_PEC;
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8001af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001af8:	041b      	lsls	r3, r3, #16
 8001afa:	0c1b      	lsrs	r3, r3, #16
 8001afc:	8003      	strh	r3, [r0, #0]
 8001afe:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b06:	8003      	strh	r3, [r0, #0]
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop

08001b0c <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8001b0c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001b10:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8001b12:	d005      	beq.n	8001b20 <I2C_PECPositionConfig+0x14>
    I2Cx->CR1 |= I2C_PECPosition_Next;
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8001b14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	0c1b      	lsrs	r3, r3, #16
 8001b1c:	8003      	strh	r3, [r0, #0]
 8001b1e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b26:	8003      	strh	r3, [r0, #0]
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop

08001b2c <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001b2c:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b2e:	b929      	cbnz	r1, 8001b3c <I2C_CalculatePEC+0x10>
    I2Cx->CR1 |= I2C_CR1_ENPEC;
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8001b30:	f023 0320 	bic.w	r3, r3, #32
 8001b34:	041b      	lsls	r3, r3, #16
 8001b36:	0c1b      	lsrs	r3, r3, #16
 8001b38:	8003      	strh	r3, [r0, #0]
 8001b3a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	f043 0320 	orr.w	r3, r3, #32
 8001b42:	8003      	strh	r3, [r0, #0]
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop

08001b48 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8001b48:	8b00      	ldrh	r0, [r0, #24]
}
 8001b4a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001b4e:	4770      	bx	lr

08001b50 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001b50:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b52:	b929      	cbnz	r1, 8001b60 <I2C_DMACmd+0x10>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8001b54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b58:	041b      	lsls	r3, r3, #16
 8001b5a:	0c1b      	lsrs	r3, r3, #16
 8001b5c:	8083      	strh	r3, [r0, #4]
 8001b5e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b66:	8083      	strh	r3, [r0, #4]
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop

08001b6c <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8001b6c:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b6e:	b929      	cbnz	r1, 8001b7c <I2C_DMALastTransferCmd+0x10>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8001b70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b74:	041b      	lsls	r3, r3, #16
 8001b76:	0c1b      	lsrs	r3, r3, #16
 8001b78:	8083      	strh	r3, [r0, #4]
 8001b7a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b82:	8083      	strh	r3, [r0, #4]
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop

08001b88 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8001b88:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8001b8e:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 8001b90:	9b01      	ldr	r3, [sp, #4]
 8001b92:	18cb      	adds	r3, r1, r3
 8001b94:	9301      	str	r3, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 8001b96:	9b01      	ldr	r3, [sp, #4]
 8001b98:	8818      	ldrh	r0, [r3, #0]
}
 8001b9a:	b280      	uxth	r0, r0
 8001b9c:	b002      	add	sp, #8
 8001b9e:	4770      	bx	lr

08001ba0 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8001ba0:	8883      	ldrh	r3, [r0, #4]
 8001ba2:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8001ba4:	b91a      	cbnz	r2, 8001bae <I2C_ITConfig+0xe>
    I2Cx->CR2 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8001ba6:	ea23 0101 	bic.w	r1, r3, r1
 8001baa:	8081      	strh	r1, [r0, #4]
 8001bac:	4770      	bx	lr
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8001bae:	4319      	orrs	r1, r3
 8001bb0:	8081      	strh	r1, [r0, #4]
 8001bb2:	4770      	bx	lr

08001bb4 <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001bb4:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 8001bb6:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001bb8:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001bba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001bbe:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001bc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 8001bc4:	1a0b      	subs	r3, r1, r0
 8001bc6:	4258      	negs	r0, r3
 8001bc8:	eb40 0003 	adc.w	r0, r0, r3
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop

08001bd0 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001bd0:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 8001bd2:	8b03      	ldrh	r3, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001bd4:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001bd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

  /* Return status */
  return lastevent;
}
 8001bda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001bde:	4770      	bx	lr

08001be0 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001be0:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001be2:	2300      	movs	r3, #0

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001be4:	0f0a      	lsrs	r2, r1, #28
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001bea:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001bec:	9200      	str	r2, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 8001bee:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001bf0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 8001bf4:	b153      	cbz	r3, 8001c0c <I2C_GetFlagStatus+0x2c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001bf6:	9b01      	ldr	r3, [sp, #4]
 8001bf8:	3314      	adds	r3, #20
 8001bfa:	9301      	str	r3, [sp, #4]
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001bfc:	9b01      	ldr	r3, [sp, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001c00:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8001c02:	bf0c      	ite	eq
 8001c04:	2000      	moveq	r0, #0
 8001c06:	2001      	movne	r0, #1
 8001c08:	b002      	add	sp, #8
 8001c0a:	4770      	bx	lr
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001c0c:	9b01      	ldr	r3, [sp, #4]
 8001c0e:	3318      	adds	r3, #24
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001c10:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	e7f2      	b.n	8001bfc <I2C_GetFlagStatus+0x1c>
 8001c16:	bf00      	nop

08001c18 <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001c18:	43c9      	mvns	r1, r1
 8001c1a:	b289      	uxth	r1, r1
 8001c1c:	8281      	strh	r1, [r0, #20]
}
 8001c1e:	4770      	bx	lr

08001c20 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001c20:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001c22:	8a80      	ldrh	r0, [r0, #20]
 8001c24:	b280      	uxth	r0, r0
 8001c26:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001c28:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001c2a:	d006      	beq.n	8001c3a <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001c2c:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 8001c30:	ea13 4111 	ands.w	r1, r3, r1, lsr #16

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8001c34:	bf0c      	ite	eq
 8001c36:	2000      	moveq	r0, #0
 8001c38:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 8001c3a:	4770      	bx	lr

08001c3c <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001c3c:	43c9      	mvns	r1, r1
 8001c3e:	b289      	uxth	r1, r1
 8001c40:	8281      	strh	r1, [r0, #20]
}
 8001c42:	4770      	bx	lr

08001c44 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c44:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c48:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c4c:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c4e:	6819      	ldr	r1, [r3, #0]
 8001c50:	f041 0101 	orr.w	r1, r1, #1
 8001c54:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c56:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c58:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c5a:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c5e:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c62:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c66:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8001c6a:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c6c:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c6e:	6819      	ldr	r1, [r3, #0]
 8001c70:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001c74:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c76:	60da      	str	r2, [r3, #12]
}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop

08001c7c <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8001c7c:	f643 0302 	movw	r3, #14338	; 0x3802
 8001c80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8001c88:	7018      	strb	r0, [r3, #0]
}
 8001c8a:	4770      	bx	lr

08001c8c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001c8c:	b082      	sub	sp, #8

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001c8e:	f44f 5160 	mov.w	r1, #14336	; 0x3800
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001c96:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001c9a:	680a      	ldr	r2, [r1, #0]
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8001c9c:	9b01      	ldr	r3, [sp, #4]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8001ca2:	9b01      	ldr	r3, [sp, #4]
 8001ca4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001ca8:	d001      	beq.n	8001cae <RCC_WaitForHSEStartUp+0x22>
 8001caa:	0393      	lsls	r3, r2, #14
 8001cac:	d5f5      	bpl.n	8001c9a <RCC_WaitForHSEStartUp+0xe>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001cae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cb2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cb6:	6818      	ldr	r0, [r3, #0]
  else
  {
    status = ERROR;
  }
  return (status);
}
 8001cb8:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8001cbc:	b002      	add	sp, #8
 8001cbe:	4770      	bx	lr

08001cc0 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8001cc0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cc8:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8001cca:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8001cce:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8001cd2:	601a      	str	r2, [r3, #0]
}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop

08001cd8 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001cde:	6018      	str	r0, [r3, #0]
}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop

08001ce4 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001ce4:	f643 0370 	movw	r3, #14448	; 0x3870
 8001ce8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cec:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001cee:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001cf0:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001cf2:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001cf4:	d004      	beq.n	8001d00 <RCC_LSEConfig+0x1c>
 8001cf6:	2804      	cmp	r0, #4
 8001cf8:	d101      	bne.n	8001cfe <RCC_LSEConfig+0x1a>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001cfa:	2205      	movs	r2, #5
 8001cfc:	701a      	strb	r2, [r3, #0]
 8001cfe:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8001d00:	7018      	strb	r0, [r3, #0]
      break;
 8001d02:	4770      	bx	lr

08001d04 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8001d04:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8001d08:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001d0c:	6018      	str	r0, [r3, #0]
}
 8001d0e:	4770      	bx	lr

08001d10 <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001d10:	4301      	orrs	r1, r0
 8001d12:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8001d16:	9900      	ldr	r1, [sp, #0]
 8001d18:	085b      	lsrs	r3, r3, #1
 8001d1a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8001d1e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001d28:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8001d2c:	6042      	str	r2, [r0, #4]
                 (PLLQ << 24);
}
 8001d2e:	4770      	bx	lr

08001d30 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001d30:	2360      	movs	r3, #96	; 0x60
 8001d32:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001d36:	6018      	str	r0, [r3, #0]
}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop

08001d3c <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8001d3c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d40:	0180      	lsls	r0, r0, #6
 8001d42:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d46:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 8001d4a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 8001d4e:	4770      	bx	lr

08001d50 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8001d50:	2368      	movs	r3, #104	; 0x68
 8001d52:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001d56:	6018      	str	r0, [r3, #0]
}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop

08001d5c <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001d5c:	234c      	movs	r3, #76	; 0x4c
 8001d5e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001d62:	6018      	str	r0, [r3, #0]
}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop

08001d68 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8001d68:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d70:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8001d72:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8001d76:	4302      	orrs	r2, r0
 8001d78:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001d7a:	609a      	str	r2, [r3, #8]
}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop

08001d80 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8001d80:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d88:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8001d8a:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8001d8e:	4302      	orrs	r2, r0
 8001d90:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001d92:	609a      	str	r2, [r3, #8]
}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop

08001d98 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8001d98:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001da0:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8001da2:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001da6:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001da8:	609a      	str	r2, [r3, #8]
}
 8001daa:	4770      	bx	lr

08001dac <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8001dac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001db0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001db4:	6898      	ldr	r0, [r3, #8]
}
 8001db6:	f000 000c 	and.w	r0, r0, #12
 8001dba:	4770      	bx	lr

08001dbc <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8001dbc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001dc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dc4:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8001dc6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001dca:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001dcc:	609a      	str	r2, [r3, #8]
}
 8001dce:	4770      	bx	lr

08001dd0 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001dd0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001dd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dd8:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8001dda:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001dde:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001de0:	609a      	str	r2, [r3, #8]
}
 8001de2:	4770      	bx	lr

08001de4 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001de4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001de8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dec:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8001dee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001df2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001df6:	609a      	str	r2, [r3, #8]
}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop

08001dfc <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001dfc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e00:	f2c4 0302 	movt	r3, #16386	; 0x4002
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001e04:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8001e0c:	2a04      	cmp	r2, #4
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001e0e:	bf02      	ittt	eq
 8001e10:	f44f 5290 	moveq.w	r2, #4608	; 0x1200
 8001e14:	f2c0 027a 	movteq	r2, #122	; 0x7a
 8001e18:	6002      	streq	r2, [r0, #0]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8001e1a:	d006      	beq.n	8001e2a <RCC_GetClocksFreq+0x2e>
 8001e1c:	2a08      	cmp	r2, #8
 8001e1e:	d01e      	beq.n	8001e5e <RCC_GetClocksFreq+0x62>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001e20:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8001e24:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8001e28:	6002      	str	r2, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001e2a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8001e32:	491c      	ldr	r1, [pc, #112]	; (8001ea4 <RCC_GetClocksFreq+0xa8>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001e34:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 4;
 8001e36:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8001e3a:	5d0c      	ldrb	r4, [r1, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001e3c:	40e2      	lsrs	r2, r4
 8001e3e:	6042      	str	r2, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001e40:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 10;
 8001e42:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8001e46:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001e48:	fa32 f404 	lsrs.w	r4, r2, r4
 8001e4c:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001e4e:	689b      	ldr	r3, [r3, #8]
  tmp = tmp >> 13;
 8001e50:	f3c3 3342 	ubfx	r3, r3, #13, #3
  presc = APBAHBPrescTable[tmp];
 8001e54:	5ccb      	ldrb	r3, [r1, r3]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001e56:	40da      	lsrs	r2, r3
 8001e58:	60c2      	str	r2, [r0, #12]
}
 8001e5a:	bc10      	pop	{r4}
 8001e5c:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001e5e:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e60:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
 8001e62:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001e66:	685c      	ldr	r4, [r3, #4]
 8001e68:	bf15      	itete	ne
 8001e6a:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001e6e:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001e72:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001e76:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e7a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001e7e:	fbb3 f2f1 	udiv	r2, r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001e82:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e86:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001e8a:	f3c4 1488 	ubfx	r4, r4, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001e94:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001e96:	fb02 f204 	mul.w	r2, r2, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001e9a:	005b      	lsls	r3, r3, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ea0:	6002      	str	r2, [r0, #0]
      break;
 8001ea2:	e7c2      	b.n	8001e2a <RCC_GetClocksFreq+0x2e>
 8001ea4:	20000074 	.word	0x20000074

08001ea8 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8001ea8:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8001eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001eb0:	d10c      	bne.n	8001ecc <RCC_RTCCLKConfig+0x24>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001eb2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001eb6:	f2c4 0302 	movt	r3, #16386	; 0x4002

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001eba:	f020 4170 	bic.w	r1, r0, #4026531840	; 0xf0000000
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001ebe:	689a      	ldr	r2, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001ec0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8001ec4:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001ec8:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8001eca:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8001ecc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ed0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ed4:	0500      	lsls	r0, r0, #20
 8001ed6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ed8:	0d00      	lsrs	r0, r0, #20
 8001eda:	4310      	orrs	r0, r2
 8001edc:	6718      	str	r0, [r3, #112]	; 0x70
}
 8001ede:	4770      	bx	lr

08001ee0 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001ee0:	f640 633c 	movw	r3, #3644	; 0xe3c
 8001ee4:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001ee8:	6018      	str	r0, [r3, #0]
}
 8001eea:	4770      	bx	lr

08001eec <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8001eec:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8001ef0:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001ef4:	6018      	str	r0, [r3, #0]
}
 8001ef6:	4770      	bx	lr

08001ef8 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8001ef8:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8001efc:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001f00:	6018      	str	r0, [r3, #0]
}
 8001f02:	4770      	bx	lr

08001f04 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001f04:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f0e:	b919      	cbnz	r1, 8001f18 <RCC_AHB1PeriphClockCmd+0x14>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001f10:	ea22 0000 	bic.w	r0, r2, r0
 8001f14:	6318      	str	r0, [r3, #48]	; 0x30
 8001f16:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001f18:	4310      	orrs	r0, r2
 8001f1a:	6318      	str	r0, [r3, #48]	; 0x30
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop

08001f20 <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001f20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f2a:	b919      	cbnz	r1, 8001f34 <RCC_AHB2PeriphClockCmd+0x14>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8001f2c:	ea22 0000 	bic.w	r0, r2, r0
 8001f30:	6358      	str	r0, [r3, #52]	; 0x34
 8001f32:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001f34:	4310      	orrs	r0, r2
 8001f36:	6358      	str	r0, [r3, #52]	; 0x34
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop

08001f3c <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001f3c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f46:	b919      	cbnz	r1, 8001f50 <RCC_AHB3PeriphClockCmd+0x14>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8001f48:	ea22 0000 	bic.w	r0, r2, r0
 8001f4c:	6398      	str	r0, [r3, #56]	; 0x38
 8001f4e:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001f50:	4310      	orrs	r0, r2
 8001f52:	6398      	str	r0, [r3, #56]	; 0x38
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop

08001f58 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001f58:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f62:	b919      	cbnz	r1, 8001f6c <RCC_APB1PeriphClockCmd+0x14>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001f64:	ea22 0000 	bic.w	r0, r2, r0
 8001f68:	6418      	str	r0, [r3, #64]	; 0x40
 8001f6a:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001f6c:	4310      	orrs	r0, r2
 8001f6e:	6418      	str	r0, [r3, #64]	; 0x40
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop

08001f74 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001f74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f7e:	b919      	cbnz	r1, 8001f88 <RCC_APB2PeriphClockCmd+0x14>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001f80:	ea22 0000 	bic.w	r0, r2, r0
 8001f84:	6458      	str	r0, [r3, #68]	; 0x44
 8001f86:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001f88:	4310      	orrs	r0, r2
 8001f8a:	6458      	str	r0, [r3, #68]	; 0x44
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop

08001f90 <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001f90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f98:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f9a:	b919      	cbnz	r1, 8001fa4 <RCC_AHB1PeriphResetCmd+0x14>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8001f9c:	ea22 0000 	bic.w	r0, r2, r0
 8001fa0:	6118      	str	r0, [r3, #16]
 8001fa2:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001fa4:	4310      	orrs	r0, r2
 8001fa6:	6118      	str	r0, [r3, #16]
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop

08001fac <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001fac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001fb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fb4:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001fb6:	b919      	cbnz	r1, 8001fc0 <RCC_AHB2PeriphResetCmd+0x14>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8001fb8:	ea22 0000 	bic.w	r0, r2, r0
 8001fbc:	6158      	str	r0, [r3, #20]
 8001fbe:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001fc0:	4310      	orrs	r0, r2
 8001fc2:	6158      	str	r0, [r3, #20]
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop

08001fc8 <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001fc8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001fcc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fd0:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001fd2:	b919      	cbnz	r1, 8001fdc <RCC_AHB3PeriphResetCmd+0x14>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8001fd4:	ea22 0000 	bic.w	r0, r2, r0
 8001fd8:	6198      	str	r0, [r3, #24]
 8001fda:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001fdc:	4310      	orrs	r0, r2
 8001fde:	6198      	str	r0, [r3, #24]
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop

08001fe4 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001fe4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001fe8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fec:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001fee:	b919      	cbnz	r1, 8001ff8 <RCC_APB1PeriphResetCmd+0x14>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001ff0:	ea22 0000 	bic.w	r0, r2, r0
 8001ff4:	6218      	str	r0, [r3, #32]
 8001ff6:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001ff8:	4310      	orrs	r0, r2
 8001ffa:	6218      	str	r0, [r3, #32]
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop

08002000 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002000:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002004:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800200a:	b919      	cbnz	r1, 8002014 <RCC_APB2PeriphResetCmd+0x14>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800200c:	ea22 0000 	bic.w	r0, r2, r0
 8002010:	6258      	str	r0, [r3, #36]	; 0x24
 8002012:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002014:	4310      	orrs	r0, r2
 8002016:	6258      	str	r0, [r3, #36]	; 0x24
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop

0800201c <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800201c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002020:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002024:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002026:	b919      	cbnz	r1, 8002030 <RCC_AHB1PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8002028:	ea22 0000 	bic.w	r0, r2, r0
 800202c:	6518      	str	r0, [r3, #80]	; 0x50
 800202e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8002030:	4310      	orrs	r0, r2
 8002032:	6518      	str	r0, [r3, #80]	; 0x50
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop

08002038 <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8002038:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800203c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002042:	b919      	cbnz	r1, 800204c <RCC_AHB2PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8002044:	ea22 0000 	bic.w	r0, r2, r0
 8002048:	6558      	str	r0, [r3, #84]	; 0x54
 800204a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800204c:	4310      	orrs	r0, r2
 800204e:	6558      	str	r0, [r3, #84]	; 0x54
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop

08002054 <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8002054:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002058:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800205c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800205e:	b919      	cbnz	r1, 8002068 <RCC_AHB3PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8002060:	ea22 0000 	bic.w	r0, r2, r0
 8002064:	6598      	str	r0, [r3, #88]	; 0x58
 8002066:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8002068:	4310      	orrs	r0, r2
 800206a:	6598      	str	r0, [r3, #88]	; 0x58
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop

08002070 <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8002070:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002074:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002078:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800207a:	b919      	cbnz	r1, 8002084 <RCC_APB1PeriphClockLPModeCmd+0x14>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800207c:	ea22 0000 	bic.w	r0, r2, r0
 8002080:	6618      	str	r0, [r3, #96]	; 0x60
 8002082:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8002084:	4310      	orrs	r0, r2
 8002086:	6618      	str	r0, [r3, #96]	; 0x60
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop

0800208c <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800208c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002090:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002094:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002096:	b919      	cbnz	r1, 80020a0 <RCC_APB2PeriphClockLPModeCmd+0x14>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8002098:	ea22 0000 	bic.w	r0, r2, r0
 800209c:	6658      	str	r0, [r3, #100]	; 0x64
 800209e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80020a0:	4310      	orrs	r0, r2
 80020a2:	6658      	str	r0, [r3, #100]	; 0x64
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop

080020a8 <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80020a8:	f643 030d 	movw	r3, #14349	; 0x380d
 80020ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020b0:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80020b2:	b919      	cbnz	r1, 80020bc <RCC_ITConfig+0x14>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80020b4:	ea22 0000 	bic.w	r0, r2, r0
 80020b8:	7018      	strb	r0, [r3, #0]
 80020ba:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80020bc:	4310      	orrs	r0, r2
 80020be:	7018      	strb	r0, [r3, #0]
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop

080020c4 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80020c4:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d00e      	beq.n	80020e8 <RCC_GetFlagStatus+0x24>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80020ca:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 80020cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80020d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020d4:	bf0c      	ite	eq
 80020d6:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80020d8:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80020da:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80020de:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 80020e2:	f000 0001 	and.w	r0, r0, #1
 80020e6:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80020e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80020ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	e7f2      	b.n	80020da <RCC_GetFlagStatus+0x16>

080020f4 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 80020f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80020f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80020fe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002102:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop

08002108 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8002108:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800210c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002110:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8002112:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8002114:	bf0c      	ite	eq
 8002116:	2000      	moveq	r0, #0
 8002118:	2001      	movne	r0, #1
 800211a:	4770      	bx	lr

0800211c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800211c:	f643 030e 	movw	r3, #14350	; 0x380e
 8002120:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002124:	7018      	strb	r0, [r3, #0]
}
 8002126:	4770      	bx	lr

08002128 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8002128:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800212a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800212e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002132:	4298      	cmp	r0, r3
 8002134:	d018      	beq.n	8002168 <SPI_I2S_DeInit+0x40>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8002136:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800213a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800213e:	4298      	cmp	r0, r3
 8002140:	d01e      	beq.n	8002180 <SPI_I2S_DeInit+0x58>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
    }
  else
  {
    if (SPIx == SPI3)
 8002142:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002146:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800214a:	4298      	cmp	r0, r3
 800214c:	d000      	beq.n	8002150 <SPI_I2S_DeInit+0x28>
 800214e:	bd08      	pop	{r3, pc}
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8002150:	2101      	movs	r1, #1
 8002152:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002156:	f7ff ff45 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800215a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800215e:	2100      	movs	r1, #0
    }
  }
}
 8002160:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8002164:	f7ff bf3e 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8002168:	2101      	movs	r1, #1
 800216a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800216e:	f7ff ff47 	bl	8002000 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8002172:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002176:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8002178:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800217c:	f7ff bf40 	b.w	8002000 <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8002180:	2101      	movs	r1, #1
 8002182:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002186:	f7ff ff2d 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800218a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800218e:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8002190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8002194:	f7ff bf26 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>

08002198 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8002198:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800219c:	880b      	ldrh	r3, [r1, #0]
 800219e:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 80021a2:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 80021a6:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80021aa:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80021ae:	894f      	ldrh	r7, [r1, #10]
 80021b0:	898e      	ldrh	r6, [r1, #12]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80021b2:	8805      	ldrh	r5, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80021b4:	89cc      	ldrh	r4, [r1, #14]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80021b6:	8a0a      	ldrh	r2, [r1, #16]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80021b8:	ea4a 0303 	orr.w	r3, sl, r3
 80021bc:	ea43 0309 	orr.w	r3, r3, r9
 80021c0:	ea43 0308 	orr.w	r3, r3, r8
 80021c4:	ea43 030c 	orr.w	r3, r3, ip
 80021c8:	433b      	orrs	r3, r7
 80021ca:	4333      	orrs	r3, r6

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80021cc:	f405 5141 	and.w	r1, r5, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80021d0:	4323      	orrs	r3, r4
 80021d2:	430b      	orrs	r3, r1
 80021d4:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80021d6:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80021d8:	8b83      	ldrh	r3, [r0, #28]
 80021da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021de:	041b      	lsls	r3, r3, #16
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80021e4:	8202      	strh	r2, [r0, #16]
}
 80021e6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80021ea:	4770      	bx	lr

080021ec <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80021ec:	8b83      	ldrh	r3, [r0, #28]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80021ee:	688a      	ldr	r2, [r1, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80021f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80021f4:	f023 030f 	bic.w	r3, r3, #15
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	0c1b      	lsrs	r3, r3, #16
 80021fc:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 80021fe:	2302      	movs	r3, #2
 8002200:	8403      	strh	r3, [r0, #32]
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8002202:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8002206:	8b86      	ldrh	r6, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8002208:	429a      	cmp	r2, r3
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 800220a:	b2b6      	uxth	r6, r6
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800220c:	d05d      	beq.n	80022ca <I2S_Init+0xde>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 800220e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002212:	f2c4 0302 	movt	r3, #16386	; 0x4002
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8002216:	888c      	ldrh	r4, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8002218:	689d      	ldr	r5, [r3, #8]
      packetlength = 1;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 800221a:	2c00      	cmp	r4, #0
 800221c:	bf0c      	ite	eq
 800221e:	f04f 0c01 	moveq.w	ip, #1
 8002222:	f04f 0c02 	movne.w	ip, #2
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8002226:	022d      	lsls	r5, r5, #8
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8002228:	bf42      	ittt	mi
 800222a:	689d      	ldrmi	r5, [r3, #8]
 800222c:	f425 0500 	bicmi.w	r5, r5, #8388608	; 0x800000
 8002230:	609d      	strmi	r5, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8002232:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002236:	f2c4 0302 	movt	r3, #16386	; 0x4002
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800223a:	f44f 5590 	mov.w	r5, #4608	; 0x1200
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800223e:	f8d3 8084 	ldr.w	r8, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8002242:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8002246:	f8d3 9004 	ldr.w	r9, [r3, #4]
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800224a:	88cb      	ldrh	r3, [r1, #6]
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 800224c:	f009 093f 	and.w	r9, r9, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8002250:	f2c0 057a 	movt	r5, #122	; 0x7a
 8002254:	fbb5 f5f9 	udiv	r5, r5, r9
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8002258:	f3c8 1888 	ubfx	r8, r8, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800225c:	fb08 f505 	mul.w	r5, r8, r5
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8002260:	f3c7 7702 	ubfx	r7, r7, #28, #3
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8002264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8002268:	fbb5 f5f7 	udiv	r5, r5, r7
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800226c:	d030      	beq.n	80022d0 <I2S_Init+0xe4>
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800226e:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8002272:	fbb5 f5fc 	udiv	r5, r5, ip
 8002276:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800227a:	006d      	lsls	r5, r5, #1
 800227c:	fbb5 f2f2 	udiv	r2, r5, r2
 8002280:	3205      	adds	r2, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8002282:	f64c 45cd 	movw	r5, #52429	; 0xcccd
 8002286:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800228a:	b292      	uxth	r2, r2
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800228c:	fba5 7202 	umull	r7, r2, r5, r2
 8002290:	08d2      	lsrs	r2, r2, #3
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8002292:	0855      	lsrs	r5, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8002294:	1eaf      	subs	r7, r5, #2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8002296:	f002 0201 	and.w	r2, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800229a:	2ffd      	cmp	r7, #253	; 0xfd
 800229c:	bf94      	ite	ls
 800229e:	ea45 2202 	orrls.w	r2, r5, r2, lsl #8
 80022a2:	2202      	movhi	r2, #2
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80022a4:	f8b1 c000 	ldrh.w	ip, [r1]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80022a8:	884f      	ldrh	r7, [r1, #2]
 80022aa:	898d      	ldrh	r5, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80022ac:	ea46 010c 	orr.w	r1, r6, ip
 80022b0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80022b4:	4339      	orrs	r1, r7
 80022b6:	4329      	orrs	r1, r5
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80022b8:	4313      	orrs	r3, r2
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80022ba:	b289      	uxth	r1, r1
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80022bc:	b29b      	uxth	r3, r3
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80022be:	430c      	orrs	r4, r1
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80022c0:	8403      	strh	r3, [r0, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 80022c2:	8384      	strh	r4, [r0, #28]
}
 80022c4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80022c8:	4770      	bx	lr
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80022ca:	888c      	ldrh	r4, [r1, #4]
 80022cc:	88cb      	ldrh	r3, [r1, #6]
 80022ce:	e7e9      	b.n	80022a4 <I2S_Init+0xb8>
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80022d0:	0a2d      	lsrs	r5, r5, #8
 80022d2:	e7d0      	b.n	8002276 <I2S_Init+0x8a>

080022d4 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80022d4:	2300      	movs	r3, #0
 80022d6:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 80022d8:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80022da:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80022dc:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80022de:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80022e0:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80022e2:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80022e4:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80022e6:	2307      	movs	r3, #7
 80022e8:	8203      	strh	r3, [r0, #16]
}
 80022ea:	4770      	bx	lr

080022ec <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 80022ec:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 80022ee:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 80022f0:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 80022f2:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 80022f4:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 80022f6:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 80022f8:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 80022fa:	8183      	strh	r3, [r0, #12]
}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop

08002300 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8002300:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002302:	b929      	cbnz	r1, 8002310 <SPI_Cmd+0x10>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8002304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	0c1b      	lsrs	r3, r3, #16
 800230c:	8003      	strh	r3, [r0, #0]
 800230e:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8002310:	b29b      	uxth	r3, r3
 8002312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002316:	8003      	strh	r3, [r0, #0]
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop

0800231c <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800231c:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800231e:	b929      	cbnz	r1, 800232c <I2S_Cmd+0x10>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8002320:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002324:	041b      	lsls	r3, r3, #16
 8002326:	0c1b      	lsrs	r3, r3, #16
 8002328:	8383      	strh	r3, [r0, #28]
 800232a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800232c:	b29b      	uxth	r3, r3
 800232e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002332:	8383      	strh	r3, [r0, #28]
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop

08002338 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8002338:	8803      	ldrh	r3, [r0, #0]
 800233a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800233e:	041b      	lsls	r3, r3, #16
 8002340:	0c1b      	lsrs	r3, r3, #16
 8002342:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8002344:	8803      	ldrh	r3, [r0, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	430b      	orrs	r3, r1
 800234a:	8003      	strh	r3, [r0, #0]
}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop

08002350 <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8002350:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8002354:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8002356:	d005      	beq.n	8002364 <SPI_BiDirectionalLineConfig+0x14>
    SPIx->CR1 |= SPI_Direction_Tx;
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8002358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	0c1b      	lsrs	r3, r3, #16
 8002360:	8003      	strh	r3, [r0, #0]
 8002362:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8002364:	b29b      	uxth	r3, r3
 8002366:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800236a:	8003      	strh	r3, [r0, #0]
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop

08002370 <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8002370:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8002374:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8002376:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8002378:	d004      	beq.n	8002384 <SPI_NSSInternalSoftwareConfig+0x14>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 800237a:	b29b      	uxth	r3, r3
 800237c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002380:	8003      	strh	r3, [r0, #0]
 8002382:	4770      	bx	lr
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8002384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002388:	041b      	lsls	r3, r3, #16
 800238a:	0c1b      	lsrs	r3, r3, #16
 800238c:	8003      	strh	r3, [r0, #0]
 800238e:	4770      	bx	lr

08002390 <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8002390:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002392:	b929      	cbnz	r1, 80023a0 <SPI_SSOutputCmd+0x10>
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	041b      	lsls	r3, r3, #16
 800239a:	0c1b      	lsrs	r3, r3, #16
 800239c:	8083      	strh	r3, [r0, #4]
 800239e:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	f043 0304 	orr.w	r3, r3, #4
 80023a6:	8083      	strh	r3, [r0, #4]
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop

080023ac <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 80023ac:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80023ae:	b929      	cbnz	r1, 80023bc <SPI_TIModeCmd+0x10>
    SPIx->CR2 |= SPI_CR2_FRF;
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 80023b0:	f023 0310 	bic.w	r3, r3, #16
 80023b4:	041b      	lsls	r3, r3, #16
 80023b6:	0c1b      	lsrs	r3, r3, #16
 80023b8:	8083      	strh	r3, [r0, #4]
 80023ba:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 80023bc:	b29b      	uxth	r3, r3
 80023be:	f043 0310 	orr.w	r3, r3, #16
 80023c2:	8083      	strh	r3, [r0, #4]
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop

080023c8 <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80023c8:	8b83      	ldrh	r3, [r0, #28]
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80023ca:	898a      	ldrh	r2, [r1, #12]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80023cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80023d0:	f023 030f 	bic.w	r3, r3, #15
 80023d4:	041b      	lsls	r3, r3, #16
 80023d6:	0c1b      	lsrs	r3, r3, #16
 80023d8:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 80023da:	2302      	movs	r3, #2
 80023dc:	8403      	strh	r3, [r0, #32]
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 80023de:	b470      	push	{r4, r5, r6}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 80023e0:	8b86      	ldrh	r6, [r0, #28]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80023e2:	884d      	ldrh	r5, [r1, #2]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80023e4:	880b      	ldrh	r3, [r1, #0]
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80023e6:	888c      	ldrh	r4, [r1, #4]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 80023e8:	b2b1      	uxth	r1, r6
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80023ea:	4329      	orrs	r1, r5
 80023ec:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80023f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f4:	bf18      	it	ne
 80023f6:	2b00      	cmpne	r3, #0
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80023f8:	ea41 0104 	orr.w	r1, r1, r4
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80023fc:	bf14      	ite	ne
 80023fe:	2300      	movne	r3, #0
 8002400:	2301      	moveq	r3, #1
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002402:	ea41 0102 	orr.w	r1, r1, r2
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
  {
    tmp = I2S_Mode_SlaveRx;
 8002406:	bf14      	ite	ne
 8002408:	461a      	movne	r2, r3
 800240a:	f44f 7280 	moveq.w	r2, #256	; 0x100
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800240e:	b28b      	uxth	r3, r1
 8002410:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 8002412:	8383      	strh	r3, [r0, #28]
}
 8002414:	bc70      	pop	{r4, r5, r6}
 8002416:	4770      	bx	lr

08002418 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8002418:	8980      	ldrh	r0, [r0, #12]
}
 800241a:	b280      	uxth	r0, r0
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop

08002420 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002420:	8181      	strh	r1, [r0, #12]
}
 8002422:	4770      	bx	lr

08002424 <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8002424:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002426:	b929      	cbnz	r1, 8002434 <SPI_CalculateCRC+0x10>
    SPIx->CR1 |= SPI_CR1_CRCEN;
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8002428:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800242c:	041b      	lsls	r3, r3, #16
 800242e:	0c1b      	lsrs	r3, r3, #16
 8002430:	8003      	strh	r3, [r0, #0]
 8002432:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8002434:	b29b      	uxth	r3, r3
 8002436:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800243a:	8003      	strh	r3, [r0, #0]
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop

08002440 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8002440:	8803      	ldrh	r3, [r0, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002448:	8003      	strh	r3, [r0, #0]
}
 800244a:	4770      	bx	lr

0800244c <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 800244c:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800244e:	bf15      	itete	ne
 8002450:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8002452:	8a80      	ldrheq	r0, [r0, #20]
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8002454:	b280      	uxthne	r0, r0
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8002456:	b280      	uxtheq	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop

0800245c <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 800245c:	8a00      	ldrh	r0, [r0, #16]
}
 800245e:	b280      	uxth	r0, r0
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop

08002464 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8002464:	8883      	ldrh	r3, [r0, #4]
 8002466:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8002468:	b91a      	cbnz	r2, 8002472 <SPI_I2S_DMACmd+0xe>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800246a:	ea23 0101 	bic.w	r1, r3, r1
 800246e:	8081      	strh	r1, [r0, #4]
 8002470:	4770      	bx	lr
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8002472:	4319      	orrs	r1, r3
 8002474:	8081      	strh	r1, [r0, #4]
 8002476:	4770      	bx	lr

08002478 <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8002478:	2301      	movs	r3, #1
 800247a:	0909      	lsrs	r1, r1, #4
 800247c:	fa13 f101 	lsls.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8002480:	8883      	ldrh	r3, [r0, #4]

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8002482:	b289      	uxth	r1, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8002484:	b29b      	uxth	r3, r3
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 8002486:	b91a      	cbnz	r2, 8002490 <SPI_I2S_ITConfig+0x18>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8002488:	ea23 0101 	bic.w	r1, r3, r1
 800248c:	8081      	strh	r1, [r0, #4]
 800248e:	4770      	bx	lr
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8002490:	4319      	orrs	r1, r3
 8002492:	8081      	strh	r1, [r0, #4]
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop

08002498 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002498:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800249a:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 800249c:	bf0c      	ite	eq
 800249e:	2000      	moveq	r0, #0
 80024a0:	2001      	movne	r0, #1
 80024a2:	4770      	bx	lr

080024a4 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 80024a4:	43c9      	mvns	r1, r1
 80024a6:	b289      	uxth	r1, r1
 80024a8:	8101      	strh	r1, [r0, #8]
}
 80024aa:	4770      	bx	lr

080024ac <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 80024ac:	b410      	push	{r4}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80024ae:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80024b0:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80024b2:	2201      	movs	r2, #1
 80024b4:	f001 030f 	and.w	r3, r1, #15

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80024b8:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80024ba:	fa12 f303 	lsls.w	r3, r2, r3

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80024be:	4018      	ands	r0, r3

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80024c0:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80024c2:	d005      	beq.n	80024d0 <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 80024c4:	0909      	lsrs	r1, r1, #4
 80024c6:	408a      	lsls	r2, r1
  *            @arg SPI_IT_CRCERR: CRC Error interrupt.
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 80024c8:	4214      	tst	r4, r2

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 80024ca:	bf0c      	ite	eq
 80024cc:	2000      	moveq	r0, #0
 80024ce:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 80024d0:	bc10      	pop	{r4}
 80024d2:	4770      	bx	lr

080024d4 <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80024d4:	f001 010f 	and.w	r1, r1, #15
 80024d8:	2301      	movs	r3, #1
 80024da:	fa13 f101 	lsls.w	r1, r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 80024de:	43c9      	mvns	r1, r1
 80024e0:	b289      	uxth	r1, r1
 80024e2:	8101      	strh	r1, [r0, #8]
}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop

080024e8 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 80024e8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 80024ea:	2300      	movs	r3, #0
 80024ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80024f0:	4298      	cmp	r0, r3
 80024f2:	d05b      	beq.n	80025ac <TIM_DeInit+0xc4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 80024f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80024f8:	d062      	beq.n	80025c0 <TIM_DeInit+0xd8>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 80024fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002502:	4298      	cmp	r0, r3
 8002504:	d066      	beq.n	80025d4 <TIM_DeInit+0xec>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 8002506:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800250a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800250e:	4298      	cmp	r0, r3
 8002510:	d06a      	beq.n	80025e8 <TIM_DeInit+0x100>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 8002512:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002516:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800251a:	4298      	cmp	r0, r3
 800251c:	d06e      	beq.n	80025fc <TIM_DeInit+0x114>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 800251e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002522:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002526:	4298      	cmp	r0, r3
 8002528:	d072      	beq.n	8002610 <TIM_DeInit+0x128>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 800252a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800252e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002532:	4298      	cmp	r0, r3
 8002534:	d076      	beq.n	8002624 <TIM_DeInit+0x13c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 8002536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800253a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800253e:	4298      	cmp	r0, r3
 8002540:	d07a      	beq.n	8002638 <TIM_DeInit+0x150>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 8002542:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002546:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800254a:	4298      	cmp	r0, r3
 800254c:	d07e      	beq.n	800264c <TIM_DeInit+0x164>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 800254e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002552:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002556:	4298      	cmp	r0, r3
 8002558:	f000 8084 	beq.w	8002664 <TIM_DeInit+0x17c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 800255c:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002560:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002564:	4298      	cmp	r0, r3
 8002566:	f000 8089 	beq.w	800267c <TIM_DeInit+0x194>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 800256a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800256e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002572:	4298      	cmp	r0, r3
 8002574:	f000 808e 	beq.w	8002694 <TIM_DeInit+0x1ac>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 8002578:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800257c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002580:	4298      	cmp	r0, r3
 8002582:	f000 8091 	beq.w	80026a8 <TIM_DeInit+0x1c0>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 8002586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800258e:	4298      	cmp	r0, r3
 8002590:	d000      	beq.n	8002594 <TIM_DeInit+0xac>
 8002592:	bd08      	pop	{r3, pc}
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8002594:	2101      	movs	r1, #1
 8002596:	f44f 7080 	mov.w	r0, #256	; 0x100
 800259a:	f7ff fd23 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800259e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80025a2:	2100      	movs	r1, #0
    }   
  }
}
 80025a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 80025a8:	f7ff bd1c 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80025ac:	2001      	movs	r0, #1
 80025ae:	4601      	mov	r1, r0
 80025b0:	f7ff fd26 	bl	8002000 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80025b4:	2001      	movs	r0, #1
 80025b6:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80025b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80025bc:	f7ff bd20 	b.w	8002000 <RCC_APB2PeriphResetCmd>
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 80025c0:	2001      	movs	r0, #1
 80025c2:	4601      	mov	r1, r0
 80025c4:	f7ff fd0e 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80025c8:	2001      	movs	r0, #1
 80025ca:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80025cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80025d0:	f7ff bd08 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80025d4:	2002      	movs	r0, #2
 80025d6:	2101      	movs	r1, #1
 80025d8:	f7ff fd04 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80025dc:	2002      	movs	r0, #2
 80025de:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80025e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80025e4:	f7ff bcfe 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80025e8:	2004      	movs	r0, #4
 80025ea:	2101      	movs	r1, #1
 80025ec:	f7ff fcfa 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80025f0:	2004      	movs	r0, #4
 80025f2:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80025f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80025f8:	f7ff bcf4 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80025fc:	2008      	movs	r0, #8
 80025fe:	2101      	movs	r1, #1
 8002600:	f7ff fcf0 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8002604:	2008      	movs	r0, #8
 8002606:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002608:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800260c:	f7ff bcea 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8002610:	2010      	movs	r0, #16
 8002612:	2101      	movs	r1, #1
 8002614:	f7ff fce6 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8002618:	2010      	movs	r0, #16
 800261a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800261c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8002620:	f7ff bce0 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8002624:	2020      	movs	r0, #32
 8002626:	2101      	movs	r1, #1
 8002628:	f7ff fcdc 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800262c:	2020      	movs	r0, #32
 800262e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002630:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8002634:	f7ff bcd6 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8002638:	2002      	movs	r0, #2
 800263a:	2101      	movs	r1, #1
 800263c:	f7ff fce0 	bl	8002000 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8002640:	2002      	movs	r0, #2
 8002642:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002644:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8002648:	f7ff bcda 	b.w	8002000 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800264c:	2101      	movs	r1, #1
 800264e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002652:	f7ff fcd5 	bl	8002000 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8002656:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800265a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800265c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8002660:	f7ff bcce 	b.w	8002000 <RCC_APB2PeriphResetCmd>
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8002664:	2101      	movs	r1, #1
 8002666:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800266a:	f7ff fcc9 	bl	8002000 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800266e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002672:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002674:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8002678:	f7ff bcc2 	b.w	8002000 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800267c:	2101      	movs	r1, #1
 800267e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002682:	f7ff fcbd 	bl	8002000 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8002686:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800268a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800268c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8002690:	f7ff bcb6 	b.w	8002000 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8002694:	2040      	movs	r0, #64	; 0x40
 8002696:	2101      	movs	r1, #1
 8002698:	f7ff fca4 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800269c:	2040      	movs	r0, #64	; 0x40
 800269e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80026a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 80026a4:	f7ff bc9e 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 80026a8:	2080      	movs	r0, #128	; 0x80
 80026aa:	2101      	movs	r1, #1
 80026ac:	f7ff fc9a 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80026b0:	2080      	movs	r0, #128	; 0x80
 80026b2:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80026b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80026b8:	f7ff bc94 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>

080026bc <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80026bc:	2300      	movs	r3, #0
 80026be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026c2:	f2c4 0301 	movt	r3, #16385	; 0x4001
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80026c6:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80026c8:	f2c4 0201 	movt	r2, #16385	; 0x4001
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80026cc:	8804      	ldrh	r4, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80026ce:	4298      	cmp	r0, r3
 80026d0:	bf18      	it	ne
 80026d2:	4290      	cmpne	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80026d4:	b2a4      	uxth	r4, r4

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80026d6:	bf14      	ite	ne
 80026d8:	2300      	movne	r3, #0
 80026da:	2301      	moveq	r3, #1
 80026dc:	d008      	beq.n	80026f0 <TIM_TimeBaseInit+0x34>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80026de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80026e6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80026ea:	bf18      	it	ne
 80026ec:	4290      	cmpne	r0, r2
 80026ee:	d123      	bne.n	8002738 <TIM_TimeBaseInit+0x7c>
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80026f0:	f64f 758f 	movw	r5, #65423	; 0xff8f
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80026f4:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80026f6:	4025      	ands	r5, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80026f8:	ea45 0402 	orr.w	r4, r5, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80026fc:	f44f 56a0 	mov.w	r6, #5120	; 0x1400
 8002700:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8002704:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8002708:	f2c4 0600 	movt	r6, #16384	; 0x4000
 800270c:	42b0      	cmp	r0, r6
 800270e:	bf18      	it	ne
 8002710:	42a8      	cmpne	r0, r5
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002712:	bf1f      	itttt	ne
 8002714:	890d      	ldrhne	r5, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002716:	f64f 42ff 	movwne	r2, #64767	; 0xfcff
 800271a:	4022      	andne	r2, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800271c:	ea42 0405 	orrne.w	r4, r2, r5
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8002720:	684d      	ldr	r5, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002722:	880a      	ldrh	r2, [r1, #0]
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8002724:	8004      	strh	r4, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8002726:	62c5      	str	r5, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002728:	8502      	strh	r2, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800272a:	b10b      	cbz	r3, 8002730 <TIM_TimeBaseInit+0x74>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800272c:	7a8b      	ldrb	r3, [r1, #10]
 800272e:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002730:	2301      	movs	r3, #1
 8002732:	8283      	strh	r3, [r0, #20]
}
 8002734:	bc70      	pop	{r4, r5, r6}
 8002736:	4770      	bx	lr

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002738:	f44f 6540 	mov.w	r5, #3072	; 0xc00
 800273c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002740:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8002744:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002748:	4290      	cmp	r0, r2
 800274a:	bf18      	it	ne
 800274c:	42a8      	cmpne	r0, r5
 800274e:	d1d5      	bne.n	80026fc <TIM_TimeBaseInit+0x40>
 8002750:	e7ce      	b.n	80026f0 <TIM_TimeBaseInit+0x34>
 8002752:	bf00      	nop

08002754 <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002754:	2300      	movs	r3, #0
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8002756:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800275a:	6041      	str	r1, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800275c:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800275e:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002760:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8002762:	7283      	strb	r3, [r0, #10]
}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop

08002768 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8002768:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800276a:	8282      	strh	r2, [r0, #20]
}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop

08002770 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8002770:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002776:	041b      	lsls	r3, r3, #16
 8002778:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800277a:	430b      	orrs	r3, r1

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 800277c:	8003      	strh	r3, [r0, #0]
}
 800277e:	4770      	bx	lr

08002780 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8002780:	6241      	str	r1, [r0, #36]	; 0x24
}
 8002782:	4770      	bx	lr

08002784 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8002784:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 8002786:	4770      	bx	lr

08002788 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8002788:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 800278a:	4770      	bx	lr

0800278c <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 800278c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 800278e:	b280      	uxth	r0, r0
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop

08002794 <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8002794:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002796:	b929      	cbnz	r1, 80027a4 <TIM_UpdateDisableConfig+0x10>
    TIMx->CR1 |= TIM_CR1_UDIS;
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8002798:	f023 0302 	bic.w	r3, r3, #2
 800279c:	041b      	lsls	r3, r3, #16
 800279e:	0c1b      	lsrs	r3, r3, #16
 80027a0:	8003      	strh	r3, [r0, #0]
 80027a2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f043 0302 	orr.w	r3, r3, #2
 80027aa:	8003      	strh	r3, [r0, #0]
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop

080027b0 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80027b0:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 80027b2:	b929      	cbnz	r1, 80027c0 <TIM_UpdateRequestConfig+0x10>
    TIMx->CR1 |= TIM_CR1_URS;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	041b      	lsls	r3, r3, #16
 80027ba:	0c1b      	lsrs	r3, r3, #16
 80027bc:	8003      	strh	r3, [r0, #0]
 80027be:	4770      	bx	lr
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f043 0304 	orr.w	r3, r3, #4
 80027c6:	8003      	strh	r3, [r0, #0]
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop

080027cc <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80027cc:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80027ce:	b929      	cbnz	r1, 80027dc <TIM_ARRPreloadConfig+0x10>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80027d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027d4:	041b      	lsls	r3, r3, #16
 80027d6:	0c1b      	lsrs	r3, r3, #16
 80027d8:	8003      	strh	r3, [r0, #0]
 80027da:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80027dc:	b29b      	uxth	r3, r3
 80027de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e2:	8003      	strh	r3, [r0, #0]
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop

080027e8 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 80027e8:	8803      	ldrh	r3, [r0, #0]
 80027ea:	f023 0308 	bic.w	r3, r3, #8
 80027ee:	041b      	lsls	r3, r3, #16
 80027f0:	0c1b      	lsrs	r3, r3, #16
 80027f2:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 80027f4:	8803      	ldrh	r3, [r0, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	430b      	orrs	r3, r1
 80027fa:	8003      	strh	r3, [r0, #0]
}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop

08002800 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8002800:	8803      	ldrh	r3, [r0, #0]
 8002802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002806:	041b      	lsls	r3, r3, #16
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800280c:	8803      	ldrh	r3, [r0, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	430b      	orrs	r3, r1
 8002812:	8003      	strh	r3, [r0, #0]
}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop

08002818 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002818:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800281a:	b929      	cbnz	r1, 8002828 <TIM_Cmd+0x10>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	041b      	lsls	r3, r3, #16
 8002822:	0c1b      	lsrs	r3, r3, #16
 8002824:	8003      	strh	r3, [r0, #0]
 8002826:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002828:	b29b      	uxth	r3, r3
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	8003      	strh	r3, [r0, #0]
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop

08002834 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002834:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002838:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800283a:	898d      	ldrh	r5, [r1, #12]
 800283c:	884f      	ldrh	r7, [r1, #2]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800283e:	f8b1 c000 	ldrh.w	ip, [r1]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002842:	f024 0401 	bic.w	r4, r4, #1
 8002846:	0424      	lsls	r4, r4, #16
 8002848:	0c24      	lsrs	r4, r4, #16
 800284a:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800284c:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800284e:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002850:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002852:	432f      	orrs	r7, r5
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002854:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002858:	2500      	movs	r5, #0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800285a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800285e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8002862:	0412      	lsls	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002864:	041b      	lsls	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002866:	f2c4 0601 	movt	r6, #16385	; 0x4001
 800286a:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800286e:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002870:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002872:	b2bf      	uxth	r7, r7
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002874:	42a8      	cmp	r0, r5
 8002876:	bf18      	it	ne
 8002878:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800287a:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800287c:	ea42 020c 	orr.w	r2, r2, ip
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002880:	ea47 0303 	orr.w	r3, r7, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002884:	d116      	bne.n	80028b4 <TIM_OC1Init+0x80>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002886:	f64f 75f7 	movw	r5, #65527	; 0xfff7
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800288a:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800288e:	f8b1 8012 	ldrh.w	r8, [r1, #18]
 8002892:	8a0f      	ldrh	r7, [r1, #16]
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002894:	888e      	ldrh	r6, [r1, #4]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002896:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002898:	ea45 0c0c 	orr.w	ip, r5, ip
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800289c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80028a0:	f64f 45ff 	movw	r5, #64767	; 0xfcff
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80028a4:	ea48 0707 	orr.w	r7, r8, r7
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80028a8:	4025      	ands	r5, r4
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80028aa:	ea0c 0303 	and.w	r3, ip, r3
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80028ae:	b2bc      	uxth	r4, r7
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80028b0:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80028b2:	432c      	orrs	r4, r5
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80028b4:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b6:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028b8:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80028ba:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028bc:	8403      	strh	r3, [r0, #32]
}
 80028be:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80028c2:	4770      	bx	lr

080028c4 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80028c4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80028c8:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80028ca:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80028cc:	f8b1 c000 	ldrh.w	ip, [r1]
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80028d0:	884f      	ldrh	r7, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80028d2:	f024 0410 	bic.w	r4, r4, #16
 80028d6:	0424      	lsls	r4, r4, #16
 80028d8:	0c24      	lsrs	r4, r4, #16
 80028da:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80028dc:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028de:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028e0:	8b03      	ldrh	r3, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80028e2:	f022 0220 	bic.w	r2, r2, #32
 80028e6:	0412      	lsls	r2, r2, #16
 80028e8:	0c12      	lsrs	r2, r2, #16
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80028ea:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 80028ee:	041b      	lsls	r3, r3, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80028f0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80028f4:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80028f8:	2500      	movs	r5, #0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80028fa:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80028fc:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8002900:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002904:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002908:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800290c:	42a8      	cmp	r0, r5
 800290e:	bf18      	it	ne
 8002910:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002912:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002914:	b29b      	uxth	r3, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002916:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002918:	d119      	bne.n	800294e <TIM_OC2Init+0x8a>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800291a:	f64f 767f 	movw	r6, #65407	; 0xff7f
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800291e:	f8b1 900e 	ldrh.w	r9, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8002922:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002926:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800292a:	8a4f      	ldrh	r7, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800292c:	4016      	ands	r6, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800292e:	f24f 35ff 	movw	r5, #62463	; 0xf3ff
 8002932:	4025      	ands	r5, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002934:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8002938:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 800293c:	4032      	ands	r2, r6
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800293e:	ea45 0488 	orr.w	r4, r5, r8, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002942:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002946:	ea44 0487 	orr.w	r4, r4, r7, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800294a:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800294c:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800294e:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002950:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002952:	8303      	strh	r3, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002954:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002956:	8402      	strh	r2, [r0, #32]
}
 8002958:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop

08002960 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002960:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002964:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002966:	898d      	ldrh	r5, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002968:	f8b1 c002 	ldrh.w	ip, [r1, #2]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800296c:	880f      	ldrh	r7, [r1, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800296e:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8002972:	0424      	lsls	r4, r4, #16
 8002974:	0c24      	lsrs	r4, r4, #16
 8002976:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002978:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800297a:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800297c:	8b83      	ldrh	r3, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800297e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002982:	0412      	lsls	r2, r2, #16
 8002984:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002986:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800298a:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800298e:	2500      	movs	r5, #0
 8002990:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8002994:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002996:	f2c4 0601 	movt	r6, #16385	; 0x4001
 800299a:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800299e:	0c1b      	lsrs	r3, r3, #16
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80029a0:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80029a4:	42a8      	cmp	r0, r5
 80029a6:	bf18      	it	ne
 80029a8:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029aa:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80029ac:	ea43 0307 	orr.w	r3, r3, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80029b0:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80029b2:	d119      	bne.n	80029e8 <TIM_OC3Init+0x88>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80029b4:	f24f 76ff 	movw	r6, #63487	; 0xf7ff
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80029b8:	f8b1 900e 	ldrh.w	r9, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80029bc:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80029c0:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80029c4:	8a4f      	ldrh	r7, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80029c6:	4016      	ands	r6, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80029c8:	f64c 75ff 	movw	r5, #53247	; 0xcfff
 80029cc:	4025      	ands	r5, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80029ce:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80029d2:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 80029d6:	4032      	ands	r2, r6
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80029d8:	ea45 1408 	orr.w	r4, r5, r8, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80029dc:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80029e0:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80029e4:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80029e6:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80029e8:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ea:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ec:	8383      	strh	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80029ee:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f0:	8402      	strh	r2, [r0, #32]
}
 80029f2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80029f6:	4770      	bx	lr

080029f8 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80029f8:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80029fa:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80029fc:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80029fe:	f8b1 c000 	ldrh.w	ip, [r1]
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002a02:	884f      	ldrh	r7, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002a04:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002a08:	0424      	lsls	r4, r4, #16
 8002a0a:	0c24      	lsrs	r4, r4, #16
 8002a0c:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a0e:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a10:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a12:	8b83      	ldrh	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8002a14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a18:	0412      	lsls	r2, r2, #16
 8002a1a:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002a1c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8002a20:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002a24:	2500      	movs	r5, #0
 8002a26:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8002a2a:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8002a2e:	f2c4 0601 	movt	r6, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002a36:	42a8      	cmp	r0, r5
 8002a38:	bf18      	it	ne
 8002a3a:	42b0      	cmpne	r0, r6
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002a3c:	bf08      	it	eq
 8002a3e:	8a0e      	ldrheq	r6, [r1, #16]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8002a40:	6889      	ldr	r1, [r1, #8]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a42:	b2a4      	uxth	r4, r4
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8002a44:	bf02      	ittt	eq
 8002a46:	f64b 75ff 	movweq	r5, #49151	; 0xbfff
 8002a4a:	4025      	andeq	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002a4c:	ea45 1486 	orreq.w	r4, r5, r6, lsl #6
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002a50:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002a54:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002a58:	b29b      	uxth	r3, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002a5a:	b292      	uxth	r2, r2
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002a5c:	bf08      	it	eq
 8002a5e:	b2a4      	uxtheq	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a60:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002a62:	8383      	strh	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8002a64:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a66:	8402      	strh	r2, [r0, #32]
}
 8002a68:	bcf0      	pop	{r4, r5, r6, r7}
 8002a6a:	4770      	bx	lr

08002a6c <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8002a70:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8002a72:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8002a74:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8002a76:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8002a78:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8002a7a:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8002a7c:	8243      	strh	r3, [r0, #18]
}
 8002a7e:	4770      	bx	lr

08002a80 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8002a80:	b410      	push	{r4}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002a82:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8002a84:	2301      	movs	r3, #1
 8002a86:	408b      	lsls	r3, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002a88:	b2a4      	uxth	r4, r4
 8002a8a:	ea24 0303 	bic.w	r3, r4, r3
 8002a8e:	8403      	strh	r3, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8002a90:	3018      	adds	r0, #24
  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002a92:	2900      	cmp	r1, #0
 8002a94:	bf18      	it	ne
 8002a96:	2908      	cmpne	r1, #8
 8002a98:	d00e      	beq.n	8002ab8 <TIM_SelectOCxM+0x38>
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8002a9a:	3904      	subs	r1, #4
 8002a9c:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8002aa0:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8002aa4:	580c      	ldr	r4, [r1, r0]
 8002aa6:	4023      	ands	r3, r4
 8002aa8:	500b      	str	r3, [r1, r0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8002aaa:	0212      	lsls	r2, r2, #8
 8002aac:	580b      	ldr	r3, [r1, r0]
 8002aae:	b292      	uxth	r2, r2
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	500a      	str	r2, [r1, r0]
  }
}
 8002ab4:	bc10      	pop	{r4}
 8002ab6:	4770      	bx	lr
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);
 8002ab8:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8002aba:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8002abe:	580c      	ldr	r4, [r1, r0]
 8002ac0:	4023      	ands	r3, r4
 8002ac2:	500b      	str	r3, [r1, r0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8002ac4:	580b      	ldr	r3, [r1, r0]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	500a      	str	r2, [r1, r0]
 8002aca:	e7f3      	b.n	8002ab4 <TIM_SelectOCxM+0x34>

08002acc <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8002acc:	6341      	str	r1, [r0, #52]	; 0x34
}
 8002ace:	4770      	bx	lr

08002ad0 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8002ad0:	6381      	str	r1, [r0, #56]	; 0x38
}
 8002ad2:	4770      	bx	lr

08002ad4 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8002ad4:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8002ad6:	4770      	bx	lr

08002ad8 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8002ad8:	6401      	str	r1, [r0, #64]	; 0x40
}
 8002ada:	4770      	bx	lr

08002adc <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002adc:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8002ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae2:	041b      	lsls	r3, r3, #16
 8002ae4:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8002ae6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002ae8:	8303      	strh	r3, [r0, #24]
}
 8002aea:	4770      	bx	lr

08002aec <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002aec:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8002aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002af2:	041b      	lsls	r3, r3, #16
 8002af4:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8002af6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002afa:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002afc:	8303      	strh	r3, [r0, #24]
}
 8002afe:	4770      	bx	lr

08002b00 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8002b00:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8002b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b06:	041b      	lsls	r3, r3, #16
 8002b08:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8002b0a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002b0c:	8383      	strh	r3, [r0, #28]
}
 8002b0e:	4770      	bx	lr

08002b10 <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8002b10:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8002b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b16:	041b      	lsls	r3, r3, #16
 8002b18:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8002b1a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b1e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002b20:	8383      	strh	r3, [r0, #28]
}
 8002b22:	4770      	bx	lr

08002b24 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002b24:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8002b26:	f023 0308 	bic.w	r3, r3, #8
 8002b2a:	041b      	lsls	r3, r3, #16
 8002b2c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8002b2e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002b30:	8303      	strh	r3, [r0, #24]
}
 8002b32:	4770      	bx	lr

08002b34 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002b34:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8002b36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b3a:	041b      	lsls	r3, r3, #16
 8002b3c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8002b3e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b42:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002b44:	8303      	strh	r3, [r0, #24]
}
 8002b46:	4770      	bx	lr

08002b48 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002b48:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8002b4a:	f023 0308 	bic.w	r3, r3, #8
 8002b4e:	041b      	lsls	r3, r3, #16
 8002b50:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8002b52:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002b54:	8383      	strh	r3, [r0, #28]
}
 8002b56:	4770      	bx	lr

08002b58 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002b58:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8002b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b5e:	041b      	lsls	r3, r3, #16
 8002b60:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8002b62:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b66:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002b68:	8383      	strh	r3, [r0, #28]
}
 8002b6a:	4770      	bx	lr

08002b6c <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002b6c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8002b6e:	f023 0304 	bic.w	r3, r3, #4
 8002b72:	041b      	lsls	r3, r3, #16
 8002b74:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8002b76:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002b78:	8303      	strh	r3, [r0, #24]
}
 8002b7a:	4770      	bx	lr

08002b7c <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002b7c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8002b7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b82:	041b      	lsls	r3, r3, #16
 8002b84:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8002b86:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b8a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002b8c:	8303      	strh	r3, [r0, #24]
}
 8002b8e:	4770      	bx	lr

08002b90 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002b90:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8002b92:	f023 0304 	bic.w	r3, r3, #4
 8002b96:	041b      	lsls	r3, r3, #16
 8002b98:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8002b9a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002b9c:	8383      	strh	r3, [r0, #28]
}
 8002b9e:	4770      	bx	lr

08002ba0 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002ba0:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8002ba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ba6:	041b      	lsls	r3, r3, #16
 8002ba8:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8002baa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002bae:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002bb0:	8383      	strh	r3, [r0, #28]
}
 8002bb2:	4770      	bx	lr

08002bb4 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002bb4:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8002bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bba:	041b      	lsls	r3, r3, #16
 8002bbc:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8002bbe:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002bc0:	8303      	strh	r3, [r0, #24]
}
 8002bc2:	4770      	bx	lr

08002bc4 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002bc4:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8002bc6:	045b      	lsls	r3, r3, #17
 8002bc8:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8002bca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002bce:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002bd0:	8303      	strh	r3, [r0, #24]
}
 8002bd2:	4770      	bx	lr

08002bd4 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002bd4:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8002bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bda:	041b      	lsls	r3, r3, #16
 8002bdc:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8002bde:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002be0:	8383      	strh	r3, [r0, #28]
}
 8002be2:	4770      	bx	lr

08002be4 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002be4:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8002be6:	045b      	lsls	r3, r3, #17
 8002be8:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8002bea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002bee:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002bf0:	8383      	strh	r3, [r0, #28]
}
 8002bf2:	4770      	bx	lr

08002bf4 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002bf4:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8002bf6:	f023 0302 	bic.w	r3, r3, #2
 8002bfa:	041b      	lsls	r3, r3, #16
 8002bfc:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8002bfe:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002c00:	8403      	strh	r3, [r0, #32]
}
 8002c02:	4770      	bx	lr

08002c04 <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8002c04:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002c06:	f023 0308 	bic.w	r3, r3, #8
 8002c0a:	041b      	lsls	r3, r3, #16
 8002c0c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8002c0e:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002c10:	8403      	strh	r3, [r0, #32]
}
 8002c12:	4770      	bx	lr

08002c14 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002c14:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8002c16:	f023 0320 	bic.w	r3, r3, #32
 8002c1a:	041b      	lsls	r3, r3, #16
 8002c1c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8002c1e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002c22:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002c24:	8403      	strh	r3, [r0, #32]
}
 8002c26:	4770      	bx	lr

08002c28 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8002c28:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c2e:	041b      	lsls	r3, r3, #16
 8002c30:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8002c32:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002c36:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002c38:	8403      	strh	r3, [r0, #32]
}
 8002c3a:	4770      	bx	lr

08002c3c <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002c3c:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002c3e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c42:	041b      	lsls	r3, r3, #16
 8002c44:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8002c46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c4a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002c4c:	8403      	strh	r3, [r0, #32]
}
 8002c4e:	4770      	bx	lr

08002c50 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8002c50:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8002c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c56:	041b      	lsls	r3, r3, #16
 8002c58:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8002c5a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c5e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002c60:	8403      	strh	r3, [r0, #32]
}
 8002c62:	4770      	bx	lr

08002c64 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002c64:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8002c66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c6a:	041b      	lsls	r3, r3, #16
 8002c6c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8002c6e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002c72:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002c74:	8403      	strh	r3, [r0, #32]
}
 8002c76:	4770      	bx	lr

08002c78 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8002c78:	b410      	push	{r4}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002c7a:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002c80:	b2a4      	uxth	r4, r4
 8002c82:	ea24 0303 	bic.w	r3, r4, r3
 8002c86:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002c88:	8c03      	ldrh	r3, [r0, #32]
 8002c8a:	fa12 f101 	lsls.w	r1, r2, r1
 8002c8e:	430b      	orrs	r3, r1
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	8403      	strh	r3, [r0, #32]
}
 8002c94:	bc10      	pop	{r4}
 8002c96:	4770      	bx	lr

08002c98 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8002c98:	b410      	push	{r4}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002c9a:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002ca0:	b2a4      	uxth	r4, r4
 8002ca2:	ea24 0303 	bic.w	r3, r4, r3
 8002ca6:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8002ca8:	8c03      	ldrh	r3, [r0, #32]
 8002caa:	fa12 f101 	lsls.w	r1, r2, r1
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	8403      	strh	r3, [r0, #32]
}
 8002cb4:	bc10      	pop	{r4}
 8002cb6:	4770      	bx	lr

08002cb8 <TIM_ICInit>:
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002cb8:	880b      	ldrh	r3, [r1, #0]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002cba:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d032      	beq.n	8002d26 <TIM_ICInit+0x6e>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d058      	beq.n	8002d76 <TIM_ICInit+0xbe>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002cc4:	2b08      	cmp	r3, #8
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002cc6:	884e      	ldrh	r6, [r1, #2]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002cc8:	8c03      	ldrh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002cca:	f000 8082 	beq.w	8002dd2 <TIM_ICInit+0x11a>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002cce:	888f      	ldrh	r7, [r1, #4]
 8002cd0:	890d      	ldrh	r5, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002cd2:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002cd4:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cd8:	0409      	lsls	r1, r1, #16
 8002cda:	0c09      	lsrs	r1, r1, #16
 8002cdc:	8401      	strh	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cde:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
 8002ce0:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002ce2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002ce6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002cea:	0512      	lsls	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002cec:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002cee:	0d12      	lsrs	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002cf0:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8002cf2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8002cf6:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002cfa:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002d04:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d06:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8002d08:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8002d0a:	8b83      	ldrh	r3, [r0, #28]
 8002d0c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002d10:	041b      	lsls	r3, r3, #16
 8002d12:	0c1b      	lsrs	r3, r3, #16
 8002d14:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002d16:	8b83      	ldrh	r3, [r0, #28]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	8383      	strh	r3, [r0, #28]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002d22:	bcf0      	pop	{r4, r5, r6, r7}
 8002d24:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002d26:	8c03      	ldrh	r3, [r0, #32]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002d28:	884e      	ldrh	r6, [r1, #2]
 8002d2a:	888d      	ldrh	r5, [r1, #4]
 8002d2c:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002d2e:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002d30:	f023 0101 	bic.w	r1, r3, #1
 8002d34:	0409      	lsls	r1, r1, #16
 8002d36:	0c09      	lsrs	r1, r1, #16
 8002d38:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3a:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002d3c:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002d3e:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 8002d42:	0412      	lsls	r2, r2, #16
 8002d44:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d46:	f023 030a 	bic.w	r3, r3, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002d4a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d4e:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002d50:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d52:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002d54:	f046 0101 	orr.w	r1, r6, #1
 8002d58:	430b      	orrs	r3, r1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002d5a:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d5c:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002d5e:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002d60:	8b03      	ldrh	r3, [r0, #24]
 8002d62:	f023 030c 	bic.w	r3, r3, #12
 8002d66:	041b      	lsls	r3, r3, #16
 8002d68:	0c1b      	lsrs	r3, r3, #16
 8002d6a:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002d6c:	8b03      	ldrh	r3, [r0, #24]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	4323      	orrs	r3, r4
 8002d72:	8303      	strh	r3, [r0, #24]
 8002d74:	e7d5      	b.n	8002d22 <TIM_ICInit+0x6a>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002d76:	8c03      	ldrh	r3, [r0, #32]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002d78:	884e      	ldrh	r6, [r1, #2]
 8002d7a:	888d      	ldrh	r5, [r1, #4]
 8002d7c:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002d7e:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002d80:	f023 0110 	bic.w	r1, r3, #16
 8002d84:	0409      	lsls	r1, r1, #16
 8002d86:	0c09      	lsrs	r1, r1, #16
 8002d88:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d8a:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002d8c:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002d8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d92:	0512      	lsls	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002d98:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d9a:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002d9c:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002da0:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002da2:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002da4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002da8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	f043 0310 	orr.w	r3, r3, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002db2:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002db4:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002db6:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002db8:	8b03      	ldrh	r3, [r0, #24]
 8002dba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002dbe:	041b      	lsls	r3, r3, #16
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002dc4:	8b03      	ldrh	r3, [r0, #24]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	8303      	strh	r3, [r0, #24]
 8002dd0:	e7a7      	b.n	8002d22 <TIM_ICInit+0x6a>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002dd2:	888d      	ldrh	r5, [r1, #4]
 8002dd4:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002dd6:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002dd8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8002ddc:	0409      	lsls	r1, r1, #16
 8002dde:	0c09      	lsrs	r1, r1, #16
 8002de0:	8401      	strh	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002de2:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
 8002de4:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002de6:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002dea:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002dee:	0412      	lsls	r2, r2, #16
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002df0:	041b      	lsls	r3, r3, #16
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8002df2:	0c12      	lsrs	r2, r2, #16
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002df4:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002df6:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002dfa:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002dfe:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002e06:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e08:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8002e0a:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8002e0c:	8b83      	ldrh	r3, [r0, #28]
 8002e0e:	f023 030c 	bic.w	r3, r3, #12
 8002e12:	041b      	lsls	r3, r3, #16
 8002e14:	0c1b      	lsrs	r3, r3, #16
 8002e16:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002e18:	8b83      	ldrh	r3, [r0, #28]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	4323      	orrs	r3, r4
 8002e1e:	8383      	strh	r3, [r0, #28]
 8002e20:	e77f      	b.n	8002d22 <TIM_ICInit+0x6a>
 8002e22:	bf00      	nop

08002e24 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002e24:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002e26:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002e28:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002e2a:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002e2c:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8002e2e:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8002e30:	8103      	strh	r3, [r0, #8]
}
 8002e32:	4770      	bx	lr

08002e34 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002e34:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002e38:	888a      	ldrh	r2, [r1, #4]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8002e3a:	f8b1 8002 	ldrh.w	r8, [r1, #2]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002e3e:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8002e40:	f1b8 0f00 	cmp.w	r8, #0
 8002e44:	bf0c      	ite	eq
 8002e46:	2502      	moveq	r5, #2
 8002e48:	2500      	movne	r5, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8002e4a:	2a01      	cmp	r2, #1
 8002e4c:	bf14      	ite	ne
 8002e4e:	2601      	movne	r6, #1
 8002e50:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d051      	beq.n	8002efa <TIM_PWMIConfig+0xc6>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002e56:	8c03      	ldrh	r3, [r0, #32]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002e58:	f8b1 c008 	ldrh.w	ip, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002e5c:	88cf      	ldrh	r7, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002e5e:	f023 0310 	bic.w	r3, r3, #16
 8002e62:	041b      	lsls	r3, r3, #16
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e68:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002e6a:	8c01      	ldrh	r1, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002e6c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8002e70:	0524      	lsls	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e72:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002e76:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e78:	0409      	lsls	r1, r1, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002e7a:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e7e:	0c09      	lsrs	r1, r1, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002e80:	b2a4      	uxth	r4, r4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002e82:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002e86:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002e8a:	b289      	uxth	r1, r1
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002e8c:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002e8e:	f041 0110 	orr.w	r1, r1, #16

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e92:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002e94:	8401      	strh	r1, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002e96:	8b01      	ldrh	r1, [r0, #24]
 8002e98:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8002e9c:	0409      	lsls	r1, r1, #16
 8002e9e:	0c09      	lsrs	r1, r1, #16
 8002ea0:	8301      	strh	r1, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002ea2:	8b03      	ldrh	r3, [r0, #24]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002eae:	8c01      	ldrh	r1, [r0, #32]
 8002eb0:	f021 0101 	bic.w	r1, r1, #1
 8002eb4:	0409      	lsls	r1, r1, #16
 8002eb6:	0c09      	lsrs	r1, r1, #16
 8002eb8:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eba:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002ebc:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002ebe:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 8002ec2:	0412      	lsls	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ec4:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002ec8:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eca:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002ecc:	ea42 120c 	orr.w	r2, r2, ip, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ed0:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002ed6:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002ed8:	431d      	orrs	r5, r3
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002eda:	4316      	orrs	r6, r2
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002edc:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ede:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002ee0:	8b03      	ldrh	r3, [r0, #24]
 8002ee2:	f023 030c 	bic.w	r3, r3, #12
 8002ee6:	041b      	lsls	r3, r3, #16
 8002ee8:	0c1b      	lsrs	r3, r3, #16
 8002eea:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002eec:	8b03      	ldrh	r3, [r0, #24]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	431f      	orrs	r7, r3
 8002ef2:	8307      	strh	r7, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002ef4:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8002ef8:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002efa:	8c03      	ldrh	r3, [r0, #32]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002efc:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002efe:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	041b      	lsls	r3, r3, #16
 8002f06:	0c1b      	lsrs	r3, r3, #16
 8002f08:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f0a:	8b01      	ldrh	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8002f0c:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002f0e:	f021 01f3 	bic.w	r1, r1, #243	; 0xf3
 8002f12:	0409      	lsls	r1, r1, #16
 8002f14:	0c09      	lsrs	r1, r1, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f16:	f023 030a 	bic.w	r3, r3, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002f1a:	ea41 1107 	orr.w	r1, r1, r7, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f1e:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002f20:	b289      	uxth	r1, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f22:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002f24:	f048 0801 	orr.w	r8, r8, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002f28:	430a      	orrs	r2, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002f2a:	ea43 0308 	orr.w	r3, r3, r8

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f2e:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f30:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002f32:	8b03      	ldrh	r3, [r0, #24]
 8002f34:	f023 030c 	bic.w	r3, r3, #12
 8002f38:	041b      	lsls	r3, r3, #16
 8002f3a:	0c1b      	lsrs	r3, r3, #16
 8002f3c:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002f3e:	8b03      	ldrh	r3, [r0, #24]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	4323      	orrs	r3, r4
 8002f44:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002f46:	8c03      	ldrh	r3, [r0, #32]
 8002f48:	f023 0310 	bic.w	r3, r3, #16
 8002f4c:	041b      	lsls	r3, r3, #16
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f52:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002f54:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002f56:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f5a:	0512      	lsls	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002f60:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f62:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002f64:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f68:	0c1b      	lsrs	r3, r3, #16
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002f6a:	f043 0310 	orr.w	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002f6e:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002f70:	ea43 1505 	orr.w	r5, r3, r5, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002f74:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f78:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f7a:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002f7c:	8b03      	ldrh	r3, [r0, #24]
 8002f7e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f82:	041b      	lsls	r3, r3, #16
 8002f84:	0c1b      	lsrs	r3, r3, #16
 8002f86:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002f88:	8b03      	ldrh	r3, [r0, #24]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
 8002f90:	b2a4      	uxth	r4, r4
 8002f92:	8304      	strh	r4, [r0, #24]
 8002f94:	e7ae      	b.n	8002ef4 <TIM_PWMIConfig+0xc0>
 8002f96:	bf00      	nop

08002f98 <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8002f98:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8002f9a:	4770      	bx	lr

08002f9c <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8002f9c:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8002f9e:	4770      	bx	lr

08002fa0 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002fa0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8002fa2:	4770      	bx	lr

08002fa4 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8002fa4:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8002fa6:	4770      	bx	lr

08002fa8 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002fa8:	8b03      	ldrh	r3, [r0, #24]
 8002faa:	f023 030c 	bic.w	r3, r3, #12
 8002fae:	041b      	lsls	r3, r3, #16
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002fb4:	8b03      	ldrh	r3, [r0, #24]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	8303      	strh	r3, [r0, #24]
}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop

08002fc0 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002fc0:	8b03      	ldrh	r3, [r0, #24]
 8002fc2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002fc6:	041b      	lsls	r3, r3, #16
 8002fc8:	0c1b      	lsrs	r3, r3, #16
 8002fca:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002fcc:	8b03      	ldrh	r3, [r0, #24]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	8303      	strh	r3, [r0, #24]
}
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop

08002fdc <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8002fdc:	8b83      	ldrh	r3, [r0, #28]
 8002fde:	f023 030c 	bic.w	r3, r3, #12
 8002fe2:	041b      	lsls	r3, r3, #16
 8002fe4:	0c1b      	lsrs	r3, r3, #16
 8002fe6:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002fe8:	8b83      	ldrh	r3, [r0, #28]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	430b      	orrs	r3, r1
 8002fee:	8383      	strh	r3, [r0, #28]
}
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop

08002ff4 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8002ff4:	8b83      	ldrh	r3, [r0, #28]
 8002ff6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ffa:	041b      	lsls	r3, r3, #16
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8003000:	8b83      	ldrh	r3, [r0, #28]
 8003002:	b29b      	uxth	r3, r3
 8003004:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003008:	b29b      	uxth	r3, r3
 800300a:	8383      	strh	r3, [r0, #28]
}
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop

08003010 <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003010:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 8003014:	880b      	ldrh	r3, [r1, #0]
 8003016:	898a      	ldrh	r2, [r1, #12]
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8003018:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800301a:	888f      	ldrh	r7, [r1, #4]
 800301c:	88ce      	ldrh	r6, [r1, #6]
 800301e:	890d      	ldrh	r5, [r1, #8]
 8003020:	894c      	ldrh	r4, [r1, #10]
 8003022:	ea4c 0303 	orr.w	r3, ip, r3
 8003026:	433b      	orrs	r3, r7
 8003028:	4333      	orrs	r3, r6
 800302a:	432b      	orrs	r3, r5
 800302c:	4323      	orrs	r3, r4
 800302e:	4313      	orrs	r3, r2
 8003030:	b29b      	uxth	r3, r3
 8003032:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8003036:	bcf0      	pop	{r4, r5, r6, r7}
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop

0800303c <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 800303c:	2300      	movs	r3, #0
 800303e:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8003040:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8003042:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8003044:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8003046:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8003048:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800304a:	8183      	strh	r3, [r0, #12]
}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop

08003050 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8003050:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003054:	b921      	cbnz	r1, 8003060 <TIM_CtrlPWMOutputs+0x10>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8003056:	045b      	lsls	r3, r3, #17
 8003058:	0c5b      	lsrs	r3, r3, #17
 800305a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800305e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8003060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003068:	b29b      	uxth	r3, r3
 800306a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800306e:	4770      	bx	lr

08003070 <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8003070:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003072:	b929      	cbnz	r1, 8003080 <TIM_SelectCOM+0x10>
    TIMx->CR2 |= TIM_CR2_CCUS;
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8003074:	f023 0304 	bic.w	r3, r3, #4
 8003078:	041b      	lsls	r3, r3, #16
 800307a:	0c1b      	lsrs	r3, r3, #16
 800307c:	8083      	strh	r3, [r0, #4]
 800307e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8003080:	b29b      	uxth	r3, r3
 8003082:	f043 0304 	orr.w	r3, r3, #4
 8003086:	8083      	strh	r3, [r0, #4]
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop

0800308c <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800308c:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800308e:	b929      	cbnz	r1, 800309c <TIM_CCPreloadControl+0x10>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	0c1b      	lsrs	r3, r3, #16
 8003098:	8083      	strh	r3, [r0, #4]
 800309a:	4770      	bx	lr
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800309c:	b29b      	uxth	r3, r3
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	8083      	strh	r3, [r0, #4]
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop

080030a8 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80030a8:	8983      	ldrh	r3, [r0, #12]
 80030aa:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80030ac:	b91a      	cbnz	r2, 80030b6 <TIM_ITConfig+0xe>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80030ae:	ea23 0101 	bic.w	r1, r3, r1
 80030b2:	8181      	strh	r1, [r0, #12]
 80030b4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80030b6:	4319      	orrs	r1, r3
 80030b8:	8181      	strh	r1, [r0, #12]
 80030ba:	4770      	bx	lr

080030bc <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 80030bc:	8281      	strh	r1, [r0, #20]
}
 80030be:	4770      	bx	lr

080030c0 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 80030c0:	8a03      	ldrh	r3, [r0, #16]
  {
    bitstatus = SET;
 80030c2:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80030c4:	bf0c      	ite	eq
 80030c6:	2000      	moveq	r0, #0
 80030c8:	2001      	movne	r0, #1
 80030ca:	4770      	bx	lr

080030cc <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 80030cc:	43c9      	mvns	r1, r1
 80030ce:	b289      	uxth	r1, r1
 80030d0:	8201      	strh	r1, [r0, #16]
}
 80030d2:	4770      	bx	lr

080030d4 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80030d4:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 80030d6:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80030d8:	4211      	tst	r1, r2
 80030da:	bf0c      	ite	eq
 80030dc:	2000      	moveq	r0, #0
 80030de:	2001      	movne	r0, #1
 80030e0:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80030e2:	bf0c      	ite	eq
 80030e4:	2000      	moveq	r0, #0
 80030e6:	f000 0001 	andne.w	r0, r0, #1
 80030ea:	4770      	bx	lr

080030ec <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80030ec:	43c9      	mvns	r1, r1
 80030ee:	b289      	uxth	r1, r1
 80030f0:	8201      	strh	r1, [r0, #16]
}
 80030f2:	4770      	bx	lr

080030f4 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80030f4:	430a      	orrs	r2, r1
 80030f6:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
}
 80030fa:	4770      	bx	lr

080030fc <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80030fc:	8983      	ldrh	r3, [r0, #12]
 80030fe:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003100:	b91a      	cbnz	r2, 800310a <TIM_DMACmd+0xe>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8003102:	ea23 0101 	bic.w	r1, r3, r1
 8003106:	8181      	strh	r1, [r0, #12]
 8003108:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800310a:	4319      	orrs	r1, r3
 800310c:	8181      	strh	r1, [r0, #12]
 800310e:	4770      	bx	lr

08003110 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8003110:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003112:	b929      	cbnz	r1, 8003120 <TIM_SelectCCDMA+0x10>
    TIMx->CR2 |= TIM_CR2_CCDS;
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8003114:	f023 0308 	bic.w	r3, r3, #8
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	0c1b      	lsrs	r3, r3, #16
 800311c:	8083      	strh	r3, [r0, #4]
 800311e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8003120:	b29b      	uxth	r3, r3
 8003122:	f043 0308 	orr.w	r3, r3, #8
 8003126:	8083      	strh	r3, [r0, #4]
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop

0800312c <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 800312c:	8903      	ldrh	r3, [r0, #8]
 800312e:	f023 0307 	bic.w	r3, r3, #7
 8003132:	041b      	lsls	r3, r3, #16
 8003134:	0c1b      	lsrs	r3, r3, #16
 8003136:	8103      	strh	r3, [r0, #8]
}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop

0800313c <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800313c:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800313e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8003146:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003148:	8103      	strh	r3, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800314a:	8903      	ldrh	r3, [r0, #8]
 800314c:	b29b      	uxth	r3, r3
 800314e:	f043 0307 	orr.w	r3, r3, #7
 8003152:	8103      	strh	r3, [r0, #8]
}
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop

08003158 <TIM_TIxExternalClockConfig>:
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8003158:	2960      	cmp	r1, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800315a:	b430      	push	{r4, r5}
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800315c:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800315e:	d026      	beq.n	80031ae <TIM_TIxExternalClockConfig+0x56>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8003160:	f024 0401 	bic.w	r4, r4, #1
 8003164:	0424      	lsls	r4, r4, #16
 8003166:	0c24      	lsrs	r4, r4, #16
 8003168:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800316a:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 800316c:	8c04      	ldrh	r4, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800316e:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
 8003172:	042d      	lsls	r5, r5, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003174:	f024 040a 	bic.w	r4, r4, #10
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8003178:	0c2d      	lsrs	r5, r5, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800317a:	0424      	lsls	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800317c:	f045 0501 	orr.w	r5, r5, #1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003180:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003182:	ea45 1303 	orr.w	r3, r5, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8003186:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800318a:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800318c:	4322      	orrs	r2, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800318e:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003190:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003192:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8003194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003198:	041b      	lsls	r3, r3, #16
 800319a:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800319c:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800319e:	8101      	strh	r1, [r0, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80031a0:	8903      	ldrh	r3, [r0, #8]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	f043 0307 	orr.w	r3, r3, #7
 80031a8:	8103      	strh	r3, [r0, #8]
}
 80031aa:	bc30      	pop	{r4, r5}
 80031ac:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80031ae:	f024 0410 	bic.w	r4, r4, #16
 80031b2:	0424      	lsls	r4, r4, #16
 80031b4:	0c24      	lsrs	r4, r4, #16
 80031b6:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031b8:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 80031ba:	8c04      	ldrh	r4, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80031bc:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031c0:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80031c4:	052d      	lsls	r5, r5, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031c6:	0424      	lsls	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80031c8:	0d2d      	lsrs	r5, r5, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031ca:	0c24      	lsrs	r4, r4, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80031cc:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80031d0:	f044 0410 	orr.w	r4, r4, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80031d4:	ea45 3303 	orr.w	r3, r5, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80031d8:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80031dc:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80031de:	b292      	uxth	r2, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031e0:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80031e2:	8402      	strh	r2, [r0, #32]
 80031e4:	e7d5      	b.n	8003192 <TIM_TIxExternalClockConfig+0x3a>
 80031e6:	bf00      	nop

080031e8 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80031e8:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80031ea:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80031ec:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80031ee:	430c      	orrs	r4, r1
 80031f0:	4314      	orrs	r4, r2
 80031f2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80031f6:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031f8:	8104      	strh	r4, [r0, #8]
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031fa:	8903      	ldrh	r3, [r0, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 80031fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003200:	041b      	lsls	r3, r3, #16
 8003202:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;
 8003204:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003208:	8103      	strh	r3, [r0, #8]
}
 800320a:	bc10      	pop	{r4}
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop

08003210 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003210:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8003212:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8003214:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8003216:	430c      	orrs	r4, r1
 8003218:	4314      	orrs	r4, r2
 800321a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800321e:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003220:	8104      	strh	r4, [r0, #8]

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8003222:	8903      	ldrh	r3, [r0, #8]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800322a:	8103      	strh	r3, [r0, #8]
}
 800322c:	bc10      	pop	{r4}
 800322e:	4770      	bx	lr

08003230 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003230:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8003232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003236:	041b      	lsls	r3, r3, #16
 8003238:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800323a:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800323c:	8103      	strh	r3, [r0, #8]
}
 800323e:	4770      	bx	lr

08003240 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8003240:	8883      	ldrh	r3, [r0, #4]
 8003242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003246:	041b      	lsls	r3, r3, #16
 8003248:	0c1b      	lsrs	r3, r3, #16
 800324a:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800324c:	8883      	ldrh	r3, [r0, #4]
 800324e:	b29b      	uxth	r3, r3
 8003250:	430b      	orrs	r3, r1
 8003252:	8083      	strh	r3, [r0, #4]
}
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop

08003258 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8003258:	8903      	ldrh	r3, [r0, #8]
 800325a:	f023 0307 	bic.w	r3, r3, #7
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	0c1b      	lsrs	r3, r3, #16
 8003262:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8003264:	8903      	ldrh	r3, [r0, #8]
 8003266:	b29b      	uxth	r3, r3
 8003268:	430b      	orrs	r3, r1
 800326a:	8103      	strh	r3, [r0, #8]
}
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop

08003270 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8003270:	8903      	ldrh	r3, [r0, #8]
 8003272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003276:	041b      	lsls	r3, r3, #16
 8003278:	0c1b      	lsrs	r3, r3, #16
 800327a:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 800327c:	8903      	ldrh	r3, [r0, #8]
 800327e:	b29b      	uxth	r3, r3
 8003280:	430b      	orrs	r3, r1
 8003282:	8103      	strh	r3, [r0, #8]
}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop

08003288 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003288:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800328a:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800328c:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800328e:	430c      	orrs	r4, r1
 8003290:	4314      	orrs	r4, r2
 8003292:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8003296:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003298:	8104      	strh	r4, [r0, #8]
}
 800329a:	bc10      	pop	{r4}
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop

080032a0 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80032a0:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032a2:	8905      	ldrh	r5, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80032a4:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a6:	8c06      	ldrh	r6, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80032a8:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80032ac:	f026 0622 	bic.w	r6, r6, #34	; 0x22
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80032b0:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80032b4:	0436      	lsls	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80032b6:	f025 0507 	bic.w	r5, r5, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80032ba:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80032bc:	0c36      	lsrs	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80032be:	042d      	lsls	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80032c0:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80032c2:	4316      	orrs	r6, r2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80032c4:	0c2d      	lsrs	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80032c6:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80032ca:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 80032ce:	4329      	orrs	r1, r5

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80032d0:	f044 0401 	orr.w	r4, r4, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80032d4:	b2b6      	uxth	r6, r6

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032d6:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80032d8:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032da:	8406      	strh	r6, [r0, #32]
}
 80032dc:	bc70      	pop	{r4, r5, r6}
 80032de:	4770      	bx	lr

080032e0 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80032e0:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80032e2:	b929      	cbnz	r1, 80032f0 <TIM_SelectHallSensor+0x10>
    TIMx->CR2 |= TIM_CR2_TI1S;
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 80032e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032e8:	041b      	lsls	r3, r3, #16
 80032ea:	0c1b      	lsrs	r3, r3, #16
 80032ec:	8083      	strh	r3, [r0, #4]
 80032ee:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f6:	8083      	strh	r3, [r0, #4]
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop

080032fc <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 80032fc:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop

08003304 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8003304:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8003306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800330a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800330e:	4298      	cmp	r0, r3
 8003310:	d028      	beq.n	8003364 <USART_DeInit+0x60>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8003312:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8003316:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800331a:	4298      	cmp	r0, r3
 800331c:	d02c      	beq.n	8003378 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 800331e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8003322:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003326:	4298      	cmp	r0, r3
 8003328:	d032      	beq.n	8003390 <USART_DeInit+0x8c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 800332a:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 800332e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003332:	4298      	cmp	r0, r3
 8003334:	d038      	beq.n	80033a8 <USART_DeInit+0xa4>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 8003336:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800333a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800333e:	4298      	cmp	r0, r3
 8003340:	d03e      	beq.n	80033c0 <USART_DeInit+0xbc>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }     
  else
  {
    if (USARTx == USART6)
 8003342:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003346:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800334a:	4298      	cmp	r0, r3
 800334c:	d000      	beq.n	8003350 <USART_DeInit+0x4c>
 800334e:	bd08      	pop	{r3, pc}
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8003350:	2020      	movs	r0, #32
 8003352:	2101      	movs	r1, #1
 8003354:	f7fe fe54 	bl	8002000 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8003358:	2020      	movs	r0, #32
 800335a:	2100      	movs	r1, #0
    }
  }
}
 800335c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8003360:	f7fe be4e 	b.w	8002000 <RCC_APB2PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8003364:	2010      	movs	r0, #16
 8003366:	2101      	movs	r1, #1
 8003368:	f7fe fe4a 	bl	8002000 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800336c:	2010      	movs	r0, #16
 800336e:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8003370:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8003374:	f7fe be44 	b.w	8002000 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8003378:	2101      	movs	r1, #1
 800337a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800337e:	f7fe fe31 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8003382:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003386:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8003388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800338c:	f7fe be2a 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8003390:	2101      	movs	r1, #1
 8003392:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003396:	f7fe fe25 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800339a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800339e:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80033a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80033a4:	f7fe be1e 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80033a8:	2101      	movs	r1, #1
 80033aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80033ae:	f7fe fe19 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80033b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80033b6:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80033b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80033bc:	f7fe be12 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80033c0:	2101      	movs	r1, #1
 80033c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80033c6:	f7fe fe0d 	bl	8001fe4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80033ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80033ce:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80033d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80033d4:	f7fe be06 	b.w	8001fe4 <RCC_APB1PeriphResetCmd>

080033d8 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80033d8:	8a02      	ldrh	r2, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80033da:	88cb      	ldrh	r3, [r1, #6]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80033dc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80033e0:	0412      	lsls	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80033e2:	b5f0      	push	{r4, r5, r6, r7, lr}

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80033e4:	0c12      	lsrs	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80033e6:	4604      	mov	r4, r0
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80033e8:	431a      	orrs	r2, r3

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80033ea:	8948      	ldrh	r0, [r1, #10]
 80033ec:	890f      	ldrh	r7, [r1, #8]
 80033ee:	888e      	ldrh	r6, [r1, #4]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80033f0:	460d      	mov	r5, r1
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80033f2:	8989      	ldrh	r1, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80033f4:	8222      	strh	r2, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80033f6:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80033f8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033fc:	f023 030c 	bic.w	r3, r3, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003400:	ea47 0206 	orr.w	r2, r7, r6

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8003404:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003406:	4302      	orrs	r2, r0
 8003408:	b292      	uxth	r2, r2

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800340a:	0c1b      	lsrs	r3, r3, #16
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800340c:	4313      	orrs	r3, r2
 800340e:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8003410:	8aa3      	ldrh	r3, [r4, #20]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8003412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003416:	041b      	lsls	r3, r3, #16
 8003418:	0c1b      	lsrs	r3, r3, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800341a:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800341c:	430b      	orrs	r3, r1
 800341e:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8003420:	4668      	mov	r0, sp
 8003422:	f7fe fceb 	bl	8001dfc <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8003426:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800342a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800342e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003432:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003436:	429c      	cmp	r4, r3
 8003438:	bf18      	it	ne
 800343a:	4294      	cmpne	r4, r2
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800343c:	89a2      	ldrh	r2, [r4, #12]
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800343e:	bf0c      	ite	eq
 8003440:	9b03      	ldreq	r3, [sp, #12]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8003442:	9b02      	ldrne	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003444:	b212      	sxth	r2, r2
 8003446:	2a00      	cmp	r2, #0
 8003448:	db21      	blt.n	800348e <USART_Init+0xb6>
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800344a:	6828      	ldr	r0, [r5, #0]
 800344c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003450:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003454:	0080      	lsls	r0, r0, #2
 8003456:	fbb3 f1f0 	udiv	r1, r3, r0
  }
  tmpreg = (integerdivider / 100) << 4;
 800345a:	f248 531f 	movw	r3, #34079	; 0x851f

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800345e:	89a0      	ldrh	r0, [r4, #12]
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8003460:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003464:	fba3 5201 	umull	r5, r2, r3, r1
 8003468:	0952      	lsrs	r2, r2, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800346a:	b200      	sxth	r0, r0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800346c:	0116      	lsls	r6, r2, #4
 800346e:	2564      	movs	r5, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003470:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8003472:	fb02 1215 	mls	r2, r2, r5, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003476:	db13      	blt.n	80034a0 <USART_Init+0xc8>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8003478:	0112      	lsls	r2, r2, #4
 800347a:	3232      	adds	r2, #50	; 0x32
 800347c:	fba3 5302 	umull	r5, r3, r3, r2
 8003480:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8003484:	4333      	orrs	r3, r6
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8003486:	b29b      	uxth	r3, r3
 8003488:	8123      	strh	r3, [r4, #8]
}
 800348a:	b005      	add	sp, #20
 800348c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800348e:	682a      	ldr	r2, [r5, #0]
 8003490:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003494:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003498:	0052      	lsls	r2, r2, #1
 800349a:	fbb3 f1f2 	udiv	r1, r3, r2
 800349e:	e7dc      	b.n	800345a <USART_Init+0x82>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80034a0:	00d2      	lsls	r2, r2, #3
 80034a2:	3232      	adds	r2, #50	; 0x32
 80034a4:	fba3 1302 	umull	r1, r3, r3, r2
 80034a8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80034ac:	4333      	orrs	r3, r6
 80034ae:	e7ea      	b.n	8003486 <USART_Init+0xae>

080034b0 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80034b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80034b4:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80034b6:	6002      	str	r2, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80034b8:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80034ba:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80034bc:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80034be:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80034c0:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80034c2:	8183      	strh	r3, [r0, #12]
}
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop

080034c8 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80034c8:	880a      	ldrh	r2, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80034ca:	8a03      	ldrh	r3, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80034cc:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80034ce:	884d      	ldrh	r5, [r1, #2]
 80034d0:	888c      	ldrh	r4, [r1, #4]
 80034d2:	88c9      	ldrh	r1, [r1, #6]
 80034d4:	432a      	orrs	r2, r5
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80034d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80034da:	4322      	orrs	r2, r4
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80034dc:	041b      	lsls	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80034de:	430a      	orrs	r2, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80034e0:	0c1b      	lsrs	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80034e2:	b292      	uxth	r2, r2
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80034e4:	4313      	orrs	r3, r2
 80034e6:	8203      	strh	r3, [r0, #16]
}
 80034e8:	bc30      	pop	{r4, r5}
 80034ea:	4770      	bx	lr

080034ec <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80034ec:	2300      	movs	r3, #0
 80034ee:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80034f0:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80034f2:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80034f4:	80c3      	strh	r3, [r0, #6]
}
 80034f6:	4770      	bx	lr

080034f8 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80034f8:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80034fa:	b929      	cbnz	r1, 8003508 <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80034fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003500:	041b      	lsls	r3, r3, #16
 8003502:	0c1b      	lsrs	r3, r3, #16
 8003504:	8183      	strh	r3, [r0, #12]
 8003506:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8003508:	b29b      	uxth	r3, r3
 800350a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800350e:	8183      	strh	r3, [r0, #12]
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop

08003514 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8003514:	8b03      	ldrh	r3, [r0, #24]
 8003516:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800351a:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 800351c:	8b03      	ldrh	r3, [r0, #24]
 800351e:	b29b      	uxth	r3, r3
 8003520:	430b      	orrs	r3, r1
 8003522:	8303      	strh	r3, [r0, #24]
}
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop

08003528 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8003528:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800352a:	b919      	cbnz	r1, 8003534 <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 800352c:	045b      	lsls	r3, r3, #17
 800352e:	0c5b      	lsrs	r3, r3, #17
 8003530:	8183      	strh	r3, [r0, #12]
 8003532:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8003534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800353c:	b29b      	uxth	r3, r3
 800353e:	8183      	strh	r3, [r0, #12]
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop

08003544 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8003544:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003546:	b929      	cbnz	r1, 8003554 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8003548:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800354c:	041b      	lsls	r3, r3, #16
 800354e:	0c1b      	lsrs	r3, r3, #16
 8003550:	8283      	strh	r3, [r0, #20]
 8003552:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8003554:	b29b      	uxth	r3, r3
 8003556:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800355a:	8283      	strh	r3, [r0, #20]
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop

08003560 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8003560:	05c9      	lsls	r1, r1, #23
 8003562:	0dc9      	lsrs	r1, r1, #23
 8003564:	8081      	strh	r1, [r0, #4]
}
 8003566:	4770      	bx	lr

08003568 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8003568:	8880      	ldrh	r0, [r0, #4]
}
 800356a:	05c0      	lsls	r0, r0, #23
 800356c:	0dc0      	lsrs	r0, r0, #23
 800356e:	4770      	bx	lr

08003570 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8003570:	8a03      	ldrh	r3, [r0, #16]
 8003572:	f023 030f 	bic.w	r3, r3, #15
 8003576:	041b      	lsls	r3, r3, #16
 8003578:	0c1b      	lsrs	r3, r3, #16
 800357a:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 800357c:	8a03      	ldrh	r3, [r0, #16]
 800357e:	b29b      	uxth	r3, r3
 8003580:	430b      	orrs	r3, r1
 8003582:	8203      	strh	r3, [r0, #16]
}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop

08003588 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8003588:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 800358a:	b929      	cbnz	r1, 8003598 <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 800358c:	f023 0302 	bic.w	r3, r3, #2
 8003590:	041b      	lsls	r3, r3, #16
 8003592:	0c1b      	lsrs	r3, r3, #16
 8003594:	8183      	strh	r3, [r0, #12]
 8003596:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8003598:	b29b      	uxth	r3, r3
 800359a:	f043 0302 	orr.w	r3, r3, #2
 800359e:	8183      	strh	r3, [r0, #12]
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop

080035a4 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 80035a4:	8983      	ldrh	r3, [r0, #12]
 80035a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 80035b0:	8983      	ldrh	r3, [r0, #12]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	430b      	orrs	r3, r1
 80035b6:	8183      	strh	r3, [r0, #12]
}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop

080035bc <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 80035bc:	8a03      	ldrh	r3, [r0, #16]
 80035be:	f023 0320 	bic.w	r3, r3, #32
 80035c2:	041b      	lsls	r3, r3, #16
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 80035c8:	8a03      	ldrh	r3, [r0, #16]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	430b      	orrs	r3, r1
 80035ce:	8203      	strh	r3, [r0, #16]
}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop

080035d4 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80035d4:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80035d6:	b929      	cbnz	r1, 80035e4 <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 80035d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035dc:	041b      	lsls	r3, r3, #16
 80035de:	0c1b      	lsrs	r3, r3, #16
 80035e0:	8203      	strh	r3, [r0, #16]
 80035e2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035ea:	8203      	strh	r3, [r0, #16]
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop

080035f0 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 80035f0:	8983      	ldrh	r3, [r0, #12]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	8183      	strh	r3, [r0, #12]
}
 80035fa:	4770      	bx	lr

080035fc <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80035fc:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80035fe:	b929      	cbnz	r1, 800360c <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8003600:	f023 0308 	bic.w	r3, r3, #8
 8003604:	041b      	lsls	r3, r3, #16
 8003606:	0c1b      	lsrs	r3, r3, #16
 8003608:	8283      	strh	r3, [r0, #20]
 800360a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800360c:	b29b      	uxth	r3, r3
 800360e:	f043 0308 	orr.w	r3, r3, #8
 8003612:	8283      	strh	r3, [r0, #20]
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop

08003618 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8003618:	8b03      	ldrh	r3, [r0, #24]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800361e:	8b03      	ldrh	r3, [r0, #24]
 8003620:	b29b      	uxth	r3, r3
 8003622:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003626:	8303      	strh	r3, [r0, #24]
}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop

0800362c <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800362c:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800362e:	b929      	cbnz	r1, 800363c <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8003630:	f023 0320 	bic.w	r3, r3, #32
 8003634:	041b      	lsls	r3, r3, #16
 8003636:	0c1b      	lsrs	r3, r3, #16
 8003638:	8283      	strh	r3, [r0, #20]
 800363a:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800363c:	b29b      	uxth	r3, r3
 800363e:	f043 0320 	orr.w	r3, r3, #32
 8003642:	8283      	strh	r3, [r0, #20]
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop

08003648 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8003648:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800364a:	b929      	cbnz	r1, 8003658 <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 800364c:	f023 0310 	bic.w	r3, r3, #16
 8003650:	041b      	lsls	r3, r3, #16
 8003652:	0c1b      	lsrs	r3, r3, #16
 8003654:	8283      	strh	r3, [r0, #20]
 8003656:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8003658:	b29b      	uxth	r3, r3
 800365a:	f043 0310 	orr.w	r3, r3, #16
 800365e:	8283      	strh	r3, [r0, #20]
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop

08003664 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8003664:	8a83      	ldrh	r3, [r0, #20]
 8003666:	f023 0304 	bic.w	r3, r3, #4
 800366a:	041b      	lsls	r3, r3, #16
 800366c:	0c1b      	lsrs	r3, r3, #16
 800366e:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8003670:	8a83      	ldrh	r3, [r0, #20]
 8003672:	b29b      	uxth	r3, r3
 8003674:	430b      	orrs	r3, r1
 8003676:	8283      	strh	r3, [r0, #20]
}
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop

0800367c <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800367c:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800367e:	b929      	cbnz	r1, 800368c <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8003680:	f023 0302 	bic.w	r3, r3, #2
 8003684:	041b      	lsls	r3, r3, #16
 8003686:	0c1b      	lsrs	r3, r3, #16
 8003688:	8283      	strh	r3, [r0, #20]
 800368a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800368c:	b29b      	uxth	r3, r3
 800368e:	f043 0302 	orr.w	r3, r3, #2
 8003692:	8283      	strh	r3, [r0, #20]
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop

08003698 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8003698:	8a83      	ldrh	r3, [r0, #20]
 800369a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800369c:	b91a      	cbnz	r2, 80036a6 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800369e:	ea23 0101 	bic.w	r1, r3, r1
 80036a2:	8281      	strh	r1, [r0, #20]
 80036a4:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80036a6:	4319      	orrs	r1, r3
 80036a8:	8281      	strh	r1, [r0, #20]
 80036aa:	4770      	bx	lr

080036ac <USART_ITConfig>:

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80036ac:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80036b0:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80036b2:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80036b6:	2401      	movs	r4, #1
 80036b8:	fa14 f303 	lsls.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80036bc:	42a1      	cmp	r1, r4
 80036be:	d00d      	beq.n	80036dc <USART_ITConfig+0x30>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80036c0:	2902      	cmp	r1, #2
 80036c2:	d00d      	beq.n	80036e0 <USART_ITConfig+0x34>
  {
    usartxbase += 0x10;
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80036c4:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 80036c6:	b92a      	cbnz	r2, 80036d4 <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80036c8:	6802      	ldr	r2, [r0, #0]
 80036ca:	ea22 0303 	bic.w	r3, r2, r3
 80036ce:	6003      	str	r3, [r0, #0]
  }
}
 80036d0:	bc10      	pop	{r4}
 80036d2:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80036d4:	6802      	ldr	r2, [r0, #0]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	6003      	str	r3, [r0, #0]
 80036da:	e7f9      	b.n	80036d0 <USART_ITConfig+0x24>
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 80036dc:	300c      	adds	r0, #12
 80036de:	e7f2      	b.n	80036c6 <USART_ITConfig+0x1a>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x10;
 80036e0:	3010      	adds	r0, #16
 80036e2:	e7f0      	b.n	80036c6 <USART_ITConfig+0x1a>

080036e4 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80036e4:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 80036e6:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80036e8:	bf0c      	ite	eq
 80036ea:	2000      	moveq	r0, #0
 80036ec:	2001      	movne	r0, #1
 80036ee:	4770      	bx	lr

080036f0 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 80036f0:	43c9      	mvns	r1, r1
 80036f2:	b289      	uxth	r1, r1
 80036f4:	8001      	strh	r1, [r0, #0]
}
 80036f6:	4770      	bx	lr

080036f8 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80036f8:	b410      	push	{r4}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80036fa:	f001 021f 	and.w	r2, r1, #31
  itmask = (uint32_t)0x01 << itmask;
 80036fe:	2401      	movs	r4, #1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8003700:	f3c1 1342 	ubfx	r3, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8003704:	4094      	lsls	r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8003706:	2b01      	cmp	r3, #1
 8003708:	d016      	beq.n	8003738 <USART_GetITStatus+0x40>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800370a:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 800370c:	bf0c      	ite	eq
 800370e:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8003710:	8a82      	ldrhne	r2, [r0, #20]
 8003712:	b292      	uxth	r2, r2
 8003714:	4022      	ands	r2, r4
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8003716:	8803      	ldrh	r3, [r0, #0]
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8003718:	2401      	movs	r4, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 800371a:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 800371c:	fa14 f101 	lsls.w	r1, r4, r1
  bitpos &= USARTx->SR;
 8003720:	b29b      	uxth	r3, r3
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8003722:	4219      	tst	r1, r3
 8003724:	bf0c      	ite	eq
 8003726:	2300      	moveq	r3, #0
 8003728:	2301      	movne	r3, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 800372a:	2a00      	cmp	r2, #0
 800372c:	bf0c      	ite	eq
 800372e:	2000      	moveq	r0, #0
 8003730:	f003 0001 	andne.w	r0, r3, #1
 8003734:	bc10      	pop	{r4}
 8003736:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 8003738:	8982      	ldrh	r2, [r0, #12]
 800373a:	b292      	uxth	r2, r2
 800373c:	4022      	ands	r2, r4
 800373e:	e7ea      	b.n	8003716 <USART_GetITStatus+0x1e>

08003740 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8003740:	0a09      	lsrs	r1, r1, #8
 8003742:	2301      	movs	r3, #1
 8003744:	fa13 f101 	lsls.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8003748:	43c9      	mvns	r1, r1
 800374a:	b289      	uxth	r1, r1
 800374c:	8001      	strh	r1, [r0, #0]
}
 800374e:	4770      	bx	lr

08003750 <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8003750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop

08003758 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8003758:	f241 53fc 	movw	r3, #5628	; 0x15fc
 800375c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003760:	220c      	movs	r2, #12
 8003762:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop

0800376c <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 800376c:	f241 53fc 	movw	r3, #5628	; 0x15fc
 8003770:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003774:	220b      	movs	r2, #11
 8003776:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop

08003780 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8003780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003784:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003786:	2000      	movs	r0, #0
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop

0800378c <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 800378c:	2001      	movs	r0, #1
 800378e:	4770      	bx	lr

08003790 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8003790:	2802      	cmp	r0, #2
 8003792:	d801      	bhi.n	8003798 <_isatty+0x8>
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 8003794:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 8003796:	4770      	bx	lr
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8003798:	4b02      	ldr	r3, [pc, #8]	; (80037a4 <_isatty+0x14>)
 800379a:	2209      	movs	r2, #9
 800379c:	601a      	str	r2, [r3, #0]
		return 0;
 800379e:	2000      	movs	r0, #0
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	200015fc 	.word	0x200015fc

080037a8 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 80037a8:	f241 53fc 	movw	r3, #5628	; 0x15fc
 80037ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037b0:	2216      	movs	r2, #22
 80037b2:	601a      	str	r2, [r3, #0]
	return (-1);
}
 80037b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop

080037bc <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 80037bc:	f241 53fc 	movw	r3, #5628	; 0x15fc
 80037c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037c4:	221f      	movs	r2, #31
 80037c6:	601a      	str	r2, [r3, #0]
	return -1;
}
 80037c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop

080037d0 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 80037d0:	2000      	movs	r0, #0
 80037d2:	4770      	bx	lr

080037d4 <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 80037d4:	b430      	push	{r4, r5}
	int n;
	int num = 0;
	switch (file) {
 80037d6:	b130      	cbz	r0, 80037e6 <_read+0x12>
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <_read+0x34>)
 80037da:	2209      	movs	r2, #9
 80037dc:	601a      	str	r2, [r3, #0]
				return -1;
 80037de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 80037e2:	bc30      	pop	{r4, r5}
 80037e4:	4770      	bx	lr
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 80037e6:	2a00      	cmp	r2, #0
 80037e8:	ddfb      	ble.n	80037e2 <_read+0xe>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 80037ea:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 80037ee:	188d      	adds	r5, r1, r2
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 80037f0:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80037f4:	8823      	ldrh	r3, [r4, #0]
 80037f6:	069b      	lsls	r3, r3, #26
 80037f8:	d5fc      	bpl.n	80037f4 <_read+0x20>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 80037fa:	88a3      	ldrh	r3, [r4, #4]
 80037fc:	f801 3b01 	strb.w	r3, [r1], #1
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8003800:	42a9      	cmp	r1, r5
 8003802:	d1f7      	bne.n	80037f4 <_read+0x20>
 8003804:	4610      	mov	r0, r2
 8003806:	e7ec      	b.n	80037e2 <_read+0xe>
 8003808:	200015fc 	.word	0x200015fc

0800380c <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 800380c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003810:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003812:	2000      	movs	r0, #0
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop

08003818 <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8003818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop

08003820 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8003820:	f241 53fc 	movw	r3, #5628	; 0x15fc
 8003824:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003828:	2202      	movs	r2, #2
 800382a:	601a      	str	r2, [r3, #0]
	return -1;
}
 800382c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop

08003834 <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 8003834:	f241 53fc 	movw	r3, #5628	; 0x15fc
 8003838:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800383c:	220a      	movs	r2, #10
 800383e:	601a      	str	r2, [r3, #0]
	return -1;
}
 8003840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop

08003848 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8003848:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 800384a:	b430      	push	{r4, r5}
	int n;
	switch (file) {
 800384c:	d009      	beq.n	8003862 <_write+0x1a>
 800384e:	2802      	cmp	r0, #2
 8003850:	d017      	beq.n	8003882 <_write+0x3a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 8003852:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <_write+0x5c>)
 8003854:	2209      	movs	r2, #9
 8003856:	601a      	str	r2, [r3, #0]
				return -1;
 8003858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 800385c:	4610      	mov	r0, r2
 800385e:	bc30      	pop	{r4, r5}
 8003860:	4770      	bx	lr
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8003862:	2a00      	cmp	r2, #0
 8003864:	ddfa      	ble.n	800385c <_write+0x14>
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8003866:	f44f 5480 	mov.w	r4, #4096	; 0x1000
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 800386a:	188d      	adds	r5, r1, r2
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800386c:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8003870:	8823      	ldrh	r3, [r4, #0]
 8003872:	065b      	lsls	r3, r3, #25
 8003874:	d5fc      	bpl.n	8003870 <_write+0x28>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8003876:	f811 3b01 	ldrb.w	r3, [r1], #1
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 800387a:	42a9      	cmp	r1, r5
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 800387c:	80a3      	strh	r3, [r4, #4]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 800387e:	d1f7      	bne.n	8003870 <_write+0x28>
 8003880:	e7ec      	b.n	800385c <_write+0x14>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8003882:	2a00      	cmp	r2, #0
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8003884:	bfc2      	ittt	gt
 8003886:	f44f 5480 	movgt.w	r4, #4096	; 0x1000
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 800388a:	188d      	addgt	r5, r1, r2
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800388c:	f2c4 0401 	movtgt	r4, #16385	; 0x4001
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8003890:	dde4      	ble.n	800385c <_write+0x14>
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8003892:	8823      	ldrh	r3, [r4, #0]
 8003894:	0658      	lsls	r0, r3, #25
 8003896:	d5fc      	bpl.n	8003892 <_write+0x4a>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8003898:	f811 3b01 	ldrb.w	r3, [r1], #1
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 800389c:	42a9      	cmp	r1, r5
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 800389e:	80a3      	strh	r3, [r4, #4]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 80038a0:	d1f7      	bne.n	8003892 <_write+0x4a>
 80038a2:	e7db      	b.n	800385c <_write+0x14>
 80038a4:	200015fc 	.word	0x200015fc

080038a8 <_sbrk>:

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 80038a8:	4a0d      	ldr	r2, [pc, #52]	; (80038e0 <_sbrk+0x38>)
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 80038aa:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 80038ac:	6813      	ldr	r3, [r2, #0]
 80038ae:	b1a3      	cbz	r3, 80038da <_sbrk+0x32>
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 80038b0:	f3ef 8108 	mrs	r1, MSP
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 80038b4:	1818      	adds	r0, r3, r0
 80038b6:	4288      	cmp	r0, r1
		errno = ENOMEM;
		return (caddr_t) -1;
		//abort ();
	}

	heap_end += incr;
 80038b8:	bf98      	it	ls
 80038ba:	6010      	strls	r0, [r2, #0]
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 80038bc:	d801      	bhi.n	80038c2 <_sbrk+0x1a>
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 80038be:	4618      	mov	r0, r3
 80038c0:	bd08      	pop	{r3, pc}
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 80038c2:	2219      	movs	r2, #25
 80038c4:	2002      	movs	r0, #2
 80038c6:	4907      	ldr	r1, [pc, #28]	; (80038e4 <_sbrk+0x3c>)
 80038c8:	f7ff ffbe 	bl	8003848 <_write>
		errno = ENOMEM;
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <_sbrk+0x40>)
 80038ce:	220c      	movs	r2, #12
 80038d0:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80038d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 80038d6:	4618      	mov	r0, r3
 80038d8:	bd08      	pop	{r3, pc}
	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
		heap_end = &_ebss;
 80038da:	4b04      	ldr	r3, [pc, #16]	; (80038ec <_sbrk+0x44>)
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e7e7      	b.n	80038b0 <_sbrk+0x8>
 80038e0:	2000095c 	.word	0x2000095c
 80038e4:	080091e4 	.word	0x080091e4
 80038e8:	200015fc 	.word	0x200015fc
 80038ec:	20001600 	.word	0x20001600

080038f0 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 80038f0:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 80038f2:	2001      	movs	r0, #1
 80038f4:	4902      	ldr	r1, [pc, #8]	; (8003900 <_exit+0x10>)
 80038f6:	2204      	movs	r2, #4
 80038f8:	f7ff ffa6 	bl	8003848 <_write>
 80038fc:	e7fe      	b.n	80038fc <_exit+0xc>
 80038fe:	bf00      	nop
 8003900:	08009200 	.word	0x08009200
 8003904:	0800926c 	.word	0x0800926c
 8003908:	20000000 	.word	0x20000000
 800390c:	2000095c 	.word	0x2000095c
 8003910:	2000095c 	.word	0x2000095c
 8003914:	20001600 	.word	0x20001600

08003918 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop

0800391c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800391c:	e7fe      	b.n	800391c <HardFault_Handler>
 800391e:	bf00      	nop

08003920 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003920:	e7fe      	b.n	8003920 <MemManage_Handler>
 8003922:	bf00      	nop

08003924 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003924:	e7fe      	b.n	8003924 <BusFault_Handler>
 8003926:	bf00      	nop

08003928 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003928:	e7fe      	b.n	8003928 <UsageFault_Handler>
 800392a:	bf00      	nop

0800392c <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop

08003930 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop

08003934 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop

08003938 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003938:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800393c:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003940:	2200      	movs	r2, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003942:	6819      	ldr	r1, [r3, #0]
 8003944:	f041 0101 	orr.w	r1, r1, #1
 8003948:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800394a:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800394c:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800394e:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003952:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003956:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800395a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800395e:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003960:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003962:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003964:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003966:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800396a:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800396c:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800396e:	9200      	str	r2, [sp, #0]
 8003970:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003978:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800397a:	461a      	mov	r2, r3
 800397c:	e003      	b.n	8003986 <SystemInit+0x4e>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800397e:	9b00      	ldr	r3, [sp, #0]
 8003980:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003984:	d009      	beq.n	800399a <SystemInit+0x62>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003986:	6813      	ldr	r3, [r2, #0]
 8003988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398c:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 800398e:	9b00      	ldr	r3, [sp, #0]
 8003990:	3301      	adds	r3, #1
 8003992:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003994:	9b01      	ldr	r3, [sp, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f1      	beq.n	800397e <SystemInit+0x46>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800399a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800399e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80039a8:	bf08      	it	eq
 80039aa:	9301      	streq	r3, [sp, #4]
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80039ac:	d001      	beq.n	80039b2 <SystemInit+0x7a>
  {
    HSEStatus = (uint32_t)0x01;
 80039ae:	2301      	movs	r3, #1
 80039b0:	9301      	str	r3, [sp, #4]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
 80039b2:	9b01      	ldr	r3, [sp, #4]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d008      	beq.n	80039ca <SystemInit+0x92>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039b8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80039bc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80039c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039c4:	609a      	str	r2, [r3, #8]
#endif
}
 80039c6:	b002      	add	sp, #8
 80039c8:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80039ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80039ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
    PWR->CR |= PWR_CR_VOS;
 80039d2:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80039d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80039d8:	f2c4 0200 	movt	r2, #16384	; 0x4000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80039dc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80039e0:	6419      	str	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80039e2:	6811      	ldr	r1, [r2, #0]
 80039e4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80039e8:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039f4:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80039f6:	6899      	ldr	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80039f8:	f245 4208 	movw	r2, #21512	; 0x5408
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80039fc:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003a00:	f2c0 7240 	movt	r2, #1856	; 0x740
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003a04:	6099      	str	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003a06:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003a0e:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003a10:	4619      	mov	r1, r3
 8003a12:	680a      	ldr	r2, [r1, #0]
 8003a14:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003a18:	0192      	lsls	r2, r2, #6
 8003a1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a1e:	d5f8      	bpl.n	8003a12 <SystemInit+0xda>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003a20:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003a24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003a28:	f240 6105 	movw	r1, #1541	; 0x605
 8003a2c:	6011      	str	r1, [r2, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	f022 0203 	bic.w	r2, r2, #3
 8003a34:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	f042 0202 	orr.w	r2, r2, #2
 8003a3c:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	f002 020c 	and.w	r2, r2, #12
 8003a44:	2a08      	cmp	r2, #8
 8003a46:	d1fa      	bne.n	8003a3e <SystemInit+0x106>
 8003a48:	e7b6      	b.n	80039b8 <SystemInit+0x80>
 8003a4a:	bf00      	nop

08003a4c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003a4c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003a50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8003a5a:	2a04      	cmp	r2, #4
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 8003a5c:	bf04      	itt	eq
 8003a5e:	f44f 5190 	moveq.w	r1, #4608	; 0x1200
 8003a62:	f2c0 017a 	movteq	r1, #122	; 0x7a
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8003a66:	d006      	beq.n	8003a76 <SystemCoreClockUpdate+0x2a>
 8003a68:	2a08      	cmp	r2, #8
 8003a6a:	bf1c      	itt	ne
 8003a6c:	f44f 5110 	movne.w	r1, #9216	; 0x2400
 8003a70:	f2c0 01f4 	movtne	r1, #244	; 0xf4
 8003a74:	d00b      	beq.n	8003a8e <SystemCoreClockUpdate+0x42>
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003a76:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <SystemCoreClockUpdate+0x88>)
 8003a80:	6892      	ldr	r2, [r2, #8]
 8003a82:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003a86:	5c9a      	ldrb	r2, [r3, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003a88:	40d1      	lsrs	r1, r2
 8003a8a:	6119      	str	r1, [r3, #16]
}
 8003a8c:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003a8e:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a90:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8003a92:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003a96:	6858      	ldr	r0, [r3, #4]
 8003a98:	bf15      	itete	ne
 8003a9a:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003a9e:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003aa2:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003aa6:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aaa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003aae:	fbb3 f1f2 	udiv	r1, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003ab2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003ab6:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003aba:	f3c0 1088 	ubfx	r0, r0, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003ac4:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003ac6:	fb01 f100 	mul.w	r1, r1, r0
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003aca:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 8003acc:	fbb1 f1f3 	udiv	r1, r1, r3
      break;
 8003ad0:	e7d1      	b.n	8003a76 <SystemCoreClockUpdate+0x2a>
 8003ad2:	bf00      	nop
 8003ad4:	20000088 	.word	0x20000088

08003ad8 <cleanup_glue>:
 8003ad8:	b538      	push	{r3, r4, r5, lr}
 8003ada:	460c      	mov	r4, r1
 8003adc:	6809      	ldr	r1, [r1, #0]
 8003ade:	4605      	mov	r5, r0
 8003ae0:	b109      	cbz	r1, 8003ae6 <cleanup_glue+0xe>
 8003ae2:	f7ff fff9 	bl	8003ad8 <cleanup_glue>
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	4621      	mov	r1, r4
 8003aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aee:	f002 ba23 	b.w	8005f38 <_free_r>
 8003af2:	bf00      	nop

08003af4 <_reclaim_reent>:
 8003af4:	4b22      	ldr	r3, [pc, #136]	; (8003b80 <_reclaim_reent+0x8c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4298      	cmp	r0, r3
 8003afa:	b570      	push	{r4, r5, r6, lr}
 8003afc:	4605      	mov	r5, r0
 8003afe:	d032      	beq.n	8003b66 <_reclaim_reent+0x72>
 8003b00:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003b02:	b1ab      	cbz	r3, 8003b30 <_reclaim_reent+0x3c>
 8003b04:	2200      	movs	r2, #0
 8003b06:	4616      	mov	r6, r2
 8003b08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b0c:	b909      	cbnz	r1, 8003b12 <_reclaim_reent+0x1e>
 8003b0e:	e007      	b.n	8003b20 <_reclaim_reent+0x2c>
 8003b10:	4621      	mov	r1, r4
 8003b12:	680c      	ldr	r4, [r1, #0]
 8003b14:	4628      	mov	r0, r5
 8003b16:	f002 fa0f 	bl	8005f38 <_free_r>
 8003b1a:	2c00      	cmp	r4, #0
 8003b1c:	d1f8      	bne.n	8003b10 <_reclaim_reent+0x1c>
 8003b1e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003b20:	3601      	adds	r6, #1
 8003b22:	2e20      	cmp	r6, #32
 8003b24:	4632      	mov	r2, r6
 8003b26:	d1ef      	bne.n	8003b08 <_reclaim_reent+0x14>
 8003b28:	4628      	mov	r0, r5
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	f002 fa04 	bl	8005f38 <_free_r>
 8003b30:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8003b32:	b111      	cbz	r1, 8003b3a <_reclaim_reent+0x46>
 8003b34:	4628      	mov	r0, r5
 8003b36:	f002 f9ff 	bl	8005f38 <_free_r>
 8003b3a:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 8003b3e:	b159      	cbz	r1, 8003b58 <_reclaim_reent+0x64>
 8003b40:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8003b44:	42b1      	cmp	r1, r6
 8003b46:	d101      	bne.n	8003b4c <_reclaim_reent+0x58>
 8003b48:	e006      	b.n	8003b58 <_reclaim_reent+0x64>
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	680c      	ldr	r4, [r1, #0]
 8003b4e:	4628      	mov	r0, r5
 8003b50:	f002 f9f2 	bl	8005f38 <_free_r>
 8003b54:	42a6      	cmp	r6, r4
 8003b56:	d1f8      	bne.n	8003b4a <_reclaim_reent+0x56>
 8003b58:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8003b5a:	b111      	cbz	r1, 8003b62 <_reclaim_reent+0x6e>
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f002 f9eb 	bl	8005f38 <_free_r>
 8003b62:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003b64:	b903      	cbnz	r3, 8003b68 <_reclaim_reent+0x74>
 8003b66:	bd70      	pop	{r4, r5, r6, pc}
 8003b68:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	4798      	blx	r3
 8003b6e:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 8003b72:	2900      	cmp	r1, #0
 8003b74:	d0f7      	beq.n	8003b66 <_reclaim_reent+0x72>
 8003b76:	4628      	mov	r0, r5
 8003b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003b7c:	e7ac      	b.n	8003ad8 <cleanup_glue>
 8003b7e:	bf00      	nop
 8003b80:	200000a0 	.word	0x200000a0

08003b84 <_wrapup_reent>:
 8003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b86:	4607      	mov	r7, r0
 8003b88:	b1b0      	cbz	r0, 8003bb8 <_wrapup_reent+0x34>
 8003b8a:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 8003b8e:	b176      	cbz	r6, 8003bae <_wrapup_reent+0x2a>
 8003b90:	6875      	ldr	r5, [r6, #4]
 8003b92:	1e6c      	subs	r4, r5, #1
 8003b94:	d408      	bmi.n	8003ba8 <_wrapup_reent+0x24>
 8003b96:	3502      	adds	r5, #2
 8003b98:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8003b9c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003ba0:	3c01      	subs	r4, #1
 8003ba2:	4798      	blx	r3
 8003ba4:	1c63      	adds	r3, r4, #1
 8003ba6:	d1f9      	bne.n	8003b9c <_wrapup_reent+0x18>
 8003ba8:	6836      	ldr	r6, [r6, #0]
 8003baa:	2e00      	cmp	r6, #0
 8003bac:	d1f0      	bne.n	8003b90 <_wrapup_reent+0xc>
 8003bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb0:	b10b      	cbz	r3, 8003bb6 <_wrapup_reent+0x32>
 8003bb2:	4638      	mov	r0, r7
 8003bb4:	4798      	blx	r3
 8003bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bb8:	4b01      	ldr	r3, [pc, #4]	; (8003bc0 <_wrapup_reent+0x3c>)
 8003bba:	681f      	ldr	r7, [r3, #0]
 8003bbc:	e7e5      	b.n	8003b8a <_wrapup_reent+0x6>
 8003bbe:	bf00      	nop
 8003bc0:	200000a0 	.word	0x200000a0

08003bc4 <_sprintf_r>:
 8003bc4:	b40c      	push	{r2, r3}
 8003bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc8:	b09d      	sub	sp, #116	; 0x74
 8003bca:	ac22      	add	r4, sp, #136	; 0x88
 8003bcc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8003bd0:	f854 2b04 	ldr.w	r2, [r4], #4
 8003bd4:	9101      	str	r1, [sp, #4]
 8003bd6:	460e      	mov	r6, r1
 8003bd8:	4623      	mov	r3, r4
 8003bda:	9503      	str	r5, [sp, #12]
 8003bdc:	9506      	str	r5, [sp, #24]
 8003bde:	a901      	add	r1, sp, #4
 8003be0:	f44f 7702 	mov.w	r7, #520	; 0x208
 8003be4:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003be8:	f8ad 7010 	strh.w	r7, [sp, #16]
 8003bec:	9605      	str	r6, [sp, #20]
 8003bee:	f8ad 5012 	strh.w	r5, [sp, #18]
 8003bf2:	941b      	str	r4, [sp, #108]	; 0x6c
 8003bf4:	f000 f830 	bl	8003c58 <_svfprintf_r>
 8003bf8:	9b01      	ldr	r3, [sp, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	b01d      	add	sp, #116	; 0x74
 8003c00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003c04:	b002      	add	sp, #8
 8003c06:	4770      	bx	lr

08003c08 <sprintf>:
 8003c08:	b40e      	push	{r1, r2, r3}
 8003c0a:	b570      	push	{r4, r5, r6, lr}
 8003c0c:	b09d      	sub	sp, #116	; 0x74
 8003c0e:	ac21      	add	r4, sp, #132	; 0x84
 8003c10:	f240 03a0 	movw	r3, #160	; 0xa0
 8003c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c18:	f854 2b04 	ldr.w	r2, [r4], #4
 8003c1c:	4606      	mov	r6, r0
 8003c1e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	9503      	str	r5, [sp, #12]
 8003c26:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003c2a:	f8ad 3010 	strh.w	r3, [sp, #16]
 8003c2e:	9506      	str	r5, [sp, #24]
 8003c30:	4623      	mov	r3, r4
 8003c32:	a901      	add	r1, sp, #4
 8003c34:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003c38:	9601      	str	r6, [sp, #4]
 8003c3a:	9605      	str	r6, [sp, #20]
 8003c3c:	f8ad 5012 	strh.w	r5, [sp, #18]
 8003c40:	941b      	str	r4, [sp, #108]	; 0x6c
 8003c42:	f000 f809 	bl	8003c58 <_svfprintf_r>
 8003c46:	9b01      	ldr	r3, [sp, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]
 8003c4c:	b01d      	add	sp, #116	; 0x74
 8003c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c52:	b003      	add	sp, #12
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop

08003c58 <_svfprintf_r>:
 8003c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c5c:	b0c5      	sub	sp, #276	; 0x114
 8003c5e:	468a      	mov	sl, r1
 8003c60:	4614      	mov	r4, r2
 8003c62:	930e      	str	r3, [sp, #56]	; 0x38
 8003c64:	900f      	str	r0, [sp, #60]	; 0x3c
 8003c66:	f002 fa5f 	bl	8006128 <_localeconv_r>
 8003c6a:	6800      	ldr	r0, [r0, #0]
 8003c6c:	9017      	str	r0, [sp, #92]	; 0x5c
 8003c6e:	f003 fb35 	bl	80072dc <strlen>
 8003c72:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003c76:	901a      	str	r0, [sp, #104]	; 0x68
 8003c78:	2100      	movs	r1, #0
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	061a      	lsls	r2, r3, #24
 8003c7e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8003c82:	d504      	bpl.n	8003c8e <_svfprintf_r+0x36>
 8003c84:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f001 8004 	beq.w	8004c96 <_svfprintf_r+0x103e>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f10d 00e3 	add.w	r0, sp, #227	; 0xe3
 8003c94:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8003c98:	a91f      	add	r1, sp, #124	; 0x7c
 8003c9a:	9310      	str	r3, [sp, #64]	; 0x40
 8003c9c:	933b      	str	r3, [sp, #236]	; 0xec
 8003c9e:	933a      	str	r3, [sp, #232]	; 0xe8
 8003ca0:	931c      	str	r3, [sp, #112]	; 0x70
 8003ca2:	931b      	str	r3, [sp, #108]	; 0x6c
 8003ca4:	930c      	str	r3, [sp, #48]	; 0x30
 8003ca6:	ebc0 030b 	rsb	r3, r0, fp
 8003caa:	9007      	str	r0, [sp, #28]
 8003cac:	9139      	str	r1, [sp, #228]	; 0xe4
 8003cae:	9409      	str	r4, [sp, #36]	; 0x24
 8003cb0:	460e      	mov	r6, r1
 8003cb2:	931d      	str	r3, [sp, #116]	; 0x74
 8003cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cb6:	7803      	ldrb	r3, [r0, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf18      	it	ne
 8003cbc:	2b25      	cmpne	r3, #37	; 0x25
 8003cbe:	f000 80af 	beq.w	8003e20 <_svfprintf_r+0x1c8>
 8003cc2:	4607      	mov	r7, r0
 8003cc4:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8003cc8:	2b25      	cmp	r3, #37	; 0x25
 8003cca:	bf18      	it	ne
 8003ccc:	2b00      	cmpne	r3, #0
 8003cce:	d1f9      	bne.n	8003cc4 <_svfprintf_r+0x6c>
 8003cd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003cd2:	ebb7 0801 	subs.w	r8, r7, r1
 8003cd6:	d00e      	beq.n	8003cf6 <_svfprintf_r+0x9e>
 8003cd8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003cda:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003cdc:	6031      	str	r1, [r6, #0]
 8003cde:	3401      	adds	r4, #1
 8003ce0:	4445      	add	r5, r8
 8003ce2:	2c07      	cmp	r4, #7
 8003ce4:	f8c6 8004 	str.w	r8, [r6, #4]
 8003ce8:	953b      	str	r5, [sp, #236]	; 0xec
 8003cea:	943a      	str	r4, [sp, #232]	; 0xe8
 8003cec:	dc7c      	bgt.n	8003de8 <_svfprintf_r+0x190>
 8003cee:	3608      	adds	r6, #8
 8003cf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003cf2:	4442      	add	r2, r8
 8003cf4:	920c      	str	r2, [sp, #48]	; 0x30
 8003cf6:	783b      	ldrb	r3, [r7, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d07d      	beq.n	8003df8 <_svfprintf_r+0x1a0>
 8003cfc:	3701      	adds	r7, #1
 8003cfe:	9709      	str	r7, [sp, #36]	; 0x24
 8003d00:	2300      	movs	r3, #0
 8003d02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d04:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d06:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8003d0a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003d0e:	9308      	str	r3, [sp, #32]
 8003d10:	2720      	movs	r7, #32
 8003d12:	252b      	movs	r5, #43	; 0x2b
 8003d14:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003d18:	f1a3 0220 	sub.w	r2, r3, #32
 8003d1c:	2a58      	cmp	r2, #88	; 0x58
 8003d1e:	f200 823b 	bhi.w	8004198 <_svfprintf_r+0x540>
 8003d22:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003d26:	024c      	.short	0x024c
 8003d28:	02390239 	.word	0x02390239
 8003d2c:	02390254 	.word	0x02390254
 8003d30:	02390239 	.word	0x02390239
 8003d34:	02390239 	.word	0x02390239
 8003d38:	02590239 	.word	0x02590239
 8003d3c:	0239007f 	.word	0x0239007f
 8003d40:	0082005c 	.word	0x0082005c
 8003d44:	009d0239 	.word	0x009d0239
 8003d48:	00a200a2 	.word	0x00a200a2
 8003d4c:	00a200a2 	.word	0x00a200a2
 8003d50:	00a200a2 	.word	0x00a200a2
 8003d54:	00a200a2 	.word	0x00a200a2
 8003d58:	023900a2 	.word	0x023900a2
 8003d5c:	02390239 	.word	0x02390239
 8003d60:	02390239 	.word	0x02390239
 8003d64:	02390239 	.word	0x02390239
 8003d68:	02390239 	.word	0x02390239
 8003d6c:	00b50239 	.word	0x00b50239
 8003d70:	02390154 	.word	0x02390154
 8003d74:	02390154 	.word	0x02390154
 8003d78:	02390239 	.word	0x02390239
 8003d7c:	018b0239 	.word	0x018b0239
 8003d80:	02390239 	.word	0x02390239
 8003d84:	02390190 	.word	0x02390190
 8003d88:	02390239 	.word	0x02390239
 8003d8c:	02390239 	.word	0x02390239
 8003d90:	023901a7 	.word	0x023901a7
 8003d94:	01ba0239 	.word	0x01ba0239
 8003d98:	02390239 	.word	0x02390239
 8003d9c:	02390239 	.word	0x02390239
 8003da0:	02390239 	.word	0x02390239
 8003da4:	02390239 	.word	0x02390239
 8003da8:	02390239 	.word	0x02390239
 8003dac:	02780293 	.word	0x02780293
 8003db0:	01540154 	.word	0x01540154
 8003db4:	028e0154 	.word	0x028e0154
 8003db8:	02390278 	.word	0x02390278
 8003dbc:	02130239 	.word	0x02130239
 8003dc0:	02180239 	.word	0x02180239
 8003dc4:	02a50224 	.word	0x02a50224
 8003dc8:	023901de 	.word	0x023901de
 8003dcc:	023901e3 	.word	0x023901e3
 8003dd0:	02390264 	.word	0x02390264
 8003dd4:	02c70239 	.word	0x02c70239
 8003dd8:	4252      	negs	r2, r2
 8003dda:	920b      	str	r2, [sp, #44]	; 0x2c
 8003ddc:	930e      	str	r3, [sp, #56]	; 0x38
 8003dde:	9b08      	ldr	r3, [sp, #32]
 8003de0:	f043 0304 	orr.w	r3, r3, #4
 8003de4:	9308      	str	r3, [sp, #32]
 8003de6:	e795      	b.n	8003d14 <_svfprintf_r+0xbc>
 8003de8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003dea:	4651      	mov	r1, sl
 8003dec:	465a      	mov	r2, fp
 8003dee:	f003 faa5 	bl	800733c <__ssprint_r>
 8003df2:	b940      	cbnz	r0, 8003e06 <_svfprintf_r+0x1ae>
 8003df4:	ae1f      	add	r6, sp, #124	; 0x7c
 8003df6:	e77b      	b.n	8003cf0 <_svfprintf_r+0x98>
 8003df8:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8003dfa:	b123      	cbz	r3, 8003e06 <_svfprintf_r+0x1ae>
 8003dfc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003dfe:	4651      	mov	r1, sl
 8003e00:	aa39      	add	r2, sp, #228	; 0xe4
 8003e02:	f003 fa9b 	bl	800733c <__ssprint_r>
 8003e06:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003e0a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e10:	bf18      	it	ne
 8003e12:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8003e16:	930c      	str	r3, [sp, #48]	; 0x30
 8003e18:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003e1a:	b045      	add	sp, #276	; 0x114
 8003e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003e22:	e768      	b.n	8003cf6 <_svfprintf_r+0x9e>
 8003e24:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8003e28:	e774      	b.n	8003d14 <_svfprintf_r+0xbc>
 8003e2a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e30:	f001 804c 	beq.w	8004ecc <_svfprintf_r+0x1274>
 8003e34:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003e38:	2400      	movs	r4, #0
 8003e3a:	2a09      	cmp	r2, #9
 8003e3c:	f63f af6c 	bhi.w	8003d18 <_svfprintf_r+0xc0>
 8003e40:	4601      	mov	r1, r0
 8003e42:	2400      	movs	r4, #0
 8003e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e48:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003e4c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8003e50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003e54:	2a09      	cmp	r2, #9
 8003e56:	4608      	mov	r0, r1
 8003e58:	d9f4      	bls.n	8003e44 <_svfprintf_r+0x1ec>
 8003e5a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8003e5e:	e75b      	b.n	8003d18 <_svfprintf_r+0xc0>
 8003e60:	9a08      	ldr	r2, [sp, #32]
 8003e62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e66:	9208      	str	r2, [sp, #32]
 8003e68:	e754      	b.n	8003d14 <_svfprintf_r+0xbc>
 8003e6a:	4601      	mov	r1, r0
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	46b4      	mov	ip, r6
 8003e70:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8003e74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e78:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8003e7c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003e80:	2e09      	cmp	r6, #9
 8003e82:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003e86:	4608      	mov	r0, r1
 8003e88:	d9f2      	bls.n	8003e70 <_svfprintf_r+0x218>
 8003e8a:	4666      	mov	r6, ip
 8003e8c:	920b      	str	r2, [sp, #44]	; 0x2c
 8003e8e:	e743      	b.n	8003d18 <_svfprintf_r+0xc0>
 8003e90:	9315      	str	r3, [sp, #84]	; 0x54
 8003e92:	9b08      	ldr	r3, [sp, #32]
 8003e94:	9009      	str	r0, [sp, #36]	; 0x24
 8003e96:	f043 0310 	orr.w	r3, r3, #16
 8003e9a:	9308      	str	r3, [sp, #32]
 8003e9c:	9808      	ldr	r0, [sp, #32]
 8003e9e:	06c3      	lsls	r3, r0, #27
 8003ea0:	f100 81bf 	bmi.w	8004222 <_svfprintf_r+0x5ca>
 8003ea4:	9a08      	ldr	r2, [sp, #32]
 8003ea6:	0655      	lsls	r5, r2, #25
 8003ea8:	f140 81bb 	bpl.w	8004222 <_svfprintf_r+0x5ca>
 8003eac:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003eae:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003eb2:	3004      	adds	r0, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	900e      	str	r0, [sp, #56]	; 0x38
 8003eb8:	f2c0 81ba 	blt.w	8004230 <_svfprintf_r+0x5d8>
 8003ebc:	bf0c      	ite	eq
 8003ebe:	2100      	moveq	r1, #0
 8003ec0:	2101      	movne	r1, #1
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	2c00      	cmp	r4, #0
 8003ec6:	bfa2      	ittt	ge
 8003ec8:	9808      	ldrge	r0, [sp, #32]
 8003eca:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8003ece:	9008      	strge	r0, [sp, #32]
 8003ed0:	2c00      	cmp	r4, #0
 8003ed2:	bf18      	it	ne
 8003ed4:	f041 0101 	orrne.w	r1, r1, #1
 8003ed8:	2900      	cmp	r1, #0
 8003eda:	f000 8323 	beq.w	8004524 <_svfprintf_r+0x8cc>
 8003ede:	2a01      	cmp	r2, #1
 8003ee0:	f000 845f 	beq.w	80047a2 <_svfprintf_r+0xb4a>
 8003ee4:	2a02      	cmp	r2, #2
 8003ee6:	bf18      	it	ne
 8003ee8:	465a      	movne	r2, fp
 8003eea:	d102      	bne.n	8003ef2 <_svfprintf_r+0x29a>
 8003eec:	f000 bc48 	b.w	8004780 <_svfprintf_r+0xb28>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	f003 0107 	and.w	r1, r3, #7
 8003ef6:	3130      	adds	r1, #48	; 0x30
 8003ef8:	1e50      	subs	r0, r2, #1
 8003efa:	08db      	lsrs	r3, r3, #3
 8003efc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003f00:	d1f6      	bne.n	8003ef0 <_svfprintf_r+0x298>
 8003f02:	9b08      	ldr	r3, [sp, #32]
 8003f04:	9011      	str	r0, [sp, #68]	; 0x44
 8003f06:	07dd      	lsls	r5, r3, #31
 8003f08:	d507      	bpl.n	8003f1a <_svfprintf_r+0x2c2>
 8003f0a:	2930      	cmp	r1, #48	; 0x30
 8003f0c:	f000 8733 	beq.w	8004d76 <_svfprintf_r+0x111e>
 8003f10:	1e90      	subs	r0, r2, #2
 8003f12:	2330      	movs	r3, #48	; 0x30
 8003f14:	9011      	str	r0, [sp, #68]	; 0x44
 8003f16:	f802 3c02 	strb.w	r3, [r2, #-2]
 8003f1a:	ebc0 030b 	rsb	r3, r0, fp
 8003f1e:	930d      	str	r3, [sp, #52]	; 0x34
 8003f20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f22:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003f26:	9412      	str	r4, [sp, #72]	; 0x48
 8003f28:	42a3      	cmp	r3, r4
 8003f2a:	bfb8      	it	lt
 8003f2c:	4623      	movlt	r3, r4
 8003f2e:	2000      	movs	r0, #0
 8003f30:	930a      	str	r3, [sp, #40]	; 0x28
 8003f32:	9016      	str	r0, [sp, #88]	; 0x58
 8003f34:	b111      	cbz	r1, 8003f3c <_svfprintf_r+0x2e4>
 8003f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f38:	3301      	adds	r3, #1
 8003f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8003f3c:	9b08      	ldr	r3, [sp, #32]
 8003f3e:	f013 0302 	ands.w	r3, r3, #2
 8003f42:	9313      	str	r3, [sp, #76]	; 0x4c
 8003f44:	d002      	beq.n	8003f4c <_svfprintf_r+0x2f4>
 8003f46:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003f48:	3002      	adds	r0, #2
 8003f4a:	900a      	str	r0, [sp, #40]	; 0x28
 8003f4c:	9b08      	ldr	r3, [sp, #32]
 8003f4e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8003f52:	9314      	str	r3, [sp, #80]	; 0x50
 8003f54:	f040 81bb 	bne.w	80042ce <_svfprintf_r+0x676>
 8003f58:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003f5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003f5c:	1a47      	subs	r7, r0, r1
 8003f5e:	2f00      	cmp	r7, #0
 8003f60:	f340 81b5 	ble.w	80042ce <_svfprintf_r+0x676>
 8003f64:	2f10      	cmp	r7, #16
 8003f66:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003f68:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003f6a:	f8df 8344 	ldr.w	r8, [pc, #836]	; 80042b0 <_svfprintf_r+0x658>
 8003f6e:	dd22      	ble.n	8003fb6 <_svfprintf_r+0x35e>
 8003f70:	4623      	mov	r3, r4
 8003f72:	f04f 0910 	mov.w	r9, #16
 8003f76:	4644      	mov	r4, r8
 8003f78:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003f7c:	e003      	b.n	8003f86 <_svfprintf_r+0x32e>
 8003f7e:	3f10      	subs	r7, #16
 8003f80:	3608      	adds	r6, #8
 8003f82:	2f10      	cmp	r7, #16
 8003f84:	dd15      	ble.n	8003fb2 <_svfprintf_r+0x35a>
 8003f86:	3301      	adds	r3, #1
 8003f88:	3510      	adds	r5, #16
 8003f8a:	2b07      	cmp	r3, #7
 8003f8c:	e886 0210 	stmia.w	r6, {r4, r9}
 8003f90:	953b      	str	r5, [sp, #236]	; 0xec
 8003f92:	933a      	str	r3, [sp, #232]	; 0xe8
 8003f94:	ddf3      	ble.n	8003f7e <_svfprintf_r+0x326>
 8003f96:	4640      	mov	r0, r8
 8003f98:	4651      	mov	r1, sl
 8003f9a:	465a      	mov	r2, fp
 8003f9c:	f003 f9ce 	bl	800733c <__ssprint_r>
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	f47f af30 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8003fa6:	3f10      	subs	r7, #16
 8003fa8:	2f10      	cmp	r7, #16
 8003faa:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003fac:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003fae:	ae1f      	add	r6, sp, #124	; 0x7c
 8003fb0:	dce9      	bgt.n	8003f86 <_svfprintf_r+0x32e>
 8003fb2:	46a0      	mov	r8, r4
 8003fb4:	461c      	mov	r4, r3
 8003fb6:	3401      	adds	r4, #1
 8003fb8:	19ed      	adds	r5, r5, r7
 8003fba:	2c07      	cmp	r4, #7
 8003fbc:	f8c6 8000 	str.w	r8, [r6]
 8003fc0:	6077      	str	r7, [r6, #4]
 8003fc2:	953b      	str	r5, [sp, #236]	; 0xec
 8003fc4:	943a      	str	r4, [sp, #232]	; 0xe8
 8003fc6:	f300 8414 	bgt.w	80047f2 <_svfprintf_r+0xb9a>
 8003fca:	3608      	adds	r6, #8
 8003fcc:	e180      	b.n	80042d0 <_svfprintf_r+0x678>
 8003fce:	9009      	str	r0, [sp, #36]	; 0x24
 8003fd0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003fd2:	9315      	str	r3, [sp, #84]	; 0x54
 8003fd4:	1dc3      	adds	r3, r0, #7
 8003fd6:	f023 0307 	bic.w	r3, r3, #7
 8003fda:	f103 0108 	add.w	r1, r3, #8
 8003fde:	910e      	str	r1, [sp, #56]	; 0x38
 8003fe0:	f8d3 8000 	ldr.w	r8, [r3]
 8003fe4:	685d      	ldr	r5, [r3, #4]
 8003fe6:	4642      	mov	r2, r8
 8003fe8:	462b      	mov	r3, r5
 8003fea:	4629      	mov	r1, r5
 8003fec:	4640      	mov	r0, r8
 8003fee:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8003ff2:	f003 f83b 	bl	800706c <__fpclassifyd>
 8003ff6:	2801      	cmp	r0, #1
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	4640      	mov	r0, r8
 8003ffc:	f040 84d0 	bne.w	80049a0 <_svfprintf_r+0xd48>
 8004000:	2200      	movs	r2, #0
 8004002:	2300      	movs	r3, #0
 8004004:	f004 fd62 	bl	8008acc <__aeabi_dcmplt>
 8004008:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800400c:	b110      	cbz	r0, 8004014 <_svfprintf_r+0x3bc>
 800400e:	212d      	movs	r1, #45	; 0x2d
 8004010:	f88d 110f 	strb.w	r1, [sp, #271]	; 0x10f
 8004014:	2303      	movs	r3, #3
 8004016:	930a      	str	r3, [sp, #40]	; 0x28
 8004018:	2300      	movs	r3, #0
 800401a:	9312      	str	r3, [sp, #72]	; 0x48
 800401c:	4aa0      	ldr	r2, [pc, #640]	; (80042a0 <_svfprintf_r+0x648>)
 800401e:	4ba1      	ldr	r3, [pc, #644]	; (80042a4 <_svfprintf_r+0x64c>)
 8004020:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004022:	2847      	cmp	r0, #71	; 0x47
 8004024:	bfd8      	it	le
 8004026:	461a      	movle	r2, r3
 8004028:	9211      	str	r2, [sp, #68]	; 0x44
 800402a:	9a08      	ldr	r2, [sp, #32]
 800402c:	2303      	movs	r3, #3
 800402e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004032:	930d      	str	r3, [sp, #52]	; 0x34
 8004034:	2300      	movs	r3, #0
 8004036:	9208      	str	r2, [sp, #32]
 8004038:	9316      	str	r3, [sp, #88]	; 0x58
 800403a:	e77b      	b.n	8003f34 <_svfprintf_r+0x2dc>
 800403c:	9b08      	ldr	r3, [sp, #32]
 800403e:	f043 0308 	orr.w	r3, r3, #8
 8004042:	9308      	str	r3, [sp, #32]
 8004044:	e666      	b.n	8003d14 <_svfprintf_r+0xbc>
 8004046:	9908      	ldr	r1, [sp, #32]
 8004048:	9009      	str	r0, [sp, #36]	; 0x24
 800404a:	f041 0110 	orr.w	r1, r1, #16
 800404e:	9108      	str	r1, [sp, #32]
 8004050:	9a08      	ldr	r2, [sp, #32]
 8004052:	9315      	str	r3, [sp, #84]	; 0x54
 8004054:	f012 0110 	ands.w	r1, r2, #16
 8004058:	f000 8090 	beq.w	800417c <_svfprintf_r+0x524>
 800405c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800405e:	6803      	ldr	r3, [r0, #0]
 8004060:	2200      	movs	r2, #0
 8004062:	1a99      	subs	r1, r3, r2
 8004064:	bf18      	it	ne
 8004066:	2101      	movne	r1, #1
 8004068:	3004      	adds	r0, #4
 800406a:	900e      	str	r0, [sp, #56]	; 0x38
 800406c:	2000      	movs	r0, #0
 800406e:	f88d 010f 	strb.w	r0, [sp, #271]	; 0x10f
 8004072:	e727      	b.n	8003ec4 <_svfprintf_r+0x26c>
 8004074:	9908      	ldr	r1, [sp, #32]
 8004076:	9009      	str	r0, [sp, #36]	; 0x24
 8004078:	f041 0110 	orr.w	r1, r1, #16
 800407c:	9108      	str	r1, [sp, #32]
 800407e:	9a08      	ldr	r2, [sp, #32]
 8004080:	9315      	str	r3, [sp, #84]	; 0x54
 8004082:	06d0      	lsls	r0, r2, #27
 8004084:	f140 80b9 	bpl.w	80041fa <_svfprintf_r+0x5a2>
 8004088:	980e      	ldr	r0, [sp, #56]	; 0x38
 800408a:	6803      	ldr	r3, [r0, #0]
 800408c:	2201      	movs	r2, #1
 800408e:	1c19      	adds	r1, r3, #0
 8004090:	bf18      	it	ne
 8004092:	2101      	movne	r1, #1
 8004094:	3004      	adds	r0, #4
 8004096:	900e      	str	r0, [sp, #56]	; 0x38
 8004098:	e7e8      	b.n	800406c <_svfprintf_r+0x414>
 800409a:	4a83      	ldr	r2, [pc, #524]	; (80042a8 <_svfprintf_r+0x650>)
 800409c:	9315      	str	r3, [sp, #84]	; 0x54
 800409e:	9b08      	ldr	r3, [sp, #32]
 80040a0:	921c      	str	r2, [sp, #112]	; 0x70
 80040a2:	06da      	lsls	r2, r3, #27
 80040a4:	9009      	str	r0, [sp, #36]	; 0x24
 80040a6:	f100 810d 	bmi.w	80042c4 <_svfprintf_r+0x66c>
 80040aa:	9908      	ldr	r1, [sp, #32]
 80040ac:	064b      	lsls	r3, r1, #25
 80040ae:	f140 8109 	bpl.w	80042c4 <_svfprintf_r+0x66c>
 80040b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040b4:	8813      	ldrh	r3, [r2, #0]
 80040b6:	3204      	adds	r2, #4
 80040b8:	920e      	str	r2, [sp, #56]	; 0x38
 80040ba:	1c19      	adds	r1, r3, #0
 80040bc:	9a08      	ldr	r2, [sp, #32]
 80040be:	bf18      	it	ne
 80040c0:	2101      	movne	r1, #1
 80040c2:	420a      	tst	r2, r1
 80040c4:	f000 83ca 	beq.w	800485c <_svfprintf_r+0xc04>
 80040c8:	9908      	ldr	r1, [sp, #32]
 80040ca:	9815      	ldr	r0, [sp, #84]	; 0x54
 80040cc:	2230      	movs	r2, #48	; 0x30
 80040ce:	f041 0102 	orr.w	r1, r1, #2
 80040d2:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 80040d6:	9108      	str	r1, [sp, #32]
 80040d8:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 80040dc:	2101      	movs	r1, #1
 80040de:	2202      	movs	r2, #2
 80040e0:	e7c4      	b.n	800406c <_svfprintf_r+0x414>
 80040e2:	9b08      	ldr	r3, [sp, #32]
 80040e4:	f043 0310 	orr.w	r3, r3, #16
 80040e8:	9308      	str	r3, [sp, #32]
 80040ea:	e613      	b.n	8003d14 <_svfprintf_r+0xbc>
 80040ec:	2500      	movs	r5, #0
 80040ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040f0:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 80040f4:	9315      	str	r3, [sp, #84]	; 0x54
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040fa:	9009      	str	r0, [sp, #36]	; 0x24
 80040fc:	9211      	str	r2, [sp, #68]	; 0x44
 80040fe:	1d1f      	adds	r7, r3, #4
 8004100:	2a00      	cmp	r2, #0
 8004102:	f000 864b 	beq.w	8004d9c <_svfprintf_r+0x1144>
 8004106:	2c00      	cmp	r4, #0
 8004108:	9811      	ldr	r0, [sp, #68]	; 0x44
 800410a:	f2c0 8602 	blt.w	8004d12 <_svfprintf_r+0x10ba>
 800410e:	4629      	mov	r1, r5
 8004110:	4622      	mov	r2, r4
 8004112:	f002 fad1 	bl	80066b8 <memchr>
 8004116:	2800      	cmp	r0, #0
 8004118:	f000 866f 	beq.w	8004dfa <_svfprintf_r+0x11a2>
 800411c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800411e:	9512      	str	r5, [sp, #72]	; 0x48
 8004120:	1ac0      	subs	r0, r0, r3
 8004122:	42a0      	cmp	r0, r4
 8004124:	900d      	str	r0, [sp, #52]	; 0x34
 8004126:	bfd1      	iteee	le
 8004128:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 800412a:	f89d 110f 	ldrbgt.w	r1, [sp, #271]	; 0x10f
 800412e:	970e      	strgt	r7, [sp, #56]	; 0x38
 8004130:	ea24 70e4 	bicgt.w	r0, r4, r4, asr #31
 8004134:	bfd3      	iteet	le
 8004136:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 800413a:	900a      	strgt	r0, [sp, #40]	; 0x28
 800413c:	940d      	strgt	r4, [sp, #52]	; 0x34
 800413e:	930a      	strle	r3, [sp, #40]	; 0x28
 8004140:	bfdc      	itt	le
 8004142:	f89d 110f 	ldrble.w	r1, [sp, #271]	; 0x10f
 8004146:	970e      	strle	r7, [sp, #56]	; 0x38
 8004148:	9516      	str	r5, [sp, #88]	; 0x58
 800414a:	e6f3      	b.n	8003f34 <_svfprintf_r+0x2dc>
 800414c:	9a08      	ldr	r2, [sp, #32]
 800414e:	f042 0210 	orr.w	r2, r2, #16
 8004152:	9208      	str	r2, [sp, #32]
 8004154:	e5de      	b.n	8003d14 <_svfprintf_r+0xbc>
 8004156:	9009      	str	r0, [sp, #36]	; 0x24
 8004158:	9808      	ldr	r0, [sp, #32]
 800415a:	06c3      	lsls	r3, r0, #27
 800415c:	f140 843f 	bpl.w	80049de <_svfprintf_r+0xd86>
 8004160:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004162:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004164:	680b      	ldr	r3, [r1, #0]
 8004166:	3104      	adds	r1, #4
 8004168:	910e      	str	r1, [sp, #56]	; 0x38
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	e5a2      	b.n	8003cb4 <_svfprintf_r+0x5c>
 800416e:	9a08      	ldr	r2, [sp, #32]
 8004170:	9009      	str	r0, [sp, #36]	; 0x24
 8004172:	f012 0110 	ands.w	r1, r2, #16
 8004176:	9315      	str	r3, [sp, #84]	; 0x54
 8004178:	f47f af70 	bne.w	800405c <_svfprintf_r+0x404>
 800417c:	9b08      	ldr	r3, [sp, #32]
 800417e:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8004182:	f000 8437 	beq.w	80049f4 <_svfprintf_r+0xd9c>
 8004186:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004188:	8803      	ldrh	r3, [r0, #0]
 800418a:	460a      	mov	r2, r1
 800418c:	1c19      	adds	r1, r3, #0
 800418e:	bf18      	it	ne
 8004190:	2101      	movne	r1, #1
 8004192:	3004      	adds	r0, #4
 8004194:	900e      	str	r0, [sp, #56]	; 0x38
 8004196:	e769      	b.n	800406c <_svfprintf_r+0x414>
 8004198:	9009      	str	r0, [sp, #36]	; 0x24
 800419a:	9315      	str	r3, [sp, #84]	; 0x54
 800419c:	2b00      	cmp	r3, #0
 800419e:	f43f ae2b 	beq.w	8003df8 <_svfprintf_r+0x1a0>
 80041a2:	2101      	movs	r1, #1
 80041a4:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 80041a8:	aa2f      	add	r2, sp, #188	; 0xbc
 80041aa:	2300      	movs	r3, #0
 80041ac:	910a      	str	r1, [sp, #40]	; 0x28
 80041ae:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 80041b2:	910d      	str	r1, [sp, #52]	; 0x34
 80041b4:	9211      	str	r2, [sp, #68]	; 0x44
 80041b6:	2300      	movs	r3, #0
 80041b8:	9312      	str	r3, [sp, #72]	; 0x48
 80041ba:	9316      	str	r3, [sp, #88]	; 0x58
 80041bc:	e6be      	b.n	8003f3c <_svfprintf_r+0x2e4>
 80041be:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f47f ada6 	bne.w	8003d14 <_svfprintf_r+0xbc>
 80041c8:	f88d 710f 	strb.w	r7, [sp, #271]	; 0x10f
 80041cc:	e5a2      	b.n	8003d14 <_svfprintf_r+0xbc>
 80041ce:	9a08      	ldr	r2, [sp, #32]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	9208      	str	r2, [sp, #32]
 80041d6:	e59d      	b.n	8003d14 <_svfprintf_r+0xbc>
 80041d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041da:	990e      	ldr	r1, [sp, #56]	; 0x38
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	930b      	str	r3, [sp, #44]	; 0x2c
 80041e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80041e2:	1d0b      	adds	r3, r1, #4
 80041e4:	2a00      	cmp	r2, #0
 80041e6:	f6ff adf7 	blt.w	8003dd8 <_svfprintf_r+0x180>
 80041ea:	930e      	str	r3, [sp, #56]	; 0x38
 80041ec:	e592      	b.n	8003d14 <_svfprintf_r+0xbc>
 80041ee:	9a08      	ldr	r2, [sp, #32]
 80041f0:	9009      	str	r0, [sp, #36]	; 0x24
 80041f2:	06d0      	lsls	r0, r2, #27
 80041f4:	9315      	str	r3, [sp, #84]	; 0x54
 80041f6:	f53f af47 	bmi.w	8004088 <_svfprintf_r+0x430>
 80041fa:	9908      	ldr	r1, [sp, #32]
 80041fc:	0649      	lsls	r1, r1, #25
 80041fe:	f140 83ea 	bpl.w	80049d6 <_svfprintf_r+0xd7e>
 8004202:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004204:	8813      	ldrh	r3, [r2, #0]
 8004206:	2201      	movs	r2, #1
 8004208:	980e      	ldr	r0, [sp, #56]	; 0x38
 800420a:	1c19      	adds	r1, r3, #0
 800420c:	bf18      	it	ne
 800420e:	2101      	movne	r1, #1
 8004210:	3004      	adds	r0, #4
 8004212:	900e      	str	r0, [sp, #56]	; 0x38
 8004214:	e72a      	b.n	800406c <_svfprintf_r+0x414>
 8004216:	9009      	str	r0, [sp, #36]	; 0x24
 8004218:	9808      	ldr	r0, [sp, #32]
 800421a:	9315      	str	r3, [sp, #84]	; 0x54
 800421c:	06c3      	lsls	r3, r0, #27
 800421e:	f57f ae41 	bpl.w	8003ea4 <_svfprintf_r+0x24c>
 8004222:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004224:	680b      	ldr	r3, [r1, #0]
 8004226:	3104      	adds	r1, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	910e      	str	r1, [sp, #56]	; 0x38
 800422c:	f6bf ae46 	bge.w	8003ebc <_svfprintf_r+0x264>
 8004230:	425b      	negs	r3, r3
 8004232:	222d      	movs	r2, #45	; 0x2d
 8004234:	1c19      	adds	r1, r3, #0
 8004236:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 800423a:	bf18      	it	ne
 800423c:	2101      	movne	r1, #1
 800423e:	2201      	movs	r2, #1
 8004240:	e640      	b.n	8003ec4 <_svfprintf_r+0x26c>
 8004242:	9908      	ldr	r1, [sp, #32]
 8004244:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004248:	9108      	str	r1, [sp, #32]
 800424a:	e563      	b.n	8003d14 <_svfprintf_r+0xbc>
 800424c:	9315      	str	r3, [sp, #84]	; 0x54
 800424e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004250:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	9009      	str	r0, [sp, #36]	; 0x24
 8004256:	2200      	movs	r2, #0
 8004258:	2001      	movs	r0, #1
 800425a:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 800425e:	3104      	adds	r1, #4
 8004260:	aa2f      	add	r2, sp, #188	; 0xbc
 8004262:	900a      	str	r0, [sp, #40]	; 0x28
 8004264:	910e      	str	r1, [sp, #56]	; 0x38
 8004266:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 800426a:	900d      	str	r0, [sp, #52]	; 0x34
 800426c:	9211      	str	r2, [sp, #68]	; 0x44
 800426e:	e7a2      	b.n	80041b6 <_svfprintf_r+0x55e>
 8004270:	490e      	ldr	r1, [pc, #56]	; (80042ac <_svfprintf_r+0x654>)
 8004272:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004274:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004276:	911c      	str	r1, [sp, #112]	; 0x70
 8004278:	9908      	ldr	r1, [sp, #32]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	9009      	str	r0, [sp, #36]	; 0x24
 800427e:	3204      	adds	r2, #4
 8004280:	f041 0102 	orr.w	r1, r1, #2
 8004284:	2078      	movs	r0, #120	; 0x78
 8004286:	920e      	str	r2, [sp, #56]	; 0x38
 8004288:	9108      	str	r1, [sp, #32]
 800428a:	2230      	movs	r2, #48	; 0x30
 800428c:	1c19      	adds	r1, r3, #0
 800428e:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8004292:	bf18      	it	ne
 8004294:	2101      	movne	r1, #1
 8004296:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 800429a:	2202      	movs	r2, #2
 800429c:	9015      	str	r0, [sp, #84]	; 0x54
 800429e:	e6e5      	b.n	800406c <_svfprintf_r+0x414>
 80042a0:	0800920c 	.word	0x0800920c
 80042a4:	08009208 	.word	0x08009208
 80042a8:	08009218 	.word	0x08009218
 80042ac:	0800922c 	.word	0x0800922c
 80042b0:	08008f70 	.word	0x08008f70
 80042b4:	9315      	str	r3, [sp, #84]	; 0x54
 80042b6:	9b08      	ldr	r3, [sp, #32]
 80042b8:	49a4      	ldr	r1, [pc, #656]	; (800454c <_svfprintf_r+0x8f4>)
 80042ba:	9009      	str	r0, [sp, #36]	; 0x24
 80042bc:	06da      	lsls	r2, r3, #27
 80042be:	911c      	str	r1, [sp, #112]	; 0x70
 80042c0:	f57f aef3 	bpl.w	80040aa <_svfprintf_r+0x452>
 80042c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80042c6:	6803      	ldr	r3, [r0, #0]
 80042c8:	3004      	adds	r0, #4
 80042ca:	900e      	str	r0, [sp, #56]	; 0x38
 80042cc:	e6f5      	b.n	80040ba <_svfprintf_r+0x462>
 80042ce:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042d0:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 80042d4:	b16b      	cbz	r3, 80042f2 <_svfprintf_r+0x69a>
 80042d6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80042d8:	f20d 130f 	addw	r3, sp, #271	; 0x10f
 80042dc:	3401      	adds	r4, #1
 80042de:	6033      	str	r3, [r6, #0]
 80042e0:	3501      	adds	r5, #1
 80042e2:	2301      	movs	r3, #1
 80042e4:	2c07      	cmp	r4, #7
 80042e6:	6073      	str	r3, [r6, #4]
 80042e8:	953b      	str	r5, [sp, #236]	; 0xec
 80042ea:	943a      	str	r4, [sp, #232]	; 0xe8
 80042ec:	f300 81f5 	bgt.w	80046da <_svfprintf_r+0xa82>
 80042f0:	3608      	adds	r6, #8
 80042f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80042f4:	b163      	cbz	r3, 8004310 <_svfprintf_r+0x6b8>
 80042f6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80042f8:	ab43      	add	r3, sp, #268	; 0x10c
 80042fa:	3401      	adds	r4, #1
 80042fc:	6033      	str	r3, [r6, #0]
 80042fe:	3502      	adds	r5, #2
 8004300:	2302      	movs	r3, #2
 8004302:	2c07      	cmp	r4, #7
 8004304:	6073      	str	r3, [r6, #4]
 8004306:	953b      	str	r5, [sp, #236]	; 0xec
 8004308:	943a      	str	r4, [sp, #232]	; 0xe8
 800430a:	f300 81db 	bgt.w	80046c4 <_svfprintf_r+0xa6c>
 800430e:	3608      	adds	r6, #8
 8004310:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004312:	2b80      	cmp	r3, #128	; 0x80
 8004314:	f000 8122 	beq.w	800455c <_svfprintf_r+0x904>
 8004318:	9812      	ldr	r0, [sp, #72]	; 0x48
 800431a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800431c:	1ac7      	subs	r7, r0, r3
 800431e:	2f00      	cmp	r7, #0
 8004320:	dd32      	ble.n	8004388 <_svfprintf_r+0x730>
 8004322:	2f10      	cmp	r7, #16
 8004324:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004326:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8004554 <_svfprintf_r+0x8fc>
 800432a:	dd22      	ble.n	8004372 <_svfprintf_r+0x71a>
 800432c:	4623      	mov	r3, r4
 800432e:	f04f 0910 	mov.w	r9, #16
 8004332:	4644      	mov	r4, r8
 8004334:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004338:	e003      	b.n	8004342 <_svfprintf_r+0x6ea>
 800433a:	3f10      	subs	r7, #16
 800433c:	3608      	adds	r6, #8
 800433e:	2f10      	cmp	r7, #16
 8004340:	dd15      	ble.n	800436e <_svfprintf_r+0x716>
 8004342:	3301      	adds	r3, #1
 8004344:	3510      	adds	r5, #16
 8004346:	2b07      	cmp	r3, #7
 8004348:	e886 0210 	stmia.w	r6, {r4, r9}
 800434c:	953b      	str	r5, [sp, #236]	; 0xec
 800434e:	933a      	str	r3, [sp, #232]	; 0xe8
 8004350:	ddf3      	ble.n	800433a <_svfprintf_r+0x6e2>
 8004352:	4640      	mov	r0, r8
 8004354:	4651      	mov	r1, sl
 8004356:	465a      	mov	r2, fp
 8004358:	f002 fff0 	bl	800733c <__ssprint_r>
 800435c:	2800      	cmp	r0, #0
 800435e:	f47f ad52 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004362:	3f10      	subs	r7, #16
 8004364:	2f10      	cmp	r7, #16
 8004366:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004368:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800436a:	ae1f      	add	r6, sp, #124	; 0x7c
 800436c:	dce9      	bgt.n	8004342 <_svfprintf_r+0x6ea>
 800436e:	46a0      	mov	r8, r4
 8004370:	461c      	mov	r4, r3
 8004372:	3401      	adds	r4, #1
 8004374:	19ed      	adds	r5, r5, r7
 8004376:	2c07      	cmp	r4, #7
 8004378:	f8c6 8000 	str.w	r8, [r6]
 800437c:	6077      	str	r7, [r6, #4]
 800437e:	953b      	str	r5, [sp, #236]	; 0xec
 8004380:	943a      	str	r4, [sp, #232]	; 0xe8
 8004382:	f300 8194 	bgt.w	80046ae <_svfprintf_r+0xa56>
 8004386:	3608      	adds	r6, #8
 8004388:	9908      	ldr	r1, [sp, #32]
 800438a:	05ca      	lsls	r2, r1, #23
 800438c:	d472      	bmi.n	8004474 <_svfprintf_r+0x81c>
 800438e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004390:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004392:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004394:	6073      	str	r3, [r6, #4]
 8004396:	3401      	adds	r4, #1
 8004398:	18ed      	adds	r5, r5, r3
 800439a:	2c07      	cmp	r4, #7
 800439c:	6032      	str	r2, [r6, #0]
 800439e:	953b      	str	r5, [sp, #236]	; 0xec
 80043a0:	943a      	str	r4, [sp, #232]	; 0xe8
 80043a2:	dc5c      	bgt.n	800445e <_svfprintf_r+0x806>
 80043a4:	3608      	adds	r6, #8
 80043a6:	9908      	ldr	r1, [sp, #32]
 80043a8:	074b      	lsls	r3, r1, #29
 80043aa:	d53e      	bpl.n	800442a <_svfprintf_r+0x7d2>
 80043ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043b0:	1ad7      	subs	r7, r2, r3
 80043b2:	2f00      	cmp	r7, #0
 80043b4:	dd39      	ble.n	800442a <_svfprintf_r+0x7d2>
 80043b6:	2f10      	cmp	r7, #16
 80043b8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80043ba:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8004558 <_svfprintf_r+0x900>
 80043be:	dd22      	ble.n	8004406 <_svfprintf_r+0x7ae>
 80043c0:	4623      	mov	r3, r4
 80043c2:	f04f 0910 	mov.w	r9, #16
 80043c6:	4644      	mov	r4, r8
 80043c8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80043cc:	e003      	b.n	80043d6 <_svfprintf_r+0x77e>
 80043ce:	3f10      	subs	r7, #16
 80043d0:	3608      	adds	r6, #8
 80043d2:	2f10      	cmp	r7, #16
 80043d4:	dd15      	ble.n	8004402 <_svfprintf_r+0x7aa>
 80043d6:	3301      	adds	r3, #1
 80043d8:	3510      	adds	r5, #16
 80043da:	2b07      	cmp	r3, #7
 80043dc:	e886 0210 	stmia.w	r6, {r4, r9}
 80043e0:	953b      	str	r5, [sp, #236]	; 0xec
 80043e2:	933a      	str	r3, [sp, #232]	; 0xe8
 80043e4:	ddf3      	ble.n	80043ce <_svfprintf_r+0x776>
 80043e6:	4640      	mov	r0, r8
 80043e8:	4651      	mov	r1, sl
 80043ea:	465a      	mov	r2, fp
 80043ec:	f002 ffa6 	bl	800733c <__ssprint_r>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	f47f ad08 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 80043f6:	3f10      	subs	r7, #16
 80043f8:	2f10      	cmp	r7, #16
 80043fa:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80043fc:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80043fe:	ae1f      	add	r6, sp, #124	; 0x7c
 8004400:	dce9      	bgt.n	80043d6 <_svfprintf_r+0x77e>
 8004402:	46a0      	mov	r8, r4
 8004404:	461c      	mov	r4, r3
 8004406:	3401      	adds	r4, #1
 8004408:	197d      	adds	r5, r7, r5
 800440a:	2c07      	cmp	r4, #7
 800440c:	f8c6 8000 	str.w	r8, [r6]
 8004410:	6077      	str	r7, [r6, #4]
 8004412:	953b      	str	r5, [sp, #236]	; 0xec
 8004414:	943a      	str	r4, [sp, #232]	; 0xe8
 8004416:	dd08      	ble.n	800442a <_svfprintf_r+0x7d2>
 8004418:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800441a:	4651      	mov	r1, sl
 800441c:	465a      	mov	r2, fp
 800441e:	f002 ff8d 	bl	800733c <__ssprint_r>
 8004422:	2800      	cmp	r0, #0
 8004424:	f47f acef 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004428:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800442a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800442c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800442e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004430:	428a      	cmp	r2, r1
 8004432:	bfac      	ite	ge
 8004434:	1880      	addge	r0, r0, r2
 8004436:	1840      	addlt	r0, r0, r1
 8004438:	900c      	str	r0, [sp, #48]	; 0x30
 800443a:	2d00      	cmp	r5, #0
 800443c:	f040 8129 	bne.w	8004692 <_svfprintf_r+0xa3a>
 8004440:	2300      	movs	r3, #0
 8004442:	933a      	str	r3, [sp, #232]	; 0xe8
 8004444:	ae1f      	add	r6, sp, #124	; 0x7c
 8004446:	e435      	b.n	8003cb4 <_svfprintf_r+0x5c>
 8004448:	46a0      	mov	r8, r4
 800444a:	461c      	mov	r4, r3
 800444c:	3401      	adds	r4, #1
 800444e:	19ed      	adds	r5, r5, r7
 8004450:	2c07      	cmp	r4, #7
 8004452:	f8c6 8000 	str.w	r8, [r6]
 8004456:	6077      	str	r7, [r6, #4]
 8004458:	953b      	str	r5, [sp, #236]	; 0xec
 800445a:	943a      	str	r4, [sp, #232]	; 0xe8
 800445c:	dda2      	ble.n	80043a4 <_svfprintf_r+0x74c>
 800445e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004460:	4651      	mov	r1, sl
 8004462:	465a      	mov	r2, fp
 8004464:	f002 ff6a 	bl	800733c <__ssprint_r>
 8004468:	2800      	cmp	r0, #0
 800446a:	f47f accc 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 800446e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004470:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004472:	e798      	b.n	80043a6 <_svfprintf_r+0x74e>
 8004474:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004476:	2865      	cmp	r0, #101	; 0x65
 8004478:	f340 80aa 	ble.w	80045d0 <_svfprintf_r+0x978>
 800447c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8004480:	2200      	movs	r2, #0
 8004482:	2300      	movs	r3, #0
 8004484:	f004 fb18 	bl	8008ab8 <__aeabi_dcmpeq>
 8004488:	2800      	cmp	r0, #0
 800448a:	f000 8131 	beq.w	80046f0 <_svfprintf_r+0xa98>
 800448e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004490:	4b2f      	ldr	r3, [pc, #188]	; (8004550 <_svfprintf_r+0x8f8>)
 8004492:	3401      	adds	r4, #1
 8004494:	6033      	str	r3, [r6, #0]
 8004496:	3501      	adds	r5, #1
 8004498:	2301      	movs	r3, #1
 800449a:	2c07      	cmp	r4, #7
 800449c:	6073      	str	r3, [r6, #4]
 800449e:	953b      	str	r5, [sp, #236]	; 0xec
 80044a0:	943a      	str	r4, [sp, #232]	; 0xe8
 80044a2:	f300 82b8 	bgt.w	8004a16 <_svfprintf_r+0xdbe>
 80044a6:	3608      	adds	r6, #8
 80044a8:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80044aa:	9910      	ldr	r1, [sp, #64]	; 0x40
 80044ac:	4299      	cmp	r1, r3
 80044ae:	dc03      	bgt.n	80044b8 <_svfprintf_r+0x860>
 80044b0:	9a08      	ldr	r2, [sp, #32]
 80044b2:	07d3      	lsls	r3, r2, #31
 80044b4:	f57f af77 	bpl.w	80043a6 <_svfprintf_r+0x74e>
 80044b8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80044ba:	981a      	ldr	r0, [sp, #104]	; 0x68
 80044bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80044be:	6070      	str	r0, [r6, #4]
 80044c0:	3401      	adds	r4, #1
 80044c2:	182d      	adds	r5, r5, r0
 80044c4:	2c07      	cmp	r4, #7
 80044c6:	6033      	str	r3, [r6, #0]
 80044c8:	953b      	str	r5, [sp, #236]	; 0xec
 80044ca:	943a      	str	r4, [sp, #232]	; 0xe8
 80044cc:	f300 8300 	bgt.w	8004ad0 <_svfprintf_r+0xe78>
 80044d0:	3608      	adds	r6, #8
 80044d2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80044d4:	1e4f      	subs	r7, r1, #1
 80044d6:	2f00      	cmp	r7, #0
 80044d8:	f77f af65 	ble.w	80043a6 <_svfprintf_r+0x74e>
 80044dc:	2f10      	cmp	r7, #16
 80044de:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80044e0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8004554 <_svfprintf_r+0x8fc>
 80044e4:	ddb2      	ble.n	800444c <_svfprintf_r+0x7f4>
 80044e6:	4623      	mov	r3, r4
 80044e8:	f04f 0910 	mov.w	r9, #16
 80044ec:	4644      	mov	r4, r8
 80044ee:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80044f2:	e003      	b.n	80044fc <_svfprintf_r+0x8a4>
 80044f4:	3608      	adds	r6, #8
 80044f6:	3f10      	subs	r7, #16
 80044f8:	2f10      	cmp	r7, #16
 80044fa:	dda5      	ble.n	8004448 <_svfprintf_r+0x7f0>
 80044fc:	3301      	adds	r3, #1
 80044fe:	3510      	adds	r5, #16
 8004500:	2b07      	cmp	r3, #7
 8004502:	e886 0210 	stmia.w	r6, {r4, r9}
 8004506:	953b      	str	r5, [sp, #236]	; 0xec
 8004508:	933a      	str	r3, [sp, #232]	; 0xe8
 800450a:	ddf3      	ble.n	80044f4 <_svfprintf_r+0x89c>
 800450c:	4640      	mov	r0, r8
 800450e:	4651      	mov	r1, sl
 8004510:	465a      	mov	r2, fp
 8004512:	f002 ff13 	bl	800733c <__ssprint_r>
 8004516:	2800      	cmp	r0, #0
 8004518:	f47f ac75 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 800451c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800451e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004520:	ae1f      	add	r6, sp, #124	; 0x7c
 8004522:	e7e8      	b.n	80044f6 <_svfprintf_r+0x89e>
 8004524:	2a00      	cmp	r2, #0
 8004526:	f040 80be 	bne.w	80046a6 <_svfprintf_r+0xa4e>
 800452a:	9808      	ldr	r0, [sp, #32]
 800452c:	07c1      	lsls	r1, r0, #31
 800452e:	bf5c      	itt	pl
 8004530:	920d      	strpl	r2, [sp, #52]	; 0x34
 8004532:	f8cd b044 	strpl.w	fp, [sp, #68]	; 0x44
 8004536:	f57f acf3 	bpl.w	8003f20 <_svfprintf_r+0x2c8>
 800453a:	991d      	ldr	r1, [sp, #116]	; 0x74
 800453c:	2330      	movs	r3, #48	; 0x30
 800453e:	f10d 02e3 	add.w	r2, sp, #227	; 0xe3
 8004542:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8004546:	910d      	str	r1, [sp, #52]	; 0x34
 8004548:	9211      	str	r2, [sp, #68]	; 0x44
 800454a:	e4e9      	b.n	8003f20 <_svfprintf_r+0x2c8>
 800454c:	0800922c 	.word	0x0800922c
 8004550:	08009248 	.word	0x08009248
 8004554:	08008f80 	.word	0x08008f80
 8004558:	08008f70 	.word	0x08008f70
 800455c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800455e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004560:	1a47      	subs	r7, r0, r1
 8004562:	2f00      	cmp	r7, #0
 8004564:	f77f aed8 	ble.w	8004318 <_svfprintf_r+0x6c0>
 8004568:	2f10      	cmp	r7, #16
 800456a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800456c:	f8df 86d8 	ldr.w	r8, [pc, #1752]	; 8004c48 <_svfprintf_r+0xff0>
 8004570:	dd22      	ble.n	80045b8 <_svfprintf_r+0x960>
 8004572:	4623      	mov	r3, r4
 8004574:	f04f 0910 	mov.w	r9, #16
 8004578:	4644      	mov	r4, r8
 800457a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800457e:	e003      	b.n	8004588 <_svfprintf_r+0x930>
 8004580:	3f10      	subs	r7, #16
 8004582:	3608      	adds	r6, #8
 8004584:	2f10      	cmp	r7, #16
 8004586:	dd15      	ble.n	80045b4 <_svfprintf_r+0x95c>
 8004588:	3301      	adds	r3, #1
 800458a:	3510      	adds	r5, #16
 800458c:	2b07      	cmp	r3, #7
 800458e:	e886 0210 	stmia.w	r6, {r4, r9}
 8004592:	953b      	str	r5, [sp, #236]	; 0xec
 8004594:	933a      	str	r3, [sp, #232]	; 0xe8
 8004596:	ddf3      	ble.n	8004580 <_svfprintf_r+0x928>
 8004598:	4640      	mov	r0, r8
 800459a:	4651      	mov	r1, sl
 800459c:	465a      	mov	r2, fp
 800459e:	f002 fecd 	bl	800733c <__ssprint_r>
 80045a2:	2800      	cmp	r0, #0
 80045a4:	f47f ac2f 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 80045a8:	3f10      	subs	r7, #16
 80045aa:	2f10      	cmp	r7, #16
 80045ac:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80045ae:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80045b0:	ae1f      	add	r6, sp, #124	; 0x7c
 80045b2:	dce9      	bgt.n	8004588 <_svfprintf_r+0x930>
 80045b4:	46a0      	mov	r8, r4
 80045b6:	461c      	mov	r4, r3
 80045b8:	3401      	adds	r4, #1
 80045ba:	19ed      	adds	r5, r5, r7
 80045bc:	2c07      	cmp	r4, #7
 80045be:	f8c6 8000 	str.w	r8, [r6]
 80045c2:	6077      	str	r7, [r6, #4]
 80045c4:	953b      	str	r5, [sp, #236]	; 0xec
 80045c6:	943a      	str	r4, [sp, #232]	; 0xe8
 80045c8:	f300 81df 	bgt.w	800498a <_svfprintf_r+0xd32>
 80045cc:	3608      	adds	r6, #8
 80045ce:	e6a3      	b.n	8004318 <_svfprintf_r+0x6c0>
 80045d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045d2:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80045d4:	2a01      	cmp	r2, #1
 80045d6:	f340 81a5 	ble.w	8004924 <_svfprintf_r+0xccc>
 80045da:	3401      	adds	r4, #1
 80045dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80045de:	3501      	adds	r5, #1
 80045e0:	2301      	movs	r3, #1
 80045e2:	2c07      	cmp	r4, #7
 80045e4:	6030      	str	r0, [r6, #0]
 80045e6:	6073      	str	r3, [r6, #4]
 80045e8:	953b      	str	r5, [sp, #236]	; 0xec
 80045ea:	943a      	str	r4, [sp, #232]	; 0xe8
 80045ec:	f300 81c1 	bgt.w	8004972 <_svfprintf_r+0xd1a>
 80045f0:	3608      	adds	r6, #8
 80045f2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80045f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80045f6:	6071      	str	r1, [r6, #4]
 80045f8:	3401      	adds	r4, #1
 80045fa:	186d      	adds	r5, r5, r1
 80045fc:	2c07      	cmp	r4, #7
 80045fe:	6032      	str	r2, [r6, #0]
 8004600:	953b      	str	r5, [sp, #236]	; 0xec
 8004602:	943a      	str	r4, [sp, #232]	; 0xe8
 8004604:	f300 81a9 	bgt.w	800495a <_svfprintf_r+0xd02>
 8004608:	3608      	adds	r6, #8
 800460a:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800460e:	2200      	movs	r2, #0
 8004610:	2300      	movs	r3, #0
 8004612:	f004 fa51 	bl	8008ab8 <__aeabi_dcmpeq>
 8004616:	2800      	cmp	r0, #0
 8004618:	f040 80f6 	bne.w	8004808 <_svfprintf_r+0xbb0>
 800461c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800461e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004620:	1e5a      	subs	r2, r3, #1
 8004622:	3401      	adds	r4, #1
 8004624:	1c43      	adds	r3, r0, #1
 8004626:	18ad      	adds	r5, r5, r2
 8004628:	2c07      	cmp	r4, #7
 800462a:	6033      	str	r3, [r6, #0]
 800462c:	6072      	str	r2, [r6, #4]
 800462e:	953b      	str	r5, [sp, #236]	; 0xec
 8004630:	943a      	str	r4, [sp, #232]	; 0xe8
 8004632:	dc22      	bgt.n	800467a <_svfprintf_r+0xa22>
 8004634:	3608      	adds	r6, #8
 8004636:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004638:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800463a:	3401      	adds	r4, #1
 800463c:	18ed      	adds	r5, r5, r3
 800463e:	2c07      	cmp	r4, #7
 8004640:	ab3c      	add	r3, sp, #240	; 0xf0
 8004642:	6033      	str	r3, [r6, #0]
 8004644:	6070      	str	r0, [r6, #4]
 8004646:	953b      	str	r5, [sp, #236]	; 0xec
 8004648:	943a      	str	r4, [sp, #232]	; 0xe8
 800464a:	f77f aeab 	ble.w	80043a4 <_svfprintf_r+0x74c>
 800464e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004650:	4651      	mov	r1, sl
 8004652:	465a      	mov	r2, fp
 8004654:	f002 fe72 	bl	800733c <__ssprint_r>
 8004658:	2800      	cmp	r0, #0
 800465a:	f47f abd4 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 800465e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004660:	ae1f      	add	r6, sp, #124	; 0x7c
 8004662:	e6a0      	b.n	80043a6 <_svfprintf_r+0x74e>
 8004664:	46a0      	mov	r8, r4
 8004666:	461c      	mov	r4, r3
 8004668:	3401      	adds	r4, #1
 800466a:	19ed      	adds	r5, r5, r7
 800466c:	2c07      	cmp	r4, #7
 800466e:	f8c6 8000 	str.w	r8, [r6]
 8004672:	6077      	str	r7, [r6, #4]
 8004674:	953b      	str	r5, [sp, #236]	; 0xec
 8004676:	943a      	str	r4, [sp, #232]	; 0xe8
 8004678:	dddc      	ble.n	8004634 <_svfprintf_r+0x9dc>
 800467a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800467c:	4651      	mov	r1, sl
 800467e:	465a      	mov	r2, fp
 8004680:	f002 fe5c 	bl	800733c <__ssprint_r>
 8004684:	2800      	cmp	r0, #0
 8004686:	f47f abbe 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 800468a:	ae1f      	add	r6, sp, #124	; 0x7c
 800468c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800468e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004690:	e7d1      	b.n	8004636 <_svfprintf_r+0x9de>
 8004692:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004694:	4651      	mov	r1, sl
 8004696:	465a      	mov	r2, fp
 8004698:	f002 fe50 	bl	800733c <__ssprint_r>
 800469c:	2800      	cmp	r0, #0
 800469e:	f43f aecf 	beq.w	8004440 <_svfprintf_r+0x7e8>
 80046a2:	f7ff bbb0 	b.w	8003e06 <_svfprintf_r+0x1ae>
 80046a6:	910d      	str	r1, [sp, #52]	; 0x34
 80046a8:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80046ac:	e438      	b.n	8003f20 <_svfprintf_r+0x2c8>
 80046ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80046b0:	4651      	mov	r1, sl
 80046b2:	465a      	mov	r2, fp
 80046b4:	f002 fe42 	bl	800733c <__ssprint_r>
 80046b8:	2800      	cmp	r0, #0
 80046ba:	f47f aba4 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 80046be:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80046c0:	ae1f      	add	r6, sp, #124	; 0x7c
 80046c2:	e661      	b.n	8004388 <_svfprintf_r+0x730>
 80046c4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80046c6:	4651      	mov	r1, sl
 80046c8:	465a      	mov	r2, fp
 80046ca:	f002 fe37 	bl	800733c <__ssprint_r>
 80046ce:	2800      	cmp	r0, #0
 80046d0:	f47f ab99 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 80046d4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80046d6:	ae1f      	add	r6, sp, #124	; 0x7c
 80046d8:	e61a      	b.n	8004310 <_svfprintf_r+0x6b8>
 80046da:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80046dc:	4651      	mov	r1, sl
 80046de:	465a      	mov	r2, fp
 80046e0:	f002 fe2c 	bl	800733c <__ssprint_r>
 80046e4:	2800      	cmp	r0, #0
 80046e6:	f47f ab8e 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 80046ea:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80046ec:	ae1f      	add	r6, sp, #124	; 0x7c
 80046ee:	e600      	b.n	80042f2 <_svfprintf_r+0x69a>
 80046f0:	9f40      	ldr	r7, [sp, #256]	; 0x100
 80046f2:	2f00      	cmp	r7, #0
 80046f4:	f340 819a 	ble.w	8004a2c <_svfprintf_r+0xdd4>
 80046f8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80046fa:	9816      	ldr	r0, [sp, #88]	; 0x58
 80046fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80046fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004700:	4287      	cmp	r7, r0
 8004702:	bfa8      	it	ge
 8004704:	4607      	movge	r7, r0
 8004706:	1889      	adds	r1, r1, r2
 8004708:	2f00      	cmp	r7, #0
 800470a:	910d      	str	r1, [sp, #52]	; 0x34
 800470c:	dd0b      	ble.n	8004726 <_svfprintf_r+0xace>
 800470e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004710:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004712:	6077      	str	r7, [r6, #4]
 8004714:	3401      	adds	r4, #1
 8004716:	19ed      	adds	r5, r5, r7
 8004718:	2c07      	cmp	r4, #7
 800471a:	6032      	str	r2, [r6, #0]
 800471c:	953b      	str	r5, [sp, #236]	; 0xec
 800471e:	943a      	str	r4, [sp, #232]	; 0xe8
 8004720:	f300 8304 	bgt.w	8004d2c <_svfprintf_r+0x10d4>
 8004724:	3608      	adds	r6, #8
 8004726:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004728:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800472c:	1bdf      	subs	r7, r3, r7
 800472e:	2f00      	cmp	r7, #0
 8004730:	f340 80a0 	ble.w	8004874 <_svfprintf_r+0xc1c>
 8004734:	2f10      	cmp	r7, #16
 8004736:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004738:	f8df 850c 	ldr.w	r8, [pc, #1292]	; 8004c48 <_svfprintf_r+0xff0>
 800473c:	f340 815f 	ble.w	80049fe <_svfprintf_r+0xda6>
 8004740:	4623      	mov	r3, r4
 8004742:	f04f 0910 	mov.w	r9, #16
 8004746:	4644      	mov	r4, r8
 8004748:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800474c:	e004      	b.n	8004758 <_svfprintf_r+0xb00>
 800474e:	3608      	adds	r6, #8
 8004750:	3f10      	subs	r7, #16
 8004752:	2f10      	cmp	r7, #16
 8004754:	f340 8151 	ble.w	80049fa <_svfprintf_r+0xda2>
 8004758:	3301      	adds	r3, #1
 800475a:	3510      	adds	r5, #16
 800475c:	2b07      	cmp	r3, #7
 800475e:	e886 0210 	stmia.w	r6, {r4, r9}
 8004762:	953b      	str	r5, [sp, #236]	; 0xec
 8004764:	933a      	str	r3, [sp, #232]	; 0xe8
 8004766:	ddf2      	ble.n	800474e <_svfprintf_r+0xaf6>
 8004768:	4640      	mov	r0, r8
 800476a:	4651      	mov	r1, sl
 800476c:	465a      	mov	r2, fp
 800476e:	f002 fde5 	bl	800733c <__ssprint_r>
 8004772:	2800      	cmp	r0, #0
 8004774:	f47f ab47 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004778:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800477a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800477c:	ae1f      	add	r6, sp, #124	; 0x7c
 800477e:	e7e7      	b.n	8004750 <_svfprintf_r+0xaf8>
 8004780:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8004782:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 8004786:	f003 000f 	and.w	r0, r3, #15
 800478a:	460a      	mov	r2, r1
 800478c:	5c28      	ldrb	r0, [r5, r0]
 800478e:	3901      	subs	r1, #1
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	7010      	strb	r0, [r2, #0]
 8004794:	d1f7      	bne.n	8004786 <_svfprintf_r+0xb2e>
 8004796:	ebc2 030b 	rsb	r3, r2, fp
 800479a:	9211      	str	r2, [sp, #68]	; 0x44
 800479c:	930d      	str	r3, [sp, #52]	; 0x34
 800479e:	f7ff bbbf 	b.w	8003f20 <_svfprintf_r+0x2c8>
 80047a2:	2b09      	cmp	r3, #9
 80047a4:	bf82      	ittt	hi
 80047a6:	f64c 45cd 	movwhi	r5, #52429	; 0xcccd
 80047aa:	f10d 01e3 	addhi.w	r1, sp, #227	; 0xe3
 80047ae:	f6cc 45cc 	movthi	r5, #52428	; 0xcccc
 80047b2:	d809      	bhi.n	80047c8 <_svfprintf_r+0xb70>
 80047b4:	981d      	ldr	r0, [sp, #116]	; 0x74
 80047b6:	3330      	adds	r3, #48	; 0x30
 80047b8:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 80047bc:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 80047c0:	900d      	str	r0, [sp, #52]	; 0x34
 80047c2:	9111      	str	r1, [sp, #68]	; 0x44
 80047c4:	f7ff bbac 	b.w	8003f20 <_svfprintf_r+0x2c8>
 80047c8:	fba5 0203 	umull	r0, r2, r5, r3
 80047cc:	08d2      	lsrs	r2, r2, #3
 80047ce:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 80047d2:	4608      	mov	r0, r1
 80047d4:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 80047d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80047dc:	7001      	strb	r1, [r0, #0]
 80047de:	4613      	mov	r3, r2
 80047e0:	1e41      	subs	r1, r0, #1
 80047e2:	2a00      	cmp	r2, #0
 80047e4:	d1f0      	bne.n	80047c8 <_svfprintf_r+0xb70>
 80047e6:	ebc0 030b 	rsb	r3, r0, fp
 80047ea:	9011      	str	r0, [sp, #68]	; 0x44
 80047ec:	930d      	str	r3, [sp, #52]	; 0x34
 80047ee:	f7ff bb97 	b.w	8003f20 <_svfprintf_r+0x2c8>
 80047f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80047f4:	4651      	mov	r1, sl
 80047f6:	465a      	mov	r2, fp
 80047f8:	f002 fda0 	bl	800733c <__ssprint_r>
 80047fc:	2800      	cmp	r0, #0
 80047fe:	f47f ab02 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004802:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004804:	ae1f      	add	r6, sp, #124	; 0x7c
 8004806:	e563      	b.n	80042d0 <_svfprintf_r+0x678>
 8004808:	9910      	ldr	r1, [sp, #64]	; 0x40
 800480a:	1e4f      	subs	r7, r1, #1
 800480c:	2f00      	cmp	r7, #0
 800480e:	f77f af12 	ble.w	8004636 <_svfprintf_r+0x9de>
 8004812:	2f10      	cmp	r7, #16
 8004814:	f8df 8430 	ldr.w	r8, [pc, #1072]	; 8004c48 <_svfprintf_r+0xff0>
 8004818:	f77f af26 	ble.w	8004668 <_svfprintf_r+0xa10>
 800481c:	4623      	mov	r3, r4
 800481e:	f04f 0910 	mov.w	r9, #16
 8004822:	4644      	mov	r4, r8
 8004824:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004828:	e004      	b.n	8004834 <_svfprintf_r+0xbdc>
 800482a:	3608      	adds	r6, #8
 800482c:	3f10      	subs	r7, #16
 800482e:	2f10      	cmp	r7, #16
 8004830:	f77f af18 	ble.w	8004664 <_svfprintf_r+0xa0c>
 8004834:	3301      	adds	r3, #1
 8004836:	3510      	adds	r5, #16
 8004838:	2b07      	cmp	r3, #7
 800483a:	e886 0210 	stmia.w	r6, {r4, r9}
 800483e:	953b      	str	r5, [sp, #236]	; 0xec
 8004840:	933a      	str	r3, [sp, #232]	; 0xe8
 8004842:	ddf2      	ble.n	800482a <_svfprintf_r+0xbd2>
 8004844:	4640      	mov	r0, r8
 8004846:	4651      	mov	r1, sl
 8004848:	465a      	mov	r2, fp
 800484a:	f002 fd77 	bl	800733c <__ssprint_r>
 800484e:	2800      	cmp	r0, #0
 8004850:	f47f aad9 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004854:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004856:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004858:	ae1f      	add	r6, sp, #124	; 0x7c
 800485a:	e7e7      	b.n	800482c <_svfprintf_r+0xbd4>
 800485c:	2202      	movs	r2, #2
 800485e:	e405      	b.n	800406c <_svfprintf_r+0x414>
 8004860:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004862:	4651      	mov	r1, sl
 8004864:	465a      	mov	r2, fp
 8004866:	f002 fd69 	bl	800733c <__ssprint_r>
 800486a:	2800      	cmp	r0, #0
 800486c:	f47f aacb 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004870:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004872:	ae1f      	add	r6, sp, #124	; 0x7c
 8004874:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004876:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004878:	4298      	cmp	r0, r3
 800487a:	dc45      	bgt.n	8004908 <_svfprintf_r+0xcb0>
 800487c:	9908      	ldr	r1, [sp, #32]
 800487e:	07c9      	lsls	r1, r1, #31
 8004880:	d442      	bmi.n	8004908 <_svfprintf_r+0xcb0>
 8004882:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004884:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004886:	180a      	adds	r2, r1, r0
 8004888:	990d      	ldr	r1, [sp, #52]	; 0x34
 800488a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800488c:	1a8f      	subs	r7, r1, r2
 800488e:	1ac3      	subs	r3, r0, r3
 8004890:	42bb      	cmp	r3, r7
 8004892:	bfb8      	it	lt
 8004894:	461f      	movlt	r7, r3
 8004896:	2f00      	cmp	r7, #0
 8004898:	dd0a      	ble.n	80048b0 <_svfprintf_r+0xc58>
 800489a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800489c:	6032      	str	r2, [r6, #0]
 800489e:	3401      	adds	r4, #1
 80048a0:	19ed      	adds	r5, r5, r7
 80048a2:	2c07      	cmp	r4, #7
 80048a4:	6077      	str	r7, [r6, #4]
 80048a6:	953b      	str	r5, [sp, #236]	; 0xec
 80048a8:	943a      	str	r4, [sp, #232]	; 0xe8
 80048aa:	f300 8256 	bgt.w	8004d5a <_svfprintf_r+0x1102>
 80048ae:	3608      	adds	r6, #8
 80048b0:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 80048b4:	1bdf      	subs	r7, r3, r7
 80048b6:	2f00      	cmp	r7, #0
 80048b8:	f77f ad75 	ble.w	80043a6 <_svfprintf_r+0x74e>
 80048bc:	2f10      	cmp	r7, #16
 80048be:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80048c0:	f8df 8384 	ldr.w	r8, [pc, #900]	; 8004c48 <_svfprintf_r+0xff0>
 80048c4:	f77f adc2 	ble.w	800444c <_svfprintf_r+0x7f4>
 80048c8:	4623      	mov	r3, r4
 80048ca:	f04f 0910 	mov.w	r9, #16
 80048ce:	4644      	mov	r4, r8
 80048d0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80048d4:	e004      	b.n	80048e0 <_svfprintf_r+0xc88>
 80048d6:	3608      	adds	r6, #8
 80048d8:	3f10      	subs	r7, #16
 80048da:	2f10      	cmp	r7, #16
 80048dc:	f77f adb4 	ble.w	8004448 <_svfprintf_r+0x7f0>
 80048e0:	3301      	adds	r3, #1
 80048e2:	3510      	adds	r5, #16
 80048e4:	2b07      	cmp	r3, #7
 80048e6:	e886 0210 	stmia.w	r6, {r4, r9}
 80048ea:	953b      	str	r5, [sp, #236]	; 0xec
 80048ec:	933a      	str	r3, [sp, #232]	; 0xe8
 80048ee:	ddf2      	ble.n	80048d6 <_svfprintf_r+0xc7e>
 80048f0:	4640      	mov	r0, r8
 80048f2:	4651      	mov	r1, sl
 80048f4:	465a      	mov	r2, fp
 80048f6:	f002 fd21 	bl	800733c <__ssprint_r>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	f47f aa83 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004900:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004902:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004904:	ae1f      	add	r6, sp, #124	; 0x7c
 8004906:	e7e7      	b.n	80048d8 <_svfprintf_r+0xc80>
 8004908:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800490a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800490c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800490e:	6070      	str	r0, [r6, #4]
 8004910:	3401      	adds	r4, #1
 8004912:	182d      	adds	r5, r5, r0
 8004914:	2c07      	cmp	r4, #7
 8004916:	6032      	str	r2, [r6, #0]
 8004918:	953b      	str	r5, [sp, #236]	; 0xec
 800491a:	943a      	str	r4, [sp, #232]	; 0xe8
 800491c:	f300 8211 	bgt.w	8004d42 <_svfprintf_r+0x10ea>
 8004920:	3608      	adds	r6, #8
 8004922:	e7ae      	b.n	8004882 <_svfprintf_r+0xc2a>
 8004924:	9b08      	ldr	r3, [sp, #32]
 8004926:	07da      	lsls	r2, r3, #31
 8004928:	f53f ae57 	bmi.w	80045da <_svfprintf_r+0x982>
 800492c:	3401      	adds	r4, #1
 800492e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004930:	3501      	adds	r5, #1
 8004932:	2301      	movs	r3, #1
 8004934:	2c07      	cmp	r4, #7
 8004936:	6032      	str	r2, [r6, #0]
 8004938:	6073      	str	r3, [r6, #4]
 800493a:	953b      	str	r5, [sp, #236]	; 0xec
 800493c:	943a      	str	r4, [sp, #232]	; 0xe8
 800493e:	f77f ae79 	ble.w	8004634 <_svfprintf_r+0x9dc>
 8004942:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004944:	4651      	mov	r1, sl
 8004946:	465a      	mov	r2, fp
 8004948:	f002 fcf8 	bl	800733c <__ssprint_r>
 800494c:	2800      	cmp	r0, #0
 800494e:	f47f aa5a 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004952:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004954:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004956:	ae1f      	add	r6, sp, #124	; 0x7c
 8004958:	e66d      	b.n	8004636 <_svfprintf_r+0x9de>
 800495a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800495c:	4651      	mov	r1, sl
 800495e:	465a      	mov	r2, fp
 8004960:	f002 fcec 	bl	800733c <__ssprint_r>
 8004964:	2800      	cmp	r0, #0
 8004966:	f47f aa4e 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 800496a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800496c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800496e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004970:	e64b      	b.n	800460a <_svfprintf_r+0x9b2>
 8004972:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004974:	4651      	mov	r1, sl
 8004976:	465a      	mov	r2, fp
 8004978:	f002 fce0 	bl	800733c <__ssprint_r>
 800497c:	2800      	cmp	r0, #0
 800497e:	f47f aa42 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004982:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004984:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004986:	ae1f      	add	r6, sp, #124	; 0x7c
 8004988:	e633      	b.n	80045f2 <_svfprintf_r+0x99a>
 800498a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800498c:	4651      	mov	r1, sl
 800498e:	465a      	mov	r2, fp
 8004990:	f002 fcd4 	bl	800733c <__ssprint_r>
 8004994:	2800      	cmp	r0, #0
 8004996:	f47f aa36 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 800499a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800499c:	ae1f      	add	r6, sp, #124	; 0x7c
 800499e:	e4bb      	b.n	8004318 <_svfprintf_r+0x6c0>
 80049a0:	f002 fb64 	bl	800706c <__fpclassifyd>
 80049a4:	2800      	cmp	r0, #0
 80049a6:	f040 809e 	bne.w	8004ae6 <_svfprintf_r+0xe8e>
 80049aa:	2203      	movs	r2, #3
 80049ac:	9012      	str	r0, [sp, #72]	; 0x48
 80049ae:	4ba3      	ldr	r3, [pc, #652]	; (8004c3c <_svfprintf_r+0xfe4>)
 80049b0:	920a      	str	r2, [sp, #40]	; 0x28
 80049b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80049b4:	4aa2      	ldr	r2, [pc, #648]	; (8004c40 <_svfprintf_r+0xfe8>)
 80049b6:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80049ba:	2847      	cmp	r0, #71	; 0x47
 80049bc:	bfd8      	it	le
 80049be:	461a      	movle	r2, r3
 80049c0:	9211      	str	r2, [sp, #68]	; 0x44
 80049c2:	2303      	movs	r3, #3
 80049c4:	9a08      	ldr	r2, [sp, #32]
 80049c6:	930d      	str	r3, [sp, #52]	; 0x34
 80049c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049ce:	9208      	str	r2, [sp, #32]
 80049d0:	9316      	str	r3, [sp, #88]	; 0x58
 80049d2:	f7ff baaf 	b.w	8003f34 <_svfprintf_r+0x2dc>
 80049d6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80049d8:	2201      	movs	r2, #1
 80049da:	680b      	ldr	r3, [r1, #0]
 80049dc:	e414      	b.n	8004208 <_svfprintf_r+0x5b0>
 80049de:	9b08      	ldr	r3, [sp, #32]
 80049e0:	065f      	lsls	r7, r3, #25
 80049e2:	d56d      	bpl.n	8004ac0 <_svfprintf_r+0xe68>
 80049e4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80049e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80049e8:	6803      	ldr	r3, [r0, #0]
 80049ea:	3004      	adds	r0, #4
 80049ec:	900e      	str	r0, [sp, #56]	; 0x38
 80049ee:	8019      	strh	r1, [r3, #0]
 80049f0:	f7ff b960 	b.w	8003cb4 <_svfprintf_r+0x5c>
 80049f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80049f6:	680b      	ldr	r3, [r1, #0]
 80049f8:	e406      	b.n	8004208 <_svfprintf_r+0x5b0>
 80049fa:	46a0      	mov	r8, r4
 80049fc:	461c      	mov	r4, r3
 80049fe:	3401      	adds	r4, #1
 8004a00:	19ed      	adds	r5, r5, r7
 8004a02:	2c07      	cmp	r4, #7
 8004a04:	f8c6 8000 	str.w	r8, [r6]
 8004a08:	6077      	str	r7, [r6, #4]
 8004a0a:	953b      	str	r5, [sp, #236]	; 0xec
 8004a0c:	943a      	str	r4, [sp, #232]	; 0xe8
 8004a0e:	f73f af27 	bgt.w	8004860 <_svfprintf_r+0xc08>
 8004a12:	3608      	adds	r6, #8
 8004a14:	e72e      	b.n	8004874 <_svfprintf_r+0xc1c>
 8004a16:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004a18:	4651      	mov	r1, sl
 8004a1a:	465a      	mov	r2, fp
 8004a1c:	f002 fc8e 	bl	800733c <__ssprint_r>
 8004a20:	2800      	cmp	r0, #0
 8004a22:	f47f a9f0 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004a26:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004a28:	ae1f      	add	r6, sp, #124	; 0x7c
 8004a2a:	e53d      	b.n	80044a8 <_svfprintf_r+0x850>
 8004a2c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004a2e:	4b85      	ldr	r3, [pc, #532]	; (8004c44 <_svfprintf_r+0xfec>)
 8004a30:	3401      	adds	r4, #1
 8004a32:	6033      	str	r3, [r6, #0]
 8004a34:	3501      	adds	r5, #1
 8004a36:	2301      	movs	r3, #1
 8004a38:	2c07      	cmp	r4, #7
 8004a3a:	6073      	str	r3, [r6, #4]
 8004a3c:	953b      	str	r5, [sp, #236]	; 0xec
 8004a3e:	943a      	str	r4, [sp, #232]	; 0xe8
 8004a40:	f300 8139 	bgt.w	8004cb6 <_svfprintf_r+0x105e>
 8004a44:	3608      	adds	r6, #8
 8004a46:	b92f      	cbnz	r7, 8004a54 <_svfprintf_r+0xdfc>
 8004a48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004a4a:	b91a      	cbnz	r2, 8004a54 <_svfprintf_r+0xdfc>
 8004a4c:	9b08      	ldr	r3, [sp, #32]
 8004a4e:	07d8      	lsls	r0, r3, #31
 8004a50:	f57f aca9 	bpl.w	80043a6 <_svfprintf_r+0x74e>
 8004a54:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004a56:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004a58:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004a5a:	6071      	str	r1, [r6, #4]
 8004a5c:	3401      	adds	r4, #1
 8004a5e:	186d      	adds	r5, r5, r1
 8004a60:	2c07      	cmp	r4, #7
 8004a62:	6030      	str	r0, [r6, #0]
 8004a64:	953b      	str	r5, [sp, #236]	; 0xec
 8004a66:	943a      	str	r4, [sp, #232]	; 0xe8
 8004a68:	f300 81d2 	bgt.w	8004e10 <_svfprintf_r+0x11b8>
 8004a6c:	3608      	adds	r6, #8
 8004a6e:	427f      	negs	r7, r7
 8004a70:	2f00      	cmp	r7, #0
 8004a72:	f340 8141 	ble.w	8004cf8 <_svfprintf_r+0x10a0>
 8004a76:	2f10      	cmp	r7, #16
 8004a78:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8004c48 <_svfprintf_r+0xff0>
 8004a7c:	f340 8183 	ble.w	8004d86 <_svfprintf_r+0x112e>
 8004a80:	4623      	mov	r3, r4
 8004a82:	f04f 0910 	mov.w	r9, #16
 8004a86:	4644      	mov	r4, r8
 8004a88:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004a8c:	e004      	b.n	8004a98 <_svfprintf_r+0xe40>
 8004a8e:	3608      	adds	r6, #8
 8004a90:	3f10      	subs	r7, #16
 8004a92:	2f10      	cmp	r7, #16
 8004a94:	f340 8175 	ble.w	8004d82 <_svfprintf_r+0x112a>
 8004a98:	3301      	adds	r3, #1
 8004a9a:	3510      	adds	r5, #16
 8004a9c:	2b07      	cmp	r3, #7
 8004a9e:	e886 0210 	stmia.w	r6, {r4, r9}
 8004aa2:	953b      	str	r5, [sp, #236]	; 0xec
 8004aa4:	933a      	str	r3, [sp, #232]	; 0xe8
 8004aa6:	ddf2      	ble.n	8004a8e <_svfprintf_r+0xe36>
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	4651      	mov	r1, sl
 8004aac:	465a      	mov	r2, fp
 8004aae:	f002 fc45 	bl	800733c <__ssprint_r>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	f47f a9a7 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004ab8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004aba:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004abc:	ae1f      	add	r6, sp, #124	; 0x7c
 8004abe:	e7e7      	b.n	8004a90 <_svfprintf_r+0xe38>
 8004ac0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ac2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004ac4:	6813      	ldr	r3, [r2, #0]
 8004ac6:	3204      	adds	r2, #4
 8004ac8:	920e      	str	r2, [sp, #56]	; 0x38
 8004aca:	6018      	str	r0, [r3, #0]
 8004acc:	f7ff b8f2 	b.w	8003cb4 <_svfprintf_r+0x5c>
 8004ad0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004ad2:	4651      	mov	r1, sl
 8004ad4:	465a      	mov	r2, fp
 8004ad6:	f002 fc31 	bl	800733c <__ssprint_r>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	f47f a993 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004ae0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004ae2:	ae1f      	add	r6, sp, #124	; 0x7c
 8004ae4:	e4f5      	b.n	80044d2 <_svfprintf_r+0x87a>
 8004ae6:	1c60      	adds	r0, r4, #1
 8004ae8:	f000 80f1 	beq.w	8004cce <_svfprintf_r+0x1076>
 8004aec:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004aee:	2967      	cmp	r1, #103	; 0x67
 8004af0:	bf18      	it	ne
 8004af2:	2947      	cmpne	r1, #71	; 0x47
 8004af4:	bf14      	ite	ne
 8004af6:	2300      	movne	r3, #0
 8004af8:	2301      	moveq	r3, #1
 8004afa:	bf18      	it	ne
 8004afc:	930a      	strne	r3, [sp, #40]	; 0x28
 8004afe:	d104      	bne.n	8004b0a <_svfprintf_r+0xeb2>
 8004b00:	2c00      	cmp	r4, #0
 8004b02:	f000 81ad 	beq.w	8004e60 <_svfprintf_r+0x1208>
 8004b06:	2201      	movs	r2, #1
 8004b08:	920a      	str	r2, [sp, #40]	; 0x28
 8004b0a:	9808      	ldr	r0, [sp, #32]
 8004b0c:	2d00      	cmp	r5, #0
 8004b0e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8004b12:	9008      	str	r0, [sp, #32]
 8004b14:	f2c0 8189 	blt.w	8004e2a <_svfprintf_r+0x11d2>
 8004b18:	2200      	movs	r2, #0
 8004b1a:	9212      	str	r2, [sp, #72]	; 0x48
 8004b1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b1e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004b20:	f1a3 0166 	sub.w	r1, r3, #102	; 0x66
 8004b24:	424b      	negs	r3, r1
 8004b26:	eb43 0301 	adc.w	r3, r3, r1
 8004b2a:	469c      	mov	ip, r3
 8004b2c:	2846      	cmp	r0, #70	; 0x46
 8004b2e:	bf08      	it	eq
 8004b30:	f04c 0c01 	orreq.w	ip, ip, #1
 8004b34:	930d      	str	r3, [sp, #52]	; 0x34
 8004b36:	46a1      	mov	r9, r4
 8004b38:	2103      	movs	r1, #3
 8004b3a:	f1bc 0f00 	cmp.w	ip, #0
 8004b3e:	d107      	bne.n	8004b50 <_svfprintf_r+0xef8>
 8004b40:	2865      	cmp	r0, #101	; 0x65
 8004b42:	bf18      	it	ne
 8004b44:	2845      	cmpne	r0, #69	; 0x45
 8004b46:	bf0c      	ite	eq
 8004b48:	f104 0901 	addeq.w	r9, r4, #1
 8004b4c:	46a1      	movne	r9, r4
 8004b4e:	2102      	movs	r1, #2
 8004b50:	e88d 0202 	stmia.w	sp, {r1, r9}
 8004b54:	a940      	add	r1, sp, #256	; 0x100
 8004b56:	9102      	str	r1, [sp, #8]
 8004b58:	a941      	add	r1, sp, #260	; 0x104
 8004b5a:	9103      	str	r1, [sp, #12]
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	a942      	add	r1, sp, #264	; 0x108
 8004b60:	462b      	mov	r3, r5
 8004b62:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004b64:	9104      	str	r1, [sp, #16]
 8004b66:	f8cd c018 	str.w	ip, [sp, #24]
 8004b6a:	f000 fa6d 	bl	8005048 <_dtoa_r>
 8004b6e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004b70:	9011      	str	r0, [sp, #68]	; 0x44
 8004b72:	2947      	cmp	r1, #71	; 0x47
 8004b74:	bf18      	it	ne
 8004b76:	2967      	cmpne	r1, #103	; 0x67
 8004b78:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004b7c:	d104      	bne.n	8004b88 <_svfprintf_r+0xf30>
 8004b7e:	9a08      	ldr	r2, [sp, #32]
 8004b80:	07d2      	lsls	r2, r2, #31
 8004b82:	bf58      	it	pl
 8004b84:	9f42      	ldrpl	r7, [sp, #264]	; 0x108
 8004b86:	d515      	bpl.n	8004bb4 <_svfprintf_r+0xf5c>
 8004b88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b8a:	eb03 0709 	add.w	r7, r3, r9
 8004b8e:	f1bc 0f00 	cmp.w	ip, #0
 8004b92:	d005      	beq.n	8004ba0 <_svfprintf_r+0xf48>
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b30      	cmp	r3, #48	; 0x30
 8004b98:	f000 8165 	beq.w	8004e66 <_svfprintf_r+0x120e>
 8004b9c:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004b9e:	18ff      	adds	r7, r7, r3
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	4629      	mov	r1, r5
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f003 ff86 	bl	8008ab8 <__aeabi_dcmpeq>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	f000 8117 	beq.w	8004de0 <_svfprintf_r+0x1188>
 8004bb2:	9742      	str	r7, [sp, #264]	; 0x108
 8004bb4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004bb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004bb8:	1a3f      	subs	r7, r7, r0
 8004bba:	9710      	str	r7, [sp, #64]	; 0x40
 8004bbc:	2900      	cmp	r1, #0
 8004bbe:	f000 80f9 	beq.w	8004db4 <_svfprintf_r+0x115c>
 8004bc2:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004bc4:	1ccb      	adds	r3, r1, #3
 8004bc6:	db02      	blt.n	8004bce <_svfprintf_r+0xf76>
 8004bc8:	428c      	cmp	r4, r1
 8004bca:	f280 80fa 	bge.w	8004dc2 <_svfprintf_r+0x116a>
 8004bce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004bd0:	3a02      	subs	r2, #2
 8004bd2:	9215      	str	r2, [sp, #84]	; 0x54
 8004bd4:	3901      	subs	r1, #1
 8004bd6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004bd8:	9140      	str	r1, [sp, #256]	; 0x100
 8004bda:	2900      	cmp	r1, #0
 8004bdc:	f88d 00f0 	strb.w	r0, [sp, #240]	; 0xf0
 8004be0:	f2c0 815d 	blt.w	8004e9e <_svfprintf_r+0x1246>
 8004be4:	232b      	movs	r3, #43	; 0x2b
 8004be6:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8004bea:	2909      	cmp	r1, #9
 8004bec:	f340 8122 	ble.w	8004e34 <_svfprintf_r+0x11dc>
 8004bf0:	f10d 07ff 	add.w	r7, sp, #255	; 0xff
 8004bf4:	f246 6467 	movw	r4, #26215	; 0x6667
 8004bf8:	4638      	mov	r0, r7
 8004bfa:	f2c6 6466 	movt	r4, #26214	; 0x6666
 8004bfe:	fb84 3201 	smull	r3, r2, r4, r1
 8004c02:	17cb      	asrs	r3, r1, #31
 8004c04:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8004c08:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004c0c:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8004c10:	3230      	adds	r2, #48	; 0x30
 8004c12:	2b09      	cmp	r3, #9
 8004c14:	4605      	mov	r5, r0
 8004c16:	4619      	mov	r1, r3
 8004c18:	f800 2d01 	strb.w	r2, [r0, #-1]!
 8004c1c:	dcef      	bgt.n	8004bfe <_svfprintf_r+0xfa6>
 8004c1e:	3130      	adds	r1, #48	; 0x30
 8004c20:	1eaa      	subs	r2, r5, #2
 8004c22:	b2c9      	uxtb	r1, r1
 8004c24:	42ba      	cmp	r2, r7
 8004c26:	f805 1c02 	strb.w	r1, [r5, #-2]
 8004c2a:	bf28      	it	cs
 8004c2c:	f10d 01f2 	addcs.w	r1, sp, #242	; 0xf2
 8004c30:	d213      	bcs.n	8004c5a <_svfprintf_r+0x1002>
 8004c32:	f10d 03f2 	add.w	r3, sp, #242	; 0xf2
 8004c36:	f10d 00fe 	add.w	r0, sp, #254	; 0xfe
 8004c3a:	e009      	b.n	8004c50 <_svfprintf_r+0xff8>
 8004c3c:	08009210 	.word	0x08009210
 8004c40:	08009214 	.word	0x08009214
 8004c44:	08009248 	.word	0x08009248
 8004c48:	08008f80 	.word	0x08008f80
 8004c4c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004c50:	f803 1b01 	strb.w	r1, [r3], #1
 8004c54:	4282      	cmp	r2, r0
 8004c56:	4619      	mov	r1, r3
 8004c58:	d1f8      	bne.n	8004c4c <_svfprintf_r+0xff4>
 8004c5a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004c5c:	ab3c      	add	r3, sp, #240	; 0xf0
 8004c5e:	1acb      	subs	r3, r1, r3
 8004c60:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c62:	2801      	cmp	r0, #1
 8004c64:	4403      	add	r3, r0
 8004c66:	930d      	str	r3, [sp, #52]	; 0x34
 8004c68:	f340 8125 	ble.w	8004eb6 <_svfprintf_r+0x125e>
 8004c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c6e:	3301      	adds	r3, #1
 8004c70:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8004c74:	2100      	movs	r1, #0
 8004c76:	930d      	str	r3, [sp, #52]	; 0x34
 8004c78:	900a      	str	r0, [sp, #40]	; 0x28
 8004c7a:	9116      	str	r1, [sp, #88]	; 0x58
 8004c7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c7e:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f43f a956 	beq.w	8003f34 <_svfprintf_r+0x2dc>
 8004c88:	232d      	movs	r3, #45	; 0x2d
 8004c8a:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9312      	str	r3, [sp, #72]	; 0x48
 8004c92:	f7ff b950 	b.w	8003f36 <_svfprintf_r+0x2de>
 8004c96:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004c98:	2140      	movs	r1, #64	; 0x40
 8004c9a:	f001 fa59 	bl	8006150 <_malloc_r>
 8004c9e:	f8ca 0000 	str.w	r0, [sl]
 8004ca2:	f8ca 0010 	str.w	r0, [sl, #16]
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	f000 812b 	beq.w	8004f02 <_svfprintf_r+0x12aa>
 8004cac:	2340      	movs	r3, #64	; 0x40
 8004cae:	f8ca 3014 	str.w	r3, [sl, #20]
 8004cb2:	f7fe bfec 	b.w	8003c8e <_svfprintf_r+0x36>
 8004cb6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004cb8:	4651      	mov	r1, sl
 8004cba:	465a      	mov	r2, fp
 8004cbc:	f002 fb3e 	bl	800733c <__ssprint_r>
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	f47f a8a0 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004cc6:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8004cc8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004cca:	ae1f      	add	r6, sp, #124	; 0x7c
 8004ccc:	e6bb      	b.n	8004a46 <_svfprintf_r+0xdee>
 8004cce:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004cd0:	2847      	cmp	r0, #71	; 0x47
 8004cd2:	bf18      	it	ne
 8004cd4:	2867      	cmpne	r0, #103	; 0x67
 8004cd6:	bf14      	ite	ne
 8004cd8:	2000      	movne	r0, #0
 8004cda:	2001      	moveq	r0, #1
 8004cdc:	900a      	str	r0, [sp, #40]	; 0x28
 8004cde:	2406      	movs	r4, #6
 8004ce0:	e713      	b.n	8004b0a <_svfprintf_r+0xeb2>
 8004ce2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004ce4:	4651      	mov	r1, sl
 8004ce6:	465a      	mov	r2, fp
 8004ce8:	f002 fb28 	bl	800733c <__ssprint_r>
 8004cec:	2800      	cmp	r0, #0
 8004cee:	f47f a88a 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004cf2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004cf4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004cf6:	ae1f      	add	r6, sp, #124	; 0x7c
 8004cf8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004cfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004cfc:	6072      	str	r2, [r6, #4]
 8004cfe:	3401      	adds	r4, #1
 8004d00:	18ad      	adds	r5, r5, r2
 8004d02:	2c07      	cmp	r4, #7
 8004d04:	6033      	str	r3, [r6, #0]
 8004d06:	953b      	str	r5, [sp, #236]	; 0xec
 8004d08:	943a      	str	r4, [sp, #232]	; 0xe8
 8004d0a:	f77f ab4b 	ble.w	80043a4 <_svfprintf_r+0x74c>
 8004d0e:	f7ff bba6 	b.w	800445e <_svfprintf_r+0x806>
 8004d12:	f002 fae3 	bl	80072dc <strlen>
 8004d16:	900d      	str	r0, [sp, #52]	; 0x34
 8004d18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8004d1c:	9512      	str	r5, [sp, #72]	; 0x48
 8004d1e:	900a      	str	r0, [sp, #40]	; 0x28
 8004d20:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004d24:	970e      	str	r7, [sp, #56]	; 0x38
 8004d26:	9516      	str	r5, [sp, #88]	; 0x58
 8004d28:	f7ff b904 	b.w	8003f34 <_svfprintf_r+0x2dc>
 8004d2c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004d2e:	4651      	mov	r1, sl
 8004d30:	465a      	mov	r2, fp
 8004d32:	f002 fb03 	bl	800733c <__ssprint_r>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	f47f a865 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004d3c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004d3e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004d40:	e4f1      	b.n	8004726 <_svfprintf_r+0xace>
 8004d42:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004d44:	4651      	mov	r1, sl
 8004d46:	465a      	mov	r2, fp
 8004d48:	f002 faf8 	bl	800733c <__ssprint_r>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	f47f a85a 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004d52:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004d54:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004d56:	ae1f      	add	r6, sp, #124	; 0x7c
 8004d58:	e593      	b.n	8004882 <_svfprintf_r+0xc2a>
 8004d5a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004d5c:	4651      	mov	r1, sl
 8004d5e:	465a      	mov	r2, fp
 8004d60:	f002 faec 	bl	800733c <__ssprint_r>
 8004d64:	2800      	cmp	r0, #0
 8004d66:	f47f a84e 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004d6a:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004d6c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004d6e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004d70:	1acb      	subs	r3, r1, r3
 8004d72:	ae1f      	add	r6, sp, #124	; 0x7c
 8004d74:	e59c      	b.n	80048b0 <_svfprintf_r+0xc58>
 8004d76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d78:	ebc3 030b 	rsb	r3, r3, fp
 8004d7c:	930d      	str	r3, [sp, #52]	; 0x34
 8004d7e:	f7ff b8cf 	b.w	8003f20 <_svfprintf_r+0x2c8>
 8004d82:	46a0      	mov	r8, r4
 8004d84:	461c      	mov	r4, r3
 8004d86:	3401      	adds	r4, #1
 8004d88:	19ed      	adds	r5, r5, r7
 8004d8a:	2c07      	cmp	r4, #7
 8004d8c:	f8c6 8000 	str.w	r8, [r6]
 8004d90:	6077      	str	r7, [r6, #4]
 8004d92:	953b      	str	r5, [sp, #236]	; 0xec
 8004d94:	943a      	str	r4, [sp, #232]	; 0xe8
 8004d96:	dca4      	bgt.n	8004ce2 <_svfprintf_r+0x108a>
 8004d98:	3608      	adds	r6, #8
 8004d9a:	e7ad      	b.n	8004cf8 <_svfprintf_r+0x10a0>
 8004d9c:	2c06      	cmp	r4, #6
 8004d9e:	bf28      	it	cs
 8004da0:	2406      	movcs	r4, #6
 8004da2:	495f      	ldr	r1, [pc, #380]	; (8004f20 <_svfprintf_r+0x12c8>)
 8004da4:	940d      	str	r4, [sp, #52]	; 0x34
 8004da6:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 8004daa:	900a      	str	r0, [sp, #40]	; 0x28
 8004dac:	970e      	str	r7, [sp, #56]	; 0x38
 8004dae:	9111      	str	r1, [sp, #68]	; 0x44
 8004db0:	f7ff ba01 	b.w	80041b6 <_svfprintf_r+0x55e>
 8004db4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004db6:	2b65      	cmp	r3, #101	; 0x65
 8004db8:	dd6f      	ble.n	8004e9a <_svfprintf_r+0x1242>
 8004dba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004dbc:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004dbe:	2a00      	cmp	r2, #0
 8004dc0:	d15e      	bne.n	8004e80 <_svfprintf_r+0x1228>
 8004dc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004dc4:	428a      	cmp	r2, r1
 8004dc6:	dc3d      	bgt.n	8004e44 <_svfprintf_r+0x11ec>
 8004dc8:	9b08      	ldr	r3, [sp, #32]
 8004dca:	07da      	lsls	r2, r3, #31
 8004dcc:	d56c      	bpl.n	8004ea8 <_svfprintf_r+0x1250>
 8004dce:	1c4b      	adds	r3, r1, #1
 8004dd0:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8004dd4:	2267      	movs	r2, #103	; 0x67
 8004dd6:	930d      	str	r3, [sp, #52]	; 0x34
 8004dd8:	900a      	str	r0, [sp, #40]	; 0x28
 8004dda:	9215      	str	r2, [sp, #84]	; 0x54
 8004ddc:	9116      	str	r1, [sp, #88]	; 0x58
 8004dde:	e74d      	b.n	8004c7c <_svfprintf_r+0x1024>
 8004de0:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8004de2:	429f      	cmp	r7, r3
 8004de4:	bf98      	it	ls
 8004de6:	461f      	movls	r7, r3
 8004de8:	f67f aee4 	bls.w	8004bb4 <_svfprintf_r+0xf5c>
 8004dec:	2230      	movs	r2, #48	; 0x30
 8004dee:	f803 2b01 	strb.w	r2, [r3], #1
 8004df2:	42bb      	cmp	r3, r7
 8004df4:	9342      	str	r3, [sp, #264]	; 0x108
 8004df6:	d1fa      	bne.n	8004dee <_svfprintf_r+0x1196>
 8004df8:	e6dc      	b.n	8004bb4 <_svfprintf_r+0xf5c>
 8004dfa:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 8004dfe:	9012      	str	r0, [sp, #72]	; 0x48
 8004e00:	920a      	str	r2, [sp, #40]	; 0x28
 8004e02:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004e06:	970e      	str	r7, [sp, #56]	; 0x38
 8004e08:	940d      	str	r4, [sp, #52]	; 0x34
 8004e0a:	9016      	str	r0, [sp, #88]	; 0x58
 8004e0c:	f7ff b892 	b.w	8003f34 <_svfprintf_r+0x2dc>
 8004e10:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004e12:	4651      	mov	r1, sl
 8004e14:	465a      	mov	r2, fp
 8004e16:	f002 fa91 	bl	800733c <__ssprint_r>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	f47e aff3 	bne.w	8003e06 <_svfprintf_r+0x1ae>
 8004e20:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8004e22:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004e24:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004e26:	ae1f      	add	r6, sp, #124	; 0x7c
 8004e28:	e621      	b.n	8004a6e <_svfprintf_r+0xe16>
 8004e2a:	212d      	movs	r1, #45	; 0x2d
 8004e2c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8004e30:	9112      	str	r1, [sp, #72]	; 0x48
 8004e32:	e673      	b.n	8004b1c <_svfprintf_r+0xec4>
 8004e34:	3130      	adds	r1, #48	; 0x30
 8004e36:	2330      	movs	r3, #48	; 0x30
 8004e38:	f88d 10f3 	strb.w	r1, [sp, #243]	; 0xf3
 8004e3c:	f88d 30f2 	strb.w	r3, [sp, #242]	; 0xf2
 8004e40:	a93d      	add	r1, sp, #244	; 0xf4
 8004e42:	e70a      	b.n	8004c5a <_svfprintf_r+0x1002>
 8004e44:	2900      	cmp	r1, #0
 8004e46:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004e48:	bfd4      	ite	le
 8004e4a:	f1c1 0302 	rsble	r3, r1, #2
 8004e4e:	2301      	movgt	r3, #1
 8004e50:	181b      	adds	r3, r3, r0
 8004e52:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8004e56:	930d      	str	r3, [sp, #52]	; 0x34
 8004e58:	2367      	movs	r3, #103	; 0x67
 8004e5a:	920a      	str	r2, [sp, #40]	; 0x28
 8004e5c:	9315      	str	r3, [sp, #84]	; 0x54
 8004e5e:	e7bd      	b.n	8004ddc <_svfprintf_r+0x1184>
 8004e60:	2401      	movs	r4, #1
 8004e62:	940a      	str	r4, [sp, #40]	; 0x28
 8004e64:	e651      	b.n	8004b0a <_svfprintf_r+0xeb2>
 8004e66:	4640      	mov	r0, r8
 8004e68:	4629      	mov	r1, r5
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f003 fe23 	bl	8008ab8 <__aeabi_dcmpeq>
 8004e72:	2800      	cmp	r0, #0
 8004e74:	f47f ae92 	bne.w	8004b9c <_svfprintf_r+0xf44>
 8004e78:	f1c9 0301 	rsb	r3, r9, #1
 8004e7c:	9340      	str	r3, [sp, #256]	; 0x100
 8004e7e:	e68e      	b.n	8004b9e <_svfprintf_r+0xf46>
 8004e80:	2900      	cmp	r1, #0
 8004e82:	dd38      	ble.n	8004ef6 <_svfprintf_r+0x129e>
 8004e84:	bb74      	cbnz	r4, 8004ee4 <_svfprintf_r+0x128c>
 8004e86:	9b08      	ldr	r3, [sp, #32]
 8004e88:	07dd      	lsls	r5, r3, #31
 8004e8a:	d42b      	bmi.n	8004ee4 <_svfprintf_r+0x128c>
 8004e8c:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004e90:	2266      	movs	r2, #102	; 0x66
 8004e92:	900a      	str	r0, [sp, #40]	; 0x28
 8004e94:	910d      	str	r1, [sp, #52]	; 0x34
 8004e96:	9215      	str	r2, [sp, #84]	; 0x54
 8004e98:	e7a0      	b.n	8004ddc <_svfprintf_r+0x1184>
 8004e9a:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004e9c:	e69a      	b.n	8004bd4 <_svfprintf_r+0xf7c>
 8004e9e:	232d      	movs	r3, #45	; 0x2d
 8004ea0:	4249      	negs	r1, r1
 8004ea2:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8004ea6:	e6a0      	b.n	8004bea <_svfprintf_r+0xf92>
 8004ea8:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004eac:	2267      	movs	r2, #103	; 0x67
 8004eae:	900a      	str	r0, [sp, #40]	; 0x28
 8004eb0:	910d      	str	r1, [sp, #52]	; 0x34
 8004eb2:	9215      	str	r2, [sp, #84]	; 0x54
 8004eb4:	e792      	b.n	8004ddc <_svfprintf_r+0x1184>
 8004eb6:	9908      	ldr	r1, [sp, #32]
 8004eb8:	f011 0301 	ands.w	r3, r1, #1
 8004ebc:	f47f aed6 	bne.w	8004c6c <_svfprintf_r+0x1014>
 8004ec0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ec2:	9316      	str	r3, [sp, #88]	; 0x58
 8004ec4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004ec8:	920a      	str	r2, [sp, #40]	; 0x28
 8004eca:	e6d7      	b.n	8004c7c <_svfprintf_r+0x1024>
 8004ecc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004ece:	680c      	ldr	r4, [r1, #0]
 8004ed0:	1d0b      	adds	r3, r1, #4
 8004ed2:	2c00      	cmp	r4, #0
 8004ed4:	bfbc      	itt	lt
 8004ed6:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004ed8:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 8004edc:	f6bf a985 	bge.w	80041ea <_svfprintf_r+0x592>
 8004ee0:	f7fe bf18 	b.w	8003d14 <_svfprintf_r+0xbc>
 8004ee4:	3401      	adds	r4, #1
 8004ee6:	190c      	adds	r4, r1, r4
 8004ee8:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004eec:	2066      	movs	r0, #102	; 0x66
 8004eee:	940d      	str	r4, [sp, #52]	; 0x34
 8004ef0:	930a      	str	r3, [sp, #40]	; 0x28
 8004ef2:	9015      	str	r0, [sp, #84]	; 0x54
 8004ef4:	e772      	b.n	8004ddc <_svfprintf_r+0x1184>
 8004ef6:	b914      	cbnz	r4, 8004efe <_svfprintf_r+0x12a6>
 8004ef8:	9a08      	ldr	r2, [sp, #32]
 8004efa:	07d0      	lsls	r0, r2, #31
 8004efc:	d509      	bpl.n	8004f12 <_svfprintf_r+0x12ba>
 8004efe:	3402      	adds	r4, #2
 8004f00:	e7f2      	b.n	8004ee8 <_svfprintf_r+0x1290>
 8004f02:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004f04:	230c      	movs	r3, #12
 8004f06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f0a:	600b      	str	r3, [r1, #0]
 8004f0c:	920c      	str	r2, [sp, #48]	; 0x30
 8004f0e:	f7fe bf83 	b.w	8003e18 <_svfprintf_r+0x1c0>
 8004f12:	2001      	movs	r0, #1
 8004f14:	2266      	movs	r2, #102	; 0x66
 8004f16:	900a      	str	r0, [sp, #40]	; 0x28
 8004f18:	9215      	str	r2, [sp, #84]	; 0x54
 8004f1a:	900d      	str	r0, [sp, #52]	; 0x34
 8004f1c:	e75e      	b.n	8004ddc <_svfprintf_r+0x1184>
 8004f1e:	bf00      	nop
 8004f20:	08009240 	.word	0x08009240
 8004f24:	00000000 	.word	0x00000000

08004f28 <quorem>:
 8004f28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2c:	6903      	ldr	r3, [r0, #16]
 8004f2e:	690d      	ldr	r5, [r1, #16]
 8004f30:	429d      	cmp	r5, r3
 8004f32:	4681      	mov	r9, r0
 8004f34:	f300 8084 	bgt.w	8005040 <quorem+0x118>
 8004f38:	1ceb      	adds	r3, r5, #3
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	18cf      	adds	r7, r1, r3
 8004f3e:	18c3      	adds	r3, r0, r3
 8004f40:	687e      	ldr	r6, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	3601      	adds	r6, #1
 8004f46:	fbb3 f6f6 	udiv	r6, r3, r6
 8004f4a:	f101 0414 	add.w	r4, r1, #20
 8004f4e:	3d01      	subs	r5, #1
 8004f50:	3704      	adds	r7, #4
 8004f52:	f100 0814 	add.w	r8, r0, #20
 8004f56:	2e00      	cmp	r6, #0
 8004f58:	d03c      	beq.n	8004fd4 <quorem+0xac>
 8004f5a:	f04f 0e00 	mov.w	lr, #0
 8004f5e:	4642      	mov	r2, r8
 8004f60:	4623      	mov	r3, r4
 8004f62:	46f4      	mov	ip, lr
 8004f64:	f853 bb04 	ldr.w	fp, [r3], #4
 8004f68:	6810      	ldr	r0, [r2, #0]
 8004f6a:	fa1f fa8b 	uxth.w	sl, fp
 8004f6e:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 8004f72:	fb06 ea0a 	mla	sl, r6, sl, lr
 8004f76:	fb06 fe0b 	mul.w	lr, r6, fp
 8004f7a:	eb0e 4e1a 	add.w	lr, lr, sl, lsr #16
 8004f7e:	fa1c fc80 	uxtah	ip, ip, r0
 8004f82:	fa1f fb8e 	uxth.w	fp, lr
 8004f86:	fa1f fa8a 	uxth.w	sl, sl
 8004f8a:	ebca 0c0c 	rsb	ip, sl, ip
 8004f8e:	ebcb 4010 	rsb	r0, fp, r0, lsr #16
 8004f92:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004f96:	fa1f fc8c 	uxth.w	ip, ip
 8004f9a:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8004f9e:	429f      	cmp	r7, r3
 8004fa0:	f842 cb04 	str.w	ip, [r2], #4
 8004fa4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8004fa8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004fac:	d2da      	bcs.n	8004f64 <quorem+0x3c>
 8004fae:	1d2a      	adds	r2, r5, #4
 8004fb0:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004fb4:	6858      	ldr	r0, [r3, #4]
 8004fb6:	b968      	cbnz	r0, 8004fd4 <quorem+0xac>
 8004fb8:	4598      	cmp	r8, r3
 8004fba:	d209      	bcs.n	8004fd0 <quorem+0xa8>
 8004fbc:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004fc0:	b112      	cbz	r2, 8004fc8 <quorem+0xa0>
 8004fc2:	e005      	b.n	8004fd0 <quorem+0xa8>
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	b91a      	cbnz	r2, 8004fd0 <quorem+0xa8>
 8004fc8:	3b04      	subs	r3, #4
 8004fca:	3d01      	subs	r5, #1
 8004fcc:	4598      	cmp	r8, r3
 8004fce:	d3f9      	bcc.n	8004fc4 <quorem+0x9c>
 8004fd0:	f8c9 5010 	str.w	r5, [r9, #16]
 8004fd4:	4648      	mov	r0, r9
 8004fd6:	f001 fe4f 	bl	8006c78 <__mcmp>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	db2d      	blt.n	800503a <quorem+0x112>
 8004fde:	3601      	adds	r6, #1
 8004fe0:	4643      	mov	r3, r8
 8004fe2:	f04f 0c00 	mov.w	ip, #0
 8004fe6:	f854 2b04 	ldr.w	r2, [r4], #4
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	b291      	uxth	r1, r2
 8004fee:	fa1f fa80 	uxth.w	sl, r0
 8004ff2:	0c12      	lsrs	r2, r2, #16
 8004ff4:	ebc1 010a 	rsb	r1, r1, sl
 8004ff8:	4461      	add	r1, ip
 8004ffa:	ebc2 4210 	rsb	r2, r2, r0, lsr #16
 8004ffe:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8005002:	b289      	uxth	r1, r1
 8005004:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005008:	42a7      	cmp	r7, r4
 800500a:	f843 1b04 	str.w	r1, [r3], #4
 800500e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005012:	d2e8      	bcs.n	8004fe6 <quorem+0xbe>
 8005014:	1d2a      	adds	r2, r5, #4
 8005016:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 800501a:	6859      	ldr	r1, [r3, #4]
 800501c:	b969      	cbnz	r1, 800503a <quorem+0x112>
 800501e:	4598      	cmp	r8, r3
 8005020:	d209      	bcs.n	8005036 <quorem+0x10e>
 8005022:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8005026:	b112      	cbz	r2, 800502e <quorem+0x106>
 8005028:	e005      	b.n	8005036 <quorem+0x10e>
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	b91a      	cbnz	r2, 8005036 <quorem+0x10e>
 800502e:	3b04      	subs	r3, #4
 8005030:	3d01      	subs	r5, #1
 8005032:	4598      	cmp	r8, r3
 8005034:	d3f9      	bcc.n	800502a <quorem+0x102>
 8005036:	f8c9 5010 	str.w	r5, [r9, #16]
 800503a:	4630      	mov	r0, r6
 800503c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005040:	2000      	movs	r0, #0
 8005042:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005046:	bf00      	nop

08005048 <_dtoa_r>:
 8005048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800504c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800504e:	b09d      	sub	sp, #116	; 0x74
 8005050:	4607      	mov	r7, r0
 8005052:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005054:	4692      	mov	sl, r2
 8005056:	469b      	mov	fp, r3
 8005058:	b141      	cbz	r1, 800506c <_dtoa_r+0x24>
 800505a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800505c:	2201      	movs	r2, #1
 800505e:	409a      	lsls	r2, r3
 8005060:	604b      	str	r3, [r1, #4]
 8005062:	608a      	str	r2, [r1, #8]
 8005064:	f001 fbd4 	bl	8006810 <_Bfree>
 8005068:	2300      	movs	r3, #0
 800506a:	643b      	str	r3, [r7, #64]	; 0x40
 800506c:	f1bb 0500 	subs.w	r5, fp, #0
 8005070:	f2c0 80df 	blt.w	8005232 <_dtoa_r+0x1ea>
 8005074:	2300      	movs	r3, #0
 8005076:	6023      	str	r3, [r4, #0]
 8005078:	2300      	movs	r3, #0
 800507a:	461a      	mov	r2, r3
 800507c:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8005080:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8005084:	402b      	ands	r3, r5
 8005086:	4293      	cmp	r3, r2
 8005088:	f000 80be 	beq.w	8005208 <_dtoa_r+0x1c0>
 800508c:	4650      	mov	r0, sl
 800508e:	4659      	mov	r1, fp
 8005090:	2200      	movs	r2, #0
 8005092:	2300      	movs	r3, #0
 8005094:	46d0      	mov	r8, sl
 8005096:	46d9      	mov	r9, fp
 8005098:	2401      	movs	r4, #1
 800509a:	f003 fd0d 	bl	8008ab8 <__aeabi_dcmpeq>
 800509e:	b978      	cbnz	r0, 80050c0 <_dtoa_r+0x78>
 80050a0:	f014 0fff 	tst.w	r4, #255	; 0xff
 80050a4:	d110      	bne.n	80050c8 <_dtoa_r+0x80>
 80050a6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80050a8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80050aa:	2301      	movs	r3, #1
 80050ac:	602b      	str	r3, [r5, #0]
 80050ae:	4d78      	ldr	r5, [pc, #480]	; (8005290 <_dtoa_r+0x248>)
 80050b0:	b114      	cbz	r4, 80050b8 <_dtoa_r+0x70>
 80050b2:	4d78      	ldr	r5, [pc, #480]	; (8005294 <_dtoa_r+0x24c>)
 80050b4:	6025      	str	r5, [r4, #0]
 80050b6:	3d01      	subs	r5, #1
 80050b8:	4628      	mov	r0, r5
 80050ba:	b01d      	add	sp, #116	; 0x74
 80050bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c0:	2400      	movs	r4, #0
 80050c2:	f014 0fff 	tst.w	r4, #255	; 0xff
 80050c6:	d0ee      	beq.n	80050a6 <_dtoa_r+0x5e>
 80050c8:	a91b      	add	r1, sp, #108	; 0x6c
 80050ca:	9100      	str	r1, [sp, #0]
 80050cc:	4638      	mov	r0, r7
 80050ce:	a91a      	add	r1, sp, #104	; 0x68
 80050d0:	4642      	mov	r2, r8
 80050d2:	464b      	mov	r3, r9
 80050d4:	9101      	str	r1, [sp, #4]
 80050d6:	f001 fed1 	bl	8006e7c <__d2b>
 80050da:	f3c5 540a 	ubfx	r4, r5, #20, #11
 80050de:	900a      	str	r0, [sp, #40]	; 0x28
 80050e0:	2c00      	cmp	r4, #0
 80050e2:	f040 80b5 	bne.w	8005250 <_dtoa_r+0x208>
 80050e6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80050e8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80050ea:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80050ee:	1934      	adds	r4, r6, r4
 80050f0:	429c      	cmp	r4, r3
 80050f2:	f2c0 8281 	blt.w	80055f8 <_dtoa_r+0x5b0>
 80050f6:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 80050fa:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 80050fe:	1b1b      	subs	r3, r3, r4
 8005100:	f204 4212 	addw	r2, r4, #1042	; 0x412
 8005104:	fa15 f303 	lsls.w	r3, r5, r3
 8005108:	fa2a f002 	lsr.w	r0, sl, r2
 800510c:	4318      	orrs	r0, r3
 800510e:	f003 f9f5 	bl	80084fc <__aeabi_ui2d>
 8005112:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005116:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005118:	2501      	movs	r5, #1
 800511a:	f1a0 70f8 	sub.w	r0, r0, #32505856	; 0x1f00000
 800511e:	900d      	str	r0, [sp, #52]	; 0x34
 8005120:	3c01      	subs	r4, #1
 8005122:	9516      	str	r5, [sp, #88]	; 0x58
 8005124:	2300      	movs	r3, #0
 8005126:	2200      	movs	r2, #0
 8005128:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800512c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005130:	f003 f8a6 	bl	8008280 <__aeabi_dsub>
 8005134:	a350      	add	r3, pc, #320	; (adr r3, 8005278 <_dtoa_r+0x230>)
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	f003 fa55 	bl	80085e8 <__aeabi_dmul>
 800513e:	a350      	add	r3, pc, #320	; (adr r3, 8005280 <_dtoa_r+0x238>)
 8005140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005144:	f003 f89e 	bl	8008284 <__adddf3>
 8005148:	4680      	mov	r8, r0
 800514a:	4620      	mov	r0, r4
 800514c:	4689      	mov	r9, r1
 800514e:	f003 f9e5 	bl	800851c <__aeabi_i2d>
 8005152:	a34d      	add	r3, pc, #308	; (adr r3, 8005288 <_dtoa_r+0x240>)
 8005154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005158:	f003 fa46 	bl	80085e8 <__aeabi_dmul>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4640      	mov	r0, r8
 8005162:	4649      	mov	r1, r9
 8005164:	f003 f88e 	bl	8008284 <__adddf3>
 8005168:	4680      	mov	r8, r0
 800516a:	4689      	mov	r9, r1
 800516c:	f003 fcd6 	bl	8008b1c <__aeabi_d2iz>
 8005170:	4649      	mov	r1, r9
 8005172:	9005      	str	r0, [sp, #20]
 8005174:	2200      	movs	r2, #0
 8005176:	4640      	mov	r0, r8
 8005178:	2300      	movs	r3, #0
 800517a:	f003 fca7 	bl	8008acc <__aeabi_dcmplt>
 800517e:	b150      	cbz	r0, 8005196 <_dtoa_r+0x14e>
 8005180:	9805      	ldr	r0, [sp, #20]
 8005182:	f003 f9cb 	bl	800851c <__aeabi_i2d>
 8005186:	4642      	mov	r2, r8
 8005188:	464b      	mov	r3, r9
 800518a:	f003 fc95 	bl	8008ab8 <__aeabi_dcmpeq>
 800518e:	b910      	cbnz	r0, 8005196 <_dtoa_r+0x14e>
 8005190:	9d05      	ldr	r5, [sp, #20]
 8005192:	3d01      	subs	r5, #1
 8005194:	9505      	str	r5, [sp, #20]
 8005196:	9d05      	ldr	r5, [sp, #20]
 8005198:	2d16      	cmp	r5, #22
 800519a:	f200 815e 	bhi.w	800545a <_dtoa_r+0x412>
 800519e:	4b3e      	ldr	r3, [pc, #248]	; (8005298 <_dtoa_r+0x250>)
 80051a0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80051a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051a8:	4652      	mov	r2, sl
 80051aa:	465b      	mov	r3, fp
 80051ac:	f003 fcac 	bl	8008b08 <__aeabi_dcmpgt>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	f000 8229 	beq.w	8005608 <_dtoa_r+0x5c0>
 80051b6:	9d05      	ldr	r5, [sp, #20]
 80051b8:	3d01      	subs	r5, #1
 80051ba:	9505      	str	r5, [sp, #20]
 80051bc:	2500      	movs	r5, #0
 80051be:	9514      	str	r5, [sp, #80]	; 0x50
 80051c0:	1b34      	subs	r4, r6, r4
 80051c2:	3c01      	subs	r4, #1
 80051c4:	f100 8213 	bmi.w	80055ee <_dtoa_r+0x5a6>
 80051c8:	2500      	movs	r5, #0
 80051ca:	940b      	str	r4, [sp, #44]	; 0x2c
 80051cc:	950f      	str	r5, [sp, #60]	; 0x3c
 80051ce:	9c05      	ldr	r4, [sp, #20]
 80051d0:	2c00      	cmp	r4, #0
 80051d2:	f2c0 8203 	blt.w	80055dc <_dtoa_r+0x594>
 80051d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80051d8:	9413      	str	r4, [sp, #76]	; 0x4c
 80051da:	192d      	adds	r5, r5, r4
 80051dc:	2400      	movs	r4, #0
 80051de:	950b      	str	r5, [sp, #44]	; 0x2c
 80051e0:	9410      	str	r4, [sp, #64]	; 0x40
 80051e2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80051e4:	2d09      	cmp	r5, #9
 80051e6:	d85d      	bhi.n	80052a4 <_dtoa_r+0x25c>
 80051e8:	2401      	movs	r4, #1
 80051ea:	2d05      	cmp	r5, #5
 80051ec:	dd02      	ble.n	80051f4 <_dtoa_r+0x1ac>
 80051ee:	3d04      	subs	r5, #4
 80051f0:	9526      	str	r5, [sp, #152]	; 0x98
 80051f2:	2400      	movs	r4, #0
 80051f4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80051f6:	1eab      	subs	r3, r5, #2
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d855      	bhi.n	80052a8 <_dtoa_r+0x260>
 80051fc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005200:	036d0382 	.word	0x036d0382
 8005204:	03850246 	.word	0x03850246
 8005208:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800520a:	f242 730f 	movw	r3, #9999	; 0x270f
 800520e:	6023      	str	r3, [r4, #0]
 8005210:	f1ba 0f00 	cmp.w	sl, #0
 8005214:	d013      	beq.n	800523e <_dtoa_r+0x1f6>
 8005216:	4d21      	ldr	r5, [pc, #132]	; (800529c <_dtoa_r+0x254>)
 8005218:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800521a:	2c00      	cmp	r4, #0
 800521c:	f43f af4c 	beq.w	80050b8 <_dtoa_r+0x70>
 8005220:	78eb      	ldrb	r3, [r5, #3]
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 8117 	beq.w	8005456 <_dtoa_r+0x40e>
 8005228:	f105 0308 	add.w	r3, r5, #8
 800522c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800522e:	6023      	str	r3, [r4, #0]
 8005230:	e742      	b.n	80050b8 <_dtoa_r+0x70>
 8005232:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8005236:	2301      	movs	r3, #1
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	46ab      	mov	fp, r5
 800523c:	e71c      	b.n	8005078 <_dtoa_r+0x30>
 800523e:	4b17      	ldr	r3, [pc, #92]	; (800529c <_dtoa_r+0x254>)
 8005240:	4a17      	ldr	r2, [pc, #92]	; (80052a0 <_dtoa_r+0x258>)
 8005242:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005246:	2d00      	cmp	r5, #0
 8005248:	bf0c      	ite	eq
 800524a:	4615      	moveq	r5, r2
 800524c:	461d      	movne	r5, r3
 800524e:	e7e3      	b.n	8005218 <_dtoa_r+0x1d0>
 8005250:	4649      	mov	r1, r9
 8005252:	4640      	mov	r0, r8
 8005254:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005258:	990d      	ldr	r1, [sp, #52]	; 0x34
 800525a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800525c:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 8005260:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005264:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005268:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800526c:	2500      	movs	r5, #0
 800526e:	930d      	str	r3, [sp, #52]	; 0x34
 8005270:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005274:	9516      	str	r5, [sp, #88]	; 0x58
 8005276:	e755      	b.n	8005124 <_dtoa_r+0xdc>
 8005278:	636f4361 	.word	0x636f4361
 800527c:	3fd287a7 	.word	0x3fd287a7
 8005280:	8b60c8b3 	.word	0x8b60c8b3
 8005284:	3fc68a28 	.word	0x3fc68a28
 8005288:	509f79fb 	.word	0x509f79fb
 800528c:	3fd34413 	.word	0x3fd34413
 8005290:	08009248 	.word	0x08009248
 8005294:	08009249 	.word	0x08009249
 8005298:	08008fa8 	.word	0x08008fa8
 800529c:	08009258 	.word	0x08009258
 80052a0:	0800924c 	.word	0x0800924c
 80052a4:	2400      	movs	r4, #0
 80052a6:	9426      	str	r4, [sp, #152]	; 0x98
 80052a8:	2400      	movs	r4, #0
 80052aa:	647c      	str	r4, [r7, #68]	; 0x44
 80052ac:	4638      	mov	r0, r7
 80052ae:	4621      	mov	r1, r4
 80052b0:	f001 fa88 	bl	80067c4 <_Balloc>
 80052b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80052b8:	950e      	str	r5, [sp, #56]	; 0x38
 80052ba:	2501      	movs	r5, #1
 80052bc:	9512      	str	r5, [sp, #72]	; 0x48
 80052be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80052c2:	9009      	str	r0, [sp, #36]	; 0x24
 80052c4:	6438      	str	r0, [r7, #64]	; 0x40
 80052c6:	9515      	str	r5, [sp, #84]	; 0x54
 80052c8:	9427      	str	r4, [sp, #156]	; 0x9c
 80052ca:	9c05      	ldr	r4, [sp, #20]
 80052cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052ce:	2c0e      	cmp	r4, #14
 80052d0:	bfcc      	ite	gt
 80052d2:	2500      	movgt	r5, #0
 80052d4:	2501      	movle	r5, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	bfb8      	it	lt
 80052da:	2500      	movlt	r5, #0
 80052dc:	2d00      	cmp	r5, #0
 80052de:	f000 80c1 	beq.w	8005464 <_dtoa_r+0x41c>
 80052e2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80052e4:	4b5e      	ldr	r3, [pc, #376]	; (8005460 <_dtoa_r+0x418>)
 80052e6:	0fe5      	lsrs	r5, r4, #31
 80052e8:	9c05      	ldr	r4, [sp, #20]
 80052ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80052f4:	2c00      	cmp	r4, #0
 80052f6:	bfcc      	ite	gt
 80052f8:	2500      	movgt	r5, #0
 80052fa:	f005 0501 	andle.w	r5, r5, #1
 80052fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005302:	2d00      	cmp	r5, #0
 8005304:	f040 81a8 	bne.w	8005658 <_dtoa_r+0x610>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4650      	mov	r0, sl
 800530e:	4659      	mov	r1, fp
 8005310:	f003 fa94 	bl	800883c <__aeabi_ddiv>
 8005314:	f003 fc02 	bl	8008b1c <__aeabi_d2iz>
 8005318:	4606      	mov	r6, r0
 800531a:	f003 f8ff 	bl	800851c <__aeabi_i2d>
 800531e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005322:	f003 f961 	bl	80085e8 <__aeabi_dmul>
 8005326:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005328:	460b      	mov	r3, r1
 800532a:	4602      	mov	r2, r0
 800532c:	4659      	mov	r1, fp
 800532e:	4650      	mov	r0, sl
 8005330:	f002 ffa6 	bl	8008280 <__aeabi_dsub>
 8005334:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8005338:	f804 3b01 	strb.w	r3, [r4], #1
 800533c:	9411      	str	r4, [sp, #68]	; 0x44
 800533e:	46a0      	mov	r8, r4
 8005340:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005342:	2c01      	cmp	r4, #1
 8005344:	4682      	mov	sl, r0
 8005346:	468b      	mov	fp, r1
 8005348:	d04c      	beq.n	80053e4 <_dtoa_r+0x39c>
 800534a:	2300      	movs	r3, #0
 800534c:	2200      	movs	r2, #0
 800534e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005352:	f003 f949 	bl	80085e8 <__aeabi_dmul>
 8005356:	2200      	movs	r2, #0
 8005358:	2300      	movs	r3, #0
 800535a:	4682      	mov	sl, r0
 800535c:	468b      	mov	fp, r1
 800535e:	2401      	movs	r4, #1
 8005360:	f003 fbaa 	bl	8008ab8 <__aeabi_dcmpeq>
 8005364:	b100      	cbz	r0, 8005368 <_dtoa_r+0x320>
 8005366:	462c      	mov	r4, r5
 8005368:	f014 0fff 	tst.w	r4, #255	; 0xff
 800536c:	f000 8575 	beq.w	8005e5a <_dtoa_r+0xe12>
 8005370:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005372:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005374:	1ca5      	adds	r5, r4, #2
 8005376:	eb04 0900 	add.w	r9, r4, r0
 800537a:	e00d      	b.n	8005398 <_dtoa_r+0x350>
 800537c:	f003 f934 	bl	80085e8 <__aeabi_dmul>
 8005380:	2200      	movs	r2, #0
 8005382:	2300      	movs	r3, #0
 8005384:	4682      	mov	sl, r0
 8005386:	468b      	mov	fp, r1
 8005388:	f003 fb96 	bl	8008ab8 <__aeabi_dcmpeq>
 800538c:	b100      	cbz	r0, 8005390 <_dtoa_r+0x348>
 800538e:	2400      	movs	r4, #0
 8005390:	f014 0fff 	tst.w	r4, #255	; 0xff
 8005394:	f000 8423 	beq.w	8005bde <_dtoa_r+0xb96>
 8005398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800539c:	4650      	mov	r0, sl
 800539e:	4659      	mov	r1, fp
 80053a0:	f003 fa4c 	bl	800883c <__aeabi_ddiv>
 80053a4:	f003 fbba 	bl	8008b1c <__aeabi_d2iz>
 80053a8:	4606      	mov	r6, r0
 80053aa:	f003 f8b7 	bl	800851c <__aeabi_i2d>
 80053ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053b2:	f003 f919 	bl	80085e8 <__aeabi_dmul>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4650      	mov	r0, sl
 80053bc:	4659      	mov	r1, fp
 80053be:	f002 ff5f 	bl	8008280 <__aeabi_dsub>
 80053c2:	f106 0430 	add.w	r4, r6, #48	; 0x30
 80053c6:	2300      	movs	r3, #0
 80053c8:	2200      	movs	r2, #0
 80053ca:	454d      	cmp	r5, r9
 80053cc:	f805 4c01 	strb.w	r4, [r5, #-1]
 80053d0:	46a8      	mov	r8, r5
 80053d2:	4682      	mov	sl, r0
 80053d4:	468b      	mov	fp, r1
 80053d6:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80053da:	f04f 0401 	mov.w	r4, #1
 80053de:	f105 0501 	add.w	r5, r5, #1
 80053e2:	d1cb      	bne.n	800537c <_dtoa_r+0x334>
 80053e4:	4652      	mov	r2, sl
 80053e6:	465b      	mov	r3, fp
 80053e8:	4650      	mov	r0, sl
 80053ea:	4659      	mov	r1, fp
 80053ec:	f002 ff4a 	bl	8008284 <__adddf3>
 80053f0:	4604      	mov	r4, r0
 80053f2:	460d      	mov	r5, r1
 80053f4:	4622      	mov	r2, r4
 80053f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053fa:	462b      	mov	r3, r5
 80053fc:	f003 fb66 	bl	8008acc <__aeabi_dcmplt>
 8005400:	b958      	cbnz	r0, 800541a <_dtoa_r+0x3d2>
 8005402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005406:	4622      	mov	r2, r4
 8005408:	462b      	mov	r3, r5
 800540a:	f003 fb55 	bl	8008ab8 <__aeabi_dcmpeq>
 800540e:	2800      	cmp	r0, #0
 8005410:	f000 83e5 	beq.w	8005bde <_dtoa_r+0xb96>
 8005414:	07f3      	lsls	r3, r6, #31
 8005416:	f140 83e2 	bpl.w	8005bde <_dtoa_r+0xb96>
 800541a:	9c05      	ldr	r4, [sp, #20]
 800541c:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8005420:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005422:	9417      	str	r4, [sp, #92]	; 0x5c
 8005424:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005426:	e003      	b.n	8005430 <_dtoa_r+0x3e8>
 8005428:	f818 6c02 	ldrb.w	r6, [r8, #-2]
 800542c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005430:	2e39      	cmp	r6, #57	; 0x39
 8005432:	4643      	mov	r3, r8
 8005434:	f040 8489 	bne.w	8005d4a <_dtoa_r+0xd02>
 8005438:	4590      	cmp	r8, r2
 800543a:	d1f5      	bne.n	8005428 <_dtoa_r+0x3e0>
 800543c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800543e:	9309      	str	r3, [sp, #36]	; 0x24
 8005440:	3401      	adds	r4, #1
 8005442:	9405      	str	r4, [sp, #20]
 8005444:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005446:	2330      	movs	r3, #48	; 0x30
 8005448:	f804 3c01 	strb.w	r3, [r4, #-1]
 800544c:	2231      	movs	r2, #49	; 0x31
 800544e:	4623      	mov	r3, r4
 8005450:	f803 2c01 	strb.w	r2, [r3, #-1]
 8005454:	e0b0      	b.n	80055b8 <_dtoa_r+0x570>
 8005456:	1ceb      	adds	r3, r5, #3
 8005458:	e6e8      	b.n	800522c <_dtoa_r+0x1e4>
 800545a:	2501      	movs	r5, #1
 800545c:	9514      	str	r5, [sp, #80]	; 0x50
 800545e:	e6af      	b.n	80051c0 <_dtoa_r+0x178>
 8005460:	08008fa8 	.word	0x08008fa8
 8005464:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005466:	2c00      	cmp	r4, #0
 8005468:	f040 80d1 	bne.w	800560e <_dtoa_r+0x5c6>
 800546c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800546e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005470:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005472:	9306      	str	r3, [sp, #24]
 8005474:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005476:	2800      	cmp	r0, #0
 8005478:	bfc8      	it	gt
 800547a:	2c00      	cmpgt	r4, #0
 800547c:	dd09      	ble.n	8005492 <_dtoa_r+0x44a>
 800547e:	4603      	mov	r3, r0
 8005480:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005482:	42a3      	cmp	r3, r4
 8005484:	bfa8      	it	ge
 8005486:	4623      	movge	r3, r4
 8005488:	1ac9      	subs	r1, r1, r3
 800548a:	1ac0      	subs	r0, r0, r3
 800548c:	910f      	str	r1, [sp, #60]	; 0x3c
 800548e:	1ae4      	subs	r4, r4, r3
 8005490:	900b      	str	r0, [sp, #44]	; 0x2c
 8005492:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005494:	2a00      	cmp	r2, #0
 8005496:	dd1a      	ble.n	80054ce <_dtoa_r+0x486>
 8005498:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 841d 	beq.w	8005cda <_dtoa_r+0xc92>
 80054a0:	2d00      	cmp	r5, #0
 80054a2:	dd10      	ble.n	80054c6 <_dtoa_r+0x47e>
 80054a4:	9906      	ldr	r1, [sp, #24]
 80054a6:	462a      	mov	r2, r5
 80054a8:	4638      	mov	r0, r7
 80054aa:	f001 fb39 	bl	8006b20 <__pow5mult>
 80054ae:	9006      	str	r0, [sp, #24]
 80054b0:	9906      	ldr	r1, [sp, #24]
 80054b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054b4:	4638      	mov	r0, r7
 80054b6:	f001 fa9b 	bl	80069f0 <__multiply>
 80054ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054bc:	4606      	mov	r6, r0
 80054be:	4638      	mov	r0, r7
 80054c0:	f001 f9a6 	bl	8006810 <_Bfree>
 80054c4:	960a      	str	r6, [sp, #40]	; 0x28
 80054c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80054c8:	1b42      	subs	r2, r0, r5
 80054ca:	f040 8429 	bne.w	8005d20 <_dtoa_r+0xcd8>
 80054ce:	2101      	movs	r1, #1
 80054d0:	4638      	mov	r0, r7
 80054d2:	f001 fa83 	bl	80069dc <__i2b>
 80054d6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80054d8:	2d00      	cmp	r5, #0
 80054da:	4606      	mov	r6, r0
 80054dc:	dd05      	ble.n	80054ea <_dtoa_r+0x4a2>
 80054de:	4631      	mov	r1, r6
 80054e0:	4638      	mov	r0, r7
 80054e2:	462a      	mov	r2, r5
 80054e4:	f001 fb1c 	bl	8006b20 <__pow5mult>
 80054e8:	4606      	mov	r6, r0
 80054ea:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80054ec:	2d01      	cmp	r5, #1
 80054ee:	f340 820f 	ble.w	8005910 <_dtoa_r+0x8c8>
 80054f2:	2500      	movs	r5, #0
 80054f4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80054f6:	2301      	movs	r3, #1
 80054f8:	2800      	cmp	r0, #0
 80054fa:	f040 838c 	bne.w	8005c16 <_dtoa_r+0xbce>
 80054fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005500:	185b      	adds	r3, r3, r1
 8005502:	f013 031f 	ands.w	r3, r3, #31
 8005506:	f000 82cb 	beq.w	8005aa0 <_dtoa_r+0xa58>
 800550a:	f1c3 0220 	rsb	r2, r3, #32
 800550e:	2a04      	cmp	r2, #4
 8005510:	f340 84bf 	ble.w	8005e92 <_dtoa_r+0xe4a>
 8005514:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005516:	f1c3 031c 	rsb	r3, r3, #28
 800551a:	18d2      	adds	r2, r2, r3
 800551c:	18c9      	adds	r1, r1, r3
 800551e:	920f      	str	r2, [sp, #60]	; 0x3c
 8005520:	18e4      	adds	r4, r4, r3
 8005522:	910b      	str	r1, [sp, #44]	; 0x2c
 8005524:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005526:	2a00      	cmp	r2, #0
 8005528:	dd04      	ble.n	8005534 <_dtoa_r+0x4ec>
 800552a:	4638      	mov	r0, r7
 800552c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800552e:	f001 fb43 	bl	8006bb8 <__lshift>
 8005532:	900a      	str	r0, [sp, #40]	; 0x28
 8005534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005536:	2b00      	cmp	r3, #0
 8005538:	dd05      	ble.n	8005546 <_dtoa_r+0x4fe>
 800553a:	4631      	mov	r1, r6
 800553c:	4638      	mov	r0, r7
 800553e:	461a      	mov	r2, r3
 8005540:	f001 fb3a 	bl	8006bb8 <__lshift>
 8005544:	4606      	mov	r6, r0
 8005546:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005548:	2800      	cmp	r0, #0
 800554a:	f040 834c 	bne.w	8005be6 <_dtoa_r+0xb9e>
 800554e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005550:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005552:	2900      	cmp	r1, #0
 8005554:	bfcc      	ite	gt
 8005556:	2300      	movgt	r3, #0
 8005558:	2301      	movle	r3, #1
 800555a:	2a02      	cmp	r2, #2
 800555c:	bfd8      	it	le
 800555e:	2300      	movle	r3, #0
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 8226 	beq.w	80059b2 <_dtoa_r+0x96a>
 8005566:	2900      	cmp	r1, #0
 8005568:	f040 808a 	bne.w	8005680 <_dtoa_r+0x638>
 800556c:	4631      	mov	r1, r6
 800556e:	2205      	movs	r2, #5
 8005570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005572:	4638      	mov	r0, r7
 8005574:	f001 f956 	bl	8006824 <__multadd>
 8005578:	4606      	mov	r6, r0
 800557a:	4631      	mov	r1, r6
 800557c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800557e:	f001 fb7b 	bl	8006c78 <__mcmp>
 8005582:	2800      	cmp	r0, #0
 8005584:	dd7c      	ble.n	8005680 <_dtoa_r+0x638>
 8005586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005588:	9c05      	ldr	r4, [sp, #20]
 800558a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800558c:	2231      	movs	r2, #49	; 0x31
 800558e:	f803 2b01 	strb.w	r2, [r3], #1
 8005592:	3401      	adds	r4, #1
 8005594:	9405      	str	r4, [sp, #20]
 8005596:	9309      	str	r3, [sp, #36]	; 0x24
 8005598:	2400      	movs	r4, #0
 800559a:	4638      	mov	r0, r7
 800559c:	4631      	mov	r1, r6
 800559e:	f001 f937 	bl	8006810 <_Bfree>
 80055a2:	9806      	ldr	r0, [sp, #24]
 80055a4:	b140      	cbz	r0, 80055b8 <_dtoa_r+0x570>
 80055a6:	4284      	cmp	r4, r0
 80055a8:	bf18      	it	ne
 80055aa:	2c00      	cmpne	r4, #0
 80055ac:	f040 8273 	bne.w	8005a96 <_dtoa_r+0xa4e>
 80055b0:	4638      	mov	r0, r7
 80055b2:	9906      	ldr	r1, [sp, #24]
 80055b4:	f001 f92c 	bl	8006810 <_Bfree>
 80055b8:	4638      	mov	r0, r7
 80055ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80055bc:	f001 f928 	bl	8006810 <_Bfree>
 80055c0:	9c05      	ldr	r4, [sp, #20]
 80055c2:	1c63      	adds	r3, r4, #1
 80055c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80055c6:	2200      	movs	r2, #0
 80055c8:	7022      	strb	r2, [r4, #0]
 80055ca:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80055d0:	2c00      	cmp	r4, #0
 80055d2:	f43f ad71 	beq.w	80050b8 <_dtoa_r+0x70>
 80055d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055d8:	6020      	str	r0, [r4, #0]
 80055da:	e56d      	b.n	80050b8 <_dtoa_r+0x70>
 80055dc:	9c05      	ldr	r4, [sp, #20]
 80055de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80055e0:	1b2d      	subs	r5, r5, r4
 80055e2:	950f      	str	r5, [sp, #60]	; 0x3c
 80055e4:	4265      	negs	r5, r4
 80055e6:	2400      	movs	r4, #0
 80055e8:	9510      	str	r5, [sp, #64]	; 0x40
 80055ea:	9413      	str	r4, [sp, #76]	; 0x4c
 80055ec:	e5f9      	b.n	80051e2 <_dtoa_r+0x19a>
 80055ee:	4264      	negs	r4, r4
 80055f0:	940f      	str	r4, [sp, #60]	; 0x3c
 80055f2:	2400      	movs	r4, #0
 80055f4:	940b      	str	r4, [sp, #44]	; 0x2c
 80055f6:	e5ea      	b.n	80051ce <_dtoa_r+0x186>
 80055f8:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 80055fc:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8005600:	1b00      	subs	r0, r0, r4
 8005602:	fa0a f000 	lsl.w	r0, sl, r0
 8005606:	e582      	b.n	800510e <_dtoa_r+0xc6>
 8005608:	2500      	movs	r5, #0
 800560a:	9514      	str	r5, [sp, #80]	; 0x50
 800560c:	e5d8      	b.n	80051c0 <_dtoa_r+0x178>
 800560e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8005610:	2c01      	cmp	r4, #1
 8005612:	f340 838f 	ble.w	8005d34 <_dtoa_r+0xcec>
 8005616:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005618:	1e62      	subs	r2, r4, #1
 800561a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800561c:	4294      	cmp	r4, r2
 800561e:	bfbf      	itttt	lt
 8005620:	9c10      	ldrlt	r4, [sp, #64]	; 0x40
 8005622:	9210      	strlt	r2, [sp, #64]	; 0x40
 8005624:	ebc4 0302 	rsblt	r3, r4, r2
 8005628:	9c13      	ldrlt	r4, [sp, #76]	; 0x4c
 800562a:	bfb6      	itet	lt
 800562c:	18e4      	addlt	r4, r4, r3
 800562e:	ebc2 0504 	rsbge	r5, r2, r4
 8005632:	9413      	strlt	r4, [sp, #76]	; 0x4c
 8005634:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005636:	2c00      	cmp	r4, #0
 8005638:	f2c0 838f 	blt.w	8005d5a <_dtoa_r+0xd12>
 800563c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800563e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005640:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005642:	18d2      	adds	r2, r2, r3
 8005644:	920f      	str	r2, [sp, #60]	; 0x3c
 8005646:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005648:	4638      	mov	r0, r7
 800564a:	18d2      	adds	r2, r2, r3
 800564c:	2101      	movs	r1, #1
 800564e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005650:	f001 f9c4 	bl	80069dc <__i2b>
 8005654:	9006      	str	r0, [sp, #24]
 8005656:	e70d      	b.n	8005474 <_dtoa_r+0x42c>
 8005658:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800565a:	2d00      	cmp	r5, #0
 800565c:	f040 8367 	bne.w	8005d2e <_dtoa_r+0xce6>
 8005660:	2300      	movs	r3, #0
 8005662:	2200      	movs	r2, #0
 8005664:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8005668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800566c:	f002 ffbc 	bl	80085e8 <__aeabi_dmul>
 8005670:	4652      	mov	r2, sl
 8005672:	465b      	mov	r3, fp
 8005674:	f003 fa3e 	bl	8008af4 <__aeabi_dcmpge>
 8005678:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800567a:	9606      	str	r6, [sp, #24]
 800567c:	2800      	cmp	r0, #0
 800567e:	d082      	beq.n	8005586 <_dtoa_r+0x53e>
 8005680:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8005682:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005684:	43e4      	mvns	r4, r4
 8005686:	9405      	str	r4, [sp, #20]
 8005688:	2400      	movs	r4, #0
 800568a:	e786      	b.n	800559a <_dtoa_r+0x552>
 800568c:	2501      	movs	r5, #1
 800568e:	9512      	str	r5, [sp, #72]	; 0x48
 8005690:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8005692:	2d00      	cmp	r5, #0
 8005694:	f340 82d3 	ble.w	8005c3e <_dtoa_r+0xbf6>
 8005698:	46a9      	mov	r9, r5
 800569a:	2d0e      	cmp	r5, #14
 800569c:	bf8c      	ite	hi
 800569e:	2400      	movhi	r4, #0
 80056a0:	f004 0401 	andls.w	r4, r4, #1
 80056a4:	9515      	str	r5, [sp, #84]	; 0x54
 80056a6:	950e      	str	r5, [sp, #56]	; 0x38
 80056a8:	2100      	movs	r1, #0
 80056aa:	f1b9 0f17 	cmp.w	r9, #23
 80056ae:	6479      	str	r1, [r7, #68]	; 0x44
 80056b0:	d909      	bls.n	80056c6 <_dtoa_r+0x67e>
 80056b2:	2201      	movs	r2, #1
 80056b4:	2304      	movs	r3, #4
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	f103 0014 	add.w	r0, r3, #20
 80056bc:	4611      	mov	r1, r2
 80056be:	3201      	adds	r2, #1
 80056c0:	4548      	cmp	r0, r9
 80056c2:	d9f8      	bls.n	80056b6 <_dtoa_r+0x66e>
 80056c4:	6479      	str	r1, [r7, #68]	; 0x44
 80056c6:	4638      	mov	r0, r7
 80056c8:	f001 f87c 	bl	80067c4 <_Balloc>
 80056cc:	9009      	str	r0, [sp, #36]	; 0x24
 80056ce:	6438      	str	r0, [r7, #64]	; 0x40
 80056d0:	2c00      	cmp	r4, #0
 80056d2:	f43f adfa 	beq.w	80052ca <_dtoa_r+0x282>
 80056d6:	9c05      	ldr	r4, [sp, #20]
 80056d8:	4652      	mov	r2, sl
 80056da:	465b      	mov	r3, fp
 80056dc:	2c00      	cmp	r4, #0
 80056de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80056e2:	f340 81f8 	ble.w	8005ad6 <_dtoa_r+0xa8e>
 80056e6:	4b97      	ldr	r3, [pc, #604]	; (8005944 <_dtoa_r+0x8fc>)
 80056e8:	f004 020f 	and.w	r2, r4, #15
 80056ec:	1124      	asrs	r4, r4, #4
 80056ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056f2:	2602      	movs	r6, #2
 80056f4:	06e2      	lsls	r2, r4, #27
 80056f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056fa:	d50b      	bpl.n	8005714 <_dtoa_r+0x6cc>
 80056fc:	4b92      	ldr	r3, [pc, #584]	; (8005948 <_dtoa_r+0x900>)
 80056fe:	4650      	mov	r0, sl
 8005700:	4659      	mov	r1, fp
 8005702:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005706:	f003 f899 	bl	800883c <__aeabi_ddiv>
 800570a:	f004 040f 	and.w	r4, r4, #15
 800570e:	4682      	mov	sl, r0
 8005710:	468b      	mov	fp, r1
 8005712:	2603      	movs	r6, #3
 8005714:	b174      	cbz	r4, 8005734 <_dtoa_r+0x6ec>
 8005716:	4d8c      	ldr	r5, [pc, #560]	; (8005948 <_dtoa_r+0x900>)
 8005718:	4640      	mov	r0, r8
 800571a:	4649      	mov	r1, r9
 800571c:	07e3      	lsls	r3, r4, #31
 800571e:	d504      	bpl.n	800572a <_dtoa_r+0x6e2>
 8005720:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005724:	f002 ff60 	bl	80085e8 <__aeabi_dmul>
 8005728:	3601      	adds	r6, #1
 800572a:	3508      	adds	r5, #8
 800572c:	1064      	asrs	r4, r4, #1
 800572e:	d1f5      	bne.n	800571c <_dtoa_r+0x6d4>
 8005730:	4680      	mov	r8, r0
 8005732:	4689      	mov	r9, r1
 8005734:	4650      	mov	r0, sl
 8005736:	4659      	mov	r1, fp
 8005738:	4642      	mov	r2, r8
 800573a:	464b      	mov	r3, r9
 800573c:	f003 f87e 	bl	800883c <__aeabi_ddiv>
 8005740:	4682      	mov	sl, r0
 8005742:	468b      	mov	fp, r1
 8005744:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005746:	2c00      	cmp	r4, #0
 8005748:	f000 8100 	beq.w	800594c <_dtoa_r+0x904>
 800574c:	2300      	movs	r3, #0
 800574e:	4650      	mov	r0, sl
 8005750:	4659      	mov	r1, fp
 8005752:	2200      	movs	r2, #0
 8005754:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8005758:	2401      	movs	r4, #1
 800575a:	f003 f9b7 	bl	8008acc <__aeabi_dcmplt>
 800575e:	b900      	cbnz	r0, 8005762 <_dtoa_r+0x71a>
 8005760:	2400      	movs	r4, #0
 8005762:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005764:	2d00      	cmp	r5, #0
 8005766:	bfd4      	ite	le
 8005768:	2400      	movle	r4, #0
 800576a:	f004 0401 	andgt.w	r4, r4, #1
 800576e:	2c00      	cmp	r4, #0
 8005770:	f000 80ec 	beq.w	800594c <_dtoa_r+0x904>
 8005774:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8005776:	2c00      	cmp	r4, #0
 8005778:	f340 819b 	ble.w	8005ab2 <_dtoa_r+0xa6a>
 800577c:	2300      	movs	r3, #0
 800577e:	2200      	movs	r2, #0
 8005780:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005784:	4650      	mov	r0, sl
 8005786:	4659      	mov	r1, fp
 8005788:	f002 ff2e 	bl	80085e8 <__aeabi_dmul>
 800578c:	4682      	mov	sl, r0
 800578e:	1c70      	adds	r0, r6, #1
 8005790:	468b      	mov	fp, r1
 8005792:	f002 fec3 	bl	800851c <__aeabi_i2d>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4650      	mov	r0, sl
 800579c:	4659      	mov	r1, fp
 800579e:	f002 ff23 	bl	80085e8 <__aeabi_dmul>
 80057a2:	2300      	movs	r3, #0
 80057a4:	2200      	movs	r2, #0
 80057a6:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80057aa:	f002 fd6b 	bl	8008284 <__adddf3>
 80057ae:	9d05      	ldr	r5, [sp, #20]
 80057b0:	3d01      	subs	r5, #1
 80057b2:	9517      	str	r5, [sp, #92]	; 0x5c
 80057b4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80057b6:	4680      	mov	r8, r0
 80057b8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80057bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80057be:	2c00      	cmp	r4, #0
 80057c0:	f000 81b0 	beq.w	8005b24 <_dtoa_r+0xadc>
 80057c4:	4b5f      	ldr	r3, [pc, #380]	; (8005944 <_dtoa_r+0x8fc>)
 80057c6:	2100      	movs	r1, #0
 80057c8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80057cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057d0:	2000      	movs	r0, #0
 80057d2:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 80057d6:	f003 f831 	bl	800883c <__aeabi_ddiv>
 80057da:	4642      	mov	r2, r8
 80057dc:	464b      	mov	r3, r9
 80057de:	f002 fd4f 	bl	8008280 <__aeabi_dsub>
 80057e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80057e6:	4659      	mov	r1, fp
 80057e8:	4650      	mov	r0, sl
 80057ea:	f003 f997 	bl	8008b1c <__aeabi_d2iz>
 80057ee:	4606      	mov	r6, r0
 80057f0:	f002 fe94 	bl	800851c <__aeabi_i2d>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4650      	mov	r0, sl
 80057fa:	4659      	mov	r1, fp
 80057fc:	f002 fd40 	bl	8008280 <__aeabi_dsub>
 8005800:	3630      	adds	r6, #48	; 0x30
 8005802:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005804:	b2f6      	uxtb	r6, r6
 8005806:	4682      	mov	sl, r0
 8005808:	468b      	mov	fp, r1
 800580a:	f804 6b01 	strb.w	r6, [r4], #1
 800580e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005812:	4652      	mov	r2, sl
 8005814:	465b      	mov	r3, fp
 8005816:	9411      	str	r4, [sp, #68]	; 0x44
 8005818:	46a0      	mov	r8, r4
 800581a:	f003 f975 	bl	8008b08 <__aeabi_dcmpgt>
 800581e:	2800      	cmp	r0, #0
 8005820:	f040 8325 	bne.w	8005e6e <_dtoa_r+0xe26>
 8005824:	2100      	movs	r1, #0
 8005826:	4652      	mov	r2, sl
 8005828:	465b      	mov	r3, fp
 800582a:	2000      	movs	r0, #0
 800582c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8005830:	f002 fd26 	bl	8008280 <__aeabi_dsub>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800583c:	f003 f964 	bl	8008b08 <__aeabi_dcmpgt>
 8005840:	2800      	cmp	r0, #0
 8005842:	f040 827f 	bne.w	8005d44 <_dtoa_r+0xcfc>
 8005846:	2d01      	cmp	r5, #1
 8005848:	f340 8133 	ble.w	8005ab2 <_dtoa_r+0xa6a>
 800584c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800584e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005850:	1945      	adds	r5, r0, r5
 8005852:	e00f      	b.n	8005874 <_dtoa_r+0x82c>
 8005854:	2100      	movs	r1, #0
 8005856:	2000      	movs	r0, #0
 8005858:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800585c:	f002 fd10 	bl	8008280 <__aeabi_dsub>
 8005860:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005864:	f003 f932 	bl	8008acc <__aeabi_dcmplt>
 8005868:	2800      	cmp	r0, #0
 800586a:	f040 826b 	bne.w	8005d44 <_dtoa_r+0xcfc>
 800586e:	42ac      	cmp	r4, r5
 8005870:	f000 811f 	beq.w	8005ab2 <_dtoa_r+0xa6a>
 8005874:	2300      	movs	r3, #0
 8005876:	2200      	movs	r2, #0
 8005878:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800587c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005880:	f002 feb2 	bl	80085e8 <__aeabi_dmul>
 8005884:	2300      	movs	r3, #0
 8005886:	2200      	movs	r2, #0
 8005888:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800588c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005890:	4650      	mov	r0, sl
 8005892:	4659      	mov	r1, fp
 8005894:	f002 fea8 	bl	80085e8 <__aeabi_dmul>
 8005898:	4680      	mov	r8, r0
 800589a:	4689      	mov	r9, r1
 800589c:	f003 f93e 	bl	8008b1c <__aeabi_d2iz>
 80058a0:	4606      	mov	r6, r0
 80058a2:	f002 fe3b 	bl	800851c <__aeabi_i2d>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	4640      	mov	r0, r8
 80058ac:	4649      	mov	r1, r9
 80058ae:	f002 fce7 	bl	8008280 <__aeabi_dsub>
 80058b2:	3630      	adds	r6, #48	; 0x30
 80058b4:	b2f6      	uxtb	r6, r6
 80058b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058ba:	f804 6b01 	strb.w	r6, [r4], #1
 80058be:	4682      	mov	sl, r0
 80058c0:	468b      	mov	fp, r1
 80058c2:	f003 f903 	bl	8008acc <__aeabi_dcmplt>
 80058c6:	46a0      	mov	r8, r4
 80058c8:	4652      	mov	r2, sl
 80058ca:	465b      	mov	r3, fp
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d0c1      	beq.n	8005854 <_dtoa_r+0x80c>
 80058d0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80058d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80058d4:	9005      	str	r0, [sp, #20]
 80058d6:	9409      	str	r4, [sp, #36]	; 0x24
 80058d8:	e66e      	b.n	80055b8 <_dtoa_r+0x570>
 80058da:	2500      	movs	r5, #0
 80058dc:	9512      	str	r5, [sp, #72]	; 0x48
 80058de:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80058e0:	9805      	ldr	r0, [sp, #20]
 80058e2:	182d      	adds	r5, r5, r0
 80058e4:	f105 0901 	add.w	r9, r5, #1
 80058e8:	f1b9 0f00 	cmp.w	r9, #0
 80058ec:	9515      	str	r5, [sp, #84]	; 0x54
 80058ee:	f340 819b 	ble.w	8005c28 <_dtoa_r+0xbe0>
 80058f2:	f1b9 0f0e 	cmp.w	r9, #14
 80058f6:	bf8c      	ite	hi
 80058f8:	2400      	movhi	r4, #0
 80058fa:	f004 0401 	andls.w	r4, r4, #1
 80058fe:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005902:	e6d1      	b.n	80056a8 <_dtoa_r+0x660>
 8005904:	2500      	movs	r5, #0
 8005906:	9512      	str	r5, [sp, #72]	; 0x48
 8005908:	e6c2      	b.n	8005690 <_dtoa_r+0x648>
 800590a:	2501      	movs	r5, #1
 800590c:	9512      	str	r5, [sp, #72]	; 0x48
 800590e:	e7e6      	b.n	80058de <_dtoa_r+0x896>
 8005910:	f1ba 0f00 	cmp.w	sl, #0
 8005914:	f47f aded 	bne.w	80054f2 <_dtoa_r+0x4aa>
 8005918:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800591c:	4655      	mov	r5, sl
 800591e:	2b00      	cmp	r3, #0
 8005920:	f47f ade8 	bne.w	80054f4 <_dtoa_r+0x4ac>
 8005924:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8005928:	ea0b 0303 	and.w	r3, fp, r3
 800592c:	461d      	mov	r5, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	f43f ade0 	beq.w	80054f4 <_dtoa_r+0x4ac>
 8005934:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005936:	3501      	adds	r5, #1
 8005938:	950f      	str	r5, [sp, #60]	; 0x3c
 800593a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800593c:	3501      	adds	r5, #1
 800593e:	950b      	str	r5, [sp, #44]	; 0x2c
 8005940:	2501      	movs	r5, #1
 8005942:	e5d7      	b.n	80054f4 <_dtoa_r+0x4ac>
 8005944:	08008fa8 	.word	0x08008fa8
 8005948:	08009098 	.word	0x08009098
 800594c:	4630      	mov	r0, r6
 800594e:	f002 fde5 	bl	800851c <__aeabi_i2d>
 8005952:	4652      	mov	r2, sl
 8005954:	465b      	mov	r3, fp
 8005956:	f002 fe47 	bl	80085e8 <__aeabi_dmul>
 800595a:	2300      	movs	r3, #0
 800595c:	2200      	movs	r2, #0
 800595e:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8005962:	f002 fc8f 	bl	8008284 <__adddf3>
 8005966:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005968:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 800596c:	4680      	mov	r8, r0
 800596e:	46a1      	mov	r9, r4
 8005970:	2d00      	cmp	r5, #0
 8005972:	f040 80ac 	bne.w	8005ace <_dtoa_r+0xa86>
 8005976:	2300      	movs	r3, #0
 8005978:	2200      	movs	r2, #0
 800597a:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800597e:	4650      	mov	r0, sl
 8005980:	4659      	mov	r1, fp
 8005982:	f002 fc7d 	bl	8008280 <__aeabi_dsub>
 8005986:	4642      	mov	r2, r8
 8005988:	4623      	mov	r3, r4
 800598a:	4682      	mov	sl, r0
 800598c:	468b      	mov	fp, r1
 800598e:	f003 f8bb 	bl	8008b08 <__aeabi_dcmpgt>
 8005992:	2800      	cmp	r0, #0
 8005994:	f040 80c3 	bne.w	8005b1e <_dtoa_r+0xad6>
 8005998:	4642      	mov	r2, r8
 800599a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 800599e:	4650      	mov	r0, sl
 80059a0:	4659      	mov	r1, fp
 80059a2:	f003 f893 	bl	8008acc <__aeabi_dcmplt>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	f000 8083 	beq.w	8005ab2 <_dtoa_r+0xa6a>
 80059ac:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80059ae:	9606      	str	r6, [sp, #24]
 80059b0:	e666      	b.n	8005680 <_dtoa_r+0x638>
 80059b2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80059b4:	2800      	cmp	r0, #0
 80059b6:	f000 8147 	beq.w	8005c48 <_dtoa_r+0xc00>
 80059ba:	2c00      	cmp	r4, #0
 80059bc:	dd05      	ble.n	80059ca <_dtoa_r+0x982>
 80059be:	4638      	mov	r0, r7
 80059c0:	9906      	ldr	r1, [sp, #24]
 80059c2:	4622      	mov	r2, r4
 80059c4:	f001 f8f8 	bl	8006bb8 <__lshift>
 80059c8:	9006      	str	r0, [sp, #24]
 80059ca:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80059ce:	2d00      	cmp	r5, #0
 80059d0:	f040 8201 	bne.w	8005dd6 <_dtoa_r+0xd8e>
 80059d4:	f00a 0001 	and.w	r0, sl, #1
 80059d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80059da:	9c06      	ldr	r4, [sp, #24]
 80059dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80059de:	4631      	mov	r1, r6
 80059e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80059e2:	f7ff faa1 	bl	8004f28 <quorem>
 80059e6:	4621      	mov	r1, r4
 80059e8:	9008      	str	r0, [sp, #32]
 80059ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80059ec:	f001 f944 	bl	8006c78 <__mcmp>
 80059f0:	4642      	mov	r2, r8
 80059f2:	4681      	mov	r9, r0
 80059f4:	4631      	mov	r1, r6
 80059f6:	4638      	mov	r0, r7
 80059f8:	f001 f95e 	bl	8006cb8 <__mdiff>
 80059fc:	9a08      	ldr	r2, [sp, #32]
 80059fe:	68c3      	ldr	r3, [r0, #12]
 8005a00:	3230      	adds	r2, #48	; 0x30
 8005a02:	4682      	mov	sl, r0
 8005a04:	9206      	str	r2, [sp, #24]
 8005a06:	f04f 0b01 	mov.w	fp, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d03d      	beq.n	8005a8a <_dtoa_r+0xa42>
 8005a0e:	4638      	mov	r0, r7
 8005a10:	4651      	mov	r1, sl
 8005a12:	f000 fefd 	bl	8006810 <_Bfree>
 8005a16:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a18:	ea5b 0303 	orrs.w	r3, fp, r3
 8005a1c:	d103      	bne.n	8005a26 <_dtoa_r+0x9de>
 8005a1e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005a20:	2800      	cmp	r0, #0
 8005a22:	f000 8211 	beq.w	8005e48 <_dtoa_r+0xe00>
 8005a26:	f1b9 0f00 	cmp.w	r9, #0
 8005a2a:	f2c0 819f 	blt.w	8005d6c <_dtoa_r+0xd24>
 8005a2e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005a30:	ea59 0000 	orrs.w	r0, r9, r0
 8005a34:	d103      	bne.n	8005a3e <_dtoa_r+0x9f6>
 8005a36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a38:	2900      	cmp	r1, #0
 8005a3a:	f000 8197 	beq.w	8005d6c <_dtoa_r+0xd24>
 8005a3e:	f1bb 0f00 	cmp.w	fp, #0
 8005a42:	f300 81ea 	bgt.w	8005e1a <_dtoa_r+0xdd2>
 8005a46:	9a06      	ldr	r2, [sp, #24]
 8005a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a4a:	f805 2b01 	strb.w	r2, [r5], #1
 8005a4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005a50:	1a2b      	subs	r3, r5, r0
 8005a52:	428b      	cmp	r3, r1
 8005a54:	46aa      	mov	sl, r5
 8005a56:	f000 81db 	beq.w	8005e10 <_dtoa_r+0xdc8>
 8005a5a:	220a      	movs	r2, #10
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	4638      	mov	r0, r7
 8005a60:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a62:	f000 fedf 	bl	8006824 <__multadd>
 8005a66:	4544      	cmp	r4, r8
 8005a68:	900a      	str	r0, [sp, #40]	; 0x28
 8005a6a:	d027      	beq.n	8005abc <_dtoa_r+0xa74>
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	220a      	movs	r2, #10
 8005a70:	2300      	movs	r3, #0
 8005a72:	4638      	mov	r0, r7
 8005a74:	f000 fed6 	bl	8006824 <__multadd>
 8005a78:	4641      	mov	r1, r8
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	220a      	movs	r2, #10
 8005a7e:	4638      	mov	r0, r7
 8005a80:	2300      	movs	r3, #0
 8005a82:	f000 fecf 	bl	8006824 <__multadd>
 8005a86:	4680      	mov	r8, r0
 8005a88:	e7a9      	b.n	80059de <_dtoa_r+0x996>
 8005a8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a8c:	4651      	mov	r1, sl
 8005a8e:	f001 f8f3 	bl	8006c78 <__mcmp>
 8005a92:	4683      	mov	fp, r0
 8005a94:	e7bb      	b.n	8005a0e <_dtoa_r+0x9c6>
 8005a96:	4638      	mov	r0, r7
 8005a98:	4621      	mov	r1, r4
 8005a9a:	f000 feb9 	bl	8006810 <_Bfree>
 8005a9e:	e587      	b.n	80055b0 <_dtoa_r+0x568>
 8005aa0:	231c      	movs	r3, #28
 8005aa2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005aa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005aa6:	18c0      	adds	r0, r0, r3
 8005aa8:	18c9      	adds	r1, r1, r3
 8005aaa:	900f      	str	r0, [sp, #60]	; 0x3c
 8005aac:	18e4      	adds	r4, r4, r3
 8005aae:	910b      	str	r1, [sp, #44]	; 0x2c
 8005ab0:	e538      	b.n	8005524 <_dtoa_r+0x4dc>
 8005ab2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ab6:	4682      	mov	sl, r0
 8005ab8:	468b      	mov	fp, r1
 8005aba:	e406      	b.n	80052ca <_dtoa_r+0x282>
 8005abc:	4621      	mov	r1, r4
 8005abe:	4638      	mov	r0, r7
 8005ac0:	220a      	movs	r2, #10
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f000 feae 	bl	8006824 <__multadd>
 8005ac8:	4604      	mov	r4, r0
 8005aca:	4680      	mov	r8, r0
 8005acc:	e787      	b.n	80059de <_dtoa_r+0x996>
 8005ace:	9c05      	ldr	r4, [sp, #20]
 8005ad0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005ad2:	9417      	str	r4, [sp, #92]	; 0x5c
 8005ad4:	e672      	b.n	80057bc <_dtoa_r+0x774>
 8005ad6:	9d05      	ldr	r5, [sp, #20]
 8005ad8:	426c      	negs	r4, r5
 8005ada:	2c00      	cmp	r4, #0
 8005adc:	f000 80fb 	beq.w	8005cd6 <_dtoa_r+0xc8e>
 8005ae0:	4ba0      	ldr	r3, [pc, #640]	; (8005d64 <_dtoa_r+0xd1c>)
 8005ae2:	f004 020f 	and.w	r2, r4, #15
 8005ae6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005aea:	4650      	mov	r0, sl
 8005aec:	4659      	mov	r1, fp
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	f002 fd79 	bl	80085e8 <__aeabi_dmul>
 8005af6:	1124      	asrs	r4, r4, #4
 8005af8:	4682      	mov	sl, r0
 8005afa:	468b      	mov	fp, r1
 8005afc:	f000 80eb 	beq.w	8005cd6 <_dtoa_r+0xc8e>
 8005b00:	4d99      	ldr	r5, [pc, #612]	; (8005d68 <_dtoa_r+0xd20>)
 8005b02:	2602      	movs	r6, #2
 8005b04:	07e2      	lsls	r2, r4, #31
 8005b06:	d504      	bpl.n	8005b12 <_dtoa_r+0xaca>
 8005b08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b0c:	f002 fd6c 	bl	80085e8 <__aeabi_dmul>
 8005b10:	3601      	adds	r6, #1
 8005b12:	3508      	adds	r5, #8
 8005b14:	1064      	asrs	r4, r4, #1
 8005b16:	d1f5      	bne.n	8005b04 <_dtoa_r+0xabc>
 8005b18:	4682      	mov	sl, r0
 8005b1a:	468b      	mov	fp, r1
 8005b1c:	e612      	b.n	8005744 <_dtoa_r+0x6fc>
 8005b1e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005b20:	9606      	str	r6, [sp, #24]
 8005b22:	e530      	b.n	8005586 <_dtoa_r+0x53e>
 8005b24:	498f      	ldr	r1, [pc, #572]	; (8005d64 <_dtoa_r+0xd1c>)
 8005b26:	1e6c      	subs	r4, r5, #1
 8005b28:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005b2c:	4642      	mov	r2, r8
 8005b2e:	464b      	mov	r3, r9
 8005b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b34:	9406      	str	r4, [sp, #24]
 8005b36:	f002 fd57 	bl	80085e8 <__aeabi_dmul>
 8005b3a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8005b3e:	4659      	mov	r1, fp
 8005b40:	4650      	mov	r0, sl
 8005b42:	f002 ffeb 	bl	8008b1c <__aeabi_d2iz>
 8005b46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b48:	4604      	mov	r4, r0
 8005b4a:	9111      	str	r1, [sp, #68]	; 0x44
 8005b4c:	f002 fce6 	bl	800851c <__aeabi_i2d>
 8005b50:	460b      	mov	r3, r1
 8005b52:	4602      	mov	r2, r0
 8005b54:	4659      	mov	r1, fp
 8005b56:	4650      	mov	r0, sl
 8005b58:	f002 fb92 	bl	8008280 <__aeabi_dsub>
 8005b5c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8005b60:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005b62:	f804 3b01 	strb.w	r3, [r4], #1
 8005b66:	2d01      	cmp	r5, #1
 8005b68:	4682      	mov	sl, r0
 8005b6a:	468b      	mov	fp, r1
 8005b6c:	9411      	str	r4, [sp, #68]	; 0x44
 8005b6e:	46a0      	mov	r8, r4
 8005b70:	d020      	beq.n	8005bb4 <_dtoa_r+0xb6c>
 8005b72:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005b74:	1e66      	subs	r6, r4, #1
 8005b76:	1976      	adds	r6, r6, r5
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005b80:	f002 fd32 	bl	80085e8 <__aeabi_dmul>
 8005b84:	4689      	mov	r9, r1
 8005b86:	4680      	mov	r8, r0
 8005b88:	f002 ffc8 	bl	8008b1c <__aeabi_d2iz>
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	f002 fcc5 	bl	800851c <__aeabi_i2d>
 8005b92:	3530      	adds	r5, #48	; 0x30
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4640      	mov	r0, r8
 8005b9a:	4649      	mov	r1, r9
 8005b9c:	f002 fb70 	bl	8008280 <__aeabi_dsub>
 8005ba0:	f804 5f01 	strb.w	r5, [r4, #1]!
 8005ba4:	42b4      	cmp	r4, r6
 8005ba6:	d1e7      	bne.n	8005b78 <_dtoa_r+0xb30>
 8005ba8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8005baa:	9c06      	ldr	r4, [sp, #24]
 8005bac:	4682      	mov	sl, r0
 8005bae:	468b      	mov	fp, r1
 8005bb0:	eb05 0804 	add.w	r8, r5, r4
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8005bbc:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8005bc0:	f002 fb60 	bl	8008284 <__adddf3>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4650      	mov	r0, sl
 8005bca:	4659      	mov	r1, fp
 8005bcc:	f002 ff9c 	bl	8008b08 <__aeabi_dcmpgt>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	f000 808a 	beq.w	8005cea <_dtoa_r+0xca2>
 8005bd6:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8005bda:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005bdc:	e422      	b.n	8005424 <_dtoa_r+0x3dc>
 8005bde:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005be0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005be4:	e4e8      	b.n	80055b8 <_dtoa_r+0x570>
 8005be6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005be8:	4631      	mov	r1, r6
 8005bea:	f001 f845 	bl	8006c78 <__mcmp>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	f6bf acad 	bge.w	800554e <_dtoa_r+0x506>
 8005bf4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005bf6:	220a      	movs	r2, #10
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f000 fe12 	bl	8006824 <__multadd>
 8005c00:	9905      	ldr	r1, [sp, #20]
 8005c02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c04:	900a      	str	r0, [sp, #40]	; 0x28
 8005c06:	3901      	subs	r1, #1
 8005c08:	9105      	str	r1, [sp, #20]
 8005c0a:	2a00      	cmp	r2, #0
 8005c0c:	f040 8136 	bne.w	8005e7c <_dtoa_r+0xe34>
 8005c10:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005c12:	900e      	str	r0, [sp, #56]	; 0x38
 8005c14:	e49b      	b.n	800554e <_dtoa_r+0x506>
 8005c16:	6933      	ldr	r3, [r6, #16]
 8005c18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c1c:	6918      	ldr	r0, [r3, #16]
 8005c1e:	f000 fe91 	bl	8006944 <__hi0bits>
 8005c22:	f1c0 0320 	rsb	r3, r0, #32
 8005c26:	e46a      	b.n	80054fe <_dtoa_r+0x4b6>
 8005c28:	f1b9 0f0e 	cmp.w	r9, #14
 8005c2c:	bf8c      	ite	hi
 8005c2e:	2300      	movhi	r3, #0
 8005c30:	2301      	movls	r3, #1
 8005c32:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005c36:	2100      	movs	r1, #0
 8005c38:	6479      	str	r1, [r7, #68]	; 0x44
 8005c3a:	401c      	ands	r4, r3
 8005c3c:	e543      	b.n	80056c6 <_dtoa_r+0x67e>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	9315      	str	r3, [sp, #84]	; 0x54
 8005c42:	930e      	str	r3, [sp, #56]	; 0x38
 8005c44:	9327      	str	r3, [sp, #156]	; 0x9c
 8005c46:	e7f6      	b.n	8005c36 <_dtoa_r+0xbee>
 8005c48:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005c4a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8005c4e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005c52:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005c54:	e006      	b.n	8005c64 <_dtoa_r+0xc1c>
 8005c56:	4651      	mov	r1, sl
 8005c58:	4638      	mov	r0, r7
 8005c5a:	220a      	movs	r2, #10
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f000 fde1 	bl	8006824 <__multadd>
 8005c62:	4682      	mov	sl, r0
 8005c64:	4631      	mov	r1, r6
 8005c66:	4650      	mov	r0, sl
 8005c68:	f7ff f95e 	bl	8004f28 <quorem>
 8005c6c:	3030      	adds	r0, #48	; 0x30
 8005c6e:	5528      	strb	r0, [r5, r4]
 8005c70:	3401      	adds	r4, #1
 8005c72:	45a0      	cmp	r8, r4
 8005c74:	dcef      	bgt.n	8005c56 <_dtoa_r+0xc0e>
 8005c76:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005c78:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005c7c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005c80:	4681      	mov	r9, r0
 8005c82:	2c01      	cmp	r4, #1
 8005c84:	bfac      	ite	ge
 8005c86:	44a2      	addge	sl, r4
 8005c88:	f10a 0a01 	addlt.w	sl, sl, #1
 8005c8c:	2400      	movs	r4, #0
 8005c8e:	2201      	movs	r2, #1
 8005c90:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c92:	4638      	mov	r0, r7
 8005c94:	f000 ff90 	bl	8006bb8 <__lshift>
 8005c98:	4631      	mov	r1, r6
 8005c9a:	900a      	str	r0, [sp, #40]	; 0x28
 8005c9c:	f000 ffec 	bl	8006c78 <__mcmp>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	f340 8082 	ble.w	8005daa <_dtoa_r+0xd62>
 8005ca6:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8005caa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005cac:	1c6a      	adds	r2, r5, #1
 8005cae:	e003      	b.n	8005cb8 <_dtoa_r+0xc70>
 8005cb0:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 8005cb4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005cb8:	2b39      	cmp	r3, #57	; 0x39
 8005cba:	f040 8084 	bne.w	8005dc6 <_dtoa_r+0xd7e>
 8005cbe:	4592      	cmp	sl, r2
 8005cc0:	d1f6      	bne.n	8005cb0 <_dtoa_r+0xc68>
 8005cc2:	9805      	ldr	r0, [sp, #20]
 8005cc4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	2331      	movs	r3, #49	; 0x31
 8005cca:	9005      	str	r0, [sp, #20]
 8005ccc:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8005cd0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005cd4:	e461      	b.n	800559a <_dtoa_r+0x552>
 8005cd6:	2602      	movs	r6, #2
 8005cd8:	e534      	b.n	8005744 <_dtoa_r+0x6fc>
 8005cda:	4638      	mov	r0, r7
 8005cdc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005cde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ce0:	f000 ff1e 	bl	8006b20 <__pow5mult>
 8005ce4:	900a      	str	r0, [sp, #40]	; 0x28
 8005ce6:	f7ff bbf2 	b.w	80054ce <_dtoa_r+0x486>
 8005cea:	2100      	movs	r1, #0
 8005cec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8005cf6:	f002 fac3 	bl	8008280 <__aeabi_dsub>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4650      	mov	r0, sl
 8005d00:	4659      	mov	r1, fp
 8005d02:	f002 fee3 	bl	8008acc <__aeabi_dcmplt>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	f43f aed3 	beq.w	8005ab2 <_dtoa_r+0xa6a>
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
 8005d12:	2b30      	cmp	r3, #48	; 0x30
 8005d14:	d0fa      	beq.n	8005d0c <_dtoa_r+0xcc4>
 8005d16:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005d18:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d1a:	9405      	str	r4, [sp, #20]
 8005d1c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d1e:	e44b      	b.n	80055b8 <_dtoa_r+0x570>
 8005d20:	4638      	mov	r0, r7
 8005d22:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d24:	f000 fefc 	bl	8006b20 <__pow5mult>
 8005d28:	900a      	str	r0, [sp, #40]	; 0x28
 8005d2a:	f7ff bbd0 	b.w	80054ce <_dtoa_r+0x486>
 8005d2e:	2600      	movs	r6, #0
 8005d30:	9606      	str	r6, [sp, #24]
 8005d32:	e4a5      	b.n	8005680 <_dtoa_r+0x638>
 8005d34:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8005d36:	2d00      	cmp	r5, #0
 8005d38:	d064      	beq.n	8005e04 <_dtoa_r+0xdbc>
 8005d3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d3e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005d40:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005d42:	e47d      	b.n	8005640 <_dtoa_r+0x5f8>
 8005d44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d46:	f7ff bb6d 	b.w	8005424 <_dtoa_r+0x3dc>
 8005d4a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005d4c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005d50:	1c72      	adds	r2, r6, #1
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	9405      	str	r4, [sp, #20]
 8005d56:	f7ff bb7b 	b.w	8005450 <_dtoa_r+0x408>
 8005d5a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	1b04      	subs	r4, r0, r4
 8005d60:	e46e      	b.n	8005640 <_dtoa_r+0x5f8>
 8005d62:	bf00      	nop
 8005d64:	08008fa8 	.word	0x08008fa8
 8005d68:	08009098 	.word	0x08009098
 8005d6c:	f1bb 0f00 	cmp.w	fp, #0
 8005d70:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005d74:	dd10      	ble.n	8005d98 <_dtoa_r+0xd50>
 8005d76:	2201      	movs	r2, #1
 8005d78:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d7a:	4638      	mov	r0, r7
 8005d7c:	f000 ff1c 	bl	8006bb8 <__lshift>
 8005d80:	4631      	mov	r1, r6
 8005d82:	900a      	str	r0, [sp, #40]	; 0x28
 8005d84:	f000 ff78 	bl	8006c78 <__mcmp>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	dd6b      	ble.n	8005e64 <_dtoa_r+0xe1c>
 8005d8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d90:	d053      	beq.n	8005e3a <_dtoa_r+0xdf2>
 8005d92:	9b08      	ldr	r3, [sp, #32]
 8005d94:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005d98:	462b      	mov	r3, r5
 8005d9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005d9c:	f803 9b01 	strb.w	r9, [r3], #1
 8005da0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005da4:	9309      	str	r3, [sp, #36]	; 0x24
 8005da6:	f7ff bbf8 	b.w	800559a <_dtoa_r+0x552>
 8005daa:	d103      	bne.n	8005db4 <_dtoa_r+0xd6c>
 8005dac:	f019 0f01 	tst.w	r9, #1
 8005db0:	f47f af79 	bne.w	8005ca6 <_dtoa_r+0xc5e>
 8005db4:	4652      	mov	r2, sl
 8005db6:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 8005dba:	2b30      	cmp	r3, #48	; 0x30
 8005dbc:	d0fa      	beq.n	8005db4 <_dtoa_r+0xd6c>
 8005dbe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005dc0:	9209      	str	r2, [sp, #36]	; 0x24
 8005dc2:	f7ff bbea 	b.w	800559a <_dtoa_r+0x552>
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005dca:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8005dce:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005dd2:	f7ff bbe2 	b.w	800559a <_dtoa_r+0x552>
 8005dd6:	9c06      	ldr	r4, [sp, #24]
 8005dd8:	4638      	mov	r0, r7
 8005dda:	6861      	ldr	r1, [r4, #4]
 8005ddc:	f000 fcf2 	bl	80067c4 <_Balloc>
 8005de0:	9d06      	ldr	r5, [sp, #24]
 8005de2:	692a      	ldr	r2, [r5, #16]
 8005de4:	3202      	adds	r2, #2
 8005de6:	4604      	mov	r4, r0
 8005de8:	0092      	lsls	r2, r2, #2
 8005dea:	f105 010c 	add.w	r1, r5, #12
 8005dee:	f100 000c 	add.w	r0, r0, #12
 8005df2:	f000 fc9f 	bl	8006734 <memcpy>
 8005df6:	4638      	mov	r0, r7
 8005df8:	4621      	mov	r1, r4
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f000 fedc 	bl	8006bb8 <__lshift>
 8005e00:	4680      	mov	r8, r0
 8005e02:	e5e7      	b.n	80059d4 <_dtoa_r+0x98c>
 8005e04:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005e06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005e08:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005e0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e0e:	e417      	b.n	8005640 <_dtoa_r+0x5f8>
 8005e10:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005e14:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e18:	e739      	b.n	8005c8e <_dtoa_r+0xc46>
 8005e1a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005e1e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005e22:	d00a      	beq.n	8005e3a <_dtoa_r+0xdf2>
 8005e24:	462b      	mov	r3, r5
 8005e26:	f109 0901 	add.w	r9, r9, #1
 8005e2a:	f803 9b01 	strb.w	r9, [r3], #1
 8005e2e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e30:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e34:	9309      	str	r3, [sp, #36]	; 0x24
 8005e36:	f7ff bbb0 	b.w	800559a <_dtoa_r+0x552>
 8005e3a:	46aa      	mov	sl, r5
 8005e3c:	2339      	movs	r3, #57	; 0x39
 8005e3e:	f80a 3b01 	strb.w	r3, [sl], #1
 8005e42:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e46:	e730      	b.n	8005caa <_dtoa_r+0xc62>
 8005e48:	464b      	mov	r3, r9
 8005e4a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005e4e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005e52:	d0f2      	beq.n	8005e3a <_dtoa_r+0xdf2>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	dc9c      	bgt.n	8005d92 <_dtoa_r+0xd4a>
 8005e58:	e79e      	b.n	8005d98 <_dtoa_r+0xd50>
 8005e5a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005e5c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e5e:	9409      	str	r4, [sp, #36]	; 0x24
 8005e60:	f7ff bbaa 	b.w	80055b8 <_dtoa_r+0x570>
 8005e64:	d198      	bne.n	8005d98 <_dtoa_r+0xd50>
 8005e66:	f019 0f01 	tst.w	r9, #1
 8005e6a:	d095      	beq.n	8005d98 <_dtoa_r+0xd50>
 8005e6c:	e78e      	b.n	8005d8c <_dtoa_r+0xd44>
 8005e6e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005e70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e72:	9405      	str	r4, [sp, #20]
 8005e74:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005e76:	9409      	str	r4, [sp, #36]	; 0x24
 8005e78:	f7ff bb9e 	b.w	80055b8 <_dtoa_r+0x570>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4638      	mov	r0, r7
 8005e80:	9906      	ldr	r1, [sp, #24]
 8005e82:	220a      	movs	r2, #10
 8005e84:	f000 fcce 	bl	8006824 <__multadd>
 8005e88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e8a:	9006      	str	r0, [sp, #24]
 8005e8c:	930e      	str	r3, [sp, #56]	; 0x38
 8005e8e:	f7ff bb5e 	b.w	800554e <_dtoa_r+0x506>
 8005e92:	f43f ab47 	beq.w	8005524 <_dtoa_r+0x4dc>
 8005e96:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8005e9a:	e602      	b.n	8005aa2 <_dtoa_r+0xa5a>
 8005e9c:	f3af 8000 	nop.w

08005ea0 <_malloc_trim_r>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	4d22      	ldr	r5, [pc, #136]	; (8005f2c <_malloc_trim_r+0x8c>)
 8005ea4:	460f      	mov	r7, r1
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	f000 fc88 	bl	80067bc <__malloc_lock>
 8005eac:	68ab      	ldr	r3, [r5, #8]
 8005eae:	685e      	ldr	r6, [r3, #4]
 8005eb0:	f026 0603 	bic.w	r6, r6, #3
 8005eb4:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 8005eb8:	1bdf      	subs	r7, r3, r7
 8005eba:	0b3f      	lsrs	r7, r7, #12
 8005ebc:	3f01      	subs	r7, #1
 8005ebe:	033f      	lsls	r7, r7, #12
 8005ec0:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	db07      	blt.n	8005ed8 <_malloc_trim_r+0x38>
 8005ec8:	2100      	movs	r1, #0
 8005eca:	f001 f907 	bl	80070dc <_sbrk_r>
 8005ece:	68ab      	ldr	r3, [r5, #8]
 8005ed0:	199b      	adds	r3, r3, r6
 8005ed2:	4298      	cmp	r0, r3
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	d003      	beq.n	8005ee0 <_malloc_trim_r+0x40>
 8005ed8:	f000 fc72 	bl	80067c0 <__malloc_unlock>
 8005edc:	2000      	movs	r0, #0
 8005ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ee0:	4279      	negs	r1, r7
 8005ee2:	f001 f8fb 	bl	80070dc <_sbrk_r>
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	d00d      	beq.n	8005f06 <_malloc_trim_r+0x66>
 8005eea:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <_malloc_trim_r+0x90>)
 8005eec:	68aa      	ldr	r2, [r5, #8]
 8005eee:	6819      	ldr	r1, [r3, #0]
 8005ef0:	1bf6      	subs	r6, r6, r7
 8005ef2:	f046 0601 	orr.w	r6, r6, #1
 8005ef6:	1bcf      	subs	r7, r1, r7
 8005ef8:	4620      	mov	r0, r4
 8005efa:	6056      	str	r6, [r2, #4]
 8005efc:	601f      	str	r7, [r3, #0]
 8005efe:	f000 fc5f 	bl	80067c0 <__malloc_unlock>
 8005f02:	2001      	movs	r0, #1
 8005f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f06:	2100      	movs	r1, #0
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f001 f8e7 	bl	80070dc <_sbrk_r>
 8005f0e:	68ab      	ldr	r3, [r5, #8]
 8005f10:	1ac2      	subs	r2, r0, r3
 8005f12:	2a0f      	cmp	r2, #15
 8005f14:	dd07      	ble.n	8005f26 <_malloc_trim_r+0x86>
 8005f16:	4907      	ldr	r1, [pc, #28]	; (8005f34 <_malloc_trim_r+0x94>)
 8005f18:	6809      	ldr	r1, [r1, #0]
 8005f1a:	1a40      	subs	r0, r0, r1
 8005f1c:	4904      	ldr	r1, [pc, #16]	; (8005f30 <_malloc_trim_r+0x90>)
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	6008      	str	r0, [r1, #0]
 8005f24:	605a      	str	r2, [r3, #4]
 8005f26:	4620      	mov	r0, r4
 8005f28:	e7d6      	b.n	8005ed8 <_malloc_trim_r+0x38>
 8005f2a:	bf00      	nop
 8005f2c:	2000054c 	.word	0x2000054c
 8005f30:	20000974 	.word	0x20000974
 8005f34:	20000954 	.word	0x20000954

08005f38 <_free_r>:
 8005f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3c:	460d      	mov	r5, r1
 8005f3e:	4604      	mov	r4, r0
 8005f40:	2900      	cmp	r1, #0
 8005f42:	d06f      	beq.n	8006024 <_free_r+0xec>
 8005f44:	f000 fc3a 	bl	80067bc <__malloc_lock>
 8005f48:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8005f4c:	4e58      	ldr	r6, [pc, #352]	; (80060b0 <_free_r+0x178>)
 8005f4e:	f1a5 0108 	sub.w	r1, r5, #8
 8005f52:	f020 0301 	bic.w	r3, r0, #1
 8005f56:	18ca      	adds	r2, r1, r3
 8005f58:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8005f5c:	6857      	ldr	r7, [r2, #4]
 8005f5e:	4594      	cmp	ip, r2
 8005f60:	f027 0703 	bic.w	r7, r7, #3
 8005f64:	d07c      	beq.n	8006060 <_free_r+0x128>
 8005f66:	f010 0001 	ands.w	r0, r0, #1
 8005f6a:	6057      	str	r7, [r2, #4]
 8005f6c:	d049      	beq.n	8006002 <_free_r+0xca>
 8005f6e:	2000      	movs	r0, #0
 8005f70:	19d5      	adds	r5, r2, r7
 8005f72:	686d      	ldr	r5, [r5, #4]
 8005f74:	f015 0f01 	tst.w	r5, #1
 8005f78:	d106      	bne.n	8005f88 <_free_r+0x50>
 8005f7a:	19db      	adds	r3, r3, r7
 8005f7c:	6895      	ldr	r5, [r2, #8]
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d062      	beq.n	8006048 <_free_r+0x110>
 8005f82:	68d2      	ldr	r2, [r2, #12]
 8005f84:	60ea      	str	r2, [r5, #12]
 8005f86:	6095      	str	r5, [r2, #8]
 8005f88:	f043 0201 	orr.w	r2, r3, #1
 8005f8c:	604a      	str	r2, [r1, #4]
 8005f8e:	50cb      	str	r3, [r1, r3]
 8005f90:	bb90      	cbnz	r0, 8005ff8 <_free_r+0xc0>
 8005f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f96:	d347      	bcc.n	8006028 <_free_r+0xf0>
 8005f98:	099d      	lsrs	r5, r3, #6
 8005f9a:	3538      	adds	r5, #56	; 0x38
 8005f9c:	0a5a      	lsrs	r2, r3, #9
 8005f9e:	00e8      	lsls	r0, r5, #3
 8005fa0:	2a04      	cmp	r2, #4
 8005fa2:	d916      	bls.n	8005fd2 <_free_r+0x9a>
 8005fa4:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8005fa8:	00e8      	lsls	r0, r5, #3
 8005faa:	2a14      	cmp	r2, #20
 8005fac:	d911      	bls.n	8005fd2 <_free_r+0x9a>
 8005fae:	0b1d      	lsrs	r5, r3, #12
 8005fb0:	356e      	adds	r5, #110	; 0x6e
 8005fb2:	00e8      	lsls	r0, r5, #3
 8005fb4:	2a54      	cmp	r2, #84	; 0x54
 8005fb6:	d90c      	bls.n	8005fd2 <_free_r+0x9a>
 8005fb8:	0bdd      	lsrs	r5, r3, #15
 8005fba:	3577      	adds	r5, #119	; 0x77
 8005fbc:	00e8      	lsls	r0, r5, #3
 8005fbe:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005fc2:	d906      	bls.n	8005fd2 <_free_r+0x9a>
 8005fc4:	f240 5054 	movw	r0, #1364	; 0x554
 8005fc8:	4282      	cmp	r2, r0
 8005fca:	d86d      	bhi.n	80060a8 <_free_r+0x170>
 8005fcc:	0c9d      	lsrs	r5, r3, #18
 8005fce:	357c      	adds	r5, #124	; 0x7c
 8005fd0:	00e8      	lsls	r0, r5, #3
 8005fd2:	1986      	adds	r6, r0, r6
 8005fd4:	4836      	ldr	r0, [pc, #216]	; (80060b0 <_free_r+0x178>)
 8005fd6:	68b2      	ldr	r2, [r6, #8]
 8005fd8:	42b2      	cmp	r2, r6
 8005fda:	d103      	bne.n	8005fe4 <_free_r+0xac>
 8005fdc:	e05b      	b.n	8006096 <_free_r+0x15e>
 8005fde:	6892      	ldr	r2, [r2, #8]
 8005fe0:	4296      	cmp	r6, r2
 8005fe2:	d004      	beq.n	8005fee <_free_r+0xb6>
 8005fe4:	6850      	ldr	r0, [r2, #4]
 8005fe6:	f020 0003 	bic.w	r0, r0, #3
 8005fea:	4283      	cmp	r3, r0
 8005fec:	d3f7      	bcc.n	8005fde <_free_r+0xa6>
 8005fee:	68d3      	ldr	r3, [r2, #12]
 8005ff0:	60cb      	str	r3, [r1, #12]
 8005ff2:	608a      	str	r2, [r1, #8]
 8005ff4:	60d1      	str	r1, [r2, #12]
 8005ff6:	6099      	str	r1, [r3, #8]
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ffe:	f000 bbdf 	b.w	80067c0 <__malloc_unlock>
 8006002:	f855 cc08 	ldr.w	ip, [r5, #-8]
 8006006:	ebcc 0101 	rsb	r1, ip, r1
 800600a:	f106 0808 	add.w	r8, r6, #8
 800600e:	688d      	ldr	r5, [r1, #8]
 8006010:	4545      	cmp	r5, r8
 8006012:	4463      	add	r3, ip
 8006014:	d03d      	beq.n	8006092 <_free_r+0x15a>
 8006016:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800601a:	f8c5 c00c 	str.w	ip, [r5, #12]
 800601e:	f8cc 5008 	str.w	r5, [ip, #8]
 8006022:	e7a5      	b.n	8005f70 <_free_r+0x38>
 8006024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006028:	08db      	lsrs	r3, r3, #3
 800602a:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800602e:	6875      	ldr	r5, [r6, #4]
 8006030:	6890      	ldr	r0, [r2, #8]
 8006032:	60ca      	str	r2, [r1, #12]
 8006034:	109b      	asrs	r3, r3, #2
 8006036:	2701      	movs	r7, #1
 8006038:	fa17 f303 	lsls.w	r3, r7, r3
 800603c:	432b      	orrs	r3, r5
 800603e:	6088      	str	r0, [r1, #8]
 8006040:	6073      	str	r3, [r6, #4]
 8006042:	6091      	str	r1, [r2, #8]
 8006044:	60c1      	str	r1, [r0, #12]
 8006046:	e7d7      	b.n	8005ff8 <_free_r+0xc0>
 8006048:	4f1a      	ldr	r7, [pc, #104]	; (80060b4 <_free_r+0x17c>)
 800604a:	42bd      	cmp	r5, r7
 800604c:	d199      	bne.n	8005f82 <_free_r+0x4a>
 800604e:	f043 0201 	orr.w	r2, r3, #1
 8006052:	6171      	str	r1, [r6, #20]
 8006054:	6131      	str	r1, [r6, #16]
 8006056:	60cd      	str	r5, [r1, #12]
 8006058:	608d      	str	r5, [r1, #8]
 800605a:	604a      	str	r2, [r1, #4]
 800605c:	50cb      	str	r3, [r1, r3]
 800605e:	e7cb      	b.n	8005ff8 <_free_r+0xc0>
 8006060:	07c2      	lsls	r2, r0, #31
 8006062:	443b      	add	r3, r7
 8006064:	d407      	bmi.n	8006076 <_free_r+0x13e>
 8006066:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800606a:	1a89      	subs	r1, r1, r2
 800606c:	189b      	adds	r3, r3, r2
 800606e:	6888      	ldr	r0, [r1, #8]
 8006070:	68ca      	ldr	r2, [r1, #12]
 8006072:	60c2      	str	r2, [r0, #12]
 8006074:	6090      	str	r0, [r2, #8]
 8006076:	4a10      	ldr	r2, [pc, #64]	; (80060b8 <_free_r+0x180>)
 8006078:	60b1      	str	r1, [r6, #8]
 800607a:	6812      	ldr	r2, [r2, #0]
 800607c:	f043 0001 	orr.w	r0, r3, #1
 8006080:	4293      	cmp	r3, r2
 8006082:	6048      	str	r0, [r1, #4]
 8006084:	d3b8      	bcc.n	8005ff8 <_free_r+0xc0>
 8006086:	4b0d      	ldr	r3, [pc, #52]	; (80060bc <_free_r+0x184>)
 8006088:	4620      	mov	r0, r4
 800608a:	6819      	ldr	r1, [r3, #0]
 800608c:	f7ff ff08 	bl	8005ea0 <_malloc_trim_r>
 8006090:	e7b2      	b.n	8005ff8 <_free_r+0xc0>
 8006092:	2001      	movs	r0, #1
 8006094:	e76c      	b.n	8005f70 <_free_r+0x38>
 8006096:	6843      	ldr	r3, [r0, #4]
 8006098:	10ad      	asrs	r5, r5, #2
 800609a:	2601      	movs	r6, #1
 800609c:	fa16 f505 	lsls.w	r5, r6, r5
 80060a0:	432b      	orrs	r3, r5
 80060a2:	6043      	str	r3, [r0, #4]
 80060a4:	4613      	mov	r3, r2
 80060a6:	e7a3      	b.n	8005ff0 <_free_r+0xb8>
 80060a8:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 80060ac:	257e      	movs	r5, #126	; 0x7e
 80060ae:	e790      	b.n	8005fd2 <_free_r+0x9a>
 80060b0:	2000054c 	.word	0x2000054c
 80060b4:	20000554 	.word	0x20000554
 80060b8:	20000958 	.word	0x20000958
 80060bc:	20000970 	.word	0x20000970

080060c0 <_setlocale_r>:
 80060c0:	b510      	push	{r4, lr}
 80060c2:	4614      	mov	r4, r2
 80060c4:	b122      	cbz	r2, 80060d0 <_setlocale_r+0x10>
 80060c6:	4610      	mov	r0, r2
 80060c8:	490b      	ldr	r1, [pc, #44]	; (80060f8 <_setlocale_r+0x38>)
 80060ca:	f001 f819 	bl	8007100 <strcmp>
 80060ce:	b908      	cbnz	r0, 80060d4 <_setlocale_r+0x14>
 80060d0:	480a      	ldr	r0, [pc, #40]	; (80060fc <_setlocale_r+0x3c>)
 80060d2:	bd10      	pop	{r4, pc}
 80060d4:	4620      	mov	r0, r4
 80060d6:	4909      	ldr	r1, [pc, #36]	; (80060fc <_setlocale_r+0x3c>)
 80060d8:	f001 f812 	bl	8007100 <strcmp>
 80060dc:	b908      	cbnz	r0, 80060e2 <_setlocale_r+0x22>
 80060de:	4807      	ldr	r0, [pc, #28]	; (80060fc <_setlocale_r+0x3c>)
 80060e0:	bd10      	pop	{r4, pc}
 80060e2:	4620      	mov	r0, r4
 80060e4:	4906      	ldr	r1, [pc, #24]	; (8006100 <_setlocale_r+0x40>)
 80060e6:	f001 f80b 	bl	8007100 <strcmp>
 80060ea:	4b04      	ldr	r3, [pc, #16]	; (80060fc <_setlocale_r+0x3c>)
 80060ec:	2800      	cmp	r0, #0
 80060ee:	bf0c      	ite	eq
 80060f0:	4618      	moveq	r0, r3
 80060f2:	2000      	movne	r0, #0
 80060f4:	bd10      	pop	{r4, pc}
 80060f6:	bf00      	nop
 80060f8:	08009260 	.word	0x08009260
 80060fc:	0800925c 	.word	0x0800925c
 8006100:	080091b4 	.word	0x080091b4

08006104 <__locale_charset>:
 8006104:	f240 40d0 	movw	r0, #1232	; 0x4d0
 8006108:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop

08006110 <__locale_mb_cur_max>:
 8006110:	f240 43d0 	movw	r3, #1232	; 0x4d0
 8006114:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006118:	6a18      	ldr	r0, [r3, #32]
 800611a:	4770      	bx	lr

0800611c <__locale_msgcharset>:
 800611c:	4800      	ldr	r0, [pc, #0]	; (8006120 <__locale_msgcharset+0x4>)
 800611e:	4770      	bx	lr
 8006120:	200004f4 	.word	0x200004f4

08006124 <__locale_cjk_lang>:
 8006124:	2000      	movs	r0, #0
 8006126:	4770      	bx	lr

08006128 <_localeconv_r>:
 8006128:	4800      	ldr	r0, [pc, #0]	; (800612c <_localeconv_r+0x4>)
 800612a:	4770      	bx	lr
 800612c:	20000514 	.word	0x20000514

08006130 <setlocale>:
 8006130:	b410      	push	{r4}
 8006132:	f240 03a0 	movw	r3, #160	; 0xa0
 8006136:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800613a:	4604      	mov	r4, r0
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	460a      	mov	r2, r1
 8006140:	4621      	mov	r1, r4
 8006142:	bc10      	pop	{r4}
 8006144:	e7bc      	b.n	80060c0 <_setlocale_r>
 8006146:	bf00      	nop

08006148 <localeconv>:
 8006148:	4800      	ldr	r0, [pc, #0]	; (800614c <localeconv+0x4>)
 800614a:	4770      	bx	lr
 800614c:	20000514 	.word	0x20000514

08006150 <_malloc_r>:
 8006150:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	f101 040b 	add.w	r4, r1, #11
 8006158:	2c16      	cmp	r4, #22
 800615a:	4605      	mov	r5, r0
 800615c:	d92a      	bls.n	80061b4 <_malloc_r+0x64>
 800615e:	f024 0407 	bic.w	r4, r4, #7
 8006162:	0fe3      	lsrs	r3, r4, #31
 8006164:	428c      	cmp	r4, r1
 8006166:	bf2c      	ite	cs
 8006168:	4619      	movcs	r1, r3
 800616a:	f043 0101 	orrcc.w	r1, r3, #1
 800616e:	bb51      	cbnz	r1, 80061c6 <_malloc_r+0x76>
 8006170:	4628      	mov	r0, r5
 8006172:	f000 fb23 	bl	80067bc <__malloc_lock>
 8006176:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800617a:	d22a      	bcs.n	80061d2 <_malloc_r+0x82>
 800617c:	4e7d      	ldr	r6, [pc, #500]	; (8006374 <_malloc_r+0x224>)
 800617e:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8006182:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 8006186:	68df      	ldr	r7, [r3, #12]
 8006188:	429f      	cmp	r7, r3
 800618a:	f000 8235 	beq.w	80065f8 <_malloc_r+0x4a8>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	f023 0303 	bic.w	r3, r3, #3
 8006198:	18fb      	adds	r3, r7, r3
 800619a:	60ca      	str	r2, [r1, #12]
 800619c:	6858      	ldr	r0, [r3, #4]
 800619e:	6091      	str	r1, [r2, #8]
 80061a0:	f040 0201 	orr.w	r2, r0, #1
 80061a4:	605a      	str	r2, [r3, #4]
 80061a6:	4628      	mov	r0, r5
 80061a8:	f000 fb0a 	bl	80067c0 <__malloc_unlock>
 80061ac:	3708      	adds	r7, #8
 80061ae:	4638      	mov	r0, r7
 80061b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b4:	2300      	movs	r3, #0
 80061b6:	2410      	movs	r4, #16
 80061b8:	428c      	cmp	r4, r1
 80061ba:	bf2c      	ite	cs
 80061bc:	4619      	movcs	r1, r3
 80061be:	f043 0101 	orrcc.w	r1, r3, #1
 80061c2:	2900      	cmp	r1, #0
 80061c4:	d0d4      	beq.n	8006170 <_malloc_r+0x20>
 80061c6:	230c      	movs	r3, #12
 80061c8:	2700      	movs	r7, #0
 80061ca:	602b      	str	r3, [r5, #0]
 80061cc:	4638      	mov	r0, r7
 80061ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d2:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 80061d6:	bf04      	itt	eq
 80061d8:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 80061dc:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 80061e0:	f040 8081 	bne.w	80062e6 <_malloc_r+0x196>
 80061e4:	4e63      	ldr	r6, [pc, #396]	; (8006374 <_malloc_r+0x224>)
 80061e6:	1871      	adds	r1, r6, r1
 80061e8:	68cf      	ldr	r7, [r1, #12]
 80061ea:	42b9      	cmp	r1, r7
 80061ec:	d106      	bne.n	80061fc <_malloc_r+0xac>
 80061ee:	e00d      	b.n	800620c <_malloc_r+0xbc>
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f280 8169 	bge.w	80064c8 <_malloc_r+0x378>
 80061f6:	68ff      	ldr	r7, [r7, #12]
 80061f8:	42b9      	cmp	r1, r7
 80061fa:	d007      	beq.n	800620c <_malloc_r+0xbc>
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	f022 0203 	bic.w	r2, r2, #3
 8006202:	1b13      	subs	r3, r2, r4
 8006204:	2b0f      	cmp	r3, #15
 8006206:	ddf3      	ble.n	80061f0 <_malloc_r+0xa0>
 8006208:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800620c:	f10e 0e01 	add.w	lr, lr, #1
 8006210:	4a58      	ldr	r2, [pc, #352]	; (8006374 <_malloc_r+0x224>)
 8006212:	6937      	ldr	r7, [r6, #16]
 8006214:	f102 0c08 	add.w	ip, r2, #8
 8006218:	4567      	cmp	r7, ip
 800621a:	bf08      	it	eq
 800621c:	6853      	ldreq	r3, [r2, #4]
 800621e:	d023      	beq.n	8006268 <_malloc_r+0x118>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f023 0303 	bic.w	r3, r3, #3
 8006226:	1b19      	subs	r1, r3, r4
 8006228:	290f      	cmp	r1, #15
 800622a:	f300 81b4 	bgt.w	8006596 <_malloc_r+0x446>
 800622e:	2900      	cmp	r1, #0
 8006230:	f8c2 c014 	str.w	ip, [r2, #20]
 8006234:	f8c2 c010 	str.w	ip, [r2, #16]
 8006238:	f280 808f 	bge.w	800635a <_malloc_r+0x20a>
 800623c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006240:	f080 8161 	bcs.w	8006506 <_malloc_r+0x3b6>
 8006244:	08db      	lsrs	r3, r3, #3
 8006246:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800624a:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800624e:	6888      	ldr	r0, [r1, #8]
 8006250:	60f9      	str	r1, [r7, #12]
 8006252:	109b      	asrs	r3, r3, #2
 8006254:	f04f 0901 	mov.w	r9, #1
 8006258:	fa09 f303 	lsl.w	r3, r9, r3
 800625c:	ea43 0308 	orr.w	r3, r3, r8
 8006260:	60b8      	str	r0, [r7, #8]
 8006262:	6053      	str	r3, [r2, #4]
 8006264:	608f      	str	r7, [r1, #8]
 8006266:	60c7      	str	r7, [r0, #12]
 8006268:	2001      	movs	r0, #1
 800626a:	ea4f 02ae 	mov.w	r2, lr, asr #2
 800626e:	4090      	lsls	r0, r2
 8006270:	4298      	cmp	r0, r3
 8006272:	f200 8081 	bhi.w	8006378 <_malloc_r+0x228>
 8006276:	4203      	tst	r3, r0
 8006278:	d106      	bne.n	8006288 <_malloc_r+0x138>
 800627a:	f02e 0e03 	bic.w	lr, lr, #3
 800627e:	0040      	lsls	r0, r0, #1
 8006280:	4203      	tst	r3, r0
 8006282:	f10e 0e04 	add.w	lr, lr, #4
 8006286:	d0fa      	beq.n	800627e <_malloc_r+0x12e>
 8006288:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 800628c:	464f      	mov	r7, r9
 800628e:	46f0      	mov	r8, lr
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	429f      	cmp	r7, r3
 8006294:	d107      	bne.n	80062a6 <_malloc_r+0x156>
 8006296:	e191      	b.n	80065bc <_malloc_r+0x46c>
 8006298:	2a00      	cmp	r2, #0
 800629a:	f280 81b7 	bge.w	800660c <_malloc_r+0x4bc>
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	429f      	cmp	r7, r3
 80062a2:	f000 818b 	beq.w	80065bc <_malloc_r+0x46c>
 80062a6:	6859      	ldr	r1, [r3, #4]
 80062a8:	f021 0103 	bic.w	r1, r1, #3
 80062ac:	1b0a      	subs	r2, r1, r4
 80062ae:	2a0f      	cmp	r2, #15
 80062b0:	ddf2      	ble.n	8006298 <_malloc_r+0x148>
 80062b2:	461f      	mov	r7, r3
 80062b4:	1919      	adds	r1, r3, r4
 80062b6:	68d8      	ldr	r0, [r3, #12]
 80062b8:	f857 ef08 	ldr.w	lr, [r7, #8]!
 80062bc:	508a      	str	r2, [r1, r2]
 80062be:	f044 0401 	orr.w	r4, r4, #1
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	f8ce 000c 	str.w	r0, [lr, #12]
 80062ca:	f8c0 e008 	str.w	lr, [r0, #8]
 80062ce:	605c      	str	r4, [r3, #4]
 80062d0:	6171      	str	r1, [r6, #20]
 80062d2:	6131      	str	r1, [r6, #16]
 80062d4:	f8c1 c00c 	str.w	ip, [r1, #12]
 80062d8:	f8c1 c008 	str.w	ip, [r1, #8]
 80062dc:	604a      	str	r2, [r1, #4]
 80062de:	4628      	mov	r0, r5
 80062e0:	f000 fa6e 	bl	80067c0 <__malloc_unlock>
 80062e4:	e763      	b.n	80061ae <_malloc_r+0x5e>
 80062e6:	f1be 0f04 	cmp.w	lr, #4
 80062ea:	bf9e      	ittt	ls
 80062ec:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 80062f0:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 80062f4:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 80062f8:	f67f af74 	bls.w	80061e4 <_malloc_r+0x94>
 80062fc:	f1be 0f14 	cmp.w	lr, #20
 8006300:	bf9c      	itt	ls
 8006302:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 8006306:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800630a:	f67f af6b 	bls.w	80061e4 <_malloc_r+0x94>
 800630e:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 8006312:	bf9e      	ittt	ls
 8006314:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8006318:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 800631c:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8006320:	f67f af60 	bls.w	80061e4 <_malloc_r+0x94>
 8006324:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8006328:	bf9e      	ittt	ls
 800632a:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 800632e:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 8006332:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8006336:	f67f af55 	bls.w	80061e4 <_malloc_r+0x94>
 800633a:	f240 5354 	movw	r3, #1364	; 0x554
 800633e:	459e      	cmp	lr, r3
 8006340:	bf9d      	ittte	ls
 8006342:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 8006346:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 800634a:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800634e:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 8006352:	bf88      	it	hi
 8006354:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8006358:	e744      	b.n	80061e4 <_malloc_r+0x94>
 800635a:	18fb      	adds	r3, r7, r3
 800635c:	4628      	mov	r0, r5
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	f042 0201 	orr.w	r2, r2, #1
 8006364:	605a      	str	r2, [r3, #4]
 8006366:	3708      	adds	r7, #8
 8006368:	f000 fa2a 	bl	80067c0 <__malloc_unlock>
 800636c:	4638      	mov	r0, r7
 800636e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006372:	bf00      	nop
 8006374:	2000054c 	.word	0x2000054c
 8006378:	68b7      	ldr	r7, [r6, #8]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f023 0803 	bic.w	r8, r3, #3
 8006380:	4544      	cmp	r4, r8
 8006382:	ebc4 0208 	rsb	r2, r4, r8
 8006386:	bf94      	ite	ls
 8006388:	2300      	movls	r3, #0
 800638a:	2301      	movhi	r3, #1
 800638c:	2a0f      	cmp	r2, #15
 800638e:	bfd8      	it	le
 8006390:	f043 0301 	orrle.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 80a7 	beq.w	80064e8 <_malloc_r+0x398>
 800639a:	4bb3      	ldr	r3, [pc, #716]	; (8006668 <_malloc_r+0x518>)
 800639c:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 800666c <_malloc_r+0x51c>
 80063a0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80063a4:	f8da 3000 	ldr.w	r3, [sl]
 80063a8:	3201      	adds	r2, #1
 80063aa:	4423      	add	r3, r4
 80063ac:	bf08      	it	eq
 80063ae:	f103 0b10 	addeq.w	fp, r3, #16
 80063b2:	d006      	beq.n	80063c2 <_malloc_r+0x272>
 80063b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b8:	330f      	adds	r3, #15
 80063ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80063be:	f023 0b0f 	bic.w	fp, r3, #15
 80063c2:	4628      	mov	r0, r5
 80063c4:	4659      	mov	r1, fp
 80063c6:	f000 fe89 	bl	80070dc <_sbrk_r>
 80063ca:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80063ce:	4681      	mov	r9, r0
 80063d0:	f000 8144 	beq.w	800665c <_malloc_r+0x50c>
 80063d4:	eb07 0208 	add.w	r2, r7, r8
 80063d8:	4282      	cmp	r2, r0
 80063da:	f200 8126 	bhi.w	800662a <_malloc_r+0x4da>
 80063de:	f8da 3004 	ldr.w	r3, [sl, #4]
 80063e2:	454a      	cmp	r2, r9
 80063e4:	445b      	add	r3, fp
 80063e6:	f8ca 3004 	str.w	r3, [sl, #4]
 80063ea:	f000 8141 	beq.w	8006670 <_malloc_r+0x520>
 80063ee:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 80063f2:	3101      	adds	r1, #1
 80063f4:	bf15      	itete	ne
 80063f6:	ebc2 0209 	rsbne	r2, r2, r9
 80063fa:	4b9b      	ldreq	r3, [pc, #620]	; (8006668 <_malloc_r+0x518>)
 80063fc:	189b      	addne	r3, r3, r2
 80063fe:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 8006402:	bf18      	it	ne
 8006404:	f8ca 3004 	strne.w	r3, [sl, #4]
 8006408:	f019 0307 	ands.w	r3, r9, #7
 800640c:	bf1f      	itttt	ne
 800640e:	f1c3 0208 	rsbne	r2, r3, #8
 8006412:	4491      	addne	r9, r2
 8006414:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8006418:	f103 0208 	addne.w	r2, r3, #8
 800641c:	eb09 030b 	add.w	r3, r9, fp
 8006420:	bf08      	it	eq
 8006422:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8006426:	051b      	lsls	r3, r3, #20
 8006428:	0d1b      	lsrs	r3, r3, #20
 800642a:	ebc3 0b02 	rsb	fp, r3, r2
 800642e:	4628      	mov	r0, r5
 8006430:	4659      	mov	r1, fp
 8006432:	f000 fe53 	bl	80070dc <_sbrk_r>
 8006436:	1c43      	adds	r3, r0, #1
 8006438:	f000 8126 	beq.w	8006688 <_malloc_r+0x538>
 800643c:	ebc9 0200 	rsb	r2, r9, r0
 8006440:	445a      	add	r2, fp
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	f8da 3004 	ldr.w	r3, [sl, #4]
 800644a:	f8c6 9008 	str.w	r9, [r6, #8]
 800644e:	445b      	add	r3, fp
 8006450:	42b7      	cmp	r7, r6
 8006452:	f8ca 3004 	str.w	r3, [sl, #4]
 8006456:	f8c9 2004 	str.w	r2, [r9, #4]
 800645a:	d015      	beq.n	8006488 <_malloc_r+0x338>
 800645c:	f1b8 0f0f 	cmp.w	r8, #15
 8006460:	f240 80f6 	bls.w	8006650 <_malloc_r+0x500>
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f1a8 020c 	sub.w	r2, r8, #12
 800646a:	f022 0207 	bic.w	r2, r2, #7
 800646e:	18b9      	adds	r1, r7, r2
 8006470:	f000 0e01 	and.w	lr, r0, #1
 8006474:	ea42 0e0e 	orr.w	lr, r2, lr
 8006478:	2005      	movs	r0, #5
 800647a:	2a0f      	cmp	r2, #15
 800647c:	f8c7 e004 	str.w	lr, [r7, #4]
 8006480:	6048      	str	r0, [r1, #4]
 8006482:	6088      	str	r0, [r1, #8]
 8006484:	f200 8104 	bhi.w	8006690 <_malloc_r+0x540>
 8006488:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 800648c:	68b7      	ldr	r7, [r6, #8]
 800648e:	4293      	cmp	r3, r2
 8006490:	bf84      	itt	hi
 8006492:	4a76      	ldrhi	r2, [pc, #472]	; (800666c <_malloc_r+0x51c>)
 8006494:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 8006496:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 800649a:	4293      	cmp	r3, r2
 800649c:	bf84      	itt	hi
 800649e:	4a73      	ldrhi	r2, [pc, #460]	; (800666c <_malloc_r+0x51c>)
 80064a0:	6313      	strhi	r3, [r2, #48]	; 0x30
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f023 0303 	bic.w	r3, r3, #3
 80064a8:	429c      	cmp	r4, r3
 80064aa:	ebc4 0203 	rsb	r2, r4, r3
 80064ae:	bf94      	ite	ls
 80064b0:	2300      	movls	r3, #0
 80064b2:	2301      	movhi	r3, #1
 80064b4:	2a0f      	cmp	r2, #15
 80064b6:	bfd8      	it	le
 80064b8:	f043 0301 	orrle.w	r3, r3, #1
 80064bc:	b1a3      	cbz	r3, 80064e8 <_malloc_r+0x398>
 80064be:	4628      	mov	r0, r5
 80064c0:	f000 f97e 	bl	80067c0 <__malloc_unlock>
 80064c4:	2700      	movs	r7, #0
 80064c6:	e672      	b.n	80061ae <_malloc_r+0x5e>
 80064c8:	18ba      	adds	r2, r7, r2
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6850      	ldr	r0, [r2, #4]
 80064ce:	68b9      	ldr	r1, [r7, #8]
 80064d0:	f040 0001 	orr.w	r0, r0, #1
 80064d4:	6050      	str	r0, [r2, #4]
 80064d6:	60cb      	str	r3, [r1, #12]
 80064d8:	4628      	mov	r0, r5
 80064da:	6099      	str	r1, [r3, #8]
 80064dc:	3708      	adds	r7, #8
 80064de:	f000 f96f 	bl	80067c0 <__malloc_unlock>
 80064e2:	4638      	mov	r0, r7
 80064e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e8:	193b      	adds	r3, r7, r4
 80064ea:	f042 0201 	orr.w	r2, r2, #1
 80064ee:	f044 0401 	orr.w	r4, r4, #1
 80064f2:	607c      	str	r4, [r7, #4]
 80064f4:	4628      	mov	r0, r5
 80064f6:	605a      	str	r2, [r3, #4]
 80064f8:	3708      	adds	r7, #8
 80064fa:	60b3      	str	r3, [r6, #8]
 80064fc:	f000 f960 	bl	80067c0 <__malloc_unlock>
 8006500:	4638      	mov	r0, r7
 8006502:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006506:	0a5a      	lsrs	r2, r3, #9
 8006508:	2a04      	cmp	r2, #4
 800650a:	bf9e      	ittt	ls
 800650c:	ea4f 1893 	movls.w	r8, r3, lsr #6
 8006510:	f108 0838 	addls.w	r8, r8, #56	; 0x38
 8006514:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006518:	d928      	bls.n	800656c <_malloc_r+0x41c>
 800651a:	2a14      	cmp	r2, #20
 800651c:	bf9c      	itt	ls
 800651e:	f102 085b 	addls.w	r8, r2, #91	; 0x5b
 8006522:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006526:	d921      	bls.n	800656c <_malloc_r+0x41c>
 8006528:	2a54      	cmp	r2, #84	; 0x54
 800652a:	bf9e      	ittt	ls
 800652c:	ea4f 3813 	movls.w	r8, r3, lsr #12
 8006530:	f108 086e 	addls.w	r8, r8, #110	; 0x6e
 8006534:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006538:	d918      	bls.n	800656c <_malloc_r+0x41c>
 800653a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800653e:	bf9e      	ittt	ls
 8006540:	ea4f 38d3 	movls.w	r8, r3, lsr #15
 8006544:	f108 0877 	addls.w	r8, r8, #119	; 0x77
 8006548:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800654c:	d90e      	bls.n	800656c <_malloc_r+0x41c>
 800654e:	f240 5154 	movw	r1, #1364	; 0x554
 8006552:	428a      	cmp	r2, r1
 8006554:	bf9d      	ittte	ls
 8006556:	ea4f 4893 	movls.w	r8, r3, lsr #18
 800655a:	f108 087c 	addls.w	r8, r8, #124	; 0x7c
 800655e:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006562:	f44f 707c 	movhi.w	r0, #1008	; 0x3f0
 8006566:	bf88      	it	hi
 8006568:	f04f 087e 	movhi.w	r8, #126	; 0x7e
 800656c:	1830      	adds	r0, r6, r0
 800656e:	493e      	ldr	r1, [pc, #248]	; (8006668 <_malloc_r+0x518>)
 8006570:	6882      	ldr	r2, [r0, #8]
 8006572:	4282      	cmp	r2, r0
 8006574:	d103      	bne.n	800657e <_malloc_r+0x42e>
 8006576:	e061      	b.n	800663c <_malloc_r+0x4ec>
 8006578:	6892      	ldr	r2, [r2, #8]
 800657a:	4290      	cmp	r0, r2
 800657c:	d004      	beq.n	8006588 <_malloc_r+0x438>
 800657e:	6851      	ldr	r1, [r2, #4]
 8006580:	f021 0103 	bic.w	r1, r1, #3
 8006584:	428b      	cmp	r3, r1
 8006586:	d3f7      	bcc.n	8006578 <_malloc_r+0x428>
 8006588:	68d1      	ldr	r1, [r2, #12]
 800658a:	6873      	ldr	r3, [r6, #4]
 800658c:	60f9      	str	r1, [r7, #12]
 800658e:	60ba      	str	r2, [r7, #8]
 8006590:	60d7      	str	r7, [r2, #12]
 8006592:	608f      	str	r7, [r1, #8]
 8006594:	e668      	b.n	8006268 <_malloc_r+0x118>
 8006596:	193b      	adds	r3, r7, r4
 8006598:	f041 0001 	orr.w	r0, r1, #1
 800659c:	f044 0401 	orr.w	r4, r4, #1
 80065a0:	607c      	str	r4, [r7, #4]
 80065a2:	6153      	str	r3, [r2, #20]
 80065a4:	6113      	str	r3, [r2, #16]
 80065a6:	6058      	str	r0, [r3, #4]
 80065a8:	f8c3 c00c 	str.w	ip, [r3, #12]
 80065ac:	f8c3 c008 	str.w	ip, [r3, #8]
 80065b0:	5059      	str	r1, [r3, r1]
 80065b2:	4628      	mov	r0, r5
 80065b4:	f000 f904 	bl	80067c0 <__malloc_unlock>
 80065b8:	3708      	adds	r7, #8
 80065ba:	e5f8      	b.n	80061ae <_malloc_r+0x5e>
 80065bc:	f108 0801 	add.w	r8, r8, #1
 80065c0:	3708      	adds	r7, #8
 80065c2:	f018 0f03 	tst.w	r8, #3
 80065c6:	f47f ae63 	bne.w	8006290 <_malloc_r+0x140>
 80065ca:	464b      	mov	r3, r9
 80065cc:	f01e 0f03 	tst.w	lr, #3
 80065d0:	f1a3 0208 	sub.w	r2, r3, #8
 80065d4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80065d8:	d062      	beq.n	80066a0 <_malloc_r+0x550>
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4293      	cmp	r3, r2
 80065de:	d0f5      	beq.n	80065cc <_malloc_r+0x47c>
 80065e0:	6873      	ldr	r3, [r6, #4]
 80065e2:	0040      	lsls	r0, r0, #1
 80065e4:	4298      	cmp	r0, r3
 80065e6:	f63f aec7 	bhi.w	8006378 <_malloc_r+0x228>
 80065ea:	2800      	cmp	r0, #0
 80065ec:	f43f aec4 	beq.w	8006378 <_malloc_r+0x228>
 80065f0:	4218      	tst	r0, r3
 80065f2:	d05a      	beq.n	80066aa <_malloc_r+0x55a>
 80065f4:	46c6      	mov	lr, r8
 80065f6:	e647      	b.n	8006288 <_malloc_r+0x138>
 80065f8:	f107 0308 	add.w	r3, r7, #8
 80065fc:	697f      	ldr	r7, [r7, #20]
 80065fe:	42bb      	cmp	r3, r7
 8006600:	bf08      	it	eq
 8006602:	f10e 0e02 	addeq.w	lr, lr, #2
 8006606:	f43f ae03 	beq.w	8006210 <_malloc_r+0xc0>
 800660a:	e5c0      	b.n	800618e <_malloc_r+0x3e>
 800660c:	1859      	adds	r1, r3, r1
 800660e:	461f      	mov	r7, r3
 8006610:	6848      	ldr	r0, [r1, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f857 2f08 	ldr.w	r2, [r7, #8]!
 8006618:	f040 0001 	orr.w	r0, r0, #1
 800661c:	6048      	str	r0, [r1, #4]
 800661e:	60d3      	str	r3, [r2, #12]
 8006620:	609a      	str	r2, [r3, #8]
 8006622:	4628      	mov	r0, r5
 8006624:	f000 f8cc 	bl	80067c0 <__malloc_unlock>
 8006628:	e5c1      	b.n	80061ae <_malloc_r+0x5e>
 800662a:	42b7      	cmp	r7, r6
 800662c:	f43f aed7 	beq.w	80063de <_malloc_r+0x28e>
 8006630:	4b0d      	ldr	r3, [pc, #52]	; (8006668 <_malloc_r+0x518>)
 8006632:	689f      	ldr	r7, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	e735      	b.n	80064a8 <_malloc_r+0x358>
 800663c:	684b      	ldr	r3, [r1, #4]
 800663e:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8006642:	2001      	movs	r0, #1
 8006644:	fa00 f008 	lsl.w	r0, r0, r8
 8006648:	4303      	orrs	r3, r0
 800664a:	604b      	str	r3, [r1, #4]
 800664c:	4611      	mov	r1, r2
 800664e:	e79d      	b.n	800658c <_malloc_r+0x43c>
 8006650:	2301      	movs	r3, #1
 8006652:	f8c9 3004 	str.w	r3, [r9, #4]
 8006656:	464f      	mov	r7, r9
 8006658:	2300      	movs	r3, #0
 800665a:	e725      	b.n	80064a8 <_malloc_r+0x358>
 800665c:	68b7      	ldr	r7, [r6, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f023 0303 	bic.w	r3, r3, #3
 8006664:	e720      	b.n	80064a8 <_malloc_r+0x358>
 8006666:	bf00      	nop
 8006668:	2000054c 	.word	0x2000054c
 800666c:	20000970 	.word	0x20000970
 8006670:	0511      	lsls	r1, r2, #20
 8006672:	0d09      	lsrs	r1, r1, #20
 8006674:	2900      	cmp	r1, #0
 8006676:	f47f aeba 	bne.w	80063ee <_malloc_r+0x29e>
 800667a:	68b2      	ldr	r2, [r6, #8]
 800667c:	eb0b 0108 	add.w	r1, fp, r8
 8006680:	f041 0101 	orr.w	r1, r1, #1
 8006684:	6051      	str	r1, [r2, #4]
 8006686:	e6ff      	b.n	8006488 <_malloc_r+0x338>
 8006688:	2201      	movs	r2, #1
 800668a:	f04f 0b00 	mov.w	fp, #0
 800668e:	e6da      	b.n	8006446 <_malloc_r+0x2f6>
 8006690:	4628      	mov	r0, r5
 8006692:	f107 0108 	add.w	r1, r7, #8
 8006696:	f7ff fc4f 	bl	8005f38 <_free_r>
 800669a:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <_malloc_r+0x564>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	e6f3      	b.n	8006488 <_malloc_r+0x338>
 80066a0:	6873      	ldr	r3, [r6, #4]
 80066a2:	ea23 0300 	bic.w	r3, r3, r0
 80066a6:	6073      	str	r3, [r6, #4]
 80066a8:	e79b      	b.n	80065e2 <_malloc_r+0x492>
 80066aa:	0040      	lsls	r0, r0, #1
 80066ac:	f108 0804 	add.w	r8, r8, #4
 80066b0:	e79e      	b.n	80065f0 <_malloc_r+0x4a0>
 80066b2:	bf00      	nop
 80066b4:	20000970 	.word	0x20000970

080066b8 <memchr>:
 80066b8:	0783      	lsls	r3, r0, #30
 80066ba:	b470      	push	{r4, r5, r6}
 80066bc:	b2c9      	uxtb	r1, r1
 80066be:	d00f      	beq.n	80066e0 <memchr+0x28>
 80066c0:	2a00      	cmp	r2, #0
 80066c2:	d033      	beq.n	800672c <memchr+0x74>
 80066c4:	7803      	ldrb	r3, [r0, #0]
 80066c6:	3a01      	subs	r2, #1
 80066c8:	428b      	cmp	r3, r1
 80066ca:	d106      	bne.n	80066da <memchr+0x22>
 80066cc:	e01d      	b.n	800670a <memchr+0x52>
 80066ce:	2a00      	cmp	r2, #0
 80066d0:	d02c      	beq.n	800672c <memchr+0x74>
 80066d2:	7803      	ldrb	r3, [r0, #0]
 80066d4:	3a01      	subs	r2, #1
 80066d6:	428b      	cmp	r3, r1
 80066d8:	d017      	beq.n	800670a <memchr+0x52>
 80066da:	3001      	adds	r0, #1
 80066dc:	0783      	lsls	r3, r0, #30
 80066de:	d1f6      	bne.n	80066ce <memchr+0x16>
 80066e0:	2a03      	cmp	r2, #3
 80066e2:	bf84      	itt	hi
 80066e4:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 80066e8:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 80066ec:	d80f      	bhi.n	800670e <memchr+0x56>
 80066ee:	b1ea      	cbz	r2, 800672c <memchr+0x74>
 80066f0:	7803      	ldrb	r3, [r0, #0]
 80066f2:	3a01      	subs	r2, #1
 80066f4:	428b      	cmp	r3, r1
 80066f6:	4402      	add	r2, r0
 80066f8:	d104      	bne.n	8006704 <memchr+0x4c>
 80066fa:	e006      	b.n	800670a <memchr+0x52>
 80066fc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8006700:	428b      	cmp	r3, r1
 8006702:	d002      	beq.n	800670a <memchr+0x52>
 8006704:	4290      	cmp	r0, r2
 8006706:	d1f9      	bne.n	80066fc <memchr+0x44>
 8006708:	2000      	movs	r0, #0
 800670a:	bc70      	pop	{r4, r5, r6}
 800670c:	4770      	bx	lr
 800670e:	4604      	mov	r4, r0
 8006710:	3004      	adds	r0, #4
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	4073      	eors	r3, r6
 8006716:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 800671a:	ea25 0303 	bic.w	r3, r5, r3
 800671e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8006722:	d105      	bne.n	8006730 <memchr+0x78>
 8006724:	3a04      	subs	r2, #4
 8006726:	2a03      	cmp	r2, #3
 8006728:	d8f1      	bhi.n	800670e <memchr+0x56>
 800672a:	e7e0      	b.n	80066ee <memchr+0x36>
 800672c:	4610      	mov	r0, r2
 800672e:	e7ec      	b.n	800670a <memchr+0x52>
 8006730:	4620      	mov	r0, r4
 8006732:	e7dc      	b.n	80066ee <memchr+0x36>

08006734 <memcpy>:
 8006734:	2a0f      	cmp	r2, #15
 8006736:	b4f0      	push	{r4, r5, r6, r7}
 8006738:	bf98      	it	ls
 800673a:	4603      	movls	r3, r0
 800673c:	d931      	bls.n	80067a2 <memcpy+0x6e>
 800673e:	ea41 0300 	orr.w	r3, r1, r0
 8006742:	079b      	lsls	r3, r3, #30
 8006744:	d137      	bne.n	80067b6 <memcpy+0x82>
 8006746:	460c      	mov	r4, r1
 8006748:	4603      	mov	r3, r0
 800674a:	4615      	mov	r5, r2
 800674c:	6826      	ldr	r6, [r4, #0]
 800674e:	601e      	str	r6, [r3, #0]
 8006750:	6866      	ldr	r6, [r4, #4]
 8006752:	605e      	str	r6, [r3, #4]
 8006754:	68a6      	ldr	r6, [r4, #8]
 8006756:	609e      	str	r6, [r3, #8]
 8006758:	68e6      	ldr	r6, [r4, #12]
 800675a:	3d10      	subs	r5, #16
 800675c:	60de      	str	r6, [r3, #12]
 800675e:	3410      	adds	r4, #16
 8006760:	3310      	adds	r3, #16
 8006762:	2d0f      	cmp	r5, #15
 8006764:	d8f2      	bhi.n	800674c <memcpy+0x18>
 8006766:	f1a2 0410 	sub.w	r4, r2, #16
 800676a:	f024 040f 	bic.w	r4, r4, #15
 800676e:	f002 020f 	and.w	r2, r2, #15
 8006772:	3410      	adds	r4, #16
 8006774:	2a03      	cmp	r2, #3
 8006776:	eb00 0304 	add.w	r3, r0, r4
 800677a:	4421      	add	r1, r4
 800677c:	d911      	bls.n	80067a2 <memcpy+0x6e>
 800677e:	1f0e      	subs	r6, r1, #4
 8006780:	461d      	mov	r5, r3
 8006782:	4614      	mov	r4, r2
 8006784:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8006788:	3c04      	subs	r4, #4
 800678a:	2c03      	cmp	r4, #3
 800678c:	f845 7b04 	str.w	r7, [r5], #4
 8006790:	d8f8      	bhi.n	8006784 <memcpy+0x50>
 8006792:	1f14      	subs	r4, r2, #4
 8006794:	f024 0403 	bic.w	r4, r4, #3
 8006798:	3404      	adds	r4, #4
 800679a:	f002 0203 	and.w	r2, r2, #3
 800679e:	1909      	adds	r1, r1, r4
 80067a0:	191b      	adds	r3, r3, r4
 80067a2:	b132      	cbz	r2, 80067b2 <memcpy+0x7e>
 80067a4:	3901      	subs	r1, #1
 80067a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80067aa:	3a01      	subs	r2, #1
 80067ac:	f803 4b01 	strb.w	r4, [r3], #1
 80067b0:	d1f9      	bne.n	80067a6 <memcpy+0x72>
 80067b2:	bcf0      	pop	{r4, r5, r6, r7}
 80067b4:	4770      	bx	lr
 80067b6:	4603      	mov	r3, r0
 80067b8:	e7f4      	b.n	80067a4 <memcpy+0x70>
 80067ba:	bf00      	nop

080067bc <__malloc_lock>:
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop

080067c0 <__malloc_unlock>:
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop

080067c4 <_Balloc>:
 80067c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80067c6:	b570      	push	{r4, r5, r6, lr}
 80067c8:	4605      	mov	r5, r0
 80067ca:	460c      	mov	r4, r1
 80067cc:	b14b      	cbz	r3, 80067e2 <_Balloc+0x1e>
 80067ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80067d2:	b178      	cbz	r0, 80067f4 <_Balloc+0x30>
 80067d4:	6802      	ldr	r2, [r0, #0]
 80067d6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80067da:	2300      	movs	r3, #0
 80067dc:	6103      	str	r3, [r0, #16]
 80067de:	60c3      	str	r3, [r0, #12]
 80067e0:	bd70      	pop	{r4, r5, r6, pc}
 80067e2:	2104      	movs	r1, #4
 80067e4:	2221      	movs	r2, #33	; 0x21
 80067e6:	f001 fa7f 	bl	8007ce8 <_calloc_r>
 80067ea:	4603      	mov	r3, r0
 80067ec:	64e8      	str	r0, [r5, #76]	; 0x4c
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d1ed      	bne.n	80067ce <_Balloc+0xa>
 80067f2:	bd70      	pop	{r4, r5, r6, pc}
 80067f4:	2101      	movs	r1, #1
 80067f6:	fa11 f604 	lsls.w	r6, r1, r4
 80067fa:	1d72      	adds	r2, r6, #5
 80067fc:	4628      	mov	r0, r5
 80067fe:	0092      	lsls	r2, r2, #2
 8006800:	f001 fa72 	bl	8007ce8 <_calloc_r>
 8006804:	2800      	cmp	r0, #0
 8006806:	d0f4      	beq.n	80067f2 <_Balloc+0x2e>
 8006808:	6044      	str	r4, [r0, #4]
 800680a:	6086      	str	r6, [r0, #8]
 800680c:	e7e5      	b.n	80067da <_Balloc+0x16>
 800680e:	bf00      	nop

08006810 <_Bfree>:
 8006810:	b131      	cbz	r1, 8006820 <_Bfree+0x10>
 8006812:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006814:	684a      	ldr	r2, [r1, #4]
 8006816:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800681a:	6008      	str	r0, [r1, #0]
 800681c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop

08006824 <__multadd>:
 8006824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006826:	460d      	mov	r5, r1
 8006828:	4606      	mov	r6, r0
 800682a:	690c      	ldr	r4, [r1, #16]
 800682c:	f101 0014 	add.w	r0, r1, #20
 8006830:	b083      	sub	sp, #12
 8006832:	2100      	movs	r1, #0
 8006834:	6807      	ldr	r7, [r0, #0]
 8006836:	fa1f fc87 	uxth.w	ip, r7
 800683a:	0c3f      	lsrs	r7, r7, #16
 800683c:	fb02 330c 	mla	r3, r2, ip, r3
 8006840:	fb02 f707 	mul.w	r7, r2, r7
 8006844:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006848:	b29b      	uxth	r3, r3
 800684a:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 800684e:	3101      	adds	r1, #1
 8006850:	f840 3b04 	str.w	r3, [r0], #4
 8006854:	0c3b      	lsrs	r3, r7, #16
 8006856:	428c      	cmp	r4, r1
 8006858:	dcec      	bgt.n	8006834 <__multadd+0x10>
 800685a:	b13b      	cbz	r3, 800686c <__multadd+0x48>
 800685c:	68aa      	ldr	r2, [r5, #8]
 800685e:	4294      	cmp	r4, r2
 8006860:	da07      	bge.n	8006872 <__multadd+0x4e>
 8006862:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8006866:	3401      	adds	r4, #1
 8006868:	6153      	str	r3, [r2, #20]
 800686a:	612c      	str	r4, [r5, #16]
 800686c:	4628      	mov	r0, r5
 800686e:	b003      	add	sp, #12
 8006870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006872:	6869      	ldr	r1, [r5, #4]
 8006874:	9301      	str	r3, [sp, #4]
 8006876:	3101      	adds	r1, #1
 8006878:	4630      	mov	r0, r6
 800687a:	f7ff ffa3 	bl	80067c4 <_Balloc>
 800687e:	692a      	ldr	r2, [r5, #16]
 8006880:	3202      	adds	r2, #2
 8006882:	f105 010c 	add.w	r1, r5, #12
 8006886:	4607      	mov	r7, r0
 8006888:	0092      	lsls	r2, r2, #2
 800688a:	f100 000c 	add.w	r0, r0, #12
 800688e:	f7ff ff51 	bl	8006734 <memcpy>
 8006892:	6869      	ldr	r1, [r5, #4]
 8006894:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8006896:	9b01      	ldr	r3, [sp, #4]
 8006898:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800689c:	6028      	str	r0, [r5, #0]
 800689e:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80068a2:	463d      	mov	r5, r7
 80068a4:	e7dd      	b.n	8006862 <__multadd+0x3e>
 80068a6:	bf00      	nop

080068a8 <__s2b>:
 80068a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068ac:	461e      	mov	r6, r3
 80068ae:	f648 6339 	movw	r3, #36409	; 0x8e39
 80068b2:	f106 0408 	add.w	r4, r6, #8
 80068b6:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 80068ba:	fb83 5304 	smull	r5, r3, r3, r4
 80068be:	17e4      	asrs	r4, r4, #31
 80068c0:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 80068c4:	460f      	mov	r7, r1
 80068c6:	2100      	movs	r1, #0
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	4604      	mov	r4, r0
 80068cc:	4690      	mov	r8, r2
 80068ce:	dd05      	ble.n	80068dc <__s2b+0x34>
 80068d0:	2201      	movs	r2, #1
 80068d2:	2100      	movs	r1, #0
 80068d4:	0052      	lsls	r2, r2, #1
 80068d6:	3101      	adds	r1, #1
 80068d8:	4293      	cmp	r3, r2
 80068da:	dcfb      	bgt.n	80068d4 <__s2b+0x2c>
 80068dc:	4620      	mov	r0, r4
 80068de:	f7ff ff71 	bl	80067c4 <_Balloc>
 80068e2:	9b08      	ldr	r3, [sp, #32]
 80068e4:	6143      	str	r3, [r0, #20]
 80068e6:	2301      	movs	r3, #1
 80068e8:	f1b8 0f09 	cmp.w	r8, #9
 80068ec:	4601      	mov	r1, r0
 80068ee:	6103      	str	r3, [r0, #16]
 80068f0:	dd23      	ble.n	800693a <__s2b+0x92>
 80068f2:	f107 0909 	add.w	r9, r7, #9
 80068f6:	464d      	mov	r5, r9
 80068f8:	4447      	add	r7, r8
 80068fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80068fe:	220a      	movs	r2, #10
 8006900:	3b30      	subs	r3, #48	; 0x30
 8006902:	4620      	mov	r0, r4
 8006904:	f7ff ff8e 	bl	8006824 <__multadd>
 8006908:	42bd      	cmp	r5, r7
 800690a:	4601      	mov	r1, r0
 800690c:	d1f5      	bne.n	80068fa <__s2b+0x52>
 800690e:	eb09 0708 	add.w	r7, r9, r8
 8006912:	3f08      	subs	r7, #8
 8006914:	4546      	cmp	r6, r8
 8006916:	dd0d      	ble.n	8006934 <__s2b+0x8c>
 8006918:	ebc8 0707 	rsb	r7, r8, r7
 800691c:	f817 3008 	ldrb.w	r3, [r7, r8]
 8006920:	220a      	movs	r2, #10
 8006922:	3b30      	subs	r3, #48	; 0x30
 8006924:	4620      	mov	r0, r4
 8006926:	f7ff ff7d 	bl	8006824 <__multadd>
 800692a:	f108 0801 	add.w	r8, r8, #1
 800692e:	45b0      	cmp	r8, r6
 8006930:	4601      	mov	r1, r0
 8006932:	d1f3      	bne.n	800691c <__s2b+0x74>
 8006934:	4608      	mov	r0, r1
 8006936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800693a:	370a      	adds	r7, #10
 800693c:	f04f 0809 	mov.w	r8, #9
 8006940:	e7e8      	b.n	8006914 <__s2b+0x6c>
 8006942:	bf00      	nop

08006944 <__hi0bits>:
 8006944:	4603      	mov	r3, r0
 8006946:	2000      	movs	r0, #0
 8006948:	0c1a      	lsrs	r2, r3, #16
 800694a:	d101      	bne.n	8006950 <__hi0bits+0xc>
 800694c:	041b      	lsls	r3, r3, #16
 800694e:	2010      	movs	r0, #16
 8006950:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006954:	d101      	bne.n	800695a <__hi0bits+0x16>
 8006956:	3008      	adds	r0, #8
 8006958:	021b      	lsls	r3, r3, #8
 800695a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800695e:	d101      	bne.n	8006964 <__hi0bits+0x20>
 8006960:	3004      	adds	r0, #4
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006968:	d101      	bne.n	800696e <__hi0bits+0x2a>
 800696a:	3002      	adds	r0, #2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	db02      	blt.n	8006978 <__hi0bits+0x34>
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	d401      	bmi.n	800697a <__hi0bits+0x36>
 8006976:	2020      	movs	r0, #32
 8006978:	4770      	bx	lr
 800697a:	3001      	adds	r0, #1
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop

08006980 <__lo0bits>:
 8006980:	6803      	ldr	r3, [r0, #0]
 8006982:	4602      	mov	r2, r0
 8006984:	f013 0007 	ands.w	r0, r3, #7
 8006988:	d007      	beq.n	800699a <__lo0bits+0x1a>
 800698a:	07d9      	lsls	r1, r3, #31
 800698c:	d41f      	bmi.n	80069ce <__lo0bits+0x4e>
 800698e:	0798      	lsls	r0, r3, #30
 8006990:	d41f      	bmi.n	80069d2 <__lo0bits+0x52>
 8006992:	089b      	lsrs	r3, r3, #2
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	2002      	movs	r0, #2
 8006998:	4770      	bx	lr
 800699a:	b299      	uxth	r1, r3
 800699c:	b909      	cbnz	r1, 80069a2 <__lo0bits+0x22>
 800699e:	0c1b      	lsrs	r3, r3, #16
 80069a0:	2010      	movs	r0, #16
 80069a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80069a6:	d101      	bne.n	80069ac <__lo0bits+0x2c>
 80069a8:	3008      	adds	r0, #8
 80069aa:	0a1b      	lsrs	r3, r3, #8
 80069ac:	0719      	lsls	r1, r3, #28
 80069ae:	d101      	bne.n	80069b4 <__lo0bits+0x34>
 80069b0:	3004      	adds	r0, #4
 80069b2:	091b      	lsrs	r3, r3, #4
 80069b4:	0799      	lsls	r1, r3, #30
 80069b6:	d101      	bne.n	80069bc <__lo0bits+0x3c>
 80069b8:	3002      	adds	r0, #2
 80069ba:	089b      	lsrs	r3, r3, #2
 80069bc:	07d9      	lsls	r1, r3, #31
 80069be:	d404      	bmi.n	80069ca <__lo0bits+0x4a>
 80069c0:	085b      	lsrs	r3, r3, #1
 80069c2:	d101      	bne.n	80069c8 <__lo0bits+0x48>
 80069c4:	2020      	movs	r0, #32
 80069c6:	4770      	bx	lr
 80069c8:	3001      	adds	r0, #1
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	4770      	bx	lr
 80069ce:	2000      	movs	r0, #0
 80069d0:	4770      	bx	lr
 80069d2:	085b      	lsrs	r3, r3, #1
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	2001      	movs	r0, #1
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop

080069dc <__i2b>:
 80069dc:	b510      	push	{r4, lr}
 80069de:	460c      	mov	r4, r1
 80069e0:	2101      	movs	r1, #1
 80069e2:	f7ff feef 	bl	80067c4 <_Balloc>
 80069e6:	2201      	movs	r2, #1
 80069e8:	6144      	str	r4, [r0, #20]
 80069ea:	6102      	str	r2, [r0, #16]
 80069ec:	bd10      	pop	{r4, pc}
 80069ee:	bf00      	nop

080069f0 <__multiply>:
 80069f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	690f      	ldr	r7, [r1, #16]
 80069f6:	6916      	ldr	r6, [r2, #16]
 80069f8:	42b7      	cmp	r7, r6
 80069fa:	b085      	sub	sp, #20
 80069fc:	460d      	mov	r5, r1
 80069fe:	4692      	mov	sl, r2
 8006a00:	da04      	bge.n	8006a0c <__multiply+0x1c>
 8006a02:	463a      	mov	r2, r7
 8006a04:	4655      	mov	r5, sl
 8006a06:	4637      	mov	r7, r6
 8006a08:	468a      	mov	sl, r1
 8006a0a:	4616      	mov	r6, r2
 8006a0c:	68ab      	ldr	r3, [r5, #8]
 8006a0e:	6869      	ldr	r1, [r5, #4]
 8006a10:	19bc      	adds	r4, r7, r6
 8006a12:	429c      	cmp	r4, r3
 8006a14:	bfc8      	it	gt
 8006a16:	3101      	addgt	r1, #1
 8006a18:	f7ff fed4 	bl	80067c4 <_Balloc>
 8006a1c:	1d21      	adds	r1, r4, #4
 8006a1e:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
 8006a22:	f100 0914 	add.w	r9, r0, #20
 8006a26:	f10b 0b04 	add.w	fp, fp, #4
 8006a2a:	45d9      	cmp	r9, fp
 8006a2c:	9000      	str	r0, [sp, #0]
 8006a2e:	9101      	str	r1, [sp, #4]
 8006a30:	d205      	bcs.n	8006a3e <__multiply+0x4e>
 8006a32:	464b      	mov	r3, r9
 8006a34:	2200      	movs	r2, #0
 8006a36:	f843 2b04 	str.w	r2, [r3], #4
 8006a3a:	459b      	cmp	fp, r3
 8006a3c:	d8fb      	bhi.n	8006a36 <__multiply+0x46>
 8006a3e:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8006a42:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8006a46:	f10a 0a14 	add.w	sl, sl, #20
 8006a4a:	f106 0814 	add.w	r8, r6, #20
 8006a4e:	3514      	adds	r5, #20
 8006a50:	3714      	adds	r7, #20
 8006a52:	45c2      	cmp	sl, r8
 8006a54:	d24f      	bcs.n	8006af6 <__multiply+0x106>
 8006a56:	f8cd b008 	str.w	fp, [sp, #8]
 8006a5a:	9403      	str	r4, [sp, #12]
 8006a5c:	46ab      	mov	fp, r5
 8006a5e:	f85a 5b04 	ldr.w	r5, [sl], #4
 8006a62:	b2ac      	uxth	r4, r5
 8006a64:	b1e4      	cbz	r4, 8006aa0 <__multiply+0xb0>
 8006a66:	465a      	mov	r2, fp
 8006a68:	464b      	mov	r3, r9
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	f852 6b04 	ldr.w	r6, [r2], #4
 8006a70:	681d      	ldr	r5, [r3, #0]
 8006a72:	b2b0      	uxth	r0, r6
 8006a74:	fa11 f185 	uxtah	r1, r1, r5
 8006a78:	0c36      	lsrs	r6, r6, #16
 8006a7a:	0c2d      	lsrs	r5, r5, #16
 8006a7c:	fb04 1000 	mla	r0, r4, r0, r1
 8006a80:	fb04 5106 	mla	r1, r4, r6, r5
 8006a84:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 8006a88:	b280      	uxth	r0, r0
 8006a8a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8006a8e:	0c09      	lsrs	r1, r1, #16
 8006a90:	4297      	cmp	r7, r2
 8006a92:	461d      	mov	r5, r3
 8006a94:	f843 0b04 	str.w	r0, [r3], #4
 8006a98:	d8e8      	bhi.n	8006a6c <__multiply+0x7c>
 8006a9a:	6069      	str	r1, [r5, #4]
 8006a9c:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 8006aa0:	0c2d      	lsrs	r5, r5, #16
 8006aa2:	d021      	beq.n	8006ae8 <__multiply+0xf8>
 8006aa4:	f8d9 6000 	ldr.w	r6, [r9]
 8006aa8:	465b      	mov	r3, fp
 8006aaa:	4630      	mov	r0, r6
 8006aac:	4649      	mov	r1, r9
 8006aae:	f04f 0c00 	mov.w	ip, #0
 8006ab2:	e000      	b.n	8006ab6 <__multiply+0xc6>
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	881a      	ldrh	r2, [r3, #0]
 8006ab8:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
 8006abc:	fb05 cc02 	mla	ip, r5, r2, ip
 8006ac0:	b2b6      	uxth	r6, r6
 8006ac2:	460a      	mov	r2, r1
 8006ac4:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 8006ac8:	f842 6b04 	str.w	r6, [r2], #4
 8006acc:	f853 6b04 	ldr.w	r6, [r3], #4
 8006ad0:	6848      	ldr	r0, [r1, #4]
 8006ad2:	0c36      	lsrs	r6, r6, #16
 8006ad4:	b284      	uxth	r4, r0
 8006ad6:	fb05 4606 	mla	r6, r5, r6, r4
 8006ada:	eb06 461c 	add.w	r6, r6, ip, lsr #16
 8006ade:	429f      	cmp	r7, r3
 8006ae0:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 8006ae4:	d8e6      	bhi.n	8006ab4 <__multiply+0xc4>
 8006ae6:	604e      	str	r6, [r1, #4]
 8006ae8:	45d0      	cmp	r8, sl
 8006aea:	f109 0904 	add.w	r9, r9, #4
 8006aee:	d8b6      	bhi.n	8006a5e <__multiply+0x6e>
 8006af0:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006af4:	9c03      	ldr	r4, [sp, #12]
 8006af6:	2c00      	cmp	r4, #0
 8006af8:	dd0c      	ble.n	8006b14 <__multiply+0x124>
 8006afa:	e89d 0006 	ldmia.w	sp, {r1, r2}
 8006afe:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8006b02:	b93b      	cbnz	r3, 8006b14 <__multiply+0x124>
 8006b04:	f1ab 0b04 	sub.w	fp, fp, #4
 8006b08:	e002      	b.n	8006b10 <__multiply+0x120>
 8006b0a:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
 8006b0e:	b90b      	cbnz	r3, 8006b14 <__multiply+0x124>
 8006b10:	3c01      	subs	r4, #1
 8006b12:	d1fa      	bne.n	8006b0a <__multiply+0x11a>
 8006b14:	9a00      	ldr	r2, [sp, #0]
 8006b16:	6114      	str	r4, [r2, #16]
 8006b18:	4610      	mov	r0, r2
 8006b1a:	b005      	add	sp, #20
 8006b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006b20 <__pow5mult>:
 8006b20:	f012 0303 	ands.w	r3, r2, #3
 8006b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b28:	4615      	mov	r5, r2
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	4688      	mov	r8, r1
 8006b2e:	d12d      	bne.n	8006b8c <__pow5mult+0x6c>
 8006b30:	10ad      	asrs	r5, r5, #2
 8006b32:	d01d      	beq.n	8006b70 <__pow5mult+0x50>
 8006b34:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8006b36:	b92f      	cbnz	r7, 8006b44 <__pow5mult+0x24>
 8006b38:	e031      	b.n	8006b9e <__pow5mult+0x7e>
 8006b3a:	106d      	asrs	r5, r5, #1
 8006b3c:	d018      	beq.n	8006b70 <__pow5mult+0x50>
 8006b3e:	683e      	ldr	r6, [r7, #0]
 8006b40:	b1ce      	cbz	r6, 8006b76 <__pow5mult+0x56>
 8006b42:	4637      	mov	r7, r6
 8006b44:	07e8      	lsls	r0, r5, #31
 8006b46:	d5f8      	bpl.n	8006b3a <__pow5mult+0x1a>
 8006b48:	4641      	mov	r1, r8
 8006b4a:	463a      	mov	r2, r7
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f7ff ff4f 	bl	80069f0 <__multiply>
 8006b52:	f1b8 0f00 	cmp.w	r8, #0
 8006b56:	d017      	beq.n	8006b88 <__pow5mult+0x68>
 8006b58:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006b5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006b5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b62:	106d      	asrs	r5, r5, #1
 8006b64:	f8c8 1000 	str.w	r1, [r8]
 8006b68:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 8006b6c:	4680      	mov	r8, r0
 8006b6e:	d1e6      	bne.n	8006b3e <__pow5mult+0x1e>
 8006b70:	4640      	mov	r0, r8
 8006b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b76:	4639      	mov	r1, r7
 8006b78:	463a      	mov	r2, r7
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f7ff ff38 	bl	80069f0 <__multiply>
 8006b80:	6038      	str	r0, [r7, #0]
 8006b82:	6006      	str	r6, [r0, #0]
 8006b84:	4607      	mov	r7, r0
 8006b86:	e7dd      	b.n	8006b44 <__pow5mult+0x24>
 8006b88:	4680      	mov	r8, r0
 8006b8a:	e7d6      	b.n	8006b3a <__pow5mult+0x1a>
 8006b8c:	1e5e      	subs	r6, r3, #1
 8006b8e:	4a09      	ldr	r2, [pc, #36]	; (8006bb4 <__pow5mult+0x94>)
 8006b90:	2300      	movs	r3, #0
 8006b92:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8006b96:	f7ff fe45 	bl	8006824 <__multadd>
 8006b9a:	4680      	mov	r8, r0
 8006b9c:	e7c8      	b.n	8006b30 <__pow5mult+0x10>
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f240 2171 	movw	r1, #625	; 0x271
 8006ba4:	f7ff ff1a 	bl	80069dc <__i2b>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	64a0      	str	r0, [r4, #72]	; 0x48
 8006bac:	4607      	mov	r7, r0
 8006bae:	6003      	str	r3, [r0, #0]
 8006bb0:	e7c8      	b.n	8006b44 <__pow5mult+0x24>
 8006bb2:	bf00      	nop
 8006bb4:	08008f98 	.word	0x08008f98

08006bb8 <__lshift>:
 8006bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	4691      	mov	r9, r2
 8006bbe:	690a      	ldr	r2, [r1, #16]
 8006bc0:	688b      	ldr	r3, [r1, #8]
 8006bc2:	ea4f 1769 	mov.w	r7, r9, asr #5
 8006bc6:	eb07 0b02 	add.w	fp, r7, r2
 8006bca:	f10b 0501 	add.w	r5, fp, #1
 8006bce:	429d      	cmp	r5, r3
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	6849      	ldr	r1, [r1, #4]
 8006bd6:	dd03      	ble.n	8006be0 <__lshift+0x28>
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	3101      	adds	r1, #1
 8006bdc:	429d      	cmp	r5, r3
 8006bde:	dcfb      	bgt.n	8006bd8 <__lshift+0x20>
 8006be0:	4630      	mov	r0, r6
 8006be2:	f7ff fdef 	bl	80067c4 <_Balloc>
 8006be6:	2f00      	cmp	r7, #0
 8006be8:	f100 0314 	add.w	r3, r0, #20
 8006bec:	dd09      	ble.n	8006c02 <__lshift+0x4a>
 8006bee:	2200      	movs	r2, #0
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	3201      	adds	r2, #1
 8006bf4:	42ba      	cmp	r2, r7
 8006bf6:	f843 1b04 	str.w	r1, [r3], #4
 8006bfa:	d1fa      	bne.n	8006bf2 <__lshift+0x3a>
 8006bfc:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006c00:	3314      	adds	r3, #20
 8006c02:	6922      	ldr	r2, [r4, #16]
 8006c04:	f019 091f 	ands.w	r9, r9, #31
 8006c08:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8006c0c:	f104 0114 	add.w	r1, r4, #20
 8006c10:	f10c 0c14 	add.w	ip, ip, #20
 8006c14:	d022      	beq.n	8006c5c <__lshift+0xa4>
 8006c16:	f1c9 0a20 	rsb	sl, r9, #32
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	e000      	b.n	8006c20 <__lshift+0x68>
 8006c1e:	463b      	mov	r3, r7
 8006c20:	f8d1 8000 	ldr.w	r8, [r1]
 8006c24:	461f      	mov	r7, r3
 8006c26:	fa08 f809 	lsl.w	r8, r8, r9
 8006c2a:	ea48 0202 	orr.w	r2, r8, r2
 8006c2e:	f847 2b04 	str.w	r2, [r7], #4
 8006c32:	f851 2b04 	ldr.w	r2, [r1], #4
 8006c36:	458c      	cmp	ip, r1
 8006c38:	fa22 f20a 	lsr.w	r2, r2, sl
 8006c3c:	d8ef      	bhi.n	8006c1e <__lshift+0x66>
 8006c3e:	605a      	str	r2, [r3, #4]
 8006c40:	b10a      	cbz	r2, 8006c46 <__lshift+0x8e>
 8006c42:	f10b 0502 	add.w	r5, fp, #2
 8006c46:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8006c48:	6862      	ldr	r2, [r4, #4]
 8006c4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c4e:	3d01      	subs	r5, #1
 8006c50:	6105      	str	r5, [r0, #16]
 8006c52:	6021      	str	r1, [r4, #0]
 8006c54:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c5c:	f851 2b04 	ldr.w	r2, [r1], #4
 8006c60:	458c      	cmp	ip, r1
 8006c62:	f843 2b04 	str.w	r2, [r3], #4
 8006c66:	d9ee      	bls.n	8006c46 <__lshift+0x8e>
 8006c68:	f851 2b04 	ldr.w	r2, [r1], #4
 8006c6c:	458c      	cmp	ip, r1
 8006c6e:	f843 2b04 	str.w	r2, [r3], #4
 8006c72:	d8f3      	bhi.n	8006c5c <__lshift+0xa4>
 8006c74:	e7e7      	b.n	8006c46 <__lshift+0x8e>
 8006c76:	bf00      	nop

08006c78 <__mcmp>:
 8006c78:	4603      	mov	r3, r0
 8006c7a:	690a      	ldr	r2, [r1, #16]
 8006c7c:	6900      	ldr	r0, [r0, #16]
 8006c7e:	1a80      	subs	r0, r0, r2
 8006c80:	b430      	push	{r4, r5}
 8006c82:	d111      	bne.n	8006ca8 <__mcmp+0x30>
 8006c84:	3204      	adds	r2, #4
 8006c86:	0094      	lsls	r4, r2, #2
 8006c88:	191a      	adds	r2, r3, r4
 8006c8a:	1909      	adds	r1, r1, r4
 8006c8c:	3314      	adds	r3, #20
 8006c8e:	3204      	adds	r2, #4
 8006c90:	3104      	adds	r1, #4
 8006c92:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8006c96:	f851 4c04 	ldr.w	r4, [r1, #-4]
 8006c9a:	3a04      	subs	r2, #4
 8006c9c:	42a5      	cmp	r5, r4
 8006c9e:	f1a1 0104 	sub.w	r1, r1, #4
 8006ca2:	d103      	bne.n	8006cac <__mcmp+0x34>
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d3f4      	bcc.n	8006c92 <__mcmp+0x1a>
 8006ca8:	bc30      	pop	{r4, r5}
 8006caa:	4770      	bx	lr
 8006cac:	bf38      	it	cc
 8006cae:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
 8006cb2:	d3f9      	bcc.n	8006ca8 <__mcmp+0x30>
 8006cb4:	2001      	movs	r0, #1
 8006cb6:	e7f7      	b.n	8006ca8 <__mcmp+0x30>

08006cb8 <__mdiff>:
 8006cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	4615      	mov	r5, r2
 8006cc6:	f7ff ffd7 	bl	8006c78 <__mcmp>
 8006cca:	1e07      	subs	r7, r0, #0
 8006ccc:	d058      	beq.n	8006d80 <__mdiff+0xc8>
 8006cce:	db52      	blt.n	8006d76 <__mdiff+0xbe>
 8006cd0:	2700      	movs	r7, #0
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	6861      	ldr	r1, [r4, #4]
 8006cd6:	f7ff fd75 	bl	80067c4 <_Balloc>
 8006cda:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8006cde:	692b      	ldr	r3, [r5, #16]
 8006ce0:	60c7      	str	r7, [r0, #12]
 8006ce2:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 8006ce6:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8006cea:	3714      	adds	r7, #20
 8006cec:	f108 0814 	add.w	r8, r8, #20
 8006cf0:	3414      	adds	r4, #20
 8006cf2:	3514      	adds	r5, #20
 8006cf4:	f100 0914 	add.w	r9, r0, #20
 8006cf8:	2600      	movs	r6, #0
 8006cfa:	f854 3b04 	ldr.w	r3, [r4], #4
 8006cfe:	f855 2b04 	ldr.w	r2, [r5], #4
 8006d02:	fa16 f183 	uxtah	r1, r6, r3
 8006d06:	fa1f fa82 	uxth.w	sl, r2
 8006d0a:	0c12      	lsrs	r2, r2, #16
 8006d0c:	ebc2 4613 	rsb	r6, r2, r3, lsr #16
 8006d10:	ebca 0101 	rsb	r1, sl, r1
 8006d14:	eb06 4621 	add.w	r6, r6, r1, asr #16
 8006d18:	464b      	mov	r3, r9
 8006d1a:	b289      	uxth	r1, r1
 8006d1c:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8006d20:	f843 1b04 	str.w	r1, [r3], #4
 8006d24:	1436      	asrs	r6, r6, #16
 8006d26:	45a8      	cmp	r8, r5
 8006d28:	4622      	mov	r2, r4
 8006d2a:	4699      	mov	r9, r3
 8006d2c:	d8e5      	bhi.n	8006cfa <__mdiff+0x42>
 8006d2e:	42a7      	cmp	r7, r4
 8006d30:	4698      	mov	r8, r3
 8006d32:	d914      	bls.n	8006d5e <__mdiff+0xa6>
 8006d34:	f852 5b04 	ldr.w	r5, [r2], #4
 8006d38:	fa16 f685 	uxtah	r6, r6, r5
 8006d3c:	0c2d      	lsrs	r5, r5, #16
 8006d3e:	eb05 4526 	add.w	r5, r5, r6, asr #16
 8006d42:	b2b6      	uxth	r6, r6
 8006d44:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 8006d48:	142e      	asrs	r6, r5, #16
 8006d4a:	4297      	cmp	r7, r2
 8006d4c:	f843 1b04 	str.w	r1, [r3], #4
 8006d50:	d8f0      	bhi.n	8006d34 <__mdiff+0x7c>
 8006d52:	43e3      	mvns	r3, r4
 8006d54:	19db      	adds	r3, r3, r7
 8006d56:	f023 0303 	bic.w	r3, r3, #3
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	4443      	add	r3, r8
 8006d5e:	b931      	cbnz	r1, 8006d6e <__mdiff+0xb6>
 8006d60:	3b04      	subs	r3, #4
 8006d62:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006d66:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006d6a:	2a00      	cmp	r2, #0
 8006d6c:	d0f9      	beq.n	8006d62 <__mdiff+0xaa>
 8006d6e:	f8c0 c010 	str.w	ip, [r0, #16]
 8006d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d76:	4623      	mov	r3, r4
 8006d78:	2701      	movs	r7, #1
 8006d7a:	462c      	mov	r4, r5
 8006d7c:	461d      	mov	r5, r3
 8006d7e:	e7a8      	b.n	8006cd2 <__mdiff+0x1a>
 8006d80:	4630      	mov	r0, r6
 8006d82:	4639      	mov	r1, r7
 8006d84:	f7ff fd1e 	bl	80067c4 <_Balloc>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	6103      	str	r3, [r0, #16]
 8006d8c:	6147      	str	r7, [r0, #20]
 8006d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d92:	bf00      	nop

08006d94 <__ulp>:
 8006d94:	2300      	movs	r3, #0
 8006d96:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8006d9a:	400b      	ands	r3, r1
 8006d9c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	dd02      	ble.n	8006daa <__ulp+0x16>
 8006da4:	4619      	mov	r1, r3
 8006da6:	2000      	movs	r0, #0
 8006da8:	4770      	bx	lr
 8006daa:	425b      	negs	r3, r3
 8006dac:	151b      	asrs	r3, r3, #20
 8006dae:	2100      	movs	r1, #0
 8006db0:	2b13      	cmp	r3, #19
 8006db2:	dd0b      	ble.n	8006dcc <__ulp+0x38>
 8006db4:	2b32      	cmp	r3, #50	; 0x32
 8006db6:	dd02      	ble.n	8006dbe <__ulp+0x2a>
 8006db8:	2301      	movs	r3, #1
 8006dba:	4618      	mov	r0, r3
 8006dbc:	4770      	bx	lr
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8006dc4:	fa12 f303 	lsls.w	r3, r2, r3
 8006dc8:	4618      	mov	r0, r3
 8006dca:	4770      	bx	lr
 8006dcc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006dd0:	fa52 f103 	asrs.w	r1, r2, r3
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	4770      	bx	lr

08006dd8 <__b2d>:
 8006dd8:	6902      	ldr	r2, [r0, #16]
 8006dda:	3204      	adds	r2, #4
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8006de2:	4603      	mov	r3, r0
 8006de4:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8006de8:	4628      	mov	r0, r5
 8006dea:	460f      	mov	r7, r1
 8006dec:	f103 0614 	add.w	r6, r3, #20
 8006df0:	f7ff fda8 	bl	8006944 <__hi0bits>
 8006df4:	f1c0 0320 	rsb	r3, r0, #32
 8006df8:	280a      	cmp	r0, #10
 8006dfa:	603b      	str	r3, [r7, #0]
 8006dfc:	4623      	mov	r3, r4
 8006dfe:	dc14      	bgt.n	8006e2a <__b2d+0x52>
 8006e00:	f1c0 010b 	rsb	r1, r0, #11
 8006e04:	fa35 f701 	lsrs.w	r7, r5, r1
 8006e08:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 8006e0c:	42a6      	cmp	r6, r4
 8006e0e:	f447 1340 	orr.w	r3, r7, #3145728	; 0x300000
 8006e12:	d22e      	bcs.n	8006e72 <__b2d+0x9a>
 8006e14:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006e18:	fa34 f101 	lsrs.w	r1, r4, r1
 8006e1c:	3015      	adds	r0, #21
 8006e1e:	4085      	lsls	r5, r0
 8006e20:	ea41 0205 	orr.w	r2, r1, r5
 8006e24:	4610      	mov	r0, r2
 8006e26:	4619      	mov	r1, r3
 8006e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	42a6      	cmp	r6, r4
 8006e2e:	d202      	bcs.n	8006e36 <__b2d+0x5e>
 8006e30:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8006e34:	3c04      	subs	r4, #4
 8006e36:	f1b0 070b 	subs.w	r7, r0, #11
 8006e3a:	bf02      	ittt	eq
 8006e3c:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
 8006e40:	f445 1340 	orreq.w	r3, r5, #3145728	; 0x300000
 8006e44:	460a      	moveq	r2, r1
 8006e46:	d0ed      	beq.n	8006e24 <__b2d+0x4c>
 8006e48:	40bd      	lsls	r5, r7
 8006e4a:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 8006e4e:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 8006e52:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006e56:	fa21 fc00 	lsr.w	ip, r1, r0
 8006e5a:	42b4      	cmp	r4, r6
 8006e5c:	ea45 030c 	orr.w	r3, r5, ip
 8006e60:	d909      	bls.n	8006e76 <__b2d+0x9e>
 8006e62:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006e66:	fa34 f000 	lsrs.w	r0, r4, r0
 8006e6a:	40b9      	lsls	r1, r7
 8006e6c:	ea40 0201 	orr.w	r2, r0, r1
 8006e70:	e7d8      	b.n	8006e24 <__b2d+0x4c>
 8006e72:	2100      	movs	r1, #0
 8006e74:	e7d2      	b.n	8006e1c <__b2d+0x44>
 8006e76:	2000      	movs	r0, #0
 8006e78:	e7f7      	b.n	8006e6a <__b2d+0x92>
 8006e7a:	bf00      	nop

08006e7c <__d2b>:
 8006e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e80:	b083      	sub	sp, #12
 8006e82:	2101      	movs	r1, #1
 8006e84:	461d      	mov	r5, r3
 8006e86:	4614      	mov	r4, r2
 8006e88:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006e8a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e8c:	f7ff fc9a 	bl	80067c4 <_Balloc>
 8006e90:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 8006e94:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e98:	f3c5 590a 	ubfx	r9, r5, #20, #11
 8006e9c:	4680      	mov	r8, r0
 8006e9e:	9301      	str	r3, [sp, #4]
 8006ea0:	f1b9 0f00 	cmp.w	r9, #0
 8006ea4:	d002      	beq.n	8006eac <__d2b+0x30>
 8006ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006eaa:	9301      	str	r3, [sp, #4]
 8006eac:	2c00      	cmp	r4, #0
 8006eae:	d025      	beq.n	8006efc <__d2b+0x80>
 8006eb0:	a802      	add	r0, sp, #8
 8006eb2:	f840 4d08 	str.w	r4, [r0, #-8]!
 8006eb6:	4668      	mov	r0, sp
 8006eb8:	f7ff fd62 	bl	8006980 <__lo0bits>
 8006ebc:	9b01      	ldr	r3, [sp, #4]
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d132      	bne.n	8006f28 <__d2b+0xac>
 8006ec2:	9a00      	ldr	r2, [sp, #0]
 8006ec4:	f8c8 2014 	str.w	r2, [r8, #20]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	bf0c      	ite	eq
 8006ecc:	2401      	moveq	r4, #1
 8006ece:	2402      	movne	r4, #2
 8006ed0:	f8c8 3018 	str.w	r3, [r8, #24]
 8006ed4:	f8c8 4010 	str.w	r4, [r8, #16]
 8006ed8:	f1b9 0f00 	cmp.w	r9, #0
 8006edc:	d11b      	bne.n	8006f16 <__d2b+0x9a>
 8006ede:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8006ee2:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 8006ee6:	6910      	ldr	r0, [r2, #16]
 8006ee8:	603b      	str	r3, [r7, #0]
 8006eea:	f7ff fd2b 	bl	8006944 <__hi0bits>
 8006eee:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8006ef2:	6030      	str	r0, [r6, #0]
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	b003      	add	sp, #12
 8006ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006efc:	a801      	add	r0, sp, #4
 8006efe:	f7ff fd3f 	bl	8006980 <__lo0bits>
 8006f02:	9b01      	ldr	r3, [sp, #4]
 8006f04:	2401      	movs	r4, #1
 8006f06:	f8c8 3014 	str.w	r3, [r8, #20]
 8006f0a:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f0e:	3020      	adds	r0, #32
 8006f10:	f1b9 0f00 	cmp.w	r9, #0
 8006f14:	d0e3      	beq.n	8006ede <__d2b+0x62>
 8006f16:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 8006f1a:	eb09 0300 	add.w	r3, r9, r0
 8006f1e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	6030      	str	r0, [r6, #0]
 8006f26:	e7e5      	b.n	8006ef4 <__d2b+0x78>
 8006f28:	f1c0 0220 	rsb	r2, r0, #32
 8006f2c:	9900      	ldr	r1, [sp, #0]
 8006f2e:	fa13 f202 	lsls.w	r2, r3, r2
 8006f32:	430a      	orrs	r2, r1
 8006f34:	40c3      	lsrs	r3, r0
 8006f36:	f8c8 2014 	str.w	r2, [r8, #20]
 8006f3a:	9301      	str	r3, [sp, #4]
 8006f3c:	e7c4      	b.n	8006ec8 <__d2b+0x4c>
 8006f3e:	bf00      	nop

08006f40 <__ratio>:
 8006f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f44:	b083      	sub	sp, #12
 8006f46:	460d      	mov	r5, r1
 8006f48:	4669      	mov	r1, sp
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	f7ff ff44 	bl	8006dd8 <__b2d>
 8006f50:	4689      	mov	r9, r1
 8006f52:	4680      	mov	r8, r0
 8006f54:	a901      	add	r1, sp, #4
 8006f56:	4628      	mov	r0, r5
 8006f58:	f7ff ff3e 	bl	8006dd8 <__b2d>
 8006f5c:	460f      	mov	r7, r1
 8006f5e:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8006f62:	692a      	ldr	r2, [r5, #16]
 8006f64:	6924      	ldr	r4, [r4, #16]
 8006f66:	1acb      	subs	r3, r1, r3
 8006f68:	1aa4      	subs	r4, r4, r2
 8006f6a:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8006f6e:	2c00      	cmp	r4, #0
 8006f70:	4606      	mov	r6, r0
 8006f72:	464b      	mov	r3, r9
 8006f74:	4639      	mov	r1, r7
 8006f76:	bfcb      	itete	gt
 8006f78:	eb09 5304 	addgt.w	r3, r9, r4, lsl #20
 8006f7c:	eba7 5104 	suble.w	r1, r7, r4, lsl #20
 8006f80:	4699      	movgt	r9, r3
 8006f82:	460f      	movle	r7, r1
 8006f84:	bfcc      	ite	gt
 8006f86:	46c0      	nopgt			; (mov r8, r8)
 8006f88:	4636      	movle	r6, r6
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	4632      	mov	r2, r6
 8006f90:	463b      	mov	r3, r7
 8006f92:	f001 fc53 	bl	800883c <__aeabi_ddiv>
 8006f96:	b003      	add	sp, #12
 8006f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006f9c <_mprec_log10>:
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	2c17      	cmp	r4, #23
 8006fa6:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8006faa:	dd08      	ble.n	8006fbe <_mprec_log10+0x22>
 8006fac:	2300      	movs	r3, #0
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006fb4:	f001 fb18 	bl	80085e8 <__aeabi_dmul>
 8006fb8:	3c01      	subs	r4, #1
 8006fba:	d1f7      	bne.n	8006fac <_mprec_log10+0x10>
 8006fbc:	bd10      	pop	{r4, pc}
 8006fbe:	4b03      	ldr	r3, [pc, #12]	; (8006fcc <_mprec_log10+0x30>)
 8006fc0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006fc4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8006fc8:	bd10      	pop	{r4, pc}
 8006fca:	bf00      	nop
 8006fcc:	08008f98 	.word	0x08008f98

08006fd0 <__copybits>:
 8006fd0:	6913      	ldr	r3, [r2, #16]
 8006fd2:	3901      	subs	r1, #1
 8006fd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006fd8:	1149      	asrs	r1, r1, #5
 8006fda:	b470      	push	{r4, r5, r6}
 8006fdc:	3314      	adds	r3, #20
 8006fde:	f102 0414 	add.w	r4, r2, #20
 8006fe2:	3101      	adds	r1, #1
 8006fe4:	429c      	cmp	r4, r3
 8006fe6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006fea:	d20c      	bcs.n	8007006 <__copybits+0x36>
 8006fec:	4605      	mov	r5, r0
 8006fee:	f854 6b04 	ldr.w	r6, [r4], #4
 8006ff2:	42a3      	cmp	r3, r4
 8006ff4:	f845 6b04 	str.w	r6, [r5], #4
 8006ff8:	d8f9      	bhi.n	8006fee <__copybits+0x1e>
 8006ffa:	1a9b      	subs	r3, r3, r2
 8006ffc:	3b15      	subs	r3, #21
 8006ffe:	f023 0303 	bic.w	r3, r3, #3
 8007002:	3304      	adds	r3, #4
 8007004:	18c0      	adds	r0, r0, r3
 8007006:	4281      	cmp	r1, r0
 8007008:	d904      	bls.n	8007014 <__copybits+0x44>
 800700a:	2300      	movs	r3, #0
 800700c:	f840 3b04 	str.w	r3, [r0], #4
 8007010:	4281      	cmp	r1, r0
 8007012:	d8fb      	bhi.n	800700c <__copybits+0x3c>
 8007014:	bc70      	pop	{r4, r5, r6}
 8007016:	4770      	bx	lr

08007018 <__any_on>:
 8007018:	6902      	ldr	r2, [r0, #16]
 800701a:	114b      	asrs	r3, r1, #5
 800701c:	429a      	cmp	r2, r3
 800701e:	b410      	push	{r4}
 8007020:	db01      	blt.n	8007026 <__any_on+0xe>
 8007022:	461a      	mov	r2, r3
 8007024:	dc13      	bgt.n	800704e <__any_on+0x36>
 8007026:	3204      	adds	r2, #4
 8007028:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800702c:	f100 0114 	add.w	r1, r0, #20
 8007030:	1d1c      	adds	r4, r3, #4
 8007032:	42a1      	cmp	r1, r4
 8007034:	d218      	bcs.n	8007068 <__any_on+0x50>
 8007036:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800703a:	b92a      	cbnz	r2, 8007048 <__any_on+0x30>
 800703c:	4299      	cmp	r1, r3
 800703e:	d213      	bcs.n	8007068 <__any_on+0x50>
 8007040:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007044:	2a00      	cmp	r2, #0
 8007046:	d0f9      	beq.n	800703c <__any_on+0x24>
 8007048:	2001      	movs	r0, #1
 800704a:	bc10      	pop	{r4}
 800704c:	4770      	bx	lr
 800704e:	f011 011f 	ands.w	r1, r1, #31
 8007052:	d0e8      	beq.n	8007026 <__any_on+0xe>
 8007054:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	fa33 f401 	lsrs.w	r4, r3, r1
 800705e:	fa14 f101 	lsls.w	r1, r4, r1
 8007062:	4299      	cmp	r1, r3
 8007064:	d1f0      	bne.n	8007048 <__any_on+0x30>
 8007066:	e7de      	b.n	8007026 <__any_on+0xe>
 8007068:	2000      	movs	r0, #0
 800706a:	e7ee      	b.n	800704a <__any_on+0x32>

0800706c <__fpclassifyd>:
 800706c:	ea50 0201 	orrs.w	r2, r0, r1
 8007070:	b410      	push	{r4}
 8007072:	460b      	mov	r3, r1
 8007074:	d102      	bne.n	800707c <__fpclassifyd+0x10>
 8007076:	2002      	movs	r0, #2
 8007078:	bc10      	pop	{r4}
 800707a:	4770      	bx	lr
 800707c:	f1d0 0101 	rsbs	r1, r0, #1
 8007080:	bf38      	it	cc
 8007082:	2100      	movcc	r1, #0
 8007084:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007088:	bf08      	it	eq
 800708a:	2800      	cmpeq	r0, #0
 800708c:	d0f3      	beq.n	8007076 <__fpclassifyd+0xa>
 800708e:	f103 44ff 	add.w	r4, r3, #2139095040	; 0x7f800000
 8007092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007096:	f504 04e0 	add.w	r4, r4, #7340032	; 0x700000
 800709a:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 800709e:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 80070a2:	4290      	cmp	r0, r2
 80070a4:	bf88      	it	hi
 80070a6:	4294      	cmphi	r4, r2
 80070a8:	d801      	bhi.n	80070ae <__fpclassifyd+0x42>
 80070aa:	2004      	movs	r0, #4
 80070ac:	e7e4      	b.n	8007078 <__fpclassifyd+0xc>
 80070ae:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 80070b2:	2003      	movs	r0, #3
 80070b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070b8:	bf28      	it	cs
 80070ba:	f5b2 1f80 	cmpcs.w	r2, #1048576	; 0x100000
 80070be:	d3db      	bcc.n	8007078 <__fpclassifyd+0xc>
 80070c0:	2200      	movs	r2, #0
 80070c2:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 80070c6:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 80070ca:	bf18      	it	ne
 80070cc:	4293      	cmpne	r3, r2
 80070ce:	bf14      	ite	ne
 80070d0:	2300      	movne	r3, #0
 80070d2:	2301      	moveq	r3, #1
 80070d4:	ea01 0003 	and.w	r0, r1, r3
 80070d8:	e7ce      	b.n	8007078 <__fpclassifyd+0xc>
 80070da:	bf00      	nop

080070dc <_sbrk_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4c07      	ldr	r4, [pc, #28]	; (80070fc <_sbrk_r+0x20>)
 80070e0:	2300      	movs	r3, #0
 80070e2:	4605      	mov	r5, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	6023      	str	r3, [r4, #0]
 80070e8:	f7fc fbde 	bl	80038a8 <_sbrk>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d000      	beq.n	80070f2 <_sbrk_r+0x16>
 80070f0:	bd38      	pop	{r3, r4, r5, pc}
 80070f2:	6823      	ldr	r3, [r4, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0fb      	beq.n	80070f0 <_sbrk_r+0x14>
 80070f8:	602b      	str	r3, [r5, #0]
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	200015fc 	.word	0x200015fc

08007100 <strcmp>:
 8007100:	ea80 0201 	eor.w	r2, r0, r1
 8007104:	f012 0f03 	tst.w	r2, #3
 8007108:	d13a      	bne.n	8007180 <strcmp_unaligned>
 800710a:	f010 0203 	ands.w	r2, r0, #3
 800710e:	f020 0003 	bic.w	r0, r0, #3
 8007112:	f021 0103 	bic.w	r1, r1, #3
 8007116:	f850 cb04 	ldr.w	ip, [r0], #4
 800711a:	bf08      	it	eq
 800711c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007120:	d00d      	beq.n	800713e <strcmp+0x3e>
 8007122:	f082 0203 	eor.w	r2, r2, #3
 8007126:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800712a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800712e:	fa23 f202 	lsr.w	r2, r3, r2
 8007132:	f851 3b04 	ldr.w	r3, [r1], #4
 8007136:	ea4c 0c02 	orr.w	ip, ip, r2
 800713a:	ea43 0302 	orr.w	r3, r3, r2
 800713e:	bf00      	nop
 8007140:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 8007144:	459c      	cmp	ip, r3
 8007146:	bf01      	itttt	eq
 8007148:	ea22 020c 	biceq.w	r2, r2, ip
 800714c:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8007150:	f850 cb04 	ldreq.w	ip, [r0], #4
 8007154:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007158:	d0f2      	beq.n	8007140 <strcmp+0x40>
 800715a:	ea4f 600c 	mov.w	r0, ip, lsl #24
 800715e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8007162:	2801      	cmp	r0, #1
 8007164:	bf28      	it	cs
 8007166:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 800716a:	bf08      	it	eq
 800716c:	0a1b      	lsreq	r3, r3, #8
 800716e:	d0f4      	beq.n	800715a <strcmp+0x5a>
 8007170:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8007174:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8007178:	eba0 0003 	sub.w	r0, r0, r3
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop

08007180 <strcmp_unaligned>:
 8007180:	f010 0f03 	tst.w	r0, #3
 8007184:	d00a      	beq.n	800719c <strcmp_unaligned+0x1c>
 8007186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800718a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800718e:	2a01      	cmp	r2, #1
 8007190:	bf28      	it	cs
 8007192:	429a      	cmpcs	r2, r3
 8007194:	d0f4      	beq.n	8007180 <strcmp_unaligned>
 8007196:	eba2 0003 	sub.w	r0, r2, r3
 800719a:	4770      	bx	lr
 800719c:	f84d 5d04 	str.w	r5, [sp, #-4]!
 80071a0:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80071a4:	f04f 0201 	mov.w	r2, #1
 80071a8:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 80071ac:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 80071b0:	f001 0c03 	and.w	ip, r1, #3
 80071b4:	f021 0103 	bic.w	r1, r1, #3
 80071b8:	f850 4b04 	ldr.w	r4, [r0], #4
 80071bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80071c0:	f1bc 0f02 	cmp.w	ip, #2
 80071c4:	d026      	beq.n	8007214 <strcmp_unaligned+0x94>
 80071c6:	d84b      	bhi.n	8007260 <strcmp_unaligned+0xe0>
 80071c8:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 80071cc:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 80071d0:	eba4 0302 	sub.w	r3, r4, r2
 80071d4:	ea23 0304 	bic.w	r3, r3, r4
 80071d8:	d10d      	bne.n	80071f6 <strcmp_unaligned+0x76>
 80071da:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 80071de:	bf08      	it	eq
 80071e0:	f851 5b04 	ldreq.w	r5, [r1], #4
 80071e4:	d10a      	bne.n	80071fc <strcmp_unaligned+0x7c>
 80071e6:	ea8c 0c04 	eor.w	ip, ip, r4
 80071ea:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 80071ee:	d10c      	bne.n	800720a <strcmp_unaligned+0x8a>
 80071f0:	f850 4b04 	ldr.w	r4, [r0], #4
 80071f4:	e7e8      	b.n	80071c8 <strcmp_unaligned+0x48>
 80071f6:	ea4f 2515 	mov.w	r5, r5, lsr #8
 80071fa:	e05c      	b.n	80072b6 <strcmp_unaligned+0x136>
 80071fc:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8007200:	d152      	bne.n	80072a8 <strcmp_unaligned+0x128>
 8007202:	780d      	ldrb	r5, [r1, #0]
 8007204:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8007208:	e055      	b.n	80072b6 <strcmp_unaligned+0x136>
 800720a:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 800720e:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8007212:	e050      	b.n	80072b6 <strcmp_unaligned+0x136>
 8007214:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8007218:	eba4 0302 	sub.w	r3, r4, r2
 800721c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007220:	ea23 0304 	bic.w	r3, r3, r4
 8007224:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8007228:	d117      	bne.n	800725a <strcmp_unaligned+0xda>
 800722a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800722e:	bf08      	it	eq
 8007230:	f851 5b04 	ldreq.w	r5, [r1], #4
 8007234:	d107      	bne.n	8007246 <strcmp_unaligned+0xc6>
 8007236:	ea8c 0c04 	eor.w	ip, ip, r4
 800723a:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 800723e:	d108      	bne.n	8007252 <strcmp_unaligned+0xd2>
 8007240:	f850 4b04 	ldr.w	r4, [r0], #4
 8007244:	e7e6      	b.n	8007214 <strcmp_unaligned+0x94>
 8007246:	041b      	lsls	r3, r3, #16
 8007248:	d12e      	bne.n	80072a8 <strcmp_unaligned+0x128>
 800724a:	880d      	ldrh	r5, [r1, #0]
 800724c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007250:	e031      	b.n	80072b6 <strcmp_unaligned+0x136>
 8007252:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8007256:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800725a:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800725e:	e02a      	b.n	80072b6 <strcmp_unaligned+0x136>
 8007260:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 8007264:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8007268:	eba4 0302 	sub.w	r3, r4, r2
 800726c:	ea23 0304 	bic.w	r3, r3, r4
 8007270:	d10d      	bne.n	800728e <strcmp_unaligned+0x10e>
 8007272:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8007276:	bf08      	it	eq
 8007278:	f851 5b04 	ldreq.w	r5, [r1], #4
 800727c:	d10a      	bne.n	8007294 <strcmp_unaligned+0x114>
 800727e:	ea8c 0c04 	eor.w	ip, ip, r4
 8007282:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 8007286:	d10a      	bne.n	800729e <strcmp_unaligned+0x11e>
 8007288:	f850 4b04 	ldr.w	r4, [r0], #4
 800728c:	e7e8      	b.n	8007260 <strcmp_unaligned+0xe0>
 800728e:	ea4f 6515 	mov.w	r5, r5, lsr #24
 8007292:	e010      	b.n	80072b6 <strcmp_unaligned+0x136>
 8007294:	f014 0fff 	tst.w	r4, #255	; 0xff
 8007298:	d006      	beq.n	80072a8 <strcmp_unaligned+0x128>
 800729a:	f851 5b04 	ldr.w	r5, [r1], #4
 800729e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 80072a2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80072a6:	e006      	b.n	80072b6 <strcmp_unaligned+0x136>
 80072a8:	f04f 0000 	mov.w	r0, #0
 80072ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072b0:	f85d 5b04 	ldr.w	r5, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 80072ba:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 80072be:	2801      	cmp	r0, #1
 80072c0:	bf28      	it	cs
 80072c2:	4290      	cmpcs	r0, r2
 80072c4:	bf04      	itt	eq
 80072c6:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 80072ca:	0a2d      	lsreq	r5, r5, #8
 80072cc:	d0f3      	beq.n	80072b6 <strcmp_unaligned+0x136>
 80072ce:	eba2 0000 	sub.w	r0, r2, r0
 80072d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072d6:	f85d 5b04 	ldr.w	r5, [sp], #4
 80072da:	4770      	bx	lr

080072dc <strlen>:
 80072dc:	f020 0103 	bic.w	r1, r0, #3
 80072e0:	f010 0003 	ands.w	r0, r0, #3
 80072e4:	f1c0 0000 	rsb	r0, r0, #0
 80072e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80072ec:	f100 0c04 	add.w	ip, r0, #4
 80072f0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80072f4:	f06f 0200 	mvn.w	r2, #0
 80072f8:	bf1c      	itt	ne
 80072fa:	fa22 f20c 	lsrne.w	r2, r2, ip
 80072fe:	4313      	orrne	r3, r2
 8007300:	f04f 0c01 	mov.w	ip, #1
 8007304:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8007308:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800730c:	eba3 020c 	sub.w	r2, r3, ip
 8007310:	ea22 0203 	bic.w	r2, r2, r3
 8007314:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8007318:	bf04      	itt	eq
 800731a:	f851 3b04 	ldreq.w	r3, [r1], #4
 800731e:	3004      	addeq	r0, #4
 8007320:	d0f4      	beq.n	800730c <strlen+0x30>
 8007322:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007326:	bf1f      	itttt	ne
 8007328:	3001      	addne	r0, #1
 800732a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 800732e:	3001      	addne	r0, #1
 8007330:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8007334:	bf18      	it	ne
 8007336:	3001      	addne	r0, #1
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop

0800733c <__ssprint_r>:
 800733c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007340:	b083      	sub	sp, #12
 8007342:	4691      	mov	r9, r2
 8007344:	9001      	str	r0, [sp, #4]
 8007346:	6890      	ldr	r0, [r2, #8]
 8007348:	6817      	ldr	r7, [r2, #0]
 800734a:	460d      	mov	r5, r1
 800734c:	2800      	cmp	r0, #0
 800734e:	d072      	beq.n	8007436 <__ssprint_r+0xfa>
 8007350:	f04f 0a00 	mov.w	sl, #0
 8007354:	6808      	ldr	r0, [r1, #0]
 8007356:	688b      	ldr	r3, [r1, #8]
 8007358:	4654      	mov	r4, sl
 800735a:	2c00      	cmp	r4, #0
 800735c:	d048      	beq.n	80073f0 <__ssprint_r+0xb4>
 800735e:	429c      	cmp	r4, r3
 8007360:	461e      	mov	r6, r3
 8007362:	4698      	mov	r8, r3
 8007364:	bf3c      	itt	cc
 8007366:	4626      	movcc	r6, r4
 8007368:	46a0      	movcc	r8, r4
 800736a:	d331      	bcc.n	80073d0 <__ssprint_r+0x94>
 800736c:	89ab      	ldrh	r3, [r5, #12]
 800736e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8007372:	d02d      	beq.n	80073d0 <__ssprint_r+0x94>
 8007374:	696e      	ldr	r6, [r5, #20]
 8007376:	6929      	ldr	r1, [r5, #16]
 8007378:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800737c:	ebc1 0800 	rsb	r8, r1, r0
 8007380:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8007384:	1c60      	adds	r0, r4, #1
 8007386:	1076      	asrs	r6, r6, #1
 8007388:	4440      	add	r0, r8
 800738a:	4286      	cmp	r6, r0
 800738c:	4632      	mov	r2, r6
 800738e:	bf3c      	itt	cc
 8007390:	4606      	movcc	r6, r0
 8007392:	4632      	movcc	r2, r6
 8007394:	055b      	lsls	r3, r3, #21
 8007396:	9801      	ldr	r0, [sp, #4]
 8007398:	d52f      	bpl.n	80073fa <__ssprint_r+0xbe>
 800739a:	4611      	mov	r1, r2
 800739c:	f7fe fed8 	bl	8006150 <_malloc_r>
 80073a0:	4683      	mov	fp, r0
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d032      	beq.n	800740c <__ssprint_r+0xd0>
 80073a6:	6929      	ldr	r1, [r5, #16]
 80073a8:	4642      	mov	r2, r8
 80073aa:	f7ff f9c3 	bl	8006734 <memcpy>
 80073ae:	89ab      	ldrh	r3, [r5, #12]
 80073b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b8:	81ab      	strh	r3, [r5, #12]
 80073ba:	ebc8 0306 	rsb	r3, r8, r6
 80073be:	eb0b 0008 	add.w	r0, fp, r8
 80073c2:	616e      	str	r6, [r5, #20]
 80073c4:	f8c5 b010 	str.w	fp, [r5, #16]
 80073c8:	6028      	str	r0, [r5, #0]
 80073ca:	4626      	mov	r6, r4
 80073cc:	60ab      	str	r3, [r5, #8]
 80073ce:	46a0      	mov	r8, r4
 80073d0:	4642      	mov	r2, r8
 80073d2:	4651      	mov	r1, sl
 80073d4:	f000 fcb8 	bl	8007d48 <memmove>
 80073d8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80073dc:	68ab      	ldr	r3, [r5, #8]
 80073de:	6828      	ldr	r0, [r5, #0]
 80073e0:	1b9b      	subs	r3, r3, r6
 80073e2:	4440      	add	r0, r8
 80073e4:	1b14      	subs	r4, r2, r4
 80073e6:	60ab      	str	r3, [r5, #8]
 80073e8:	6028      	str	r0, [r5, #0]
 80073ea:	f8c9 4008 	str.w	r4, [r9, #8]
 80073ee:	b1e4      	cbz	r4, 800742a <__ssprint_r+0xee>
 80073f0:	f8d7 a000 	ldr.w	sl, [r7]
 80073f4:	687c      	ldr	r4, [r7, #4]
 80073f6:	3708      	adds	r7, #8
 80073f8:	e7af      	b.n	800735a <__ssprint_r+0x1e>
 80073fa:	f000 fd47 	bl	8007e8c <_realloc_r>
 80073fe:	4683      	mov	fp, r0
 8007400:	2800      	cmp	r0, #0
 8007402:	d1da      	bne.n	80073ba <__ssprint_r+0x7e>
 8007404:	9801      	ldr	r0, [sp, #4]
 8007406:	6929      	ldr	r1, [r5, #16]
 8007408:	f7fe fd96 	bl	8005f38 <_free_r>
 800740c:	9a01      	ldr	r2, [sp, #4]
 800740e:	230c      	movs	r3, #12
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	89aa      	ldrh	r2, [r5, #12]
 8007414:	2300      	movs	r3, #0
 8007416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800741a:	81aa      	strh	r2, [r5, #12]
 800741c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007420:	f8c9 3008 	str.w	r3, [r9, #8]
 8007424:	f8c9 3004 	str.w	r3, [r9, #4]
 8007428:	e002      	b.n	8007430 <__ssprint_r+0xf4>
 800742a:	f8c9 4004 	str.w	r4, [r9, #4]
 800742e:	4620      	mov	r0, r4
 8007430:	b003      	add	sp, #12
 8007432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007436:	6050      	str	r0, [r2, #4]
 8007438:	e7fa      	b.n	8007430 <__ssprint_r+0xf4>
 800743a:	bf00      	nop

0800743c <_svfiprintf_r>:
 800743c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007440:	468a      	mov	sl, r1
 8007442:	8989      	ldrh	r1, [r1, #12]
 8007444:	b0ad      	sub	sp, #180	; 0xb4
 8007446:	0609      	lsls	r1, r1, #24
 8007448:	9007      	str	r0, [sp, #28]
 800744a:	9305      	str	r3, [sp, #20]
 800744c:	d504      	bpl.n	8007458 <_svfiprintf_r+0x1c>
 800744e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 8422 	beq.w	8007c9c <_svfiprintf_r+0x860>
 8007458:	2300      	movs	r3, #0
 800745a:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 800745e:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 8007462:	a90e      	add	r1, sp, #56	; 0x38
 8007464:	930c      	str	r3, [sp, #48]	; 0x30
 8007466:	932a      	str	r3, [sp, #168]	; 0xa8
 8007468:	9329      	str	r3, [sp, #164]	; 0xa4
 800746a:	9304      	str	r3, [sp, #16]
 800746c:	ebc0 0308 	rsb	r3, r0, r8
 8007470:	9001      	str	r0, [sp, #4]
 8007472:	9128      	str	r1, [sp, #160]	; 0xa0
 8007474:	4617      	mov	r7, r2
 8007476:	460c      	mov	r4, r1
 8007478:	930d      	str	r3, [sp, #52]	; 0x34
 800747a:	783b      	ldrb	r3, [r7, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	bf18      	it	ne
 8007480:	2b25      	cmpne	r3, #37	; 0x25
 8007482:	463d      	mov	r5, r7
 8007484:	d016      	beq.n	80074b4 <_svfiprintf_r+0x78>
 8007486:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800748a:	2b25      	cmp	r3, #37	; 0x25
 800748c:	bf18      	it	ne
 800748e:	2b00      	cmpne	r3, #0
 8007490:	d1f9      	bne.n	8007486 <_svfiprintf_r+0x4a>
 8007492:	1bee      	subs	r6, r5, r7
 8007494:	d00e      	beq.n	80074b4 <_svfiprintf_r+0x78>
 8007496:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007498:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800749a:	6027      	str	r7, [r4, #0]
 800749c:	3301      	adds	r3, #1
 800749e:	1992      	adds	r2, r2, r6
 80074a0:	2b07      	cmp	r3, #7
 80074a2:	6066      	str	r6, [r4, #4]
 80074a4:	922a      	str	r2, [sp, #168]	; 0xa8
 80074a6:	9329      	str	r3, [sp, #164]	; 0xa4
 80074a8:	f300 832a 	bgt.w	8007b00 <_svfiprintf_r+0x6c4>
 80074ac:	3408      	adds	r4, #8
 80074ae:	9b04      	ldr	r3, [sp, #16]
 80074b0:	199b      	adds	r3, r3, r6
 80074b2:	9304      	str	r3, [sp, #16]
 80074b4:	782b      	ldrb	r3, [r5, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 82c5 	beq.w	8007a46 <_svfiprintf_r+0x60a>
 80074bc:	2200      	movs	r2, #0
 80074be:	1c6f      	adds	r7, r5, #1
 80074c0:	4613      	mov	r3, r2
 80074c2:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 80074c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80074ca:	9206      	str	r2, [sp, #24]
 80074cc:	4693      	mov	fp, r2
 80074ce:	f817 2b01 	ldrb.w	r2, [r7], #1
 80074d2:	f1a2 0120 	sub.w	r1, r2, #32
 80074d6:	2958      	cmp	r1, #88	; 0x58
 80074d8:	f200 8178 	bhi.w	80077cc <_svfiprintf_r+0x390>
 80074dc:	e8df f011 	tbh	[pc, r1, lsl #1]
 80074e0:	01760172 	.word	0x01760172
 80074e4:	016f0176 	.word	0x016f0176
 80074e8:	01760176 	.word	0x01760176
 80074ec:	01760176 	.word	0x01760176
 80074f0:	01760176 	.word	0x01760176
 80074f4:	01d800af 	.word	0x01d800af
 80074f8:	00ba0176 	.word	0x00ba0176
 80074fc:	017601da 	.word	0x017601da
 8007500:	01c401d5 	.word	0x01c401d5
 8007504:	01c401c4 	.word	0x01c401c4
 8007508:	01c401c4 	.word	0x01c401c4
 800750c:	01c401c4 	.word	0x01c401c4
 8007510:	01c401c4 	.word	0x01c401c4
 8007514:	01760176 	.word	0x01760176
 8007518:	01760176 	.word	0x01760176
 800751c:	01760176 	.word	0x01760176
 8007520:	01760176 	.word	0x01760176
 8007524:	01760176 	.word	0x01760176
 8007528:	017601a7 	.word	0x017601a7
 800752c:	01760176 	.word	0x01760176
 8007530:	01760176 	.word	0x01760176
 8007534:	01760176 	.word	0x01760176
 8007538:	01760176 	.word	0x01760176
 800753c:	005c0176 	.word	0x005c0176
 8007540:	01760176 	.word	0x01760176
 8007544:	01760176 	.word	0x01760176
 8007548:	00a00176 	.word	0x00a00176
 800754c:	01760176 	.word	0x01760176
 8007550:	0176016a 	.word	0x0176016a
 8007554:	01760176 	.word	0x01760176
 8007558:	01760176 	.word	0x01760176
 800755c:	01760176 	.word	0x01760176
 8007560:	01760176 	.word	0x01760176
 8007564:	01170176 	.word	0x01170176
 8007568:	01760105 	.word	0x01760105
 800756c:	01760176 	.word	0x01760176
 8007570:	01050102 	.word	0x01050102
 8007574:	01760176 	.word	0x01760176
 8007578:	01760059 	.word	0x01760059
 800757c:	005e00d1 	.word	0x005e00d1
 8007580:	005900bd 	.word	0x005900bd
 8007584:	01870176 	.word	0x01870176
 8007588:	00a20176 	.word	0x00a20176
 800758c:	01760176 	.word	0x01760176
 8007590:	00e2      	.short	0x00e2
 8007592:	f04b 0b10 	orr.w	fp, fp, #16
 8007596:	e79a      	b.n	80074ce <_svfiprintf_r+0x92>
 8007598:	f04b 0b10 	orr.w	fp, fp, #16
 800759c:	f01b 0210 	ands.w	r2, fp, #16
 80075a0:	f000 8313 	beq.w	8007bca <_svfiprintf_r+0x78e>
 80075a4:	9805      	ldr	r0, [sp, #20]
 80075a6:	6803      	ldr	r3, [r0, #0]
 80075a8:	2200      	movs	r2, #0
 80075aa:	1a99      	subs	r1, r3, r2
 80075ac:	bf18      	it	ne
 80075ae:	2101      	movne	r1, #1
 80075b0:	3004      	adds	r0, #4
 80075b2:	9005      	str	r0, [sp, #20]
 80075b4:	2000      	movs	r0, #0
 80075b6:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 80075ba:	2d00      	cmp	r5, #0
 80075bc:	bfa8      	it	ge
 80075be:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 80075c2:	2d00      	cmp	r5, #0
 80075c4:	bf18      	it	ne
 80075c6:	f041 0101 	orrne.w	r1, r1, #1
 80075ca:	2900      	cmp	r1, #0
 80075cc:	f000 8228 	beq.w	8007a20 <_svfiprintf_r+0x5e4>
 80075d0:	2a01      	cmp	r2, #1
 80075d2:	f000 82cf 	beq.w	8007b74 <_svfiprintf_r+0x738>
 80075d6:	2a02      	cmp	r2, #2
 80075d8:	bf18      	it	ne
 80075da:	4642      	movne	r2, r8
 80075dc:	d101      	bne.n	80075e2 <_svfiprintf_r+0x1a6>
 80075de:	e2b9      	b.n	8007b54 <_svfiprintf_r+0x718>
 80075e0:	4602      	mov	r2, r0
 80075e2:	f003 0107 	and.w	r1, r3, #7
 80075e6:	3130      	adds	r1, #48	; 0x30
 80075e8:	1e50      	subs	r0, r2, #1
 80075ea:	08db      	lsrs	r3, r3, #3
 80075ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 80075f0:	d1f6      	bne.n	80075e0 <_svfiprintf_r+0x1a4>
 80075f2:	f01b 0f01 	tst.w	fp, #1
 80075f6:	9009      	str	r0, [sp, #36]	; 0x24
 80075f8:	f040 831a 	bne.w	8007c30 <_svfiprintf_r+0x7f4>
 80075fc:	ebc0 0308 	rsb	r3, r0, r8
 8007600:	9303      	str	r3, [sp, #12]
 8007602:	9508      	str	r5, [sp, #32]
 8007604:	9803      	ldr	r0, [sp, #12]
 8007606:	9908      	ldr	r1, [sp, #32]
 8007608:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 800760c:	4288      	cmp	r0, r1
 800760e:	bfb8      	it	lt
 8007610:	4608      	movlt	r0, r1
 8007612:	9002      	str	r0, [sp, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 808b 	beq.w	8007730 <_svfiprintf_r+0x2f4>
 800761a:	3001      	adds	r0, #1
 800761c:	9002      	str	r0, [sp, #8]
 800761e:	e087      	b.n	8007730 <_svfiprintf_r+0x2f4>
 8007620:	f04b 0b10 	orr.w	fp, fp, #16
 8007624:	f01b 0f10 	tst.w	fp, #16
 8007628:	f000 82c1 	beq.w	8007bae <_svfiprintf_r+0x772>
 800762c:	9805      	ldr	r0, [sp, #20]
 800762e:	6803      	ldr	r3, [r0, #0]
 8007630:	2201      	movs	r2, #1
 8007632:	1c19      	adds	r1, r3, #0
 8007634:	bf18      	it	ne
 8007636:	2101      	movne	r1, #1
 8007638:	3004      	adds	r0, #4
 800763a:	9005      	str	r0, [sp, #20]
 800763c:	e7ba      	b.n	80075b4 <_svfiprintf_r+0x178>
 800763e:	9805      	ldr	r0, [sp, #20]
 8007640:	9905      	ldr	r1, [sp, #20]
 8007642:	6800      	ldr	r0, [r0, #0]
 8007644:	1d0a      	adds	r2, r1, #4
 8007646:	2800      	cmp	r0, #0
 8007648:	9006      	str	r0, [sp, #24]
 800764a:	f280 82e0 	bge.w	8007c0e <_svfiprintf_r+0x7d2>
 800764e:	4240      	negs	r0, r0
 8007650:	9006      	str	r0, [sp, #24]
 8007652:	9205      	str	r2, [sp, #20]
 8007654:	f04b 0b04 	orr.w	fp, fp, #4
 8007658:	e739      	b.n	80074ce <_svfiprintf_r+0x92>
 800765a:	9b05      	ldr	r3, [sp, #20]
 800765c:	9905      	ldr	r1, [sp, #20]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2230      	movs	r2, #48	; 0x30
 8007662:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 8007666:	2278      	movs	r2, #120	; 0x78
 8007668:	3104      	adds	r1, #4
 800766a:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 800766e:	4aaf      	ldr	r2, [pc, #700]	; (800792c <_svfiprintf_r+0x4f0>)
 8007670:	9105      	str	r1, [sp, #20]
 8007672:	1c19      	adds	r1, r3, #0
 8007674:	bf18      	it	ne
 8007676:	2101      	movne	r1, #1
 8007678:	920c      	str	r2, [sp, #48]	; 0x30
 800767a:	f04b 0b02 	orr.w	fp, fp, #2
 800767e:	2202      	movs	r2, #2
 8007680:	e798      	b.n	80075b4 <_svfiprintf_r+0x178>
 8007682:	f01b 0f10 	tst.w	fp, #16
 8007686:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800768a:	f040 82dd 	bne.w	8007c48 <_svfiprintf_r+0x80c>
 800768e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007692:	f000 82fb 	beq.w	8007c8c <_svfiprintf_r+0x850>
 8007696:	9a05      	ldr	r2, [sp, #20]
 8007698:	9804      	ldr	r0, [sp, #16]
 800769a:	6813      	ldr	r3, [r2, #0]
 800769c:	3204      	adds	r2, #4
 800769e:	9205      	str	r2, [sp, #20]
 80076a0:	8018      	strh	r0, [r3, #0]
 80076a2:	e6ea      	b.n	800747a <_svfiprintf_r+0x3e>
 80076a4:	49a1      	ldr	r1, [pc, #644]	; (800792c <_svfiprintf_r+0x4f0>)
 80076a6:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80076aa:	910c      	str	r1, [sp, #48]	; 0x30
 80076ac:	f01b 0f10 	tst.w	fp, #16
 80076b0:	d103      	bne.n	80076ba <_svfiprintf_r+0x27e>
 80076b2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80076b6:	f040 82d3 	bne.w	8007c60 <_svfiprintf_r+0x824>
 80076ba:	9805      	ldr	r0, [sp, #20]
 80076bc:	6803      	ldr	r3, [r0, #0]
 80076be:	3004      	adds	r0, #4
 80076c0:	9005      	str	r0, [sp, #20]
 80076c2:	1c19      	adds	r1, r3, #0
 80076c4:	bf18      	it	ne
 80076c6:	2101      	movne	r1, #1
 80076c8:	ea1b 0f01 	tst.w	fp, r1
 80076cc:	f000 8287 	beq.w	8007bde <_svfiprintf_r+0x7a2>
 80076d0:	2130      	movs	r1, #48	; 0x30
 80076d2:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 80076d6:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 80076da:	f04b 0b02 	orr.w	fp, fp, #2
 80076de:	2101      	movs	r1, #1
 80076e0:	2202      	movs	r2, #2
 80076e2:	e767      	b.n	80075b4 <_svfiprintf_r+0x178>
 80076e4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 80076e8:	e6f1      	b.n	80074ce <_svfiprintf_r+0x92>
 80076ea:	f01b 0f10 	tst.w	fp, #16
 80076ee:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80076f2:	f000 80a4 	beq.w	800783e <_svfiprintf_r+0x402>
 80076f6:	9805      	ldr	r0, [sp, #20]
 80076f8:	6803      	ldr	r3, [r0, #0]
 80076fa:	3004      	adds	r0, #4
 80076fc:	9005      	str	r0, [sp, #20]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f2c0 80a9 	blt.w	8007856 <_svfiprintf_r+0x41a>
 8007704:	bf0c      	ite	eq
 8007706:	2100      	moveq	r1, #0
 8007708:	2101      	movne	r1, #1
 800770a:	2201      	movs	r2, #1
 800770c:	e755      	b.n	80075ba <_svfiprintf_r+0x17e>
 800770e:	9b05      	ldr	r3, [sp, #20]
 8007710:	9905      	ldr	r1, [sp, #20]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2001      	movs	r0, #1
 8007716:	2200      	movs	r2, #0
 8007718:	3104      	adds	r1, #4
 800771a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 800771e:	ab1e      	add	r3, sp, #120	; 0x78
 8007720:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8007724:	9002      	str	r0, [sp, #8]
 8007726:	9105      	str	r1, [sp, #20]
 8007728:	9003      	str	r0, [sp, #12]
 800772a:	9309      	str	r3, [sp, #36]	; 0x24
 800772c:	2300      	movs	r3, #0
 800772e:	9308      	str	r3, [sp, #32]
 8007730:	f01b 0302 	ands.w	r3, fp, #2
 8007734:	930a      	str	r3, [sp, #40]	; 0x28
 8007736:	d002      	beq.n	800773e <_svfiprintf_r+0x302>
 8007738:	9b02      	ldr	r3, [sp, #8]
 800773a:	3302      	adds	r3, #2
 800773c:	9302      	str	r3, [sp, #8]
 800773e:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8007742:	930b      	str	r3, [sp, #44]	; 0x2c
 8007744:	f040 80c1 	bne.w	80078ca <_svfiprintf_r+0x48e>
 8007748:	9b06      	ldr	r3, [sp, #24]
 800774a:	9802      	ldr	r0, [sp, #8]
 800774c:	1a1d      	subs	r5, r3, r0
 800774e:	2d00      	cmp	r5, #0
 8007750:	f340 80bb 	ble.w	80078ca <_svfiprintf_r+0x48e>
 8007754:	2d10      	cmp	r5, #16
 8007756:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007758:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800775a:	4e75      	ldr	r6, [pc, #468]	; (8007930 <_svfiprintf_r+0x4f4>)
 800775c:	dd1f      	ble.n	800779e <_svfiprintf_r+0x362>
 800775e:	4621      	mov	r1, r4
 8007760:	f04f 0910 	mov.w	r9, #16
 8007764:	9c07      	ldr	r4, [sp, #28]
 8007766:	e002      	b.n	800776e <_svfiprintf_r+0x332>
 8007768:	3d10      	subs	r5, #16
 800776a:	2d10      	cmp	r5, #16
 800776c:	dd16      	ble.n	800779c <_svfiprintf_r+0x360>
 800776e:	3301      	adds	r3, #1
 8007770:	3210      	adds	r2, #16
 8007772:	e881 0240 	stmia.w	r1, {r6, r9}
 8007776:	3108      	adds	r1, #8
 8007778:	2b07      	cmp	r3, #7
 800777a:	922a      	str	r2, [sp, #168]	; 0xa8
 800777c:	9329      	str	r3, [sp, #164]	; 0xa4
 800777e:	ddf3      	ble.n	8007768 <_svfiprintf_r+0x32c>
 8007780:	4620      	mov	r0, r4
 8007782:	4651      	mov	r1, sl
 8007784:	4642      	mov	r2, r8
 8007786:	f7ff fdd9 	bl	800733c <__ssprint_r>
 800778a:	2800      	cmp	r0, #0
 800778c:	f040 8162 	bne.w	8007a54 <_svfiprintf_r+0x618>
 8007790:	3d10      	subs	r5, #16
 8007792:	2d10      	cmp	r5, #16
 8007794:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007796:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007798:	a90e      	add	r1, sp, #56	; 0x38
 800779a:	dce8      	bgt.n	800776e <_svfiprintf_r+0x332>
 800779c:	460c      	mov	r4, r1
 800779e:	3301      	adds	r3, #1
 80077a0:	1952      	adds	r2, r2, r5
 80077a2:	2b07      	cmp	r3, #7
 80077a4:	6026      	str	r6, [r4, #0]
 80077a6:	6065      	str	r5, [r4, #4]
 80077a8:	922a      	str	r2, [sp, #168]	; 0xa8
 80077aa:	9329      	str	r3, [sp, #164]	; 0xa4
 80077ac:	f300 8219 	bgt.w	8007be2 <_svfiprintf_r+0x7a6>
 80077b0:	3408      	adds	r4, #8
 80077b2:	e08c      	b.n	80078ce <_svfiprintf_r+0x492>
 80077b4:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80077b8:	4b5e      	ldr	r3, [pc, #376]	; (8007934 <_svfiprintf_r+0x4f8>)
 80077ba:	930c      	str	r3, [sp, #48]	; 0x30
 80077bc:	e776      	b.n	80076ac <_svfiprintf_r+0x270>
 80077be:	f04b 0b01 	orr.w	fp, fp, #1
 80077c2:	e684      	b.n	80074ce <_svfiprintf_r+0x92>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	bf08      	it	eq
 80077c8:	2320      	moveq	r3, #32
 80077ca:	e680      	b.n	80074ce <_svfiprintf_r+0x92>
 80077cc:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80077d0:	2a00      	cmp	r2, #0
 80077d2:	f000 8138 	beq.w	8007a46 <_svfiprintf_r+0x60a>
 80077d6:	2301      	movs	r3, #1
 80077d8:	9302      	str	r3, [sp, #8]
 80077da:	2300      	movs	r3, #0
 80077dc:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80077e0:	2301      	movs	r3, #1
 80077e2:	9303      	str	r3, [sp, #12]
 80077e4:	ab1e      	add	r3, sp, #120	; 0x78
 80077e6:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 80077ea:	9309      	str	r3, [sp, #36]	; 0x24
 80077ec:	e79e      	b.n	800772c <_svfiprintf_r+0x2f0>
 80077ee:	9b05      	ldr	r3, [sp, #20]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	9309      	str	r3, [sp, #36]	; 0x24
 80077f4:	9b05      	ldr	r3, [sp, #20]
 80077f6:	3304      	adds	r3, #4
 80077f8:	9305      	str	r3, [sp, #20]
 80077fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077fc:	2600      	movs	r6, #0
 80077fe:	f88d 60af 	strb.w	r6, [sp, #175]	; 0xaf
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 8259 	beq.w	8007cba <_svfiprintf_r+0x87e>
 8007808:	2d00      	cmp	r5, #0
 800780a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800780c:	f2c0 822d 	blt.w	8007c6a <_svfiprintf_r+0x82e>
 8007810:	4631      	mov	r1, r6
 8007812:	462a      	mov	r2, r5
 8007814:	f7fe ff50 	bl	80066b8 <memchr>
 8007818:	2800      	cmp	r0, #0
 800781a:	f000 8258 	beq.w	8007cce <_svfiprintf_r+0x892>
 800781e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007820:	9608      	str	r6, [sp, #32]
 8007822:	1ac0      	subs	r0, r0, r3
 8007824:	42a8      	cmp	r0, r5
 8007826:	9003      	str	r0, [sp, #12]
 8007828:	bfc8      	it	gt
 800782a:	9503      	strgt	r5, [sp, #12]
 800782c:	e6ea      	b.n	8007604 <_svfiprintf_r+0x1c8>
 800782e:	f04b 0b10 	orr.w	fp, fp, #16
 8007832:	f01b 0f10 	tst.w	fp, #16
 8007836:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800783a:	f47f af5c 	bne.w	80076f6 <_svfiprintf_r+0x2ba>
 800783e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007842:	f000 8208 	beq.w	8007c56 <_svfiprintf_r+0x81a>
 8007846:	9905      	ldr	r1, [sp, #20]
 8007848:	f9b1 3000 	ldrsh.w	r3, [r1]
 800784c:	3104      	adds	r1, #4
 800784e:	2b00      	cmp	r3, #0
 8007850:	9105      	str	r1, [sp, #20]
 8007852:	f6bf af57 	bge.w	8007704 <_svfiprintf_r+0x2c8>
 8007856:	425b      	negs	r3, r3
 8007858:	222d      	movs	r2, #45	; 0x2d
 800785a:	1c19      	adds	r1, r3, #0
 800785c:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8007860:	bf18      	it	ne
 8007862:	2101      	movne	r1, #1
 8007864:	2201      	movs	r2, #1
 8007866:	e6a8      	b.n	80075ba <_svfiprintf_r+0x17e>
 8007868:	4638      	mov	r0, r7
 800786a:	2100      	movs	r1, #0
 800786c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8007870:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007874:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007878:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800787c:	2e09      	cmp	r6, #9
 800787e:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 8007882:	4607      	mov	r7, r0
 8007884:	d9f2      	bls.n	800786c <_svfiprintf_r+0x430>
 8007886:	9106      	str	r1, [sp, #24]
 8007888:	e623      	b.n	80074d2 <_svfiprintf_r+0x96>
 800788a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800788e:	e61e      	b.n	80074ce <_svfiprintf_r+0x92>
 8007890:	232b      	movs	r3, #43	; 0x2b
 8007892:	e61c      	b.n	80074ce <_svfiprintf_r+0x92>
 8007894:	f817 2b01 	ldrb.w	r2, [r7], #1
 8007898:	2a2a      	cmp	r2, #42	; 0x2a
 800789a:	f000 81ae 	beq.w	8007bfa <_svfiprintf_r+0x7be>
 800789e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80078a2:	2500      	movs	r5, #0
 80078a4:	2909      	cmp	r1, #9
 80078a6:	f63f ae14 	bhi.w	80074d2 <_svfiprintf_r+0x96>
 80078aa:	4638      	mov	r0, r7
 80078ac:	2500      	movs	r5, #0
 80078ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078b2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80078b6:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 80078ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80078be:	2909      	cmp	r1, #9
 80078c0:	4607      	mov	r7, r0
 80078c2:	d9f4      	bls.n	80078ae <_svfiprintf_r+0x472>
 80078c4:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80078c8:	e603      	b.n	80074d2 <_svfiprintf_r+0x96>
 80078ca:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80078cc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80078ce:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
 80078d2:	b161      	cbz	r1, 80078ee <_svfiprintf_r+0x4b2>
 80078d4:	3301      	adds	r3, #1
 80078d6:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
 80078da:	3201      	adds	r2, #1
 80078dc:	6021      	str	r1, [r4, #0]
 80078de:	2101      	movs	r1, #1
 80078e0:	2b07      	cmp	r3, #7
 80078e2:	6061      	str	r1, [r4, #4]
 80078e4:	922a      	str	r2, [sp, #168]	; 0xa8
 80078e6:	9329      	str	r3, [sp, #164]	; 0xa4
 80078e8:	f300 811e 	bgt.w	8007b28 <_svfiprintf_r+0x6ec>
 80078ec:	3408      	adds	r4, #8
 80078ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078f0:	b159      	cbz	r1, 800790a <_svfiprintf_r+0x4ce>
 80078f2:	3301      	adds	r3, #1
 80078f4:	a92b      	add	r1, sp, #172	; 0xac
 80078f6:	3202      	adds	r2, #2
 80078f8:	6021      	str	r1, [r4, #0]
 80078fa:	2102      	movs	r1, #2
 80078fc:	2b07      	cmp	r3, #7
 80078fe:	6061      	str	r1, [r4, #4]
 8007900:	922a      	str	r2, [sp, #168]	; 0xa8
 8007902:	9329      	str	r3, [sp, #164]	; 0xa4
 8007904:	f300 811b 	bgt.w	8007b3e <_svfiprintf_r+0x702>
 8007908:	3408      	adds	r4, #8
 800790a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800790c:	2880      	cmp	r0, #128	; 0x80
 800790e:	f000 80ae 	beq.w	8007a6e <_svfiprintf_r+0x632>
 8007912:	9808      	ldr	r0, [sp, #32]
 8007914:	9903      	ldr	r1, [sp, #12]
 8007916:	1a45      	subs	r5, r0, r1
 8007918:	2d00      	cmp	r5, #0
 800791a:	dd33      	ble.n	8007984 <_svfiprintf_r+0x548>
 800791c:	2d10      	cmp	r5, #16
 800791e:	4e06      	ldr	r6, [pc, #24]	; (8007938 <_svfiprintf_r+0x4fc>)
 8007920:	dd26      	ble.n	8007970 <_svfiprintf_r+0x534>
 8007922:	4621      	mov	r1, r4
 8007924:	f04f 0910 	mov.w	r9, #16
 8007928:	9c07      	ldr	r4, [sp, #28]
 800792a:	e00a      	b.n	8007942 <_svfiprintf_r+0x506>
 800792c:	0800922c 	.word	0x0800922c
 8007930:	080090c0 	.word	0x080090c0
 8007934:	08009218 	.word	0x08009218
 8007938:	080090d0 	.word	0x080090d0
 800793c:	3d10      	subs	r5, #16
 800793e:	2d10      	cmp	r5, #16
 8007940:	dd15      	ble.n	800796e <_svfiprintf_r+0x532>
 8007942:	3301      	adds	r3, #1
 8007944:	3210      	adds	r2, #16
 8007946:	e881 0240 	stmia.w	r1, {r6, r9}
 800794a:	3108      	adds	r1, #8
 800794c:	2b07      	cmp	r3, #7
 800794e:	922a      	str	r2, [sp, #168]	; 0xa8
 8007950:	9329      	str	r3, [sp, #164]	; 0xa4
 8007952:	ddf3      	ble.n	800793c <_svfiprintf_r+0x500>
 8007954:	4620      	mov	r0, r4
 8007956:	4651      	mov	r1, sl
 8007958:	4642      	mov	r2, r8
 800795a:	f7ff fcef 	bl	800733c <__ssprint_r>
 800795e:	2800      	cmp	r0, #0
 8007960:	d178      	bne.n	8007a54 <_svfiprintf_r+0x618>
 8007962:	3d10      	subs	r5, #16
 8007964:	2d10      	cmp	r5, #16
 8007966:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007968:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800796a:	a90e      	add	r1, sp, #56	; 0x38
 800796c:	dce9      	bgt.n	8007942 <_svfiprintf_r+0x506>
 800796e:	460c      	mov	r4, r1
 8007970:	3301      	adds	r3, #1
 8007972:	1952      	adds	r2, r2, r5
 8007974:	2b07      	cmp	r3, #7
 8007976:	6026      	str	r6, [r4, #0]
 8007978:	6065      	str	r5, [r4, #4]
 800797a:	922a      	str	r2, [sp, #168]	; 0xa8
 800797c:	9329      	str	r3, [sp, #164]	; 0xa4
 800797e:	f300 80c8 	bgt.w	8007b12 <_svfiprintf_r+0x6d6>
 8007982:	3408      	adds	r4, #8
 8007984:	9903      	ldr	r1, [sp, #12]
 8007986:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007988:	3301      	adds	r3, #1
 800798a:	1852      	adds	r2, r2, r1
 800798c:	2b07      	cmp	r3, #7
 800798e:	e884 0003 	stmia.w	r4, {r0, r1}
 8007992:	922a      	str	r2, [sp, #168]	; 0xa8
 8007994:	9329      	str	r3, [sp, #164]	; 0xa4
 8007996:	bfd8      	it	le
 8007998:	f104 0108 	addle.w	r1, r4, #8
 800799c:	f300 809a 	bgt.w	8007ad4 <_svfiprintf_r+0x698>
 80079a0:	f01b 0f04 	tst.w	fp, #4
 80079a4:	d02e      	beq.n	8007a04 <_svfiprintf_r+0x5c8>
 80079a6:	9b06      	ldr	r3, [sp, #24]
 80079a8:	9802      	ldr	r0, [sp, #8]
 80079aa:	1a1d      	subs	r5, r3, r0
 80079ac:	2d00      	cmp	r5, #0
 80079ae:	dd29      	ble.n	8007a04 <_svfiprintf_r+0x5c8>
 80079b0:	2d10      	cmp	r5, #16
 80079b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80079b4:	4e97      	ldr	r6, [pc, #604]	; (8007c14 <_svfiprintf_r+0x7d8>)
 80079b6:	dd1c      	ble.n	80079f2 <_svfiprintf_r+0x5b6>
 80079b8:	2410      	movs	r4, #16
 80079ba:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80079be:	e002      	b.n	80079c6 <_svfiprintf_r+0x58a>
 80079c0:	3d10      	subs	r5, #16
 80079c2:	2d10      	cmp	r5, #16
 80079c4:	dd15      	ble.n	80079f2 <_svfiprintf_r+0x5b6>
 80079c6:	3301      	adds	r3, #1
 80079c8:	3210      	adds	r2, #16
 80079ca:	600e      	str	r6, [r1, #0]
 80079cc:	604c      	str	r4, [r1, #4]
 80079ce:	3108      	adds	r1, #8
 80079d0:	2b07      	cmp	r3, #7
 80079d2:	922a      	str	r2, [sp, #168]	; 0xa8
 80079d4:	9329      	str	r3, [sp, #164]	; 0xa4
 80079d6:	ddf3      	ble.n	80079c0 <_svfiprintf_r+0x584>
 80079d8:	4648      	mov	r0, r9
 80079da:	4651      	mov	r1, sl
 80079dc:	4642      	mov	r2, r8
 80079de:	f7ff fcad 	bl	800733c <__ssprint_r>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d136      	bne.n	8007a54 <_svfiprintf_r+0x618>
 80079e6:	3d10      	subs	r5, #16
 80079e8:	2d10      	cmp	r5, #16
 80079ea:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80079ec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80079ee:	a90e      	add	r1, sp, #56	; 0x38
 80079f0:	dce9      	bgt.n	80079c6 <_svfiprintf_r+0x58a>
 80079f2:	3301      	adds	r3, #1
 80079f4:	18aa      	adds	r2, r5, r2
 80079f6:	2b07      	cmp	r3, #7
 80079f8:	600e      	str	r6, [r1, #0]
 80079fa:	604d      	str	r5, [r1, #4]
 80079fc:	922a      	str	r2, [sp, #168]	; 0xa8
 80079fe:	9329      	str	r3, [sp, #164]	; 0xa4
 8007a00:	f300 810c 	bgt.w	8007c1c <_svfiprintf_r+0x7e0>
 8007a04:	9b04      	ldr	r3, [sp, #16]
 8007a06:	9902      	ldr	r1, [sp, #8]
 8007a08:	9806      	ldr	r0, [sp, #24]
 8007a0a:	4281      	cmp	r1, r0
 8007a0c:	bfac      	ite	ge
 8007a0e:	185b      	addge	r3, r3, r1
 8007a10:	181b      	addlt	r3, r3, r0
 8007a12:	9304      	str	r3, [sp, #16]
 8007a14:	2a00      	cmp	r2, #0
 8007a16:	d167      	bne.n	8007ae8 <_svfiprintf_r+0x6ac>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	9329      	str	r3, [sp, #164]	; 0xa4
 8007a1c:	ac0e      	add	r4, sp, #56	; 0x38
 8007a1e:	e52c      	b.n	800747a <_svfiprintf_r+0x3e>
 8007a20:	2a00      	cmp	r2, #0
 8007a22:	d169      	bne.n	8007af8 <_svfiprintf_r+0x6bc>
 8007a24:	f01b 0f01 	tst.w	fp, #1
 8007a28:	bf04      	itt	eq
 8007a2a:	9203      	streq	r2, [sp, #12]
 8007a2c:	f8cd 8024 	streq.w	r8, [sp, #36]	; 0x24
 8007a30:	f43f ade7 	beq.w	8007602 <_svfiprintf_r+0x1c6>
 8007a34:	2330      	movs	r3, #48	; 0x30
 8007a36:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 8007a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a3c:	9303      	str	r3, [sp, #12]
 8007a3e:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 8007a42:	9309      	str	r3, [sp, #36]	; 0x24
 8007a44:	e5dd      	b.n	8007602 <_svfiprintf_r+0x1c6>
 8007a46:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007a48:	b123      	cbz	r3, 8007a54 <_svfiprintf_r+0x618>
 8007a4a:	9807      	ldr	r0, [sp, #28]
 8007a4c:	4651      	mov	r1, sl
 8007a4e:	aa28      	add	r2, sp, #160	; 0xa0
 8007a50:	f7ff fc74 	bl	800733c <__ssprint_r>
 8007a54:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007a58:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007a5c:	9b04      	ldr	r3, [sp, #16]
 8007a5e:	bf18      	it	ne
 8007a60:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8007a64:	9304      	str	r3, [sp, #16]
 8007a66:	9804      	ldr	r0, [sp, #16]
 8007a68:	b02d      	add	sp, #180	; 0xb4
 8007a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6e:	9906      	ldr	r1, [sp, #24]
 8007a70:	9802      	ldr	r0, [sp, #8]
 8007a72:	1a0d      	subs	r5, r1, r0
 8007a74:	2d00      	cmp	r5, #0
 8007a76:	f77f af4c 	ble.w	8007912 <_svfiprintf_r+0x4d6>
 8007a7a:	2d10      	cmp	r5, #16
 8007a7c:	4e66      	ldr	r6, [pc, #408]	; (8007c18 <_svfiprintf_r+0x7dc>)
 8007a7e:	dd1e      	ble.n	8007abe <_svfiprintf_r+0x682>
 8007a80:	4621      	mov	r1, r4
 8007a82:	f04f 0910 	mov.w	r9, #16
 8007a86:	9c07      	ldr	r4, [sp, #28]
 8007a88:	e002      	b.n	8007a90 <_svfiprintf_r+0x654>
 8007a8a:	3d10      	subs	r5, #16
 8007a8c:	2d10      	cmp	r5, #16
 8007a8e:	dd15      	ble.n	8007abc <_svfiprintf_r+0x680>
 8007a90:	3301      	adds	r3, #1
 8007a92:	3210      	adds	r2, #16
 8007a94:	e881 0240 	stmia.w	r1, {r6, r9}
 8007a98:	3108      	adds	r1, #8
 8007a9a:	2b07      	cmp	r3, #7
 8007a9c:	922a      	str	r2, [sp, #168]	; 0xa8
 8007a9e:	9329      	str	r3, [sp, #164]	; 0xa4
 8007aa0:	ddf3      	ble.n	8007a8a <_svfiprintf_r+0x64e>
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	4651      	mov	r1, sl
 8007aa6:	4642      	mov	r2, r8
 8007aa8:	f7ff fc48 	bl	800733c <__ssprint_r>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d1d1      	bne.n	8007a54 <_svfiprintf_r+0x618>
 8007ab0:	3d10      	subs	r5, #16
 8007ab2:	2d10      	cmp	r5, #16
 8007ab4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007ab6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007ab8:	a90e      	add	r1, sp, #56	; 0x38
 8007aba:	dce9      	bgt.n	8007a90 <_svfiprintf_r+0x654>
 8007abc:	460c      	mov	r4, r1
 8007abe:	3301      	adds	r3, #1
 8007ac0:	1952      	adds	r2, r2, r5
 8007ac2:	2b07      	cmp	r3, #7
 8007ac4:	6026      	str	r6, [r4, #0]
 8007ac6:	6065      	str	r5, [r4, #4]
 8007ac8:	922a      	str	r2, [sp, #168]	; 0xa8
 8007aca:	9329      	str	r3, [sp, #164]	; 0xa4
 8007acc:	f300 80d2 	bgt.w	8007c74 <_svfiprintf_r+0x838>
 8007ad0:	3408      	adds	r4, #8
 8007ad2:	e71e      	b.n	8007912 <_svfiprintf_r+0x4d6>
 8007ad4:	9807      	ldr	r0, [sp, #28]
 8007ad6:	4651      	mov	r1, sl
 8007ad8:	4642      	mov	r2, r8
 8007ada:	f7ff fc2f 	bl	800733c <__ssprint_r>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d1b8      	bne.n	8007a54 <_svfiprintf_r+0x618>
 8007ae2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007ae4:	a90e      	add	r1, sp, #56	; 0x38
 8007ae6:	e75b      	b.n	80079a0 <_svfiprintf_r+0x564>
 8007ae8:	9807      	ldr	r0, [sp, #28]
 8007aea:	4651      	mov	r1, sl
 8007aec:	4642      	mov	r2, r8
 8007aee:	f7ff fc25 	bl	800733c <__ssprint_r>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d090      	beq.n	8007a18 <_svfiprintf_r+0x5dc>
 8007af6:	e7ad      	b.n	8007a54 <_svfiprintf_r+0x618>
 8007af8:	9103      	str	r1, [sp, #12]
 8007afa:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8007afe:	e580      	b.n	8007602 <_svfiprintf_r+0x1c6>
 8007b00:	9807      	ldr	r0, [sp, #28]
 8007b02:	4651      	mov	r1, sl
 8007b04:	4642      	mov	r2, r8
 8007b06:	f7ff fc19 	bl	800733c <__ssprint_r>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	d1a2      	bne.n	8007a54 <_svfiprintf_r+0x618>
 8007b0e:	ac0e      	add	r4, sp, #56	; 0x38
 8007b10:	e4cd      	b.n	80074ae <_svfiprintf_r+0x72>
 8007b12:	9807      	ldr	r0, [sp, #28]
 8007b14:	4651      	mov	r1, sl
 8007b16:	4642      	mov	r2, r8
 8007b18:	f7ff fc10 	bl	800733c <__ssprint_r>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	d199      	bne.n	8007a54 <_svfiprintf_r+0x618>
 8007b20:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007b22:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007b24:	ac0e      	add	r4, sp, #56	; 0x38
 8007b26:	e72d      	b.n	8007984 <_svfiprintf_r+0x548>
 8007b28:	9807      	ldr	r0, [sp, #28]
 8007b2a:	4651      	mov	r1, sl
 8007b2c:	4642      	mov	r2, r8
 8007b2e:	f7ff fc05 	bl	800733c <__ssprint_r>
 8007b32:	2800      	cmp	r0, #0
 8007b34:	d18e      	bne.n	8007a54 <_svfiprintf_r+0x618>
 8007b36:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007b38:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007b3a:	ac0e      	add	r4, sp, #56	; 0x38
 8007b3c:	e6d7      	b.n	80078ee <_svfiprintf_r+0x4b2>
 8007b3e:	9807      	ldr	r0, [sp, #28]
 8007b40:	4651      	mov	r1, sl
 8007b42:	4642      	mov	r2, r8
 8007b44:	f7ff fbfa 	bl	800733c <__ssprint_r>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d183      	bne.n	8007a54 <_svfiprintf_r+0x618>
 8007b4c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007b4e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007b50:	ac0e      	add	r4, sp, #56	; 0x38
 8007b52:	e6da      	b.n	800790a <_svfiprintf_r+0x4ce>
 8007b54:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007b56:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8007b5a:	f003 000f 	and.w	r0, r3, #15
 8007b5e:	4611      	mov	r1, r2
 8007b60:	5c30      	ldrb	r0, [r6, r0]
 8007b62:	3a01      	subs	r2, #1
 8007b64:	091b      	lsrs	r3, r3, #4
 8007b66:	7008      	strb	r0, [r1, #0]
 8007b68:	d1f7      	bne.n	8007b5a <_svfiprintf_r+0x71e>
 8007b6a:	ebc1 0308 	rsb	r3, r1, r8
 8007b6e:	9109      	str	r1, [sp, #36]	; 0x24
 8007b70:	9303      	str	r3, [sp, #12]
 8007b72:	e546      	b.n	8007602 <_svfiprintf_r+0x1c6>
 8007b74:	2b09      	cmp	r3, #9
 8007b76:	bf82      	ittt	hi
 8007b78:	f64c 46cd 	movwhi	r6, #52429	; 0xcccd
 8007b7c:	f10d 019f 	addhi.w	r1, sp, #159	; 0x9f
 8007b80:	f6cc 46cc 	movthi	r6, #52428	; 0xcccc
 8007b84:	d801      	bhi.n	8007b8a <_svfiprintf_r+0x74e>
 8007b86:	3330      	adds	r3, #48	; 0x30
 8007b88:	e755      	b.n	8007a36 <_svfiprintf_r+0x5fa>
 8007b8a:	fba6 0203 	umull	r0, r2, r6, r3
 8007b8e:	08d2      	lsrs	r2, r2, #3
 8007b90:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8007b94:	eba3 0c4c 	sub.w	ip, r3, ip, lsl #1
 8007b98:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8007b9c:	4608      	mov	r0, r1
 8007b9e:	f881 c000 	strb.w	ip, [r1]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	3901      	subs	r1, #1
 8007ba6:	2a00      	cmp	r2, #0
 8007ba8:	d1ef      	bne.n	8007b8a <_svfiprintf_r+0x74e>
 8007baa:	9009      	str	r0, [sp, #36]	; 0x24
 8007bac:	e526      	b.n	80075fc <_svfiprintf_r+0x1c0>
 8007bae:	9905      	ldr	r1, [sp, #20]
 8007bb0:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007bb4:	bf14      	ite	ne
 8007bb6:	880b      	ldrhne	r3, [r1, #0]
 8007bb8:	680b      	ldreq	r3, [r1, #0]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	9805      	ldr	r0, [sp, #20]
 8007bbe:	1c19      	adds	r1, r3, #0
 8007bc0:	bf18      	it	ne
 8007bc2:	2101      	movne	r1, #1
 8007bc4:	3004      	adds	r0, #4
 8007bc6:	9005      	str	r0, [sp, #20]
 8007bc8:	e4f4      	b.n	80075b4 <_svfiprintf_r+0x178>
 8007bca:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8007bce:	bf0b      	itete	eq
 8007bd0:	9a05      	ldreq	r2, [sp, #20]
 8007bd2:	9905      	ldrne	r1, [sp, #20]
 8007bd4:	6813      	ldreq	r3, [r2, #0]
 8007bd6:	880b      	ldrhne	r3, [r1, #0]
 8007bd8:	bf08      	it	eq
 8007bda:	460a      	moveq	r2, r1
 8007bdc:	e7ee      	b.n	8007bbc <_svfiprintf_r+0x780>
 8007bde:	2202      	movs	r2, #2
 8007be0:	e4e8      	b.n	80075b4 <_svfiprintf_r+0x178>
 8007be2:	9807      	ldr	r0, [sp, #28]
 8007be4:	4651      	mov	r1, sl
 8007be6:	4642      	mov	r2, r8
 8007be8:	f7ff fba8 	bl	800733c <__ssprint_r>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	f47f af31 	bne.w	8007a54 <_svfiprintf_r+0x618>
 8007bf2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007bf4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007bf6:	ac0e      	add	r4, sp, #56	; 0x38
 8007bf8:	e669      	b.n	80078ce <_svfiprintf_r+0x492>
 8007bfa:	9a05      	ldr	r2, [sp, #20]
 8007bfc:	6815      	ldr	r5, [r2, #0]
 8007bfe:	3204      	adds	r2, #4
 8007c00:	2d00      	cmp	r5, #0
 8007c02:	bfbc      	itt	lt
 8007c04:	9205      	strlt	r2, [sp, #20]
 8007c06:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8007c0a:	f6ff ac60 	blt.w	80074ce <_svfiprintf_r+0x92>
 8007c0e:	9205      	str	r2, [sp, #20]
 8007c10:	e45d      	b.n	80074ce <_svfiprintf_r+0x92>
 8007c12:	bf00      	nop
 8007c14:	080090c0 	.word	0x080090c0
 8007c18:	080090d0 	.word	0x080090d0
 8007c1c:	9807      	ldr	r0, [sp, #28]
 8007c1e:	4651      	mov	r1, sl
 8007c20:	4642      	mov	r2, r8
 8007c22:	f7ff fb8b 	bl	800733c <__ssprint_r>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f47f af14 	bne.w	8007a54 <_svfiprintf_r+0x618>
 8007c2c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007c2e:	e6e9      	b.n	8007a04 <_svfiprintf_r+0x5c8>
 8007c30:	2930      	cmp	r1, #48	; 0x30
 8007c32:	d004      	beq.n	8007c3e <_svfiprintf_r+0x802>
 8007c34:	1e93      	subs	r3, r2, #2
 8007c36:	9309      	str	r3, [sp, #36]	; 0x24
 8007c38:	2330      	movs	r3, #48	; 0x30
 8007c3a:	f802 3c02 	strb.w	r3, [r2, #-2]
 8007c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c40:	ebc3 0308 	rsb	r3, r3, r8
 8007c44:	9303      	str	r3, [sp, #12]
 8007c46:	e4dc      	b.n	8007602 <_svfiprintf_r+0x1c6>
 8007c48:	9805      	ldr	r0, [sp, #20]
 8007c4a:	9904      	ldr	r1, [sp, #16]
 8007c4c:	6803      	ldr	r3, [r0, #0]
 8007c4e:	3004      	adds	r0, #4
 8007c50:	9005      	str	r0, [sp, #20]
 8007c52:	6019      	str	r1, [r3, #0]
 8007c54:	e411      	b.n	800747a <_svfiprintf_r+0x3e>
 8007c56:	9a05      	ldr	r2, [sp, #20]
 8007c58:	6813      	ldr	r3, [r2, #0]
 8007c5a:	3204      	adds	r2, #4
 8007c5c:	9205      	str	r2, [sp, #20]
 8007c5e:	e54e      	b.n	80076fe <_svfiprintf_r+0x2c2>
 8007c60:	9905      	ldr	r1, [sp, #20]
 8007c62:	880b      	ldrh	r3, [r1, #0]
 8007c64:	3104      	adds	r1, #4
 8007c66:	9105      	str	r1, [sp, #20]
 8007c68:	e52b      	b.n	80076c2 <_svfiprintf_r+0x286>
 8007c6a:	f7ff fb37 	bl	80072dc <strlen>
 8007c6e:	9608      	str	r6, [sp, #32]
 8007c70:	9003      	str	r0, [sp, #12]
 8007c72:	e4c7      	b.n	8007604 <_svfiprintf_r+0x1c8>
 8007c74:	9807      	ldr	r0, [sp, #28]
 8007c76:	4651      	mov	r1, sl
 8007c78:	4642      	mov	r2, r8
 8007c7a:	f7ff fb5f 	bl	800733c <__ssprint_r>
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	f47f aee8 	bne.w	8007a54 <_svfiprintf_r+0x618>
 8007c84:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007c86:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007c88:	ac0e      	add	r4, sp, #56	; 0x38
 8007c8a:	e642      	b.n	8007912 <_svfiprintf_r+0x4d6>
 8007c8c:	9905      	ldr	r1, [sp, #20]
 8007c8e:	9a04      	ldr	r2, [sp, #16]
 8007c90:	680b      	ldr	r3, [r1, #0]
 8007c92:	3104      	adds	r1, #4
 8007c94:	9105      	str	r1, [sp, #20]
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	f7ff bbef 	b.w	800747a <_svfiprintf_r+0x3e>
 8007c9c:	2140      	movs	r1, #64	; 0x40
 8007c9e:	9200      	str	r2, [sp, #0]
 8007ca0:	f7fe fa56 	bl	8006150 <_malloc_r>
 8007ca4:	9a00      	ldr	r2, [sp, #0]
 8007ca6:	f8ca 0000 	str.w	r0, [sl]
 8007caa:	f8ca 0010 	str.w	r0, [sl, #16]
 8007cae:	b188      	cbz	r0, 8007cd4 <_svfiprintf_r+0x898>
 8007cb0:	2340      	movs	r3, #64	; 0x40
 8007cb2:	f8ca 3014 	str.w	r3, [sl, #20]
 8007cb6:	f7ff bbcf 	b.w	8007458 <_svfiprintf_r+0x1c>
 8007cba:	2d06      	cmp	r5, #6
 8007cbc:	bf28      	it	cs
 8007cbe:	2506      	movcs	r5, #6
 8007cc0:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8007cc4:	9302      	str	r3, [sp, #8]
 8007cc6:	4b07      	ldr	r3, [pc, #28]	; (8007ce4 <_svfiprintf_r+0x8a8>)
 8007cc8:	9503      	str	r5, [sp, #12]
 8007cca:	9309      	str	r3, [sp, #36]	; 0x24
 8007ccc:	e52e      	b.n	800772c <_svfiprintf_r+0x2f0>
 8007cce:	9503      	str	r5, [sp, #12]
 8007cd0:	9008      	str	r0, [sp, #32]
 8007cd2:	e497      	b.n	8007604 <_svfiprintf_r+0x1c8>
 8007cd4:	9807      	ldr	r0, [sp, #28]
 8007cd6:	230c      	movs	r3, #12
 8007cd8:	6003      	str	r3, [r0, #0]
 8007cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cde:	9304      	str	r3, [sp, #16]
 8007ce0:	e6c1      	b.n	8007a66 <_svfiprintf_r+0x62a>
 8007ce2:	bf00      	nop
 8007ce4:	08009240 	.word	0x08009240

08007ce8 <_calloc_r>:
 8007ce8:	b510      	push	{r4, lr}
 8007cea:	fb01 f102 	mul.w	r1, r1, r2
 8007cee:	f7fe fa2f 	bl	8006150 <_malloc_r>
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	b300      	cbz	r0, 8007d38 <_calloc_r+0x50>
 8007cf6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007cfa:	f022 0203 	bic.w	r2, r2, #3
 8007cfe:	3a04      	subs	r2, #4
 8007d00:	2a24      	cmp	r2, #36	; 0x24
 8007d02:	d81b      	bhi.n	8007d3c <_calloc_r+0x54>
 8007d04:	2a13      	cmp	r2, #19
 8007d06:	bf98      	it	ls
 8007d08:	4602      	movls	r2, r0
 8007d0a:	d911      	bls.n	8007d30 <_calloc_r+0x48>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	2a1b      	cmp	r2, #27
 8007d10:	6003      	str	r3, [r0, #0]
 8007d12:	6043      	str	r3, [r0, #4]
 8007d14:	bf98      	it	ls
 8007d16:	f100 0208 	addls.w	r2, r0, #8
 8007d1a:	d909      	bls.n	8007d30 <_calloc_r+0x48>
 8007d1c:	2a24      	cmp	r2, #36	; 0x24
 8007d1e:	6083      	str	r3, [r0, #8]
 8007d20:	60c3      	str	r3, [r0, #12]
 8007d22:	bf11      	iteee	ne
 8007d24:	f100 0210 	addne.w	r2, r0, #16
 8007d28:	6103      	streq	r3, [r0, #16]
 8007d2a:	6143      	streq	r3, [r0, #20]
 8007d2c:	f100 0218 	addeq.w	r2, r0, #24
 8007d30:	2300      	movs	r3, #0
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	6053      	str	r3, [r2, #4]
 8007d36:	6093      	str	r3, [r2, #8]
 8007d38:	4620      	mov	r0, r4
 8007d3a:	bd10      	pop	{r4, pc}
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	f000 f85b 	bl	8007df8 <memset>
 8007d42:	4620      	mov	r0, r4
 8007d44:	bd10      	pop	{r4, pc}
 8007d46:	bf00      	nop

08007d48 <memmove>:
 8007d48:	4288      	cmp	r0, r1
 8007d4a:	b4f0      	push	{r4, r5, r6, r7}
 8007d4c:	d912      	bls.n	8007d74 <memmove+0x2c>
 8007d4e:	188d      	adds	r5, r1, r2
 8007d50:	42a8      	cmp	r0, r5
 8007d52:	d20f      	bcs.n	8007d74 <memmove+0x2c>
 8007d54:	b162      	cbz	r2, 8007d70 <memmove+0x28>
 8007d56:	4251      	negs	r1, r2
 8007d58:	4613      	mov	r3, r2
 8007d5a:	1882      	adds	r2, r0, r2
 8007d5c:	186d      	adds	r5, r5, r1
 8007d5e:	1852      	adds	r2, r2, r1
 8007d60:	18ec      	adds	r4, r5, r3
 8007d62:	18d1      	adds	r1, r2, r3
 8007d64:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	f801 4c01 	strb.w	r4, [r1, #-1]
 8007d6e:	d1f7      	bne.n	8007d60 <memmove+0x18>
 8007d70:	bcf0      	pop	{r4, r5, r6, r7}
 8007d72:	4770      	bx	lr
 8007d74:	2a0f      	cmp	r2, #15
 8007d76:	bf98      	it	ls
 8007d78:	4603      	movls	r3, r0
 8007d7a:	d931      	bls.n	8007de0 <memmove+0x98>
 8007d7c:	ea41 0300 	orr.w	r3, r1, r0
 8007d80:	079b      	lsls	r3, r3, #30
 8007d82:	d137      	bne.n	8007df4 <memmove+0xac>
 8007d84:	460c      	mov	r4, r1
 8007d86:	4603      	mov	r3, r0
 8007d88:	4615      	mov	r5, r2
 8007d8a:	6826      	ldr	r6, [r4, #0]
 8007d8c:	601e      	str	r6, [r3, #0]
 8007d8e:	6866      	ldr	r6, [r4, #4]
 8007d90:	605e      	str	r6, [r3, #4]
 8007d92:	68a6      	ldr	r6, [r4, #8]
 8007d94:	609e      	str	r6, [r3, #8]
 8007d96:	68e6      	ldr	r6, [r4, #12]
 8007d98:	3d10      	subs	r5, #16
 8007d9a:	60de      	str	r6, [r3, #12]
 8007d9c:	3410      	adds	r4, #16
 8007d9e:	3310      	adds	r3, #16
 8007da0:	2d0f      	cmp	r5, #15
 8007da2:	d8f2      	bhi.n	8007d8a <memmove+0x42>
 8007da4:	f1a2 0410 	sub.w	r4, r2, #16
 8007da8:	f024 040f 	bic.w	r4, r4, #15
 8007dac:	f002 020f 	and.w	r2, r2, #15
 8007db0:	3410      	adds	r4, #16
 8007db2:	2a03      	cmp	r2, #3
 8007db4:	eb00 0304 	add.w	r3, r0, r4
 8007db8:	4421      	add	r1, r4
 8007dba:	d911      	bls.n	8007de0 <memmove+0x98>
 8007dbc:	1f0e      	subs	r6, r1, #4
 8007dbe:	461d      	mov	r5, r3
 8007dc0:	4614      	mov	r4, r2
 8007dc2:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8007dc6:	3c04      	subs	r4, #4
 8007dc8:	2c03      	cmp	r4, #3
 8007dca:	f845 7b04 	str.w	r7, [r5], #4
 8007dce:	d8f8      	bhi.n	8007dc2 <memmove+0x7a>
 8007dd0:	1f14      	subs	r4, r2, #4
 8007dd2:	f024 0403 	bic.w	r4, r4, #3
 8007dd6:	3404      	adds	r4, #4
 8007dd8:	f002 0203 	and.w	r2, r2, #3
 8007ddc:	1909      	adds	r1, r1, r4
 8007dde:	191b      	adds	r3, r3, r4
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	d0c5      	beq.n	8007d70 <memmove+0x28>
 8007de4:	3901      	subs	r1, #1
 8007de6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007dea:	3a01      	subs	r2, #1
 8007dec:	f803 4b01 	strb.w	r4, [r3], #1
 8007df0:	d1f9      	bne.n	8007de6 <memmove+0x9e>
 8007df2:	e7bd      	b.n	8007d70 <memmove+0x28>
 8007df4:	4603      	mov	r3, r0
 8007df6:	e7f5      	b.n	8007de4 <memmove+0x9c>

08007df8 <memset>:
 8007df8:	f010 0f03 	tst.w	r0, #3
 8007dfc:	b470      	push	{r4, r5, r6}
 8007dfe:	4603      	mov	r3, r0
 8007e00:	d042      	beq.n	8007e88 <memset+0x90>
 8007e02:	2a00      	cmp	r2, #0
 8007e04:	d03e      	beq.n	8007e84 <memset+0x8c>
 8007e06:	3a01      	subs	r2, #1
 8007e08:	b2cd      	uxtb	r5, r1
 8007e0a:	e003      	b.n	8007e14 <memset+0x1c>
 8007e0c:	1e54      	subs	r4, r2, #1
 8007e0e:	2a00      	cmp	r2, #0
 8007e10:	d038      	beq.n	8007e84 <memset+0x8c>
 8007e12:	4622      	mov	r2, r4
 8007e14:	f803 5b01 	strb.w	r5, [r3], #1
 8007e18:	f013 0f03 	tst.w	r3, #3
 8007e1c:	461c      	mov	r4, r3
 8007e1e:	d1f5      	bne.n	8007e0c <memset+0x14>
 8007e20:	2a03      	cmp	r2, #3
 8007e22:	d929      	bls.n	8007e78 <memset+0x80>
 8007e24:	b2cd      	uxtb	r5, r1
 8007e26:	2a0f      	cmp	r2, #15
 8007e28:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007e2c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007e30:	bf84      	itt	hi
 8007e32:	4623      	movhi	r3, r4
 8007e34:	4616      	movhi	r6, r2
 8007e36:	d911      	bls.n	8007e5c <memset+0x64>
 8007e38:	3e10      	subs	r6, #16
 8007e3a:	601d      	str	r5, [r3, #0]
 8007e3c:	605d      	str	r5, [r3, #4]
 8007e3e:	609d      	str	r5, [r3, #8]
 8007e40:	60dd      	str	r5, [r3, #12]
 8007e42:	3310      	adds	r3, #16
 8007e44:	2e0f      	cmp	r6, #15
 8007e46:	d8f7      	bhi.n	8007e38 <memset+0x40>
 8007e48:	f1a2 0310 	sub.w	r3, r2, #16
 8007e4c:	f023 030f 	bic.w	r3, r3, #15
 8007e50:	f002 020f 	and.w	r2, r2, #15
 8007e54:	3310      	adds	r3, #16
 8007e56:	2a03      	cmp	r2, #3
 8007e58:	441c      	add	r4, r3
 8007e5a:	d90d      	bls.n	8007e78 <memset+0x80>
 8007e5c:	4626      	mov	r6, r4
 8007e5e:	4613      	mov	r3, r2
 8007e60:	3b04      	subs	r3, #4
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	f846 5b04 	str.w	r5, [r6], #4
 8007e68:	d8fa      	bhi.n	8007e60 <memset+0x68>
 8007e6a:	1f13      	subs	r3, r2, #4
 8007e6c:	f023 0303 	bic.w	r3, r3, #3
 8007e70:	3304      	adds	r3, #4
 8007e72:	f002 0203 	and.w	r2, r2, #3
 8007e76:	18e4      	adds	r4, r4, r3
 8007e78:	b2c9      	uxtb	r1, r1
 8007e7a:	b11a      	cbz	r2, 8007e84 <memset+0x8c>
 8007e7c:	3a01      	subs	r2, #1
 8007e7e:	f804 1b01 	strb.w	r1, [r4], #1
 8007e82:	d1fb      	bne.n	8007e7c <memset+0x84>
 8007e84:	bc70      	pop	{r4, r5, r6}
 8007e86:	4770      	bx	lr
 8007e88:	4604      	mov	r4, r0
 8007e8a:	e7c9      	b.n	8007e20 <memset+0x28>

08007e8c <_realloc_r>:
 8007e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e90:	460c      	mov	r4, r1
 8007e92:	b083      	sub	sp, #12
 8007e94:	4607      	mov	r7, r0
 8007e96:	4690      	mov	r8, r2
 8007e98:	2900      	cmp	r1, #0
 8007e9a:	f000 80fe 	beq.w	800809a <_realloc_r+0x20e>
 8007e9e:	f108 050b 	add.w	r5, r8, #11
 8007ea2:	f7fe fc8b 	bl	80067bc <__malloc_lock>
 8007ea6:	2d16      	cmp	r5, #22
 8007ea8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007eac:	d87d      	bhi.n	8007faa <_realloc_r+0x11e>
 8007eae:	2210      	movs	r2, #16
 8007eb0:	2600      	movs	r6, #0
 8007eb2:	4615      	mov	r5, r2
 8007eb4:	4545      	cmp	r5, r8
 8007eb6:	bf38      	it	cc
 8007eb8:	f046 0601 	orrcc.w	r6, r6, #1
 8007ebc:	2e00      	cmp	r6, #0
 8007ebe:	f040 80f2 	bne.w	80080a6 <_realloc_r+0x21a>
 8007ec2:	f021 0a03 	bic.w	sl, r1, #3
 8007ec6:	4592      	cmp	sl, r2
 8007ec8:	f1a4 0b08 	sub.w	fp, r4, #8
 8007ecc:	bfa8      	it	ge
 8007ece:	4656      	movge	r6, sl
 8007ed0:	da55      	bge.n	8007f7e <_realloc_r+0xf2>
 8007ed2:	4ba0      	ldr	r3, [pc, #640]	; (8008154 <_realloc_r+0x2c8>)
 8007ed4:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8007ed8:	eb0b 000a 	add.w	r0, fp, sl
 8007edc:	4584      	cmp	ip, r0
 8007ede:	f000 80e7 	beq.w	80080b0 <_realloc_r+0x224>
 8007ee2:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8007ee6:	f02e 0901 	bic.w	r9, lr, #1
 8007eea:	4481      	add	r9, r0
 8007eec:	f8d9 9004 	ldr.w	r9, [r9, #4]
 8007ef0:	f019 0f01 	tst.w	r9, #1
 8007ef4:	bf1c      	itt	ne
 8007ef6:	46b6      	movne	lr, r6
 8007ef8:	4670      	movne	r0, lr
 8007efa:	d05b      	beq.n	8007fb4 <_realloc_r+0x128>
 8007efc:	07c9      	lsls	r1, r1, #31
 8007efe:	d479      	bmi.n	8007ff4 <_realloc_r+0x168>
 8007f00:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8007f04:	ebc1 090b 	rsb	r9, r1, fp
 8007f08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f0c:	f021 0103 	bic.w	r1, r1, #3
 8007f10:	2800      	cmp	r0, #0
 8007f12:	f000 8097 	beq.w	8008044 <_realloc_r+0x1b8>
 8007f16:	4560      	cmp	r0, ip
 8007f18:	eb01 0c0a 	add.w	ip, r1, sl
 8007f1c:	eb0e 060c 	add.w	r6, lr, ip
 8007f20:	f000 811a 	beq.w	8008158 <_realloc_r+0x2cc>
 8007f24:	42b2      	cmp	r2, r6
 8007f26:	f300 808f 	bgt.w	8008048 <_realloc_r+0x1bc>
 8007f2a:	68c3      	ldr	r3, [r0, #12]
 8007f2c:	6882      	ldr	r2, [r0, #8]
 8007f2e:	46c8      	mov	r8, r9
 8007f30:	609a      	str	r2, [r3, #8]
 8007f32:	60d3      	str	r3, [r2, #12]
 8007f34:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007f38:	f858 1f08 	ldr.w	r1, [r8, #8]!
 8007f3c:	f1aa 0204 	sub.w	r2, sl, #4
 8007f40:	2a24      	cmp	r2, #36	; 0x24
 8007f42:	60cb      	str	r3, [r1, #12]
 8007f44:	6099      	str	r1, [r3, #8]
 8007f46:	f200 8144 	bhi.w	80081d2 <_realloc_r+0x346>
 8007f4a:	2a13      	cmp	r2, #19
 8007f4c:	bf98      	it	ls
 8007f4e:	4643      	movls	r3, r8
 8007f50:	d90b      	bls.n	8007f6a <_realloc_r+0xde>
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	f8c9 3008 	str.w	r3, [r9, #8]
 8007f58:	6863      	ldr	r3, [r4, #4]
 8007f5a:	2a1b      	cmp	r2, #27
 8007f5c:	f8c9 300c 	str.w	r3, [r9, #12]
 8007f60:	f200 8140 	bhi.w	80081e4 <_realloc_r+0x358>
 8007f64:	f109 0310 	add.w	r3, r9, #16
 8007f68:	3408      	adds	r4, #8
 8007f6a:	6822      	ldr	r2, [r4, #0]
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	6862      	ldr	r2, [r4, #4]
 8007f70:	605a      	str	r2, [r3, #4]
 8007f72:	68a2      	ldr	r2, [r4, #8]
 8007f74:	609a      	str	r2, [r3, #8]
 8007f76:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f7a:	4644      	mov	r4, r8
 8007f7c:	46cb      	mov	fp, r9
 8007f7e:	1b72      	subs	r2, r6, r5
 8007f80:	2a0f      	cmp	r2, #15
 8007f82:	d822      	bhi.n	8007fca <_realloc_r+0x13e>
 8007f84:	f001 0101 	and.w	r1, r1, #1
 8007f88:	eb0b 0306 	add.w	r3, fp, r6
 8007f8c:	430e      	orrs	r6, r1
 8007f8e:	f8cb 6004 	str.w	r6, [fp, #4]
 8007f92:	685a      	ldr	r2, [r3, #4]
 8007f94:	f042 0201 	orr.w	r2, r2, #1
 8007f98:	605a      	str	r2, [r3, #4]
 8007f9a:	4638      	mov	r0, r7
 8007f9c:	f7fe fc10 	bl	80067c0 <__malloc_unlock>
 8007fa0:	46a0      	mov	r8, r4
 8007fa2:	4640      	mov	r0, r8
 8007fa4:	b003      	add	sp, #12
 8007fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007faa:	f025 0507 	bic.w	r5, r5, #7
 8007fae:	462a      	mov	r2, r5
 8007fb0:	0fee      	lsrs	r6, r5, #31
 8007fb2:	e77f      	b.n	8007eb4 <_realloc_r+0x28>
 8007fb4:	f02e 0e03 	bic.w	lr, lr, #3
 8007fb8:	eb0e 060a 	add.w	r6, lr, sl
 8007fbc:	42b2      	cmp	r2, r6
 8007fbe:	dc9d      	bgt.n	8007efc <_realloc_r+0x70>
 8007fc0:	68c3      	ldr	r3, [r0, #12]
 8007fc2:	6882      	ldr	r2, [r0, #8]
 8007fc4:	60d3      	str	r3, [r2, #12]
 8007fc6:	609a      	str	r2, [r3, #8]
 8007fc8:	e7d9      	b.n	8007f7e <_realloc_r+0xf2>
 8007fca:	eb0b 0305 	add.w	r3, fp, r5
 8007fce:	f001 0101 	and.w	r1, r1, #1
 8007fd2:	1898      	adds	r0, r3, r2
 8007fd4:	430d      	orrs	r5, r1
 8007fd6:	f042 0201 	orr.w	r2, r2, #1
 8007fda:	f8cb 5004 	str.w	r5, [fp, #4]
 8007fde:	605a      	str	r2, [r3, #4]
 8007fe0:	6842      	ldr	r2, [r0, #4]
 8007fe2:	f042 0201 	orr.w	r2, r2, #1
 8007fe6:	6042      	str	r2, [r0, #4]
 8007fe8:	f103 0108 	add.w	r1, r3, #8
 8007fec:	4638      	mov	r0, r7
 8007fee:	f7fd ffa3 	bl	8005f38 <_free_r>
 8007ff2:	e7d2      	b.n	8007f9a <_realloc_r+0x10e>
 8007ff4:	4641      	mov	r1, r8
 8007ff6:	4638      	mov	r0, r7
 8007ff8:	f7fe f8aa 	bl	8006150 <_malloc_r>
 8007ffc:	4680      	mov	r8, r0
 8007ffe:	b1e8      	cbz	r0, 800803c <_realloc_r+0x1b0>
 8008000:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008004:	f021 0301 	bic.w	r3, r1, #1
 8008008:	f1a0 0208 	sub.w	r2, r0, #8
 800800c:	445b      	add	r3, fp
 800800e:	429a      	cmp	r2, r3
 8008010:	f000 80d9 	beq.w	80081c6 <_realloc_r+0x33a>
 8008014:	f1aa 0204 	sub.w	r2, sl, #4
 8008018:	2a24      	cmp	r2, #36	; 0x24
 800801a:	f200 8096 	bhi.w	800814a <_realloc_r+0x2be>
 800801e:	2a13      	cmp	r2, #19
 8008020:	bf9c      	itt	ls
 8008022:	4603      	movls	r3, r0
 8008024:	4622      	movls	r2, r4
 8008026:	d863      	bhi.n	80080f0 <_realloc_r+0x264>
 8008028:	6811      	ldr	r1, [r2, #0]
 800802a:	6019      	str	r1, [r3, #0]
 800802c:	6851      	ldr	r1, [r2, #4]
 800802e:	6059      	str	r1, [r3, #4]
 8008030:	6892      	ldr	r2, [r2, #8]
 8008032:	609a      	str	r2, [r3, #8]
 8008034:	4638      	mov	r0, r7
 8008036:	4621      	mov	r1, r4
 8008038:	f7fd ff7e 	bl	8005f38 <_free_r>
 800803c:	4638      	mov	r0, r7
 800803e:	f7fe fbbf 	bl	80067c0 <__malloc_unlock>
 8008042:	e7ae      	b.n	8007fa2 <_realloc_r+0x116>
 8008044:	eb01 0c0a 	add.w	ip, r1, sl
 8008048:	4562      	cmp	r2, ip
 800804a:	dcd3      	bgt.n	8007ff4 <_realloc_r+0x168>
 800804c:	464e      	mov	r6, r9
 800804e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008052:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8008056:	f1aa 0204 	sub.w	r2, sl, #4
 800805a:	2a24      	cmp	r2, #36	; 0x24
 800805c:	60cb      	str	r3, [r1, #12]
 800805e:	6099      	str	r1, [r3, #8]
 8008060:	d865      	bhi.n	800812e <_realloc_r+0x2a2>
 8008062:	2a13      	cmp	r2, #19
 8008064:	bf98      	it	ls
 8008066:	4633      	movls	r3, r6
 8008068:	d90b      	bls.n	8008082 <_realloc_r+0x1f6>
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	f8c9 3008 	str.w	r3, [r9, #8]
 8008070:	6863      	ldr	r3, [r4, #4]
 8008072:	2a1b      	cmp	r2, #27
 8008074:	f8c9 300c 	str.w	r3, [r9, #12]
 8008078:	f200 80c0 	bhi.w	80081fc <_realloc_r+0x370>
 800807c:	f109 0310 	add.w	r3, r9, #16
 8008080:	3408      	adds	r4, #8
 8008082:	6822      	ldr	r2, [r4, #0]
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	6862      	ldr	r2, [r4, #4]
 8008088:	605a      	str	r2, [r3, #4]
 800808a:	68a2      	ldr	r2, [r4, #8]
 800808c:	609a      	str	r2, [r3, #8]
 800808e:	4634      	mov	r4, r6
 8008090:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008094:	4666      	mov	r6, ip
 8008096:	46cb      	mov	fp, r9
 8008098:	e771      	b.n	8007f7e <_realloc_r+0xf2>
 800809a:	4611      	mov	r1, r2
 800809c:	b003      	add	sp, #12
 800809e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a2:	f7fe b855 	b.w	8006150 <_malloc_r>
 80080a6:	230c      	movs	r3, #12
 80080a8:	603b      	str	r3, [r7, #0]
 80080aa:	f04f 0800 	mov.w	r8, #0
 80080ae:	e778      	b.n	8007fa2 <_realloc_r+0x116>
 80080b0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80080b4:	f026 0e03 	bic.w	lr, r6, #3
 80080b8:	eb0e 000a 	add.w	r0, lr, sl
 80080bc:	f105 0610 	add.w	r6, r5, #16
 80080c0:	42b0      	cmp	r0, r6
 80080c2:	bfb8      	it	lt
 80080c4:	4660      	movlt	r0, ip
 80080c6:	f6ff af19 	blt.w	8007efc <_realloc_r+0x70>
 80080ca:	eb0b 0205 	add.w	r2, fp, r5
 80080ce:	1b41      	subs	r1, r0, r5
 80080d0:	f041 0101 	orr.w	r1, r1, #1
 80080d4:	6051      	str	r1, [r2, #4]
 80080d6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80080da:	609a      	str	r2, [r3, #8]
 80080dc:	f001 0301 	and.w	r3, r1, #1
 80080e0:	431d      	orrs	r5, r3
 80080e2:	f844 5c04 	str.w	r5, [r4, #-4]
 80080e6:	4638      	mov	r0, r7
 80080e8:	f7fe fb6a 	bl	80067c0 <__malloc_unlock>
 80080ec:	46a0      	mov	r8, r4
 80080ee:	e758      	b.n	8007fa2 <_realloc_r+0x116>
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	6003      	str	r3, [r0, #0]
 80080f4:	6863      	ldr	r3, [r4, #4]
 80080f6:	2a1b      	cmp	r2, #27
 80080f8:	6043      	str	r3, [r0, #4]
 80080fa:	bf9c      	itt	ls
 80080fc:	f104 0208 	addls.w	r2, r4, #8
 8008100:	f100 0308 	addls.w	r3, r0, #8
 8008104:	d990      	bls.n	8008028 <_realloc_r+0x19c>
 8008106:	68a3      	ldr	r3, [r4, #8]
 8008108:	6083      	str	r3, [r0, #8]
 800810a:	68e3      	ldr	r3, [r4, #12]
 800810c:	2a24      	cmp	r2, #36	; 0x24
 800810e:	60c3      	str	r3, [r0, #12]
 8008110:	bf03      	ittte	eq
 8008112:	6923      	ldreq	r3, [r4, #16]
 8008114:	6103      	streq	r3, [r0, #16]
 8008116:	6962      	ldreq	r2, [r4, #20]
 8008118:	f100 0310 	addne.w	r3, r0, #16
 800811c:	bf09      	itett	eq
 800811e:	6142      	streq	r2, [r0, #20]
 8008120:	f104 0210 	addne.w	r2, r4, #16
 8008124:	f100 0318 	addeq.w	r3, r0, #24
 8008128:	f104 0218 	addeq.w	r2, r4, #24
 800812c:	e77c      	b.n	8008028 <_realloc_r+0x19c>
 800812e:	4621      	mov	r1, r4
 8008130:	4630      	mov	r0, r6
 8008132:	f8cd c004 	str.w	ip, [sp, #4]
 8008136:	f7ff fe07 	bl	8007d48 <memmove>
 800813a:	f8dd c004 	ldr.w	ip, [sp, #4]
 800813e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008142:	4634      	mov	r4, r6
 8008144:	46cb      	mov	fp, r9
 8008146:	4666      	mov	r6, ip
 8008148:	e719      	b.n	8007f7e <_realloc_r+0xf2>
 800814a:	4621      	mov	r1, r4
 800814c:	f7ff fdfc 	bl	8007d48 <memmove>
 8008150:	e770      	b.n	8008034 <_realloc_r+0x1a8>
 8008152:	bf00      	nop
 8008154:	2000054c 	.word	0x2000054c
 8008158:	f105 0110 	add.w	r1, r5, #16
 800815c:	428e      	cmp	r6, r1
 800815e:	f6ff af73 	blt.w	8008048 <_realloc_r+0x1bc>
 8008162:	46c8      	mov	r8, r9
 8008164:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8008168:	f858 0f08 	ldr.w	r0, [r8, #8]!
 800816c:	f1aa 0204 	sub.w	r2, sl, #4
 8008170:	2a24      	cmp	r2, #36	; 0x24
 8008172:	60c1      	str	r1, [r0, #12]
 8008174:	6088      	str	r0, [r1, #8]
 8008176:	d861      	bhi.n	800823c <_realloc_r+0x3b0>
 8008178:	2a13      	cmp	r2, #19
 800817a:	bf98      	it	ls
 800817c:	4642      	movls	r2, r8
 800817e:	d90a      	bls.n	8008196 <_realloc_r+0x30a>
 8008180:	6821      	ldr	r1, [r4, #0]
 8008182:	f8c9 1008 	str.w	r1, [r9, #8]
 8008186:	6861      	ldr	r1, [r4, #4]
 8008188:	2a1b      	cmp	r2, #27
 800818a:	f8c9 100c 	str.w	r1, [r9, #12]
 800818e:	d85c      	bhi.n	800824a <_realloc_r+0x3be>
 8008190:	f109 0210 	add.w	r2, r9, #16
 8008194:	3408      	adds	r4, #8
 8008196:	6821      	ldr	r1, [r4, #0]
 8008198:	6011      	str	r1, [r2, #0]
 800819a:	6861      	ldr	r1, [r4, #4]
 800819c:	6051      	str	r1, [r2, #4]
 800819e:	68a1      	ldr	r1, [r4, #8]
 80081a0:	6091      	str	r1, [r2, #8]
 80081a2:	eb09 0205 	add.w	r2, r9, r5
 80081a6:	1b71      	subs	r1, r6, r5
 80081a8:	f041 0101 	orr.w	r1, r1, #1
 80081ac:	6051      	str	r1, [r2, #4]
 80081ae:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80081b2:	609a      	str	r2, [r3, #8]
 80081b4:	f001 0301 	and.w	r3, r1, #1
 80081b8:	431d      	orrs	r5, r3
 80081ba:	f8c9 5004 	str.w	r5, [r9, #4]
 80081be:	4638      	mov	r0, r7
 80081c0:	f7fe fafe 	bl	80067c0 <__malloc_unlock>
 80081c4:	e6ed      	b.n	8007fa2 <_realloc_r+0x116>
 80081c6:	f850 6c04 	ldr.w	r6, [r0, #-4]
 80081ca:	f026 0603 	bic.w	r6, r6, #3
 80081ce:	4456      	add	r6, sl
 80081d0:	e6d5      	b.n	8007f7e <_realloc_r+0xf2>
 80081d2:	4621      	mov	r1, r4
 80081d4:	4640      	mov	r0, r8
 80081d6:	f7ff fdb7 	bl	8007d48 <memmove>
 80081da:	4644      	mov	r4, r8
 80081dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80081e0:	46cb      	mov	fp, r9
 80081e2:	e6cc      	b.n	8007f7e <_realloc_r+0xf2>
 80081e4:	68a3      	ldr	r3, [r4, #8]
 80081e6:	f8c9 3010 	str.w	r3, [r9, #16]
 80081ea:	68e3      	ldr	r3, [r4, #12]
 80081ec:	2a24      	cmp	r2, #36	; 0x24
 80081ee:	f8c9 3014 	str.w	r3, [r9, #20]
 80081f2:	d00f      	beq.n	8008214 <_realloc_r+0x388>
 80081f4:	f109 0318 	add.w	r3, r9, #24
 80081f8:	3410      	adds	r4, #16
 80081fa:	e6b6      	b.n	8007f6a <_realloc_r+0xde>
 80081fc:	68a3      	ldr	r3, [r4, #8]
 80081fe:	f8c9 3010 	str.w	r3, [r9, #16]
 8008202:	68e3      	ldr	r3, [r4, #12]
 8008204:	2a24      	cmp	r2, #36	; 0x24
 8008206:	f8c9 3014 	str.w	r3, [r9, #20]
 800820a:	d00d      	beq.n	8008228 <_realloc_r+0x39c>
 800820c:	f109 0318 	add.w	r3, r9, #24
 8008210:	3410      	adds	r4, #16
 8008212:	e736      	b.n	8008082 <_realloc_r+0x1f6>
 8008214:	6923      	ldr	r3, [r4, #16]
 8008216:	f8c9 3018 	str.w	r3, [r9, #24]
 800821a:	6962      	ldr	r2, [r4, #20]
 800821c:	f109 0320 	add.w	r3, r9, #32
 8008220:	f8c9 201c 	str.w	r2, [r9, #28]
 8008224:	3418      	adds	r4, #24
 8008226:	e6a0      	b.n	8007f6a <_realloc_r+0xde>
 8008228:	6923      	ldr	r3, [r4, #16]
 800822a:	f8c9 3018 	str.w	r3, [r9, #24]
 800822e:	6962      	ldr	r2, [r4, #20]
 8008230:	f109 0320 	add.w	r3, r9, #32
 8008234:	f8c9 201c 	str.w	r2, [r9, #28]
 8008238:	3418      	adds	r4, #24
 800823a:	e722      	b.n	8008082 <_realloc_r+0x1f6>
 800823c:	4640      	mov	r0, r8
 800823e:	4621      	mov	r1, r4
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	f7ff fd81 	bl	8007d48 <memmove>
 8008246:	9b01      	ldr	r3, [sp, #4]
 8008248:	e7ab      	b.n	80081a2 <_realloc_r+0x316>
 800824a:	68a1      	ldr	r1, [r4, #8]
 800824c:	f8c9 1010 	str.w	r1, [r9, #16]
 8008250:	68e1      	ldr	r1, [r4, #12]
 8008252:	2a24      	cmp	r2, #36	; 0x24
 8008254:	f8c9 1014 	str.w	r1, [r9, #20]
 8008258:	d003      	beq.n	8008262 <_realloc_r+0x3d6>
 800825a:	f109 0218 	add.w	r2, r9, #24
 800825e:	3410      	adds	r4, #16
 8008260:	e799      	b.n	8008196 <_realloc_r+0x30a>
 8008262:	6922      	ldr	r2, [r4, #16]
 8008264:	f8c9 2018 	str.w	r2, [r9, #24]
 8008268:	6961      	ldr	r1, [r4, #20]
 800826a:	f109 0220 	add.w	r2, r9, #32
 800826e:	f8c9 101c 	str.w	r1, [r9, #28]
 8008272:	3418      	adds	r4, #24
 8008274:	e78f      	b.n	8008196 <_realloc_r+0x30a>
 8008276:	bf00      	nop

08008278 <__aeabi_drsub>:
 8008278:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800827c:	e002      	b.n	8008284 <__adddf3>
 800827e:	bf00      	nop

08008280 <__aeabi_dsub>:
 8008280:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008284 <__adddf3>:
 8008284:	b530      	push	{r4, r5, lr}
 8008286:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800828a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800828e:	ea94 0f05 	teq	r4, r5
 8008292:	bf08      	it	eq
 8008294:	ea90 0f02 	teqeq	r0, r2
 8008298:	bf1f      	itttt	ne
 800829a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800829e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80082a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80082a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082aa:	f000 80e2 	beq.w	8008472 <__adddf3+0x1ee>
 80082ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80082b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80082b6:	bfb8      	it	lt
 80082b8:	426d      	neglt	r5, r5
 80082ba:	dd0c      	ble.n	80082d6 <__adddf3+0x52>
 80082bc:	442c      	add	r4, r5
 80082be:	ea80 0202 	eor.w	r2, r0, r2
 80082c2:	ea81 0303 	eor.w	r3, r1, r3
 80082c6:	ea82 0000 	eor.w	r0, r2, r0
 80082ca:	ea83 0101 	eor.w	r1, r3, r1
 80082ce:	ea80 0202 	eor.w	r2, r0, r2
 80082d2:	ea81 0303 	eor.w	r3, r1, r3
 80082d6:	2d36      	cmp	r5, #54	; 0x36
 80082d8:	bf88      	it	hi
 80082da:	bd30      	pophi	{r4, r5, pc}
 80082dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80082e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80082e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80082e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80082ec:	d002      	beq.n	80082f4 <__adddf3+0x70>
 80082ee:	4240      	negs	r0, r0
 80082f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80082f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80082f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80082fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008300:	d002      	beq.n	8008308 <__adddf3+0x84>
 8008302:	4252      	negs	r2, r2
 8008304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008308:	ea94 0f05 	teq	r4, r5
 800830c:	f000 80a7 	beq.w	800845e <__adddf3+0x1da>
 8008310:	f1a4 0401 	sub.w	r4, r4, #1
 8008314:	f1d5 0e20 	rsbs	lr, r5, #32
 8008318:	db0d      	blt.n	8008336 <__adddf3+0xb2>
 800831a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800831e:	fa22 f205 	lsr.w	r2, r2, r5
 8008322:	1880      	adds	r0, r0, r2
 8008324:	f141 0100 	adc.w	r1, r1, #0
 8008328:	fa03 f20e 	lsl.w	r2, r3, lr
 800832c:	1880      	adds	r0, r0, r2
 800832e:	fa43 f305 	asr.w	r3, r3, r5
 8008332:	4159      	adcs	r1, r3
 8008334:	e00e      	b.n	8008354 <__adddf3+0xd0>
 8008336:	f1a5 0520 	sub.w	r5, r5, #32
 800833a:	f10e 0e20 	add.w	lr, lr, #32
 800833e:	2a01      	cmp	r2, #1
 8008340:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008344:	bf28      	it	cs
 8008346:	f04c 0c02 	orrcs.w	ip, ip, #2
 800834a:	fa43 f305 	asr.w	r3, r3, r5
 800834e:	18c0      	adds	r0, r0, r3
 8008350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008358:	d507      	bpl.n	800836a <__adddf3+0xe6>
 800835a:	f04f 0e00 	mov.w	lr, #0
 800835e:	f1dc 0c00 	rsbs	ip, ip, #0
 8008362:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008366:	eb6e 0101 	sbc.w	r1, lr, r1
 800836a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800836e:	d31b      	bcc.n	80083a8 <__adddf3+0x124>
 8008370:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008374:	d30c      	bcc.n	8008390 <__adddf3+0x10c>
 8008376:	0849      	lsrs	r1, r1, #1
 8008378:	ea5f 0030 	movs.w	r0, r0, rrx
 800837c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008380:	f104 0401 	add.w	r4, r4, #1
 8008384:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008388:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800838c:	f080 809a 	bcs.w	80084c4 <__adddf3+0x240>
 8008390:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008394:	bf08      	it	eq
 8008396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800839a:	f150 0000 	adcs.w	r0, r0, #0
 800839e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80083a2:	ea41 0105 	orr.w	r1, r1, r5
 80083a6:	bd30      	pop	{r4, r5, pc}
 80083a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80083ac:	4140      	adcs	r0, r0
 80083ae:	eb41 0101 	adc.w	r1, r1, r1
 80083b2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80083b6:	f1a4 0401 	sub.w	r4, r4, #1
 80083ba:	d1e9      	bne.n	8008390 <__adddf3+0x10c>
 80083bc:	f091 0f00 	teq	r1, #0
 80083c0:	bf04      	itt	eq
 80083c2:	4601      	moveq	r1, r0
 80083c4:	2000      	moveq	r0, #0
 80083c6:	fab1 f381 	clz	r3, r1
 80083ca:	bf08      	it	eq
 80083cc:	3320      	addeq	r3, #32
 80083ce:	f1a3 030b 	sub.w	r3, r3, #11
 80083d2:	f1b3 0220 	subs.w	r2, r3, #32
 80083d6:	da0c      	bge.n	80083f2 <__adddf3+0x16e>
 80083d8:	320c      	adds	r2, #12
 80083da:	dd08      	ble.n	80083ee <__adddf3+0x16a>
 80083dc:	f102 0c14 	add.w	ip, r2, #20
 80083e0:	f1c2 020c 	rsb	r2, r2, #12
 80083e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80083e8:	fa21 f102 	lsr.w	r1, r1, r2
 80083ec:	e00c      	b.n	8008408 <__adddf3+0x184>
 80083ee:	f102 0214 	add.w	r2, r2, #20
 80083f2:	bfd8      	it	le
 80083f4:	f1c2 0c20 	rsble	ip, r2, #32
 80083f8:	fa01 f102 	lsl.w	r1, r1, r2
 80083fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008400:	bfdc      	itt	le
 8008402:	ea41 010c 	orrle.w	r1, r1, ip
 8008406:	4090      	lslle	r0, r2
 8008408:	1ae4      	subs	r4, r4, r3
 800840a:	bfa2      	ittt	ge
 800840c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008410:	4329      	orrge	r1, r5
 8008412:	bd30      	popge	{r4, r5, pc}
 8008414:	ea6f 0404 	mvn.w	r4, r4
 8008418:	3c1f      	subs	r4, #31
 800841a:	da1c      	bge.n	8008456 <__adddf3+0x1d2>
 800841c:	340c      	adds	r4, #12
 800841e:	dc0e      	bgt.n	800843e <__adddf3+0x1ba>
 8008420:	f104 0414 	add.w	r4, r4, #20
 8008424:	f1c4 0220 	rsb	r2, r4, #32
 8008428:	fa20 f004 	lsr.w	r0, r0, r4
 800842c:	fa01 f302 	lsl.w	r3, r1, r2
 8008430:	ea40 0003 	orr.w	r0, r0, r3
 8008434:	fa21 f304 	lsr.w	r3, r1, r4
 8008438:	ea45 0103 	orr.w	r1, r5, r3
 800843c:	bd30      	pop	{r4, r5, pc}
 800843e:	f1c4 040c 	rsb	r4, r4, #12
 8008442:	f1c4 0220 	rsb	r2, r4, #32
 8008446:	fa20 f002 	lsr.w	r0, r0, r2
 800844a:	fa01 f304 	lsl.w	r3, r1, r4
 800844e:	ea40 0003 	orr.w	r0, r0, r3
 8008452:	4629      	mov	r1, r5
 8008454:	bd30      	pop	{r4, r5, pc}
 8008456:	fa21 f004 	lsr.w	r0, r1, r4
 800845a:	4629      	mov	r1, r5
 800845c:	bd30      	pop	{r4, r5, pc}
 800845e:	f094 0f00 	teq	r4, #0
 8008462:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008466:	bf06      	itte	eq
 8008468:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800846c:	3401      	addeq	r4, #1
 800846e:	3d01      	subne	r5, #1
 8008470:	e74e      	b.n	8008310 <__adddf3+0x8c>
 8008472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008476:	bf18      	it	ne
 8008478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800847c:	d029      	beq.n	80084d2 <__adddf3+0x24e>
 800847e:	ea94 0f05 	teq	r4, r5
 8008482:	bf08      	it	eq
 8008484:	ea90 0f02 	teqeq	r0, r2
 8008488:	d005      	beq.n	8008496 <__adddf3+0x212>
 800848a:	ea54 0c00 	orrs.w	ip, r4, r0
 800848e:	bf04      	itt	eq
 8008490:	4619      	moveq	r1, r3
 8008492:	4610      	moveq	r0, r2
 8008494:	bd30      	pop	{r4, r5, pc}
 8008496:	ea91 0f03 	teq	r1, r3
 800849a:	bf1e      	ittt	ne
 800849c:	2100      	movne	r1, #0
 800849e:	2000      	movne	r0, #0
 80084a0:	bd30      	popne	{r4, r5, pc}
 80084a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80084a6:	d105      	bne.n	80084b4 <__adddf3+0x230>
 80084a8:	0040      	lsls	r0, r0, #1
 80084aa:	4149      	adcs	r1, r1
 80084ac:	bf28      	it	cs
 80084ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80084b2:	bd30      	pop	{r4, r5, pc}
 80084b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80084b8:	bf3c      	itt	cc
 80084ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80084be:	bd30      	popcc	{r4, r5, pc}
 80084c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80084c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80084c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084cc:	f04f 0000 	mov.w	r0, #0
 80084d0:	bd30      	pop	{r4, r5, pc}
 80084d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80084d6:	bf1a      	itte	ne
 80084d8:	4619      	movne	r1, r3
 80084da:	4610      	movne	r0, r2
 80084dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80084e0:	bf1c      	itt	ne
 80084e2:	460b      	movne	r3, r1
 80084e4:	4602      	movne	r2, r0
 80084e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80084ea:	bf06      	itte	eq
 80084ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80084f0:	ea91 0f03 	teqeq	r1, r3
 80084f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80084f8:	bd30      	pop	{r4, r5, pc}
 80084fa:	bf00      	nop

080084fc <__aeabi_ui2d>:
 80084fc:	f090 0f00 	teq	r0, #0
 8008500:	bf04      	itt	eq
 8008502:	2100      	moveq	r1, #0
 8008504:	4770      	bxeq	lr
 8008506:	b530      	push	{r4, r5, lr}
 8008508:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800850c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008510:	f04f 0500 	mov.w	r5, #0
 8008514:	f04f 0100 	mov.w	r1, #0
 8008518:	e750      	b.n	80083bc <__adddf3+0x138>
 800851a:	bf00      	nop

0800851c <__aeabi_i2d>:
 800851c:	f090 0f00 	teq	r0, #0
 8008520:	bf04      	itt	eq
 8008522:	2100      	moveq	r1, #0
 8008524:	4770      	bxeq	lr
 8008526:	b530      	push	{r4, r5, lr}
 8008528:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800852c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008530:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008534:	bf48      	it	mi
 8008536:	4240      	negmi	r0, r0
 8008538:	f04f 0100 	mov.w	r1, #0
 800853c:	e73e      	b.n	80083bc <__adddf3+0x138>
 800853e:	bf00      	nop

08008540 <__aeabi_f2d>:
 8008540:	0042      	lsls	r2, r0, #1
 8008542:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008546:	ea4f 0131 	mov.w	r1, r1, rrx
 800854a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800854e:	bf1f      	itttt	ne
 8008550:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008554:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008558:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800855c:	4770      	bxne	lr
 800855e:	f092 0f00 	teq	r2, #0
 8008562:	bf14      	ite	ne
 8008564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008568:	4770      	bxeq	lr
 800856a:	b530      	push	{r4, r5, lr}
 800856c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008578:	e720      	b.n	80083bc <__adddf3+0x138>
 800857a:	bf00      	nop

0800857c <__aeabi_ul2d>:
 800857c:	ea50 0201 	orrs.w	r2, r0, r1
 8008580:	bf08      	it	eq
 8008582:	4770      	bxeq	lr
 8008584:	b530      	push	{r4, r5, lr}
 8008586:	f04f 0500 	mov.w	r5, #0
 800858a:	e00a      	b.n	80085a2 <__aeabi_l2d+0x16>

0800858c <__aeabi_l2d>:
 800858c:	ea50 0201 	orrs.w	r2, r0, r1
 8008590:	bf08      	it	eq
 8008592:	4770      	bxeq	lr
 8008594:	b530      	push	{r4, r5, lr}
 8008596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800859a:	d502      	bpl.n	80085a2 <__aeabi_l2d+0x16>
 800859c:	4240      	negs	r0, r0
 800859e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80085a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80085a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80085aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80085ae:	f43f aedc 	beq.w	800836a <__adddf3+0xe6>
 80085b2:	f04f 0203 	mov.w	r2, #3
 80085b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80085ba:	bf18      	it	ne
 80085bc:	3203      	addne	r2, #3
 80085be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80085c2:	bf18      	it	ne
 80085c4:	3203      	addne	r2, #3
 80085c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80085ca:	f1c2 0320 	rsb	r3, r2, #32
 80085ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80085d2:	fa20 f002 	lsr.w	r0, r0, r2
 80085d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80085da:	ea40 000e 	orr.w	r0, r0, lr
 80085de:	fa21 f102 	lsr.w	r1, r1, r2
 80085e2:	4414      	add	r4, r2
 80085e4:	e6c1      	b.n	800836a <__adddf3+0xe6>
 80085e6:	bf00      	nop

080085e8 <__aeabi_dmul>:
 80085e8:	b570      	push	{r4, r5, r6, lr}
 80085ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80085ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80085f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80085f6:	bf1d      	ittte	ne
 80085f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80085fc:	ea94 0f0c 	teqne	r4, ip
 8008600:	ea95 0f0c 	teqne	r5, ip
 8008604:	f000 f8de 	bleq	80087c4 <__aeabi_dmul+0x1dc>
 8008608:	442c      	add	r4, r5
 800860a:	ea81 0603 	eor.w	r6, r1, r3
 800860e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800861a:	bf18      	it	ne
 800861c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008628:	d038      	beq.n	800869c <__aeabi_dmul+0xb4>
 800862a:	fba0 ce02 	umull	ip, lr, r0, r2
 800862e:	f04f 0500 	mov.w	r5, #0
 8008632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800863a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800863e:	f04f 0600 	mov.w	r6, #0
 8008642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008646:	f09c 0f00 	teq	ip, #0
 800864a:	bf18      	it	ne
 800864c:	f04e 0e01 	orrne.w	lr, lr, #1
 8008650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800865c:	d204      	bcs.n	8008668 <__aeabi_dmul+0x80>
 800865e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008662:	416d      	adcs	r5, r5
 8008664:	eb46 0606 	adc.w	r6, r6, r6
 8008668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800866c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800867c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008680:	bf88      	it	hi
 8008682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008686:	d81e      	bhi.n	80086c6 <__aeabi_dmul+0xde>
 8008688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800868c:	bf08      	it	eq
 800868e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008692:	f150 0000 	adcs.w	r0, r0, #0
 8008696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800869a:	bd70      	pop	{r4, r5, r6, pc}
 800869c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80086a0:	ea46 0101 	orr.w	r1, r6, r1
 80086a4:	ea40 0002 	orr.w	r0, r0, r2
 80086a8:	ea81 0103 	eor.w	r1, r1, r3
 80086ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80086b0:	bfc2      	ittt	gt
 80086b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80086b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80086ba:	bd70      	popgt	{r4, r5, r6, pc}
 80086bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80086c0:	f04f 0e00 	mov.w	lr, #0
 80086c4:	3c01      	subs	r4, #1
 80086c6:	f300 80ab 	bgt.w	8008820 <__aeabi_dmul+0x238>
 80086ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80086ce:	bfde      	ittt	le
 80086d0:	2000      	movle	r0, #0
 80086d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80086d6:	bd70      	pople	{r4, r5, r6, pc}
 80086d8:	f1c4 0400 	rsb	r4, r4, #0
 80086dc:	3c20      	subs	r4, #32
 80086de:	da35      	bge.n	800874c <__aeabi_dmul+0x164>
 80086e0:	340c      	adds	r4, #12
 80086e2:	dc1b      	bgt.n	800871c <__aeabi_dmul+0x134>
 80086e4:	f104 0414 	add.w	r4, r4, #20
 80086e8:	f1c4 0520 	rsb	r5, r4, #32
 80086ec:	fa00 f305 	lsl.w	r3, r0, r5
 80086f0:	fa20 f004 	lsr.w	r0, r0, r4
 80086f4:	fa01 f205 	lsl.w	r2, r1, r5
 80086f8:	ea40 0002 	orr.w	r0, r0, r2
 80086fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008708:	fa21 f604 	lsr.w	r6, r1, r4
 800870c:	eb42 0106 	adc.w	r1, r2, r6
 8008710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008714:	bf08      	it	eq
 8008716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800871a:	bd70      	pop	{r4, r5, r6, pc}
 800871c:	f1c4 040c 	rsb	r4, r4, #12
 8008720:	f1c4 0520 	rsb	r5, r4, #32
 8008724:	fa00 f304 	lsl.w	r3, r0, r4
 8008728:	fa20 f005 	lsr.w	r0, r0, r5
 800872c:	fa01 f204 	lsl.w	r2, r1, r4
 8008730:	ea40 0002 	orr.w	r0, r0, r2
 8008734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800873c:	f141 0100 	adc.w	r1, r1, #0
 8008740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008744:	bf08      	it	eq
 8008746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800874a:	bd70      	pop	{r4, r5, r6, pc}
 800874c:	f1c4 0520 	rsb	r5, r4, #32
 8008750:	fa00 f205 	lsl.w	r2, r0, r5
 8008754:	ea4e 0e02 	orr.w	lr, lr, r2
 8008758:	fa20 f304 	lsr.w	r3, r0, r4
 800875c:	fa01 f205 	lsl.w	r2, r1, r5
 8008760:	ea43 0302 	orr.w	r3, r3, r2
 8008764:	fa21 f004 	lsr.w	r0, r1, r4
 8008768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800876c:	fa21 f204 	lsr.w	r2, r1, r4
 8008770:	ea20 0002 	bic.w	r0, r0, r2
 8008774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800877c:	bf08      	it	eq
 800877e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008782:	bd70      	pop	{r4, r5, r6, pc}
 8008784:	f094 0f00 	teq	r4, #0
 8008788:	d10f      	bne.n	80087aa <__aeabi_dmul+0x1c2>
 800878a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800878e:	0040      	lsls	r0, r0, #1
 8008790:	eb41 0101 	adc.w	r1, r1, r1
 8008794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008798:	bf08      	it	eq
 800879a:	3c01      	subeq	r4, #1
 800879c:	d0f7      	beq.n	800878e <__aeabi_dmul+0x1a6>
 800879e:	ea41 0106 	orr.w	r1, r1, r6
 80087a2:	f095 0f00 	teq	r5, #0
 80087a6:	bf18      	it	ne
 80087a8:	4770      	bxne	lr
 80087aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80087ae:	0052      	lsls	r2, r2, #1
 80087b0:	eb43 0303 	adc.w	r3, r3, r3
 80087b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80087b8:	bf08      	it	eq
 80087ba:	3d01      	subeq	r5, #1
 80087bc:	d0f7      	beq.n	80087ae <__aeabi_dmul+0x1c6>
 80087be:	ea43 0306 	orr.w	r3, r3, r6
 80087c2:	4770      	bx	lr
 80087c4:	ea94 0f0c 	teq	r4, ip
 80087c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80087cc:	bf18      	it	ne
 80087ce:	ea95 0f0c 	teqne	r5, ip
 80087d2:	d00c      	beq.n	80087ee <__aeabi_dmul+0x206>
 80087d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80087d8:	bf18      	it	ne
 80087da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80087de:	d1d1      	bne.n	8008784 <__aeabi_dmul+0x19c>
 80087e0:	ea81 0103 	eor.w	r1, r1, r3
 80087e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80087e8:	f04f 0000 	mov.w	r0, #0
 80087ec:	bd70      	pop	{r4, r5, r6, pc}
 80087ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80087f2:	bf06      	itte	eq
 80087f4:	4610      	moveq	r0, r2
 80087f6:	4619      	moveq	r1, r3
 80087f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80087fc:	d019      	beq.n	8008832 <__aeabi_dmul+0x24a>
 80087fe:	ea94 0f0c 	teq	r4, ip
 8008802:	d102      	bne.n	800880a <__aeabi_dmul+0x222>
 8008804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008808:	d113      	bne.n	8008832 <__aeabi_dmul+0x24a>
 800880a:	ea95 0f0c 	teq	r5, ip
 800880e:	d105      	bne.n	800881c <__aeabi_dmul+0x234>
 8008810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008814:	bf1c      	itt	ne
 8008816:	4610      	movne	r0, r2
 8008818:	4619      	movne	r1, r3
 800881a:	d10a      	bne.n	8008832 <__aeabi_dmul+0x24a>
 800881c:	ea81 0103 	eor.w	r1, r1, r3
 8008820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800882c:	f04f 0000 	mov.w	r0, #0
 8008830:	bd70      	pop	{r4, r5, r6, pc}
 8008832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800883a:	bd70      	pop	{r4, r5, r6, pc}

0800883c <__aeabi_ddiv>:
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800884a:	bf1d      	ittte	ne
 800884c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008850:	ea94 0f0c 	teqne	r4, ip
 8008854:	ea95 0f0c 	teqne	r5, ip
 8008858:	f000 f8a7 	bleq	80089aa <__aeabi_ddiv+0x16e>
 800885c:	eba4 0405 	sub.w	r4, r4, r5
 8008860:	ea81 0e03 	eor.w	lr, r1, r3
 8008864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800886c:	f000 8088 	beq.w	8008980 <__aeabi_ddiv+0x144>
 8008870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800887c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800888c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008894:	429d      	cmp	r5, r3
 8008896:	bf08      	it	eq
 8008898:	4296      	cmpeq	r6, r2
 800889a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800889e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80088a2:	d202      	bcs.n	80088aa <__aeabi_ddiv+0x6e>
 80088a4:	085b      	lsrs	r3, r3, #1
 80088a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80088aa:	1ab6      	subs	r6, r6, r2
 80088ac:	eb65 0503 	sbc.w	r5, r5, r3
 80088b0:	085b      	lsrs	r3, r3, #1
 80088b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80088b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80088ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80088be:	ebb6 0e02 	subs.w	lr, r6, r2
 80088c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80088c6:	bf22      	ittt	cs
 80088c8:	1ab6      	subcs	r6, r6, r2
 80088ca:	4675      	movcs	r5, lr
 80088cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80088d0:	085b      	lsrs	r3, r3, #1
 80088d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80088d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80088da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80088de:	bf22      	ittt	cs
 80088e0:	1ab6      	subcs	r6, r6, r2
 80088e2:	4675      	movcs	r5, lr
 80088e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80088e8:	085b      	lsrs	r3, r3, #1
 80088ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80088ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80088f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80088f6:	bf22      	ittt	cs
 80088f8:	1ab6      	subcs	r6, r6, r2
 80088fa:	4675      	movcs	r5, lr
 80088fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008900:	085b      	lsrs	r3, r3, #1
 8008902:	ea4f 0232 	mov.w	r2, r2, rrx
 8008906:	ebb6 0e02 	subs.w	lr, r6, r2
 800890a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800890e:	bf22      	ittt	cs
 8008910:	1ab6      	subcs	r6, r6, r2
 8008912:	4675      	movcs	r5, lr
 8008914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008918:	ea55 0e06 	orrs.w	lr, r5, r6
 800891c:	d018      	beq.n	8008950 <__aeabi_ddiv+0x114>
 800891e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800892a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800892e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800893a:	d1c0      	bne.n	80088be <__aeabi_ddiv+0x82>
 800893c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008940:	d10b      	bne.n	800895a <__aeabi_ddiv+0x11e>
 8008942:	ea41 0100 	orr.w	r1, r1, r0
 8008946:	f04f 0000 	mov.w	r0, #0
 800894a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800894e:	e7b6      	b.n	80088be <__aeabi_ddiv+0x82>
 8008950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008954:	bf04      	itt	eq
 8008956:	4301      	orreq	r1, r0
 8008958:	2000      	moveq	r0, #0
 800895a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800895e:	bf88      	it	hi
 8008960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008964:	f63f aeaf 	bhi.w	80086c6 <__aeabi_dmul+0xde>
 8008968:	ebb5 0c03 	subs.w	ip, r5, r3
 800896c:	bf04      	itt	eq
 800896e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008976:	f150 0000 	adcs.w	r0, r0, #0
 800897a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800897e:	bd70      	pop	{r4, r5, r6, pc}
 8008980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800898c:	bfc2      	ittt	gt
 800898e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008996:	bd70      	popgt	{r4, r5, r6, pc}
 8008998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800899c:	f04f 0e00 	mov.w	lr, #0
 80089a0:	3c01      	subs	r4, #1
 80089a2:	e690      	b.n	80086c6 <__aeabi_dmul+0xde>
 80089a4:	ea45 0e06 	orr.w	lr, r5, r6
 80089a8:	e68d      	b.n	80086c6 <__aeabi_dmul+0xde>
 80089aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80089ae:	ea94 0f0c 	teq	r4, ip
 80089b2:	bf08      	it	eq
 80089b4:	ea95 0f0c 	teqeq	r5, ip
 80089b8:	f43f af3b 	beq.w	8008832 <__aeabi_dmul+0x24a>
 80089bc:	ea94 0f0c 	teq	r4, ip
 80089c0:	d10a      	bne.n	80089d8 <__aeabi_ddiv+0x19c>
 80089c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80089c6:	f47f af34 	bne.w	8008832 <__aeabi_dmul+0x24a>
 80089ca:	ea95 0f0c 	teq	r5, ip
 80089ce:	f47f af25 	bne.w	800881c <__aeabi_dmul+0x234>
 80089d2:	4610      	mov	r0, r2
 80089d4:	4619      	mov	r1, r3
 80089d6:	e72c      	b.n	8008832 <__aeabi_dmul+0x24a>
 80089d8:	ea95 0f0c 	teq	r5, ip
 80089dc:	d106      	bne.n	80089ec <__aeabi_ddiv+0x1b0>
 80089de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80089e2:	f43f aefd 	beq.w	80087e0 <__aeabi_dmul+0x1f8>
 80089e6:	4610      	mov	r0, r2
 80089e8:	4619      	mov	r1, r3
 80089ea:	e722      	b.n	8008832 <__aeabi_dmul+0x24a>
 80089ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80089f0:	bf18      	it	ne
 80089f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80089f6:	f47f aec5 	bne.w	8008784 <__aeabi_dmul+0x19c>
 80089fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80089fe:	f47f af0d 	bne.w	800881c <__aeabi_dmul+0x234>
 8008a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008a06:	f47f aeeb 	bne.w	80087e0 <__aeabi_dmul+0x1f8>
 8008a0a:	e712      	b.n	8008832 <__aeabi_dmul+0x24a>

08008a0c <__gedf2>:
 8008a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008a10:	e006      	b.n	8008a20 <__cmpdf2+0x4>
 8008a12:	bf00      	nop

08008a14 <__ledf2>:
 8008a14:	f04f 0c01 	mov.w	ip, #1
 8008a18:	e002      	b.n	8008a20 <__cmpdf2+0x4>
 8008a1a:	bf00      	nop

08008a1c <__cmpdf2>:
 8008a1c:	f04f 0c01 	mov.w	ip, #1
 8008a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008a30:	bf18      	it	ne
 8008a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008a36:	d01b      	beq.n	8008a70 <__cmpdf2+0x54>
 8008a38:	b001      	add	sp, #4
 8008a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008a3e:	bf0c      	ite	eq
 8008a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008a44:	ea91 0f03 	teqne	r1, r3
 8008a48:	bf02      	ittt	eq
 8008a4a:	ea90 0f02 	teqeq	r0, r2
 8008a4e:	2000      	moveq	r0, #0
 8008a50:	4770      	bxeq	lr
 8008a52:	f110 0f00 	cmn.w	r0, #0
 8008a56:	ea91 0f03 	teq	r1, r3
 8008a5a:	bf58      	it	pl
 8008a5c:	4299      	cmppl	r1, r3
 8008a5e:	bf08      	it	eq
 8008a60:	4290      	cmpeq	r0, r2
 8008a62:	bf2c      	ite	cs
 8008a64:	17d8      	asrcs	r0, r3, #31
 8008a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008a6a:	f040 0001 	orr.w	r0, r0, #1
 8008a6e:	4770      	bx	lr
 8008a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a78:	d102      	bne.n	8008a80 <__cmpdf2+0x64>
 8008a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008a7e:	d107      	bne.n	8008a90 <__cmpdf2+0x74>
 8008a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a88:	d1d6      	bne.n	8008a38 <__cmpdf2+0x1c>
 8008a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008a8e:	d0d3      	beq.n	8008a38 <__cmpdf2+0x1c>
 8008a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop

08008a98 <__aeabi_cdrcmple>:
 8008a98:	4684      	mov	ip, r0
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	4662      	mov	r2, ip
 8008a9e:	468c      	mov	ip, r1
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4663      	mov	r3, ip
 8008aa4:	e000      	b.n	8008aa8 <__aeabi_cdcmpeq>
 8008aa6:	bf00      	nop

08008aa8 <__aeabi_cdcmpeq>:
 8008aa8:	b501      	push	{r0, lr}
 8008aaa:	f7ff ffb7 	bl	8008a1c <__cmpdf2>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	bf48      	it	mi
 8008ab2:	f110 0f00 	cmnmi.w	r0, #0
 8008ab6:	bd01      	pop	{r0, pc}

08008ab8 <__aeabi_dcmpeq>:
 8008ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008abc:	f7ff fff4 	bl	8008aa8 <__aeabi_cdcmpeq>
 8008ac0:	bf0c      	ite	eq
 8008ac2:	2001      	moveq	r0, #1
 8008ac4:	2000      	movne	r0, #0
 8008ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8008aca:	bf00      	nop

08008acc <__aeabi_dcmplt>:
 8008acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008ad0:	f7ff ffea 	bl	8008aa8 <__aeabi_cdcmpeq>
 8008ad4:	bf34      	ite	cc
 8008ad6:	2001      	movcc	r0, #1
 8008ad8:	2000      	movcs	r0, #0
 8008ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8008ade:	bf00      	nop

08008ae0 <__aeabi_dcmple>:
 8008ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008ae4:	f7ff ffe0 	bl	8008aa8 <__aeabi_cdcmpeq>
 8008ae8:	bf94      	ite	ls
 8008aea:	2001      	movls	r0, #1
 8008aec:	2000      	movhi	r0, #0
 8008aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8008af2:	bf00      	nop

08008af4 <__aeabi_dcmpge>:
 8008af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008af8:	f7ff ffce 	bl	8008a98 <__aeabi_cdrcmple>
 8008afc:	bf94      	ite	ls
 8008afe:	2001      	movls	r0, #1
 8008b00:	2000      	movhi	r0, #0
 8008b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b06:	bf00      	nop

08008b08 <__aeabi_dcmpgt>:
 8008b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b0c:	f7ff ffc4 	bl	8008a98 <__aeabi_cdrcmple>
 8008b10:	bf34      	ite	cc
 8008b12:	2001      	movcc	r0, #1
 8008b14:	2000      	movcs	r0, #0
 8008b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b1a:	bf00      	nop

08008b1c <__aeabi_d2iz>:
 8008b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008b24:	d215      	bcs.n	8008b52 <__aeabi_d2iz+0x36>
 8008b26:	d511      	bpl.n	8008b4c <__aeabi_d2iz+0x30>
 8008b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008b30:	d912      	bls.n	8008b58 <__aeabi_d2iz+0x3c>
 8008b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008b42:	fa23 f002 	lsr.w	r0, r3, r2
 8008b46:	bf18      	it	ne
 8008b48:	4240      	negne	r0, r0
 8008b4a:	4770      	bx	lr
 8008b4c:	f04f 0000 	mov.w	r0, #0
 8008b50:	4770      	bx	lr
 8008b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008b56:	d105      	bne.n	8008b64 <__aeabi_d2iz+0x48>
 8008b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008b5c:	bf08      	it	eq
 8008b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008b62:	4770      	bx	lr
 8008b64:	f04f 0000 	mov.w	r0, #0
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop

08008b6c <main>:
#include "gpio.h"
#include "delay.h"
#include "usart.h"
#include "spi.h"

int main(void) {
 8008b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b70:	b09f      	sub	sp, #124	; 0x7c
	uint16_t bits;
	uint32_t intval = 40;
	uint32_t tnow;
	char tmp[92];

	TIM2_timer_start();
 8008b72:	f7f7 fb09 	bl	8000188 <TIM2_timer_start>

	usart_begin(USART2, PA3, PA2, 19200);
 8008b76:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008b7a:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8008b7e:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008b82:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008b86:	f240 1103 	movw	r1, #259	; 0x103
 8008b8a:	f7f8 f843 	bl	8000c14 <usart_begin>
	usart_print(USART2, "Happy are those who know they are spiritually poor; \n");
 8008b8e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008b92:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008b96:	49d9      	ldr	r1, [pc, #868]	; (8008efc <main+0x390>)
 8008b98:	f7f8 f98c 	bl	8000eb4 <usart_print>
	usart_print(USART2, "The kingdom of heaven belongs to them!\n");
 8008b9c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008ba0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008ba4:	49d6      	ldr	r1, [pc, #856]	; (8008f00 <main+0x394>)
 8008ba6:	f7f8 f985 	bl	8000eb4 <usart_print>
	usart_print(USART2, "How many eyes does Mississipi river have?\n");
 8008baa:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008bae:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008bb2:	49d4      	ldr	r1, [pc, #848]	; (8008f04 <main+0x398>)
 8008bb4:	f7f8 f97e 	bl	8000eb4 <usart_print>
	usart_print(USART2, "Quick brown fox jumped over the lazy dog!\n");
 8008bb8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008bbc:	49d2      	ldr	r1, [pc, #840]	; (8008f08 <main+0x39c>)
 8008bbe:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008bc2:	f7f8 f977 	bl	8000eb4 <usart_print>
	usart_flush(USART2);
 8008bc6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008bca:	f2c4 0000 	movt	r0, #16384	; 0x4000

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);

	sprintf(tmp, "SYSCLK = %ld, ", RCC_Clocks.SYSCLK_Frequency);
 8008bce:	ac03      	add	r4, sp, #12
	usart_begin(USART2, PA3, PA2, 19200);
	usart_print(USART2, "Happy are those who know they are spiritually poor; \n");
	usart_print(USART2, "The kingdom of heaven belongs to them!\n");
	usart_print(USART2, "How many eyes does Mississipi river have?\n");
	usart_print(USART2, "Quick brown fox jumped over the lazy dog!\n");
	usart_flush(USART2);
 8008bd0:	f7f8 f9b8 	bl	8000f44 <usart_flush>

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 8008bd4:	a81a      	add	r0, sp, #104	; 0x68
 8008bd6:	f7f9 f911 	bl	8001dfc <RCC_GetClocksFreq>

	sprintf(tmp, "SYSCLK = %ld, ", RCC_Clocks.SYSCLK_Frequency);
 8008bda:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008bdc:	49cb      	ldr	r1, [pc, #812]	; (8008f0c <main+0x3a0>)
 8008bde:	4620      	mov	r0, r4
 8008be0:	f7fb f812 	bl	8003c08 <sprintf>
	usart_print(USART2, tmp);
 8008be4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008be8:	4621      	mov	r1, r4
 8008bea:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008bee:	f7f8 f961 	bl	8000eb4 <usart_print>
	sprintf(tmp, "HCLK = %ld, ", RCC_Clocks.HCLK_Frequency);
 8008bf2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008bf4:	49c6      	ldr	r1, [pc, #792]	; (8008f10 <main+0x3a4>)
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f7fb f806 	bl	8003c08 <sprintf>
	usart_print(USART2, tmp);
 8008bfc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008c00:	4621      	mov	r1, r4
 8008c02:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008c06:	f7f8 f955 	bl	8000eb4 <usart_print>
	sprintf(tmp, "PCLK1 = %ld, ", RCC_Clocks.PCLK1_Frequency);
 8008c0a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008c0c:	49c1      	ldr	r1, [pc, #772]	; (8008f14 <main+0x3a8>)
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f7fa fffa 	bl	8003c08 <sprintf>
	usart_print(USART2, tmp);
 8008c14:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008c18:	4621      	mov	r1, r4
 8008c1a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008c1e:	f7f8 f949 	bl	8000eb4 <usart_print>
	sprintf(tmp, "PCLK2 = %ld\r\n", RCC_Clocks.PCLK2_Frequency);
 8008c22:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008c24:	49bc      	ldr	r1, [pc, #752]	; (8008f18 <main+0x3ac>)
 8008c26:	4620      	mov	r0, r4
 8008c28:	f7fa ffee 	bl	8003c08 <sprintf>
	usart_print(USART2, tmp);
 8008c2c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008c30:	4621      	mov	r1, r4
 8008c32:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008c36:	f7f8 f93d 	bl	8000eb4 <usart_print>
//	usart_flush(USART2Serial);

	GPIOMode(PinPort(PD12), (PinBit(PD12) | PinBit(PD13) | PinBit(PD14) | PinBit(PD15)),
 8008c3a:	f240 400c 	movw	r0, #1036	; 0x40c
 8008c3e:	f7f7 fb31 	bl	80002a4 <PinPort>
 8008c42:	4606      	mov	r6, r0
 8008c44:	f240 400c 	movw	r0, #1036	; 0x40c
 8008c48:	f7f7 fb36 	bl	80002b8 <PinBit>
 8008c4c:	4605      	mov	r5, r0
 8008c4e:	f240 400d 	movw	r0, #1037	; 0x40d
 8008c52:	f7f7 fb31 	bl	80002b8 <PinBit>
 8008c56:	4305      	orrs	r5, r0
 8008c58:	f240 400e 	movw	r0, #1038	; 0x40e
 8008c5c:	f7f7 fb2c 	bl	80002b8 <PinBit>
 8008c60:	b2ad      	uxth	r5, r5
 8008c62:	4305      	orrs	r5, r0
 8008c64:	f240 400f 	movw	r0, #1039	; 0x40f
 8008c68:	f7f7 fb26 	bl	80002b8 <PinBit>
 8008c6c:	b2ad      	uxth	r5, r5
 8008c6e:	ea45 0100 	orr.w	r1, r5, r0
 8008c72:	2201      	movs	r2, #1
 8008c74:	2500      	movs	r5, #0
 8008c76:	4630      	mov	r0, r6
 8008c78:	2302      	movs	r3, #2
 8008c7a:	b289      	uxth	r1, r1
 8008c7c:	9500      	str	r5, [sp, #0]
 8008c7e:	9501      	str	r5, [sp, #4]
 8008c80:	f7f7 fb88 	bl	8000394 <GPIOMode>
	pinMode(PD14, OUTPUT);
	pinMode(PD15, OUTPUT);
	| GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15),
			GPIO_Mode_OUT, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
*/
	spi_begin(SPI2, PB13, PB14, PB15, PB12);
 8008c84:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8008c88:	f240 220e 	movw	r2, #526	; 0x20e
 8008c8c:	f240 230f 	movw	r3, #527	; 0x20f
 8008c90:	f44f 7503 	mov.w	r5, #524	; 0x20c
 8008c94:	f240 210d 	movw	r1, #525	; 0x20d
 8008c98:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008c9c:	9500      	str	r5, [sp, #0]
 8008c9e:	f7f7 fe43 	bl	8000928 <spi_begin>
	digitalWrite(PB12, HIGH);
 8008ca2:	2101      	movs	r1, #1
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	f7f7 fb3b 	bl	8000320 <digitalWrite>

	bits = GPIO_ReadOutputData(GPIOD);
 8008caa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008cae:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008cb2:	f7f8 fd73 	bl	800179c <GPIO_ReadOutputData>
 8008cb6:	4605      	mov	r5, r0
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 8008cb8:	f240 400d 	movw	r0, #1037	; 0x40d
 8008cbc:	f7f7 fafc 	bl	80002b8 <PinBit>
 8008cc0:	0529      	lsls	r1, r5, #20
 8008cc2:	ea40 5111 	orr.w	r1, r0, r1, lsr #20
 8008cc6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008cca:	b289      	uxth	r1, r1
 8008ccc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008cd0:	f7f7 fbde 	bl	8000490 <GPIOWrite>
	delay_ms(intval);
 8008cd4:	2028      	movs	r0, #40	; 0x28
 8008cd6:	f7f7 fab7 	bl	8000248 <delay_ms>
	tnow = millis()/1000;
 8008cda:	f7f7 faaf 	bl	800023c <millis>
	while (tnow == millis()/1000);
 8008cde:	f644 55d3 	movw	r5, #19923	; 0x4dd3
	digitalWrite(PB12, HIGH);

	bits = GPIO_ReadOutputData(GPIOD);
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
	delay_ms(intval);
	tnow = millis()/1000;
 8008ce2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8008ce6:	fbb0 f6f6 	udiv	r6, r0, r6
	while (tnow == millis()/1000);
 8008cea:	f2c1 0562 	movt	r5, #4194	; 0x1062
 8008cee:	f7f7 faa5 	bl	800023c <millis>
 8008cf2:	fba5 2300 	umull	r2, r3, r5, r0
 8008cf6:	ebb6 1f93 	cmp.w	r6, r3, lsr #6
 8008cfa:	d0f8      	beq.n	8008cee <main+0x182>
	tnow = millis()/1000;
 8008cfc:	f7f7 fa9e 	bl	800023c <millis>

		GPIOWrite(GPIOD, PinBit(PD12) | (bits & 0x0fff));
		delay_ms(intval);
		//
		bits &= 0x0fff;
		switch( (tnow % 60)/15 ) {
 8008d00:	f648 0789 	movw	r7, #34953	; 0x8889
			bits |= PinBit(PD13);
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis()/1000);
 8008d04:	f644 56d3 	movw	r6, #19923	; 0x4dd3
	bits = GPIO_ReadOutputData(GPIOD);
	GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
	delay_ms(intval);
	tnow = millis()/1000;
	while (tnow == millis()/1000);
	tnow = millis()/1000;
 8008d08:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8008d0c:	fbb0 f5f5 	udiv	r5, r0, r5

		GPIOWrite(GPIOD, PinBit(PD12) | (bits & 0x0fff));
		delay_ms(intval);
		//
		bits &= 0x0fff;
		switch( (tnow % 60)/15 ) {
 8008d10:	f6c8 0788 	movt	r7, #34952	; 0x8888
			bits |= PinBit(PD13);
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis()/1000);
 8008d14:	f2c1 0662 	movt	r6, #4194	; 0x1062
	tnow = millis()/1000;
	while (tnow == millis()/1000);
	tnow = millis()/1000;

	while (1) {
		bits = GPIO_ReadOutputData(GPIOD);
 8008d18:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008d1c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008d20:	f7f8 fd3c 	bl	800179c <GPIO_ReadOutputData>
 8008d24:	4680      	mov	r8, r0

		GPIOWrite(GPIOD, PinBit(PD13) | (bits & 0x0fff));
 8008d26:	f240 400d 	movw	r0, #1037	; 0x40d
 8008d2a:	f7f7 fac5 	bl	80002b8 <PinBit>
 8008d2e:	ea4f 5808 	mov.w	r8, r8, lsl #20
 8008d32:	ea4f 5818 	mov.w	r8, r8, lsr #20
 8008d36:	ea48 0100 	orr.w	r1, r8, r0
 8008d3a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008d3e:	b289      	uxth	r1, r1
 8008d40:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008d44:	f7f7 fba4 	bl	8000490 <GPIOWrite>
		delay_ms(intval);
 8008d48:	2028      	movs	r0, #40	; 0x28
 8008d4a:	f7f7 fa7d 	bl	8000248 <delay_ms>

		GPIOWrite(GPIOD, PinBit(PD14) | (bits & 0x0fff));
 8008d4e:	f240 400e 	movw	r0, #1038	; 0x40e
 8008d52:	f7f7 fab1 	bl	80002b8 <PinBit>
 8008d56:	ea48 0100 	orr.w	r1, r8, r0
 8008d5a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008d5e:	b289      	uxth	r1, r1
 8008d60:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008d64:	f7f7 fb94 	bl	8000490 <GPIOWrite>
		delay_ms(intval);
 8008d68:	2028      	movs	r0, #40	; 0x28
 8008d6a:	f7f7 fa6d 	bl	8000248 <delay_ms>

		GPIOWrite(GPIOD, PinBit(PD15) | (bits & 0x0fff));
 8008d6e:	f240 400f 	movw	r0, #1039	; 0x40f
 8008d72:	f7f7 faa1 	bl	80002b8 <PinBit>
 8008d76:	ea48 0100 	orr.w	r1, r8, r0
 8008d7a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008d7e:	b289      	uxth	r1, r1
 8008d80:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008d84:	f7f7 fb84 	bl	8000490 <GPIOWrite>
		delay_ms(intval);
 8008d88:	2028      	movs	r0, #40	; 0x28
 8008d8a:	f7f7 fa5d 	bl	8000248 <delay_ms>

		GPIOWrite(GPIOD, PinBit(PD12) | (bits & 0x0fff));
 8008d8e:	f240 400c 	movw	r0, #1036	; 0x40c
 8008d92:	f7f7 fa91 	bl	80002b8 <PinBit>
 8008d96:	ea48 0100 	orr.w	r1, r8, r0
 8008d9a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008d9e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008da2:	b289      	uxth	r1, r1
 8008da4:	f7f7 fb74 	bl	8000490 <GPIOWrite>
		delay_ms(intval);
 8008da8:	2028      	movs	r0, #40	; 0x28
 8008daa:	f7f7 fa4d 	bl	8000248 <delay_ms>
		//
		bits &= 0x0fff;
		switch( (tnow % 60)/15 ) {
 8008dae:	fba7 2305 	umull	r2, r3, r7, r5
 8008db2:	095b      	lsrs	r3, r3, #5
 8008db4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8008db8:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 8008dbc:	fba7 2303 	umull	r2, r3, r7, r3
 8008dc0:	08db      	lsrs	r3, r3, #3
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	f000 8087 	beq.w	8008ed6 <main+0x36a>
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d07c      	beq.n	8008ec6 <main+0x35a>
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	f000 808a 	beq.w	8008ee6 <main+0x37a>
			bits |= PinBit(PD15);
		case 1:
			bits |= PinBit(PD14);
		case 0:
		default:
			bits |= PinBit(PD13);
 8008dd2:	f240 400d 	movw	r0, #1037	; 0x40d
 8008dd6:	f7f7 fa6f 	bl	80002b8 <PinBit>
 8008dda:	ea40 0808 	orr.w	r8, r0, r8
			break;
		}
		GPIOWrite(GPIOD, bits);
 8008dde:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008de2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008de6:	fa1f f188 	uxth.w	r1, r8
 8008dea:	f7f7 fb51 	bl	8000490 <GPIOWrite>

		while (tnow == millis()/1000);
 8008dee:	f7f7 fa25 	bl	800023c <millis>
 8008df2:	fba6 3000 	umull	r3, r0, r6, r0
 8008df6:	f644 58d3 	movw	r8, #19923	; 0x4dd3
 8008dfa:	ebb5 1f90 	cmp.w	r5, r0, lsr #6
 8008dfe:	f2c1 0862 	movt	r8, #4194	; 0x1062
 8008e02:	d0f4      	beq.n	8008dee <main+0x282>
		tnow = millis()/1000;
 8008e04:	f7f7 fa1a 	bl	800023c <millis>
 8008e08:	fba8 2500 	umull	r2, r5, r8, r0

		sprintf(tmp, "%04ld\n", millis());
 8008e0c:	f7f7 fa16 	bl	800023c <millis>
 8008e10:	4942      	ldr	r1, [pc, #264]	; (8008f1c <main+0x3b0>)
 8008e12:	4602      	mov	r2, r0
 8008e14:	4620      	mov	r0, r4
 8008e16:	f7fa fef7 	bl	8003c08 <sprintf>
		usart_print(USART2, tmp);
 8008e1a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008e1e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008e22:	4621      	mov	r1, r4
 8008e24:	f7f8 f846 	bl	8000eb4 <usart_print>

		digitalWrite(PB12, LOW);
 8008e28:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	f7f7 fa77 	bl	8000320 <digitalWrite>
		spi_transfer(SPI2, (uint8_t *)tmp, 8);
 8008e32:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8008e36:	2208      	movs	r2, #8
 8008e38:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008e3c:	4621      	mov	r1, r4
 8008e3e:	f7f7 fe37 	bl	8000ab0 <spi_transfer>
		digitalWrite(PB12, HIGH);
 8008e42:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8008e46:	2101      	movs	r1, #1
 8008e48:	f7f7 fa6a 	bl	8000320 <digitalWrite>
		/*
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
 8008e4c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008e50:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008e54:	f7f8 f934 	bl	80010c0 <usart_available>
			break;
		}
		GPIOWrite(GPIOD, bits);

		while (tnow == millis()/1000);
		tnow = millis()/1000;
 8008e58:	09ad      	lsrs	r5, r5, #6
		/*
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
 8008e5a:	f04f 0800 	mov.w	r8, #0
 8008e5e:	b968      	cbnz	r0, 8008e7c <main+0x310>
 8008e60:	e75a      	b.n	8008d18 <main+0x1ac>
			while ( usart_available(USART2) > 0 && i < 92 ) {
				tmp[i++] = (char) usart_read(USART2);
 8008e62:	f44f 4088 	mov.w	r0, #17408	; 0x4400
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
 8008e66:	f1b8 0f5c 	cmp.w	r8, #92	; 0x5c
				tmp[i++] = (char) usart_read(USART2);
 8008e6a:	f2c4 0000 	movt	r0, #16384	; 0x4000
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
 8008e6e:	d043      	beq.n	8008ef8 <main+0x38c>
				tmp[i++] = (char) usart_read(USART2);
 8008e70:	f7f8 f830 	bl	8000ed4 <usart_read>
 8008e74:	f804 0008 	strb.w	r0, [r4, r8]
 8008e78:	f108 0801 	add.w	r8, r8, #1
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
 8008e7c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008e80:	f2c4 0000 	movt	r0, #16384	; 0x4000
				tmp[i++] = (char) usart_read(USART2);
 8008e84:	fa1f f988 	uxth.w	r9, r8
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
 8008e88:	f7f8 f91a 	bl	80010c0 <usart_available>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d1e8      	bne.n	8008e62 <main+0x2f6>
				tmp[i++] = (char) usart_read(USART2);
			}
			tmp[i] = 0;
 8008e90:	ab1e      	add	r3, sp, #120	; 0x78
 8008e92:	4499      	add	r9, r3
			usart_print(USART2, "> ");
 8008e94:	f44f 4088 	mov.w	r0, #17408	; 0x4400
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
				tmp[i++] = (char) usart_read(USART2);
			}
			tmp[i] = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f809 3c6c 	strb.w	r3, [r9, #-108]
			usart_print(USART2, "> ");
 8008e9e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008ea2:	491f      	ldr	r1, [pc, #124]	; (8008f20 <main+0x3b4>)
 8008ea4:	f7f8 f806 	bl	8000eb4 <usart_print>
			usart_print(USART2, tmp);
 8008ea8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008eac:	4621      	mov	r1, r4
 8008eae:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008eb2:	f7f7 ffff 	bl	8000eb4 <usart_print>
			usart_print(USART2, "\n");
 8008eb6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8008eba:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8008ebe:	4919      	ldr	r1, [pc, #100]	; (8008f24 <main+0x3b8>)
 8008ec0:	f7f7 fff8 	bl	8000eb4 <usart_print>
 8008ec4:	e728      	b.n	8008d18 <main+0x1ac>
		delay_ms(intval);
		//
		bits &= 0x0fff;
		switch( (tnow % 60)/15 ) {
		case 3:
			bits |= PinBit(PD12);
 8008ec6:	f240 400c 	movw	r0, #1036	; 0x40c
 8008eca:	f7f7 f9f5 	bl	80002b8 <PinBit>
 8008ece:	ea40 0808 	orr.w	r8, r0, r8
 8008ed2:	fa1f f888 	uxth.w	r8, r8
		case 2:
			bits |= PinBit(PD15);
 8008ed6:	f240 400f 	movw	r0, #1039	; 0x40f
 8008eda:	f7f7 f9ed 	bl	80002b8 <PinBit>
 8008ede:	ea40 0808 	orr.w	r8, r0, r8
 8008ee2:	fa1f f888 	uxth.w	r8, r8
		case 1:
			bits |= PinBit(PD14);
 8008ee6:	f240 400e 	movw	r0, #1038	; 0x40e
 8008eea:	f7f7 f9e5 	bl	80002b8 <PinBit>
 8008eee:	ea40 0808 	orr.w	r8, r0, r8
 8008ef2:	fa1f f888 	uxth.w	r8, r8
 8008ef6:	e76c      	b.n	8008dd2 <main+0x266>
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i = 0;
		if ( usart_available(USART2) > 0 ) {
			while ( usart_available(USART2) > 0 && i < 92 ) {
 8008ef8:	46c1      	mov	r9, r8
 8008efa:	e7c9      	b.n	8008e90 <main+0x324>
 8008efc:	080090e0 	.word	0x080090e0
 8008f00:	08009118 	.word	0x08009118
 8008f04:	08009140 	.word	0x08009140
 8008f08:	0800916c 	.word	0x0800916c
 8008f0c:	08009198 	.word	0x08009198
 8008f10:	080091a8 	.word	0x080091a8
 8008f14:	080091b8 	.word	0x080091b8
 8008f18:	080091c8 	.word	0x080091c8
 8008f1c:	080091d8 	.word	0x080091d8
 8008f20:	080091e0 	.word	0x080091e0
 8008f24:	080091d4 	.word	0x080091d4

08008f28 <Reset_Handler>:
 8008f28:	2100      	movs	r1, #0
 8008f2a:	e003      	b.n	8008f34 <LoopCopyDataInit>

08008f2c <CopyDataInit>:
 8008f2c:	4b0a      	ldr	r3, [pc, #40]	; (8008f58 <LoopFillZerobss+0x10>)
 8008f2e:	585b      	ldr	r3, [r3, r1]
 8008f30:	5043      	str	r3, [r0, r1]
 8008f32:	3104      	adds	r1, #4

08008f34 <LoopCopyDataInit>:
 8008f34:	4809      	ldr	r0, [pc, #36]	; (8008f5c <LoopFillZerobss+0x14>)
 8008f36:	4b0a      	ldr	r3, [pc, #40]	; (8008f60 <LoopFillZerobss+0x18>)
 8008f38:	1842      	adds	r2, r0, r1
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d3f6      	bcc.n	8008f2c <CopyDataInit>
 8008f3e:	4a09      	ldr	r2, [pc, #36]	; (8008f64 <LoopFillZerobss+0x1c>)
 8008f40:	e002      	b.n	8008f48 <LoopFillZerobss>

08008f42 <FillZerobss>:
 8008f42:	2300      	movs	r3, #0
 8008f44:	f842 3b04 	str.w	r3, [r2], #4

08008f48 <LoopFillZerobss>:
 8008f48:	4b07      	ldr	r3, [pc, #28]	; (8008f68 <LoopFillZerobss+0x20>)
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d3f9      	bcc.n	8008f42 <FillZerobss>
 8008f4e:	f7fa fcf3 	bl	8003938 <SystemInit>
 8008f52:	f7ff fe0b 	bl	8008b6c <main>
 8008f56:	4770      	bx	lr
 8008f58:	0800926c 	.word	0x0800926c
 8008f5c:	20000000 	.word	0x20000000
 8008f60:	2000095c 	.word	0x2000095c
 8008f64:	2000095c 	.word	0x2000095c
 8008f68:	20001600 	.word	0x20001600

08008f6c <ADC_IRQHandler>:
 8008f6c:	e7fe      	b.n	8008f6c <ADC_IRQHandler>
	...

08008f70 <blanks.3927>:
 8008f70:	2020 2020 2020 2020 2020 2020 2020 2020                     

08008f80 <zeroes.3928>:
 8008f80:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

08008f90 <_global_impure_ptr>:
 8008f90:	00a8 2000 0000 0000                         ... ....

08008f98 <p05.2449>:
 8008f98:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

08008fa8 <__mprec_tens>:
 8008fa8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8008fb8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8008fc8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8008fd8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8008fe8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8008ff8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8009008:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8009018:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8009028:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8009038:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8009048:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8009058:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8009068:	9db4 79d9 7843 44ea                         ...yCx.D

08009070 <__mprec_tinytens>:
 8009070:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8009080:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8009090:	6f43 64ac 0628 0ac8                         Co.d(...

08009098 <__mprec_bigtens>:
 8009098:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80090a8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80090b8:	bf3c 7f73 4fdd 7515                         <.s..O.u

080090c0 <blanks.3871>:
 80090c0:	2020 2020 2020 2020 2020 2020 2020 2020                     

080090d0 <zeroes.3872>:
 80090d0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 80090e0:	6148 7070 2079 7261 2065 6874 736f 2065     Happy are those 
 80090f0:	6877 206f 6e6b 776f 7420 6568 2079 7261     who know they ar
 8009100:	2065 7073 7269 7469 6175 6c6c 2079 6f70     e spiritually po
 8009110:	726f 203b 000a 0000 6854 2065 696b 676e     or; ....The king
 8009120:	6f64 206d 666f 6820 6165 6576 206e 6562     dom of heaven be
 8009130:	6f6c 676e 2073 6f74 7420 6568 216d 000a     longs to them!..
 8009140:	6f48 2077 616d 796e 6520 6579 2073 6f64     How many eyes do
 8009150:	7365 4d20 7369 6973 7373 7069 2069 6972     es Mississipi ri
 8009160:	6576 2072 6168 6576 0a3f 0000 7551 6369     ver have?...Quic
 8009170:	206b 7262 776f 206e 6f66 2078 756a 706d     k brown fox jump
 8009180:	6465 6f20 6576 2072 6874 2065 616c 797a     ed over the lazy
 8009190:	6420 676f 0a21 0000 5953 4353 4b4c 3d20      dog!...SYSCLK =
 80091a0:	2520 646c 202c 0000 4348 4b4c 3d20 2520      %ld, ..HCLK = %
 80091b0:	646c 202c 0000 0000 4350 4b4c 2031 203d     ld, ....PCLK1 = 
 80091c0:	6c25 2c64 0020 0000 4350 4b4c 2032 203d     %ld, ...PCLK2 = 
 80091d0:	6c25 0d64 000a 0000 3025 6c34 0a64 0000     %ld.....%04ld...
 80091e0:	203e 0000 6548 7061 6120 646e 7320 6174     > ..Heap and sta
 80091f0:	6b63 6320 6c6f 696c 6973 6e6f 000a 0000     ck collision....
 8009200:	7865 7469 0000 0000 4e49 0046 6e69 0066     exit....INF.inf.
 8009210:	414e 004e 616e 006e 3130 3332 3534 3736     NAN.nan.01234567
 8009220:	3938 4241 4443 4645 0000 0000 3130 3332     89ABCDEF....0123
 8009230:	3534 3736 3938 6261 6463 6665 0000 0000     456789abcdef....
 8009240:	6e28 6c75 296c 0000 0030 0000 6e49 6966     (null)..0...Infi
 8009250:	696e 7974 0000 0000 614e 004e 0043 0000     nity....NaN.C...
 8009260:	4f50 4953 0058 0000 002e 0000               POSIX.......
