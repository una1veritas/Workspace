
stm32f4-usart.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <digitalRead>:
void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
	uint8_t mode = (port->MODER) >> (pin * 2);
 8000188:	6802      	ldr	r2, [r0, #0]

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
 800018a:	b508      	push	{r3, lr}
	uint8_t mode = (port->MODER) >> (pin * 2);
	if (mode == GPIO_Mode_OUT)
 800018c:	004b      	lsls	r3, r1, #1
 800018e:	fa32 f303 	lsrs.w	r3, r2, r3
 8000192:	b2db      	uxtb	r3, r3
 8000194:	2b01      	cmp	r3, #1
 8000196:	d005      	beq.n	80001a4 <digitalRead+0x1c>
		return (GPIO_ReadOutputDataBit(port, pin) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, pin) ? SET : RESET);
 8000198:	f000 fee8 	bl	8000f6c <GPIO_ReadInputDataBit>
 800019c:	3800      	subs	r0, #0
 800019e:	bf18      	it	ne
 80001a0:	2001      	movne	r0, #1
}
 80001a2:	bd08      	pop	{r3, pc}
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
	uint8_t mode = (port->MODER) >> (pin * 2);
	if (mode == GPIO_Mode_OUT)
		return (GPIO_ReadOutputDataBit(port, pin) ? SET : RESET);
 80001a4:	f000 feec 	bl	8000f80 <GPIO_ReadOutputDataBit>
 80001a8:	3800      	subs	r0, #0
 80001aa:	bf18      	it	ne
 80001ac:	2001      	movne	r0, #1
 80001ae:	bd08      	pop	{r3, pc}

080001b0 <portWrite>:
		GPIO_ResetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
	}
}

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 80001b0:	f000 befa 	b.w	8000fa8 <GPIO_Write>

080001b4 <digitalWrite>:

/*
 static void turnOffPWM(uint8_t timer) {
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
 80001b4:	4603      	mov	r3, r0
	if (bit) {
 80001b6:	b951      	cbnz	r1, 80001ce <digitalWrite+0x1a>
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
	} else {
		GPIO_ResetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 80001b8:	f240 0100 	movw	r1, #0
 80001bc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80001c0:	f3c0 4c03 	ubfx	ip, r0, #16, #4
 80001c4:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 80001c8:	b299      	uxth	r1, r3
 80001ca:	f000 bee5 	b.w	8000f98 <GPIO_ResetBits>
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 80001ce:	f240 0200 	movw	r2, #0
 80001d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80001d6:	f3c0 4103 	ubfx	r1, r0, #16, #4
 80001da:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80001de:	b299      	uxth	r1, r3
 80001e0:	f000 bed8 	b.w	8000f94 <GPIO_SetBits>

080001e4 <GPIOMode>:
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
}


void GPIOMode(uint32_t portpin, GPIOMode_TypeDef mode,
		GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 80001e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 80001e8:	f240 0400 	movw	r4, #0
 80001ec:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80001f0:	f3c0 4603 	ubfx	r6, r0, #16, #4
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
}


void GPIOMode(uint32_t portpin, GPIOMode_TypeDef mode,
		GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 80001f4:	b082      	sub	sp, #8
 80001f6:	4605      	mov	r5, r0

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 80001f8:	eb04 0086 	add.w	r0, r4, r6, lsl #2
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
}


void GPIOMode(uint32_t portpin, GPIOMode_TypeDef mode,
		GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 80001fc:	460f      	mov	r7, r1
 80001fe:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 8000202:	2101      	movs	r1, #1
 8000204:	6a80      	ldr	r0, [r0, #40]	; 0x28
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
}


void GPIOMode(uint32_t portpin, GPIOMode_TypeDef mode,
		GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000206:	4692      	mov	sl, r2
 8000208:	4699      	mov	r9, r3

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
	//
	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;;
 800020a:	b2ad      	uxth	r5, r5
void GPIOMode(uint32_t portpin, GPIOMode_TypeDef mode,
		GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 800020c:	f001 f8f0 	bl	80013f0 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 8000210:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000214:	4669      	mov	r1, sp

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
	//
	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;;
 8000216:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
 8000218:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
 800021c:	f88d 9006 	strb.w	r9, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8000220:	f88d 8007 	strb.w	r8, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 8000224:	f88d a005 	strb.w	sl, [sp, #5]
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 8000228:	f000 fafc 	bl	8000824 <GPIO_Init>
}
 800022c:	b002      	add	sp, #8
 800022e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000232:	bf00      	nop

08000234 <pinMode>:
 static const uint8_t MISO = 12;
 static const uint8_t SCK  = 13; // PB7
 static const uint8_t LED_BUILTIN = 14;
 */

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 8000236:	f240 0400 	movw	r4, #0
 800023a:	f3c0 4603 	ubfx	r6, r0, #16, #4
 800023e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000242:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 static const uint8_t MISO = 12;
 static const uint8_t SCK  = 13; // PB7
 static const uint8_t LED_BUILTIN = 14;
 */

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 8000246:	b083      	sub	sp, #12
 8000248:	460f      	mov	r7, r1
 800024a:	4605      	mov	r5, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 800024c:	2101      	movs	r1, #1
 800024e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000250:	f001 f8ce 	bl	80013f0 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 8000254:	b2ad      	uxth	r5, r5
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000256:	2300      	movs	r3, #0
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000258:	2202      	movs	r2, #2
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 800025a:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800025e:	4669      	mov	r1, sp

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 8000260:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
 8000262:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000266:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800026a:	f88d 2005 	strb.w	r2, [sp, #5]

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800026e:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 8000272:	f000 fad7 	bl	8000824 <GPIO_Init>
}
 8000276:	b003      	add	sp, #12
 8000278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800027a:	bf00      	nop

0800027c <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 800027c:	f240 634c 	movw	r3, #1612	; 0x64c
 8000280:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000284:	6818      	ldr	r0, [r3, #0]
 8000286:	1c42      	adds	r2, r0, #1
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	4770      	bx	lr

0800028c <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 800028c:	f240 634c 	movw	r3, #1612	; 0x64c
 8000290:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000294:	681a      	ldr	r2, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 8000296:	6819      	ldr	r1, [r3, #0]
 8000298:	1a89      	subs	r1, r1, r2
 800029a:	4281      	cmp	r1, r0
 800029c:	d3fb      	bcc.n	8000296 <SysTick_delay+0xa>
		;
}
 800029e:	4770      	bx	lr

080002a0 <SysTick_Start>:

void SysTick_Start(const uint32_t ticks) {
	if ( SysTick_Config(SystemCoreClock / ticks) ) {
 80002a0:	f240 01dc 	movw	r1, #220	; 0xdc
 80002a4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002a8:	680b      	ldr	r3, [r1, #0]
 80002aa:	fbb3 f3f0 	udiv	r3, r3, r0
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80002ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80002b2:	d214      	bcs.n	80002de <SysTick_Start+0x3e>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80002b4:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 80002b8:	f24e 0010 	movw	r0, #57360	; 0xe010
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80002bc:	f64e 5200 	movw	r2, #60672	; 0xed00
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80002c0:	f2ce 0000 	movt	r0, #57344	; 0xe000
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80002c4:	f2ce 0200 	movt	r2, #57344	; 0xe000
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80002c8:	2300      	movs	r3, #0
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80002ca:	3901      	subs	r1, #1
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80002cc:	f06f 0c0f 	mvn.w	ip, #15
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80002d0:	6041      	str	r1, [r0, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80002d2:	f882 c023 	strb.w	ip, [r2, #35]	; 0x23
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002d6:	1dda      	adds	r2, r3, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80002d8:	6083      	str	r3, [r0, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002da:	6002      	str	r2, [r0, #0]
		/* Setup SysTick for 1 msec interrupts */
		/* Handle Error */
		while (1)
			;
	}
}
 80002dc:	4770      	bx	lr
 80002de:	e7fe      	b.n	80002de <SysTick_Start+0x3e>

080002e0 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 80002e0:	f240 634c 	movw	r3, #1612	; 0x64c
 80002e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002e8:	6818      	ldr	r0, [r3, #0]
}
 80002ea:	4770      	bx	lr

080002ec <buffer_clear>:
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 80002ec:	2300      	movs	r3, #0
	r->tail = 0;
	r->count = 0;
 80002ee:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 80002f2:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 80002f6:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
}
 80002fa:	4770      	bx	lr

080002fc <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 80002fc:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop

08000304 <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000304:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 8000308:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 800030c:	429a      	cmp	r2, r3
 800030e:	d001      	beq.n	8000314 <buffer_is_full+0x10>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000318:	3800      	subs	r0, #0
 800031a:	bf18      	it	ne
 800031c:	2001      	movne	r0, #1
		return 1;
	}
	return 0;
}
 800031e:	4770      	bx	lr

08000320 <buffer_enque>:
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000320:	f8b0 c100 	ldrh.w	ip, [r0, #256]	; 0x100
		return 1;
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000324:	b410      	push	{r4}
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000326:	f9b0 4102 	ldrsh.w	r4, [r0, #258]	; 0x102
 800032a:	fa0f f28c 	sxth.w	r2, ip
 800032e:	4294      	cmp	r4, r2
		return 1;
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000330:	4603      	mov	r3, r0
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000332:	d017      	beq.n	8000364 <buffer_enque+0x44>
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
 8000334:	f10c 0c01 	add.w	ip, ip, #1
	r->count++;
	r->head %= USART_BUFFER_SIZE;
 8000338:	fa0f f48c 	sxth.w	r4, ip
 800033c:	17e0      	asrs	r0, r4, #31
 800033e:	0e40      	lsrs	r0, r0, #25
 8000340:	eb04 0c00 	add.w	ip, r4, r0

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000344:	f8b3 4104 	ldrh.w	r4, [r3, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8000348:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
 800034c:	ebc0 000c 	rsb	r0, r0, ip

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000350:	3401      	adds	r4, #1
	r->head %= USART_BUFFER_SIZE;
 8000352:	f8a3 0100 	strh.w	r0, [r3, #256]	; 0x100
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
 8000356:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	r->count++;
 800035a:	f8a3 4104 	strh.w	r4, [r3, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
	return w;
}
 800035e:	4608      	mov	r0, r1
 8000360:	bc10      	pop	{r4}
 8000362:	4770      	bx	lr
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000364:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000368:	2800      	cmp	r0, #0
 800036a:	d0e3      	beq.n	8000334 <buffer_enque+0x14>
 800036c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000370:	e7f5      	b.n	800035e <buffer_enque+0x3e>
 8000372:	bf00      	nop

08000374 <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000374:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8000378:	4603      	mov	r3, r0
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 800037a:	b1b2      	cbz	r2, 80003aa <buffer_deque+0x36>

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 800037c:	f8b0 0102 	ldrh.w	r0, [r0, #258]	; 0x102
	r->count--;
 8000380:	3a01      	subs	r2, #1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8000382:	f100 0c01 	add.w	ip, r0, #1
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000386:	fa0f fc8c 	sxth.w	ip, ip
 800038a:	ea4f 71ec 	mov.w	r1, ip, asr #31
 800038e:	0e49      	lsrs	r1, r1, #25
 8000390:	448c      	add	ip, r1
 8000392:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
 8000396:	ebc1 010c 	rsb	r1, r1, ip

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 800039a:	b200      	sxth	r0, r0
 800039c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 80003a0:	f8a3 1102 	strh.w	r1, [r3, #258]	; 0x102
uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
	r->count--;
 80003a4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 80003a8:	4770      	bx	lr
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 80003aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80003ae:	4770      	bx	lr

080003b0 <usart_id>:
  UART5,
  USART6,
};

uint8_t usart_id(USART_TypeDef * USARTx) {
	if ( USARTx == USART1 )
 80003b0:	f241 0300 	movw	r3, #4096	; 0x1000
 80003b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80003b8:	4298      	cmp	r0, r3
 80003ba:	d011      	beq.n	80003e0 <usart_id+0x30>
			return USART_1;
	if ( USARTx == USART2 )
 80003bc:	f244 4100 	movw	r1, #17408	; 0x4400
 80003c0:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80003c4:	4288      	cmp	r0, r1
 80003c6:	d00f      	beq.n	80003e8 <usart_id+0x38>
			return USART_2;
	if ( USARTx == USART3 )
 80003c8:	f644 0200 	movw	r2, #18432	; 0x4800
 80003cc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80003d0:	4290      	cmp	r0, r2
 80003d2:	d00b      	beq.n	80003ec <usart_id+0x3c>
			return USART_3;
	if ( USARTx == USART6 )
 80003d4:	f241 4c00 	movw	ip, #5120	; 0x1400
 80003d8:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 80003dc:	4560      	cmp	r0, ip
 80003de:	d001      	beq.n	80003e4 <usart_id+0x34>
 80003e0:	2000      	movs	r0, #0
			return USART_6;
	return 0;
}
 80003e2:	4770      	bx	lr
			return USART_1;
	if ( USARTx == USART2 )
			return USART_2;
	if ( USARTx == USART3 )
			return USART_3;
	if ( USARTx == USART6 )
 80003e4:	2005      	movs	r0, #5
 80003e6:	4770      	bx	lr
};

uint8_t usart_id(USART_TypeDef * USARTx) {
	if ( USARTx == USART1 )
			return USART_1;
	if ( USARTx == USART2 )
 80003e8:	2001      	movs	r0, #1
 80003ea:	4770      	bx	lr
			return USART_2;
	if ( USARTx == USART3 )
 80003ec:	2002      	movs	r0, #2
 80003ee:	4770      	bx	lr

080003f0 <usart_read>:

uint16_t usart_bare_read(USART_TypeDef * USARTx) {
	return USART_ReceiveData(USARTx );
}

uint16_t usart_read(USART_TypeDef * USARTx) {
 80003f0:	b508      	push	{r3, lr}
	uint16_t w = buffer_deque(&rxring[USART_3]);
 80003f2:	4804      	ldr	r0, [pc, #16]	; (8000404 <usart_read+0x14>)
 80003f4:	f7ff ffbe 	bl	8000374 <buffer_deque>
	if ( w == 0xffff ) return 0; // buffer is empty
 80003f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	return w;
}
 80003fc:	4298      	cmp	r0, r3
 80003fe:	bf08      	it	eq
 8000400:	2000      	moveq	r0, #0
 8000402:	bd08      	pop	{r3, pc}
 8000404:	20000b70 	.word	0x20000b70

08000408 <usart_peek>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000408:	f640 1364 	movw	r3, #2404	; 0x964
 800040c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000410:	f8b3 2310 	ldrh.w	r2, [r3, #784]	; 0x310
 8000414:	b132      	cbz	r2, 8000424 <usart_peek+0x1c>
	buffer_clear(&txring[USART_3]);
}

uint16_t usart_peek(USART_TypeDef * uport) {
	if ( ! buffer_count(&rxring[USART_3]) == 0 )
		return rxring[USART_3].buf[rxring[USART_3].tail];
 8000416:	f9b3 030e 	ldrsh.w	r0, [r3, #782]	; 0x30e
 800041a:	f500 7183 	add.w	r1, r0, #262	; 0x106
 800041e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	return 0xffff;
}
 8000422:	4770      	bx	lr
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000424:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop

0800042c <usart_available>:
	if ( ! buffer_count(&rxring[USART_3]) == 0 )
		return rxring[USART_3].buf[rxring[USART_3].tail];
	return 0xffff;
}

uint16_t usart_available(USART_TypeDef * uport) {
 800042c:	f640 1364 	movw	r3, #2404	; 0x964
 8000430:	f2c2 0300 	movt	r3, #8192	; 0x2000
	return buffer_count(&rxring[USART_3]);
}
 8000434:	f8b3 0310 	ldrh.w	r0, [r3, #784]	; 0x310
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop

0800043c <usart_bare_read>:
	while (*s)
		usart_write(USARTx, (uint16_t) *s++);
}

uint16_t usart_bare_read(USART_TypeDef * USARTx) {
	return USART_ReceiveData(USARTx );
 800043c:	f002 b9ee 	b.w	800281c <USART_ReceiveData>

08000440 <usart_write>:
		;
	USART_SendData(USARTx, w);
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
}

void usart_write(USART_TypeDef * USARTx, const uint16_t w) {
 8000440:	b570      	push	{r4, r5, r6, lr}
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 8000442:	2200      	movs	r2, #0
		;
	USART_SendData(USARTx, w);
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
}

void usart_write(USART_TypeDef * USARTx, const uint16_t w) {
 8000444:	460d      	mov	r5, r1
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 8000446:	f240 7127 	movw	r1, #1831	; 0x727
		;
	USART_SendData(USARTx, w);
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
}

void usart_write(USART_TypeDef * USARTx, const uint16_t w) {
 800044a:	4604      	mov	r4, r0
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 800044c:	f002 faaa 	bl	80029a4 <USART_ITConfig>
	buffer_enque(&txring[USART_3], w);
 8000450:	4629      	mov	r1, r5
 8000452:	4805      	ldr	r0, [pc, #20]	; (8000468 <usart_write+0x28>)
 8000454:	f7ff ff64 	bl	8000320 <buffer_enque>
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) ENABLE);
 8000458:	4620      	mov	r0, r4
 800045a:	f240 7127 	movw	r1, #1831	; 0x727
 800045e:	2201      	movs	r2, #1
}
 8000460:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

void usart_write(USART_TypeDef * USARTx, const uint16_t w) {
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
	buffer_enque(&txring[USART_3], w);
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) ENABLE);
 8000464:	f002 ba9e 	b.w	80029a4 <USART_ITConfig>
 8000468:	2000085c 	.word	0x2000085c

0800046c <usart_print>:
}

void usart_print(USART_TypeDef * USARTx, const char * s) {
 800046c:	b538      	push	{r3, r4, r5, lr}
 800046e:	460c      	mov	r4, r1
	while (*s)
 8000470:	7809      	ldrb	r1, [r1, #0]
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
	buffer_enque(&txring[USART_3], w);
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) ENABLE);
}

void usart_print(USART_TypeDef * USARTx, const char * s) {
 8000472:	4605      	mov	r5, r0
	while (*s)
 8000474:	b131      	cbz	r1, 8000484 <usart_print+0x18>
		usart_write(USARTx, (uint16_t) *s++);
 8000476:	4628      	mov	r0, r5
 8000478:	f7ff ffe2 	bl	8000440 <usart_write>
	buffer_enque(&txring[USART_3], w);
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) ENABLE);
}

void usart_print(USART_TypeDef * USARTx, const char * s) {
	while (*s)
 800047c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000480:	2900      	cmp	r1, #0
 8000482:	d1f8      	bne.n	8000476 <usart_print+0xa>
 8000484:	bd38      	pop	{r3, r4, r5, pc}
 8000486:	bf00      	nop

08000488 <USART3_IRQHandler>:
}

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8000488:	f644 0000 	movw	r0, #18432	; 0x4800
	return buffer_count(&rxring[USART_3]);
}

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART3_IRQHandler(void) {
 800048c:	b510      	push	{r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 800048e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000492:	f240 5125 	movw	r1, #1317	; 0x525
 8000496:	f002 faab 	bl	80029f0 <USART_GetITStatus>
 800049a:	2800      	cmp	r0, #0
 800049c:	d130      	bne.n	8000500 <USART3_IRQHandler+0x78>
		buffer_enque(&rxring[USART_3], USART_ReceiveData(USART3) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 800049e:	f644 0000 	movw	r0, #18432	; 0x4800
 80004a2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80004a6:	f240 7127 	movw	r1, #1831	; 0x727
 80004aa:	f002 faa1 	bl	80029f0 <USART_GetITStatus>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d025      	beq.n	80004fe <USART3_IRQHandler+0x76>
		if (txring[USART_3].count == 0) {
 80004b2:	f240 6050 	movw	r0, #1616	; 0x650
 80004b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80004ba:	f8b0 2310 	ldrh.w	r2, [r0, #784]	; 0x310
 80004be:	b162      	cbz	r2, 80004da <USART3_IRQHandler+0x52>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART_3]));
 80004c0:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 80004c4:	f7ff ff56 	bl	8000374 <buffer_deque>
 80004c8:	4601      	mov	r1, r0
 80004ca:	f644 0000 	movw	r0, #18432	; 0x4800
 80004ce:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 80004d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART_3].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART_3]));
 80004d6:	f002 b99d 	b.w	8002814 <USART_SendData>
		buffer_enque(&rxring[USART_3], USART_ReceiveData(USART3) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART_3].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 80004da:	f644 0000 	movw	r0, #18432	; 0x4800
 80004de:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80004e2:	f240 7127 	movw	r1, #1831	; 0x727
 80004e6:	f002 fa5d 	bl	80029a4 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 80004ea:	f644 0000 	movw	r0, #18432	; 0x4800
 80004ee:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80004f2:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART_3]));
		}
	}
}
 80004f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART_3].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 80004fa:	f002 baa3 	b.w	8002a44 <USART_ClearITPendingBit>
 80004fe:	bd10      	pop	{r4, pc}

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART_3], USART_ReceiveData(USART3) );
 8000500:	f644 0000 	movw	r0, #18432	; 0x4800
 8000504:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000508:	f002 f988 	bl	800281c <USART_ReceiveData>
 800050c:	4601      	mov	r1, r0
 800050e:	4802      	ldr	r0, [pc, #8]	; (8000518 <USART3_IRQHandler+0x90>)
 8000510:	f7ff ff06 	bl	8000320 <buffer_enque>
 8000514:	e7c3      	b.n	800049e <USART3_IRQHandler+0x16>
 8000516:	bf00      	nop
 8000518:	20000b70 	.word	0x20000b70

0800051c <usart_flush>:
	uint16_t w = buffer_deque(&rxring[USART_3]);
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}

void usart_flush(USART_TypeDef * USARTx) {
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
 800051e:	2200      	movs	r2, #0
 8000520:	f240 5125 	movw	r1, #1317	; 0x525
	uint16_t w = buffer_deque(&rxring[USART_3]);
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}

void usart_flush(USART_TypeDef * USARTx) {
 8000524:	4604      	mov	r4, r0
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
 8000526:	f002 fa3d 	bl	80029a4 <USART_ITConfig>
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 800052a:	f640 1364 	movw	r3, #2404	; 0x964
 800052e:	f2c2 0300 	movt	r3, #8192	; 0x2000
	r->tail = 0;
	r->count = 0;
 8000532:	f04f 0200 	mov.w	r2, #0
 8000536:	f8a3 2310 	strh.w	r2, [r3, #784]	; 0x310
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 800053a:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c
	r->tail = 0;
 800053e:	f8a3 230e 	strh.w	r2, [r3, #782]	; 0x30e
}

void usart_flush(USART_TypeDef * USARTx) {
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[USART_3]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
 8000542:	f240 5125 	movw	r1, #1317	; 0x525
 8000546:	4620      	mov	r0, r4
 8000548:	f002 fa7c 	bl	8002a44 <USART_ClearITPendingBit>
 800054c:	f240 6550 	movw	r5, #1616	; 0x650
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
 8000550:	4620      	mov	r0, r4
 8000552:	f240 5125 	movw	r1, #1317	; 0x525
 8000556:	2201      	movs	r2, #1
 8000558:	f002 fa24 	bl	80029a4 <USART_ITConfig>
 800055c:	f2c2 0500 	movt	r5, #8192	; 0x2000
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 8000560:	4620      	mov	r0, r4
 8000562:	f240 7127 	movw	r1, #1831	; 0x727
 8000566:	2200      	movs	r2, #0
 8000568:	f002 fa1c 	bl	80029a4 <USART_ITConfig>
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 800056c:	f8b5 7310 	ldrh.w	r7, [r5, #784]	; 0x310
 8000570:	f240 6650 	movw	r6, #1616	; 0x650
 8000574:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8000578:	b1d7      	cbz	r7, 80005b0 <usart_flush+0x94>
	buffer_clear(&rxring[USART_3]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
	while ( buffer_count(&txring[USART_3]) > 0 ) {
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
 800057a:	4620      	mov	r0, r4
 800057c:	2180      	movs	r1, #128	; 0x80
 800057e:	f002 fa2d 	bl	80029dc <USART_GetFlagStatus>
 8000582:	2800      	cmp	r0, #0
 8000584:	d0f9      	beq.n	800057a <usart_flush+0x5e>
		USART_SendData(USARTx, buffer_deque(&txring[USART_3]));
 8000586:	4810      	ldr	r0, [pc, #64]	; (80005c8 <usart_flush+0xac>)
 8000588:	f7ff fef4 	bl	8000374 <buffer_deque>
 800058c:	4601      	mov	r1, r0
 800058e:	4620      	mov	r0, r4
 8000590:	f002 f940 	bl	8002814 <USART_SendData>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
 8000594:	4620      	mov	r0, r4
 8000596:	2140      	movs	r1, #64	; 0x40
 8000598:	f002 fa20 	bl	80029dc <USART_GetFlagStatus>
 800059c:	2800      	cmp	r0, #0
 800059e:	d0f9      	beq.n	8000594 <usart_flush+0x78>
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 80005a0:	f8b5 7310 	ldrh.w	r7, [r5, #784]	; 0x310
 80005a4:	f240 6650 	movw	r6, #1616	; 0x650
 80005a8:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80005ac:	2f00      	cmp	r7, #0
 80005ae:	d1e4      	bne.n	800057a <usart_flush+0x5e>
	while ( buffer_count(&txring[USART_3]) > 0 ) {
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
		USART_SendData(USARTx, buffer_deque(&txring[USART_3]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
 80005b0:	4620      	mov	r0, r4
 80005b2:	f240 7127 	movw	r1, #1831	; 0x727
 80005b6:	f002 fa45 	bl	8002a44 <USART_ClearITPendingBit>
USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
	r->tail = 0;
	r->count = 0;
 80005ba:	f8a6 7310 	strh.w	r7, [r6, #784]	; 0x310
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 80005be:	f8a6 730c 	strh.w	r7, [r6, #780]	; 0x30c
	r->tail = 0;
 80005c2:	f8a6 730e 	strh.w	r7, [r6, #782]	; 0x30e
		USART_SendData(USARTx, buffer_deque(&txring[USART_3]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
	buffer_clear(&txring[USART_3]);
}
 80005c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005c8:	2000085c 	.word	0x2000085c

080005cc <usart_bare_write>:

	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx, (FunctionalState) ENABLE);
}

void usart_bare_write(USART_TypeDef * USARTx, const uint16_t w) {
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	4604      	mov	r4, r0
 80005d0:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET)
 80005d2:	4620      	mov	r0, r4
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	f002 fa01 	bl	80029dc <USART_GetFlagStatus>
 80005da:	2800      	cmp	r0, #0
 80005dc:	d0f9      	beq.n	80005d2 <usart_bare_write+0x6>
		;
	USART_SendData(USARTx, w);
 80005de:	4620      	mov	r0, r4
 80005e0:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
}
 80005e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

void usart_bare_write(USART_TypeDef * USARTx, const uint16_t w) {
	while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET)
		;
	USART_SendData(USARTx, w);
 80005e6:	f002 b915 	b.w	8002814 <USART_SendData>
 80005ea:	bf00      	nop

080005ec <usart_begin>:
				((uint32_t) RCC_APB1Periph_USART3), GPIOB, GPIO_PinSource11, GPIO_PinSource10, GPIO_AF_USART3,
				USART3_IRQn
		}
};

void usart_begin(USART_TypeDef * USARTx, const uint32_t baud) {
 80005ec:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
  UART5,
  USART6,
};

uint8_t usart_id(USART_TypeDef * USARTx) {
	if ( USARTx == USART1 )
 80005f0:	f241 0300 	movw	r3, #4096	; 0x1000
 80005f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
				((uint32_t) RCC_APB1Periph_USART3), GPIOB, GPIO_PinSource11, GPIO_PinSource10, GPIO_AF_USART3,
				USART3_IRQn
		}
};

void usart_begin(USART_TypeDef * USARTx, const uint32_t baud) {
 80005f8:	b08b      	sub	sp, #44	; 0x2c
  UART5,
  USART6,
};

uint8_t usart_id(USART_TypeDef * USARTx) {
	if ( USARTx == USART1 )
 80005fa:	4298      	cmp	r0, r3
				((uint32_t) RCC_APB1Periph_USART3), GPIOB, GPIO_PinSource11, GPIO_PinSource10, GPIO_AF_USART3,
				USART3_IRQn
		}
};

void usart_begin(USART_TypeDef * USARTx, const uint32_t baud) {
 80005fc:	4606      	mov	r6, r0
 80005fe:	9103      	str	r1, [sp, #12]
  UART5,
  USART6,
};

uint8_t usart_id(USART_TypeDef * USARTx) {
	if ( USARTx == USART1 )
 8000600:	d011      	beq.n	8000626 <usart_begin+0x3a>
			return USART_1;
	if ( USARTx == USART2 )
 8000602:	f244 4000 	movw	r0, #17408	; 0x4400
 8000606:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800060a:	4286      	cmp	r6, r0
 800060c:	d07c      	beq.n	8000708 <usart_begin+0x11c>
			return USART_2;
	if ( USARTx == USART3 )
 800060e:	f644 0100 	movw	r1, #18432	; 0x4800
 8000612:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000616:	428e      	cmp	r6, r1
 8000618:	d07e      	beq.n	8000718 <usart_begin+0x12c>
			return USART_3;
	if ( USARTx == USART6 )
 800061a:	f241 4200 	movw	r2, #5120	; 0x1400
 800061e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000622:	4296      	cmp	r6, r2
 8000624:	d074      	beq.n	8000710 <usart_begin+0x124>
 8000626:	f240 6450 	movw	r4, #1616	; 0x650
 800062a:	f640 1564 	movw	r5, #2404	; 0x964
 800062e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000632:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8000636:	2300      	movs	r3, #0
	uint8_t portid = usart_id(USARTx);
	if ( portid == 6 )
		while(1);

	//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
	GPIOMode(USARTPortInfo[portid].rxpin | USARTPortInfo[portid].txpin, GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP,
 8000638:	2214      	movs	r2, #20
 800063a:	fb02 f103 	mul.w	r1, r2, r3
 800063e:	f240 0074 	movw	r0, #116	; 0x74
 8000642:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000646:	180f      	adds	r7, r1, r0
 8000648:	580b      	ldr	r3, [r1, r0]
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	2102      	movs	r1, #2
 800064e:	f04f 0801 	mov.w	r8, #1
 8000652:	4318      	orrs	r0, r3
 8000654:	460a      	mov	r2, r1
 8000656:	2300      	movs	r3, #0
			GPIO_PuPd_UP);
	/* USART3 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, (FunctionalState) ENABLE);

	GPIO_PinAFConfig(USARTPortInfo[portid].afgpio, USARTPortInfo[portid].txsource, USARTPortInfo[portid].afmapping ); // TX -- PB10
 8000658:	f107 0a10 	add.w	sl, r7, #16
	uint8_t portid = usart_id(USARTx);
	if ( portid == 6 )
		while(1);

	//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
	GPIOMode(USARTPortInfo[portid].rxpin | USARTPortInfo[portid].txpin, GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP,
 800065c:	f8cd 8000 	str.w	r8, [sp]
 8000660:	f7ff fdc0 	bl	80001e4 <GPIOMode>
			GPIO_PuPd_UP);
	/* USART3 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, (FunctionalState) ENABLE);
 8000664:	4641      	mov	r1, r8
 8000666:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800066a:	f000 fef7 	bl	800145c <RCC_APB1PeriphClockCmd>

	GPIO_PinAFConfig(USARTPortInfo[portid].afgpio, USARTPortInfo[portid].txsource, USARTPortInfo[portid].afmapping ); // TX -- PB10
 800066e:	68f8      	ldr	r0, [r7, #12]
 8000670:	7c39      	ldrb	r1, [r7, #16]
 8000672:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8000676:	f000 fc9f 	bl	8000fb8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(USARTPortInfo[portid].afgpio, USARTPortInfo[portid].rxsource,  USARTPortInfo[portid].afmapping ); // RX -- PB11
 800067a:	68f8      	ldr	r0, [r7, #12]
 800067c:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8000680:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8000684:	f000 fc98 	bl	8000fb8 <GPIO_PinAFConfig>

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8000688:	9b03      	ldr	r3, [sp, #12]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 800068a:	f04f 0700 	mov.w	r7, #0
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 800068e:	a905      	add	r1, sp, #20
 8000690:	4630      	mov	r0, r6
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000692:	f04f 020c 	mov.w	r2, #12
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, (FunctionalState) ENABLE);

	GPIO_PinAFConfig(USARTPortInfo[portid].afgpio, USARTPortInfo[portid].txsource, USARTPortInfo[portid].afmapping ); // TX -- PB10
	GPIO_PinAFConfig(USARTPortInfo[portid].afgpio, USARTPortInfo[portid].rxsource,  USARTPortInfo[portid].afmapping ); // RX -- PB11

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8000696:	9305      	str	r3, [sp, #20]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000698:	f8ad 201e 	strh.w	r2, [sp, #30]

	GPIO_PinAFConfig(USARTPortInfo[portid].afgpio, USARTPortInfo[portid].txsource, USARTPortInfo[portid].afmapping ); // TX -- PB10
	GPIO_PinAFConfig(USARTPortInfo[portid].afgpio, USARTPortInfo[portid].rxsource,  USARTPortInfo[portid].afmapping ); // RX -- PB11

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 800069c:	f8ad 7018 	strh.w	r7, [sp, #24]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 80006a0:	f8ad 701a 	strh.w	r7, [sp, #26]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 80006a4:	f8ad 701c 	strh.w	r7, [sp, #28]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 80006a8:	f8ad 7020 	strh.w	r7, [sp, #32]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80006ac:	f002 f9d2 	bl	8002a54 <USART_Init>

	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
 80006b0:	4630      	mov	r0, r6
 80006b2:	4642      	mov	r2, r8
 80006b4:	f240 5125 	movw	r1, #1317	; 0x525
 80006b8:	f002 f974 	bl	80029a4 <USART_ITConfig>
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 80006bc:	4630      	mov	r0, r6
 80006be:	f240 7127 	movw	r1, #1831	; 0x727
 80006c2:	2200      	movs	r2, #0
 80006c4:	f002 f96e 	bl	80029a4 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USARTPortInfo[portid].irq_channel;
 80006c8:	f89a 3003 	ldrb.w	r3, [sl, #3]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = (FunctionalState) ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 80006cc:	a809      	add	r0, sp, #36	; 0x24
	USART_Init(USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = USARTPortInfo[portid].irq_channel;
 80006ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 80006d2:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 80006d6:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
	NVIC_InitStructure.NVIC_IRQChannelCmd = (FunctionalState) ENABLE;	// the USART3 interrupts are globally enabled
 80006da:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 80006de:	f000 f835 	bl	800074c <NVIC_Init>

	buffer_clear(&rxring[portid]);
	buffer_clear(&txring[portid]);

	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx, (FunctionalState) ENABLE);
 80006e2:	4630      	mov	r0, r6
 80006e4:	4641      	mov	r1, r8
USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
	r->tail = 0;
	r->count = 0;
 80006e6:	f8a4 7104 	strh.w	r7, [r4, #260]	; 0x104
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 80006ea:	f8a5 7104 	strh.w	r7, [r5, #260]	; 0x104
 80006ee:	f8a5 7100 	strh.w	r7, [r5, #256]	; 0x100
	r->tail = 0;
 80006f2:	f8a5 7102 	strh.w	r7, [r5, #258]	; 0x102
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 80006f6:	f8a4 7100 	strh.w	r7, [r4, #256]	; 0x100
	r->tail = 0;
 80006fa:	f8a4 7102 	strh.w	r7, [r4, #258]	; 0x102

	buffer_clear(&rxring[portid]);
	buffer_clear(&txring[portid]);

	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx, (FunctionalState) ENABLE);
 80006fe:	f002 f851 	bl	80027a4 <USART_Cmd>
}
 8000702:	b00b      	add	sp, #44	; 0x2c
 8000704:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
};

uint8_t usart_id(USART_TypeDef * USARTx) {
	if ( USARTx == USART1 )
			return USART_1;
	if ( USARTx == USART2 )
 8000708:	4c05      	ldr	r4, [pc, #20]	; (8000720 <usart_begin+0x134>)
 800070a:	4d06      	ldr	r5, [pc, #24]	; (8000724 <usart_begin+0x138>)
 800070c:	2301      	movs	r3, #1
 800070e:	e793      	b.n	8000638 <usart_begin+0x4c>
			return USART_2;
	if ( USARTx == USART3 )
			return USART_3;
	if ( USARTx == USART6 )
 8000710:	4d05      	ldr	r5, [pc, #20]	; (8000728 <usart_begin+0x13c>)
 8000712:	4c06      	ldr	r4, [pc, #24]	; (800072c <usart_begin+0x140>)
 8000714:	2305      	movs	r3, #5
 8000716:	e78f      	b.n	8000638 <usart_begin+0x4c>
uint8_t usart_id(USART_TypeDef * USARTx) {
	if ( USARTx == USART1 )
			return USART_1;
	if ( USARTx == USART2 )
			return USART_2;
	if ( USARTx == USART3 )
 8000718:	4c05      	ldr	r4, [pc, #20]	; (8000730 <usart_begin+0x144>)
 800071a:	4d06      	ldr	r5, [pc, #24]	; (8000734 <usart_begin+0x148>)
 800071c:	2302      	movs	r3, #2
 800071e:	e78b      	b.n	8000638 <usart_begin+0x4c>
 8000720:	20000756 	.word	0x20000756
 8000724:	20000a6a 	.word	0x20000a6a
 8000728:	20000e82 	.word	0x20000e82
 800072c:	20000b6e 	.word	0x20000b6e
 8000730:	2000085c 	.word	0x2000085c
 8000734:	20000b70 	.word	0x20000b70

08000738 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000738:	f040 61be 	orr.w	r1, r0, #99614720	; 0x5f00000
 800073c:	f64e 5300 	movw	r3, #60672	; 0xed00
 8000740:	f441 2020 	orr.w	r0, r1, #655360	; 0xa0000
 8000744:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000748:	60d8      	str	r0, [r3, #12]
}
 800074a:	4770      	bx	lr

0800074c <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800074c:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800074e:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000750:	b97b      	cbnz	r3, 8000772 <NVIC_Init+0x26>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000752:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000754:	2101      	movs	r1, #1
 8000756:	f003 021f 	and.w	r2, r3, #31
 800075a:	fa11 f002 	lsls.w	r0, r1, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800075e:	095a      	lsrs	r2, r3, #5
 8000760:	f24e 1300 	movw	r3, #57600	; 0xe100
 8000764:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000768:	3220      	adds	r2, #32
 800076a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800076e:	bc10      	pop	{r4}
 8000770:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000772:	f64e 5200 	movw	r2, #60672	; 0xed00
 8000776:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800077a:	68d1      	ldr	r1, [r2, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800077c:	7844      	ldrb	r4, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800077e:	43cb      	mvns	r3, r1
 8000780:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000784:	f1c3 0c04 	rsb	ip, r3, #4
 8000788:	fa5f f28c 	uxtb.w	r2, ip
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800078c:	210f      	movs	r1, #15
 800078e:	fa51 f303 	asrs.w	r3, r1, r3
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000792:	fa14 f202 	lsls.w	r2, r4, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000796:	7801      	ldrb	r1, [r0, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000798:	2401      	movs	r4, #1
 800079a:	f001 0c1f 	and.w	ip, r1, #31
 800079e:	fa04 f40c 	lsl.w	r4, r4, ip
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80007a2:	f890 c002 	ldrb.w	ip, [r0, #2]
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80007a6:	b2d2      	uxtb	r2, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80007a8:	ea03 000c 	and.w	r0, r3, ip
 80007ac:	4310      	orrs	r0, r2
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80007ae:	f24e 1300 	movw	r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 80007b2:	0102      	lsls	r2, r0, #4
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80007b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 80007b8:	b2d0      	uxtb	r0, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80007ba:	461a      	mov	r2, r3
 80007bc:	18cb      	adds	r3, r1, r3
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80007be:	0949      	lsrs	r1, r1, #5
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80007c0:	f883 0300 	strb.w	r0, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80007c4:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
 80007c8:	e7d1      	b.n	800076e <NVIC_Init+0x22>
 80007ca:	bf00      	nop

080007cc <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80007cc:	f021 4260 	bic.w	r2, r1, #3758096384	; 0xe0000000
 80007d0:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
 80007d4:	f64e 5300 	movw	r3, #60672	; 0xed00
 80007d8:	4301      	orrs	r1, r0
 80007da:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80007de:	6099      	str	r1, [r3, #8]
}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <NVIC_SystemLPConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80007e4:	b941      	cbnz	r1, 80007f8 <NVIC_SystemLPConfig+0x14>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80007e6:	f64e 5100 	movw	r1, #60672	; 0xed00
 80007ea:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80007ee:	690b      	ldr	r3, [r1, #16]
 80007f0:	ea23 0000 	bic.w	r0, r3, r0
 80007f4:	6108      	str	r0, [r1, #16]
 80007f6:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80007f8:	f64e 5300 	movw	r3, #60672	; 0xed00
 80007fc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000800:	691a      	ldr	r2, [r3, #16]
 8000802:	4310      	orrs	r0, r2
 8000804:	6118      	str	r0, [r3, #16]
 8000806:	4770      	bx	lr

08000808 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000808:	f24e 0310 	movw	r3, #57360	; 0xe010
 800080c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000810:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000812:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000814:	bf0c      	ite	eq
 8000816:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 800081a:	f022 0204 	bicne.w	r2, r2, #4
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop

08000824 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000824:	680b      	ldr	r3, [r1, #0]
 8000826:	b410      	push	{r4}
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000828:	f013 0f01 	tst.w	r3, #1
 800082c:	d13b      	bne.n	80008a6 <GPIO_Init+0x82>
 800082e:	f013 0f02 	tst.w	r3, #2
 8000832:	d156      	bne.n	80008e2 <GPIO_Init+0xbe>
 8000834:	f013 0f04 	tst.w	r3, #4
 8000838:	d171      	bne.n	800091e <GPIO_Init+0xfa>
 800083a:	f013 0f08 	tst.w	r3, #8
 800083e:	f040 808d 	bne.w	800095c <GPIO_Init+0x138>
 8000842:	f013 0f10 	tst.w	r3, #16
 8000846:	f040 80a8 	bne.w	800099a <GPIO_Init+0x176>
 800084a:	f013 0f20 	tst.w	r3, #32
 800084e:	f040 80c3 	bne.w	80009d8 <GPIO_Init+0x1b4>
 8000852:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000856:	f040 80de 	bne.w	8000a16 <GPIO_Init+0x1f2>
 800085a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800085e:	f040 80f9 	bne.w	8000a54 <GPIO_Init+0x230>
 8000862:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000866:	f040 8114 	bne.w	8000a92 <GPIO_Init+0x26e>
 800086a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800086e:	f040 812f 	bne.w	8000ad0 <GPIO_Init+0x2ac>
 8000872:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000876:	f040 814a 	bne.w	8000b0e <GPIO_Init+0x2ea>
 800087a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800087e:	f040 8165 	bne.w	8000b4c <GPIO_Init+0x328>
 8000882:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000886:	f040 8180 	bne.w	8000b8a <GPIO_Init+0x366>
 800088a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800088e:	f040 819b 	bne.w	8000bc8 <GPIO_Init+0x3a4>
 8000892:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000896:	f040 81b6 	bne.w	8000c06 <GPIO_Init+0x3e2>
 800089a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800089e:	f040 81d1 	bne.w	8000c44 <GPIO_Init+0x420>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80008a2:	bc10      	pop	{r4}
 80008a4:	4770      	bx	lr
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80008a6:	6804      	ldr	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80008a8:	790a      	ldrb	r2, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80008aa:	f024 0403 	bic.w	r4, r4, #3
 80008ae:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80008b0:	6804      	ldr	r4, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80008b2:	f102 3cff 	add.w	ip, r2, #4294967295
 80008b6:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80008ba:	ea44 0202 	orr.w	r2, r4, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80008be:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80008c2:	6002      	str	r2, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80008c4:	f240 81d9 	bls.w	8000c7a <GPIO_Init+0x456>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80008c8:	68c2      	ldr	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80008ca:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80008ce:	f022 0403 	bic.w	r4, r2, #3
 80008d2:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80008d4:	68c4      	ldr	r4, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 80008d6:	f013 0f02 	tst.w	r3, #2
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80008da:	ea44 020c 	orr.w	r2, r4, ip
 80008de:	60c2      	str	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 80008e0:	d0a8      	beq.n	8000834 <GPIO_Init+0x10>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80008e2:	6804      	ldr	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80008e4:	790a      	ldrb	r2, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80008e6:	f024 040c 	bic.w	r4, r4, #12
 80008ea:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80008ec:	6804      	ldr	r4, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80008ee:	f102 3cff 	add.w	ip, r2, #4294967295
 80008f2:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80008f6:	ea44 0282 	orr.w	r2, r4, r2, lsl #2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80008fa:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80008fe:	6002      	str	r2, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000900:	f240 81cf 	bls.w	8000ca2 <GPIO_Init+0x47e>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000904:	68c2      	ldr	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000906:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800090a:	f022 020c 	bic.w	r2, r2, #12
 800090e:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000910:	68c2      	ldr	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000912:	f013 0f04 	tst.w	r3, #4
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000916:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
 800091a:	60c2      	str	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 800091c:	d08d      	beq.n	800083a <GPIO_Init+0x16>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800091e:	6804      	ldr	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000920:	790a      	ldrb	r2, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000922:	f024 0430 	bic.w	r4, r4, #48	; 0x30
 8000926:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000928:	6804      	ldr	r4, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800092a:	f102 3cff 	add.w	ip, r2, #4294967295
 800092e:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000932:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000936:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800093a:	6002      	str	r2, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800093c:	f240 81c5 	bls.w	8000cca <GPIO_Init+0x4a6>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000940:	68c2      	ldr	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000942:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000946:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800094a:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800094c:	68c2      	ldr	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 800094e:	f013 0f08 	tst.w	r3, #8
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000952:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
 8000956:	60c2      	str	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000958:	f43f af73 	beq.w	8000842 <GPIO_Init+0x1e>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800095c:	6804      	ldr	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800095e:	790a      	ldrb	r2, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000960:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8000964:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000966:	6804      	ldr	r4, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000968:	f102 3cff 	add.w	ip, r2, #4294967295
 800096c:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000970:	ea44 1282 	orr.w	r2, r4, r2, lsl #6

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000974:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000978:	6002      	str	r2, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800097a:	f240 81ba 	bls.w	8000cf2 <GPIO_Init+0x4ce>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800097e:	68c2      	ldr	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000980:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000984:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000988:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800098a:	68c2      	ldr	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 800098c:	f013 0f10 	tst.w	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000990:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 8000994:	60c2      	str	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000996:	f43f af58 	beq.w	800084a <GPIO_Init+0x26>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800099a:	6804      	ldr	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800099c:	790a      	ldrb	r2, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800099e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80009a2:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80009a4:	6804      	ldr	r4, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80009a6:	f102 3cff 	add.w	ip, r2, #4294967295
 80009aa:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80009ae:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80009b2:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80009b6:	6002      	str	r2, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80009b8:	f240 81af 	bls.w	8000d1a <GPIO_Init+0x4f6>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80009bc:	68c2      	ldr	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80009be:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80009c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80009c6:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80009c8:	68c2      	ldr	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 80009ca:	f013 0f20 	tst.w	r3, #32
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80009ce:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80009d2:	60c2      	str	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 80009d4:	f43f af3d 	beq.w	8000852 <GPIO_Init+0x2e>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80009d8:	6804      	ldr	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80009da:	790a      	ldrb	r2, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80009dc:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 80009e0:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80009e2:	6804      	ldr	r4, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80009e4:	f102 3cff 	add.w	ip, r2, #4294967295
 80009e8:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80009ec:	ea44 2282 	orr.w	r2, r4, r2, lsl #10

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80009f0:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80009f4:	6002      	str	r2, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80009f6:	f240 81a4 	bls.w	8000d42 <GPIO_Init+0x51e>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80009fa:	68c2      	ldr	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80009fc:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000a00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000a04:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000a06:	68c2      	ldr	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000a08:	f013 0f40 	tst.w	r3, #64	; 0x40
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000a0c:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8000a10:	60c2      	str	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000a12:	f43f af22 	beq.w	800085a <GPIO_Init+0x36>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000a16:	6804      	ldr	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a18:	790a      	ldrb	r2, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000a1a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
 8000a1e:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a20:	6804      	ldr	r4, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000a22:	f102 3cff 	add.w	ip, r2, #4294967295
 8000a26:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a2a:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000a2e:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a32:	6002      	str	r2, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000a34:	f240 8199 	bls.w	8000d6a <GPIO_Init+0x546>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000a38:	68c2      	ldr	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000a3a:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000a3e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000a42:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000a44:	68c2      	ldr	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000a46:	f013 0f80 	tst.w	r3, #128	; 0x80
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000a4a:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
 8000a4e:	60c2      	str	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000a50:	f43f af07 	beq.w	8000862 <GPIO_Init+0x3e>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000a54:	6804      	ldr	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a56:	790a      	ldrb	r2, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000a58:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
 8000a5c:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a5e:	6804      	ldr	r4, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000a60:	f102 3cff 	add.w	ip, r2, #4294967295
 8000a64:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a68:	ea44 3282 	orr.w	r2, r4, r2, lsl #14

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000a6c:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a70:	6002      	str	r2, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000a72:	f240 818e 	bls.w	8000d92 <GPIO_Init+0x56e>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000a76:	68c2      	ldr	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000a78:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000a7c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000a80:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000a82:	68c2      	ldr	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000a84:	f413 7f80 	tst.w	r3, #256	; 0x100
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000a88:	ea42 328c 	orr.w	r2, r2, ip, lsl #14
 8000a8c:	60c2      	str	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000a8e:	f43f aeec 	beq.w	800086a <GPIO_Init+0x46>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000a92:	6804      	ldr	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a94:	790a      	ldrb	r2, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000a96:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
 8000a9a:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a9c:	6804      	ldr	r4, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000a9e:	f102 3cff 	add.w	ip, r2, #4294967295
 8000aa2:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000aa6:	ea44 4202 	orr.w	r2, r4, r2, lsl #16

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000aaa:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000aae:	6002      	str	r2, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000ab0:	f240 8183 	bls.w	8000dba <GPIO_Init+0x596>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000ab4:	68c2      	ldr	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000ab6:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000aba:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000abe:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000ac0:	68c2      	ldr	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000ac2:	f413 7f00 	tst.w	r3, #512	; 0x200
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000ac6:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000aca:	60c2      	str	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000acc:	f43f aed1 	beq.w	8000872 <GPIO_Init+0x4e>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ad0:	6804      	ldr	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ad2:	790a      	ldrb	r2, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ad4:	f424 2440 	bic.w	r4, r4, #786432	; 0xc0000
 8000ad8:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ada:	6804      	ldr	r4, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000adc:	f102 3cff 	add.w	ip, r2, #4294967295
 8000ae0:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ae4:	ea44 4282 	orr.w	r2, r4, r2, lsl #18

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000ae8:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000aec:	6002      	str	r2, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000aee:	f240 8178 	bls.w	8000de2 <GPIO_Init+0x5be>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000af2:	68c2      	ldr	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000af4:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000af8:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8000afc:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000afe:	68c2      	ldr	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000b00:	f413 6f80 	tst.w	r3, #1024	; 0x400
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b04:	ea42 428c 	orr.w	r2, r2, ip, lsl #18
 8000b08:	60c2      	str	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000b0a:	f43f aeb6 	beq.w	800087a <GPIO_Init+0x56>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000b0e:	6804      	ldr	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b10:	790a      	ldrb	r2, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000b12:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8000b16:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b18:	6804      	ldr	r4, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000b1a:	f102 3cff 	add.w	ip, r2, #4294967295
 8000b1e:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b22:	ea44 5202 	orr.w	r2, r4, r2, lsl #20

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000b26:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b2a:	6002      	str	r2, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000b2c:	f240 8171 	bls.w	8000e12 <GPIO_Init+0x5ee>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000b30:	68c2      	ldr	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b32:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000b36:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8000b3a:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b3c:	68c2      	ldr	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000b3e:	f413 6f00 	tst.w	r3, #2048	; 0x800
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b42:	ea42 520c 	orr.w	r2, r2, ip, lsl #20
 8000b46:	60c2      	str	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000b48:	f43f ae9b 	beq.w	8000882 <GPIO_Init+0x5e>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000b4c:	6804      	ldr	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b4e:	790a      	ldrb	r2, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000b50:	f424 0440 	bic.w	r4, r4, #12582912	; 0xc00000
 8000b54:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b56:	6804      	ldr	r4, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000b58:	f102 3cff 	add.w	ip, r2, #4294967295
 8000b5c:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b60:	ea44 5282 	orr.w	r2, r4, r2, lsl #22

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000b64:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b68:	6002      	str	r2, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000b6a:	f240 816a 	bls.w	8000e42 <GPIO_Init+0x61e>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000b6e:	68c2      	ldr	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b70:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000b74:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8000b78:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b7a:	68c2      	ldr	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000b7c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b80:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
 8000b84:	60c2      	str	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000b86:	f43f ae80 	beq.w	800088a <GPIO_Init+0x66>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000b8a:	6804      	ldr	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b8c:	790a      	ldrb	r2, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000b8e:	f024 7440 	bic.w	r4, r4, #50331648	; 0x3000000
 8000b92:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b94:	6804      	ldr	r4, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000b96:	f102 3cff 	add.w	ip, r2, #4294967295
 8000b9a:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b9e:	ea44 6202 	orr.w	r2, r4, r2, lsl #24

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000ba2:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ba6:	6002      	str	r2, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000ba8:	f240 8163 	bls.w	8000e72 <GPIO_Init+0x64e>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000bac:	68c2      	ldr	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000bae:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000bb2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000bb6:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000bb8:	68c2      	ldr	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000bba:	f413 5f00 	tst.w	r3, #8192	; 0x2000
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000bbe:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 8000bc2:	60c2      	str	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000bc4:	f43f ae65 	beq.w	8000892 <GPIO_Init+0x6e>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000bc8:	6804      	ldr	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000bca:	790a      	ldrb	r2, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000bcc:	f024 6440 	bic.w	r4, r4, #201326592	; 0xc000000
 8000bd0:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000bd2:	6804      	ldr	r4, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000bd4:	f102 3cff 	add.w	ip, r2, #4294967295
 8000bd8:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000bdc:	ea44 6282 	orr.w	r2, r4, r2, lsl #26

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000be0:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000be4:	6002      	str	r2, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000be6:	f240 815c 	bls.w	8000ea2 <GPIO_Init+0x67e>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000bea:	68c2      	ldr	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000bec:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000bf0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8000bf4:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000bf6:	68c2      	ldr	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000bf8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000bfc:	ea42 628c 	orr.w	r2, r2, ip, lsl #26
 8000c00:	60c2      	str	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000c02:	f43f ae4a 	beq.w	800089a <GPIO_Init+0x76>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000c06:	6804      	ldr	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000c08:	790a      	ldrb	r2, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000c0a:	f024 5440 	bic.w	r4, r4, #805306368	; 0x30000000
 8000c0e:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000c10:	6804      	ldr	r4, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000c12:	f102 3cff 	add.w	ip, r2, #4294967295
 8000c16:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000c1a:	ea44 7202 	orr.w	r2, r4, r2, lsl #28

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000c1e:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000c22:	6002      	str	r2, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000c24:	f240 8155 	bls.w	8000ed2 <GPIO_Init+0x6ae>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c28:	68c2      	ldr	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c2a:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c2e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c32:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c34:	68c2      	ldr	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000c36:	f413 4f00 	tst.w	r3, #32768	; 0x8000
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c3a:	ea42 720c 	orr.w	r2, r2, ip, lsl #28
 8000c3e:	60c2      	str	r2, [r0, #12]
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000c40:	f43f ae2f 	beq.w	80008a2 <GPIO_Init+0x7e>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000c44:	6802      	ldr	r2, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000c46:	790b      	ldrb	r3, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000c48:	f022 4440 	bic.w	r4, r2, #3221225472	; 0xc0000000
 8000c4c:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000c4e:	1e5a      	subs	r2, r3, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000c50:	6804      	ldr	r4, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000c52:	fa5f fc82 	uxtb.w	ip, r2
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000c56:	ea44 7383 	orr.w	r3, r4, r3, lsl #30

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000c5a:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000c5e:	6003      	str	r3, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000c60:	f240 814f 	bls.w	8000f02 <GPIO_Init+0x6de>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c64:	68c3      	ldr	r3, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c66:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c6a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8000c6e:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c70:	68c3      	ldr	r3, [r0, #12]
 8000c72:	ea43 718c 	orr.w	r1, r3, ip, lsl #30
 8000c76:	60c1      	str	r1, [r0, #12]
 8000c78:	e613      	b.n	80008a2 <GPIO_Init+0x7e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000c7a:	6884      	ldr	r4, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000c7c:	794a      	ldrb	r2, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000c7e:	f024 0403 	bic.w	r4, r4, #3
 8000c82:	6084      	str	r4, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000c84:	6884      	ldr	r4, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000c86:	f891 c006 	ldrb.w	ip, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000c8a:	ea44 0202 	orr.w	r2, r4, r2
 8000c8e:	6082      	str	r2, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000c90:	6842      	ldr	r2, [r0, #4]
 8000c92:	f022 0401 	bic.w	r4, r2, #1
 8000c96:	6044      	str	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000c98:	6842      	ldr	r2, [r0, #4]
 8000c9a:	ea4c 0402 	orr.w	r4, ip, r2
 8000c9e:	6044      	str	r4, [r0, #4]
 8000ca0:	e612      	b.n	80008c8 <GPIO_Init+0xa4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000ca2:	6882      	ldr	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000ca4:	794c      	ldrb	r4, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000ca6:	f022 020c 	bic.w	r2, r2, #12
 8000caa:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000cac:	6882      	ldr	r2, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000cae:	f891 c006 	ldrb.w	ip, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000cb2:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8000cb6:	6082      	str	r2, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000cb8:	6842      	ldr	r2, [r0, #4]
 8000cba:	f022 0202 	bic.w	r2, r2, #2
 8000cbe:	6042      	str	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000cc0:	6842      	ldr	r2, [r0, #4]
 8000cc2:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8000cc6:	6042      	str	r2, [r0, #4]
 8000cc8:	e61c      	b.n	8000904 <GPIO_Init+0xe0>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000cca:	6882      	ldr	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000ccc:	794c      	ldrb	r4, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000cce:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000cd2:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000cd4:	6882      	ldr	r2, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000cd6:	f891 c006 	ldrb.w	ip, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000cda:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8000cde:	6082      	str	r2, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000ce0:	6842      	ldr	r2, [r0, #4]
 8000ce2:	f022 0204 	bic.w	r2, r2, #4
 8000ce6:	6042      	str	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000ce8:	6842      	ldr	r2, [r0, #4]
 8000cea:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
 8000cee:	6042      	str	r2, [r0, #4]
 8000cf0:	e626      	b.n	8000940 <GPIO_Init+0x11c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000cf2:	6882      	ldr	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000cf4:	794c      	ldrb	r4, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000cf6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000cfa:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000cfc:	6882      	ldr	r2, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000cfe:	f891 c006 	ldrb.w	ip, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d02:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
 8000d06:	6082      	str	r2, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000d08:	6842      	ldr	r2, [r0, #4]
 8000d0a:	f022 0208 	bic.w	r2, r2, #8
 8000d0e:	6042      	str	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000d10:	6842      	ldr	r2, [r0, #4]
 8000d12:	ea42 02cc 	orr.w	r2, r2, ip, lsl #3
 8000d16:	6042      	str	r2, [r0, #4]
 8000d18:	e631      	b.n	800097e <GPIO_Init+0x15a>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000d1a:	6882      	ldr	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d1c:	794c      	ldrb	r4, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000d1e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d22:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d24:	6882      	ldr	r2, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000d26:	f891 c006 	ldrb.w	ip, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d2a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8000d2e:	6082      	str	r2, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000d30:	6842      	ldr	r2, [r0, #4]
 8000d32:	f022 0210 	bic.w	r2, r2, #16
 8000d36:	6042      	str	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000d38:	6842      	ldr	r2, [r0, #4]
 8000d3a:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
 8000d3e:	6042      	str	r2, [r0, #4]
 8000d40:	e63c      	b.n	80009bc <GPIO_Init+0x198>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000d42:	6882      	ldr	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d44:	794c      	ldrb	r4, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000d46:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000d4a:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d4c:	6882      	ldr	r2, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000d4e:	f891 c006 	ldrb.w	ip, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d52:	ea42 2284 	orr.w	r2, r2, r4, lsl #10
 8000d56:	6082      	str	r2, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000d58:	6842      	ldr	r2, [r0, #4]
 8000d5a:	f022 0220 	bic.w	r2, r2, #32
 8000d5e:	6042      	str	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000d60:	6842      	ldr	r2, [r0, #4]
 8000d62:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
 8000d66:	6042      	str	r2, [r0, #4]
 8000d68:	e647      	b.n	80009fa <GPIO_Init+0x1d6>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000d6a:	6882      	ldr	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d6c:	794c      	ldrb	r4, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000d6e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000d72:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d74:	6882      	ldr	r2, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000d76:	f891 c006 	ldrb.w	ip, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d7a:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8000d7e:	6082      	str	r2, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000d80:	6842      	ldr	r2, [r0, #4]
 8000d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d86:	6042      	str	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000d88:	6842      	ldr	r2, [r0, #4]
 8000d8a:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 8000d8e:	6042      	str	r2, [r0, #4]
 8000d90:	e652      	b.n	8000a38 <GPIO_Init+0x214>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000d92:	6882      	ldr	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d94:	794c      	ldrb	r4, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000d96:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000d9a:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d9c:	6882      	ldr	r2, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000d9e:	f891 c006 	ldrb.w	ip, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000da2:	ea42 3284 	orr.w	r2, r2, r4, lsl #14
 8000da6:	6082      	str	r2, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000da8:	6842      	ldr	r2, [r0, #4]
 8000daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dae:	6042      	str	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000db0:	6842      	ldr	r2, [r0, #4]
 8000db2:	ea42 12cc 	orr.w	r2, r2, ip, lsl #7
 8000db6:	6042      	str	r2, [r0, #4]
 8000db8:	e65d      	b.n	8000a76 <GPIO_Init+0x252>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000dba:	6882      	ldr	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000dbc:	794c      	ldrb	r4, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000dbe:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000dc2:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000dc4:	6882      	ldr	r2, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000dc6:	f891 c006 	ldrb.w	ip, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000dca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8000dce:	6082      	str	r2, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000dd0:	6842      	ldr	r2, [r0, #4]
 8000dd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dd6:	6042      	str	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000dd8:	6842      	ldr	r2, [r0, #4]
 8000dda:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8000dde:	6042      	str	r2, [r0, #4]
 8000de0:	e668      	b.n	8000ab4 <GPIO_Init+0x290>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000de2:	6882      	ldr	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000de4:	794c      	ldrb	r4, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000de6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8000dea:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000dec:	6882      	ldr	r2, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000dee:	f891 c006 	ldrb.w	ip, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000df2:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
 8000df6:	6082      	str	r2, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000df8:	6842      	ldr	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000dfa:	ea4f 2c4c 	mov.w	ip, ip, lsl #9

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000dfe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e02:	6042      	str	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000e04:	6842      	ldr	r2, [r0, #4]
 8000e06:	fa1f fc8c 	uxth.w	ip, ip
 8000e0a:	ea4c 0202 	orr.w	r2, ip, r2
 8000e0e:	6042      	str	r2, [r0, #4]
 8000e10:	e66f      	b.n	8000af2 <GPIO_Init+0x2ce>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000e12:	6882      	ldr	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000e14:	794c      	ldrb	r4, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000e16:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8000e1a:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000e1c:	6882      	ldr	r2, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000e1e:	f891 c006 	ldrb.w	ip, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000e22:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
 8000e26:	6082      	str	r2, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000e28:	6842      	ldr	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000e2a:	ea4f 2c8c 	mov.w	ip, ip, lsl #10

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e32:	6042      	str	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000e34:	6842      	ldr	r2, [r0, #4]
 8000e36:	fa1f fc8c 	uxth.w	ip, ip
 8000e3a:	ea4c 0202 	orr.w	r2, ip, r2
 8000e3e:	6042      	str	r2, [r0, #4]
 8000e40:	e676      	b.n	8000b30 <GPIO_Init+0x30c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000e42:	6882      	ldr	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000e44:	794c      	ldrb	r4, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000e46:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8000e4a:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000e4c:	6882      	ldr	r2, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000e4e:	f891 c006 	ldrb.w	ip, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000e52:	ea42 5284 	orr.w	r2, r2, r4, lsl #22
 8000e56:	6082      	str	r2, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000e58:	6842      	ldr	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000e5a:	ea4f 2ccc 	mov.w	ip, ip, lsl #11

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e62:	6042      	str	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000e64:	6842      	ldr	r2, [r0, #4]
 8000e66:	fa1f fc8c 	uxth.w	ip, ip
 8000e6a:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6e:	6042      	str	r2, [r0, #4]
 8000e70:	e67d      	b.n	8000b6e <GPIO_Init+0x34a>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000e72:	6882      	ldr	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000e74:	794c      	ldrb	r4, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000e76:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e7a:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000e7c:	6882      	ldr	r2, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000e7e:	f891 c006 	ldrb.w	ip, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000e82:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8000e86:	6082      	str	r2, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000e88:	6842      	ldr	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000e8a:	ea4f 3c0c 	mov.w	ip, ip, lsl #12

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000e8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e92:	6042      	str	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000e94:	6842      	ldr	r2, [r0, #4]
 8000e96:	fa1f fc8c 	uxth.w	ip, ip
 8000e9a:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9e:	6042      	str	r2, [r0, #4]
 8000ea0:	e684      	b.n	8000bac <GPIO_Init+0x388>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000ea2:	6882      	ldr	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000ea4:	794c      	ldrb	r4, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000ea6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8000eaa:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000eac:	6882      	ldr	r2, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000eae:	f891 c006 	ldrb.w	ip, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000eb2:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 8000eb6:	6082      	str	r2, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000eb8:	6842      	ldr	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000eba:	ea4f 3c4c 	mov.w	ip, ip, lsl #13

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ec2:	6042      	str	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000ec4:	6842      	ldr	r2, [r0, #4]
 8000ec6:	fa1f fc8c 	uxth.w	ip, ip
 8000eca:	ea4c 0202 	orr.w	r2, ip, r2
 8000ece:	6042      	str	r2, [r0, #4]
 8000ed0:	e68b      	b.n	8000bea <GPIO_Init+0x3c6>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000ed2:	6882      	ldr	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000ed4:	794c      	ldrb	r4, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000ed6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000eda:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000edc:	6882      	ldr	r2, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000ede:	f891 c006 	ldrb.w	ip, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000ee2:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
 8000ee6:	6082      	str	r2, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000ee8:	6842      	ldr	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000eea:	ea4f 3c8c 	mov.w	ip, ip, lsl #14

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000eee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ef2:	6042      	str	r2, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000ef4:	6842      	ldr	r2, [r0, #4]
 8000ef6:	fa1f fc8c 	uxth.w	ip, ip
 8000efa:	ea4c 0202 	orr.w	r2, ip, r2
 8000efe:	6042      	str	r2, [r0, #4]
 8000f00:	e692      	b.n	8000c28 <GPIO_Init+0x404>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000f02:	6883      	ldr	r3, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000f04:	f891 c005 	ldrb.w	ip, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000f08:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8000f0c:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000f0e:	6883      	ldr	r3, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000f10:	798a      	ldrb	r2, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000f12:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8000f16:	6083      	str	r3, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000f18:	6843      	ldr	r3, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000f1a:	03d2      	lsls	r2, r2, #15

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000f1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f20:	6043      	str	r3, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000f22:	6843      	ldr	r3, [r0, #4]
 8000f24:	fa1f fc82 	uxth.w	ip, r2
 8000f28:	ea4c 0303 	orr.w	r3, ip, r3
 8000f2c:	6043      	str	r3, [r0, #4]
 8000f2e:	e699      	b.n	8000c64 <GPIO_Init+0x440>

08000f30 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000f30:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000f36:	71c3      	strb	r3, [r0, #7]
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000f38:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000f3a:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000f3c:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000f3e:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f44:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8000f46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f4a:	9201      	str	r2, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000f4c:	9b01      	ldr	r3, [sp, #4]
 8000f4e:	ea41 0203 	orr.w	r2, r1, r3
 8000f52:	9201      	str	r2, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000f54:	9b01      	ldr	r3, [sp, #4]
 8000f56:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000f58:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000f5a:	9a01      	ldr	r2, [sp, #4]
 8000f5c:	61c2      	str	r2, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000f5e:	69c1      	ldr	r1, [r0, #28]
 8000f60:	9101      	str	r1, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000f62:	69c3      	ldr	r3, [r0, #28]
 8000f64:	9301      	str	r3, [sp, #4]
}
 8000f66:	b002      	add	sp, #8
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000f6c:	6903      	ldr	r3, [r0, #16]
 8000f6e:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000f70:	bf0c      	ite	eq
 8000f72:	2000      	moveq	r0, #0
 8000f74:	2001      	movne	r0, #1
 8000f76:	4770      	bx	lr

08000f78 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000f78:	6900      	ldr	r0, [r0, #16]
}
 8000f7a:	b280      	uxth	r0, r0
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000f80:	6943      	ldr	r3, [r0, #20]
 8000f82:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000f84:	bf0c      	ite	eq
 8000f86:	2000      	moveq	r0, #0
 8000f88:	2001      	movne	r0, #1
 8000f8a:	4770      	bx	lr

08000f8c <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8000f8c:	6940      	ldr	r0, [r0, #20]
}
 8000f8e:	b280      	uxth	r0, r0
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000f94:	8301      	strh	r1, [r0, #24]
}
 8000f96:	4770      	bx	lr

08000f98 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000f98:	8341      	strh	r1, [r0, #26]
}
 8000f9a:	4770      	bx	lr

08000f9c <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000f9c:	b90a      	cbnz	r2, 8000fa2 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000f9e:	8341      	strh	r1, [r0, #26]
 8000fa0:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000fa2:	8301      	strh	r1, [r0, #24]
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000fa8:	6141      	str	r1, [r0, #20]
}
 8000faa:	4770      	bx	lr

08000fac <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000fac:	6942      	ldr	r2, [r0, #20]
 8000fae:	ea81 0302 	eor.w	r3, r1, r2
 8000fb2:	6143      	str	r3, [r0, #20]
}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000fb8:	f001 0307 	and.w	r3, r1, #7
 8000fbc:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000fbe:	f04f 0c0f 	mov.w	ip, #15
 8000fc2:	fa0c fc03 	lsl.w	ip, ip, r3
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000fc6:	fa12 f303 	lsls.w	r3, r2, r3
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000fca:	08c9      	lsrs	r1, r1, #3
 8000fcc:	3108      	adds	r1, #8
 8000fce:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8000fd2:	ea22 020c 	bic.w	r2, r2, ip
 8000fd6:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000fda:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8000fde:	4313      	orrs	r3, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000fe0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <GPIO_DeInit>:
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000fe8:	f240 0300 	movw	r3, #0
 8000fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ff0:	4298      	cmp	r0, r3
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000ff2:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000ff4:	d03c      	beq.n	8001070 <GPIO_DeInit+0x88>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8000ff6:	f240 4100 	movw	r1, #1024	; 0x400
 8000ffa:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8000ffe:	4288      	cmp	r0, r1
 8001000:	d040      	beq.n	8001084 <GPIO_DeInit+0x9c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8001002:	f640 0200 	movw	r2, #2048	; 0x800
 8001006:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800100a:	4290      	cmp	r0, r2
 800100c:	d044      	beq.n	8001098 <GPIO_DeInit+0xb0>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 800100e:	f640 4c00 	movw	ip, #3072	; 0xc00
 8001012:	f2c4 0c02 	movt	ip, #16386	; 0x4002
 8001016:	4560      	cmp	r0, ip
 8001018:	d048      	beq.n	80010ac <GPIO_DeInit+0xc4>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 800101a:	f241 0300 	movw	r3, #4096	; 0x1000
 800101e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001022:	4298      	cmp	r0, r3
 8001024:	d04c      	beq.n	80010c0 <GPIO_DeInit+0xd8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8001026:	f241 4100 	movw	r1, #5120	; 0x1400
 800102a:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800102e:	4288      	cmp	r0, r1
 8001030:	d050      	beq.n	80010d4 <GPIO_DeInit+0xec>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 8001032:	f641 0200 	movw	r2, #6144	; 0x1800
 8001036:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800103a:	4290      	cmp	r0, r2
 800103c:	d054      	beq.n	80010e8 <GPIO_DeInit+0x100>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 800103e:	f641 4c00 	movw	ip, #7168	; 0x1c00
 8001042:	f2c4 0c02 	movt	ip, #16386	; 0x4002
 8001046:	4560      	cmp	r0, ip
 8001048:	d058      	beq.n	80010fc <GPIO_DeInit+0x114>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOI)
 800104a:	f242 0300 	movw	r3, #8192	; 0x2000
 800104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001052:	4298      	cmp	r0, r3
 8001054:	d000      	beq.n	8001058 <GPIO_DeInit+0x70>
 8001056:	bd10      	pop	{r4, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8001058:	2101      	movs	r1, #1
 800105a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800105e:	f000 fa21 	bl	80014a4 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001062:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001066:	2100      	movs	r1, #0
    }
  }
}
 8001068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800106c:	f000 ba1a 	b.w	80014a4 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001070:	2001      	movs	r0, #1
 8001072:	4601      	mov	r1, r0
 8001074:	f000 fa16 	bl	80014a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8001078:	2001      	movs	r0, #1
 800107a:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800107c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8001080:	f000 ba10 	b.w	80014a4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001084:	2002      	movs	r0, #2
 8001086:	2101      	movs	r1, #1
 8001088:	f000 fa0c 	bl	80014a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800108c:	2002      	movs	r0, #2
 800108e:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8001094:	f000 ba06 	b.w	80014a4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001098:	2004      	movs	r0, #4
 800109a:	2101      	movs	r1, #1
 800109c:	f000 fa02 	bl	80014a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80010a0:	2004      	movs	r0, #4
 80010a2:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80010a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80010a8:	f000 b9fc 	b.w	80014a4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80010ac:	2008      	movs	r0, #8
 80010ae:	2101      	movs	r1, #1
 80010b0:	f000 f9f8 	bl	80014a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80010b4:	2008      	movs	r0, #8
 80010b6:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80010b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80010bc:	f000 b9f2 	b.w	80014a4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80010c0:	2010      	movs	r0, #16
 80010c2:	2101      	movs	r1, #1
 80010c4:	f000 f9ee 	bl	80014a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80010c8:	2010      	movs	r0, #16
 80010ca:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80010cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80010d0:	f000 b9e8 	b.w	80014a4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80010d4:	2020      	movs	r0, #32
 80010d6:	2101      	movs	r1, #1
 80010d8:	f000 f9e4 	bl	80014a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80010dc:	2020      	movs	r0, #32
 80010de:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80010e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80010e4:	f000 b9de 	b.w	80014a4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80010e8:	2040      	movs	r0, #64	; 0x40
 80010ea:	2101      	movs	r1, #1
 80010ec:	f000 f9da 	bl	80014a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80010f0:	2040      	movs	r0, #64	; 0x40
 80010f2:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80010f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80010f8:	f000 b9d4 	b.w	80014a4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80010fc:	2080      	movs	r0, #128	; 0x80
 80010fe:	2101      	movs	r1, #1
 8001100:	f000 f9d0 	bl	80014a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8001104:	2080      	movs	r0, #128	; 0x80
 8001106:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8001108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800110c:	f000 b9ca 	b.w	80014a4 <RCC_AHB1PeriphResetCmd>

08001110 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001110:	f643 0300 	movw	r3, #14336	; 0x3800
 8001114:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001118:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800111a:	2000      	movs	r0, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800111c:	f041 0201 	orr.w	r2, r1, #1
 8001120:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001122:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001124:	6819      	ldr	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001126:	f243 0210 	movw	r2, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800112a:	f021 7c84 	bic.w	ip, r1, #17301504	; 0x1080000
 800112e:	f42c 3180 	bic.w	r1, ip, #65536	; 0x10000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001132:	f2c2 4200 	movt	r2, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001136:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001138:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800113a:	6819      	ldr	r1, [r3, #0]
 800113c:	f421 2280 	bic.w	r2, r1, #262144	; 0x40000
 8001140:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001142:	60d8      	str	r0, [r3, #12]
}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8001148:	f643 0302 	movw	r3, #14338	; 0x3802
 800114c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8001154:	7018      	strb	r0, [r3, #0]
}
 8001156:	4770      	bx	lr

08001158 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001158:	b082      	sub	sp, #8

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800115a:	f643 0100 	movw	r1, #14336	; 0x3800
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001162:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001166:	680a      	ldr	r2, [r1, #0]
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8001168:	9801      	ldr	r0, [sp, #4]
 800116a:	1c43      	adds	r3, r0, #1
 800116c:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800116e:	9801      	ldr	r0, [sp, #4]
 8001170:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 8001174:	d002      	beq.n	800117c <RCC_WaitForHSEStartUp+0x24>
 8001176:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800117a:	d0f4      	beq.n	8001166 <RCC_WaitForHSEStartUp+0xe>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800117c:	f643 0200 	movw	r2, #14336	; 0x3800
 8001180:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001184:	6811      	ldr	r1, [r2, #0]
  else
  {
    status = ERROR;
  }
  return (status);
}
 8001186:	f3c1 4040 	ubfx	r0, r1, #17, #1
 800118a:	b002      	add	sp, #8
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8001190:	f643 0300 	movw	r3, #14336	; 0x3800
 8001194:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001198:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800119a:	f022 01f8 	bic.w	r1, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800119e:	ea41 02c0 	orr.w	r2, r1, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 80011a2:	601a      	str	r2, [r3, #0]
}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop

080011a8 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80011a8:	f240 0300 	movw	r3, #0
 80011ac:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80011b0:	6018      	str	r0, [r3, #0]
}
 80011b2:	4770      	bx	lr

080011b4 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80011b4:	f643 0370 	movw	r3, #14448	; 0x3870
 80011b8:	2200      	movs	r2, #0
 80011ba:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80011be:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80011c0:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80011c2:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80011c4:	d004      	beq.n	80011d0 <RCC_LSEConfig+0x1c>
 80011c6:	2804      	cmp	r0, #4
 80011c8:	d101      	bne.n	80011ce <RCC_LSEConfig+0x1a>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80011ca:	2005      	movs	r0, #5
 80011cc:	7018      	strb	r0, [r3, #0]
 80011ce:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80011d0:	7018      	strb	r0, [r3, #0]
      break;
 80011d2:	4770      	bx	lr

080011d4 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80011d4:	f640 6380 	movw	r3, #3712	; 0xe80
 80011d8:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80011dc:	6018      	str	r0, [r3, #0]
}
 80011de:	4770      	bx	lr

080011e0 <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80011e0:	4301      	orrs	r1, r0
 80011e2:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 80011e6:	9900      	ldr	r1, [sp, #0]
 80011e8:	0858      	lsrs	r0, r3, #1
 80011ea:	1e43      	subs	r3, r0, #1
 80011ec:	ea42 6c01 	orr.w	ip, r2, r1, lsl #24
 80011f0:	f643 0000 	movw	r0, #14336	; 0x3800
 80011f4:	ea4c 4203 	orr.w	r2, ip, r3, lsl #16
 80011f8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80011fc:	6042      	str	r2, [r0, #4]
                 (PLLQ << 24);
}
 80011fe:	4770      	bx	lr

08001200 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001200:	f240 0360 	movw	r3, #96	; 0x60
 8001204:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001208:	6018      	str	r0, [r3, #0]
}
 800120a:	4770      	bx	lr

0800120c <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 800120c:	0180      	lsls	r0, r0, #6
 800120e:	f643 0300 	movw	r3, #14336	; 0x3800
 8001212:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 8001216:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800121a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 800121e:	4770      	bx	lr

08001220 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8001220:	f240 0368 	movw	r3, #104	; 0x68
 8001224:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001228:	6018      	str	r0, [r3, #0]
}
 800122a:	4770      	bx	lr

0800122c <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800122c:	f240 034c 	movw	r3, #76	; 0x4c
 8001230:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001234:	6018      	str	r0, [r3, #0]
}
 8001236:	4770      	bx	lr

08001238 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8001238:	f643 0300 	movw	r3, #14336	; 0x3800
 800123c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001240:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8001242:	f022 6cec 	bic.w	ip, r2, #123731968	; 0x7600000
 8001246:	ea40 020c 	orr.w	r2, r0, ip
 800124a:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800124c:	609a      	str	r2, [r3, #8]
}
 800124e:	4770      	bx	lr

08001250 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8001250:	f643 0300 	movw	r3, #14336	; 0x3800
 8001254:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001258:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800125a:	f022 4c78 	bic.w	ip, r2, #4160749568	; 0xf8000000
 800125e:	ea40 020c 	orr.w	r2, r0, ip
 8001262:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001264:	609a      	str	r2, [r3, #8]
}
 8001266:	4770      	bx	lr

08001268 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8001268:	f643 0300 	movw	r3, #14336	; 0x3800
 800126c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001270:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8001272:	f022 0103 	bic.w	r1, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001276:	ea40 0201 	orr.w	r2, r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800127a:	609a      	str	r2, [r3, #8]
}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop

08001280 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8001280:	f643 0300 	movw	r3, #14336	; 0x3800
 8001284:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001288:	6898      	ldr	r0, [r3, #8]
}
 800128a:	f000 000c 	and.w	r0, r0, #12
 800128e:	4770      	bx	lr

08001290 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8001290:	f643 0300 	movw	r3, #14336	; 0x3800
 8001294:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001298:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800129a:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800129e:	ea40 0201 	orr.w	r2, r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80012a2:	609a      	str	r2, [r3, #8]
}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop

080012a8 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80012a8:	f643 0300 	movw	r3, #14336	; 0x3800
 80012ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012b0:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80012b2:	f422 51e0 	bic.w	r1, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80012b6:	ea40 0201 	orr.w	r2, r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80012ba:	609a      	str	r2, [r3, #8]
}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop

080012c0 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80012c0:	f643 0300 	movw	r3, #14336	; 0x3800
 80012c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012c8:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80012ca:	f422 4160 	bic.w	r1, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80012ce:	ea41 02c0 	orr.w	r2, r1, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80012d2:	609a      	str	r2, [r3, #8]
}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop

080012d8 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80012d8:	f643 0300 	movw	r3, #14336	; 0x3800
 80012dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012e0:	689a      	ldr	r2, [r3, #8]
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80012e2:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 80012e4:	f002 020c 	and.w	r2, r2, #12
 80012e8:	2a04      	cmp	r2, #4
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80012ea:	bf02      	ittt	eq
 80012ec:	f241 2100 	movweq	r1, #4608	; 0x1200
 80012f0:	f2c0 017a 	movteq	r1, #122	; 0x7a
 80012f4:	6001      	streq	r1, [r0, #0]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 80012f6:	d006      	beq.n	8001306 <RCC_GetClocksFreq+0x2e>
 80012f8:	2a08      	cmp	r2, #8
 80012fa:	d026      	beq.n	800134a <RCC_GetClocksFreq+0x72>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80012fc:	f242 4100 	movw	r1, #9216	; 0x2400
 8001300:	f2c0 01f4 	movt	r1, #244	; 0xf4
 8001304:	6001      	str	r1, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001306:	f643 0200 	movw	r2, #14336	; 0x3800
 800130a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800130e:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8001310:	f240 03b0 	movw	r3, #176	; 0xb0
 8001314:	f2c2 0300 	movt	r3, #8192	; 0x2000
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 8001318:	f3c4 1c03 	ubfx	ip, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 800131c:	f813 c00c 	ldrb.w	ip, [r3, ip]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001320:	fa21 f10c 	lsr.w	r1, r1, ip
 8001324:	6041      	str	r1, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001326:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 10;
 8001328:	f3c4 2c82 	ubfx	ip, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 800132c:	f813 400c 	ldrb.w	r4, [r3, ip]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001330:	fa31 f404 	lsrs.w	r4, r1, r4
 8001334:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001336:	6892      	ldr	r2, [r2, #8]
  tmp = tmp >> 13;
 8001338:	f3c2 3c42 	ubfx	ip, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 800133c:	f813 300c 	ldrb.w	r3, [r3, ip]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001340:	fa31 f203 	lsrs.w	r2, r1, r3
 8001344:	60c2      	str	r2, [r0, #12]
}
 8001346:	bc10      	pop	{r4}
 8001348:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800134a:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800134c:	685c      	ldr	r4, [r3, #4]
      
      if (pllsource != 0)
 800134e:	f411 0f80 	tst.w	r1, #4194304	; 0x400000

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001352:	f004 023f 	and.w	r2, r4, #63	; 0x3f
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001356:	685c      	ldr	r4, [r3, #4]
 8001358:	bf14      	ite	ne
 800135a:	f241 2300 	movwne	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800135e:	f242 4300 	movweq	r3, #9216	; 0x2400
 8001362:	f3c4 1c88 	ubfx	ip, r4, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001366:	f643 0400 	movw	r4, #14336	; 0x3800
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800136a:	bf14      	ite	ne
 800136c:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001370:	f2c0 03f4 	movteq	r3, #244	; 0xf4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001374:	f2c4 0402 	movt	r4, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001378:	fbb3 f1f2 	udiv	r1, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800137c:	6863      	ldr	r3, [r4, #4]
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800137e:	fb01 f10c 	mul.w	r1, r1, ip
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001382:	f3c3 4201 	ubfx	r2, r3, #16, #2
 8001386:	1c54      	adds	r4, r2, #1
 8001388:	0063      	lsls	r3, r4, #1
 800138a:	fbb1 f1f3 	udiv	r1, r1, r3
 800138e:	6001      	str	r1, [r0, #0]
      break;
 8001390:	e7b9      	b.n	8001306 <RCC_GetClocksFreq+0x2e>
 8001392:	bf00      	nop

08001394 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8001394:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8001398:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800139c:	d10c      	bne.n	80013b8 <RCC_RTCCLKConfig+0x24>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 800139e:	f643 0300 	movw	r3, #14336	; 0x3800
 80013a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013a6:	689a      	ldr	r2, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80013a8:	f020 4c70 	bic.w	ip, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 80013ac:	f422 11f8 	bic.w	r1, r2, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80013b0:	f42c 7240 	bic.w	r2, ip, #768	; 0x300
 80013b4:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 80013b6:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 80013b8:	f643 0300 	movw	r3, #14336	; 0x3800
 80013bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013c0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80013c2:	0502      	lsls	r2, r0, #20
 80013c4:	0d10      	lsrs	r0, r2, #20
 80013c6:	4308      	orrs	r0, r1
 80013c8:	6718      	str	r0, [r3, #112]	; 0x70
}
 80013ca:	4770      	bx	lr

080013cc <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80013cc:	f640 633c 	movw	r3, #3644	; 0xe3c
 80013d0:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80013d4:	6018      	str	r0, [r3, #0]
}
 80013d6:	4770      	bx	lr

080013d8 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80013d8:	f640 6340 	movw	r3, #3648	; 0xe40
 80013dc:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80013e0:	6018      	str	r0, [r3, #0]
}
 80013e2:	4770      	bx	lr

080013e4 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 80013e4:	f240 135c 	movw	r3, #348	; 0x15c
 80013e8:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80013ec:	6018      	str	r0, [r3, #0]
}
 80013ee:	4770      	bx	lr

080013f0 <RCC_AHB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013f0:	b941      	cbnz	r1, 8001404 <RCC_AHB1PeriphClockCmd+0x14>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80013f2:	f643 0100 	movw	r1, #14336	; 0x3800
 80013f6:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80013fa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80013fc:	ea23 0000 	bic.w	r0, r3, r0
 8001400:	6308      	str	r0, [r1, #48]	; 0x30
 8001402:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001404:	f643 0300 	movw	r3, #14336	; 0x3800
 8001408:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800140c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140e:	4310      	orrs	r0, r2
 8001410:	6318      	str	r0, [r3, #48]	; 0x30
 8001412:	4770      	bx	lr

08001414 <RCC_AHB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001414:	b941      	cbnz	r1, 8001428 <RCC_AHB2PeriphClockCmd+0x14>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8001416:	f643 0100 	movw	r1, #14336	; 0x3800
 800141a:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800141e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001420:	ea23 0000 	bic.w	r0, r3, r0
 8001424:	6348      	str	r0, [r1, #52]	; 0x34
 8001426:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001428:	f643 0300 	movw	r3, #14336	; 0x3800
 800142c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001432:	4310      	orrs	r0, r2
 8001434:	6358      	str	r0, [r3, #52]	; 0x34
 8001436:	4770      	bx	lr

08001438 <RCC_AHB3PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001438:	b941      	cbnz	r1, 800144c <RCC_AHB3PeriphClockCmd+0x14>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800143a:	f643 0100 	movw	r1, #14336	; 0x3800
 800143e:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001442:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8001444:	ea23 0000 	bic.w	r0, r3, r0
 8001448:	6388      	str	r0, [r1, #56]	; 0x38
 800144a:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800144c:	f643 0300 	movw	r3, #14336	; 0x3800
 8001450:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001456:	4310      	orrs	r0, r2
 8001458:	6398      	str	r0, [r3, #56]	; 0x38
 800145a:	4770      	bx	lr

0800145c <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800145c:	b941      	cbnz	r1, 8001470 <RCC_APB1PeriphClockCmd+0x14>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800145e:	f643 0100 	movw	r1, #14336	; 0x3800
 8001462:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001466:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001468:	ea23 0000 	bic.w	r0, r3, r0
 800146c:	6408      	str	r0, [r1, #64]	; 0x40
 800146e:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001470:	f643 0300 	movw	r3, #14336	; 0x3800
 8001474:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800147a:	4310      	orrs	r0, r2
 800147c:	6418      	str	r0, [r3, #64]	; 0x40
 800147e:	4770      	bx	lr

08001480 <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001480:	b941      	cbnz	r1, 8001494 <RCC_APB2PeriphClockCmd+0x14>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001482:	f643 0100 	movw	r1, #14336	; 0x3800
 8001486:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800148a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800148c:	ea23 0000 	bic.w	r0, r3, r0
 8001490:	6448      	str	r0, [r1, #68]	; 0x44
 8001492:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001494:	f643 0300 	movw	r3, #14336	; 0x3800
 8001498:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800149c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800149e:	4310      	orrs	r0, r2
 80014a0:	6458      	str	r0, [r3, #68]	; 0x44
 80014a2:	4770      	bx	lr

080014a4 <RCC_AHB1PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014a4:	b941      	cbnz	r1, 80014b8 <RCC_AHB1PeriphResetCmd+0x14>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 80014a6:	f643 0100 	movw	r1, #14336	; 0x3800
 80014aa:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80014ae:	690b      	ldr	r3, [r1, #16]
 80014b0:	ea23 0000 	bic.w	r0, r3, r0
 80014b4:	6108      	str	r0, [r1, #16]
 80014b6:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80014b8:	f643 0300 	movw	r3, #14336	; 0x3800
 80014bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	4310      	orrs	r0, r2
 80014c4:	6118      	str	r0, [r3, #16]
 80014c6:	4770      	bx	lr

080014c8 <RCC_AHB2PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014c8:	b941      	cbnz	r1, 80014dc <RCC_AHB2PeriphResetCmd+0x14>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80014ca:	f643 0100 	movw	r1, #14336	; 0x3800
 80014ce:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80014d2:	694b      	ldr	r3, [r1, #20]
 80014d4:	ea23 0000 	bic.w	r0, r3, r0
 80014d8:	6148      	str	r0, [r1, #20]
 80014da:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80014dc:	f643 0300 	movw	r3, #14336	; 0x3800
 80014e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	4310      	orrs	r0, r2
 80014e8:	6158      	str	r0, [r3, #20]
 80014ea:	4770      	bx	lr

080014ec <RCC_AHB3PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014ec:	b941      	cbnz	r1, 8001500 <RCC_AHB3PeriphResetCmd+0x14>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 80014ee:	f643 0100 	movw	r1, #14336	; 0x3800
 80014f2:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80014f6:	698b      	ldr	r3, [r1, #24]
 80014f8:	ea23 0000 	bic.w	r0, r3, r0
 80014fc:	6188      	str	r0, [r1, #24]
 80014fe:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001500:	f643 0300 	movw	r3, #14336	; 0x3800
 8001504:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001508:	699a      	ldr	r2, [r3, #24]
 800150a:	4310      	orrs	r0, r2
 800150c:	6198      	str	r0, [r3, #24]
 800150e:	4770      	bx	lr

08001510 <RCC_APB1PeriphResetCmd>:
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001510:	b941      	cbnz	r1, 8001524 <RCC_APB1PeriphResetCmd+0x14>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001512:	f643 0100 	movw	r1, #14336	; 0x3800
 8001516:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800151a:	6a0b      	ldr	r3, [r1, #32]
 800151c:	ea23 0000 	bic.w	r0, r3, r0
 8001520:	6208      	str	r0, [r1, #32]
 8001522:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001524:	f643 0300 	movw	r3, #14336	; 0x3800
 8001528:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800152c:	6a1a      	ldr	r2, [r3, #32]
 800152e:	4310      	orrs	r0, r2
 8001530:	6218      	str	r0, [r3, #32]
 8001532:	4770      	bx	lr

08001534 <RCC_APB2PeriphResetCmd>:
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001534:	b941      	cbnz	r1, 8001548 <RCC_APB2PeriphResetCmd+0x14>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001536:	f643 0100 	movw	r1, #14336	; 0x3800
 800153a:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800153e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001540:	ea23 0000 	bic.w	r0, r3, r0
 8001544:	6248      	str	r0, [r1, #36]	; 0x24
 8001546:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001548:	f643 0300 	movw	r3, #14336	; 0x3800
 800154c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001552:	4310      	orrs	r0, r2
 8001554:	6258      	str	r0, [r3, #36]	; 0x24
 8001556:	4770      	bx	lr

08001558 <RCC_AHB1PeriphClockLPModeCmd>:
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001558:	b941      	cbnz	r1, 800156c <RCC_AHB1PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 800155a:	f643 0100 	movw	r1, #14336	; 0x3800
 800155e:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001562:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8001564:	ea23 0000 	bic.w	r0, r3, r0
 8001568:	6508      	str	r0, [r1, #80]	; 0x50
 800156a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800156c:	f643 0300 	movw	r3, #14336	; 0x3800
 8001570:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001574:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001576:	4310      	orrs	r0, r2
 8001578:	6518      	str	r0, [r3, #80]	; 0x50
 800157a:	4770      	bx	lr

0800157c <RCC_AHB2PeriphClockLPModeCmd>:
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800157c:	b941      	cbnz	r1, 8001590 <RCC_AHB2PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800157e:	f643 0100 	movw	r1, #14336	; 0x3800
 8001582:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001586:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001588:	ea23 0000 	bic.w	r0, r3, r0
 800158c:	6548      	str	r0, [r1, #84]	; 0x54
 800158e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001590:	f643 0300 	movw	r3, #14336	; 0x3800
 8001594:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800159a:	4310      	orrs	r0, r2
 800159c:	6558      	str	r0, [r3, #84]	; 0x54
 800159e:	4770      	bx	lr

080015a0 <RCC_AHB3PeriphClockLPModeCmd>:
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015a0:	b941      	cbnz	r1, 80015b4 <RCC_AHB3PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 80015a2:	f643 0100 	movw	r1, #14336	; 0x3800
 80015a6:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80015aa:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80015ac:	ea23 0000 	bic.w	r0, r3, r0
 80015b0:	6588      	str	r0, [r1, #88]	; 0x58
 80015b2:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 80015b4:	f643 0300 	movw	r3, #14336	; 0x3800
 80015b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015be:	4310      	orrs	r0, r2
 80015c0:	6598      	str	r0, [r3, #88]	; 0x58
 80015c2:	4770      	bx	lr

080015c4 <RCC_APB1PeriphClockLPModeCmd>:
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015c4:	b941      	cbnz	r1, 80015d8 <RCC_APB1PeriphClockLPModeCmd+0x14>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 80015c6:	f643 0100 	movw	r1, #14336	; 0x3800
 80015ca:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80015ce:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 80015d0:	ea23 0000 	bic.w	r0, r3, r0
 80015d4:	6608      	str	r0, [r1, #96]	; 0x60
 80015d6:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80015d8:	f643 0300 	movw	r3, #14336	; 0x3800
 80015dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015e2:	4310      	orrs	r0, r2
 80015e4:	6618      	str	r0, [r3, #96]	; 0x60
 80015e6:	4770      	bx	lr

080015e8 <RCC_APB2PeriphClockLPModeCmd>:
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015e8:	b941      	cbnz	r1, 80015fc <RCC_APB2PeriphClockLPModeCmd+0x14>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 80015ea:	f643 0100 	movw	r1, #14336	; 0x3800
 80015ee:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80015f2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80015f4:	ea23 0000 	bic.w	r0, r3, r0
 80015f8:	6648      	str	r0, [r1, #100]	; 0x64
 80015fa:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80015fc:	f643 0300 	movw	r3, #14336	; 0x3800
 8001600:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001604:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001606:	4310      	orrs	r0, r2
 8001608:	6658      	str	r0, [r3, #100]	; 0x64
 800160a:	4770      	bx	lr

0800160c <RCC_ITConfig>:
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800160c:	b949      	cbnz	r1, 8001622 <RCC_ITConfig+0x16>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800160e:	f643 010d 	movw	r1, #14349	; 0x380d
 8001612:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001616:	f891 c000 	ldrb.w	ip, [r1]
 800161a:	ea2c 0000 	bic.w	r0, ip, r0
 800161e:	7008      	strb	r0, [r1, #0]
 8001620:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001622:	f643 030d 	movw	r3, #14349	; 0x380d
 8001626:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800162a:	781a      	ldrb	r2, [r3, #0]
 800162c:	4310      	orrs	r0, r2
 800162e:	7018      	strb	r0, [r3, #0]
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop

08001634 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001634:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8001636:	2b01      	cmp	r3, #1
 8001638:	d00e      	beq.n	8001658 <RCC_GetFlagStatus+0x24>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800163a:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 800163c:	f643 0300 	movw	r3, #14336	; 0x3800
 8001640:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001644:	bf0c      	ite	eq
 8001646:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001648:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
 800164a:	f000 011f 	and.w	r1, r0, #31
 800164e:	fa33 f001 	lsrs.w	r0, r3, r1
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8001652:	f000 0001 	and.w	r0, r0, #1
 8001656:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001658:	f643 0300 	movw	r3, #14336	; 0x3800
 800165c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001660:	681b      	ldr	r3, [r3, #0]
  {
    statusreg = RCC->BDCR;
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001662:	f000 011f 	and.w	r1, r0, #31
 8001666:	fa33 f001 	lsrs.w	r0, r3, r1
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 800166a:	f000 0001 	and.w	r0, r0, #1
 800166e:	4770      	bx	lr

08001670 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001670:	f643 0300 	movw	r3, #14336	; 0x3800
 8001674:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001678:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800167a:	f040 7280 	orr.w	r2, r0, #16777216	; 0x1000000
 800167e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop

08001684 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001684:	f643 0100 	movw	r1, #14336	; 0x3800
 8001688:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800168c:	68cb      	ldr	r3, [r1, #12]
 800168e:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8001690:	bf0c      	ite	eq
 8001692:	2000      	moveq	r0, #0
 8001694:	2001      	movne	r0, #1
 8001696:	4770      	bx	lr

08001698 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001698:	f643 030e 	movw	r3, #14350	; 0x380e
 800169c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016a0:	7018      	strb	r0, [r3, #0]
}
 80016a2:	4770      	bx	lr

080016a4 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80016a4:	b410      	push	{r4}
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80016a6:	f240 0400 	movw	r4, #0
 80016aa:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80016ae:	f240 4200 	movw	r2, #1024	; 0x400
 80016b2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80016b6:	42a0      	cmp	r0, r4
 80016b8:	bf14      	ite	ne
 80016ba:	2300      	movne	r3, #0
 80016bc:	2301      	moveq	r3, #1
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80016be:	f8b0 c000 	ldrh.w	ip, [r0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80016c2:	4290      	cmp	r0, r2
 80016c4:	bf14      	ite	ne
 80016c6:	461a      	movne	r2, r3
 80016c8:	f043 0201 	orreq.w	r2, r3, #1
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80016cc:	fa1f fc8c 	uxth.w	ip, ip

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80016d0:	b97a      	cbnz	r2, 80016f2 <TIM_TimeBaseInit+0x4e>
 80016d2:	f240 4300 	movw	r3, #1024	; 0x400
 80016d6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80016da:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016de:	bf14      	ite	ne
 80016e0:	2400      	movne	r4, #0
 80016e2:	2401      	moveq	r4, #1
 80016e4:	4298      	cmp	r0, r3
 80016e6:	bf14      	ite	ne
 80016e8:	4623      	movne	r3, r4
 80016ea:	f044 0301 	orreq.w	r3, r4, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d032      	beq.n	8001758 <TIM_TimeBaseInit+0xb4>
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80016f2:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80016f6:	f2c0 0300 	movt	r3, #0
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80016fa:	884c      	ldrh	r4, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80016fc:	ea0c 0303 	and.w	r3, ip, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001700:	ea43 0c04 	orr.w	ip, r3, r4
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001704:	f241 0400 	movw	r4, #4096	; 0x1000
 8001708:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800170c:	f241 4300 	movw	r3, #5120	; 0x1400
 8001710:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001714:	1b04      	subs	r4, r0, r4
 8001716:	bf18      	it	ne
 8001718:	2401      	movne	r4, #1
 800171a:	4298      	cmp	r0, r3
 800171c:	bf0c      	ite	eq
 800171e:	2300      	moveq	r3, #0
 8001720:	f004 0301 	andne.w	r3, r4, #1
 8001724:	b143      	cbz	r3, 8001738 <TIM_TimeBaseInit+0x94>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001726:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800172a:	f2c0 0300 	movt	r3, #0
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800172e:	890c      	ldrh	r4, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001730:	ea0c 0303 	and.w	r3, ip, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001734:	ea43 0c04 	orr.w	ip, r3, r4
  }

  TIMx->CR1 = tmpcr1;
 8001738:	f8a0 c000 	strh.w	ip, [r0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800173c:	684c      	ldr	r4, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800173e:	f8b1 c000 	ldrh.w	ip, [r1]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001742:	62c4      	str	r4, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001744:	f8a0 c028 	strh.w	ip, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001748:	b10a      	cbz	r2, 800174e <TIM_TimeBaseInit+0xaa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800174a:	7a8a      	ldrb	r2, [r1, #10]
 800174c:	8602      	strh	r2, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800174e:	f04f 0101 	mov.w	r1, #1
 8001752:	8281      	strh	r1, [r0, #20]
}
 8001754:	bc10      	pop	{r4}
 8001756:	4770      	bx	lr
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001758:	f640 0400 	movw	r4, #2048	; 0x800
 800175c:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8001760:	f640 4300 	movw	r3, #3072	; 0xc00
 8001764:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001768:	42a0      	cmp	r0, r4
 800176a:	bf14      	ite	ne
 800176c:	2400      	movne	r4, #0
 800176e:	2401      	moveq	r4, #1
 8001770:	4298      	cmp	r0, r3
 8001772:	bf14      	ite	ne
 8001774:	4623      	movne	r3, r4
 8001776:	f044 0301 	orreq.w	r3, r4, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0c2      	beq.n	8001704 <TIM_TimeBaseInit+0x60>
 800177e:	e7b8      	b.n	80016f2 <TIM_TimeBaseInit+0x4e>

08001780 <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001780:	2300      	movs	r3, #0
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001782:	f04f 32ff 	mov.w	r2, #4294967295
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001786:	7283      	strb	r3, [r0, #10]
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001788:	6042      	str	r2, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800178a:	8043      	strh	r3, [r0, #2]
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800178c:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800178e:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop

08001794 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8001794:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8001796:	8282      	strh	r2, [r0, #20]
}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop

0800179c <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800179c:	f8b0 c000 	ldrh.w	ip, [r0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017a0:	f02c 0270 	bic.w	r2, ip, #112	; 0x70
 80017a4:	0413      	lsls	r3, r2, #16
 80017a6:	0c1a      	lsrs	r2, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80017a8:	ea41 0302 	orr.w	r3, r1, r2

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80017ac:	8003      	strh	r3, [r0, #0]
}
 80017ae:	4770      	bx	lr

080017b0 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80017b0:	6241      	str	r1, [r0, #36]	; 0x24
}
 80017b2:	4770      	bx	lr

080017b4 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80017b4:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 80017b6:	4770      	bx	lr

080017b8 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 80017b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 80017ba:	4770      	bx	lr

080017bc <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 80017bc:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 80017be:	b280      	uxth	r0, r0
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop

080017c4 <TIM_UpdateDisableConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80017c4:	b939      	cbnz	r1, 80017d6 <TIM_UpdateDisableConfig+0x12>
    TIMx->CR1 |= TIM_CR1_UDIS;
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 80017c6:	f8b0 c000 	ldrh.w	ip, [r0]
 80017ca:	f02c 0202 	bic.w	r2, ip, #2
 80017ce:	0411      	lsls	r1, r2, #16
 80017d0:	0c0b      	lsrs	r3, r1, #16
 80017d2:	8003      	strh	r3, [r0, #0]
 80017d4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 80017d6:	8802      	ldrh	r2, [r0, #0]
 80017d8:	b291      	uxth	r1, r2
 80017da:	f041 0302 	orr.w	r3, r1, #2
 80017de:	8003      	strh	r3, [r0, #0]
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop

080017e4 <TIM_UpdateRequestConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 80017e4:	b939      	cbnz	r1, 80017f6 <TIM_UpdateRequestConfig+0x12>
    TIMx->CR1 |= TIM_CR1_URS;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 80017e6:	f8b0 c000 	ldrh.w	ip, [r0]
 80017ea:	f02c 0204 	bic.w	r2, ip, #4
 80017ee:	0411      	lsls	r1, r2, #16
 80017f0:	0c0b      	lsrs	r3, r1, #16
 80017f2:	8003      	strh	r3, [r0, #0]
 80017f4:	4770      	bx	lr
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80017f6:	8802      	ldrh	r2, [r0, #0]
 80017f8:	b291      	uxth	r1, r2
 80017fa:	f041 0304 	orr.w	r3, r1, #4
 80017fe:	8003      	strh	r3, [r0, #0]
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop

08001804 <TIM_ARRPreloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001804:	b939      	cbnz	r1, 8001816 <TIM_ARRPreloadConfig+0x12>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8001806:	f8b0 c000 	ldrh.w	ip, [r0]
 800180a:	f02c 0280 	bic.w	r2, ip, #128	; 0x80
 800180e:	0411      	lsls	r1, r2, #16
 8001810:	0c0b      	lsrs	r3, r1, #16
 8001812:	8003      	strh	r3, [r0, #0]
 8001814:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001816:	8802      	ldrh	r2, [r0, #0]
 8001818:	b291      	uxth	r1, r2
 800181a:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 800181e:	8003      	strh	r3, [r0, #0]
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop

08001824 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8001824:	f8b0 c000 	ldrh.w	ip, [r0]
 8001828:	f02c 0308 	bic.w	r3, ip, #8
 800182c:	041a      	lsls	r2, r3, #16
 800182e:	0c13      	lsrs	r3, r2, #16
 8001830:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8001832:	f8b0 c000 	ldrh.w	ip, [r0]
 8001836:	fa1f f28c 	uxth.w	r2, ip
 800183a:	ea41 0302 	orr.w	r3, r1, r2
 800183e:	8003      	strh	r3, [r0, #0]
}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop

08001844 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8001844:	f8b0 c000 	ldrh.w	ip, [r0]
 8001848:	f42c 7340 	bic.w	r3, ip, #768	; 0x300
 800184c:	041a      	lsls	r2, r3, #16
 800184e:	0c13      	lsrs	r3, r2, #16
 8001850:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8001852:	f8b0 c000 	ldrh.w	ip, [r0]
 8001856:	fa1f f28c 	uxth.w	r2, ip
 800185a:	ea41 0302 	orr.w	r3, r1, r2
 800185e:	8003      	strh	r3, [r0, #0]
}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop

08001864 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001864:	b939      	cbnz	r1, 8001876 <TIM_Cmd+0x12>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001866:	f8b0 c000 	ldrh.w	ip, [r0]
 800186a:	f02c 0201 	bic.w	r2, ip, #1
 800186e:	0411      	lsls	r1, r2, #16
 8001870:	0c0b      	lsrs	r3, r1, #16
 8001872:	8003      	strh	r3, [r0, #0]
 8001874:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001876:	8802      	ldrh	r2, [r0, #0]
 8001878:	b291      	uxth	r1, r2
 800187a:	f041 0301 	orr.w	r3, r1, #1
 800187e:	8003      	strh	r3, [r0, #0]
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop

08001884 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001884:	f8b0 c020 	ldrh.w	ip, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001888:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800188c:	f02c 0301 	bic.w	r3, ip, #1
 8001890:	041f      	lsls	r7, r3, #16
 8001892:	0c3a      	lsrs	r2, r7, #16
 8001894:	8402      	strh	r2, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001896:	8c06      	ldrh	r6, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001898:	884d      	ldrh	r5, [r1, #2]
 800189a:	898c      	ldrh	r4, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800189c:	f240 0700 	movw	r7, #0
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80018a0:	f026 0302 	bic.w	r3, r6, #2
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80018a4:	f2c4 0701 	movt	r7, #16385	; 0x4001
 80018a8:	f240 4200 	movw	r2, #1024	; 0x400
 80018ac:	42b8      	cmp	r0, r7
 80018ae:	bf14      	ite	ne
 80018b0:	f04f 0c00 	movne.w	ip, #0
 80018b4:	f04f 0c01 	moveq.w	ip, #1
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80018b8:	ea45 0404 	orr.w	r4, r5, r4
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80018bc:	041e      	lsls	r6, r3, #16
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018be:	8885      	ldrh	r5, [r0, #4]
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80018c0:	f2c4 0201 	movt	r2, #16385	; 0x4001
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80018c4:	8b07      	ldrh	r7, [r0, #24]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80018c6:	0c33      	lsrs	r3, r6, #16
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80018c8:	4290      	cmp	r0, r2
 80018ca:	bf14      	ite	ne
 80018cc:	4662      	movne	r2, ip
 80018ce:	f04c 0201 	orreq.w	r2, ip, #1
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80018d2:	fa1f fc84 	uxth.w	ip, r4
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80018d6:	ea4c 0c03 	orr.w	ip, ip, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018da:	b2ad      	uxth	r5, r5
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80018dc:	b2bf      	uxth	r7, r7
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80018de:	880e      	ldrh	r6, [r1, #0]
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80018e0:	b302      	cbz	r2, 8001924 <TIM_OC1Init+0xa0>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80018e2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80018e6:	f2c0 0200 	movt	r2, #0
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80018ea:	8a0b      	ldrh	r3, [r1, #16]
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80018ec:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80018f0:	f8b1 8012 	ldrh.w	r8, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80018f4:	ea0c 0402 	and.w	r4, ip, r2
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80018f8:	f64f 7cfb 	movw	ip, #65531	; 0xfffb
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80018fc:	f64f 42ff 	movw	r2, #64767	; 0xfcff
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001900:	ea48 0803 	orr.w	r8, r8, r3
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001904:	ea44 040a 	orr.w	r4, r4, sl
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8001908:	f2c0 0c00 	movt	ip, #0
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800190c:	f2c0 0200 	movt	r2, #0
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001910:	888b      	ldrh	r3, [r1, #4]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8001912:	ea05 0202 	and.w	r2, r5, r2
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8001916:	ea04 0c0c 	and.w	ip, r4, ip
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800191a:	fa1f f588 	uxth.w	r5, r8
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800191e:	ea4c 0c03 	orr.w	ip, ip, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001922:	4315      	orrs	r5, r2
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8001924:	f64f 728c 	movw	r2, #65420	; 0xff8c
 8001928:	f2c0 0200 	movt	r2, #0
 800192c:	ea07 0302 	and.w	r3, r7, r2
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001930:	688a      	ldr	r2, [r1, #8]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001932:	4333      	orrs	r3, r6
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001934:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001936:	8303      	strh	r3, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001938:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800193a:	f8a0 c020 	strh.w	ip, [r0, #32]
}
 800193e:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
 8001942:	4770      	bx	lr

08001944 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001944:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001948:	8c05      	ldrh	r5, [r0, #32]
 800194a:	f025 0710 	bic.w	r7, r5, #16
 800194e:	043a      	lsls	r2, r7, #16
 8001950:	0c13      	lsrs	r3, r2, #16
 8001952:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001954:	f8b0 c020 	ldrh.w	ip, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001958:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800195a:	f02c 0620 	bic.w	r6, ip, #32
 800195e:	0434      	lsls	r4, r6, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001960:	f240 0200 	movw	r2, #0
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8001964:	0c27      	lsrs	r7, r4, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001966:	f2c4 0201 	movt	r2, #16385	; 0x4001
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800196a:	884e      	ldrh	r6, [r1, #2]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800196c:	f240 4400 	movw	r4, #1024	; 0x400
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001970:	ea47 1305 	orr.w	r3, r7, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001974:	4290      	cmp	r0, r2
 8001976:	bf14      	ite	ne
 8001978:	f04f 0c00 	movne.w	ip, #0
 800197c:	f04f 0c01 	moveq.w	ip, #1
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001980:	8885      	ldrh	r5, [r0, #4]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001982:	f2c4 0401 	movt	r4, #16385	; 0x4001
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001986:	8b07      	ldrh	r7, [r0, #24]
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001988:	ea43 1206 	orr.w	r2, r3, r6, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800198c:	42a0      	cmp	r0, r4
 800198e:	bf14      	ite	ne
 8001990:	4664      	movne	r4, ip
 8001992:	f04c 0401 	orreq.w	r4, ip, #1
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001996:	b2bf      	uxth	r7, r7
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001998:	fa1f fc85 	uxth.w	ip, r5
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800199c:	b292      	uxth	r2, r2
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800199e:	880e      	ldrh	r6, [r1, #0]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80019a0:	b314      	cbz	r4, 80019e8 <TIM_OC2Init+0xa4>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80019a2:	f64f 787f 	movw	r8, #65407	; 0xff7f
 80019a6:	f2c0 0800 	movt	r8, #0
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80019aa:	89cb      	ldrh	r3, [r1, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80019ac:	f24f 34ff 	movw	r4, #62463	; 0xf3ff
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80019b0:	ea02 0508 	and.w	r5, r2, r8
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80019b4:	f2c0 0400 	movt	r4, #0
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80019b8:	f64f 72bf 	movw	r2, #65471	; 0xffbf
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80019bc:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80019c0:	ea0c 0404 	and.w	r4, ip, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80019c4:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80019c8:	f2c0 0200 	movt	r2, #0
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80019cc:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80019ce:	f8b1 c012 	ldrh.w	ip, [r1, #18]
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80019d2:	ea05 0202 	and.w	r2, r5, r2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80019d6:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80019da:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80019de:	ea44 0c8c 	orr.w	ip, r4, ip, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80019e2:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80019e4:	fa1f fc8c 	uxth.w	ip, ip
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80019e8:	f648 43ff 	movw	r3, #36095	; 0x8cff
 80019ec:	f2c0 0300 	movt	r3, #0
 80019f0:	ea07 0303 	and.w	r3, r7, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80019f4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80019f8:	6889      	ldr	r1, [r1, #8]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80019fa:	b29b      	uxth	r3, r3
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019fc:	f8a0 c004 	strh.w	ip, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a00:	8303      	strh	r3, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001a02:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a04:	8402      	strh	r2, [r0, #32]
}
 8001a06:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001a0a:	4770      	bx	lr

08001a0c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001a0c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001a10:	8c05      	ldrh	r5, [r0, #32]
 8001a12:	f425 7780 	bic.w	r7, r5, #256	; 0x100
 8001a16:	043a      	lsls	r2, r7, #16
 8001a18:	0c13      	lsrs	r3, r2, #16
 8001a1a:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a1c:	f8b0 c020 	ldrh.w	ip, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001a20:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001a22:	f42c 7600 	bic.w	r6, ip, #512	; 0x200
 8001a26:	0434      	lsls	r4, r6, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001a28:	f240 0200 	movw	r2, #0
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001a2c:	0c27      	lsrs	r7, r4, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001a2e:	f2c4 0201 	movt	r2, #16385	; 0x4001
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001a32:	884e      	ldrh	r6, [r1, #2]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001a34:	f240 4400 	movw	r4, #1024	; 0x400
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001a38:	ea47 2305 	orr.w	r3, r7, r5, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001a3c:	4290      	cmp	r0, r2
 8001a3e:	bf14      	ite	ne
 8001a40:	f04f 0c00 	movne.w	ip, #0
 8001a44:	f04f 0c01 	moveq.w	ip, #1
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a48:	8885      	ldrh	r5, [r0, #4]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001a4a:	f2c4 0401 	movt	r4, #16385	; 0x4001
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a4e:	8b87      	ldrh	r7, [r0, #28]
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001a50:	ea43 2206 	orr.w	r2, r3, r6, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001a54:	42a0      	cmp	r0, r4
 8001a56:	bf14      	ite	ne
 8001a58:	4664      	movne	r4, ip
 8001a5a:	f04c 0401 	orreq.w	r4, ip, #1
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a5e:	b2bf      	uxth	r7, r7
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a60:	fa1f fc85 	uxth.w	ip, r5
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001a64:	b292      	uxth	r2, r2
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001a66:	880e      	ldrh	r6, [r1, #0]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001a68:	b314      	cbz	r4, 8001ab0 <TIM_OC3Init+0xa4>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001a6a:	f24f 78ff 	movw	r8, #63487	; 0xf7ff
 8001a6e:	f2c0 0800 	movt	r8, #0
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001a72:	89cb      	ldrh	r3, [r1, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8001a74:	f64c 74ff 	movw	r4, #53247	; 0xcfff
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001a78:	ea02 0508 	and.w	r5, r2, r8
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8001a7c:	f2c0 0400 	movt	r4, #0
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001a80:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001a84:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8001a88:	ea0c 0404 	and.w	r4, ip, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001a8c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001a90:	f2c0 0200 	movt	r2, #0
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001a94:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001a96:	f8b1 c012 	ldrh.w	ip, [r1, #18]
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001a9a:	ea05 0202 	and.w	r2, r5, r2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001a9e:	ea44 1408 	orr.w	r4, r4, r8, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001aa2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001aa6:	ea44 1c0c 	orr.w	ip, r4, ip, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001aaa:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001aac:	fa1f fc8c 	uxth.w	ip, ip
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8001ab0:	f64f 738c 	movw	r3, #65420	; 0xff8c
 8001ab4:	f2c0 0300 	movt	r3, #0
 8001ab8:	ea07 0303 	and.w	r3, r7, r3
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001abc:	6889      	ldr	r1, [r1, #8]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001abe:	4333      	orrs	r3, r6
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ac0:	f8a0 c004 	strh.w	ip, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ac4:	8383      	strh	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001ac6:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ac8:	8402      	strh	r2, [r0, #32]
}
 8001aca:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001ace:	4770      	bx	lr

08001ad0 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001ad0:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001ad4:	f8b0 a020 	ldrh.w	sl, [r0, #32]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001ad8:	f240 0800 	movw	r8, #0
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001adc:	f42a 5580 	bic.w	r5, sl, #4096	; 0x1000
 8001ae0:	042c      	lsls	r4, r5, #16
 8001ae2:	0c23      	lsrs	r3, r4, #16
 8001ae4:	8403      	strh	r3, [r0, #32]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001ae6:	f2c4 0801 	movt	r8, #16385	; 0x4001
 8001aea:	f240 4700 	movw	r7, #1024	; 0x400

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001aee:	8c05      	ldrh	r5, [r0, #32]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001af0:	f2c4 0701 	movt	r7, #16385	; 0x4001
 8001af4:	4540      	cmp	r0, r8
 8001af6:	bf14      	ite	ne
 8001af8:	2200      	movne	r2, #0
 8001afa:	2201      	moveq	r2, #1
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001afc:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001afe:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001b02:	42b8      	cmp	r0, r7
 8001b04:	bf14      	ite	ne
 8001b06:	4613      	movne	r3, r2
 8001b08:	f042 0301 	orreq.w	r3, r2, #1

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b0c:	b2ad      	uxth	r5, r5
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b0e:	b2a4      	uxth	r4, r4
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b10:	fa1f fc8c 	uxth.w	ip, ip
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001b14:	f8b1 8000 	ldrh.w	r8, [r1]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001b18:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001b1c:	884f      	ldrh	r7, [r1, #2]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001b1e:	b14b      	cbz	r3, 8001b34 <TIM_OC4Init+0x64>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8001b20:	f64b 76ff 	movw	r6, #49151	; 0xbfff
 8001b24:	f2c0 0600 	movt	r6, #0
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001b28:	8a0b      	ldrh	r3, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8001b2a:	ea04 0606 	and.w	r6, r4, r6
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001b2e:	ea46 1283 	orr.w	r2, r6, r3, lsl #6
 8001b32:	b294      	uxth	r4, r2
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001b34:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8001b38:	f2c0 0200 	movt	r2, #0
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001b3c:	f648 43ff 	movw	r3, #36095	; 0x8cff
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001b40:	ea05 0202 	and.w	r2, r5, r2
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001b44:	f2c0 0300 	movt	r3, #0
 8001b48:	ea0c 0303 	and.w	r3, ip, r3
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001b4c:	ea42 320a 	orr.w	r2, r2, sl, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001b50:	ea43 2c08 	orr.w	ip, r3, r8, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001b54:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001b58:	6889      	ldr	r1, [r1, #8]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001b5a:	fa1f f38c 	uxth.w	r3, ip
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001b5e:	fa1f fc82 	uxth.w	ip, r2
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b62:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001b64:	8383      	strh	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001b66:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b68:	f8a0 c020 	strh.w	ip, [r0, #32]
}
 8001b6c:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop

08001b74 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8001b74:	2300      	movs	r3, #0
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8001b76:	8243      	strh	r3, [r0, #18]
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8001b78:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8001b7a:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8001b7c:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8001b7e:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8001b80:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8001b82:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8001b84:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
}
 8001b86:	4770      	bx	lr

08001b88 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8001b88:	b410      	push	{r4}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8001b8a:	2401      	movs	r4, #1
 8001b8c:	fa14 f301 	lsls.w	r3, r4, r1
 8001b90:	f8b0 c020 	ldrh.w	ip, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8001b94:	f1d1 0401 	rsbs	r4, r1, #1
 8001b98:	bf38      	it	cc
 8001b9a:	2400      	movcc	r4, #0
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8001b9c:	fa1f fc8c 	uxth.w	ip, ip
 8001ba0:	ea2c 0303 	bic.w	r3, ip, r3

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8001ba4:	2908      	cmp	r1, #8
 8001ba6:	bf08      	it	eq
 8001ba8:	f044 0401 	orreq.w	r4, r4, #1
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8001bac:	8403      	strh	r3, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8001bae:	3018      	adds	r0, #24
  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8001bb0:	b99c      	cbnz	r4, 8001bda <TIM_SelectOCxM+0x52>
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8001bb2:	1f0c      	subs	r4, r1, #4
 8001bb4:	f3c4 014e 	ubfx	r1, r4, #1, #15
 8001bb8:	580c      	ldr	r4, [r1, r0]
 8001bba:	f648 7cff 	movw	ip, #36863	; 0x8fff
 8001bbe:	f2c0 0c00 	movt	ip, #0
 8001bc2:	ea04 030c 	and.w	r3, r4, ip
 8001bc6:	500b      	str	r3, [r1, r0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8001bc8:	0212      	lsls	r2, r2, #8
 8001bca:	580b      	ldr	r3, [r1, r0]
 8001bcc:	fa1f fc82 	uxth.w	ip, r2
 8001bd0:	ea43 020c 	orr.w	r2, r3, ip
 8001bd4:	500a      	str	r2, [r1, r0]
  }
}
 8001bd6:	bc10      	pop	{r4}
 8001bd8:	4770      	bx	lr
  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8001bda:	0849      	lsrs	r1, r1, #1
 8001bdc:	580c      	ldr	r4, [r1, r0]
 8001bde:	f64f 7c8f 	movw	ip, #65423	; 0xff8f
 8001be2:	f2c0 0c00 	movt	ip, #0
 8001be6:	ea04 030c 	and.w	r3, r4, ip
 8001bea:	500b      	str	r3, [r1, r0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8001bec:	580b      	ldr	r3, [r1, r0]
 8001bee:	ea43 0202 	orr.w	r2, r3, r2
 8001bf2:	500a      	str	r2, [r1, r0]
 8001bf4:	e7ef      	b.n	8001bd6 <TIM_SelectOCxM+0x4e>
 8001bf6:	bf00      	nop

08001bf8 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8001bf8:	6341      	str	r1, [r0, #52]	; 0x34
}
 8001bfa:	4770      	bx	lr

08001bfc <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8001bfc:	6381      	str	r1, [r0, #56]	; 0x38
}
 8001bfe:	4770      	bx	lr

08001c00 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8001c00:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8001c02:	4770      	bx	lr

08001c04 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8001c04:	6401      	str	r1, [r0, #64]	; 0x40
}
 8001c06:	4770      	bx	lr

08001c08 <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8001c08:	f8b0 c018 	ldrh.w	ip, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8001c0c:	f02c 0270 	bic.w	r2, ip, #112	; 0x70
 8001c10:	0413      	lsls	r3, r2, #16
 8001c12:	0c1a      	lsrs	r2, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8001c14:	ea41 0302 	orr.w	r3, r1, r2

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001c18:	8303      	strh	r3, [r0, #24]
}
 8001c1a:	4770      	bx	lr

08001c1c <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8001c1c:	f8b0 c018 	ldrh.w	ip, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8001c20:	f42c 43e0 	bic.w	r3, ip, #28672	; 0x7000
 8001c24:	041a      	lsls	r2, r3, #16
 8001c26:	0c13      	lsrs	r3, r2, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8001c28:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
 8001c2c:	b293      	uxth	r3, r2

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001c2e:	8303      	strh	r3, [r0, #24]
}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop

08001c34 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8001c34:	f8b0 c01c 	ldrh.w	ip, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8001c38:	f02c 0270 	bic.w	r2, ip, #112	; 0x70
 8001c3c:	0413      	lsls	r3, r2, #16
 8001c3e:	0c1a      	lsrs	r2, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8001c40:	ea41 0302 	orr.w	r3, r1, r2

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001c44:	8383      	strh	r3, [r0, #28]
}
 8001c46:	4770      	bx	lr

08001c48 <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8001c48:	f8b0 c01c 	ldrh.w	ip, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8001c4c:	f42c 43e0 	bic.w	r3, ip, #28672	; 0x7000
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	0c13      	lsrs	r3, r2, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8001c54:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
 8001c58:	b293      	uxth	r3, r2

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001c5a:	8383      	strh	r3, [r0, #28]
}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop

08001c60 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001c60:	f8b0 c018 	ldrh.w	ip, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8001c64:	f02c 0208 	bic.w	r2, ip, #8
 8001c68:	0413      	lsls	r3, r2, #16
 8001c6a:	0c1a      	lsrs	r2, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001c6c:	ea41 0302 	orr.w	r3, r1, r2

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001c70:	8303      	strh	r3, [r0, #24]
}
 8001c72:	4770      	bx	lr

08001c74 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001c74:	f8b0 c018 	ldrh.w	ip, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8001c78:	f42c 6300 	bic.w	r3, ip, #2048	; 0x800
 8001c7c:	041a      	lsls	r2, r3, #16
 8001c7e:	0c13      	lsrs	r3, r2, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8001c80:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
 8001c84:	b293      	uxth	r3, r2

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001c86:	8303      	strh	r3, [r0, #24]
}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop

08001c8c <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001c8c:	f8b0 c01c 	ldrh.w	ip, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8001c90:	f02c 0208 	bic.w	r2, ip, #8
 8001c94:	0413      	lsls	r3, r2, #16
 8001c96:	0c1a      	lsrs	r2, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8001c98:	ea41 0302 	orr.w	r3, r1, r2

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001c9c:	8383      	strh	r3, [r0, #28]
}
 8001c9e:	4770      	bx	lr

08001ca0 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001ca0:	f8b0 c01c 	ldrh.w	ip, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8001ca4:	f42c 6300 	bic.w	r3, ip, #2048	; 0x800
 8001ca8:	041a      	lsls	r2, r3, #16
 8001caa:	0c13      	lsrs	r3, r2, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8001cac:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
 8001cb0:	b293      	uxth	r3, r2

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001cb2:	8383      	strh	r3, [r0, #28]
}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop

08001cb8 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8001cb8:	f8b0 c018 	ldrh.w	ip, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8001cbc:	f02c 0204 	bic.w	r2, ip, #4
 8001cc0:	0413      	lsls	r3, r2, #16
 8001cc2:	0c1a      	lsrs	r2, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8001cc4:	ea41 0302 	orr.w	r3, r1, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8001cc8:	8303      	strh	r3, [r0, #24]
}
 8001cca:	4770      	bx	lr

08001ccc <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8001ccc:	f8b0 c018 	ldrh.w	ip, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8001cd0:	f42c 6380 	bic.w	r3, ip, #1024	; 0x400
 8001cd4:	041a      	lsls	r2, r3, #16
 8001cd6:	0c13      	lsrs	r3, r2, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8001cd8:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
 8001cdc:	b293      	uxth	r3, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8001cde:	8303      	strh	r3, [r0, #24]
}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop

08001ce4 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8001ce4:	f8b0 c01c 	ldrh.w	ip, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8001ce8:	f02c 0204 	bic.w	r2, ip, #4
 8001cec:	0413      	lsls	r3, r2, #16
 8001cee:	0c1a      	lsrs	r2, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8001cf0:	ea41 0302 	orr.w	r3, r1, r2

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8001cf4:	8383      	strh	r3, [r0, #28]
}
 8001cf6:	4770      	bx	lr

08001cf8 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8001cf8:	f8b0 c01c 	ldrh.w	ip, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8001cfc:	f42c 6380 	bic.w	r3, ip, #1024	; 0x400
 8001d00:	041a      	lsls	r2, r3, #16
 8001d02:	0c13      	lsrs	r3, r2, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8001d04:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
 8001d08:	b293      	uxth	r3, r2

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8001d0a:	8383      	strh	r3, [r0, #28]
}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop

08001d10 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8001d10:	f8b0 c018 	ldrh.w	ip, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8001d14:	f02c 0280 	bic.w	r2, ip, #128	; 0x80
 8001d18:	0413      	lsls	r3, r2, #16
 8001d1a:	0c1a      	lsrs	r2, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8001d1c:	ea41 0302 	orr.w	r3, r1, r2

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001d20:	8303      	strh	r3, [r0, #24]
}
 8001d22:	4770      	bx	lr

08001d24 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8001d24:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8001d26:	045a      	lsls	r2, r3, #17
 8001d28:	0c53      	lsrs	r3, r2, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8001d2a:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
 8001d2e:	b293      	uxth	r3, r2

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001d30:	8303      	strh	r3, [r0, #24]
}
 8001d32:	4770      	bx	lr

08001d34 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8001d34:	f8b0 c01c 	ldrh.w	ip, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8001d38:	f02c 0280 	bic.w	r2, ip, #128	; 0x80
 8001d3c:	0413      	lsls	r3, r2, #16
 8001d3e:	0c1a      	lsrs	r2, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8001d40:	ea41 0302 	orr.w	r3, r1, r2

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001d44:	8383      	strh	r3, [r0, #28]
}
 8001d46:	4770      	bx	lr

08001d48 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8001d48:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8001d4a:	045a      	lsls	r2, r3, #17
 8001d4c:	0c53      	lsrs	r3, r2, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8001d4e:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
 8001d52:	b293      	uxth	r3, r2

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001d54:	8383      	strh	r3, [r0, #28]
}
 8001d56:	4770      	bx	lr

08001d58 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001d58:	f8b0 c020 	ldrh.w	ip, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8001d5c:	f02c 0202 	bic.w	r2, ip, #2
 8001d60:	0413      	lsls	r3, r2, #16
 8001d62:	0c1a      	lsrs	r2, r3, #16
  tmpccer |= TIM_OCPolarity;
 8001d64:	ea41 0302 	orr.w	r3, r1, r2

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001d68:	8403      	strh	r3, [r0, #32]
}
 8001d6a:	4770      	bx	lr

08001d6c <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8001d6c:	f8b0 c020 	ldrh.w	ip, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8001d70:	f02c 0208 	bic.w	r2, ip, #8
 8001d74:	0413      	lsls	r3, r2, #16
 8001d76:	0c1a      	lsrs	r2, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8001d78:	ea41 0302 	orr.w	r3, r1, r2

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001d7c:	8403      	strh	r3, [r0, #32]
}
 8001d7e:	4770      	bx	lr

08001d80 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001d80:	f8b0 c020 	ldrh.w	ip, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8001d84:	f02c 0320 	bic.w	r3, ip, #32
 8001d88:	041a      	lsls	r2, r3, #16
 8001d8a:	0c13      	lsrs	r3, r2, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8001d8c:	ea43 1201 	orr.w	r2, r3, r1, lsl #4
 8001d90:	b293      	uxth	r3, r2

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001d92:	8403      	strh	r3, [r0, #32]
}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop

08001d98 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8001d98:	f8b0 c020 	ldrh.w	ip, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8001d9c:	f02c 0380 	bic.w	r3, ip, #128	; 0x80
 8001da0:	041a      	lsls	r2, r3, #16
 8001da2:	0c13      	lsrs	r3, r2, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8001da4:	ea43 1201 	orr.w	r2, r3, r1, lsl #4
 8001da8:	b293      	uxth	r3, r2

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001daa:	8403      	strh	r3, [r0, #32]
}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop

08001db0 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001db0:	f8b0 c020 	ldrh.w	ip, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001db4:	f42c 7300 	bic.w	r3, ip, #512	; 0x200
 8001db8:	041a      	lsls	r2, r3, #16
 8001dba:	0c13      	lsrs	r3, r2, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8001dbc:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
 8001dc0:	b293      	uxth	r3, r2

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001dc2:	8403      	strh	r3, [r0, #32]
}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop

08001dc8 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8001dc8:	f8b0 c020 	ldrh.w	ip, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001dcc:	f42c 6300 	bic.w	r3, ip, #2048	; 0x800
 8001dd0:	041a      	lsls	r2, r3, #16
 8001dd2:	0c13      	lsrs	r3, r2, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8001dd4:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
 8001dd8:	b293      	uxth	r3, r2

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001dda:	8403      	strh	r3, [r0, #32]
}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop

08001de0 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8001de0:	f8b0 c020 	ldrh.w	ip, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001de4:	f42c 5300 	bic.w	r3, ip, #8192	; 0x2000
 8001de8:	041a      	lsls	r2, r3, #16
 8001dea:	0c13      	lsrs	r3, r2, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8001dec:	ea43 3201 	orr.w	r2, r3, r1, lsl #12
 8001df0:	b293      	uxth	r3, r2

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8001df2:	8403      	strh	r3, [r0, #32]
}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop

08001df8 <TIM_CCxCmd>:
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	408b      	lsls	r3, r1

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8001dfc:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8001dfe:	8c01      	ldrh	r1, [r0, #32]
 8001e00:	fa1f fc81 	uxth.w	ip, r1
 8001e04:	ea2c 0303 	bic.w	r3, ip, r3
 8001e08:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8001e0a:	8c01      	ldrh	r1, [r0, #32]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	b292      	uxth	r2, r2
 8001e10:	8402      	strh	r2, [r0, #32]
}
 8001e12:	4770      	bx	lr

08001e14 <TIM_CCxNCmd>:
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8001e14:	2304      	movs	r3, #4
 8001e16:	408b      	lsls	r3, r1

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8001e18:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8001e1a:	8c01      	ldrh	r1, [r0, #32]
 8001e1c:	fa1f fc81 	uxth.w	ip, r1
 8001e20:	ea2c 0303 	bic.w	r3, ip, r3
 8001e24:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8001e26:	8c01      	ldrh	r1, [r0, #32]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	b292      	uxth	r2, r2
 8001e2c:	8402      	strh	r2, [r0, #32]
}
 8001e2e:	4770      	bx	lr

08001e30 <TIM_ICInit>:
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001e30:	880b      	ldrh	r3, [r1, #0]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001e32:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d037      	beq.n	8001ea8 <TIM_ICInit+0x78>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d062      	beq.n	8001f02 <TIM_ICInit+0xd2>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8001e3c:	2b08      	cmp	r3, #8
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001e3e:	f8b0 c020 	ldrh.w	ip, [r0, #32]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8001e42:	884d      	ldrh	r5, [r1, #2]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8001e44:	f000 8092 	beq.w	8001f6c <TIM_ICInit+0x13c>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001e48:	f42c 5680 	bic.w	r6, ip, #4096	; 0x1000
 8001e4c:	0434      	lsls	r4, r6, #16
 8001e4e:	0c22      	lsrs	r2, r4, #16
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001e50:	888e      	ldrh	r6, [r1, #4]
 8001e52:	890c      	ldrh	r4, [r1, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001e54:	8402      	strh	r2, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001e56:	8b83      	ldrh	r3, [r0, #28]
  tmpccer = TIMx->CCER;
 8001e58:	f8b0 c020 	ldrh.w	ip, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001e60:	f42c 5300 	bic.w	r3, ip, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001e64:	0512      	lsls	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001e66:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001e68:	0d12      	lsrs	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001e6a:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8001e6c:	ea42 2c06 	orr.w	ip, r2, r6, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001e70:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8001e74:	ea4c 3204 	orr.w	r2, ip, r4, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001e78:	fa1f fc83 	uxth.w	ip, r3
 8001e7c:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8001e80:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001e82:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8001e84:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8001e86:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001e8a:	88ca      	ldrh	r2, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8001e8c:	f42c 6340 	bic.w	r3, ip, #3072	; 0xc00
 8001e90:	0419      	lsls	r1, r3, #16
 8001e92:	0c0b      	lsrs	r3, r1, #16
 8001e94:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8001e96:	8b81      	ldrh	r1, [r0, #28]
 8001e98:	b28b      	uxth	r3, r1
 8001e9a:	ea43 2c02 	orr.w	ip, r3, r2, lsl #8
 8001e9e:	fa1f f18c 	uxth.w	r1, ip
 8001ea2:	8381      	strh	r1, [r0, #28]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001ea4:	bc70      	pop	{r4, r5, r6}
 8001ea6:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001ea8:	8c02      	ldrh	r2, [r0, #32]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001eaa:	884d      	ldrh	r5, [r1, #2]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001eac:	f022 0601 	bic.w	r6, r2, #1
 8001eb0:	0434      	lsls	r4, r6, #16
 8001eb2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001eb6:	890e      	ldrh	r6, [r1, #8]
 8001eb8:	888c      	ldrh	r4, [r1, #4]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001eba:	f8a0 c020 	strh.w	ip, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ebe:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 8001ec0:	f8b0 c020 	ldrh.w	ip, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001ec4:	f023 02f3 	bic.w	r2, r3, #243	; 0xf3
 8001ec8:	0413      	lsls	r3, r2, #16
 8001eca:	0c1a      	lsrs	r2, r3, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ecc:	f02c 030a 	bic.w	r3, ip, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001ed0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ed4:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001ed6:	f045 0c01 	orr.w	ip, r5, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001eda:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001edc:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001ede:	ea43 030c 	orr.w	r3, r3, ip
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001ee2:	4322      	orrs	r2, r4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ee4:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ee6:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8001ee8:	f8b0 c018 	ldrh.w	ip, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001eec:	88ca      	ldrh	r2, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8001eee:	f02c 030c 	bic.w	r3, ip, #12
 8001ef2:	0419      	lsls	r1, r3, #16
 8001ef4:	0c0b      	lsrs	r3, r1, #16
 8001ef6:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001ef8:	8b01      	ldrh	r1, [r0, #24]
 8001efa:	b28b      	uxth	r3, r1
 8001efc:	4313      	orrs	r3, r2
 8001efe:	8303      	strh	r3, [r0, #24]
 8001f00:	e7d0      	b.n	8001ea4 <TIM_ICInit+0x74>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001f02:	8c03      	ldrh	r3, [r0, #32]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001f04:	884d      	ldrh	r5, [r1, #2]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001f06:	f023 0610 	bic.w	r6, r3, #16
 8001f0a:	0434      	lsls	r4, r6, #16
 8001f0c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001f10:	890e      	ldrh	r6, [r1, #8]
 8001f12:	888c      	ldrh	r4, [r1, #4]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001f14:	f8a0 c020 	strh.w	ip, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f18:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001f1a:	f8b0 c020 	ldrh.w	ip, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001f1e:	f422 7340 	bic.w	r3, r2, #768	; 0x300
 8001f22:	051a      	lsls	r2, r3, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001f24:	f02c 03a0 	bic.w	r3, ip, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001f28:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001f2a:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001f2c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001f30:	0c1b      	lsrs	r3, r3, #16
 8001f32:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001f36:	fa1f fc82 	uxth.w	ip, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001f3a:	ea4c 2204 	orr.w	r2, ip, r4, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001f3e:	fa1f fc83 	uxth.w	ip, r3
 8001f42:	f04c 0310 	orr.w	r3, ip, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001f46:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f48:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f4a:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8001f4c:	f8b0 c018 	ldrh.w	ip, [r0, #24]
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001f50:	88ca      	ldrh	r2, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8001f52:	f42c 6340 	bic.w	r3, ip, #3072	; 0xc00
 8001f56:	0419      	lsls	r1, r3, #16
 8001f58:	0c0b      	lsrs	r3, r1, #16
 8001f5a:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001f5c:	8b01      	ldrh	r1, [r0, #24]
 8001f5e:	fa1f fc81 	uxth.w	ip, r1
 8001f62:	ea4c 2302 	orr.w	r3, ip, r2, lsl #8
 8001f66:	b299      	uxth	r1, r3
 8001f68:	8301      	strh	r1, [r0, #24]
 8001f6a:	e79b      	b.n	8001ea4 <TIM_ICInit+0x74>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001f6c:	f42c 7680 	bic.w	r6, ip, #256	; 0x100
 8001f70:	0434      	lsls	r4, r6, #16
 8001f72:	0c22      	lsrs	r2, r4, #16
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8001f74:	890e      	ldrh	r6, [r1, #8]
 8001f76:	888c      	ldrh	r4, [r1, #4]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001f78:	8402      	strh	r2, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001f7a:	8b83      	ldrh	r3, [r0, #28]
  tmpccer = TIMx->CCER;
 8001f7c:	f8b0 c020 	ldrh.w	ip, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001f80:	f023 02f3 	bic.w	r2, r3, #243	; 0xf3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001f84:	f42c 6320 	bic.w	r3, ip, #2560	; 0xa00
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001f88:	0412      	lsls	r2, r2, #16

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001f8a:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001f8c:	0c12      	lsrs	r2, r2, #16

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001f8e:	0c1b      	lsrs	r3, r3, #16
 8001f90:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001f94:	ea42 1206 	orr.w	r2, r2, r6, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001f98:	fa1f fc83 	uxth.w	ip, r3
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001f9c:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001f9e:	f44c 7380 	orr.w	r3, ip, #256	; 0x100
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001fa2:	4322      	orrs	r2, r4
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001fa4:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8001fa6:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8001fa8:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001fac:	88ca      	ldrh	r2, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8001fae:	f02c 030c 	bic.w	r3, ip, #12
 8001fb2:	0419      	lsls	r1, r3, #16
 8001fb4:	0c0b      	lsrs	r3, r1, #16
 8001fb6:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8001fb8:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
 8001fbc:	fa1f f18c 	uxth.w	r1, ip
 8001fc0:	4311      	orrs	r1, r2
 8001fc2:	8381      	strh	r1, [r0, #28]
 8001fc4:	e76e      	b.n	8001ea4 <TIM_ICInit+0x74>
 8001fc6:	bf00      	nop

08001fc8 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001fc8:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001fca:	f04f 0201 	mov.w	r2, #1
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8001fce:	8103      	strh	r3, [r0, #8]
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001fd0:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001fd2:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001fd4:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001fd6:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop

08001fdc <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001fdc:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8001fe0:	884a      	ldrh	r2, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8001fe2:	888b      	ldrh	r3, [r1, #4]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001fe4:	880c      	ldrh	r4, [r1, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8001fe6:	2a00      	cmp	r2, #0
 8001fe8:	bf0c      	ite	eq
 8001fea:	2502      	moveq	r5, #2
 8001fec:	2500      	movne	r5, #0
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	bf0c      	ite	eq
 8001ff2:	2602      	moveq	r6, #2
 8001ff4:	2601      	movne	r6, #1
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001ff6:	2c00      	cmp	r4, #0
 8001ff8:	d05e      	beq.n	80020b8 <TIM_PWMIConfig+0xdc>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001ffa:	f8b0 8020 	ldrh.w	r8, [r0, #32]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8001ffe:	890c      	ldrh	r4, [r1, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002000:	f028 0710 	bic.w	r7, r8, #16
 8002004:	ea4f 4c07 	mov.w	ip, r7, lsl #16
 8002008:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800200c:	f8a0 8020 	strh.w	r8, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002010:	8b07      	ldrh	r7, [r0, #24]
  tmpccer = TIMx->CCER;
 8002012:	f8b0 c020 	ldrh.w	ip, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002016:	46b8      	mov	r8, r7
 8002018:	f427 7740 	bic.w	r7, r7, #768	; 0x300
 800201c:	053f      	lsls	r7, r7, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800201e:	f02c 0ca0 	bic.w	ip, ip, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002022:	0d3f      	lsrs	r7, r7, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002024:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8002028:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800202c:	ea47 3704 	orr.w	r7, r7, r4, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002030:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002034:	b2bf      	uxth	r7, r7
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002036:	ea47 2c03 	orr.w	ip, r7, r3, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800203a:	b292      	uxth	r2, r2
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800203c:	fa1f f38c 	uxth.w	r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002040:	f042 0c10 	orr.w	ip, r2, #16

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002044:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002046:	f8a0 c020 	strh.w	ip, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 800204a:	8b03      	ldrh	r3, [r0, #24]
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800204c:	f8b1 c006 	ldrh.w	ip, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002050:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002054:	0411      	lsls	r1, r2, #16
 8002056:	0c0a      	lsrs	r2, r1, #16
 8002058:	8302      	strh	r2, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800205a:	8b03      	ldrh	r3, [r0, #24]
 800205c:	b299      	uxth	r1, r3
 800205e:	ea41 220c 	orr.w	r2, r1, ip, lsl #8
 8002062:	b293      	uxth	r3, r2
 8002064:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002066:	8c01      	ldrh	r1, [r0, #32]
 8002068:	f021 0201 	bic.w	r2, r1, #1
 800206c:	0413      	lsls	r3, r2, #16
 800206e:	0c19      	lsrs	r1, r3, #16
 8002070:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002072:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002074:	8c01      	ldrh	r1, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002076:	f022 03f3 	bic.w	r3, r2, #243	; 0xf3
 800207a:	041a      	lsls	r2, r3, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800207c:	f021 030a 	bic.w	r3, r1, #10
 8002080:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002082:	0c11      	lsrs	r1, r2, #16
 8002084:	ea41 1204 	orr.w	r2, r1, r4, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002088:	0c19      	lsrs	r1, r3, #16
 800208a:	f041 0301 	orr.w	r3, r1, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800208e:	b292      	uxth	r2, r2
 8002090:	ea42 0606 	orr.w	r6, r2, r6

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002094:	ea43 0505 	orr.w	r5, r3, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002098:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 800209a:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800209c:	8b01      	ldrh	r1, [r0, #24]
 800209e:	f021 020c 	bic.w	r2, r1, #12
 80020a2:	0413      	lsls	r3, r2, #16
 80020a4:	0c19      	lsrs	r1, r3, #16
 80020a6:	8301      	strh	r1, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80020a8:	8b02      	ldrh	r2, [r0, #24]
 80020aa:	b293      	uxth	r3, r2
 80020ac:	ea43 010c 	orr.w	r1, r3, ip
 80020b0:	8301      	strh	r1, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80020b2:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80020b6:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80020b8:	f8b0 8020 	ldrh.w	r8, [r0, #32]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80020bc:	890c      	ldrh	r4, [r1, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80020be:	f028 0701 	bic.w	r7, r8, #1
 80020c2:	ea4f 4c07 	mov.w	ip, r7, lsl #16
 80020c6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80020ca:	f8a0 8020 	strh.w	r8, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ce:	8b07      	ldrh	r7, [r0, #24]
  tmpccer = TIMx->CCER;
 80020d0:	f8b0 c020 	ldrh.w	ip, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80020d4:	46b8      	mov	r8, r7
 80020d6:	f027 07f3 	bic.w	r7, r7, #243	; 0xf3
 80020da:	043f      	lsls	r7, r7, #16
 80020dc:	0c3f      	lsrs	r7, r7, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020de:	f02c 0c0a 	bic.w	ip, ip, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80020e2:	ea47 1704 	orr.w	r7, r7, r4, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020e6:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80020ea:	f042 0201 	orr.w	r2, r2, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80020ee:	b2bf      	uxth	r7, r7

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020f0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80020f4:	ea4c 0c02 	orr.w	ip, ip, r2
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80020f8:	ea47 0303 	orr.w	r3, r7, r3
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020fc:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80020fe:	f8a0 c020 	strh.w	ip, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002102:	f8b0 c018 	ldrh.w	ip, [r0, #24]
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002106:	88c9      	ldrh	r1, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002108:	f02c 020c 	bic.w	r2, ip, #12
 800210c:	0413      	lsls	r3, r2, #16
 800210e:	0c1a      	lsrs	r2, r3, #16
 8002110:	8302      	strh	r2, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002112:	8b03      	ldrh	r3, [r0, #24]
 8002114:	b29a      	uxth	r2, r3
 8002116:	430a      	orrs	r2, r1
 8002118:	8302      	strh	r2, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800211a:	f8b0 c020 	ldrh.w	ip, [r0, #32]
 800211e:	f02c 0310 	bic.w	r3, ip, #16
 8002122:	041a      	lsls	r2, r3, #16
 8002124:	0c13      	lsrs	r3, r2, #16
 8002126:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002128:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800212a:	f8b0 c020 	ldrh.w	ip, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800212e:	f422 7340 	bic.w	r3, r2, #768	; 0x300
 8002132:	051a      	lsls	r2, r3, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002134:	f02c 03a0 	bic.w	r3, ip, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002138:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800213a:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800213c:	ea42 3c04 	orr.w	ip, r2, r4, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002140:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002142:	fa1f f28c 	uxth.w	r2, ip
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002146:	f043 0310 	orr.w	r3, r3, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800214a:	ea42 2606 	orr.w	r6, r2, r6, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800214e:	ea43 1505 	orr.w	r5, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002152:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 8002154:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002156:	f8b0 c018 	ldrh.w	ip, [r0, #24]
 800215a:	f42c 6240 	bic.w	r2, ip, #3072	; 0xc00
 800215e:	0413      	lsls	r3, r2, #16
 8002160:	0c1a      	lsrs	r2, r3, #16
 8002162:	8302      	strh	r2, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002164:	f8b0 c018 	ldrh.w	ip, [r0, #24]
 8002168:	fa1f f38c 	uxth.w	r3, ip
 800216c:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
 8002170:	b291      	uxth	r1, r2
 8002172:	8301      	strh	r1, [r0, #24]
 8002174:	e79d      	b.n	80020b2 <TIM_PWMIConfig+0xd6>
 8002176:	bf00      	nop

08002178 <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8002178:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 800217a:	4770      	bx	lr

0800217c <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800217c:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 800217e:	4770      	bx	lr

08002180 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002180:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8002182:	4770      	bx	lr

08002184 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8002184:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8002186:	4770      	bx	lr

08002188 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002188:	f8b0 c018 	ldrh.w	ip, [r0, #24]
 800218c:	f02c 030c 	bic.w	r3, ip, #12
 8002190:	041a      	lsls	r2, r3, #16
 8002192:	0c13      	lsrs	r3, r2, #16
 8002194:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002196:	f8b0 c018 	ldrh.w	ip, [r0, #24]
 800219a:	fa1f f28c 	uxth.w	r2, ip
 800219e:	ea41 0302 	orr.w	r3, r1, r2
 80021a2:	8303      	strh	r3, [r0, #24]
}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop

080021a8 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 80021a8:	f8b0 c018 	ldrh.w	ip, [r0, #24]
 80021ac:	f42c 6240 	bic.w	r2, ip, #3072	; 0xc00
 80021b0:	0413      	lsls	r3, r2, #16
 80021b2:	0c1a      	lsrs	r2, r3, #16
 80021b4:	8302      	strh	r2, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80021b6:	8b03      	ldrh	r3, [r0, #24]
 80021b8:	fa1f fc83 	uxth.w	ip, r3
 80021bc:	ea4c 2201 	orr.w	r2, ip, r1, lsl #8
 80021c0:	b293      	uxth	r3, r2
 80021c2:	8303      	strh	r3, [r0, #24]
}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop

080021c8 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 80021c8:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
 80021cc:	f02c 030c 	bic.w	r3, ip, #12
 80021d0:	041a      	lsls	r2, r3, #16
 80021d2:	0c13      	lsrs	r3, r2, #16
 80021d4:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80021d6:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
 80021da:	fa1f f28c 	uxth.w	r2, ip
 80021de:	ea41 0302 	orr.w	r3, r1, r2
 80021e2:	8383      	strh	r3, [r0, #28]
}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop

080021e8 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 80021e8:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
 80021ec:	f42c 6240 	bic.w	r2, ip, #3072	; 0xc00
 80021f0:	0413      	lsls	r3, r2, #16
 80021f2:	0c1a      	lsrs	r2, r3, #16
 80021f4:	8382      	strh	r2, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80021f6:	8b83      	ldrh	r3, [r0, #28]
 80021f8:	fa1f fc83 	uxth.w	ip, r3
 80021fc:	ea4c 2201 	orr.w	r2, ip, r1, lsl #8
 8002200:	b293      	uxth	r3, r2
 8002202:	8383      	strh	r3, [r0, #28]
}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop

08002208 <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002208:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 800220c:	880b      	ldrh	r3, [r1, #0]
 800220e:	888a      	ldrh	r2, [r1, #4]
 8002210:	ea4c 0303 	orr.w	r3, ip, r3
 8002214:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8002218:	4313      	orrs	r3, r2
 800221a:	890a      	ldrh	r2, [r1, #8]
 800221c:	ea43 030c 	orr.w	r3, r3, ip
 8002220:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8002224:	4313      	orrs	r3, r2
 8002226:	898a      	ldrh	r2, [r1, #12]
 8002228:	ea43 010c 	orr.w	r1, r3, ip
 800222c:	4311      	orrs	r1, r2
 800222e:	b28b      	uxth	r3, r1
 8002230:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop

08002238 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8002238:	2300      	movs	r3, #0
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800223a:	8183      	strh	r3, [r0, #12]
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 800223c:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 800223e:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8002240:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8002242:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8002244:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8002246:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop

0800224c <TIM_CtrlPWMOutputs>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800224c:	b931      	cbnz	r1, 800225c <TIM_CtrlPWMOutputs+0x10>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 800224e:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
 8002252:	0451      	lsls	r1, r2, #17
 8002254:	0c4b      	lsrs	r3, r1, #17
 8002256:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800225a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800225c:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
 8002260:	b291      	uxth	r1, r2
 8002262:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 8002266:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800226a:	4770      	bx	lr

0800226c <TIM_SelectCOM>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800226c:	b939      	cbnz	r1, 800227e <TIM_SelectCOM+0x12>
    TIMx->CR2 |= TIM_CR2_CCUS;
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800226e:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8002272:	f02c 0204 	bic.w	r2, ip, #4
 8002276:	0411      	lsls	r1, r2, #16
 8002278:	0c0b      	lsrs	r3, r1, #16
 800227a:	8083      	strh	r3, [r0, #4]
 800227c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800227e:	8882      	ldrh	r2, [r0, #4]
 8002280:	b291      	uxth	r1, r2
 8002282:	f041 0304 	orr.w	r3, r1, #4
 8002286:	8083      	strh	r3, [r0, #4]
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop

0800228c <TIM_CCPreloadControl>:
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800228c:	b939      	cbnz	r1, 800229e <TIM_CCPreloadControl+0x12>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 800228e:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8002292:	f02c 0201 	bic.w	r2, ip, #1
 8002296:	0411      	lsls	r1, r2, #16
 8002298:	0c0b      	lsrs	r3, r1, #16
 800229a:	8083      	strh	r3, [r0, #4]
 800229c:	4770      	bx	lr
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800229e:	8882      	ldrh	r2, [r0, #4]
 80022a0:	b291      	uxth	r1, r2
 80022a2:	f041 0301 	orr.w	r3, r1, #1
 80022a6:	8083      	strh	r3, [r0, #4]
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop

080022ac <TIM_ITConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80022ac:	b932      	cbnz	r2, 80022bc <TIM_ITConfig+0x10>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80022ae:	8983      	ldrh	r3, [r0, #12]
 80022b0:	fa1f fc83 	uxth.w	ip, r3
 80022b4:	ea2c 0101 	bic.w	r1, ip, r1
 80022b8:	8181      	strh	r1, [r0, #12]
 80022ba:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80022bc:	8982      	ldrh	r2, [r0, #12]
 80022be:	b293      	uxth	r3, r2
 80022c0:	4319      	orrs	r1, r3
 80022c2:	8181      	strh	r1, [r0, #12]
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop

080022c8 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 80022c8:	8281      	strh	r1, [r0, #20]
}
 80022ca:	4770      	bx	lr

080022cc <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 80022cc:	8a03      	ldrh	r3, [r0, #16]
 80022ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80022d0:	bf0c      	ite	eq
 80022d2:	2000      	moveq	r0, #0
 80022d4:	2001      	movne	r0, #1
 80022d6:	4770      	bx	lr

080022d8 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 80022d8:	43ca      	mvns	r2, r1
 80022da:	b291      	uxth	r1, r2
 80022dc:	8201      	strh	r1, [r0, #16]
}
 80022de:	4770      	bx	lr

080022e0 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80022e0:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 80022e2:	8982      	ldrh	r2, [r0, #12]
 80022e4:	4211      	tst	r1, r2
 80022e6:	bf0c      	ite	eq
 80022e8:	2000      	moveq	r0, #0
 80022ea:	2001      	movne	r0, #1
 80022ec:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80022ee:	bf0c      	ite	eq
 80022f0:	2000      	moveq	r0, #0
 80022f2:	f000 0001 	andne.w	r0, r0, #1
 80022f6:	4770      	bx	lr

080022f8 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80022f8:	43ca      	mvns	r2, r1
 80022fa:	b291      	uxth	r1, r2
 80022fc:	8201      	strh	r1, [r0, #16]
}
 80022fe:	4770      	bx	lr

08002300 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8002300:	430a      	orrs	r2, r1
 8002302:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
}
 8002306:	4770      	bx	lr

08002308 <TIM_DMACmd>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002308:	b932      	cbnz	r2, 8002318 <TIM_DMACmd+0x10>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 800230a:	8983      	ldrh	r3, [r0, #12]
 800230c:	fa1f fc83 	uxth.w	ip, r3
 8002310:	ea2c 0101 	bic.w	r1, ip, r1
 8002314:	8181      	strh	r1, [r0, #12]
 8002316:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8002318:	8982      	ldrh	r2, [r0, #12]
 800231a:	b293      	uxth	r3, r2
 800231c:	4319      	orrs	r1, r3
 800231e:	8181      	strh	r1, [r0, #12]
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop

08002324 <TIM_SelectCCDMA>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002324:	b939      	cbnz	r1, 8002336 <TIM_SelectCCDMA+0x12>
    TIMx->CR2 |= TIM_CR2_CCDS;
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8002326:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 800232a:	f02c 0208 	bic.w	r2, ip, #8
 800232e:	0411      	lsls	r1, r2, #16
 8002330:	0c0b      	lsrs	r3, r1, #16
 8002332:	8083      	strh	r3, [r0, #4]
 8002334:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8002336:	8882      	ldrh	r2, [r0, #4]
 8002338:	b291      	uxth	r1, r2
 800233a:	f041 0308 	orr.w	r3, r1, #8
 800233e:	8083      	strh	r3, [r0, #4]
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop

08002344 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8002344:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8002348:	f02c 0207 	bic.w	r2, ip, #7
 800234c:	0411      	lsls	r1, r2, #16
 800234e:	0c0b      	lsrs	r3, r1, #16
 8002350:	8103      	strh	r3, [r0, #8]
}
 8002352:	4770      	bx	lr

08002354 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002354:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002358:	f02c 0370 	bic.w	r3, ip, #112	; 0x70
 800235c:	041a      	lsls	r2, r3, #16
 800235e:	0c13      	lsrs	r3, r2, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002360:	ea41 0c03 	orr.w	ip, r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002364:	f8a0 c008 	strh.w	ip, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002368:	8902      	ldrh	r2, [r0, #8]
 800236a:	b291      	uxth	r1, r2
 800236c:	f041 0307 	orr.w	r3, r1, #7
 8002370:	8103      	strh	r3, [r0, #8]
}
 8002372:	4770      	bx	lr

08002374 <TIM_TIxExternalClockConfig>:
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002374:	2960      	cmp	r1, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8002376:	b410      	push	{r4}
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002378:	f8b0 c020 	ldrh.w	ip, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800237c:	d02e      	beq.n	80023dc <TIM_TIxExternalClockConfig+0x68>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800237e:	f02c 0c01 	bic.w	ip, ip, #1
 8002382:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8002386:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800238a:	f8a0 c020 	strh.w	ip, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800238e:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002390:	f8b0 c020 	ldrh.w	ip, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002394:	f024 04f3 	bic.w	r4, r4, #243	; 0xf3
 8002398:	0424      	lsls	r4, r4, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800239a:	f02c 0c0a 	bic.w	ip, ip, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800239e:	0c24      	lsrs	r4, r4, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80023a0:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80023a4:	f044 0401 	orr.w	r4, r4, #1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80023a8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80023ac:	ea44 1303 	orr.w	r3, r4, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80023b0:	f04c 0c01 	orr.w	ip, ip, #1
 80023b4:	ea4c 0202 	orr.w	r2, ip, r2
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80023b8:	b29b      	uxth	r3, r3
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023ba:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80023bc:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023be:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80023c2:	f02c 0270 	bic.w	r2, ip, #112	; 0x70
 80023c6:	0413      	lsls	r3, r2, #16
 80023c8:	0c1a      	lsrs	r2, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80023ca:	4311      	orrs	r1, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023cc:	8101      	strh	r1, [r0, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80023ce:	8903      	ldrh	r3, [r0, #8]
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	f042 0107 	orr.w	r1, r2, #7
 80023d6:	8101      	strh	r1, [r0, #8]
}
 80023d8:	bc10      	pop	{r4}
 80023da:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80023dc:	f02c 0c10 	bic.w	ip, ip, #16
 80023e0:	ea4f 440c 	mov.w	r4, ip, lsl #16
 80023e4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80023e8:	f8a0 c020 	strh.w	ip, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ec:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80023ee:	f8b0 c020 	ldrh.w	ip, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80023f2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80023f6:	f02c 0ca0 	bic.w	ip, ip, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80023fa:	0524      	lsls	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80023fc:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002400:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002402:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002406:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800240a:	f04c 0c10 	orr.w	ip, ip, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800240e:	ea44 3303 	orr.w	r3, r4, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002412:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002416:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002418:	b292      	uxth	r2, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800241a:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800241c:	8402      	strh	r2, [r0, #32]
 800241e:	e7ce      	b.n	80023be <TIM_TIxExternalClockConfig+0x4a>

08002420 <TIM_ETRClockMode1Config>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8002420:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002424:	fa5f fc8c 	uxtb.w	ip, ip
 8002428:	ea41 0c0c 	orr.w	ip, r1, ip
 800242c:	ea42 0c0c 	orr.w	ip, r2, ip
 8002430:	ea4c 2203 	orr.w	r2, ip, r3, lsl #8
 8002434:	b291      	uxth	r1, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002436:	8101      	strh	r1, [r0, #8]
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002438:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 800243c:	f02c 0377 	bic.w	r3, ip, #119	; 0x77
 8002440:	041a      	lsls	r2, r3, #16
 8002442:	0c11      	lsrs	r1, r2, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;
 8002444:	f041 0377 	orr.w	r3, r1, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002448:	8103      	strh	r3, [r0, #8]
}
 800244a:	4770      	bx	lr

0800244c <TIM_ETRClockMode2Config>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800244c:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002450:	fa5f fc8c 	uxtb.w	ip, ip
 8002454:	ea41 0c0c 	orr.w	ip, r1, ip
 8002458:	ea42 0c0c 	orr.w	ip, r2, ip
 800245c:	ea4c 2103 	orr.w	r1, ip, r3, lsl #8
 8002460:	fa1f fc81 	uxth.w	ip, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002464:	f8a0 c008 	strh.w	ip, [r0, #8]

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8002468:	8902      	ldrh	r2, [r0, #8]
 800246a:	b291      	uxth	r1, r2
 800246c:	f441 4380 	orr.w	r3, r1, #16384	; 0x4000
 8002470:	8103      	strh	r3, [r0, #8]
}
 8002472:	4770      	bx	lr

08002474 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002474:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002478:	f02c 0270 	bic.w	r2, ip, #112	; 0x70
 800247c:	0413      	lsls	r3, r2, #16
 800247e:	0c1a      	lsrs	r2, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002480:	ea41 0302 	orr.w	r3, r1, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002484:	8103      	strh	r3, [r0, #8]
}
 8002486:	4770      	bx	lr

08002488 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8002488:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 800248c:	f02c 0370 	bic.w	r3, ip, #112	; 0x70
 8002490:	041a      	lsls	r2, r3, #16
 8002492:	0c13      	lsrs	r3, r2, #16
 8002494:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8002496:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 800249a:	fa1f f28c 	uxth.w	r2, ip
 800249e:	ea41 0302 	orr.w	r3, r1, r2
 80024a2:	8083      	strh	r3, [r0, #4]
}
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop

080024a8 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 80024a8:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80024ac:	f02c 0307 	bic.w	r3, ip, #7
 80024b0:	041a      	lsls	r2, r3, #16
 80024b2:	0c13      	lsrs	r3, r2, #16
 80024b4:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80024b6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80024ba:	fa1f f28c 	uxth.w	r2, ip
 80024be:	ea41 0302 	orr.w	r3, r1, r2
 80024c2:	8103      	strh	r3, [r0, #8]
}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop

080024c8 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80024c8:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80024cc:	f02c 0380 	bic.w	r3, ip, #128	; 0x80
 80024d0:	041a      	lsls	r2, r3, #16
 80024d2:	0c13      	lsrs	r3, r2, #16
 80024d4:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80024d6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80024da:	fa1f f28c 	uxth.w	r2, ip
 80024de:	ea41 0302 	orr.w	r3, r1, r2
 80024e2:	8103      	strh	r3, [r0, #8]
}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop

080024e8 <TIM_ETRConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80024e8:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80024ec:	fa5f fc8c 	uxtb.w	ip, ip
 80024f0:	ea41 0c0c 	orr.w	ip, r1, ip
 80024f4:	ea42 0c0c 	orr.w	ip, r2, ip
 80024f8:	ea4c 2103 	orr.w	r1, ip, r3, lsl #8
 80024fc:	fa1f fc81 	uxth.w	ip, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002500:	f8a0 c008 	strh.w	ip, [r0, #8]
}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop

08002508 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8002508:	b430      	push	{r4, r5}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800250a:	8904      	ldrh	r4, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800250c:	f8b0 c018 	ldrh.w	ip, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002510:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002512:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002516:	f025 0522 	bic.w	r5, r5, #34	; 0x22
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800251a:	f02c 0c03 	bic.w	ip, ip, #3
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800251e:	042d      	lsls	r5, r5, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002520:	f024 0407 	bic.w	r4, r4, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002524:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002528:	0c2d      	lsrs	r5, r5, #16
 800252a:	ea42 0505 	orr.w	r5, r2, r5
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800252e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002532:	0424      	lsls	r4, r4, #16
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002534:	ea45 1503 	orr.w	r5, r5, r3, lsl #4

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002538:	0c24      	lsrs	r4, r4, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800253a:	f44c 7280 	orr.w	r2, ip, #256	; 0x100
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 800253e:	4321      	orrs	r1, r4

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002540:	f042 0c01 	orr.w	ip, r2, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002544:	b2ad      	uxth	r5, r5

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002546:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002548:	f8a0 c018 	strh.w	ip, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800254c:	8405      	strh	r5, [r0, #32]
}
 800254e:	bc30      	pop	{r4, r5}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop

08002554 <TIM_SelectHallSensor>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002554:	b939      	cbnz	r1, 8002566 <TIM_SelectHallSensor+0x12>
    TIMx->CR2 |= TIM_CR2_TI1S;
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8002556:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 800255a:	f02c 0280 	bic.w	r2, ip, #128	; 0x80
 800255e:	0411      	lsls	r1, r2, #16
 8002560:	0c0b      	lsrs	r3, r1, #16
 8002562:	8083      	strh	r3, [r0, #4]
 8002564:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002566:	8882      	ldrh	r2, [r0, #4]
 8002568:	b291      	uxth	r1, r2
 800256a:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 800256e:	8083      	strh	r3, [r0, #4]
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop

08002574 <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8002574:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop

0800257c <TIM_DeInit>:
void TIM_DeInit(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800257c:	f240 0300 	movw	r3, #0
 8002580:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002584:	4298      	cmp	r0, r3
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8002586:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8002588:	d05b      	beq.n	8002642 <TIM_DeInit+0xc6>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 800258a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800258e:	d062      	beq.n	8002656 <TIM_DeInit+0xda>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 8002590:	f240 4100 	movw	r1, #1024	; 0x400
 8002594:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8002598:	4288      	cmp	r0, r1
 800259a:	d066      	beq.n	800266a <TIM_DeInit+0xee>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 800259c:	f640 0200 	movw	r2, #2048	; 0x800
 80025a0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80025a4:	4290      	cmp	r0, r2
 80025a6:	d06a      	beq.n	800267e <TIM_DeInit+0x102>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 80025a8:	f640 4c00 	movw	ip, #3072	; 0xc00
 80025ac:	f2c4 0c00 	movt	ip, #16384	; 0x4000
 80025b0:	4560      	cmp	r0, ip
 80025b2:	d06e      	beq.n	8002692 <TIM_DeInit+0x116>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 80025b4:	f241 0300 	movw	r3, #4096	; 0x1000
 80025b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80025bc:	4298      	cmp	r0, r3
 80025be:	d072      	beq.n	80026a6 <TIM_DeInit+0x12a>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 80025c0:	f241 4100 	movw	r1, #5120	; 0x1400
 80025c4:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80025c8:	4288      	cmp	r0, r1
 80025ca:	d076      	beq.n	80026ba <TIM_DeInit+0x13e>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 80025cc:	f240 4200 	movw	r2, #1024	; 0x400
 80025d0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80025d4:	4290      	cmp	r0, r2
 80025d6:	d07a      	beq.n	80026ce <TIM_DeInit+0x152>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 80025d8:	f244 0c00 	movw	ip, #16384	; 0x4000
 80025dc:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 80025e0:	4560      	cmp	r0, ip
 80025e2:	d07e      	beq.n	80026e2 <TIM_DeInit+0x166>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 80025e4:	f244 4300 	movw	r3, #17408	; 0x4400
 80025e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80025ec:	4298      	cmp	r0, r3
 80025ee:	f000 8084 	beq.w	80026fa <TIM_DeInit+0x17e>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 80025f2:	f644 0100 	movw	r1, #18432	; 0x4800
 80025f6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80025fa:	4288      	cmp	r0, r1
 80025fc:	f000 8089 	beq.w	8002712 <TIM_DeInit+0x196>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 8002600:	f641 0200 	movw	r2, #6144	; 0x1800
 8002604:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002608:	4290      	cmp	r0, r2
 800260a:	f000 808e 	beq.w	800272a <TIM_DeInit+0x1ae>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 800260e:	f641 4c00 	movw	ip, #7168	; 0x1c00
 8002612:	f2c4 0c00 	movt	ip, #16384	; 0x4000
 8002616:	4560      	cmp	r0, ip
 8002618:	f000 8091 	beq.w	800273e <TIM_DeInit+0x1c2>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 800261c:	f242 0300 	movw	r3, #8192	; 0x2000
 8002620:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002624:	4298      	cmp	r0, r3
 8002626:	d000      	beq.n	800262a <TIM_DeInit+0xae>
 8002628:	bd10      	pop	{r4, pc}
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800262a:	2101      	movs	r1, #1
 800262c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002630:	f7fe ff6e 	bl	8001510 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8002634:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002638:	2100      	movs	r1, #0
    }   
  }
}
 800263a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800263e:	f7fe bf67 	b.w	8001510 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002642:	2001      	movs	r0, #1
 8002644:	4601      	mov	r1, r0
 8002646:	f7fe ff75 	bl	8001534 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800264a:	2001      	movs	r0, #1
 800264c:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800264e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8002652:	f7fe bf6f 	b.w	8001534 <RCC_APB2PeriphResetCmd>
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002656:	2001      	movs	r0, #1
 8002658:	4601      	mov	r1, r0
 800265a:	f7fe ff59 	bl	8001510 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800265e:	2001      	movs	r0, #1
 8002660:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8002666:	f7fe bf53 	b.w	8001510 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800266a:	2002      	movs	r0, #2
 800266c:	2101      	movs	r1, #1
 800266e:	f7fe ff4f 	bl	8001510 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8002672:	2002      	movs	r0, #2
 8002674:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800267a:	f7fe bf49 	b.w	8001510 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800267e:	2004      	movs	r0, #4
 8002680:	2101      	movs	r1, #1
 8002682:	f7fe ff45 	bl	8001510 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8002686:	2004      	movs	r0, #4
 8002688:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800268a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800268e:	f7fe bf3f 	b.w	8001510 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8002692:	2008      	movs	r0, #8
 8002694:	2101      	movs	r1, #1
 8002696:	f7fe ff3b 	bl	8001510 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800269a:	2008      	movs	r0, #8
 800269c:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800269e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80026a2:	f7fe bf35 	b.w	8001510 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80026a6:	2010      	movs	r0, #16
 80026a8:	2101      	movs	r1, #1
 80026aa:	f7fe ff31 	bl	8001510 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80026ae:	2010      	movs	r0, #16
 80026b0:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80026b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80026b6:	f7fe bf2b 	b.w	8001510 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80026ba:	2020      	movs	r0, #32
 80026bc:	2101      	movs	r1, #1
 80026be:	f7fe ff27 	bl	8001510 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80026c2:	2020      	movs	r0, #32
 80026c4:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80026c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80026ca:	f7fe bf21 	b.w	8001510 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80026ce:	2002      	movs	r0, #2
 80026d0:	2101      	movs	r1, #1
 80026d2:	f7fe ff2f 	bl	8001534 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80026d6:	2002      	movs	r0, #2
 80026d8:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80026da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80026de:	f7fe bf29 	b.w	8001534 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80026e2:	2101      	movs	r1, #1
 80026e4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80026e8:	f7fe ff24 	bl	8001534 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80026ec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80026f0:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80026f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80026f6:	f7fe bf1d 	b.w	8001534 <RCC_APB2PeriphResetCmd>
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 80026fa:	2101      	movs	r1, #1
 80026fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002700:	f7fe ff18 	bl	8001534 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8002704:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002708:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800270a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800270e:	f7fe bf11 	b.w	8001534 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8002712:	2101      	movs	r1, #1
 8002714:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002718:	f7fe ff0c 	bl	8001534 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800271c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002720:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8002726:	f7fe bf05 	b.w	8001534 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800272a:	2040      	movs	r0, #64	; 0x40
 800272c:	2101      	movs	r1, #1
 800272e:	f7fe feef 	bl	8001510 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8002732:	2040      	movs	r0, #64	; 0x40
 8002734:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800273a:	f7fe bee9 	b.w	8001510 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 800273e:	2080      	movs	r0, #128	; 0x80
 8002740:	2101      	movs	r1, #1
 8002742:	f7fe fee5 	bl	8001510 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8002746:	2080      	movs	r0, #128	; 0x80
 8002748:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800274a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800274e:	f7fe bedf 	b.w	8001510 <RCC_APB1PeriphResetCmd>
 8002752:	bf00      	nop

08002754 <USART_StructInit>:
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002754:	2100      	movs	r1, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002756:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800275a:	f04f 030c 	mov.w	r3, #12
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800275e:	8181      	strh	r1, [r0, #12]
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002760:	6002      	str	r2, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002762:	8081      	strh	r1, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8002764:	80c1      	strh	r1, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8002766:	8101      	strh	r1, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002768:	8143      	strh	r3, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
}
 800276a:	4770      	bx	lr

0800276c <USART_ClockInit>:
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800276c:	880a      	ldrh	r2, [r1, #0]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800276e:	b410      	push	{r4}
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002770:	884c      	ldrh	r4, [r1, #2]
 8002772:	f8b1 c004 	ldrh.w	ip, [r1, #4]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002776:	8a03      	ldrh	r3, [r0, #16]
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002778:	88c9      	ldrh	r1, [r1, #6]
 800277a:	ea44 0202 	orr.w	r2, r4, r2
 800277e:	ea42 020c 	orr.w	r2, r2, ip
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8002782:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002786:	430a      	orrs	r2, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8002788:	041b      	lsls	r3, r3, #16
 800278a:	0c19      	lsrs	r1, r3, #16
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800278c:	b292      	uxth	r2, r2
 800278e:	ea42 0301 	orr.w	r3, r2, r1
 8002792:	8203      	strh	r3, [r0, #16]
}
 8002794:	bc10      	pop	{r4}
 8002796:	4770      	bx	lr

08002798 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8002798:	2300      	movs	r3, #0
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800279a:	80c3      	strh	r3, [r0, #6]
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800279c:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 800279e:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80027a0:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
}
 80027a2:	4770      	bx	lr

080027a4 <USART_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80027a4:	b939      	cbnz	r1, 80027b6 <USART_Cmd+0x12>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80027a6:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 80027aa:	f42c 5200 	bic.w	r2, ip, #8192	; 0x2000
 80027ae:	0411      	lsls	r1, r2, #16
 80027b0:	0c0b      	lsrs	r3, r1, #16
 80027b2:	8183      	strh	r3, [r0, #12]
 80027b4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80027b6:	8982      	ldrh	r2, [r0, #12]
 80027b8:	b291      	uxth	r1, r2
 80027ba:	f441 5300 	orr.w	r3, r1, #8192	; 0x2000
 80027be:	8183      	strh	r3, [r0, #12]
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop

080027c4 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 80027c4:	8b02      	ldrh	r2, [r0, #24]
 80027c6:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 80027ca:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80027cc:	f8b0 c018 	ldrh.w	ip, [r0, #24]
 80027d0:	fa1f f28c 	uxth.w	r2, ip
 80027d4:	ea41 0302 	orr.w	r3, r1, r2
 80027d8:	8303      	strh	r3, [r0, #24]
}
 80027da:	4770      	bx	lr

080027dc <USART_OverSampling8Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80027dc:	b921      	cbnz	r1, 80027e8 <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 80027de:	8982      	ldrh	r2, [r0, #12]
 80027e0:	0451      	lsls	r1, r2, #17
 80027e2:	0c4b      	lsrs	r3, r1, #17
 80027e4:	8183      	strh	r3, [r0, #12]
 80027e6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80027e8:	8982      	ldrh	r2, [r0, #12]
 80027ea:	b291      	uxth	r1, r2
 80027ec:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 80027f0:	8183      	strh	r3, [r0, #12]
 80027f2:	4770      	bx	lr

080027f4 <USART_OneBitMethodCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80027f4:	b939      	cbnz	r1, 8002806 <USART_OneBitMethodCmd+0x12>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 80027f6:	f8b0 c014 	ldrh.w	ip, [r0, #20]
 80027fa:	f42c 6200 	bic.w	r2, ip, #2048	; 0x800
 80027fe:	0411      	lsls	r1, r2, #16
 8002800:	0c0b      	lsrs	r3, r1, #16
 8002802:	8283      	strh	r3, [r0, #20]
 8002804:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002806:	8a82      	ldrh	r2, [r0, #20]
 8002808:	b291      	uxth	r1, r2
 800280a:	f441 6300 	orr.w	r3, r1, #2048	; 0x800
 800280e:	8283      	strh	r3, [r0, #20]
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop

08002814 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002814:	05ca      	lsls	r2, r1, #23
 8002816:	0dd1      	lsrs	r1, r2, #23
 8002818:	8081      	strh	r1, [r0, #4]
}
 800281a:	4770      	bx	lr

0800281c <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800281c:	8881      	ldrh	r1, [r0, #4]
}
 800281e:	05c8      	lsls	r0, r1, #23
 8002820:	0dc0      	lsrs	r0, r0, #23
 8002822:	4770      	bx	lr

08002824 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8002824:	f8b0 c010 	ldrh.w	ip, [r0, #16]
 8002828:	f02c 030f 	bic.w	r3, ip, #15
 800282c:	041a      	lsls	r2, r3, #16
 800282e:	0c13      	lsrs	r3, r2, #16
 8002830:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8002832:	f8b0 c010 	ldrh.w	ip, [r0, #16]
 8002836:	fa1f f28c 	uxth.w	r2, ip
 800283a:	ea41 0302 	orr.w	r3, r1, r2
 800283e:	8203      	strh	r3, [r0, #16]
}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop

08002844 <USART_ReceiverWakeUpCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8002844:	b939      	cbnz	r1, 8002856 <USART_ReceiverWakeUpCmd+0x12>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8002846:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 800284a:	f02c 0202 	bic.w	r2, ip, #2
 800284e:	0411      	lsls	r1, r2, #16
 8002850:	0c0b      	lsrs	r3, r1, #16
 8002852:	8183      	strh	r3, [r0, #12]
 8002854:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002856:	8982      	ldrh	r2, [r0, #12]
 8002858:	b291      	uxth	r1, r2
 800285a:	f041 0302 	orr.w	r3, r1, #2
 800285e:	8183      	strh	r3, [r0, #12]
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop

08002864 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8002864:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8002868:	f42c 6300 	bic.w	r3, ip, #2048	; 0x800
 800286c:	041a      	lsls	r2, r3, #16
 800286e:	0c13      	lsrs	r3, r2, #16
 8002870:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8002872:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8002876:	fa1f f28c 	uxth.w	r2, ip
 800287a:	ea41 0302 	orr.w	r3, r1, r2
 800287e:	8183      	strh	r3, [r0, #12]
}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop

08002884 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8002884:	f8b0 c010 	ldrh.w	ip, [r0, #16]
 8002888:	f02c 0320 	bic.w	r3, ip, #32
 800288c:	041a      	lsls	r2, r3, #16
 800288e:	0c13      	lsrs	r3, r2, #16
 8002890:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8002892:	f8b0 c010 	ldrh.w	ip, [r0, #16]
 8002896:	fa1f f28c 	uxth.w	r2, ip
 800289a:	ea41 0302 	orr.w	r3, r1, r2
 800289e:	8203      	strh	r3, [r0, #16]
}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop

080028a4 <USART_LINCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80028a4:	b939      	cbnz	r1, 80028b6 <USART_LINCmd+0x12>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 80028a6:	f8b0 c010 	ldrh.w	ip, [r0, #16]
 80028aa:	f42c 4280 	bic.w	r2, ip, #16384	; 0x4000
 80028ae:	0411      	lsls	r1, r2, #16
 80028b0:	0c0b      	lsrs	r3, r1, #16
 80028b2:	8203      	strh	r3, [r0, #16]
 80028b4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80028b6:	8a02      	ldrh	r2, [r0, #16]
 80028b8:	b291      	uxth	r1, r2
 80028ba:	f441 4380 	orr.w	r3, r1, #16384	; 0x4000
 80028be:	8203      	strh	r3, [r0, #16]
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop

080028c4 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 80028c4:	8982      	ldrh	r2, [r0, #12]
 80028c6:	b291      	uxth	r1, r2
 80028c8:	f041 0301 	orr.w	r3, r1, #1
 80028cc:	8183      	strh	r3, [r0, #12]
}
 80028ce:	4770      	bx	lr

080028d0 <USART_HalfDuplexCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80028d0:	b939      	cbnz	r1, 80028e2 <USART_HalfDuplexCmd+0x12>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 80028d2:	f8b0 c014 	ldrh.w	ip, [r0, #20]
 80028d6:	f02c 0208 	bic.w	r2, ip, #8
 80028da:	0411      	lsls	r1, r2, #16
 80028dc:	0c0b      	lsrs	r3, r1, #16
 80028de:	8283      	strh	r3, [r0, #20]
 80028e0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80028e2:	8a82      	ldrh	r2, [r0, #20]
 80028e4:	b291      	uxth	r1, r2
 80028e6:	f041 0308 	orr.w	r3, r1, #8
 80028ea:	8283      	strh	r3, [r0, #20]
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop

080028f0 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 80028f0:	8b02      	ldrh	r2, [r0, #24]
 80028f2:	b2d3      	uxtb	r3, r2
 80028f4:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 80028f6:	f8b0 c018 	ldrh.w	ip, [r0, #24]
 80028fa:	fa1f f28c 	uxth.w	r2, ip
 80028fe:	ea42 2301 	orr.w	r3, r2, r1, lsl #8
 8002902:	8303      	strh	r3, [r0, #24]
}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop

08002908 <USART_SmartCardCmd>:
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002908:	b939      	cbnz	r1, 800291a <USART_SmartCardCmd+0x12>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 800290a:	f8b0 c014 	ldrh.w	ip, [r0, #20]
 800290e:	f02c 0220 	bic.w	r2, ip, #32
 8002912:	0411      	lsls	r1, r2, #16
 8002914:	0c0b      	lsrs	r3, r1, #16
 8002916:	8283      	strh	r3, [r0, #20]
 8002918:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800291a:	8a82      	ldrh	r2, [r0, #20]
 800291c:	b291      	uxth	r1, r2
 800291e:	f041 0320 	orr.w	r3, r1, #32
 8002922:	8283      	strh	r3, [r0, #20]
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop

08002928 <USART_SmartCardNACKCmd>:
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002928:	b939      	cbnz	r1, 800293a <USART_SmartCardNACKCmd+0x12>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 800292a:	f8b0 c014 	ldrh.w	ip, [r0, #20]
 800292e:	f02c 0210 	bic.w	r2, ip, #16
 8002932:	0411      	lsls	r1, r2, #16
 8002934:	0c0b      	lsrs	r3, r1, #16
 8002936:	8283      	strh	r3, [r0, #20]
 8002938:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800293a:	8a82      	ldrh	r2, [r0, #20]
 800293c:	b291      	uxth	r1, r2
 800293e:	f041 0310 	orr.w	r3, r1, #16
 8002942:	8283      	strh	r3, [r0, #20]
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop

08002948 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8002948:	f8b0 c014 	ldrh.w	ip, [r0, #20]
 800294c:	f02c 0304 	bic.w	r3, ip, #4
 8002950:	041a      	lsls	r2, r3, #16
 8002952:	0c13      	lsrs	r3, r2, #16
 8002954:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8002956:	f8b0 c014 	ldrh.w	ip, [r0, #20]
 800295a:	fa1f f28c 	uxth.w	r2, ip
 800295e:	ea41 0302 	orr.w	r3, r1, r2
 8002962:	8283      	strh	r3, [r0, #20]
}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop

08002968 <USART_IrDACmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8002968:	b939      	cbnz	r1, 800297a <USART_IrDACmd+0x12>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 800296a:	f8b0 c014 	ldrh.w	ip, [r0, #20]
 800296e:	f02c 0202 	bic.w	r2, ip, #2
 8002972:	0411      	lsls	r1, r2, #16
 8002974:	0c0b      	lsrs	r3, r1, #16
 8002976:	8283      	strh	r3, [r0, #20]
 8002978:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800297a:	8a82      	ldrh	r2, [r0, #20]
 800297c:	b291      	uxth	r1, r2
 800297e:	f041 0302 	orr.w	r3, r1, #2
 8002982:	8283      	strh	r3, [r0, #20]
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop

08002988 <USART_DMACmd>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8002988:	b932      	cbnz	r2, 8002998 <USART_DMACmd+0x10>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800298a:	8a83      	ldrh	r3, [r0, #20]
 800298c:	fa1f fc83 	uxth.w	ip, r3
 8002990:	ea2c 0101 	bic.w	r1, ip, r1
 8002994:	8281      	strh	r1, [r0, #20]
 8002996:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002998:	8a82      	ldrh	r2, [r0, #20]
 800299a:	b293      	uxth	r3, r2
 800299c:	4319      	orrs	r1, r3
 800299e:	8281      	strh	r1, [r0, #20]
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop

080029a4 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80029a4:	f001 031f 	and.w	r3, r1, #31
 80029a8:	f04f 0c01 	mov.w	ip, #1
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80029ac:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80029b0:	4561      	cmp	r1, ip
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80029b2:	fa0c f303 	lsl.w	r3, ip, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80029b6:	d00d      	beq.n	80029d4 <USART_ITConfig+0x30>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80029b8:	2902      	cmp	r1, #2
 80029ba:	d00d      	beq.n	80029d8 <USART_ITConfig+0x34>
  {
    usartxbase += 0x10;
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80029bc:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 80029be:	b922      	cbnz	r2, 80029ca <USART_ITConfig+0x26>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80029c0:	6801      	ldr	r1, [r0, #0]
 80029c2:	ea21 0303 	bic.w	r3, r1, r3
 80029c6:	6003      	str	r3, [r0, #0]
 80029c8:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80029ca:	6802      	ldr	r2, [r0, #0]
 80029cc:	ea42 0103 	orr.w	r1, r2, r3
 80029d0:	6001      	str	r1, [r0, #0]
 80029d2:	4770      	bx	lr
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 80029d4:	300c      	adds	r0, #12
 80029d6:	e7f2      	b.n	80029be <USART_ITConfig+0x1a>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x10;
 80029d8:	3010      	adds	r0, #16
 80029da:	e7f0      	b.n	80029be <USART_ITConfig+0x1a>

080029dc <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80029dc:	8803      	ldrh	r3, [r0, #0]
 80029de:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80029e0:	bf0c      	ite	eq
 80029e2:	2000      	moveq	r0, #0
 80029e4:	2001      	movne	r0, #1
 80029e6:	4770      	bx	lr

080029e8 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 80029e8:	43ca      	mvns	r2, r1
 80029ea:	b291      	uxth	r1, r2
 80029ec:	8001      	strh	r1, [r0, #0]
}
 80029ee:	4770      	bx	lr

080029f0 <USART_GetITStatus>:
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80029f0:	f04f 0c01 	mov.w	ip, #1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80029f4:	f3c1 1342 	ubfx	r3, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80029f8:	f001 021f 	and.w	r2, r1, #31
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80029fc:	4563      	cmp	r3, ip
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80029fe:	fa0c f202 	lsl.w	r2, ip, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002a02:	d019      	beq.n	8002a38 <USART_GetITStatus+0x48>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002a04:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 8002a06:	bf0c      	ite	eq
 8002a08:	f8b0 c010 	ldrheq.w	ip, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002a0c:	f8b0 c014 	ldrhne.w	ip, [r0, #20]
 8002a10:	fa1f fc8c 	uxth.w	ip, ip
 8002a14:	ea02 020c 	and.w	r2, r2, ip
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	0a09      	lsrs	r1, r1, #8
 8002a1c:	fa13 f101 	lsls.w	r1, r3, r1
  bitpos &= USARTx->SR;
 8002a20:	8803      	ldrh	r3, [r0, #0]
 8002a22:	b298      	uxth	r0, r3
 8002a24:	4201      	tst	r1, r0
 8002a26:	bf0c      	ite	eq
 8002a28:	2100      	moveq	r1, #0
 8002a2a:	2101      	movne	r1, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 8002a2c:	2a00      	cmp	r2, #0
 8002a2e:	bf0c      	ite	eq
 8002a30:	2000      	moveq	r0, #0
 8002a32:	f001 0001 	andne.w	r0, r1, #1
 8002a36:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 8002a38:	8983      	ldrh	r3, [r0, #12]
 8002a3a:	fa1f fc83 	uxth.w	ip, r3
 8002a3e:	ea02 020c 	and.w	r2, r2, ip
 8002a42:	e7e9      	b.n	8002a18 <USART_GetITStatus+0x28>

08002a44 <USART_ClearITPendingBit>:
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
  USARTx->SR = (uint16_t)~itmask;
 8002a44:	0a09      	lsrs	r1, r1, #8
 8002a46:	2301      	movs	r3, #1
 8002a48:	fa13 f201 	lsls.w	r2, r3, r1
 8002a4c:	43d1      	mvns	r1, r2
 8002a4e:	b28b      	uxth	r3, r1
 8002a50:	8003      	strh	r3, [r0, #0]
}
 8002a52:	4770      	bx	lr

08002a54 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002a54:	f8b0 c010 	ldrh.w	ip, [r0, #16]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002a58:	b530      	push	{r4, r5, lr}

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002a5a:	f42c 5240 	bic.w	r2, ip, #12288	; 0x3000
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002a5e:	4604      	mov	r4, r0
 8002a60:	460d      	mov	r5, r1

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002a62:	0410      	lsls	r0, r2, #16
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002a64:	88c9      	ldrh	r1, [r1, #6]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002a66:	0c03      	lsrs	r3, r0, #16
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	8223      	strh	r3, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002a6c:	89a2      	ldrh	r2, [r4, #12]
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002a6e:	8928      	ldrh	r0, [r5, #8]
 8002a70:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8002a74:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002a76:	f422 5cb0 	bic.w	ip, r2, #5632	; 0x1600
 8002a7a:	f02c 030c 	bic.w	r3, ip, #12
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002a7e:	ea40 020e 	orr.w	r2, r0, lr
 8002a82:	430a      	orrs	r2, r1

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002a84:	0419      	lsls	r1, r3, #16
 8002a86:	0c0b      	lsrs	r3, r1, #16
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002a88:	b290      	uxth	r0, r2
 8002a8a:	ea40 0e03 	orr.w	lr, r0, r3
 8002a8e:	f8a4 e00c 	strh.w	lr, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002a92:	f8b4 c014 	ldrh.w	ip, [r4, #20]
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002a96:	89a8      	ldrh	r0, [r5, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8002a98:	f42c 7140 	bic.w	r1, ip, #768	; 0x300
 8002a9c:	040a      	lsls	r2, r1, #16
 8002a9e:	0c13      	lsrs	r3, r2, #16
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002aa0:	4303      	orrs	r3, r0
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002aa2:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002aa4:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002aa6:	4668      	mov	r0, sp
 8002aa8:	f7fe fc16 	bl	80012d8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8002aac:	f241 0100 	movw	r1, #4096	; 0x1000
 8002ab0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8002ab4:	f241 4000 	movw	r0, #5120	; 0x1400
 8002ab8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002abc:	428c      	cmp	r4, r1
 8002abe:	bf14      	ite	ne
 8002ac0:	2200      	movne	r2, #0
 8002ac2:	2201      	moveq	r2, #1
 8002ac4:	4284      	cmp	r4, r0
 8002ac6:	bf14      	ite	ne
 8002ac8:	4613      	movne	r3, r2
 8002aca:	f042 0301 	orreq.w	r3, r2, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d02a      	beq.n	8002b28 <USART_Init+0xd4>
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002ad2:	89a0      	ldrh	r0, [r4, #12]
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002ad4:	9b03      	ldr	r3, [sp, #12]
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002ad6:	b201      	sxth	r1, r0
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002ad8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002adc:	2900      	cmp	r1, #0
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002ade:	682a      	ldr	r2, [r5, #0]
 8002ae0:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002ae4:	db2a      	blt.n	8002b3c <USART_Init+0xe8>
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002ae6:	0090      	lsls	r0, r2, #2
 8002ae8:	fbb3 f1f0 	udiv	r1, r3, r0
  }
  tmpreg = (integerdivider / 100) << 4;
 8002aec:	f248 531f 	movw	r3, #34079	; 0x851f
 8002af0:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8002af4:	fba3 0201 	umull	r0, r2, r3, r1

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002af8:	89a0      	ldrh	r0, [r4, #12]
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8002afa:	0952      	lsrs	r2, r2, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002afc:	fa0f fe80 	sxth.w	lr, r0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002b00:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8002b04:	fb02 111c 	mls	r1, r2, ip, r1
 8002b08:	0112      	lsls	r2, r2, #4

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002b0a:	f1be 0f00 	cmp.w	lr, #0
 8002b0e:	db19      	blt.n	8002b44 <USART_Init+0xf0>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002b10:	0109      	lsls	r1, r1, #4
 8002b12:	3132      	adds	r1, #50	; 0x32
 8002b14:	fba3 0301 	umull	r0, r3, r3, r1
 8002b18:	f3c3 1c43 	ubfx	ip, r3, #5, #4
 8002b1c:	ea4c 0202 	orr.w	r2, ip, r2
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8002b20:	b290      	uxth	r0, r2
 8002b22:	8120      	strh	r0, [r4, #8]
}
 8002b24:	b005      	add	sp, #20
 8002b26:	bd30      	pop	{r4, r5, pc}
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002b28:	89a0      	ldrh	r0, [r4, #12]
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002b2a:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002b2c:	b201      	sxth	r1, r0
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002b2e:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002b32:	2900      	cmp	r1, #0
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002b34:	682a      	ldr	r2, [r5, #0]
 8002b36:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002b3a:	dad4      	bge.n	8002ae6 <USART_Init+0x92>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002b3c:	0052      	lsls	r2, r2, #1
 8002b3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b42:	e7d3      	b.n	8002aec <USART_Init+0x98>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002b44:	00c9      	lsls	r1, r1, #3
 8002b46:	3132      	adds	r1, #50	; 0x32
 8002b48:	fba3 0e01 	umull	r0, lr, r3, r1
 8002b4c:	f3ce 1342 	ubfx	r3, lr, #5, #3
 8002b50:	ea43 0202 	orr.w	r2, r3, r2
 8002b54:	e7e4      	b.n	8002b20 <USART_Init+0xcc>
 8002b56:	bf00      	nop

08002b58 <USART_DeInit>:
void USART_DeInit(USART_TypeDef* USARTx)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8002b58:	f241 0300 	movw	r3, #4096	; 0x1000
 8002b5c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002b60:	4298      	cmp	r0, r3
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8002b62:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8002b64:	d028      	beq.n	8002bb8 <USART_DeInit+0x60>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8002b66:	f244 4100 	movw	r1, #17408	; 0x4400
 8002b6a:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8002b6e:	4288      	cmp	r0, r1
 8002b70:	d02c      	beq.n	8002bcc <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 8002b72:	f644 0200 	movw	r2, #18432	; 0x4800
 8002b76:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002b7a:	4290      	cmp	r0, r2
 8002b7c:	d032      	beq.n	8002be4 <USART_DeInit+0x8c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 8002b7e:	f644 4c00 	movw	ip, #19456	; 0x4c00
 8002b82:	f2c4 0c00 	movt	ip, #16384	; 0x4000
 8002b86:	4560      	cmp	r0, ip
 8002b88:	d038      	beq.n	8002bfc <USART_DeInit+0xa4>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 8002b8a:	f245 0300 	movw	r3, #20480	; 0x5000
 8002b8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002b92:	4298      	cmp	r0, r3
 8002b94:	d03e      	beq.n	8002c14 <USART_DeInit+0xbc>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }     
  else
  {
    if (USARTx == USART6)
 8002b96:	f241 4100 	movw	r1, #5120	; 0x1400
 8002b9a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8002b9e:	4288      	cmp	r0, r1
 8002ba0:	d000      	beq.n	8002ba4 <USART_DeInit+0x4c>
 8002ba2:	bd10      	pop	{r4, pc}
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8002ba4:	2020      	movs	r0, #32
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	f7fe fcc4 	bl	8001534 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002bac:	2020      	movs	r0, #32
 8002bae:	2100      	movs	r1, #0
    }
  }
}
 8002bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002bb4:	f7fe bcbe 	b.w	8001534 <RCC_APB2PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002bb8:	2010      	movs	r0, #16
 8002bba:	2101      	movs	r1, #1
 8002bbc:	f7fe fcba 	bl	8001534 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002bc0:	2010      	movs	r0, #16
 8002bc2:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002bc8:	f7fe bcb4 	b.w	8001534 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002bcc:	2101      	movs	r1, #1
 8002bce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002bd2:	f7fe fc9d 	bl	8001510 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002bd6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002bda:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002be0:	f7fe bc96 	b.w	8001510 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8002be4:	2101      	movs	r1, #1
 8002be6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002bea:	f7fe fc91 	bl	8001510 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002bee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002bf2:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002bf8:	f7fe bc8a 	b.w	8001510 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002c02:	f7fe fc85 	bl	8001510 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8002c06:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002c0a:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8002c10:	f7fe bc7e 	b.w	8001510 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8002c14:	2101      	movs	r1, #1
 8002c16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002c1a:	f7fe fc79 	bl	8001510 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8002c1e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002c22:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8002c28:	f7fe bc72 	b.w	8001510 <RCC_APB1PeriphResetCmd>

08002c2c <delay_ms>:
  * @brief  wait millisecond
  * @param  wait_time : time to wait in millisecond
  * @retval None
  */
void delay_ms(uint16_t waittime)
{
 8002c2c:	b510      	push	{r4, lr}
 8002c2e:	4604      	mov	r4, r0
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);
 8002c30:	2001      	movs	r0, #1
 8002c32:	4601      	mov	r1, r0
 8002c34:	f7fe fc12 	bl	800145c <RCC_APB1PeriphClockCmd>

  /* Time base configuration */
  TIM_TimeBaseStructureMili.TIM_Period = ((waittime+1) * 2)-1;
 8002c38:	0064      	lsls	r4, r4, #1
 8002c3a:	f240 03c0 	movw	r3, #192	; 0xc0
 8002c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c42:	3401      	adds	r4, #1
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMili);
 8002c44:	4619      	mov	r1, r3
{
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);

  /* Time base configuration */
  TIM_TimeBaseStructureMili.TIM_Period = ((waittime+1) * 2)-1;
 8002c46:	605c      	str	r4, [r3, #4]
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMili);
 8002c48:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c4c:	f7fe fd2a 	bl	80016a4 <TIM_TimeBaseInit>

  TIM_SelectOnePulseMode(TIM_NUM, TIM_OPMode_Single);
 8002c50:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c54:	2108      	movs	r1, #8
 8002c56:	f7fe fde5 	bl	8001824 <TIM_SelectOnePulseMode>

  TIM_SetCounter(TIM_NUM,2);
 8002c5a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c5e:	2102      	movs	r1, #2
 8002c60:	f7fe fda6 	bl	80017b0 <TIM_SetCounter>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, ENABLE);
 8002c64:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c68:	2101      	movs	r1, #1
 8002c6a:	f7fe fdfb 	bl	8001864 <TIM_Cmd>

  while (TIM_GetCounter(TIM_NUM)){};
 8002c6e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c72:	f7fe fda1 	bl	80017b8 <TIM_GetCounter>
 8002c76:	4601      	mov	r1, r0
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	d1f8      	bne.n	8002c6e <delay_ms+0x42>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 8002c7c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
}
 8002c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TIM_Cmd(TIM_NUM, ENABLE);

  while (TIM_GetCounter(TIM_NUM)){};

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 8002c84:	f7fe bdee 	b.w	8001864 <TIM_Cmd>

08002c88 <delay_us>:
  * @brief  wait micro second
  * @param  wait_time : time to wait in micro second
  * @retval None
  */
void delay_us(uint16_t waittime)
{
 8002c88:	b510      	push	{r4, lr}
 8002c8a:	4604      	mov	r4, r0
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	4601      	mov	r1, r0
 8002c90:	f7fe fbe4 	bl	800145c <RCC_APB1PeriphClockCmd>

  /* Time base configuration */
  TIM_TimeBaseStructureMicro.TIM_Period = ((waittime+1) * 2)-1;
 8002c94:	0064      	lsls	r4, r4, #1
 8002c96:	f240 03c0 	movw	r3, #192	; 0xc0
 8002c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c9e:	3401      	adds	r4, #1
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMicro);
 8002ca0:	f103 010c 	add.w	r1, r3, #12
{
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);

  /* Time base configuration */
  TIM_TimeBaseStructureMicro.TIM_Period = ((waittime+1) * 2)-1;
 8002ca4:	611c      	str	r4, [r3, #16]
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMicro);
 8002ca6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002caa:	f7fe fcfb 	bl	80016a4 <TIM_TimeBaseInit>

  TIM_SelectOnePulseMode(TIM_NUM, TIM_OPMode_Single);
 8002cae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cb2:	2108      	movs	r1, #8
 8002cb4:	f7fe fdb6 	bl	8001824 <TIM_SelectOnePulseMode>

  TIM_SetCounter(TIM_NUM,2);
 8002cb8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cbc:	2102      	movs	r1, #2
 8002cbe:	f7fe fd77 	bl	80017b0 <TIM_SetCounter>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, ENABLE);
 8002cc2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	f7fe fdcc 	bl	8001864 <TIM_Cmd>

  while (TIM_GetCounter(TIM_NUM)){};
 8002ccc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cd0:	f7fe fd72 	bl	80017b8 <TIM_GetCounter>
 8002cd4:	4601      	mov	r1, r0
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	d1f8      	bne.n	8002ccc <delay_us+0x44>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 8002cda:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

}
 8002cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TIM_Cmd(TIM_NUM, ENABLE);

  while (TIM_GetCounter(TIM_NUM)){};

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 8002ce2:	f7fe bdbf 	b.w	8001864 <TIM_Cmd>
 8002ce6:	bf00      	nop

08002ce8 <main>:
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8002ce8:	f240 03dc 	movw	r3, #220	; 0xdc
 8002cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
#include "gpio.h"
//#include "delay.h"
#include "systick.h"
#include "usart.h"

int main(void) {
 8002cf0:	b570      	push	{r4, r5, r6, lr}
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8002cf8:	fbb2 f4fc 	udiv	r4, r2, ip
 8002cfc:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 8002d00:	f24e 0310 	movw	r3, #57360	; 0xe010
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002d04:	f64e 5500 	movw	r5, #60672	; 0xed00
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8002d08:	f2ce 0300 	movt	r3, #57344	; 0xe000
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 8002d0c:	2207      	movs	r2, #7
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8002d0e:	1e46      	subs	r6, r0, #1
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002d10:	f2ce 0500 	movt	r5, #57344	; 0xe000
 8002d14:	f06f 010f 	mvn.w	r1, #15
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002d18:	2400      	movs	r4, #0
	uint32_t intval = 16;
	char tmp[92];
	
	SysTick_Config(SystemCoreClock/1000);

	usart_begin(USART3, 19200);
 8002d1a:	f644 0000 	movw	r0, #18432	; 0x4800
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8002d1e:	605e      	str	r6, [r3, #4]
#include "gpio.h"
//#include "delay.h"
#include "systick.h"
#include "usart.h"

int main(void) {
 8002d20:	b098      	sub	sp, #96	; 0x60
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002d22:	f885 1023 	strb.w	r1, [r5, #35]	; 0x23
	uint32_t intval = 16;
	char tmp[92];
	
	SysTick_Config(SystemCoreClock/1000);

	usart_begin(USART3, 19200);
 8002d26:	f2c4 0000 	movt	r0, #16384	; 0x4000
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002d2a:	609c      	str	r4, [r3, #8]
 8002d2c:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f7fd fc5b 	bl	80005ec <usart_begin>
	usart_print(USART3, "Happy are those who know they are spiritually poor; \n");
 8002d36:	f644 0000 	movw	r0, #18432	; 0x4800
 8002d3a:	f247 21c0 	movw	r1, #29376	; 0x72c0
 8002d3e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002d42:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002d46:	f7fd fb91 	bl	800046c <usart_print>
	usart_print(USART3, "The kingdom of heaven belongs to them!\n");
 8002d4a:	f644 0000 	movw	r0, #18432	; 0x4800
 8002d4e:	f247 21f8 	movw	r1, #29432	; 0x72f8
 8002d52:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002d56:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002d5a:	f7fd fb87 	bl	800046c <usart_print>
//	sprintf(tmp, "port = %d\n", Serial3.port());
//	usart3_print(tmp);
	usart_print(USART3, "How many eyes does Mississipi river have?\n");
 8002d5e:	f644 0000 	movw	r0, #18432	; 0x4800
 8002d62:	f247 3120 	movw	r1, #29472	; 0x7320
 8002d66:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002d6a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002d6e:	f7fd fb7d 	bl	800046c <usart_print>
	usart_flush(USART3);
 8002d72:	f644 0000 	movw	r0, #18432	; 0x4800
 8002d76:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002d7a:	f7fd fbcf 	bl	800051c <usart_flush>

	pinMode(PD12 | PD13 | PD14 | PD15, GPIO_Mode_OUT);
 8002d7e:	f44f 209e 	mov.w	r0, #323584	; 0x4f000
 8002d82:	2101      	movs	r1, #1
 8002d84:	f7fd fa56 	bl	8000234 <pinMode>
 8002d88:	ad01      	add	r5, sp, #4
		//GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	while (1) {
		digitalWrite(PD15, SET);
 8002d8a:	f44f 2090 	mov.w	r0, #294912	; 0x48000
 8002d8e:	2101      	movs	r1, #1
 8002d90:	f7fd fa10 	bl	80001b4 <digitalWrite>
		digitalWrite(PD12 | PD13 | PD14, RESET);
 8002d94:	2100      	movs	r1, #0
 8002d96:	f44f 208e 	mov.w	r0, #290816	; 0x47000
 8002d9a:	f7fd fa0b 	bl	80001b4 <digitalWrite>
		SysTick_delay(intval);
 8002d9e:	2010      	movs	r0, #16
 8002da0:	f7fd fa74 	bl	800028c <SysTick_delay>
		digitalWrite(PD12, SET);
 8002da4:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 8002da8:	2101      	movs	r1, #1
 8002daa:	f7fd fa03 	bl	80001b4 <digitalWrite>
		digitalWrite(PD13 | PD14 | PD15, RESET);
 8002dae:	2100      	movs	r1, #0
 8002db0:	f44f 209c 	mov.w	r0, #319488	; 0x4e000
 8002db4:	f7fd f9fe 	bl	80001b4 <digitalWrite>
		SysTick_delay(intval);
 8002db8:	2010      	movs	r0, #16
 8002dba:	f7fd fa67 	bl	800028c <SysTick_delay>
		digitalWrite(PD13, SET);
 8002dbe:	f44f 2084 	mov.w	r0, #270336	; 0x42000
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	f7fd f9f6 	bl	80001b4 <digitalWrite>
		digitalWrite(PD12 | PD14 | PD15, RESET);
 8002dc8:	2100      	movs	r1, #0
 8002dca:	f44f 209a 	mov.w	r0, #315392	; 0x4d000
 8002dce:	f7fd f9f1 	bl	80001b4 <digitalWrite>
		SysTick_delay(intval);
 8002dd2:	2010      	movs	r0, #16
 8002dd4:	f7fd fa5a 	bl	800028c <SysTick_delay>
		digitalWrite(PD14, SET);
 8002dd8:	f44f 2088 	mov.w	r0, #278528	; 0x44000
 8002ddc:	2101      	movs	r1, #1
 8002dde:	f7fd f9e9 	bl	80001b4 <digitalWrite>
		digitalWrite(PD12 | PD13 | PD15, RESET);
 8002de2:	2100      	movs	r1, #0
 8002de4:	f44f 2096 	mov.w	r0, #307200	; 0x4b000
 8002de8:	f7fd f9e4 	bl	80001b4 <digitalWrite>
		SysTick_delay(intval);
 8002dec:	2010      	movs	r0, #16
 8002dee:	f7fd fa4d 	bl	800028c <SysTick_delay>
		//
		digitalWrite(PD15, SET);
 8002df2:	f44f 2090 	mov.w	r0, #294912	; 0x48000
 8002df6:	2101      	movs	r1, #1
 8002df8:	f7fd f9dc 	bl	80001b4 <digitalWrite>
		digitalWrite(PD12 | PD13 | PD14, RESET);
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	f44f 208e 	mov.w	r0, #290816	; 0x47000
 8002e02:	f7fd f9d7 	bl	80001b4 <digitalWrite>
		SysTick_delay(dval);
 8002e06:	f44f 70da 	mov.w	r0, #436	; 0x1b4
 8002e0a:	f7fd fa3f 	bl	800028c <SysTick_delay>
/*
		usart3.print((float)(count++ / 32.0f), 3);
		*/
		count++;
 8002e0e:	1c61      	adds	r1, r4, #1
 8002e10:	b28c      	uxth	r4, r1
//		uint16_t h, t;
//		h = tx_head();
//		t = tx_tail();
		sprintf(tmp, /*"head =% 4d, tail =% 4d,*/ "%04X\n", count);
 8002e12:	f247 314c 	movw	r1, #29516	; 0x734c
 8002e16:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002e1a:	4622      	mov	r2, r4
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f001 f9eb 	bl	80041f8 <sprintf>
		usart_print(USART3, tmp);
 8002e22:	f644 0000 	movw	r0, #18432	; 0x4800
 8002e26:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	f7fd fb1e 	bl	800046c <usart_print>
		/*
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i;
		if ( usart_available(USART3) > 0 ) {
 8002e30:	f644 0000 	movw	r0, #18432	; 0x4800
 8002e34:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002e38:	f7fd faf8 	bl	800042c <usart_available>
 8002e3c:	2800      	cmp	r0, #0
 8002e3e:	d0a4      	beq.n	8002d8a <main+0xa2>
			usart_write(USART3, usart_peek(USART3));
 8002e40:	f644 0000 	movw	r0, #18432	; 0x4800
 8002e44:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002e48:	f7fd fade 	bl	8000408 <usart_peek>
 8002e4c:	4601      	mov	r1, r0
 8002e4e:	f644 0000 	movw	r0, #18432	; 0x4800
 8002e52:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002e56:	f7fd faf3 	bl	8000440 <usart_write>
 8002e5a:	2600      	movs	r6, #0
			i = 0;
			while ( usart_available(USART3) > 0 ) {
 8002e5c:	e00b      	b.n	8002e76 <main+0x18e>
				tmp[i++] = (char) usart_read(USART3);
 8002e5e:	f644 0000 	movw	r0, #18432	; 0x4800
 8002e62:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002e66:	f7fd fac3 	bl	80003f0 <usart_read>
 8002e6a:	aa18      	add	r2, sp, #96	; 0x60
 8002e6c:	1c73      	adds	r3, r6, #1
 8002e6e:	1996      	adds	r6, r2, r6
 8002e70:	f806 0c5c 	strb.w	r0, [r6, #-92]
 8002e74:	b29e      	uxth	r6, r3
		*/
		uint16_t i;
		if ( usart_available(USART3) > 0 ) {
			usart_write(USART3, usart_peek(USART3));
			i = 0;
			while ( usart_available(USART3) > 0 ) {
 8002e76:	f644 0000 	movw	r0, #18432	; 0x4800
 8002e7a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002e7e:	f7fd fad5 	bl	800042c <usart_available>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2800      	cmp	r0, #0
 8002e86:	d1ea      	bne.n	8002e5e <main+0x176>
				tmp[i++] = (char) usart_read(USART3);
			}
			tmp[i] = 0;
 8002e88:	aa18      	add	r2, sp, #96	; 0x60
 8002e8a:	1996      	adds	r6, r2, r6
			usart_print(USART3, ": read: ");
 8002e8c:	f644 0000 	movw	r0, #18432	; 0x4800
 8002e90:	f247 3154 	movw	r1, #29524	; 0x7354
			usart_write(USART3, usart_peek(USART3));
			i = 0;
			while ( usart_available(USART3) > 0 ) {
				tmp[i++] = (char) usart_read(USART3);
			}
			tmp[i] = 0;
 8002e94:	f806 3c5c 	strb.w	r3, [r6, #-92]
			usart_print(USART3, ": read: ");
 8002e98:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002e9c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002ea0:	f7fd fae4 	bl	800046c <usart_print>
			usart_print(USART3, tmp);
 8002ea4:	f644 0000 	movw	r0, #18432	; 0x4800
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002eae:	f7fd fadd 	bl	800046c <usart_print>
			usart_print(USART3, "\n");
 8002eb2:	f644 0000 	movw	r0, #18432	; 0x4800
 8002eb6:	f247 21f4 	movw	r1, #29428	; 0x72f4
 8002eba:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002ebe:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002ec2:	f7fd fad3 	bl	800046c <usart_print>
 8002ec6:	e760      	b.n	8002d8a <main+0xa2>

08002ec8 <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop

08002ed0 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8002ed0:	f640 4378 	movw	r3, #3192	; 0xc78
 8002ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ed8:	220c      	movs	r2, #12
 8002eda:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop

08002ee4 <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 8002ee4:	f640 4378 	movw	r3, #3192	; 0xc78
 8002ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002eec:	220b      	movs	r2, #11
 8002eee:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop

08002ef8 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002ef8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002efc:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002efe:	2000      	movs	r0, #0
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop

08002f04 <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 8002f04:	2001      	movs	r0, #1
 8002f06:	4770      	bx	lr

08002f08 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8002f08:	2802      	cmp	r0, #2
 8002f0a:	d801      	bhi.n	8002f10 <_isatty+0x8>
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	4770      	bx	lr
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8002f10:	f640 4378 	movw	r3, #3192	; 0xc78
 8002f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f18:	2209      	movs	r2, #9
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	2000      	movs	r0, #0
		return 0;
	}
}
 8002f1e:	4770      	bx	lr

08002f20 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 8002f20:	f640 4378 	movw	r3, #3192	; 0xc78
 8002f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f28:	2216      	movs	r2, #22
 8002f2a:	601a      	str	r2, [r3, #0]
	return (-1);
}
 8002f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop

08002f34 <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 8002f34:	f640 4378 	movw	r3, #3192	; 0xc78
 8002f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f3c:	221f      	movs	r2, #31
 8002f3e:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop

08002f48 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8002f48:	2000      	movs	r0, #0
 8002f4a:	4770      	bx	lr

08002f4c <_read>:
 */

int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	b140      	cbz	r0, 8002f62 <_read+0x16>
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 8002f50:	f640 4378 	movw	r3, #3192	; 0xc78
 8002f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f58:	2209      	movs	r2, #9
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295
				return -1;
			}
	return num;
}
 8002f60:	4770      	bx	lr
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002f62:	2a00      	cmp	r2, #0
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002f64:	bfc4      	itt	gt
 8002f66:	f241 0000 	movwgt	r0, #4096	; 0x1000
 8002f6a:	f2c4 0001 	movtgt	r0, #16385	; 0x4001
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002f6e:	dd0b      	ble.n	8002f88 <_read+0x3c>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002f70:	f8b0 c000 	ldrh.w	ip, [r0]
 8002f74:	f01c 0f20 	tst.w	ip, #32
 8002f78:	d0fa      	beq.n	8002f70 <_read+0x24>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 8002f7a:	f8b0 c004 	ldrh.w	ip, [r0, #4]
		char c = (char) (USART2->DR & (uint16_t) 0x01FF);
#elif STDIN_USART == 3
					while ((USART3->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
					char c = (char)(USART3->DR & (uint16_t)0x01FF);
#endif
					*ptr++ = c;
 8002f7e:	f801 c003 	strb.w	ip, [r1, r3]
					num++;
 8002f82:	3301      	adds	r3, #1
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d1f3      	bne.n	8002f70 <_read+0x24>
 8002f88:	4618      	mov	r0, r3
 8002f8a:	4770      	bx	lr

08002f8c <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002f8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f90:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002f92:	2000      	movs	r0, #0
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop

08002f98 <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8002f98:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop

08002fa0 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8002fa0:	f640 4378 	movw	r3, #3192	; 0xc78
 8002fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fa8:	2202      	movs	r2, #2
 8002faa:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop

08002fb4 <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 8002fb4:	f640 4378 	movw	r3, #3192	; 0xc78
 8002fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fbc:	220a      	movs	r2, #10
 8002fbe:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop

08002fc8 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002fc8:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002fca:	b410      	push	{r4}
	int n;
	switch (file) {
 8002fcc:	d00c      	beq.n	8002fe8 <_write+0x20>
 8002fce:	2802      	cmp	r0, #2
 8002fd0:	d01e      	beq.n	8003010 <_write+0x48>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 8002fd2:	f640 4178 	movw	r1, #3192	; 0xc78
 8002fd6:	2209      	movs	r2, #9
 8002fd8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002fdc:	600a      	str	r2, [r1, #0]
 8002fde:	f04f 32ff 	mov.w	r2, #4294967295
				return -1;
			}
	return len;
}
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	bc10      	pop	{r4}
 8002fe6:	4770      	bx	lr
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002fe8:	2a00      	cmp	r2, #0
 8002fea:	ddfa      	ble.n	8002fe2 <_write+0x1a>
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fec:	f241 0400 	movw	r4, #4096	; 0x1000
 8002ff0:	f2c4 0401 	movt	r4, #16385	; 0x4001
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002ff4:	f04f 0c00 	mov.w	ip, #0
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002ff8:	8823      	ldrh	r3, [r4, #0]
 8002ffa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ffe:	d0fb      	beq.n	8002ff8 <_write+0x30>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8003000:	f811 000c 	ldrb.w	r0, [r1, ip]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8003004:	f10c 0c01 	add.w	ip, ip, #1
 8003008:	4594      	cmp	ip, r2
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 800300a:	80a0      	strh	r0, [r4, #4]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 800300c:	d1f4      	bne.n	8002ff8 <_write+0x30>
 800300e:	e7e8      	b.n	8002fe2 <_write+0x1a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8003010:	2a00      	cmp	r2, #0
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8003012:	bfc2      	ittt	gt
 8003014:	f241 0400 	movwgt	r4, #4096	; 0x1000
 8003018:	f2c4 0401 	movtgt	r4, #16385	; 0x4001
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 800301c:	f04f 0c00 	movgt.w	ip, #0
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8003020:	dddf      	ble.n	8002fe2 <_write+0x1a>
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8003022:	8823      	ldrh	r3, [r4, #0]
 8003024:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003028:	d0fb      	beq.n	8003022 <_write+0x5a>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 800302a:	f811 000c 	ldrb.w	r0, [r1, ip]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 800302e:	f10c 0c01 	add.w	ip, ip, #1
 8003032:	4594      	cmp	ip, r2
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8003034:	80a0      	strh	r0, [r4, #4]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8003036:	d1f4      	bne.n	8003022 <_write+0x5a>
 8003038:	e7d3      	b.n	8002fe2 <_write+0x1a>
 800303a:	bf00      	nop

0800303c <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 800303c:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 800303e:	f240 6304 	movw	r3, #1540	; 0x604
 8003042:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	b1d2      	cbz	r2, 8003080 <_sbrk+0x44>
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 800304a:	f3ef 8108 	mrs	r1, MSP
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 800304e:	1810      	adds	r0, r2, r0
 8003050:	4281      	cmp	r1, r0
		errno = ENOMEM;
		return (caddr_t) -1;
		//abort ();
	}

	heap_end += incr;
 8003052:	bf28      	it	cs
 8003054:	6018      	strcs	r0, [r3, #0]
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 8003056:	d301      	bcc.n	800305c <_sbrk+0x20>
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 8003058:	4610      	mov	r0, r2
 800305a:	bd08      	pop	{r3, pc}
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 800305c:	f247 3160 	movw	r1, #29536	; 0x7360
 8003060:	2219      	movs	r2, #25
 8003062:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003066:	2002      	movs	r0, #2
 8003068:	f7ff ffae 	bl	8002fc8 <_write>
		errno = ENOMEM;
 800306c:	f640 4378 	movw	r3, #3192	; 0xc78
 8003070:	220c      	movs	r2, #12
 8003072:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	f04f 32ff 	mov.w	r2, #4294967295
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 800307c:	4610      	mov	r0, r2
 800307e:	bd08      	pop	{r3, pc}
	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
		heap_end = &_ebss;
 8003080:	f640 427c 	movw	r2, #3196	; 0xc7c
 8003084:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e7de      	b.n	800304a <_sbrk+0xe>

0800308c <_exit>:
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
	_write(1, "exit", 4);
 800308c:	f247 317c 	movw	r1, #29564	; 0x737c
 8003090:	b508      	push	{r3, lr}
 8003092:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003096:	2001      	movs	r0, #1
 8003098:	2204      	movs	r2, #4
 800309a:	f7ff ff95 	bl	8002fc8 <_write>
 800309e:	e7fe      	b.n	800309e <_exit+0x12>
 80030a0:	08007558 	.word	0x08007558
 80030a4:	20000000 	.word	0x20000000
 80030a8:	20000604 	.word	0x20000604
 80030ac:	20000604 	.word	0x20000604
 80030b0:	20000c7c 	.word	0x20000c7c

080030b4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop

080030b8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80030b8:	e7fe      	b.n	80030b8 <HardFault_Handler>
 80030ba:	bf00      	nop

080030bc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80030bc:	e7fe      	b.n	80030bc <MemManage_Handler>
 80030be:	bf00      	nop

080030c0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80030c0:	e7fe      	b.n	80030c0 <BusFault_Handler>
 80030c2:	bf00      	nop

080030c4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80030c4:	e7fe      	b.n	80030c4 <UsageFault_Handler>
 80030c6:	bf00      	nop

080030c8 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop

080030cc <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop

080030d0 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop

080030d4 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80030d4:	f643 0300 	movw	r3, #14336	; 0x3800
 80030d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80030dc:	6818      	ldr	r0, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80030de:	2100      	movs	r1, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80030e0:	f040 0201 	orr.w	r2, r0, #1
 80030e4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80030e6:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80030e8:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80030ea:	f243 0210 	movw	r2, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80030ee:	f020 7c84 	bic.w	ip, r0, #17301504	; 0x1080000
 80030f2:	f42c 3080 	bic.w	r0, ip, #65536	; 0x10000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80030f6:	f2c2 4200 	movt	r2, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80030fa:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80030fc:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030fe:	6818      	ldr	r0, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003100:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003102:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8003106:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003108:	60d9      	str	r1, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800310a:	9101      	str	r1, [sp, #4]
 800310c:	9100      	str	r1, [sp, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800310e:	6818      	ldr	r0, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003110:	461a      	mov	r2, r3
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003112:	f440 3180 	orr.w	r1, r0, #65536	; 0x10000
 8003116:	6019      	str	r1, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003118:	6811      	ldr	r1, [r2, #0]
 800311a:	f401 3300 	and.w	r3, r1, #131072	; 0x20000
 800311e:	9300      	str	r3, [sp, #0]
    StartUpCounter++;
 8003120:	9801      	ldr	r0, [sp, #4]
 8003122:	1c41      	adds	r1, r0, #1
 8003124:	9101      	str	r1, [sp, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003126:	9b00      	ldr	r3, [sp, #0]
 8003128:	b91b      	cbnz	r3, 8003132 <SystemInit+0x5e>
 800312a:	9801      	ldr	r0, [sp, #4]
 800312c:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 8003130:	d1f2      	bne.n	8003118 <SystemInit+0x44>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003132:	f643 0100 	movw	r1, #14336	; 0x3800
 8003136:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800313a:	680b      	ldr	r3, [r1, #0]
 800313c:	f413 3200 	ands.w	r2, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003140:	bf08      	it	eq
 8003142:	9200      	streq	r2, [sp, #0]
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003144:	d001      	beq.n	800314a <SystemInit+0x76>
  {
    HSEStatus = (uint32_t)0x01;
 8003146:	2001      	movs	r0, #1
 8003148:	9000      	str	r0, [sp, #0]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
 800314a:	9a00      	ldr	r2, [sp, #0]
 800314c:	2a01      	cmp	r2, #1
 800314e:	d008      	beq.n	8003162 <SystemInit+0x8e>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003150:	f64e 5000 	movw	r0, #60672	; 0xed00
 8003154:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8003158:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800315c:	6081      	str	r1, [r0, #8]
#endif
}
 800315e:	b002      	add	sp, #8
 8003160:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003162:	f643 0300 	movw	r3, #14336	; 0x3800
 8003166:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800316a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800316c:	f247 0200 	movw	r2, #28672	; 0x7000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003170:	f041 5080 	orr.w	r0, r1, #268435456	; 0x10000000
 8003174:	6418      	str	r0, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003176:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800317a:	6811      	ldr	r1, [r2, #0]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800317c:	f245 4019 	movw	r0, #21529	; 0x5419

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
    PWR->CR |= PWR_CR_VOS;
 8003180:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003184:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003186:	6899      	ldr	r1, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003188:	f2c0 7040 	movt	r0, #1856	; 0x740
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
    PWR->CR |= PWR_CR_VOS;

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800318c:	6099      	str	r1, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800318e:	689a      	ldr	r2, [r3, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003190:	4619      	mov	r1, r3

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003196:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800319e:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80031a0:	6058      	str	r0, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	f042 7080 	orr.w	r0, r2, #16777216	; 0x1000000
 80031a8:	6018      	str	r0, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80031aa:	680a      	ldr	r2, [r1, #0]
 80031ac:	f643 0300 	movw	r3, #14336	; 0x3800
 80031b0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80031b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80031b8:	d0f7      	beq.n	80031aa <SystemInit+0xd6>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80031ba:	f643 4200 	movw	r2, #15360	; 0x3c00
 80031be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80031c2:	f240 6005 	movw	r0, #1541	; 0x605
 80031c6:	6010      	str	r0, [r2, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80031c8:	6899      	ldr	r1, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80031ca:	461a      	mov	r2, r3
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80031cc:	f021 0003 	bic.w	r0, r1, #3
 80031d0:	6098      	str	r0, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80031d2:	6899      	ldr	r1, [r3, #8]
 80031d4:	f041 0002 	orr.w	r0, r1, #2
 80031d8:	6098      	str	r0, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80031da:	6893      	ldr	r3, [r2, #8]
 80031dc:	f003 0c0c 	and.w	ip, r3, #12
 80031e0:	f1bc 0f08 	cmp.w	ip, #8
 80031e4:	d1f9      	bne.n	80031da <SystemInit+0x106>
 80031e6:	e7b3      	b.n	8003150 <SystemInit+0x7c>

080031e8 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80031e8:	f643 0300 	movw	r3, #14336	; 0x3800
 80031ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80031f0:	689a      	ldr	r2, [r3, #8]

  switch (tmp)
 80031f2:	f002 020c 	and.w	r2, r2, #12
 80031f6:	2a04      	cmp	r2, #4
 80031f8:	d016      	beq.n	8003228 <SystemCoreClockUpdate+0x40>
 80031fa:	2a08      	cmp	r2, #8
 80031fc:	d01e      	beq.n	800323c <SystemCoreClockUpdate+0x54>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
      break;
    default:
      SystemCoreClock = HSI_VALUE;
 80031fe:	f240 03dc 	movw	r3, #220	; 0xdc
 8003202:	f242 4100 	movw	r1, #9216	; 0x2400
 8003206:	f2c0 01f4 	movt	r1, #244	; 0xf4
 800320a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800320e:	6019      	str	r1, [r3, #0]
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003210:	f643 0000 	movw	r0, #14336	; 0x3800
 8003214:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8003218:	6882      	ldr	r2, [r0, #8]
 800321a:	f3c2 1003 	ubfx	r0, r2, #4, #4
 800321e:	18c2      	adds	r2, r0, r3
 8003220:	7910      	ldrb	r0, [r2, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003222:	40c1      	lsrs	r1, r0
 8003224:	6019      	str	r1, [r3, #0]
}
 8003226:	4770      	bx	lr
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003228:	f240 03dc 	movw	r3, #220	; 0xdc
 800322c:	f241 2100 	movw	r1, #4608	; 0x1200
 8003230:	f2c0 017a 	movt	r1, #122	; 0x7a
 8003234:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003238:	6019      	str	r1, [r3, #0]
      break;
 800323a:	e7e9      	b.n	8003210 <SystemCoreClockUpdate+0x28>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800323c:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800323e:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8003240:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003244:	6859      	ldr	r1, [r3, #4]
 8003246:	bf15      	itete	ne
 8003248:	f241 2300 	movwne	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800324c:	f242 4300 	movweq	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003250:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003254:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003258:	f002 0c3f 	and.w	ip, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800325c:	fbb3 f2fc 	udiv	r2, r3, ip
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003260:	f643 0300 	movw	r3, #14336	; 0x3800
 8003264:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003268:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 800326c:	fb02 f10c 	mul.w	r1, r2, ip
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003270:	685a      	ldr	r2, [r3, #4]
      SystemCoreClock = pllvco/pllp;
 8003272:	f240 03dc 	movw	r3, #220	; 0xdc
 8003276:	f3c2 4001 	ubfx	r0, r2, #16, #2
 800327a:	1c42      	adds	r2, r0, #1
 800327c:	0050      	lsls	r0, r2, #1
 800327e:	fbb1 f1f0 	udiv	r1, r1, r0
 8003282:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003286:	6019      	str	r1, [r3, #0]
      break;
 8003288:	e7c2      	b.n	8003210 <SystemCoreClockUpdate+0x28>
 800328a:	bf00      	nop
 800328c:	0000      	lsls	r0, r0, #0
	...

08003290 <__aeabi_uidiv>:
 8003290:	1e4a      	subs	r2, r1, #1
 8003292:	bf08      	it	eq
 8003294:	4770      	bxeq	lr
 8003296:	f0c0 8124 	bcc.w	80034e2 <__aeabi_uidiv+0x252>
 800329a:	4288      	cmp	r0, r1
 800329c:	f240 8116 	bls.w	80034cc <__aeabi_uidiv+0x23c>
 80032a0:	4211      	tst	r1, r2
 80032a2:	f000 8117 	beq.w	80034d4 <__aeabi_uidiv+0x244>
 80032a6:	fab0 f380 	clz	r3, r0
 80032aa:	fab1 f281 	clz	r2, r1
 80032ae:	eba2 0303 	sub.w	r3, r2, r3
 80032b2:	f1c3 031f 	rsb	r3, r3, #31
 80032b6:	a204      	add	r2, pc, #16	; (adr r2, 80032c8 <__aeabi_uidiv+0x38>)
 80032b8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	469f      	mov	pc, r3
 80032c2:	bf00      	nop
 80032c4:	f3af 8000 	nop.w
 80032c8:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
 80032cc:	bf00      	nop
 80032ce:	eb42 0202 	adc.w	r2, r2, r2
 80032d2:	bf28      	it	cs
 80032d4:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
 80032d8:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
 80032dc:	bf00      	nop
 80032de:	eb42 0202 	adc.w	r2, r2, r2
 80032e2:	bf28      	it	cs
 80032e4:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
 80032e8:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
 80032ec:	bf00      	nop
 80032ee:	eb42 0202 	adc.w	r2, r2, r2
 80032f2:	bf28      	it	cs
 80032f4:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
 80032f8:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
 80032fc:	bf00      	nop
 80032fe:	eb42 0202 	adc.w	r2, r2, r2
 8003302:	bf28      	it	cs
 8003304:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
 8003308:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
 800330c:	bf00      	nop
 800330e:	eb42 0202 	adc.w	r2, r2, r2
 8003312:	bf28      	it	cs
 8003314:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
 8003318:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
 800331c:	bf00      	nop
 800331e:	eb42 0202 	adc.w	r2, r2, r2
 8003322:	bf28      	it	cs
 8003324:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
 8003328:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
 800332c:	bf00      	nop
 800332e:	eb42 0202 	adc.w	r2, r2, r2
 8003332:	bf28      	it	cs
 8003334:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
 8003338:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
 800333c:	bf00      	nop
 800333e:	eb42 0202 	adc.w	r2, r2, r2
 8003342:	bf28      	it	cs
 8003344:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
 8003348:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
 800334c:	bf00      	nop
 800334e:	eb42 0202 	adc.w	r2, r2, r2
 8003352:	bf28      	it	cs
 8003354:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
 8003358:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
 800335c:	bf00      	nop
 800335e:	eb42 0202 	adc.w	r2, r2, r2
 8003362:	bf28      	it	cs
 8003364:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
 8003368:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 800336c:	bf00      	nop
 800336e:	eb42 0202 	adc.w	r2, r2, r2
 8003372:	bf28      	it	cs
 8003374:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
 8003378:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
 800337c:	bf00      	nop
 800337e:	eb42 0202 	adc.w	r2, r2, r2
 8003382:	bf28      	it	cs
 8003384:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
 8003388:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
 800338c:	bf00      	nop
 800338e:	eb42 0202 	adc.w	r2, r2, r2
 8003392:	bf28      	it	cs
 8003394:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
 8003398:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
 800339c:	bf00      	nop
 800339e:	eb42 0202 	adc.w	r2, r2, r2
 80033a2:	bf28      	it	cs
 80033a4:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
 80033a8:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
 80033ac:	bf00      	nop
 80033ae:	eb42 0202 	adc.w	r2, r2, r2
 80033b2:	bf28      	it	cs
 80033b4:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
 80033b8:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
 80033bc:	bf00      	nop
 80033be:	eb42 0202 	adc.w	r2, r2, r2
 80033c2:	bf28      	it	cs
 80033c4:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
 80033c8:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
 80033cc:	bf00      	nop
 80033ce:	eb42 0202 	adc.w	r2, r2, r2
 80033d2:	bf28      	it	cs
 80033d4:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
 80033d8:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
 80033dc:	bf00      	nop
 80033de:	eb42 0202 	adc.w	r2, r2, r2
 80033e2:	bf28      	it	cs
 80033e4:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
 80033e8:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
 80033ec:	bf00      	nop
 80033ee:	eb42 0202 	adc.w	r2, r2, r2
 80033f2:	bf28      	it	cs
 80033f4:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
 80033f8:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
 80033fc:	bf00      	nop
 80033fe:	eb42 0202 	adc.w	r2, r2, r2
 8003402:	bf28      	it	cs
 8003404:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
 8003408:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
 800340c:	bf00      	nop
 800340e:	eb42 0202 	adc.w	r2, r2, r2
 8003412:	bf28      	it	cs
 8003414:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
 8003418:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
 800341c:	bf00      	nop
 800341e:	eb42 0202 	adc.w	r2, r2, r2
 8003422:	bf28      	it	cs
 8003424:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
 8003428:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
 800342c:	bf00      	nop
 800342e:	eb42 0202 	adc.w	r2, r2, r2
 8003432:	bf28      	it	cs
 8003434:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
 8003438:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
 800343c:	bf00      	nop
 800343e:	eb42 0202 	adc.w	r2, r2, r2
 8003442:	bf28      	it	cs
 8003444:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
 8003448:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
 800344c:	bf00      	nop
 800344e:	eb42 0202 	adc.w	r2, r2, r2
 8003452:	bf28      	it	cs
 8003454:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
 8003458:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
 800345c:	bf00      	nop
 800345e:	eb42 0202 	adc.w	r2, r2, r2
 8003462:	bf28      	it	cs
 8003464:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
 8003468:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 800346c:	bf00      	nop
 800346e:	eb42 0202 	adc.w	r2, r2, r2
 8003472:	bf28      	it	cs
 8003474:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
 8003478:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
 800347c:	bf00      	nop
 800347e:	eb42 0202 	adc.w	r2, r2, r2
 8003482:	bf28      	it	cs
 8003484:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
 8003488:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 800348c:	bf00      	nop
 800348e:	eb42 0202 	adc.w	r2, r2, r2
 8003492:	bf28      	it	cs
 8003494:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
 8003498:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
 800349c:	bf00      	nop
 800349e:	eb42 0202 	adc.w	r2, r2, r2
 80034a2:	bf28      	it	cs
 80034a4:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
 80034a8:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 80034ac:	bf00      	nop
 80034ae:	eb42 0202 	adc.w	r2, r2, r2
 80034b2:	bf28      	it	cs
 80034b4:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
 80034b8:	ebb0 0f01 	cmp.w	r0, r1
 80034bc:	bf00      	nop
 80034be:	eb42 0202 	adc.w	r2, r2, r2
 80034c2:	bf28      	it	cs
 80034c4:	eba0 0001 	subcs.w	r0, r0, r1
 80034c8:	4610      	mov	r0, r2
 80034ca:	4770      	bx	lr
 80034cc:	bf0c      	ite	eq
 80034ce:	2001      	moveq	r0, #1
 80034d0:	2000      	movne	r0, #0
 80034d2:	4770      	bx	lr
 80034d4:	fab1 f281 	clz	r2, r1
 80034d8:	f1c2 021f 	rsb	r2, r2, #31
 80034dc:	fa20 f002 	lsr.w	r0, r0, r2
 80034e0:	4770      	bx	lr
 80034e2:	b108      	cbz	r0, 80034e8 <__aeabi_uidiv+0x258>
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295
 80034e8:	f000 b966 	b.w	80037b8 <__aeabi_idiv0>

080034ec <__aeabi_uidivmod>:
 80034ec:	2900      	cmp	r1, #0
 80034ee:	d0f8      	beq.n	80034e2 <__aeabi_uidiv+0x252>
 80034f0:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 80034f4:	f7ff fecc 	bl	8003290 <__aeabi_uidiv>
 80034f8:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 80034fc:	fb02 f300 	mul.w	r3, r2, r0
 8003500:	eba1 0103 	sub.w	r1, r1, r3
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop

08003508 <__aeabi_idiv>:
 8003508:	2900      	cmp	r1, #0
 800350a:	f000 813e 	beq.w	800378a <.divsi3_nodiv0+0x27c>

0800350e <.divsi3_nodiv0>:
 800350e:	ea80 0c01 	eor.w	ip, r0, r1
 8003512:	bf48      	it	mi
 8003514:	4249      	negmi	r1, r1
 8003516:	1e4a      	subs	r2, r1, #1
 8003518:	f000 811f 	beq.w	800375a <.divsi3_nodiv0+0x24c>
 800351c:	1c03      	adds	r3, r0, #0
 800351e:	bf48      	it	mi
 8003520:	4243      	negmi	r3, r0
 8003522:	428b      	cmp	r3, r1
 8003524:	f240 811e 	bls.w	8003764 <.divsi3_nodiv0+0x256>
 8003528:	4211      	tst	r1, r2
 800352a:	f000 8123 	beq.w	8003774 <.divsi3_nodiv0+0x266>
 800352e:	fab3 f283 	clz	r2, r3
 8003532:	fab1 f081 	clz	r0, r1
 8003536:	eba0 0202 	sub.w	r2, r0, r2
 800353a:	f1c2 021f 	rsb	r2, r2, #31
 800353e:	a004      	add	r0, pc, #16	; (adr r0, 8003550 <.divsi3_nodiv0+0x42>)
 8003540:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8003544:	f04f 0000 	mov.w	r0, #0
 8003548:	4697      	mov	pc, r2
 800354a:	bf00      	nop
 800354c:	f3af 8000 	nop.w
 8003550:	ebb3 7fc1 	cmp.w	r3, r1, lsl #31
 8003554:	bf00      	nop
 8003556:	eb40 0000 	adc.w	r0, r0, r0
 800355a:	bf28      	it	cs
 800355c:	eba3 73c1 	subcs.w	r3, r3, r1, lsl #31
 8003560:	ebb3 7f81 	cmp.w	r3, r1, lsl #30
 8003564:	bf00      	nop
 8003566:	eb40 0000 	adc.w	r0, r0, r0
 800356a:	bf28      	it	cs
 800356c:	eba3 7381 	subcs.w	r3, r3, r1, lsl #30
 8003570:	ebb3 7f41 	cmp.w	r3, r1, lsl #29
 8003574:	bf00      	nop
 8003576:	eb40 0000 	adc.w	r0, r0, r0
 800357a:	bf28      	it	cs
 800357c:	eba3 7341 	subcs.w	r3, r3, r1, lsl #29
 8003580:	ebb3 7f01 	cmp.w	r3, r1, lsl #28
 8003584:	bf00      	nop
 8003586:	eb40 0000 	adc.w	r0, r0, r0
 800358a:	bf28      	it	cs
 800358c:	eba3 7301 	subcs.w	r3, r3, r1, lsl #28
 8003590:	ebb3 6fc1 	cmp.w	r3, r1, lsl #27
 8003594:	bf00      	nop
 8003596:	eb40 0000 	adc.w	r0, r0, r0
 800359a:	bf28      	it	cs
 800359c:	eba3 63c1 	subcs.w	r3, r3, r1, lsl #27
 80035a0:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 80035a4:	bf00      	nop
 80035a6:	eb40 0000 	adc.w	r0, r0, r0
 80035aa:	bf28      	it	cs
 80035ac:	eba3 6381 	subcs.w	r3, r3, r1, lsl #26
 80035b0:	ebb3 6f41 	cmp.w	r3, r1, lsl #25
 80035b4:	bf00      	nop
 80035b6:	eb40 0000 	adc.w	r0, r0, r0
 80035ba:	bf28      	it	cs
 80035bc:	eba3 6341 	subcs.w	r3, r3, r1, lsl #25
 80035c0:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 80035c4:	bf00      	nop
 80035c6:	eb40 0000 	adc.w	r0, r0, r0
 80035ca:	bf28      	it	cs
 80035cc:	eba3 6301 	subcs.w	r3, r3, r1, lsl #24
 80035d0:	ebb3 5fc1 	cmp.w	r3, r1, lsl #23
 80035d4:	bf00      	nop
 80035d6:	eb40 0000 	adc.w	r0, r0, r0
 80035da:	bf28      	it	cs
 80035dc:	eba3 53c1 	subcs.w	r3, r3, r1, lsl #23
 80035e0:	ebb3 5f81 	cmp.w	r3, r1, lsl #22
 80035e4:	bf00      	nop
 80035e6:	eb40 0000 	adc.w	r0, r0, r0
 80035ea:	bf28      	it	cs
 80035ec:	eba3 5381 	subcs.w	r3, r3, r1, lsl #22
 80035f0:	ebb3 5f41 	cmp.w	r3, r1, lsl #21
 80035f4:	bf00      	nop
 80035f6:	eb40 0000 	adc.w	r0, r0, r0
 80035fa:	bf28      	it	cs
 80035fc:	eba3 5341 	subcs.w	r3, r3, r1, lsl #21
 8003600:	ebb3 5f01 	cmp.w	r3, r1, lsl #20
 8003604:	bf00      	nop
 8003606:	eb40 0000 	adc.w	r0, r0, r0
 800360a:	bf28      	it	cs
 800360c:	eba3 5301 	subcs.w	r3, r3, r1, lsl #20
 8003610:	ebb3 4fc1 	cmp.w	r3, r1, lsl #19
 8003614:	bf00      	nop
 8003616:	eb40 0000 	adc.w	r0, r0, r0
 800361a:	bf28      	it	cs
 800361c:	eba3 43c1 	subcs.w	r3, r3, r1, lsl #19
 8003620:	ebb3 4f81 	cmp.w	r3, r1, lsl #18
 8003624:	bf00      	nop
 8003626:	eb40 0000 	adc.w	r0, r0, r0
 800362a:	bf28      	it	cs
 800362c:	eba3 4381 	subcs.w	r3, r3, r1, lsl #18
 8003630:	ebb3 4f41 	cmp.w	r3, r1, lsl #17
 8003634:	bf00      	nop
 8003636:	eb40 0000 	adc.w	r0, r0, r0
 800363a:	bf28      	it	cs
 800363c:	eba3 4341 	subcs.w	r3, r3, r1, lsl #17
 8003640:	ebb3 4f01 	cmp.w	r3, r1, lsl #16
 8003644:	bf00      	nop
 8003646:	eb40 0000 	adc.w	r0, r0, r0
 800364a:	bf28      	it	cs
 800364c:	eba3 4301 	subcs.w	r3, r3, r1, lsl #16
 8003650:	ebb3 3fc1 	cmp.w	r3, r1, lsl #15
 8003654:	bf00      	nop
 8003656:	eb40 0000 	adc.w	r0, r0, r0
 800365a:	bf28      	it	cs
 800365c:	eba3 33c1 	subcs.w	r3, r3, r1, lsl #15
 8003660:	ebb3 3f81 	cmp.w	r3, r1, lsl #14
 8003664:	bf00      	nop
 8003666:	eb40 0000 	adc.w	r0, r0, r0
 800366a:	bf28      	it	cs
 800366c:	eba3 3381 	subcs.w	r3, r3, r1, lsl #14
 8003670:	ebb3 3f41 	cmp.w	r3, r1, lsl #13
 8003674:	bf00      	nop
 8003676:	eb40 0000 	adc.w	r0, r0, r0
 800367a:	bf28      	it	cs
 800367c:	eba3 3341 	subcs.w	r3, r3, r1, lsl #13
 8003680:	ebb3 3f01 	cmp.w	r3, r1, lsl #12
 8003684:	bf00      	nop
 8003686:	eb40 0000 	adc.w	r0, r0, r0
 800368a:	bf28      	it	cs
 800368c:	eba3 3301 	subcs.w	r3, r3, r1, lsl #12
 8003690:	ebb3 2fc1 	cmp.w	r3, r1, lsl #11
 8003694:	bf00      	nop
 8003696:	eb40 0000 	adc.w	r0, r0, r0
 800369a:	bf28      	it	cs
 800369c:	eba3 23c1 	subcs.w	r3, r3, r1, lsl #11
 80036a0:	ebb3 2f81 	cmp.w	r3, r1, lsl #10
 80036a4:	bf00      	nop
 80036a6:	eb40 0000 	adc.w	r0, r0, r0
 80036aa:	bf28      	it	cs
 80036ac:	eba3 2381 	subcs.w	r3, r3, r1, lsl #10
 80036b0:	ebb3 2f41 	cmp.w	r3, r1, lsl #9
 80036b4:	bf00      	nop
 80036b6:	eb40 0000 	adc.w	r0, r0, r0
 80036ba:	bf28      	it	cs
 80036bc:	eba3 2341 	subcs.w	r3, r3, r1, lsl #9
 80036c0:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 80036c4:	bf00      	nop
 80036c6:	eb40 0000 	adc.w	r0, r0, r0
 80036ca:	bf28      	it	cs
 80036cc:	eba3 2301 	subcs.w	r3, r3, r1, lsl #8
 80036d0:	ebb3 1fc1 	cmp.w	r3, r1, lsl #7
 80036d4:	bf00      	nop
 80036d6:	eb40 0000 	adc.w	r0, r0, r0
 80036da:	bf28      	it	cs
 80036dc:	eba3 13c1 	subcs.w	r3, r3, r1, lsl #7
 80036e0:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80036e4:	bf00      	nop
 80036e6:	eb40 0000 	adc.w	r0, r0, r0
 80036ea:	bf28      	it	cs
 80036ec:	eba3 1381 	subcs.w	r3, r3, r1, lsl #6
 80036f0:	ebb3 1f41 	cmp.w	r3, r1, lsl #5
 80036f4:	bf00      	nop
 80036f6:	eb40 0000 	adc.w	r0, r0, r0
 80036fa:	bf28      	it	cs
 80036fc:	eba3 1341 	subcs.w	r3, r3, r1, lsl #5
 8003700:	ebb3 1f01 	cmp.w	r3, r1, lsl #4
 8003704:	bf00      	nop
 8003706:	eb40 0000 	adc.w	r0, r0, r0
 800370a:	bf28      	it	cs
 800370c:	eba3 1301 	subcs.w	r3, r3, r1, lsl #4
 8003710:	ebb3 0fc1 	cmp.w	r3, r1, lsl #3
 8003714:	bf00      	nop
 8003716:	eb40 0000 	adc.w	r0, r0, r0
 800371a:	bf28      	it	cs
 800371c:	eba3 03c1 	subcs.w	r3, r3, r1, lsl #3
 8003720:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 8003724:	bf00      	nop
 8003726:	eb40 0000 	adc.w	r0, r0, r0
 800372a:	bf28      	it	cs
 800372c:	eba3 0381 	subcs.w	r3, r3, r1, lsl #2
 8003730:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
 8003734:	bf00      	nop
 8003736:	eb40 0000 	adc.w	r0, r0, r0
 800373a:	bf28      	it	cs
 800373c:	eba3 0341 	subcs.w	r3, r3, r1, lsl #1
 8003740:	ebb3 0f01 	cmp.w	r3, r1
 8003744:	bf00      	nop
 8003746:	eb40 0000 	adc.w	r0, r0, r0
 800374a:	bf28      	it	cs
 800374c:	eba3 0301 	subcs.w	r3, r3, r1
 8003750:	f1bc 0f00 	cmp.w	ip, #0
 8003754:	bf48      	it	mi
 8003756:	4240      	negmi	r0, r0
 8003758:	4770      	bx	lr
 800375a:	ea9c 0f00 	teq	ip, r0
 800375e:	bf48      	it	mi
 8003760:	4240      	negmi	r0, r0
 8003762:	4770      	bx	lr
 8003764:	bf38      	it	cc
 8003766:	2000      	movcc	r0, #0
 8003768:	bf04      	itt	eq
 800376a:	ea4f 70ec 	moveq.w	r0, ip, asr #31
 800376e:	f040 0001 	orreq.w	r0, r0, #1
 8003772:	4770      	bx	lr
 8003774:	fab1 f281 	clz	r2, r1
 8003778:	f1c2 021f 	rsb	r2, r2, #31
 800377c:	f1bc 0f00 	cmp.w	ip, #0
 8003780:	fa23 f002 	lsr.w	r0, r3, r2
 8003784:	bf48      	it	mi
 8003786:	4240      	negmi	r0, r0
 8003788:	4770      	bx	lr
 800378a:	2800      	cmp	r0, #0
 800378c:	bfc8      	it	gt
 800378e:	f06f 4000 	mvngt.w	r0, #2147483648	; 0x80000000
 8003792:	bfb8      	it	lt
 8003794:	f04f 4000 	movlt.w	r0, #2147483648	; 0x80000000
 8003798:	f000 b80e 	b.w	80037b8 <__aeabi_idiv0>

0800379c <__aeabi_idivmod>:
 800379c:	2900      	cmp	r1, #0
 800379e:	d0f4      	beq.n	800378a <.divsi3_nodiv0+0x27c>
 80037a0:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 80037a4:	f7ff feb3 	bl	800350e <.divsi3_nodiv0>
 80037a8:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 80037ac:	fb02 f300 	mul.w	r3, r2, r0
 80037b0:	eba1 0103 	sub.w	r1, r1, r3
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop

080037b8 <__aeabi_idiv0>:
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop

080037bc <__aeabi_drsub>:
 80037bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80037c0:	e002      	b.n	80037c8 <__adddf3>
 80037c2:	bf00      	nop

080037c4 <__aeabi_dsub>:
 80037c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080037c8 <__adddf3>:
 80037c8:	b530      	push	{r4, r5, lr}
 80037ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80037ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80037d2:	ea94 0f05 	teq	r4, r5
 80037d6:	bf08      	it	eq
 80037d8:	ea90 0f02 	teqeq	r0, r2
 80037dc:	bf1f      	itttt	ne
 80037de:	ea54 0c00 	orrsne.w	ip, r4, r0
 80037e2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80037e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80037ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80037ee:	f000 80e2 	beq.w	80039b6 <__adddf3+0x1ee>
 80037f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80037f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80037fa:	bfb8      	it	lt
 80037fc:	426d      	neglt	r5, r5
 80037fe:	dd0c      	ble.n	800381a <__adddf3+0x52>
 8003800:	442c      	add	r4, r5
 8003802:	ea80 0202 	eor.w	r2, r0, r2
 8003806:	ea81 0303 	eor.w	r3, r1, r3
 800380a:	ea82 0000 	eor.w	r0, r2, r0
 800380e:	ea83 0101 	eor.w	r1, r3, r1
 8003812:	ea80 0202 	eor.w	r2, r0, r2
 8003816:	ea81 0303 	eor.w	r3, r1, r3
 800381a:	2d36      	cmp	r5, #54	; 0x36
 800381c:	bf88      	it	hi
 800381e:	bd30      	pophi	{r4, r5, pc}
 8003820:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003824:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003828:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800382c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003830:	d002      	beq.n	8003838 <__adddf3+0x70>
 8003832:	4240      	negs	r0, r0
 8003834:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003838:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800383c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003840:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003844:	d002      	beq.n	800384c <__adddf3+0x84>
 8003846:	4252      	negs	r2, r2
 8003848:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800384c:	ea94 0f05 	teq	r4, r5
 8003850:	f000 80a7 	beq.w	80039a2 <__adddf3+0x1da>
 8003854:	f1a4 0401 	sub.w	r4, r4, #1
 8003858:	f1d5 0e20 	rsbs	lr, r5, #32
 800385c:	db0d      	blt.n	800387a <__adddf3+0xb2>
 800385e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003862:	fa22 f205 	lsr.w	r2, r2, r5
 8003866:	1880      	adds	r0, r0, r2
 8003868:	f141 0100 	adc.w	r1, r1, #0
 800386c:	fa03 f20e 	lsl.w	r2, r3, lr
 8003870:	1880      	adds	r0, r0, r2
 8003872:	fa43 f305 	asr.w	r3, r3, r5
 8003876:	4159      	adcs	r1, r3
 8003878:	e00e      	b.n	8003898 <__adddf3+0xd0>
 800387a:	f1a5 0520 	sub.w	r5, r5, #32
 800387e:	f10e 0e20 	add.w	lr, lr, #32
 8003882:	2a01      	cmp	r2, #1
 8003884:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003888:	bf28      	it	cs
 800388a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800388e:	fa43 f305 	asr.w	r3, r3, r5
 8003892:	18c0      	adds	r0, r0, r3
 8003894:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003898:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800389c:	d507      	bpl.n	80038ae <__adddf3+0xe6>
 800389e:	f04f 0e00 	mov.w	lr, #0
 80038a2:	f1dc 0c00 	rsbs	ip, ip, #0
 80038a6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80038aa:	eb6e 0101 	sbc.w	r1, lr, r1
 80038ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80038b2:	d31b      	bcc.n	80038ec <__adddf3+0x124>
 80038b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80038b8:	d30c      	bcc.n	80038d4 <__adddf3+0x10c>
 80038ba:	0849      	lsrs	r1, r1, #1
 80038bc:	ea5f 0030 	movs.w	r0, r0, rrx
 80038c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80038c4:	f104 0401 	add.w	r4, r4, #1
 80038c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80038cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80038d0:	f080 809a 	bcs.w	8003a08 <__adddf3+0x240>
 80038d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80038d8:	bf08      	it	eq
 80038da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80038de:	f150 0000 	adcs.w	r0, r0, #0
 80038e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80038e6:	ea41 0105 	orr.w	r1, r1, r5
 80038ea:	bd30      	pop	{r4, r5, pc}
 80038ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80038f0:	4140      	adcs	r0, r0
 80038f2:	eb41 0101 	adc.w	r1, r1, r1
 80038f6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80038fa:	f1a4 0401 	sub.w	r4, r4, #1
 80038fe:	d1e9      	bne.n	80038d4 <__adddf3+0x10c>
 8003900:	f091 0f00 	teq	r1, #0
 8003904:	bf04      	itt	eq
 8003906:	4601      	moveq	r1, r0
 8003908:	2000      	moveq	r0, #0
 800390a:	fab1 f381 	clz	r3, r1
 800390e:	bf08      	it	eq
 8003910:	3320      	addeq	r3, #32
 8003912:	f1a3 030b 	sub.w	r3, r3, #11
 8003916:	f1b3 0220 	subs.w	r2, r3, #32
 800391a:	da0c      	bge.n	8003936 <__adddf3+0x16e>
 800391c:	320c      	adds	r2, #12
 800391e:	dd08      	ble.n	8003932 <__adddf3+0x16a>
 8003920:	f102 0c14 	add.w	ip, r2, #20
 8003924:	f1c2 020c 	rsb	r2, r2, #12
 8003928:	fa01 f00c 	lsl.w	r0, r1, ip
 800392c:	fa21 f102 	lsr.w	r1, r1, r2
 8003930:	e00c      	b.n	800394c <__adddf3+0x184>
 8003932:	f102 0214 	add.w	r2, r2, #20
 8003936:	bfd8      	it	le
 8003938:	f1c2 0c20 	rsble	ip, r2, #32
 800393c:	fa01 f102 	lsl.w	r1, r1, r2
 8003940:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003944:	bfdc      	itt	le
 8003946:	ea41 010c 	orrle.w	r1, r1, ip
 800394a:	4090      	lslle	r0, r2
 800394c:	1ae4      	subs	r4, r4, r3
 800394e:	bfa2      	ittt	ge
 8003950:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003954:	4329      	orrge	r1, r5
 8003956:	bd30      	popge	{r4, r5, pc}
 8003958:	ea6f 0404 	mvn.w	r4, r4
 800395c:	3c1f      	subs	r4, #31
 800395e:	da1c      	bge.n	800399a <__adddf3+0x1d2>
 8003960:	340c      	adds	r4, #12
 8003962:	dc0e      	bgt.n	8003982 <__adddf3+0x1ba>
 8003964:	f104 0414 	add.w	r4, r4, #20
 8003968:	f1c4 0220 	rsb	r2, r4, #32
 800396c:	fa20 f004 	lsr.w	r0, r0, r4
 8003970:	fa01 f302 	lsl.w	r3, r1, r2
 8003974:	ea40 0003 	orr.w	r0, r0, r3
 8003978:	fa21 f304 	lsr.w	r3, r1, r4
 800397c:	ea45 0103 	orr.w	r1, r5, r3
 8003980:	bd30      	pop	{r4, r5, pc}
 8003982:	f1c4 040c 	rsb	r4, r4, #12
 8003986:	f1c4 0220 	rsb	r2, r4, #32
 800398a:	fa20 f002 	lsr.w	r0, r0, r2
 800398e:	fa01 f304 	lsl.w	r3, r1, r4
 8003992:	ea40 0003 	orr.w	r0, r0, r3
 8003996:	4629      	mov	r1, r5
 8003998:	bd30      	pop	{r4, r5, pc}
 800399a:	fa21 f004 	lsr.w	r0, r1, r4
 800399e:	4629      	mov	r1, r5
 80039a0:	bd30      	pop	{r4, r5, pc}
 80039a2:	f094 0f00 	teq	r4, #0
 80039a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80039aa:	bf06      	itte	eq
 80039ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80039b0:	3401      	addeq	r4, #1
 80039b2:	3d01      	subne	r5, #1
 80039b4:	e74e      	b.n	8003854 <__adddf3+0x8c>
 80039b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80039ba:	bf18      	it	ne
 80039bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80039c0:	d029      	beq.n	8003a16 <__adddf3+0x24e>
 80039c2:	ea94 0f05 	teq	r4, r5
 80039c6:	bf08      	it	eq
 80039c8:	ea90 0f02 	teqeq	r0, r2
 80039cc:	d005      	beq.n	80039da <__adddf3+0x212>
 80039ce:	ea54 0c00 	orrs.w	ip, r4, r0
 80039d2:	bf04      	itt	eq
 80039d4:	4619      	moveq	r1, r3
 80039d6:	4610      	moveq	r0, r2
 80039d8:	bd30      	pop	{r4, r5, pc}
 80039da:	ea91 0f03 	teq	r1, r3
 80039de:	bf1e      	ittt	ne
 80039e0:	2100      	movne	r1, #0
 80039e2:	2000      	movne	r0, #0
 80039e4:	bd30      	popne	{r4, r5, pc}
 80039e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80039ea:	d105      	bne.n	80039f8 <__adddf3+0x230>
 80039ec:	0040      	lsls	r0, r0, #1
 80039ee:	4149      	adcs	r1, r1
 80039f0:	bf28      	it	cs
 80039f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80039f6:	bd30      	pop	{r4, r5, pc}
 80039f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80039fc:	bf3c      	itt	cc
 80039fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003a02:	bd30      	popcc	{r4, r5, pc}
 8003a04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003a08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003a0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a10:	f04f 0000 	mov.w	r0, #0
 8003a14:	bd30      	pop	{r4, r5, pc}
 8003a16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003a1a:	bf1a      	itte	ne
 8003a1c:	4619      	movne	r1, r3
 8003a1e:	4610      	movne	r0, r2
 8003a20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003a24:	bf1c      	itt	ne
 8003a26:	460b      	movne	r3, r1
 8003a28:	4602      	movne	r2, r0
 8003a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003a2e:	bf06      	itte	eq
 8003a30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003a34:	ea91 0f03 	teqeq	r1, r3
 8003a38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003a3c:	bd30      	pop	{r4, r5, pc}
 8003a3e:	bf00      	nop

08003a40 <__aeabi_ui2d>:
 8003a40:	f090 0f00 	teq	r0, #0
 8003a44:	bf04      	itt	eq
 8003a46:	2100      	moveq	r1, #0
 8003a48:	4770      	bxeq	lr
 8003a4a:	b530      	push	{r4, r5, lr}
 8003a4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003a50:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003a54:	f04f 0500 	mov.w	r5, #0
 8003a58:	f04f 0100 	mov.w	r1, #0
 8003a5c:	e750      	b.n	8003900 <__adddf3+0x138>
 8003a5e:	bf00      	nop

08003a60 <__aeabi_i2d>:
 8003a60:	f090 0f00 	teq	r0, #0
 8003a64:	bf04      	itt	eq
 8003a66:	2100      	moveq	r1, #0
 8003a68:	4770      	bxeq	lr
 8003a6a:	b530      	push	{r4, r5, lr}
 8003a6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003a70:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003a74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003a78:	bf48      	it	mi
 8003a7a:	4240      	negmi	r0, r0
 8003a7c:	f04f 0100 	mov.w	r1, #0
 8003a80:	e73e      	b.n	8003900 <__adddf3+0x138>
 8003a82:	bf00      	nop

08003a84 <__aeabi_f2d>:
 8003a84:	0042      	lsls	r2, r0, #1
 8003a86:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003a8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8003a8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003a92:	bf1f      	itttt	ne
 8003a94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003a98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003a9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003aa0:	4770      	bxne	lr
 8003aa2:	f092 0f00 	teq	r2, #0
 8003aa6:	bf14      	ite	ne
 8003aa8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003aac:	4770      	bxeq	lr
 8003aae:	b530      	push	{r4, r5, lr}
 8003ab0:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003ab4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003ab8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003abc:	e720      	b.n	8003900 <__adddf3+0x138>
 8003abe:	bf00      	nop

08003ac0 <__aeabi_ul2d>:
 8003ac0:	ea50 0201 	orrs.w	r2, r0, r1
 8003ac4:	bf08      	it	eq
 8003ac6:	4770      	bxeq	lr
 8003ac8:	b530      	push	{r4, r5, lr}
 8003aca:	f04f 0500 	mov.w	r5, #0
 8003ace:	e00a      	b.n	8003ae6 <__aeabi_l2d+0x16>

08003ad0 <__aeabi_l2d>:
 8003ad0:	ea50 0201 	orrs.w	r2, r0, r1
 8003ad4:	bf08      	it	eq
 8003ad6:	4770      	bxeq	lr
 8003ad8:	b530      	push	{r4, r5, lr}
 8003ada:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003ade:	d502      	bpl.n	8003ae6 <__aeabi_l2d+0x16>
 8003ae0:	4240      	negs	r0, r0
 8003ae2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003ae6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003aea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003aee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003af2:	f43f aedc 	beq.w	80038ae <__adddf3+0xe6>
 8003af6:	f04f 0203 	mov.w	r2, #3
 8003afa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003afe:	bf18      	it	ne
 8003b00:	3203      	addne	r2, #3
 8003b02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003b06:	bf18      	it	ne
 8003b08:	3203      	addne	r2, #3
 8003b0a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003b0e:	f1c2 0320 	rsb	r3, r2, #32
 8003b12:	fa00 fc03 	lsl.w	ip, r0, r3
 8003b16:	fa20 f002 	lsr.w	r0, r0, r2
 8003b1a:	fa01 fe03 	lsl.w	lr, r1, r3
 8003b1e:	ea40 000e 	orr.w	r0, r0, lr
 8003b22:	fa21 f102 	lsr.w	r1, r1, r2
 8003b26:	4414      	add	r4, r2
 8003b28:	e6c1      	b.n	80038ae <__adddf3+0xe6>
 8003b2a:	bf00      	nop

08003b2c <__aeabi_dmul>:
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003b32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003b36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003b3a:	bf1d      	ittte	ne
 8003b3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003b40:	ea94 0f0c 	teqne	r4, ip
 8003b44:	ea95 0f0c 	teqne	r5, ip
 8003b48:	f000 f8de 	bleq	8003d08 <__aeabi_dmul+0x1dc>
 8003b4c:	442c      	add	r4, r5
 8003b4e:	ea81 0603 	eor.w	r6, r1, r3
 8003b52:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8003b56:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003b5a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003b5e:	bf18      	it	ne
 8003b60:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003b64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003b68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b6c:	d038      	beq.n	8003be0 <__aeabi_dmul+0xb4>
 8003b6e:	fba0 ce02 	umull	ip, lr, r0, r2
 8003b72:	f04f 0500 	mov.w	r5, #0
 8003b76:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003b7a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003b7e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003b82:	f04f 0600 	mov.w	r6, #0
 8003b86:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003b8a:	f09c 0f00 	teq	ip, #0
 8003b8e:	bf18      	it	ne
 8003b90:	f04e 0e01 	orrne.w	lr, lr, #1
 8003b94:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003b98:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003b9c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003ba0:	d204      	bcs.n	8003bac <__aeabi_dmul+0x80>
 8003ba2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003ba6:	416d      	adcs	r5, r5
 8003ba8:	eb46 0606 	adc.w	r6, r6, r6
 8003bac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003bb0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003bb4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003bb8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003bbc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003bc0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003bc4:	bf88      	it	hi
 8003bc6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003bca:	d81e      	bhi.n	8003c0a <__aeabi_dmul+0xde>
 8003bcc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003bd0:	bf08      	it	eq
 8003bd2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003bd6:	f150 0000 	adcs.w	r0, r0, #0
 8003bda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003bde:	bd70      	pop	{r4, r5, r6, pc}
 8003be0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003be4:	ea46 0101 	orr.w	r1, r6, r1
 8003be8:	ea40 0002 	orr.w	r0, r0, r2
 8003bec:	ea81 0103 	eor.w	r1, r1, r3
 8003bf0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003bf4:	bfc2      	ittt	gt
 8003bf6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003bfa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003bfe:	bd70      	popgt	{r4, r5, r6, pc}
 8003c00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003c04:	f04f 0e00 	mov.w	lr, #0
 8003c08:	3c01      	subs	r4, #1
 8003c0a:	f300 80ab 	bgt.w	8003d64 <__aeabi_dmul+0x238>
 8003c0e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8003c12:	bfde      	ittt	le
 8003c14:	2000      	movle	r0, #0
 8003c16:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8003c1a:	bd70      	pople	{r4, r5, r6, pc}
 8003c1c:	f1c4 0400 	rsb	r4, r4, #0
 8003c20:	3c20      	subs	r4, #32
 8003c22:	da35      	bge.n	8003c90 <__aeabi_dmul+0x164>
 8003c24:	340c      	adds	r4, #12
 8003c26:	dc1b      	bgt.n	8003c60 <__aeabi_dmul+0x134>
 8003c28:	f104 0414 	add.w	r4, r4, #20
 8003c2c:	f1c4 0520 	rsb	r5, r4, #32
 8003c30:	fa00 f305 	lsl.w	r3, r0, r5
 8003c34:	fa20 f004 	lsr.w	r0, r0, r4
 8003c38:	fa01 f205 	lsl.w	r2, r1, r5
 8003c3c:	ea40 0002 	orr.w	r0, r0, r2
 8003c40:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8003c44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003c48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003c4c:	fa21 f604 	lsr.w	r6, r1, r4
 8003c50:	eb42 0106 	adc.w	r1, r2, r6
 8003c54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003c58:	bf08      	it	eq
 8003c5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	f1c4 040c 	rsb	r4, r4, #12
 8003c64:	f1c4 0520 	rsb	r5, r4, #32
 8003c68:	fa00 f304 	lsl.w	r3, r0, r4
 8003c6c:	fa20 f005 	lsr.w	r0, r0, r5
 8003c70:	fa01 f204 	lsl.w	r2, r1, r4
 8003c74:	ea40 0002 	orr.w	r0, r0, r2
 8003c78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003c7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003c80:	f141 0100 	adc.w	r1, r1, #0
 8003c84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003c88:	bf08      	it	eq
 8003c8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003c8e:	bd70      	pop	{r4, r5, r6, pc}
 8003c90:	f1c4 0520 	rsb	r5, r4, #32
 8003c94:	fa00 f205 	lsl.w	r2, r0, r5
 8003c98:	ea4e 0e02 	orr.w	lr, lr, r2
 8003c9c:	fa20 f304 	lsr.w	r3, r0, r4
 8003ca0:	fa01 f205 	lsl.w	r2, r1, r5
 8003ca4:	ea43 0302 	orr.w	r3, r3, r2
 8003ca8:	fa21 f004 	lsr.w	r0, r1, r4
 8003cac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003cb0:	fa21 f204 	lsr.w	r2, r1, r4
 8003cb4:	ea20 0002 	bic.w	r0, r0, r2
 8003cb8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003cbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003cc0:	bf08      	it	eq
 8003cc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}
 8003cc8:	f094 0f00 	teq	r4, #0
 8003ccc:	d10f      	bne.n	8003cee <__aeabi_dmul+0x1c2>
 8003cce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003cd2:	0040      	lsls	r0, r0, #1
 8003cd4:	eb41 0101 	adc.w	r1, r1, r1
 8003cd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003cdc:	bf08      	it	eq
 8003cde:	3c01      	subeq	r4, #1
 8003ce0:	d0f7      	beq.n	8003cd2 <__aeabi_dmul+0x1a6>
 8003ce2:	ea41 0106 	orr.w	r1, r1, r6
 8003ce6:	f095 0f00 	teq	r5, #0
 8003cea:	bf18      	it	ne
 8003cec:	4770      	bxne	lr
 8003cee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8003cf2:	0052      	lsls	r2, r2, #1
 8003cf4:	eb43 0303 	adc.w	r3, r3, r3
 8003cf8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003cfc:	bf08      	it	eq
 8003cfe:	3d01      	subeq	r5, #1
 8003d00:	d0f7      	beq.n	8003cf2 <__aeabi_dmul+0x1c6>
 8003d02:	ea43 0306 	orr.w	r3, r3, r6
 8003d06:	4770      	bx	lr
 8003d08:	ea94 0f0c 	teq	r4, ip
 8003d0c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003d10:	bf18      	it	ne
 8003d12:	ea95 0f0c 	teqne	r5, ip
 8003d16:	d00c      	beq.n	8003d32 <__aeabi_dmul+0x206>
 8003d18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003d1c:	bf18      	it	ne
 8003d1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003d22:	d1d1      	bne.n	8003cc8 <__aeabi_dmul+0x19c>
 8003d24:	ea81 0103 	eor.w	r1, r1, r3
 8003d28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003d2c:	f04f 0000 	mov.w	r0, #0
 8003d30:	bd70      	pop	{r4, r5, r6, pc}
 8003d32:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003d36:	bf06      	itte	eq
 8003d38:	4610      	moveq	r0, r2
 8003d3a:	4619      	moveq	r1, r3
 8003d3c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003d40:	d019      	beq.n	8003d76 <__aeabi_dmul+0x24a>
 8003d42:	ea94 0f0c 	teq	r4, ip
 8003d46:	d102      	bne.n	8003d4e <__aeabi_dmul+0x222>
 8003d48:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8003d4c:	d113      	bne.n	8003d76 <__aeabi_dmul+0x24a>
 8003d4e:	ea95 0f0c 	teq	r5, ip
 8003d52:	d105      	bne.n	8003d60 <__aeabi_dmul+0x234>
 8003d54:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8003d58:	bf1c      	itt	ne
 8003d5a:	4610      	movne	r0, r2
 8003d5c:	4619      	movne	r1, r3
 8003d5e:	d10a      	bne.n	8003d76 <__aeabi_dmul+0x24a>
 8003d60:	ea81 0103 	eor.w	r1, r1, r3
 8003d64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003d68:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003d6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d70:	f04f 0000 	mov.w	r0, #0
 8003d74:	bd70      	pop	{r4, r5, r6, pc}
 8003d76:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003d7a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003d7e:	bd70      	pop	{r4, r5, r6, pc}

08003d80 <__aeabi_ddiv>:
 8003d80:	b570      	push	{r4, r5, r6, lr}
 8003d82:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003d86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003d8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003d8e:	bf1d      	ittte	ne
 8003d90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003d94:	ea94 0f0c 	teqne	r4, ip
 8003d98:	ea95 0f0c 	teqne	r5, ip
 8003d9c:	f000 f8a7 	bleq	8003eee <__aeabi_ddiv+0x16e>
 8003da0:	eba4 0405 	sub.w	r4, r4, r5
 8003da4:	ea81 0e03 	eor.w	lr, r1, r3
 8003da8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003dac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003db0:	f000 8088 	beq.w	8003ec4 <__aeabi_ddiv+0x144>
 8003db4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003db8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003dbc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003dc0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003dc4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003dc8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003dcc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003dd0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003dd4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003dd8:	429d      	cmp	r5, r3
 8003dda:	bf08      	it	eq
 8003ddc:	4296      	cmpeq	r6, r2
 8003dde:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8003de2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8003de6:	d202      	bcs.n	8003dee <__aeabi_ddiv+0x6e>
 8003de8:	085b      	lsrs	r3, r3, #1
 8003dea:	ea4f 0232 	mov.w	r2, r2, rrx
 8003dee:	1ab6      	subs	r6, r6, r2
 8003df0:	eb65 0503 	sbc.w	r5, r5, r3
 8003df4:	085b      	lsrs	r3, r3, #1
 8003df6:	ea4f 0232 	mov.w	r2, r2, rrx
 8003dfa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003dfe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8003e02:	ebb6 0e02 	subs.w	lr, r6, r2
 8003e06:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003e0a:	bf22      	ittt	cs
 8003e0c:	1ab6      	subcs	r6, r6, r2
 8003e0e:	4675      	movcs	r5, lr
 8003e10:	ea40 000c 	orrcs.w	r0, r0, ip
 8003e14:	085b      	lsrs	r3, r3, #1
 8003e16:	ea4f 0232 	mov.w	r2, r2, rrx
 8003e1a:	ebb6 0e02 	subs.w	lr, r6, r2
 8003e1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003e22:	bf22      	ittt	cs
 8003e24:	1ab6      	subcs	r6, r6, r2
 8003e26:	4675      	movcs	r5, lr
 8003e28:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8003e32:	ebb6 0e02 	subs.w	lr, r6, r2
 8003e36:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003e3a:	bf22      	ittt	cs
 8003e3c:	1ab6      	subcs	r6, r6, r2
 8003e3e:	4675      	movcs	r5, lr
 8003e40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	ea4f 0232 	mov.w	r2, r2, rrx
 8003e4a:	ebb6 0e02 	subs.w	lr, r6, r2
 8003e4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003e52:	bf22      	ittt	cs
 8003e54:	1ab6      	subcs	r6, r6, r2
 8003e56:	4675      	movcs	r5, lr
 8003e58:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003e5c:	ea55 0e06 	orrs.w	lr, r5, r6
 8003e60:	d018      	beq.n	8003e94 <__aeabi_ddiv+0x114>
 8003e62:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8003e66:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8003e6a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8003e6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003e72:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8003e76:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003e7a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8003e7e:	d1c0      	bne.n	8003e02 <__aeabi_ddiv+0x82>
 8003e80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003e84:	d10b      	bne.n	8003e9e <__aeabi_ddiv+0x11e>
 8003e86:	ea41 0100 	orr.w	r1, r1, r0
 8003e8a:	f04f 0000 	mov.w	r0, #0
 8003e8e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003e92:	e7b6      	b.n	8003e02 <__aeabi_ddiv+0x82>
 8003e94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003e98:	bf04      	itt	eq
 8003e9a:	4301      	orreq	r1, r0
 8003e9c:	2000      	moveq	r0, #0
 8003e9e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003ea2:	bf88      	it	hi
 8003ea4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003ea8:	f63f aeaf 	bhi.w	8003c0a <__aeabi_dmul+0xde>
 8003eac:	ebb5 0c03 	subs.w	ip, r5, r3
 8003eb0:	bf04      	itt	eq
 8003eb2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8003eb6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003eba:	f150 0000 	adcs.w	r0, r0, #0
 8003ebe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}
 8003ec4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8003ec8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003ecc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8003ed0:	bfc2      	ittt	gt
 8003ed2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003ed6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003eda:	bd70      	popgt	{r4, r5, r6, pc}
 8003edc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003ee0:	f04f 0e00 	mov.w	lr, #0
 8003ee4:	3c01      	subs	r4, #1
 8003ee6:	e690      	b.n	8003c0a <__aeabi_dmul+0xde>
 8003ee8:	ea45 0e06 	orr.w	lr, r5, r6
 8003eec:	e68d      	b.n	8003c0a <__aeabi_dmul+0xde>
 8003eee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003ef2:	ea94 0f0c 	teq	r4, ip
 8003ef6:	bf08      	it	eq
 8003ef8:	ea95 0f0c 	teqeq	r5, ip
 8003efc:	f43f af3b 	beq.w	8003d76 <__aeabi_dmul+0x24a>
 8003f00:	ea94 0f0c 	teq	r4, ip
 8003f04:	d10a      	bne.n	8003f1c <__aeabi_ddiv+0x19c>
 8003f06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003f0a:	f47f af34 	bne.w	8003d76 <__aeabi_dmul+0x24a>
 8003f0e:	ea95 0f0c 	teq	r5, ip
 8003f12:	f47f af25 	bne.w	8003d60 <__aeabi_dmul+0x234>
 8003f16:	4610      	mov	r0, r2
 8003f18:	4619      	mov	r1, r3
 8003f1a:	e72c      	b.n	8003d76 <__aeabi_dmul+0x24a>
 8003f1c:	ea95 0f0c 	teq	r5, ip
 8003f20:	d106      	bne.n	8003f30 <__aeabi_ddiv+0x1b0>
 8003f22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003f26:	f43f aefd 	beq.w	8003d24 <__aeabi_dmul+0x1f8>
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	e722      	b.n	8003d76 <__aeabi_dmul+0x24a>
 8003f30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003f34:	bf18      	it	ne
 8003f36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003f3a:	f47f aec5 	bne.w	8003cc8 <__aeabi_dmul+0x19c>
 8003f3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8003f42:	f47f af0d 	bne.w	8003d60 <__aeabi_dmul+0x234>
 8003f46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8003f4a:	f47f aeeb 	bne.w	8003d24 <__aeabi_dmul+0x1f8>
 8003f4e:	e712      	b.n	8003d76 <__aeabi_dmul+0x24a>

08003f50 <__gedf2>:
 8003f50:	f04f 3cff 	mov.w	ip, #4294967295
 8003f54:	e006      	b.n	8003f64 <__cmpdf2+0x4>
 8003f56:	bf00      	nop

08003f58 <__ledf2>:
 8003f58:	f04f 0c01 	mov.w	ip, #1
 8003f5c:	e002      	b.n	8003f64 <__cmpdf2+0x4>
 8003f5e:	bf00      	nop

08003f60 <__cmpdf2>:
 8003f60:	f04f 0c01 	mov.w	ip, #1
 8003f64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8003f68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003f6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003f70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003f74:	bf18      	it	ne
 8003f76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8003f7a:	d01b      	beq.n	8003fb4 <__cmpdf2+0x54>
 8003f7c:	b001      	add	sp, #4
 8003f7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8003f82:	bf0c      	ite	eq
 8003f84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8003f88:	ea91 0f03 	teqne	r1, r3
 8003f8c:	bf02      	ittt	eq
 8003f8e:	ea90 0f02 	teqeq	r0, r2
 8003f92:	2000      	moveq	r0, #0
 8003f94:	4770      	bxeq	lr
 8003f96:	f110 0f00 	cmn.w	r0, #0
 8003f9a:	ea91 0f03 	teq	r1, r3
 8003f9e:	bf58      	it	pl
 8003fa0:	4299      	cmppl	r1, r3
 8003fa2:	bf08      	it	eq
 8003fa4:	4290      	cmpeq	r0, r2
 8003fa6:	bf2c      	ite	cs
 8003fa8:	17d8      	asrcs	r0, r3, #31
 8003faa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8003fae:	f040 0001 	orr.w	r0, r0, #1
 8003fb2:	4770      	bx	lr
 8003fb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003fb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003fbc:	d102      	bne.n	8003fc4 <__cmpdf2+0x64>
 8003fbe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8003fc2:	d107      	bne.n	8003fd4 <__cmpdf2+0x74>
 8003fc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003fc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003fcc:	d1d6      	bne.n	8003f7c <__cmpdf2+0x1c>
 8003fce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8003fd2:	d0d3      	beq.n	8003f7c <__cmpdf2+0x1c>
 8003fd4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop

08003fdc <__aeabi_cdrcmple>:
 8003fdc:	4684      	mov	ip, r0
 8003fde:	4610      	mov	r0, r2
 8003fe0:	4662      	mov	r2, ip
 8003fe2:	468c      	mov	ip, r1
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4663      	mov	r3, ip
 8003fe8:	e000      	b.n	8003fec <__aeabi_cdcmpeq>
 8003fea:	bf00      	nop

08003fec <__aeabi_cdcmpeq>:
 8003fec:	b501      	push	{r0, lr}
 8003fee:	f7ff ffb7 	bl	8003f60 <__cmpdf2>
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	bf48      	it	mi
 8003ff6:	f110 0f00 	cmnmi.w	r0, #0
 8003ffa:	bd01      	pop	{r0, pc}

08003ffc <__aeabi_dcmpeq>:
 8003ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004000:	f7ff fff4 	bl	8003fec <__aeabi_cdcmpeq>
 8004004:	bf0c      	ite	eq
 8004006:	2001      	moveq	r0, #1
 8004008:	2000      	movne	r0, #0
 800400a:	f85d fb08 	ldr.w	pc, [sp], #8
 800400e:	bf00      	nop

08004010 <__aeabi_dcmplt>:
 8004010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004014:	f7ff ffea 	bl	8003fec <__aeabi_cdcmpeq>
 8004018:	bf34      	ite	cc
 800401a:	2001      	movcc	r0, #1
 800401c:	2000      	movcs	r0, #0
 800401e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004022:	bf00      	nop

08004024 <__aeabi_dcmple>:
 8004024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004028:	f7ff ffe0 	bl	8003fec <__aeabi_cdcmpeq>
 800402c:	bf94      	ite	ls
 800402e:	2001      	movls	r0, #1
 8004030:	2000      	movhi	r0, #0
 8004032:	f85d fb08 	ldr.w	pc, [sp], #8
 8004036:	bf00      	nop

08004038 <__aeabi_dcmpge>:
 8004038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800403c:	f7ff ffce 	bl	8003fdc <__aeabi_cdrcmple>
 8004040:	bf94      	ite	ls
 8004042:	2001      	movls	r0, #1
 8004044:	2000      	movhi	r0, #0
 8004046:	f85d fb08 	ldr.w	pc, [sp], #8
 800404a:	bf00      	nop

0800404c <__aeabi_dcmpgt>:
 800404c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004050:	f7ff ffc4 	bl	8003fdc <__aeabi_cdrcmple>
 8004054:	bf34      	ite	cc
 8004056:	2001      	movcc	r0, #1
 8004058:	2000      	movcs	r0, #0
 800405a:	f85d fb08 	ldr.w	pc, [sp], #8
 800405e:	bf00      	nop

08004060 <__aeabi_d2iz>:
 8004060:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004064:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004068:	d215      	bcs.n	8004096 <__aeabi_d2iz+0x36>
 800406a:	d511      	bpl.n	8004090 <__aeabi_d2iz+0x30>
 800406c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004070:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004074:	d912      	bls.n	800409c <__aeabi_d2iz+0x3c>
 8004076:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800407a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800407e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004082:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004086:	fa23 f002 	lsr.w	r0, r3, r2
 800408a:	bf18      	it	ne
 800408c:	4240      	negne	r0, r0
 800408e:	4770      	bx	lr
 8004090:	f04f 0000 	mov.w	r0, #0
 8004094:	4770      	bx	lr
 8004096:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800409a:	d105      	bne.n	80040a8 <__aeabi_d2iz+0x48>
 800409c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80040a0:	bf08      	it	eq
 80040a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80040a6:	4770      	bx	lr
 80040a8:	f04f 0000 	mov.w	r0, #0
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop

080040b0 <Reset_Handler>:
 80040b0:	2100      	movs	r1, #0
 80040b2:	e003      	b.n	80040bc <LoopCopyDataInit>

080040b4 <CopyDataInit>:
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <LoopFillZerobss+0x10>)
 80040b6:	585b      	ldr	r3, [r3, r1]
 80040b8:	5043      	str	r3, [r0, r1]
 80040ba:	3104      	adds	r1, #4

080040bc <LoopCopyDataInit>:
 80040bc:	4809      	ldr	r0, [pc, #36]	; (80040e4 <LoopFillZerobss+0x14>)
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <LoopFillZerobss+0x18>)
 80040c0:	1842      	adds	r2, r0, r1
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d3f6      	bcc.n	80040b4 <CopyDataInit>
 80040c6:	4a09      	ldr	r2, [pc, #36]	; (80040ec <LoopFillZerobss+0x1c>)
 80040c8:	e002      	b.n	80040d0 <LoopFillZerobss>

080040ca <FillZerobss>:
 80040ca:	2300      	movs	r3, #0
 80040cc:	f842 3b04 	str.w	r3, [r2], #4

080040d0 <LoopFillZerobss>:
 80040d0:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <LoopFillZerobss+0x20>)
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d3f9      	bcc.n	80040ca <FillZerobss>
 80040d6:	f7fe fffd 	bl	80030d4 <SystemInit>
 80040da:	f7fe fe05 	bl	8002ce8 <main>
 80040de:	4770      	bx	lr
 80040e0:	08007558 	.word	0x08007558
 80040e4:	20000000 	.word	0x20000000
 80040e8:	20000604 	.word	0x20000604
 80040ec:	20000604 	.word	0x20000604
 80040f0:	20000c7c 	.word	0x20000c7c

080040f4 <ADC_IRQHandler>:
 80040f4:	e7fe      	b.n	80040f4 <ADC_IRQHandler>
	...

080040f8 <_wrapup_reent>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	4604      	mov	r4, r0
 80040fc:	b908      	cbnz	r0, 8004102 <_wrapup_reent+0xa>
 80040fe:	4b09      	ldr	r3, [pc, #36]	; (8004124 <_wrapup_reent+0x2c>)
 8004100:	681c      	ldr	r4, [r3, #0]
 8004102:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8004106:	685d      	ldr	r5, [r3, #4]
 8004108:	1c6e      	adds	r6, r5, #1
 800410a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800410e:	e001      	b.n	8004114 <_wrapup_reent+0x1c>
 8004110:	6873      	ldr	r3, [r6, #4]
 8004112:	4798      	blx	r3
 8004114:	3e04      	subs	r6, #4
 8004116:	3d01      	subs	r5, #1
 8004118:	d5fa      	bpl.n	8004110 <_wrapup_reent+0x18>
 800411a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800411c:	b10b      	cbz	r3, 8004122 <_wrapup_reent+0x2a>
 800411e:	4620      	mov	r0, r4
 8004120:	4798      	blx	r3
 8004122:	bd70      	pop	{r4, r5, r6, pc}
 8004124:	200001e0 	.word	0x200001e0

08004128 <cleanup_glue>:
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	460c      	mov	r4, r1
 800412c:	6809      	ldr	r1, [r1, #0]
 800412e:	4605      	mov	r5, r0
 8004130:	b109      	cbz	r1, 8004136 <cleanup_glue+0xe>
 8004132:	f7ff fff9 	bl	8004128 <cleanup_glue>
 8004136:	4628      	mov	r0, r5
 8004138:	4621      	mov	r1, r4
 800413a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800413e:	f001 bf37 	b.w	8005fb0 <_free_r>
	...

08004144 <_reclaim_reent>:
 8004144:	4b2b      	ldr	r3, [pc, #172]	; (80041f4 <_reclaim_reent+0xb0>)
 8004146:	b570      	push	{r4, r5, r6, lr}
 8004148:	4604      	mov	r4, r0
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4298      	cmp	r0, r3
 800414e:	d04f      	beq.n	80041f0 <_reclaim_reent+0xac>
 8004150:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004152:	b1ab      	cbz	r3, 8004180 <_reclaim_reent+0x3c>
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	b19b      	cbz	r3, 8004180 <_reclaim_reent+0x3c>
 8004158:	2500      	movs	r5, #0
 800415a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	5959      	ldr	r1, [r3, r5]
 8004160:	e004      	b.n	800416c <_reclaim_reent+0x28>
 8004162:	680e      	ldr	r6, [r1, #0]
 8004164:	4620      	mov	r0, r4
 8004166:	f001 ff23 	bl	8005fb0 <_free_r>
 800416a:	4631      	mov	r1, r6
 800416c:	2900      	cmp	r1, #0
 800416e:	d1f8      	bne.n	8004162 <_reclaim_reent+0x1e>
 8004170:	3504      	adds	r5, #4
 8004172:	2d3c      	cmp	r5, #60	; 0x3c
 8004174:	d1f1      	bne.n	800415a <_reclaim_reent+0x16>
 8004176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004178:	4620      	mov	r0, r4
 800417a:	68d9      	ldr	r1, [r3, #12]
 800417c:	f001 ff18 	bl	8005fb0 <_free_r>
 8004180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004182:	6819      	ldr	r1, [r3, #0]
 8004184:	b111      	cbz	r1, 800418c <_reclaim_reent+0x48>
 8004186:	4620      	mov	r0, r4
 8004188:	f001 ff12 	bl	8005fb0 <_free_r>
 800418c:	6961      	ldr	r1, [r4, #20]
 800418e:	b111      	cbz	r1, 8004196 <_reclaim_reent+0x52>
 8004190:	4620      	mov	r0, r4
 8004192:	f001 ff0d 	bl	8005fb0 <_free_r>
 8004196:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004198:	b111      	cbz	r1, 80041a0 <_reclaim_reent+0x5c>
 800419a:	4620      	mov	r0, r4
 800419c:	f001 ff08 	bl	8005fb0 <_free_r>
 80041a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80041a2:	b111      	cbz	r1, 80041aa <_reclaim_reent+0x66>
 80041a4:	4620      	mov	r0, r4
 80041a6:	f001 ff03 	bl	8005fb0 <_free_r>
 80041aa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80041ac:	b111      	cbz	r1, 80041b4 <_reclaim_reent+0x70>
 80041ae:	4620      	mov	r0, r4
 80041b0:	f001 fefe 	bl	8005fb0 <_free_r>
 80041b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80041b6:	b111      	cbz	r1, 80041be <_reclaim_reent+0x7a>
 80041b8:	4620      	mov	r0, r4
 80041ba:	f001 fef9 	bl	8005fb0 <_free_r>
 80041be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80041c0:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80041c4:	b111      	cbz	r1, 80041cc <_reclaim_reent+0x88>
 80041c6:	4620      	mov	r0, r4
 80041c8:	f001 fef2 	bl	8005fb0 <_free_r>
 80041cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041ce:	b111      	cbz	r1, 80041d6 <_reclaim_reent+0x92>
 80041d0:	4620      	mov	r0, r4
 80041d2:	f001 feed 	bl	8005fb0 <_free_r>
 80041d6:	69a3      	ldr	r3, [r4, #24]
 80041d8:	b153      	cbz	r3, 80041f0 <_reclaim_reent+0xac>
 80041da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041dc:	4620      	mov	r0, r4
 80041de:	4798      	blx	r3
 80041e0:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 80041e4:	b121      	cbz	r1, 80041f0 <_reclaim_reent+0xac>
 80041e6:	4620      	mov	r0, r4
 80041e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80041ec:	f7ff bf9c 	b.w	8004128 <cleanup_glue>
 80041f0:	bd70      	pop	{r4, r5, r6, pc}
 80041f2:	bf00      	nop
 80041f4:	200001e0 	.word	0x200001e0

080041f8 <sprintf>:
 80041f8:	b40e      	push	{r1, r2, r3}
 80041fa:	f44f 7102 	mov.w	r1, #520	; 0x208
 80041fe:	b500      	push	{lr}
 8004200:	b09c      	sub	sp, #112	; 0x70
 8004202:	ab1d      	add	r3, sp, #116	; 0x74
 8004204:	f8ad 1010 	strh.w	r1, [sp, #16]
 8004208:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800420c:	9103      	str	r1, [sp, #12]
 800420e:	9106      	str	r1, [sp, #24]
 8004210:	f04f 31ff 	mov.w	r1, #4294967295
 8004214:	f8ad 1012 	strh.w	r1, [sp, #18]
 8004218:	4908      	ldr	r1, [pc, #32]	; (800423c <sprintf+0x44>)
 800421a:	f853 2b04 	ldr.w	r2, [r3], #4
 800421e:	9001      	str	r0, [sp, #4]
 8004220:	9005      	str	r0, [sp, #20]
 8004222:	6808      	ldr	r0, [r1, #0]
 8004224:	a901      	add	r1, sp, #4
 8004226:	931b      	str	r3, [sp, #108]	; 0x6c
 8004228:	f000 f8a4 	bl	8004374 <_svfprintf_r>
 800422c:	9b01      	ldr	r3, [sp, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	701a      	strb	r2, [r3, #0]
 8004232:	b01c      	add	sp, #112	; 0x70
 8004234:	f85d eb04 	ldr.w	lr, [sp], #4
 8004238:	b003      	add	sp, #12
 800423a:	4770      	bx	lr
 800423c:	200001e0 	.word	0x200001e0

08004240 <_sprintf_r>:
 8004240:	b40c      	push	{r2, r3}
 8004242:	f44f 7c02 	mov.w	ip, #520	; 0x208
 8004246:	b500      	push	{lr}
 8004248:	b09d      	sub	sp, #116	; 0x74
 800424a:	ab1e      	add	r3, sp, #120	; 0x78
 800424c:	9101      	str	r1, [sp, #4]
 800424e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004252:	9105      	str	r1, [sp, #20]
 8004254:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004258:	9103      	str	r1, [sp, #12]
 800425a:	9106      	str	r1, [sp, #24]
 800425c:	f04f 31ff 	mov.w	r1, #4294967295
 8004260:	f8ad 1012 	strh.w	r1, [sp, #18]
 8004264:	a901      	add	r1, sp, #4
 8004266:	931b      	str	r3, [sp, #108]	; 0x6c
 8004268:	f8ad c010 	strh.w	ip, [sp, #16]
 800426c:	f000 f882 	bl	8004374 <_svfprintf_r>
 8004270:	9b01      	ldr	r3, [sp, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	b01d      	add	sp, #116	; 0x74
 8004278:	f85d eb04 	ldr.w	lr, [sp], #4
 800427c:	b002      	add	sp, #8
 800427e:	4770      	bx	lr

08004280 <__sprint_r>:
 8004280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004284:	4682      	mov	sl, r0
 8004286:	6890      	ldr	r0, [r2, #8]
 8004288:	460c      	mov	r4, r1
 800428a:	4615      	mov	r5, r2
 800428c:	f8d2 b000 	ldr.w	fp, [r2]
 8004290:	b118      	cbz	r0, 800429a <__sprint_r+0x1a>
 8004292:	2300      	movs	r3, #0
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	461e      	mov	r6, r3
 8004298:	e008      	b.n	80042ac <__sprint_r+0x2c>
 800429a:	6050      	str	r0, [r2, #4]
 800429c:	e068      	b.n	8004370 <__sprint_r+0xf0>
 800429e:	f8db 3000 	ldr.w	r3, [fp]
 80042a2:	f8db 6004 	ldr.w	r6, [fp, #4]
 80042a6:	f10b 0b08 	add.w	fp, fp, #8
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	2e00      	cmp	r6, #0
 80042ae:	d0f6      	beq.n	800429e <__sprint_r+0x1e>
 80042b0:	68a7      	ldr	r7, [r4, #8]
 80042b2:	42be      	cmp	r6, r7
 80042b4:	d349      	bcc.n	800434a <__sprint_r+0xca>
 80042b6:	89a3      	ldrh	r3, [r4, #12]
 80042b8:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80042bc:	d043      	beq.n	8004346 <__sprint_r+0xc6>
 80042be:	6822      	ldr	r2, [r4, #0]
 80042c0:	4650      	mov	r0, sl
 80042c2:	6921      	ldr	r1, [r4, #16]
 80042c4:	ebc1 0902 	rsb	r9, r1, r2
 80042c8:	6962      	ldr	r2, [r4, #20]
 80042ca:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 80042ce:	f109 0201 	add.w	r2, r9, #1
 80042d2:	1992      	adds	r2, r2, r6
 80042d4:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 80042d8:	ea4f 0868 	mov.w	r8, r8, asr #1
 80042dc:	4590      	cmp	r8, r2
 80042de:	bf38      	it	cc
 80042e0:	4690      	movcc	r8, r2
 80042e2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80042e6:	d00f      	beq.n	8004308 <__sprint_r+0x88>
 80042e8:	4641      	mov	r1, r8
 80042ea:	f001 ff73 	bl	80061d4 <_malloc_r>
 80042ee:	4607      	mov	r7, r0
 80042f0:	b198      	cbz	r0, 800431a <__sprint_r+0x9a>
 80042f2:	6921      	ldr	r1, [r4, #16]
 80042f4:	464a      	mov	r2, r9
 80042f6:	f002 f98a 	bl	800660e <memcpy>
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004304:	81a3      	strh	r3, [r4, #12]
 8004306:	e015      	b.n	8004334 <__sprint_r+0xb4>
 8004308:	4642      	mov	r2, r8
 800430a:	f002 fde7 	bl	8006edc <_realloc_r>
 800430e:	4607      	mov	r7, r0
 8004310:	b980      	cbnz	r0, 8004334 <__sprint_r+0xb4>
 8004312:	4650      	mov	r0, sl
 8004314:	6921      	ldr	r1, [r4, #16]
 8004316:	f001 fe4b 	bl	8005fb0 <_free_r>
 800431a:	230c      	movs	r3, #12
 800431c:	f8ca 3000 	str.w	r3, [sl]
 8004320:	89a3      	ldrh	r3, [r4, #12]
 8004322:	f04f 30ff 	mov.w	r0, #4294967295
 8004326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800432a:	81a3      	strh	r3, [r4, #12]
 800432c:	2300      	movs	r3, #0
 800432e:	60ab      	str	r3, [r5, #8]
 8004330:	606b      	str	r3, [r5, #4]
 8004332:	e01d      	b.n	8004370 <__sprint_r+0xf0>
 8004334:	6127      	str	r7, [r4, #16]
 8004336:	444f      	add	r7, r9
 8004338:	6027      	str	r7, [r4, #0]
 800433a:	4637      	mov	r7, r6
 800433c:	ebc9 0308 	rsb	r3, r9, r8
 8004340:	f8c4 8014 	str.w	r8, [r4, #20]
 8004344:	60a3      	str	r3, [r4, #8]
 8004346:	42be      	cmp	r6, r7
 8004348:	d200      	bcs.n	800434c <__sprint_r+0xcc>
 800434a:	4637      	mov	r7, r6
 800434c:	463a      	mov	r2, r7
 800434e:	6820      	ldr	r0, [r4, #0]
 8004350:	9901      	ldr	r1, [sp, #4]
 8004352:	f002 f969 	bl	8006628 <memmove>
 8004356:	68a3      	ldr	r3, [r4, #8]
 8004358:	1bdb      	subs	r3, r3, r7
 800435a:	60a3      	str	r3, [r4, #8]
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	19df      	adds	r7, r3, r7
 8004360:	68ab      	ldr	r3, [r5, #8]
 8004362:	6027      	str	r7, [r4, #0]
 8004364:	1b9e      	subs	r6, r3, r6
 8004366:	60ae      	str	r6, [r5, #8]
 8004368:	2e00      	cmp	r6, #0
 800436a:	d198      	bne.n	800429e <__sprint_r+0x1e>
 800436c:	4630      	mov	r0, r6
 800436e:	606e      	str	r6, [r5, #4]
 8004370:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004374 <_svfprintf_r>:
 8004374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004378:	b0bd      	sub	sp, #244	; 0xf4
 800437a:	460f      	mov	r7, r1
 800437c:	461d      	mov	r5, r3
 800437e:	4680      	mov	r8, r0
 8004380:	4616      	mov	r6, r2
 8004382:	f001 fee9 	bl	8006158 <_localeconv_r>
 8004386:	89bb      	ldrh	r3, [r7, #12]
 8004388:	f013 0f80 	tst.w	r3, #128	; 0x80
 800438c:	6800      	ldr	r0, [r0, #0]
 800438e:	9010      	str	r0, [sp, #64]	; 0x40
 8004390:	d010      	beq.n	80043b4 <_svfprintf_r+0x40>
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	b973      	cbnz	r3, 80043b4 <_svfprintf_r+0x40>
 8004396:	4640      	mov	r0, r8
 8004398:	2140      	movs	r1, #64	; 0x40
 800439a:	f001 ff1b 	bl	80061d4 <_malloc_r>
 800439e:	6038      	str	r0, [r7, #0]
 80043a0:	6138      	str	r0, [r7, #16]
 80043a2:	b928      	cbnz	r0, 80043b0 <_svfprintf_r+0x3c>
 80043a4:	230c      	movs	r3, #12
 80043a6:	3801      	subs	r0, #1
 80043a8:	f8c8 3000 	str.w	r3, [r8]
 80043ac:	f000 bf5b 	b.w	8005266 <_svfprintf_r+0xef2>
 80043b0:	2340      	movs	r3, #64	; 0x40
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	2200      	movs	r2, #0
 80043b6:	2100      	movs	r1, #0
 80043b8:	2300      	movs	r3, #0
 80043ba:	ac15      	add	r4, sp, #84	; 0x54
 80043bc:	9131      	str	r1, [sp, #196]	; 0xc4
 80043be:	942f      	str	r4, [sp, #188]	; 0xbc
 80043c0:	9130      	str	r1, [sp, #192]	; 0xc0
 80043c2:	920c      	str	r2, [sp, #48]	; 0x30
 80043c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80043c6:	9609      	str	r6, [sp, #36]	; 0x24
 80043c8:	9208      	str	r2, [sp, #32]
 80043ca:	9211      	str	r2, [sp, #68]	; 0x44
 80043cc:	9212      	str	r2, [sp, #72]	; 0x48
 80043ce:	920e      	str	r2, [sp, #56]	; 0x38
 80043d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80043d2:	e000      	b.n	80043d6 <_svfprintf_r+0x62>
 80043d4:	3601      	adds	r6, #1
 80043d6:	7833      	ldrb	r3, [r6, #0]
 80043d8:	b10b      	cbz	r3, 80043de <_svfprintf_r+0x6a>
 80043da:	2b25      	cmp	r3, #37	; 0x25
 80043dc:	d1fa      	bne.n	80043d4 <_svfprintf_r+0x60>
 80043de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80043e0:	ebb6 0a01 	subs.w	sl, r6, r1
 80043e4:	d018      	beq.n	8004418 <_svfprintf_r+0xa4>
 80043e6:	f8c4 a004 	str.w	sl, [r4, #4]
 80043ea:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80043ec:	6021      	str	r1, [r4, #0]
 80043ee:	4453      	add	r3, sl
 80043f0:	9331      	str	r3, [sp, #196]	; 0xc4
 80043f2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80043f4:	3301      	adds	r3, #1
 80043f6:	9330      	str	r3, [sp, #192]	; 0xc0
 80043f8:	2b07      	cmp	r3, #7
 80043fa:	dc01      	bgt.n	8004400 <_svfprintf_r+0x8c>
 80043fc:	3408      	adds	r4, #8
 80043fe:	e008      	b.n	8004412 <_svfprintf_r+0x9e>
 8004400:	4640      	mov	r0, r8
 8004402:	4639      	mov	r1, r7
 8004404:	aa2f      	add	r2, sp, #188	; 0xbc
 8004406:	f7ff ff3b 	bl	8004280 <__sprint_r>
 800440a:	2800      	cmp	r0, #0
 800440c:	f040 8723 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004410:	ac15      	add	r4, sp, #84	; 0x54
 8004412:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004414:	4452      	add	r2, sl
 8004416:	920e      	str	r2, [sp, #56]	; 0x38
 8004418:	7833      	ldrb	r3, [r6, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8714 	beq.w	8005248 <_svfprintf_r+0xed4>
 8004420:	2300      	movs	r3, #0
 8004422:	3601      	adds	r6, #1
 8004424:	9609      	str	r6, [sp, #36]	; 0x24
 8004426:	461e      	mov	r6, r3
 8004428:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
 800442c:	f04f 3cff 	mov.w	ip, #4294967295
 8004430:	930a      	str	r3, [sp, #40]	; 0x28
 8004432:	4632      	mov	r2, r6
 8004434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004436:	e001      	b.n	800443c <_svfprintf_r+0xc8>
 8004438:	4629      	mov	r1, r5
 800443a:	460d      	mov	r5, r1
 800443c:	f813 ab01 	ldrb.w	sl, [r3], #1
 8004440:	f1aa 0120 	sub.w	r1, sl, #32
 8004444:	2958      	cmp	r1, #88	; 0x58
 8004446:	f200 8367 	bhi.w	8004b18 <_svfprintf_r+0x7a4>
 800444a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800444e:	005f      	.short	0x005f
 8004450:	03650365 	.word	0x03650365
 8004454:	03650065 	.word	0x03650065
 8004458:	03650365 	.word	0x03650365
 800445c:	03650365 	.word	0x03650365
 8004460:	00680365 	.word	0x00680365
 8004464:	03650070 	.word	0x03650070
 8004468:	0074005d 	.word	0x0074005d
 800446c:	00910365 	.word	0x00910365
 8004470:	00940094 	.word	0x00940094
 8004474:	00940094 	.word	0x00940094
 8004478:	00940094 	.word	0x00940094
 800447c:	00940094 	.word	0x00940094
 8004480:	03650094 	.word	0x03650094
 8004484:	03650365 	.word	0x03650365
 8004488:	03650365 	.word	0x03650365
 800448c:	03650365 	.word	0x03650365
 8004490:	03650365 	.word	0x03650365
 8004494:	00b50365 	.word	0x00b50365
 8004498:	036500d7 	.word	0x036500d7
 800449c:	036500d7 	.word	0x036500d7
 80044a0:	03650365 	.word	0x03650365
 80044a4:	00a10365 	.word	0x00a10365
 80044a8:	03650365 	.word	0x03650365
 80044ac:	0365026f 	.word	0x0365026f
 80044b0:	03650365 	.word	0x03650365
 80044b4:	03650365 	.word	0x03650365
 80044b8:	036502c4 	.word	0x036502c4
 80044bc:	00590365 	.word	0x00590365
 80044c0:	03650365 	.word	0x03650365
 80044c4:	03650365 	.word	0x03650365
 80044c8:	03650365 	.word	0x03650365
 80044cc:	03650365 	.word	0x03650365
 80044d0:	03650365 	.word	0x03650365
 80044d4:	00ba00aa 	.word	0x00ba00aa
 80044d8:	00d700d7 	.word	0x00d700d7
 80044dc:	00a400d7 	.word	0x00a400d7
 80044e0:	036500ba 	.word	0x036500ba
 80044e4:	00a70365 	.word	0x00a70365
 80044e8:	02590365 	.word	0x02590365
 80044ec:	028b0274 	.word	0x028b0274
 80044f0:	036500a7 	.word	0x036500a7
 80044f4:	0365029c 	.word	0x0365029c
 80044f8:	036502c9 	.word	0x036502c9
 80044fc:	02de0365 	.word	0x02de0365
 8004500:	9309      	str	r3, [sp, #36]	; 0x24
 8004502:	920a      	str	r2, [sp, #40]	; 0x28
 8004504:	49a1      	ldr	r1, [pc, #644]	; (800478c <_svfprintf_r+0x418>)
 8004506:	e283      	b.n	8004a10 <_svfprintf_r+0x69c>
 8004508:	4629      	mov	r1, r5
 800450a:	e00d      	b.n	8004528 <_svfprintf_r+0x1b4>
 800450c:	f89d 10ef 	ldrb.w	r1, [sp, #239]	; 0xef
 8004510:	2900      	cmp	r1, #0
 8004512:	d191      	bne.n	8004438 <_svfprintf_r+0xc4>
 8004514:	3120      	adds	r1, #32
 8004516:	e00b      	b.n	8004530 <_svfprintf_r+0x1bc>
 8004518:	f046 0601 	orr.w	r6, r6, #1
 800451c:	e78c      	b.n	8004438 <_svfprintf_r+0xc4>
 800451e:	682a      	ldr	r2, [r5, #0]
 8004520:	1d29      	adds	r1, r5, #4
 8004522:	2a00      	cmp	r2, #0
 8004524:	da89      	bge.n	800443a <_svfprintf_r+0xc6>
 8004526:	4252      	negs	r2, r2
 8004528:	f046 0604 	orr.w	r6, r6, #4
 800452c:	e785      	b.n	800443a <_svfprintf_r+0xc6>
 800452e:	212b      	movs	r1, #43	; 0x2b
 8004530:	f88d 10ef 	strb.w	r1, [sp, #239]	; 0xef
 8004534:	e780      	b.n	8004438 <_svfprintf_r+0xc4>
 8004536:	f813 ab01 	ldrb.w	sl, [r3], #1
 800453a:	f1ba 0f2a 	cmp.w	sl, #42	; 0x2a
 800453e:	d003      	beq.n	8004548 <_svfprintf_r+0x1d4>
 8004540:	4619      	mov	r1, r3
 8004542:	f04f 0c00 	mov.w	ip, #0
 8004546:	e00a      	b.n	800455e <_svfprintf_r+0x1ea>
 8004548:	f8d5 c000 	ldr.w	ip, [r5]
 800454c:	1d29      	adds	r1, r5, #4
 800454e:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
 8004552:	e772      	b.n	800443a <_svfprintf_r+0xc6>
 8004554:	230a      	movs	r3, #10
 8004556:	f811 ac01 	ldrb.w	sl, [r1, #-1]
 800455a:	fb03 0c0c 	mla	ip, r3, ip, r0
 800455e:	f1aa 0030 	sub.w	r0, sl, #48	; 0x30
 8004562:	460b      	mov	r3, r1
 8004564:	3101      	adds	r1, #1
 8004566:	2809      	cmp	r0, #9
 8004568:	d9f4      	bls.n	8004554 <_svfprintf_r+0x1e0>
 800456a:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
 800456e:	e767      	b.n	8004440 <_svfprintf_r+0xcc>
 8004570:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8004574:	e760      	b.n	8004438 <_svfprintf_r+0xc4>
 8004576:	2200      	movs	r2, #0
 8004578:	210a      	movs	r1, #10
 800457a:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 800457e:	fb01 a202 	mla	r2, r1, r2, sl
 8004582:	f813 ab01 	ldrb.w	sl, [r3], #1
 8004586:	f1aa 0130 	sub.w	r1, sl, #48	; 0x30
 800458a:	2909      	cmp	r1, #9
 800458c:	d9f4      	bls.n	8004578 <_svfprintf_r+0x204>
 800458e:	e757      	b.n	8004440 <_svfprintf_r+0xcc>
 8004590:	f046 0608 	orr.w	r6, r6, #8
 8004594:	e750      	b.n	8004438 <_svfprintf_r+0xc4>
 8004596:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 800459a:	e74d      	b.n	8004438 <_svfprintf_r+0xc4>
 800459c:	f046 0610 	orr.w	r6, r6, #16
 80045a0:	e74a      	b.n	8004438 <_svfprintf_r+0xc4>
 80045a2:	9309      	str	r3, [sp, #36]	; 0x24
 80045a4:	f04f 0c00 	mov.w	ip, #0
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	3504      	adds	r5, #4
 80045ac:	920a      	str	r2, [sp, #40]	; 0x28
 80045ae:	f88d c0ef 	strb.w	ip, [sp, #239]	; 0xef
 80045b2:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
 80045b6:	e2bb      	b.n	8004b30 <_svfprintf_r+0x7bc>
 80045b8:	9309      	str	r3, [sp, #36]	; 0x24
 80045ba:	f046 0610 	orr.w	r6, r6, #16
 80045be:	920a      	str	r2, [sp, #40]	; 0x28
 80045c0:	e001      	b.n	80045c6 <_svfprintf_r+0x252>
 80045c2:	9309      	str	r3, [sp, #36]	; 0x24
 80045c4:	920a      	str	r2, [sp, #40]	; 0x28
 80045c6:	f016 0f10 	tst.w	r6, #16
 80045ca:	d003      	beq.n	80045d4 <_svfprintf_r+0x260>
 80045cc:	f8d5 b000 	ldr.w	fp, [r5]
 80045d0:	3504      	adds	r5, #4
 80045d2:	e009      	b.n	80045e8 <_svfprintf_r+0x274>
 80045d4:	f8d5 b000 	ldr.w	fp, [r5]
 80045d8:	f016 0f40 	tst.w	r6, #64	; 0x40
 80045dc:	f105 0304 	add.w	r3, r5, #4
 80045e0:	461d      	mov	r5, r3
 80045e2:	bf18      	it	ne
 80045e4:	fa0f fb8b 	sxthne.w	fp, fp
 80045e8:	f1bb 0f00 	cmp.w	fp, #0
 80045ec:	da04      	bge.n	80045f8 <_svfprintf_r+0x284>
 80045ee:	f1cb 0b00 	rsb	fp, fp, #0
 80045f2:	232d      	movs	r3, #45	; 0x2d
 80045f4:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
 80045f8:	2201      	movs	r2, #1
 80045fa:	e22c      	b.n	8004a56 <_svfprintf_r+0x6e2>
 80045fc:	9309      	str	r3, [sp, #36]	; 0x24
 80045fe:	1deb      	adds	r3, r5, #7
 8004600:	f016 0f08 	tst.w	r6, #8
 8004604:	f023 0307 	bic.w	r3, r3, #7
 8004608:	920a      	str	r2, [sp, #40]	; 0x28
 800460a:	f103 0508 	add.w	r5, r3, #8
 800460e:	bf0b      	itete	eq
 8004610:	6818      	ldreq	r0, [r3, #0]
 8004612:	681a      	ldrne	r2, [r3, #0]
 8004614:	900c      	streq	r0, [sp, #48]	; 0x30
 8004616:	920c      	strne	r2, [sp, #48]	; 0x30
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800461c:	f8cd c018 	str.w	ip, [sp, #24]
 8004620:	930f      	str	r3, [sp, #60]	; 0x3c
 8004622:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004624:	f002 fdd4 	bl	80071d0 <__isinfd>
 8004628:	f8dd c018 	ldr.w	ip, [sp, #24]
 800462c:	4603      	mov	r3, r0
 800462e:	b1a8      	cbz	r0, 800465c <_svfprintf_r+0x2e8>
 8004630:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004632:	2200      	movs	r2, #0
 8004634:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004636:	2300      	movs	r3, #0
 8004638:	f7ff fcea 	bl	8004010 <__aeabi_dcmplt>
 800463c:	b110      	cbz	r0, 8004644 <_svfprintf_r+0x2d0>
 800463e:	232d      	movs	r3, #45	; 0x2d
 8004640:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
 8004644:	4b52      	ldr	r3, [pc, #328]	; (8004790 <_svfprintf_r+0x41c>)
 8004646:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800464a:	4a52      	ldr	r2, [pc, #328]	; (8004794 <_svfprintf_r+0x420>)
 800464c:	f04f 0b03 	mov.w	fp, #3
 8004650:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004654:	bfcc      	ite	gt
 8004656:	4691      	movgt	r9, r2
 8004658:	4699      	movle	r9, r3
 800465a:	e270      	b.n	8004b3e <_svfprintf_r+0x7ca>
 800465c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800465e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004660:	9307      	str	r3, [sp, #28]
 8004662:	f8cd c018 	str.w	ip, [sp, #24]
 8004666:	f002 fdc4 	bl	80071f2 <__isnand>
 800466a:	9b07      	ldr	r3, [sp, #28]
 800466c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004670:	b158      	cbz	r0, 800468a <_svfprintf_r+0x316>
 8004672:	4a49      	ldr	r2, [pc, #292]	; (8004798 <_svfprintf_r+0x424>)
 8004674:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8004678:	4948      	ldr	r1, [pc, #288]	; (800479c <_svfprintf_r+0x428>)
 800467a:	f04f 0b03 	mov.w	fp, #3
 800467e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004682:	bfcc      	ite	gt
 8004684:	4689      	movgt	r9, r1
 8004686:	4691      	movle	r9, r2
 8004688:	e1a3      	b.n	80049d2 <_svfprintf_r+0x65e>
 800468a:	f1bc 3fff 	cmp.w	ip, #4294967295
 800468e:	d102      	bne.n	8004696 <_svfprintf_r+0x322>
 8004690:	f10c 0c07 	add.w	ip, ip, #7
 8004694:	e00a      	b.n	80046ac <_svfprintf_r+0x338>
 8004696:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800469a:	d002      	beq.n	80046a2 <_svfprintf_r+0x32e>
 800469c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80046a0:	d104      	bne.n	80046ac <_svfprintf_r+0x338>
 80046a2:	f1bc 0f00 	cmp.w	ip, #0
 80046a6:	bf08      	it	eq
 80046a8:	f04f 0c01 	moveq.w	ip, #1
 80046ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046ae:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 80046b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046b4:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
 80046b8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	db04      	blt.n	80046c8 <_svfprintf_r+0x354>
 80046be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80046c0:	2200      	movs	r2, #0
 80046c2:	920d      	str	r2, [sp, #52]	; 0x34
 80046c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80046c6:	e005      	b.n	80046d4 <_svfprintf_r+0x360>
 80046c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046ca:	202d      	movs	r0, #45	; 0x2d
 80046cc:	900d      	str	r0, [sp, #52]	; 0x34
 80046ce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80046d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80046d4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80046d8:	d00e      	beq.n	80046f8 <_svfprintf_r+0x384>
 80046da:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
 80046de:	d00b      	beq.n	80046f8 <_svfprintf_r+0x384>
 80046e0:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80046e4:	d004      	beq.n	80046f0 <_svfprintf_r+0x37c>
 80046e6:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
 80046ea:	d001      	beq.n	80046f0 <_svfprintf_r+0x37c>
 80046ec:	46e3      	mov	fp, ip
 80046ee:	e001      	b.n	80046f4 <_svfprintf_r+0x380>
 80046f0:	f10c 0b01 	add.w	fp, ip, #1
 80046f4:	2302      	movs	r3, #2
 80046f6:	e001      	b.n	80046fc <_svfprintf_r+0x388>
 80046f8:	46e3      	mov	fp, ip
 80046fa:	2303      	movs	r3, #3
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	4640      	mov	r0, r8
 8004700:	ab3a      	add	r3, sp, #232	; 0xe8
 8004702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004704:	9302      	str	r3, [sp, #8]
 8004706:	ab39      	add	r3, sp, #228	; 0xe4
 8004708:	9303      	str	r3, [sp, #12]
 800470a:	ab38      	add	r3, sp, #224	; 0xe0
 800470c:	9304      	str	r3, [sp, #16]
 800470e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004710:	f8cd c018 	str.w	ip, [sp, #24]
 8004714:	f8cd b004 	str.w	fp, [sp, #4]
 8004718:	f000 fe3a 	bl	8005390 <_dtoa_r>
 800471c:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004720:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004724:	4681      	mov	r9, r0
 8004726:	d002      	beq.n	800472e <_svfprintf_r+0x3ba>
 8004728:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800472c:	d102      	bne.n	8004734 <_svfprintf_r+0x3c0>
 800472e:	f016 0f01 	tst.w	r6, #1
 8004732:	d03d      	beq.n	80047b0 <_svfprintf_r+0x43c>
 8004734:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004738:	eb09 010b 	add.w	r1, r9, fp
 800473c:	9108      	str	r1, [sp, #32]
 800473e:	d002      	beq.n	8004746 <_svfprintf_r+0x3d2>
 8004740:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
 8004744:	d115      	bne.n	8004772 <_svfprintf_r+0x3fe>
 8004746:	f899 3000 	ldrb.w	r3, [r9]
 800474a:	2b30      	cmp	r3, #48	; 0x30
 800474c:	d10d      	bne.n	800476a <_svfprintf_r+0x3f6>
 800474e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004750:	2200      	movs	r2, #0
 8004752:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004754:	2300      	movs	r3, #0
 8004756:	f8cd c018 	str.w	ip, [sp, #24]
 800475a:	f7ff fc4f 	bl	8003ffc <__aeabi_dcmpeq>
 800475e:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004762:	b910      	cbnz	r0, 800476a <_svfprintf_r+0x3f6>
 8004764:	f1cb 0301 	rsb	r3, fp, #1
 8004768:	933a      	str	r3, [sp, #232]	; 0xe8
 800476a:	9a08      	ldr	r2, [sp, #32]
 800476c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800476e:	18d2      	adds	r2, r2, r3
 8004770:	9208      	str	r2, [sp, #32]
 8004772:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004774:	2200      	movs	r2, #0
 8004776:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004778:	2300      	movs	r3, #0
 800477a:	f8cd c018 	str.w	ip, [sp, #24]
 800477e:	f7ff fc3d 	bl	8003ffc <__aeabi_dcmpeq>
 8004782:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004786:	b178      	cbz	r0, 80047a8 <_svfprintf_r+0x434>
 8004788:	9b08      	ldr	r3, [sp, #32]
 800478a:	e00c      	b.n	80047a6 <_svfprintf_r+0x432>
 800478c:	08007394 	.word	0x08007394
 8004790:	080073a5 	.word	0x080073a5
 8004794:	080073a9 	.word	0x080073a9
 8004798:	080073ad 	.word	0x080073ad
 800479c:	080073b1 	.word	0x080073b1
 80047a0:	2230      	movs	r2, #48	; 0x30
 80047a2:	f803 2b01 	strb.w	r2, [r3], #1
 80047a6:	9338      	str	r3, [sp, #224]	; 0xe0
 80047a8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80047aa:	9808      	ldr	r0, [sp, #32]
 80047ac:	4283      	cmp	r3, r0
 80047ae:	d3f7      	bcc.n	80047a0 <_svfprintf_r+0x42c>
 80047b0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80047b2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80047b6:	ebc9 0303 	rsb	r3, r9, r3
 80047ba:	9308      	str	r3, [sp, #32]
 80047bc:	d002      	beq.n	80047c4 <_svfprintf_r+0x450>
 80047be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80047c2:	d108      	bne.n	80047d6 <_svfprintf_r+0x462>
 80047c4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80047c6:	f113 0f03 	cmn.w	r3, #3
 80047ca:	db01      	blt.n	80047d0 <_svfprintf_r+0x45c>
 80047cc:	4563      	cmp	r3, ip
 80047ce:	dd79      	ble.n	80048c4 <_svfprintf_r+0x550>
 80047d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80047d4:	e002      	b.n	80047dc <_svfprintf_r+0x468>
 80047d6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80047da:	dc53      	bgt.n	8004884 <_svfprintf_r+0x510>
 80047dc:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80047de:	f88d a0d8 	strb.w	sl, [sp, #216]	; 0xd8
 80047e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80047e6:	f8cd b0e8 	str.w	fp, [sp, #232]	; 0xe8
 80047ea:	f1bb 0f00 	cmp.w	fp, #0
 80047ee:	da03      	bge.n	80047f8 <_svfprintf_r+0x484>
 80047f0:	f1cb 0b00 	rsb	fp, fp, #0
 80047f4:	232d      	movs	r3, #45	; 0x2d
 80047f6:	e000      	b.n	80047fa <_svfprintf_r+0x486>
 80047f8:	232b      	movs	r3, #43	; 0x2b
 80047fa:	f1bb 0f09 	cmp.w	fp, #9
 80047fe:	f88d 30d9 	strb.w	r3, [sp, #217]	; 0xd9
 8004802:	dd2a      	ble.n	800485a <_svfprintf_r+0x4e6>
 8004804:	f10d 02d7 	add.w	r2, sp, #215	; 0xd7
 8004808:	46ac      	mov	ip, r5
 800480a:	4615      	mov	r5, r2
 800480c:	4658      	mov	r0, fp
 800480e:	210a      	movs	r1, #10
 8004810:	9207      	str	r2, [sp, #28]
 8004812:	f8cd c018 	str.w	ip, [sp, #24]
 8004816:	f7fe ffc1 	bl	800379c <__aeabi_idivmod>
 800481a:	4658      	mov	r0, fp
 800481c:	3130      	adds	r1, #48	; 0x30
 800481e:	f805 1d01 	strb.w	r1, [r5, #-1]!
 8004822:	210a      	movs	r1, #10
 8004824:	f7fe fe70 	bl	8003508 <__aeabi_idiv>
 8004828:	9a07      	ldr	r2, [sp, #28]
 800482a:	f8dd c018 	ldr.w	ip, [sp, #24]
 800482e:	2809      	cmp	r0, #9
 8004830:	4683      	mov	fp, r0
 8004832:	dceb      	bgt.n	800480c <_svfprintf_r+0x498>
 8004834:	462b      	mov	r3, r5
 8004836:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 800483a:	1e59      	subs	r1, r3, #1
 800483c:	4665      	mov	r5, ip
 800483e:	f803 bc01 	strb.w	fp, [r3, #-1]
 8004842:	f10d 03da 	add.w	r3, sp, #218	; 0xda
 8004846:	e003      	b.n	8004850 <_svfprintf_r+0x4dc>
 8004848:	f811 0b01 	ldrb.w	r0, [r1], #1
 800484c:	f803 0c01 	strb.w	r0, [r3, #-1]
 8004850:	4618      	mov	r0, r3
 8004852:	3301      	adds	r3, #1
 8004854:	4291      	cmp	r1, r2
 8004856:	d3f7      	bcc.n	8004848 <_svfprintf_r+0x4d4>
 8004858:	e006      	b.n	8004868 <_svfprintf_r+0x4f4>
 800485a:	a837      	add	r0, sp, #220	; 0xdc
 800485c:	2330      	movs	r3, #48	; 0x30
 800485e:	449b      	add	fp, r3
 8004860:	f88d 30da 	strb.w	r3, [sp, #218]	; 0xda
 8004864:	f88d b0db 	strb.w	fp, [sp, #219]	; 0xdb
 8004868:	9908      	ldr	r1, [sp, #32]
 800486a:	ab36      	add	r3, sp, #216	; 0xd8
 800486c:	1ac3      	subs	r3, r0, r3
 800486e:	9312      	str	r3, [sp, #72]	; 0x48
 8004870:	2901      	cmp	r1, #1
 8004872:	eb03 0b01 	add.w	fp, r3, r1
 8004876:	dc02      	bgt.n	800487e <_svfprintf_r+0x50a>
 8004878:	f016 0f01 	tst.w	r6, #1
 800487c:	d038      	beq.n	80048f0 <_svfprintf_r+0x57c>
 800487e:	f10b 0b01 	add.w	fp, fp, #1
 8004882:	e035      	b.n	80048f0 <_svfprintf_r+0x57c>
 8004884:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004888:	d11c      	bne.n	80048c4 <_svfprintf_r+0x550>
 800488a:	f8dd b0e8 	ldr.w	fp, [sp, #232]	; 0xe8
 800488e:	f1bb 0f00 	cmp.w	fp, #0
 8004892:	dd09      	ble.n	80048a8 <_svfprintf_r+0x534>
 8004894:	f1bc 0f00 	cmp.w	ip, #0
 8004898:	d102      	bne.n	80048a0 <_svfprintf_r+0x52c>
 800489a:	f016 0f01 	tst.w	r6, #1
 800489e:	d027      	beq.n	80048f0 <_svfprintf_r+0x57c>
 80048a0:	f10b 0b01 	add.w	fp, fp, #1
 80048a4:	44e3      	add	fp, ip
 80048a6:	e00a      	b.n	80048be <_svfprintf_r+0x54a>
 80048a8:	f1bc 0f00 	cmp.w	ip, #0
 80048ac:	d105      	bne.n	80048ba <_svfprintf_r+0x546>
 80048ae:	f016 0f01 	tst.w	r6, #1
 80048b2:	d102      	bne.n	80048ba <_svfprintf_r+0x546>
 80048b4:	f04f 0b01 	mov.w	fp, #1
 80048b8:	e01a      	b.n	80048f0 <_svfprintf_r+0x57c>
 80048ba:	f10c 0b02 	add.w	fp, ip, #2
 80048be:	f04f 0a66 	mov.w	sl, #102	; 0x66
 80048c2:	e015      	b.n	80048f0 <_svfprintf_r+0x57c>
 80048c4:	f8dd b0e8 	ldr.w	fp, [sp, #232]	; 0xe8
 80048c8:	9a08      	ldr	r2, [sp, #32]
 80048ca:	4593      	cmp	fp, r2
 80048cc:	db05      	blt.n	80048da <_svfprintf_r+0x566>
 80048ce:	f016 0f01 	tst.w	r6, #1
 80048d2:	bf18      	it	ne
 80048d4:	f10b 0b01 	addne.w	fp, fp, #1
 80048d8:	e008      	b.n	80048ec <_svfprintf_r+0x578>
 80048da:	f1bb 0f00 	cmp.w	fp, #0
 80048de:	9b08      	ldr	r3, [sp, #32]
 80048e0:	bfcc      	ite	gt
 80048e2:	f04f 0b01 	movgt.w	fp, #1
 80048e6:	f1cb 0b02 	rsble	fp, fp, #2
 80048ea:	449b      	add	fp, r3
 80048ec:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80048f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80048f2:	b908      	cbnz	r0, 80048f8 <_svfprintf_r+0x584>
 80048f4:	4684      	mov	ip, r0
 80048f6:	e124      	b.n	8004b42 <_svfprintf_r+0x7ce>
 80048f8:	232d      	movs	r3, #45	; 0x2d
 80048fa:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
 80048fe:	e11e      	b.n	8004b3e <_svfprintf_r+0x7ca>
 8004900:	f016 0f10 	tst.w	r6, #16
 8004904:	9309      	str	r3, [sp, #36]	; 0x24
 8004906:	d004      	beq.n	8004912 <_svfprintf_r+0x59e>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	3504      	adds	r5, #4
 800490c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800490e:	6019      	str	r1, [r3, #0]
 8004910:	e55e      	b.n	80043d0 <_svfprintf_r+0x5c>
 8004912:	f016 0f40 	tst.w	r6, #64	; 0x40
 8004916:	682a      	ldr	r2, [r5, #0]
 8004918:	f105 0304 	add.w	r3, r5, #4
 800491c:	bf18      	it	ne
 800491e:	980e      	ldrne	r0, [sp, #56]	; 0x38
 8004920:	461d      	mov	r5, r3
 8004922:	bf0a      	itet	eq
 8004924:	990e      	ldreq	r1, [sp, #56]	; 0x38
 8004926:	8010      	strhne	r0, [r2, #0]
 8004928:	6011      	streq	r1, [r2, #0]
 800492a:	e551      	b.n	80043d0 <_svfprintf_r+0x5c>
 800492c:	9309      	str	r3, [sp, #36]	; 0x24
 800492e:	f046 0610 	orr.w	r6, r6, #16
 8004932:	920a      	str	r2, [sp, #40]	; 0x28
 8004934:	e001      	b.n	800493a <_svfprintf_r+0x5c6>
 8004936:	9309      	str	r3, [sp, #36]	; 0x24
 8004938:	920a      	str	r2, [sp, #40]	; 0x28
 800493a:	f016 0110 	ands.w	r1, r6, #16
 800493e:	d004      	beq.n	800494a <_svfprintf_r+0x5d6>
 8004940:	f8d5 b000 	ldr.w	fp, [r5]
 8004944:	2200      	movs	r2, #0
 8004946:	3504      	adds	r5, #4
 8004948:	e082      	b.n	8004a50 <_svfprintf_r+0x6dc>
 800494a:	f8d5 b000 	ldr.w	fp, [r5]
 800494e:	f016 0240 	ands.w	r2, r6, #64	; 0x40
 8004952:	f105 0304 	add.w	r3, r5, #4
 8004956:	bf1b      	ittet	ne
 8004958:	460a      	movne	r2, r1
 800495a:	461d      	movne	r5, r3
 800495c:	461d      	moveq	r5, r3
 800495e:	fa1f fb8b 	uxthne.w	fp, fp
 8004962:	e075      	b.n	8004a50 <_svfprintf_r+0x6dc>
 8004964:	920a      	str	r2, [sp, #40]	; 0x28
 8004966:	f04f 0a78 	mov.w	sl, #120	; 0x78
 800496a:	4a9d      	ldr	r2, [pc, #628]	; (8004be0 <_svfprintf_r+0x86c>)
 800496c:	f046 0602 	orr.w	r6, r6, #2
 8004970:	f8d5 b000 	ldr.w	fp, [r5]
 8004974:	3504      	adds	r5, #4
 8004976:	9309      	str	r3, [sp, #36]	; 0x24
 8004978:	2330      	movs	r3, #48	; 0x30
 800497a:	f88d a0ed 	strb.w	sl, [sp, #237]	; 0xed
 800497e:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8004982:	9211      	str	r2, [sp, #68]	; 0x44
 8004984:	e063      	b.n	8004a4e <_svfprintf_r+0x6da>
 8004986:	9309      	str	r3, [sp, #36]	; 0x24
 8004988:	2300      	movs	r3, #0
 800498a:	1d28      	adds	r0, r5, #4
 800498c:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
 8004990:	459c      	cmp	ip, r3
 8004992:	f8d5 9000 	ldr.w	r9, [r5]
 8004996:	900b      	str	r0, [sp, #44]	; 0x2c
 8004998:	920a      	str	r2, [sp, #40]	; 0x28
 800499a:	4648      	mov	r0, r9
 800499c:	db13      	blt.n	80049c6 <_svfprintf_r+0x652>
 800499e:	4619      	mov	r1, r3
 80049a0:	4662      	mov	r2, ip
 80049a2:	9307      	str	r3, [sp, #28]
 80049a4:	f8cd c018 	str.w	ip, [sp, #24]
 80049a8:	f001 fe26 	bl	80065f8 <memchr>
 80049ac:	9b07      	ldr	r3, [sp, #28]
 80049ae:	f8dd c018 	ldr.w	ip, [sp, #24]
 80049b2:	2800      	cmp	r0, #0
 80049b4:	f000 80c1 	beq.w	8004b3a <_svfprintf_r+0x7c6>
 80049b8:	ebc9 0b00 	rsb	fp, r9, r0
 80049bc:	45e3      	cmp	fp, ip
 80049be:	f300 80bc 	bgt.w	8004b3a <_svfprintf_r+0x7c6>
 80049c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80049c4:	e005      	b.n	80049d2 <_svfprintf_r+0x65e>
 80049c6:	9307      	str	r3, [sp, #28]
 80049c8:	f002 fc3d 	bl	8007246 <strlen>
 80049cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80049ce:	9b07      	ldr	r3, [sp, #28]
 80049d0:	4683      	mov	fp, r0
 80049d2:	469c      	mov	ip, r3
 80049d4:	e0b5      	b.n	8004b42 <_svfprintf_r+0x7ce>
 80049d6:	9309      	str	r3, [sp, #36]	; 0x24
 80049d8:	f046 0610 	orr.w	r6, r6, #16
 80049dc:	920a      	str	r2, [sp, #40]	; 0x28
 80049de:	e001      	b.n	80049e4 <_svfprintf_r+0x670>
 80049e0:	9309      	str	r3, [sp, #36]	; 0x24
 80049e2:	920a      	str	r2, [sp, #40]	; 0x28
 80049e4:	f016 0f10 	tst.w	r6, #16
 80049e8:	d003      	beq.n	80049f2 <_svfprintf_r+0x67e>
 80049ea:	f8d5 b000 	ldr.w	fp, [r5]
 80049ee:	3504      	adds	r5, #4
 80049f0:	e009      	b.n	8004a06 <_svfprintf_r+0x692>
 80049f2:	f8d5 b000 	ldr.w	fp, [r5]
 80049f6:	f016 0f40 	tst.w	r6, #64	; 0x40
 80049fa:	f105 0304 	add.w	r3, r5, #4
 80049fe:	461d      	mov	r5, r3
 8004a00:	bf18      	it	ne
 8004a02:	fa1f fb8b 	uxthne.w	fp, fp
 8004a06:	2201      	movs	r2, #1
 8004a08:	e022      	b.n	8004a50 <_svfprintf_r+0x6dc>
 8004a0a:	4975      	ldr	r1, [pc, #468]	; (8004be0 <_svfprintf_r+0x86c>)
 8004a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a0e:	920a      	str	r2, [sp, #40]	; 0x28
 8004a10:	f016 0f10 	tst.w	r6, #16
 8004a14:	9111      	str	r1, [sp, #68]	; 0x44
 8004a16:	d003      	beq.n	8004a20 <_svfprintf_r+0x6ac>
 8004a18:	f8d5 b000 	ldr.w	fp, [r5]
 8004a1c:	3504      	adds	r5, #4
 8004a1e:	e009      	b.n	8004a34 <_svfprintf_r+0x6c0>
 8004a20:	f8d5 b000 	ldr.w	fp, [r5]
 8004a24:	f016 0f40 	tst.w	r6, #64	; 0x40
 8004a28:	f105 0304 	add.w	r3, r5, #4
 8004a2c:	461d      	mov	r5, r3
 8004a2e:	bf18      	it	ne
 8004a30:	fa1f fb8b 	uxthne.w	fp, fp
 8004a34:	f016 0f01 	tst.w	r6, #1
 8004a38:	d009      	beq.n	8004a4e <_svfprintf_r+0x6da>
 8004a3a:	f1bb 0f00 	cmp.w	fp, #0
 8004a3e:	d006      	beq.n	8004a4e <_svfprintf_r+0x6da>
 8004a40:	f046 0602 	orr.w	r6, r6, #2
 8004a44:	2330      	movs	r3, #48	; 0x30
 8004a46:	f88d a0ed 	strb.w	sl, [sp, #237]	; 0xed
 8004a4a:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8004a4e:	2202      	movs	r2, #2
 8004a50:	2300      	movs	r3, #0
 8004a52:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
 8004a56:	f1bc 0f00 	cmp.w	ip, #0
 8004a5a:	ab2f      	add	r3, sp, #188	; 0xbc
 8004a5c:	bfa8      	it	ge
 8004a5e:	f026 0680 	bicge.w	r6, r6, #128	; 0x80
 8004a62:	f1bb 0f00 	cmp.w	fp, #0
 8004a66:	d102      	bne.n	8004a6e <_svfprintf_r+0x6fa>
 8004a68:	f1bc 0f00 	cmp.w	ip, #0
 8004a6c:	d046      	beq.n	8004afc <_svfprintf_r+0x788>
 8004a6e:	2a01      	cmp	r2, #1
 8004a70:	d002      	beq.n	8004a78 <_svfprintf_r+0x704>
 8004a72:	2a02      	cmp	r2, #2
 8004a74:	d103      	bne.n	8004a7e <_svfprintf_r+0x70a>
 8004a76:	e035      	b.n	8004ae4 <_svfprintf_r+0x770>
 8004a78:	4699      	mov	r9, r3
 8004a7a:	950b      	str	r5, [sp, #44]	; 0x2c
 8004a7c:	e025      	b.n	8004aca <_svfprintf_r+0x756>
 8004a7e:	4619      	mov	r1, r3
 8004a80:	f00b 0207 	and.w	r2, fp, #7
 8004a84:	3230      	adds	r2, #48	; 0x30
 8004a86:	ea5f 0bdb 	movs.w	fp, fp, lsr #3
 8004a8a:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8004a8e:	d1f7      	bne.n	8004a80 <_svfprintf_r+0x70c>
 8004a90:	f016 0f01 	tst.w	r6, #1
 8004a94:	4689      	mov	r9, r1
 8004a96:	d03c      	beq.n	8004b12 <_svfprintf_r+0x79e>
 8004a98:	2a30      	cmp	r2, #48	; 0x30
 8004a9a:	d03a      	beq.n	8004b12 <_svfprintf_r+0x79e>
 8004a9c:	2230      	movs	r2, #48	; 0x30
 8004a9e:	f809 2d01 	strb.w	r2, [r9, #-1]!
 8004aa2:	e036      	b.n	8004b12 <_svfprintf_r+0x79e>
 8004aa4:	4658      	mov	r0, fp
 8004aa6:	210a      	movs	r1, #10
 8004aa8:	9307      	str	r3, [sp, #28]
 8004aaa:	f8cd c018 	str.w	ip, [sp, #24]
 8004aae:	f7fe fd1d 	bl	80034ec <__aeabi_uidivmod>
 8004ab2:	4658      	mov	r0, fp
 8004ab4:	3130      	adds	r1, #48	; 0x30
 8004ab6:	f809 1c01 	strb.w	r1, [r9, #-1]
 8004aba:	210a      	movs	r1, #10
 8004abc:	46a9      	mov	r9, r5
 8004abe:	f7fe fbe7 	bl	8003290 <__aeabi_uidiv>
 8004ac2:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004ac6:	9b07      	ldr	r3, [sp, #28]
 8004ac8:	4683      	mov	fp, r0
 8004aca:	f1bb 0f09 	cmp.w	fp, #9
 8004ace:	f109 35ff 	add.w	r5, r9, #4294967295
 8004ad2:	d8e7      	bhi.n	8004aa4 <_svfprintf_r+0x730>
 8004ad4:	462a      	mov	r2, r5
 8004ad6:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8004ada:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004adc:	4691      	mov	r9, r2
 8004ade:	f882 b000 	strb.w	fp, [r2]
 8004ae2:	e016      	b.n	8004b12 <_svfprintf_r+0x79e>
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004ae8:	f00b 010f 	and.w	r1, fp, #15
 8004aec:	ea5f 1b1b 	movs.w	fp, fp, lsr #4
 8004af0:	5c41      	ldrb	r1, [r0, r1]
 8004af2:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8004af6:	d1f6      	bne.n	8004ae6 <_svfprintf_r+0x772>
 8004af8:	4691      	mov	r9, r2
 8004afa:	e00a      	b.n	8004b12 <_svfprintf_r+0x79e>
 8004afc:	b942      	cbnz	r2, 8004b10 <_svfprintf_r+0x79c>
 8004afe:	f016 0f01 	tst.w	r6, #1
 8004b02:	d005      	beq.n	8004b10 <_svfprintf_r+0x79c>
 8004b04:	3230      	adds	r2, #48	; 0x30
 8004b06:	f10d 09bb 	add.w	r9, sp, #187	; 0xbb
 8004b0a:	f88d 20bb 	strb.w	r2, [sp, #187]	; 0xbb
 8004b0e:	e000      	b.n	8004b12 <_svfprintf_r+0x79e>
 8004b10:	4699      	mov	r9, r3
 8004b12:	ebc9 0b03 	rsb	fp, r9, r3
 8004b16:	e014      	b.n	8004b42 <_svfprintf_r+0x7ce>
 8004b18:	9309      	str	r3, [sp, #36]	; 0x24
 8004b1a:	920a      	str	r2, [sp, #40]	; 0x28
 8004b1c:	f1ba 0f00 	cmp.w	sl, #0
 8004b20:	f000 8392 	beq.w	8005248 <_svfprintf_r+0xed4>
 8004b24:	f04f 0c00 	mov.w	ip, #0
 8004b28:	f88d a094 	strb.w	sl, [sp, #148]	; 0x94
 8004b2c:	f88d c0ef 	strb.w	ip, [sp, #239]	; 0xef
 8004b30:	f10d 0994 	add.w	r9, sp, #148	; 0x94
 8004b34:	f04f 0b01 	mov.w	fp, #1
 8004b38:	e003      	b.n	8004b42 <_svfprintf_r+0x7ce>
 8004b3a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004b3c:	46e3      	mov	fp, ip
 8004b3e:	f04f 0c00 	mov.w	ip, #0
 8004b42:	f89d 30ef 	ldrb.w	r3, [sp, #239]	; 0xef
 8004b46:	45e3      	cmp	fp, ip
 8004b48:	bfac      	ite	ge
 8004b4a:	4659      	movge	r1, fp
 8004b4c:	4661      	movlt	r1, ip
 8004b4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b50:	b10b      	cbz	r3, 8004b56 <_svfprintf_r+0x7e2>
 8004b52:	3101      	adds	r1, #1
 8004b54:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b56:	f016 0202 	ands.w	r2, r6, #2
 8004b5a:	9213      	str	r2, [sp, #76]	; 0x4c
 8004b5c:	d002      	beq.n	8004b64 <_svfprintf_r+0x7f0>
 8004b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b60:	3302      	adds	r3, #2
 8004b62:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b64:	f016 0084 	ands.w	r0, r6, #132	; 0x84
 8004b68:	900d      	str	r0, [sp, #52]	; 0x34
 8004b6a:	d14a      	bne.n	8004c02 <_svfprintf_r+0x88e>
 8004b6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004b6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b70:	1a8b      	subs	r3, r1, r2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	dc1c      	bgt.n	8004bb0 <_svfprintf_r+0x83c>
 8004b76:	e044      	b.n	8004c02 <_svfprintf_r+0x88e>
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	2210      	movs	r2, #16
 8004b7c:	605a      	str	r2, [r3, #4]
 8004b7e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8004b80:	3210      	adds	r2, #16
 8004b82:	9231      	str	r2, [sp, #196]	; 0xc4
 8004b84:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8004b86:	3201      	adds	r2, #1
 8004b88:	9230      	str	r2, [sp, #192]	; 0xc0
 8004b8a:	2a07      	cmp	r2, #7
 8004b8c:	dc01      	bgt.n	8004b92 <_svfprintf_r+0x81e>
 8004b8e:	3308      	adds	r3, #8
 8004b90:	e00c      	b.n	8004bac <_svfprintf_r+0x838>
 8004b92:	4640      	mov	r0, r8
 8004b94:	4639      	mov	r1, r7
 8004b96:	aa2f      	add	r2, sp, #188	; 0xbc
 8004b98:	f8cd c018 	str.w	ip, [sp, #24]
 8004b9c:	f7ff fb70 	bl	8004280 <__sprint_r>
 8004ba0:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	f040 8356 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004baa:	ab15      	add	r3, sp, #84	; 0x54
 8004bac:	3d10      	subs	r5, #16
 8004bae:	e003      	b.n	8004bb8 <_svfprintf_r+0x844>
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	462c      	mov	r4, r5
 8004bb4:	461d      	mov	r5, r3
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	2d10      	cmp	r5, #16
 8004bba:	4a0a      	ldr	r2, [pc, #40]	; (8004be4 <_svfprintf_r+0x870>)
 8004bbc:	dcdc      	bgt.n	8004b78 <_svfprintf_r+0x804>
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	462b      	mov	r3, r5
 8004bc2:	4625      	mov	r5, r4
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	604b      	str	r3, [r1, #4]
 8004bc8:	600a      	str	r2, [r1, #0]
 8004bca:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8004bcc:	18d3      	adds	r3, r2, r3
 8004bce:	9331      	str	r3, [sp, #196]	; 0xc4
 8004bd0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	9330      	str	r3, [sp, #192]	; 0xc0
 8004bd6:	2b07      	cmp	r3, #7
 8004bd8:	dc06      	bgt.n	8004be8 <_svfprintf_r+0x874>
 8004bda:	3408      	adds	r4, #8
 8004bdc:	e011      	b.n	8004c02 <_svfprintf_r+0x88e>
 8004bde:	bf00      	nop
 8004be0:	080073b5 	.word	0x080073b5
 8004be4:	080073c8 	.word	0x080073c8
 8004be8:	4640      	mov	r0, r8
 8004bea:	4639      	mov	r1, r7
 8004bec:	aa2f      	add	r2, sp, #188	; 0xbc
 8004bee:	f8cd c018 	str.w	ip, [sp, #24]
 8004bf2:	f7ff fb45 	bl	8004280 <__sprint_r>
 8004bf6:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	f040 832b 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004c00:	ac15      	add	r4, sp, #84	; 0x54
 8004c02:	f89d 30ef 	ldrb.w	r3, [sp, #239]	; 0xef
 8004c06:	b1db      	cbz	r3, 8004c40 <_svfprintf_r+0x8cc>
 8004c08:	f10d 03ef 	add.w	r3, sp, #239	; 0xef
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	2301      	movs	r3, #1
 8004c10:	6063      	str	r3, [r4, #4]
 8004c12:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004c14:	3301      	adds	r3, #1
 8004c16:	9331      	str	r3, [sp, #196]	; 0xc4
 8004c18:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	9330      	str	r3, [sp, #192]	; 0xc0
 8004c1e:	2b07      	cmp	r3, #7
 8004c20:	dc01      	bgt.n	8004c26 <_svfprintf_r+0x8b2>
 8004c22:	3408      	adds	r4, #8
 8004c24:	e00c      	b.n	8004c40 <_svfprintf_r+0x8cc>
 8004c26:	4640      	mov	r0, r8
 8004c28:	4639      	mov	r1, r7
 8004c2a:	aa2f      	add	r2, sp, #188	; 0xbc
 8004c2c:	f8cd c018 	str.w	ip, [sp, #24]
 8004c30:	f7ff fb26 	bl	8004280 <__sprint_r>
 8004c34:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	f040 830c 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004c3e:	ac15      	add	r4, sp, #84	; 0x54
 8004c40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004c42:	b1d3      	cbz	r3, 8004c7a <_svfprintf_r+0x906>
 8004c44:	ab3b      	add	r3, sp, #236	; 0xec
 8004c46:	6023      	str	r3, [r4, #0]
 8004c48:	2302      	movs	r3, #2
 8004c4a:	6063      	str	r3, [r4, #4]
 8004c4c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004c4e:	3302      	adds	r3, #2
 8004c50:	9331      	str	r3, [sp, #196]	; 0xc4
 8004c52:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004c54:	3301      	adds	r3, #1
 8004c56:	9330      	str	r3, [sp, #192]	; 0xc0
 8004c58:	2b07      	cmp	r3, #7
 8004c5a:	dc01      	bgt.n	8004c60 <_svfprintf_r+0x8ec>
 8004c5c:	3408      	adds	r4, #8
 8004c5e:	e00c      	b.n	8004c7a <_svfprintf_r+0x906>
 8004c60:	4640      	mov	r0, r8
 8004c62:	4639      	mov	r1, r7
 8004c64:	aa2f      	add	r2, sp, #188	; 0xbc
 8004c66:	f8cd c018 	str.w	ip, [sp, #24]
 8004c6a:	f7ff fb09 	bl	8004280 <__sprint_r>
 8004c6e:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004c72:	2800      	cmp	r0, #0
 8004c74:	f040 82ef 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004c78:	ac15      	add	r4, sp, #84	; 0x54
 8004c7a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004c7c:	2880      	cmp	r0, #128	; 0x80
 8004c7e:	d141      	bne.n	8004d04 <_svfprintf_r+0x990>
 8004c80:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004c82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c84:	1a89      	subs	r1, r1, r2
 8004c86:	910d      	str	r1, [sp, #52]	; 0x34
 8004c88:	2900      	cmp	r1, #0
 8004c8a:	dc1a      	bgt.n	8004cc2 <_svfprintf_r+0x94e>
 8004c8c:	e03a      	b.n	8004d04 <_svfprintf_r+0x990>
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	2310      	movs	r3, #16
 8004c92:	6053      	str	r3, [r2, #4]
 8004c94:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004c96:	3310      	adds	r3, #16
 8004c98:	9331      	str	r3, [sp, #196]	; 0xc4
 8004c9a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	9330      	str	r3, [sp, #192]	; 0xc0
 8004ca0:	2b07      	cmp	r3, #7
 8004ca2:	dc01      	bgt.n	8004ca8 <_svfprintf_r+0x934>
 8004ca4:	3208      	adds	r2, #8
 8004ca6:	e008      	b.n	8004cba <_svfprintf_r+0x946>
 8004ca8:	4640      	mov	r0, r8
 8004caa:	4639      	mov	r1, r7
 8004cac:	aa2f      	add	r2, sp, #188	; 0xbc
 8004cae:	f7ff fae7 	bl	8004280 <__sprint_r>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	f040 82cf 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004cb8:	aa15      	add	r2, sp, #84	; 0x54
 8004cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cbc:	3b10      	subs	r3, #16
 8004cbe:	930d      	str	r3, [sp, #52]	; 0x34
 8004cc0:	e001      	b.n	8004cc6 <_svfprintf_r+0x952>
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	4664      	mov	r4, ip
 8004cc6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004cc8:	4b8c      	ldr	r3, [pc, #560]	; (8004efc <_svfprintf_r+0xb88>)
 8004cca:	2810      	cmp	r0, #16
 8004ccc:	dcdf      	bgt.n	8004c8e <_svfprintf_r+0x91a>
 8004cce:	6050      	str	r0, [r2, #4]
 8004cd0:	46a4      	mov	ip, r4
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	4614      	mov	r4, r2
 8004cd6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004cd8:	181b      	adds	r3, r3, r0
 8004cda:	9331      	str	r3, [sp, #196]	; 0xc4
 8004cdc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004cde:	3301      	adds	r3, #1
 8004ce0:	9330      	str	r3, [sp, #192]	; 0xc0
 8004ce2:	2b07      	cmp	r3, #7
 8004ce4:	dc01      	bgt.n	8004cea <_svfprintf_r+0x976>
 8004ce6:	3408      	adds	r4, #8
 8004ce8:	e00c      	b.n	8004d04 <_svfprintf_r+0x990>
 8004cea:	4640      	mov	r0, r8
 8004cec:	4639      	mov	r1, r7
 8004cee:	aa2f      	add	r2, sp, #188	; 0xbc
 8004cf0:	f8cd c018 	str.w	ip, [sp, #24]
 8004cf4:	f7ff fac4 	bl	8004280 <__sprint_r>
 8004cf8:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	f040 82aa 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004d02:	ac15      	add	r4, sp, #84	; 0x54
 8004d04:	ebcb 0c0c 	rsb	ip, fp, ip
 8004d08:	f1bc 0f00 	cmp.w	ip, #0
 8004d0c:	dc18      	bgt.n	8004d40 <_svfprintf_r+0x9cc>
 8004d0e:	e036      	b.n	8004d7e <_svfprintf_r+0xa0a>
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	2310      	movs	r3, #16
 8004d14:	6053      	str	r3, [r2, #4]
 8004d16:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004d18:	3310      	adds	r3, #16
 8004d1a:	9331      	str	r3, [sp, #196]	; 0xc4
 8004d1c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004d1e:	3301      	adds	r3, #1
 8004d20:	9330      	str	r3, [sp, #192]	; 0xc0
 8004d22:	2b07      	cmp	r3, #7
 8004d24:	dc01      	bgt.n	8004d2a <_svfprintf_r+0x9b6>
 8004d26:	3208      	adds	r2, #8
 8004d28:	e008      	b.n	8004d3c <_svfprintf_r+0x9c8>
 8004d2a:	4640      	mov	r0, r8
 8004d2c:	4639      	mov	r1, r7
 8004d2e:	aa2f      	add	r2, sp, #188	; 0xbc
 8004d30:	f7ff faa6 	bl	8004280 <__sprint_r>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	f040 828e 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004d3a:	aa15      	add	r2, sp, #84	; 0x54
 8004d3c:	3d10      	subs	r5, #16
 8004d3e:	e002      	b.n	8004d46 <_svfprintf_r+0x9d2>
 8004d40:	4622      	mov	r2, r4
 8004d42:	462c      	mov	r4, r5
 8004d44:	4665      	mov	r5, ip
 8004d46:	2d10      	cmp	r5, #16
 8004d48:	4b6c      	ldr	r3, [pc, #432]	; (8004efc <_svfprintf_r+0xb88>)
 8004d4a:	dce1      	bgt.n	8004d10 <_svfprintf_r+0x99c>
 8004d4c:	46ac      	mov	ip, r5
 8004d4e:	f8c2 c004 	str.w	ip, [r2, #4]
 8004d52:	6013      	str	r3, [r2, #0]
 8004d54:	4625      	mov	r5, r4
 8004d56:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004d58:	4614      	mov	r4, r2
 8004d5a:	4463      	add	r3, ip
 8004d5c:	9331      	str	r3, [sp, #196]	; 0xc4
 8004d5e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004d60:	3301      	adds	r3, #1
 8004d62:	9330      	str	r3, [sp, #192]	; 0xc0
 8004d64:	2b07      	cmp	r3, #7
 8004d66:	dc01      	bgt.n	8004d6c <_svfprintf_r+0x9f8>
 8004d68:	3408      	adds	r4, #8
 8004d6a:	e008      	b.n	8004d7e <_svfprintf_r+0xa0a>
 8004d6c:	4640      	mov	r0, r8
 8004d6e:	4639      	mov	r1, r7
 8004d70:	aa2f      	add	r2, sp, #188	; 0xbc
 8004d72:	f7ff fa85 	bl	8004280 <__sprint_r>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	f040 826d 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004d7c:	ac15      	add	r4, sp, #84	; 0x54
 8004d7e:	f416 7f80 	tst.w	r6, #256	; 0x100
 8004d82:	d106      	bne.n	8004d92 <_svfprintf_r+0xa1e>
 8004d84:	f8c4 b004 	str.w	fp, [r4, #4]
 8004d88:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004d8a:	f8c4 9000 	str.w	r9, [r4]
 8004d8e:	445b      	add	r3, fp
 8004d90:	e202      	b.n	8005198 <_svfprintf_r+0xe24>
 8004d92:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004d96:	f340 8176 	ble.w	8005086 <_svfprintf_r+0xd12>
 8004d9a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004da0:	2300      	movs	r3, #0
 8004da2:	f7ff f92b 	bl	8003ffc <__aeabi_dcmpeq>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d05b      	beq.n	8004e62 <_svfprintf_r+0xaee>
 8004daa:	4b55      	ldr	r3, [pc, #340]	; (8004f00 <_svfprintf_r+0xb8c>)
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	2301      	movs	r3, #1
 8004db0:	6063      	str	r3, [r4, #4]
 8004db2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004db4:	3301      	adds	r3, #1
 8004db6:	9331      	str	r3, [sp, #196]	; 0xc4
 8004db8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004dba:	3301      	adds	r3, #1
 8004dbc:	9330      	str	r3, [sp, #192]	; 0xc0
 8004dbe:	2b07      	cmp	r3, #7
 8004dc0:	dc02      	bgt.n	8004dc8 <_svfprintf_r+0xa54>
 8004dc2:	f104 0108 	add.w	r1, r4, #8
 8004dc6:	e008      	b.n	8004dda <_svfprintf_r+0xa66>
 8004dc8:	4640      	mov	r0, r8
 8004dca:	4639      	mov	r1, r7
 8004dcc:	aa2f      	add	r2, sp, #188	; 0xbc
 8004dce:	f7ff fa57 	bl	8004280 <__sprint_r>
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	f040 823f 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004dd8:	a915      	add	r1, sp, #84	; 0x54
 8004dda:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004ddc:	9a08      	ldr	r2, [sp, #32]
 8004dde:	4293      	cmp	r3, r2
 8004de0:	db03      	blt.n	8004dea <_svfprintf_r+0xa76>
 8004de2:	f016 0f01 	tst.w	r6, #1
 8004de6:	f000 81e8 	beq.w	80051ba <_svfprintf_r+0xe46>
 8004dea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004dec:	600b      	str	r3, [r1, #0]
 8004dee:	2301      	movs	r3, #1
 8004df0:	604b      	str	r3, [r1, #4]
 8004df2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004df4:	3301      	adds	r3, #1
 8004df6:	9331      	str	r3, [sp, #196]	; 0xc4
 8004df8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	9330      	str	r3, [sp, #192]	; 0xc0
 8004dfe:	2b07      	cmp	r3, #7
 8004e00:	dc01      	bgt.n	8004e06 <_svfprintf_r+0xa92>
 8004e02:	3108      	adds	r1, #8
 8004e04:	e008      	b.n	8004e18 <_svfprintf_r+0xaa4>
 8004e06:	4640      	mov	r0, r8
 8004e08:	4639      	mov	r1, r7
 8004e0a:	aa2f      	add	r2, sp, #188	; 0xbc
 8004e0c:	f7ff fa38 	bl	8004280 <__sprint_r>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	f040 8220 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004e16:	a915      	add	r1, sp, #84	; 0x54
 8004e18:	9808      	ldr	r0, [sp, #32]
 8004e1a:	1e44      	subs	r4, r0, #1
 8004e1c:	2c00      	cmp	r4, #0
 8004e1e:	dc17      	bgt.n	8004e50 <_svfprintf_r+0xadc>
 8004e20:	e1cb      	b.n	80051ba <_svfprintf_r+0xe46>
 8004e22:	600b      	str	r3, [r1, #0]
 8004e24:	2310      	movs	r3, #16
 8004e26:	604b      	str	r3, [r1, #4]
 8004e28:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004e2a:	3310      	adds	r3, #16
 8004e2c:	9331      	str	r3, [sp, #196]	; 0xc4
 8004e2e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004e30:	3301      	adds	r3, #1
 8004e32:	9330      	str	r3, [sp, #192]	; 0xc0
 8004e34:	2b07      	cmp	r3, #7
 8004e36:	dc01      	bgt.n	8004e3c <_svfprintf_r+0xac8>
 8004e38:	3108      	adds	r1, #8
 8004e3a:	e008      	b.n	8004e4e <_svfprintf_r+0xada>
 8004e3c:	4640      	mov	r0, r8
 8004e3e:	4639      	mov	r1, r7
 8004e40:	aa2f      	add	r2, sp, #188	; 0xbc
 8004e42:	f7ff fa1d 	bl	8004280 <__sprint_r>
 8004e46:	2800      	cmp	r0, #0
 8004e48:	f040 8205 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004e4c:	a915      	add	r1, sp, #84	; 0x54
 8004e4e:	3c10      	subs	r4, #16
 8004e50:	2c10      	cmp	r4, #16
 8004e52:	4b2a      	ldr	r3, [pc, #168]	; (8004efc <_svfprintf_r+0xb88>)
 8004e54:	dce5      	bgt.n	8004e22 <_svfprintf_r+0xaae>
 8004e56:	604c      	str	r4, [r1, #4]
 8004e58:	600b      	str	r3, [r1, #0]
 8004e5a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004e5c:	191c      	adds	r4, r3, r4
 8004e5e:	9431      	str	r4, [sp, #196]	; 0xc4
 8004e60:	e109      	b.n	8005076 <_svfprintf_r+0xd02>
 8004e62:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	dc75      	bgt.n	8004f54 <_svfprintf_r+0xbe0>
 8004e68:	4b25      	ldr	r3, [pc, #148]	; (8004f00 <_svfprintf_r+0xb8c>)
 8004e6a:	6023      	str	r3, [r4, #0]
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	6063      	str	r3, [r4, #4]
 8004e70:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004e72:	3301      	adds	r3, #1
 8004e74:	9331      	str	r3, [sp, #196]	; 0xc4
 8004e76:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004e78:	3301      	adds	r3, #1
 8004e7a:	9330      	str	r3, [sp, #192]	; 0xc0
 8004e7c:	2b07      	cmp	r3, #7
 8004e7e:	dc02      	bgt.n	8004e86 <_svfprintf_r+0xb12>
 8004e80:	f104 0108 	add.w	r1, r4, #8
 8004e84:	e008      	b.n	8004e98 <_svfprintf_r+0xb24>
 8004e86:	4640      	mov	r0, r8
 8004e88:	4639      	mov	r1, r7
 8004e8a:	aa2f      	add	r2, sp, #188	; 0xbc
 8004e8c:	f7ff f9f8 	bl	8004280 <__sprint_r>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	f040 81e0 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004e96:	a915      	add	r1, sp, #84	; 0x54
 8004e98:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004e9a:	b92b      	cbnz	r3, 8004ea8 <_svfprintf_r+0xb34>
 8004e9c:	9a08      	ldr	r2, [sp, #32]
 8004e9e:	b91a      	cbnz	r2, 8004ea8 <_svfprintf_r+0xb34>
 8004ea0:	f016 0f01 	tst.w	r6, #1
 8004ea4:	f000 8189 	beq.w	80051ba <_svfprintf_r+0xe46>
 8004ea8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004eaa:	600b      	str	r3, [r1, #0]
 8004eac:	2301      	movs	r3, #1
 8004eae:	604b      	str	r3, [r1, #4]
 8004eb0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	9331      	str	r3, [sp, #196]	; 0xc4
 8004eb6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004eb8:	3301      	adds	r3, #1
 8004eba:	9330      	str	r3, [sp, #192]	; 0xc0
 8004ebc:	2b07      	cmp	r3, #7
 8004ebe:	dc01      	bgt.n	8004ec4 <_svfprintf_r+0xb50>
 8004ec0:	3108      	adds	r1, #8
 8004ec2:	e008      	b.n	8004ed6 <_svfprintf_r+0xb62>
 8004ec4:	4640      	mov	r0, r8
 8004ec6:	4639      	mov	r1, r7
 8004ec8:	aa2f      	add	r2, sp, #188	; 0xbc
 8004eca:	f7ff f9d9 	bl	8004280 <__sprint_r>
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	f040 81c1 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004ed4:	a915      	add	r1, sp, #84	; 0x54
 8004ed6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004ed8:	4264      	negs	r4, r4
 8004eda:	2c00      	cmp	r4, #0
 8004edc:	dc1c      	bgt.n	8004f18 <_svfprintf_r+0xba4>
 8004ede:	e033      	b.n	8004f48 <_svfprintf_r+0xbd4>
 8004ee0:	600b      	str	r3, [r1, #0]
 8004ee2:	2310      	movs	r3, #16
 8004ee4:	604b      	str	r3, [r1, #4]
 8004ee6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004ee8:	3310      	adds	r3, #16
 8004eea:	9331      	str	r3, [sp, #196]	; 0xc4
 8004eec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004eee:	3301      	adds	r3, #1
 8004ef0:	9330      	str	r3, [sp, #192]	; 0xc0
 8004ef2:	2b07      	cmp	r3, #7
 8004ef4:	dc06      	bgt.n	8004f04 <_svfprintf_r+0xb90>
 8004ef6:	3108      	adds	r1, #8
 8004ef8:	e00d      	b.n	8004f16 <_svfprintf_r+0xba2>
 8004efa:	bf00      	nop
 8004efc:	08007384 	.word	0x08007384
 8004f00:	080073c6 	.word	0x080073c6
 8004f04:	4640      	mov	r0, r8
 8004f06:	4639      	mov	r1, r7
 8004f08:	aa2f      	add	r2, sp, #188	; 0xbc
 8004f0a:	f7ff f9b9 	bl	8004280 <__sprint_r>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	f040 81a1 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004f14:	a915      	add	r1, sp, #84	; 0x54
 8004f16:	3c10      	subs	r4, #16
 8004f18:	2c10      	cmp	r4, #16
 8004f1a:	4b97      	ldr	r3, [pc, #604]	; (8005178 <_svfprintf_r+0xe04>)
 8004f1c:	dce0      	bgt.n	8004ee0 <_svfprintf_r+0xb6c>
 8004f1e:	604c      	str	r4, [r1, #4]
 8004f20:	600b      	str	r3, [r1, #0]
 8004f22:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004f24:	191c      	adds	r4, r3, r4
 8004f26:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004f28:	9431      	str	r4, [sp, #196]	; 0xc4
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	9330      	str	r3, [sp, #192]	; 0xc0
 8004f2e:	2b07      	cmp	r3, #7
 8004f30:	dc01      	bgt.n	8004f36 <_svfprintf_r+0xbc2>
 8004f32:	3108      	adds	r1, #8
 8004f34:	e008      	b.n	8004f48 <_svfprintf_r+0xbd4>
 8004f36:	4640      	mov	r0, r8
 8004f38:	4639      	mov	r1, r7
 8004f3a:	aa2f      	add	r2, sp, #188	; 0xbc
 8004f3c:	f7ff f9a0 	bl	8004280 <__sprint_r>
 8004f40:	2800      	cmp	r0, #0
 8004f42:	f040 8188 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004f46:	a915      	add	r1, sp, #84	; 0x54
 8004f48:	9808      	ldr	r0, [sp, #32]
 8004f4a:	f8c1 9000 	str.w	r9, [r1]
 8004f4e:	6048      	str	r0, [r1, #4]
 8004f50:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004f52:	e08e      	b.n	8005072 <_svfprintf_r+0xcfe>
 8004f54:	9908      	ldr	r1, [sp, #32]
 8004f56:	f8c4 9000 	str.w	r9, [r4]
 8004f5a:	428b      	cmp	r3, r1
 8004f5c:	db54      	blt.n	8005008 <_svfprintf_r+0xc94>
 8004f5e:	6061      	str	r1, [r4, #4]
 8004f60:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004f62:	185b      	adds	r3, r3, r1
 8004f64:	9331      	str	r3, [sp, #196]	; 0xc4
 8004f66:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004f68:	3301      	adds	r3, #1
 8004f6a:	9330      	str	r3, [sp, #192]	; 0xc0
 8004f6c:	2b07      	cmp	r3, #7
 8004f6e:	dc02      	bgt.n	8004f76 <_svfprintf_r+0xc02>
 8004f70:	f104 0108 	add.w	r1, r4, #8
 8004f74:	e008      	b.n	8004f88 <_svfprintf_r+0xc14>
 8004f76:	4640      	mov	r0, r8
 8004f78:	4639      	mov	r1, r7
 8004f7a:	aa2f      	add	r2, sp, #188	; 0xbc
 8004f7c:	f7ff f980 	bl	8004280 <__sprint_r>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	f040 8168 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004f86:	a915      	add	r1, sp, #84	; 0x54
 8004f88:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004f8a:	9a08      	ldr	r2, [sp, #32]
 8004f8c:	1aa4      	subs	r4, r4, r2
 8004f8e:	2c00      	cmp	r4, #0
 8004f90:	dc17      	bgt.n	8004fc2 <_svfprintf_r+0xc4e>
 8004f92:	e02e      	b.n	8004ff2 <_svfprintf_r+0xc7e>
 8004f94:	600b      	str	r3, [r1, #0]
 8004f96:	2310      	movs	r3, #16
 8004f98:	604b      	str	r3, [r1, #4]
 8004f9a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004f9c:	3310      	adds	r3, #16
 8004f9e:	9331      	str	r3, [sp, #196]	; 0xc4
 8004fa0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	9330      	str	r3, [sp, #192]	; 0xc0
 8004fa6:	2b07      	cmp	r3, #7
 8004fa8:	dc01      	bgt.n	8004fae <_svfprintf_r+0xc3a>
 8004faa:	3108      	adds	r1, #8
 8004fac:	e008      	b.n	8004fc0 <_svfprintf_r+0xc4c>
 8004fae:	4640      	mov	r0, r8
 8004fb0:	4639      	mov	r1, r7
 8004fb2:	aa2f      	add	r2, sp, #188	; 0xbc
 8004fb4:	f7ff f964 	bl	8004280 <__sprint_r>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	f040 814c 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004fbe:	a915      	add	r1, sp, #84	; 0x54
 8004fc0:	3c10      	subs	r4, #16
 8004fc2:	2c10      	cmp	r4, #16
 8004fc4:	4b6c      	ldr	r3, [pc, #432]	; (8005178 <_svfprintf_r+0xe04>)
 8004fc6:	dce5      	bgt.n	8004f94 <_svfprintf_r+0xc20>
 8004fc8:	604c      	str	r4, [r1, #4]
 8004fca:	600b      	str	r3, [r1, #0]
 8004fcc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004fce:	191c      	adds	r4, r3, r4
 8004fd0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004fd2:	9431      	str	r4, [sp, #196]	; 0xc4
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	9330      	str	r3, [sp, #192]	; 0xc0
 8004fd8:	2b07      	cmp	r3, #7
 8004fda:	dc01      	bgt.n	8004fe0 <_svfprintf_r+0xc6c>
 8004fdc:	3108      	adds	r1, #8
 8004fde:	e008      	b.n	8004ff2 <_svfprintf_r+0xc7e>
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	4639      	mov	r1, r7
 8004fe4:	aa2f      	add	r2, sp, #188	; 0xbc
 8004fe6:	f7ff f94b 	bl	8004280 <__sprint_r>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	f040 8133 	bne.w	8005256 <_svfprintf_r+0xee2>
 8004ff0:	a915      	add	r1, sp, #84	; 0x54
 8004ff2:	f016 0f01 	tst.w	r6, #1
 8004ff6:	f000 80e0 	beq.w	80051ba <_svfprintf_r+0xe46>
 8004ffa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ffc:	600b      	str	r3, [r1, #0]
 8004ffe:	2301      	movs	r3, #1
 8005000:	604b      	str	r3, [r1, #4]
 8005002:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8005004:	3301      	adds	r3, #1
 8005006:	e035      	b.n	8005074 <_svfprintf_r+0xd00>
 8005008:	6063      	str	r3, [r4, #4]
 800500a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800500c:	18d3      	adds	r3, r2, r3
 800500e:	9331      	str	r3, [sp, #196]	; 0xc4
 8005010:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8005012:	3301      	adds	r3, #1
 8005014:	9330      	str	r3, [sp, #192]	; 0xc0
 8005016:	2b07      	cmp	r3, #7
 8005018:	dc02      	bgt.n	8005020 <_svfprintf_r+0xcac>
 800501a:	f104 0108 	add.w	r1, r4, #8
 800501e:	e008      	b.n	8005032 <_svfprintf_r+0xcbe>
 8005020:	4640      	mov	r0, r8
 8005022:	4639      	mov	r1, r7
 8005024:	aa2f      	add	r2, sp, #188	; 0xbc
 8005026:	f7ff f92b 	bl	8004280 <__sprint_r>
 800502a:	2800      	cmp	r0, #0
 800502c:	f040 8113 	bne.w	8005256 <_svfprintf_r+0xee2>
 8005030:	a915      	add	r1, sp, #84	; 0x54
 8005032:	2301      	movs	r3, #1
 8005034:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8005036:	604b      	str	r3, [r1, #4]
 8005038:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800503a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800503c:	3301      	adds	r3, #1
 800503e:	9331      	str	r3, [sp, #196]	; 0xc4
 8005040:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8005042:	6008      	str	r0, [r1, #0]
 8005044:	3301      	adds	r3, #1
 8005046:	9330      	str	r3, [sp, #192]	; 0xc0
 8005048:	2b07      	cmp	r3, #7
 800504a:	dc01      	bgt.n	8005050 <_svfprintf_r+0xcdc>
 800504c:	3108      	adds	r1, #8
 800504e:	e008      	b.n	8005062 <_svfprintf_r+0xcee>
 8005050:	4640      	mov	r0, r8
 8005052:	4639      	mov	r1, r7
 8005054:	aa2f      	add	r2, sp, #188	; 0xbc
 8005056:	f7ff f913 	bl	8004280 <__sprint_r>
 800505a:	2800      	cmp	r0, #0
 800505c:	f040 80fb 	bne.w	8005256 <_svfprintf_r+0xee2>
 8005060:	a915      	add	r1, sp, #84	; 0x54
 8005062:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8005064:	444c      	add	r4, r9
 8005066:	9808      	ldr	r0, [sp, #32]
 8005068:	600c      	str	r4, [r1, #0]
 800506a:	1ac2      	subs	r2, r0, r3
 800506c:	604a      	str	r2, [r1, #4]
 800506e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	181b      	adds	r3, r3, r0
 8005074:	9331      	str	r3, [sp, #196]	; 0xc4
 8005076:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8005078:	3301      	adds	r3, #1
 800507a:	9330      	str	r3, [sp, #192]	; 0xc0
 800507c:	2b07      	cmp	r3, #7
 800507e:	f300 8094 	bgt.w	80051aa <_svfprintf_r+0xe36>
 8005082:	3108      	adds	r1, #8
 8005084:	e099      	b.n	80051ba <_svfprintf_r+0xe46>
 8005086:	9908      	ldr	r1, [sp, #32]
 8005088:	2901      	cmp	r1, #1
 800508a:	dc02      	bgt.n	8005092 <_svfprintf_r+0xd1e>
 800508c:	f016 0f01 	tst.w	r6, #1
 8005090:	d063      	beq.n	800515a <_svfprintf_r+0xde6>
 8005092:	2301      	movs	r3, #1
 8005094:	6063      	str	r3, [r4, #4]
 8005096:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8005098:	f8c4 9000 	str.w	r9, [r4]
 800509c:	3301      	adds	r3, #1
 800509e:	9331      	str	r3, [sp, #196]	; 0xc4
 80050a0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80050a2:	3301      	adds	r3, #1
 80050a4:	9330      	str	r3, [sp, #192]	; 0xc0
 80050a6:	2b07      	cmp	r3, #7
 80050a8:	dc01      	bgt.n	80050ae <_svfprintf_r+0xd3a>
 80050aa:	3408      	adds	r4, #8
 80050ac:	e008      	b.n	80050c0 <_svfprintf_r+0xd4c>
 80050ae:	4640      	mov	r0, r8
 80050b0:	4639      	mov	r1, r7
 80050b2:	aa2f      	add	r2, sp, #188	; 0xbc
 80050b4:	f7ff f8e4 	bl	8004280 <__sprint_r>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	f040 80cc 	bne.w	8005256 <_svfprintf_r+0xee2>
 80050be:	ac15      	add	r4, sp, #84	; 0x54
 80050c0:	2301      	movs	r3, #1
 80050c2:	6063      	str	r3, [r4, #4]
 80050c4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80050c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050c8:	3301      	adds	r3, #1
 80050ca:	9331      	str	r3, [sp, #196]	; 0xc4
 80050cc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80050ce:	6022      	str	r2, [r4, #0]
 80050d0:	3301      	adds	r3, #1
 80050d2:	9330      	str	r3, [sp, #192]	; 0xc0
 80050d4:	2b07      	cmp	r3, #7
 80050d6:	dc01      	bgt.n	80050dc <_svfprintf_r+0xd68>
 80050d8:	3408      	adds	r4, #8
 80050da:	e008      	b.n	80050ee <_svfprintf_r+0xd7a>
 80050dc:	4640      	mov	r0, r8
 80050de:	4639      	mov	r1, r7
 80050e0:	aa2f      	add	r2, sp, #188	; 0xbc
 80050e2:	f7ff f8cd 	bl	8004280 <__sprint_r>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	f040 80b5 	bne.w	8005256 <_svfprintf_r+0xee2>
 80050ec:	ac15      	add	r4, sp, #84	; 0x54
 80050ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80050f0:	2300      	movs	r3, #0
 80050f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80050f4:	2200      	movs	r2, #0
 80050f6:	f7fe ff81 	bl	8003ffc <__aeabi_dcmpeq>
 80050fa:	9908      	ldr	r1, [sp, #32]
 80050fc:	1e4b      	subs	r3, r1, #1
 80050fe:	b930      	cbnz	r0, 800510e <_svfprintf_r+0xd9a>
 8005100:	6063      	str	r3, [r4, #4]
 8005102:	f109 0201 	add.w	r2, r9, #1
 8005106:	6022      	str	r2, [r4, #0]
 8005108:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800510a:	18d3      	adds	r3, r2, r3
 800510c:	e02b      	b.n	8005166 <_svfprintf_r+0xdf2>
 800510e:	f1b3 0a00 	subs.w	sl, r3, #0
 8005112:	dc18      	bgt.n	8005146 <_svfprintf_r+0xdd2>
 8005114:	e03a      	b.n	800518c <_svfprintf_r+0xe18>
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	2310      	movs	r3, #16
 800511a:	6063      	str	r3, [r4, #4]
 800511c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800511e:	3310      	adds	r3, #16
 8005120:	9331      	str	r3, [sp, #196]	; 0xc4
 8005122:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8005124:	3301      	adds	r3, #1
 8005126:	9330      	str	r3, [sp, #192]	; 0xc0
 8005128:	2b07      	cmp	r3, #7
 800512a:	dc01      	bgt.n	8005130 <_svfprintf_r+0xdbc>
 800512c:	3408      	adds	r4, #8
 800512e:	e008      	b.n	8005142 <_svfprintf_r+0xdce>
 8005130:	4640      	mov	r0, r8
 8005132:	4639      	mov	r1, r7
 8005134:	aa2f      	add	r2, sp, #188	; 0xbc
 8005136:	f7ff f8a3 	bl	8004280 <__sprint_r>
 800513a:	2800      	cmp	r0, #0
 800513c:	f040 808b 	bne.w	8005256 <_svfprintf_r+0xee2>
 8005140:	ac15      	add	r4, sp, #84	; 0x54
 8005142:	f1aa 0a10 	sub.w	sl, sl, #16
 8005146:	f1ba 0f10 	cmp.w	sl, #16
 800514a:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <_svfprintf_r+0xe04>)
 800514c:	dce3      	bgt.n	8005116 <_svfprintf_r+0xda2>
 800514e:	f8c4 a004 	str.w	sl, [r4, #4]
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8005156:	4453      	add	r3, sl
 8005158:	e005      	b.n	8005166 <_svfprintf_r+0xdf2>
 800515a:	2301      	movs	r3, #1
 800515c:	6063      	str	r3, [r4, #4]
 800515e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8005160:	f8c4 9000 	str.w	r9, [r4]
 8005164:	3301      	adds	r3, #1
 8005166:	9331      	str	r3, [sp, #196]	; 0xc4
 8005168:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800516a:	3301      	adds	r3, #1
 800516c:	9330      	str	r3, [sp, #192]	; 0xc0
 800516e:	2b07      	cmp	r3, #7
 8005170:	dc04      	bgt.n	800517c <_svfprintf_r+0xe08>
 8005172:	3408      	adds	r4, #8
 8005174:	e00a      	b.n	800518c <_svfprintf_r+0xe18>
 8005176:	bf00      	nop
 8005178:	08007384 	.word	0x08007384
 800517c:	4640      	mov	r0, r8
 800517e:	4639      	mov	r1, r7
 8005180:	aa2f      	add	r2, sp, #188	; 0xbc
 8005182:	f7ff f87d 	bl	8004280 <__sprint_r>
 8005186:	2800      	cmp	r0, #0
 8005188:	d165      	bne.n	8005256 <_svfprintf_r+0xee2>
 800518a:	ac15      	add	r4, sp, #84	; 0x54
 800518c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800518e:	ab36      	add	r3, sp, #216	; 0xd8
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	6062      	str	r2, [r4, #4]
 8005194:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8005196:	189b      	adds	r3, r3, r2
 8005198:	9331      	str	r3, [sp, #196]	; 0xc4
 800519a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800519c:	3301      	adds	r3, #1
 800519e:	9330      	str	r3, [sp, #192]	; 0xc0
 80051a0:	2b07      	cmp	r3, #7
 80051a2:	dc02      	bgt.n	80051aa <_svfprintf_r+0xe36>
 80051a4:	f104 0108 	add.w	r1, r4, #8
 80051a8:	e007      	b.n	80051ba <_svfprintf_r+0xe46>
 80051aa:	4640      	mov	r0, r8
 80051ac:	4639      	mov	r1, r7
 80051ae:	aa2f      	add	r2, sp, #188	; 0xbc
 80051b0:	f7ff f866 	bl	8004280 <__sprint_r>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d14e      	bne.n	8005256 <_svfprintf_r+0xee2>
 80051b8:	a915      	add	r1, sp, #84	; 0x54
 80051ba:	f016 0f04 	tst.w	r6, #4
 80051be:	d02e      	beq.n	800521e <_svfprintf_r+0xeaa>
 80051c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80051c4:	1a1e      	subs	r6, r3, r0
 80051c6:	2e00      	cmp	r6, #0
 80051c8:	dc16      	bgt.n	80051f8 <_svfprintf_r+0xe84>
 80051ca:	e028      	b.n	800521e <_svfprintf_r+0xeaa>
 80051cc:	2310      	movs	r3, #16
 80051ce:	604b      	str	r3, [r1, #4]
 80051d0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80051d2:	600a      	str	r2, [r1, #0]
 80051d4:	3310      	adds	r3, #16
 80051d6:	9331      	str	r3, [sp, #196]	; 0xc4
 80051d8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80051da:	3301      	adds	r3, #1
 80051dc:	9330      	str	r3, [sp, #192]	; 0xc0
 80051de:	2b07      	cmp	r3, #7
 80051e0:	dc01      	bgt.n	80051e6 <_svfprintf_r+0xe72>
 80051e2:	3108      	adds	r1, #8
 80051e4:	e007      	b.n	80051f6 <_svfprintf_r+0xe82>
 80051e6:	4640      	mov	r0, r8
 80051e8:	4639      	mov	r1, r7
 80051ea:	aa2f      	add	r2, sp, #188	; 0xbc
 80051ec:	f7ff f848 	bl	8004280 <__sprint_r>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d130      	bne.n	8005256 <_svfprintf_r+0xee2>
 80051f4:	a915      	add	r1, sp, #84	; 0x54
 80051f6:	3e10      	subs	r6, #16
 80051f8:	2e10      	cmp	r6, #16
 80051fa:	4a1d      	ldr	r2, [pc, #116]	; (8005270 <_svfprintf_r+0xefc>)
 80051fc:	dce6      	bgt.n	80051cc <_svfprintf_r+0xe58>
 80051fe:	604e      	str	r6, [r1, #4]
 8005200:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8005202:	600a      	str	r2, [r1, #0]
 8005204:	199e      	adds	r6, r3, r6
 8005206:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8005208:	9631      	str	r6, [sp, #196]	; 0xc4
 800520a:	3301      	adds	r3, #1
 800520c:	9330      	str	r3, [sp, #192]	; 0xc0
 800520e:	2b07      	cmp	r3, #7
 8005210:	dd05      	ble.n	800521e <_svfprintf_r+0xeaa>
 8005212:	4640      	mov	r0, r8
 8005214:	4639      	mov	r1, r7
 8005216:	aa2f      	add	r2, sp, #188	; 0xbc
 8005218:	f7ff f832 	bl	8004280 <__sprint_r>
 800521c:	b9d8      	cbnz	r0, 8005256 <_svfprintf_r+0xee2>
 800521e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005224:	4293      	cmp	r3, r2
 8005226:	bfac      	ite	ge
 8005228:	18c9      	addge	r1, r1, r3
 800522a:	1889      	addlt	r1, r1, r2
 800522c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800522e:	910e      	str	r1, [sp, #56]	; 0x38
 8005230:	b12b      	cbz	r3, 800523e <_svfprintf_r+0xeca>
 8005232:	4640      	mov	r0, r8
 8005234:	4639      	mov	r1, r7
 8005236:	aa2f      	add	r2, sp, #188	; 0xbc
 8005238:	f7ff f822 	bl	8004280 <__sprint_r>
 800523c:	b958      	cbnz	r0, 8005256 <_svfprintf_r+0xee2>
 800523e:	2300      	movs	r3, #0
 8005240:	ac15      	add	r4, sp, #84	; 0x54
 8005242:	9330      	str	r3, [sp, #192]	; 0xc0
 8005244:	f7ff b8c4 	b.w	80043d0 <_svfprintf_r+0x5c>
 8005248:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800524a:	b123      	cbz	r3, 8005256 <_svfprintf_r+0xee2>
 800524c:	4640      	mov	r0, r8
 800524e:	4639      	mov	r1, r7
 8005250:	aa2f      	add	r2, sp, #188	; 0xbc
 8005252:	f7ff f815 	bl	8004280 <__sprint_r>
 8005256:	89bb      	ldrh	r3, [r7, #12]
 8005258:	980e      	ldr	r0, [sp, #56]	; 0x38
 800525a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	bf18      	it	ne
 8005262:	f04f 30ff 	movne.w	r0, #4294967295
 8005266:	900e      	str	r0, [sp, #56]	; 0x38
 8005268:	980e      	ldr	r0, [sp, #56]	; 0x38
 800526a:	b03d      	add	sp, #244	; 0xf4
 800526c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005270:	080073c8 	.word	0x080073c8

08005274 <quorem>:
 8005274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005278:	690b      	ldr	r3, [r1, #16]
 800527a:	6902      	ldr	r2, [r0, #16]
 800527c:	4604      	mov	r4, r0
 800527e:	468a      	mov	sl, r1
 8005280:	429a      	cmp	r2, r3
 8005282:	da01      	bge.n	8005288 <quorem+0x14>
 8005284:	2000      	movs	r0, #0
 8005286:	e07e      	b.n	8005386 <quorem+0x112>
 8005288:	1e5d      	subs	r5, r3, #1
 800528a:	3303      	adds	r3, #3
 800528c:	f101 0814 	add.w	r8, r1, #20
 8005290:	f100 0614 	add.w	r6, r0, #20
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	18ca      	adds	r2, r1, r3
 8005298:	18c3      	adds	r3, r0, r3
 800529a:	f102 0b04 	add.w	fp, r2, #4
 800529e:	f103 0904 	add.w	r9, r3, #4
 80052a2:	6851      	ldr	r1, [r2, #4]
 80052a4:	6858      	ldr	r0, [r3, #4]
 80052a6:	3101      	adds	r1, #1
 80052a8:	f7fd fff2 	bl	8003290 <__aeabi_uidiv>
 80052ac:	4607      	mov	r7, r0
 80052ae:	2800      	cmp	r0, #0
 80052b0:	d036      	beq.n	8005320 <quorem+0xac>
 80052b2:	2300      	movs	r3, #0
 80052b4:	9401      	str	r4, [sp, #4]
 80052b6:	4619      	mov	r1, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	f858 0003 	ldr.w	r0, [r8, r3]
 80052be:	f836 e003 	ldrh.w	lr, [r6, r3]
 80052c2:	fa1f fc80 	uxth.w	ip, r0
 80052c6:	4472      	add	r2, lr
 80052c8:	0c00      	lsrs	r0, r0, #16
 80052ca:	4378      	muls	r0, r7
 80052cc:	fb0c 1c07 	mla	ip, ip, r7, r1
 80052d0:	eb00 401c 	add.w	r0, r0, ip, lsr #16
 80052d4:	fa1f fc8c 	uxth.w	ip, ip
 80052d8:	ebcc 0c02 	rsb	ip, ip, r2
 80052dc:	58f2      	ldr	r2, [r6, r3]
 80052de:	0c01      	lsrs	r1, r0, #16
 80052e0:	b280      	uxth	r0, r0
 80052e2:	ebc0 4012 	rsb	r0, r0, r2, lsr #16
 80052e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80052ea:	fa1f fc8c 	uxth.w	ip, ip
 80052ee:	1402      	asrs	r2, r0, #16
 80052f0:	ea4c 4000 	orr.w	r0, ip, r0, lsl #16
 80052f4:	50f0      	str	r0, [r6, r3]
 80052f6:	3304      	adds	r3, #4
 80052f8:	eb03 0008 	add.w	r0, r3, r8
 80052fc:	4558      	cmp	r0, fp
 80052fe:	d9dc      	bls.n	80052ba <quorem+0x46>
 8005300:	9c01      	ldr	r4, [sp, #4]
 8005302:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	b113      	cbz	r3, 8005310 <quorem+0x9c>
 800530a:	e009      	b.n	8005320 <quorem+0xac>
 800530c:	3d01      	subs	r5, #1
 800530e:	e000      	b.n	8005312 <quorem+0x9e>
 8005310:	464b      	mov	r3, r9
 8005312:	3b04      	subs	r3, #4
 8005314:	42b3      	cmp	r3, r6
 8005316:	d902      	bls.n	800531e <quorem+0xaa>
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	2a00      	cmp	r2, #0
 800531c:	d0f6      	beq.n	800530c <quorem+0x98>
 800531e:	6125      	str	r5, [r4, #16]
 8005320:	4620      	mov	r0, r4
 8005322:	4651      	mov	r1, sl
 8005324:	f001 f9f1 	bl	800670a <__mcmp>
 8005328:	2800      	cmp	r0, #0
 800532a:	db2b      	blt.n	8005384 <quorem+0x110>
 800532c:	2300      	movs	r3, #0
 800532e:	3701      	adds	r7, #1
 8005330:	461a      	mov	r2, r3
 8005332:	f858 c003 	ldr.w	ip, [r8, r3]
 8005336:	58f1      	ldr	r1, [r6, r3]
 8005338:	fa1f f08c 	uxth.w	r0, ip
 800533c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005340:	fa1f fa81 	uxth.w	sl, r1
 8005344:	ebcc 4111 	rsb	r1, ip, r1, lsr #16
 8005348:	ebc0 000a 	rsb	r0, r0, sl
 800534c:	1880      	adds	r0, r0, r2
 800534e:	eb01 4120 	add.w	r1, r1, r0, asr #16
 8005352:	b280      	uxth	r0, r0
 8005354:	140a      	asrs	r2, r1, #16
 8005356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800535a:	50f1      	str	r1, [r6, r3]
 800535c:	3304      	adds	r3, #4
 800535e:	eb03 0108 	add.w	r1, r3, r8
 8005362:	4559      	cmp	r1, fp
 8005364:	d9e5      	bls.n	8005332 <quorem+0xbe>
 8005366:	1d2a      	adds	r2, r5, #4
 8005368:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800536c:	1d13      	adds	r3, r2, #4
 800536e:	6852      	ldr	r2, [r2, #4]
 8005370:	b10a      	cbz	r2, 8005376 <quorem+0x102>
 8005372:	e007      	b.n	8005384 <quorem+0x110>
 8005374:	3d01      	subs	r5, #1
 8005376:	3b04      	subs	r3, #4
 8005378:	42b3      	cmp	r3, r6
 800537a:	d902      	bls.n	8005382 <quorem+0x10e>
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	2a00      	cmp	r2, #0
 8005380:	d0f8      	beq.n	8005374 <quorem+0x100>
 8005382:	6125      	str	r5, [r4, #16]
 8005384:	4638      	mov	r0, r7
 8005386:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538a:	0000      	lsls	r0, r0, #0
 800538c:	0000      	lsls	r0, r0, #0
	...

08005390 <_dtoa_r>:
 8005390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005394:	4604      	mov	r4, r0
 8005396:	b09b      	sub	sp, #108	; 0x6c
 8005398:	4610      	mov	r0, r2
 800539a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800539c:	4619      	mov	r1, r3
 800539e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80053a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053a4:	b93e      	cbnz	r6, 80053b6 <_dtoa_r+0x26>
 80053a6:	2010      	movs	r0, #16
 80053a8:	f000 ff0c 	bl	80061c4 <malloc>
 80053ac:	6260      	str	r0, [r4, #36]	; 0x24
 80053ae:	6046      	str	r6, [r0, #4]
 80053b0:	6086      	str	r6, [r0, #8]
 80053b2:	6006      	str	r6, [r0, #0]
 80053b4:	60c6      	str	r6, [r0, #12]
 80053b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053b8:	6819      	ldr	r1, [r3, #0]
 80053ba:	b161      	cbz	r1, 80053d6 <_dtoa_r+0x46>
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	4620      	mov	r0, r4
 80053c0:	604a      	str	r2, [r1, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	fa12 f303 	lsls.w	r3, r2, r3
 80053ca:	608b      	str	r3, [r1, #8]
 80053cc:	f001 fab1 	bl	8006932 <_Bfree>
 80053d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	9b05      	ldr	r3, [sp, #20]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	da05      	bge.n	80053e8 <_dtoa_r+0x58>
 80053dc:	2201      	movs	r2, #1
 80053de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053e2:	602a      	str	r2, [r5, #0]
 80053e4:	9305      	str	r3, [sp, #20]
 80053e6:	e001      	b.n	80053ec <_dtoa_r+0x5c>
 80053e8:	2300      	movs	r3, #0
 80053ea:	602b      	str	r3, [r5, #0]
 80053ec:	9e05      	ldr	r6, [sp, #20]
 80053ee:	4b98      	ldr	r3, [pc, #608]	; (8005650 <_dtoa_r+0x2c0>)
 80053f0:	4a97      	ldr	r2, [pc, #604]	; (8005650 <_dtoa_r+0x2c0>)
 80053f2:	ea06 0303 	and.w	r3, r6, r3
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d11a      	bne.n	8005430 <_dtoa_r+0xa0>
 80053fa:	9926      	ldr	r1, [sp, #152]	; 0x98
 80053fc:	f242 730f 	movw	r3, #9999	; 0x270f
 8005400:	9a04      	ldr	r2, [sp, #16]
 8005402:	600b      	str	r3, [r1, #0]
 8005404:	b932      	cbnz	r2, 8005414 <_dtoa_r+0x84>
 8005406:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
 800540a:	f426 0670 	bic.w	r6, r6, #15728640	; 0xf00000
 800540e:	b90e      	cbnz	r6, 8005414 <_dtoa_r+0x84>
 8005410:	4890      	ldr	r0, [pc, #576]	; (8005654 <_dtoa_r+0x2c4>)
 8005412:	e000      	b.n	8005416 <_dtoa_r+0x86>
 8005414:	4890      	ldr	r0, [pc, #576]	; (8005658 <_dtoa_r+0x2c8>)
 8005416:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 8577 	beq.w	8005f0c <_dtoa_r+0xb7c>
 800541e:	78c2      	ldrb	r2, [r0, #3]
 8005420:	1cc3      	adds	r3, r0, #3
 8005422:	b10a      	cbz	r2, 8005428 <_dtoa_r+0x98>
 8005424:	f100 0308 	add.w	r3, r0, #8
 8005428:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800542a:	600b      	str	r3, [r1, #0]
 800542c:	f000 bd6e 	b.w	8005f0c <_dtoa_r+0xb7c>
 8005430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005434:	4610      	mov	r0, r2
 8005436:	4619      	mov	r1, r3
 8005438:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800543c:	2200      	movs	r2, #0
 800543e:	2300      	movs	r3, #0
 8005440:	f7fe fddc 	bl	8003ffc <__aeabi_dcmpeq>
 8005444:	b168      	cbz	r0, 8005462 <_dtoa_r+0xd2>
 8005446:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005448:	2301      	movs	r3, #1
 800544a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800544c:	6003      	str	r3, [r0, #0]
 800544e:	b911      	cbnz	r1, 8005456 <_dtoa_r+0xc6>
 8005450:	4882      	ldr	r0, [pc, #520]	; (800565c <_dtoa_r+0x2cc>)
 8005452:	f000 bd5b 	b.w	8005f0c <_dtoa_r+0xb7c>
 8005456:	4882      	ldr	r0, [pc, #520]	; (8005660 <_dtoa_r+0x2d0>)
 8005458:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800545a:	6010      	str	r0, [r2, #0]
 800545c:	3801      	subs	r0, #1
 800545e:	f000 bd55 	b.w	8005f0c <_dtoa_r+0xb7c>
 8005462:	ab18      	add	r3, sp, #96	; 0x60
 8005464:	4620      	mov	r0, r4
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	ab19      	add	r3, sp, #100	; 0x64
 800546a:	9301      	str	r3, [sp, #4]
 800546c:	0d35      	lsrs	r5, r6, #20
 800546e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005472:	f001 faa8 	bl	80069c6 <__d2b>
 8005476:	056d      	lsls	r5, r5, #21
 8005478:	0d6d      	lsrs	r5, r5, #21
 800547a:	4680      	mov	r8, r0
 800547c:	b17d      	cbz	r5, 800549e <_dtoa_r+0x10e>
 800547e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005482:	f5a5 757e 	sub.w	r5, r5, #1016	; 0x3f8
 8005486:	3d07      	subs	r5, #7
 8005488:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 800548c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005490:	f043 517e 	orr.w	r1, r3, #1065353216	; 0x3f800000
 8005494:	2300      	movs	r3, #0
 8005496:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
 800549a:	9317      	str	r3, [sp, #92]	; 0x5c
 800549c:	e01f      	b.n	80054de <_dtoa_r+0x14e>
 800549e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80054a0:	9819      	ldr	r0, [sp, #100]	; 0x64
 80054a2:	18c0      	adds	r0, r0, r3
 80054a4:	f500 6086 	add.w	r0, r0, #1072	; 0x430
 80054a8:	1c85      	adds	r5, r0, #2
 80054aa:	2d20      	cmp	r5, #32
 80054ac:	dd09      	ble.n	80054c2 <_dtoa_r+0x132>
 80054ae:	f8dd c010 	ldr.w	ip, [sp, #16]
 80054b2:	381e      	subs	r0, #30
 80054b4:	f1c5 0340 	rsb	r3, r5, #64	; 0x40
 80054b8:	409e      	lsls	r6, r3
 80054ba:	fa2c f000 	lsr.w	r0, ip, r0
 80054be:	4330      	orrs	r0, r6
 80054c0:	e004      	b.n	80054cc <_dtoa_r+0x13c>
 80054c2:	9904      	ldr	r1, [sp, #16]
 80054c4:	f1c5 0020 	rsb	r0, r5, #32
 80054c8:	fa11 f000 	lsls.w	r0, r1, r0
 80054cc:	f7fe fab8 	bl	8003a40 <__aeabi_ui2d>
 80054d0:	f5a5 6586 	sub.w	r5, r5, #1072	; 0x430
 80054d4:	3d03      	subs	r5, #3
 80054d6:	2201      	movs	r2, #1
 80054d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80054da:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80054de:	2200      	movs	r2, #0
 80054e0:	4b60      	ldr	r3, [pc, #384]	; (8005664 <_dtoa_r+0x2d4>)
 80054e2:	f7fe f96f 	bl	80037c4 <__aeabi_dsub>
 80054e6:	a354      	add	r3, pc, #336	; (adr r3, 8005638 <_dtoa_r+0x2a8>)
 80054e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ec:	f7fe fb1e 	bl	8003b2c <__aeabi_dmul>
 80054f0:	a353      	add	r3, pc, #332	; (adr r3, 8005640 <_dtoa_r+0x2b0>)
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f7fe f967 	bl	80037c8 <__adddf3>
 80054fa:	4606      	mov	r6, r0
 80054fc:	4628      	mov	r0, r5
 80054fe:	460f      	mov	r7, r1
 8005500:	f7fe faae 	bl	8003a60 <__aeabi_i2d>
 8005504:	a350      	add	r3, pc, #320	; (adr r3, 8005648 <_dtoa_r+0x2b8>)
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	f7fe fb0f 	bl	8003b2c <__aeabi_dmul>
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4630      	mov	r0, r6
 8005514:	4639      	mov	r1, r7
 8005516:	f7fe f957 	bl	80037c8 <__adddf3>
 800551a:	4682      	mov	sl, r0
 800551c:	468b      	mov	fp, r1
 800551e:	f7fe fd9f 	bl	8004060 <__aeabi_d2iz>
 8005522:	4659      	mov	r1, fp
 8005524:	2200      	movs	r2, #0
 8005526:	2300      	movs	r3, #0
 8005528:	4606      	mov	r6, r0
 800552a:	4650      	mov	r0, sl
 800552c:	f7fe fd70 	bl	8004010 <__aeabi_dcmplt>
 8005530:	b150      	cbz	r0, 8005548 <_dtoa_r+0x1b8>
 8005532:	4630      	mov	r0, r6
 8005534:	f7fe fa94 	bl	8003a60 <__aeabi_i2d>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4650      	mov	r0, sl
 800553e:	4659      	mov	r1, fp
 8005540:	f7fe fd5c 	bl	8003ffc <__aeabi_dcmpeq>
 8005544:	b900      	cbnz	r0, 8005548 <_dtoa_r+0x1b8>
 8005546:	3e01      	subs	r6, #1
 8005548:	2e16      	cmp	r6, #22
 800554a:	d902      	bls.n	8005552 <_dtoa_r+0x1c2>
 800554c:	2301      	movs	r3, #1
 800554e:	9316      	str	r3, [sp, #88]	; 0x58
 8005550:	e00e      	b.n	8005570 <_dtoa_r+0x1e0>
 8005552:	4b45      	ldr	r3, [pc, #276]	; (8005668 <_dtoa_r+0x2d8>)
 8005554:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005558:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	f7fe fd56 	bl	8004010 <__aeabi_dcmplt>
 8005564:	b908      	cbnz	r0, 800556a <_dtoa_r+0x1da>
 8005566:	9016      	str	r0, [sp, #88]	; 0x58
 8005568:	e002      	b.n	8005570 <_dtoa_r+0x1e0>
 800556a:	3e01      	subs	r6, #1
 800556c:	2100      	movs	r1, #0
 800556e:	9116      	str	r1, [sp, #88]	; 0x58
 8005570:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005572:	f103 3bff 	add.w	fp, r3, #4294967295
 8005576:	ebbb 0b05 	subs.w	fp, fp, r5
 800557a:	d404      	bmi.n	8005586 <_dtoa_r+0x1f6>
 800557c:	f8cd b018 	str.w	fp, [sp, #24]
 8005580:	f04f 0b00 	mov.w	fp, #0
 8005584:	e003      	b.n	800558e <_dtoa_r+0x1fe>
 8005586:	f1cb 0b00 	rsb	fp, fp, #0
 800558a:	2200      	movs	r2, #0
 800558c:	9206      	str	r2, [sp, #24]
 800558e:	2e00      	cmp	r6, #0
 8005590:	db06      	blt.n	80055a0 <_dtoa_r+0x210>
 8005592:	9b06      	ldr	r3, [sp, #24]
 8005594:	f04f 0a00 	mov.w	sl, #0
 8005598:	9613      	str	r6, [sp, #76]	; 0x4c
 800559a:	199b      	adds	r3, r3, r6
 800559c:	9306      	str	r3, [sp, #24]
 800559e:	e005      	b.n	80055ac <_dtoa_r+0x21c>
 80055a0:	ebc6 0b0b 	rsb	fp, r6, fp
 80055a4:	f1c6 0a00 	rsb	sl, r6, #0
 80055a8:	2000      	movs	r0, #0
 80055aa:	9013      	str	r0, [sp, #76]	; 0x4c
 80055ac:	9924      	ldr	r1, [sp, #144]	; 0x90
 80055ae:	2909      	cmp	r1, #9
 80055b0:	d815      	bhi.n	80055de <_dtoa_r+0x24e>
 80055b2:	2905      	cmp	r1, #5
 80055b4:	dc01      	bgt.n	80055ba <_dtoa_r+0x22a>
 80055b6:	2701      	movs	r7, #1
 80055b8:	e003      	b.n	80055c2 <_dtoa_r+0x232>
 80055ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80055bc:	2700      	movs	r7, #0
 80055be:	3a04      	subs	r2, #4
 80055c0:	9224      	str	r2, [sp, #144]	; 0x90
 80055c2:	9824      	ldr	r0, [sp, #144]	; 0x90
 80055c4:	1e83      	subs	r3, r0, #2
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d80c      	bhi.n	80055e4 <_dtoa_r+0x254>
 80055ca:	e8df f003 	tbb	[pc, r3]
 80055ce:	2415      	.short	0x2415
 80055d0:	0205      	.short	0x0205
 80055d2:	2201      	movs	r2, #1
 80055d4:	920d      	str	r2, [sp, #52]	; 0x34
 80055d6:	e020      	b.n	800561a <_dtoa_r+0x28a>
 80055d8:	2301      	movs	r3, #1
 80055da:	930d      	str	r3, [sp, #52]	; 0x34
 80055dc:	e00e      	b.n	80055fc <_dtoa_r+0x26c>
 80055de:	2701      	movs	r7, #1
 80055e0:	2000      	movs	r0, #0
 80055e2:	9024      	str	r0, [sp, #144]	; 0x90
 80055e4:	f04f 32ff 	mov.w	r2, #4294967295
 80055e8:	2101      	movs	r1, #1
 80055ea:	2000      	movs	r0, #0
 80055ec:	910d      	str	r1, [sp, #52]	; 0x34
 80055ee:	920e      	str	r2, [sp, #56]	; 0x38
 80055f0:	4691      	mov	r9, r2
 80055f2:	2312      	movs	r3, #18
 80055f4:	9025      	str	r0, [sp, #148]	; 0x94
 80055f6:	e018      	b.n	800562a <_dtoa_r+0x29a>
 80055f8:	2100      	movs	r1, #0
 80055fa:	910d      	str	r1, [sp, #52]	; 0x34
 80055fc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80055fe:	2a00      	cmp	r2, #0
 8005600:	dc04      	bgt.n	800560c <_dtoa_r+0x27c>
 8005602:	2301      	movs	r3, #1
 8005604:	930e      	str	r3, [sp, #56]	; 0x38
 8005606:	4699      	mov	r9, r3
 8005608:	9325      	str	r3, [sp, #148]	; 0x94
 800560a:	e00e      	b.n	800562a <_dtoa_r+0x29a>
 800560c:	9825      	ldr	r0, [sp, #148]	; 0x94
 800560e:	4681      	mov	r9, r0
 8005610:	4603      	mov	r3, r0
 8005612:	900e      	str	r0, [sp, #56]	; 0x38
 8005614:	e009      	b.n	800562a <_dtoa_r+0x29a>
 8005616:	2100      	movs	r1, #0
 8005618:	910d      	str	r1, [sp, #52]	; 0x34
 800561a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800561c:	18b2      	adds	r2, r6, r2
 800561e:	920e      	str	r2, [sp, #56]	; 0x38
 8005620:	1c53      	adds	r3, r2, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	4699      	mov	r9, r3
 8005626:	bfd8      	it	le
 8005628:	2301      	movle	r3, #1
 800562a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800562c:	2200      	movs	r2, #0
 800562e:	604a      	str	r2, [r1, #4]
 8005630:	3204      	adds	r2, #4
 8005632:	e01f      	b.n	8005674 <_dtoa_r+0x2e4>
 8005634:	f3af 8000 	nop.w
 8005638:	636f4361 	.word	0x636f4361
 800563c:	3fd287a7 	.word	0x3fd287a7
 8005640:	8b60c8b3 	.word	0x8b60c8b3
 8005644:	3fc68a28 	.word	0x3fc68a28
 8005648:	509f79fb 	.word	0x509f79fb
 800564c:	3fd34413 	.word	0x3fd34413
 8005650:	7ff00000 	.word	0x7ff00000
 8005654:	080073d8 	.word	0x080073d8
 8005658:	080073e1 	.word	0x080073e1
 800565c:	080073c6 	.word	0x080073c6
 8005660:	080073c7 	.word	0x080073c7
 8005664:	3ff80000 	.word	0x3ff80000
 8005668:	08007440 	.word	0x08007440
 800566c:	6869      	ldr	r1, [r5, #4]
 800566e:	0052      	lsls	r2, r2, #1
 8005670:	3101      	adds	r1, #1
 8005672:	6069      	str	r1, [r5, #4]
 8005674:	f102 0114 	add.w	r1, r2, #20
 8005678:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800567a:	4299      	cmp	r1, r3
 800567c:	d9f6      	bls.n	800566c <_dtoa_r+0x2dc>
 800567e:	4620      	mov	r0, r4
 8005680:	6869      	ldr	r1, [r5, #4]
 8005682:	f001 f96d 	bl	8006960 <_Balloc>
 8005686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005688:	f1b9 0f0e 	cmp.w	r9, #14
 800568c:	6028      	str	r0, [r5, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	930c      	str	r3, [sp, #48]	; 0x30
 8005692:	f200 8180 	bhi.w	8005996 <_dtoa_r+0x606>
 8005696:	2f00      	cmp	r7, #0
 8005698:	f000 817d 	beq.w	8005996 <_dtoa_r+0x606>
 800569c:	2e00      	cmp	r6, #0
 800569e:	dd3d      	ble.n	800571c <_dtoa_r+0x38c>
 80056a0:	f006 020f 	and.w	r2, r6, #15
 80056a4:	4b8b      	ldr	r3, [pc, #556]	; (80058d4 <_dtoa_r+0x544>)
 80056a6:	1137      	asrs	r7, r6, #4
 80056a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056ac:	f017 0f10 	tst.w	r7, #16
 80056b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80056b8:	d101      	bne.n	80056be <_dtoa_r+0x32e>
 80056ba:	2502      	movs	r5, #2
 80056bc:	e00d      	b.n	80056da <_dtoa_r+0x34a>
 80056be:	4b86      	ldr	r3, [pc, #536]	; (80058d8 <_dtoa_r+0x548>)
 80056c0:	f007 070f 	and.w	r7, r7, #15
 80056c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056c8:	2503      	movs	r5, #3
 80056ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056ce:	f7fe fb57 	bl	8003d80 <__aeabi_ddiv>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056da:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 80058d8 <_dtoa_r+0x548>
 80056de:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80056e2:	46b0      	mov	r8, r6
 80056e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056e8:	4666      	mov	r6, ip
 80056ea:	e009      	b.n	8005700 <_dtoa_r+0x370>
 80056ec:	f017 0f01 	tst.w	r7, #1
 80056f0:	d004      	beq.n	80056fc <_dtoa_r+0x36c>
 80056f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056f6:	3501      	adds	r5, #1
 80056f8:	f7fe fa18 	bl	8003b2c <__aeabi_dmul>
 80056fc:	107f      	asrs	r7, r7, #1
 80056fe:	3608      	adds	r6, #8
 8005700:	2f00      	cmp	r7, #0
 8005702:	d1f3      	bne.n	80056ec <_dtoa_r+0x35c>
 8005704:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005708:	4646      	mov	r6, r8
 800570a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800570e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005712:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8005716:	f7fe fb33 	bl	8003d80 <__aeabi_ddiv>
 800571a:	e026      	b.n	800576a <_dtoa_r+0x3da>
 800571c:	4277      	negs	r7, r6
 800571e:	b90f      	cbnz	r7, 8005724 <_dtoa_r+0x394>
 8005720:	2502      	movs	r5, #2
 8005722:	e026      	b.n	8005772 <_dtoa_r+0x3e2>
 8005724:	f007 020f 	and.w	r2, r7, #15
 8005728:	4b6a      	ldr	r3, [pc, #424]	; (80058d4 <_dtoa_r+0x544>)
 800572a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800572e:	113f      	asrs	r7, r7, #4
 8005730:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005734:	2502      	movs	r5, #2
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	f7fe f9f7 	bl	8003b2c <__aeabi_dmul>
 800573e:	f8df c198 	ldr.w	ip, [pc, #408]	; 80058d8 <_dtoa_r+0x548>
 8005742:	f8cd 8010 	str.w	r8, [sp, #16]
 8005746:	46b0      	mov	r8, r6
 8005748:	4666      	mov	r6, ip
 800574a:	e009      	b.n	8005760 <_dtoa_r+0x3d0>
 800574c:	f017 0f01 	tst.w	r7, #1
 8005750:	d004      	beq.n	800575c <_dtoa_r+0x3cc>
 8005752:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005756:	3501      	adds	r5, #1
 8005758:	f7fe f9e8 	bl	8003b2c <__aeabi_dmul>
 800575c:	107f      	asrs	r7, r7, #1
 800575e:	3608      	adds	r6, #8
 8005760:	2f00      	cmp	r7, #0
 8005762:	d1f3      	bne.n	800574c <_dtoa_r+0x3bc>
 8005764:	4646      	mov	r6, r8
 8005766:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005772:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005774:	b1f3      	cbz	r3, 80057b4 <_dtoa_r+0x424>
 8005776:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800577a:	2200      	movs	r2, #0
 800577c:	4b57      	ldr	r3, [pc, #348]	; (80058dc <_dtoa_r+0x54c>)
 800577e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005782:	f7fe fc45 	bl	8004010 <__aeabi_dcmplt>
 8005786:	b1a8      	cbz	r0, 80057b4 <_dtoa_r+0x424>
 8005788:	f1b9 0f00 	cmp.w	r9, #0
 800578c:	d012      	beq.n	80057b4 <_dtoa_r+0x424>
 800578e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005790:	2900      	cmp	r1, #0
 8005792:	f340 80fc 	ble.w	800598e <_dtoa_r+0x5fe>
 8005796:	1e72      	subs	r2, r6, #1
 8005798:	4b51      	ldr	r3, [pc, #324]	; (80058e0 <_dtoa_r+0x550>)
 800579a:	9208      	str	r2, [sp, #32]
 800579c:	2200      	movs	r2, #0
 800579e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057a2:	3501      	adds	r5, #1
 80057a4:	f7fe f9c2 	bl	8003b2c <__aeabi_dmul>
 80057a8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057b2:	e001      	b.n	80057b8 <_dtoa_r+0x428>
 80057b4:	464f      	mov	r7, r9
 80057b6:	9608      	str	r6, [sp, #32]
 80057b8:	4628      	mov	r0, r5
 80057ba:	f7fe f951 	bl	8003a60 <__aeabi_i2d>
 80057be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057c2:	f7fe f9b3 	bl	8003b2c <__aeabi_dmul>
 80057c6:	2200      	movs	r2, #0
 80057c8:	4b46      	ldr	r3, [pc, #280]	; (80058e4 <_dtoa_r+0x554>)
 80057ca:	f7fd fffd 	bl	80037c8 <__adddf3>
 80057ce:	460b      	mov	r3, r1
 80057d0:	4602      	mov	r2, r0
 80057d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80057d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057d8:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 80057dc:	950b      	str	r5, [sp, #44]	; 0x2c
 80057de:	b9ef      	cbnz	r7, 800581c <_dtoa_r+0x48c>
 80057e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057e4:	2200      	movs	r2, #0
 80057e6:	4b40      	ldr	r3, [pc, #256]	; (80058e8 <_dtoa_r+0x558>)
 80057e8:	f7fd ffec 	bl	80037c4 <__aeabi_dsub>
 80057ec:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80057f0:	462b      	mov	r3, r5
 80057f2:	4662      	mov	r2, ip
 80057f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057f8:	f7fe fc28 	bl	800404c <__aeabi_dcmpgt>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	f040 8254 	bne.w	8005caa <_dtoa_r+0x91a>
 8005802:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8005806:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800580a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800580e:	4662      	mov	r2, ip
 8005810:	f7fe fbfe 	bl	8004010 <__aeabi_dcmplt>
 8005814:	2800      	cmp	r0, #0
 8005816:	f040 823e 	bne.w	8005c96 <_dtoa_r+0x906>
 800581a:	e0b8      	b.n	800598e <_dtoa_r+0x5fe>
 800581c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800581e:	1e7a      	subs	r2, r7, #1
 8005820:	4b2c      	ldr	r3, [pc, #176]	; (80058d4 <_dtoa_r+0x544>)
 8005822:	2800      	cmp	r0, #0
 8005824:	d064      	beq.n	80058f0 <_dtoa_r+0x560>
 8005826:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800582a:	2000      	movs	r0, #0
 800582c:	492f      	ldr	r1, [pc, #188]	; (80058ec <_dtoa_r+0x55c>)
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	f7fe faa5 	bl	8003d80 <__aeabi_ddiv>
 8005836:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800583a:	f7fd ffc3 	bl	80037c4 <__aeabi_dsub>
 800583e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005840:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8005844:	2100      	movs	r1, #0
 8005846:	910a      	str	r1, [sp, #40]	; 0x28
 8005848:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800584c:	3501      	adds	r5, #1
 800584e:	f7fe fc07 	bl	8004060 <__aeabi_d2iz>
 8005852:	9003      	str	r0, [sp, #12]
 8005854:	f7fe f904 	bl	8003a60 <__aeabi_i2d>
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005860:	f7fd ffb0 	bl	80037c4 <__aeabi_dsub>
 8005864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005866:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005868:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800586c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8005870:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005874:	f803 c002 	strb.w	ip, [r3, r2]
 8005878:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800587c:	f7fe fbc8 	bl	8004010 <__aeabi_dcmplt>
 8005880:	2800      	cmp	r0, #0
 8005882:	f040 8334 	bne.w	8005eee <_dtoa_r+0xb5e>
 8005886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800588a:	2000      	movs	r0, #0
 800588c:	4913      	ldr	r1, [pc, #76]	; (80058dc <_dtoa_r+0x54c>)
 800588e:	f7fd ff99 	bl	80037c4 <__aeabi_dsub>
 8005892:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005896:	f7fe fbbb 	bl	8004010 <__aeabi_dcmplt>
 800589a:	2800      	cmp	r0, #0
 800589c:	f040 80e0 	bne.w	8005a60 <_dtoa_r+0x6d0>
 80058a0:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80058a4:	f10c 0c01 	add.w	ip, ip, #1
 80058a8:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 80058ac:	45bc      	cmp	ip, r7
 80058ae:	da6e      	bge.n	800598e <_dtoa_r+0x5fe>
 80058b0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80058b4:	2200      	movs	r2, #0
 80058b6:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <_dtoa_r+0x550>)
 80058b8:	f7fe f938 	bl	8003b2c <__aeabi_dmul>
 80058bc:	2200      	movs	r2, #0
 80058be:	4b08      	ldr	r3, [pc, #32]	; (80058e0 <_dtoa_r+0x550>)
 80058c0:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80058c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058c8:	f7fe f930 	bl	8003b2c <__aeabi_dmul>
 80058cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058d0:	e7ba      	b.n	8005848 <_dtoa_r+0x4b8>
 80058d2:	bf00      	nop
 80058d4:	08007440 	.word	0x08007440
 80058d8:	08007508 	.word	0x08007508
 80058dc:	3ff00000 	.word	0x3ff00000
 80058e0:	40240000 	.word	0x40240000
 80058e4:	401c0000 	.word	0x401c0000
 80058e8:	40140000 	.word	0x40140000
 80058ec:	3fe00000 	.word	0x3fe00000
 80058f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058fc:	f7fe f916 	bl	8003b2c <__aeabi_dmul>
 8005900:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005902:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005906:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800590a:	f7fe fba9 	bl	8004060 <__aeabi_d2iz>
 800590e:	9003      	str	r0, [sp, #12]
 8005910:	f7fe f8a6 	bl	8003a60 <__aeabi_i2d>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800591c:	f7fd ff52 	bl	80037c4 <__aeabi_dsub>
 8005920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005922:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005926:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800592a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800592e:	f802 c005 	strb.w	ip, [r2, r5]
 8005932:	3501      	adds	r5, #1
 8005934:	42bd      	cmp	r5, r7
 8005936:	d123      	bne.n	8005980 <_dtoa_r+0x5f0>
 8005938:	4b89      	ldr	r3, [pc, #548]	; (8005b60 <_dtoa_r+0x7d0>)
 800593a:	1955      	adds	r5, r2, r5
 800593c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005940:	2200      	movs	r2, #0
 8005942:	f7fd ff41 	bl	80037c8 <__adddf3>
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800594e:	f7fe fb7d 	bl	800404c <__aeabi_dcmpgt>
 8005952:	2800      	cmp	r0, #0
 8005954:	f040 8084 	bne.w	8005a60 <_dtoa_r+0x6d0>
 8005958:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800595c:	2000      	movs	r0, #0
 800595e:	4980      	ldr	r1, [pc, #512]	; (8005b60 <_dtoa_r+0x7d0>)
 8005960:	f7fd ff30 	bl	80037c4 <__aeabi_dsub>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800596c:	f7fe fb50 	bl	8004010 <__aeabi_dcmplt>
 8005970:	b168      	cbz	r0, 800598e <_dtoa_r+0x5fe>
 8005972:	462b      	mov	r3, r5
 8005974:	461d      	mov	r5, r3
 8005976:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800597a:	2a30      	cmp	r2, #48	; 0x30
 800597c:	d0fa      	beq.n	8005974 <_dtoa_r+0x5e4>
 800597e:	e2b6      	b.n	8005eee <_dtoa_r+0xb5e>
 8005980:	2200      	movs	r2, #0
 8005982:	4b78      	ldr	r3, [pc, #480]	; (8005b64 <_dtoa_r+0x7d4>)
 8005984:	f7fe f8d2 	bl	8003b2c <__aeabi_dmul>
 8005988:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800598c:	e7bb      	b.n	8005906 <_dtoa_r+0x576>
 800598e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005992:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005996:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005998:	2a00      	cmp	r2, #0
 800599a:	db7a      	blt.n	8005a92 <_dtoa_r+0x702>
 800599c:	2e0e      	cmp	r6, #14
 800599e:	dc78      	bgt.n	8005a92 <_dtoa_r+0x702>
 80059a0:	4b71      	ldr	r3, [pc, #452]	; (8005b68 <_dtoa_r+0x7d8>)
 80059a2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80059a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059ae:	9925      	ldr	r1, [sp, #148]	; 0x94
 80059b0:	2900      	cmp	r1, #0
 80059b2:	da13      	bge.n	80059dc <_dtoa_r+0x64c>
 80059b4:	f1b9 0f00 	cmp.w	r9, #0
 80059b8:	dc10      	bgt.n	80059dc <_dtoa_r+0x64c>
 80059ba:	f040 816c 	bne.w	8005c96 <_dtoa_r+0x906>
 80059be:	2200      	movs	r2, #0
 80059c0:	4b6a      	ldr	r3, [pc, #424]	; (8005b6c <_dtoa_r+0x7dc>)
 80059c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059c6:	f7fe f8b1 	bl	8003b2c <__aeabi_dmul>
 80059ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059ce:	f7fe fb33 	bl	8004038 <__aeabi_dcmpge>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	f040 815f 	bne.w	8005c96 <_dtoa_r+0x906>
 80059d8:	46ca      	mov	sl, r9
 80059da:	e168      	b.n	8005cae <_dtoa_r+0x91e>
 80059dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059de:	2701      	movs	r7, #1
 80059e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059e8:	f7fe f9ca 	bl	8003d80 <__aeabi_ddiv>
 80059ec:	f7fe fb38 	bl	8004060 <__aeabi_d2iz>
 80059f0:	4682      	mov	sl, r0
 80059f2:	f7fe f835 	bl	8003a60 <__aeabi_i2d>
 80059f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059fa:	f7fe f897 	bl	8003b2c <__aeabi_dmul>
 80059fe:	460b      	mov	r3, r1
 8005a00:	4602      	mov	r2, r0
 8005a02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a06:	f7fd fedd 	bl	80037c4 <__aeabi_dsub>
 8005a0a:	454f      	cmp	r7, r9
 8005a0c:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 8005a10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a14:	f805 3b01 	strb.w	r3, [r5], #1
 8005a18:	d12c      	bne.n	8005a74 <_dtoa_r+0x6e4>
 8005a1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a1e:	f7fd fed3 	bl	80037c8 <__adddf3>
 8005a22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a2a:	f7fe fb0f 	bl	800404c <__aeabi_dcmpgt>
 8005a2e:	b9c0      	cbnz	r0, 8005a62 <_dtoa_r+0x6d2>
 8005a30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a38:	f7fe fae0 	bl	8003ffc <__aeabi_dcmpeq>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	f000 8255 	beq.w	8005eec <_dtoa_r+0xb5c>
 8005a42:	f01a 0f01 	tst.w	sl, #1
 8005a46:	d10c      	bne.n	8005a62 <_dtoa_r+0x6d2>
 8005a48:	e250      	b.n	8005eec <_dtoa_r+0xb5c>
 8005a4a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005a4c:	4283      	cmp	r3, r0
 8005a4e:	d001      	beq.n	8005a54 <_dtoa_r+0x6c4>
 8005a50:	461d      	mov	r5, r3
 8005a52:	e006      	b.n	8005a62 <_dtoa_r+0x6d2>
 8005a54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a56:	2330      	movs	r3, #48	; 0x30
 8005a58:	3601      	adds	r6, #1
 8005a5a:	700b      	strb	r3, [r1, #0]
 8005a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a5e:	e005      	b.n	8005a6c <_dtoa_r+0x6dc>
 8005a60:	9e08      	ldr	r6, [sp, #32]
 8005a62:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a66:	1e6b      	subs	r3, r5, #1
 8005a68:	2a39      	cmp	r2, #57	; 0x39
 8005a6a:	d0ee      	beq.n	8005a4a <_dtoa_r+0x6ba>
 8005a6c:	781a      	ldrb	r2, [r3, #0]
 8005a6e:	3201      	adds	r2, #1
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	e23b      	b.n	8005eec <_dtoa_r+0xb5c>
 8005a74:	2200      	movs	r2, #0
 8005a76:	4b3b      	ldr	r3, [pc, #236]	; (8005b64 <_dtoa_r+0x7d4>)
 8005a78:	f7fe f858 	bl	8003b2c <__aeabi_dmul>
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a84:	f7fe faba 	bl	8003ffc <__aeabi_dcmpeq>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	f040 822f 	bne.w	8005eec <_dtoa_r+0xb5c>
 8005a8e:	3701      	adds	r7, #1
 8005a90:	e7a6      	b.n	80059e0 <_dtoa_r+0x650>
 8005a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a94:	b91b      	cbnz	r3, 8005a9e <_dtoa_r+0x70e>
 8005a96:	4653      	mov	r3, sl
 8005a98:	465d      	mov	r5, fp
 8005a9a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005a9c:	e031      	b.n	8005b02 <_dtoa_r+0x772>
 8005a9e:	9824      	ldr	r0, [sp, #144]	; 0x90
 8005aa0:	2801      	cmp	r0, #1
 8005aa2:	dc0b      	bgt.n	8005abc <_dtoa_r+0x72c>
 8005aa4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005aa6:	b119      	cbz	r1, 8005ab0 <_dtoa_r+0x720>
 8005aa8:	f502 6286 	add.w	r2, r2, #1072	; 0x430
 8005aac:	3203      	adds	r2, #3
 8005aae:	e002      	b.n	8005ab6 <_dtoa_r+0x726>
 8005ab0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005ab2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005ab6:	4653      	mov	r3, sl
 8005ab8:	465d      	mov	r5, fp
 8005aba:	e015      	b.n	8005ae8 <_dtoa_r+0x758>
 8005abc:	f109 33ff 	add.w	r3, r9, #4294967295
 8005ac0:	459a      	cmp	sl, r3
 8005ac2:	db02      	blt.n	8005aca <_dtoa_r+0x73a>
 8005ac4:	ebc3 030a 	rsb	r3, r3, sl
 8005ac8:	e006      	b.n	8005ad8 <_dtoa_r+0x748>
 8005aca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005acc:	ebca 0303 	rsb	r3, sl, r3
 8005ad0:	449a      	add	sl, r3
 8005ad2:	18d2      	adds	r2, r2, r3
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	9213      	str	r2, [sp, #76]	; 0x4c
 8005ad8:	f1b9 0f00 	cmp.w	r9, #0
 8005adc:	bfa7      	ittee	ge
 8005ade:	465d      	movge	r5, fp
 8005ae0:	464a      	movge	r2, r9
 8005ae2:	ebc9 050b 	rsblt	r5, r9, fp
 8005ae6:	2200      	movlt	r2, #0
 8005ae8:	f8dd c018 	ldr.w	ip, [sp, #24]
 8005aec:	4620      	mov	r0, r4
 8005aee:	2101      	movs	r1, #1
 8005af0:	9302      	str	r3, [sp, #8]
 8005af2:	4494      	add	ip, r2
 8005af4:	4493      	add	fp, r2
 8005af6:	f8cd c018 	str.w	ip, [sp, #24]
 8005afa:	f001 f910 	bl	8006d1e <__i2b>
 8005afe:	9b02      	ldr	r3, [sp, #8]
 8005b00:	4607      	mov	r7, r0
 8005b02:	b15d      	cbz	r5, 8005b1c <_dtoa_r+0x78c>
 8005b04:	9806      	ldr	r0, [sp, #24]
 8005b06:	2800      	cmp	r0, #0
 8005b08:	dd08      	ble.n	8005b1c <_dtoa_r+0x78c>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	42aa      	cmp	r2, r5
 8005b0e:	bfa8      	it	ge
 8005b10:	462a      	movge	r2, r5
 8005b12:	ebc2 0b0b 	rsb	fp, r2, fp
 8005b16:	1aad      	subs	r5, r5, r2
 8005b18:	1a80      	subs	r0, r0, r2
 8005b1a:	9006      	str	r0, [sp, #24]
 8005b1c:	f1ba 0f00 	cmp.w	sl, #0
 8005b20:	dd2c      	ble.n	8005b7c <_dtoa_r+0x7ec>
 8005b22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b24:	b321      	cbz	r1, 8005b70 <_dtoa_r+0x7e0>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	dd14      	ble.n	8005b54 <_dtoa_r+0x7c4>
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	4620      	mov	r0, r4
 8005b30:	9302      	str	r3, [sp, #8]
 8005b32:	f001 f93f 	bl	8006db4 <__pow5mult>
 8005b36:	4642      	mov	r2, r8
 8005b38:	4607      	mov	r7, r0
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	4639      	mov	r1, r7
 8005b3e:	f001 f85d 	bl	8006bfc <__multiply>
 8005b42:	4641      	mov	r1, r8
 8005b44:	4602      	mov	r2, r0
 8005b46:	4620      	mov	r0, r4
 8005b48:	9203      	str	r2, [sp, #12]
 8005b4a:	f000 fef2 	bl	8006932 <_Bfree>
 8005b4e:	9a03      	ldr	r2, [sp, #12]
 8005b50:	9b02      	ldr	r3, [sp, #8]
 8005b52:	4690      	mov	r8, r2
 8005b54:	ebba 0203 	subs.w	r2, sl, r3
 8005b58:	d010      	beq.n	8005b7c <_dtoa_r+0x7ec>
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	4641      	mov	r1, r8
 8005b5e:	e00a      	b.n	8005b76 <_dtoa_r+0x7e6>
 8005b60:	3fe00000 	.word	0x3fe00000
 8005b64:	40240000 	.word	0x40240000
 8005b68:	08007440 	.word	0x08007440
 8005b6c:	40140000 	.word	0x40140000
 8005b70:	4620      	mov	r0, r4
 8005b72:	4641      	mov	r1, r8
 8005b74:	4652      	mov	r2, sl
 8005b76:	f001 f91d 	bl	8006db4 <__pow5mult>
 8005b7a:	4680      	mov	r8, r0
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f001 f8cd 	bl	8006d1e <__i2b>
 8005b84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b86:	2a00      	cmp	r2, #0
 8005b88:	4682      	mov	sl, r0
 8005b8a:	dd04      	ble.n	8005b96 <_dtoa_r+0x806>
 8005b8c:	4651      	mov	r1, sl
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f001 f910 	bl	8006db4 <__pow5mult>
 8005b94:	4682      	mov	sl, r0
 8005b96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	dc13      	bgt.n	8005bc4 <_dtoa_r+0x834>
 8005b9c:	9804      	ldr	r0, [sp, #16]
 8005b9e:	b988      	cbnz	r0, 8005bc4 <_dtoa_r+0x834>
 8005ba0:	9a05      	ldr	r2, [sp, #20]
 8005ba2:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
 8005ba6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005baa:	b95b      	cbnz	r3, 8005bc4 <_dtoa_r+0x834>
 8005bac:	4b8a      	ldr	r3, [pc, #552]	; (8005dd8 <_dtoa_r+0xa48>)
 8005bae:	ea02 0303 	and.w	r3, r2, r3
 8005bb2:	b13b      	cbz	r3, 8005bc4 <_dtoa_r+0x834>
 8005bb4:	9906      	ldr	r1, [sp, #24]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f10b 0b01 	add.w	fp, fp, #1
 8005bbc:	9208      	str	r2, [sp, #32]
 8005bbe:	3101      	adds	r1, #1
 8005bc0:	9106      	str	r1, [sp, #24]
 8005bc2:	e001      	b.n	8005bc8 <_dtoa_r+0x838>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	9308      	str	r3, [sp, #32]
 8005bc8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005bca:	b908      	cbnz	r0, 8005bd0 <_dtoa_r+0x840>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e008      	b.n	8005be2 <_dtoa_r+0x852>
 8005bd0:	f8da 3010 	ldr.w	r3, [sl, #16]
 8005bd4:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8005bd8:	6918      	ldr	r0, [r3, #16]
 8005bda:	f000 fd44 	bl	8006666 <__hi0bits>
 8005bde:	f1c0 0320 	rsb	r3, r0, #32
 8005be2:	9906      	ldr	r1, [sp, #24]
 8005be4:	185b      	adds	r3, r3, r1
 8005be6:	f013 031f 	ands.w	r3, r3, #31
 8005bea:	d00a      	beq.n	8005c02 <_dtoa_r+0x872>
 8005bec:	f1c3 0320 	rsb	r3, r3, #32
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	dd05      	ble.n	8005c00 <_dtoa_r+0x870>
 8005bf4:	3b04      	subs	r3, #4
 8005bf6:	18c9      	adds	r1, r1, r3
 8005bf8:	449b      	add	fp, r3
 8005bfa:	18ed      	adds	r5, r5, r3
 8005bfc:	9106      	str	r1, [sp, #24]
 8005bfe:	e006      	b.n	8005c0e <_dtoa_r+0x87e>
 8005c00:	d005      	beq.n	8005c0e <_dtoa_r+0x87e>
 8005c02:	331c      	adds	r3, #28
 8005c04:	9a06      	ldr	r2, [sp, #24]
 8005c06:	449b      	add	fp, r3
 8005c08:	18ed      	adds	r5, r5, r3
 8005c0a:	18d2      	adds	r2, r2, r3
 8005c0c:	9206      	str	r2, [sp, #24]
 8005c0e:	f1bb 0f00 	cmp.w	fp, #0
 8005c12:	dd05      	ble.n	8005c20 <_dtoa_r+0x890>
 8005c14:	4641      	mov	r1, r8
 8005c16:	4620      	mov	r0, r4
 8005c18:	465a      	mov	r2, fp
 8005c1a:	f000 ff9d 	bl	8006b58 <__lshift>
 8005c1e:	4680      	mov	r8, r0
 8005c20:	9b06      	ldr	r3, [sp, #24]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	dd05      	ble.n	8005c32 <_dtoa_r+0x8a2>
 8005c26:	4651      	mov	r1, sl
 8005c28:	4620      	mov	r0, r4
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f000 ff94 	bl	8006b58 <__lshift>
 8005c30:	4682      	mov	sl, r0
 8005c32:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005c34:	b1c0      	cbz	r0, 8005c68 <_dtoa_r+0x8d8>
 8005c36:	4640      	mov	r0, r8
 8005c38:	4651      	mov	r1, sl
 8005c3a:	f000 fd66 	bl	800670a <__mcmp>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	da12      	bge.n	8005c68 <_dtoa_r+0x8d8>
 8005c42:	4641      	mov	r1, r8
 8005c44:	4620      	mov	r0, r4
 8005c46:	220a      	movs	r2, #10
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f001 f871 	bl	8006d30 <__multadd>
 8005c4e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c50:	3e01      	subs	r6, #1
 8005c52:	4680      	mov	r8, r0
 8005c54:	b131      	cbz	r1, 8005c64 <_dtoa_r+0x8d4>
 8005c56:	4639      	mov	r1, r7
 8005c58:	4620      	mov	r0, r4
 8005c5a:	220a      	movs	r2, #10
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f001 f867 	bl	8006d30 <__multadd>
 8005c62:	4607      	mov	r7, r0
 8005c64:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005c68:	f1b9 0f00 	cmp.w	r9, #0
 8005c6c:	dc29      	bgt.n	8005cc2 <_dtoa_r+0x932>
 8005c6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c70:	2a02      	cmp	r2, #2
 8005c72:	dd26      	ble.n	8005cc2 <_dtoa_r+0x932>
 8005c74:	f1b9 0f00 	cmp.w	r9, #0
 8005c78:	d110      	bne.n	8005c9c <_dtoa_r+0x90c>
 8005c7a:	4651      	mov	r1, sl
 8005c7c:	2205      	movs	r2, #5
 8005c7e:	464b      	mov	r3, r9
 8005c80:	4620      	mov	r0, r4
 8005c82:	f001 f855 	bl	8006d30 <__multadd>
 8005c86:	4682      	mov	sl, r0
 8005c88:	4640      	mov	r0, r8
 8005c8a:	4651      	mov	r1, sl
 8005c8c:	f000 fd3d 	bl	800670a <__mcmp>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	dc0d      	bgt.n	8005cb0 <_dtoa_r+0x920>
 8005c94:	e002      	b.n	8005c9c <_dtoa_r+0x90c>
 8005c96:	f04f 0a00 	mov.w	sl, #0
 8005c9a:	4657      	mov	r7, sl
 8005c9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ca2:	43db      	mvns	r3, r3
 8005ca4:	9004      	str	r0, [sp, #16]
 8005ca6:	9308      	str	r3, [sp, #32]
 8005ca8:	e10f      	b.n	8005eca <_dtoa_r+0xb3a>
 8005caa:	9e08      	ldr	r6, [sp, #32]
 8005cac:	46ba      	mov	sl, r7
 8005cae:	4657      	mov	r7, sl
 8005cb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cb2:	2331      	movs	r3, #49	; 0x31
 8005cb4:	3601      	adds	r6, #1
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	f805 3b01 	strb.w	r3, [r5], #1
 8005cbc:	9608      	str	r6, [sp, #32]
 8005cbe:	9104      	str	r1, [sp, #16]
 8005cc0:	e103      	b.n	8005eca <_dtoa_r+0xb3a>
 8005cc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005cc4:	2a00      	cmp	r2, #0
 8005cc6:	f000 80b5 	beq.w	8005e34 <_dtoa_r+0xaa4>
 8005cca:	2d00      	cmp	r5, #0
 8005ccc:	dd05      	ble.n	8005cda <_dtoa_r+0x94a>
 8005cce:	4639      	mov	r1, r7
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	462a      	mov	r2, r5
 8005cd4:	f000 ff40 	bl	8006b58 <__lshift>
 8005cd8:	4607      	mov	r7, r0
 8005cda:	9b08      	ldr	r3, [sp, #32]
 8005cdc:	b90b      	cbnz	r3, 8005ce2 <_dtoa_r+0x952>
 8005cde:	4638      	mov	r0, r7
 8005ce0:	e011      	b.n	8005d06 <_dtoa_r+0x976>
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f000 fe3b 	bl	8006960 <_Balloc>
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	f107 010c 	add.w	r1, r7, #12
 8005cf0:	3202      	adds	r2, #2
 8005cf2:	0092      	lsls	r2, r2, #2
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	300c      	adds	r0, #12
 8005cf8:	f000 fc89 	bl	800660e <memcpy>
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	4629      	mov	r1, r5
 8005d00:	2201      	movs	r2, #1
 8005d02:	f000 ff29 	bl	8006b58 <__lshift>
 8005d06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d08:	2201      	movs	r2, #1
 8005d0a:	9904      	ldr	r1, [sp, #16]
 8005d0c:	9704      	str	r7, [sp, #16]
 8005d0e:	4607      	mov	r7, r0
 8005d10:	f001 0101 	and.w	r1, r1, #1
 8005d14:	9208      	str	r2, [sp, #32]
 8005d16:	910e      	str	r1, [sp, #56]	; 0x38
 8005d18:	9606      	str	r6, [sp, #24]
 8005d1a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8005d1e:	4651      	mov	r1, sl
 8005d20:	4640      	mov	r0, r8
 8005d22:	f7ff faa7 	bl	8005274 <quorem>
 8005d26:	9904      	ldr	r1, [sp, #16]
 8005d28:	f100 0630 	add.w	r6, r0, #48	; 0x30
 8005d2c:	4640      	mov	r0, r8
 8005d2e:	f000 fcec 	bl	800670a <__mcmp>
 8005d32:	4651      	mov	r1, sl
 8005d34:	463a      	mov	r2, r7
 8005d36:	900d      	str	r0, [sp, #52]	; 0x34
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f000 fea5 	bl	8006a88 <__mdiff>
 8005d3e:	68c3      	ldr	r3, [r0, #12]
 8005d40:	4681      	mov	r9, r0
 8005d42:	b113      	cbz	r3, 8005d4a <_dtoa_r+0x9ba>
 8005d44:	f04f 0b01 	mov.w	fp, #1
 8005d48:	e004      	b.n	8005d54 <_dtoa_r+0x9c4>
 8005d4a:	4640      	mov	r0, r8
 8005d4c:	4649      	mov	r1, r9
 8005d4e:	f000 fcdc 	bl	800670a <__mcmp>
 8005d52:	4683      	mov	fp, r0
 8005d54:	4620      	mov	r0, r4
 8005d56:	4649      	mov	r1, r9
 8005d58:	f000 fdeb 	bl	8006932 <_Bfree>
 8005d5c:	f1bb 0f00 	cmp.w	fp, #0
 8005d60:	d10b      	bne.n	8005d7a <_dtoa_r+0x9ea>
 8005d62:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005d64:	b94b      	cbnz	r3, 8005d7a <_dtoa_r+0x9ea>
 8005d66:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005d68:	b938      	cbnz	r0, 8005d7a <_dtoa_r+0x9ea>
 8005d6a:	4633      	mov	r3, r6
 8005d6c:	9e06      	ldr	r6, [sp, #24]
 8005d6e:	2b39      	cmp	r3, #57	; 0x39
 8005d70:	d029      	beq.n	8005dc6 <_dtoa_r+0xa36>
 8005d72:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d74:	2900      	cmp	r1, #0
 8005d76:	dc2a      	bgt.n	8005dce <_dtoa_r+0xa3e>
 8005d78:	e02a      	b.n	8005dd0 <_dtoa_r+0xa40>
 8005d7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d7c:	2a00      	cmp	r2, #0
 8005d7e:	db04      	blt.n	8005d8a <_dtoa_r+0x9fa>
 8005d80:	d11a      	bne.n	8005db8 <_dtoa_r+0xa28>
 8005d82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005d84:	b9c3      	cbnz	r3, 8005db8 <_dtoa_r+0xa28>
 8005d86:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005d88:	b9b0      	cbnz	r0, 8005db8 <_dtoa_r+0xa28>
 8005d8a:	f1bb 0f00 	cmp.w	fp, #0
 8005d8e:	4633      	mov	r3, r6
 8005d90:	9e06      	ldr	r6, [sp, #24]
 8005d92:	dd1d      	ble.n	8005dd0 <_dtoa_r+0xa40>
 8005d94:	4641      	mov	r1, r8
 8005d96:	2201      	movs	r2, #1
 8005d98:	4620      	mov	r0, r4
 8005d9a:	9302      	str	r3, [sp, #8]
 8005d9c:	f000 fedc 	bl	8006b58 <__lshift>
 8005da0:	4651      	mov	r1, sl
 8005da2:	4680      	mov	r8, r0
 8005da4:	f000 fcb1 	bl	800670a <__mcmp>
 8005da8:	9b02      	ldr	r3, [sp, #8]
 8005daa:	2800      	cmp	r0, #0
 8005dac:	dc09      	bgt.n	8005dc2 <_dtoa_r+0xa32>
 8005dae:	d10f      	bne.n	8005dd0 <_dtoa_r+0xa40>
 8005db0:	f013 0f01 	tst.w	r3, #1
 8005db4:	d00c      	beq.n	8005dd0 <_dtoa_r+0xa40>
 8005db6:	e004      	b.n	8005dc2 <_dtoa_r+0xa32>
 8005db8:	f1bb 0f00 	cmp.w	fp, #0
 8005dbc:	dd0e      	ble.n	8005ddc <_dtoa_r+0xa4c>
 8005dbe:	4633      	mov	r3, r6
 8005dc0:	9e06      	ldr	r6, [sp, #24]
 8005dc2:	2b39      	cmp	r3, #57	; 0x39
 8005dc4:	d103      	bne.n	8005dce <_dtoa_r+0xa3e>
 8005dc6:	2339      	movs	r3, #57	; 0x39
 8005dc8:	f805 3b01 	strb.w	r3, [r5], #1
 8005dcc:	e06e      	b.n	8005eac <_dtoa_r+0xb1c>
 8005dce:	3301      	adds	r3, #1
 8005dd0:	f805 3b01 	strb.w	r3, [r5], #1
 8005dd4:	e078      	b.n	8005ec8 <_dtoa_r+0xb38>
 8005dd6:	bf00      	nop
 8005dd8:	7ff00000 	.word	0x7ff00000
 8005ddc:	f805 6b01 	strb.w	r6, [r5], #1
 8005de0:	9a08      	ldr	r2, [sp, #32]
 8005de2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005de4:	428a      	cmp	r2, r1
 8005de6:	d041      	beq.n	8005e6c <_dtoa_r+0xadc>
 8005de8:	2300      	movs	r3, #0
 8005dea:	4641      	mov	r1, r8
 8005dec:	220a      	movs	r2, #10
 8005dee:	4620      	mov	r0, r4
 8005df0:	f000 ff9e 	bl	8006d30 <__multadd>
 8005df4:	9b04      	ldr	r3, [sp, #16]
 8005df6:	42bb      	cmp	r3, r7
 8005df8:	4680      	mov	r8, r0
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	d106      	bne.n	8005e0c <_dtoa_r+0xa7c>
 8005dfe:	4619      	mov	r1, r3
 8005e00:	220a      	movs	r2, #10
 8005e02:	2300      	movs	r3, #0
 8005e04:	f000 ff94 	bl	8006d30 <__multadd>
 8005e08:	9004      	str	r0, [sp, #16]
 8005e0a:	e00b      	b.n	8005e24 <_dtoa_r+0xa94>
 8005e0c:	9904      	ldr	r1, [sp, #16]
 8005e0e:	220a      	movs	r2, #10
 8005e10:	2300      	movs	r3, #0
 8005e12:	f000 ff8d 	bl	8006d30 <__multadd>
 8005e16:	4639      	mov	r1, r7
 8005e18:	220a      	movs	r2, #10
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	9004      	str	r0, [sp, #16]
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f000 ff86 	bl	8006d30 <__multadd>
 8005e24:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005e28:	4607      	mov	r7, r0
 8005e2a:	f10c 0c01 	add.w	ip, ip, #1
 8005e2e:	f8cd c020 	str.w	ip, [sp, #32]
 8005e32:	e774      	b.n	8005d1e <_dtoa_r+0x98e>
 8005e34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e36:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	4651      	mov	r1, sl
 8005e3e:	f7ff fa19 	bl	8005274 <quorem>
 8005e42:	3501      	adds	r5, #1
 8005e44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005e48:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005e4a:	f800 300b 	strb.w	r3, [r0, fp]
 8005e4e:	f10b 0b01 	add.w	fp, fp, #1
 8005e52:	45cb      	cmp	fp, r9
 8005e54:	da07      	bge.n	8005e66 <_dtoa_r+0xad6>
 8005e56:	4641      	mov	r1, r8
 8005e58:	4620      	mov	r0, r4
 8005e5a:	220a      	movs	r2, #10
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f000 ff67 	bl	8006d30 <__multadd>
 8005e62:	4680      	mov	r8, r0
 8005e64:	e7e9      	b.n	8005e3a <_dtoa_r+0xaaa>
 8005e66:	2100      	movs	r1, #0
 8005e68:	9104      	str	r1, [sp, #16]
 8005e6a:	e001      	b.n	8005e70 <_dtoa_r+0xae0>
 8005e6c:	4633      	mov	r3, r6
 8005e6e:	9e06      	ldr	r6, [sp, #24]
 8005e70:	4641      	mov	r1, r8
 8005e72:	2201      	movs	r2, #1
 8005e74:	4620      	mov	r0, r4
 8005e76:	9302      	str	r3, [sp, #8]
 8005e78:	f000 fe6e 	bl	8006b58 <__lshift>
 8005e7c:	4651      	mov	r1, sl
 8005e7e:	4680      	mov	r8, r0
 8005e80:	f000 fc43 	bl	800670a <__mcmp>
 8005e84:	9b02      	ldr	r3, [sp, #8]
 8005e86:	2800      	cmp	r0, #0
 8005e88:	dc10      	bgt.n	8005eac <_dtoa_r+0xb1c>
 8005e8a:	d102      	bne.n	8005e92 <_dtoa_r+0xb02>
 8005e8c:	f013 0f01 	tst.w	r3, #1
 8005e90:	d10c      	bne.n	8005eac <_dtoa_r+0xb1c>
 8005e92:	462b      	mov	r3, r5
 8005e94:	e012      	b.n	8005ebc <_dtoa_r+0xb2c>
 8005e96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d001      	beq.n	8005ea0 <_dtoa_r+0xb10>
 8005e9c:	461d      	mov	r5, r3
 8005e9e:	e005      	b.n	8005eac <_dtoa_r+0xb1c>
 8005ea0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005ea2:	3601      	adds	r6, #1
 8005ea4:	2331      	movs	r3, #49	; 0x31
 8005ea6:	9608      	str	r6, [sp, #32]
 8005ea8:	7003      	strb	r3, [r0, #0]
 8005eaa:	e00e      	b.n	8005eca <_dtoa_r+0xb3a>
 8005eac:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005eb0:	1e6b      	subs	r3, r5, #1
 8005eb2:	2a39      	cmp	r2, #57	; 0x39
 8005eb4:	d0ef      	beq.n	8005e96 <_dtoa_r+0xb06>
 8005eb6:	3201      	adds	r2, #1
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	e005      	b.n	8005ec8 <_dtoa_r+0xb38>
 8005ebc:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8005ec0:	461d      	mov	r5, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	2a30      	cmp	r2, #48	; 0x30
 8005ec6:	d0f9      	beq.n	8005ebc <_dtoa_r+0xb2c>
 8005ec8:	9608      	str	r6, [sp, #32]
 8005eca:	4620      	mov	r0, r4
 8005ecc:	4651      	mov	r1, sl
 8005ece:	f000 fd30 	bl	8006932 <_Bfree>
 8005ed2:	b167      	cbz	r7, 8005eee <_dtoa_r+0xb5e>
 8005ed4:	9904      	ldr	r1, [sp, #16]
 8005ed6:	b121      	cbz	r1, 8005ee2 <_dtoa_r+0xb52>
 8005ed8:	42b9      	cmp	r1, r7
 8005eda:	d002      	beq.n	8005ee2 <_dtoa_r+0xb52>
 8005edc:	4620      	mov	r0, r4
 8005ede:	f000 fd28 	bl	8006932 <_Bfree>
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	4639      	mov	r1, r7
 8005ee6:	f000 fd24 	bl	8006932 <_Bfree>
 8005eea:	e000      	b.n	8005eee <_dtoa_r+0xb5e>
 8005eec:	9608      	str	r6, [sp, #32]
 8005eee:	4620      	mov	r0, r4
 8005ef0:	4641      	mov	r1, r8
 8005ef2:	f000 fd1e 	bl	8006932 <_Bfree>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	702b      	strb	r3, [r5, #0]
 8005efa:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005efc:	9a08      	ldr	r2, [sp, #32]
 8005efe:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8005f00:	1c53      	adds	r3, r2, #1
 8005f02:	6003      	str	r3, [r0, #0]
 8005f04:	b109      	cbz	r1, 8005f0a <_dtoa_r+0xb7a>
 8005f06:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8005f08:	6015      	str	r5, [r2, #0]
 8005f0a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005f0c:	b01b      	add	sp, #108	; 0x6c
 8005f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f12:	bf00      	nop
 8005f14:	f3af 8000 	nop.w

08005f18 <_malloc_trim_r>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	4e22      	ldr	r6, [pc, #136]	; (8005fa4 <_malloc_trim_r+0x8c>)
 8005f1c:	460d      	mov	r5, r1
 8005f1e:	4604      	mov	r4, r0
 8005f20:	f000 fb9f 	bl	8006662 <__malloc_lock>
 8005f24:	68b3      	ldr	r3, [r6, #8]
 8005f26:	685f      	ldr	r7, [r3, #4]
 8005f28:	f027 0703 	bic.w	r7, r7, #3
 8005f2c:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 8005f30:	330f      	adds	r3, #15
 8005f32:	1b5d      	subs	r5, r3, r5
 8005f34:	0b2d      	lsrs	r5, r5, #12
 8005f36:	3d01      	subs	r5, #1
 8005f38:	032d      	lsls	r5, r5, #12
 8005f3a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005f3e:	db1e      	blt.n	8005f7e <_malloc_trim_r+0x66>
 8005f40:	2100      	movs	r1, #0
 8005f42:	4620      	mov	r0, r4
 8005f44:	f001 f962 	bl	800720c <_sbrk_r>
 8005f48:	68b3      	ldr	r3, [r6, #8]
 8005f4a:	18fb      	adds	r3, r7, r3
 8005f4c:	4298      	cmp	r0, r3
 8005f4e:	d116      	bne.n	8005f7e <_malloc_trim_r+0x66>
 8005f50:	4269      	negs	r1, r5
 8005f52:	4620      	mov	r0, r4
 8005f54:	f001 f95a 	bl	800720c <_sbrk_r>
 8005f58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005f5c:	d114      	bne.n	8005f88 <_malloc_trim_r+0x70>
 8005f5e:	2100      	movs	r1, #0
 8005f60:	4620      	mov	r0, r4
 8005f62:	f001 f953 	bl	800720c <_sbrk_r>
 8005f66:	68b3      	ldr	r3, [r6, #8]
 8005f68:	1ac2      	subs	r2, r0, r3
 8005f6a:	2a0f      	cmp	r2, #15
 8005f6c:	dd07      	ble.n	8005f7e <_malloc_trim_r+0x66>
 8005f6e:	490e      	ldr	r1, [pc, #56]	; (8005fa8 <_malloc_trim_r+0x90>)
 8005f70:	f042 0201 	orr.w	r2, r2, #1
 8005f74:	6809      	ldr	r1, [r1, #0]
 8005f76:	1a40      	subs	r0, r0, r1
 8005f78:	490c      	ldr	r1, [pc, #48]	; (8005fac <_malloc_trim_r+0x94>)
 8005f7a:	6008      	str	r0, [r1, #0]
 8005f7c:	605a      	str	r2, [r3, #4]
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f000 fb70 	bl	8006664 <__malloc_unlock>
 8005f84:	2000      	movs	r0, #0
 8005f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f88:	68b3      	ldr	r3, [r6, #8]
 8005f8a:	1b7f      	subs	r7, r7, r5
 8005f8c:	f047 0701 	orr.w	r7, r7, #1
 8005f90:	4620      	mov	r0, r4
 8005f92:	605f      	str	r7, [r3, #4]
 8005f94:	4b05      	ldr	r3, [pc, #20]	; (8005fac <_malloc_trim_r+0x94>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	1b55      	subs	r5, r2, r5
 8005f9a:	601d      	str	r5, [r3, #0]
 8005f9c:	f000 fb62 	bl	8006664 <__malloc_unlock>
 8005fa0:	2001      	movs	r0, #1
 8005fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fa4:	200001f4 	.word	0x200001f4
 8005fa8:	20000600 	.word	0x20000600
 8005fac:	20000624 	.word	0x20000624

08005fb0 <_free_r>:
 8005fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	460d      	mov	r5, r1
 8005fb8:	2900      	cmp	r1, #0
 8005fba:	f000 80bd 	beq.w	8006138 <_free_r+0x188>
 8005fbe:	f000 fb50 	bl	8006662 <__malloc_lock>
 8005fc2:	f1a5 0308 	sub.w	r3, r5, #8
 8005fc6:	485d      	ldr	r0, [pc, #372]	; (800613c <_free_r+0x18c>)
 8005fc8:	685f      	ldr	r7, [r3, #4]
 8005fca:	f027 0201 	bic.w	r2, r7, #1
 8005fce:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8005fd2:	1899      	adds	r1, r3, r2
 8005fd4:	f007 0701 	and.w	r7, r7, #1
 8005fd8:	4561      	cmp	r1, ip
 8005fda:	684e      	ldr	r6, [r1, #4]
 8005fdc:	f026 0603 	bic.w	r6, r6, #3
 8005fe0:	d118      	bne.n	8006014 <_free_r+0x64>
 8005fe2:	18b2      	adds	r2, r6, r2
 8005fe4:	b93f      	cbnz	r7, 8005ff6 <_free_r+0x46>
 8005fe6:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8005fea:	1a5b      	subs	r3, r3, r1
 8005fec:	1852      	adds	r2, r2, r1
 8005fee:	689d      	ldr	r5, [r3, #8]
 8005ff0:	68d9      	ldr	r1, [r3, #12]
 8005ff2:	60e9      	str	r1, [r5, #12]
 8005ff4:	608d      	str	r5, [r1, #8]
 8005ff6:	f042 0101 	orr.w	r1, r2, #1
 8005ffa:	6083      	str	r3, [r0, #8]
 8005ffc:	6059      	str	r1, [r3, #4]
 8005ffe:	4b50      	ldr	r3, [pc, #320]	; (8006140 <_free_r+0x190>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	f0c0 8093 	bcc.w	800612e <_free_r+0x17e>
 8006008:	4b4e      	ldr	r3, [pc, #312]	; (8006144 <_free_r+0x194>)
 800600a:	4620      	mov	r0, r4
 800600c:	6819      	ldr	r1, [r3, #0]
 800600e:	f7ff ff83 	bl	8005f18 <_malloc_trim_r>
 8006012:	e08c      	b.n	800612e <_free_r+0x17e>
 8006014:	604e      	str	r6, [r1, #4]
 8006016:	b10f      	cbz	r7, 800601c <_free_r+0x6c>
 8006018:	2500      	movs	r5, #0
 800601a:	e011      	b.n	8006040 <_free_r+0x90>
 800601c:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8006020:	f100 0c08 	add.w	ip, r0, #8
 8006024:	1b5b      	subs	r3, r3, r5
 8006026:	1952      	adds	r2, r2, r5
 8006028:	689d      	ldr	r5, [r3, #8]
 800602a:	4565      	cmp	r5, ip
 800602c:	d101      	bne.n	8006032 <_free_r+0x82>
 800602e:	2501      	movs	r5, #1
 8006030:	e006      	b.n	8006040 <_free_r+0x90>
 8006032:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8006036:	f8c5 c00c 	str.w	ip, [r5, #12]
 800603a:	f8cc 5008 	str.w	r5, [ip, #8]
 800603e:	463d      	mov	r5, r7
 8006040:	198f      	adds	r7, r1, r6
 8006042:	687f      	ldr	r7, [r7, #4]
 8006044:	f017 0f01 	tst.w	r7, #1
 8006048:	d10f      	bne.n	800606a <_free_r+0xba>
 800604a:	1992      	adds	r2, r2, r6
 800604c:	b94d      	cbnz	r5, 8006062 <_free_r+0xb2>
 800604e:	688e      	ldr	r6, [r1, #8]
 8006050:	4f3d      	ldr	r7, [pc, #244]	; (8006148 <_free_r+0x198>)
 8006052:	42be      	cmp	r6, r7
 8006054:	d105      	bne.n	8006062 <_free_r+0xb2>
 8006056:	60f3      	str	r3, [r6, #12]
 8006058:	3501      	adds	r5, #1
 800605a:	60b3      	str	r3, [r6, #8]
 800605c:	60de      	str	r6, [r3, #12]
 800605e:	609e      	str	r6, [r3, #8]
 8006060:	e003      	b.n	800606a <_free_r+0xba>
 8006062:	68ce      	ldr	r6, [r1, #12]
 8006064:	6889      	ldr	r1, [r1, #8]
 8006066:	60ce      	str	r6, [r1, #12]
 8006068:	60b1      	str	r1, [r6, #8]
 800606a:	f042 0101 	orr.w	r1, r2, #1
 800606e:	509a      	str	r2, [r3, r2]
 8006070:	6059      	str	r1, [r3, #4]
 8006072:	2d00      	cmp	r5, #0
 8006074:	d15b      	bne.n	800612e <_free_r+0x17e>
 8006076:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800607a:	d211      	bcs.n	80060a0 <_free_r+0xf0>
 800607c:	08d2      	lsrs	r2, r2, #3
 800607e:	f04f 0c01 	mov.w	ip, #1
 8006082:	6845      	ldr	r5, [r0, #4]
 8006084:	1091      	asrs	r1, r2, #2
 8006086:	fa0c f101 	lsl.w	r1, ip, r1
 800608a:	ea45 0101 	orr.w	r1, r5, r1
 800608e:	6041      	str	r1, [r0, #4]
 8006090:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8006094:	60d8      	str	r0, [r3, #12]
 8006096:	6882      	ldr	r2, [r0, #8]
 8006098:	609a      	str	r2, [r3, #8]
 800609a:	60d3      	str	r3, [r2, #12]
 800609c:	6083      	str	r3, [r0, #8]
 800609e:	e046      	b.n	800612e <_free_r+0x17e>
 80060a0:	ea4f 2c52 	mov.w	ip, r2, lsr #9
 80060a4:	f1bc 0f04 	cmp.w	ip, #4
 80060a8:	d804      	bhi.n	80060b4 <_free_r+0x104>
 80060aa:	ea4f 1c92 	mov.w	ip, r2, lsr #6
 80060ae:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 80060b2:	e01f      	b.n	80060f4 <_free_r+0x144>
 80060b4:	f1bc 0f14 	cmp.w	ip, #20
 80060b8:	d802      	bhi.n	80060c0 <_free_r+0x110>
 80060ba:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
 80060be:	e019      	b.n	80060f4 <_free_r+0x144>
 80060c0:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 80060c4:	d804      	bhi.n	80060d0 <_free_r+0x120>
 80060c6:	ea4f 3c12 	mov.w	ip, r2, lsr #12
 80060ca:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 80060ce:	e011      	b.n	80060f4 <_free_r+0x144>
 80060d0:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 80060d4:	d804      	bhi.n	80060e0 <_free_r+0x130>
 80060d6:	ea4f 3cd2 	mov.w	ip, r2, lsr #15
 80060da:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 80060de:	e009      	b.n	80060f4 <_free_r+0x144>
 80060e0:	f240 5154 	movw	r1, #1364	; 0x554
 80060e4:	458c      	cmp	ip, r1
 80060e6:	bf96      	itet	ls
 80060e8:	ea4f 4c92 	movls.w	ip, r2, lsr #18
 80060ec:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 80060f0:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 80060f4:	eb00 05cc 	add.w	r5, r0, ip, lsl #3
 80060f8:	68a9      	ldr	r1, [r5, #8]
 80060fa:	42a9      	cmp	r1, r5
 80060fc:	d10d      	bne.n	800611a <_free_r+0x16a>
 80060fe:	2201      	movs	r2, #1
 8006100:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8006104:	fa02 fc0c 	lsl.w	ip, r2, ip
 8006108:	6842      	ldr	r2, [r0, #4]
 800610a:	ea42 020c 	orr.w	r2, r2, ip
 800610e:	6042      	str	r2, [r0, #4]
 8006110:	460a      	mov	r2, r1
 8006112:	e008      	b.n	8006126 <_free_r+0x176>
 8006114:	6889      	ldr	r1, [r1, #8]
 8006116:	42a9      	cmp	r1, r5
 8006118:	d004      	beq.n	8006124 <_free_r+0x174>
 800611a:	6848      	ldr	r0, [r1, #4]
 800611c:	f020 0003 	bic.w	r0, r0, #3
 8006120:	4282      	cmp	r2, r0
 8006122:	d3f7      	bcc.n	8006114 <_free_r+0x164>
 8006124:	68ca      	ldr	r2, [r1, #12]
 8006126:	60da      	str	r2, [r3, #12]
 8006128:	6099      	str	r1, [r3, #8]
 800612a:	60cb      	str	r3, [r1, #12]
 800612c:	6093      	str	r3, [r2, #8]
 800612e:	4620      	mov	r0, r4
 8006130:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006134:	f000 ba96 	b.w	8006664 <__malloc_unlock>
 8006138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800613c:	200001f4 	.word	0x200001f4
 8006140:	200005fc 	.word	0x200005fc
 8006144:	20000620 	.word	0x20000620
 8006148:	200001fc 	.word	0x200001fc

0800614c <__locale_charset>:
 800614c:	4b01      	ldr	r3, [pc, #4]	; (8006154 <__locale_charset+0x8>)
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	080073ec 	.word	0x080073ec

08006158 <_localeconv_r>:
 8006158:	4800      	ldr	r0, [pc, #0]	; (800615c <_localeconv_r+0x4>)
 800615a:	4770      	bx	lr
 800615c:	080073f0 	.word	0x080073f0

08006160 <localeconv>:
 8006160:	4800      	ldr	r0, [pc, #0]	; (8006164 <localeconv+0x4>)
 8006162:	4770      	bx	lr
 8006164:	080073f0 	.word	0x080073f0

08006168 <_setlocale_r>:
 8006168:	b570      	push	{r4, r5, r6, lr}
 800616a:	4605      	mov	r5, r0
 800616c:	460e      	mov	r6, r1
 800616e:	4614      	mov	r4, r2
 8006170:	b90a      	cbnz	r2, 8006176 <_setlocale_r+0xe>
 8006172:	4809      	ldr	r0, [pc, #36]	; (8006198 <_setlocale_r+0x30>)
 8006174:	bd70      	pop	{r4, r5, r6, pc}
 8006176:	4610      	mov	r0, r2
 8006178:	4907      	ldr	r1, [pc, #28]	; (8006198 <_setlocale_r+0x30>)
 800617a:	f001 f859 	bl	8007230 <strcmp>
 800617e:	b130      	cbz	r0, 800618e <_setlocale_r+0x26>
 8006180:	4620      	mov	r0, r4
 8006182:	4906      	ldr	r1, [pc, #24]	; (800619c <_setlocale_r+0x34>)
 8006184:	f001 f854 	bl	8007230 <strcmp>
 8006188:	b108      	cbz	r0, 800618e <_setlocale_r+0x26>
 800618a:	2000      	movs	r0, #0
 800618c:	bd70      	pop	{r4, r5, r6, pc}
 800618e:	61ee      	str	r6, [r5, #28]
 8006190:	622c      	str	r4, [r5, #32]
 8006192:	4801      	ldr	r0, [pc, #4]	; (8006198 <_setlocale_r+0x30>)
 8006194:	bd70      	pop	{r4, r5, r6, pc}
 8006196:	bf00      	nop
 8006198:	080073e5 	.word	0x080073e5
 800619c:	08007421 	.word	0x08007421

080061a0 <setlocale>:
 80061a0:	460a      	mov	r2, r1
 80061a2:	4903      	ldr	r1, [pc, #12]	; (80061b0 <setlocale+0x10>)
 80061a4:	4603      	mov	r3, r0
 80061a6:	6808      	ldr	r0, [r1, #0]
 80061a8:	4619      	mov	r1, r3
 80061aa:	f7ff bfdd 	b.w	8006168 <_setlocale_r>
 80061ae:	bf00      	nop
 80061b0:	200001e0 	.word	0x200001e0

080061b4 <free>:
 80061b4:	4b02      	ldr	r3, [pc, #8]	; (80061c0 <free+0xc>)
 80061b6:	4601      	mov	r1, r0
 80061b8:	6818      	ldr	r0, [r3, #0]
 80061ba:	f7ff bef9 	b.w	8005fb0 <_free_r>
 80061be:	bf00      	nop
 80061c0:	200001e0 	.word	0x200001e0

080061c4 <malloc>:
 80061c4:	4b02      	ldr	r3, [pc, #8]	; (80061d0 <malloc+0xc>)
 80061c6:	4601      	mov	r1, r0
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	f000 b803 	b.w	80061d4 <_malloc_r>
 80061ce:	bf00      	nop
 80061d0:	200001e0 	.word	0x200001e0

080061d4 <_malloc_r>:
 80061d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d8:	f101 040b 	add.w	r4, r1, #11
 80061dc:	2c16      	cmp	r4, #22
 80061de:	4606      	mov	r6, r0
 80061e0:	d801      	bhi.n	80061e6 <_malloc_r+0x12>
 80061e2:	2410      	movs	r4, #16
 80061e4:	e002      	b.n	80061ec <_malloc_r+0x18>
 80061e6:	f034 0407 	bics.w	r4, r4, #7
 80061ea:	d401      	bmi.n	80061f0 <_malloc_r+0x1c>
 80061ec:	428c      	cmp	r4, r1
 80061ee:	d202      	bcs.n	80061f6 <_malloc_r+0x22>
 80061f0:	230c      	movs	r3, #12
 80061f2:	6033      	str	r3, [r6, #0]
 80061f4:	e1e3      	b.n	80065be <_malloc_r+0x3ea>
 80061f6:	4630      	mov	r0, r6
 80061f8:	f000 fa33 	bl	8006662 <__malloc_lock>
 80061fc:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8006200:	d215      	bcs.n	800622e <_malloc_r+0x5a>
 8006202:	08e1      	lsrs	r1, r4, #3
 8006204:	4b9b      	ldr	r3, [pc, #620]	; (8006474 <_malloc_r+0x2a0>)
 8006206:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800620a:	68dd      	ldr	r5, [r3, #12]
 800620c:	429d      	cmp	r5, r3
 800620e:	d104      	bne.n	800621a <_malloc_r+0x46>
 8006210:	f105 0308 	add.w	r3, r5, #8
 8006214:	68dd      	ldr	r5, [r3, #12]
 8006216:	429d      	cmp	r5, r3
 8006218:	d007      	beq.n	800622a <_malloc_r+0x56>
 800621a:	68ea      	ldr	r2, [r5, #12]
 800621c:	68a9      	ldr	r1, [r5, #8]
 800621e:	686b      	ldr	r3, [r5, #4]
 8006220:	60ca      	str	r2, [r1, #12]
 8006222:	f023 0303 	bic.w	r3, r3, #3
 8006226:	6091      	str	r1, [r2, #8]
 8006228:	e05b      	b.n	80062e2 <_malloc_r+0x10e>
 800622a:	3102      	adds	r1, #2
 800622c:	e03c      	b.n	80062a8 <_malloc_r+0xd4>
 800622e:	0a61      	lsrs	r1, r4, #9
 8006230:	d101      	bne.n	8006236 <_malloc_r+0x62>
 8006232:	08e1      	lsrs	r1, r4, #3
 8006234:	e01b      	b.n	800626e <_malloc_r+0x9a>
 8006236:	2904      	cmp	r1, #4
 8006238:	d802      	bhi.n	8006240 <_malloc_r+0x6c>
 800623a:	09a1      	lsrs	r1, r4, #6
 800623c:	3138      	adds	r1, #56	; 0x38
 800623e:	e016      	b.n	800626e <_malloc_r+0x9a>
 8006240:	2914      	cmp	r1, #20
 8006242:	d801      	bhi.n	8006248 <_malloc_r+0x74>
 8006244:	315b      	adds	r1, #91	; 0x5b
 8006246:	e012      	b.n	800626e <_malloc_r+0x9a>
 8006248:	2954      	cmp	r1, #84	; 0x54
 800624a:	d802      	bhi.n	8006252 <_malloc_r+0x7e>
 800624c:	0b21      	lsrs	r1, r4, #12
 800624e:	316e      	adds	r1, #110	; 0x6e
 8006250:	e00d      	b.n	800626e <_malloc_r+0x9a>
 8006252:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 8006256:	d802      	bhi.n	800625e <_malloc_r+0x8a>
 8006258:	0be1      	lsrs	r1, r4, #15
 800625a:	3177      	adds	r1, #119	; 0x77
 800625c:	e007      	b.n	800626e <_malloc_r+0x9a>
 800625e:	f240 5354 	movw	r3, #1364	; 0x554
 8006262:	4299      	cmp	r1, r3
 8006264:	d901      	bls.n	800626a <_malloc_r+0x96>
 8006266:	217e      	movs	r1, #126	; 0x7e
 8006268:	e001      	b.n	800626e <_malloc_r+0x9a>
 800626a:	0ca1      	lsrs	r1, r4, #18
 800626c:	317c      	adds	r1, #124	; 0x7c
 800626e:	4881      	ldr	r0, [pc, #516]	; (8006474 <_malloc_r+0x2a0>)
 8006270:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8006274:	68c5      	ldr	r5, [r0, #12]
 8006276:	e014      	b.n	80062a2 <_malloc_r+0xce>
 8006278:	686a      	ldr	r2, [r5, #4]
 800627a:	f022 0203 	bic.w	r2, r2, #3
 800627e:	1b13      	subs	r3, r2, r4
 8006280:	2b0f      	cmp	r3, #15
 8006282:	dd01      	ble.n	8006288 <_malloc_r+0xb4>
 8006284:	3901      	subs	r1, #1
 8006286:	e00e      	b.n	80062a6 <_malloc_r+0xd2>
 8006288:	2b00      	cmp	r3, #0
 800628a:	68eb      	ldr	r3, [r5, #12]
 800628c:	db08      	blt.n	80062a0 <_malloc_r+0xcc>
 800628e:	68a9      	ldr	r1, [r5, #8]
 8006290:	60cb      	str	r3, [r1, #12]
 8006292:	6099      	str	r1, [r3, #8]
 8006294:	18ab      	adds	r3, r5, r2
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	f042 0201 	orr.w	r2, r2, #1
 800629c:	605a      	str	r2, [r3, #4]
 800629e:	e199      	b.n	80065d4 <_malloc_r+0x400>
 80062a0:	461d      	mov	r5, r3
 80062a2:	4285      	cmp	r5, r0
 80062a4:	d1e8      	bne.n	8006278 <_malloc_r+0xa4>
 80062a6:	3101      	adds	r1, #1
 80062a8:	4f72      	ldr	r7, [pc, #456]	; (8006474 <_malloc_r+0x2a0>)
 80062aa:	f107 0208 	add.w	r2, r7, #8
 80062ae:	6895      	ldr	r5, [r2, #8]
 80062b0:	4295      	cmp	r5, r2
 80062b2:	d077      	beq.n	80063a4 <_malloc_r+0x1d0>
 80062b4:	686b      	ldr	r3, [r5, #4]
 80062b6:	f023 0303 	bic.w	r3, r3, #3
 80062ba:	1b18      	subs	r0, r3, r4
 80062bc:	280f      	cmp	r0, #15
 80062be:	dd0c      	ble.n	80062da <_malloc_r+0x106>
 80062c0:	192b      	adds	r3, r5, r4
 80062c2:	f044 0401 	orr.w	r4, r4, #1
 80062c6:	60d3      	str	r3, [r2, #12]
 80062c8:	6093      	str	r3, [r2, #8]
 80062ca:	606c      	str	r4, [r5, #4]
 80062cc:	60da      	str	r2, [r3, #12]
 80062ce:	609a      	str	r2, [r3, #8]
 80062d0:	f040 0201 	orr.w	r2, r0, #1
 80062d4:	5018      	str	r0, [r3, r0]
 80062d6:	605a      	str	r2, [r3, #4]
 80062d8:	e17c      	b.n	80065d4 <_malloc_r+0x400>
 80062da:	2800      	cmp	r0, #0
 80062dc:	60d2      	str	r2, [r2, #12]
 80062de:	6092      	str	r2, [r2, #8]
 80062e0:	db01      	blt.n	80062e6 <_malloc_r+0x112>
 80062e2:	18eb      	adds	r3, r5, r3
 80062e4:	e7d7      	b.n	8006296 <_malloc_r+0xc2>
 80062e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ea:	d212      	bcs.n	8006312 <_malloc_r+0x13e>
 80062ec:	08db      	lsrs	r3, r3, #3
 80062ee:	f04f 0c01 	mov.w	ip, #1
 80062f2:	1098      	asrs	r0, r3, #2
 80062f4:	fa0c f000 	lsl.w	r0, ip, r0
 80062f8:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80062fc:	ea4c 0000 	orr.w	r0, ip, r0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8006306:	60ef      	str	r7, [r5, #12]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	60ab      	str	r3, [r5, #8]
 800630c:	60dd      	str	r5, [r3, #12]
 800630e:	60bd      	str	r5, [r7, #8]
 8006310:	e048      	b.n	80063a4 <_malloc_r+0x1d0>
 8006312:	ea4f 2c53 	mov.w	ip, r3, lsr #9
 8006316:	f1bc 0f04 	cmp.w	ip, #4
 800631a:	d804      	bhi.n	8006326 <_malloc_r+0x152>
 800631c:	ea4f 1c93 	mov.w	ip, r3, lsr #6
 8006320:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8006324:	e01f      	b.n	8006366 <_malloc_r+0x192>
 8006326:	f1bc 0f14 	cmp.w	ip, #20
 800632a:	d802      	bhi.n	8006332 <_malloc_r+0x15e>
 800632c:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
 8006330:	e019      	b.n	8006366 <_malloc_r+0x192>
 8006332:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 8006336:	d804      	bhi.n	8006342 <_malloc_r+0x16e>
 8006338:	ea4f 3c13 	mov.w	ip, r3, lsr #12
 800633c:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 8006340:	e011      	b.n	8006366 <_malloc_r+0x192>
 8006342:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 8006346:	d804      	bhi.n	8006352 <_malloc_r+0x17e>
 8006348:	ea4f 3cd3 	mov.w	ip, r3, lsr #15
 800634c:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 8006350:	e009      	b.n	8006366 <_malloc_r+0x192>
 8006352:	f240 5054 	movw	r0, #1364	; 0x554
 8006356:	4584      	cmp	ip, r0
 8006358:	bf96      	itet	ls
 800635a:	ea4f 4c93 	movls.w	ip, r3, lsr #18
 800635e:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 8006362:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 8006366:	4f43      	ldr	r7, [pc, #268]	; (8006474 <_malloc_r+0x2a0>)
 8006368:	eb07 0ecc 	add.w	lr, r7, ip, lsl #3
 800636c:	f8de 0008 	ldr.w	r0, [lr, #8]
 8006370:	4570      	cmp	r0, lr
 8006372:	d10d      	bne.n	8006390 <_malloc_r+0x1bc>
 8006374:	2301      	movs	r3, #1
 8006376:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800637a:	fa03 fc0c 	lsl.w	ip, r3, ip
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	ea43 030c 	orr.w	r3, r3, ip
 8006384:	607b      	str	r3, [r7, #4]
 8006386:	4603      	mov	r3, r0
 8006388:	e008      	b.n	800639c <_malloc_r+0x1c8>
 800638a:	6880      	ldr	r0, [r0, #8]
 800638c:	4570      	cmp	r0, lr
 800638e:	d004      	beq.n	800639a <_malloc_r+0x1c6>
 8006390:	6847      	ldr	r7, [r0, #4]
 8006392:	f027 0c03 	bic.w	ip, r7, #3
 8006396:	4563      	cmp	r3, ip
 8006398:	d3f7      	bcc.n	800638a <_malloc_r+0x1b6>
 800639a:	68c3      	ldr	r3, [r0, #12]
 800639c:	60eb      	str	r3, [r5, #12]
 800639e:	60a8      	str	r0, [r5, #8]
 80063a0:	60c5      	str	r5, [r0, #12]
 80063a2:	609d      	str	r5, [r3, #8]
 80063a4:	4f33      	ldr	r7, [pc, #204]	; (8006474 <_malloc_r+0x2a0>)
 80063a6:	2001      	movs	r0, #1
 80063a8:	108b      	asrs	r3, r1, #2
 80063aa:	fa10 f303 	lsls.w	r3, r0, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4283      	cmp	r3, r0
 80063b2:	d861      	bhi.n	8006478 <_malloc_r+0x2a4>
 80063b4:	4203      	tst	r3, r0
 80063b6:	d105      	bne.n	80063c4 <_malloc_r+0x1f0>
 80063b8:	f021 0103 	bic.w	r1, r1, #3
 80063bc:	005b      	lsls	r3, r3, #1
 80063be:	3104      	adds	r1, #4
 80063c0:	4203      	tst	r3, r0
 80063c2:	d0fb      	beq.n	80063bc <_malloc_r+0x1e8>
 80063c4:	eb07 0ac1 	add.w	sl, r7, r1, lsl #3
 80063c8:	468c      	mov	ip, r1
 80063ca:	46d6      	mov	lr, sl
 80063cc:	f8de 500c 	ldr.w	r5, [lr, #12]
 80063d0:	e02a      	b.n	8006428 <_malloc_r+0x254>
 80063d2:	6868      	ldr	r0, [r5, #4]
 80063d4:	f020 0803 	bic.w	r8, r0, #3
 80063d8:	ebc4 0008 	rsb	r0, r4, r8
 80063dc:	280f      	cmp	r0, #15
 80063de:	dd11      	ble.n	8006404 <_malloc_r+0x230>
 80063e0:	192b      	adds	r3, r5, r4
 80063e2:	68e9      	ldr	r1, [r5, #12]
 80063e4:	f044 0401 	orr.w	r4, r4, #1
 80063e8:	606c      	str	r4, [r5, #4]
 80063ea:	f855 4f08 	ldr.w	r4, [r5, #8]!
 80063ee:	5018      	str	r0, [r3, r0]
 80063f0:	60e1      	str	r1, [r4, #12]
 80063f2:	608c      	str	r4, [r1, #8]
 80063f4:	60d3      	str	r3, [r2, #12]
 80063f6:	6093      	str	r3, [r2, #8]
 80063f8:	60da      	str	r2, [r3, #12]
 80063fa:	609a      	str	r2, [r3, #8]
 80063fc:	f040 0201 	orr.w	r2, r0, #1
 8006400:	605a      	str	r2, [r3, #4]
 8006402:	e00c      	b.n	800641e <_malloc_r+0x24a>
 8006404:	2800      	cmp	r0, #0
 8006406:	68e8      	ldr	r0, [r5, #12]
 8006408:	db0d      	blt.n	8006426 <_malloc_r+0x252>
 800640a:	eb05 0308 	add.w	r3, r5, r8
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	f042 0201 	orr.w	r2, r2, #1
 8006414:	605a      	str	r2, [r3, #4]
 8006416:	f855 3f08 	ldr.w	r3, [r5, #8]!
 800641a:	60d8      	str	r0, [r3, #12]
 800641c:	6083      	str	r3, [r0, #8]
 800641e:	4630      	mov	r0, r6
 8006420:	f000 f920 	bl	8006664 <__malloc_unlock>
 8006424:	e0da      	b.n	80065dc <_malloc_r+0x408>
 8006426:	4605      	mov	r5, r0
 8006428:	4575      	cmp	r5, lr
 800642a:	d1d2      	bne.n	80063d2 <_malloc_r+0x1fe>
 800642c:	f10c 0c01 	add.w	ip, ip, #1
 8006430:	f01c 0f03 	tst.w	ip, #3
 8006434:	d002      	beq.n	800643c <_malloc_r+0x268>
 8006436:	f10e 0e08 	add.w	lr, lr, #8
 800643a:	e7c7      	b.n	80063cc <_malloc_r+0x1f8>
 800643c:	4650      	mov	r0, sl
 800643e:	f011 0f03 	tst.w	r1, #3
 8006442:	d104      	bne.n	800644e <_malloc_r+0x27a>
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	ea21 0103 	bic.w	r1, r1, r3
 800644a:	6079      	str	r1, [r7, #4]
 800644c:	e006      	b.n	800645c <_malloc_r+0x288>
 800644e:	4605      	mov	r5, r0
 8006450:	f855 0908 	ldr.w	r0, [r5], #-8
 8006454:	42a8      	cmp	r0, r5
 8006456:	d101      	bne.n	800645c <_malloc_r+0x288>
 8006458:	3901      	subs	r1, #1
 800645a:	e7f0      	b.n	800643e <_malloc_r+0x26a>
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	4283      	cmp	r3, r0
 8006462:	d809      	bhi.n	8006478 <_malloc_r+0x2a4>
 8006464:	b143      	cbz	r3, 8006478 <_malloc_r+0x2a4>
 8006466:	4661      	mov	r1, ip
 8006468:	e001      	b.n	800646e <_malloc_r+0x29a>
 800646a:	3104      	adds	r1, #4
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	4203      	tst	r3, r0
 8006470:	d1a8      	bne.n	80063c4 <_malloc_r+0x1f0>
 8006472:	e7fa      	b.n	800646a <_malloc_r+0x296>
 8006474:	200001f4 	.word	0x200001f4
 8006478:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800647c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006480:	f023 0903 	bic.w	r9, r3, #3
 8006484:	45a1      	cmp	r9, r4
 8006486:	d304      	bcc.n	8006492 <_malloc_r+0x2be>
 8006488:	ebc4 0309 	rsb	r3, r4, r9
 800648c:	2b0f      	cmp	r3, #15
 800648e:	f300 8098 	bgt.w	80065c2 <_malloc_r+0x3ee>
 8006492:	4b54      	ldr	r3, [pc, #336]	; (80065e4 <_malloc_r+0x410>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f103 0a10 	add.w	sl, r3, #16
 800649a:	4b53      	ldr	r3, [pc, #332]	; (80065e8 <_malloc_r+0x414>)
 800649c:	44a2      	add	sl, r4
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a4:	d007      	beq.n	80064b6 <_malloc_r+0x2e2>
 80064a6:	f50a 6a7e 	add.w	sl, sl, #4064	; 0xfe0
 80064aa:	f10a 0a1f 	add.w	sl, sl, #31
 80064ae:	f42a 6a7e 	bic.w	sl, sl, #4064	; 0xfe0
 80064b2:	f02a 0a1f 	bic.w	sl, sl, #31
 80064b6:	4630      	mov	r0, r6
 80064b8:	4651      	mov	r1, sl
 80064ba:	f000 fea7 	bl	800720c <_sbrk_r>
 80064be:	f1b0 3fff 	cmp.w	r0, #4294967295
 80064c2:	4605      	mov	r5, r0
 80064c4:	d06f      	beq.n	80065a6 <_malloc_r+0x3d2>
 80064c6:	eb08 0309 	add.w	r3, r8, r9
 80064ca:	4298      	cmp	r0, r3
 80064cc:	d201      	bcs.n	80064d2 <_malloc_r+0x2fe>
 80064ce:	45b8      	cmp	r8, r7
 80064d0:	d169      	bne.n	80065a6 <_malloc_r+0x3d2>
 80064d2:	4a46      	ldr	r2, [pc, #280]	; (80065ec <_malloc_r+0x418>)
 80064d4:	429d      	cmp	r5, r3
 80064d6:	6811      	ldr	r1, [r2, #0]
 80064d8:	4451      	add	r1, sl
 80064da:	6011      	str	r1, [r2, #0]
 80064dc:	d108      	bne.n	80064f0 <_malloc_r+0x31c>
 80064de:	052a      	lsls	r2, r5, #20
 80064e0:	0d12      	lsrs	r2, r2, #20
 80064e2:	b92a      	cbnz	r2, 80064f0 <_malloc_r+0x31c>
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	44ca      	add	sl, r9
 80064e8:	f04a 0201 	orr.w	r2, sl, #1
 80064ec:	605a      	str	r2, [r3, #4]
 80064ee:	e04e      	b.n	800658e <_malloc_r+0x3ba>
 80064f0:	4a3d      	ldr	r2, [pc, #244]	; (80065e8 <_malloc_r+0x414>)
 80064f2:	6810      	ldr	r0, [r2, #0]
 80064f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80064f8:	d101      	bne.n	80064fe <_malloc_r+0x32a>
 80064fa:	6015      	str	r5, [r2, #0]
 80064fc:	e003      	b.n	8006506 <_malloc_r+0x332>
 80064fe:	4a3b      	ldr	r2, [pc, #236]	; (80065ec <_malloc_r+0x418>)
 8006500:	1949      	adds	r1, r1, r5
 8006502:	1acb      	subs	r3, r1, r3
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	f015 0307 	ands.w	r3, r5, #7
 800650a:	4630      	mov	r0, r6
 800650c:	bf1c      	itt	ne
 800650e:	f1c3 0308 	rsbne	r3, r3, #8
 8006512:	18ed      	addne	r5, r5, r3
 8006514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006518:	44aa      	add	sl, r5
 800651a:	ea4f 5a0a 	mov.w	sl, sl, lsl #20
 800651e:	ea4f 5a1a 	mov.w	sl, sl, lsr #20
 8006522:	ebca 0a03 	rsb	sl, sl, r3
 8006526:	4651      	mov	r1, sl
 8006528:	f000 fe70 	bl	800720c <_sbrk_r>
 800652c:	4b2f      	ldr	r3, [pc, #188]	; (80065ec <_malloc_r+0x418>)
 800652e:	60bd      	str	r5, [r7, #8]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006536:	bf04      	itt	eq
 8006538:	4628      	moveq	r0, r5
 800653a:	f04f 0a00 	moveq.w	sl, #0
 800653e:	1b40      	subs	r0, r0, r5
 8006540:	45b8      	cmp	r8, r7
 8006542:	4450      	add	r0, sl
 8006544:	4452      	add	r2, sl
 8006546:	f040 0001 	orr.w	r0, r0, #1
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	6068      	str	r0, [r5, #4]
 800654e:	d01e      	beq.n	800658e <_malloc_r+0x3ba>
 8006550:	f1b9 0f0f 	cmp.w	r9, #15
 8006554:	d802      	bhi.n	800655c <_malloc_r+0x388>
 8006556:	2301      	movs	r3, #1
 8006558:	606b      	str	r3, [r5, #4]
 800655a:	e024      	b.n	80065a6 <_malloc_r+0x3d2>
 800655c:	f1a9 090c 	sub.w	r9, r9, #12
 8006560:	2205      	movs	r2, #5
 8006562:	f029 0907 	bic.w	r9, r9, #7
 8006566:	eb08 0309 	add.w	r3, r8, r9
 800656a:	f1b9 0f0f 	cmp.w	r9, #15
 800656e:	605a      	str	r2, [r3, #4]
 8006570:	609a      	str	r2, [r3, #8]
 8006572:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	ea49 0303 	orr.w	r3, r9, r3
 800657e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006582:	d904      	bls.n	800658e <_malloc_r+0x3ba>
 8006584:	4630      	mov	r0, r6
 8006586:	f108 0108 	add.w	r1, r8, #8
 800658a:	f7ff fd11 	bl	8005fb0 <_free_r>
 800658e:	4b17      	ldr	r3, [pc, #92]	; (80065ec <_malloc_r+0x418>)
 8006590:	4a17      	ldr	r2, [pc, #92]	; (80065f0 <_malloc_r+0x41c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6811      	ldr	r1, [r2, #0]
 8006596:	428b      	cmp	r3, r1
 8006598:	bf88      	it	hi
 800659a:	6013      	strhi	r3, [r2, #0]
 800659c:	4a15      	ldr	r2, [pc, #84]	; (80065f4 <_malloc_r+0x420>)
 800659e:	6811      	ldr	r1, [r2, #0]
 80065a0:	428b      	cmp	r3, r1
 80065a2:	bf88      	it	hi
 80065a4:	6013      	strhi	r3, [r2, #0]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f023 0303 	bic.w	r3, r3, #3
 80065ae:	42a3      	cmp	r3, r4
 80065b0:	d302      	bcc.n	80065b8 <_malloc_r+0x3e4>
 80065b2:	1b1b      	subs	r3, r3, r4
 80065b4:	2b0f      	cmp	r3, #15
 80065b6:	dc04      	bgt.n	80065c2 <_malloc_r+0x3ee>
 80065b8:	4630      	mov	r0, r6
 80065ba:	f000 f853 	bl	8006664 <__malloc_unlock>
 80065be:	2500      	movs	r5, #0
 80065c0:	e00c      	b.n	80065dc <_malloc_r+0x408>
 80065c2:	68bd      	ldr	r5, [r7, #8]
 80065c4:	f044 0201 	orr.w	r2, r4, #1
 80065c8:	f043 0301 	orr.w	r3, r3, #1
 80065cc:	192c      	adds	r4, r5, r4
 80065ce:	60bc      	str	r4, [r7, #8]
 80065d0:	606a      	str	r2, [r5, #4]
 80065d2:	6063      	str	r3, [r4, #4]
 80065d4:	4630      	mov	r0, r6
 80065d6:	3508      	adds	r5, #8
 80065d8:	f000 f844 	bl	8006664 <__malloc_unlock>
 80065dc:	4628      	mov	r0, r5
 80065de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e2:	bf00      	nop
 80065e4:	20000620 	.word	0x20000620
 80065e8:	20000600 	.word	0x20000600
 80065ec:	20000624 	.word	0x20000624
 80065f0:	2000061c 	.word	0x2000061c
 80065f4:	20000618 	.word	0x20000618

080065f8 <memchr>:
 80065f8:	b2c9      	uxtb	r1, r1
 80065fa:	e004      	b.n	8006606 <memchr+0xe>
 80065fc:	7803      	ldrb	r3, [r0, #0]
 80065fe:	3a01      	subs	r2, #1
 8006600:	428b      	cmp	r3, r1
 8006602:	d003      	beq.n	800660c <memchr+0x14>
 8006604:	3001      	adds	r0, #1
 8006606:	2a00      	cmp	r2, #0
 8006608:	d1f8      	bne.n	80065fc <memchr+0x4>
 800660a:	4610      	mov	r0, r2
 800660c:	4770      	bx	lr

0800660e <memcpy>:
 800660e:	1882      	adds	r2, r0, r2
 8006610:	2300      	movs	r3, #0
 8006612:	e004      	b.n	800661e <memcpy+0x10>
 8006614:	f811 c003 	ldrb.w	ip, [r1, r3]
 8006618:	f800 c003 	strb.w	ip, [r0, r3]
 800661c:	3301      	adds	r3, #1
 800661e:	eb03 0c00 	add.w	ip, r3, r0
 8006622:	4594      	cmp	ip, r2
 8006624:	d3f6      	bcc.n	8006614 <memcpy+0x6>
 8006626:	4770      	bx	lr

08006628 <memmove>:
 8006628:	4281      	cmp	r1, r0
 800662a:	b510      	push	{r4, lr}
 800662c:	d215      	bcs.n	800665a <memmove+0x32>
 800662e:	eb01 0c02 	add.w	ip, r1, r2
 8006632:	4560      	cmp	r0, ip
 8006634:	d211      	bcs.n	800665a <memmove+0x32>
 8006636:	1881      	adds	r1, r0, r2
 8006638:	2300      	movs	r3, #0
 800663a:	e003      	b.n	8006644 <memmove+0x1c>
 800663c:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8006640:	3a01      	subs	r2, #1
 8006642:	54cc      	strb	r4, [r1, r3]
 8006644:	3b01      	subs	r3, #1
 8006646:	2a00      	cmp	r2, #0
 8006648:	d1f8      	bne.n	800663c <memmove+0x14>
 800664a:	bd10      	pop	{r4, pc}
 800664c:	f811 c003 	ldrb.w	ip, [r1, r3]
 8006650:	3a01      	subs	r2, #1
 8006652:	f800 c003 	strb.w	ip, [r0, r3]
 8006656:	3301      	adds	r3, #1
 8006658:	e000      	b.n	800665c <memmove+0x34>
 800665a:	2300      	movs	r3, #0
 800665c:	2a00      	cmp	r2, #0
 800665e:	d1f5      	bne.n	800664c <memmove+0x24>
 8006660:	bd10      	pop	{r4, pc}

08006662 <__malloc_lock>:
 8006662:	4770      	bx	lr

08006664 <__malloc_unlock>:
 8006664:	4770      	bx	lr

08006666 <__hi0bits>:
 8006666:	0c02      	lsrs	r2, r0, #16
 8006668:	4603      	mov	r3, r0
 800666a:	0412      	lsls	r2, r2, #16
 800666c:	b10a      	cbz	r2, 8006672 <__hi0bits+0xc>
 800666e:	2000      	movs	r0, #0
 8006670:	e001      	b.n	8006676 <__hi0bits+0x10>
 8006672:	0403      	lsls	r3, r0, #16
 8006674:	2010      	movs	r0, #16
 8006676:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800667a:	d101      	bne.n	8006680 <__hi0bits+0x1a>
 800667c:	3008      	adds	r0, #8
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006684:	d101      	bne.n	800668a <__hi0bits+0x24>
 8006686:	3004      	adds	r0, #4
 8006688:	011b      	lsls	r3, r3, #4
 800668a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800668e:	d101      	bne.n	8006694 <__hi0bits+0x2e>
 8006690:	3002      	adds	r0, #2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	db05      	blt.n	80066a4 <__hi0bits+0x3e>
 8006698:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800669c:	d101      	bne.n	80066a2 <__hi0bits+0x3c>
 800669e:	2020      	movs	r0, #32
 80066a0:	4770      	bx	lr
 80066a2:	3001      	adds	r0, #1
 80066a4:	4770      	bx	lr

080066a6 <__lo0bits>:
 80066a6:	6803      	ldr	r3, [r0, #0]
 80066a8:	4602      	mov	r2, r0
 80066aa:	f013 0007 	ands.w	r0, r3, #7
 80066ae:	d00f      	beq.n	80066d0 <__lo0bits+0x2a>
 80066b0:	f013 0f01 	tst.w	r3, #1
 80066b4:	d001      	beq.n	80066ba <__lo0bits+0x14>
 80066b6:	2000      	movs	r0, #0
 80066b8:	4770      	bx	lr
 80066ba:	f013 0f02 	tst.w	r3, #2
 80066be:	d003      	beq.n	80066c8 <__lo0bits+0x22>
 80066c0:	085b      	lsrs	r3, r3, #1
 80066c2:	2001      	movs	r0, #1
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	4770      	bx	lr
 80066c8:	089b      	lsrs	r3, r3, #2
 80066ca:	2002      	movs	r0, #2
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	4770      	bx	lr
 80066d0:	b299      	uxth	r1, r3
 80066d2:	b909      	cbnz	r1, 80066d8 <__lo0bits+0x32>
 80066d4:	0c1b      	lsrs	r3, r3, #16
 80066d6:	2010      	movs	r0, #16
 80066d8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80066dc:	d101      	bne.n	80066e2 <__lo0bits+0x3c>
 80066de:	3008      	adds	r0, #8
 80066e0:	0a1b      	lsrs	r3, r3, #8
 80066e2:	f013 0f0f 	tst.w	r3, #15
 80066e6:	d101      	bne.n	80066ec <__lo0bits+0x46>
 80066e8:	3004      	adds	r0, #4
 80066ea:	091b      	lsrs	r3, r3, #4
 80066ec:	f013 0f03 	tst.w	r3, #3
 80066f0:	d101      	bne.n	80066f6 <__lo0bits+0x50>
 80066f2:	3002      	adds	r0, #2
 80066f4:	089b      	lsrs	r3, r3, #2
 80066f6:	f013 0f01 	tst.w	r3, #1
 80066fa:	d104      	bne.n	8006706 <__lo0bits+0x60>
 80066fc:	085b      	lsrs	r3, r3, #1
 80066fe:	d101      	bne.n	8006704 <__lo0bits+0x5e>
 8006700:	2020      	movs	r0, #32
 8006702:	4770      	bx	lr
 8006704:	3001      	adds	r0, #1
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	4770      	bx	lr

0800670a <__mcmp>:
 800670a:	4603      	mov	r3, r0
 800670c:	690a      	ldr	r2, [r1, #16]
 800670e:	6900      	ldr	r0, [r0, #16]
 8006710:	b510      	push	{r4, lr}
 8006712:	1a80      	subs	r0, r0, r2
 8006714:	d117      	bne.n	8006746 <__mcmp+0x3c>
 8006716:	3204      	adds	r2, #4
 8006718:	f103 0c14 	add.w	ip, r3, #20
 800671c:	0092      	lsls	r2, r2, #2
 800671e:	1889      	adds	r1, r1, r2
 8006720:	189b      	adds	r3, r3, r2
 8006722:	3104      	adds	r1, #4
 8006724:	3304      	adds	r3, #4
 8006726:	f853 4c04 	ldr.w	r4, [r3, #-4]
 800672a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800672e:	4294      	cmp	r4, r2
 8006730:	d005      	beq.n	800673e <__mcmp+0x34>
 8006732:	d301      	bcc.n	8006738 <__mcmp+0x2e>
 8006734:	2001      	movs	r0, #1
 8006736:	bd10      	pop	{r4, pc}
 8006738:	f04f 30ff 	mov.w	r0, #4294967295
 800673c:	bd10      	pop	{r4, pc}
 800673e:	3b04      	subs	r3, #4
 8006740:	3904      	subs	r1, #4
 8006742:	4563      	cmp	r3, ip
 8006744:	d8ef      	bhi.n	8006726 <__mcmp+0x1c>
 8006746:	bd10      	pop	{r4, pc}

08006748 <__ulp>:
 8006748:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <__ulp+0x40>)
 800674a:	ea01 0303 	and.w	r3, r1, r3
 800674e:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006752:	2b00      	cmp	r3, #0
 8006754:	dd01      	ble.n	800675a <__ulp+0x12>
 8006756:	4619      	mov	r1, r3
 8006758:	e007      	b.n	800676a <__ulp+0x22>
 800675a:	425b      	negs	r3, r3
 800675c:	151b      	asrs	r3, r3, #20
 800675e:	2b13      	cmp	r3, #19
 8006760:	dc05      	bgt.n	800676e <__ulp+0x26>
 8006762:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006766:	fa52 f103 	asrs.w	r1, r2, r3
 800676a:	2000      	movs	r0, #0
 800676c:	4770      	bx	lr
 800676e:	3b14      	subs	r3, #20
 8006770:	2b1e      	cmp	r3, #30
 8006772:	dd01      	ble.n	8006778 <__ulp+0x30>
 8006774:	2301      	movs	r3, #1
 8006776:	e004      	b.n	8006782 <__ulp+0x3a>
 8006778:	2201      	movs	r2, #1
 800677a:	f1c3 031f 	rsb	r3, r3, #31
 800677e:	fa12 f303 	lsls.w	r3, r2, r3
 8006782:	2100      	movs	r1, #0
 8006784:	4618      	mov	r0, r3
 8006786:	4770      	bx	lr
 8006788:	7ff00000 	.word	0x7ff00000

0800678c <__b2d>:
 800678c:	6903      	ldr	r3, [r0, #16]
 800678e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006792:	3304      	adds	r3, #4
 8006794:	f100 0614 	add.w	r6, r0, #20
 8006798:	4688      	mov	r8, r1
 800679a:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 800679e:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 80067a2:	4627      	mov	r7, r4
 80067a4:	4628      	mov	r0, r5
 80067a6:	f7ff ff5e 	bl	8006666 <__hi0bits>
 80067aa:	280a      	cmp	r0, #10
 80067ac:	f1c0 0320 	rsb	r3, r0, #32
 80067b0:	f8c8 3000 	str.w	r3, [r8]
 80067b4:	dc14      	bgt.n	80067e0 <__b2d+0x54>
 80067b6:	42b4      	cmp	r4, r6
 80067b8:	f1c0 010b 	rsb	r1, r0, #11
 80067bc:	d801      	bhi.n	80067c2 <__b2d+0x36>
 80067be:	2400      	movs	r4, #0
 80067c0:	e001      	b.n	80067c6 <__b2d+0x3a>
 80067c2:	f854 4c04 	ldr.w	r4, [r4, #-4]
 80067c6:	fa25 fc01 	lsr.w	ip, r5, r1
 80067ca:	3015      	adds	r0, #21
 80067cc:	f04c 537e 	orr.w	r3, ip, #1065353216	; 0x3f800000
 80067d0:	fa34 f101 	lsrs.w	r1, r4, r1
 80067d4:	4085      	lsls	r5, r0
 80067d6:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80067da:	ea41 0205 	orr.w	r2, r1, r5
 80067de:	e025      	b.n	800682c <__b2d+0xa0>
 80067e0:	42b4      	cmp	r4, r6
 80067e2:	d801      	bhi.n	80067e8 <__b2d+0x5c>
 80067e4:	2100      	movs	r1, #0
 80067e6:	e002      	b.n	80067ee <__b2d+0x62>
 80067e8:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80067ec:	3c04      	subs	r4, #4
 80067ee:	380b      	subs	r0, #11
 80067f0:	d017      	beq.n	8006822 <__b2d+0x96>
 80067f2:	42b4      	cmp	r4, r6
 80067f4:	f1c0 0c20 	rsb	ip, r0, #32
 80067f8:	d801      	bhi.n	80067fe <__b2d+0x72>
 80067fa:	2400      	movs	r4, #0
 80067fc:	e001      	b.n	8006802 <__b2d+0x76>
 80067fe:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006802:	4085      	lsls	r5, r0
 8006804:	fa21 f60c 	lsr.w	r6, r1, ip
 8006808:	f045 557e 	orr.w	r5, r5, #1065353216	; 0x3f800000
 800680c:	fa24 fc0c 	lsr.w	ip, r4, ip
 8006810:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
 8006814:	fa11 f000 	lsls.w	r0, r1, r0
 8006818:	ea45 0306 	orr.w	r3, r5, r6
 800681c:	ea4c 0200 	orr.w	r2, ip, r0
 8006820:	e004      	b.n	800682c <__b2d+0xa0>
 8006822:	f045 537e 	orr.w	r3, r5, #1065353216	; 0x3f800000
 8006826:	460a      	mov	r2, r1
 8006828:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800682c:	4610      	mov	r0, r2
 800682e:	4619      	mov	r1, r3
 8006830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006834 <__ratio>:
 8006834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006836:	460e      	mov	r6, r1
 8006838:	a901      	add	r1, sp, #4
 800683a:	4607      	mov	r7, r0
 800683c:	f7ff ffa6 	bl	800678c <__b2d>
 8006840:	4604      	mov	r4, r0
 8006842:	460d      	mov	r5, r1
 8006844:	4630      	mov	r0, r6
 8006846:	4669      	mov	r1, sp
 8006848:	f7ff ffa0 	bl	800678c <__b2d>
 800684c:	693f      	ldr	r7, [r7, #16]
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	9801      	ldr	r0, [sp, #4]
 8006854:	9900      	ldr	r1, [sp, #0]
 8006856:	1a40      	subs	r0, r0, r1
 8006858:	6931      	ldr	r1, [r6, #16]
 800685a:	1a79      	subs	r1, r7, r1
 800685c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8006860:	2900      	cmp	r1, #0
 8006862:	dd02      	ble.n	800686a <__ratio+0x36>
 8006864:	eb05 5501 	add.w	r5, r5, r1, lsl #20
 8006868:	e002      	b.n	8006870 <__ratio+0x3c>
 800686a:	4249      	negs	r1, r1
 800686c:	eb03 5301 	add.w	r3, r3, r1, lsl #20
 8006870:	4620      	mov	r0, r4
 8006872:	4629      	mov	r1, r5
 8006874:	f7fd fa84 	bl	8003d80 <__aeabi_ddiv>
 8006878:	b003      	add	sp, #12
 800687a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800687c <_mprec_log10>:
 800687c:	2817      	cmp	r0, #23
 800687e:	b510      	push	{r4, lr}
 8006880:	4604      	mov	r4, r0
 8006882:	dc05      	bgt.n	8006890 <_mprec_log10+0x14>
 8006884:	4b07      	ldr	r3, [pc, #28]	; (80068a4 <_mprec_log10+0x28>)
 8006886:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800688a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800688e:	bd10      	pop	{r4, pc}
 8006890:	4905      	ldr	r1, [pc, #20]	; (80068a8 <_mprec_log10+0x2c>)
 8006892:	2000      	movs	r0, #0
 8006894:	2200      	movs	r2, #0
 8006896:	4b05      	ldr	r3, [pc, #20]	; (80068ac <_mprec_log10+0x30>)
 8006898:	f7fd f948 	bl	8003b2c <__aeabi_dmul>
 800689c:	3c01      	subs	r4, #1
 800689e:	d1f9      	bne.n	8006894 <_mprec_log10+0x18>
 80068a0:	bd10      	pop	{r4, pc}
 80068a2:	bf00      	nop
 80068a4:	08007440 	.word	0x08007440
 80068a8:	3ff00000 	.word	0x3ff00000
 80068ac:	40240000 	.word	0x40240000

080068b0 <__copybits>:
 80068b0:	f101 3cff 	add.w	ip, r1, #4294967295
 80068b4:	6913      	ldr	r3, [r2, #16]
 80068b6:	f102 0114 	add.w	r1, r2, #20
 80068ba:	ea4f 1c6c 	mov.w	ip, ip, asr #5
 80068be:	f10c 0c01 	add.w	ip, ip, #1
 80068c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80068c6:	3214      	adds	r2, #20
 80068c8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80068cc:	e003      	b.n	80068d6 <__copybits+0x26>
 80068ce:	f851 3b04 	ldr.w	r3, [r1], #4
 80068d2:	f840 3c04 	str.w	r3, [r0, #-4]
 80068d6:	4603      	mov	r3, r0
 80068d8:	3004      	adds	r0, #4
 80068da:	4291      	cmp	r1, r2
 80068dc:	d3f7      	bcc.n	80068ce <__copybits+0x1e>
 80068de:	e002      	b.n	80068e6 <__copybits+0x36>
 80068e0:	2200      	movs	r2, #0
 80068e2:	f843 2b04 	str.w	r2, [r3], #4
 80068e6:	4563      	cmp	r3, ip
 80068e8:	d3fa      	bcc.n	80068e0 <__copybits+0x30>
 80068ea:	4770      	bx	lr

080068ec <__any_on>:
 80068ec:	6902      	ldr	r2, [r0, #16]
 80068ee:	114b      	asrs	r3, r1, #5
 80068f0:	b510      	push	{r4, lr}
 80068f2:	4293      	cmp	r3, r2
 80068f4:	f100 0c14 	add.w	ip, r0, #20
 80068f8:	dd01      	ble.n	80068fe <__any_on+0x12>
 80068fa:	4613      	mov	r3, r2
 80068fc:	e00c      	b.n	8006918 <__any_on+0x2c>
 80068fe:	da0b      	bge.n	8006918 <__any_on+0x2c>
 8006900:	f011 011f 	ands.w	r1, r1, #31
 8006904:	d008      	beq.n	8006918 <__any_on+0x2c>
 8006906:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800690a:	6952      	ldr	r2, [r2, #20]
 800690c:	fa32 f401 	lsrs.w	r4, r2, r1
 8006910:	fa14 f101 	lsls.w	r1, r4, r1
 8006914:	4291      	cmp	r1, r2
 8006916:	d10a      	bne.n	800692e <__any_on+0x42>
 8006918:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800691c:	3314      	adds	r3, #20
 800691e:	e002      	b.n	8006926 <__any_on+0x3a>
 8006920:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006924:	b91a      	cbnz	r2, 800692e <__any_on+0x42>
 8006926:	4563      	cmp	r3, ip
 8006928:	d8fa      	bhi.n	8006920 <__any_on+0x34>
 800692a:	2000      	movs	r0, #0
 800692c:	bd10      	pop	{r4, pc}
 800692e:	2001      	movs	r0, #1
 8006930:	bd10      	pop	{r4, pc}

08006932 <_Bfree>:
 8006932:	b570      	push	{r4, r5, r6, lr}
 8006934:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006936:	4604      	mov	r4, r0
 8006938:	460e      	mov	r6, r1
 800693a:	b93d      	cbnz	r5, 800694c <_Bfree+0x1a>
 800693c:	2010      	movs	r0, #16
 800693e:	f7ff fc41 	bl	80061c4 <malloc>
 8006942:	6260      	str	r0, [r4, #36]	; 0x24
 8006944:	6045      	str	r5, [r0, #4]
 8006946:	6085      	str	r5, [r0, #8]
 8006948:	6005      	str	r5, [r0, #0]
 800694a:	60c5      	str	r5, [r0, #12]
 800694c:	b13e      	cbz	r6, 800695e <_Bfree+0x2c>
 800694e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006950:	6872      	ldr	r2, [r6, #4]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006958:	6031      	str	r1, [r6, #0]
 800695a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800695e:	bd70      	pop	{r4, r5, r6, pc}

08006960 <_Balloc>:
 8006960:	b570      	push	{r4, r5, r6, lr}
 8006962:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006964:	4604      	mov	r4, r0
 8006966:	460d      	mov	r5, r1
 8006968:	b93e      	cbnz	r6, 800697a <_Balloc+0x1a>
 800696a:	2010      	movs	r0, #16
 800696c:	f7ff fc2a 	bl	80061c4 <malloc>
 8006970:	6260      	str	r0, [r4, #36]	; 0x24
 8006972:	6046      	str	r6, [r0, #4]
 8006974:	6086      	str	r6, [r0, #8]
 8006976:	6006      	str	r6, [r0, #0]
 8006978:	60c6      	str	r6, [r0, #12]
 800697a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800697c:	68f3      	ldr	r3, [r6, #12]
 800697e:	b943      	cbnz	r3, 8006992 <_Balloc+0x32>
 8006980:	4620      	mov	r0, r4
 8006982:	2104      	movs	r1, #4
 8006984:	2210      	movs	r2, #16
 8006986:	f000 fc66 	bl	8007256 <_calloc_r>
 800698a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800698c:	60f0      	str	r0, [r6, #12]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	b1bb      	cbz	r3, 80069c2 <_Balloc+0x62>
 8006992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 800699a:	b11b      	cbz	r3, 80069a4 <_Balloc+0x44>
 800699c:	6819      	ldr	r1, [r3, #0]
 800699e:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 80069a2:	e00b      	b.n	80069bc <_Balloc+0x5c>
 80069a4:	2101      	movs	r1, #1
 80069a6:	4620      	mov	r0, r4
 80069a8:	fa11 f605 	lsls.w	r6, r1, r5
 80069ac:	1d72      	adds	r2, r6, #5
 80069ae:	0092      	lsls	r2, r2, #2
 80069b0:	f000 fc51 	bl	8007256 <_calloc_r>
 80069b4:	4603      	mov	r3, r0
 80069b6:	b120      	cbz	r0, 80069c2 <_Balloc+0x62>
 80069b8:	6045      	str	r5, [r0, #4]
 80069ba:	6086      	str	r6, [r0, #8]
 80069bc:	2200      	movs	r2, #0
 80069be:	611a      	str	r2, [r3, #16]
 80069c0:	60da      	str	r2, [r3, #12]
 80069c2:	4618      	mov	r0, r3
 80069c4:	bd70      	pop	{r4, r5, r6, pc}

080069c6 <__d2b>:
 80069c6:	e92d 45f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, sl, lr}
 80069ca:	2101      	movs	r1, #1
 80069cc:	461f      	mov	r7, r3
 80069ce:	4616      	mov	r6, r2
 80069d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80069d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80069d4:	f7ff ffc4 	bl	8006960 <_Balloc>
 80069d8:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80069dc:	f027 437f 	bic.w	r3, r7, #4278190080	; 0xff000000
 80069e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069e4:	4617      	mov	r7, r2
 80069e6:	ea5f 5a12 	movs.w	sl, r2, lsr #20
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	bf1c      	itt	ne
 80069ee:	f443 1380 	orrne.w	r3, r3, #1048576	; 0x100000
 80069f2:	9300      	strne	r3, [sp, #0]
 80069f4:	4680      	mov	r8, r0
 80069f6:	b1fe      	cbz	r6, 8006a38 <__d2b+0x72>
 80069f8:	a802      	add	r0, sp, #8
 80069fa:	f840 6d04 	str.w	r6, [r0, #-4]!
 80069fe:	f7ff fe52 	bl	80066a6 <__lo0bits>
 8006a02:	9a01      	ldr	r2, [sp, #4]
 8006a04:	4603      	mov	r3, r0
 8006a06:	b158      	cbz	r0, 8006a20 <__d2b+0x5a>
 8006a08:	9900      	ldr	r1, [sp, #0]
 8006a0a:	f1c0 0020 	rsb	r0, r0, #32
 8006a0e:	fa11 f000 	lsls.w	r0, r1, r0
 8006a12:	40d9      	lsrs	r1, r3
 8006a14:	ea40 0202 	orr.w	r2, r0, r2
 8006a18:	f8c8 2014 	str.w	r2, [r8, #20]
 8006a1c:	9100      	str	r1, [sp, #0]
 8006a1e:	e001      	b.n	8006a24 <__d2b+0x5e>
 8006a20:	f8c8 2014 	str.w	r2, [r8, #20]
 8006a24:	9e00      	ldr	r6, [sp, #0]
 8006a26:	f8c8 6018 	str.w	r6, [r8, #24]
 8006a2a:	2e00      	cmp	r6, #0
 8006a2c:	bf14      	ite	ne
 8006a2e:	2602      	movne	r6, #2
 8006a30:	2601      	moveq	r6, #1
 8006a32:	f8c8 6010 	str.w	r6, [r8, #16]
 8006a36:	e00a      	b.n	8006a4e <__d2b+0x88>
 8006a38:	4668      	mov	r0, sp
 8006a3a:	2601      	movs	r6, #1
 8006a3c:	f7ff fe33 	bl	80066a6 <__lo0bits>
 8006a40:	9b00      	ldr	r3, [sp, #0]
 8006a42:	f8c8 6010 	str.w	r6, [r8, #16]
 8006a46:	f8c8 3014 	str.w	r3, [r8, #20]
 8006a4a:	f100 0320 	add.w	r3, r0, #32
 8006a4e:	f1ba 0f00 	cmp.w	sl, #0
 8006a52:	d00a      	beq.n	8006a6a <__d2b+0xa4>
 8006a54:	f5aa 6a86 	sub.w	sl, sl, #1072	; 0x430
 8006a58:	f1aa 0a03 	sub.w	sl, sl, #3
 8006a5c:	eb0a 0203 	add.w	r2, sl, r3
 8006a60:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
 8006a64:	602a      	str	r2, [r5, #0]
 8006a66:	6023      	str	r3, [r4, #0]
 8006a68:	e00b      	b.n	8006a82 <__d2b+0xbc>
 8006a6a:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8006a6e:	3b02      	subs	r3, #2
 8006a70:	602b      	str	r3, [r5, #0]
 8006a72:	eb08 0386 	add.w	r3, r8, r6, lsl #2
 8006a76:	0176      	lsls	r6, r6, #5
 8006a78:	6918      	ldr	r0, [r3, #16]
 8006a7a:	f7ff fdf4 	bl	8006666 <__hi0bits>
 8006a7e:	1a36      	subs	r6, r6, r0
 8006a80:	6026      	str	r6, [r4, #0]
 8006a82:	4640      	mov	r0, r8
 8006a84:	e8bd 85fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, sl, pc}

08006a88 <__mdiff>:
 8006a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a8c:	4605      	mov	r5, r0
 8006a8e:	460c      	mov	r4, r1
 8006a90:	4608      	mov	r0, r1
 8006a92:	4611      	mov	r1, r2
 8006a94:	4616      	mov	r6, r2
 8006a96:	f7ff fe38 	bl	800670a <__mcmp>
 8006a9a:	1e07      	subs	r7, r0, #0
 8006a9c:	d108      	bne.n	8006ab0 <__mdiff+0x28>
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	4639      	mov	r1, r7
 8006aa2:	f7ff ff5d 	bl	8006960 <_Balloc>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	6147      	str	r7, [r0, #20]
 8006aaa:	6103      	str	r3, [r0, #16]
 8006aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab0:	da04      	bge.n	8006abc <__mdiff+0x34>
 8006ab2:	4623      	mov	r3, r4
 8006ab4:	2701      	movs	r7, #1
 8006ab6:	4634      	mov	r4, r6
 8006ab8:	461e      	mov	r6, r3
 8006aba:	e000      	b.n	8006abe <__mdiff+0x36>
 8006abc:	2700      	movs	r7, #0
 8006abe:	6861      	ldr	r1, [r4, #4]
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	f7ff ff4d 	bl	8006960 <_Balloc>
 8006ac6:	6931      	ldr	r1, [r6, #16]
 8006ac8:	6922      	ldr	r2, [r4, #16]
 8006aca:	f104 0314 	add.w	r3, r4, #20
 8006ace:	f106 0514 	add.w	r5, r6, #20
 8006ad2:	f04f 0c00 	mov.w	ip, #0
 8006ad6:	eb06 0681 	add.w	r6, r6, r1, lsl #2
 8006ada:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8006ade:	f106 0a14 	add.w	sl, r6, #20
 8006ae2:	3414      	adds	r4, #20
 8006ae4:	f100 0114 	add.w	r1, r0, #20
 8006ae8:	60c7      	str	r7, [r0, #12]
 8006aea:	f855 6b04 	ldr.w	r6, [r5], #4
 8006aee:	f853 7b04 	ldr.w	r7, [r3], #4
 8006af2:	fa1f f886 	uxth.w	r8, r6
 8006af6:	0c36      	lsrs	r6, r6, #16
 8006af8:	fa1f f987 	uxth.w	r9, r7
 8006afc:	ebc6 4717 	rsb	r7, r6, r7, lsr #16
 8006b00:	ebc8 0809 	rsb	r8, r8, r9
 8006b04:	4555      	cmp	r5, sl
 8006b06:	44e0      	add	r8, ip
 8006b08:	eb07 4728 	add.w	r7, r7, r8, asr #16
 8006b0c:	fa1f f888 	uxth.w	r8, r8
 8006b10:	ea4f 4c27 	mov.w	ip, r7, asr #16
 8006b14:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8006b18:	f841 7b04 	str.w	r7, [r1], #4
 8006b1c:	d3e5      	bcc.n	8006aea <__mdiff+0x62>
 8006b1e:	e00d      	b.n	8006b3c <__mdiff+0xb4>
 8006b20:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b24:	b2ae      	uxth	r6, r5
 8006b26:	0c2d      	lsrs	r5, r5, #16
 8006b28:	4466      	add	r6, ip
 8006b2a:	eb05 4526 	add.w	r5, r5, r6, asr #16
 8006b2e:	b2b6      	uxth	r6, r6
 8006b30:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8006b34:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
 8006b38:	f841 5c04 	str.w	r5, [r1, #-4]
 8006b3c:	460d      	mov	r5, r1
 8006b3e:	3104      	adds	r1, #4
 8006b40:	42a3      	cmp	r3, r4
 8006b42:	d3ed      	bcc.n	8006b20 <__mdiff+0x98>
 8006b44:	462b      	mov	r3, r5
 8006b46:	e000      	b.n	8006b4a <__mdiff+0xc2>
 8006b48:	3a01      	subs	r2, #1
 8006b4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b4e:	2900      	cmp	r1, #0
 8006b50:	d0fa      	beq.n	8006b48 <__mdiff+0xc0>
 8006b52:	6102      	str	r2, [r0, #16]
 8006b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006b58 <__lshift>:
 8006b58:	e92d 45f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
 8006b5c:	460c      	mov	r4, r1
 8006b5e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b62:	4605      	mov	r5, r0
 8006b64:	6926      	ldr	r6, [r4, #16]
 8006b66:	4690      	mov	r8, r2
 8006b68:	6849      	ldr	r1, [r1, #4]
 8006b6a:	3601      	adds	r6, #1
 8006b6c:	68a3      	ldr	r3, [r4, #8]
 8006b6e:	4456      	add	r6, sl
 8006b70:	e001      	b.n	8006b76 <__lshift+0x1e>
 8006b72:	3101      	adds	r1, #1
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	429e      	cmp	r6, r3
 8006b78:	dcfb      	bgt.n	8006b72 <__lshift+0x1a>
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f7ff fef0 	bl	8006960 <_Balloc>
 8006b80:	2300      	movs	r3, #0
 8006b82:	4607      	mov	r7, r0
 8006b84:	f100 0114 	add.w	r1, r0, #20
 8006b88:	e003      	b.n	8006b92 <__lshift+0x3a>
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f841 2c04 	str.w	r2, [r1, #-4]
 8006b92:	460a      	mov	r2, r1
 8006b94:	3104      	adds	r1, #4
 8006b96:	4553      	cmp	r3, sl
 8006b98:	dbf7      	blt.n	8006b8a <__lshift+0x32>
 8006b9a:	6920      	ldr	r0, [r4, #16]
 8006b9c:	f104 0314 	add.w	r3, r4, #20
 8006ba0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006ba4:	3014      	adds	r0, #20
 8006ba6:	f018 081f 	ands.w	r8, r8, #31
 8006baa:	d014      	beq.n	8006bd6 <__lshift+0x7e>
 8006bac:	f1c8 0c20 	rsb	ip, r8, #32
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	f8d3 e000 	ldr.w	lr, [r3]
 8006bb6:	fa0e fe08 	lsl.w	lr, lr, r8
 8006bba:	ea41 010e 	orr.w	r1, r1, lr
 8006bbe:	f842 1b04 	str.w	r1, [r2], #4
 8006bc2:	f853 1b04 	ldr.w	r1, [r3], #4
 8006bc6:	4283      	cmp	r3, r0
 8006bc8:	fa21 f10c 	lsr.w	r1, r1, ip
 8006bcc:	d3f1      	bcc.n	8006bb2 <__lshift+0x5a>
 8006bce:	6011      	str	r1, [r2, #0]
 8006bd0:	b159      	cbz	r1, 8006bea <__lshift+0x92>
 8006bd2:	3601      	adds	r6, #1
 8006bd4:	e009      	b.n	8006bea <__lshift+0x92>
 8006bd6:	f853 1008 	ldr.w	r1, [r3, r8]
 8006bda:	f842 1008 	str.w	r1, [r2, r8]
 8006bde:	f108 0804 	add.w	r8, r8, #4
 8006be2:	eb08 0103 	add.w	r1, r8, r3
 8006be6:	4281      	cmp	r1, r0
 8006be8:	d3f5      	bcc.n	8006bd6 <__lshift+0x7e>
 8006bea:	4628      	mov	r0, r5
 8006bec:	3e01      	subs	r6, #1
 8006bee:	4621      	mov	r1, r4
 8006bf0:	613e      	str	r6, [r7, #16]
 8006bf2:	f7ff fe9e 	bl	8006932 <_Bfree>
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	e8bd 85f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}

08006bfc <__multiply>:
 8006bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c00:	4616      	mov	r6, r2
 8006c02:	690a      	ldr	r2, [r1, #16]
 8006c04:	b087      	sub	sp, #28
 8006c06:	6933      	ldr	r3, [r6, #16]
 8006c08:	460d      	mov	r5, r1
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	da01      	bge.n	8006c12 <__multiply+0x16>
 8006c0e:	4635      	mov	r5, r6
 8006c10:	460e      	mov	r6, r1
 8006c12:	f8d5 8010 	ldr.w	r8, [r5, #16]
 8006c16:	6937      	ldr	r7, [r6, #16]
 8006c18:	68ab      	ldr	r3, [r5, #8]
 8006c1a:	6869      	ldr	r1, [r5, #4]
 8006c1c:	eb07 0408 	add.w	r4, r7, r8
 8006c20:	429c      	cmp	r4, r3
 8006c22:	bfc8      	it	gt
 8006c24:	3101      	addgt	r1, #1
 8006c26:	f7ff fe9b 	bl	8006960 <_Balloc>
 8006c2a:	f100 0c14 	add.w	ip, r0, #20
 8006c2e:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8006c32:	3314      	adds	r3, #20
 8006c34:	9304      	str	r3, [sp, #16]
 8006c36:	4663      	mov	r3, ip
 8006c38:	e002      	b.n	8006c40 <__multiply+0x44>
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f843 2b04 	str.w	r2, [r3], #4
 8006c40:	9a04      	ldr	r2, [sp, #16]
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d3f9      	bcc.n	8006c3a <__multiply+0x3e>
 8006c46:	f105 0314 	add.w	r3, r5, #20
 8006c4a:	f106 0114 	add.w	r1, r6, #20
 8006c4e:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 8006c52:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8006c56:	9302      	str	r3, [sp, #8]
 8006c58:	3514      	adds	r5, #20
 8006c5a:	3614      	adds	r6, #20
 8006c5c:	9503      	str	r5, [sp, #12]
 8006c5e:	9605      	str	r6, [sp, #20]
 8006c60:	2300      	movs	r3, #0
 8006c62:	e049      	b.n	8006cf8 <__multiply+0xfc>
 8006c64:	5acf      	ldrh	r7, [r1, r3]
 8006c66:	b30f      	cbz	r7, 8006cac <__multiply+0xb0>
 8006c68:	9e02      	ldr	r6, [sp, #8]
 8006c6a:	4642      	mov	r2, r8
 8006c6c:	2500      	movs	r5, #0
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	f856 ab04 	ldr.w	sl, [r6], #4
 8006c74:	6813      	ldr	r3, [r2, #0]
 8006c76:	fa1f fb8a 	uxth.w	fp, sl
 8006c7a:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 8006c7e:	fa1f f983 	uxth.w	r9, r3
 8006c82:	fb07 990b 	mla	r9, r7, fp, r9
 8006c86:	44a9      	add	r9, r5
 8006c88:	0c1d      	lsrs	r5, r3, #16
 8006c8a:	9b03      	ldr	r3, [sp, #12]
 8006c8c:	fb07 5a0a 	mla	sl, r7, sl, r5
 8006c90:	429e      	cmp	r6, r3
 8006c92:	eb0a 4a19 	add.w	sl, sl, r9, lsr #16
 8006c96:	fa1f f989 	uxth.w	r9, r9
 8006c9a:	ea49 490a 	orr.w	r9, r9, sl, lsl #16
 8006c9e:	ea4f 451a 	mov.w	r5, sl, lsr #16
 8006ca2:	f842 9b04 	str.w	r9, [r2], #4
 8006ca6:	d3e3      	bcc.n	8006c70 <__multiply+0x74>
 8006ca8:	9b01      	ldr	r3, [sp, #4]
 8006caa:	6015      	str	r5, [r2, #0]
 8006cac:	58ca      	ldr	r2, [r1, r3]
 8006cae:	ea5f 4a12 	movs.w	sl, r2, lsr #16
 8006cb2:	d020      	beq.n	8006cf6 <__multiply+0xfa>
 8006cb4:	f85c 5003 	ldr.w	r5, [ip, r3]
 8006cb8:	4642      	mov	r2, r8
 8006cba:	9e02      	ldr	r6, [sp, #8]
 8006cbc:	2700      	movs	r7, #0
 8006cbe:	f8b6 9000 	ldrh.w	r9, [r6]
 8006cc2:	b2ad      	uxth	r5, r5
 8006cc4:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 8006cc8:	fb0a 8809 	mla	r8, sl, r9, r8
 8006ccc:	4447      	add	r7, r8
 8006cce:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8006cd2:	6015      	str	r5, [r2, #0]
 8006cd4:	f856 5b04 	ldr.w	r5, [r6], #4
 8006cd8:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006cdc:	f852 5f04 	ldr.w	r5, [r2, #4]!
 8006ce0:	b2ad      	uxth	r5, r5
 8006ce2:	fb0a 5508 	mla	r5, sl, r8, r5
 8006ce6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006cea:	eb05 4517 	add.w	r5, r5, r7, lsr #16
 8006cee:	0c2f      	lsrs	r7, r5, #16
 8006cf0:	4546      	cmp	r6, r8
 8006cf2:	d3e4      	bcc.n	8006cbe <__multiply+0xc2>
 8006cf4:	6015      	str	r5, [r2, #0]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	9d05      	ldr	r5, [sp, #20]
 8006cfa:	185a      	adds	r2, r3, r1
 8006cfc:	eb03 080c 	add.w	r8, r3, ip
 8006d00:	42aa      	cmp	r2, r5
 8006d02:	d3af      	bcc.n	8006c64 <__multiply+0x68>
 8006d04:	9b04      	ldr	r3, [sp, #16]
 8006d06:	e000      	b.n	8006d0a <__multiply+0x10e>
 8006d08:	3c01      	subs	r4, #1
 8006d0a:	2c00      	cmp	r4, #0
 8006d0c:	dd03      	ble.n	8006d16 <__multiply+0x11a>
 8006d0e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006d12:	2a00      	cmp	r2, #0
 8006d14:	d0f8      	beq.n	8006d08 <__multiply+0x10c>
 8006d16:	6104      	str	r4, [r0, #16]
 8006d18:	b007      	add	sp, #28
 8006d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d1e <__i2b>:
 8006d1e:	b510      	push	{r4, lr}
 8006d20:	460c      	mov	r4, r1
 8006d22:	2101      	movs	r1, #1
 8006d24:	f7ff fe1c 	bl	8006960 <_Balloc>
 8006d28:	2201      	movs	r2, #1
 8006d2a:	6144      	str	r4, [r0, #20]
 8006d2c:	6102      	str	r2, [r0, #16]
 8006d2e:	bd10      	pop	{r4, pc}

08006d30 <__multadd>:
 8006d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d34:	461f      	mov	r7, r3
 8006d36:	2300      	movs	r3, #0
 8006d38:	4605      	mov	r5, r0
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	690e      	ldr	r6, [r1, #16]
 8006d3e:	f101 0014 	add.w	r0, r1, #20
 8006d42:	4619      	mov	r1, r3
 8006d44:	f850 c003 	ldr.w	ip, [r0, r3]
 8006d48:	3101      	adds	r1, #1
 8006d4a:	fa1f f88c 	uxth.w	r8, ip
 8006d4e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006d52:	fb08 7802 	mla	r8, r8, r2, r7
 8006d56:	fb0c fc02 	mul.w	ip, ip, r2
 8006d5a:	eb0c 4c18 	add.w	ip, ip, r8, lsr #16
 8006d5e:	fa1f f888 	uxth.w	r8, r8
 8006d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006d66:	eb08 4c0c 	add.w	ip, r8, ip, lsl #16
 8006d6a:	f840 c003 	str.w	ip, [r0, r3]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	42b1      	cmp	r1, r6
 8006d72:	dbe7      	blt.n	8006d44 <__multadd+0x14>
 8006d74:	b1d7      	cbz	r7, 8006dac <__multadd+0x7c>
 8006d76:	68a3      	ldr	r3, [r4, #8]
 8006d78:	429e      	cmp	r6, r3
 8006d7a:	db12      	blt.n	8006da2 <__multadd+0x72>
 8006d7c:	6861      	ldr	r1, [r4, #4]
 8006d7e:	4628      	mov	r0, r5
 8006d80:	3101      	adds	r1, #1
 8006d82:	f7ff fded 	bl	8006960 <_Balloc>
 8006d86:	6922      	ldr	r2, [r4, #16]
 8006d88:	f104 010c 	add.w	r1, r4, #12
 8006d8c:	3202      	adds	r2, #2
 8006d8e:	0092      	lsls	r2, r2, #2
 8006d90:	4680      	mov	r8, r0
 8006d92:	300c      	adds	r0, #12
 8006d94:	f7ff fc3b 	bl	800660e <memcpy>
 8006d98:	4621      	mov	r1, r4
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	4644      	mov	r4, r8
 8006d9e:	f7ff fdc8 	bl	8006932 <_Bfree>
 8006da2:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006da6:	3601      	adds	r6, #1
 8006da8:	6126      	str	r6, [r4, #16]
 8006daa:	615f      	str	r7, [r3, #20]
 8006dac:	4620      	mov	r0, r4
 8006dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006db4 <__pow5mult>:
 8006db4:	f012 0303 	ands.w	r3, r2, #3
 8006db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	460f      	mov	r7, r1
 8006dc0:	4615      	mov	r5, r2
 8006dc2:	d007      	beq.n	8006dd4 <__pow5mult+0x20>
 8006dc4:	4a23      	ldr	r2, [pc, #140]	; (8006e54 <__pow5mult+0xa0>)
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f7ff ffaf 	bl	8006d30 <__multadd>
 8006dd2:	4607      	mov	r7, r0
 8006dd4:	10ad      	asrs	r5, r5, #2
 8006dd6:	d039      	beq.n	8006e4c <__pow5mult+0x98>
 8006dd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006dda:	b93e      	cbnz	r6, 8006dec <__pow5mult+0x38>
 8006ddc:	2010      	movs	r0, #16
 8006dde:	f7ff f9f1 	bl	80061c4 <malloc>
 8006de2:	6260      	str	r0, [r4, #36]	; 0x24
 8006de4:	6046      	str	r6, [r0, #4]
 8006de6:	6086      	str	r6, [r0, #8]
 8006de8:	6006      	str	r6, [r0, #0]
 8006dea:	60c6      	str	r6, [r0, #12]
 8006dec:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8006df0:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8006df4:	b966      	cbnz	r6, 8006e10 <__pow5mult+0x5c>
 8006df6:	4620      	mov	r0, r4
 8006df8:	f240 2171 	movw	r1, #625	; 0x271
 8006dfc:	f7ff ff8f 	bl	8006d1e <__i2b>
 8006e00:	2300      	movs	r3, #0
 8006e02:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e06:	4606      	mov	r6, r0
 8006e08:	6003      	str	r3, [r0, #0]
 8006e0a:	e001      	b.n	8006e10 <__pow5mult+0x5c>
 8006e0c:	4640      	mov	r0, r8
 8006e0e:	4606      	mov	r6, r0
 8006e10:	f015 0f01 	tst.w	r5, #1
 8006e14:	d00a      	beq.n	8006e2c <__pow5mult+0x78>
 8006e16:	4639      	mov	r1, r7
 8006e18:	4632      	mov	r2, r6
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f7ff feee 	bl	8006bfc <__multiply>
 8006e20:	4639      	mov	r1, r7
 8006e22:	4680      	mov	r8, r0
 8006e24:	4620      	mov	r0, r4
 8006e26:	f7ff fd84 	bl	8006932 <_Bfree>
 8006e2a:	4647      	mov	r7, r8
 8006e2c:	106d      	asrs	r5, r5, #1
 8006e2e:	d00d      	beq.n	8006e4c <__pow5mult+0x98>
 8006e30:	f8d6 8000 	ldr.w	r8, [r6]
 8006e34:	f1b8 0f00 	cmp.w	r8, #0
 8006e38:	d1e8      	bne.n	8006e0c <__pow5mult+0x58>
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4632      	mov	r2, r6
 8006e40:	f7ff fedc 	bl	8006bfc <__multiply>
 8006e44:	6030      	str	r0, [r6, #0]
 8006e46:	f8c0 8000 	str.w	r8, [r0]
 8006e4a:	e7e0      	b.n	8006e0e <__pow5mult+0x5a>
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e52:	bf00      	nop
 8006e54:	08007430 	.word	0x08007430

08006e58 <__s2b>:
 8006e58:	e92d 45f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
 8006e5c:	4606      	mov	r6, r0
 8006e5e:	460f      	mov	r7, r1
 8006e60:	f103 0008 	add.w	r0, r3, #8
 8006e64:	2109      	movs	r1, #9
 8006e66:	4698      	mov	r8, r3
 8006e68:	4614      	mov	r4, r2
 8006e6a:	f7fc fb4d 	bl	8003508 <__aeabi_idiv>
 8006e6e:	2100      	movs	r1, #0
 8006e70:	2301      	movs	r3, #1
 8006e72:	e001      	b.n	8006e78 <__s2b+0x20>
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	3101      	adds	r1, #1
 8006e78:	4298      	cmp	r0, r3
 8006e7a:	dcfb      	bgt.n	8006e74 <__s2b+0x1c>
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	f7ff fd6f 	bl	8006960 <_Balloc>
 8006e82:	9b08      	ldr	r3, [sp, #32]
 8006e84:	6143      	str	r3, [r0, #20]
 8006e86:	2301      	movs	r3, #1
 8006e88:	2c09      	cmp	r4, #9
 8006e8a:	4601      	mov	r1, r0
 8006e8c:	6103      	str	r3, [r0, #16]
 8006e8e:	dd11      	ble.n	8006eb4 <__s2b+0x5c>
 8006e90:	f107 0a09 	add.w	sl, r7, #9
 8006e94:	2509      	movs	r5, #9
 8006e96:	5d7b      	ldrb	r3, [r7, r5]
 8006e98:	220a      	movs	r2, #10
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	3501      	adds	r5, #1
 8006e9e:	3b30      	subs	r3, #48	; 0x30
 8006ea0:	f7ff ff46 	bl	8006d30 <__multadd>
 8006ea4:	42a5      	cmp	r5, r4
 8006ea6:	4601      	mov	r1, r0
 8006ea8:	dbf5      	blt.n	8006e96 <__s2b+0x3e>
 8006eaa:	eb0a 0504 	add.w	r5, sl, r4
 8006eae:	4627      	mov	r7, r4
 8006eb0:	3d08      	subs	r5, #8
 8006eb2:	e002      	b.n	8006eba <__s2b+0x62>
 8006eb4:	f107 050a 	add.w	r5, r7, #10
 8006eb8:	2709      	movs	r7, #9
 8006eba:	463c      	mov	r4, r7
 8006ebc:	e008      	b.n	8006ed0 <__s2b+0x78>
 8006ebe:	1beb      	subs	r3, r5, r7
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	220a      	movs	r2, #10
 8006ec4:	5d1b      	ldrb	r3, [r3, r4]
 8006ec6:	3401      	adds	r4, #1
 8006ec8:	3b30      	subs	r3, #48	; 0x30
 8006eca:	f7ff ff31 	bl	8006d30 <__multadd>
 8006ece:	4601      	mov	r1, r0
 8006ed0:	4544      	cmp	r4, r8
 8006ed2:	dbf4      	blt.n	8006ebe <__s2b+0x66>
 8006ed4:	4608      	mov	r0, r1
 8006ed6:	e8bd 85f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
	...

08006edc <_realloc_r>:
 8006edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee0:	4682      	mov	sl, r0
 8006ee2:	4617      	mov	r7, r2
 8006ee4:	460e      	mov	r6, r1
 8006ee6:	b929      	cbnz	r1, 8006ef4 <_realloc_r+0x18>
 8006ee8:	4611      	mov	r1, r2
 8006eea:	b003      	add	sp, #12
 8006eec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef0:	f7ff b970 	b.w	80061d4 <_malloc_r>
 8006ef4:	f107 050b 	add.w	r5, r7, #11
 8006ef8:	f7ff fbb3 	bl	8006662 <__malloc_lock>
 8006efc:	f1a6 0908 	sub.w	r9, r6, #8
 8006f00:	2d16      	cmp	r5, #22
 8006f02:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006f06:	d801      	bhi.n	8006f0c <_realloc_r+0x30>
 8006f08:	2510      	movs	r5, #16
 8006f0a:	e002      	b.n	8006f12 <_realloc_r+0x36>
 8006f0c:	f035 0507 	bics.w	r5, r5, #7
 8006f10:	d401      	bmi.n	8006f16 <_realloc_r+0x3a>
 8006f12:	42bd      	cmp	r5, r7
 8006f14:	d204      	bcs.n	8006f20 <_realloc_r+0x44>
 8006f16:	230c      	movs	r3, #12
 8006f18:	2700      	movs	r7, #0
 8006f1a:	f8ca 3000 	str.w	r3, [sl]
 8006f1e:	e153      	b.n	80071c8 <_realloc_r+0x2ec>
 8006f20:	f022 0b03 	bic.w	fp, r2, #3
 8006f24:	45ab      	cmp	fp, r5
 8006f26:	f280 8123 	bge.w	8007170 <_realloc_r+0x294>
 8006f2a:	4b9e      	ldr	r3, [pc, #632]	; (80071a4 <_realloc_r+0x2c8>)
 8006f2c:	eb09 010b 	add.w	r1, r9, fp
 8006f30:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8006f34:	4561      	cmp	r1, ip
 8006f36:	d007      	beq.n	8006f48 <_realloc_r+0x6c>
 8006f38:	6848      	ldr	r0, [r1, #4]
 8006f3a:	f020 0001 	bic.w	r0, r0, #1
 8006f3e:	1808      	adds	r0, r1, r0
 8006f40:	6840      	ldr	r0, [r0, #4]
 8006f42:	f010 0f01 	tst.w	r0, #1
 8006f46:	d125      	bne.n	8006f94 <_realloc_r+0xb8>
 8006f48:	6848      	ldr	r0, [r1, #4]
 8006f4a:	4561      	cmp	r1, ip
 8006f4c:	f020 0003 	bic.w	r0, r0, #3
 8006f50:	eb00 080b 	add.w	r8, r0, fp
 8006f54:	d117      	bne.n	8006f86 <_realloc_r+0xaa>
 8006f56:	f105 0e10 	add.w	lr, r5, #16
 8006f5a:	45f0      	cmp	r8, lr
 8006f5c:	db1c      	blt.n	8006f98 <_realloc_r+0xbc>
 8006f5e:	eb09 0205 	add.w	r2, r9, r5
 8006f62:	ebc5 0808 	rsb	r8, r5, r8
 8006f66:	609a      	str	r2, [r3, #8]
 8006f68:	f048 0301 	orr.w	r3, r8, #1
 8006f6c:	6053      	str	r3, [r2, #4]
 8006f6e:	4650      	mov	r0, sl
 8006f70:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006f74:	4637      	mov	r7, r6
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	431d      	orrs	r5, r3
 8006f7c:	f8c9 5004 	str.w	r5, [r9, #4]
 8006f80:	f7ff fb70 	bl	8006664 <__malloc_unlock>
 8006f84:	e120      	b.n	80071c8 <_realloc_r+0x2ec>
 8006f86:	45a8      	cmp	r8, r5
 8006f88:	db06      	blt.n	8006f98 <_realloc_r+0xbc>
 8006f8a:	68cb      	ldr	r3, [r1, #12]
 8006f8c:	688a      	ldr	r2, [r1, #8]
 8006f8e:	60d3      	str	r3, [r2, #12]
 8006f90:	609a      	str	r2, [r3, #8]
 8006f92:	e0ee      	b.n	8007172 <_realloc_r+0x296>
 8006f94:	2000      	movs	r0, #0
 8006f96:	4601      	mov	r1, r0
 8006f98:	f012 0f01 	tst.w	r2, #1
 8006f9c:	f040 809b 	bne.w	80070d6 <_realloc_r+0x1fa>
 8006fa0:	f856 4c08 	ldr.w	r4, [r6, #-8]
 8006fa4:	ebc4 0409 	rsb	r4, r4, r9
 8006fa8:	6862      	ldr	r2, [r4, #4]
 8006faa:	f022 0203 	bic.w	r2, r2, #3
 8006fae:	2900      	cmp	r1, #0
 8006fb0:	d056      	beq.n	8007060 <_realloc_r+0x184>
 8006fb2:	4561      	cmp	r1, ip
 8006fb4:	eb02 080b 	add.w	r8, r2, fp
 8006fb8:	4480      	add	r8, r0
 8006fba:	d14a      	bne.n	8007052 <_realloc_r+0x176>
 8006fbc:	f105 0110 	add.w	r1, r5, #16
 8006fc0:	4588      	cmp	r8, r1
 8006fc2:	db4d      	blt.n	8007060 <_realloc_r+0x184>
 8006fc4:	4627      	mov	r7, r4
 8006fc6:	68e2      	ldr	r2, [r4, #12]
 8006fc8:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8006fcc:	60ca      	str	r2, [r1, #12]
 8006fce:	6091      	str	r1, [r2, #8]
 8006fd0:	f1ab 0204 	sub.w	r2, fp, #4
 8006fd4:	2a24      	cmp	r2, #36	; 0x24
 8006fd6:	d829      	bhi.n	800702c <_realloc_r+0x150>
 8006fd8:	2a13      	cmp	r2, #19
 8006fda:	4639      	mov	r1, r7
 8006fdc:	d91b      	bls.n	8007016 <_realloc_r+0x13a>
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f850 1b04 	ldr.w	r1, [r0], #4
 8006fe4:	60a1      	str	r1, [r4, #8]
 8006fe6:	6871      	ldr	r1, [r6, #4]
 8006fe8:	1d06      	adds	r6, r0, #4
 8006fea:	2a1b      	cmp	r2, #27
 8006fec:	60e1      	str	r1, [r4, #12]
 8006fee:	f104 0110 	add.w	r1, r4, #16
 8006ff2:	d910      	bls.n	8007016 <_realloc_r+0x13a>
 8006ff4:	6841      	ldr	r1, [r0, #4]
 8006ff6:	1d30      	adds	r0, r6, #4
 8006ff8:	6121      	str	r1, [r4, #16]
 8006ffa:	6871      	ldr	r1, [r6, #4]
 8006ffc:	1d06      	adds	r6, r0, #4
 8006ffe:	2a24      	cmp	r2, #36	; 0x24
 8007000:	6161      	str	r1, [r4, #20]
 8007002:	f104 0118 	add.w	r1, r4, #24
 8007006:	d106      	bne.n	8007016 <_realloc_r+0x13a>
 8007008:	6842      	ldr	r2, [r0, #4]
 800700a:	f104 0120 	add.w	r1, r4, #32
 800700e:	61a2      	str	r2, [r4, #24]
 8007010:	6872      	ldr	r2, [r6, #4]
 8007012:	3608      	adds	r6, #8
 8007014:	61e2      	str	r2, [r4, #28]
 8007016:	4630      	mov	r0, r6
 8007018:	460a      	mov	r2, r1
 800701a:	f850 cb04 	ldr.w	ip, [r0], #4
 800701e:	f842 cb04 	str.w	ip, [r2], #4
 8007022:	6876      	ldr	r6, [r6, #4]
 8007024:	604e      	str	r6, [r1, #4]
 8007026:	6841      	ldr	r1, [r0, #4]
 8007028:	6051      	str	r1, [r2, #4]
 800702a:	e005      	b.n	8007038 <_realloc_r+0x15c>
 800702c:	4638      	mov	r0, r7
 800702e:	4631      	mov	r1, r6
 8007030:	9301      	str	r3, [sp, #4]
 8007032:	f7ff faf9 	bl	8006628 <memmove>
 8007036:	9b01      	ldr	r3, [sp, #4]
 8007038:	1962      	adds	r2, r4, r5
 800703a:	ebc5 0808 	rsb	r8, r5, r8
 800703e:	609a      	str	r2, [r3, #8]
 8007040:	f048 0301 	orr.w	r3, r8, #1
 8007044:	6053      	str	r3, [r2, #4]
 8007046:	6863      	ldr	r3, [r4, #4]
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	431d      	orrs	r5, r3
 800704e:	6065      	str	r5, [r4, #4]
 8007050:	e08a      	b.n	8007168 <_realloc_r+0x28c>
 8007052:	45a8      	cmp	r8, r5
 8007054:	db04      	blt.n	8007060 <_realloc_r+0x184>
 8007056:	68cb      	ldr	r3, [r1, #12]
 8007058:	688a      	ldr	r2, [r1, #8]
 800705a:	60d3      	str	r3, [r2, #12]
 800705c:	609a      	str	r2, [r3, #8]
 800705e:	e003      	b.n	8007068 <_realloc_r+0x18c>
 8007060:	eb02 080b 	add.w	r8, r2, fp
 8007064:	45a8      	cmp	r8, r5
 8007066:	db36      	blt.n	80070d6 <_realloc_r+0x1fa>
 8007068:	4620      	mov	r0, r4
 800706a:	68e3      	ldr	r3, [r4, #12]
 800706c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007070:	60d3      	str	r3, [r2, #12]
 8007072:	609a      	str	r2, [r3, #8]
 8007074:	f1ab 0204 	sub.w	r2, fp, #4
 8007078:	2a24      	cmp	r2, #36	; 0x24
 800707a:	d828      	bhi.n	80070ce <_realloc_r+0x1f2>
 800707c:	2a13      	cmp	r2, #19
 800707e:	d91b      	bls.n	80070b8 <_realloc_r+0x1dc>
 8007080:	4633      	mov	r3, r6
 8007082:	f104 0010 	add.w	r0, r4, #16
 8007086:	f853 1b04 	ldr.w	r1, [r3], #4
 800708a:	60a1      	str	r1, [r4, #8]
 800708c:	6871      	ldr	r1, [r6, #4]
 800708e:	1d1e      	adds	r6, r3, #4
 8007090:	2a1b      	cmp	r2, #27
 8007092:	60e1      	str	r1, [r4, #12]
 8007094:	d910      	bls.n	80070b8 <_realloc_r+0x1dc>
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f104 0018 	add.w	r0, r4, #24
 800709c:	6123      	str	r3, [r4, #16]
 800709e:	1d33      	adds	r3, r6, #4
 80070a0:	6871      	ldr	r1, [r6, #4]
 80070a2:	1d1e      	adds	r6, r3, #4
 80070a4:	2a24      	cmp	r2, #36	; 0x24
 80070a6:	6161      	str	r1, [r4, #20]
 80070a8:	d106      	bne.n	80070b8 <_realloc_r+0x1dc>
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f104 0020 	add.w	r0, r4, #32
 80070b0:	61a3      	str	r3, [r4, #24]
 80070b2:	6873      	ldr	r3, [r6, #4]
 80070b4:	3608      	adds	r6, #8
 80070b6:	61e3      	str	r3, [r4, #28]
 80070b8:	4632      	mov	r2, r6
 80070ba:	4603      	mov	r3, r0
 80070bc:	f852 1b04 	ldr.w	r1, [r2], #4
 80070c0:	f843 1b04 	str.w	r1, [r3], #4
 80070c4:	6871      	ldr	r1, [r6, #4]
 80070c6:	6041      	str	r1, [r0, #4]
 80070c8:	6852      	ldr	r2, [r2, #4]
 80070ca:	605a      	str	r2, [r3, #4]
 80070cc:	e052      	b.n	8007174 <_realloc_r+0x298>
 80070ce:	4631      	mov	r1, r6
 80070d0:	f7ff faaa 	bl	8006628 <memmove>
 80070d4:	e04e      	b.n	8007174 <_realloc_r+0x298>
 80070d6:	4639      	mov	r1, r7
 80070d8:	4650      	mov	r0, sl
 80070da:	f7ff f87b 	bl	80061d4 <_malloc_r>
 80070de:	4607      	mov	r7, r0
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d041      	beq.n	8007168 <_realloc_r+0x28c>
 80070e4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80070e8:	f1a0 0308 	sub.w	r3, r0, #8
 80070ec:	f022 0201 	bic.w	r2, r2, #1
 80070f0:	444a      	add	r2, r9
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d104      	bne.n	8007100 <_realloc_r+0x224>
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f023 0803 	bic.w	r8, r3, #3
 80070fc:	44d8      	add	r8, fp
 80070fe:	e038      	b.n	8007172 <_realloc_r+0x296>
 8007100:	f1ab 0204 	sub.w	r2, fp, #4
 8007104:	4631      	mov	r1, r6
 8007106:	2a24      	cmp	r2, #36	; 0x24
 8007108:	d828      	bhi.n	800715c <_realloc_r+0x280>
 800710a:	2a13      	cmp	r2, #19
 800710c:	4603      	mov	r3, r0
 800710e:	d91a      	bls.n	8007146 <_realloc_r+0x26a>
 8007110:	4634      	mov	r4, r6
 8007112:	f854 3b04 	ldr.w	r3, [r4], #4
 8007116:	1d21      	adds	r1, r4, #4
 8007118:	f840 3b04 	str.w	r3, [r0], #4
 800711c:	6873      	ldr	r3, [r6, #4]
 800711e:	607b      	str	r3, [r7, #4]
 8007120:	1d03      	adds	r3, r0, #4
 8007122:	2a1b      	cmp	r2, #27
 8007124:	d90f      	bls.n	8007146 <_realloc_r+0x26a>
 8007126:	6864      	ldr	r4, [r4, #4]
 8007128:	6044      	str	r4, [r0, #4]
 800712a:	1d0c      	adds	r4, r1, #4
 800712c:	6849      	ldr	r1, [r1, #4]
 800712e:	1d18      	adds	r0, r3, #4
 8007130:	6059      	str	r1, [r3, #4]
 8007132:	1d03      	adds	r3, r0, #4
 8007134:	1d21      	adds	r1, r4, #4
 8007136:	2a24      	cmp	r2, #36	; 0x24
 8007138:	d105      	bne.n	8007146 <_realloc_r+0x26a>
 800713a:	6862      	ldr	r2, [r4, #4]
 800713c:	6042      	str	r2, [r0, #4]
 800713e:	684a      	ldr	r2, [r1, #4]
 8007140:	3108      	adds	r1, #8
 8007142:	605a      	str	r2, [r3, #4]
 8007144:	3308      	adds	r3, #8
 8007146:	4608      	mov	r0, r1
 8007148:	461a      	mov	r2, r3
 800714a:	f850 4b04 	ldr.w	r4, [r0], #4
 800714e:	f842 4b04 	str.w	r4, [r2], #4
 8007152:	6849      	ldr	r1, [r1, #4]
 8007154:	6059      	str	r1, [r3, #4]
 8007156:	6843      	ldr	r3, [r0, #4]
 8007158:	6053      	str	r3, [r2, #4]
 800715a:	e001      	b.n	8007160 <_realloc_r+0x284>
 800715c:	f7ff fa64 	bl	8006628 <memmove>
 8007160:	4650      	mov	r0, sl
 8007162:	4631      	mov	r1, r6
 8007164:	f7fe ff24 	bl	8005fb0 <_free_r>
 8007168:	4650      	mov	r0, sl
 800716a:	f7ff fa7b 	bl	8006664 <__malloc_unlock>
 800716e:	e02b      	b.n	80071c8 <_realloc_r+0x2ec>
 8007170:	46d8      	mov	r8, fp
 8007172:	464c      	mov	r4, r9
 8007174:	ebc5 0308 	rsb	r3, r5, r8
 8007178:	6862      	ldr	r2, [r4, #4]
 800717a:	2b0f      	cmp	r3, #15
 800717c:	d914      	bls.n	80071a8 <_realloc_r+0x2cc>
 800717e:	1961      	adds	r1, r4, r5
 8007180:	f002 0201 	and.w	r2, r2, #1
 8007184:	4315      	orrs	r5, r2
 8007186:	f043 0201 	orr.w	r2, r3, #1
 800718a:	18cb      	adds	r3, r1, r3
 800718c:	6065      	str	r5, [r4, #4]
 800718e:	604a      	str	r2, [r1, #4]
 8007190:	4650      	mov	r0, sl
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	3108      	adds	r1, #8
 8007196:	f042 0201 	orr.w	r2, r2, #1
 800719a:	605a      	str	r2, [r3, #4]
 800719c:	f7fe ff08 	bl	8005fb0 <_free_r>
 80071a0:	e00d      	b.n	80071be <_realloc_r+0x2e2>
 80071a2:	bf00      	nop
 80071a4:	200001f4 	.word	0x200001f4
 80071a8:	eb04 0308 	add.w	r3, r4, r8
 80071ac:	f002 0201 	and.w	r2, r2, #1
 80071b0:	ea48 0202 	orr.w	r2, r8, r2
 80071b4:	6062      	str	r2, [r4, #4]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	f042 0201 	orr.w	r2, r2, #1
 80071bc:	605a      	str	r2, [r3, #4]
 80071be:	4650      	mov	r0, sl
 80071c0:	f104 0708 	add.w	r7, r4, #8
 80071c4:	f7ff fa4e 	bl	8006664 <__malloc_unlock>
 80071c8:	4638      	mov	r0, r7
 80071ca:	b003      	add	sp, #12
 80071cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080071d0 <__isinfd>:
 80071d0:	460b      	mov	r3, r1
 80071d2:	4241      	negs	r1, r0
 80071d4:	4301      	orrs	r1, r0
 80071d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80071da:	ea42 73d1 	orr.w	r3, r2, r1, lsr #31
 80071de:	f1c3 43fe 	rsb	r3, r3, #2130706432	; 0x7f000000
 80071e2:	f503 0370 	add.w	r3, r3, #15728640	; 0xf00000
 80071e6:	4258      	negs	r0, r3
 80071e8:	ea40 0303 	orr.w	r3, r0, r3
 80071ec:	17d8      	asrs	r0, r3, #31
 80071ee:	3001      	adds	r0, #1
 80071f0:	4770      	bx	lr

080071f2 <__isnand>:
 80071f2:	4602      	mov	r2, r0
 80071f4:	4240      	negs	r0, r0
 80071f6:	4310      	orrs	r0, r2
 80071f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80071fc:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 8007200:	f1c0 40fe 	rsb	r0, r0, #2130706432	; 0x7f000000
 8007204:	f500 0070 	add.w	r0, r0, #15728640	; 0xf00000
 8007208:	0fc0      	lsrs	r0, r0, #31
 800720a:	4770      	bx	lr

0800720c <_sbrk_r>:
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	4c07      	ldr	r4, [pc, #28]	; (800722c <_sbrk_r+0x20>)
 8007210:	4605      	mov	r5, r0
 8007212:	4608      	mov	r0, r1
 8007214:	2300      	movs	r3, #0
 8007216:	6023      	str	r3, [r4, #0]
 8007218:	f7fb ff10 	bl	800303c <_sbrk>
 800721c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007220:	d102      	bne.n	8007228 <_sbrk_r+0x1c>
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	b103      	cbz	r3, 8007228 <_sbrk_r+0x1c>
 8007226:	602b      	str	r3, [r5, #0]
 8007228:	bd38      	pop	{r3, r4, r5, pc}
 800722a:	bf00      	nop
 800722c:	20000c78 	.word	0x20000c78

08007230 <strcmp>:
 8007230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007238:	2a01      	cmp	r2, #1
 800723a:	bf28      	it	cs
 800723c:	429a      	cmpcs	r2, r3
 800723e:	d0f7      	beq.n	8007230 <strcmp>
 8007240:	eba2 0003 	sub.w	r0, r2, r3
 8007244:	4770      	bx	lr

08007246 <strlen>:
 8007246:	4603      	mov	r3, r0
 8007248:	43c0      	mvns	r0, r0
 800724a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800724e:	2a00      	cmp	r2, #0
 8007250:	d1fb      	bne.n	800724a <strlen+0x4>
 8007252:	18c0      	adds	r0, r0, r3
 8007254:	4770      	bx	lr

08007256 <_calloc_r>:
 8007256:	b510      	push	{r4, lr}
 8007258:	4351      	muls	r1, r2
 800725a:	f7fe ffbb 	bl	80061d4 <_malloc_r>
 800725e:	4604      	mov	r4, r0
 8007260:	b318      	cbz	r0, 80072aa <_calloc_r+0x54>
 8007262:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007266:	f022 0203 	bic.w	r2, r2, #3
 800726a:	3a04      	subs	r2, #4
 800726c:	2a24      	cmp	r2, #36	; 0x24
 800726e:	d819      	bhi.n	80072a4 <_calloc_r+0x4e>
 8007270:	2a13      	cmp	r2, #19
 8007272:	4603      	mov	r3, r0
 8007274:	d90f      	bls.n	8007296 <_calloc_r+0x40>
 8007276:	2100      	movs	r1, #0
 8007278:	f840 1b04 	str.w	r1, [r0], #4
 800727c:	1d03      	adds	r3, r0, #4
 800727e:	2a1b      	cmp	r2, #27
 8007280:	6061      	str	r1, [r4, #4]
 8007282:	d908      	bls.n	8007296 <_calloc_r+0x40>
 8007284:	6041      	str	r1, [r0, #4]
 8007286:	1d18      	adds	r0, r3, #4
 8007288:	6059      	str	r1, [r3, #4]
 800728a:	1d03      	adds	r3, r0, #4
 800728c:	2a24      	cmp	r2, #36	; 0x24
 800728e:	d102      	bne.n	8007296 <_calloc_r+0x40>
 8007290:	6041      	str	r1, [r0, #4]
 8007292:	6059      	str	r1, [r3, #4]
 8007294:	3308      	adds	r3, #8
 8007296:	461a      	mov	r2, r3
 8007298:	2100      	movs	r1, #0
 800729a:	f842 1b04 	str.w	r1, [r2], #4
 800729e:	6059      	str	r1, [r3, #4]
 80072a0:	6051      	str	r1, [r2, #4]
 80072a2:	e002      	b.n	80072aa <_calloc_r+0x54>
 80072a4:	2100      	movs	r1, #0
 80072a6:	f000 f802 	bl	80072ae <memset>
 80072aa:	4620      	mov	r0, r4
 80072ac:	bd10      	pop	{r4, pc}

080072ae <memset>:
 80072ae:	b2c9      	uxtb	r1, r1
 80072b0:	1882      	adds	r2, r0, r2
 80072b2:	4603      	mov	r3, r0
 80072b4:	e001      	b.n	80072ba <memset+0xc>
 80072b6:	f803 1b01 	strb.w	r1, [r3], #1
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d3fb      	bcc.n	80072b6 <memset+0x8>
 80072be:	4770      	bx	lr
 80072c0:	70706148 	.word	0x70706148
 80072c4:	72612079 	.word	0x72612079
 80072c8:	68742065 	.word	0x68742065
 80072cc:	2065736f 	.word	0x2065736f
 80072d0:	206f6877 	.word	0x206f6877
 80072d4:	776f6e6b 	.word	0x776f6e6b
 80072d8:	65687420 	.word	0x65687420
 80072dc:	72612079 	.word	0x72612079
 80072e0:	70732065 	.word	0x70732065
 80072e4:	74697269 	.word	0x74697269
 80072e8:	6c6c6175 	.word	0x6c6c6175
 80072ec:	6f702079 	.word	0x6f702079
 80072f0:	203b726f 	.word	0x203b726f
 80072f4:	0000000a 	.word	0x0000000a
 80072f8:	20656854 	.word	0x20656854
 80072fc:	676e696b 	.word	0x676e696b
 8007300:	206d6f64 	.word	0x206d6f64
 8007304:	6820666f 	.word	0x6820666f
 8007308:	65766165 	.word	0x65766165
 800730c:	6562206e 	.word	0x6562206e
 8007310:	676e6f6c 	.word	0x676e6f6c
 8007314:	6f742073 	.word	0x6f742073
 8007318:	65687420 	.word	0x65687420
 800731c:	000a216d 	.word	0x000a216d
 8007320:	20776f48 	.word	0x20776f48
 8007324:	796e616d 	.word	0x796e616d
 8007328:	65796520 	.word	0x65796520
 800732c:	6f642073 	.word	0x6f642073
 8007330:	4d207365 	.word	0x4d207365
 8007334:	69737369 	.word	0x69737369
 8007338:	70697373 	.word	0x70697373
 800733c:	69722069 	.word	0x69722069
 8007340:	20726576 	.word	0x20726576
 8007344:	65766168 	.word	0x65766168
 8007348:	00000a3f 	.word	0x00000a3f
 800734c:	58343025 	.word	0x58343025
 8007350:	0000000a 	.word	0x0000000a
 8007354:	6572203a 	.word	0x6572203a
 8007358:	203a6461 	.word	0x203a6461
 800735c:	00000000 	.word	0x00000000
 8007360:	70616548 	.word	0x70616548
 8007364:	646e6120 	.word	0x646e6120
 8007368:	61747320 	.word	0x61747320
 800736c:	63206b63 	.word	0x63206b63
 8007370:	696c6c6f 	.word	0x696c6c6f
 8007374:	6e6f6973 	.word	0x6e6f6973
 8007378:	0000000a 	.word	0x0000000a
 800737c:	74697865 	.word	0x74697865
 8007380:	00000000 	.word	0x00000000

08007384 <zeroes.3596>:
 8007384:	30303030 30303030 30303030 30303030     0000000000000000
 8007394:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 80073a4:	464e4900 666e6900 4e414e00 6e616e00     .INF.inf.NAN.nan
 80073b4:	32313000 36353433 61393837 65646362     .0123456789abcde
 80073c4:	00300066                                f.0.

080073c8 <blanks.3595>:
 80073c8:	20202020 20202020 20202020 20202020                     
 80073d8:	69666e49 7974696e 4e614e00 00004300     Infinity.NaN.C..

080073e8 <_global_impure_ptr>:
 80073e8:	200000f0                                ... 

080073ec <charset>:
 80073ec:	08007422                                "t..

080073f0 <lconv>:
 80073f0:	08007420 08007421 08007421 08007421      t..!t..!t..!t..
 8007400:	08007421 08007421 08007421 08007421     !t..!t..!t..!t..
 8007410:	08007421 08007421 ffffffff ffffffff     !t..!t..........
 8007420:	5349002e 38382d4f 312d3935 00000000     ..ISO-8859-1....

08007430 <p05.2463>:
 8007430:	00000005 00000019 0000007d 00000000     ........}.......

08007440 <__mprec_tens>:
 8007440:	00000000 3ff00000 00000000 40240000     .......?......$@
 8007450:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8007460:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8007470:	00000000 412e8480 00000000 416312d0     .......A......cA
 8007480:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8007490:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 80074a0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 80074b0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 80074c0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 80074d0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 80074e0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 80074f0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8007500:	79d99db4 44ea7843                       ...yCx.D

08007508 <__mprec_bigtens>:
 8007508:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8007518:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8007528:	7f73bf3c 75154fdd                       <.s..O.u

08007530 <__mprec_tinytens>:
 8007530:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 8007540:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 8007550:	64ac6f43 0ac80628                       Co.d(...
