

        .ORG  $6000     ; ORIGIN GOES HERE

;    *****************************************
;    *                                       *
;    *        -< THE EMPTY SHELL >-          *
;    *                                       *
;    *            (DUMMY PROGRAM)            *
;    *                                       *
;    *      VERSION 1.0 ($6000-$6160)        *
;    *                                       *
;    *                5-24-83                *
;    *.......................................*
;    *                                       *
;    *          COPYRIGHT C 1983 BY          *
;    *                                       *
;    *    DON LANCASTER AND SYNERGETICS      *
;    *    BOX 1300, THATCHER AZ., 85552      *
;    *                                       *
;    *    ALL COMMERCIAL RIGHTS RESERVED     *
;    *                                       *
;    *****************************************

;              *** WHAT IT DOES ***

;    THIS PROGRAM IS A DUMMY SHELL USED AS A STARTING
;    POINT FOR YOUR OWN ASSEMBLY LANGUAGE PROGRAMS.
;
;
;
;

;            *** HOW TO USE IT ***

;    TO USE, EDIT THE PROGRAM BY MOVING THE ORIGIN,
;    CHANGING THE TITLE, REMOVING EXTRA EQU'S, ADDING
;    YOUR OWN WORKING CODE, ALTERING THE DATA FILES
;    AND DOING WHATEVER ELSE MAY BE NEEDED TO BUILD
;    YOUR OWN CUSTOM ASSEMBLED PROGRAM OR MODULE.



;    *** GOTCHAS ***

;    ANYTHING ESSENTIAL FOR USE OR UNDERSTANDING OF THE
;    PROGRAM GETS PUT HERE.  THIS INCLUDES SPECIAL NEEDS
;    SUCH AS EXTRA MEMORY, ANY COMPANION CODE MODULES, OR
;    ANY SPECIAL HARDWARE.
;
;

;             *** ENHANCEMENTS ***

;    PUT ANY ADD-ONS, "EXTRA TRICKS", OR SPECIAL
;    USES HERE.  INCLUDE USE TIPS AND APPLICATIONS.
;
;
;
;

;             *** RANDOM COMMENTS ***

;    IF THERE IS SOMETHING ELSE YOU WANT TO SAY THAT'S
;    NOT ALL THAT IMPORTANT, YOU CAN ADD IT IN THIS SPACE.
;
;
;
;


;           *** HOOKS ***

WNDLFT  =    $20       ; SCROLL WINDOW LEFT
WNDWDTH =    $21       ; SCROLL WINDOW WIDTH
WNDTOP  =    $22       ; SCROLL WINDOW TOP
WNDBOT  =    $23       ; SCROLL WINDOW BOTTOM
CH      =    $24       ; CURSOR HORIZONTAL
CV      =    $25       ; CURSOR VERTICAL
GBASL   =    $26       ; LORES BASE LOW
GBASH   =    $27       ; LORES BASE HIGH
BASL    =    $28       ; TEXT BASE LOW
BASH    =    $29       ; TEXT BASE HIGH
BEND    =    $2C       ; LORES RIGHT END H LINE
VBOT    =    $2D       ; LORES BOTTOM OF V LINE
COLOR   =    $30       ; LORES COLOR
INVFLG  =    $31       ; NORMAL/INVERSE/FLASH (FF,7F,3F)
PROMPT  =    $33       ; HOLDS PROMPT SYMBOL
CSWL    =    $36       ; OUTPUT CHARACTER HOOK LOW
CSWH    =    $37       ; OUTPUT CHARACTER HOOK HIGH
KSWL    =    $38       ; INPUT CHARACTER HOOK LOW
KSWH    =    $39       ; INPUT CHARACTER HOOK HIGH
RNDL    =    $4E       ; RANDOM NUMBER LOW
RNDH    =    $4F       ; RANDOM NUMBER HIGH

STACK   =    $0100     ; STACK PAGE ACCESS

KEYBUF  =    $0200     ; KEYBUFFER START

DOSWRM  =    $03D0     ; DOS WARM START JMP
DOSCLD  =    $03D3     ; DOS COLD START JMP
DOSFLM  =    $03D6     ; DOS FILE MANAGER JUMP
DOSRWTS =    $03D9     ; DOS RWTS JUMP
DOSIPRM =    $03DC     ; DOS FILE PARAMETER FIND JUMP
DOSRWLS =    $03E3     ; DOS RWTS PARAMETER FIND JUMP
DOSHOOK =    $03EA     ; DOS HOOK RECONNECT JUMP
ABRK    =    $03F0     ; BREAK ADDRESS (AUTOSTART& 2E ONLY!)
SOFTEV  =    $03F2     ; SOFT RESET (AUTOSTART & 2E ONLY!)
PWRDUP  =    $03F4     ; WARM START EOR CHECKSUM
AMPERV  =    $03F5     ; APPLESOFT "&" JUMP
USRADR  =    $03F8     ; CTRL-Y JUMP
NMI     =    $03FB     ; NON-MASKABLE INTERRUPT JUMP
IRQLOC  =    $03FE     ; INTERRUPT ADDRESS LOW

TEXTP1  =    $0400     ; START OF TEXT PAGE ONE
TEXTP2  =    $0800     ; START OF TEXT PAGE TWO
HIRESP1 =    $2000     ; START OF HIRES PAGE ONE
HIRESP2 =    $4000     ; START OF HIRES PAGE TWO


IOADR   =    $C000     ; KEYBOARD INPUT
KBDSTR  =    $C010     ; KEYSTROBE RESET
TAPEOUT =    $C020     ; CASSETTE OR AUDIO OUT
SPKR    =    $C030     ; SPEAKER CLICK OUTPUT
STROBE  =    $C040     ; GAME CONNECTOR STROBE
TXTCLR  =    $C050     ; GRAPHICS ON SOFT SWITCH
TXTSET  =    $C051     ; TEXT ON SOFT SWITCH
MIXCLR  =    $C052     ; FULL SCREEN SOFT SWITCH
MIXSET  =    $C053     ; MIXED SCREEN SOFT SWITCH
LOWSCR  =    $C054     ; PAGE ONE SOFT SWITCH
HISCR   =    $C055     ; PAGE TWO SOFT SWITCH
LORES   =    $C056     ; LORES SOFT SWITCH
HIRES   =    $C057     ; HIRES SOFT SWITCH
PB4     =    $C060     ; CASS IN + "FOURTH" PB INPUT "SW3"
PB1     =    $C061     ; OPEN APPLE + "FIRST" PB INPUT "SW0"
PB2     =    $C062     ; CLOSED APPLE + "SECOND" PB INPUT "SW1"
PB3     =    $C063     ; "THIRD" PUSHBUTTON INPUT "SW2"
PDL0    =    $C064     ; GAME PADDLE 0 ANALOG IN
PDL1    =    $C065     ; GAME PADDLE 1 ANALOG IN
PDL2    =    $C066     ; GAME PADDLE 2 ANALOG IN
PDL3    =    $C067     ; GAME PADDLE 3 ANALOG IN
PTRIG   =    $C070     ; ANALOG PADDLE RESET

STEP00  =    $C080     ; DISK STEPPER PHASE 0 OFF
STEP01  =    $C081     ; DISK STEPPER PHASE 0 ON
STEP10  =    $C082     ; DISK STEPPER PHASE 1 OFF
STEP11  =    $C083     ; DISK STEPPER PHASE 1 ON
STEP20  =    $C084     ; DISK STEPPER PHASE 2 OFF
STEP21  =    $C085     ; DISK STEPPER PHASE 2 ON
STEP30  =    $C086     ; DISK STEPPER PHASE 3 OFF
STEP31  =    $C087     ; DISK STEPPER PHASE 3 ON
MOTON   =    $C088     ; DISK MAIN MOTOR OFF
MOTOFF  =    $C089     ; DISK MAIN MOTOR ON
DRV0EN  =    $C08A     ; DISK ENABLE DRIVE 1
DRV1EN  =    $C08B     ; DISK ENABLE DRIVE 2
Q6CLR   =    $C08C     ; DISK Q6 CLEAR
Q6SET   =    $C08D     ; DISK Q6 SET
Q7CLR   =    $C08E     ; DISK Q7 CLEAR
Q7SET   =    $C08F     ; DISK Q7 SET

BASICLD =    $E000     ; ENTER BASIC COLD
BASICWM =    $E003     ; RE-ENTER BASIC WARM

HGR2    =    $F3D8     ; APPLESOFT CLEAR TO HIRES 2
HGR     =    $F3E2     ; APPLESOFT CLEAR TO HIRES 1
BKGND   =    $F3F4     ; APPLESOFT HIRES BACKGROUND CLEAR
HCOLOR  =    $F6F0     ; APPLESOFT HIRES COLOR SELECT
HPOSN   =    $F411     ; APPLESOFT HIRES POSITION
HPLOT   =    $F457     ; APPLESOFT HIRES PLOT


PLOT    =    $F800     ; PLOT LORES BLOCK
HLINE   =    $F819     ; HORIZ LORES LINE
VLINE   =    $F828     ; VERTICAL LORES LINE
CLRSCR  =    $F832     ; CLEAR FULL LORES SCREEN
CLRTOP  =    $F836     ; CLEAR TOP LORES SCREEN
GBSCALC =    $F847     ; LORES BASE CALCULATION
NEXTCOL =    $F85F     ; INCREASE LORES COLOR BY 3
SETCOL  =    $F864     ; SET LORES COLOR
SCRN    =    $F871     ; READ LORES SCREEN COLOR
PRNTAX  =    $F941     ; OUTPUT A THEN X AS HEX
PRBLNK  =    $F948     ; OUTPUT 3 SPACES VIA HOOKS
PRBL2   =    $F94A     ; OUTPUT X BLANKS VIA HOOKS

REGDSP  =    $FAD7     ; DISPLAY WORKING REGISTERS
PREAD   =    $FB1E     ; READ GAME PADDLE X
INIT    =    $FB2F     ; INITIALIZE TEXT SCREEN
SETTXT  =    $FB93     ; SET UP TEXT SCREEN (NOT 2E!)
SETGR   =    $FB40     ; SET UP GRAPHICS SCREEN
SETWND  =    $FB4B     ; SET NORMAL TEXT WINDOW
BASCALC =    $FBC1     ; CALCULATE TEXT BASE ADDRESS (NOT 2E!}
BELL1   =    $FBD9     ; BEEP SPEAKER IF CTRL-G
BELL2   =    $FBE4     ; BEEP SPEAKER ONCE
ADVANCE =    $FBF4     ; TEXT CURSOR ONE TO RIGHT
VIDOUT  =    $FBFD     ; OUTPUT ASCII TO SCREEN ONLY

BS      =    $FC10     ; BACKSPACE SCREEN
UP      =    $FC1A     ; MOVE SCREEN CURSOR UP ONE LINE
VTAB    =    $FC22     ; VERTICAL SCREEN TAB USING CV
VTABA   =    $FC24     ; VERTICAL SCREEN TAB USING A
ESC1    =    $FC66     ; PROCESS ESCAPE CURSOR MOVES
CLREOP  =    $FC42     ; CLEAR TO END OF PAGE
HOME    =    $FC58     ; CLEAR TEXT SCREEN AND HOME CURSOR
CR      =    $FC62     ; CARRIAGE RETURN TO SCREEN
LF      =    $FC66     ; LINE FEED TO SCREEN ONLY
SCROLL  =    $FC70     ; SCROLL TEXT SCREEN UP ONE
CLEOL   =    $FC9C     ; CLEAR TEXT TO END OF LINE
WAIT    =    $FCA8     ; TIME DELAY SET BY ACCUMULATOR
RDKEY   =    $FD0C     ; GET INPUT CHARACTER VIA HOOKS
KEYIN   =    $FD1B     ; READ THE APPLE KEYBOARD
RDCHAR  =    $FD35     ; GET KEY AND PROCESS ESC A-F
CANCEL  =    $FD62     ; CANCEL KEYBOARD LINE ENTRY
GETLNZ  =    $FD67     ; CR THEN GET KEYBOARD INPUT LINE
GETLN   =    $FD6A     ; GET KEYBOARD INPUT LINE
GETLN1  =    $FD6F     ; GET KBD INPUT, NO PROMPT
CROUT1  =    $FD8B     ; CLEAR EOL THEN CR VIA HOOKS
CROUT   =    $FD8E     ; OUTPUT CR VIA HOOKS
PRBYTE  =    $FDDA     ; OUTPUT FULL A IN HEX TO HOOKS
PRHEX   =    $FDE3     ; OUTPUT LOW A IN HEX TO HOOKS
COUT    =    $FDED     ; OUTPUT CHARACTER VIA HOOKS
COUT1   =    $FDF0     ; OUTPUT CHARACTER TO SCREEN


MOVE    =    $FE2C     ; MOVE BLOCK OF MEMORY
VERIFY  =    $FE36     ; VERIFY BLOCK OF MEMORY
LIST    =    $FE5E     ; DISASSEMBLE 20 INSTRUCTIONS
LIST2   =    $FE63     ; DISASSEMBLE "A" INSTRUCTIONS
SETINV  =    $FE80     ; PRINT INVERSE TEXT TO SCREEN
SETNORM =    $FE84     ; PRINT NORMAL TEXT TO SCREEN
SETVID  =    $FE93     ; GRAB OUTPUT HOOKS FOR SCREEN
XBASIC  =    $FEB0     ; GO BASIC, DESTROYING OLD
BASCON  =    $FEB3     ; GO BASIC, CONTINUING OLD
TRACE   =    $FEC2     ; START TRACING (OLD ROM ONLY!)
STEP    =    $FEC4     ; SINGLE STEP (OLD ROM ONLY!)
WRITE   =    $FECD     ; WRITE TO CASSETTE TAPE
READ    =    $FEFD     ; READ FROM CASSETTE TAPE
PRERR   =    $FF2D     ; PRINT "ERR" TO OUTPUT HOOK
BELL    =    $FF3A     ; OUTPUT BELL TO HOOKS
IORESR  =    $FF3F     ; RESTORE ALL WORKING REGISTERS
IOSAVE  =    $FF4A     ; SAVE ALL WORKING REGISTERS
RETURN  =    $FF58     ; "GUARANTEED" RETURN
OLDRST  =    $FF59     ; OLD RESET, NO AUTOSTART
MON     =    $FF65     ; ENTER MONITOR AND BEEP SPEAKER
MONZ    =    $FF69     ; ENTER MONITOR QUIETLY
GETNUM  =    $FFA7     ; ASCII TO HEX IN 3E & 3F

;            *** HOOKS FOR 2E ONLY! ***

CLR80C0 =    $C000     ; 8O STORE OFF (WRITE ONLY)
SET80CO =    $C001     ; 8O STORE ON (WRITE ONLY)
RAMRDMN =    $C002     ; READ MAIN MEMORY (WRITE ONLY)
RAMRDAX =    $C003     ; READ AUXILIARY MEMORY (WRITE ONLY)
RAMWRMN =    $C004     ; WRITE MAIN MEMORY (WRITE ONLY)
RAMWRAX =    $C005     ; WRITE AUXILIARY MEMORY (WRITE ONLY)
SLOTXRM =    $C006     ; INTERNAL ROM AT CX00 (WRITE ONLY)
SLOTXEX =    $C007     ; SLOT ROM AT CX00 (WRITE ONLY)

MAINZP  =    $C008     ; USE MAIN ZERO PAGE (WRITE ONLY)
ALTZP   =    $C009     ; USE ALTERNATE ZERO PAGE (WRITE ONLY)
SLOT3RM =    $C00A     ; SLOT 13 INTERNAL ROM (WRITE ONLY)
SLOT3EX =    $C00B     ; SLOT 13 EXTERNAL ROM (WRITE ONLY)
OFF80CL =    $C00C     ; TURN 80 COLUMN OFF (WRITE ONLY)
ON80COL =    $C00D     ; TURN 80 COLUMN ON (WRITE ONLY)
ALTCSOF =    $C00E     ; USE MAIN CHARACTER SET (WRITE ONLY)
ALTCSON =    $C00F     ; USE ALT CHARACTER SET (WRITE ONLY)


RAMRDS  =    $C013     ; READ RAMREAD SWITCH (READ ONLY)
RAMWTS  =    $C014     ; READ RAMWRITE SWITCH (READ ONLY)
SLTCXS  =    $C015     ; READ SLOT CX SWITCH (READ ONLY)
ALTZPS  =    $C016     ; READ ZERO PAGE SWITCH (READ ONLY)
SLTC3S  =    $C017     ; READ SLOT C3 SWITCH (READ ONLY)

S80STR  =    $C018     ; READ 80STORE SWITCH (READ ONLY)
VBL     =    $C019     ; VERT. BLANKING >80=BLANK (READ ONLY)
TEXTS   =    $C01A     ; READ TEXT SWITCH (READ ONLY)
MIXEDS  =    $C01B     ; READ MIXED GR SWITCH (READ ONLY)
PAGE2S  =    $C01C     ; READ PAGE 2 SWITCH (READ ONLY)
HIRESS  =    $C01D     ; READ HIRES SWITCH (READ ONLY)
ALTCSS  =    $C01E     ; READ ALTCHAR SET SWITCH (READ ONLY)
S80COL  =    $C01F     ; READ 8O COLUMN SWITCH (READ ONLY)

RB2RAM  =    $C080     ; READ BANK 2 RAM
WB2RAM  =    $C081     ; WRITE BANK 2 RAM, READ ROM
RROM    =    $C082     ; READ ROM ONLY, NO WRITE
RWRAM2  =    $C083     ; READ & WRITE RAM2 (HIT TWICE!)
RRAM1   =    $C088     ; READ BANK1 RAM
WRAM1   =    $C089     ; WRITE BANK1 RAM, READ ROM
RB1ROM  =    $C08A     ; READ BANK1 ROM
RWRAM1  =    $C08B     ; READ & WRITE RAM1 (HIT TWICE!)

;            *** CONSTANTS ***
;         *** TEXTFILE COMMANDS ***

B       =    $88       ; BACKSPACE
C       =    $8D       ; CARRIAGE RETURN
D       =    $84       ; DOS ATTENTION
F       =    $8C       ; FORM FEED
G       =    $87       ; RING GONG
L       =    $8A       ; LINEFEED
P       =    $60       ; FLASHING PROMPT
M       =    $00       ; END OF MESSAGE


;                *** BIG LUMPS ***
;               *** MAIN PROGRAM ***
;              *** HIGH LEVEL CODE ***

;      ADD ANY COMMENTS HERE THAT ARE
;      SPECIFIC TO THE BIG LUMPS.
;
;
;
;

START1: NOP            ; YOUR HIGH LEVEL CODE STARTS HERE
        NOP            ; AND GOES ON AS FAR AS NEEDED
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP

        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP

        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP

        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP


;               *** LITTLE LUMPS ***
;              *** HEAVY SUBROUTINE ***
;             *** SUPPORTING MODULE ***

;       ADD ANY COMMENTS HERE THAT ARE
;       SPECIFIC TO THE LITTLE LUMPS.
;
;
;
;

START2: NOP            ; YOUR MEDIUM LEVEL CODE STARTS
        NOP            ; HERE AND GOES ON AS FAR AS
        NOP            ; NEEDED.
        NOP
        NOP
        NOP
        NOP
        NOP

        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP

        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP

        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP


;            *** STASH ***
;           *** THE CRUMBS ***
;          *** DETAIL  SUBS ***

;       ADD ANY COMMENTS HERE THAT
;       ARE SPECIFIC TO THE CRUMBS.
;
;
;
;

START3: NOP            ; YOUR LOW LEVEL CODE STARTS HERE AND
        NOP            ; INCLUDES ANY SHORT FILES THAT ARE
        NOP            ; RARELY CHANGED.
        NOP
        NOP
        NOP
        NOP
        NOP

        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP

        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP

        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP


;                *** MAIN FILES ***

;       ADD ANY COMMENTS HERE THAT ARE
;       SPECIFIC TO THE MAIN FILES.
;
;
;
;

FILE1:  .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE2:  .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE3:  .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE4:  .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE5:  .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE6:  .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE7:  .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE8:  .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE9:  .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE10: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE11: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE12: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE13: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE14: .BYTE $00,$00,$00,$00,$00,$00,$00,$00


FILE15: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE16: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE17: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE18: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE19: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE20: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE21: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE22: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE23: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE24: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE25: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE26: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE27: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE28: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE29: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE30: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE31: .BYTE $00,$00,$00,$00,$00,$00,$00,$00
FILE32: .BYTE $00,$00,$00,$00,$00,$00,$00,$00


;           *** BOTTOM LINE COMMENTS ***

;    ADD ANY FINAL COMMENTS YOU FEEL
;    ARE NEEDED IN THIS SPACE.
