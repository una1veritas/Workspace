###############################################################################
#                                                                             #
#                                                       19/Sep/2012  16:16:08 #
# IAR ANSI C/C++ Compiler V6.40.2.33884/W32 KICKSTART for ARM                 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Libraries\STM32F4xx_StdPeriph_Driver #
#                    \src\stm32f4xx_gpio.c                                    #
#    Command line =  \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Libraries\STM32F4xx_StdPeriph_Driver #
#                    \src\stm32f4xx_gpio.c -D USE_STDPERIPH_DRIVER -D         #
#                    STM32F4XX -D USE_STM324xG_EVAL -D USE_USB_OTG_FS -lcN    #
#                    \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\STM324xG-EVAL_USBD-FS\List\ -o                         #
#                    \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\STM324xG-EVAL_USBD-FS\Obj\ --debug --endian=little     #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench 6.4           #
#                    Kickstart\arm\INC\c\DLib_Config_Full.h" -I               #
#                    \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\..\ -I \\psf\Home\Documents\Eclipse\Workspace\ARM\STM3 #
#                    2_USB-Host-Device_Lib_V2.1.0\Project\USB_Device_Examples #
#                    \DFU\EWARM\..\inc\ -I \\psf\Home\Documents\Eclipse\Works #
#                    pace\ARM\STM32_USB-Host-Device_Lib_V2.1.0\Project\USB_De #
#                    vice_Examples\DFU\EWARM\..\..\..\..\Libraries\CMSIS\Devi #
#                    ce\ST\STM32F4xx\Include\ -I                              #
#                    \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\  #
#                    -I \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB- #
#                    Host-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\E #
#                    WARM\..\..\..\..\Libraries\STM32_USB_OTG_Driver\inc\ -I  #
#                    \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\..\..\..\..\Libraries\STM32_USB_Device_Library\Core\in #
#                    c\ -I \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_U #
#                    SB-Host-Device_Lib_V2.1.0\Project\USB_Device_Examples\DF #
#                    U\EWARM\..\..\..\..\Libraries\STM32_USB_Device_Library\C #
#                    lass\dfu\inc\ -I \\psf\Home\Documents\Eclipse\Workspace\ #
#                    ARM\STM32_USB-Host-Device_Lib_V2.1.0\Project\USB_Device_ #
#                    Examples\DFU\EWARM\..\..\..\..\Utilities\STM32_EVAL\ -I  #
#                    \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\..\..\..\..\Utilities\STM32_EVAL\Common\ -I            #
#                    \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\..\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\    #
#                    -Ohz --use_c++_inline -I "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.4                           #
#                    Kickstart\arm\CMSIS\Include\"                            #
#    List file    =  \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\STM324xG-EVAL_USBD-FS\List\stm32f4xx_gpio.lst          #
#    Object file  =  \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\STM324xG-EVAL_USBD-FS\Obj\stm32f4xx_gpio.o             #
#                                                                             #
#                                                                             #
###############################################################################

\\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Host-Device_Lib_V2.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_gpio.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_gpio.c
      4            * @author  MCD Application Team
      5            * @version V1.0.2
      6            * @date    05-March-2012
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the GPIO peripheral:           
      9            *           - Initialization and Configuration
     10            *           - GPIO Read and Write
     11            *           - GPIO Alternate functions configuration
     12            * 
     13            *  @verbatim
     14            *
     15            *          ===================================================================
     16            *                                 How to use this driver
     17            *          ===================================================================       
     18            *           1. Enable the GPIO AHB clock using the following function
     19            *                RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);
     20            *             
     21            *           2. Configure the GPIO pin(s) using GPIO_Init()
     22            *              Four possible configuration are available for each pin:
     23            *                - Input: Floating, Pull-up, Pull-down.
     24            *                - Output: Push-Pull (Pull-up, Pull-down or no Pull)
     25            *                          Open Drain (Pull-up, Pull-down or no Pull).
     26            *                  In output mode, the speed is configurable: 2 MHz, 25 MHz,
     27            *                  50 MHz or 100 MHz.
     28            *                - Alternate Function: Push-Pull (Pull-up, Pull-down or no Pull)
     29            *                                      Open Drain (Pull-up, Pull-down or no Pull).
     30            *                - Analog: required mode when a pin is to be used as ADC channel
     31            *                          or DAC output.
     32            * 
     33            *          3- Peripherals alternate function:
     34            *              - For ADC and DAC, configure the desired pin in analog mode using 
     35            *                  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AN;
     36            *              - For other peripherals (TIM, USART...):
     37            *                 - Connect the pin to the desired peripherals' Alternate 
     38            *                   Function (AF) using GPIO_PinAFConfig() function
     39            *                 - Configure the desired pin in alternate function mode using
     40            *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
     41            *                 - Select the type, pull-up/pull-down and output speed via 
     42            *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
     43            *                 - Call GPIO_Init() function
     44            *        
     45            *          4. To get the level of a pin configured in input mode use GPIO_ReadInputDataBit()
     46            *          
     47            *          5. To set/reset the level of a pin configured in output mode use
     48            *             GPIO_SetBits()/GPIO_ResetBits()
     49            *               
     50            *          6. During and just after reset, the alternate functions are not 
     51            *             active and the GPIO pins are configured in input floating mode
     52            *             (except JTAG pins).
     53            *
     54            *          7. The LSE oscillator pins OSC32_IN and OSC32_OUT can be used as 
     55            *             general-purpose (PC14 and PC15, respectively) when the LSE
     56            *             oscillator is off. The LSE has priority over the GPIO function.
     57            *
     58            *          8. The HSE oscillator pins OSC_IN/OSC_OUT can be used as 
     59            *             general-purpose PH0 and PH1, respectively, when the HSE 
     60            *             oscillator is off. The HSE has priority over the GPIO function.
     61            *             
     62            *  @endverbatim        
     63            *
     64            ******************************************************************************
     65            * @attention
     66            *
     67            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     68            *
     69            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     70            * You may not use this file except in compliance with the License.
     71            * You may obtain a copy of the License at:
     72            *
     73            *        http://www.st.com/software_license_agreement_liberty_v2
     74            *
     75            * Unless required by applicable law or agreed to in writing, software 
     76            * distributed under the License is distributed on an "AS IS" BASIS, 
     77            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     78            * See the License for the specific language governing permissions and
     79            * limitations under the License.
     80            *
     81            ******************************************************************************
     82            */
     83          
     84          /* Includes ------------------------------------------------------------------*/
     85          #include "stm32f4xx_gpio.h"
     86          #include "stm32f4xx_rcc.h"
     87          
     88          /** @addtogroup STM32F4xx_StdPeriph_Driver
     89            * @{
     90            */
     91          
     92          /** @defgroup GPIO 
     93            * @brief GPIO driver modules
     94            * @{
     95            */ 
     96          
     97          /* Private typedef -----------------------------------------------------------*/
     98          /* Private define ------------------------------------------------------------*/
     99          /* Private macro -------------------------------------------------------------*/
    100          /* Private variables ---------------------------------------------------------*/
    101          /* Private function prototypes -----------------------------------------------*/
    102          /* Private functions ---------------------------------------------------------*/
    103          
    104          /** @defgroup GPIO_Private_Functions
    105            * @{
    106            */ 
    107          
    108          /** @defgroup GPIO_Group1 Initialization and Configuration
    109           *  @brief   Initialization and Configuration
    110           *
    111          @verbatim   
    112           ===============================================================================
    113                                  Initialization and Configuration
    114           ===============================================================================  
    115          
    116          @endverbatim
    117            * @{
    118            */
    119          
    120          /**
    121            * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
    122            * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
    123            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    124            * @retval None
    125            */
    126          void GPIO_DeInit(GPIO_TypeDef* GPIOx)
    127          {
    128            /* Check the parameters */
    129            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    130          
    131            if (GPIOx == GPIOA)
    132            {
    133              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    134              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
    135            }
    136            else if (GPIOx == GPIOB)
    137            {
    138              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    139              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
    140            }
    141            else if (GPIOx == GPIOC)
    142            {
    143              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    144              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
    145            }
    146            else if (GPIOx == GPIOD)
    147            {
    148              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    149              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
    150            }
    151            else if (GPIOx == GPIOE)
    152            {
    153              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    154              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
    155            }
    156            else if (GPIOx == GPIOF)
    157            {
    158              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    159              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
    160            }
    161            else if (GPIOx == GPIOG)
    162            {
    163              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    164              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
    165            }
    166            else if (GPIOx == GPIOH)
    167            {
    168              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    169              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
    170            }
    171            else
    172            {
    173              if (GPIOx == GPIOI)
    174              {
    175                RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    176                RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    177              }
    178            }
    179          }
    180          
    181          /**
    182            * @brief  Initializes the GPIOx peripheral according to the specified parameters in the GPIO_InitStruct.
    183            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    184            * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
    185            *         the configuration information for the specified GPIO peripheral.
    186            * @retval None
    187            */
    188          void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
    189          {
    190            uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
    191          
    192            /* Check the parameters */
    193            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    194            assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
    195            assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
    196            assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
    197          
    198            /* -------------------------Configure the port pins---------------- */
    199            /*-- GPIO Mode Configuration --*/
    200            for (pinpos = 0x00; pinpos < 0x10; pinpos++)
    201            {
    202              pos = ((uint32_t)0x01) << pinpos;
    203              /* Get the port pins position */
    204              currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    205          
    206              if (currentpin == pos)
    207              {
    208                GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
    209                GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
    210          
    211                if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
    212                {
    213                  /* Check Speed mode parameters */
    214                  assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    215          
    216                  /* Speed mode configuration */
    217                  GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
    218                  GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
    219          
    220                  /* Check Output mode parameters */
    221                  assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
    222          
    223                  /* Output mode configuration*/
    224                  GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
    225                  GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
    226                }
    227          
    228                /* Pull-up Pull down resistor configuration*/
    229                GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
    230                GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    231              }
    232            }
    233          }
    234          
    235          /**
    236            * @brief  Fills each GPIO_InitStruct member with its default value.
    237            * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
    238            * @retval None
    239            */
    240          void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
    241          {
    242            /* Reset GPIO init structure parameters values */
    243            GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    244            GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
    245            GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    246            GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
    247            GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
    248          }
    249          
    250          /**
    251            * @brief  Locks GPIO Pins configuration registers.
    252            * @note   The locked registers are GPIOx_MODER, GPIOx_OTYPER, GPIOx_OSPEEDR,
    253            *         GPIOx_PUPDR, GPIOx_AFRL and GPIOx_AFRH.
    254            * @note   The configuration of the locked GPIO pins can no longer be modified
    255            *         until the next reset.
    256            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    257            * @param  GPIO_Pin: specifies the port bit to be locked.
    258            *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
    259            * @retval None
    260            */
    261          void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    262          {
    263            __IO uint32_t tmp = 0x00010000;
    264          
    265            /* Check the parameters */
    266            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    267            assert_param(IS_GPIO_PIN(GPIO_Pin));
    268          
    269            tmp |= GPIO_Pin;
    270            /* Set LCKK bit */
    271            GPIOx->LCKR = tmp;
    272            /* Reset LCKK bit */
    273            GPIOx->LCKR =  GPIO_Pin;
    274            /* Set LCKK bit */
    275            GPIOx->LCKR = tmp;
    276            /* Read LCKK bit*/
    277            tmp = GPIOx->LCKR;
    278            /* Read LCKK bit*/
    279            tmp = GPIOx->LCKR;
    280          }
    281          
    282          /**
    283            * @}
    284            */
    285          
    286          /** @defgroup GPIO_Group2 GPIO Read and Write
    287           *  @brief   GPIO Read and Write
    288           *
    289          @verbatim   
    290           ===============================================================================
    291                                        GPIO Read and Write
    292           ===============================================================================  
    293          
    294          @endverbatim
    295            * @{
    296            */
    297          
    298          /**
    299            * @brief  Reads the specified input port pin.
    300            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    301            * @param  GPIO_Pin: specifies the port bit to read.
    302            *         This parameter can be GPIO_Pin_x where x can be (0..15).
    303            * @retval The input port pin value.
    304            */
    305          uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    306          {
    307            uint8_t bitstatus = 0x00;
    308          
    309            /* Check the parameters */
    310            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    311            assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
    312          
    313            if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    314            {
    315              bitstatus = (uint8_t)Bit_SET;
    316            }
    317            else
    318            {
    319              bitstatus = (uint8_t)Bit_RESET;
    320            }
    321            return bitstatus;
    322          }
    323          
    324          /**
    325            * @brief  Reads the specified GPIO input data port.
    326            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    327            * @retval GPIO input data port value.
    328            */
    329          uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
    330          {
    331            /* Check the parameters */
    332            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    333          
    334            return ((uint16_t)GPIOx->IDR);
    335          }
    336          
    337          /**
    338            * @brief  Reads the specified output data port bit.
    339            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    340            * @param  GPIO_Pin: specifies the port bit to read.
    341            *          This parameter can be GPIO_Pin_x where x can be (0..15).
    342            * @retval The output port pin value.
    343            */
    344          uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    345          {
    346            uint8_t bitstatus = 0x00;
    347          
    348            /* Check the parameters */
    349            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    350            assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
    351          
    352            if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    353            {
    354              bitstatus = (uint8_t)Bit_SET;
    355            }
    356            else
    357            {
    358              bitstatus = (uint8_t)Bit_RESET;
    359            }
    360            return bitstatus;
    361          }
    362          
    363          /**
    364            * @brief  Reads the specified GPIO output data port.
    365            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    366            * @retval GPIO output data port value.
    367            */
    368          uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
    369          {
    370            /* Check the parameters */
    371            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    372          
    373            return ((uint16_t)GPIOx->ODR);
    374          }
    375          
    376          /**
    377            * @brief  Sets the selected data port bits.
    378            * @note   This functions uses GPIOx_BSRR register to allow atomic read/modify 
    379            *         accesses. In this way, there is no risk of an IRQ occurring between
    380            *         the read and the modify access.
    381            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    382            * @param  GPIO_Pin: specifies the port bits to be written.
    383            *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
    384            * @retval None
    385            */
    386          void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    387          {
    388            /* Check the parameters */
    389            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    390            assert_param(IS_GPIO_PIN(GPIO_Pin));
    391          
    392            GPIOx->BSRRL = GPIO_Pin;
    393          }
    394          
    395          /**
    396            * @brief  Clears the selected data port bits.
    397            * @note   This functions uses GPIOx_BSRR register to allow atomic read/modify 
    398            *         accesses. In this way, there is no risk of an IRQ occurring between
    399            *         the read and the modify access.
    400            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    401            * @param  GPIO_Pin: specifies the port bits to be written.
    402            *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
    403            * @retval None
    404            */
    405          void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    406          {
    407            /* Check the parameters */
    408            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    409            assert_param(IS_GPIO_PIN(GPIO_Pin));
    410          
    411            GPIOx->BSRRH = GPIO_Pin;
    412          }
    413          
    414          /**
    415            * @brief  Sets or clears the selected data port bit.
    416            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    417            * @param  GPIO_Pin: specifies the port bit to be written.
    418            *          This parameter can be one of GPIO_Pin_x where x can be (0..15).
    419            * @param  BitVal: specifies the value to be written to the selected bit.
    420            *          This parameter can be one of the BitAction enum values:
    421            *            @arg Bit_RESET: to clear the port pin
    422            *            @arg Bit_SET: to set the port pin
    423            * @retval None
    424            */
    425          void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
    426          {
    427            /* Check the parameters */
    428            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    429            assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
    430            assert_param(IS_GPIO_BIT_ACTION(BitVal));
    431          
    432            if (BitVal != Bit_RESET)
    433            {
    434              GPIOx->BSRRL = GPIO_Pin;
    435            }
    436            else
    437            {
    438              GPIOx->BSRRH = GPIO_Pin ;
    439            }
    440          }
    441          
    442          /**
    443            * @brief  Writes data to the specified GPIO data port.
    444            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    445            * @param  PortVal: specifies the value to be written to the port output data register.
    446            * @retval None
    447            */
    448          void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
    449          {
    450            /* Check the parameters */
    451            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    452          
    453            GPIOx->ODR = PortVal;
    454          }
    455          
    456          /**
    457            * @brief  Toggles the specified GPIO pins..
    458            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    459            * @param  GPIO_Pin: Specifies the pins to be toggled.
    460            * @retval None
    461            */
    462          void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    463          {
    464            /* Check the parameters */
    465            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    466          
    467            GPIOx->ODR ^= GPIO_Pin;
    468          }
    469          
    470          /**
    471            * @}
    472            */
    473          
    474          /** @defgroup GPIO_Group3 GPIO Alternate functions configuration function
    475           *  @brief   GPIO Alternate functions configuration function
    476           *
    477          @verbatim   
    478           ===============================================================================
    479                         GPIO Alternate functions configuration function
    480           ===============================================================================  
    481          
    482          @endverbatim
    483            * @{
    484            */
    485          
    486          /**
    487            * @brief  Changes the mapping of the specified pin.
    488            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    489            * @param  GPIO_PinSource: specifies the pin for the Alternate function.
    490            *         This parameter can be GPIO_PinSourcex where x can be (0..15).
    491            * @param  GPIO_AFSelection: selects the pin to used as Alternate function.
    492            *          This parameter can be one of the following values:
    493            *            @arg GPIO_AF_RTC_50Hz: Connect RTC_50Hz pin to AF0 (default after reset) 
    494            *            @arg GPIO_AF_MCO: Connect MCO pin (MCO1 and MCO2) to AF0 (default after reset) 
    495            *            @arg GPIO_AF_TAMPER: Connect TAMPER pins (TAMPER_1 and TAMPER_2) to AF0 (default after reset) 
    496            *            @arg GPIO_AF_SWJ: Connect SWJ pins (SWD and JTAG)to AF0 (default after reset) 
    497            *            @arg GPIO_AF_TRACE: Connect TRACE pins to AF0 (default after reset)
    498            *            @arg GPIO_AF_TIM1: Connect TIM1 pins to AF1
    499            *            @arg GPIO_AF_TIM2: Connect TIM2 pins to AF1
    500            *            @arg GPIO_AF_TIM3: Connect TIM3 pins to AF2
    501            *            @arg GPIO_AF_TIM4: Connect TIM4 pins to AF2
    502            *            @arg GPIO_AF_TIM5: Connect TIM5 pins to AF2
    503            *            @arg GPIO_AF_TIM8: Connect TIM8 pins to AF3
    504            *            @arg GPIO_AF_TIM9: Connect TIM9 pins to AF3
    505            *            @arg GPIO_AF_TIM10: Connect TIM10 pins to AF3
    506            *            @arg GPIO_AF_TIM11: Connect TIM11 pins to AF3
    507            *            @arg GPIO_AF_I2C1: Connect I2C1 pins to AF4
    508            *            @arg GPIO_AF_I2C2: Connect I2C2 pins to AF4
    509            *            @arg GPIO_AF_I2C3: Connect I2C3 pins to AF4
    510            *            @arg GPIO_AF_SPI1: Connect SPI1 pins to AF5
    511            *            @arg GPIO_AF_SPI2: Connect SPI2/I2S2 pins to AF5
    512            *            @arg GPIO_AF_SPI3: Connect SPI3/I2S3 pins to AF6
    513            *            @arg GPIO_AF_I2S3ext: Connect I2S3ext pins to AF7
    514            *            @arg GPIO_AF_USART1: Connect USART1 pins to AF7
    515            *            @arg GPIO_AF_USART2: Connect USART2 pins to AF7
    516            *            @arg GPIO_AF_USART3: Connect USART3 pins to AF7
    517            *            @arg GPIO_AF_UART4: Connect UART4 pins to AF8
    518            *            @arg GPIO_AF_UART5: Connect UART5 pins to AF8
    519            *            @arg GPIO_AF_USART6: Connect USART6 pins to AF8
    520            *            @arg GPIO_AF_CAN1: Connect CAN1 pins to AF9
    521            *            @arg GPIO_AF_CAN2: Connect CAN2 pins to AF9
    522            *            @arg GPIO_AF_TIM12: Connect TIM12 pins to AF9
    523            *            @arg GPIO_AF_TIM13: Connect TIM13 pins to AF9
    524            *            @arg GPIO_AF_TIM14: Connect TIM14 pins to AF9
    525            *            @arg GPIO_AF_OTG_FS: Connect OTG_FS pins to AF10
    526            *            @arg GPIO_AF_OTG_HS: Connect OTG_HS pins to AF10
    527            *            @arg GPIO_AF_ETH: Connect ETHERNET pins to AF11
    528            *            @arg GPIO_AF_FSMC: Connect FSMC pins to AF12
    529            *            @arg GPIO_AF_OTG_HS_FS: Connect OTG HS (configured in FS) pins to AF12
    530            *            @arg GPIO_AF_SDIO: Connect SDIO pins to AF12
    531            *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
    532            *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
    533            * @retval None
    534            */
    535          void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
    536          {
    537            uint32_t temp = 0x00;
    538            uint32_t temp_2 = 0x00;
    539            
    540            /* Check the parameters */
    541            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    542            assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    543            assert_param(IS_GPIO_AF(GPIO_AF));
    544            
    545            temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
    546            GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
    547            temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
    548            GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
    549          }
    550          
    551          /**
    552            * @}
    553            */ 
    554          
    555          /**
    556            * @}
    557            */
    558          
    559          /**
    560            * @}
    561            */ 
    562          
    563          /**
    564            * @}
    565            */ 
    566          
    567          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  GPIO_DeInit
             0 -> RCC_AHB1PeriphResetCmd
             8 -> RCC_AHB1PeriphResetCmd
       20  GPIO_Init
        8  GPIO_PinAFConfig
        4  GPIO_PinLockConfig
        0  GPIO_ReadInputData
        0  GPIO_ReadInputDataBit
        0  GPIO_ReadOutputData
        0  GPIO_ReadOutputDataBit
        0  GPIO_ResetBits
        0  GPIO_SetBits
        0  GPIO_StructInit
        0  GPIO_ToggleBits
        0  GPIO_Write
        0  GPIO_WriteBit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  ??DataTable0_5
       4  ??DataTable0_6
       4  ??DataTable0_7
       4  ??DataTable0_8
     194  GPIO_DeInit
     112  GPIO_Init
      36  GPIO_PinAFConfig
      36  GPIO_PinLockConfig
       6  GPIO_ReadInputData
      14  GPIO_ReadInputDataBit
       6  GPIO_ReadOutputData
      14  GPIO_ReadOutputDataBit
       4  GPIO_ResetBits
       4  GPIO_SetBits
      18  GPIO_StructInit
       8  GPIO_ToggleBits
       4  GPIO_Write
      10  GPIO_WriteBit

 
 502 bytes in section .text
 
 502 bytes of CODE memory

Errors: none
Warnings: none
