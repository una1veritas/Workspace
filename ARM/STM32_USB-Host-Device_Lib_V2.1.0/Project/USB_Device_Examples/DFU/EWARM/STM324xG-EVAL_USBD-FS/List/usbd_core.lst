###############################################################################
#                                                                             #
#                                                       19/Sep/2012  16:16:18 #
# IAR ANSI C/C++ Compiler V6.40.2.33884/W32 KICKSTART for ARM                 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Libraries\STM32_USB_Device_Library\C #
#                    ore\src\usbd_core.c                                      #
#    Command line =  \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Libraries\STM32_USB_Device_Library\C #
#                    ore\src\usbd_core.c -D USE_STDPERIPH_DRIVER -D           #
#                    STM32F4XX -D USE_STM324xG_EVAL -D USE_USB_OTG_FS -lcN    #
#                    \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\STM324xG-EVAL_USBD-FS\List\ -o                         #
#                    \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\STM324xG-EVAL_USBD-FS\Obj\ --debug --endian=little     #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench 6.4           #
#                    Kickstart\arm\INC\c\DLib_Config_Full.h" -I               #
#                    \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\..\ -I \\psf\Home\Documents\Eclipse\Workspace\ARM\STM3 #
#                    2_USB-Host-Device_Lib_V2.1.0\Project\USB_Device_Examples #
#                    \DFU\EWARM\..\inc\ -I \\psf\Home\Documents\Eclipse\Works #
#                    pace\ARM\STM32_USB-Host-Device_Lib_V2.1.0\Project\USB_De #
#                    vice_Examples\DFU\EWARM\..\..\..\..\Libraries\CMSIS\Devi #
#                    ce\ST\STM32F4xx\Include\ -I                              #
#                    \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\  #
#                    -I \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB- #
#                    Host-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\E #
#                    WARM\..\..\..\..\Libraries\STM32_USB_OTG_Driver\inc\ -I  #
#                    \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\..\..\..\..\Libraries\STM32_USB_Device_Library\Core\in #
#                    c\ -I \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_U #
#                    SB-Host-Device_Lib_V2.1.0\Project\USB_Device_Examples\DF #
#                    U\EWARM\..\..\..\..\Libraries\STM32_USB_Device_Library\C #
#                    lass\dfu\inc\ -I \\psf\Home\Documents\Eclipse\Workspace\ #
#                    ARM\STM32_USB-Host-Device_Lib_V2.1.0\Project\USB_Device_ #
#                    Examples\DFU\EWARM\..\..\..\..\Utilities\STM32_EVAL\ -I  #
#                    \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\..\..\..\..\Utilities\STM32_EVAL\Common\ -I            #
#                    \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\..\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\    #
#                    -Ohz --use_c++_inline -I "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.4                           #
#                    Kickstart\arm\CMSIS\Include\"                            #
#    List file    =  \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\STM324xG-EVAL_USBD-FS\List\usbd_core.lst               #
#    Object file  =  \\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Hos #
#                    t-Device_Lib_V2.1.0\Project\USB_Device_Examples\DFU\EWAR #
#                    M\STM324xG-EVAL_USBD-FS\Obj\usbd_core.o                  #
#                                                                             #
#                                                                             #
###############################################################################

\\psf\Home\Documents\Eclipse\Workspace\ARM\STM32_USB-Host-Device_Lib_V2.1.0\Libraries\STM32_USB_Device_Library\Core\src\usbd_core.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbd_core.c
      4            * @author  MCD Application Team
      5            * @version V1.1.0
      6            * @date    19-March-2012
      7            * @brief   This file provides all the USBD core functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */ 
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "usbd_core.h"
     30          #include "usbd_req.h"
     31          #include "usbd_ioreq.h"
     32          #include "usb_dcd_int.h"
     33          #include "usb_bsp.h"
     34          
     35          /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
     36          * @{
     37          */
     38          
     39          
     40          /** @defgroup USBD_CORE 
     41          * @brief usbd core module
     42          * @{
     43          */ 
     44          
     45          /** @defgroup USBD_CORE_Private_TypesDefinitions
     46          * @{
     47          */ 
     48          /**
     49          * @}
     50          */ 
     51          
     52          
     53          /** @defgroup USBD_CORE_Private_Defines
     54          * @{
     55          */ 
     56          
     57          /**
     58          * @}
     59          */ 
     60          
     61          
     62          /** @defgroup USBD_CORE_Private_Macros
     63          * @{
     64          */ 
     65          /**
     66          * @}
     67          */ 
     68          
     69          
     70          
     71          
     72          /** @defgroup USBD_CORE_Private_FunctionPrototypes
     73          * @{
     74          */ 
     75          static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev);
     76          static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum);
     77          static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum);
     78          static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev);
     79          static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev);
     80          static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev);
     81          static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev);
     82          #ifdef VBUS_SENSING_ENABLED
     83          static uint8_t USBD_DevConnected(USB_OTG_CORE_HANDLE  *pdev);
     84          static uint8_t USBD_DevDisconnected(USB_OTG_CORE_HANDLE  *pdev);
     85          #endif
     86          static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev);
     87          static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev);
     88          static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) ;
     89          /**
     90          * @}
     91          */ 
     92          
     93          /** @defgroup USBD_CORE_Private_Variables
     94          * @{
     95          */ 
     96          
     97          __IO USB_OTG_DCTL_TypeDef SET_TEST_MODE;
     98          
     99          USBD_DCD_INT_cb_TypeDef USBD_DCD_INT_cb = 
    100          {
    101            USBD_DataOutStage,
    102            USBD_DataInStage,
    103            USBD_SetupStage,
    104            USBD_SOF,
    105            USBD_Reset,
    106            USBD_Suspend,
    107            USBD_Resume,
    108            USBD_IsoINIncomplete,
    109            USBD_IsoOUTIncomplete,
    110          #ifdef VBUS_SENSING_ENABLED
    111          USBD_DevConnected, 
    112          USBD_DevDisconnected,    
    113          #endif  
    114          };
    115          
    116          USBD_DCD_INT_cb_TypeDef  *USBD_DCD_INT_fops = &USBD_DCD_INT_cb;
    117          /**
    118          * @}
    119          */ 
    120          
    121          /** @defgroup USBD_CORE_Private_Functions
    122          * @{
    123          */ 
    124          
    125          /**
    126          * @brief  USBD_Init
    127          *         Initailizes the device stack and load the class driver
    128          * @param  pdev: device instance
    129          * @param  core_address: USB OTG core ID
    130          * @param  class_cb: Class callback structure address
    131          * @param  usr_cb: User callback structure address
    132          * @retval None
    133          */
    134          void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
    135                         USB_OTG_CORE_ID_TypeDef coreID,
    136                         USBD_DEVICE *pDevice,                  
    137                         USBD_Class_cb_TypeDef *class_cb, 
    138                         USBD_Usr_cb_TypeDef *usr_cb)
    139          {
    140            /* Hardware Init */
    141            USB_OTG_BSP_Init(pdev);  
    142            
    143            USBD_DeInit(pdev);
    144            
    145            /*Register class and user callbacks */
    146            pdev->dev.class_cb = class_cb;
    147            pdev->dev.usr_cb = usr_cb;  
    148            pdev->dev.usr_device = pDevice;    
    149            
    150            /* set USB OTG core params */
    151            DCD_Init(pdev , coreID);
    152            
    153            /* Upon Init call usr callback */
    154            pdev->dev.usr_cb->Init();
    155            
    156            /* Enable Interrupts */
    157            USB_OTG_BSP_EnableInterrupt(pdev);
    158          }
    159          
    160          /**
    161          * @brief  USBD_DeInit 
    162          *         Re-Initialize th device library
    163          * @param  pdev: device instance
    164          * @retval status: status
    165          */
    166          USBD_Status USBD_DeInit(USB_OTG_CORE_HANDLE *pdev)
    167          {
    168            /* Software Init */
    169            
    170            return USBD_OK;
    171          }
    172          
    173          /**
    174          * @brief  USBD_SetupStage 
    175          *         Handle the setup stage
    176          * @param  pdev: device instance
    177          * @retval status
    178          */
    179          static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
    180          {
    181            USB_SETUP_REQ req;
    182            
    183            USBD_ParseSetupRequest(pdev , &req);
    184            
    185            switch (req.bmRequest & 0x1F) 
    186            {
    187            case USB_REQ_RECIPIENT_DEVICE:   
    188              USBD_StdDevReq (pdev, &req);
    189              break;
    190              
    191            case USB_REQ_RECIPIENT_INTERFACE:     
    192              USBD_StdItfReq(pdev, &req);
    193              break;
    194              
    195            case USB_REQ_RECIPIENT_ENDPOINT:        
    196              USBD_StdEPReq(pdev, &req);   
    197              break;
    198              
    199            default:           
    200              DCD_EP_Stall(pdev , req.bmRequest & 0x80);
    201              break;
    202            }  
    203            return USBD_OK;
    204          }
    205          
    206          /**
    207          * @brief  USBD_DataOutStage 
    208          *         Handle data out stage
    209          * @param  pdev: device instance
    210          * @param  epnum: endpoint index
    211          * @retval status
    212          */
    213          static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
    214          {
    215            USB_OTG_EP *ep;
    216            
    217            if(epnum == 0) 
    218            {
    219              ep = &pdev->dev.out_ep[0];
    220              if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
    221              {
    222                if(ep->rem_data_len > ep->maxpacket)
    223                {
    224                  ep->rem_data_len -=  ep->maxpacket;
    225                  
    226                  if(pdev->cfg.dma_enable == 1)
    227                  {
    228                    /* in slave mode this, is handled by the RxSTSQLvl ISR */
    229                    ep->xfer_buff += ep->maxpacket; 
    230                  }        
    231                  USBD_CtlContinueRx (pdev, 
    232                                      ep->xfer_buff,
    233                                      MIN(ep->rem_data_len ,ep->maxpacket));
    234                }
    235                else
    236                {
    237                  if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
    238                     (pdev->dev.device_status == USB_OTG_CONFIGURED))
    239                  {
    240                    pdev->dev.class_cb->EP0_RxReady(pdev); 
    241                  }
    242                  USBD_CtlSendStatus(pdev);
    243                }
    244              }
    245            }
    246            else if((pdev->dev.class_cb->DataOut != NULL)&&
    247                    (pdev->dev.device_status == USB_OTG_CONFIGURED))
    248            {
    249              pdev->dev.class_cb->DataOut(pdev, epnum); 
    250            }  
    251            return USBD_OK;
    252          }
    253          
    254          /**
    255          * @brief  USBD_DataInStage 
    256          *         Handle data in stage
    257          * @param  pdev: device instance
    258          * @param  epnum: endpoint index
    259          * @retval status
    260          */
    261          static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
    262          {
    263            USB_OTG_EP *ep;
    264            
    265            if(epnum == 0) 
    266            {
    267              ep = &pdev->dev.in_ep[0];
    268              if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
    269              {
    270                if(ep->rem_data_len > ep->maxpacket)
    271                {
    272                  ep->rem_data_len -=  ep->maxpacket;
    273                  if(pdev->cfg.dma_enable == 1)
    274                  {
    275                    /* in slave mode this, is handled by the TxFifoEmpty ISR */
    276                    ep->xfer_buff += ep->maxpacket;
    277                  }
    278                  USBD_CtlContinueSendData (pdev, 
    279                                            ep->xfer_buff, 
    280                                            ep->rem_data_len);
    281                }
    282                else
    283                { /* last packet is MPS multiple, so send ZLP packet */
    284                  if((ep->total_data_len % ep->maxpacket == 0) &&
    285                     (ep->total_data_len >= ep->maxpacket) &&
    286                       (ep->total_data_len < ep->ctl_data_len ))
    287                  {
    288                    
    289                    USBD_CtlContinueSendData(pdev , NULL, 0);
    290                    ep->ctl_data_len = 0;
    291                  }
    292                  else
    293                  {
    294                    if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
    295                       (pdev->dev.device_status == USB_OTG_CONFIGURED))
    296                    {
    297                      pdev->dev.class_cb->EP0_TxSent(pdev); 
    298                    }          
    299                    USBD_CtlReceiveStatus(pdev);
    300                  }
    301                }
    302              }
    303              if (pdev->dev.test_mode == 1)
    304              {
    305                USBD_RunTestMode(pdev); 
    306                pdev->dev.test_mode = 0;
    307              }
    308            }
    309            else if((pdev->dev.class_cb->DataIn != NULL)&& 
    310                    (pdev->dev.device_status == USB_OTG_CONFIGURED))
    311            {
    312              pdev->dev.class_cb->DataIn(pdev, epnum); 
    313            }  
    314            return USBD_OK;
    315          }
    316          
    317          
    318          
    319          
    320          /**
    321          * @brief  USBD_RunTestMode 
    322          *         Launch test mode process
    323          * @param  pdev: device instance
    324          * @retval status
    325          */
    326          static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) 
    327          {
    328            USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
    329            return USBD_OK;  
    330          }
    331          
    332          /**
    333          * @brief  USBD_Reset 
    334          *         Handle Reset event
    335          * @param  pdev: device instance
    336          * @retval status
    337          */
    338          
    339          static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
    340          {
    341            /* Open EP0 OUT */
    342            DCD_EP_Open(pdev,
    343                        0x00,
    344                        USB_OTG_MAX_EP0_SIZE,
    345                        EP_TYPE_CTRL);
    346            
    347            /* Open EP0 IN */
    348            DCD_EP_Open(pdev,
    349                        0x80,
    350                        USB_OTG_MAX_EP0_SIZE,
    351                        EP_TYPE_CTRL);
    352            
    353            /* Upon Reset call usr call back */
    354            pdev->dev.device_status = USB_OTG_DEFAULT;
    355            pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
    356            
    357            return USBD_OK;
    358          }
    359          
    360          /**
    361          * @brief  USBD_Resume 
    362          *         Handle Resume event
    363          * @param  pdev: device instance
    364          * @retval status
    365          */
    366          
    367          static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
    368          {
    369            /* Upon Resume call usr call back */
    370            pdev->dev.usr_cb->DeviceResumed(); 
    371            pdev->dev.device_status = pdev->dev.device_old_status;  
    372            pdev->dev.device_status = USB_OTG_CONFIGURED;  
    373            return USBD_OK;
    374          }
    375          
    376          
    377          /**
    378          * @brief  USBD_Suspend 
    379          *         Handle Suspend event
    380          * @param  pdev: device instance
    381          * @retval status
    382          */
    383          
    384          static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
    385          {
    386            pdev->dev.device_old_status = pdev->dev.device_status;
    387            pdev->dev.device_status  = USB_OTG_SUSPENDED;
    388            /* Upon Resume call usr call back */
    389            pdev->dev.usr_cb->DeviceSuspended(); 
    390            return USBD_OK;
    391          }
    392          
    393          
    394          /**
    395          * @brief  USBD_SOF 
    396          *         Handle SOF event
    397          * @param  pdev: device instance
    398          * @retval status
    399          */
    400          
    401          static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
    402          {
    403            if(pdev->dev.class_cb->SOF)
    404            {
    405              pdev->dev.class_cb->SOF(pdev); 
    406            }
    407            return USBD_OK;
    408          }
    409          /**
    410          * @brief  USBD_SetCfg 
    411          *        Configure device and start the interface
    412          * @param  pdev: device instance
    413          * @param  cfgidx: configuration index
    414          * @retval status
    415          */
    416          
    417          USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
    418          {
    419            pdev->dev.class_cb->Init(pdev, cfgidx); 
    420            
    421            /* Upon set config call usr call back */
    422            pdev->dev.usr_cb->DeviceConfigured();
    423            return USBD_OK; 
    424          }
    425          
    426          /**
    427          * @brief  USBD_ClrCfg 
    428          *         Clear current configuration
    429          * @param  pdev: device instance
    430          * @param  cfgidx: configuration index
    431          * @retval status: USBD_Status
    432          */
    433          USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
    434          {
    435            pdev->dev.class_cb->DeInit(pdev, cfgidx);   
    436            return USBD_OK;
    437          }
    438          
    439          /**
    440          * @brief  USBD_IsoINIncomplete 
    441          *         Handle iso in incomplete event
    442          * @param  pdev: device instance
    443          * @retval status
    444          */
    445          static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
    446          {
    447            pdev->dev.class_cb->IsoINIncomplete(pdev);   
    448            return USBD_OK;
    449          }
    450          
    451          /**
    452          * @brief  USBD_IsoOUTIncomplete 
    453          *         Handle iso out incomplete event
    454          * @param  pdev: device instance
    455          * @retval status
    456          */
    457          static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
    458          {
    459            pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
    460            return USBD_OK;
    461          }
    462          
    463          #ifdef VBUS_SENSING_ENABLED
    464          /**
    465          * @brief  USBD_DevConnected 
    466          *         Handle device connection event
    467          * @param  pdev: device instance
    468          * @retval status
    469          */
    470          static uint8_t USBD_DevConnected(USB_OTG_CORE_HANDLE  *pdev)
    471          {
    472            pdev->dev.usr_cb->DeviceConnected();
    473            pdev->dev.connection_status = 1;  
    474            return USBD_OK;
    475          }
    476          
    477          /**
    478          * @brief  USBD_DevDisconnected 
    479          *         Handle device disconnection event
    480          * @param  pdev: device instance
    481          * @retval status
    482          */
    483          static uint8_t USBD_DevDisconnected(USB_OTG_CORE_HANDLE  *pdev)
    484          {
    485            pdev->dev.usr_cb->DeviceDisconnected();
    486            pdev->dev.class_cb->DeInit(pdev, 0);
    487            pdev->dev.connection_status = 0;    
    488            return USBD_OK;
    489          }
    490          #endif
    491          /**
    492          * @}
    493          */ 
    494          
    495          
    496          /**
    497          * @}
    498          */ 
    499          
    500          
    501          /**
    502          * @}
    503          */ 
    504          
    505          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
    506          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  USBD_ClrCfg
              8 -- Indirect call
       16  USBD_DataInStage
             16 -- Indirect call
             16 -> USBD_CtlContinueSendData
             16 -> USBD_CtlReceiveStatus
        8  USBD_DataOutStage
              8 -- Indirect call
              8 -> USBD_CtlContinueRx
              8 -> USBD_CtlSendStatus
        0  USBD_DeInit
        8  USBD_DevConnected
              8 -- Indirect call
        8  USBD_DevDisconnected
              8 -- Indirect call
       24  USBD_Init
             24 -- Indirect call
             24 -> DCD_Init
              0 -> USB_OTG_BSP_EnableInterrupt
             24 -> USB_OTG_BSP_Init
        8  USBD_IsoINIncomplete
              8 -- Indirect call
        8  USBD_IsoOUTIncomplete
              8 -- Indirect call
        8  USBD_Reset
              8 -- Indirect call
              8 -> DCD_EP_Open
        8  USBD_Resume
              8 -- Indirect call
        8  USBD_SOF
              8 -- Indirect call
        8  USBD_SetCfg
              8 -- Indirect call
       16  USBD_SetupStage
             16 -> DCD_EP_Stall
             16 -> USBD_ParseSetupRequest
             16 -> USBD_StdDevReq
             16 -> USBD_StdEPReq
             16 -> USBD_StdItfReq
        8  USBD_Suspend
              8 -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  SET_TEST_MODE
      14  USBD_ClrCfg
      44  USBD_DCD_INT_cb
       4  USBD_DCD_INT_fops
     166  USBD_DataInStage
     114  USBD_DataOutStage
       4  USBD_DeInit
      22  USBD_DevConnected
      32  USBD_DevDisconnected
      54  USBD_Init
      14  USBD_IsoINIncomplete
      14  USBD_IsoOUTIncomplete
      46  USBD_Reset
      30  USBD_Resume
      18  USBD_SOF
      24  USBD_SetCfg
      76  USBD_SetupStage
      28  USBD_Suspend

 
   4 bytes in section .bss
  48 bytes in section .data
 660 bytes in section .text
 
 660 bytes of CODE memory
  52 bytes of DATA memory

Errors: none
Warnings: none
