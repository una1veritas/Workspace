
stm32f4-i2c.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000000:	b480      	push	{r7}
 8000002:	b083      	sub	sp, #12
 8000004:	af00      	add	r7, sp, #0
 8000006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000008:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800000c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000010:	687a      	ldr	r2, [r7, #4]
 8000012:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 8000016:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800001a:	60da      	str	r2, [r3, #12]
}
 800001c:	f107 070c 	add.w	r7, r7, #12
 8000020:	46bd      	mov	sp, r7
 8000022:	bc80      	pop	{r7}
 8000024:	4770      	bx	lr
 8000026:	bf00      	nop

08000028 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000028:	b480      	push	{r7}
 800002a:	b085      	sub	sp, #20
 800002c:	af00      	add	r7, sp, #0
 800002e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000030:	f04f 0300 	mov.w	r3, #0
 8000034:	73fb      	strb	r3, [r7, #15]
 8000036:	f04f 0300 	mov.w	r3, #0
 800003a:	73bb      	strb	r3, [r7, #14]
 800003c:	f04f 030f 	mov.w	r3, #15
 8000040:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000042:	687b      	ldr	r3, [r7, #4]
 8000044:	78db      	ldrb	r3, [r3, #3]
 8000046:	2b00      	cmp	r3, #0
 8000048:	d045      	beq.n	80000d6 <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800004a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800004e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000052:	68db      	ldr	r3, [r3, #12]
 8000054:	ea6f 0303 	mvn.w	r3, r3
 8000058:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800005c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000060:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000062:	7bfb      	ldrb	r3, [r7, #15]
 8000064:	f1c3 0304 	rsb	r3, r3, #4
 8000068:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800006a:	7b7a      	ldrb	r2, [r7, #13]
 800006c:	7bfb      	ldrb	r3, [r7, #15]
 800006e:	fa42 f303 	asr.w	r3, r2, r3
 8000072:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000074:	687b      	ldr	r3, [r7, #4]
 8000076:	785b      	ldrb	r3, [r3, #1]
 8000078:	461a      	mov	r2, r3
 800007a:	7bbb      	ldrb	r3, [r7, #14]
 800007c:	fa02 f303 	lsl.w	r3, r2, r3
 8000080:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000082:	687b      	ldr	r3, [r7, #4]
 8000084:	789a      	ldrb	r2, [r3, #2]
 8000086:	7b7b      	ldrb	r3, [r7, #13]
 8000088:	4013      	ands	r3, r2
 800008a:	b2da      	uxtb	r2, r3
 800008c:	7bfb      	ldrb	r3, [r7, #15]
 800008e:	4313      	orrs	r3, r2
 8000090:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000092:	7bfb      	ldrb	r3, [r7, #15]
 8000094:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000098:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800009a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800009e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80000a2:	687a      	ldr	r2, [r7, #4]
 80000a4:	7812      	ldrb	r2, [r2, #0]
 80000a6:	189b      	adds	r3, r3, r2
 80000a8:	7bfa      	ldrb	r2, [r7, #15]
 80000aa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80000ae:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80000b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80000b6:	687a      	ldr	r2, [r7, #4]
 80000b8:	7812      	ldrb	r2, [r2, #0]
 80000ba:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80000be:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80000c0:	6879      	ldr	r1, [r7, #4]
 80000c2:	7809      	ldrb	r1, [r1, #0]
 80000c4:	f001 011f 	and.w	r1, r1, #31
 80000c8:	f04f 0001 	mov.w	r0, #1
 80000cc:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80000d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80000d4:	e014      	b.n	8000100 <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80000d6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80000da:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80000de:	687a      	ldr	r2, [r7, #4]
 80000e0:	7812      	ldrb	r2, [r2, #0]
 80000e2:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80000e6:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80000e8:	6879      	ldr	r1, [r7, #4]
 80000ea:	7809      	ldrb	r1, [r1, #0]
 80000ec:	f001 011f 	and.w	r1, r1, #31
 80000f0:	f04f 0001 	mov.w	r0, #1
 80000f4:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80000f8:	f102 0220 	add.w	r2, r2, #32
 80000fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000100:	f107 0714 	add.w	r7, r7, #20
 8000104:	46bd      	mov	sp, r7
 8000106:	bc80      	pop	{r7}
 8000108:	4770      	bx	lr
 800010a:	bf00      	nop

0800010c <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 800010c:	b480      	push	{r7}
 800010e:	b083      	sub	sp, #12
 8000110:	af00      	add	r7, sp, #0
 8000112:	6078      	str	r0, [r7, #4]
 8000114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000116:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800011a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800011e:	683a      	ldr	r2, [r7, #0]
 8000120:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8000124:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000128:	6879      	ldr	r1, [r7, #4]
 800012a:	430a      	orrs	r2, r1
 800012c:	609a      	str	r2, [r3, #8]
}
 800012e:	f107 070c 	add.w	r7, r7, #12
 8000132:	46bd      	mov	sp, r7
 8000134:	bc80      	pop	{r7}
 8000136:	4770      	bx	lr

08000138 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8000138:	b480      	push	{r7}
 800013a:	b083      	sub	sp, #12
 800013c:	af00      	add	r7, sp, #0
 800013e:	4602      	mov	r2, r0
 8000140:	460b      	mov	r3, r1
 8000142:	71fa      	strb	r2, [r7, #7]
 8000144:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000146:	79bb      	ldrb	r3, [r7, #6]
 8000148:	2b00      	cmp	r3, #0
 800014a:	d00c      	beq.n	8000166 <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
 800014c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000150:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000154:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000158:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800015c:	6911      	ldr	r1, [r2, #16]
 800015e:	79fa      	ldrb	r2, [r7, #7]
 8000160:	430a      	orrs	r2, r1
 8000162:	611a      	str	r2, [r3, #16]
 8000164:	e00d      	b.n	8000182 <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000166:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800016a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800016e:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000172:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000176:	6911      	ldr	r1, [r2, #16]
 8000178:	79fa      	ldrb	r2, [r7, #7]
 800017a:	ea6f 0202 	mvn.w	r2, r2
 800017e:	400a      	ands	r2, r1
 8000180:	611a      	str	r2, [r3, #16]
  }
}
 8000182:	f107 070c 	add.w	r7, r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr

0800018c <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2b04      	cmp	r3, #4
 8000198:	d10c      	bne.n	80001b4 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800019a:	f24e 0310 	movw	r3, #57360	; 0xe010
 800019e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80001a2:	f24e 0210 	movw	r2, #57360	; 0xe010
 80001a6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80001aa:	6812      	ldr	r2, [r2, #0]
 80001ac:	f042 0204 	orr.w	r2, r2, #4
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	e00b      	b.n	80001cc <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80001b4:	f24e 0310 	movw	r3, #57360	; 0xe010
 80001b8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80001bc:	f24e 0210 	movw	r2, #57360	; 0xe010
 80001c0:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80001c4:	6812      	ldr	r2, [r2, #0]
 80001c6:	f022 0204 	bic.w	r2, r2, #4
 80001ca:	601a      	str	r2, [r3, #0]
  }
}
 80001cc:	f107 070c 	add.w	r7, r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop

080001d8 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 80001dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80001e0:	f04f 0101 	mov.w	r1, #1
 80001e4:	f009 f852 	bl	800928c <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80001e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80001ec:	f04f 0100 	mov.w	r1, #0
 80001f0:	f009 f84c 	bl	800928c <RCC_APB2PeriphResetCmd>
}
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop

080001f8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b085      	sub	sp, #20
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000202:	f04f 0300 	mov.w	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000208:	f04f 0300 	mov.w	r3, #0
 800020c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	685b      	ldr	r3, [r3, #4]
 8000212:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800021a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800021e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	791b      	ldrb	r3, [r3, #4]
 8000224:	ea4f 2203 	mov.w	r2, r3, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800022c:	4313      	orrs	r3, r2
 800022e:	68fa      	ldr	r2, [r7, #12]
 8000230:	4313      	orrs	r3, r2
 8000232:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	68fa      	ldr	r2, [r7, #12]
 8000238:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	689b      	ldr	r3, [r3, #8]
 800023e:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000240:	68fa      	ldr	r2, [r7, #12]
 8000242:	f24f 73fd 	movw	r3, #63485	; 0xf7fd
 8000246:	f2cc 03ff 	movt	r3, #49407	; 0xc0ff
 800024a:	4013      	ands	r3, r2
 800024c:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000256:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800025c:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	795b      	ldrb	r3, [r3, #5]
 8000262:	ea4f 0343 	mov.w	r3, r3, lsl #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000266:	4313      	orrs	r3, r2
 8000268:	68fa      	ldr	r2, [r7, #12]
 800026a:	4313      	orrs	r3, r2
 800026c:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	68fa      	ldr	r2, [r7, #12]
 8000272:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000278:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000280:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	7d1b      	ldrb	r3, [r3, #20]
 8000286:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800028a:	b2da      	uxtb	r2, r3
 800028c:	7afb      	ldrb	r3, [r7, #11]
 800028e:	4313      	orrs	r3, r2
 8000290:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000292:	7afb      	ldrb	r3, [r7, #11]
 8000294:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	4313      	orrs	r3, r2
 800029c:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80002a4:	f107 0714 	add.w	r7, r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f04f 0200 	mov.w	r2, #0
 80002be:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f04f 0200 	mov.w	r2, #0
 80002c6:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f04f 0200 	mov.w	r2, #0
 80002ce:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f04f 0200 	mov.w	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f04f 0200 	mov.w	r2, #0
 80002de:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f04f 0200 	mov.w	r2, #0
 80002e6:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f04f 0201 	mov.w	r2, #1
 80002ee:	751a      	strb	r2, [r3, #20]
}
 80002f0:	f107 070c 	add.w	r7, r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop

080002fc <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000304:	f04f 0300 	mov.w	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 800030a:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800030e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	f243 03e0 	movw	r3, #12512	; 0x30e0
 800031c:	f6cf 73fc 	movt	r3, #65532	; 0xfffc
 8000320:	4013      	ands	r3, r2
 8000322:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800032c:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000332:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	68db      	ldr	r3, [r3, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000338:	4313      	orrs	r3, r2
 800033a:	68fa      	ldr	r2, [r7, #12]
 800033c:	4313      	orrs	r3, r2
 800033e:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000340:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8000344:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000348:	68fa      	ldr	r2, [r7, #12]
 800034a:	605a      	str	r2, [r3, #4]
}
 800034c:	f107 0714 	add.w	r7, r7, #20
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop

08000358 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f04f 0200 	mov.w	r2, #0
 8000366:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	f04f 0200 	mov.w	r2, #0
 800036e:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	f04f 0200 	mov.w	r2, #0
 8000376:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f04f 0200 	mov.w	r2, #0
 800037e:	60da      	str	r2, [r3, #12]
}
 8000380:	f107 070c 	add.w	r7, r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop

0800038c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	460b      	mov	r3, r1
 8000396:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000398:	78fb      	ldrb	r3, [r7, #3]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d006      	beq.n	80003ac <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	689b      	ldr	r3, [r3, #8]
 80003a2:	f043 0201 	orr.w	r2, r3, #1
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	e005      	b.n	80003b8 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	689b      	ldr	r3, [r3, #8]
 80003b0:	f023 0201 	bic.w	r2, r3, #1
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	609a      	str	r2, [r3, #8]
  }
}
 80003b8:	f107 070c 	add.w	r7, r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop

080003c4 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80003ce:	f04f 0300 	mov.w	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80003e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80003e4:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 80003e6:	68fa      	ldr	r2, [r7, #12]
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	68fa      	ldr	r2, [r7, #12]
 80003f2:	605a      	str	r2, [r3, #4]
}
 80003f4:	f107 0714 	add.w	r7, r7, #20
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop

08000400 <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	4613      	mov	r3, r2
 800040a:	460a      	mov	r2, r1
 800040c:	807a      	strh	r2, [r7, #2]
 800040e:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8000410:	887a      	ldrh	r2, [r7, #2]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 8000416:	883a      	ldrh	r2, [r7, #0]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800041c:	f107 070c 	add.w	r7, r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop

08000428 <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	460b      	mov	r3, r1
 8000432:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8000434:	f04f 0300 	mov.w	r3, #0
 8000438:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f023 031f 	bic.w	r3, r3, #31
 8000446:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 8000448:	78fb      	ldrb	r3, [r7, #3]
 800044a:	68fa      	ldr	r2, [r7, #12]
 800044c:	4313      	orrs	r3, r2
 800044e:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	605a      	str	r2, [r3, #4]
}
 8000456:	f107 0714 	add.w	r7, r7, #20
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d00c      	beq.n	800048a <ADC_TempSensorVrefintCmd+0x2a>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8000470:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8000474:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000478:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 800047c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000480:	6852      	ldr	r2, [r2, #4]
 8000482:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	e00b      	b.n	80004a2 <ADC_TempSensorVrefintCmd+0x42>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 800048a:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800048e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000492:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8000496:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800049a:	6852      	ldr	r2, [r2, #4]
 800049c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80004a0:	605a      	str	r2, [r3, #4]
  }
}
 80004a2:	f107 070c 	add.w	r7, r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d00c      	beq.n	80004d6 <ADC_VBATCmd+0x2a>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 80004bc:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80004c0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80004c4:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 80004c8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80004cc:	6852      	ldr	r2, [r2, #4]
 80004ce:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	e00b      	b.n	80004ee <ADC_VBATCmd+0x42>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 80004d6:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80004da:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80004de:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 80004e2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80004e6:	6852      	ldr	r2, [r2, #4]
 80004e8:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80004ec:	605a      	str	r2, [r3, #4]
  }
}
 80004ee:	f107 070c 	add.w	r7, r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	70f9      	strb	r1, [r7, #3]
 8000502:	70ba      	strb	r2, [r7, #2]
 8000504:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000506:	f04f 0300 	mov.w	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	f04f 0300 	mov.w	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000512:	78fb      	ldrb	r3, [r7, #3]
 8000514:	2b09      	cmp	r3, #9
 8000516:	d927      	bls.n	8000568 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800051e:	78fa      	ldrb	r2, [r7, #3]
 8000520:	4613      	mov	r3, r2
 8000522:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000526:	189b      	adds	r3, r3, r2
 8000528:	f1a3 031e 	sub.w	r3, r3, #30
 800052c:	f04f 0207 	mov.w	r2, #7
 8000530:	fa02 f303 	lsl.w	r3, r2, r3
 8000534:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	ea6f 0303 	mvn.w	r3, r3
 800053c:	68fa      	ldr	r2, [r7, #12]
 800053e:	4013      	ands	r3, r2
 8000540:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000542:	7879      	ldrb	r1, [r7, #1]
 8000544:	78fa      	ldrb	r2, [r7, #3]
 8000546:	4613      	mov	r3, r2
 8000548:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800054c:	189b      	adds	r3, r3, r2
 800054e:	f1a3 031e 	sub.w	r3, r3, #30
 8000552:	fa01 f303 	lsl.w	r3, r1, r3
 8000556:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	4313      	orrs	r3, r2
 800055e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	e022      	b.n	80005ae <ADC_RegularChannelConfig+0xb6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	691b      	ldr	r3, [r3, #16]
 800056c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800056e:	78fa      	ldrb	r2, [r7, #3]
 8000570:	4613      	mov	r3, r2
 8000572:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000576:	189b      	adds	r3, r3, r2
 8000578:	f04f 0207 	mov.w	r2, #7
 800057c:	fa02 f303 	lsl.w	r3, r2, r3
 8000580:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	ea6f 0303 	mvn.w	r3, r3
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	4013      	ands	r3, r2
 800058c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800058e:	7879      	ldrb	r1, [r7, #1]
 8000590:	78fa      	ldrb	r2, [r7, #3]
 8000592:	4613      	mov	r3, r2
 8000594:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000598:	189b      	adds	r3, r3, r2
 800059a:	fa01 f303 	lsl.w	r3, r1, r3
 800059e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80005ae:	78bb      	ldrb	r3, [r7, #2]
 80005b0:	2b06      	cmp	r3, #6
 80005b2:	d827      	bhi.n	8000604 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80005ba:	78bb      	ldrb	r3, [r7, #2]
 80005bc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80005c0:	4613      	mov	r3, r2
 80005c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80005c6:	189b      	adds	r3, r3, r2
 80005c8:	f04f 021f 	mov.w	r2, #31
 80005cc:	fa02 f303 	lsl.w	r3, r2, r3
 80005d0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	ea6f 0303 	mvn.w	r3, r3
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	4013      	ands	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80005de:	78f9      	ldrb	r1, [r7, #3]
 80005e0:	78bb      	ldrb	r3, [r7, #2]
 80005e2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80005e6:	4613      	mov	r3, r2
 80005e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80005ec:	189b      	adds	r3, r3, r2
 80005ee:	fa01 f303 	lsl.w	r3, r1, r3
 80005f2:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	635a      	str	r2, [r3, #52]	; 0x34
 8000602:	e051      	b.n	80006a8 <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000604:	78bb      	ldrb	r3, [r7, #2]
 8000606:	2b0c      	cmp	r3, #12
 8000608:	d827      	bhi.n	800065a <ADC_RegularChannelConfig+0x162>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000610:	78ba      	ldrb	r2, [r7, #2]
 8000612:	4613      	mov	r3, r2
 8000614:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000618:	189b      	adds	r3, r3, r2
 800061a:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 800061e:	f04f 021f 	mov.w	r2, #31
 8000622:	fa02 f303 	lsl.w	r3, r2, r3
 8000626:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	ea6f 0303 	mvn.w	r3, r3
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	4013      	ands	r3, r2
 8000632:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000634:	78f9      	ldrb	r1, [r7, #3]
 8000636:	78ba      	ldrb	r2, [r7, #2]
 8000638:	4613      	mov	r3, r2
 800063a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800063e:	189b      	adds	r3, r3, r2
 8000640:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 8000644:	fa01 f303 	lsl.w	r3, r1, r3
 8000648:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	4313      	orrs	r3, r2
 8000650:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	68fa      	ldr	r2, [r7, #12]
 8000656:	631a      	str	r2, [r3, #48]	; 0x30
 8000658:	e026      	b.n	80006a8 <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000660:	78ba      	ldrb	r2, [r7, #2]
 8000662:	4613      	mov	r3, r2
 8000664:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000668:	189b      	adds	r3, r3, r2
 800066a:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 800066e:	f04f 021f 	mov.w	r2, #31
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	ea6f 0303 	mvn.w	r3, r3
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	4013      	ands	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000684:	78f9      	ldrb	r1, [r7, #3]
 8000686:	78ba      	ldrb	r2, [r7, #2]
 8000688:	4613      	mov	r3, r2
 800068a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800068e:	189b      	adds	r3, r3, r2
 8000690:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 8000694:	fa01 f303 	lsl.w	r3, r1, r3
 8000698:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4313      	orrs	r3, r2
 80006a0:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80006a8:	f107 0714 	add.w	r7, r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	609a      	str	r2, [r3, #8]
}
 80006c8:	f107 070c 	add.w	r7, r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop

080006d4 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80006dc:	f04f 0300 	mov.w	r3, #0
 80006e0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d003      	beq.n	80006f6 <ADC_GetSoftwareStartConvStatus+0x22>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 80006ee:	f04f 0301 	mov.w	r3, #1
 80006f2:	73fb      	strb	r3, [r7, #15]
 80006f4:	e002      	b.n	80006fc <ADC_GetSoftwareStartConvStatus+0x28>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 80006f6:	f04f 0300 	mov.w	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	f107 0714 	add.w	r7, r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d006      	beq.n	800072c <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	e005      	b.n	8000738 <ADC_EOCOnEachRegularChannelCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	609a      	str	r2, [r3, #8]
  }
}
 8000738:	f107 070c 	add.w	r7, r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop

08000744 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000750:	78fb      	ldrb	r3, [r7, #3]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d006      	beq.n	8000764 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	f043 0202 	orr.w	r2, r3, #2
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	e005      	b.n	8000770 <ADC_ContinuousModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	f023 0202 	bic.w	r2, r3, #2
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	609a      	str	r2, [r3, #8]
  }
}
 8000770:	f107 070c 	add.w	r7, r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8000788:	f04f 0300 	mov.w	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 800078e:	f04f 0300 	mov.w	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80007a0:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 80007a2:	78fb      	ldrb	r3, [r7, #3]
 80007a4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80007a8:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	ea4f 3343 	mov.w	r3, r3, lsl #13
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	605a      	str	r2, [r3, #4]
}
 80007bc:	f107 0714 	add.w	r7, r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop

080007c8 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d006      	beq.n	80007e8 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	e005      	b.n	80007f4 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	605a      	str	r2, [r3, #4]
  }
}
 80007f4:	f107 070c 	add.w	r7, r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop

08000800 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080c:	b29b      	uxth	r3, r3
}
 800080e:	4618      	mov	r0, r3
 8000810:	f107 070c 	add.w	r7, r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop

0800081c <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 8000820:	f242 3308 	movw	r3, #8968	; 0x2308
 8000824:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000828:	681b      	ldr	r3, [r3, #0]
}
 800082a:	4618      	mov	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d006      	beq.n	8000854 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	e005      	b.n	8000860 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	609a      	str	r2, [r3, #8]
  }
}
 8000860:	f107 070c 	add.w	r7, r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop

0800086c <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d006      	beq.n	800088c <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	e005      	b.n	8000898 <ADC_DMARequestAfterLastTransferCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	609a      	str	r2, [r3, #8]
  }
}
 8000898:	f107 070c 	add.w	r7, r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop

080008a4 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00c      	beq.n	80008ce <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 80008b4:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80008b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80008bc:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 80008c0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80008c4:	6852      	ldr	r2, [r2, #4]
 80008c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	e00b      	b.n	80008e6 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x42>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 80008ce:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80008d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80008d6:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 80008da:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80008de:	6852      	ldr	r2, [r2, #4]
 80008e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80008e4:	605a      	str	r2, [r3, #4]
  }
}
 80008e6:	f107 070c 	add.w	r7, r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b087      	sub	sp, #28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	70f9      	strb	r1, [r7, #3]
 80008fa:	70ba      	strb	r2, [r7, #2]
 80008fc:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 80008fe:	f04f 0300 	mov.w	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	f04f 0300 	mov.w	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b09      	cmp	r3, #9
 8000914:	d927      	bls.n	8000966 <ADC_InjectedChannelConfig+0x76>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 800091c:	78fa      	ldrb	r2, [r7, #3]
 800091e:	4613      	mov	r3, r2
 8000920:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000924:	189b      	adds	r3, r3, r2
 8000926:	f1a3 031e 	sub.w	r3, r3, #30
 800092a:	f04f 0207 	mov.w	r2, #7
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	ea6f 0303 	mvn.w	r3, r3
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	4013      	ands	r3, r2
 800093e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8000940:	7879      	ldrb	r1, [r7, #1]
 8000942:	78fa      	ldrb	r2, [r7, #3]
 8000944:	4613      	mov	r3, r2
 8000946:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800094a:	189b      	adds	r3, r3, r2
 800094c:	f1a3 031e 	sub.w	r3, r3, #30
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	4313      	orrs	r3, r2
 800095c:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	e022      	b.n	80009ac <ADC_InjectedChannelConfig+0xbc>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	691b      	ldr	r3, [r3, #16]
 800096a:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800096c:	78fa      	ldrb	r2, [r7, #3]
 800096e:	4613      	mov	r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	189b      	adds	r3, r3, r2
 8000976:	f04f 0207 	mov.w	r2, #7
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	ea6f 0303 	mvn.w	r3, r3
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	4013      	ands	r3, r2
 800098a:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800098c:	7879      	ldrb	r1, [r7, #1]
 800098e:	78fa      	ldrb	r2, [r7, #3]
 8000990:	4613      	mov	r3, r2
 8000992:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000996:	189b      	adds	r3, r3, r2
 8000998:	fa01 f303 	lsl.w	r3, r1, r3
 800099c:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800099e:	697a      	ldr	r2, [r7, #20]
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009b0:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80009b8:	ea4f 5313 	mov.w	r3, r3, lsr #20
 80009bc:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	ea6f 0303 	mvn.w	r3, r3
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	78bb      	ldrb	r3, [r7, #2]
 80009ca:	18d3      	adds	r3, r2, r3
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f103 0303 	add.w	r3, r3, #3
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	461a      	mov	r2, r3
 80009d6:	4613      	mov	r3, r2
 80009d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80009dc:	189b      	adds	r3, r3, r2
 80009de:	f04f 021f 	mov.w	r2, #31
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	ea6f 0303 	mvn.w	r3, r3
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	4013      	ands	r3, r2
 80009f2:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80009f4:	78f9      	ldrb	r1, [r7, #3]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	ea6f 0303 	mvn.w	r3, r3
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	78bb      	ldrb	r3, [r7, #2]
 8000a02:	18d3      	adds	r3, r2, r3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	f103 0303 	add.w	r3, r3, #3
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4613      	mov	r3, r2
 8000a10:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000a14:	189b      	adds	r3, r3, r2
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a2a:	f107 071c 	add.w	r7, r7, #28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8000a40:	f04f 0300 	mov.w	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8000a46:	f04f 0300 	mov.w	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a50:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000a58:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000a60:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a74:	f107 0714 	add.w	r7, r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	460a      	mov	r2, r1
 8000a8c:	70fa      	strb	r2, [r7, #3]
 8000a8e:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 8000a90:	f04f 0300 	mov.w	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 8000a9a:	78fa      	ldrb	r2, [r7, #3]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	18d3      	adds	r3, r2, r3
 8000aa0:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	883a      	ldrh	r2, [r7, #0]
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	f107 0714 	add.w	r7, r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000abe:	f04f 0300 	mov.w	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000ad0:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	609a      	str	r2, [r3, #8]
}
 8000ae0:	f107 0714 	add.w	r7, r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000af6:	f04f 0300 	mov.w	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000b08:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	609a      	str	r2, [r3, #8]
}
 8000b18:	f107 0714 	add.w	r7, r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	609a      	str	r2, [r3, #8]
}
 8000b38:	f107 070c 	add.w	r7, r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop

08000b44 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000b4c:	f04f 0300 	mov.w	r3, #0
 8000b50:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 8000b5e:	f04f 0301 	mov.w	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e002      	b.n	8000b6c <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 8000b66:	f04f 0300 	mov.w	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f107 0714 	add.w	r7, r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b88:	78fb      	ldrb	r3, [r7, #3]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d006      	beq.n	8000b9c <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	e005      	b.n	8000ba8 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	605a      	str	r2, [r3, #4]
  }
}
 8000ba8:	f107 070c 	add.w	r7, r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000bc0:	78fb      	ldrb	r3, [r7, #3]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d006      	beq.n	8000bd4 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	e005      	b.n	8000be0 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	605a      	str	r2, [r3, #4]
  }
}
 8000be0:	f107 070c 	add.w	r7, r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8000c02:	78fa      	ldrb	r2, [r7, #3]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	18d3      	adds	r3, r2, r3
 8000c08:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000c0c:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	b29b      	uxth	r3, r3
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	f107 0714 	add.w	r7, r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	460a      	mov	r2, r1
 8000c2c:	807a      	strh	r2, [r7, #2]
 8000c2e:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8000c36:	887b      	ldrh	r3, [r7, #2]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f04f 0201 	mov.w	r2, #1
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8000c48:	787b      	ldrb	r3, [r7, #1]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d006      	beq.n	8000c5c <ADC_ITConfig+0x3c>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	431a      	orrs	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	e007      	b.n	8000c6c <ADC_ITConfig+0x4c>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	ea6f 0303 	mvn.w	r3, r3
 8000c66:	401a      	ands	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	605a      	str	r2, [r3, #4]
  }
}
 8000c6c:	f107 0714 	add.w	r7, r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	78fb      	ldrb	r3, [r7, #3]
 8000c90:	4013      	ands	r3, r2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <ADC_GetFlagStatus+0x26>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000c96:	f04f 0301 	mov.w	r3, #1
 8000c9a:	73fb      	strb	r3, [r7, #15]
 8000c9c:	e002      	b.n	8000ca4 <ADC_GetFlagStatus+0x2c>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000c9e:	f04f 0300 	mov.w	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f107 0714 	add.w	r7, r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	ea6f 0203 	mvn.w	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	601a      	str	r2, [r3, #0]
}
 8000cca:	f107 070c 	add.w	r7, r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 8000ce6:	f04f 0300 	mov.w	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 8000cf2:	887b      	ldrh	r3, [r7, #2]
 8000cf4:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	887b      	ldrh	r3, [r7, #2]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	f04f 0101 	mov.w	r1, #1
 8000d08:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d006      	beq.n	8000d2a <ADC_GetITStatus+0x56>
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <ADC_GetITStatus+0x56>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8000d22:	f04f 0301 	mov.w	r3, #1
 8000d26:	75fb      	strb	r3, [r7, #23]
 8000d28:	e002      	b.n	8000d30 <ADC_GetITStatus+0x5c>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 8000d2a:	f04f 0300 	mov.w	r3, #0
 8000d2e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 8000d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	f107 071c 	add.w	r7, r7, #28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8000d52:	887b      	ldrh	r3, [r7, #2]
 8000d54:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	ea6f 0203 	mvn.w	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	601a      	str	r2, [r3, #0]
}                    
 8000d66:	f107 0714 	add.w	r7, r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000d7e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d10c      	bne.n	8000da0 <CAN_DeInit+0x30>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8000d86:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000d8a:	f04f 0101 	mov.w	r1, #1
 8000d8e:	f008 fa53 	bl	8009238 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8000d92:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000d96:	f04f 0100 	mov.w	r1, #0
 8000d9a:	f008 fa4d 	bl	8009238 <RCC_APB1PeriphResetCmd>
 8000d9e:	e00b      	b.n	8000db8 <CAN_DeInit+0x48>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 8000da0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000da4:	f04f 0101 	mov.w	r1, #1
 8000da8:	f008 fa46 	bl	8009238 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8000dac:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000db0:	f04f 0100 	mov.w	r1, #0
 8000db4:	f008 fa40 	bl	8009238 <RCC_APB1PeriphResetCmd>
  }
}
 8000db8:	f107 0708 	add.w	r7, r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 8000dca:	f04f 0300 	mov.w	r3, #0
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f023 0202 	bic.w	r2, r3, #2
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f043 0201 	orr.w	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000dee:	e003      	b.n	8000df8 <CAN_Init+0x38>
  {
    wait_ack++;
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	f103 0301 	add.w	r3, r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d104      	bne.n	8000e0e <CAN_Init+0x4e>
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d1f0      	bne.n	8000df0 <CAN_Init+0x30>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d103      	bne.n	8000e22 <CAN_Init+0x62>
  {
    InitStatus = CAN_InitStatus_Failed;
 8000e1a:	f04f 0300 	mov.w	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e0a7      	b.n	8000f72 <CAN_Init+0x1b2>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	799b      	ldrb	r3, [r3, #6]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d106      	bne.n	8000e38 <CAN_Init+0x78>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	e005      	b.n	8000e44 <CAN_Init+0x84>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	79db      	ldrb	r3, [r3, #7]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d106      	bne.n	8000e5a <CAN_Init+0x9a>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	e005      	b.n	8000e66 <CAN_Init+0xa6>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	7a1b      	ldrb	r3, [r3, #8]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d106      	bne.n	8000e7c <CAN_Init+0xbc>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f043 0220 	orr.w	r2, r3, #32
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	e005      	b.n	8000e88 <CAN_Init+0xc8>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f023 0220 	bic.w	r2, r3, #32
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	7a5b      	ldrb	r3, [r3, #9]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d106      	bne.n	8000e9e <CAN_Init+0xde>
    {
      CANx->MCR |= CAN_MCR_NART;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f043 0210 	orr.w	r2, r3, #16
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e005      	b.n	8000eaa <CAN_Init+0xea>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f023 0210 	bic.w	r2, r3, #16
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	7a9b      	ldrb	r3, [r3, #10]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d106      	bne.n	8000ec0 <CAN_Init+0x100>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f043 0208 	orr.w	r2, r3, #8
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	e005      	b.n	8000ecc <CAN_Init+0x10c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f023 0208 	bic.w	r2, r3, #8
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	7adb      	ldrb	r3, [r3, #11]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d106      	bne.n	8000ee2 <CAN_Init+0x122>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f043 0204 	orr.w	r2, r3, #4
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	e005      	b.n	8000eee <CAN_Init+0x12e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f023 0204 	bic.w	r2, r3, #4
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	789b      	ldrb	r3, [r3, #2]
 8000ef2:	ea4f 7283 	mov.w	r2, r3, lsl #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	78db      	ldrb	r3, [r3, #3]
 8000efa:	ea4f 6303 	mov.w	r3, r3, lsl #24
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000efe:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	791b      	ldrb	r3, [r3, #4]
 8000f04:	ea4f 4303 	mov.w	r3, r3, lsl #16
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8000f08:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	795b      	ldrb	r3, [r3, #5]
 8000f0e:	ea4f 5303 	mov.w	r3, r3, lsl #20
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000f12:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000f1c:	431a      	orrs	r2, r3
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	61da      	str	r2, [r3, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f023 0201 	bic.w	r2, r3, #1
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000f34:	e003      	b.n	8000f3e <CAN_Init+0x17e>
   {
     wait_ack++;
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	f103 0301 	add.w	r3, r3, #1
 8000f3c:	60bb      	str	r3, [r7, #8]
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <CAN_Init+0x196>
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d1ef      	bne.n	8000f36 <CAN_Init+0x176>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <CAN_Init+0x1ac>
    {
      InitStatus = CAN_InitStatus_Failed;
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]
 8000f6a:	e002      	b.n	8000f72 <CAN_Init+0x1b2>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8000f6c:	f04f 0301 	mov.w	r3, #1
 8000f70:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	f107 0714 	add.w	r7, r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7a9b      	ldrb	r3, [r3, #10]
 8000f92:	f04f 0201 	mov.w	r2, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000f9c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000fa0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000fa4:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8000fa8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000fac:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8000fb0:	f042 0201 	orr.w	r2, r2, #1
 8000fb4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8000fb8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000fbc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000fc0:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8000fc4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000fc8:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	ea6f 0202 	mvn.w	r2, r2
 8000fd2:	400a      	ands	r2, r1
 8000fd4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7b1b      	ldrb	r3, [r3, #12]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d133      	bne.n	8001048 <CAN_FilterInit+0xc8>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8000fe0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000fe4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000fe8:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8000fec:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000ff0:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	ea6f 0202 	mvn.w	r2, r2
 8000ffa:	400a      	ands	r2, r1
 8000ffc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8001000:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001004:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	88c9      	ldrh	r1, [r1, #6]
 8001010:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	8849      	ldrh	r1, [r1, #2]
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8001018:	4301      	orrs	r1, r0
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800101a:	f102 0248 	add.w	r2, r2, #72	; 0x48
 800101e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8001022:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8001026:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	8889      	ldrh	r1, [r1, #4]
 8001032:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	8809      	ldrh	r1, [r1, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800103a:	4301      	orrs	r1, r0
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800103c:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001040:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001044:	18d3      	adds	r3, r2, r3
 8001046:	6059      	str	r1, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7b1b      	ldrb	r3, [r3, #12]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d131      	bne.n	80010b4 <CAN_FilterInit+0x134>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8001050:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001054:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001058:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800105c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001060:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	430a      	orrs	r2, r1
 8001068:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800106c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001070:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	8809      	ldrh	r1, [r1, #0]
 800107c:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	8849      	ldrh	r1, [r1, #2]
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8001084:	4301      	orrs	r1, r0
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8001086:	f102 0248 	add.w	r2, r2, #72	; 0x48
 800108a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800108e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8001092:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	8889      	ldrh	r1, [r1, #4]
 800109e:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	88c9      	ldrh	r1, [r1, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80010a6:	4301      	orrs	r1, r0
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80010a8:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80010ac:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80010b0:	18d3      	adds	r3, r2, r3
 80010b2:	6059      	str	r1, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7adb      	ldrb	r3, [r3, #11]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d110      	bne.n	80010de <CAN_FilterInit+0x15e>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 80010bc:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80010c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80010c4:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80010c8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80010cc:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	ea6f 0202 	mvn.w	r2, r2
 80010d6:	400a      	ands	r2, r1
 80010d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80010dc:	e00d      	b.n	80010fa <CAN_FilterInit+0x17a>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 80010de:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80010e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80010e6:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80010ea:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80010ee:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	891b      	ldrh	r3, [r3, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10f      	bne.n	8001122 <CAN_FilterInit+0x1a2>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8001102:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001106:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800110a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800110e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001112:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	ea6f 0202 	mvn.w	r2, r2
 800111c:	400a      	ands	r2, r1
 800111e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	891b      	ldrh	r3, [r3, #8]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d10d      	bne.n	8001146 <CAN_FilterInit+0x1c6>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 800112a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800112e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001132:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8001136:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800113a:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	430a      	orrs	r2, r1
 8001142:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7b5b      	ldrb	r3, [r3, #13]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d10d      	bne.n	800116a <CAN_FilterInit+0x1ea>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 800114e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001152:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001156:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800115a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800115e:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	430a      	orrs	r2, r1
 8001166:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 800116a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800116e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001172:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8001176:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800117a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800117e:	f022 0201 	bic.w	r2, r2, #1
 8001182:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001186:	f107 0714 	add.w	r7, r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f04f 0203 	mov.w	r2, #3
 80011de:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f04f 0202 	mov.w	r2, #2
 80011e6:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f04f 0201 	mov.w	r2, #1
 80011ee:	801a      	strh	r2, [r3, #0]
}
 80011f0:	f107 070c 	add.w	r7, r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop

080011fc <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8001206:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800120a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800120e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8001212:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001216:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 8001222:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001226:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800122a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800122e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001232:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8001236:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800123a:	f022 020e 	bic.w	r2, r2, #14
 800123e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 8001242:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001246:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800124a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800124e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001252:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8001256:	79fa      	ldrb	r2, [r7, #7]
 8001258:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800125c:	430a      	orrs	r2, r1
 800125e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8001262:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001266:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800126a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800126e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001272:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800127e:	f107 070c 	add.w	r7, r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d006      	beq.n	80012a8 <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e005      	b.n	80012b4 <CAN_DBGFreeze+0x2c>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	601a      	str	r2, [r3, #0]
  }
}
 80012b4:	f107 070c 	add.w	r7, r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop

080012c0 <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80012cc:	78fb      	ldrb	r3, [r7, #3]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d01e      	beq.n	8001310 <CAN_TTComModeCmd+0x50>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80012e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80012f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001304:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 800130e:	e01d      	b.n	800134c <CAN_TTComModeCmd+0x8c>
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	601a      	str	r2, [r3, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8001322:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8001332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001342:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  }
}
 800134c:	f107 070c 	add.w	r7, r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop

08001358 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 8001362:	f04f 0300 	mov.w	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <CAN_Transmit+0x24>
  {
    transmit_mailbox = 0;
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	e016      	b.n	80013aa <CAN_Transmit+0x52>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <CAN_Transmit+0x38>
  {
    transmit_mailbox = 1;
 8001388:	f04f 0301 	mov.w	r3, #1
 800138c:	73fb      	strb	r3, [r7, #15]
 800138e:	e00c      	b.n	80013aa <CAN_Transmit+0x52>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <CAN_Transmit+0x4c>
  {
    transmit_mailbox = 2;
 800139c:	f04f 0302 	mov.w	r3, #2
 80013a0:	73fb      	strb	r3, [r7, #15]
 80013a2:	e002      	b.n	80013aa <CAN_Transmit+0x52>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 80013a4:	f04f 0304 	mov.w	r3, #4
 80013a8:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	f000 80ba 	beq.w	8001526 <CAN_Transmit+0x1ce>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	f102 0218 	add.w	r2, r2, #24
 80013bc:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80013c0:	188a      	adds	r2, r1, r2
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	f002 0201 	and.w	r2, r2, #1
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	f103 0318 	add.w	r3, r3, #24
 80013ce:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80013d2:	18cb      	adds	r3, r1, r3
 80013d4:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	7a1b      	ldrb	r3, [r3, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d118      	bne.n	8001410 <CAN_Transmit+0xb8>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	f102 0218 	add.w	r2, r2, #24
 80013e8:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80013ec:	188a      	adds	r2, r1, r2
 80013ee:	6811      	ldr	r1, [r2, #0]
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	ea4f 5042 	mov.w	r0, r2, lsl #21
                                                  TxMessage->RTR);
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	7a52      	ldrb	r2, [r2, #9]
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
    if (TxMessage->IDE == CAN_Id_Standard)
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 80013fc:	4302      	orrs	r2, r0
 80013fe:	430a      	orrs	r2, r1
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	f103 0318 	add.w	r3, r3, #24
 8001406:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800140a:	18cb      	adds	r3, r1, r3
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	e01a      	b.n	8001446 <CAN_Transmit+0xee>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	f102 0218 	add.w	r2, r2, #24
 800141a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800141e:	188a      	adds	r2, r1, r2
 8001420:	6811      	ldr	r1, [r2, #0]
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	6852      	ldr	r2, [r2, #4]
 8001426:	ea4f 00c2 	mov.w	r0, r2, lsl #3
                                                  TxMessage->IDE | \
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	7a12      	ldrb	r2, [r2, #8]
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 800142e:	4310      	orrs	r0, r2
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	7a52      	ldrb	r2, [r2, #9]
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
                                                  TxMessage->IDE | \
 8001434:	4302      	orrs	r2, r0
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8001436:	430a      	orrs	r2, r1
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	f103 0318 	add.w	r3, r3, #24
 800143e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001442:	18cb      	adds	r3, r1, r3
 8001444:	601a      	str	r2, [r3, #0]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	7a9b      	ldrb	r3, [r3, #10]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	b2da      	uxtb	r2, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	f102 0218 	add.w	r2, r2, #24
 800145e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001462:	188a      	adds	r2, r1, r2
 8001464:	6852      	ldr	r2, [r2, #4]
 8001466:	f022 020f 	bic.w	r2, r2, #15
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f103 0318 	add.w	r3, r3, #24
 8001470:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001474:	18cb      	adds	r3, r1, r3
 8001476:	605a      	str	r2, [r3, #4]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	f102 0218 	add.w	r2, r2, #24
 8001482:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001486:	188a      	adds	r2, r1, r2
 8001488:	6851      	ldr	r1, [r2, #4]
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	7a92      	ldrb	r2, [r2, #10]
 800148e:	430a      	orrs	r2, r1
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	f103 0318 	add.w	r3, r3, #24
 8001496:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800149a:	18cb      	adds	r3, r1, r3
 800149c:	605a      	str	r2, [r3, #4]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	7b92      	ldrb	r2, [r2, #14]
 80014a4:	ea4f 6102 	mov.w	r1, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	7b52      	ldrb	r2, [r2, #13]
 80014ac:	ea4f 4202 	mov.w	r2, r2, lsl #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80014b0:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	7b12      	ldrb	r2, [r2, #12]
 80014b6:	ea4f 2202 	mov.w	r2, r2, lsl #8
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80014ba:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	7ad2      	ldrb	r2, [r2, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80014c0:	430a      	orrs	r2, r1
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80014c8:	18cb      	adds	r3, r1, r3
 80014ca:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80014ce:	601a      	str	r2, [r3, #0]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	7c92      	ldrb	r2, [r2, #18]
 80014d6:	ea4f 6102 	mov.w	r1, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	7c52      	ldrb	r2, [r2, #17]
 80014de:	ea4f 4202 	mov.w	r2, r2, lsl #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80014e2:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	7c12      	ldrb	r2, [r2, #16]
 80014e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80014ec:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	7bd2      	ldrb	r2, [r2, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80014f2:	430a      	orrs	r2, r1
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80014fa:	18cb      	adds	r3, r1, r3
 80014fc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001500:	605a      	str	r2, [r3, #4]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	f102 0218 	add.w	r2, r2, #24
 800150c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001510:	188a      	adds	r2, r1, r2
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	f042 0201 	orr.w	r2, r2, #1
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	f103 0318 	add.w	r3, r3, #24
 800151e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001522:	18cb      	adds	r3, r1, r3
 8001524:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 8001526:	7bfb      	ldrb	r3, [r7, #15]
}
 8001528:	4618      	mov	r0, r3
 800152a:	f107 0714 	add.w	r7, r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d00c      	beq.n	8001566 <CAN_TransmitStatus+0x32>
 800154c:	2b02      	cmp	r3, #2
 800154e:	d013      	beq.n	8001578 <CAN_TransmitStatus+0x44>
 8001550:	2b00      	cmp	r3, #0
 8001552:	d11a      	bne.n	800158a <CAN_TransmitStatus+0x56>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	f04f 0303 	mov.w	r3, #3
 800155c:	f2c0 4300 	movt	r3, #1024	; 0x400
 8001560:	4013      	ands	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]
      break;
 8001564:	e015      	b.n	8001592 <CAN_TransmitStatus+0x5e>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800156e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001572:	4013      	ands	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
      break;
 8001576:	e00c      	b.n	8001592 <CAN_TransmitStatus+0x5e>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	f04f 0300 	mov.w	r3, #0
 8001580:	f2c1 0303 	movt	r3, #4099	; 0x1003
 8001584:	4013      	ands	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]
      break;
 8001588:	e003      	b.n	8001592 <CAN_TransmitStatus+0x5e>
    default:
      state = CAN_TxStatus_Failed;
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
      break;
 8001590:	bf00      	nop
  }
  switch (state)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001598:	f6c0 0200 	movt	r2, #2048	; 0x800
 800159c:	4293      	cmp	r3, r2
 800159e:	d02f      	beq.n	8001600 <CAN_TransmitStatus+0xcc>
 80015a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a4:	f6c0 0200 	movt	r2, #2048	; 0x800
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d80e      	bhi.n	80015ca <CAN_TransmitStatus+0x96>
 80015ac:	f04f 0201 	mov.w	r2, #1
 80015b0:	f2c0 4200 	movt	r2, #1024	; 0x400
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d01f      	beq.n	80015f8 <CAN_TransmitStatus+0xc4>
 80015b8:	f04f 0203 	mov.w	r2, #3
 80015bc:	f2c0 4200 	movt	r2, #1024	; 0x400
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d025      	beq.n	8001610 <CAN_TransmitStatus+0xdc>
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d013      	beq.n	80015f0 <CAN_TransmitStatus+0xbc>
 80015c8:	e02e      	b.n	8001628 <CAN_TransmitStatus+0xf4>
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	f2c1 0201 	movt	r2, #4097	; 0x1001
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d018      	beq.n	8001608 <CAN_TransmitStatus+0xd4>
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	f2c1 0203 	movt	r2, #4099	; 0x1003
 80015de:	4293      	cmp	r3, r2
 80015e0:	d01e      	beq.n	8001620 <CAN_TransmitStatus+0xec>
 80015e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80015e6:	f6c0 0200 	movt	r2, #2048	; 0x800
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d014      	beq.n	8001618 <CAN_TransmitStatus+0xe4>
 80015ee:	e01b      	b.n	8001628 <CAN_TransmitStatus+0xf4>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 80015f0:	f04f 0302 	mov.w	r3, #2
 80015f4:	60fb      	str	r3, [r7, #12]
      break;
 80015f6:	e01b      	b.n	8001630 <CAN_TransmitStatus+0xfc>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
      break;
 80015fe:	e017      	b.n	8001630 <CAN_TransmitStatus+0xfc>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
      break;
 8001606:	e013      	b.n	8001630 <CAN_TransmitStatus+0xfc>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
      break;
 800160e:	e00f      	b.n	8001630 <CAN_TransmitStatus+0xfc>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 8001610:	f04f 0301 	mov.w	r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
      break;
 8001616:	e00b      	b.n	8001630 <CAN_TransmitStatus+0xfc>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 8001618:	f04f 0301 	mov.w	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
      break;
 800161e:	e007      	b.n	8001630 <CAN_TransmitStatus+0xfc>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 8001620:	f04f 0301 	mov.w	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
      break;
 8001626:	e003      	b.n	8001630 <CAN_TransmitStatus+0xfc>
    default: state = CAN_TxStatus_Failed;
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
      break;
 800162e:	bf00      	nop
  }
  return (uint8_t) state;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	b2db      	uxtb	r3, r3
}
 8001634:	4618      	mov	r0, r3
 8001636:	f107 0714 	add.w	r7, r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d00a      	beq.n	8001668 <CAN_CancelTransmit+0x28>
 8001652:	2b02      	cmp	r3, #2
 8001654:	d00f      	beq.n	8001676 <CAN_CancelTransmit+0x36>
 8001656:	2b00      	cmp	r3, #0
 8001658:	d114      	bne.n	8001684 <CAN_CancelTransmit+0x44>
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	609a      	str	r2, [r3, #8]
      break;
 8001666:	e00e      	b.n	8001686 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	609a      	str	r2, [r3, #8]
      break;
 8001674:	e007      	b.n	8001686 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	609a      	str	r2, [r3, #8]
      break;
 8001682:	e000      	b.n	8001686 <CAN_CancelTransmit+0x46>
    default:
      break;
 8001684:	bf00      	nop
  }
}
 8001686:	f107 070c 	add.w	r7, r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	460b      	mov	r3, r1
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 800169e:	7afb      	ldrb	r3, [r7, #11]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	f103 031b 	add.w	r3, r3, #27
 80016a6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80016aa:	18d3      	adds	r3, r2, r3
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7a1b      	ldrb	r3, [r3, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10c      	bne.n	80016dc <CAN_Receive+0x4c>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 80016c2:	7afb      	ldrb	r3, [r7, #11]
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	f103 031b 	add.w	r3, r3, #27
 80016ca:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80016ce:	18d3      	adds	r3, r2, r3
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	ea4f 5253 	mov.w	r2, r3, lsr #21
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e00b      	b.n	80016f4 <CAN_Receive+0x64>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 80016dc:	7afb      	ldrb	r3, [r7, #11]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	f103 031b 	add.w	r3, r3, #27
 80016e4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80016e8:	18d3      	adds	r3, r2, r3
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	f103 031b 	add.w	r3, r3, #27
 80016fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001700:	18d3      	adds	r3, r2, r3
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	b2da      	uxtb	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8001710:	7afb      	ldrb	r3, [r7, #11]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	f103 031b 	add.w	r3, r3, #27
 8001718:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800171c:	18d3      	adds	r3, r2, r3
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	b2da      	uxtb	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 800172c:	7afb      	ldrb	r3, [r7, #11]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	f103 031b 	add.w	r3, r3, #27
 8001734:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001738:	18d3      	adds	r3, r2, r3
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001740:	b2da      	uxtb	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8001746:	7afb      	ldrb	r3, [r7, #11]
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800174e:	18d3      	adds	r3, r2, r3
 8001750:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 800175c:	7afb      	ldrb	r3, [r7, #11]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001764:	18d3      	adds	r3, r2, r3
 8001766:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001770:	b2da      	uxtb	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8001776:	7afb      	ldrb	r3, [r7, #11]
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800177e:	18d3      	adds	r3, r2, r3
 8001780:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800178a:	b2da      	uxtb	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8001790:	7afb      	ldrb	r3, [r7, #11]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001798:	18d3      	adds	r3, r2, r3
 800179a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 80017aa:	7afb      	ldrb	r3, [r7, #11]
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80017b2:	18d3      	adds	r3, r2, r3
 80017b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 80017c0:	7afb      	ldrb	r3, [r7, #11]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80017c8:	18d3      	adds	r3, r2, r3
 80017ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 80017da:	7afb      	ldrb	r3, [r7, #11]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80017e2:	18d3      	adds	r3, r2, r3
 80017e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 80017f4:	7afb      	ldrb	r3, [r7, #11]
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80017fc:	18d3      	adds	r3, r2, r3
 80017fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8001808:	b2da      	uxtb	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 800180e:	7afb      	ldrb	r3, [r7, #11]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d106      	bne.n	8001822 <CAN_Receive+0x192>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f043 0220 	orr.w	r2, r3, #32
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	e005      	b.n	800182e <CAN_Receive+0x19e>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	f043 0220 	orr.w	r2, r3, #32
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	611a      	str	r2, [r3, #16]
  }
}
 800182e:	f107 0714 	add.w	r7, r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d106      	bne.n	8001858 <CAN_FIFORelease+0x20>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	f043 0220 	orr.w	r2, r3, #32
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	e005      	b.n	8001864 <CAN_FIFORelease+0x2c>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	f043 0220 	orr.w	r2, r3, #32
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	611a      	str	r2, [r3, #16]
  }
}
 8001864:	f107 070c 	add.w	r7, r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop

08001870 <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d106      	bne.n	8001896 <CAN_MessagePending+0x26>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	73fb      	strb	r3, [r7, #15]
 8001894:	e00c      	b.n	80018b0 <CAN_MessagePending+0x40>
  }
  else if (FIFONumber == CAN_FIFO1)
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d106      	bne.n	80018aa <CAN_MessagePending+0x3a>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	e002      	b.n	80018b0 <CAN_MessagePending+0x40>
  }
  else
  {
    message_pending = 0;
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	f107 0714 	add.w	r7, r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop

080018c0 <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	70fb      	strb	r3, [r7, #3]
  uint8_t status = CAN_ModeStatus_Failed;
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
 80018d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d123      	bne.n	8001926 <CAN_OperatingModeRequest+0x66>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 0303 	bic.w	r3, r3, #3
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80018ee:	e003      	b.n	80018f8 <CAN_OperatingModeRequest+0x38>
    {
      timeout--;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80018f6:	60bb      	str	r3, [r7, #8]
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b01      	cmp	r3, #1
 8001902:	d002      	beq.n	800190a <CAN_OperatingModeRequest+0x4a>
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f2      	bne.n	80018f0 <CAN_OperatingModeRequest+0x30>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d003      	beq.n	800191e <CAN_OperatingModeRequest+0x5e>
    {
      status = CAN_ModeStatus_Failed;
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e052      	b.n	80019c4 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 800191e:	f04f 0301 	mov.w	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
 8001924:	e04e      	b.n	80019c4 <CAN_OperatingModeRequest+0x104>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d121      	bne.n	8001970 <CAN_OperatingModeRequest+0xb0>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 0203 	bic.w	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8001938:	e003      	b.n	8001942 <CAN_OperatingModeRequest+0x82>
    {
      timeout--;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8001940:	60bb      	str	r3, [r7, #8]
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <CAN_OperatingModeRequest+0x94>
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f2      	bne.n	800193a <CAN_OperatingModeRequest+0x7a>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <CAN_OperatingModeRequest+0xa8>
    {
      status = CAN_ModeStatus_Failed;
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	e02d      	b.n	80019c4 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8001968:	f04f 0301 	mov.w	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
 800196e:	e029      	b.n	80019c4 <CAN_OperatingModeRequest+0x104>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d123      	bne.n	80019be <CAN_OperatingModeRequest+0xfe>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 0303 	bic.w	r3, r3, #3
 800197e:	f043 0202 	orr.w	r2, r3, #2
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8001986:	e003      	b.n	8001990 <CAN_OperatingModeRequest+0xd0>
    {
      timeout--;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800198e:	60bb      	str	r3, [r7, #8]
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d002      	beq.n	80019a2 <CAN_OperatingModeRequest+0xe2>
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f2      	bne.n	8001988 <CAN_OperatingModeRequest+0xc8>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d003      	beq.n	80019b6 <CAN_OperatingModeRequest+0xf6>
    {
      status = CAN_ModeStatus_Failed;
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e006      	b.n	80019c4 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 80019b6:	f04f 0301 	mov.w	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	e002      	b.n	80019c4 <CAN_OperatingModeRequest+0x104>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	73fb      	strb	r3, [r7, #15]
  }

  return  (uint8_t) status;
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	f107 0714 	add.w	r7, r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop

080019d4 <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 0303 	bic.w	r3, r3, #3
 80019ea:	f043 0202 	orr.w	r2, r3, #2
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d102      	bne.n	8001a04 <CAN_Sleep+0x30>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
 80019fe:	f04f 0301 	mov.w	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	f107 0714 	add.w	r7, r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop

08001a14 <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
 8001a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a20:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 0202 	bic.w	r2, r3, #2
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8001a34:	e003      	b.n	8001a3e <CAN_WakeUp+0x2a>
  {
   wait_slak--;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8001a3c:	60fb      	str	r3, [r7, #12]
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <CAN_WakeUp+0x3c>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f2      	bne.n	8001a36 <CAN_WakeUp+0x22>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <CAN_WakeUp+0x4e>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
 8001a5c:	f04f 0301 	mov.w	r3, #1
 8001a60:	72fb      	strb	r3, [r7, #11]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 8001a62:	7afb      	ldrb	r3, [r7, #11]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	f107 0714 	add.w	r7, r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a88:	73fb      	strb	r3, [r7, #15]
  
  /* Return the error code*/
  return errorcode;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f107 0714 	add.w	r7, r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8001aae:	73fb      	strb	r3, [r7, #15]
  
  /* Return the Receive Error Counter*/
  return counter;
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f107 0714 	add.w	r7, r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop

08001ac0 <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001ad6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8001ada:	73fb      	strb	r3, [r7, #15]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f107 0714 	add.w	r7, r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop

08001aec <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	4613      	mov	r3, r2
 8001af8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	615a      	str	r2, [r3, #20]
 8001b0c:	e007      	b.n	8001b1e <CAN_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	ea6f 0303 	mvn.w	r3, r3
 8001b18:	401a      	ands	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	615a      	str	r2, [r3, #20]
  }
}
 8001b1e:	f107 0714 	add.w	r7, r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d011      	beq.n	8001b66 <CAN_GetFlagStatus+0x3e>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699a      	ldr	r2, [r3, #24]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <CAN_GetFlagStatus+0x36>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8001b56:	f04f 0301 	mov.w	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e059      	b.n	8001c12 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	73fb      	strb	r3, [r7, #15]
 8001b64:	e055      	b.n	8001c12 <CAN_GetFlagStatus+0xea>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d011      	beq.n	8001b94 <CAN_GetFlagStatus+0x6c>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	4013      	ands	r3, r2
 8001b78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b7c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <CAN_GetFlagStatus+0x64>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8001b84:	f04f 0301 	mov.w	r3, #1
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	e042      	b.n	8001c12 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]
 8001b92:	e03e      	b.n	8001c12 <CAN_GetFlagStatus+0xea>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d011      	beq.n	8001bc2 <CAN_GetFlagStatus+0x9a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001baa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <CAN_GetFlagStatus+0x92>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8001bb2:	f04f 0301 	mov.w	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	e02b      	b.n	8001c12 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	e027      	b.n	8001c12 <CAN_GetFlagStatus+0xea>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d011      	beq.n	8001bf0 <CAN_GetFlagStatus+0xc8>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bd8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <CAN_GetFlagStatus+0xc0>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8001be0:	f04f 0301 	mov.w	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
 8001be6:	e014      	b.n	8001c12 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	73fb      	strb	r3, [r7, #15]
 8001bee:	e010      	b.n	8001c12 <CAN_GetFlagStatus+0xea>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bfc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <CAN_GetFlagStatus+0xe4>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8001c04:	f04f 0301 	mov.w	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	e002      	b.n	8001c12 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	f107 0714 	add.w	r7, r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	f04f 0370 	mov.w	r3, #112	; 0x70
 8001c36:	f2c3 03f0 	movt	r3, #12528	; 0x30f0
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d104      	bne.n	8001c48 <CAN_ClearFlag+0x28>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
 8001c46:	e023      	b.n	8001c90 <CAN_ClearFlag+0x70>
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001c52:	60fb      	str	r3, [r7, #12]

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <CAN_ClearFlag+0x46>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	e014      	b.n	8001c90 <CAN_ClearFlag+0x70>
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <CAN_ClearFlag+0x58>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	611a      	str	r2, [r3, #16]
 8001c76:	e00b      	b.n	8001c90 <CAN_ClearFlag+0x70>
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <CAN_ClearFlag+0x6a>
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	e002      	b.n	8001c90 <CAN_ClearFlag+0x70>
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8001c90:	f107 0714 	add.w	r7, r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop

08001c9c <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695a      	ldr	r2, [r3, #20]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80c4 	beq.w	8001e42 <CAN_GetITStatus+0x1a6>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b40      	cmp	r3, #64	; 0x40
 8001cbe:	d06b      	beq.n	8001d98 <CAN_GetITStatus+0xfc>
 8001cc0:	2b40      	cmp	r3, #64	; 0x40
 8001cc2:	d80f      	bhi.n	8001ce4 <CAN_GetITStatus+0x48>
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d03f      	beq.n	8001d48 <CAN_GetITStatus+0xac>
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d804      	bhi.n	8001cd6 <CAN_GetITStatus+0x3a>
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d025      	beq.n	8001d1c <CAN_GetITStatus+0x80>
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d02f      	beq.n	8001d34 <CAN_GetITStatus+0x98>
 8001cd4:	e0b1      	b.n	8001e3a <CAN_GetITStatus+0x19e>
 8001cd6:	2b10      	cmp	r3, #16
 8001cd8:	d04a      	beq.n	8001d70 <CAN_GetITStatus+0xd4>
 8001cda:	2b20      	cmp	r3, #32
 8001cdc:	d052      	beq.n	8001d84 <CAN_GetITStatus+0xe8>
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d03c      	beq.n	8001d5c <CAN_GetITStatus+0xc0>
 8001ce2:	e0aa      	b.n	8001e3a <CAN_GetITStatus+0x19e>
 8001ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ce8:	f000 8092 	beq.w	8001e10 <CAN_GetITStatus+0x174>
 8001cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cf0:	d809      	bhi.n	8001d06 <CAN_GetITStatus+0x6a>
 8001cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cf6:	d077      	beq.n	8001de8 <CAN_GetITStatus+0x14c>
 8001cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cfc:	d07e      	beq.n	8001dfc <CAN_GetITStatus+0x160>
 8001cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d02:	d067      	beq.n	8001dd4 <CAN_GetITStatus+0x138>
 8001d04:	e099      	b.n	8001e3a <CAN_GetITStatus+0x19e>
 8001d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0a:	d04f      	beq.n	8001dac <CAN_GetITStatus+0x110>
 8001d0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d10:	d056      	beq.n	8001dc0 <CAN_GetITStatus+0x124>
 8001d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d16:	f000 8085 	beq.w	8001e24 <CAN_GetITStatus+0x188>
 8001d1a:	e08e      	b.n	8001e3a <CAN_GetITStatus+0x19e>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f240 1101 	movw	r1, #257	; 0x101
 8001d26:	f2c0 0101 	movt	r1, #1
 8001d2a:	f000 f911 	bl	8001f50 <CheckITStatus>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	73fb      	strb	r3, [r7, #15]
        break;
 8001d32:	e089      	b.n	8001e48 <CAN_GetITStatus+0x1ac>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f04f 0103 	mov.w	r1, #3
 8001d3e:	f000 f907 	bl	8001f50 <CheckITStatus>
 8001d42:	4603      	mov	r3, r0
 8001d44:	73fb      	strb	r3, [r7, #15]
        break;
 8001d46:	e07f      	b.n	8001e48 <CAN_GetITStatus+0x1ac>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f04f 0108 	mov.w	r1, #8
 8001d52:	f000 f8fd 	bl	8001f50 <CheckITStatus>
 8001d56:	4603      	mov	r3, r0
 8001d58:	73fb      	strb	r3, [r7, #15]
        break;
 8001d5a:	e075      	b.n	8001e48 <CAN_GetITStatus+0x1ac>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f04f 0110 	mov.w	r1, #16
 8001d66:	f000 f8f3 	bl	8001f50 <CheckITStatus>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	73fb      	strb	r3, [r7, #15]
        break;
 8001d6e:	e06b      	b.n	8001e48 <CAN_GetITStatus+0x1ac>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f04f 0103 	mov.w	r1, #3
 8001d7a:	f000 f8e9 	bl	8001f50 <CheckITStatus>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	73fb      	strb	r3, [r7, #15]
        break;
 8001d82:	e061      	b.n	8001e48 <CAN_GetITStatus+0x1ac>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f04f 0108 	mov.w	r1, #8
 8001d8e:	f000 f8df 	bl	8001f50 <CheckITStatus>
 8001d92:	4603      	mov	r3, r0
 8001d94:	73fb      	strb	r3, [r7, #15]
        break;
 8001d96:	e057      	b.n	8001e48 <CAN_GetITStatus+0x1ac>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f04f 0110 	mov.w	r1, #16
 8001da2:	f000 f8d5 	bl	8001f50 <CheckITStatus>
 8001da6:	4603      	mov	r3, r0
 8001da8:	73fb      	strb	r3, [r7, #15]
        break;
 8001daa:	e04d      	b.n	8001e48 <CAN_GetITStatus+0x1ac>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f04f 0108 	mov.w	r1, #8
 8001db6:	f000 f8cb 	bl	8001f50 <CheckITStatus>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	73fb      	strb	r3, [r7, #15]
        break;
 8001dbe:	e043      	b.n	8001e48 <CAN_GetITStatus+0x1ac>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f04f 0110 	mov.w	r1, #16
 8001dca:	f000 f8c1 	bl	8001f50 <CheckITStatus>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	73fb      	strb	r3, [r7, #15]
        break;
 8001dd2:	e039      	b.n	8001e48 <CAN_GetITStatus+0x1ac>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f04f 0101 	mov.w	r1, #1
 8001dde:	f000 f8b7 	bl	8001f50 <CheckITStatus>
 8001de2:	4603      	mov	r3, r0
 8001de4:	73fb      	strb	r3, [r7, #15]
        break;
 8001de6:	e02f      	b.n	8001e48 <CAN_GetITStatus+0x1ac>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f04f 0102 	mov.w	r1, #2
 8001df2:	f000 f8ad 	bl	8001f50 <CheckITStatus>
 8001df6:	4603      	mov	r3, r0
 8001df8:	73fb      	strb	r3, [r7, #15]
        break;
 8001dfa:	e025      	b.n	8001e48 <CAN_GetITStatus+0x1ac>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f04f 0104 	mov.w	r1, #4
 8001e06:	f000 f8a3 	bl	8001f50 <CheckITStatus>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	73fb      	strb	r3, [r7, #15]
        break;
 8001e0e:	e01b      	b.n	8001e48 <CAN_GetITStatus+0x1ac>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f04f 0170 	mov.w	r1, #112	; 0x70
 8001e1a:	f000 f899 	bl	8001f50 <CheckITStatus>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	73fb      	strb	r3, [r7, #15]
        break;
 8001e22:	e011      	b.n	8001e48 <CAN_GetITStatus+0x1ac>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f04f 0104 	mov.w	r1, #4
 8001e2e:	f000 f88f 	bl	8001f50 <CheckITStatus>
 8001e32:	4603      	mov	r3, r0
 8001e34:	73fb      	strb	r3, [r7, #15]
        break;
 8001e36:	bf00      	nop
 8001e38:	e006      	b.n	8001e48 <CAN_GetITStatus+0x1ac>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]
        break;
 8001e40:	e002      	b.n	8001e48 <CAN_GetITStatus+0x1ac>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f107 0710 	add.w	r7, r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e64:	d04c      	beq.n	8001f00 <CAN_ClearITPendingBit+0xac>
 8001e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e6a:	d80d      	bhi.n	8001e88 <CAN_ClearITPendingBit+0x34>
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d02e      	beq.n	8001ece <CAN_ClearITPendingBit+0x7a>
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d804      	bhi.n	8001e7e <CAN_ClearITPendingBit+0x2a>
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d01e      	beq.n	8001eb6 <CAN_ClearITPendingBit+0x62>
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d023      	beq.n	8001ec4 <CAN_ClearITPendingBit+0x70>
 8001e7c:	e061      	b.n	8001f42 <CAN_ClearITPendingBit+0xee>
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	d02a      	beq.n	8001ed8 <CAN_ClearITPendingBit+0x84>
 8001e82:	2b40      	cmp	r3, #64	; 0x40
 8001e84:	d02d      	beq.n	8001ee2 <CAN_ClearITPendingBit+0x8e>
 8001e86:	e05c      	b.n	8001f42 <CAN_ClearITPendingBit+0xee>
 8001e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e8c:	d047      	beq.n	8001f1e <CAN_ClearITPendingBit+0xca>
 8001e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e92:	d806      	bhi.n	8001ea2 <CAN_ClearITPendingBit+0x4e>
 8001e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e98:	d037      	beq.n	8001f0a <CAN_ClearITPendingBit+0xb6>
 8001e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9e:	d039      	beq.n	8001f14 <CAN_ClearITPendingBit+0xc0>
 8001ea0:	e04f      	b.n	8001f42 <CAN_ClearITPendingBit+0xee>
 8001ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea6:	d021      	beq.n	8001eec <CAN_ClearITPendingBit+0x98>
 8001ea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001eac:	d023      	beq.n	8001ef6 <CAN_ClearITPendingBit+0xa2>
 8001eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eb2:	d03d      	beq.n	8001f30 <CAN_ClearITPendingBit+0xdc>
 8001eb4:	e045      	b.n	8001f42 <CAN_ClearITPendingBit+0xee>
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	f240 1301 	movw	r3, #257	; 0x101
 8001ebc:	f2c0 0301 	movt	r3, #1
 8001ec0:	6093      	str	r3, [r2, #8]
      break;
 8001ec2:	e03f      	b.n	8001f44 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f04f 0208 	mov.w	r2, #8
 8001eca:	60da      	str	r2, [r3, #12]
      break;
 8001ecc:	e03a      	b.n	8001f44 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f04f 0210 	mov.w	r2, #16
 8001ed4:	60da      	str	r2, [r3, #12]
      break;
 8001ed6:	e035      	b.n	8001f44 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f04f 0208 	mov.w	r2, #8
 8001ede:	611a      	str	r2, [r3, #16]
      break;
 8001ee0:	e030      	b.n	8001f44 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f04f 0210 	mov.w	r2, #16
 8001ee8:	611a      	str	r2, [r3, #16]
      break;
 8001eea:	e02b      	b.n	8001f44 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f04f 0208 	mov.w	r2, #8
 8001ef2:	605a      	str	r2, [r3, #4]
      break;
 8001ef4:	e026      	b.n	8001f44 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f04f 0210 	mov.w	r2, #16
 8001efc:	605a      	str	r2, [r3, #4]
      break;
 8001efe:	e021      	b.n	8001f44 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_EWG:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f04f 0204 	mov.w	r2, #4
 8001f06:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
      break;
 8001f08:	e01c      	b.n	8001f44 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_EPV:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f04f 0204 	mov.w	r2, #4
 8001f10:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
      break;
 8001f12:	e017      	b.n	8001f44 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_BOF:
      /* Clear CAN_MSR_ERRI (rc_w1) */ 
      CANx->MSR = CAN_MSR_ERRI; 
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f04f 0204 	mov.w	r2, #4
 8001f1a:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
 8001f1c:	e012      	b.n	8001f44 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f04f 0204 	mov.w	r2, #4
 8001f2c:	605a      	str	r2, [r3, #4]
      break;
 8001f2e:	e009      	b.n	8001f44 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f04f 0204 	mov.w	r2, #4
 8001f3e:	605a      	str	r2, [r3, #4]
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
 8001f40:	e000      	b.n	8001f44 <CAN_ClearITPendingBit+0xf0>
    default:
       break;
 8001f42:	bf00      	nop
   }
}
 8001f44:	f107 070c 	add.w	r7, r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop

08001f50 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 8001f5a:	f04f 0300 	mov.w	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <CheckITStatus+0x22>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8001f6a:	f04f 0301 	mov.w	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	e002      	b.n	8001f78 <CheckITStatus+0x28>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f107 0714 	add.w	r7, r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop

08001f88 <CRC_ResetDR>:
  * @brief  Resets the CRC Data register (DR).
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8001f8c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f94:	f04f 0201 	mov.w	r2, #1
 8001f98:	609a      	str	r2, [r3, #8]
}
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <CRC_CalcCRC>:
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  CRC->DR = Data;
 8001fa8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001fac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	601a      	str	r2, [r3, #0]
  
  return (CRC->DR);
 8001fb4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001fb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fbc:	681b      	ldr	r3, [r3, #0]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f107 070c 	add.w	r7, r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop

08001fcc <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t index = 0;
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < BufferLength; index++)
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	e00e      	b.n	8002002 <CRC_CalcBlockCRC+0x36>
  {
    CRC->DR = pBuffer[index];
 8001fe4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001fe8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	188a      	adds	r2, r1, r2
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	601a      	str	r2, [r3, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f103 0301 	add.w	r3, r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d3ec      	bcc.n	8001fe4 <CRC_CalcBlockCRC+0x18>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 800200a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800200e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	f107 0714 	add.w	r7, r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <CRC_GetCRC>:
  * @brief  Returns the current CRC value.
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return (CRC->DR);
 8002024:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002028:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800202c:	681b      	ldr	r3, [r3, #0]
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop

08002038 <CRC_SetIDRegister>:
  * @brief  Stores a 8-bit data in the Independent Data(ID) register.
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
  CRC->IDR = IDValue;
 8002042:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002046:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800204a:	79fa      	ldrb	r2, [r7, #7]
 800204c:	711a      	strb	r2, [r3, #4]
}
 800204e:	f107 070c 	add.w	r7, r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <CRC_GetIDRegister>:
  * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return (CRC->IDR);
 800205c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002060:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002064:	791b      	ldrb	r3, [r3, #4]
 8002066:	b2db      	uxtb	r3, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 8002074:	f04f 0010 	mov.w	r0, #16
 8002078:	f04f 0101 	mov.w	r1, #1
 800207c:	f007 f888 	bl	8009190 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 8002080:	f04f 0010 	mov.w	r0, #16
 8002084:	f04f 0100 	mov.w	r1, #0
 8002088:	f007 f882 	bl	8009190 <RCC_AHB2PeriphResetCmd>
}
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop

08002090 <CRYP_Init>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80020ae:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80020c0:	6811      	ldr	r1, [r2, #0]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	8852      	ldrh	r2, [r2, #2]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80020e0:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80020f2:	6811      	ldr	r1, [r2, #0]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	8892      	ldrh	r2, [r2, #4]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	885b      	ldrh	r3, [r3, #2]
 8002100:	2b20      	cmp	r3, #32
 8002102:	d00b      	beq.n	800211c <CRYP_Init+0x8c>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	885b      	ldrh	r3, [r3, #2]
  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8002108:	2b28      	cmp	r3, #40	; 0x28
 800210a:	d007      	beq.n	800211c <CRYP_Init+0x8c>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	885b      	ldrh	r3, [r3, #2]
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 8002110:	2b30      	cmp	r3, #48	; 0x30
 8002112:	d003      	beq.n	800211c <CRYP_Init+0x8c>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	885b      	ldrh	r3, [r3, #2]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 8002118:	2b38      	cmp	r3, #56	; 0x38
 800211a:	d118      	bne.n	800214e <CRYP_Init+0xbe>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002132:	601a      	str	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002144:	6811      	ldr	r1, [r2, #0]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	88d2      	ldrh	r2, [r2, #6]
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	f022 0204 	bic.w	r2, r2, #4
 8002164:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002176:	6811      	ldr	r1, [r2, #0]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	8812      	ldrh	r2, [r2, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	601a      	str	r2, [r3, #0]
}
 8002180:	f107 070c 	add.w	r7, r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop

0800218c <CRYP_StructInit>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	801a      	strh	r2, [r3, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	805a      	strh	r2, [r3, #2]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	80da      	strh	r2, [r3, #6]
}
 80021b4:	f107 070c 	add.w	r7, r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop

080021c0 <CRYP_KeyInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
  *         contains the configuration information for the CRYP Keys.
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6852      	ldr	r2, [r2, #4]
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6892      	ldr	r2, [r2, #8]
 80021f0:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68d2      	ldr	r2, [r2, #12]
 80021fe:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6912      	ldr	r2, [r2, #16]
 800220c:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6952      	ldr	r2, [r2, #20]
 800221a:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6992      	ldr	r2, [r2, #24]
 8002228:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	69d2      	ldr	r2, [r2, #28]
 8002236:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002238:	f107 070c 	add.w	r7, r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop

08002244 <CRYP_KeyStructInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	605a      	str	r2, [r3, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	60da      	str	r2, [r3, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	615a      	str	r2, [r3, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	619a      	str	r2, [r3, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	61da      	str	r2, [r3, #28]
}
 800228c:	f107 070c 	add.w	r7, r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop

08002298 <CRYP_IVInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6852      	ldr	r2, [r2, #4]
 80022ba:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6892      	ldr	r2, [r2, #8]
 80022c8:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68d2      	ldr	r2, [r2, #12]
 80022d6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80022d8:	f107 070c 	add.w	r7, r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop

080022e4 <CRYP_IVStructInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	605a      	str	r2, [r3, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	609a      	str	r2, [r3, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	60da      	str	r2, [r3, #12]
}
 800230c:	f107 070c 	add.w	r7, r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop

08002318 <CRYP_FIFOFlush>:
  * @note   The FIFOs must be flushed only when BUSY flag is reset.  
  * @param  None
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002332:	601a      	str	r2, [r3, #0]
}
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop

0800233c <CRYP_Cmd>:
  * @param  NewState: new state of the CRYP peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_Cmd(FunctionalState NewState)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00c      	beq.n	8002366 <CRYP_Cmd+0x2a>
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	e00b      	b.n	800237e <CRYP_Cmd+0x42>
  }
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800237c:	601a      	str	r2, [r3, #0]
  }
}
 800237e:	f107 070c 	add.w	r7, r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <CRYP_DataIn>:
  *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  CRYP->DR = Data;
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	609a      	str	r2, [r3, #8]
}
 800239c:	f107 070c 	add.w	r7, r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop

080023a8 <CRYP_DataOut>:
  * @brief  Returns the last data entered into the output FIFO.
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return CRYP->DOUT;
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80023b4:	68db      	ldr	r3, [r3, #12]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop

080023c0 <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t timeout = 0;
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]
  uint32_t ckeckmask = 0, bitstatus;    
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  ErrorStatus status = ERROR;
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	74fb      	strb	r3, [r7, #19]

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80023ec:	6912      	ldr	r2, [r2, #16]
 80023ee:	f022 0201 	bic.w	r2, r2, #1
 80023f2:	611a      	str	r2, [r3, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <CRYP_SaveContext+0x4e>
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 8002406:	f04f 0311 	mov.w	r3, #17
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	e002      	b.n	8002414 <CRYP_SaveContext+0x54>
  }
  else /* AES or DES */
  {
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 800240e:	f04f 0315 	mov.w	r3, #21
 8002412:	617b      	str	r3, [r7, #20]
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	4013      	ands	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]
    timeout++;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f103 0301 	add.w	r3, r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002432:	429a      	cmp	r2, r3
 8002434:	d002      	beq.n	800243c <CRYP_SaveContext+0x7c>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d1eb      	bne.n	8002414 <CRYP_SaveContext+0x54>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	4013      	ands	r3, r2
 800244a:	2b01      	cmp	r3, #1
 800244c:	d003      	beq.n	8002456 <CRYP_SaveContext+0x96>
  {
    status = ERROR;
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	74fb      	strb	r3, [r7, #19]
 8002454:	e05f      	b.n	8002516 <CRYP_SaveContext+0x156>
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002466:	6912      	ldr	r2, [r2, #16]
 8002468:	f022 0202 	bic.w	r2, r2, #2
 800246c:	611a      	str	r2, [r3, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002484:	601a      	str	r2, [r3, #0]

    /* Save the current configuration (bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_bits9to2  = CRYP->CR & (CRYP_CR_KEYSIZE  | 
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 727f 	and.w	r2, r3, #1020	; 0x3fc
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	601a      	str	r2, [r3, #0]
                                                 CRYP_CR_DATATYPE | 
                                                 CRYP_CR_ALGOMODE |
                                                 CRYP_CR_ALGODIR); 

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80024a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	605a      	str	r2, [r3, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80024ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	609a      	str	r2, [r3, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80024bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	60da      	str	r2, [r3, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80024ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	611a      	str	r2, [r3, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	615a      	str	r2, [r3, #20]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	619a      	str	r2, [r3, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	61da      	str	r2, [r3, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	621a      	str	r2, [r3, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	625a      	str	r2, [r3, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	699a      	ldr	r2, [r3, #24]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	69da      	ldr	r2, [r3, #28]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	631a      	str	r2, [r3, #48]	; 0x30

   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 8002510:	f04f 0301 	mov.w	r3, #1
 8002514:	74fb      	strb	r3, [r7, #19]
  }

   return status;
 8002516:	7cfb      	ldrb	r3, [r7, #19]
}
 8002518:	4618      	mov	r0, r3
 800251a:	f107 071c 	add.w	r7, r7, #28
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <CRYP_RestoreContext>:
  * @note   The data that were saved during context saving must be rewrited into
  *         the IN FIFO.
  * @retval None
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_bits9to2;
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	601a      	str	r2, [r3, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6952      	ldr	r2, [r2, #20]
 8002546:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6992      	ldr	r2, [r2, #24]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	69d2      	ldr	r2, [r2, #28]
 8002562:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6a12      	ldr	r2, [r2, #32]
 8002570:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800258c:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800259a:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6852      	ldr	r2, [r2, #4]
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6892      	ldr	r2, [r2, #8]
 80025c4:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68d2      	ldr	r2, [r2, #12]
 80025d2:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6912      	ldr	r2, [r2, #16]
 80025e0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025f8:	601a      	str	r2, [r3, #0]
}
 80025fa:	f107 070c 	add.w	r7, r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <CRYP_DMACmd>:
  * @param  NewState: new state of the selected CRYP DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	71fa      	strb	r2, [r7, #7]
 8002610:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002612:	79bb      	ldrb	r3, [r7, #6]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00c      	beq.n	8002632 <CRYP_DMACmd+0x2e>
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002628:	6911      	ldr	r1, [r2, #16]
 800262a:	79fa      	ldrb	r2, [r7, #7]
 800262c:	430a      	orrs	r2, r1
 800262e:	611a      	str	r2, [r3, #16]
 8002630:	e00e      	b.n	8002650 <CRYP_DMACmd+0x4c>
  }
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002642:	6911      	ldr	r1, [r2, #16]
 8002644:	79fa      	ldrb	r2, [r7, #7]
 8002646:	ea6f 0202 	mvn.w	r2, r2
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	400a      	ands	r2, r1
 800264e:	611a      	str	r2, [r3, #16]
  }
}
 8002650:	f107 070c 	add.w	r7, r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop

0800265c <CRYP_ITConfig>:
  * @param  NewState: new state of the specified CRYP interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	71fa      	strb	r2, [r7, #7]
 8002668:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800266a:	79bb      	ldrb	r3, [r7, #6]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00c      	beq.n	800268a <CRYP_ITConfig+0x2e>
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002680:	6951      	ldr	r1, [r2, #20]
 8002682:	79fa      	ldrb	r2, [r7, #7]
 8002684:	430a      	orrs	r2, r1
 8002686:	615a      	str	r2, [r3, #20]
 8002688:	e00e      	b.n	80026a8 <CRYP_ITConfig+0x4c>
  }
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800269a:	6951      	ldr	r1, [r2, #20]
 800269c:	79fa      	ldrb	r2, [r7, #7]
 800269e:	ea6f 0202 	mvn.w	r2, r2
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	400a      	ands	r2, r1
 80026a6:	615a      	str	r2, [r3, #20]
  }
}
 80026a8:	f107 070c 	add.w	r7, r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop

080026b4 <CRYP_GetITStatus>:
  *            @arg CRYP_IT_INI: Input FIFO interrupt
  *            @arg CRYP_IT_OUTI: Output FIFO interrupt
  * @retval The new state of CRYP_IT (SET or RESET).
  */
ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <CRYP_GetITStatus+0x2a>
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 80026d6:	f04f 0301 	mov.w	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e002      	b.n	80026e4 <CRYP_GetITStatus+0x30>
  }
  else
  {
    /* CRYP_IT is reset */
    bitstatus = RESET;
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CRYP_IT status */
  return bitstatus;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	f107 0714 	add.w	r7, r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop

080026f4 <CRYP_GetFlagStatus>:
  *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
  *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
  * @retval The new state of CRYP_FLAG (SET or RESET).
  */
FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	f003 0320 	and.w	r3, r3, #32
 8002710:	2b00      	cmp	r3, #0
 8002712:	d006      	beq.n	8002722 <CRYP_GetFlagStatus+0x2e>
  {
    tempreg = CRYP->RISR;
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	e005      	b.n	800272e <CRYP_GetFlagStatus+0x3a>
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	60bb      	str	r3, [r7, #8]
  }


  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 800272e:	79fa      	ldrb	r2, [r7, #7]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <CRYP_GetFlagStatus+0x4c>
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 8002738:	f04f 0301 	mov.w	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
 800273e:	e002      	b.n	8002746 <CRYP_GetFlagStatus+0x52>
  }
  else
  {
    /* CRYP_FLAG is reset */
    bitstatus = RESET;
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
 8002746:	7bfb      	ldrb	r3, [r7, #15]
}
 8002748:	4618      	mov	r0, r3
 800274a:	f107 0714 	add.w	r7, r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b0bb      	sub	sp, #236	; 0xec
 8002758:	af00      	add	r7, sp, #0
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	4603      	mov	r3, r0
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	4613      	mov	r3, r2
 8002764:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  ErrorStatus status = SUCCESS;
 8002774:	f04f 0301 	mov.w	r3, #1
 8002778:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
  uint32_t keyaddr    = (uint32_t)Key;
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  uint32_t inputaddr  = (uint32_t)Input;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t outputaddr = (uint32_t)Output;
 8002788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800278c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t i = 0;
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8002798:	f107 0318 	add.w	r3, r7, #24
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fd51 	bl	8002244 <CRYP_KeyStructInit>

  switch(Keysize)
 80027a2:	89bb      	ldrh	r3, [r7, #12]
 80027a4:	2bc0      	cmp	r3, #192	; 0xc0
 80027a6:	d050      	beq.n	800284a <CRYP_AES_ECB+0xf6>
 80027a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ac:	f000 80bd 	beq.w	800292a <CRYP_AES_ECB+0x1d6>
 80027b0:	2b80      	cmp	r3, #128	; 0x80
 80027b2:	f040 8130 	bne.w	8002a16 <CRYP_AES_ECB+0x2c2>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80027bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027ca:	ba1c      	rev	r4, r3
 80027cc:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
  return(result);
 80027d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 80027d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027da:	f103 0304 	add.w	r3, r3, #4
 80027de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80027e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027f0:	ba1c      	rev	r4, r3
 80027f2:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
  return(result);
 80027f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80027fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002800:	f103 0304 	add.w	r3, r3, #4
 8002804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8002808:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002816:	ba1c      	rev	r4, r3
 8002818:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
  return(result);
 800281c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002820:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8002822:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002826:	f103 0304 	add.w	r3, r3, #4
 800282a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800282e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800283c:	ba1c      	rev	r4, r3
 800283e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
  return(result);
 8002842:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002846:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8002848:	e0e6      	b.n	8002a18 <CRYP_AES_ECB+0x2c4>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 800284a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800284e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8002850:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800285e:	ba1c      	rev	r4, r3
 8002860:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
  return(result);
 8002864:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002868:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 800286a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800286e:	f103 0304 	add.w	r3, r3, #4
 8002872:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8002876:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002884:	ba1c      	rev	r4, r3
 8002886:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
  return(result);
 800288a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8002890:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002894:	f103 0304 	add.w	r3, r3, #4
 8002898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800289c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028aa:	ba1c      	rev	r4, r3
 80028ac:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
  return(result);
 80028b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028b4:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 80028b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028ba:	f103 0304 	add.w	r3, r3, #4
 80028be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80028c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028d0:	ba1c      	rev	r4, r3
 80028d2:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
  return(result);
 80028d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80028dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028e0:	f103 0304 	add.w	r3, r3, #4
 80028e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80028e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028f6:	ba1c      	rev	r4, r3
 80028f8:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
  return(result);
 80028fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002900:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8002902:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002906:	f103 0304 	add.w	r3, r3, #4
 800290a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800290e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800291c:	ba1c      	rev	r4, r3
 800291e:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
  return(result);
 8002922:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8002928:	e076      	b.n	8002a18 <CRYP_AES_ECB+0x2c4>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 800292a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800292e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8002930:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	67fb      	str	r3, [r7, #124]	; 0x7c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002938:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800293a:	ba1c      	rev	r4, r3
 800293c:	67bc      	str	r4, [r7, #120]	; 0x78
  return(result);
 800293e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002940:	61bb      	str	r3, [r7, #24]
    keyaddr+=4;
 8002942:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002946:	f103 0304 	add.w	r3, r3, #4
 800294a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 800294e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	677b      	str	r3, [r7, #116]	; 0x74
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002958:	ba1c      	rev	r4, r3
 800295a:	673c      	str	r4, [r7, #112]	; 0x70
  return(result);
 800295c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800295e:	61fb      	str	r3, [r7, #28]
    keyaddr+=4;
 8002960:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002964:	f103 0304 	add.w	r3, r3, #4
 8002968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800296c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	66fb      	str	r3, [r7, #108]	; 0x6c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002976:	ba1c      	rev	r4, r3
 8002978:	66bc      	str	r4, [r7, #104]	; 0x68
  return(result);
 800297a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800297c:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 800297e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002982:	f103 0304 	add.w	r3, r3, #4
 8002986:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800298a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	667b      	str	r3, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002992:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002994:	ba1c      	rev	r4, r3
 8002996:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 8002998:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 800299c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029a0:	f103 0304 	add.w	r3, r3, #4
 80029a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80029a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b2:	ba1c      	rev	r4, r3
 80029b4:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 80029b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b8:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 80029ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029be:	f103 0304 	add.w	r3, r3, #4
 80029c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80029c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	657b      	str	r3, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d0:	ba1c      	rev	r4, r3
 80029d2:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 80029d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80029d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029dc:	f103 0304 	add.w	r3, r3, #4
 80029e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80029e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ee:	ba1c      	rev	r4, r3
 80029f0:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 80029f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029f4:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80029f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029fa:	f103 0304 	add.w	r3, r3, #4
 80029fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002a02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a0c:	ba1c      	rev	r4, r3
 8002a0e:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 8002a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a12:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8002a14:	e000      	b.n	8002a18 <CRYP_AES_ECB+0x2c4>
    default:
    break;
 8002a16:	bf00      	nop
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d138      	bne.n	8002a90 <CRYP_AES_ECB+0x33c>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8002a1e:	f7ff fc7b 	bl	8002318 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8002a22:	f04f 0304 	mov.w	r3, #4
 8002a26:	873b      	strh	r3, [r7, #56]	; 0x38
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8002a28:	f04f 0338 	mov.w	r3, #56	; 0x38
 8002a2c:	877b      	strh	r3, [r7, #58]	; 0x3a
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	87bb      	strh	r3, [r7, #60]	; 0x3c
    CRYP_Init(&AES_CRYP_InitStructure);
 8002a34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fb29 	bl	8002090 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8002a3e:	f107 0318 	add.w	r3, r7, #24
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fbbc 	bl	80021c0 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8002a48:	f04f 0001 	mov.w	r0, #1
 8002a4c:	f7ff fc76 	bl	800233c <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8002a50:	f04f 0010 	mov.w	r0, #16
 8002a54:	f7ff fe4e 	bl	80026f4 <CRYP_GetFlagStatus>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      counter++;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f103 0301 	add.w	r3, r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6c:	d003      	beq.n	8002a76 <CRYP_AES_ECB+0x322>
 8002a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1ec      	bne.n	8002a50 <CRYP_AES_ECB+0x2fc>

    if (busystatus != RESET)
 8002a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d004      	beq.n	8002a88 <CRYP_AES_ECB+0x334>
   {
       status = ERROR;
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8002a86:	e00b      	b.n	8002aa0 <CRYP_AES_ECB+0x34c>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8002a88:	f04f 0304 	mov.w	r3, #4
 8002a8c:	873b      	strh	r3, [r7, #56]	; 0x38
 8002a8e:	e007      	b.n	8002aa0 <CRYP_AES_ECB+0x34c>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8002a90:	f107 0318 	add.w	r3, r7, #24
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fb93 	bl	80021c0 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 8002aa0:	f04f 0320 	mov.w	r3, #32
 8002aa4:	877b      	strh	r3, [r7, #58]	; 0x3a
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8002aa6:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002aaa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&AES_CRYP_InitStructure);
 8002aac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff faed 	bl	8002090 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8002ab6:	f7ff fc2f 	bl	8002318 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8002aba:	f04f 0001 	mov.w	r0, #1
 8002abe:	f7ff fc3d 	bl	800233c <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002aca:	e084      	b.n	8002bd6 <CRYP_AES_ECB+0x482>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fc58 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 8002ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002adc:	f103 0304 	add.w	r3, r3, #4
 8002ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fc4c 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 8002af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af4:	f103 0304 	add.w	r3, r3, #4
 8002af8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fc40 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 8002b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b0c:	f103 0304 	add.w	r3, r3, #4
 8002b10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8002b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fc34 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 8002b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b24:	f103 0304 	add.w	r3, r3, #4
 8002b28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    /* Wait until the complete message has been processed */
    counter = 0;
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8002b32:	f04f 0010 	mov.w	r0, #16
 8002b36:	f7ff fddd 	bl	80026f4 <CRYP_GetFlagStatus>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      counter++;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f103 0301 	add.w	r3, r3, #1
 8002b46:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4e:	d003      	beq.n	8002b58 <CRYP_AES_ECB+0x404>
 8002b50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ec      	bne.n	8002b32 <CRYP_AES_ECB+0x3de>

    if (busystatus != RESET)
 8002b58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d004      	beq.n	8002b6a <CRYP_AES_ECB+0x416>
   {
       status = ERROR;
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8002b68:	e02f      	b.n	8002bca <CRYP_AES_ECB+0x476>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002b6a:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8002b6e:	f7ff fc1b 	bl	80023a8 <CRYP_DataOut>
 8002b72:	4603      	mov	r3, r0
 8002b74:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8002b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b7a:	f103 0304 	add.w	r3, r3, #4
 8002b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002b82:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8002b86:	f7ff fc0f 	bl	80023a8 <CRYP_DataOut>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8002b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b92:	f103 0304 	add.w	r3, r3, #4
 8002b96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8002b9a:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8002b9e:	f7ff fc03 	bl	80023a8 <CRYP_DataOut>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8002ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002baa:	f103 0304 	add.w	r3, r3, #4
 8002bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 8002bb2:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8002bb6:	f7ff fbf7 	bl	80023a8 <CRYP_DataOut>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8002bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bc2:	f103 0304 	add.w	r3, r3, #4
 8002bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8002bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bce:	f103 0310 	add.w	r3, r3, #16
 8002bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bd6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002bda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d204      	bcs.n	8002bec <CRYP_AES_ECB+0x498>
 8002be2:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f47f af70 	bne.w	8002acc <CRYP_AES_ECB+0x378>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8002bec:	f04f 0000 	mov.w	r0, #0
 8002bf0:	f7ff fba4 	bl	800233c <CRYP_Cmd>

  return status; 
 8002bf4:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f107 07ec 	add.w	r7, r7, #236	; 0xec
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd90      	pop	{r4, r7, pc}
 8002c02:	bf00      	nop

08002c04 <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b0c7      	sub	sp, #284	; 0x11c
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	f107 0408 	add.w	r4, r7, #8
 8002c0e:	6021      	str	r1, [r4, #0]
 8002c10:	f107 0104 	add.w	r1, r7, #4
 8002c14:	600a      	str	r2, [r1, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f107 030f 	add.w	r3, r7, #15
 8002c1c:	4601      	mov	r1, r0
 8002c1e:	7019      	strb	r1, [r3, #0]
 8002c20:	f107 030c 	add.w	r3, r7, #12
 8002c24:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8002c26:	f107 0310 	add.w	r3, r7, #16
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ErrorStatus status = SUCCESS;
 8002c38:	f04f 0301 	mov.w	r3, #1
 8002c3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  uint32_t keyaddr    = (uint32_t)Key;
 8002c40:	f107 0304 	add.w	r3, r7, #4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t inputaddr  = (uint32_t)Input;
 8002c4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002c4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  uint32_t outputaddr = (uint32_t)Output;
 8002c52:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002c56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8002c5a:	f107 0308 	add.w	r3, r7, #8
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t i = 0;
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8002c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fae7 	bl	8002244 <CRYP_KeyStructInit>

  switch(Keysize)
 8002c76:	f107 030c 	add.w	r3, r7, #12
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	2bc0      	cmp	r3, #192	; 0xc0
 8002c7e:	d051      	beq.n	8002d24 <CRYP_AES_CBC+0x120>
 8002c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c84:	f000 80bf 	beq.w	8002e06 <CRYP_AES_CBC+0x202>
 8002c88:	2b80      	cmp	r3, #128	; 0x80
 8002c8a:	f040 8149 	bne.w	8002f20 <CRYP_AES_CBC+0x31c>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8002c96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ca4:	ba1c      	rev	r4, r3
 8002ca6:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
  return(result);
 8002caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cae:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8002cb0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002cb4:	f103 0304 	add.w	r3, r3, #4
 8002cb8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002cbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002cca:	ba1c      	rev	r4, r3
 8002ccc:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
  return(result);
 8002cd0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002cd4:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8002cd6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002cda:	f103 0304 	add.w	r3, r3, #4
 8002cde:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8002ce2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002cf0:	ba1c      	rev	r4, r3
 8002cf2:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
  return(result);
 8002cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8002cfc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002d00:	f103 0304 	add.w	r3, r3, #4
 8002d04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002d08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d16:	ba1c      	rev	r4, r3
 8002d18:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
  return(result);
 8002d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d20:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8002d22:	e0fe      	b.n	8002f22 <CRYP_AES_CBC+0x31e>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8002d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d28:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8002d2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d3a:	ba1c      	rev	r4, r3
 8002d3c:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
  return(result);
 8002d40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8002d46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002d4a:	f103 0304 	add.w	r3, r3, #4
 8002d4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8002d52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d60:	ba1c      	rev	r4, r3
 8002d62:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
  return(result);
 8002d66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d6a:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8002d6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002d70:	f103 0304 	add.w	r3, r3, #4
 8002d74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8002d78:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d86:	ba1c      	rev	r4, r3
 8002d88:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
  return(result);
 8002d8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8002d92:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002d96:	f103 0304 	add.w	r3, r3, #4
 8002d9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002d9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dac:	ba1c      	rev	r4, r3
 8002dae:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
  return(result);
 8002db2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002db6:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8002db8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002dbc:	f103 0304 	add.w	r3, r3, #4
 8002dc0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8002dc4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002dd2:	ba1c      	rev	r4, r3
 8002dd4:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
  return(result);
 8002dd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8002dde:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002de2:	f103 0304 	add.w	r3, r3, #4
 8002de6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002dea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002df8:	ba1c      	rev	r4, r3
 8002dfa:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
  return(result);
 8002dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e02:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8002e04:	e08d      	b.n	8002f22 <CRYP_AES_CBC+0x31e>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8002e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e0a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8002e0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e1c:	ba1c      	rev	r4, r3
 8002e1e:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
  return(result);
 8002e22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8002e28:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002e2c:	f103 0304 	add.w	r3, r3, #4
 8002e30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8002e34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e42:	ba1c      	rev	r4, r3
 8002e44:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
  return(result);
 8002e48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8002e4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002e52:	f103 0304 	add.w	r3, r3, #4
 8002e56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8002e5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e68:	ba1c      	rev	r4, r3
 8002e6a:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
  return(result);
 8002e6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8002e74:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002e78:	f103 0304 	add.w	r3, r3, #4
 8002e7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8002e80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e8e:	ba1c      	rev	r4, r3
 8002e90:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
  return(result);
 8002e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e98:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8002e9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002e9e:	f103 0304 	add.w	r3, r3, #4
 8002ea2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8002ea6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002eb4:	ba1c      	rev	r4, r3
 8002eb6:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 8002eba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ebe:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8002ec0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002ec4:	f103 0304 	add.w	r3, r3, #4
 8002ec8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8002ecc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eda:	ba1c      	rev	r4, r3
 8002edc:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 8002ede:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ee0:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8002ee2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002ee6:	f103 0304 	add.w	r3, r3, #4
 8002eea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8002eee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ef8:	ba1c      	rev	r4, r3
 8002efa:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 8002efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002efe:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8002f00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002f04:	f103 0304 	add.w	r3, r3, #4
 8002f08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8002f0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f16:	ba1c      	rev	r4, r3
 8002f18:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 8002f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1c:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8002f1e:	e000      	b.n	8002f22 <CRYP_AES_CBC+0x31e>
    default:
    break;
 8002f20:	bf00      	nop
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8002f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f2c:	ba1c      	rev	r4, r3
 8002f2e:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 8002f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f32:	461a      	mov	r2, r3
 8002f34:	f107 0314 	add.w	r3, r7, #20
 8002f38:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 8002f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f3e:	f103 0304 	add.w	r3, r3, #4
 8002f42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8002f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f50:	ba1c      	rev	r4, r3
 8002f52:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 8002f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f56:	461a      	mov	r2, r3
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 8002f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f62:	f103 0304 	add.w	r3, r3, #4
 8002f66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8002f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f74:	ba1c      	rev	r4, r3
 8002f76:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8002f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 8002f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f86:	f103 0304 	add.w	r3, r3, #4
 8002f8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8002f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f98:	ba1c      	rev	r4, r3
 8002f9a:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8002f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f107 0314 	add.w	r3, r7, #20
 8002fa4:	60da      	str	r2, [r3, #12]


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8002fa6:	f107 030f 	add.w	r3, r7, #15
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d142      	bne.n	8003036 <CRYP_AES_CBC+0x432>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8002fb0:	f7ff f9b2 	bl	8002318 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8002fb4:	f04f 0304 	mov.w	r3, #4
 8002fb8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8002fbc:	f04f 0338 	mov.w	r3, #56	; 0x38
 8002fc0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    CRYP_Init(&AES_CRYP_InitStructure);
 8002fcc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff f85d 	bl	8002090 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8002fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff f8f0 	bl	80021c0 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8002fe0:	f04f 0001 	mov.w	r0, #1
 8002fe4:	f7ff f9aa 	bl	800233c <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8002fe8:	f04f 0010 	mov.w	r0, #16
 8002fec:	f7ff fb82 	bl	80026f4 <CRYP_GetFlagStatus>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 8002ff6:	f107 0310 	add.w	r3, r7, #16
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f103 0201 	add.w	r2, r3, #1
 8003000:	f107 0310 	add.w	r3, r7, #16
 8003004:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8003006:	f107 0310 	add.w	r3, r7, #16
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003010:	d003      	beq.n	800301a <CRYP_AES_CBC+0x416>
 8003012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1e6      	bne.n	8002fe8 <CRYP_AES_CBC+0x3e4>

    if (busystatus != RESET)
 800301a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800301e:	2b00      	cmp	r3, #0
 8003020:	d004      	beq.n	800302c <CRYP_AES_CBC+0x428>
   {
       status = ERROR;
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800302a:	e00d      	b.n	8003048 <CRYP_AES_CBC+0x444>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800302c:	f04f 0304 	mov.w	r3, #4
 8003030:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003034:	e008      	b.n	8003048 <CRYP_AES_CBC+0x444>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8003036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff f8c0 	bl	80021c0 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 8003048:	f04f 0328 	mov.w	r3, #40	; 0x28
 800304c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8003050:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003054:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&AES_CRYP_InitStructure);
 8003058:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff f817 	bl	8002090 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8003062:	f107 0314 	add.w	r3, r7, #20
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff f916 	bl	8002298 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 800306c:	f7ff f954 	bl	8002318 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8003070:	f04f 0001 	mov.w	r0, #1
 8003074:	f7ff f962 	bl	800233c <CRYP_Cmd>


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003080:	e08c      	b.n	800319c <CRYP_AES_CBC+0x598>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003082:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff f97d 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 800308e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003092:	f103 0304 	add.w	r3, r3, #4
 8003096:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800309a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff f971 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 80030a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030aa:	f103 0304 	add.w	r3, r3, #4
 80030ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80030b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff f965 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 80030be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030c2:	f103 0304 	add.w	r3, r3, #4
 80030c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80030ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff f959 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 80030d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030da:	f103 0304 	add.w	r3, r3, #4
 80030de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    /* Wait until the complete message has been processed */
    counter = 0;
 80030e2:	f107 0310 	add.w	r3, r7, #16
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80030ec:	f04f 0010 	mov.w	r0, #16
 80030f0:	f7ff fb00 	bl	80026f4 <CRYP_GetFlagStatus>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 80030fa:	f107 0310 	add.w	r3, r7, #16
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f103 0201 	add.w	r2, r3, #1
 8003104:	f107 0310 	add.w	r3, r7, #16
 8003108:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800310a:	f107 0310 	add.w	r3, r7, #16
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003114:	d003      	beq.n	800311e <CRYP_AES_CBC+0x51a>
 8003116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1e6      	bne.n	80030ec <CRYP_AES_CBC+0x4e8>

    if (busystatus != RESET)
 800311e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003122:	2b00      	cmp	r3, #0
 8003124:	d004      	beq.n	8003130 <CRYP_AES_CBC+0x52c>
   {
       status = ERROR;
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800312e:	e02f      	b.n	8003190 <CRYP_AES_CBC+0x58c>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003130:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8003134:	f7ff f938 	bl	80023a8 <CRYP_DataOut>
 8003138:	4603      	mov	r3, r0
 800313a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800313c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003140:	f103 0304 	add.w	r3, r3, #4
 8003144:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003148:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 800314c:	f7ff f92c 	bl	80023a8 <CRYP_DataOut>
 8003150:	4603      	mov	r3, r0
 8003152:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003158:	f103 0304 	add.w	r3, r3, #4
 800315c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003160:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8003164:	f7ff f920 	bl	80023a8 <CRYP_DataOut>
 8003168:	4603      	mov	r3, r0
 800316a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800316c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003170:	f103 0304 	add.w	r3, r3, #4
 8003174:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003178:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 800317c:	f7ff f914 	bl	80023a8 <CRYP_DataOut>
 8003180:	4603      	mov	r3, r0
 8003182:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003188:	f103 0304 	add.w	r3, r3, #4
 800318c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8003190:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003194:	f103 0310 	add.w	r3, r3, #16
 8003198:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800319c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80031a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d204      	bcs.n	80031b2 <CRYP_AES_CBC+0x5ae>
 80031a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f47f af68 	bne.w	8003082 <CRYP_AES_CBC+0x47e>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80031b2:	f04f 0000 	mov.w	r0, #0
 80031b6:	f7ff f8c1 	bl	800233c <CRYP_Cmd>

  return status;
 80031ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 80031be:	4618      	mov	r0, r3
 80031c0:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd90      	pop	{r4, r7, pc}

080031c8 <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b0c7      	sub	sp, #284	; 0x11c
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	f107 0408 	add.w	r4, r7, #8
 80031d2:	6021      	str	r1, [r4, #0]
 80031d4:	f107 0104 	add.w	r1, r7, #4
 80031d8:	600a      	str	r2, [r1, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	f107 030f 	add.w	r3, r7, #15
 80031e0:	4601      	mov	r1, r0
 80031e2:	7019      	strb	r1, [r3, #0]
 80031e4:	f107 030c 	add.w	r3, r7, #12
 80031e8:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80031ea:	f107 0310 	add.w	r3, r7, #16
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ErrorStatus status = SUCCESS;
 80031fc:	f04f 0301 	mov.w	r3, #1
 8003200:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  uint32_t keyaddr    = (uint32_t)Key;
 8003204:	f107 0304 	add.w	r3, r7, #4
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t inputaddr  = (uint32_t)Input;
 800320e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003212:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  uint32_t outputaddr = (uint32_t)Output;
 8003216:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800321a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 800321e:	f107 0308 	add.w	r3, r7, #8
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t i = 0;
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8003230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff f805 	bl	8002244 <CRYP_KeyStructInit>

  switch(Keysize)
 800323a:	f107 030c 	add.w	r3, r7, #12
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	2bc0      	cmp	r3, #192	; 0xc0
 8003242:	d051      	beq.n	80032e8 <CRYP_AES_CTR+0x120>
 8003244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003248:	f000 80bf 	beq.w	80033ca <CRYP_AES_CTR+0x202>
 800324c:	2b80      	cmp	r3, #128	; 0x80
 800324e:	f040 8149 	bne.w	80034e4 <CRYP_AES_CTR+0x31c>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800325a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003264:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003268:	ba1c      	rev	r4, r3
 800326a:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
  return(result);
 800326e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003272:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8003274:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003278:	f103 0304 	add.w	r3, r3, #4
 800327c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8003280:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800328e:	ba1c      	rev	r4, r3
 8003290:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
  return(result);
 8003294:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003298:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 800329a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800329e:	f103 0304 	add.w	r3, r3, #4
 80032a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80032a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032b4:	ba1c      	rev	r4, r3
 80032b6:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
  return(result);
 80032ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032be:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80032c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80032c4:	f103 0304 	add.w	r3, r3, #4
 80032c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80032cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032da:	ba1c      	rev	r4, r3
 80032dc:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
  return(result);
 80032e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032e4:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80032e6:	e0fe      	b.n	80034e6 <CRYP_AES_CTR+0x31e>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80032e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80032f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032fe:	ba1c      	rev	r4, r3
 8003300:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
  return(result);
 8003304:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 800330a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800330e:	f103 0304 	add.w	r3, r3, #4
 8003312:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8003316:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003320:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003324:	ba1c      	rev	r4, r3
 8003326:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
  return(result);
 800332a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800332e:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8003330:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003334:	f103 0304 	add.w	r3, r3, #4
 8003338:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800333c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800334a:	ba1c      	rev	r4, r3
 800334c:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
  return(result);
 8003350:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8003356:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800335a:	f103 0304 	add.w	r3, r3, #4
 800335e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8003362:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800336c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003370:	ba1c      	rev	r4, r3
 8003372:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
  return(result);
 8003376:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800337a:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 800337c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003380:	f103 0304 	add.w	r3, r3, #4
 8003384:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8003388:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003392:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003396:	ba1c      	rev	r4, r3
 8003398:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
  return(result);
 800339c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80033a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80033a6:	f103 0304 	add.w	r3, r3, #4
 80033aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80033ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033bc:	ba1c      	rev	r4, r3
 80033be:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
  return(result);
 80033c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033c6:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80033c8:	e08d      	b.n	80034e6 <CRYP_AES_CTR+0x31e>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80033ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80033d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80033dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033e0:	ba1c      	rev	r4, r3
 80033e2:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
  return(result);
 80033e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 80033ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80033f0:	f103 0304 	add.w	r3, r3, #4
 80033f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 80033f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003406:	ba1c      	rev	r4, r3
 8003408:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
  return(result);
 800340c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8003412:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003416:	f103 0304 	add.w	r3, r3, #4
 800341a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800341e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003428:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800342c:	ba1c      	rev	r4, r3
 800342e:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
  return(result);
 8003432:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8003438:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800343c:	f103 0304 	add.w	r3, r3, #4
 8003440:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8003444:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800344e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003452:	ba1c      	rev	r4, r3
 8003454:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
  return(result);
 8003458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800345c:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 800345e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003462:	f103 0304 	add.w	r3, r3, #4
 8003466:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800346a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003474:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003478:	ba1c      	rev	r4, r3
 800347a:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 800347e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003482:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8003484:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003488:	f103 0304 	add.w	r3, r3, #4
 800348c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8003490:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800349a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800349e:	ba1c      	rev	r4, r3
 80034a0:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 80034a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034a4:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80034a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80034aa:	f103 0304 	add.w	r3, r3, #4
 80034ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80034b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80034ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034bc:	ba1c      	rev	r4, r3
 80034be:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 80034c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80034c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80034c8:	f103 0304 	add.w	r3, r3, #4
 80034cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80034d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034da:	ba1c      	rev	r4, r3
 80034dc:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 80034de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e0:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80034e2:	e000      	b.n	80034e6 <CRYP_AES_CTR+0x31e>
    default:
    break;
 80034e4:	bf00      	nop
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80034e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034f0:	ba1c      	rev	r4, r3
 80034f2:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 80034f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034f6:	461a      	mov	r2, r3
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 80034fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003502:	f103 0304 	add.w	r3, r3, #4
 8003506:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 800350a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003514:	ba1c      	rev	r4, r3
 8003516:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 8003518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800351a:	461a      	mov	r2, r3
 800351c:	f107 0314 	add.w	r3, r7, #20
 8003520:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 8003522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003526:	f103 0304 	add.w	r3, r3, #4
 800352a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 800352e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003538:	ba1c      	rev	r4, r3
 800353a:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 800353c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800353e:	461a      	mov	r2, r3
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 8003546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800354a:	f103 0304 	add.w	r3, r3, #4
 800354e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8003552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800355a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800355c:	ba1c      	rev	r4, r3
 800355e:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8003560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003562:	461a      	mov	r2, r3
 8003564:	f107 0314 	add.w	r3, r7, #20
 8003568:	60da      	str	r2, [r3, #12]

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800356a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800356e:	4618      	mov	r0, r3
 8003570:	f7fe fe26 	bl	80021c0 <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8003574:	f107 030f 	add.w	r3, r7, #15
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d104      	bne.n	8003588 <CRYP_AES_CTR+0x3c0>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800357e:	f04f 0304 	mov.w	r3, #4
 8003582:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003586:	e003      	b.n	8003590 <CRYP_AES_CTR+0x3c8>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 8003590:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003594:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8003598:	f04f 0380 	mov.w	r3, #128	; 0x80
 800359c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&AES_CRYP_InitStructure);
 80035a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe fd73 	bl	8002090 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 80035aa:	f107 0314 	add.w	r3, r7, #20
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe fe72 	bl	8002298 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80035b4:	f7fe feb0 	bl	8002318 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80035b8:	f04f 0001 	mov.w	r0, #1
 80035bc:	f7fe febe 	bl	800233c <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80035c8:	e08c      	b.n	80036e4 <CRYP_AES_CTR+0x51c>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80035ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe fed9 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 80035d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035da:	f103 0304 	add.w	r3, r3, #4
 80035de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80035e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fe fecd 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 80035ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035f2:	f103 0304 	add.w	r3, r3, #4
 80035f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80035fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f7fe fec1 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 8003606:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800360a:	f103 0304 	add.w	r3, r3, #4
 800360e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003612:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7fe feb5 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 800361e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003622:	f103 0304 	add.w	r3, r3, #4
 8003626:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    /* Wait until the complete message has been processed */
    counter = 0;
 800362a:	f107 0310 	add.w	r3, r7, #16
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8003634:	f04f 0010 	mov.w	r0, #16
 8003638:	f7ff f85c 	bl	80026f4 <CRYP_GetFlagStatus>
 800363c:	4603      	mov	r3, r0
 800363e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 8003642:	f107 0310 	add.w	r3, r7, #16
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f103 0201 	add.w	r2, r3, #1
 800364c:	f107 0310 	add.w	r3, r7, #16
 8003650:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8003652:	f107 0310 	add.w	r3, r7, #16
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365c:	d003      	beq.n	8003666 <CRYP_AES_CTR+0x49e>
 800365e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e6      	bne.n	8003634 <CRYP_AES_CTR+0x46c>

    if (busystatus != RESET)
 8003666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800366a:	2b00      	cmp	r3, #0
 800366c:	d004      	beq.n	8003678 <CRYP_AES_CTR+0x4b0>
   {
       status = ERROR;
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8003676:	e02f      	b.n	80036d8 <CRYP_AES_CTR+0x510>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003678:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 800367c:	f7fe fe94 	bl	80023a8 <CRYP_DataOut>
 8003680:	4603      	mov	r3, r0
 8003682:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003688:	f103 0304 	add.w	r3, r3, #4
 800368c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003690:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8003694:	f7fe fe88 	bl	80023a8 <CRYP_DataOut>
 8003698:	4603      	mov	r3, r0
 800369a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800369c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a0:	f103 0304 	add.w	r3, r3, #4
 80036a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80036a8:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80036ac:	f7fe fe7c 	bl	80023a8 <CRYP_DataOut>
 80036b0:	4603      	mov	r3, r0
 80036b2:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80036b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b8:	f103 0304 	add.w	r3, r3, #4
 80036bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80036c0:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80036c4:	f7fe fe70 	bl	80023a8 <CRYP_DataOut>
 80036c8:	4603      	mov	r3, r0
 80036ca:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80036cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d0:	f103 0304 	add.w	r3, r3, #4
 80036d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80036d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80036dc:	f103 0310 	add.w	r3, r3, #16
 80036e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80036e4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80036e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d204      	bcs.n	80036fa <CRYP_AES_CTR+0x532>
 80036f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f47f af68 	bne.w	80035ca <CRYP_AES_CTR+0x402>
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80036fa:	f04f 0000 	mov.w	r0, #0
 80036fe:	f7fe fe1d 	bl	800233c <CRYP_Cmd>

  return status;
 8003702:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 8003706:	4618      	mov	r0, r3
 8003708:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800370c:	46bd      	mov	sp, r7
 800370e:	bd90      	pop	{r4, r7, pc}

08003710 <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b09b      	sub	sp, #108	; 0x6c
 8003714:	af00      	add	r7, sp, #0
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	4603      	mov	r3, r0
 800371e:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 800372c:	f04f 0301 	mov.w	r3, #1
 8003730:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 800373c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800373e:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i = 0;
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8003746:	f107 0318 	add.w	r3, r7, #24
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe fd7a 	bl	8002244 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d103      	bne.n	800375e <CRYP_DES_ECB+0x4e>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	873b      	strh	r3, [r7, #56]	; 0x38
 800375c:	e002      	b.n	8003764 <CRYP_DES_ECB+0x54>
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 800375e:	f04f 0304 	mov.w	r3, #4
 8003762:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 8003764:	f04f 0310 	mov.w	r3, #16
 8003768:	877b      	strh	r3, [r7, #58]	; 0x3a
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800376a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800376e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&DES_CRYP_InitStructure);
 8003770:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003774:	4618      	mov	r0, r3
 8003776:	f7fe fc8b 	bl	8002090 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800377a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003782:	ba1c      	rev	r4, r3
 8003784:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 8003786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003788:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 800378a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378c:	f103 0304 	add.w	r3, r3, #4
 8003790:	653b      	str	r3, [r7, #80]	; 0x50
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8003792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800379a:	ba1c      	rev	r4, r3
 800379c:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 800379e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 80037a2:	f107 0318 	add.w	r3, r7, #24
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe fd0a 	bl	80021c0 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80037ac:	f7fe fdb4 	bl	8002318 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80037b0:	f04f 0001 	mov.w	r0, #1
 80037b4:	f7fe fdc2 	bl	800233c <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80037be:	e043      	b.n	8003848 <CRYP_DES_ECB+0x138>
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80037c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe fddf 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 80037ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037cc:	f103 0304 	add.w	r3, r3, #4
 80037d0:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80037d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fdd6 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 80037dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037de:	f103 0304 	add.w	r3, r3, #4
 80037e2:	663b      	str	r3, [r7, #96]	; 0x60

/* Wait until the complete message has been processed */
    counter = 0;
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80037ea:	f04f 0010 	mov.w	r0, #16
 80037ee:	f7fe ff81 	bl	80026f4 <CRYP_GetFlagStatus>
 80037f2:	4603      	mov	r3, r0
 80037f4:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f103 0301 	add.w	r3, r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003804:	d002      	beq.n	800380c <CRYP_DES_ECB+0xfc>
 8003806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1ee      	bne.n	80037ea <CRYP_DES_ECB+0xda>

    if (busystatus != RESET)
 800380c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380e:	2b00      	cmp	r3, #0
 8003810:	d004      	beq.n	800381c <CRYP_DES_ECB+0x10c>
   {
       status = ERROR;
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800381a:	e011      	b.n	8003840 <CRYP_DES_ECB+0x130>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800381c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 800381e:	f7fe fdc3 	bl	80023a8 <CRYP_DataOut>
 8003822:	4603      	mov	r3, r0
 8003824:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003828:	f103 0304 	add.w	r3, r3, #4
 800382c:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800382e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003830:	f7fe fdba 	bl	80023a8 <CRYP_DataOut>
 8003834:	4603      	mov	r3, r0
 8003836:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800383a:	f103 0304 	add.w	r3, r3, #4
 800383e:	65fb      	str	r3, [r7, #92]	; 0x5c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8003840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003842:	f103 0308 	add.w	r3, r3, #8
 8003846:	65bb      	str	r3, [r7, #88]	; 0x58
 8003848:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d203      	bcs.n	8003858 <CRYP_DES_ECB+0x148>
 8003850:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1b3      	bne.n	80037c0 <CRYP_DES_ECB+0xb0>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8003858:	f04f 0000 	mov.w	r0, #0
 800385c:	f7fe fd6e 	bl	800233c <CRYP_Cmd>

  return status; 
 8003860:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003864:	4618      	mov	r0, r3
 8003866:	f107 076c 	add.w	r7, r7, #108	; 0x6c
 800386a:	46bd      	mov	sp, r7
 800386c:	bd90      	pop	{r4, r7, pc}
 800386e:	bf00      	nop

08003870 <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8003870:	b590      	push	{r4, r7, lr}
 8003872:	b0a3      	sub	sp, #140	; 0x8c
 8003874:	af00      	add	r7, sp, #0
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4603      	mov	r3, r0
 800387e:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	677b      	str	r3, [r7, #116]	; 0x74
  ErrorStatus status = SUCCESS;
 800388c:	f04f 0301 	mov.w	r3, #1
 8003890:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  uint32_t keyaddr    = (uint32_t)Key;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t inputaddr  = (uint32_t)Input;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t outputaddr = (uint32_t)Output;
 800389e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t i = 0;
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 80038ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe fcc6 	bl	8002244 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d104      	bne.n	80038c8 <CRYP_DES_CBC+0x58>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80038c6:	e003      	b.n	80038d0 <CRYP_DES_CBC+0x60>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 80038c8:	f04f 0304 	mov.w	r3, #4
 80038cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 80038d0:	f04f 0318 	mov.w	r3, #24
 80038d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80038d8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80038dc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&DES_CRYP_InitStructure);
 80038e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fe fbd3 	bl	8002090 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80038ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038f2:	ba1c      	rev	r4, r3
 80038f4:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 80038f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 80038fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038fc:	f103 0304 	add.w	r3, r3, #4
 8003900:	673b      	str	r3, [r7, #112]	; 0x70
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8003902:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800390a:	ba1c      	rev	r4, r3
 800390c:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 800390e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003910:	633b      	str	r3, [r7, #48]	; 0x30
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8003912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe fc52 	bl	80021c0 <CRYP_KeyInit>

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 800391c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003924:	ba1c      	rev	r4, r3
 8003926:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8003928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392a:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 800392c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392e:	f103 0304 	add.w	r3, r3, #4
 8003932:	66fb      	str	r3, [r7, #108]	; 0x6c
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8003934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800393a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800393c:	ba1c      	rev	r4, r3
 800393e:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8003940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003942:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 8003944:	f107 0314 	add.w	r3, r7, #20
 8003948:	4618      	mov	r0, r3
 800394a:	f7fe fca5 	bl	8002298 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 800394e:	f7fe fce3 	bl	8002318 <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8003952:	f04f 0001 	mov.w	r0, #1
 8003956:	f7fe fcf1 	bl	800233c <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003960:	e049      	b.n	80039f6 <CRYP_DES_CBC+0x186>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003962:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f7fe fd0d 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 800396e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003972:	f103 0304 	add.w	r3, r3, #4
 8003976:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800397a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe fd01 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 8003986:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800398a:	f103 0304 	add.w	r3, r3, #4
 800398e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Wait until the complete message has been processed */
    counter = 0;
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8003998:	f04f 0010 	mov.w	r0, #16
 800399c:	f7fe feaa 	bl	80026f4 <CRYP_GetFlagStatus>
 80039a0:	4603      	mov	r3, r0
 80039a2:	677b      	str	r3, [r7, #116]	; 0x74
      counter++;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f103 0301 	add.w	r3, r3, #1
 80039aa:	613b      	str	r3, [r7, #16]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b2:	d002      	beq.n	80039ba <CRYP_DES_CBC+0x14a>
 80039b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1ee      	bne.n	8003998 <CRYP_DES_CBC+0x128>

    if (busystatus != RESET)
 80039ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d004      	beq.n	80039ca <CRYP_DES_CBC+0x15a>
   {
       status = ERROR;
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80039c8:	e011      	b.n	80039ee <CRYP_DES_CBC+0x17e>
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80039ca:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80039cc:	f7fe fcec 	bl	80023a8 <CRYP_DataOut>
 80039d0:	4603      	mov	r3, r0
 80039d2:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80039d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039d6:	f103 0304 	add.w	r3, r3, #4
 80039da:	67fb      	str	r3, [r7, #124]	; 0x7c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80039dc:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80039de:	f7fe fce3 	bl	80023a8 <CRYP_DataOut>
 80039e2:	4603      	mov	r3, r0
 80039e4:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80039e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039e8:	f103 0304 	add.w	r3, r3, #4
 80039ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80039ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f0:	f103 0308 	add.w	r3, r3, #8
 80039f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80039f6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d203      	bcs.n	8003a08 <CRYP_DES_CBC+0x198>
 8003a00:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1ac      	bne.n	8003962 <CRYP_DES_CBC+0xf2>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8003a08:	f04f 0000 	mov.w	r0, #0
 8003a0c:	f7fe fc96 	bl	800233c <CRYP_Cmd>

  return status; 
 8003a10:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	f107 078c 	add.w	r7, r7, #140	; 0x8c
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd90      	pop	{r4, r7, pc}
 8003a1e:	bf00      	nop

08003a20 <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 8003a20:	b590      	push	{r4, r7, lr}
 8003a22:	b0a3      	sub	sp, #140	; 0x8c
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	677b      	str	r3, [r7, #116]	; 0x74
  ErrorStatus status = SUCCESS;
 8003a3c:	f04f 0301 	mov.w	r3, #1
 8003a40:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  uint32_t keyaddr    = (uint32_t)Key;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t inputaddr  = (uint32_t)Input;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t outputaddr = (uint32_t)Output;
 8003a4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a52:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t i = 0;
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8003a5a:	f107 0318 	add.w	r3, r7, #24
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe fbf0 	bl	8002244 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d103      	bne.n	8003a72 <CRYP_TDES_ECB+0x52>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	873b      	strh	r3, [r7, #56]	; 0x38
 8003a70:	e002      	b.n	8003a78 <CRYP_TDES_ECB+0x58>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8003a72:	f04f 0304 	mov.w	r3, #4
 8003a76:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	877b      	strh	r3, [r7, #58]	; 0x3a
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8003a7e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003a82:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&TDES_CRYP_InitStructure);
 8003a84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe fb01 	bl	8002090 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8003a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	66fb      	str	r3, [r7, #108]	; 0x6c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a96:	ba1c      	rev	r4, r3
 8003a98:	66bc      	str	r4, [r7, #104]	; 0x68
  return(result);
 8003a9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a9c:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8003a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aa0:	f103 0304 	add.w	r3, r3, #4
 8003aa4:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8003aa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	667b      	str	r3, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aae:	ba1c      	rev	r4, r3
 8003ab0:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 8003ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
  keyaddr+=4;
 8003ab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ab8:	f103 0304 	add.w	r3, r3, #4
 8003abc:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8003abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ac6:	ba1c      	rev	r4, r3
 8003ac8:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 8003aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
  keyaddr+=4;
 8003ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ad0:	f103 0304 	add.w	r3, r3, #4
 8003ad4:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8003ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	657b      	str	r3, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ade:	ba1c      	rev	r4, r3
 8003ae0:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 8003ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8003ae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ae8:	f103 0304 	add.w	r3, r3, #4
 8003aec:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8003aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af6:	ba1c      	rev	r4, r3
 8003af8:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 8003afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003afc:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8003afe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b00:	f103 0304 	add.w	r3, r3, #4
 8003b04:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8003b06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b0e:	ba1c      	rev	r4, r3
 8003b10:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 8003b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b14:	637b      	str	r3, [r7, #52]	; 0x34
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8003b16:	f107 0318 	add.w	r3, r7, #24
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe fb50 	bl	80021c0 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8003b20:	f7fe fbfa 	bl	8002318 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8003b24:	f04f 0001 	mov.w	r0, #1
 8003b28:	f7fe fc08 	bl	800233c <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b32:	e049      	b.n	8003bc8 <CRYP_TDES_ECB+0x1a8>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003b34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe fc24 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 8003b40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b44:	f103 0304 	add.w	r3, r3, #4
 8003b48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fc18 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 8003b58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b5c:	f103 0304 	add.w	r3, r3, #4
 8003b60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Wait until the complete message has been processed */
    counter = 0;
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8003b6a:	f04f 0010 	mov.w	r0, #16
 8003b6e:	f7fe fdc1 	bl	80026f4 <CRYP_GetFlagStatus>
 8003b72:	4603      	mov	r3, r0
 8003b74:	677b      	str	r3, [r7, #116]	; 0x74
      counter++;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f103 0301 	add.w	r3, r3, #1
 8003b7c:	617b      	str	r3, [r7, #20]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b84:	d002      	beq.n	8003b8c <CRYP_TDES_ECB+0x16c>
 8003b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1ee      	bne.n	8003b6a <CRYP_TDES_ECB+0x14a>

    if (busystatus != RESET)
 8003b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d004      	beq.n	8003b9c <CRYP_TDES_ECB+0x17c>
    {
       status = ERROR;
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003b9a:	e011      	b.n	8003bc0 <CRYP_TDES_ECB+0x1a0>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003b9c:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8003b9e:	f7fe fc03 	bl	80023a8 <CRYP_DataOut>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003ba6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ba8:	f103 0304 	add.w	r3, r3, #4
 8003bac:	67fb      	str	r3, [r7, #124]	; 0x7c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003bae:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8003bb0:	f7fe fbfa 	bl	80023a8 <CRYP_DataOut>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003bb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bba:	f103 0304 	add.w	r3, r3, #4
 8003bbe:	67fb      	str	r3, [r7, #124]	; 0x7c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8003bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bc2:	f103 0308 	add.w	r3, r3, #8
 8003bc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d203      	bcs.n	8003bd8 <CRYP_TDES_ECB+0x1b8>
 8003bd0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1ad      	bne.n	8003b34 <CRYP_TDES_ECB+0x114>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8003bd8:	f04f 0000 	mov.w	r0, #0
 8003bdc:	f7fe fbae 	bl	800233c <CRYP_Cmd>

  return status; 
 8003be0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	f107 078c 	add.w	r7, r7, #140	; 0x8c
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd90      	pop	{r4, r7, pc}
 8003bee:	bf00      	nop

08003bf0 <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8003bf0:	b590      	push	{r4, r7, lr}
 8003bf2:	b0ab      	sub	sp, #172	; 0xac
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  ErrorStatus status = SUCCESS;
 8003c0e:	f04f 0301 	mov.w	r3, #1
 8003c12:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t keyaddr    = (uint32_t)Key;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t inputaddr  = (uint32_t)Input;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  uint32_t outputaddr = (uint32_t)Output;
 8003c22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t i = 0;
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8003c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe fb01 	bl	8002244 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d104      	bne.n	8003c52 <CRYP_TDES_CBC+0x62>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003c50:	e003      	b.n	8003c5a <CRYP_TDES_CBC+0x6a>
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8003c52:	f04f 0304 	mov.w	r3, #4
 8003c56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 8003c5a:	f04f 0308 	mov.w	r3, #8
 8003c5e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8003c62:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003c66:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  CRYP_Init(&TDES_CRYP_InitStructure);
 8003c6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe fa0e 	bl	8002090 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8003c74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c82:	ba1c      	rev	r4, r3
 8003c84:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 8003c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8003c8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c92:	f103 0304 	add.w	r3, r3, #4
 8003c96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8003c9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ca8:	ba1c      	rev	r4, r3
 8003caa:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 8003cac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cae:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8003cb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cb4:	f103 0304 	add.w	r3, r3, #4
 8003cb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8003cbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cc6:	ba1c      	rev	r4, r3
 8003cc8:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 8003cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
  keyaddr+=4;
 8003cce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cd2:	f103 0304 	add.w	r3, r3, #4
 8003cd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8003cda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ce4:	ba1c      	rev	r4, r3
 8003ce6:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 8003ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cea:	63bb      	str	r3, [r7, #56]	; 0x38
  keyaddr+=4;
 8003cec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cf0:	f103 0304 	add.w	r3, r3, #4
 8003cf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8003cf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003d00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d02:	ba1c      	rev	r4, r3
 8003d04:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 8003d06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  keyaddr+=4;
 8003d0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d0e:	f103 0304 	add.w	r3, r3, #4
 8003d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8003d16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d20:	ba1c      	rev	r4, r3
 8003d22:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 8003d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d26:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8003d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fe fa47 	bl	80021c0 <CRYP_KeyInit>

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8003d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d3c:	ba1c      	rev	r4, r3
 8003d3e:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8003d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d42:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8003d44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d48:	f103 0304 	add.w	r3, r3, #4
 8003d4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8003d50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d5a:	ba1c      	rev	r4, r3
 8003d5c:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8003d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d60:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 8003d62:	f107 0314 	add.w	r3, r7, #20
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe fa96 	bl	8002298 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8003d6c:	f7fe fad4 	bl	8002318 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8003d70:	f04f 0001 	mov.w	r0, #1
 8003d74:	f7fe fae2 	bl	800233c <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d80:	e054      	b.n	8003e2c <CRYP_TDES_CBC+0x23c>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fe fafd 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 8003d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d92:	f103 0304 	add.w	r3, r3, #4
 8003d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fe faf1 	bl	8002388 <CRYP_DataIn>
    inputaddr+=4;
 8003da6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003daa:	f103 0304 	add.w	r3, r3, #4
 8003dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Wait until the complete message has been processed */
    counter = 0;
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8003db8:	f04f 0010 	mov.w	r0, #16
 8003dbc:	f7fe fc9a 	bl	80026f4 <CRYP_GetFlagStatus>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      counter++;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f103 0301 	add.w	r3, r3, #1
 8003dcc:	613b      	str	r3, [r7, #16]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd4:	d003      	beq.n	8003dde <CRYP_TDES_CBC+0x1ee>
 8003dd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1ec      	bne.n	8003db8 <CRYP_TDES_CBC+0x1c8>

    if (busystatus != RESET)
 8003dde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <CRYP_TDES_CBC+0x200>
   {
       status = ERROR;
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003dee:	e017      	b.n	8003e20 <CRYP_TDES_CBC+0x230>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003df0:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8003df4:	f7fe fad8 	bl	80023a8 <CRYP_DataOut>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003dfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e00:	f103 0304 	add.w	r3, r3, #4
 8003e04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003e08:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8003e0c:	f7fe facc 	bl	80023a8 <CRYP_DataOut>
 8003e10:	4603      	mov	r3, r0
 8003e12:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e18:	f103 0304 	add.w	r3, r3, #4
 8003e1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8003e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e24:	f103 0308 	add.w	r3, r3, #8
 8003e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e2c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003e30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d203      	bcs.n	8003e40 <CRYP_TDES_CBC+0x250>
 8003e38:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1a0      	bne.n	8003d82 <CRYP_TDES_CBC+0x192>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8003e40:	f04f 0000 	mov.w	r0, #0
 8003e44:	f7fe fa7a 	bl	800233c <CRYP_Cmd>

  return status; 
 8003e48:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f107 07ac 	add.w	r7, r7, #172	; 0xac
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd90      	pop	{r4, r7, pc}
 8003e56:	bf00      	nop

08003e58 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8003e5c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003e60:	f04f 0101 	mov.w	r1, #1
 8003e64:	f005 f9e8 	bl	8009238 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8003e68:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003e6c:	f04f 0100 	mov.w	r1, #0
 8003e70:	f005 f9e2 	bl	8009238 <RCC_APB1PeriphResetCmd>
}
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop

08003e78 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8003e8e:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8003e92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	ea6f 0303 	mvn.w	r3, r3
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8003ebc:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8003ed4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8003ed8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	601a      	str	r2, [r3, #0]
}
 8003ee0:	f107 0714 	add.w	r7, r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop

08003eec <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	60da      	str	r2, [r3, #12]
}
 8003f14:	f107 070c 	add.w	r7, r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop

08003f20 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d010      	beq.n	8003f54 <DAC_Cmd+0x34>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8003f32:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8003f36:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003f3a:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8003f3e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003f42:	6811      	ldr	r1, [r2, #0]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	f04f 0001 	mov.w	r0, #1
 8003f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e011      	b.n	8003f78 <DAC_Cmd+0x58>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8003f54:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8003f58:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003f5c:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8003f60:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003f64:	6811      	ldr	r1, [r2, #0]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	f04f 0001 	mov.w	r0, #1
 8003f6c:	fa00 f202 	lsl.w	r2, r0, r2
 8003f70:	ea6f 0202 	mvn.w	r2, r2
 8003f74:	400a      	ands	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]
  }
}
 8003f78:	f107 070c 	add.w	r7, r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop

08003f84 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d012      	beq.n	8003fbc <DAC_SoftwareTriggerCmd+0x38>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8003f96:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8003f9a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003f9e:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8003fa2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003fa6:	6851      	ldr	r1, [r2, #4]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	ea4f 1212 	mov.w	r2, r2, lsr #4
 8003fae:	f04f 0001 	mov.w	r0, #1
 8003fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
 8003fba:	e013      	b.n	8003fe4 <DAC_SoftwareTriggerCmd+0x60>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8003fbc:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8003fc0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003fc4:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8003fc8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003fcc:	6851      	ldr	r1, [r2, #4]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	ea4f 1212 	mov.w	r2, r2, lsr #4
 8003fd4:	f04f 0001 	mov.w	r0, #1
 8003fd8:	fa00 f202 	lsl.w	r2, r0, r2
 8003fdc:	ea6f 0202 	mvn.w	r2, r2
 8003fe0:	400a      	ands	r2, r1
 8003fe2:	605a      	str	r2, [r3, #4]
  }
}
 8003fe4:	f107 070c 	add.w	r7, r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc80      	pop	{r7}
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop

08003ff0 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00c      	beq.n	800401a <DAC_DualSoftwareTriggerCmd+0x2a>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8004000:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004004:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004008:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 800400c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004010:	6852      	ldr	r2, [r2, #4]
 8004012:	f042 0203 	orr.w	r2, r2, #3
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	e00b      	b.n	8004032 <DAC_DualSoftwareTriggerCmd+0x42>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 800401a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800401e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004022:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004026:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800402a:	6852      	ldr	r2, [r2, #4]
 800402c:	f022 0203 	bic.w	r2, r2, #3
 8004030:	605a      	str	r2, [r3, #4]
  }
}
 8004032:	f107 070c 	add.w	r7, r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	4613      	mov	r3, r2
 8004048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00f      	beq.n	8004070 <DAC_WaveGenerationCmd+0x34>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8004050:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004054:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004058:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 800405c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004060:	6811      	ldr	r1, [r2, #0]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	68b8      	ldr	r0, [r7, #8]
 8004066:	fa00 f202 	lsl.w	r2, r0, r2
 800406a:	430a      	orrs	r2, r1
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	e010      	b.n	8004092 <DAC_WaveGenerationCmd+0x56>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 8004070:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004074:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004078:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 800407c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004080:	6811      	ldr	r1, [r2, #0]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	68b8      	ldr	r0, [r7, #8]
 8004086:	fa00 f202 	lsl.w	r2, r0, r2
 800408a:	ea6f 0202 	mvn.w	r2, r2
 800408e:	400a      	ands	r2, r1
 8004090:	601a      	str	r2, [r3, #0]
  }
}
 8004092:	f107 0714 	add.w	r7, r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80040ae:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80040b2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80040b6:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	18d3      	adds	r3, r2, r3
 80040be:	f103 0308 	add.w	r3, r3, #8
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	887a      	ldrh	r2, [r7, #2]
 80040c8:	601a      	str	r2, [r3, #0]
}
 80040ca:	f107 0714 	add.w	r7, r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 80040e6:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80040ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80040ee:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	18d3      	adds	r3, r2, r3
 80040f6:	f103 0314 	add.w	r3, r3, #20
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	887a      	ldrh	r2, [r7, #2]
 8004100:	601a      	str	r2, [r3, #0]
}
 8004102:	f107 0714 	add.w	r7, r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	460a      	mov	r2, r1
 8004118:	807a      	strh	r2, [r7, #2]
 800411a:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b08      	cmp	r3, #8
 800412c:	d106      	bne.n	800413c <DAC_SetDualChannelData+0x30>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 800412e:	887b      	ldrh	r3, [r7, #2]
 8004130:	ea4f 2203 	mov.w	r2, r3, lsl #8
 8004134:	883b      	ldrh	r3, [r7, #0]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e005      	b.n	8004148 <DAC_SetDualChannelData+0x3c>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 800413c:	887b      	ldrh	r3, [r7, #2]
 800413e:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8004142:	883b      	ldrh	r3, [r7, #0]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 8004148:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800414c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004150:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	18d3      	adds	r3, r2, r3
 8004158:	f103 0320 	add.w	r3, r3, #32
 800415c:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	601a      	str	r2, [r3, #0]
}
 8004164:	f107 0714 	add.w	r7, r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop

08004170 <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 800417e:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004182:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004186:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	ea4f 0293 	mov.w	r2, r3, lsr #2
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	18d3      	adds	r3, r2, r3
 8004192:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8004196:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	b29b      	uxth	r3, r3
}
 800419e:	4618      	mov	r0, r3
 80041a0:	f107 0714 	add.w	r7, r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop

080041ac <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d010      	beq.n	80041e0 <DAC_DMACmd+0x34>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 80041be:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80041c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80041c6:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80041ca:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80041ce:	6811      	ldr	r1, [r2, #0]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80041d6:	fa00 f202 	lsl.w	r2, r0, r2
 80041da:	430a      	orrs	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	e011      	b.n	8004204 <DAC_DMACmd+0x58>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 80041e0:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80041e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80041e8:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80041ec:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80041f0:	6811      	ldr	r1, [r2, #0]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80041f8:	fa00 f202 	lsl.w	r2, r0, r2
 80041fc:	ea6f 0202 	mvn.w	r2, r2
 8004200:	400a      	ands	r2, r1
 8004202:	601a      	str	r2, [r3, #0]
  }
}
 8004204:	f107 070c 	add.w	r7, r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop

08004210 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	4613      	mov	r3, r2
 800421c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00f      	beq.n	8004244 <DAC_ITConfig+0x34>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 8004224:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004228:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800422c:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004230:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004234:	6811      	ldr	r1, [r2, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	68b8      	ldr	r0, [r7, #8]
 800423a:	fa00 f202 	lsl.w	r2, r0, r2
 800423e:	430a      	orrs	r2, r1
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	e010      	b.n	8004266 <DAC_ITConfig+0x56>
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 8004244:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004248:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800424c:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004250:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004254:	6811      	ldr	r1, [r2, #0]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	68b8      	ldr	r0, [r7, #8]
 800425a:	fa00 f202 	lsl.w	r2, r0, r2
 800425e:	ea6f 0202 	mvn.w	r2, r2
 8004262:	400a      	ands	r2, r1
 8004264:	601a      	str	r2, [r3, #0]
  }
}
 8004266:	f107 0714 	add.w	r7, r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 8004280:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004284:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6839      	ldr	r1, [r7, #0]
 800428e:	fa01 f303 	lsl.w	r3, r1, r3
 8004292:	4013      	ands	r3, r2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <DAC_GetFlagStatus+0x30>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 8004298:	f04f 0301 	mov.w	r3, #1
 800429c:	73fb      	strb	r3, [r7, #15]
 800429e:	e002      	b.n	80042a6 <DAC_GetFlagStatus+0x36>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	f107 0714 	add.w	r7, r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr

080042b4 <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 80042be:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80042c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6839      	ldr	r1, [r7, #0]
 80042ca:	fa01 f202 	lsl.w	r2, r1, r2
 80042ce:	635a      	str	r2, [r3, #52]	; 0x34
}
 80042d0:	f107 070c 	add.w	r7, r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop

080042dc <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 80042f2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80042f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6839      	ldr	r1, [r7, #0]
 8004300:	fa01 f303 	lsl.w	r3, r1, r3
 8004304:	4013      	ands	r3, r2
 8004306:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 8004308:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800430c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6839      	ldr	r1, [r7, #0]
 8004316:	fa01 f303 	lsl.w	r3, r1, r3
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d006      	beq.n	800432e <DAC_GetITStatus+0x52>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <DAC_GetITStatus+0x52>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 8004326:	f04f 0301 	mov.w	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
 800432c:	e002      	b.n	8004334 <DAC_GetITStatus+0x58>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
}
 8004336:	4618      	mov	r0, r3
 8004338:	f107 0714 	add.w	r7, r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop

08004344 <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 800434e:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004352:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6839      	ldr	r1, [r7, #0]
 800435a:	fa01 f202 	lsl.w	r2, r1, r2
 800435e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004360:	f107 070c 	add.w	r7, r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop

0800436c <DBGMCU_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE >> 16);
 8004370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004374:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 800437e:	4618      	mov	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop

08004388 <DBGMCU_GetDEVID>:
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 800438c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004390:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800439a:	ea4f 5313 	mov.w	r3, r3, lsr #20
}
 800439e:	4618      	mov	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop

080043a8 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00c      	beq.n	80043d4 <DBGMCU_Config+0x2c>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 80043ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043be:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80043c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043c6:	f2ce 0204 	movt	r2, #57348	; 0xe004
 80043ca:	6851      	ldr	r1, [r2, #4]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	e00d      	b.n	80043f0 <DBGMCU_Config+0x48>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 80043d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043d8:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80043dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043e0:	f2ce 0204 	movt	r2, #57348	; 0xe004
 80043e4:	6851      	ldr	r1, [r2, #4]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	ea6f 0202 	mvn.w	r2, r2
 80043ec:	400a      	ands	r2, r1
 80043ee:	605a      	str	r2, [r3, #4]
  }
}
 80043f0:	f107 070c 	add.w	r7, r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop

080043fc <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00c      	beq.n	8004428 <DBGMCU_APB1PeriphConfig+0x2c>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 800440e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004412:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8004416:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800441a:	f2ce 0204 	movt	r2, #57348	; 0xe004
 800441e:	6891      	ldr	r1, [r2, #8]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	430a      	orrs	r2, r1
 8004424:	609a      	str	r2, [r3, #8]
 8004426:	e00d      	b.n	8004444 <DBGMCU_APB1PeriphConfig+0x48>
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 8004428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800442c:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8004430:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004434:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8004438:	6891      	ldr	r1, [r2, #8]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	ea6f 0202 	mvn.w	r2, r2
 8004440:	400a      	ands	r2, r1
 8004442:	609a      	str	r2, [r3, #8]
  }
}
 8004444:	f107 070c 	add.w	r7, r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop

08004450 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00c      	beq.n	800447c <DBGMCU_APB2PeriphConfig+0x2c>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 8004462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004466:	f2ce 0304 	movt	r3, #57348	; 0xe004
 800446a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800446e:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8004472:	68d1      	ldr	r1, [r2, #12]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	430a      	orrs	r2, r1
 8004478:	60da      	str	r2, [r3, #12]
 800447a:	e00d      	b.n	8004498 <DBGMCU_APB2PeriphConfig+0x48>
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 800447c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004480:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8004484:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004488:	f2ce 0204 	movt	r2, #57348	; 0xe004
 800448c:	68d1      	ldr	r1, [r2, #12]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	ea6f 0202 	mvn.w	r2, r2
 8004494:	400a      	ands	r2, r1
 8004496:	60da      	str	r2, [r3, #12]
  }
}
 8004498:	f107 070c 	add.w	r7, r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop

080044a4 <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80044cc:	f04f 021f 	mov.w	r2, #31
 80044d0:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	625a      	str	r2, [r3, #36]	; 0x24
}
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f2c5 0205 	movt	r2, #20485	; 0x5005
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800454c:	f023 0302 	bic.w	r3, r3, #2
 8004550:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800455a:	4313      	orrs	r3, r2
 800455c:	b29a      	uxth	r2, r3
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8004562:	4313      	orrs	r3, r2
 8004564:	b29a      	uxth	r2, r3
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800456a:	4313      	orrs	r3, r2
 800456c:	b29a      	uxth	r2, r3
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 8004572:	4313      	orrs	r3, r2
 8004574:	b29a      	uxth	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	895b      	ldrh	r3, [r3, #10]
 800457a:	4313      	orrs	r3, r2
 800457c:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	899b      	ldrh	r3, [r3, #12]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8004582:	4313      	orrs	r3, r2
 8004584:	b29b      	uxth	r3, r3
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
                     DCMI_InitStruct->DCMI_ExtendedDataMode);

  DCMI->CR = temp;                              
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	601a      	str	r2, [r3, #0]
}
 8004598:	f107 0714 	add.w	r7, r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop

080045a4 <DCMI_StructInit>:
  * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	801a      	strh	r2, [r3, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	805a      	strh	r2, [r3, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	809a      	strh	r2, [r3, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	80da      	strh	r2, [r3, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	811a      	strh	r2, [r3, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	815a      	strh	r2, [r3, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	819a      	strh	r2, [r3, #12]
}
 80045e4:	f107 070c 	add.w	r7, r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop

080045f0 <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	8852      	ldrh	r2, [r2, #2]
 8004604:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	8812      	ldrh	r2, [r2, #0]
 800460a:	ea4f 4202 	mov.w	r2, r2, lsl #16
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 800460e:	430a      	orrs	r2, r1
 8004610:	621a      	str	r2, [r3, #32]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	88d2      	ldrh	r2, [r2, #6]
 800461e:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	8892      	ldrh	r2, [r2, #4]
 8004624:	ea4f 4202 	mov.w	r2, r2, lsl #16
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8004628:	430a      	orrs	r2, r1
 800462a:	625a      	str	r2, [r3, #36]	; 0x24
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
}
 800462c:	f107 070c 	add.w	r7, r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop

08004638 <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	4603      	mov	r3, r0
 8004640:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00c      	beq.n	8004662 <DCMI_CROPCmd+0x2a>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	f042 0204 	orr.w	r2, r2, #4
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	e00b      	b.n	800467a <DCMI_CROPCmd+0x42>
  }
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8004672:	6812      	ldr	r2, [r2, #0]
 8004674:	f022 0204 	bic.w	r2, r2, #4
 8004678:	601a      	str	r2, [r3, #0]
  }
}
 800467a:	f107 070c 	add.w	r7, r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <DCMI_SetEmbeddedSynchroCodes>:
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	7812      	ldrb	r2, [r2, #0]
 8004698:	4611      	mov	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	7852      	ldrb	r2, [r2, #1]
 800469e:	ea4f 2202 	mov.w	r2, r2, lsl #8
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 80046a2:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	7892      	ldrb	r2, [r2, #2]
 80046a8:	ea4f 4202 	mov.w	r2, r2, lsl #16
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 80046ac:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	78d2      	ldrb	r2, [r2, #3]
 80046b2:	ea4f 6202 	mov.w	r2, r2, lsl #24
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 80046b6:	430a      	orrs	r2, r1
 80046b8:	619a      	str	r2, [r3, #24]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
}
 80046ba:	f107 070c 	add.w	r7, r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00c      	beq.n	80046ee <DCMI_JPEGCmd+0x2a>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	f042 0208 	orr.w	r2, r2, #8
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	e00b      	b.n	8004706 <DCMI_JPEGCmd+0x42>
  }
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	f022 0208 	bic.w	r2, r2, #8
 8004704:	601a      	str	r2, [r3, #0]
  }
}
 8004706:	f107 070c 	add.w	r7, r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr

08004710 <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00c      	beq.n	800473a <DCMI_Cmd+0x2a>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	e00b      	b.n	8004752 <DCMI_Cmd+0x42>
  }
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f2c5 0205 	movt	r2, #20485	; 0x5005
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004750:	601a      	str	r2, [r3, #0]
  }
}
 8004752:	f107 070c 	add.w	r7, r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr

0800475c <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00c      	beq.n	8004786 <DCMI_CaptureCmd+0x2a>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	f2c5 0205 	movt	r2, #20485	; 0x5005
 800477c:	6812      	ldr	r2, [r2, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	e00b      	b.n	800479e <DCMI_CaptureCmd+0x42>
  }
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	f022 0201 	bic.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]
  }
}
 800479e:	f107 070c 	add.w	r7, r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <DCMI_ReadData>:
  * @brief  Reads the data stored in the DR register.
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  return DCMI->DR;
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop

080047c0 <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	80fa      	strh	r2, [r7, #6]
 80047cc:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80047ce:	797b      	ldrb	r3, [r7, #5]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00c      	beq.n	80047ee <DCMI_ITConfig+0x2e>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80047e4:	68d1      	ldr	r1, [r2, #12]
 80047e6:	88fa      	ldrh	r2, [r7, #6]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	60da      	str	r2, [r3, #12]
 80047ec:	e00e      	b.n	800480c <DCMI_ITConfig+0x4c>
  }
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80047fe:	68d1      	ldr	r1, [r2, #12]
 8004800:	88fa      	ldrh	r2, [r7, #6]
 8004802:	ea6f 0202 	mvn.w	r2, r2
 8004806:	b292      	uxth	r2, r2
 8004808:	400a      	ands	r2, r1
 800480a:	60da      	str	r2, [r3, #12]
  }  
}
 800480c:	f107 070c 	add.w	r7, r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop

08004818 <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	ea4f 3313 	mov.w	r3, r3, lsr #12
 8004834:	b29b      	uxth	r3, r3
 8004836:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x00) /* The FLAG is in RISR register */
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <DCMI_GetFlagStatus+0x34>
  {
    tempreg= DCMI->RISR;
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	e00f      	b.n	800486c <DCMI_GetFlagStatus+0x54>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d106      	bne.n	8004860 <DCMI_GetFlagStatus+0x48>
  {
    tempreg = DCMI->SR;
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	e005      	b.n	800486c <DCMI_GetFlagStatus+0x54>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 800486c:	88fa      	ldrh	r2, [r7, #6]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4013      	ands	r3, r2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <DCMI_GetFlagStatus+0x66>
  {
    bitstatus = SET;
 8004876:	f04f 0301 	mov.w	r3, #1
 800487a:	75fb      	strb	r3, [r7, #23]
 800487c:	e002      	b.n	8004884 <DCMI_GetFlagStatus+0x6c>
  }
  else
  {
    bitstatus = RESET;
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
}
 8004886:	4618      	mov	r0, r3
 8004888:	f107 071c 	add.w	r7, r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	bc80      	pop	{r7}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop

08004894 <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80048a6:	88fa      	ldrh	r2, [r7, #6]
 80048a8:	615a      	str	r2, [r3, #20]
}
 80048aa:	f107 070c 	add.w	r7, r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <DCMI_GetITStatus>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval The new state of DCMI_IT (SET or RESET).
  */
ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	4603      	mov	r3, r0
 80048bc:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	73fb      	strb	r3, [r7, #15]
  uint32_t itstatus = 0;
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	4013      	ands	r3, r2
 80048d8:	60bb      	str	r3, [r7, #8]
  
  if ((itstatus != (uint16_t)RESET))
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <DCMI_GetITStatus+0x34>
  {
    bitstatus = SET;
 80048e0:	f04f 0301 	mov.w	r3, #1
 80048e4:	73fb      	strb	r3, [r7, #15]
 80048e6:	e002      	b.n	80048ee <DCMI_GetITStatus+0x3a>
  }
  else
  {
    bitstatus = RESET;
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	f107 0714 	add.w	r7, r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <DCMI_ClearITPendingBit>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval None
  */
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	80fb      	strh	r3, [r7, #6]
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800490e:	88fa      	ldrh	r2, [r7, #6]
 8004910:	615a      	str	r2, [r3, #20]
}
 8004912:	f107 070c 	add.w	r7, r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr

0800491c <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f023 0201 	bic.w	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f04f 0221 	mov.w	r2, #33	; 0x21
 800495e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	f246 0310 	movw	r3, #24592	; 0x6010
 8004966:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800496a:	429a      	cmp	r2, r3
 800496c:	d107      	bne.n	800497e <DMA_DeInit+0x62>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800496e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004972:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004976:	f04f 023d 	mov.w	r2, #61	; 0x3d
 800497a:	609a      	str	r2, [r3, #8]
 800497c:	e0eb      	b.n	8004b56 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	f246 0328 	movw	r3, #24616	; 0x6028
 8004984:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004988:	429a      	cmp	r2, r3
 800498a:	d107      	bne.n	800499c <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 800498c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004990:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004994:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8004998:	609a      	str	r2, [r3, #8]
 800499a:	e0dc      	b.n	8004b56 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	f246 0340 	movw	r3, #24640	; 0x6040
 80049a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d107      	bne.n	80049ba <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 80049aa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80049ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80049b2:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	e0cd      	b.n	8004b56 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	f246 0358 	movw	r3, #24664	; 0x6058
 80049c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d107      	bne.n	80049d8 <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 80049c8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80049cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80049d0:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80049d4:	609a      	str	r2, [r3, #8]
 80049d6:	e0be      	b.n	8004b56 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	f246 0370 	movw	r3, #24688	; 0x6070
 80049de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d109      	bne.n	80049fa <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 80049e6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80049ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80049ee:	f04f 023d 	mov.w	r2, #61	; 0x3d
 80049f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80049f6:	60da      	str	r2, [r3, #12]
 80049f8:	e0ad      	b.n	8004b56 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	f246 0388 	movw	r3, #24712	; 0x6088
 8004a00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d109      	bne.n	8004a1c <DMA_DeInit+0x100>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8004a08:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a10:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8004a14:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004a18:	60da      	str	r2, [r3, #12]
 8004a1a:	e09c      	b.n	8004b56 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	f246 03a0 	movw	r3, #24736	; 0x60a0
 8004a22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d109      	bne.n	8004a3e <DMA_DeInit+0x122>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8004a2a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004a2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8004a3a:	60da      	str	r2, [r3, #12]
 8004a3c:	e08b      	b.n	8004b56 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	f246 03b8 	movw	r3, #24760	; 0x60b8
 8004a44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d107      	bne.n	8004a5c <DMA_DeInit+0x140>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8004a4c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004a50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a54:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8004a58:	60da      	str	r2, [r3, #12]
 8004a5a:	e07c      	b.n	8004b56 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	f246 4310 	movw	r3, #25616	; 0x6410
 8004a62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d107      	bne.n	8004a7a <DMA_DeInit+0x15e>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8004a6a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004a6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a72:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8004a76:	609a      	str	r2, [r3, #8]
 8004a78:	e06d      	b.n	8004b56 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	f246 4328 	movw	r3, #25640	; 0x6428
 8004a80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d107      	bne.n	8004a98 <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8004a88:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004a8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a90:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8004a94:	609a      	str	r2, [r3, #8]
 8004a96:	e05e      	b.n	8004b56 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	f246 4340 	movw	r3, #25664	; 0x6440
 8004a9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d107      	bne.n	8004ab6 <DMA_DeInit+0x19a>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8004aa6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004aaa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004aae:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	e04f      	b.n	8004b56 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	f246 4358 	movw	r3, #25688	; 0x6458
 8004abc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d107      	bne.n	8004ad4 <DMA_DeInit+0x1b8>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8004ac4:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004ac8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004acc:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8004ad0:	609a      	str	r2, [r3, #8]
 8004ad2:	e040      	b.n	8004b56 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	f246 4370 	movw	r3, #25712	; 0x6470
 8004ada:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d109      	bne.n	8004af6 <DMA_DeInit+0x1da>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8004ae2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004ae6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004aea:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8004aee:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004af2:	60da      	str	r2, [r3, #12]
 8004af4:	e02f      	b.n	8004b56 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	f246 4388 	movw	r3, #25736	; 0x6488
 8004afc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d109      	bne.n	8004b18 <DMA_DeInit+0x1fc>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8004b04:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004b08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b0c:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8004b10:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004b14:	60da      	str	r2, [r3, #12]
 8004b16:	e01e      	b.n	8004b56 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	f246 43a0 	movw	r3, #25760	; 0x64a0
 8004b1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d109      	bne.n	8004b3a <DMA_DeInit+0x21e>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8004b26:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004b2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8004b36:	60da      	str	r2, [r3, #12]
 8004b38:	e00d      	b.n	8004b56 <DMA_DeInit+0x23a>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	f246 43b8 	movw	r3, #25784	; 0x64b8
 8004b40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d106      	bne.n	8004b56 <DMA_DeInit+0x23a>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8004b48:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004b4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b50:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8004b54:	60da      	str	r2, [r3, #12]
    }
  }
}
 8004b56:	f107 070c 	add.w	r7, r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr

08004b60 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	f248 033f 	movw	r3, #32831	; 0x803f
 8004b7c:	f2cf 031c 	movt	r3, #61468	; 0xf01c
 8004b80:	4013      	ands	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004b92:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004b9e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004baa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8004bb6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0307 	bic.w	r3, r3, #7
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	4313      	orrs	r3, r2
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	60da      	str	r2, [r3, #12]
}
 8004c06:	f107 0714 	add.w	r7, r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004c90:	f107 070c 	add.w	r7, r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop

08004c9c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d006      	beq.n	8004cbc <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f043 0201 	orr.w	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	e005      	b.n	8004cc8 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f023 0201 	bic.w	r2, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	601a      	str	r2, [r3, #0]
  }
}
 8004cc8:	f107 070c 	add.w	r7, r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop

08004cd4 <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d006      	beq.n	8004cf2 <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	e005      	b.n	8004cfe <DMA_PeriphIncOffsetSizeConfig+0x2a>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	601a      	str	r2, [r3, #0]
  }
}
 8004cfe:	f107 070c 	add.w	r7, r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr

08004d08 <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d006      	beq.n	8004d26 <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f043 0220 	orr.w	r2, r3, #32
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e005      	b.n	8004d32 <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f023 0220 	bic.w	r2, r3, #32
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	601a      	str	r2, [r3, #0]
  }
}
 8004d32:	f107 070c 	add.w	r7, r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr

08004d3c <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8004d48:	887a      	ldrh	r2, [r7, #2]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	605a      	str	r2, [r3, #4]
}
 8004d4e:	f107 070c 	add.w	r7, r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bc80      	pop	{r7}
 8004d56:	4770      	bx	lr

08004d58 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	b29b      	uxth	r3, r3
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	f107 070c 	add.w	r7, r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bc80      	pop	{r7}
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop

08004d74 <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d006      	beq.n	8004d94 <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	e005      	b.n	8004da0 <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	611a      	str	r2, [r3, #16]
}
 8004da6:	f107 0714 	add.w	r7, r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr

08004db0 <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d006      	beq.n	8004dd0 <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	e005      	b.n	8004ddc <DMA_DoubleBufferModeCmd+0x2c>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	601a      	str	r2, [r3, #0]
  }
}
 8004ddc:	f107 070c 	add.w	r7, r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop

08004de8 <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	611a      	str	r2, [r3, #16]
 8004e00:	e002      	b.n	8004e08 <DMA_MemoryTargetConfig+0x20>
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	60da      	str	r2, [r3, #12]
  }
}
 8004e08:	f107 0714 	add.w	r7, r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop

08004e14 <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <DMA_GetCurrentMemoryTarget+0x22>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 8004e2e:	f04f 0301 	mov.w	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	e002      	b.n	8004e3c <DMA_GetCurrentMemoryTarget+0x28>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f107 0714 	add.w	r7, r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop

08004e4c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <DMA_GetCmdStatus+0x24>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8004e68:	f04f 0301 	mov.w	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
 8004e6e:	e002      	b.n	8004e76 <DMA_GetCmdStatus+0x2a>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f107 0714 	add.w	r7, r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc80      	pop	{r7}
 8004e82:	4770      	bx	lr

08004e84 <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e9a:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f107 0714 	add.w	r7, r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bc80      	pop	{r7}
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop

08004eac <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	f246 430f 	movw	r3, #25615	; 0x640f
 8004ec8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d805      	bhi.n	8004edc <DMA_GetFlagStatus+0x30>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004ed0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004ed4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ed8:	613b      	str	r3, [r7, #16]
 8004eda:	e004      	b.n	8004ee6 <DMA_GetFlagStatus+0x3a>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8004edc:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ee4:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <DMA_GetFlagStatus+0x4c>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	e002      	b.n	8004efe <DMA_GetFlagStatus+0x52>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004f04:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <DMA_GetFlagStatus+0x70>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8004f14:	f04f 0301 	mov.w	r3, #1
 8004f18:	75fb      	strb	r3, [r7, #23]
 8004f1a:	e002      	b.n	8004f22 <DMA_GetFlagStatus+0x76>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	f107 071c 	add.w	r7, r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr

08004f30 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	f246 430f 	movw	r3, #25615	; 0x640f
 8004f40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d805      	bhi.n	8004f54 <DMA_ClearFlag+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004f48:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004f4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	e004      	b.n	8004f5e <DMA_ClearFlag+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8004f54:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004f58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f5c:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d007      	beq.n	8004f78 <DMA_ClearFlag+0x48>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004f6e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	60d3      	str	r3, [r2, #12]
 8004f76:	e006      	b.n	8004f86 <DMA_ClearFlag+0x56>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004f7e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	6093      	str	r3, [r2, #8]
  }    
}
 8004f86:	f107 0714 	add.w	r7, r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr

08004f90 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00f      	beq.n	8004fc8 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d006      	beq.n	8004fbc <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	615a      	str	r2, [r3, #20]
 8004fba:	e005      	b.n	8004fc8 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b80      	cmp	r3, #128	; 0x80
 8004fcc:	d015      	beq.n	8004ffa <DMA_ITConfig+0x6a>
  {
    if (NewState != DISABLE)
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d008      	beq.n	8004fe6 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f003 031e 	and.w	r3, r3, #30
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e009      	b.n	8004ffa <DMA_ITConfig+0x6a>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f003 031e 	and.w	r3, r3, #30
 8004ff0:	ea6f 0303 	mvn.w	r3, r3
 8004ff4:	401a      	ands	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8004ffa:	f107 0714 	add.w	r7, r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr

08005004 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	f246 430f 	movw	r3, #25615	; 0x640f
 8005026:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800502a:	429a      	cmp	r2, r3
 800502c:	d805      	bhi.n	800503a <DMA_GetITStatus+0x36>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800502e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005032:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	e004      	b.n	8005044 <DMA_GetITStatus+0x40>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800503a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800503e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005042:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800504a:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <DMA_GetITStatus+0x66>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005058:	f003 031e 	and.w	r3, r3, #30
 800505c:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4013      	ands	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]
 8005068:	e004      	b.n	8005074 <DMA_GetITStatus+0x70>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005072:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <DMA_GetITStatus+0x82>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e002      	b.n	800508c <DMA_GetITStatus+0x88>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8005092:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8005096:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	4013      	ands	r3, r2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d006      	beq.n	80050b0 <DMA_GetITStatus+0xac>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <DMA_GetITStatus+0xac>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 80050a8:	f04f 0301 	mov.w	r3, #1
 80050ac:	75fb      	strb	r3, [r7, #23]
 80050ae:	e002      	b.n	80050b6 <DMA_GetITStatus+0xb2>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 80050b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	f107 071c 	add.w	r7, r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	bc80      	pop	{r7}
 80050c2:	4770      	bx	lr

080050c4 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	f246 430f 	movw	r3, #25615	; 0x640f
 80050d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80050d8:	429a      	cmp	r2, r3
 80050da:	d805      	bhi.n	80050e8 <DMA_ClearITPendingBit+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80050dc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80050e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	e004      	b.n	80050f2 <DMA_ClearITPendingBit+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80050e8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80050ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80050f0:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <DMA_ClearITPendingBit+0x48>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8005102:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	60d3      	str	r3, [r2, #12]
 800510a:	e006      	b.n	800511a <DMA_ClearITPendingBit+0x56>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8005112:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	6093      	str	r3, [r2, #8]
  }   
}
 800511a:	f107 0714 	add.w	r7, r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr

08005124 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8005128:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800512c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8005136:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800513a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8005144:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005148:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8005152:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005156:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8005160:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005164:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800516c:	f2c0 027f 	movt	r2, #127	; 0x7f
 8005170:	615a      	str	r2, [r3, #20]
}
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr

08005178 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8005186:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800518a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800518e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	799b      	ldrb	r3, [r3, #6]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d078      	beq.n	800528a <EXTI_Init+0x112>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8005198:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800519c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80051a0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80051a4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80051a8:	6811      	ldr	r1, [r2, #0]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	ea6f 0202 	mvn.w	r2, r2
 80051b2:	400a      	ands	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80051b6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80051ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80051be:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80051c2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80051c6:	6851      	ldr	r1, [r2, #4]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	ea6f 0202 	mvn.w	r2, r2
 80051d0:	400a      	ands	r2, r1
 80051d2:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	791b      	ldrb	r3, [r3, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	18d3      	adds	r3, r2, r3
 80051dc:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	6811      	ldr	r1, [r2, #0]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6812      	ldr	r2, [r2, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80051ec:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80051f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80051f4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80051f8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80051fc:	6891      	ldr	r1, [r2, #8]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	ea6f 0202 	mvn.w	r2, r2
 8005206:	400a      	ands	r2, r1
 8005208:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800520a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800520e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005212:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005216:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800521a:	68d1      	ldr	r1, [r2, #12]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	ea6f 0202 	mvn.w	r2, r2
 8005224:	400a      	ands	r2, r1
 8005226:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	795b      	ldrb	r3, [r3, #5]
 800522c:	2b10      	cmp	r3, #16
 800522e:	d11a      	bne.n	8005266 <EXTI_Init+0xee>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8005230:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005234:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005238:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800523c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005240:	6891      	ldr	r1, [r2, #8]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800524a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800524e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005252:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005256:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800525a:	68d1      	ldr	r1, [r2, #12]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	60da      	str	r2, [r3, #12]
 8005264:	e01f      	b.n	80052a6 <EXTI_Init+0x12e>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8005266:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800526a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800526e:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	795b      	ldrb	r3, [r3, #5]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	18d3      	adds	r3, r2, r3
 8005278:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	6811      	ldr	r1, [r2, #0]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	e00d      	b.n	80052a6 <EXTI_Init+0x12e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	791b      	ldrb	r3, [r3, #4]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	18d3      	adds	r3, r2, r3
 8005292:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	6811      	ldr	r1, [r2, #0]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6812      	ldr	r2, [r2, #0]
 800529e:	ea6f 0202 	mvn.w	r2, r2
 80052a2:	400a      	ands	r2, r1
 80052a4:	601a      	str	r2, [r3, #0]
  }
}
 80052a6:	f107 0714 	add.w	r7, r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr

080052b0 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f04f 0200 	mov.w	r2, #0
 80052c6:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f04f 020c 	mov.w	r2, #12
 80052ce:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	719a      	strb	r2, [r3, #6]
}
 80052d8:	f107 070c 	add.w	r7, r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop

080052e4 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 80052ec:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80052f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80052f4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80052f8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80052fc:	6911      	ldr	r1, [r2, #16]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	430a      	orrs	r2, r1
 8005302:	611a      	str	r2, [r3, #16]
}
 8005304:	f107 070c 	add.w	r7, r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop

08005310 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800531e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005322:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005326:	695a      	ldr	r2, [r3, #20]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4013      	ands	r3, r2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <EXTI_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 8005330:	f04f 0301 	mov.w	r3, #1
 8005334:	73fb      	strb	r3, [r7, #15]
 8005336:	e002      	b.n	800533e <EXTI_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800533e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005340:	4618      	mov	r0, r3
 8005342:	f107 0714 	add.w	r7, r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr

0800534c <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8005354:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005358:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	615a      	str	r2, [r3, #20]
}
 8005360:	f107 070c 	add.w	r7, r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop

0800536c <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8005380:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005384:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4013      	ands	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8005390:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005394:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005398:	695a      	ldr	r2, [r3, #20]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4013      	ands	r3, r2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d006      	beq.n	80053b0 <EXTI_GetITStatus+0x44>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <EXTI_GetITStatus+0x44>
  {
    bitstatus = SET;
 80053a8:	f04f 0301 	mov.w	r3, #1
 80053ac:	73fb      	strb	r3, [r7, #15]
 80053ae:	e002      	b.n	80053b6 <EXTI_GetITStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	f107 0714 	add.w	r7, r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr

080053c4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80053cc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053d0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	615a      	str	r2, [r3, #20]
}
 80053d8:	f107 070c 	add.w	r7, r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop

080053e4 <FLASH_SetLatency>:
  *            @arg FLASH_Latency_6: FLASH Six Latency cycles
  *            @arg FLASH_Latency_7: FLASH Seven Latency cycles      
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 80053ec:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]
}
 80053fa:	f107 070c 	add.w	r7, r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr

08005404 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00c      	beq.n	800542e <FLASH_PrefetchBufferCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8005414:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005418:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800541c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005420:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	e00b      	b.n	8005446 <FLASH_PrefetchBufferCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 800542e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005432:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005436:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800543a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005444:	601a      	str	r2, [r3, #0]
  }
}
 8005446:	f107 070c 	add.w	r7, r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr

08005450 <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800545a:	79fb      	ldrb	r3, [r7, #7]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00c      	beq.n	800547a <FLASH_InstructionCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 8005460:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005464:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005468:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800546c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005470:	6812      	ldr	r2, [r2, #0]
 8005472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	e00b      	b.n	8005492 <FLASH_InstructionCacheCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 800547a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800547e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005482:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005486:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005490:	601a      	str	r2, [r3, #0]
  }
}
 8005492:	f107 070c 	add.w	r7, r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr

0800549c <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 80054a6:	79fb      	ldrb	r3, [r7, #7]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00c      	beq.n	80054c6 <FLASH_DataCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 80054ac:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80054b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80054b4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80054b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80054bc:	6812      	ldr	r2, [r2, #0]
 80054be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e00b      	b.n	80054de <FLASH_DataCacheCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 80054c6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80054ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80054ce:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80054d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054dc:	601a      	str	r2, [r3, #0]
  }
}
 80054de:	f107 070c 	add.w	r7, r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr

080054e8 <FLASH_InstructionCacheReset>:
  * @note   This function must be used only when the Instruction Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_ICRST;
 80054ec:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80054f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80054f4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80054f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005502:	601a      	str	r2, [r3, #0]
}
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop

0800550c <FLASH_DataCacheReset>:
  * @note   This function must be used only when the Data Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_DCRST;
 8005510:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005514:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005518:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800551c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005520:	6812      	ldr	r2, [r2, #0]
 8005522:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005526:	601a      	str	r2, [r3, #0]
}
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop

08005530 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8005534:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005538:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	da11      	bge.n	8005566 <FLASH_Unlock+0x36>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8005542:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005546:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800554a:	f240 1223 	movw	r2, #291	; 0x123
 800554e:	f2c4 5267 	movt	r2, #17767	; 0x4567
 8005552:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8005554:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005558:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800555c:	f648 12ab 	movw	r2, #35243	; 0x89ab
 8005560:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 8005564:	605a      	str	r2, [r3, #4]
  }  
}
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr

0800556c <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005570:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005574:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005578:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800557c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005580:	6912      	ldr	r2, [r2, #16]
 8005582:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005586:	611a      	str	r2, [r3, #16]
}
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop

08005590 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 80055a2:	f04f 0308 	mov.w	r3, #8
 80055a6:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d103      	bne.n	80055b6 <FLASH_EraseSector+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	e010      	b.n	80055d8 <FLASH_EraseSector+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 80055b6:	78fb      	ldrb	r3, [r7, #3]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d103      	bne.n	80055c4 <FLASH_EraseSector+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80055bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	e009      	b.n	80055d8 <FLASH_EraseSector+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d103      	bne.n	80055d2 <FLASH_EraseSector+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80055ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	e002      	b.n	80055d8 <FLASH_EraseSector+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80055d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80055d6:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80055d8:	f000 fbec 	bl	8005db4 <FLASH_WaitForLastOperation>
 80055dc:	4603      	mov	r3, r0
 80055de:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 80055e0:	7afb      	ldrb	r3, [r7, #11]
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d159      	bne.n	800569a <FLASH_EraseSector+0x10a>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 80055e6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80055ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80055ee:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80055f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80055f6:	6912      	ldr	r2, [r2, #16]
 80055f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80055fc:	611a      	str	r2, [r3, #16]
    FLASH->CR |= tmp_psize;
 80055fe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005602:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005606:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800560a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800560e:	6911      	ldr	r1, [r2, #16]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	430a      	orrs	r2, r1
 8005614:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK;
 8005616:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800561a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800561e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005622:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005626:	6912      	ldr	r2, [r2, #16]
 8005628:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800562c:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 800562e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005632:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005636:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800563a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800563e:	6911      	ldr	r1, [r2, #16]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	430a      	orrs	r2, r1
 8005644:	f042 0202 	orr.w	r2, r2, #2
 8005648:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800564a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800564e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005652:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005656:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800565a:	6912      	ldr	r2, [r2, #16]
 800565c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005660:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8005662:	f000 fba7 	bl	8005db4 <FLASH_WaitForLastOperation>
 8005666:	4603      	mov	r3, r0
 8005668:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 800566a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800566e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005672:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005676:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800567a:	6912      	ldr	r2, [r2, #16]
 800567c:	f022 0202 	bic.w	r2, r2, #2
 8005680:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK; 
 8005682:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005686:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800568a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800568e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005692:	6912      	ldr	r2, [r2, #16]
 8005694:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005698:	611a      	str	r2, [r3, #16]
  }
  /* Return the Erase Status */
  return status;
 800569a:	7afb      	ldrb	r3, [r7, #11]
}
 800569c:	4618      	mov	r0, r3
 800569e:	f107 0710 	add.w	r7, r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop

080056a8 <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4603      	mov	r3, r0
 80056b0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 80056b2:	f04f 0300 	mov.w	r3, #0
 80056b6:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 80056b8:	f04f 0308 	mov.w	r3, #8
 80056bc:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80056be:	f000 fb79 	bl	8005db4 <FLASH_WaitForLastOperation>
 80056c2:	4603      	mov	r3, r0
 80056c4:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d103      	bne.n	80056d4 <FLASH_EraseAllSectors+0x2c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80056cc:	f04f 0300 	mov.w	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	e010      	b.n	80056f6 <FLASH_EraseAllSectors+0x4e>
  }
  else if(VoltageRange == VoltageRange_2)
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d103      	bne.n	80056e2 <FLASH_EraseAllSectors+0x3a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80056da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	e009      	b.n	80056f6 <FLASH_EraseAllSectors+0x4e>
  }
  else if(VoltageRange == VoltageRange_3)
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d103      	bne.n	80056f0 <FLASH_EraseAllSectors+0x48>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80056e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	e002      	b.n	80056f6 <FLASH_EraseAllSectors+0x4e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80056f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80056f4:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 80056f6:	7afb      	ldrb	r3, [r7, #11]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d13f      	bne.n	800577c <FLASH_EraseAllSectors+0xd4>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 80056fc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005700:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005704:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005708:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800570c:	6912      	ldr	r2, [r2, #16]
 800570e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005712:	611a      	str	r2, [r3, #16]
     FLASH->CR |= tmp_psize;
 8005714:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005718:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800571c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005720:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005724:	6911      	ldr	r1, [r2, #16]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	430a      	orrs	r2, r1
 800572a:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_MER;
 800572c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005730:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005734:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005738:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800573c:	6912      	ldr	r2, [r2, #16]
 800573e:	f042 0204 	orr.w	r2, r2, #4
 8005742:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_STRT;
 8005744:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005748:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800574c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005750:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005754:	6912      	ldr	r2, [r2, #16]
 8005756:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800575a:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800575c:	f000 fb2a 	bl	8005db4 <FLASH_WaitForLastOperation>
 8005760:	4603      	mov	r3, r0
 8005762:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER);
 8005764:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005768:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800576c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005770:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005774:	6912      	ldr	r2, [r2, #16]
 8005776:	f022 0204 	bic.w	r2, r2, #4
 800577a:	611a      	str	r2, [r3, #16]

  }   
  /* Return the Erase Status */
  return status;
 800577c:	7afb      	ldrb	r3, [r7, #11]
}
 800577e:	4618      	mov	r0, r3
 8005780:	f107 0710 	add.w	r7, r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	e9c7 2300 	strd	r2, r3, [r7]
  FLASH_Status status = FLASH_COMPLETE;
 8005794:	f04f 0308 	mov.w	r3, #8
 8005798:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800579a:	f000 fb0b 	bl	8005db4 <FLASH_WaitForLastOperation>
 800579e:	4603      	mov	r3, r0
 80057a0:	75fb      	strb	r3, [r7, #23]
  
  if(status == FLASH_COMPLETE)
 80057a2:	7dfb      	ldrb	r3, [r7, #23]
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d138      	bne.n	800581a <FLASH_ProgramDoubleWord+0x92>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80057a8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80057ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057b0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80057b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80057b8:	6912      	ldr	r2, [r2, #16]
 80057ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80057be:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80057c0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80057c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057c8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80057cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80057d0:	6912      	ldr	r2, [r2, #16]
 80057d2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80057d6:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 80057d8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80057dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057e0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80057e4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80057e8:	6912      	ldr	r2, [r2, #16]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	611a      	str	r2, [r3, #16]
  
    *(__IO uint64_t*)Address = Data;
 80057f0:	68f9      	ldr	r1, [r7, #12]
 80057f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057f6:	e9c1 2300 	strd	r2, r3, [r1]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80057fa:	f000 fadb 	bl	8005db4 <FLASH_WaitForLastOperation>
 80057fe:	4603      	mov	r3, r0
 8005800:	75fb      	strb	r3, [r7, #23]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005802:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005806:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800580a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800580e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005812:	6912      	ldr	r2, [r2, #16]
 8005814:	f022 0201 	bic.w	r2, r2, #1
 8005818:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800581a:	7dfb      	ldrb	r3, [r7, #23]
}
 800581c:	4618      	mov	r0, r3
 800581e:	f107 0718 	add.w	r7, r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop

08005828 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 8005832:	f04f 0308 	mov.w	r3, #8
 8005836:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8005838:	f000 fabc 	bl	8005db4 <FLASH_WaitForLastOperation>
 800583c:	4603      	mov	r3, r0
 800583e:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	2b08      	cmp	r3, #8
 8005844:	d136      	bne.n	80058b4 <FLASH_ProgramWord+0x8c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8005846:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800584a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800584e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005852:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005856:	6912      	ldr	r2, [r2, #16]
 8005858:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800585c:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 800585e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005862:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005866:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800586a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800586e:	6912      	ldr	r2, [r2, #16]
 8005870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005874:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8005876:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800587a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800587e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005882:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005886:	6912      	ldr	r2, [r2, #16]
 8005888:	f042 0201 	orr.w	r2, r2, #1
 800588c:	611a      	str	r2, [r3, #16]
  
    *(__IO uint32_t*)Address = Data;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8005894:	f000 fa8e 	bl	8005db4 <FLASH_WaitForLastOperation>
 8005898:	4603      	mov	r3, r0
 800589a:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800589c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80058a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80058a4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80058a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80058ac:	6912      	ldr	r2, [r2, #16]
 80058ae:	f022 0201 	bic.w	r2, r2, #1
 80058b2:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	f107 0710 	add.w	r7, r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 80058cc:	f04f 0308 	mov.w	r3, #8
 80058d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80058d2:	f000 fa6f 	bl	8005db4 <FLASH_WaitForLastOperation>
 80058d6:	4603      	mov	r3, r0
 80058d8:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80058da:	7bfb      	ldrb	r3, [r7, #15]
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d136      	bne.n	800594e <FLASH_ProgramHalfWord+0x8e>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80058e0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80058e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80058e8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80058ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80058f0:	6912      	ldr	r2, [r2, #16]
 80058f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80058f6:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80058f8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80058fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005900:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005904:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005908:	6912      	ldr	r2, [r2, #16]
 800590a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800590e:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8005910:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005914:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005918:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800591c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005920:	6912      	ldr	r2, [r2, #16]
 8005922:	f042 0201 	orr.w	r2, r2, #1
 8005926:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = Data;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	887a      	ldrh	r2, [r7, #2]
 800592c:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800592e:	f000 fa41 	bl	8005db4 <FLASH_WaitForLastOperation>
 8005932:	4603      	mov	r3, r0
 8005934:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005936:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800593a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800593e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005942:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005946:	6912      	ldr	r2, [r2, #16]
 8005948:	f022 0201 	bic.w	r2, r2, #1
 800594c:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800594e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005950:	4618      	mov	r0, r3
 8005952:	f107 0710 	add.w	r7, r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop

0800595c <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8005968:	f04f 0308 	mov.w	r3, #8
 800596c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800596e:	f000 fa21 	bl	8005db4 <FLASH_WaitForLastOperation>
 8005972:	4603      	mov	r3, r0
 8005974:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	2b08      	cmp	r3, #8
 800597a:	d134      	bne.n	80059e6 <FLASH_ProgramByte+0x8a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800597c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005980:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005984:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005988:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800598c:	6912      	ldr	r2, [r2, #16]
 800598e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005992:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 8005994:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005998:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800599c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80059a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80059a4:	6912      	ldr	r2, [r2, #16]
 80059a6:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 80059a8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80059ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059b0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80059b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80059b8:	6912      	ldr	r2, [r2, #16]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	611a      	str	r2, [r3, #16]
  
    *(__IO uint8_t*)Address = Data;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	78fa      	ldrb	r2, [r7, #3]
 80059c4:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80059c6:	f000 f9f5 	bl	8005db4 <FLASH_WaitForLastOperation>
 80059ca:	4603      	mov	r3, r0
 80059cc:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80059ce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80059d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059d6:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80059da:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80059de:	6912      	ldr	r2, [r2, #16]
 80059e0:	f022 0201 	bic.w	r2, r2, #1
 80059e4:	611a      	str	r2, [r3, #16]
  } 

  /* Return the Program Status */
  return status;
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	f107 0710 	add.w	r7, r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop

080059f4 <FLASH_OB_Unlock>:
  * @brief  Unlocks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 80059f8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80059fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d011      	beq.n	8005a30 <FLASH_OB_Unlock+0x3c>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8005a0c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a14:	f642 223b 	movw	r2, #10811	; 0x2a3b
 8005a18:	f6c0 0219 	movt	r2, #2073	; 0x819
 8005a1c:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8005a1e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a26:	f646 627f 	movw	r2, #28287	; 0x6e7f
 8005a2a:	f6c4 425d 	movt	r2, #19549	; 0x4c5d
 8005a2e:	609a      	str	r2, [r3, #8]
  }  
}
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bc80      	pop	{r7}
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop

08005a38 <FLASH_OB_Lock>:
  * @brief  Locks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8005a3c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a44:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005a48:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005a4c:	6952      	ldr	r2, [r2, #20]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	615a      	str	r2, [r3, #20]
}
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bc80      	pop	{r7}
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop

08005a5c <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8005a68:	f04f 0308 	mov.w	r3, #8
 8005a6c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 8005a6e:	f000 f9a1 	bl	8005db4 <FLASH_WaitForLastOperation>
 8005a72:	4603      	mov	r3, r0
 8005a74:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d124      	bne.n	8005ac6 <FLASH_OB_WRPConfig+0x6a>
  { 
    if(NewState != DISABLE)
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d012      	beq.n	8005aa8 <FLASH_OB_WRPConfig+0x4c>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 8005a82:	f643 4316 	movw	r3, #15382	; 0x3c16
 8005a86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a8a:	f643 4216 	movw	r2, #15382	; 0x3c16
 8005a8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005a92:	8812      	ldrh	r2, [r2, #0]
 8005a94:	b291      	uxth	r1, r2
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	b292      	uxth	r2, r2
 8005a9a:	ea6f 0202 	mvn.w	r2, r2
 8005a9e:	b292      	uxth	r2, r2
 8005aa0:	400a      	ands	r2, r1
 8005aa2:	b292      	uxth	r2, r2
 8005aa4:	801a      	strh	r2, [r3, #0]
 8005aa6:	e00e      	b.n	8005ac6 <FLASH_OB_WRPConfig+0x6a>
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 8005aa8:	f643 4316 	movw	r3, #15382	; 0x3c16
 8005aac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ab0:	f643 4216 	movw	r2, #15382	; 0x3c16
 8005ab4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005ab8:	8812      	ldrh	r2, [r2, #0]
 8005aba:	b291      	uxth	r1, r2
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	b292      	uxth	r2, r2
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	b292      	uxth	r2, r2
 8005ac4:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8005ac6:	f107 0710 	add.w	r7, r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop

08005ad0 <FLASH_OB_RDPConfig>:
  * !!!Warning!!! When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 8005ada:	f04f 0308 	mov.w	r3, #8
 8005ade:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 8005ae0:	f000 f968 	bl	8005db4 <FLASH_WaitForLastOperation>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d105      	bne.n	8005afa <FLASH_OB_RDPConfig+0x2a>
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 8005aee:	f643 4315 	movw	r3, #15381	; 0x3c15
 8005af2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005af6:	79fa      	ldrb	r2, [r7, #7]
 8005af8:	701a      	strb	r2, [r3, #0]

  }
}
 8005afa:	f107 0710 	add.w	r7, r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop

08005b04 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	71fa      	strb	r2, [r7, #7]
 8005b10:	460a      	mov	r2, r1
 8005b12:	71ba      	strb	r2, [r7, #6]
 8005b14:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 8005b16:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8005b1a:	73fb      	strb	r3, [r7, #15]
  FLASH_Status status = FLASH_COMPLETE; 
 8005b1c:	f04f 0308 	mov.w	r3, #8
 8005b20:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8005b22:	f000 f947 	bl	8005db4 <FLASH_WaitForLastOperation>
 8005b26:	4603      	mov	r3, r0
 8005b28:	73bb      	strb	r3, [r7, #14]
  
  if(status == FLASH_COMPLETE)
 8005b2a:	7bbb      	ldrb	r3, [r7, #14]
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d117      	bne.n	8005b60 <FLASH_OB_UserConfig+0x5c>
  { 
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
 8005b30:	f643 4314 	movw	r3, #15380	; 0x3c14
 8005b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 8005b42:	f643 4314 	movw	r3, #15380	; 0x3c14
 8005b46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005b4a:	79b9      	ldrb	r1, [r7, #6]
 8005b4c:	7bfa      	ldrb	r2, [r7, #15]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	b2d1      	uxtb	r1, r2
 8005b52:	797a      	ldrb	r2, [r7, #5]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	b2d1      	uxtb	r1, r2
 8005b58:	79fa      	ldrb	r2, [r7, #7]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	701a      	strb	r2, [r3, #0]
  }  
}
 8005b60:	f107 0710 	add.w	r7, r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <FLASH_OB_BORConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval None
  */
void FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8005b72:	f643 4314 	movw	r3, #15380	; 0x3c14
 8005b76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005b7a:	f643 4214 	movw	r2, #15380	; 0x3c14
 8005b7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005b82:	7812      	ldrb	r2, [r2, #0]
 8005b84:	b2d2      	uxtb	r2, r2
 8005b86:	f022 020c 	bic.w	r2, r2, #12
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 8005b8e:	f643 4314 	movw	r3, #15380	; 0x3c14
 8005b92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005b96:	f643 4214 	movw	r2, #15380	; 0x3c14
 8005b9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005b9e:	7812      	ldrb	r2, [r2, #0]
 8005ba0:	b2d1      	uxtb	r1, r2
 8005ba2:	79fa      	ldrb	r2, [r7, #7]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	701a      	strb	r2, [r3, #0]

}
 8005baa:	f107 070c 	add.w	r7, r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bc80      	pop	{r7}
 8005bb2:	4770      	bx	lr

08005bb4 <FLASH_OB_Launch>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_OB_Launch(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 8005bba:	f04f 0308 	mov.w	r3, #8
 8005bbe:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8005bc0:	f643 4314 	movw	r3, #15380	; 0x3c14
 8005bc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005bc8:	f643 4214 	movw	r2, #15380	; 0x3c14
 8005bcc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005bd0:	7812      	ldrb	r2, [r2, #0]
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	f042 0202 	orr.w	r2, r2, #2
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8005bdc:	f000 f8ea 	bl	8005db4 <FLASH_WaitForLastOperation>
 8005be0:	4603      	mov	r3, r0
 8005be2:	71fb      	strb	r3, [r7, #7]

  return status;
 8005be4:	79fb      	ldrb	r3, [r7, #7]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	f107 0708 	add.w	r7, r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <FLASH_OB_GetUser>:
  * @param  None
  * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 8005bf4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005bf8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005c02:	b2db      	uxtb	r3, r3
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr

08005c0c <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8005c10:	f643 4316 	movw	r3, #15382	; 0x3c16
 8005c14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc80      	pop	{r7}
 8005c22:	4770      	bx	lr

08005c24 <FLASH_OB_GetRDP>:
  * @retval FLASH ReadOut Protection Status:
  *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
  *           - RESET, when OB_RDP_Level_0 is set
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	71fb      	strb	r3, [r7, #7]

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 8005c30:	f643 4315 	movw	r3, #15381	; 0x3c15
 8005c34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2baa      	cmp	r3, #170	; 0xaa
 8005c3e:	d003      	beq.n	8005c48 <FLASH_OB_GetRDP+0x24>
  {
    readstatus = SET;
 8005c40:	f04f 0301 	mov.w	r3, #1
 8005c44:	71fb      	strb	r3, [r7, #7]
 8005c46:	e002      	b.n	8005c4e <FLASH_OB_GetRDP+0x2a>
  }
  else
  {
    readstatus = RESET;
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 8005c4e:	79fb      	ldrb	r3, [r7, #7]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	f107 070c 	add.w	r7, r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr

08005c5c <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8005c60:	f643 4314 	movw	r3, #15380	; 0x3c14
 8005c64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	f003 030c 	and.w	r3, r3, #12
 8005c70:	b2db      	uxtb	r3, r3
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bc80      	pop	{r7}
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop

08005c7c <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00c      	beq.n	8005ca8 <FLASH_ITConfig+0x2c>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8005c8e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c96:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005c9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005c9e:	6911      	ldr	r1, [r2, #16]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	611a      	str	r2, [r3, #16]
 8005ca6:	e00d      	b.n	8005cc4 <FLASH_ITConfig+0x48>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8005ca8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005cac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005cb0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005cb4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005cb8:	6911      	ldr	r1, [r2, #16]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	ea6f 0202 	mvn.w	r2, r2
 8005cc0:	400a      	ands	r2, r1
 8005cc2:	611a      	str	r2, [r3, #16]
  }
}
 8005cc4:	f107 070c 	add.w	r7, r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bc80      	pop	{r7}
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop

08005cd0 <FLASH_GetFlagStatus>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_BSY: FLASH Busy flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005cd8:	f04f 0300 	mov.w	r3, #0
 8005cdc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 8005cde:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005ce2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <FLASH_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 8005cf0:	f04f 0301 	mov.w	r3, #1
 8005cf4:	73fb      	strb	r3, [r7, #15]
 8005cf6:	e002      	b.n	8005cfe <FLASH_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	f107 0714 	add.w	r7, r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bc80      	pop	{r7}
 8005d0a:	4770      	bx	lr

08005d0c <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8005d14:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	60da      	str	r2, [r3, #12]
}
 8005d20:	f107 070c 	add.w	r7, r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bc80      	pop	{r7}
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop

08005d2c <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8005d32:	f04f 0308 	mov.w	r3, #8
 8005d36:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8005d38:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <FLASH_GetStatus+0x26>
  {
    flashstatus = FLASH_BUSY;
 8005d4a:	f04f 0301 	mov.w	r3, #1
 8005d4e:	71fb      	strb	r3, [r7, #7]
 8005d50:	e029      	b.n	8005da6 <FLASH_GetStatus+0x7a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8005d52:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0310 	and.w	r3, r3, #16
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <FLASH_GetStatus+0x40>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8005d64:	f04f 0305 	mov.w	r3, #5
 8005d68:	71fb      	strb	r3, [r7, #7]
 8005d6a:	e01c      	b.n	8005da6 <FLASH_GetStatus+0x7a>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 8005d6c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <FLASH_GetStatus+0x5a>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 8005d7e:	f04f 0306 	mov.w	r3, #6
 8005d82:	71fb      	strb	r3, [r7, #7]
 8005d84:	e00f      	b.n	8005da6 <FLASH_GetStatus+0x7a>
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8005d86:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <FLASH_GetStatus+0x74>
        {
          flashstatus = FLASH_ERROR_OPERATION;
 8005d98:	f04f 0307 	mov.w	r3, #7
 8005d9c:	71fb      	strb	r3, [r7, #7]
 8005d9e:	e002      	b.n	8005da6 <FLASH_GetStatus+0x7a>
        }
        else
        {
          flashstatus = FLASH_COMPLETE;
 8005da0:	f04f 0308 	mov.w	r3, #8
 8005da4:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 8005da6:	79fb      	ldrb	r3, [r7, #7]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	f107 070c 	add.w	r7, r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr

08005db4 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 8005dba:	f04f 0308 	mov.w	r3, #8
 8005dbe:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8005dc0:	f7ff ffb4 	bl	8005d2c <FLASH_GetStatus>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8005dc8:	e003      	b.n	8005dd2 <FLASH_WaitForLastOperation+0x1e>
  {
    status = FLASH_GetStatus();
 8005dca:	f7ff ffaf 	bl	8005d2c <FLASH_GetStatus>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	71fb      	strb	r3, [r7, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8005dd2:	79fb      	ldrb	r3, [r7, #7]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d0f7      	beq.n	8005dca <FLASH_WaitForLastOperation+0x16>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	b2db      	uxtb	r3, r3
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	f107 0708 	add.w	r7, r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <FSMC_NORSRAMDeInit>:
  *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d107      	bne.n	8005e06 <FSMC_NORSRAMDeInit+0x1e>
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 8005df6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	f243 01db 	movw	r1, #12507	; 0x30db
 8005e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005e04:	e006      	b.n	8005e14 <FSMC_NORSRAMDeInit+0x2c>
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 8005e06:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8005e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 8005e14:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	f102 0201 	add.w	r2, r2, #1
 8005e1e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 8005e26:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005e2a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8005e38:	f107 070c 	add.w	r7, r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bc80      	pop	{r7}
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop

08005e44 <FSMC_NORSRAMInit>:
  *         that contains the configuration information for the FSMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8005e4c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6812      	ldr	r2, [r2, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	6848      	ldr	r0, [r1, #4]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	6889      	ldr	r1, [r1, #8]
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8005e5c:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	68c9      	ldr	r1, [r1, #12]
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8005e62:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	6909      	ldr	r1, [r1, #16]
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8005e68:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	6949      	ldr	r1, [r1, #20]
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8005e6e:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	6989      	ldr	r1, [r1, #24]
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8005e74:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	69c9      	ldr	r1, [r1, #28]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 8005e7a:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	6a09      	ldr	r1, [r1, #32]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 8005e80:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	6a49      	ldr	r1, [r1, #36]	; 0x24
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8005e86:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	6a89      	ldr	r1, [r1, #40]	; 0x28
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 8005e8c:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 8005e92:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	6b09      	ldr	r1, [r1, #48]	; 0x30
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8005e98:	4301      	orrs	r1, r0
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8005e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	2b08      	cmp	r3, #8
 8005ea4:	d10d      	bne.n	8005ec2 <FSMC_NORSRAMInit+0x7e>
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 8005ea6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	6800      	ldr	r0, [r0, #0]
 8005eb6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005eba:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8005ec2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6812      	ldr	r2, [r2, #0]
 8005eca:	f102 0201 	add.w	r2, r2, #1
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005ed2:	6808      	ldr	r0, [r1, #0]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005ed8:	6849      	ldr	r1, [r1, #4]
 8005eda:	ea4f 1101 	mov.w	r1, r1, lsl #4
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 8005ede:	4308      	orrs	r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005ee4:	6889      	ldr	r1, [r1, #8]
 8005ee6:	ea4f 2101 	mov.w	r1, r1, lsl #8
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 8005eea:	4308      	orrs	r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005ef0:	68c9      	ldr	r1, [r1, #12]
 8005ef2:	ea4f 4101 	mov.w	r1, r1, lsl #16
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 8005ef6:	4308      	orrs	r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005efc:	6909      	ldr	r1, [r1, #16]
 8005efe:	ea4f 5101 	mov.w	r1, r1, lsl #20
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 8005f02:	4308      	orrs	r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005f08:	6949      	ldr	r1, [r1, #20]
 8005f0a:	ea4f 6101 	mov.w	r1, r1, lsl #24
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 8005f0e:	4308      	orrs	r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005f14:	6989      	ldr	r1, [r1, #24]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8005f16:	4301      	orrs	r1, r0
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8005f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f24:	d127      	bne.n	8005f76 <FSMC_NORSRAMInit+0x132>
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8005f26:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005f2a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6812      	ldr	r2, [r2, #0]
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005f36:	6808      	ldr	r0, [r1, #0]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005f3c:	6849      	ldr	r1, [r1, #4]
 8005f3e:	ea4f 1101 	mov.w	r1, r1, lsl #4
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 8005f42:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005f48:	6889      	ldr	r1, [r1, #8]
 8005f4a:	ea4f 2101 	mov.w	r1, r1, lsl #8
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 8005f4e:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005f54:	6909      	ldr	r1, [r1, #16]
 8005f56:	ea4f 5101 	mov.w	r1, r1, lsl #20
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 8005f5a:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005f60:	6949      	ldr	r1, [r1, #20]
 8005f62:	ea4f 6101 	mov.w	r1, r1, lsl #24
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 8005f66:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005f6c:	6989      	ldr	r1, [r1, #24]
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8005f6e:	4301      	orrs	r1, r0
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8005f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005f74:	e009      	b.n	8005f8a <FSMC_NORSRAMInit+0x146>
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 8005f76:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005f7a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6812      	ldr	r2, [r2, #0]
 8005f82:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 8005f8a:	f107 070c 	add.w	r7, r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bc80      	pop	{r7}
 8005f92:	4770      	bx	lr

08005f94 <FSMC_NORSRAMStructInit>:
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f04f 0202 	mov.w	r2, #2
 8005faa:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f04f 0200 	mov.w	r2, #0
 8005fb2:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f04f 0200 	mov.w	r2, #0
 8005fc2:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f04f 0200 	mov.w	r2, #0
 8005fca:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f04f 0200 	mov.w	r2, #0
 8005fd2:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f04f 0200 	mov.w	r2, #0
 8005fda:	61da      	str	r2, [r3, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f04f 0200 	mov.w	r2, #0
 8005fe2:	621a      	str	r2, [r3, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005fea:	625a      	str	r2, [r3, #36]	; 0x24
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ff2:	629a      	str	r2, [r3, #40]	; 0x28
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f04f 0200 	mov.w	r2, #0
 8006002:	631a      	str	r2, [r3, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006008:	f04f 020f 	mov.w	r2, #15
 800600c:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006012:	f04f 020f 	mov.w	r2, #15
 8006016:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8006020:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006026:	f04f 020f 	mov.w	r2, #15
 800602a:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006030:	f04f 020f 	mov.w	r2, #15
 8006034:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603a:	f04f 020f 	mov.w	r2, #15
 800603e:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006044:	f04f 0200 	mov.w	r2, #0
 8006048:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	f04f 020f 	mov.w	r2, #15
 8006052:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	f04f 020f 	mov.w	r2, #15
 800605c:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8006066:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	f04f 020f 	mov.w	r2, #15
 8006070:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	f04f 020f 	mov.w	r2, #15
 800607a:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	f04f 020f 	mov.w	r2, #15
 8006084:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	619a      	str	r2, [r3, #24]
}
 8006090:	f107 070c 	add.w	r7, r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	bc80      	pop	{r7}
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop

0800609c <FSMC_NORSRAMCmd>:
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00c      	beq.n	80060c8 <FSMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 80060ae:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80060b2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80060bc:	f042 0101 	orr.w	r1, r2, #1
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80060c6:	e00e      	b.n	80060e6 <FSMC_NORSRAMCmd+0x4a>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 80060c8:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80060cc:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80060d6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80060da:	f2c0 030f 	movt	r3, #15
 80060de:	400b      	ands	r3, r1
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
}
 80060e6:	f107 070c 	add.w	r7, r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bc80      	pop	{r7}
 80060ee:	4770      	bx	lr

080060f0 <FSMC_NANDDeInit>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND 
  * @retval None
  */
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b10      	cmp	r3, #16
 80060fc:	d11c      	bne.n	8006138 <FSMC_NANDDeInit+0x48>
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 80060fe:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006102:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006106:	f04f 0218 	mov.w	r2, #24
 800610a:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->SR2 = 0x00000040;
 800610c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006110:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006114:	f04f 0240 	mov.w	r2, #64	; 0x40
 8006118:	605a      	str	r2, [r3, #4]
    FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
 800611a:	f04f 0360 	mov.w	r3, #96	; 0x60
 800611e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006122:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006126:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
 8006128:	f04f 0360 	mov.w	r3, #96	; 0x60
 800612c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006130:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006134:	60da      	str	r2, [r3, #12]
 8006136:	e01b      	b.n	8006170 <FSMC_NANDDeInit+0x80>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
 8006138:	f04f 0380 	mov.w	r3, #128	; 0x80
 800613c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006140:	f04f 0218 	mov.w	r2, #24
 8006144:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
 8006146:	f04f 0380 	mov.w	r3, #128	; 0x80
 800614a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800614e:	f04f 0240 	mov.w	r2, #64	; 0x40
 8006152:	605a      	str	r2, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8006154:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006158:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800615c:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006160:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 8006162:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006166:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800616a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800616e:	60da      	str	r2, [r3, #12]
  }  
}
 8006170:	f107 070c 	add.w	r7, r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	bc80      	pop	{r7}
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop

0800617c <FSMC_NANDInit>:
  * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FSMC NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	617b      	str	r3, [r7, #20]
 800618a:	f04f 0300 	mov.w	r3, #0
 800618e:	613b      	str	r3, [r7, #16]
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 800619e:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 80061a4:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 80061aa:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	ea4f 2343 	mov.w	r3, r3, lsl #9
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 80061b4:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	ea4f 3343 	mov.w	r3, r3, lsl #13
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 80061be:	4313      	orrs	r3, r2
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 80061c0:	f043 0308 	orr.w	r3, r3, #8
 80061c4:	617b      	str	r3, [r7, #20]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	ea4f 2303 	mov.w	r3, r3, lsl #8
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80061d6:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	ea4f 4303 	mov.w	r3, r3, lsl #16
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80061e2:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	ea4f 6303 	mov.w	r3, r3, lsl #24
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	ea4f 2303 	mov.w	r3, r3, lsl #8
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8006202:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	ea4f 4303 	mov.w	r3, r3, lsl #16
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800620e:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	ea4f 6303 	mov.w	r3, r3, lsl #24
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b10      	cmp	r3, #16
 8006224:	d112      	bne.n	800624c <FSMC_NANDInit+0xd0>
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 8006226:	f04f 0360 	mov.w	r3, #96	; 0x60
 800622a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->PMEM2 = tmppmem;
 8006232:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006236:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = tmppatt;
 800623e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006242:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	60da      	str	r2, [r3, #12]
 800624a:	e011      	b.n	8006270 <FSMC_NANDInit+0xf4>
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 800624c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006250:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 8006258:	f04f 0380 	mov.w	r3, #128	; 0x80
 800625c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 8006264:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006268:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	60da      	str	r2, [r3, #12]
  }
}
 8006270:	f107 071c 	add.w	r7, r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	bc80      	pop	{r7}
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop

0800627c <FSMC_NANDStructInit>:
  * @param  FSMC_NANDInitStruct: pointer to a FSMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f04f 0210 	mov.w	r2, #16
 800628a:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f04f 0200 	mov.w	r2, #0
 8006292:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f04f 0200 	mov.w	r2, #0
 800629a:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f04f 0200 	mov.w	r2, #0
 80062aa:	611a      	str	r2, [r3, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f04f 0200 	mov.w	r2, #0
 80062b2:	615a      	str	r2, [r3, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	619a      	str	r2, [r3, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80062c4:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80062ce:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80062d8:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80062e2:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80062ec:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80062f6:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006300:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800630a:	60da      	str	r2, [r3, #12]
}
 800630c:	f107 070c 	add.w	r7, r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	bc80      	pop	{r7}
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop

08006318 <FSMC_NANDCmd>:
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d01c      	beq.n	8006364 <FSMC_NANDCmd+0x4c>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b10      	cmp	r3, #16
 800632e:	d10c      	bne.n	800634a <FSMC_NANDCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 8006330:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006334:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006338:	f04f 0260 	mov.w	r2, #96	; 0x60
 800633c:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	f042 0204 	orr.w	r2, r2, #4
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	e02e      	b.n	80063a8 <FSMC_NANDCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 800634a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800634e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006352:	f04f 0280 	mov.w	r2, #128	; 0x80
 8006356:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	f042 0204 	orr.w	r2, r2, #4
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	e021      	b.n	80063a8 <FSMC_NANDCmd+0x90>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b10      	cmp	r3, #16
 8006368:	d10f      	bne.n	800638a <FSMC_NANDCmd+0x72>
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 800636a:	f04f 0260 	mov.w	r2, #96	; 0x60
 800636e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006372:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006376:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800637a:	6819      	ldr	r1, [r3, #0]
 800637c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8006380:	f2c0 030f 	movt	r3, #15
 8006384:	400b      	ands	r3, r1
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	e00e      	b.n	80063a8 <FSMC_NANDCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 800638a:	f04f 0280 	mov.w	r2, #128	; 0x80
 800638e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006392:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006396:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800639a:	6819      	ldr	r1, [r3, #0]
 800639c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80063a0:	f2c0 030f 	movt	r3, #15
 80063a4:	400b      	ands	r3, r1
 80063a6:	6013      	str	r3, [r2, #0]
    }
  }
}
 80063a8:	f107 070c 	add.w	r7, r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bc80      	pop	{r7}
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop

080063b4 <FSMC_NANDECCCmd>:
  * @param  NewState: new state of the FSMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80063c0:	78fb      	ldrb	r3, [r7, #3]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01c      	beq.n	8006400 <FSMC_NANDECCCmd+0x4c>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b10      	cmp	r3, #16
 80063ca:	d10c      	bne.n	80063e6 <FSMC_NANDECCCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 80063cc:	f04f 0360 	mov.w	r3, #96	; 0x60
 80063d0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80063d4:	f04f 0260 	mov.w	r2, #96	; 0x60
 80063d8:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80063dc:	6812      	ldr	r2, [r2, #0]
 80063de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	e02e      	b.n	8006444 <FSMC_NANDECCCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 80063e6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80063ea:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80063ee:	f04f 0280 	mov.w	r2, #128	; 0x80
 80063f2:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80063f6:	6812      	ldr	r2, [r2, #0]
 80063f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	e021      	b.n	8006444 <FSMC_NANDECCCmd+0x90>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b10      	cmp	r3, #16
 8006404:	d10f      	bne.n	8006426 <FSMC_NANDECCCmd+0x72>
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8006406:	f04f 0260 	mov.w	r2, #96	; 0x60
 800640a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800640e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006412:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006416:	6819      	ldr	r1, [r3, #0]
 8006418:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800641c:	f2c0 030f 	movt	r3, #15
 8006420:	400b      	ands	r3, r1
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	e00e      	b.n	8006444 <FSMC_NANDECCCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 8006426:	f04f 0280 	mov.w	r2, #128	; 0x80
 800642a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800642e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006432:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006436:	6819      	ldr	r1, [r3, #0]
 8006438:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800643c:	f2c0 030f 	movt	r3, #15
 8006440:	400b      	ands	r3, r1
 8006442:	6013      	str	r3, [r2, #0]
    }
  }
}
 8006444:	f107 070c 	add.w	r7, r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	bc80      	pop	{r7}
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop

08006450 <FSMC_GetECC>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 8006458:	f04f 0300 	mov.w	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b10      	cmp	r3, #16
 8006462:	d106      	bne.n	8006472 <FSMC_GetECC+0x22>
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 8006464:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006468:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	e005      	b.n	800647e <FSMC_GetECC+0x2e>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 8006472:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006476:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 800647e:	68fb      	ldr	r3, [r7, #12]
}
 8006480:	4618      	mov	r0, r3
 8006482:	f107 0714 	add.w	r7, r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	bc80      	pop	{r7}
 800648a:	4770      	bx	lr

0800648c <FSMC_PCCARDDeInit>:
  * @brief  Deinitializes the FSMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 8006490:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006494:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006498:	f04f 0218 	mov.w	r2, #24
 800649c:	601a      	str	r2, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
 800649e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80064a2:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	605a      	str	r2, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 80064ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80064b0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80064b4:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80064b8:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 80064ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80064be:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80064c2:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80064c6:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 80064c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80064cc:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80064d0:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80064d4:	611a      	str	r2, [r3, #16]
}
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bc80      	pop	{r7}
 80064da:	4770      	bx	lr

080064dc <FSMC_PCCARDInit>:
  * @param  FSMC_PCCARDInitStruct : pointer to a FSMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FSMC PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 80064e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80064e8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6811      	ldr	r1, [r2, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6852      	ldr	r2, [r2, #4]
 80064f4:	ea4f 2242 	mov.w	r2, r2, lsl #9
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
 80064f8:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6892      	ldr	r2, [r2, #8]
 80064fe:	ea4f 3242 	mov.w	r2, r2, lsl #13
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8006502:	430a      	orrs	r2, r1
 8006504:	f042 0210 	orr.w	r2, r2, #16
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8006508:	601a      	str	r2, [r3, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800650a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800650e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	68d2      	ldr	r2, [r2, #12]
 8006516:	6811      	ldr	r1, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	68d2      	ldr	r2, [r2, #12]
 800651c:	6852      	ldr	r2, [r2, #4]
 800651e:	ea4f 2202 	mov.w	r2, r2, lsl #8
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8006522:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	68d2      	ldr	r2, [r2, #12]
 8006528:	6892      	ldr	r2, [r2, #8]
 800652a:	ea4f 4202 	mov.w	r2, r2, lsl #16
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800652e:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	68d2      	ldr	r2, [r2, #12]
 8006534:	68d2      	ldr	r2, [r2, #12]
 8006536:	ea4f 6202 	mov.w	r2, r2, lsl #24
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800653a:	430a      	orrs	r2, r1
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800653c:	609a      	str	r2, [r3, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800653e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006542:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6912      	ldr	r2, [r2, #16]
 800654a:	6811      	ldr	r1, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6912      	ldr	r2, [r2, #16]
 8006550:	6852      	ldr	r2, [r2, #4]
 8006552:	ea4f 2202 	mov.w	r2, r2, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8006556:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6912      	ldr	r2, [r2, #16]
 800655c:	6892      	ldr	r2, [r2, #8]
 800655e:	ea4f 4202 	mov.w	r2, r2, lsl #16
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006562:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6912      	ldr	r2, [r2, #16]
 8006568:	68d2      	ldr	r2, [r2, #12]
 800656a:	ea4f 6202 	mov.w	r2, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800656e:	430a      	orrs	r2, r1
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8006570:	60da      	str	r2, [r3, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8006572:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006576:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6952      	ldr	r2, [r2, #20]
 800657e:	6811      	ldr	r1, [r2, #0]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6952      	ldr	r2, [r2, #20]
 8006584:	6852      	ldr	r2, [r2, #4]
 8006586:	ea4f 2202 	mov.w	r2, r2, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 800658a:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6952      	ldr	r2, [r2, #20]
 8006590:	6892      	ldr	r2, [r2, #8]
 8006592:	ea4f 4202 	mov.w	r2, r2, lsl #16
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006596:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6952      	ldr	r2, [r2, #20]
 800659c:	68d2      	ldr	r2, [r2, #12]
 800659e:	ea4f 6202 	mov.w	r2, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80065a2:	430a      	orrs	r2, r1
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 80065a4:	611a      	str	r2, [r3, #16]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
}
 80065a6:	f107 070c 	add.w	r7, r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bc80      	pop	{r7}
 80065ae:	4770      	bx	lr

080065b0 <FSMC_PCCARDStructInit>:
  * @param  FSMC_PCCARDInitStruct: pointer to a FSMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f04f 0200 	mov.w	r2, #0
 80065be:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f04f 0200 	mov.w	r2, #0
 80065ce:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80065d8:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80065e2:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80065ec:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80065f6:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006600:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800660a:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006614:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800661e:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006628:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006632:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800663c:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006646:	60da      	str	r2, [r3, #12]
}
 8006648:	f107 070c 	add.w	r7, r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	bc80      	pop	{r7}
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop

08006654 <FSMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	4603      	mov	r3, r0
 800665c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00c      	beq.n	800667e <FSMC_PCCARDCmd+0x2a>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 8006664:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006668:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800666c:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8006670:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006674:	6812      	ldr	r2, [r2, #0]
 8006676:	f042 0204 	orr.w	r2, r2, #4
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	e00e      	b.n	800669c <FSMC_PCCARDCmd+0x48>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 800667e:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8006682:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006686:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800668a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800668e:	6819      	ldr	r1, [r3, #0]
 8006690:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8006694:	f2c0 030f 	movt	r3, #15
 8006698:	400b      	ands	r3, r1
 800669a:	6013      	str	r3, [r2, #0]
  }
}
 800669c:	f107 070c 	add.w	r7, r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bc80      	pop	{r7}
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop

080066a8 <FSMC_ITConfig>:
  * @param  NewState: new state of the specified FSMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	4613      	mov	r3, r2
 80066b4:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80066b6:	79fb      	ldrb	r3, [r7, #7]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d02d      	beq.n	8006718 <FSMC_ITConfig+0x70>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b10      	cmp	r3, #16
 80066c0:	d10c      	bne.n	80066dc <FSMC_ITConfig+0x34>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 80066c2:	f04f 0360 	mov.w	r3, #96	; 0x60
 80066c6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80066ca:	f04f 0260 	mov.w	r2, #96	; 0x60
 80066ce:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80066d2:	6851      	ldr	r1, [r2, #4]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
 80066da:	e050      	b.n	800677e <FSMC_ITConfig+0xd6>
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e2:	d10c      	bne.n	80066fe <FSMC_ITConfig+0x56>
    {
      FSMC_Bank3->SR3 |= FSMC_IT;
 80066e4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80066e8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80066ec:	f04f 0280 	mov.w	r2, #128	; 0x80
 80066f0:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80066f4:	6851      	ldr	r1, [r2, #4]
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	605a      	str	r2, [r3, #4]
 80066fc:	e03f      	b.n	800677e <FSMC_ITConfig+0xd6>
    }
    /* Enable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 |= FSMC_IT;    
 80066fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006702:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006706:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 800670a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800670e:	6851      	ldr	r1, [r2, #4]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	430a      	orrs	r2, r1
 8006714:	605a      	str	r2, [r3, #4]
 8006716:	e032      	b.n	800677e <FSMC_ITConfig+0xd6>
    }
  }
  else
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b10      	cmp	r3, #16
 800671c:	d10e      	bne.n	800673c <FSMC_ITConfig+0x94>
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 800671e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006722:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006726:	f04f 0260 	mov.w	r2, #96	; 0x60
 800672a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800672e:	6851      	ldr	r1, [r2, #4]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	ea6f 0202 	mvn.w	r2, r2
 8006736:	400a      	ands	r2, r1
 8006738:	605a      	str	r2, [r3, #4]
 800673a:	e020      	b.n	800677e <FSMC_ITConfig+0xd6>
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006742:	d10e      	bne.n	8006762 <FSMC_ITConfig+0xba>
    {
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 8006744:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006748:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800674c:	f04f 0280 	mov.w	r2, #128	; 0x80
 8006750:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006754:	6851      	ldr	r1, [r2, #4]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	ea6f 0202 	mvn.w	r2, r2
 800675c:	400a      	ands	r2, r1
 800675e:	605a      	str	r2, [r3, #4]
 8006760:	e00d      	b.n	800677e <FSMC_ITConfig+0xd6>
    }
    /* Disable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 8006762:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006766:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800676a:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 800676e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006772:	6851      	ldr	r1, [r2, #4]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	ea6f 0202 	mvn.w	r2, r2
 800677a:	400a      	ands	r2, r1
 800677c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800677e:	f107 0714 	add.w	r7, r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr

08006788 <FSMC_GetFlagStatus>:
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FSMC_FLAG_FEMPT: Fifo empty Flag. 
  * @retval The new state of FSMC_FLAG (SET or RESET).
  */
FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 8006798:	f04f 0300 	mov.w	r3, #0
 800679c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b10      	cmp	r3, #16
 80067a2:	d106      	bne.n	80067b2 <FSMC_GetFlagStatus+0x2a>
  {
    tmpsr = FSMC_Bank2->SR2;
 80067a4:	f04f 0360 	mov.w	r3, #96	; 0x60
 80067a8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	60bb      	str	r3, [r7, #8]
 80067b0:	e010      	b.n	80067d4 <FSMC_GetFlagStatus+0x4c>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b8:	d106      	bne.n	80067c8 <FSMC_GetFlagStatus+0x40>
  {
    tmpsr = FSMC_Bank3->SR3;
 80067ba:	f04f 0380 	mov.w	r3, #128	; 0x80
 80067be:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	60bb      	str	r3, [r7, #8]
 80067c6:	e005      	b.n	80067d4 <FSMC_GetFlagStatus+0x4c>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 80067c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80067cc:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	60bb      	str	r3, [r7, #8]
  } 
  
  /* Get the flag status */
  if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	4013      	ands	r3, r2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <FSMC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80067de:	f04f 0301 	mov.w	r3, #1
 80067e2:	73fb      	strb	r3, [r7, #15]
 80067e4:	e002      	b.n	80067ec <FSMC_GetFlagStatus+0x64>
  }
  else
  {
    bitstatus = RESET;
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	f107 0714 	add.w	r7, r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc80      	pop	{r7}
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop

080067fc <FSMC_ClearFlag>:
  *            @arg FSMC_FLAG_Level: Level detection Flag.
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  * @retval None
  */
void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b10      	cmp	r3, #16
 800680a:	d10e      	bne.n	800682a <FSMC_ClearFlag+0x2e>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 800680c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006810:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006814:	f04f 0260 	mov.w	r2, #96	; 0x60
 8006818:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800681c:	6851      	ldr	r1, [r2, #4]
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	ea6f 0202 	mvn.w	r2, r2
 8006824:	400a      	ands	r2, r1
 8006826:	605a      	str	r2, [r3, #4]
 8006828:	e020      	b.n	800686c <FSMC_ClearFlag+0x70>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006830:	d10e      	bne.n	8006850 <FSMC_ClearFlag+0x54>
  {
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 8006832:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006836:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800683a:	f04f 0280 	mov.w	r2, #128	; 0x80
 800683e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006842:	6851      	ldr	r1, [r2, #4]
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	ea6f 0202 	mvn.w	r2, r2
 800684a:	400a      	ands	r2, r1
 800684c:	605a      	str	r2, [r3, #4]
 800684e:	e00d      	b.n	800686c <FSMC_ClearFlag+0x70>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 8006850:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006854:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006858:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 800685c:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006860:	6851      	ldr	r1, [r2, #4]
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	ea6f 0202 	mvn.w	r2, r2
 8006868:	400a      	ands	r2, r1
 800686a:	605a      	str	r2, [r3, #4]
  }
}
 800686c:	f107 070c 	add.w	r7, r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	bc80      	pop	{r7}
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop

08006878 <FSMC_GetITStatus>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt. 
  * @retval The new state of FSMC_IT (SET or RESET).
  */
ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8006882:	f04f 0300 	mov.w	r3, #0
 8006886:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	f04f 0300 	mov.w	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	f04f 0300 	mov.w	r3, #0
 8006898:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b10      	cmp	r3, #16
 800689e:	d106      	bne.n	80068ae <FSMC_GetITStatus+0x36>
  {
    tmpsr = FSMC_Bank2->SR2;
 80068a0:	f04f 0360 	mov.w	r3, #96	; 0x60
 80068a4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	613b      	str	r3, [r7, #16]
 80068ac:	e010      	b.n	80068d0 <FSMC_GetITStatus+0x58>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068b4:	d106      	bne.n	80068c4 <FSMC_GetITStatus+0x4c>
  {
    tmpsr = FSMC_Bank3->SR3;
 80068b6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80068ba:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	e005      	b.n	80068d0 <FSMC_GetITStatus+0x58>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 80068c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80068c8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	613b      	str	r3, [r7, #16]
  } 
  
  itstatus = tmpsr & FSMC_IT;
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	4013      	ands	r3, r2
 80068d6:	60fb      	str	r3, [r7, #12]
  
  itenable = tmpsr & (FSMC_IT >> 3);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	4013      	ands	r3, r2
 80068e2:	60bb      	str	r3, [r7, #8]
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d006      	beq.n	80068f8 <FSMC_GetITStatus+0x80>
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <FSMC_GetITStatus+0x80>
  {
    bitstatus = SET;
 80068f0:	f04f 0301 	mov.w	r3, #1
 80068f4:	75fb      	strb	r3, [r7, #23]
 80068f6:	e002      	b.n	80068fe <FSMC_GetITStatus+0x86>
  }
  else
  {
    bitstatus = RESET;
 80068f8:	f04f 0300 	mov.w	r3, #0
 80068fc:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus; 
 80068fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006900:	4618      	mov	r0, r3
 8006902:	f107 071c 	add.w	r7, r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr

0800690c <FSMC_ClearITPendingBit>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt.
  * @retval None
  */
void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b10      	cmp	r3, #16
 800691a:	d110      	bne.n	800693e <FSMC_ClearITPendingBit+0x32>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 800691c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006920:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006924:	f04f 0260 	mov.w	r2, #96	; 0x60
 8006928:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800692c:	6851      	ldr	r1, [r2, #4]
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8006934:	ea6f 0202 	mvn.w	r2, r2
 8006938:	400a      	ands	r2, r1
 800693a:	605a      	str	r2, [r3, #4]
 800693c:	e024      	b.n	8006988 <FSMC_ClearITPendingBit+0x7c>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006944:	d110      	bne.n	8006968 <FSMC_ClearITPendingBit+0x5c>
  {
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 8006946:	f04f 0380 	mov.w	r3, #128	; 0x80
 800694a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800694e:	f04f 0280 	mov.w	r2, #128	; 0x80
 8006952:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006956:	6851      	ldr	r1, [r2, #4]
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 800695e:	ea6f 0202 	mvn.w	r2, r2
 8006962:	400a      	ands	r2, r1
 8006964:	605a      	str	r2, [r3, #4]
 8006966:	e00f      	b.n	8006988 <FSMC_ClearITPendingBit+0x7c>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 8006968:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800696c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006970:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8006974:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006978:	6851      	ldr	r1, [r2, #4]
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8006980:	ea6f 0202 	mvn.w	r2, r2
 8006984:	400a      	ands	r2, r1
 8006986:	605a      	str	r2, [r3, #4]
  }
}
 8006988:	f107 070c 	add.w	r7, r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop

08006994 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	f04f 0300 	mov.w	r3, #0
 80069a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d10c      	bne.n	80069c4 <GPIO_DeInit+0x30>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80069aa:	f04f 0001 	mov.w	r0, #1
 80069ae:	f04f 0101 	mov.w	r1, #1
 80069b2:	f002 fbc3 	bl	800913c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80069b6:	f04f 0001 	mov.w	r0, #1
 80069ba:	f04f 0100 	mov.w	r1, #0
 80069be:	f002 fbbd 	bl	800913c <RCC_AHB1PeriphResetCmd>
 80069c2:	e09e      	b.n	8006b02 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOB)
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d10c      	bne.n	80069ec <GPIO_DeInit+0x58>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80069d2:	f04f 0002 	mov.w	r0, #2
 80069d6:	f04f 0101 	mov.w	r1, #1
 80069da:	f002 fbaf 	bl	800913c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80069de:	f04f 0002 	mov.w	r0, #2
 80069e2:	f04f 0100 	mov.w	r1, #0
 80069e6:	f002 fba9 	bl	800913c <RCC_AHB1PeriphResetCmd>
 80069ea:	e08a      	b.n	8006b02 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOC)
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d10c      	bne.n	8006a14 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80069fa:	f04f 0004 	mov.w	r0, #4
 80069fe:	f04f 0101 	mov.w	r1, #1
 8006a02:	f002 fb9b 	bl	800913c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8006a06:	f04f 0004 	mov.w	r0, #4
 8006a0a:	f04f 0100 	mov.w	r1, #0
 8006a0e:	f002 fb95 	bl	800913c <RCC_AHB1PeriphResetCmd>
 8006a12:	e076      	b.n	8006b02 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOD)
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006a1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d10c      	bne.n	8006a3c <GPIO_DeInit+0xa8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8006a22:	f04f 0008 	mov.w	r0, #8
 8006a26:	f04f 0101 	mov.w	r1, #1
 8006a2a:	f002 fb87 	bl	800913c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8006a2e:	f04f 0008 	mov.w	r0, #8
 8006a32:	f04f 0100 	mov.w	r1, #0
 8006a36:	f002 fb81 	bl	800913c <RCC_AHB1PeriphResetCmd>
 8006a3a:	e062      	b.n	8006b02 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOE)
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a42:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d10c      	bne.n	8006a64 <GPIO_DeInit+0xd0>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8006a4a:	f04f 0010 	mov.w	r0, #16
 8006a4e:	f04f 0101 	mov.w	r1, #1
 8006a52:	f002 fb73 	bl	800913c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8006a56:	f04f 0010 	mov.w	r0, #16
 8006a5a:	f04f 0100 	mov.w	r1, #0
 8006a5e:	f002 fb6d 	bl	800913c <RCC_AHB1PeriphResetCmd>
 8006a62:	e04e      	b.n	8006b02 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOF)
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006a6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d10c      	bne.n	8006a8c <GPIO_DeInit+0xf8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8006a72:	f04f 0020 	mov.w	r0, #32
 8006a76:	f04f 0101 	mov.w	r1, #1
 8006a7a:	f002 fb5f 	bl	800913c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8006a7e:	f04f 0020 	mov.w	r0, #32
 8006a82:	f04f 0100 	mov.w	r1, #0
 8006a86:	f002 fb59 	bl	800913c <RCC_AHB1PeriphResetCmd>
 8006a8a:	e03a      	b.n	8006b02 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOG)
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006a92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d10c      	bne.n	8006ab4 <GPIO_DeInit+0x120>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8006a9a:	f04f 0040 	mov.w	r0, #64	; 0x40
 8006a9e:	f04f 0101 	mov.w	r1, #1
 8006aa2:	f002 fb4b 	bl	800913c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8006aa6:	f04f 0040 	mov.w	r0, #64	; 0x40
 8006aaa:	f04f 0100 	mov.w	r1, #0
 8006aae:	f002 fb45 	bl	800913c <RCC_AHB1PeriphResetCmd>
 8006ab2:	e026      	b.n	8006b02 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOH)
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006aba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d10c      	bne.n	8006adc <GPIO_DeInit+0x148>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8006ac2:	f04f 0080 	mov.w	r0, #128	; 0x80
 8006ac6:	f04f 0101 	mov.w	r1, #1
 8006aca:	f002 fb37 	bl	800913c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8006ace:	f04f 0080 	mov.w	r0, #128	; 0x80
 8006ad2:	f04f 0100 	mov.w	r1, #0
 8006ad6:	f002 fb31 	bl	800913c <RCC_AHB1PeriphResetCmd>
 8006ada:	e012      	b.n	8006b02 <GPIO_DeInit+0x16e>
  }
  else
  {
    if (GPIOx == GPIOI)
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ae2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d10b      	bne.n	8006b02 <GPIO_DeInit+0x16e>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8006aea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006aee:	f04f 0101 	mov.w	r1, #1
 8006af2:	f002 fb23 	bl	800913c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8006af6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006afa:	f04f 0100 	mov.w	r1, #0
 8006afe:	f002 fb1d 	bl	800913c <RCC_AHB1PeriphResetCmd>
    }
  }
}
 8006b02:	f107 0708 	add.w	r7, r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop

08006b0c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	f04f 0300 	mov.w	r3, #0
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	f04f 0300 	mov.w	r3, #0
 8006b26:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8006b28:	f04f 0300 	mov.w	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	e086      	b.n	8006c3e <GPIO_Init+0x132>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f04f 0201 	mov.w	r2, #1
 8006b36:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3a:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	4013      	ands	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d173      	bne.n	8006c36 <GPIO_Init+0x12a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b58:	f04f 0103 	mov.w	r1, #3
 8006b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b60:	ea6f 0303 	mvn.w	r3, r3
 8006b64:	401a      	ands	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	791b      	ldrb	r3, [r3, #4]
 8006b72:	4619      	mov	r1, r3
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	791b      	ldrb	r3, [r3, #4]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d003      	beq.n	8006b94 <GPIO_Init+0x88>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	791b      	ldrb	r3, [r3, #4]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d134      	bne.n	8006bfe <GPIO_Init+0xf2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b9e:	f04f 0103 	mov.w	r1, #3
 8006ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba6:	ea6f 0303 	mvn.w	r3, r3
 8006baa:	401a      	ands	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	795b      	ldrb	r3, [r3, #5]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	f04f 0101 	mov.w	r1, #1
 8006bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bda:	ea6f 0303 	mvn.w	r3, r3
 8006bde:	401a      	ands	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	799b      	ldrb	r3, [r3, #6]
 8006bec:	4619      	mov	r1, r3
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006c0a:	f04f 0103 	mov.w	r1, #3
 8006c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c12:	ea6f 0303 	mvn.w	r3, r3
 8006c16:	401a      	ands	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	79db      	ldrb	r3, [r3, #7]
 8006c24:	4619      	mov	r1, r3
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c30:	431a      	orrs	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f103 0301 	add.w	r3, r3, #1
 8006c3c:	617b      	str	r3, [r7, #20]
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2b0f      	cmp	r3, #15
 8006c42:	f67f af75 	bls.w	8006b30 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8006c46:	f107 071c 	add.w	r7, r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr

08006c50 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f04f 0200 	mov.w	r2, #0
 8006c66:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f04f 0200 	mov.w	r2, #0
 8006c6e:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f04f 0200 	mov.w	r2, #0
 8006c76:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f04f 0200 	mov.w	r2, #0
 8006c7e:	71da      	strb	r2, [r3, #7]
}
 8006c80:	f107 070c 	add.w	r7, r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bc80      	pop	{r7}
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop

08006c8c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	460b      	mov	r3, r1
 8006c96:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8006c98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c9c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8006c9e:	887a      	ldrh	r2, [r7, #2]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8006cac:	887a      	ldrh	r2, [r7, #2]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	60fb      	str	r3, [r7, #12]
}
 8006cc4:	f107 0714 	add.w	r7, r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bc80      	pop	{r7}
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop

08006cd0 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691a      	ldr	r2, [r3, #16]
 8006ce6:	887b      	ldrh	r3, [r7, #2]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8006cee:	f04f 0301 	mov.w	r3, #1
 8006cf2:	73fb      	strb	r3, [r7, #15]
 8006cf4:	e002      	b.n	8006cfc <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f107 0714 	add.w	r7, r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bc80      	pop	{r7}
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop

08006d0c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	b29b      	uxth	r3, r3
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f107 070c 	add.w	r7, r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop

08006d28 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8006d34:	f04f 0300 	mov.w	r3, #0
 8006d38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	695a      	ldr	r2, [r3, #20]
 8006d3e:	887b      	ldrh	r3, [r7, #2]
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8006d46:	f04f 0301 	mov.w	r3, #1
 8006d4a:	73fb      	strb	r3, [r7, #15]
 8006d4c:	e002      	b.n	8006d54 <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8006d4e:	f04f 0300 	mov.w	r3, #0
 8006d52:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	f107 0714 	add.w	r7, r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bc80      	pop	{r7}
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop

08006d64 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	b29b      	uxth	r3, r3
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	f107 070c 	add.w	r7, r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bc80      	pop	{r7}
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop

08006d80 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	887a      	ldrh	r2, [r7, #2]
 8006d90:	831a      	strh	r2, [r3, #24]
}
 8006d92:	f107 070c 	add.w	r7, r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bc80      	pop	{r7}
 8006d9a:	4770      	bx	lr

08006d9c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	460b      	mov	r3, r1
 8006da6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	887a      	ldrh	r2, [r7, #2]
 8006dac:	835a      	strh	r2, [r3, #26]
}
 8006dae:	f107 070c 	add.w	r7, r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bc80      	pop	{r7}
 8006db6:	4770      	bx	lr

08006db8 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	460a      	mov	r2, r1
 8006dc4:	807a      	strh	r2, [r7, #2]
 8006dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8006dc8:	787b      	ldrb	r3, [r7, #1]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	887a      	ldrh	r2, [r7, #2]
 8006dd2:	831a      	strh	r2, [r3, #24]
 8006dd4:	e002      	b.n	8006ddc <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	887a      	ldrh	r2, [r7, #2]
 8006dda:	835a      	strh	r2, [r3, #26]
  }
}
 8006ddc:	f107 070c 	add.w	r7, r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bc80      	pop	{r7}
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop

08006de8 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8006df4:	887a      	ldrh	r2, [r7, #2]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	615a      	str	r2, [r3, #20]
}
 8006dfa:	f107 070c 	add.w	r7, r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bc80      	pop	{r7}
 8006e02:	4770      	bx	lr

08006e04 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	695a      	ldr	r2, [r3, #20]
 8006e14:	887b      	ldrh	r3, [r7, #2]
 8006e16:	405a      	eors	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	615a      	str	r2, [r3, #20]
}
 8006e1c:	f107 070c 	add.w	r7, r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bc80      	pop	{r7}
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop

08006e28 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	4613      	mov	r3, r2
 8006e32:	460a      	mov	r2, r1
 8006e34:	807a      	strh	r2, [r7, #2]
 8006e36:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8006e3e:	f04f 0300 	mov.w	r3, #0
 8006e42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8006e44:	787a      	ldrb	r2, [r7, #1]
 8006e46:	887b      	ldrh	r3, [r7, #2]
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006e50:	fa02 f303 	lsl.w	r3, r2, r3
 8006e54:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8006e56:	887b      	ldrh	r3, [r7, #2]
 8006e58:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	461a      	mov	r2, r3
 8006e60:	887b      	ldrh	r3, [r7, #2]
 8006e62:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	4619      	mov	r1, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f101 0108 	add.w	r1, r1, #8
 8006e70:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006e74:	887b      	ldrh	r3, [r7, #2]
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006e7e:	f04f 000f 	mov.w	r0, #15
 8006e82:	fa00 f303 	lsl.w	r3, r0, r3
 8006e86:	ea6f 0303 	mvn.w	r3, r3
 8006e8a:	4019      	ands	r1, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f102 0208 	add.w	r2, r2, #8
 8006e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8006e96:	887b      	ldrh	r3, [r7, #2]
 8006e98:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f102 0208 	add.w	r2, r2, #8
 8006ea6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8006eb0:	887b      	ldrh	r3, [r7, #2]
 8006eb2:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	461a      	mov	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f102 0208 	add.w	r2, r2, #8
 8006ec0:	68b9      	ldr	r1, [r7, #8]
 8006ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8006ec6:	f107 0714 	add.w	r7, r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bc80      	pop	{r7}
 8006ece:	4770      	bx	lr

08006ed0 <HASH_DeInit>:
  * @brief  Deinitializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 8006ed4:	f04f 0020 	mov.w	r0, #32
 8006ed8:	f04f 0101 	mov.w	r1, #1
 8006edc:	f002 f958 	bl	8009190 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 8006ee0:	f04f 0020 	mov.w	r0, #32
 8006ee4:	f04f 0100 	mov.w	r1, #0
 8006ee8:	f002 f952 	bl	8009190 <RCC_AHB2PeriphResetCmd>
}
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop

08006ef0 <HASH_Init>:
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 8006ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006efc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006f00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f04:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8006f08:	6812      	ldr	r2, [r2, #0]
 8006f0a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006f0e:	601a      	str	r2, [r3, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8006f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f14:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f1c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8006f20:	6811      	ldr	r1, [r2, #0]
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	6810      	ldr	r0, [r2, #0]
               HASH_InitStruct->HASH_DataType | \
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	6892      	ldr	r2, [r2, #8]
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8006f2a:	4310      	orrs	r0, r2
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	6852      	ldr	r2, [r2, #4]
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
               HASH_InitStruct->HASH_DataType | \
 8006f30:	4302      	orrs	r2, r0
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8006f32:	430a      	orrs	r2, r1
 8006f34:	601a      	str	r2, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	2b40      	cmp	r3, #64	; 0x40
 8006f3c:	d118      	bne.n	8006f70 <HASH_Init+0x80>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 8006f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f42:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006f46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f4a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8006f4e:	6812      	ldr	r2, [r2, #0]
 8006f50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f54:	601a      	str	r2, [r3, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 8006f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f5a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f62:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8006f66:	6811      	ldr	r1, [r2, #0]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	68d2      	ldr	r2, [r2, #12]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	601a      	str	r2, [r3, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 8006f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f74:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f7c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8006f80:	6812      	ldr	r2, [r2, #0]
 8006f82:	f042 0204 	orr.w	r2, r2, #4
 8006f86:	601a      	str	r2, [r3, #0]
}
 8006f88:	f107 070c 	add.w	r7, r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bc80      	pop	{r7}
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop

08006f94 <HASH_StructInit>:
  *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
  *          Data type selected is 32b and HMAC Key Type is short key.  
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f04f 0200 	mov.w	r2, #0
 8006fa2:	601a      	str	r2, [r3, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f04f 0200 	mov.w	r2, #0
 8006faa:	605a      	str	r2, [r3, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f04f 0200 	mov.w	r2, #0
 8006fb2:	609a      	str	r2, [r3, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	60da      	str	r2, [r3, #12]
}
 8006fbc:	f107 070c 	add.w	r7, r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop

08006fc8 <HASH_Reset>:
  *         interrupt and HASH_FLAG_DCIS flag. 
  * @param  None
  * @retval None
  */
void HASH_Reset(void)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 8006fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fd0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fd8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8006fdc:	6812      	ldr	r2, [r2, #0]
 8006fde:	f042 0204 	orr.w	r2, r2, #4
 8006fe2:	601a      	str	r2, [r3, #0]
}
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bc80      	pop	{r7}
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop

08006fec <HASH_SetLastWordValidBitsNbr>:
  * @note   The Number of valid bits must be set before to start the message 
  *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
  * @retval None
  */
void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 8006ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ffa:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007002:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007006:	6892      	ldr	r2, [r2, #8]
 8007008:	f022 021f 	bic.w	r2, r2, #31
 800700c:	609a      	str	r2, [r3, #8]
  HASH->STR |= ValidNumber;
 800700e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007012:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007016:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800701a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800701e:	6891      	ldr	r1, [r2, #8]
 8007020:	88fa      	ldrh	r2, [r7, #6]
 8007022:	430a      	orrs	r2, r1
 8007024:	609a      	str	r2, [r3, #8]
}
 8007026:	f107 070c 	add.w	r7, r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	bc80      	pop	{r7}
 800702e:	4770      	bx	lr

08007030 <HASH_DataIn>:
  * @brief  Writes data in the Data Input FIFO
  * @param  Data: new data of the message to be processed.
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 8007038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800703c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	605a      	str	r2, [r3, #4]
}
 8007044:	f107 070c 	add.w	r7, r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	bc80      	pop	{r7}
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop

08007050 <HASH_GetInFIFOWordsNbr>:
  * @brief  Returns the number of words already pushed into the IN FIFO.
  * @param  None
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
 8007050:	b480      	push	{r7}
 8007052:	af00      	add	r7, sp, #0
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 8007054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007058:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007062:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8007066:	b2db      	uxtb	r3, r3
}
 8007068:	4618      	mov	r0, r3
 800706a:	46bd      	mov	sp, r7
 800706c:	bc80      	pop	{r7}
 800706e:	4770      	bx	lr

08007070 <HASH_GetDigest>:
  * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
  *         hold the message digest result 
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 8007078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800707c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	601a      	str	r2, [r3, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 8007086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800708a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800708e:	691a      	ldr	r2, [r3, #16]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	605a      	str	r2, [r3, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 8007094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007098:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800709c:	695a      	ldr	r2, [r3, #20]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	609a      	str	r2, [r3, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 80070a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070a6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80070aa:	699a      	ldr	r2, [r3, #24]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60da      	str	r2, [r3, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 80070b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070b4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80070b8:	69da      	ldr	r2, [r3, #28]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	611a      	str	r2, [r3, #16]
}
 80070be:	f107 070c 	add.w	r7, r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bc80      	pop	{r7}
 80070c6:	4770      	bx	lr

080070c8 <HASH_StartDigest>:
  * @brief  Starts the message padding and calculation of the final message     
  * @param  None
  * @retval None
  */
void HASH_StartDigest(void)
{
 80070c8:	b480      	push	{r7}
 80070ca:	af00      	add	r7, sp, #0
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 80070cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070d0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80070d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070d8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80070dc:	6892      	ldr	r2, [r2, #8]
 80070de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070e2:	609a      	str	r2, [r3, #8]
}
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bc80      	pop	{r7}
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop

080070ec <HASH_SaveContext>:
  * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
  *         the repository for current context.
  * @retval None
  */
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 80070f4:	f04f 0300 	mov.w	r3, #0
 80070f8:	73fb      	strb	r3, [r7, #15]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 80070fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070fe:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007102:	6a1a      	ldr	r2, [r3, #32]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	601a      	str	r2, [r3, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 8007108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800710c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007110:	689a      	ldr	r2, [r3, #8]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	605a      	str	r2, [r3, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 8007116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800711a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	609a      	str	r2, [r3, #8]
  for(i=0; i<=50;i++)
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	73fb      	strb	r3, [r7, #15]
 800712a:	e014      	b.n	8007156 <HASH_SaveContext+0x6a>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 800712c:	7bf8      	ldrb	r0, [r7, #15]
 800712e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007132:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007136:	7bfa      	ldrb	r2, [r7, #15]
 8007138:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 800713c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007140:	6879      	ldr	r1, [r7, #4]
 8007142:	f100 0302 	add.w	r3, r0, #2
 8007146:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800714a:	18cb      	adds	r3, r1, r3
 800714c:	605a      	str	r2, [r3, #4]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=50;i++)
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	f103 0301 	add.w	r3, r3, #1
 8007154:	73fb      	strb	r3, [r7, #15]
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	2b32      	cmp	r3, #50	; 0x32
 800715a:	d9e7      	bls.n	800712c <HASH_SaveContext+0x40>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
  }   
}
 800715c:	f107 0714 	add.w	r7, r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop

08007168 <HASH_RestoreContext>:
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 8007170:	f04f 0300 	mov.w	r3, #0
 8007174:	73fb      	strb	r3, [r7, #15]
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 8007176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800717a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6812      	ldr	r2, [r2, #0]
 8007182:	621a      	str	r2, [r3, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 8007184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007188:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6852      	ldr	r2, [r2, #4]
 8007190:	609a      	str	r2, [r3, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 8007192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007196:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6892      	ldr	r2, [r2, #8]
 800719e:	601a      	str	r2, [r3, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 80071a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071a4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80071a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071ac:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80071b0:	6812      	ldr	r2, [r2, #0]
 80071b2:	f042 0204 	orr.w	r2, r2, #4
 80071b6:	601a      	str	r2, [r3, #0]
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 80071b8:	f04f 0300 	mov.w	r3, #0
 80071bc:	73fb      	strb	r3, [r7, #15]
 80071be:	e014      	b.n	80071ea <HASH_RestoreContext+0x82>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 80071c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071c4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80071c8:	7bf8      	ldrb	r0, [r7, #15]
 80071ca:	7bfa      	ldrb	r2, [r7, #15]
 80071cc:	6879      	ldr	r1, [r7, #4]
 80071ce:	f102 0202 	add.w	r2, r2, #2
 80071d2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80071d6:	188a      	adds	r2, r1, r2
 80071d8:	6851      	ldr	r1, [r2, #4]
 80071da:	f100 023e 	add.w	r2, r0, #62	; 0x3e
 80071de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
 80071e4:	f103 0301 	add.w	r3, r3, #1
 80071e8:	73fb      	strb	r3, [r7, #15]
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	2b32      	cmp	r3, #50	; 0x32
 80071ee:	d9e7      	bls.n	80071c0 <HASH_RestoreContext+0x58>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
  }   
}
 80071f0:	f107 0714 	add.w	r7, r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bc80      	pop	{r7}
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop

080071fc <HASH_DMACmd>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_DMACmd(FunctionalState NewState)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00c      	beq.n	8007226 <HASH_DMACmd+0x2a>
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 800720c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007210:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007214:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007218:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800721c:	6812      	ldr	r2, [r2, #0]
 800721e:	f042 0208 	orr.w	r2, r2, #8
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	e00b      	b.n	800723e <HASH_DMACmd+0x42>
  }
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
 8007226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800722a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800722e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007232:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007236:	6812      	ldr	r2, [r2, #0]
 8007238:	f022 0208 	bic.w	r2, r2, #8
 800723c:	601a      	str	r2, [r3, #0]
  }
}
 800723e:	f107 070c 	add.w	r7, r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	bc80      	pop	{r7}
 8007246:	4770      	bx	lr

08007248 <HASH_ITConfig>:
  * @param  NewState: new state of the specified HASH interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_ITConfig(uint8_t HASH_IT, FunctionalState NewState)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	71fa      	strb	r2, [r7, #7]
 8007254:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007256:	79bb      	ldrb	r3, [r7, #6]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00c      	beq.n	8007276 <HASH_ITConfig+0x2e>
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 800725c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007260:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007268:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800726c:	6a11      	ldr	r1, [r2, #32]
 800726e:	79fa      	ldrb	r2, [r7, #7]
 8007270:	430a      	orrs	r2, r1
 8007272:	621a      	str	r2, [r3, #32]
 8007274:	e00e      	b.n	8007294 <HASH_ITConfig+0x4c>
  }
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint8_t) ~HASH_IT;
 8007276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800727a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800727e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007282:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007286:	6a11      	ldr	r1, [r2, #32]
 8007288:	79fa      	ldrb	r2, [r7, #7]
 800728a:	ea6f 0202 	mvn.w	r2, r2
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	400a      	ands	r2, r1
 8007292:	621a      	str	r2, [r3, #32]
  }
}
 8007294:	f107 070c 	add.w	r7, r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	bc80      	pop	{r7}
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop

080072a0 <HASH_GetFlagStatus>:
  *            @arg HASH_FLAG_DMAS: DMAS Status flag
  *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
  * @retval The new state of HASH_FLAG (SET or RESET)
  */
FlagStatus HASH_GetFlagStatus(uint16_t HASH_FLAG)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	4603      	mov	r3, r0
 80072a8:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 80072aa:	f04f 0300 	mov.w	r3, #0
 80072ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 80072b0:	f04f 0300 	mov.w	r3, #0
 80072b4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint16_t)RESET ) 
 80072b6:	88fb      	ldrh	r3, [r7, #6]
 80072b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d006      	beq.n	80072ce <HASH_GetFlagStatus+0x2e>
  {
    tempreg = HASH->CR;
 80072c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072c4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	60bb      	str	r3, [r7, #8]
 80072cc:	e005      	b.n	80072da <HASH_GetFlagStatus+0x3a>
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 80072ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072d2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint16_t)RESET)
 80072da:	88fa      	ldrh	r2, [r7, #6]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	4013      	ands	r3, r2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d003      	beq.n	80072ec <HASH_GetFlagStatus+0x4c>
  {
    /* HASH is set */
    bitstatus = SET;
 80072e4:	f04f 0301 	mov.w	r3, #1
 80072e8:	73fb      	strb	r3, [r7, #15]
 80072ea:	e002      	b.n	80072f2 <HASH_GetFlagStatus+0x52>
  }
  else
  {
    /* HASH_FLAG is reset */
    bitstatus = RESET;
 80072ec:	f04f 0300 	mov.w	r3, #0
 80072f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	f107 0714 	add.w	r7, r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bc80      	pop	{r7}
 80072fe:	4770      	bx	lr

08007300 <HASH_ClearFlag>:
  *            @arg HASH_FLAG_DINIS: Data Input Flag
  *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
  * @retval None
  */
void HASH_ClearFlag(uint16_t HASH_FLAG)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	4603      	mov	r3, r0
 8007308:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 800730a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800730e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007312:	88fa      	ldrh	r2, [r7, #6]
 8007314:	ea6f 0202 	mvn.w	r2, r2
 8007318:	625a      	str	r2, [r3, #36]	; 0x24
}
 800731a:	f107 070c 	add.w	r7, r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	bc80      	pop	{r7}
 8007322:	4770      	bx	lr

08007324 <HASH_GetITStatus>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval The new state of HASH_IT (SET or RESET).
  */
ITStatus HASH_GetITStatus(uint8_t HASH_IT)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800732e:	f04f 0300 	mov.w	r3, #0
 8007332:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8007334:	f04f 0300 	mov.w	r3, #0
 8007338:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 800733a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800733e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	60bb      	str	r3, [r7, #8]

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 8007346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800734a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800734e:	6a1a      	ldr	r2, [r3, #32]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	401a      	ands	r2, r3
 8007354:	79fb      	ldrb	r3, [r7, #7]
 8007356:	4013      	ands	r3, r2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <HASH_GetITStatus+0x40>
  {
    /* HASH_IT is set */
    bitstatus = SET;
 800735c:	f04f 0301 	mov.w	r3, #1
 8007360:	73fb      	strb	r3, [r7, #15]
 8007362:	e002      	b.n	800736a <HASH_GetITStatus+0x46>
  }
  else
  {
    /* HASH_IT is reset */
    bitstatus = RESET;
 8007364:	f04f 0300 	mov.w	r3, #0
 8007368:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the HASH_IT status */
  return bitstatus;
 800736a:	7bfb      	ldrb	r3, [r7, #15]
}
 800736c:	4618      	mov	r0, r3
 800736e:	f107 0714 	add.w	r7, r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr

08007378 <HASH_ClearITPendingBit>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval None
  */
void HASH_ClearITPendingBit(uint8_t HASH_IT)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	4603      	mov	r3, r0
 8007380:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint8_t)~HASH_IT;
 8007382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007386:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800738a:	79fa      	ldrb	r2, [r7, #7]
 800738c:	ea6f 0202 	mvn.w	r2, r2
 8007390:	b2d2      	uxtb	r2, r2
 8007392:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007394:	f107 070c 	add.w	r7, r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	bc80      	pop	{r7}
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop

080073a0 <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 80073a0:	b590      	push	{r4, r7, lr}
 80073a2:	b09d      	sub	sp, #116	; 0x74
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 80073ac:	f04f 0300 	mov.w	r3, #0
 80073b0:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 80073b2:	f04f 0300 	mov.w	r3, #0
 80073b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 80073b8:	f04f 0300 	mov.w	r3, #0
 80073bc:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 80073be:	f04f 0300 	mov.w	r3, #0
 80073c2:	663b      	str	r3, [r7, #96]	; 0x60
  ErrorStatus status = SUCCESS;
 80073c4:	f04f 0301 	mov.w	r3, #1
 80073c8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t inputaddr  = (uint32_t)Input;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t outputaddr = (uint32_t)Output;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	65fb      	str	r3, [r7, #92]	; 0x5c


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	f003 0303 	and.w	r3, r3, #3
 80073dc:	b29b      	uxth	r3, r3
 80073de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 80073e6:	f7ff fd73 	bl	8006ed0 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 80073ea:	f04f 0380 	mov.w	r3, #128	; 0x80
 80073ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 80073f0:	f04f 0300 	mov.w	r3, #0
 80073f4:	633b      	str	r3, [r7, #48]	; 0x30
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 80073f6:	f04f 0320 	mov.w	r3, #32
 80073fa:	637b      	str	r3, [r7, #52]	; 0x34
  HASH_Init(&MD5_HASH_InitStructure);
 80073fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007400:	4618      	mov	r0, r3
 8007402:	f7ff fd75 	bl	8006ef0 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8007406:	8afb      	ldrh	r3, [r7, #22]
 8007408:	b29b      	uxth	r3, r3
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff fdee 	bl	8006fec <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8007410:	f04f 0300 	mov.w	r3, #0
 8007414:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007416:	e00c      	b.n	8007432 <HASH_MD5+0x92>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 8007418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff fe07 	bl	8007030 <HASH_DataIn>
    inputaddr+=4;
 8007422:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007424:	f103 0304 	add.w	r3, r3, #4
 8007428:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800742a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800742c:	f103 0304 	add.w	r3, r3, #4
 8007430:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007432:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	429a      	cmp	r2, r3
 8007438:	d3ee      	bcc.n	8007418 <HASH_MD5+0x78>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800743a:	f7ff fe45 	bl	80070c8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800743e:	f04f 0008 	mov.w	r0, #8
 8007442:	f7ff ff2d 	bl	80072a0 <HASH_GetFlagStatus>
 8007446:	4603      	mov	r3, r0
 8007448:	663b      	str	r3, [r7, #96]	; 0x60
    counter++;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f103 0301 	add.w	r3, r3, #1
 8007450:	613b      	str	r3, [r7, #16]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007458:	d002      	beq.n	8007460 <HASH_MD5+0xc0>
 800745a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1ee      	bne.n	800743e <HASH_MD5+0x9e>

  if (busystatus != RESET)
 8007460:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007462:	2b00      	cmp	r3, #0
 8007464:	d004      	beq.n	8007470 <HASH_MD5+0xd0>
  {
     status = ERROR;
 8007466:	f04f 0300 	mov.w	r3, #0
 800746a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800746e:	e030      	b.n	80074d2 <HASH_MD5+0x132>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 8007470:	f107 0318 	add.w	r3, r7, #24
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff fdfb 	bl	8007070 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800747a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007480:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007482:	ba14      	rev	r4, r2
 8007484:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8007486:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007488:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800748a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800748c:	f103 0304 	add.w	r3, r3, #4
 8007490:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 8007492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007494:	69fa      	ldr	r2, [r7, #28]
 8007496:	653a      	str	r2, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007498:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800749a:	ba14      	rev	r4, r2
 800749c:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 800749e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074a0:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 80074a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074a4:	f103 0304 	add.w	r3, r3, #4
 80074a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 80074aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074ac:	6a3a      	ldr	r2, [r7, #32]
 80074ae:	64ba      	str	r2, [r7, #72]	; 0x48
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80074b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074b2:	ba14      	rev	r4, r2
 80074b4:	647c      	str	r4, [r7, #68]	; 0x44
  return(result);
 80074b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074b8:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 80074ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074bc:	f103 0304 	add.w	r3, r3, #4
 80074c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 80074c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80074c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074ca:	ba14      	rev	r4, r2
 80074cc:	63fc      	str	r4, [r7, #60]	; 0x3c
  return(result);
 80074ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074d0:	601a      	str	r2, [r3, #0]
  }
  return status; 
 80074d2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	f107 0774 	add.w	r7, r7, #116	; 0x74
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd90      	pop	{r4, r7, pc}

080074e0 <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 80074e0:	b590      	push	{r4, r7, lr}
 80074e2:	b09f      	sub	sp, #124	; 0x7c
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 80074ee:	f04f 0300 	mov.w	r3, #0
 80074f2:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 80074f4:	f04f 0300 	mov.w	r3, #0
 80074f8:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 80074fa:	f04f 0300 	mov.w	r3, #0
 80074fe:	677b      	str	r3, [r7, #116]	; 0x74
  __IO uint32_t counter = 0;
 8007500:	f04f 0300 	mov.w	r3, #0
 8007504:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8007506:	f04f 0300 	mov.w	r3, #0
 800750a:	667b      	str	r3, [r7, #100]	; 0x64
  ErrorStatus status = SUCCESS;
 800750c:	f04f 0301 	mov.w	r3, #1
 8007510:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t keyaddr    = (uint32_t)Key;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t inputaddr  = (uint32_t)Input;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t outputaddr = (uint32_t)Output;
 800751c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007520:	663b      	str	r3, [r7, #96]	; 0x60

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	b29b      	uxth	r3, r3
 8007526:	f003 0303 	and.w	r3, r3, #3
 800752a:	b29b      	uxth	r3, r3
 800752c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8007530:	b29b      	uxth	r3, r3
 8007532:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	b29b      	uxth	r3, r3
 8007538:	f003 0303 	and.w	r3, r3, #3
 800753c:	b29b      	uxth	r3, r3
 800753e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8007542:	b29b      	uxth	r3, r3
 8007544:	833b      	strh	r3, [r7, #24]
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 8007546:	f7ff fcc3 	bl	8006ed0 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 800754a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800754e:	633b      	str	r3, [r7, #48]	; 0x30
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 8007550:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007554:	637b      	str	r3, [r7, #52]	; 0x34
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8007556:	f04f 0320 	mov.w	r3, #32
 800755a:	63bb      	str	r3, [r7, #56]	; 0x38
  if(Keylen > 64)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b40      	cmp	r3, #64	; 0x40
 8007560:	d903      	bls.n	800756a <HMAC_MD5+0x8a>
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 8007562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007568:	e002      	b.n	8007570 <HMAC_MD5+0x90>
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800756a:	f04f 0300 	mov.w	r3, #0
 800756e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  HASH_Init(&MD5_HASH_InitStructure);
 8007570:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007574:	4618      	mov	r0, r3
 8007576:	f7ff fcbb 	bl	8006ef0 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800757a:	8b3b      	ldrh	r3, [r7, #24]
 800757c:	b29b      	uxth	r3, r3
 800757e:	4618      	mov	r0, r3
 8007580:	f7ff fd34 	bl	8006fec <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8007584:	f04f 0300 	mov.w	r3, #0
 8007588:	677b      	str	r3, [r7, #116]	; 0x74
 800758a:	e00c      	b.n	80075a6 <HMAC_MD5+0xc6>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800758c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f7ff fd4d 	bl	8007030 <HASH_DataIn>
    keyaddr+=4;
 8007596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007598:	f103 0304 	add.w	r3, r3, #4
 800759c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800759e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075a0:	f103 0304 	add.w	r3, r3, #4
 80075a4:	677b      	str	r3, [r7, #116]	; 0x74
 80075a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d3ee      	bcc.n	800758c <HMAC_MD5+0xac>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 80075ae:	f7ff fd8b 	bl	80070c8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80075b2:	f04f 0008 	mov.w	r0, #8
 80075b6:	f7ff fe73 	bl	80072a0 <HASH_GetFlagStatus>
 80075ba:	4603      	mov	r3, r0
 80075bc:	667b      	str	r3, [r7, #100]	; 0x64
    counter++;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f103 0301 	add.w	r3, r3, #1
 80075c4:	617b      	str	r3, [r7, #20]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075cc:	d002      	beq.n	80075d4 <HMAC_MD5+0xf4>
 80075ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1ee      	bne.n	80075b2 <HMAC_MD5+0xd2>

  if (busystatus != RESET)
 80075d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d004      	beq.n	80075e4 <HMAC_MD5+0x104>
  {
     status = ERROR;
 80075da:	f04f 0300 	mov.w	r3, #0
 80075de:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80075e2:	e0a2      	b.n	800772a <HMAC_MD5+0x24a>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 80075e4:	8b7b      	ldrh	r3, [r7, #26]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff fcff 	bl	8006fec <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 80075ee:	f04f 0300 	mov.w	r3, #0
 80075f2:	677b      	str	r3, [r7, #116]	; 0x74
 80075f4:	e00c      	b.n	8007610 <HMAC_MD5+0x130>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 80075f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff fd18 	bl	8007030 <HASH_DataIn>
      inputaddr+=4;
 8007600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007602:	f103 0304 	add.w	r3, r3, #4
 8007606:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8007608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800760a:	f103 0304 	add.w	r3, r3, #4
 800760e:	677b      	str	r3, [r7, #116]	; 0x74
 8007610:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	429a      	cmp	r2, r3
 8007616:	d3ee      	bcc.n	80075f6 <HMAC_MD5+0x116>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 8007618:	f7ff fd56 	bl	80070c8 <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 800761c:	f04f 0300 	mov.w	r3, #0
 8007620:	617b      	str	r3, [r7, #20]
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8007622:	f04f 0008 	mov.w	r0, #8
 8007626:	f7ff fe3b 	bl	80072a0 <HASH_GetFlagStatus>
 800762a:	4603      	mov	r3, r0
 800762c:	667b      	str	r3, [r7, #100]	; 0x64
       counter++;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f103 0301 	add.w	r3, r3, #1
 8007634:	617b      	str	r3, [r7, #20]
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800763c:	d002      	beq.n	8007644 <HMAC_MD5+0x164>
 800763e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1ee      	bne.n	8007622 <HMAC_MD5+0x142>

    if (busystatus != RESET)
 8007644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007646:	2b00      	cmp	r3, #0
 8007648:	d004      	beq.n	8007654 <HMAC_MD5+0x174>
    {
      status = ERROR;
 800764a:	f04f 0300 	mov.w	r3, #0
 800764e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007652:	e06a      	b.n	800772a <HMAC_MD5+0x24a>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8007654:	8b3b      	ldrh	r3, [r7, #24]
 8007656:	b29b      	uxth	r3, r3
 8007658:	4618      	mov	r0, r3
 800765a:	f7ff fcc7 	bl	8006fec <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	66fb      	str	r3, [r7, #108]	; 0x6c
      for(i=0; i<Keylen; i+=4)
 8007662:	f04f 0300 	mov.w	r3, #0
 8007666:	677b      	str	r3, [r7, #116]	; 0x74
 8007668:	e00c      	b.n	8007684 <HMAC_MD5+0x1a4>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800766a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4618      	mov	r0, r3
 8007670:	f7ff fcde 	bl	8007030 <HASH_DataIn>
        keyaddr+=4;
 8007674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007676:	f103 0304 	add.w	r3, r3, #4
 800767a:	66fb      	str	r3, [r7, #108]	; 0x6c
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800767c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800767e:	f103 0304 	add.w	r3, r3, #4
 8007682:	677b      	str	r3, [r7, #116]	; 0x74
 8007684:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	429a      	cmp	r2, r3
 800768a:	d3ee      	bcc.n	800766a <HMAC_MD5+0x18a>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 800768c:	f7ff fd1c 	bl	80070c8 <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 8007690:	f04f 0300 	mov.w	r3, #0
 8007694:	617b      	str	r3, [r7, #20]
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8007696:	f04f 0008 	mov.w	r0, #8
 800769a:	f7ff fe01 	bl	80072a0 <HASH_GetFlagStatus>
 800769e:	4603      	mov	r3, r0
 80076a0:	667b      	str	r3, [r7, #100]	; 0x64
          counter++;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f103 0301 	add.w	r3, r3, #1
 80076a8:	617b      	str	r3, [r7, #20]
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b0:	d002      	beq.n	80076b8 <HMAC_MD5+0x1d8>
 80076b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1ee      	bne.n	8007696 <HMAC_MD5+0x1b6>

      if (busystatus != RESET)
 80076b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d004      	beq.n	80076c8 <HMAC_MD5+0x1e8>
      {
         status = ERROR;
 80076be:	f04f 0300 	mov.w	r3, #0
 80076c2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80076c6:	e030      	b.n	800772a <HMAC_MD5+0x24a>
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 80076c8:	f107 031c 	add.w	r3, r7, #28
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7ff fccf 	bl	8007070 <HASH_GetDigest>
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 80076d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80076d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076da:	ba14      	rev	r4, r2
 80076dc:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 80076de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076e0:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 80076e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076e4:	f103 0304 	add.w	r3, r3, #4
 80076e8:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 80076ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076ec:	6a3a      	ldr	r2, [r7, #32]
 80076ee:	657a      	str	r2, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80076f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80076f2:	ba14      	rev	r4, r2
 80076f4:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 80076f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80076f8:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 80076fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076fc:	f103 0304 	add.w	r3, r3, #4
 8007700:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 8007702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007706:	64fa      	str	r2, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007708:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800770a:	ba14      	rev	r4, r2
 800770c:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 800770e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007710:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 8007712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007714:	f103 0304 	add.w	r3, r3, #4
 8007718:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800771a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800771c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800771e:	647a      	str	r2, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007722:	ba14      	rev	r4, r2
 8007724:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 8007726:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007728:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return status;  
 800772a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 800772e:	4618      	mov	r0, r3
 8007730:	f107 077c 	add.w	r7, r7, #124	; 0x7c
 8007734:	46bd      	mov	sp, r7
 8007736:	bd90      	pop	{r4, r7, pc}

08007738 <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 8007738:	b590      	push	{r4, r7, lr}
 800773a:	b09f      	sub	sp, #124	; 0x7c
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8007744:	f04f 0300 	mov.w	r3, #0
 8007748:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 800774a:	f04f 0300 	mov.w	r3, #0
 800774e:	677b      	str	r3, [r7, #116]	; 0x74
  __IO uint32_t counter = 0;
 8007750:	f04f 0300 	mov.w	r3, #0
 8007754:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8007756:	f04f 0300 	mov.w	r3, #0
 800775a:	66bb      	str	r3, [r7, #104]	; 0x68
  ErrorStatus status = SUCCESS;
 800775c:	f04f 0301 	mov.w	r3, #1
 8007760:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t inputaddr  = (uint32_t)Input;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t outputaddr = (uint32_t)Output;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	667b      	str	r3, [r7, #100]	; 0x64

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	b29b      	uxth	r3, r3
 8007770:	f003 0303 	and.w	r3, r3, #3
 8007774:	b29b      	uxth	r3, r3
 8007776:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800777a:	b29b      	uxth	r3, r3
 800777c:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800777e:	f7ff fba7 	bl	8006ed0 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8007782:	f04f 0300 	mov.w	r3, #0
 8007786:	62fb      	str	r3, [r7, #44]	; 0x2c
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 8007788:	f04f 0300 	mov.w	r3, #0
 800778c:	633b      	str	r3, [r7, #48]	; 0x30
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800778e:	f04f 0320 	mov.w	r3, #32
 8007792:	637b      	str	r3, [r7, #52]	; 0x34
  HASH_Init(&SHA1_HASH_InitStructure);
 8007794:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff fba9 	bl	8006ef0 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800779e:	8afb      	ldrh	r3, [r7, #22]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff fc22 	bl	8006fec <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 80077a8:	f04f 0300 	mov.w	r3, #0
 80077ac:	677b      	str	r3, [r7, #116]	; 0x74
 80077ae:	e00c      	b.n	80077ca <HASH_SHA1+0x92>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 80077b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7ff fc3b 	bl	8007030 <HASH_DataIn>
    inputaddr+=4;
 80077ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077bc:	f103 0304 	add.w	r3, r3, #4
 80077c0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 80077c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077c4:	f103 0304 	add.w	r3, r3, #4
 80077c8:	677b      	str	r3, [r7, #116]	; 0x74
 80077ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d3ee      	bcc.n	80077b0 <HASH_SHA1+0x78>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 80077d2:	f7ff fc79 	bl	80070c8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80077d6:	f04f 0008 	mov.w	r0, #8
 80077da:	f7ff fd61 	bl	80072a0 <HASH_GetFlagStatus>
 80077de:	4603      	mov	r3, r0
 80077e0:	66bb      	str	r3, [r7, #104]	; 0x68
    counter++;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f103 0301 	add.w	r3, r3, #1
 80077e8:	613b      	str	r3, [r7, #16]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077f0:	d002      	beq.n	80077f8 <HASH_SHA1+0xc0>
 80077f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1ee      	bne.n	80077d6 <HASH_SHA1+0x9e>

  if (busystatus != RESET)
 80077f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d004      	beq.n	8007808 <HASH_SHA1+0xd0>
  {
     status = ERROR;
 80077fe:	f04f 0300 	mov.w	r3, #0
 8007802:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007806:	e03c      	b.n	8007882 <HASH_SHA1+0x14a>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 8007808:	f107 0318 	add.w	r3, r7, #24
 800780c:	4618      	mov	r0, r3
 800780e:	f7ff fc2f 	bl	8007070 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 8007812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	663a      	str	r2, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007818:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800781a:	ba14      	rev	r4, r2
 800781c:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 800781e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007820:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8007822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007824:	f103 0304 	add.w	r3, r3, #4
 8007828:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800782a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007830:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007832:	ba14      	rev	r4, r2
 8007834:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8007836:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007838:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800783a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800783c:	f103 0304 	add.w	r3, r3, #4
 8007840:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 8007842:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007844:	6a3a      	ldr	r2, [r7, #32]
 8007846:	653a      	str	r2, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007848:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800784a:	ba14      	rev	r4, r2
 800784c:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 800784e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007850:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8007852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007854:	f103 0304 	add.w	r3, r3, #4
 8007858:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800785a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800785c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785e:	64ba      	str	r2, [r7, #72]	; 0x48
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007862:	ba14      	rev	r4, r2
 8007864:	647c      	str	r4, [r7, #68]	; 0x44
  return(result);
 8007866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007868:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800786a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800786c:	f103 0304 	add.w	r3, r3, #4
 8007870:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 8007872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007876:	643a      	str	r2, [r7, #64]	; 0x40
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007878:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800787a:	ba14      	rev	r4, r2
 800787c:	63fc      	str	r4, [r7, #60]	; 0x3c
  return(result);
 800787e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007880:	601a      	str	r2, [r3, #0]
  }
  return status;
 8007882:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 8007886:	4618      	mov	r0, r3
 8007888:	f107 077c 	add.w	r7, r7, #124	; 0x7c
 800788c:	46bd      	mov	sp, r7
 800788e:	bd90      	pop	{r4, r7, pc}

08007890 <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 8007890:	b590      	push	{r4, r7, lr}
 8007892:	b0a1      	sub	sp, #132	; 0x84
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800789e:	f04f 0300 	mov.w	r3, #0
 80078a2:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 80078a4:	f04f 0300 	mov.w	r3, #0
 80078a8:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 80078aa:	f04f 0300 	mov.w	r3, #0
 80078ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  __IO uint32_t counter = 0;
 80078b0:	f04f 0300 	mov.w	r3, #0
 80078b4:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 80078b6:	f04f 0300 	mov.w	r3, #0
 80078ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  ErrorStatus status = SUCCESS;
 80078bc:	f04f 0301 	mov.w	r3, #1
 80078c0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  uint32_t keyaddr    = (uint32_t)Key;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t inputaddr  = (uint32_t)Input;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t outputaddr = (uint32_t)Output;
 80078cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078d0:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	b29b      	uxth	r3, r3
 80078dc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	f003 0303 	and.w	r3, r3, #3
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	833b      	strh	r3, [r7, #24]

  /* HASH peripheral initialization */
  HASH_DeInit();
 80078f6:	f7ff faeb 	bl	8006ed0 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 80078fa:	f04f 0300 	mov.w	r3, #0
 80078fe:	633b      	str	r3, [r7, #48]	; 0x30
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 8007900:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007904:	637b      	str	r3, [r7, #52]	; 0x34
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8007906:	f04f 0320 	mov.w	r3, #32
 800790a:	63bb      	str	r3, [r7, #56]	; 0x38
  if(Keylen > 64)
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2b40      	cmp	r3, #64	; 0x40
 8007910:	d903      	bls.n	800791a <HMAC_SHA1+0x8a>
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 8007912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007918:	e002      	b.n	8007920 <HMAC_SHA1+0x90>
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800791a:	f04f 0300 	mov.w	r3, #0
 800791e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 8007920:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007924:	4618      	mov	r0, r3
 8007926:	f7ff fae3 	bl	8006ef0 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800792a:	8b3b      	ldrh	r3, [r7, #24]
 800792c:	b29b      	uxth	r3, r3
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff fb5c 	bl	8006fec <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8007934:	f04f 0300 	mov.w	r3, #0
 8007938:	67fb      	str	r3, [r7, #124]	; 0x7c
 800793a:	e00c      	b.n	8007956 <HMAC_SHA1+0xc6>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800793c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4618      	mov	r0, r3
 8007942:	f7ff fb75 	bl	8007030 <HASH_DataIn>
    keyaddr+=4;
 8007946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007948:	f103 0304 	add.w	r3, r3, #4
 800794c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800794e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007950:	f103 0304 	add.w	r3, r3, #4
 8007954:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007956:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	429a      	cmp	r2, r3
 800795c:	d3ee      	bcc.n	800793c <HMAC_SHA1+0xac>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800795e:	f7ff fbb3 	bl	80070c8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8007962:	f04f 0008 	mov.w	r0, #8
 8007966:	f7ff fc9b 	bl	80072a0 <HASH_GetFlagStatus>
 800796a:	4603      	mov	r3, r0
 800796c:	66fb      	str	r3, [r7, #108]	; 0x6c
    counter++;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f103 0301 	add.w	r3, r3, #1
 8007974:	617b      	str	r3, [r7, #20]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800797c:	d002      	beq.n	8007984 <HMAC_SHA1+0xf4>
 800797e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1ee      	bne.n	8007962 <HMAC_SHA1+0xd2>

  if (busystatus != RESET)
 8007984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007986:	2b00      	cmp	r3, #0
 8007988:	d004      	beq.n	8007994 <HMAC_SHA1+0x104>
  {
     status = ERROR;
 800798a:	f04f 0300 	mov.w	r3, #0
 800798e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007992:	e0ae      	b.n	8007af2 <HMAC_SHA1+0x262>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8007994:	8b7b      	ldrh	r3, [r7, #26]
 8007996:	b29b      	uxth	r3, r3
 8007998:	4618      	mov	r0, r3
 800799a:	f7ff fb27 	bl	8006fec <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800799e:	f04f 0300 	mov.w	r3, #0
 80079a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079a4:	e00c      	b.n	80079c0 <HMAC_SHA1+0x130>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 80079a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7ff fb40 	bl	8007030 <HASH_DataIn>
      inputaddr+=4;
 80079b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079b2:	f103 0304 	add.w	r3, r3, #4
 80079b6:	673b      	str	r3, [r7, #112]	; 0x70
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 80079b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079ba:	f103 0304 	add.w	r3, r3, #4
 80079be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d3ee      	bcc.n	80079a6 <HMAC_SHA1+0x116>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 80079c8:	f7ff fb7e 	bl	80070c8 <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 80079cc:	f04f 0300 	mov.w	r3, #0
 80079d0:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80079d2:	f04f 0008 	mov.w	r0, #8
 80079d6:	f7ff fc63 	bl	80072a0 <HASH_GetFlagStatus>
 80079da:	4603      	mov	r3, r0
 80079dc:	66fb      	str	r3, [r7, #108]	; 0x6c
      counter++;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	f103 0301 	add.w	r3, r3, #1
 80079e4:	617b      	str	r3, [r7, #20]
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ec:	d002      	beq.n	80079f4 <HMAC_SHA1+0x164>
 80079ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1ee      	bne.n	80079d2 <HMAC_SHA1+0x142>

    if (busystatus != RESET)
 80079f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d004      	beq.n	8007a04 <HMAC_SHA1+0x174>
    {
      status = ERROR;
 80079fa:	f04f 0300 	mov.w	r3, #0
 80079fe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007a02:	e076      	b.n	8007af2 <HMAC_SHA1+0x262>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8007a04:	8b3b      	ldrh	r3, [r7, #24]
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff faef 	bl	8006fec <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	677b      	str	r3, [r7, #116]	; 0x74
      for(i=0; i<Keylen; i+=4)
 8007a12:	f04f 0300 	mov.w	r3, #0
 8007a16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a18:	e00c      	b.n	8007a34 <HMAC_SHA1+0x1a4>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 8007a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7ff fb06 	bl	8007030 <HASH_DataIn>
        keyaddr+=4;
 8007a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a26:	f103 0304 	add.w	r3, r3, #4
 8007a2a:	677b      	str	r3, [r7, #116]	; 0x74
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 8007a2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a2e:	f103 0304 	add.w	r3, r3, #4
 8007a32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a34:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d3ee      	bcc.n	8007a1a <HMAC_SHA1+0x18a>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 8007a3c:	f7ff fb44 	bl	80070c8 <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 8007a40:	f04f 0300 	mov.w	r3, #0
 8007a44:	617b      	str	r3, [r7, #20]
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8007a46:	f04f 0008 	mov.w	r0, #8
 8007a4a:	f7ff fc29 	bl	80072a0 <HASH_GetFlagStatus>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	66fb      	str	r3, [r7, #108]	; 0x6c
        counter++;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f103 0301 	add.w	r3, r3, #1
 8007a58:	617b      	str	r3, [r7, #20]
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a60:	d002      	beq.n	8007a68 <HMAC_SHA1+0x1d8>
 8007a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1ee      	bne.n	8007a46 <HMAC_SHA1+0x1b6>

      if (busystatus != RESET)
 8007a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d004      	beq.n	8007a78 <HMAC_SHA1+0x1e8>
      {
        status = ERROR;
 8007a6e:	f04f 0300 	mov.w	r3, #0
 8007a72:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007a76:	e03c      	b.n	8007af2 <HMAC_SHA1+0x262>
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 8007a78:	f107 031c 	add.w	r3, r7, #28
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7ff faf7 	bl	8007070 <HASH_GetDigest>
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 8007a82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a84:	69fa      	ldr	r2, [r7, #28]
 8007a86:	667a      	str	r2, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007a88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a8a:	ba14      	rev	r4, r2
 8007a8c:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 8007a8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a90:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 8007a92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a94:	f103 0304 	add.w	r3, r3, #4
 8007a98:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 8007a9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a9c:	6a3a      	ldr	r2, [r7, #32]
 8007a9e:	65fa      	str	r2, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007aa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007aa2:	ba14      	rev	r4, r2
 8007aa4:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 8007aa6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007aa8:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 8007aaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007aac:	f103 0304 	add.w	r3, r3, #4
 8007ab0:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 8007ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab6:	657a      	str	r2, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007ab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007aba:	ba14      	rev	r4, r2
 8007abc:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 8007abe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ac0:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 8007ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ac4:	f103 0304 	add.w	r3, r3, #4
 8007ac8:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 8007aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ace:	64fa      	str	r2, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007ad0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ad2:	ba14      	rev	r4, r2
 8007ad4:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 8007ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ad8:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 8007ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007adc:	f103 0304 	add.w	r3, r3, #4
 8007ae0:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 8007ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ae6:	647a      	str	r2, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007ae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007aea:	ba14      	rev	r4, r2
 8007aec:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 8007aee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007af0:	601a      	str	r2, [r3, #0]
      }
    }  
  }
  return status;  
 8007af2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	f107 0784 	add.w	r7, r7, #132	; 0x84
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd90      	pop	{r4, r7, pc}

08007b00 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8007b0e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d10c      	bne.n	8007b30 <I2C_DeInit+0x30>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8007b16:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007b1a:	f04f 0101 	mov.w	r1, #1
 8007b1e:	f001 fb8b 	bl	8009238 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8007b22:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007b26:	f04f 0100 	mov.w	r1, #0
 8007b2a:	f001 fb85 	bl	8009238 <RCC_APB1PeriphResetCmd>
 8007b2e:	e026      	b.n	8007b7e <I2C_DeInit+0x7e>
  }
  else if (I2Cx == I2C2)
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8007b36:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d10c      	bne.n	8007b58 <I2C_DeInit+0x58>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8007b3e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007b42:	f04f 0101 	mov.w	r1, #1
 8007b46:	f001 fb77 	bl	8009238 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8007b4a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007b4e:	f04f 0100 	mov.w	r1, #0
 8007b52:	f001 fb71 	bl	8009238 <RCC_APB1PeriphResetCmd>
 8007b56:	e012      	b.n	8007b7e <I2C_DeInit+0x7e>
  }
  else 
  {
    if (I2Cx == I2C3)
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8007b5e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d10b      	bne.n	8007b7e <I2C_DeInit+0x7e>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8007b66:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007b6a:	f04f 0101 	mov.w	r1, #1
 8007b6e:	f001 fb63 	bl	8009238 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8007b72:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007b76:	f04f 0100 	mov.w	r1, #0
 8007b7a:	f001 fb5d 	bl	8009238 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8007b7e:	f107 0708 	add.w	r7, r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop

08007b88 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08a      	sub	sp, #40	; 0x28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8007b92:	f04f 0300 	mov.w	r3, #0
 8007b96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007b98:	f04f 0300 	mov.w	r3, #0
 8007b9c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8007b9e:	f04f 0304 	mov.w	r3, #4
 8007ba2:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8007ba4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8007ba8:	f2c0 037a 	movt	r3, #122	; 0x7a
 8007bac:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	889b      	ldrh	r3, [r3, #4]
 8007bb2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8007bb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007bb6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007bba:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8007bbc:	f107 030c 	add.w	r3, r7, #12
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 f899 	bl	8008cf8 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8007bca:	69fa      	ldr	r2, [r7, #28]
 8007bcc:	f64d 6383 	movw	r3, #56963	; 0xde83
 8007bd0:	f2c4 331b 	movt	r3, #17179	; 0x431b
 8007bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8007bd8:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8007bdc:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8007bde:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007be0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007be2:	4313      	orrs	r3, r2
 8007be4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007bea:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	f023 0301 	bic.w	r3, r3, #1
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8007bfc:	f04f 0300 	mov.w	r3, #0
 8007c00:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8007c0a:	f2c0 0301 	movt	r3, #1
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d818      	bhi.n	8007c44 <I2C_Init+0xbc>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c20:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8007c22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c24:	2b03      	cmp	r3, #3
 8007c26:	d802      	bhi.n	8007c2e <I2C_Init+0xa6>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8007c28:	f04f 0304 	mov.w	r3, #4
 8007c2c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8007c2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c32:	4313      	orrs	r3, r2
 8007c34:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8007c36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c38:	f103 0301 	add.w	r3, r3, #1
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	841a      	strh	r2, [r3, #32]
 8007c42:	e04b      	b.n	8007cdc <I2C_Init+0x154>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	88da      	ldrh	r2, [r3, #6]
 8007c48:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d10a      	bne.n	8007c66 <I2C_Init+0xde>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	4613      	mov	r3, r2
 8007c56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c5a:	189b      	adds	r3, r3, r2
 8007c5c:	69fa      	ldr	r2, [r7, #28]
 8007c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c62:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007c64:	e010      	b.n	8007c88 <I2C_Init+0x100>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007c70:	189b      	adds	r3, r3, r2
 8007c72:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8007c76:	189b      	adds	r3, r3, r2
 8007c78:	69fa      	ldr	r2, [r7, #28]
 8007c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c7e:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8007c80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c86:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8007c88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c8a:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8007c8e:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d103      	bne.n	8007c9e <I2C_Init+0x116>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8007c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c98:	f043 0301 	orr.w	r3, r3, #1
 8007c9c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8007c9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ca0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cae:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8007cb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007cb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007cb6:	fb02 f203 	mul.w	r2, r2, r3
 8007cba:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8007cbe:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8007cc2:	fb83 1302 	smull	r1, r3, r3, r2
 8007cc6:	ea4f 11a3 	mov.w	r1, r3, asr #6
 8007cca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007cce:	1acb      	subs	r3, r1, r3
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	f103 0301 	add.w	r3, r3, #1
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007ce0:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	f043 0301 	orr.w	r3, r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8007cf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cfa:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8007cfe:	f023 0302 	bic.w	r3, r3, #2
 8007d02:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	889a      	ldrh	r2, [r3, #4]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	895b      	ldrh	r3, [r3, #10]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d12:	4313      	orrs	r3, r2
 8007d14:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007d1a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	899a      	ldrh	r2, [r3, #12]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	891b      	ldrh	r3, [r3, #8]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	811a      	strh	r2, [r3, #8]
}
 8007d2c:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d42:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8007d52:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f04f 0200 	mov.w	r2, #0
 8007d5a:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f04f 0200 	mov.w	r2, #0
 8007d62:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007d6a:	819a      	strh	r2, [r3, #12]
}
 8007d6c:	f107 070c 	add.w	r7, r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bc80      	pop	{r7}
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop

08007d78 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007d84:	78fb      	ldrb	r3, [r7, #3]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d008      	beq.n	8007d9c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	f043 0301 	orr.w	r3, r3, #1
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	801a      	strh	r2, [r3, #0]
 8007d9a:	e007      	b.n	8007dac <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	f023 0301 	bic.w	r3, r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	801a      	strh	r2, [r3, #0]
  }
}
 8007dac:	f107 070c 	add.w	r7, r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bc80      	pop	{r7}
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop

08007db8 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d008      	beq.n	8007ddc <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	801a      	strh	r2, [r3, #0]
 8007dda:	e007      	b.n	8007dec <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	801a      	strh	r2, [r3, #0]
  }
}
 8007dec:	f107 070c 	add.w	r7, r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bc80      	pop	{r7}
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop

08007df8 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d008      	beq.n	8007e1c <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	801a      	strh	r2, [r3, #0]
 8007e1a:	e007      	b.n	8007e2c <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	801a      	strh	r2, [r3, #0]
  }
}
 8007e2c:	f107 070c 	add.w	r7, r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bc80      	pop	{r7}
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop

08007e38 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	4613      	mov	r3, r2
 8007e42:	460a      	mov	r2, r1
 8007e44:	70fa      	strb	r2, [r7, #3]
 8007e46:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8007e48:	78bb      	ldrb	r3, [r7, #2]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d004      	beq.n	8007e58 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8007e4e:	78fb      	ldrb	r3, [r7, #3]
 8007e50:	f043 0301 	orr.w	r3, r3, #1
 8007e54:	70fb      	strb	r3, [r7, #3]
 8007e56:	e003      	b.n	8007e60 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8007e58:	78fb      	ldrb	r3, [r7, #3]
 8007e5a:	f023 0301 	bic.w	r3, r3, #1
 8007e5e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8007e60:	78fb      	ldrb	r3, [r7, #3]
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	821a      	strh	r2, [r3, #16]
}
 8007e68:	f107 070c 	add.w	r7, r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc80      	pop	{r7}
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop

08007e74 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d008      	beq.n	8007e98 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	801a      	strh	r2, [r3, #0]
 8007e96:	e007      	b.n	8007ea8 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	801a      	strh	r2, [r3, #0]
  }
}
 8007ea8:	f107 070c 	add.w	r7, r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bc80      	pop	{r7}
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop

08007eb4 <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 8007ec0:	f04f 0300 	mov.w	r3, #0
 8007ec4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	899b      	ldrh	r3, [r3, #12]
 8007eca:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8007ecc:	89fb      	ldrh	r3, [r7, #14]
 8007ece:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007ed2:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8007ed4:	78fb      	ldrb	r3, [r7, #3]
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	89fb      	ldrh	r3, [r7, #14]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	89fa      	ldrh	r2, [r7, #14]
 8007eea:	819a      	strh	r2, [r3, #12]
}
 8007eec:	f107 0714 	add.w	r7, r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bc80      	pop	{r7}
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop

08007ef8 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007f04:	78fb      	ldrb	r3, [r7, #3]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d008      	beq.n	8007f1c <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	899b      	ldrh	r3, [r3, #12]
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	f043 0301 	orr.w	r3, r3, #1
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	819a      	strh	r2, [r3, #12]
 8007f1a:	e007      	b.n	8007f2c <I2C_DualAddressCmd+0x34>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	899b      	ldrh	r3, [r3, #12]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	f023 0301 	bic.w	r3, r3, #1
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	819a      	strh	r2, [r3, #12]
  }
}
 8007f2c:	f107 070c 	add.w	r7, r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bc80      	pop	{r7}
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop

08007f38 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007f44:	78fb      	ldrb	r3, [r7, #3]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d008      	beq.n	8007f5c <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	801a      	strh	r2, [r3, #0]
 8007f5a:	e007      	b.n	8007f6c <I2C_GeneralCallCmd+0x34>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	801a      	strh	r2, [r3, #0]
  }
}
 8007f6c:	f107 070c 	add.w	r7, r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bc80      	pop	{r7}
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop

08007f78 <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007f84:	78fb      	ldrb	r3, [r7, #3]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	881b      	ldrh	r3, [r3, #0]
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	801a      	strh	r2, [r3, #0]
 8007f9e:	e009      	b.n	8007fb4 <I2C_SoftwareResetCmd+0x3c>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8007faa:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	801a      	strh	r2, [r3, #0]
  }
}
 8007fb4:	f107 070c 	add.w	r7, r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bc80      	pop	{r7}
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop

08007fc0 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d108      	bne.n	8007fe4 <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	801a      	strh	r2, [r3, #0]
 8007fe2:	e007      	b.n	8007ff4 <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	801a      	strh	r2, [r3, #0]
  }
}
 8007ff4:	f107 070c 	add.w	r7, r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop

08008000 <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800800c:	887b      	ldrh	r3, [r7, #2]
 800800e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008012:	d008      	beq.n	8008026 <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	8b9b      	ldrh	r3, [r3, #28]
 8008018:	b29b      	uxth	r3, r3
 800801a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800801e:	b29a      	uxth	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	839a      	strh	r2, [r3, #28]
 8008024:	e007      	b.n	8008036 <I2C_FastModeDutyCycleConfig+0x36>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	8b9b      	ldrh	r3, [r3, #28]
 800802a:	b29b      	uxth	r3, r3
 800802c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008030:	b29a      	uxth	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	839a      	strh	r2, [r3, #28]
  }
}
 8008036:	f107 070c 	add.w	r7, r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	bc80      	pop	{r7}
 800803e:	4770      	bx	lr

08008040 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	460b      	mov	r3, r1
 800804a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800804c:	887b      	ldrh	r3, [r7, #2]
 800804e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008052:	d108      	bne.n	8008066 <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	b29b      	uxth	r3, r3
 800805a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800805e:	b29a      	uxth	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	801a      	strh	r2, [r3, #0]
 8008064:	e007      	b.n	8008076 <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	b29b      	uxth	r3, r3
 800806c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008070:	b29a      	uxth	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	801a      	strh	r2, [r3, #0]
  }
}
 8008076:	f107 070c 	add.w	r7, r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	bc80      	pop	{r7}
 800807e:	4770      	bx	lr

08008080 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800808c:	887b      	ldrh	r3, [r7, #2]
 800808e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008092:	d108      	bne.n	80080a6 <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	b29b      	uxth	r3, r3
 800809a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800809e:	b29a      	uxth	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	801a      	strh	r2, [r3, #0]
 80080a4:	e007      	b.n	80080b6 <I2C_SMBusAlertConfig+0x36>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	801a      	strh	r2, [r3, #0]
  }
}
 80080b6:	f107 070c 	add.w	r7, r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bc80      	pop	{r7}
 80080be:	4770      	bx	lr

080080c0 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	460b      	mov	r3, r1
 80080ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80080cc:	78fb      	ldrb	r3, [r7, #3]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d008      	beq.n	80080e4 <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	881b      	ldrh	r3, [r3, #0]
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	f043 0310 	orr.w	r3, r3, #16
 80080dc:	b29a      	uxth	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	801a      	strh	r2, [r3, #0]
 80080e2:	e007      	b.n	80080f4 <I2C_ARPCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	881b      	ldrh	r3, [r3, #0]
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	f023 0310 	bic.w	r3, r3, #16
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	801a      	strh	r2, [r3, #0]
  }
}
 80080f4:	f107 070c 	add.w	r7, r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop

08008100 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800810c:	78fb      	ldrb	r3, [r7, #3]
 800810e:	b29a      	uxth	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	821a      	strh	r2, [r3, #16]
}
 8008114:	f107 070c 	add.w	r7, r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	bc80      	pop	{r7}
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop

08008120 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	8a1b      	ldrh	r3, [r3, #16]
 800812c:	b29b      	uxth	r3, r3
 800812e:	b2db      	uxtb	r3, r3
}
 8008130:	4618      	mov	r0, r3
 8008132:	f107 070c 	add.w	r7, r7, #12
 8008136:	46bd      	mov	sp, r7
 8008138:	bc80      	pop	{r7}
 800813a:	4770      	bx	lr

0800813c <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008148:	78fb      	ldrb	r3, [r7, #3]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d008      	beq.n	8008160 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	b29b      	uxth	r3, r3
 8008154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008158:	b29a      	uxth	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	801a      	strh	r2, [r3, #0]
 800815e:	e007      	b.n	8008170 <I2C_TransmitPEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	881b      	ldrh	r3, [r3, #0]
 8008164:	b29b      	uxth	r3, r3
 8008166:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800816a:	b29a      	uxth	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	801a      	strh	r2, [r3, #0]
  }
}
 8008170:	f107 070c 	add.w	r7, r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	bc80      	pop	{r7}
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop

0800817c <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8008188:	887b      	ldrh	r3, [r7, #2]
 800818a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800818e:	d108      	bne.n	80081a2 <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	881b      	ldrh	r3, [r3, #0]
 8008194:	b29b      	uxth	r3, r3
 8008196:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800819a:	b29a      	uxth	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	801a      	strh	r2, [r3, #0]
 80081a0:	e007      	b.n	80081b2 <I2C_PECPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	801a      	strh	r2, [r3, #0]
  }
}
 80081b2:	f107 070c 	add.w	r7, r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bc80      	pop	{r7}
 80081ba:	4770      	bx	lr

080081bc <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	460b      	mov	r3, r1
 80081c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80081c8:	78fb      	ldrb	r3, [r7, #3]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d008      	beq.n	80081e0 <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	f043 0320 	orr.w	r3, r3, #32
 80081d8:	b29a      	uxth	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	801a      	strh	r2, [r3, #0]
 80081de:	e007      	b.n	80081f0 <I2C_CalculatePEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	f023 0320 	bic.w	r3, r3, #32
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	801a      	strh	r2, [r3, #0]
  }
}
 80081f0:	f107 070c 	add.w	r7, r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bc80      	pop	{r7}
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop

080081fc <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	8b1b      	ldrh	r3, [r3, #24]
 8008208:	b29b      	uxth	r3, r3
 800820a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800820e:	b29b      	uxth	r3, r3
 8008210:	b2db      	uxtb	r3, r3
}
 8008212:	4618      	mov	r0, r3
 8008214:	f107 070c 	add.w	r7, r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	bc80      	pop	{r7}
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop

08008220 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d008      	beq.n	8008244 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	889b      	ldrh	r3, [r3, #4]
 8008236:	b29b      	uxth	r3, r3
 8008238:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800823c:	b29a      	uxth	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	809a      	strh	r2, [r3, #4]
 8008242:	e007      	b.n	8008254 <I2C_DMACmd+0x34>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	889b      	ldrh	r3, [r3, #4]
 8008248:	b29b      	uxth	r3, r3
 800824a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800824e:	b29a      	uxth	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	809a      	strh	r2, [r3, #4]
  }
}
 8008254:	f107 070c 	add.w	r7, r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	bc80      	pop	{r7}
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop

08008260 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800826c:	78fb      	ldrb	r3, [r7, #3]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d008      	beq.n	8008284 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	889b      	ldrh	r3, [r3, #4]
 8008276:	b29b      	uxth	r3, r3
 8008278:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800827c:	b29a      	uxth	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	809a      	strh	r2, [r3, #4]
 8008282:	e007      	b.n	8008294 <I2C_DMALastTransferCmd+0x34>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	889b      	ldrh	r3, [r3, #4]
 8008288:	b29b      	uxth	r3, r3
 800828a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800828e:	b29a      	uxth	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	809a      	strh	r2, [r3, #4]
  }
}
 8008294:	f107 070c 	add.w	r7, r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	bc80      	pop	{r7}
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop

080082a0 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 80082ac:	f04f 0300 	mov.w	r3, #0
 80082b0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 80082b6:	78fa      	ldrb	r2, [r7, #3]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	18d3      	adds	r3, r2, r3
 80082bc:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	b29b      	uxth	r3, r3
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	f107 0714 	add.w	r7, r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bc80      	pop	{r7}
 80082ce:	4770      	bx	lr

080082d0 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	4613      	mov	r3, r2
 80082da:	460a      	mov	r2, r1
 80082dc:	807a      	strh	r2, [r7, #2]
 80082de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80082e0:	787b      	ldrb	r3, [r7, #1]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d008      	beq.n	80082f8 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	889b      	ldrh	r3, [r3, #4]
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	887b      	ldrh	r3, [r7, #2]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	809a      	strh	r2, [r3, #4]
 80082f6:	e00a      	b.n	800830e <I2C_ITConfig+0x3e>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	889b      	ldrh	r3, [r3, #4]
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	887b      	ldrh	r3, [r7, #2]
 8008300:	ea6f 0303 	mvn.w	r3, r3
 8008304:	b29b      	uxth	r3, r3
 8008306:	4013      	ands	r3, r2
 8008308:	b29a      	uxth	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	809a      	strh	r2, [r3, #4]
  }
}
 800830e:	f107 070c 	add.w	r7, r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	bc80      	pop	{r7}
 8008316:	4770      	bx	lr

08008318 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8008322:	f04f 0300 	mov.w	r3, #0
 8008326:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8008328:	f04f 0300 	mov.w	r3, #0
 800832c:	60fb      	str	r3, [r7, #12]
 800832e:	f04f 0300 	mov.w	r3, #0
 8008332:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8008334:	f04f 0300 	mov.w	r3, #0
 8008338:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	8a9b      	ldrh	r3, [r3, #20]
 800833e:	b29b      	uxth	r3, r3
 8008340:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	8b1b      	ldrh	r3, [r3, #24]
 8008346:	b29b      	uxth	r3, r3
 8008348:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8008350:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	4313      	orrs	r3, r2
 8008358:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800835c:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	401a      	ands	r2, r3
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	429a      	cmp	r2, r3
 8008368:	d103      	bne.n	8008372 <I2C_CheckEvent+0x5a>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800836a:	f04f 0301 	mov.w	r3, #1
 800836e:	75fb      	strb	r3, [r7, #23]
 8008370:	e002      	b.n	8008378 <I2C_CheckEvent+0x60>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8008372:	f04f 0300 	mov.w	r3, #0
 8008376:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8008378:	7dfb      	ldrb	r3, [r7, #23]
}
 800837a:	4618      	mov	r0, r3
 800837c:	f107 071c 	add.w	r7, r7, #28
 8008380:	46bd      	mov	sp, r7
 8008382:	bc80      	pop	{r7}
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop

08008388 <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 8008388:	b480      	push	{r7}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 8008390:	f04f 0300 	mov.w	r3, #0
 8008394:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 8008396:	f04f 0300 	mov.w	r3, #0
 800839a:	613b      	str	r3, [r7, #16]
 800839c:	f04f 0300 	mov.w	r3, #0
 80083a0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	8a9b      	ldrh	r3, [r3, #20]
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	8b1b      	ldrh	r3, [r3, #24]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80083b8:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4313      	orrs	r3, r2
 80083c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80083c4:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 80083c6:	697b      	ldr	r3, [r7, #20]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	f107 071c 	add.w	r7, r7, #28
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bc80      	pop	{r7}
 80083d2:	4770      	bx	lr

080083d4 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b087      	sub	sp, #28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80083de:	f04f 0300 	mov.w	r3, #0
 80083e2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80083e4:	f04f 0300 	mov.w	r3, #0
 80083e8:	613b      	str	r3, [r7, #16]
 80083ea:	f04f 0300 	mov.w	r3, #0
 80083ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	ea4f 7313 	mov.w	r3, r3, lsr #28
 80083fa:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008402:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d004      	beq.n	8008414 <I2C_GetFlagStatus+0x40>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f103 0314 	add.w	r3, r3, #20
 8008410:	60fb      	str	r3, [r7, #12]
 8008412:	e007      	b.n	8008424 <I2C_GetFlagStatus+0x50>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800841a:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f103 0318 	add.w	r3, r3, #24
 8008422:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	4013      	ands	r3, r2
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <I2C_GetFlagStatus+0x64>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8008430:	f04f 0301 	mov.w	r3, #1
 8008434:	75fb      	strb	r3, [r7, #23]
 8008436:	e002      	b.n	800843e <I2C_GetFlagStatus+0x6a>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8008438:	f04f 0300 	mov.w	r3, #0
 800843c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800843e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008440:	4618      	mov	r0, r3
 8008442:	f107 071c 	add.w	r7, r7, #28
 8008446:	46bd      	mov	sp, r7
 8008448:	bc80      	pop	{r7}
 800844a:	4770      	bx	lr

0800844c <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8008456:	f04f 0300 	mov.w	r3, #0
 800845a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008462:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	b29b      	uxth	r3, r3
 8008468:	ea6f 0303 	mvn.w	r3, r3
 800846c:	b29a      	uxth	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	829a      	strh	r2, [r3, #20]
}
 8008472:	f107 0714 	add.w	r7, r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	bc80      	pop	{r7}
 800847a:	4770      	bx	lr

0800847c <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8008486:	f04f 0300 	mov.w	r3, #0
 800848a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800848c:	f04f 0300 	mov.w	r3, #0
 8008490:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008498:	ea4f 4213 	mov.w	r2, r3, lsr #16
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	889b      	ldrh	r3, [r3, #4]
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	4013      	ands	r3, r2
 80084a4:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80084ac:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	8a9b      	ldrh	r3, [r3, #20]
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	461a      	mov	r2, r3
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	4013      	ands	r3, r2
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d006      	beq.n	80084cc <I2C_GetITStatus+0x50>
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d003      	beq.n	80084cc <I2C_GetITStatus+0x50>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 80084c4:	f04f 0301 	mov.w	r3, #1
 80084c8:	73fb      	strb	r3, [r7, #15]
 80084ca:	e002      	b.n	80084d2 <I2C_GetITStatus+0x56>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 80084cc:	f04f 0300 	mov.w	r3, #0
 80084d0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	f107 0714 	add.w	r7, r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	bc80      	pop	{r7}
 80084de:	4770      	bx	lr

080084e0 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 80084ea:	f04f 0300 	mov.w	r3, #0
 80084ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80084f6:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	ea6f 0303 	mvn.w	r3, r3
 8008500:	b29a      	uxth	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	829a      	strh	r2, [r3, #20]
}
 8008506:	f107 0714 	add.w	r7, r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	bc80      	pop	{r7}
 800850e:	4770      	bx	lr

08008510 <IWDG_WriteAccessCmd>:
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	4603      	mov	r3, r0
 8008518:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 800851a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800851e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008522:	88fa      	ldrh	r2, [r7, #6]
 8008524:	601a      	str	r2, [r3, #0]
}
 8008526:	f107 070c 	add.w	r7, r7, #12
 800852a:	46bd      	mov	sp, r7
 800852c:	bc80      	pop	{r7}
 800852e:	4770      	bx	lr

08008530 <IWDG_SetPrescaler>:
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	4603      	mov	r3, r0
 8008538:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 800853a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800853e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008542:	79fa      	ldrb	r2, [r7, #7]
 8008544:	605a      	str	r2, [r3, #4]
}
 8008546:	f107 070c 	add.w	r7, r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	bc80      	pop	{r7}
 800854e:	4770      	bx	lr

08008550 <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	4603      	mov	r3, r0
 8008558:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 800855a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800855e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008562:	88fa      	ldrh	r2, [r7, #6]
 8008564:	609a      	str	r2, [r3, #8]
}
 8008566:	f107 070c 	add.w	r7, r7, #12
 800856a:	46bd      	mov	sp, r7
 800856c:	bc80      	pop	{r7}
 800856e:	4770      	bx	lr

08008570 <IWDG_ReloadCounter>:
  *         (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 8008570:	b480      	push	{r7}
 8008572:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 8008574:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008578:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800857c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008580:	601a      	str	r2, [r3, #0]
}
 8008582:	46bd      	mov	sp, r7
 8008584:	bc80      	pop	{r7}
 8008586:	4770      	bx	lr

08008588 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 8008588:	b480      	push	{r7}
 800858a:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 800858c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008590:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008594:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8008598:	601a      	str	r2, [r3, #0]
}
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr

080085a0 <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 80085aa:	f04f 0300 	mov.w	r3, #0
 80085ae:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 80085b0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80085b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80085b8:	68da      	ldr	r2, [r3, #12]
 80085ba:	88fb      	ldrh	r3, [r7, #6]
 80085bc:	4013      	ands	r3, r2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d003      	beq.n	80085ca <IWDG_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 80085c2:	f04f 0301 	mov.w	r3, #1
 80085c6:	73fb      	strb	r3, [r7, #15]
 80085c8:	e002      	b.n	80085d0 <IWDG_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 80085ca:	f04f 0300 	mov.w	r3, #0
 80085ce:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	f107 0714 	add.w	r7, r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	bc80      	pop	{r7}
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop

080085e0 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 80085e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80085e8:	f04f 0101 	mov.w	r1, #1
 80085ec:	f000 fe24 	bl	8009238 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 80085f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80085f4:	f04f 0100 	mov.w	r1, #0
 80085f8:	f000 fe1e 	bl	8009238 <RCC_APB1PeriphResetCmd>
}
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop

08008600 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 800860a:	f04f 0320 	mov.w	r3, #32
 800860e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8008612:	79fa      	ldrb	r2, [r7, #7]
 8008614:	601a      	str	r2, [r3, #0]
}
 8008616:	f107 070c 	add.w	r7, r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	bc80      	pop	{r7}
 800861e:	4770      	bx	lr

08008620 <PWR_PVDLevelConfig>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 800862e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008632:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008640:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4313      	orrs	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800864a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800864e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	601a      	str	r2, [r3, #0]
}
 8008656:	f107 0714 	add.w	r7, r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	bc80      	pop	{r7}
 800865e:	4770      	bx	lr

08008660 <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	4603      	mov	r3, r0
 8008668:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 800866a:	f04f 0310 	mov.w	r3, #16
 800866e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8008672:	79fa      	ldrb	r2, [r7, #7]
 8008674:	601a      	str	r2, [r3, #0]
}
 8008676:	f107 070c 	add.w	r7, r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	bc80      	pop	{r7}
 800867e:	4770      	bx	lr

08008680 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	4603      	mov	r3, r0
 8008688:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 800868a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800868e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8008692:	79fa      	ldrb	r2, [r7, #7]
 8008694:	601a      	str	r2, [r3, #0]
}
 8008696:	f107 070c 	add.w	r7, r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	bc80      	pop	{r7}
 800869e:	4770      	bx	lr

080086a0 <PWR_BackupRegulatorCmd>:
  * @param  NewState: new state of the Backup Regulator.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	4603      	mov	r3, r0
 80086a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 80086aa:	f04f 03a4 	mov.w	r3, #164	; 0xa4
 80086ae:	f2c4 230e 	movt	r3, #16910	; 0x420e
 80086b2:	79fa      	ldrb	r2, [r7, #7]
 80086b4:	601a      	str	r2, [r3, #0]
}
 80086b6:	f107 070c 	add.w	r7, r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bc80      	pop	{r7}
 80086be:	4770      	bx	lr

080086c0 <PWR_MainRegulatorModeConfig>:
  *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
  *                                                System frequency up to 144 MHz.    
  * @retval None
  */
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10c      	bne.n	80086e8 <PWR_MainRegulatorModeConfig+0x28>
  {
    PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 80086ce:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80086d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80086d6:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80086da:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80086de:	6812      	ldr	r2, [r2, #0]
 80086e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80086e4:	601a      	str	r2, [r3, #0]
 80086e6:	e00b      	b.n	8008700 <PWR_MainRegulatorModeConfig+0x40>
  }
  else
  {    
    PWR->CR |= PWR_Regulator_Voltage_Scale1;
 80086e8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80086ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80086f0:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80086f4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80086f8:	6812      	ldr	r2, [r2, #0]
 80086fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086fe:	601a      	str	r2, [r3, #0]
  }
}
 8008700:	f107 070c 	add.w	r7, r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	bc80      	pop	{r7}
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop

0800870c <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	4603      	mov	r3, r0
 8008714:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 8008716:	f04f 0324 	mov.w	r3, #36	; 0x24
 800871a:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800871e:	79fa      	ldrb	r2, [r7, #7]
 8008720:	601a      	str	r2, [r3, #0]
}
 8008722:	f107 070c 	add.w	r7, r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	bc80      	pop	{r7}
 800872a:	4770      	bx	lr

0800872c <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8008738:	f04f 0300 	mov.w	r3, #0
 800873c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 800873e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008742:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f023 0303 	bic.w	r3, r3, #3
 8008750:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4313      	orrs	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800875a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800875e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8008766:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800876a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800876e:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8008772:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8008776:	6912      	ldr	r2, [r2, #16]
 8008778:	f042 0204 	orr.w	r2, r2, #4
 800877c:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800877e:	78fb      	ldrb	r3, [r7, #3]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d101      	bne.n	8008788 <PWR_EnterSTOPMode+0x5c>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8008784:	bf30      	wfi
 8008786:	e000      	b.n	800878a <PWR_EnterSTOPMode+0x5e>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 8008788:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 800878a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800878e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8008792:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8008796:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800879a:	6912      	ldr	r2, [r2, #16]
 800879c:	f022 0204 	bic.w	r2, r2, #4
 80087a0:	611a      	str	r2, [r3, #16]
}
 80087a2:	f107 0714 	add.w	r7, r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr

080087ac <PWR_EnterSTANDBYMode>:
  *          - WKUP pin 1 (PA0) if enabled.       
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 80087ac:	b480      	push	{r7}
 80087ae:	af00      	add	r7, sp, #0
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 80087b0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80087b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80087b8:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80087bc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80087c0:	6812      	ldr	r2, [r2, #0]
 80087c2:	f042 0204 	orr.w	r2, r2, #4
 80087c6:	601a      	str	r2, [r3, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 80087c8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80087cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80087d0:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80087d4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80087d8:	6812      	ldr	r2, [r2, #0]
 80087da:	f042 0202 	orr.w	r2, r2, #2
 80087de:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80087e0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80087e4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80087e8:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80087ec:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80087f0:	6912      	ldr	r2, [r2, #16]
 80087f2:	f042 0204 	orr.w	r2, r2, #4
 80087f6:	611a      	str	r2, [r3, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80087f8:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bc80      	pop	{r7}
 80087fe:	4770      	bx	lr

08008800 <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
  *                 scaling output selection is ready. 
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8008808:	f04f 0300 	mov.w	r3, #0
 800880c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 800880e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008812:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4013      	ands	r3, r2
 800881c:	2b00      	cmp	r3, #0
 800881e:	d003      	beq.n	8008828 <PWR_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 8008820:	f04f 0301 	mov.w	r3, #1
 8008824:	73fb      	strb	r3, [r7, #15]
 8008826:	e002      	b.n	800882e <PWR_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 8008828:	f04f 0300 	mov.w	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800882e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008830:	4618      	mov	r0, r3
 8008832:	f107 0714 	add.w	r7, r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	bc80      	pop	{r7}
 800883a:	4770      	bx	lr

0800883c <PWR_ClearFlag>:
  *            @arg PWR_FLAG_WU: Wake Up flag
  *            @arg PWR_FLAG_SB: StandBy flag
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8008844:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008848:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800884c:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8008850:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8008854:	6811      	ldr	r1, [r2, #0]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800885c:	430a      	orrs	r2, r1
 800885e:	601a      	str	r2, [r3, #0]
}
 8008860:	f107 070c 	add.w	r7, r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	bc80      	pop	{r7}
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop

0800886c <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800886c:	b480      	push	{r7}
 800886e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008870:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008874:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008878:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800887c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008880:	6812      	ldr	r2, [r2, #0]
 8008882:	f042 0201 	orr.w	r2, r2, #1
 8008886:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008888:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800888c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008890:	f04f 0200 	mov.w	r2, #0
 8008894:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008896:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800889a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800889e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80088a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80088a6:	6812      	ldr	r2, [r2, #0]
 80088a8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80088ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80088b0:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80088b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80088b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80088ba:	f243 0210 	movw	r2, #12304	; 0x3010
 80088be:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80088c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80088c4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80088c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80088cc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80088d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80088d4:	6812      	ldr	r2, [r2, #0]
 80088d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80088da:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80088dc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80088e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80088e4:	f04f 0200 	mov.w	r2, #0
 80088e8:	60da      	str	r2, [r3, #12]
}
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bc80      	pop	{r7}
 80088ee:	4770      	bx	lr

080088f0 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	4603      	mov	r3, r0
 80088f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80088fa:	f643 0302 	movw	r3, #14338	; 0x3802
 80088fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008902:	f04f 0200 	mov.w	r2, #0
 8008906:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8008908:	f643 0302 	movw	r3, #14338	; 0x3802
 800890c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008910:	79fa      	ldrb	r2, [r7, #7]
 8008912:	701a      	strb	r2, [r3, #0]
}
 8008914:	f107 070c 	add.w	r7, r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	bc80      	pop	{r7}
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop

08008920 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8008926:	f04f 0300 	mov.w	r3, #0
 800892a:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800892c:	f04f 0300 	mov.w	r3, #0
 8008930:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8008932:	f04f 0300 	mov.w	r3, #0
 8008936:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8008938:	f04f 0031 	mov.w	r0, #49	; 0x31
 800893c:	f000 fdd2 	bl	80094e4 <RCC_GetFlagStatus>
 8008940:	4603      	mov	r3, r0
 8008942:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	f103 0301 	add.w	r3, r3, #1
 800894a:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008952:	d002      	beq.n	800895a <RCC_WaitForHSEStartUp+0x3a>
 8008954:	79bb      	ldrb	r3, [r7, #6]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0ee      	beq.n	8008938 <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800895a:	f04f 0031 	mov.w	r0, #49	; 0x31
 800895e:	f000 fdc1 	bl	80094e4 <RCC_GetFlagStatus>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d003      	beq.n	8008970 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 8008968:	f04f 0301 	mov.w	r3, #1
 800896c:	71fb      	strb	r3, [r7, #7]
 800896e:	e002      	b.n	8008976 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 8008970:	f04f 0300 	mov.w	r3, #0
 8008974:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8008976:	79fb      	ldrb	r3, [r7, #7]
}
 8008978:	4618      	mov	r0, r3
 800897a:	f107 0708 	add.w	r7, r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop

08008984 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	4603      	mov	r3, r0
 800898c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800898e:	f04f 0300 	mov.w	r3, #0
 8008992:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8008994:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008998:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80089a8:	79fb      	ldrb	r3, [r7, #7]
 80089aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 80089b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80089b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	601a      	str	r2, [r3, #0]
}
 80089c0:	f107 0714 	add.w	r7, r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bc80      	pop	{r7}
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop

080089cc <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	4603      	mov	r3, r0
 80089d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80089d6:	f04f 0300 	mov.w	r3, #0
 80089da:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80089de:	79fa      	ldrb	r2, [r7, #7]
 80089e0:	601a      	str	r2, [r3, #0]
}
 80089e2:	f107 070c 	add.w	r7, r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bc80      	pop	{r7}
 80089ea:	4770      	bx	lr

080089ec <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	4603      	mov	r3, r0
 80089f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80089f6:	f643 0370 	movw	r3, #14448	; 0x3870
 80089fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80089fe:	f04f 0200 	mov.w	r2, #0
 8008a02:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8008a04:	f643 0370 	movw	r3, #14448	; 0x3870
 8008a08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a0c:	f04f 0200 	mov.w	r2, #0
 8008a10:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8008a12:	79fb      	ldrb	r3, [r7, #7]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d002      	beq.n	8008a1e <RCC_LSEConfig+0x32>
 8008a18:	2b04      	cmp	r3, #4
 8008a1a:	d008      	beq.n	8008a2e <RCC_LSEConfig+0x42>
 8008a1c:	e00f      	b.n	8008a3e <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8008a1e:	f643 0370 	movw	r3, #14448	; 0x3870
 8008a22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a26:	f04f 0201 	mov.w	r2, #1
 8008a2a:	701a      	strb	r2, [r3, #0]
      break;
 8008a2c:	e008      	b.n	8008a40 <RCC_LSEConfig+0x54>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8008a2e:	f643 0370 	movw	r3, #14448	; 0x3870
 8008a32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a36:	f04f 0205 	mov.w	r2, #5
 8008a3a:	701a      	strb	r2, [r3, #0]
      break;
 8008a3c:	e000      	b.n	8008a40 <RCC_LSEConfig+0x54>
    default:
      break;
 8008a3e:	bf00      	nop
  }
}
 8008a40:	f107 070c 	add.w	r7, r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bc80      	pop	{r7}
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop

08008a4c <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4603      	mov	r3, r0
 8008a54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8008a56:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8008a5a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008a5e:	79fa      	ldrb	r2, [r7, #7]
 8008a60:	601a      	str	r2, [r3, #0]
}
 8008a62:	f107 070c 	add.w	r7, r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bc80      	pop	{r7}
 8008a6a:	4770      	bx	lr

08008a6c <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
 8008a78:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8008a7a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008a7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	ea4f 1182 	mov.w	r1, r2, lsl #6
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	4311      	orrs	r1, r2
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008a92:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008a96:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8008a9a:	4311      	orrs	r1, r2
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	ea4f 6202 	mov.w	r2, r2, lsl #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 8008aaa:	f107 0714 	add.w	r7, r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bc80      	pop	{r7}
 8008ab2:	4770      	bx	lr

08008ab4 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8008abe:	f04f 0360 	mov.w	r3, #96	; 0x60
 8008ac2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008ac6:	79fa      	ldrb	r2, [r7, #7]
 8008ac8:	601a      	str	r2, [r3, #0]
}
 8008aca:	f107 070c 	add.w	r7, r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bc80      	pop	{r7}
 8008ad2:	4770      	bx	lr

08008ad4 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8008ade:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008ae2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	ea4f 1182 	mov.w	r1, r2, lsl #6
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	ea4f 7202 	mov.w	r2, r2, lsl #28
 8008af2:	430a      	orrs	r2, r1
 8008af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008af8:	f107 070c 	add.w	r7, r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bc80      	pop	{r7}
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop

08008b04 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8008b0e:	f04f 0368 	mov.w	r3, #104	; 0x68
 8008b12:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008b16:	79fa      	ldrb	r2, [r7, #7]
 8008b18:	601a      	str	r2, [r3, #0]
}
 8008b1a:	f107 070c 	add.w	r7, r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bc80      	pop	{r7}
 8008b22:	4770      	bx	lr

08008b24 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8008b2e:	f04f 034c 	mov.w	r3, #76	; 0x4c
 8008b32:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008b36:	79fa      	ldrb	r2, [r7, #7]
 8008b38:	601a      	str	r2, [r3, #0]
}
 8008b3a:	f107 070c 	add.w	r7, r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bc80      	pop	{r7}
 8008b42:	4770      	bx	lr

08008b44 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008b4e:	f04f 0300 	mov.w	r3, #0
 8008b52:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8008b54:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008b58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8008b74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008b78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	609a      	str	r2, [r3, #8]
}
 8008b80:	f107 0714 	add.w	r7, r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bc80      	pop	{r7}
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop

08008b8c <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008b96:	f04f 0300 	mov.w	r3, #0
 8008b9a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8008b9c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008ba0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8008bbc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008bc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	609a      	str	r2, [r3, #8]
}
 8008bc8:	f107 0714 	add.w	r7, r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bc80      	pop	{r7}
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop

08008bd4 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008bdc:	f04f 0300 	mov.w	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8008be2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008be6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f023 0303 	bic.w	r3, r3, #3
 8008bf4:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8008bfe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008c02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	609a      	str	r2, [r3, #8]
}
 8008c0a:	f107 0714 	add.w	r7, r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bc80      	pop	{r7}
 8008c12:	4770      	bx	lr

08008c14 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8008c14:	b480      	push	{r7}
 8008c16:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8008c18:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008c1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	f003 030c 	and.w	r3, r3, #12
 8008c28:	b2db      	uxtb	r3, r3
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bc80      	pop	{r7}
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop

08008c34 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008c3c:	f04f 0300 	mov.w	r3, #0
 8008c40:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8008c42:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008c46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c54:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8008c5e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008c62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	609a      	str	r2, [r3, #8]
}
 8008c6a:	f107 0714 	add.w	r7, r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bc80      	pop	{r7}
 8008c72:	4770      	bx	lr

08008c74 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008c7c:	f04f 0300 	mov.w	r3, #0
 8008c80:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8008c82:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008c86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8008c94:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8008c9e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008ca2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	609a      	str	r2, [r3, #8]
}
 8008caa:	f107 0714 	add.w	r7, r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bc80      	pop	{r7}
 8008cb2:	4770      	bx	lr

08008cb4 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008cbc:	f04f 0300 	mov.w	r3, #0
 8008cc0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8008cc2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008cc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008cd4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8008ce2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008ce6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	609a      	str	r2, [r3, #8]
}
 8008cee:	f107 0714 	add.w	r7, r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bc80      	pop	{r7}
 8008cf6:	4770      	bx	lr

08008cf8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b089      	sub	sp, #36	; 0x24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8008d00:	f04f 0300 	mov.w	r3, #0
 8008d04:	61bb      	str	r3, [r7, #24]
 8008d06:	f04f 0300 	mov.w	r3, #0
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	f04f 0300 	mov.w	r3, #0
 8008d10:	61fb      	str	r3, [r7, #28]
 8008d12:	f04f 0302 	mov.w	r3, #2
 8008d16:	613b      	str	r3, [r7, #16]
 8008d18:	f04f 0300 	mov.w	r3, #0
 8008d1c:	60fb      	str	r3, [r7, #12]
 8008d1e:	f04f 0302 	mov.w	r3, #2
 8008d22:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8008d24:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008d28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f003 030c 	and.w	r3, r3, #12
 8008d32:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	2b04      	cmp	r3, #4
 8008d38:	d00a      	beq.n	8008d50 <RCC_GetClocksFreq+0x58>
 8008d3a:	2b08      	cmp	r3, #8
 8008d3c:	d00f      	beq.n	8008d5e <RCC_GetClocksFreq+0x66>
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d160      	bne.n	8008e04 <RCC_GetClocksFreq+0x10c>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8008d48:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8008d4c:	6013      	str	r3, [r2, #0]
      break;
 8008d4e:	e060      	b.n	8008e12 <RCC_GetClocksFreq+0x11a>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	f647 0340 	movw	r3, #30784	; 0x7840
 8008d56:	f2c0 137d 	movt	r3, #381	; 0x17d
 8008d5a:	6013      	str	r3, [r2, #0]
      break;
 8008d5c:	e059      	b.n	8008e12 <RCC_GetClocksFreq+0x11a>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8008d5e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008d62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d6c:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8008d70:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d72:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008d76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d80:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d014      	beq.n	8008db2 <RCC_GetClocksFreq+0xba>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8008d88:	f647 0340 	movw	r3, #30784	; 0x7840
 8008d8c:	f2c0 137d 	movt	r3, #381	; 0x17d
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d96:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008d9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d9e:	6859      	ldr	r1, [r3, #4]
 8008da0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008da4:	400b      	ands	r3, r1
 8008da6:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8008daa:	fb03 f302 	mul.w	r3, r3, r2
 8008dae:	61fb      	str	r3, [r7, #28]
 8008db0:	e013      	b.n	8008dda <RCC_GetClocksFreq+0xe2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8008db2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8008db6:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	fbb3 f2f2 	udiv	r2, r3, r2
 8008dc0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008dc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008dc8:	6859      	ldr	r1, [r3, #4]
 8008dca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008dce:	400b      	ands	r3, r1
 8008dd0:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8008dd4:	fb03 f302 	mul.w	r3, r3, r2
 8008dd8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8008dda:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008dde:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008de8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8008dec:	f103 0301 	add.w	r3, r3, #1
 8008df0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008df4:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8008df6:	69fa      	ldr	r2, [r7, #28]
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	601a      	str	r2, [r3, #0]
      break;
 8008e02:	e006      	b.n	8008e12 <RCC_GetClocksFreq+0x11a>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8008e0a:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8008e0e:	6013      	str	r3, [r2, #0]
      break;
 8008e10:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8008e12:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008e16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e20:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8008e28:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8008e2a:	f240 0300 	movw	r3, #0
 8008e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	189b      	adds	r3, r3, r2
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	fa22 f203 	lsr.w	r2, r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8008e4a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008e4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8008e58:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	ea4f 2393 	mov.w	r3, r3, lsr #10
 8008e60:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8008e62:	f240 0300 	movw	r3, #0
 8008e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008e6a:	69ba      	ldr	r2, [r7, #24]
 8008e6c:	189b      	adds	r3, r3, r2
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	fa22 f203 	lsr.w	r2, r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8008e82:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008e86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008e90:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	ea4f 3353 	mov.w	r3, r3, lsr #13
 8008e98:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8008e9a:	f240 0300 	movw	r3, #0
 8008e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	189b      	adds	r3, r3, r2
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685a      	ldr	r2, [r3, #4]
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	fa22 f203 	lsr.w	r2, r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	60da      	str	r2, [r3, #12]
}
 8008eba:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bc80      	pop	{r7}
 8008ec2:	4770      	bx	lr

08008ec4 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008ecc:	f04f 0300 	mov.w	r3, #0
 8008ed0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008edc:	d117      	bne.n	8008f0e <RCC_RTCCLKConfig+0x4a>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8008ede:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008ee2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008ef0:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8008f02:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008f06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8008f0e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008f12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008f16:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008f1a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008f1e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	ea4f 5202 	mov.w	r2, r2, lsl #20
 8008f26:	ea4f 5212 	mov.w	r2, r2, lsr #20
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008f2e:	f107 0714 	add.w	r7, r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bc80      	pop	{r7}
 8008f36:	4770      	bx	lr

08008f38 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8008f42:	f640 633c 	movw	r3, #3644	; 0xe3c
 8008f46:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008f4a:	79fa      	ldrb	r2, [r7, #7]
 8008f4c:	601a      	str	r2, [r3, #0]
}
 8008f4e:	f107 070c 	add.w	r7, r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bc80      	pop	{r7}
 8008f56:	4770      	bx	lr

08008f58 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	4603      	mov	r3, r0
 8008f60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8008f62:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8008f66:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008f6a:	79fa      	ldrb	r2, [r7, #7]
 8008f6c:	601a      	str	r2, [r3, #0]
}
 8008f6e:	f107 070c 	add.w	r7, r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bc80      	pop	{r7}
 8008f76:	4770      	bx	lr

08008f78 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8008f80:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8008f84:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	601a      	str	r2, [r3, #0]
}
 8008f8c:	f107 070c 	add.w	r7, r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bc80      	pop	{r7}
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop

08008f98 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008fa4:	78fb      	ldrb	r3, [r7, #3]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00c      	beq.n	8008fc4 <RCC_AHB1PeriphClockCmd+0x2c>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8008faa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008fae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008fb2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008fb6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008fba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	631a      	str	r2, [r3, #48]	; 0x30
 8008fc2:	e00d      	b.n	8008fe0 <RCC_AHB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8008fc4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008fc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008fcc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008fd0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008fd4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	ea6f 0202 	mvn.w	r2, r2
 8008fdc:	400a      	ands	r2, r1
 8008fde:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8008fe0:	f107 070c 	add.w	r7, r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bc80      	pop	{r7}
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop

08008fec <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008ff8:	78fb      	ldrb	r3, [r7, #3]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00c      	beq.n	8009018 <RCC_AHB2PeriphClockCmd+0x2c>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8008ffe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009002:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009006:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800900a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800900e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	430a      	orrs	r2, r1
 8009014:	635a      	str	r2, [r3, #52]	; 0x34
 8009016:	e00d      	b.n	8009034 <RCC_AHB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8009018:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800901c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009020:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009024:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009028:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	ea6f 0202 	mvn.w	r2, r2
 8009030:	400a      	ands	r2, r1
 8009032:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8009034:	f107 070c 	add.w	r7, r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	bc80      	pop	{r7}
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop

08009040 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	460b      	mov	r3, r1
 800904a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800904c:	78fb      	ldrb	r3, [r7, #3]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00c      	beq.n	800906c <RCC_AHB3PeriphClockCmd+0x2c>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8009052:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009056:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800905a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800905e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009062:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	430a      	orrs	r2, r1
 8009068:	639a      	str	r2, [r3, #56]	; 0x38
 800906a:	e00d      	b.n	8009088 <RCC_AHB3PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800906c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009070:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009074:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009078:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800907c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	ea6f 0202 	mvn.w	r2, r2
 8009084:	400a      	ands	r2, r1
 8009086:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 8009088:	f107 070c 	add.w	r7, r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	bc80      	pop	{r7}
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop

08009094 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	460b      	mov	r3, r1
 800909e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80090a0:	78fb      	ldrb	r3, [r7, #3]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00c      	beq.n	80090c0 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80090a6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80090aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80090ae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80090b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80090b6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	641a      	str	r2, [r3, #64]	; 0x40
 80090be:	e00d      	b.n	80090dc <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80090c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80090c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80090c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80090cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80090d0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	ea6f 0202 	mvn.w	r2, r2
 80090d8:	400a      	ands	r2, r1
 80090da:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80090dc:	f107 070c 	add.w	r7, r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bc80      	pop	{r7}
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop

080090e8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80090f4:	78fb      	ldrb	r3, [r7, #3]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00c      	beq.n	8009114 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80090fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80090fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009102:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009106:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800910a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	430a      	orrs	r2, r1
 8009110:	645a      	str	r2, [r3, #68]	; 0x44
 8009112:	e00d      	b.n	8009130 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8009114:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009118:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800911c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009120:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009124:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	ea6f 0202 	mvn.w	r2, r2
 800912c:	400a      	ands	r2, r1
 800912e:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8009130:	f107 070c 	add.w	r7, r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	bc80      	pop	{r7}
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop

0800913c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009148:	78fb      	ldrb	r3, [r7, #3]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00c      	beq.n	8009168 <RCC_AHB1PeriphResetCmd+0x2c>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800914e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009152:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009156:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800915a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800915e:	6911      	ldr	r1, [r2, #16]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	430a      	orrs	r2, r1
 8009164:	611a      	str	r2, [r3, #16]
 8009166:	e00d      	b.n	8009184 <RCC_AHB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8009168:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800916c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009170:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009174:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009178:	6911      	ldr	r1, [r2, #16]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	ea6f 0202 	mvn.w	r2, r2
 8009180:	400a      	ands	r2, r1
 8009182:	611a      	str	r2, [r3, #16]
  }
}
 8009184:	f107 070c 	add.w	r7, r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	bc80      	pop	{r7}
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop

08009190 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	460b      	mov	r3, r1
 800919a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800919c:	78fb      	ldrb	r3, [r7, #3]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00c      	beq.n	80091bc <RCC_AHB2PeriphResetCmd+0x2c>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80091a2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80091a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80091aa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80091ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80091b2:	6951      	ldr	r1, [r2, #20]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	430a      	orrs	r2, r1
 80091b8:	615a      	str	r2, [r3, #20]
 80091ba:	e00d      	b.n	80091d8 <RCC_AHB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80091bc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80091c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80091c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80091c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80091cc:	6951      	ldr	r1, [r2, #20]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	ea6f 0202 	mvn.w	r2, r2
 80091d4:	400a      	ands	r2, r1
 80091d6:	615a      	str	r2, [r3, #20]
  }
}
 80091d8:	f107 070c 	add.w	r7, r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	bc80      	pop	{r7}
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop

080091e4 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80091f0:	78fb      	ldrb	r3, [r7, #3]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00c      	beq.n	8009210 <RCC_AHB3PeriphResetCmd+0x2c>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80091f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80091fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80091fe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009202:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009206:	6991      	ldr	r1, [r2, #24]
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	430a      	orrs	r2, r1
 800920c:	619a      	str	r2, [r3, #24]
 800920e:	e00d      	b.n	800922c <RCC_AHB3PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8009210:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009214:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009218:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800921c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009220:	6991      	ldr	r1, [r2, #24]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	ea6f 0202 	mvn.w	r2, r2
 8009228:	400a      	ands	r2, r1
 800922a:	619a      	str	r2, [r3, #24]
  }
}
 800922c:	f107 070c 	add.w	r7, r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	bc80      	pop	{r7}
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop

08009238 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	460b      	mov	r3, r1
 8009242:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009244:	78fb      	ldrb	r3, [r7, #3]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00c      	beq.n	8009264 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800924a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800924e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009252:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009256:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800925a:	6a11      	ldr	r1, [r2, #32]
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	430a      	orrs	r2, r1
 8009260:	621a      	str	r2, [r3, #32]
 8009262:	e00d      	b.n	8009280 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8009264:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009268:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800926c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009270:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009274:	6a11      	ldr	r1, [r2, #32]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	ea6f 0202 	mvn.w	r2, r2
 800927c:	400a      	ands	r2, r1
 800927e:	621a      	str	r2, [r3, #32]
  }
}
 8009280:	f107 070c 	add.w	r7, r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	bc80      	pop	{r7}
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop

0800928c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009298:	78fb      	ldrb	r3, [r7, #3]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00c      	beq.n	80092b8 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800929e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80092a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80092a6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80092aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80092ae:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	430a      	orrs	r2, r1
 80092b4:	625a      	str	r2, [r3, #36]	; 0x24
 80092b6:	e00d      	b.n	80092d4 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80092b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80092bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80092c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80092c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80092c8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	ea6f 0202 	mvn.w	r2, r2
 80092d0:	400a      	ands	r2, r1
 80092d2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80092d4:	f107 070c 	add.w	r7, r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	bc80      	pop	{r7}
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop

080092e0 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	460b      	mov	r3, r1
 80092ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80092ec:	78fb      	ldrb	r3, [r7, #3]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00c      	beq.n	800930c <RCC_AHB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 80092f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80092f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80092fa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80092fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009302:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	430a      	orrs	r2, r1
 8009308:	651a      	str	r2, [r3, #80]	; 0x50
 800930a:	e00d      	b.n	8009328 <RCC_AHB1PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 800930c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009310:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009314:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009318:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800931c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	ea6f 0202 	mvn.w	r2, r2
 8009324:	400a      	ands	r2, r1
 8009326:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 8009328:	f107 070c 	add.w	r7, r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	bc80      	pop	{r7}
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop

08009334 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009340:	78fb      	ldrb	r3, [r7, #3]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00c      	beq.n	8009360 <RCC_AHB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8009346:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800934a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800934e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009352:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009356:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	430a      	orrs	r2, r1
 800935c:	655a      	str	r2, [r3, #84]	; 0x54
 800935e:	e00d      	b.n	800937c <RCC_AHB2PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8009360:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009364:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009368:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800936c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009370:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	ea6f 0202 	mvn.w	r2, r2
 8009378:	400a      	ands	r2, r1
 800937a:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 800937c:	f107 070c 	add.w	r7, r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	bc80      	pop	{r7}
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop

08009388 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009394:	78fb      	ldrb	r3, [r7, #3]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00c      	beq.n	80093b4 <RCC_AHB3PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800939a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800939e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80093a2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80093a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80093aa:	6d91      	ldr	r1, [r2, #88]	; 0x58
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	659a      	str	r2, [r3, #88]	; 0x58
 80093b2:	e00d      	b.n	80093d0 <RCC_AHB3PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 80093b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80093b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80093bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80093c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80093c4:	6d91      	ldr	r1, [r2, #88]	; 0x58
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	ea6f 0202 	mvn.w	r2, r2
 80093cc:	400a      	ands	r2, r1
 80093ce:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 80093d0:	f107 070c 	add.w	r7, r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bc80      	pop	{r7}
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop

080093dc <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	460b      	mov	r3, r1
 80093e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00c      	beq.n	8009408 <RCC_APB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80093ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80093f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80093f6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80093fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80093fe:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	430a      	orrs	r2, r1
 8009404:	661a      	str	r2, [r3, #96]	; 0x60
 8009406:	e00d      	b.n	8009424 <RCC_APB1PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8009408:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800940c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009410:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009414:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009418:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	ea6f 0202 	mvn.w	r2, r2
 8009420:	400a      	ands	r2, r1
 8009422:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 8009424:	f107 070c 	add.w	r7, r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	bc80      	pop	{r7}
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop

08009430 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800943c:	78fb      	ldrb	r3, [r7, #3]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00c      	beq.n	800945c <RCC_APB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8009442:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009446:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800944a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800944e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009452:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	430a      	orrs	r2, r1
 8009458:	665a      	str	r2, [r3, #100]	; 0x64
 800945a:	e00d      	b.n	8009478 <RCC_APB2PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 800945c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009460:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009464:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009468:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800946c:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	ea6f 0202 	mvn.w	r2, r2
 8009474:	400a      	ands	r2, r1
 8009476:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 8009478:	f107 070c 	add.w	r7, r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	bc80      	pop	{r7}
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop

08009484 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	71fa      	strb	r2, [r7, #7]
 8009490:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009492:	79bb      	ldrb	r3, [r7, #6]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00e      	beq.n	80094b6 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8009498:	f643 030d 	movw	r3, #14349	; 0x380d
 800949c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80094a0:	f643 020d 	movw	r2, #14349	; 0x380d
 80094a4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80094a8:	7812      	ldrb	r2, [r2, #0]
 80094aa:	b2d1      	uxtb	r1, r2
 80094ac:	79fa      	ldrb	r2, [r7, #7]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	b2d2      	uxtb	r2, r2
 80094b2:	701a      	strb	r2, [r3, #0]
 80094b4:	e010      	b.n	80094d8 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80094b6:	f643 030d 	movw	r3, #14349	; 0x380d
 80094ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80094be:	f643 020d 	movw	r2, #14349	; 0x380d
 80094c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80094c6:	7812      	ldrb	r2, [r2, #0]
 80094c8:	b2d1      	uxtb	r1, r2
 80094ca:	79fa      	ldrb	r2, [r7, #7]
 80094cc:	ea6f 0202 	mvn.w	r2, r2
 80094d0:	b2d2      	uxtb	r2, r2
 80094d2:	400a      	ands	r2, r1
 80094d4:	b2d2      	uxtb	r2, r2
 80094d6:	701a      	strb	r2, [r3, #0]
  }
}
 80094d8:	f107 070c 	add.w	r7, r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	bc80      	pop	{r7}
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop

080094e4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b087      	sub	sp, #28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	4603      	mov	r3, r0
 80094ec:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80094ee:	f04f 0300 	mov.w	r3, #0
 80094f2:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80094f4:	f04f 0300 	mov.w	r3, #0
 80094f8:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80094fa:	f04f 0300 	mov.w	r3, #0
 80094fe:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8009500:	79fb      	ldrb	r3, [r7, #7]
 8009502:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8009506:	b2db      	uxtb	r3, r3
 8009508:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d106      	bne.n	800951e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 8009510:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009514:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	617b      	str	r3, [r7, #20]
 800951c:	e00f      	b.n	800953e <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2b02      	cmp	r3, #2
 8009522:	d106      	bne.n	8009532 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 8009524:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009528:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800952c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800952e:	617b      	str	r3, [r7, #20]
 8009530:	e005      	b.n	800953e <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8009532:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009536:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800953a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800953c:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800953e:	79fb      	ldrb	r3, [r7, #7]
 8009540:	f003 031f 	and.w	r3, r3, #31
 8009544:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	697a      	ldr	r2, [r7, #20]
 800954a:	fa22 f303 	lsr.w	r3, r2, r3
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	d003      	beq.n	8009560 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
 8009558:	f04f 0301 	mov.w	r3, #1
 800955c:	74fb      	strb	r3, [r7, #19]
 800955e:	e002      	b.n	8009566 <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
 8009560:	f04f 0300 	mov.w	r3, #0
 8009564:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8009566:	7cfb      	ldrb	r3, [r7, #19]
}
 8009568:	4618      	mov	r0, r3
 800956a:	f107 071c 	add.w	r7, r7, #28
 800956e:	46bd      	mov	sp, r7
 8009570:	bc80      	pop	{r7}
 8009572:	4770      	bx	lr

08009574 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8009574:	b480      	push	{r7}
 8009576:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8009578:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800957c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009580:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009584:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009588:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800958a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800958e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009590:	46bd      	mov	sp, r7
 8009592:	bc80      	pop	{r7}
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop

08009598 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 80095a2:	f04f 0300 	mov.w	r3, #0
 80095a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80095a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80095ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80095b0:	68da      	ldr	r2, [r3, #12]
 80095b2:	79fb      	ldrb	r3, [r7, #7]
 80095b4:	4013      	ands	r3, r2
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d003      	beq.n	80095c2 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
 80095ba:	f04f 0301 	mov.w	r3, #1
 80095be:	73fb      	strb	r3, [r7, #15]
 80095c0:	e002      	b.n	80095c8 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 80095c2:	f04f 0300 	mov.w	r3, #0
 80095c6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	f107 0714 	add.w	r7, r7, #20
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bc80      	pop	{r7}
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop

080095d8 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	4603      	mov	r3, r0
 80095e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80095e2:	f643 030e 	movw	r3, #14350	; 0x380e
 80095e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80095ea:	79fa      	ldrb	r2, [r7, #7]
 80095ec:	701a      	strb	r2, [r3, #0]
}
 80095ee:	f107 070c 	add.w	r7, r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bc80      	pop	{r7}
 80095f6:	4770      	bx	lr

080095f8 <RNG_DeInit>:
  * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 80095fc:	f04f 0040 	mov.w	r0, #64	; 0x40
 8009600:	f04f 0101 	mov.w	r1, #1
 8009604:	f7ff fdc4 	bl	8009190 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 8009608:	f04f 0040 	mov.w	r0, #64	; 0x40
 800960c:	f04f 0100 	mov.w	r1, #0
 8009610:	f7ff fdbe 	bl	8009190 <RCC_AHB2PeriphResetCmd>
}
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop

08009618 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	4603      	mov	r3, r0
 8009620:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009622:	79fb      	ldrb	r3, [r7, #7]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00c      	beq.n	8009642 <RNG_Cmd+0x2a>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8009628:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800962c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009634:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009638:	6812      	ldr	r2, [r2, #0]
 800963a:	f042 0204 	orr.w	r2, r2, #4
 800963e:	601a      	str	r2, [r3, #0]
 8009640:	e00b      	b.n	800965a <RNG_Cmd+0x42>
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 8009642:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009646:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800964a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800964e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009652:	6812      	ldr	r2, [r2, #0]
 8009654:	f022 0204 	bic.w	r2, r2, #4
 8009658:	601a      	str	r2, [r3, #0]
  }
}
 800965a:	f107 070c 	add.w	r7, r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	bc80      	pop	{r7}
 8009662:	4770      	bx	lr

08009664 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 8009664:	b480      	push	{r7}
 8009666:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8009668:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800966c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009670:	689b      	ldr	r3, [r3, #8]
}
 8009672:	4618      	mov	r0, r3
 8009674:	46bd      	mov	sp, r7
 8009676:	bc80      	pop	{r7}
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop

0800967c <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	4603      	mov	r3, r0
 8009684:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009686:	79fb      	ldrb	r3, [r7, #7]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00c      	beq.n	80096a6 <RNG_ITConfig+0x2a>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 800968c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009690:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009698:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800969c:	6812      	ldr	r2, [r2, #0]
 800969e:	f042 0208 	orr.w	r2, r2, #8
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	e00b      	b.n	80096be <RNG_ITConfig+0x42>
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 80096a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096aa:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80096ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096b2:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80096b6:	6812      	ldr	r2, [r2, #0]
 80096b8:	f022 0208 	bic.w	r2, r2, #8
 80096bc:	601a      	str	r2, [r3, #0]
  }
}
 80096be:	f107 070c 	add.w	r7, r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bc80      	pop	{r7}
 80096c6:	4770      	bx	lr

080096c8 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	4603      	mov	r3, r0
 80096d0:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 80096d2:	f04f 0300 	mov.w	r3, #0
 80096d6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 80096d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096dc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80096e0:	685a      	ldr	r2, [r3, #4]
 80096e2:	79fb      	ldrb	r3, [r7, #7]
 80096e4:	4013      	ands	r3, r2
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <RNG_GetFlagStatus+0x2a>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 80096ea:	f04f 0301 	mov.w	r3, #1
 80096ee:	73fb      	strb	r3, [r7, #15]
 80096f0:	e002      	b.n	80096f8 <RNG_GetFlagStatus+0x30>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 80096f2:	f04f 0300 	mov.w	r3, #0
 80096f6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	f107 0714 	add.w	r7, r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	bc80      	pop	{r7}
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop

08009708 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	4603      	mov	r3, r0
 8009710:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 8009712:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009716:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800971a:	79fa      	ldrb	r2, [r7, #7]
 800971c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8009720:	ea6f 0202 	mvn.w	r2, r2
 8009724:	605a      	str	r2, [r3, #4]
}
 8009726:	f107 070c 	add.w	r7, r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	bc80      	pop	{r7}
 800972e:	4770      	bx	lr

08009730 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800973a:	f04f 0300 	mov.w	r3, #0
 800973e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 8009740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009744:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009748:	685a      	ldr	r2, [r3, #4]
 800974a:	79fb      	ldrb	r3, [r7, #7]
 800974c:	4013      	ands	r3, r2
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <RNG_GetITStatus+0x2a>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 8009752:	f04f 0301 	mov.w	r3, #1
 8009756:	73fb      	strb	r3, [r7, #15]
 8009758:	e002      	b.n	8009760 <RNG_GetITStatus+0x30>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 800975a:	f04f 0300 	mov.w	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 8009760:	7bfb      	ldrb	r3, [r7, #15]
}
 8009762:	4618      	mov	r0, r3
 8009764:	f107 0714 	add.w	r7, r7, #20
 8009768:	46bd      	mov	sp, r7
 800976a:	bc80      	pop	{r7}
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop

08009770 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 800977a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800977e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009782:	79fa      	ldrb	r2, [r7, #7]
 8009784:	ea6f 0202 	mvn.w	r2, r2
 8009788:	b2d2      	uxtb	r2, r2
 800978a:	605a      	str	r2, [r3, #4]
}
 800978c:	f107 070c 	add.w	r7, r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	bc80      	pop	{r7}
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop

08009798 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
  __IO uint32_t wutcounter = 0x00;
 800979e:	f04f 0300 	mov.w	r3, #0
 80097a2:	607b      	str	r3, [r7, #4]
  uint32_t wutwfstatus = 0x00;
 80097a4:	f04f 0300 	mov.w	r3, #0
 80097a8:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80097aa:	f04f 0300 	mov.w	r3, #0
 80097ae:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80097b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80097b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80097b8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 80097bc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80097be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80097c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80097c6:	f04f 0253 	mov.w	r2, #83	; 0x53
 80097ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80097cc:	f000 f950 	bl	8009a70 <RTC_EnterInitMode>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d103      	bne.n	80097de <RTC_DeInit+0x46>
  {
    status = ERROR;
 80097d6:	f04f 0300 	mov.w	r3, #0
 80097da:	73fb      	strb	r3, [r7, #15]
 80097dc:	e0a0      	b.n	8009920 <RTC_DeInit+0x188>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 80097de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80097e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80097e6:	f04f 0200 	mov.w	r2, #0
 80097ea:	601a      	str	r2, [r3, #0]
    RTC->DR = (uint32_t)0x00002101;
 80097ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80097f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80097f4:	f242 1201 	movw	r2, #8449	; 0x2101
 80097f8:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 80097fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80097fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009802:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009806:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800980a:	6892      	ldr	r2, [r2, #8]
 800980c:	f002 0207 	and.w	r2, r2, #7
 8009810:	609a      	str	r2, [r3, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8009812:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009816:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	f003 0304 	and.w	r3, r3, #4
 8009820:	60bb      	str	r3, [r7, #8]
      wutcounter++;  
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f103 0301 	add.w	r3, r3, #1
 8009828:	607b      	str	r3, [r7, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009830:	d002      	beq.n	8009838 <RTC_DeInit+0xa0>
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d0ec      	beq.n	8009812 <RTC_DeInit+0x7a>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 8009838:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800983c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	f003 0304 	and.w	r3, r3, #4
 8009846:	2b00      	cmp	r3, #0
 8009848:	d103      	bne.n	8009852 <RTC_DeInit+0xba>
    {
      status = ERROR;
 800984a:	f04f 0300 	mov.w	r3, #0
 800984e:	73fb      	strb	r3, [r7, #15]
 8009850:	e066      	b.n	8009920 <RTC_DeInit+0x188>
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 8009852:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009856:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009860:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009864:	f04f 0200 	mov.w	r2, #0
 8009868:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 800986a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800986e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009876:	615a      	str	r2, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 8009878:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800987c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009880:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8009884:	f2c0 027f 	movt	r2, #127	; 0x7f
 8009888:	611a      	str	r2, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 800988a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800988e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009892:	f04f 0200 	mov.w	r2, #0
 8009896:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 8009898:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800989c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80098a0:	f04f 0200 	mov.w	r2, #0
 80098a4:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 80098a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80098aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80098ae:	f04f 0200 	mov.w	r2, #0
 80098b2:	621a      	str	r2, [r3, #32]
      RTC->SHIFTR = (uint32_t)0x00000000;
 80098b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80098b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80098bc:	f04f 0200 	mov.w	r2, #0
 80098c0:	62da      	str	r2, [r3, #44]	; 0x2c
      RTC->CALR = (uint32_t)0x00000000;
 80098c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80098c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80098ca:	f04f 0200 	mov.w	r2, #0
 80098ce:	63da      	str	r2, [r3, #60]	; 0x3c
      RTC->ALRMASSR = (uint32_t)0x00000000;
 80098d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80098d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80098d8:	f04f 0200 	mov.w	r2, #0
 80098dc:	645a      	str	r2, [r3, #68]	; 0x44
      RTC->ALRMBSSR = (uint32_t)0x00000000;
 80098de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80098e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80098e6:	f04f 0200 	mov.w	r2, #0
 80098ea:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 80098ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80098f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80098f4:	f04f 0200 	mov.w	r2, #0
 80098f8:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 80098fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80098fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009902:	f04f 0200 	mov.w	r2, #0
 8009906:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 8009908:	f000 f90e 	bl	8009b28 <RTC_WaitForSynchro>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d103      	bne.n	800991a <RTC_DeInit+0x182>
      {
        status = ERROR;
 8009912:	f04f 0300 	mov.w	r3, #0
 8009916:	73fb      	strb	r3, [r7, #15]
 8009918:	e002      	b.n	8009920 <RTC_DeInit+0x188>
      }
      else
      {
        status = SUCCESS;      
 800991a:	f04f 0301 	mov.w	r3, #1
 800991e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 8009920:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009924:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009928:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800992c:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800992e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009930:	4618      	mov	r0, r3
 8009932:	f107 0710 	add.w	r7, r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop

0800993c <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 8009944:	f04f 0300 	mov.w	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800994a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800994e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009952:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8009956:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009958:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800995c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009960:	f04f 0253 	mov.w	r2, #83	; 0x53
 8009964:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8009966:	f000 f883 	bl	8009a70 <RTC_EnterInitMode>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d103      	bne.n	8009978 <RTC_Init+0x3c>
  {
    status = ERROR;
 8009970:	f04f 0300 	mov.w	r3, #0
 8009974:	73fb      	strb	r3, [r7, #15]
 8009976:	e033      	b.n	80099e0 <RTC_Init+0xa4>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8009978:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800997c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009980:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009984:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009988:	6892      	ldr	r2, [r2, #8]
 800998a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800998e:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 8009990:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009994:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009998:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800999c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80099a0:	6891      	ldr	r1, [r2, #8]
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	6812      	ldr	r2, [r2, #0]
 80099a6:	430a      	orrs	r2, r1
 80099a8:	609a      	str	r2, [r3, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 80099aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80099ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	6892      	ldr	r2, [r2, #8]
 80099b6:	611a      	str	r2, [r3, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 80099b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80099bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80099c0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80099c4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80099c8:	6911      	ldr	r1, [r2, #16]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	6852      	ldr	r2, [r2, #4]
 80099ce:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80099d2:	430a      	orrs	r2, r1
 80099d4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 80099d6:	f000 f895 	bl	8009b04 <RTC_ExitInitMode>

    status = SUCCESS;    
 80099da:	f04f 0301 	mov.w	r3, #1
 80099de:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80099e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80099e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80099e8:	f04f 02ff 	mov.w	r2, #255	; 0xff
 80099ec:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	f107 0710 	add.w	r7, r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop

080099fc <RTC_StructInit>:
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f04f 0200 	mov.w	r2, #0
 8009a0a:	601a      	str	r2, [r3, #0]
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f04f 027f 	mov.w	r2, #127	; 0x7f
 8009a12:	605a      	str	r2, [r3, #4]

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8009a1a:	609a      	str	r2, [r3, #8]
}
 8009a1c:	f107 070c 	add.w	r7, r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bc80      	pop	{r7}
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop

08009a28 <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8009a32:	79fb      	ldrb	r3, [r7, #7]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d007      	beq.n	8009a48 <RTC_WriteProtectionCmd+0x20>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 8009a38:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009a3c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009a40:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8009a44:	625a      	str	r2, [r3, #36]	; 0x24
 8009a46:	e00d      	b.n	8009a64 <RTC_WriteProtectionCmd+0x3c>
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 8009a48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009a4c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009a50:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8009a54:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 8009a56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009a5a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009a5e:	f04f 0253 	mov.w	r2, #83	; 0x53
 8009a62:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009a64:	f107 070c 	add.w	r7, r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bc80      	pop	{r7}
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop

08009a70 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 8009a76:	f04f 0300 	mov.w	r3, #0
 8009a7a:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8009a7c:	f04f 0300 	mov.w	r3, #0
 8009a80:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 8009a82:	f04f 0300 	mov.w	r3, #0
 8009a86:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009a88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009a8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d12a      	bne.n	8009af0 <RTC_EnterInitMode+0x80>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8009a9a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009a9e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009aa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009aa6:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8009aa8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009aac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab6:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f103 0301 	add.w	r3, r3, #1
 8009abe:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ac6:	d002      	beq.n	8009ace <RTC_EnterInitMode+0x5e>
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0ec      	beq.n	8009aa8 <RTC_EnterInitMode+0x38>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8009ace:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009ad2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d003      	beq.n	8009ae8 <RTC_EnterInitMode+0x78>
    {
      status = SUCCESS;
 8009ae0:	f04f 0301 	mov.w	r3, #1
 8009ae4:	73fb      	strb	r3, [r7, #15]
 8009ae6:	e006      	b.n	8009af6 <RTC_EnterInitMode+0x86>
    }
    else
    {
      status = ERROR;
 8009ae8:	f04f 0300 	mov.w	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]
 8009aee:	e002      	b.n	8009af6 <RTC_EnterInitMode+0x86>
    }        
  }
  else
  {
    status = SUCCESS;  
 8009af0:	f04f 0301 	mov.w	r3, #1
 8009af4:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	f107 0714 	add.w	r7, r7, #20
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bc80      	pop	{r7}
 8009b02:	4770      	bx	lr

08009b04 <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 8009b04:	b480      	push	{r7}
 8009b06:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8009b08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009b0c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009b10:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009b14:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009b18:	68d2      	ldr	r2, [r2, #12]
 8009b1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b1e:	60da      	str	r2, [r3, #12]
}
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bc80      	pop	{r7}
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop

08009b28 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 8009b2e:	f04f 0300 	mov.w	r3, #0
 8009b32:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8009b34:	f04f 0300 	mov.w	r3, #0
 8009b38:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 8009b3a:	f04f 0300 	mov.w	r3, #0
 8009b3e:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009b40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009b44:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009b48:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8009b4c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009b4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009b52:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009b56:	f04f 0253 	mov.w	r2, #83	; 0x53
 8009b5a:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 8009b5c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009b60:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009b64:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009b68:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009b6c:	68d2      	ldr	r2, [r2, #12]
 8009b6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009b72:	60da      	str	r2, [r3, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8009b74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009b78:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	f003 0320 	and.w	r3, r3, #32
 8009b82:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f103 0301 	add.w	r3, r3, #1
 8009b8a:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b92:	d002      	beq.n	8009b9a <RTC_WaitForSynchro+0x72>
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d0ec      	beq.n	8009b74 <RTC_WaitForSynchro+0x4c>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8009b9a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009b9e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	f003 0320 	and.w	r3, r3, #32
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d003      	beq.n	8009bb4 <RTC_WaitForSynchro+0x8c>
  {
    status = SUCCESS;
 8009bac:	f04f 0301 	mov.w	r3, #1
 8009bb0:	73fb      	strb	r3, [r7, #15]
 8009bb2:	e002      	b.n	8009bba <RTC_WaitForSynchro+0x92>
  }
  else
  {
    status = ERROR;
 8009bb4:	f04f 0300 	mov.w	r3, #0
 8009bb8:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009bba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009bbe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009bc2:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8009bc6:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f107 0714 	add.w	r7, r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bc80      	pop	{r7}
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop

08009bd8 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 8009be2:	f04f 0300 	mov.w	r3, #0
 8009be6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009be8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009bec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009bf0:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8009bf4:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009bf6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009bfa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009bfe:	f04f 0253 	mov.w	r2, #83	; 0x53
 8009c02:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8009c04:	f7ff ff34 	bl	8009a70 <RTC_EnterInitMode>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d103      	bne.n	8009c16 <RTC_RefClockCmd+0x3e>
  {
    status = ERROR;
 8009c0e:	f04f 0300 	mov.w	r3, #0
 8009c12:	73fb      	strb	r3, [r7, #15]
 8009c14:	e020      	b.n	8009c58 <RTC_RefClockCmd+0x80>
  } 
  else
  {  
    if (NewState != DISABLE)
 8009c16:	79fb      	ldrb	r3, [r7, #7]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00c      	beq.n	8009c36 <RTC_RefClockCmd+0x5e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 8009c1c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009c20:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009c24:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009c28:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009c2c:	6892      	ldr	r2, [r2, #8]
 8009c2e:	f042 0210 	orr.w	r2, r2, #16
 8009c32:	609a      	str	r2, [r3, #8]
 8009c34:	e00b      	b.n	8009c4e <RTC_RefClockCmd+0x76>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 8009c36:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009c3a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009c3e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009c42:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009c46:	6892      	ldr	r2, [r2, #8]
 8009c48:	f022 0210 	bic.w	r2, r2, #16
 8009c4c:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8009c4e:	f7ff ff59 	bl	8009b04 <RTC_ExitInitMode>
    
    status = SUCCESS;
 8009c52:	f04f 0301 	mov.w	r3, #1
 8009c56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 8009c58:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009c5c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009c60:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8009c64:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f107 0710 	add.w	r7, r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop

08009c74 <RTC_BypassShadowCmd>:
  * @param  NewState: new state of the Bypass Shadow feature.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
*/
void RTC_BypassShadowCmd(FunctionalState NewState)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009c7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009c82:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009c86:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8009c8a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009c8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009c90:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009c94:	f04f 0253 	mov.w	r2, #83	; 0x53
 8009c98:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 8009c9a:	79fb      	ldrb	r3, [r7, #7]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00c      	beq.n	8009cba <RTC_BypassShadowCmd+0x46>
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8009ca0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009ca4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009ca8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009cac:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009cb0:	6892      	ldr	r2, [r2, #8]
 8009cb2:	f042 0220 	orr.w	r2, r2, #32
 8009cb6:	609a      	str	r2, [r3, #8]
 8009cb8:	e00b      	b.n	8009cd2 <RTC_BypassShadowCmd+0x5e>
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 8009cba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009cbe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009cc2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009cc6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009cca:	6892      	ldr	r2, [r2, #8]
 8009ccc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009cd0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8009cd2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009cd6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009cda:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8009cde:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009ce0:	f107 070c 	add.w	r7, r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bc80      	pop	{r7}
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop

08009cec <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8009cec:	b590      	push	{r4, r7, lr}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009cf6:	f04f 0300 	mov.w	r3, #0
 8009cfa:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 8009cfc:	f04f 0300 	mov.w	r3, #0
 8009d00:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10d      	bne.n	8009d24 <RTC_SetTime+0x38>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009d08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009d0c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d119      	bne.n	8009d4e <RTC_SetTime+0x62>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	f04f 0200 	mov.w	r2, #0
 8009d20:	70da      	strb	r2, [r3, #3]
 8009d22:	e014      	b.n	8009d4e <RTC_SetTime+0x62>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009d24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009d28:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d007      	beq.n	8009d46 <RTC_SetTime+0x5a>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f001 fb36 	bl	800b3ac <RTC_Bcd2ToByte>
 8009d40:	4603      	mov	r3, r0
 8009d42:	60fb      	str	r3, [r7, #12]
 8009d44:	e003      	b.n	8009d4e <RTC_SetTime+0x62>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	f04f 0200 	mov.w	r2, #0
 8009d4c:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d012      	beq.n	8009d7a <RTC_SetTime+0x8e>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	ea4f 4203 	mov.w	r2, r3, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	785b      	ldrb	r3, [r3, #1]
 8009d60:	ea4f 2303 	mov.w	r3, r3, lsl #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8009d64:	431a      	orrs	r2, r3
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	789b      	ldrb	r3, [r3, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8009d6a:	431a      	orrs	r2, r3
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	78db      	ldrb	r3, [r3, #3]
 8009d70:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8009d74:	4313      	orrs	r3, r2
 8009d76:	60fb      	str	r3, [r7, #12]
 8009d78:	e01e      	b.n	8009db8 <RTC_SetTime+0xcc>
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f001 faf2 	bl	800b368 <RTC_ByteToBcd2>
 8009d84:	4603      	mov	r3, r0
 8009d86:	ea4f 4403 	mov.w	r4, r3, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	785b      	ldrb	r3, [r3, #1]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f001 faea 	bl	800b368 <RTC_ByteToBcd2>
 8009d94:	4603      	mov	r3, r0
 8009d96:	ea4f 2303 	mov.w	r3, r3, lsl #8
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8009d9a:	431c      	orrs	r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	789b      	ldrb	r3, [r3, #2]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f001 fae1 	bl	800b368 <RTC_ByteToBcd2>
 8009da6:	4603      	mov	r3, r0
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8009da8:	ea44 0203 	orr.w	r2, r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	78db      	ldrb	r3, [r3, #3]
 8009db0:	ea4f 4303 	mov.w	r3, r3, lsl #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8009db4:	4313      	orrs	r3, r2
 8009db6:	60fb      	str	r3, [r7, #12]
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8009db8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009dbc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009dc0:	f04f 02ca 	mov.w	r2, #202	; 0xca
 8009dc4:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8009dc6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009dca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009dce:	f04f 0253 	mov.w	r2, #83	; 0x53
 8009dd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8009dd4:	f7ff fe4c 	bl	8009a70 <RTC_EnterInitMode>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d103      	bne.n	8009de6 <RTC_SetTime+0xfa>
  {
    status = ERROR;
 8009dde:	f04f 0300 	mov.w	r3, #0
 8009de2:	72fb      	strb	r3, [r7, #11]
 8009de4:	e024      	b.n	8009e30 <RTC_SetTime+0x144>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009de6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009dea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8009df4:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8009df8:	601a      	str	r2, [r3, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8009dfa:	f7ff fe83 	bl	8009b04 <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 8009dfe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009e02:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	f003 0320 	and.w	r3, r3, #32
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10c      	bne.n	8009e2a <RTC_SetTime+0x13e>
    {
      if (RTC_WaitForSynchro() == ERROR)
 8009e10:	f7ff fe8a 	bl	8009b28 <RTC_WaitForSynchro>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d103      	bne.n	8009e22 <RTC_SetTime+0x136>
      {
        status = ERROR;
 8009e1a:	f04f 0300 	mov.w	r3, #0
 8009e1e:	72fb      	strb	r3, [r7, #11]
 8009e20:	e006      	b.n	8009e30 <RTC_SetTime+0x144>
      }
      else
      {
        status = SUCCESS;
 8009e22:	f04f 0301 	mov.w	r3, #1
 8009e26:	72fb      	strb	r3, [r7, #11]
 8009e28:	e002      	b.n	8009e30 <RTC_SetTime+0x144>
      }
    }
    else
    {
      status = SUCCESS;
 8009e2a:	f04f 0301 	mov.w	r3, #1
 8009e2e:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8009e30:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009e34:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009e38:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8009e3c:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 8009e3e:	7afb      	ldrb	r3, [r7, #11]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	f107 0714 	add.w	r7, r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd90      	pop	{r4, r7, pc}
 8009e4a:	bf00      	nop

08009e4c <RTC_TimeStructInit>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f04f 0200 	mov.w	r2, #0
 8009e5a:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f04f 0200 	mov.w	r2, #0
 8009e62:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f04f 0200 	mov.w	r2, #0
 8009e6a:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f04f 0200 	mov.w	r2, #0
 8009e72:	709a      	strb	r2, [r3, #2]
}
 8009e74:	f107 070c 	add.w	r7, r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bc80      	pop	{r7}
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop

08009e80 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e8a:	f04f 0300 	mov.w	r3, #0
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8009e90:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009e94:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009e9e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009ea2:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009eaa:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009eae:	b2da      	uxtb	r2, r3
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8009eba:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ed8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009edc:	b2da      	uxtb	r2, r3
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d11a      	bne.n	8009f1e <RTC_GetTime+0x9e>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f001 fa5d 	bl	800b3ac <RTC_Bcd2ToByte>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	785b      	ldrb	r3, [r3, #1]
 8009efe:	4618      	mov	r0, r3
 8009f00:	f001 fa54 	bl	800b3ac <RTC_Bcd2ToByte>
 8009f04:	4603      	mov	r3, r0
 8009f06:	461a      	mov	r2, r3
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	789b      	ldrb	r3, [r3, #2]
 8009f10:	4618      	mov	r0, r3
 8009f12:	f001 fa4b 	bl	800b3ac <RTC_Bcd2ToByte>
 8009f16:	4603      	mov	r3, r0
 8009f18:	461a      	mov	r2, r3
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	709a      	strb	r2, [r3, #2]
  }
}
 8009f1e:	f107 0710 	add.w	r7, r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop

08009f28 <RTC_GetSubSecond>:
  *         SSR register.
  * @param  None
  * @retval RTC current Calendar Subseconds value.
  */
uint32_t RTC_GetSubSecond(void)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0;
 8009f2e:	f04f 0300 	mov.w	r3, #0
 8009f32:	607b      	str	r3, [r7, #4]
  
  /* Get subseconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 8009f34:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009f38:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3e:	607b      	str	r3, [r7, #4]
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 8009f40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009f44:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009f48:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
 8009f4a:	687b      	ldr	r3, [r7, #4]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f107 070c 	add.w	r7, r7, #12
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bc80      	pop	{r7}
 8009f56:	4770      	bx	lr

08009f58 <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8009f58:	b590      	push	{r4, r7, lr}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009f62:	f04f 0300 	mov.w	r3, #0
 8009f66:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 8009f68:	f04f 0300 	mov.w	r3, #0
 8009f6c:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10f      	bne.n	8009f94 <RTC_SetDate+0x3c>
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	785b      	ldrb	r3, [r3, #1]
 8009f78:	f003 0310 	and.w	r3, r3, #16
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d009      	beq.n	8009f94 <RTC_SetDate+0x3c>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	785b      	ldrb	r3, [r3, #1]
 8009f84:	f023 0310 	bic.w	r3, r3, #16
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	f103 030a 	add.w	r3, r3, #10
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00d      	beq.n	8009fb6 <RTC_SetDate+0x5e>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	785b      	ldrb	r3, [r3, #1]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f001 fa04 	bl	800b3ac <RTC_Bcd2ToByte>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	789b      	ldrb	r3, [r3, #2]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f001 f9fd 	bl	800b3ac <RTC_Bcd2ToByte>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d012      	beq.n	8009fe2 <RTC_SetDate+0x8a>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	78db      	ldrb	r3, [r3, #3]
 8009fc0:	ea4f 4203 	mov.w	r2, r3, lsl #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	785b      	ldrb	r3, [r3, #1]
 8009fc8:	ea4f 2303 	mov.w	r3, r3, lsl #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8009fcc:	431a      	orrs	r2, r3
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8009fd2:	431a      	orrs	r2, r3
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	ea4f 3343 	mov.w	r3, r3, lsl #13
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	60fb      	str	r3, [r7, #12]
 8009fe0:	e01e      	b.n	800a020 <RTC_SetDate+0xc8>
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	78db      	ldrb	r3, [r3, #3]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f001 f9be 	bl	800b368 <RTC_ByteToBcd2>
 8009fec:	4603      	mov	r3, r0
 8009fee:	ea4f 4403 	mov.w	r4, r3, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	785b      	ldrb	r3, [r3, #1]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f001 f9b6 	bl	800b368 <RTC_ByteToBcd2>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	ea4f 2303 	mov.w	r3, r3, lsl #8
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800a002:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	789b      	ldrb	r3, [r3, #2]
 800a008:	4618      	mov	r0, r3
 800a00a:	f001 f9ad 	bl	800b368 <RTC_ByteToBcd2>
 800a00e:	4603      	mov	r3, r0
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 800a010:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	ea4f 3343 	mov.w	r3, r3, lsl #13
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800a01c:	4313      	orrs	r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a020:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a024:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a028:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a02c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a02e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a032:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a036:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a03a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a03c:	f7ff fd18 	bl	8009a70 <RTC_EnterInitMode>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d103      	bne.n	800a04e <RTC_SetDate+0xf6>
  {
    status = ERROR;
 800a046:	f04f 0300 	mov.w	r3, #0
 800a04a:	72fb      	strb	r3, [r7, #11]
 800a04c:	e024      	b.n	800a098 <RTC_SetDate+0x140>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 800a04e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a052:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a05c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a060:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800a062:	f7ff fd4f 	bl	8009b04 <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 800a066:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a06a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	f003 0320 	and.w	r3, r3, #32
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10c      	bne.n	800a092 <RTC_SetDate+0x13a>
    {
      if (RTC_WaitForSynchro() == ERROR)
 800a078:	f7ff fd56 	bl	8009b28 <RTC_WaitForSynchro>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d103      	bne.n	800a08a <RTC_SetDate+0x132>
      {
        status = ERROR;
 800a082:	f04f 0300 	mov.w	r3, #0
 800a086:	72fb      	strb	r3, [r7, #11]
 800a088:	e006      	b.n	800a098 <RTC_SetDate+0x140>
      }
      else
      {
        status = SUCCESS;
 800a08a:	f04f 0301 	mov.w	r3, #1
 800a08e:	72fb      	strb	r3, [r7, #11]
 800a090:	e002      	b.n	800a098 <RTC_SetDate+0x140>
      }
    }
    else
    {
      status = SUCCESS;
 800a092:	f04f 0301 	mov.w	r3, #1
 800a096:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800a098:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a09c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a0a0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a0a4:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a0a6:	7afb      	ldrb	r3, [r7, #11]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f107 0714 	add.w	r7, r7, #20
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd90      	pop	{r4, r7, pc}
 800a0b2:	bf00      	nop

0800a0b4 <RTC_DateStructInit>:
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f04f 0201 	mov.w	r2, #1
 800a0c2:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->RTC_Date = 1;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f04f 0201 	mov.w	r2, #1
 800a0ca:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f04f 0201 	mov.w	r2, #1
 800a0d2:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Year = 0;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f04f 0200 	mov.w	r2, #0
 800a0da:	70da      	strb	r2, [r3, #3]
}
 800a0dc:	f107 070c 	add.w	r7, r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bc80      	pop	{r7}
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop

0800a0e8 <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a0f2:	f04f 0300 	mov.w	r3, #0
 800a0f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 800a0f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a0fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a106:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a10a:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a112:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a116:	b2da      	uxtb	r2, r3
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800a122:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800a126:	b2da      	uxtb	r2, r3
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a134:	b2da      	uxtb	r2, r3
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a140:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800a144:	b2da      	uxtb	r2, r3
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d11a      	bne.n	800a186 <RTC_GetDate+0x9e>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	78db      	ldrb	r3, [r3, #3]
 800a154:	4618      	mov	r0, r3
 800a156:	f001 f929 	bl	800b3ac <RTC_Bcd2ToByte>
 800a15a:	4603      	mov	r3, r0
 800a15c:	461a      	mov	r2, r3
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	785b      	ldrb	r3, [r3, #1]
 800a166:	4618      	mov	r0, r3
 800a168:	f001 f920 	bl	800b3ac <RTC_Bcd2ToByte>
 800a16c:	4603      	mov	r3, r0
 800a16e:	461a      	mov	r2, r3
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	789b      	ldrb	r3, [r3, #2]
 800a178:	4618      	mov	r0, r3
 800a17a:	f001 f917 	bl	800b3ac <RTC_Bcd2ToByte>
 800a17e:	4603      	mov	r3, r0
 800a180:	461a      	mov	r2, r3
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	709a      	strb	r2, [r3, #2]
  }
}
 800a186:	f107 0710 	add.w	r7, r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop

0800a190 <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800a190:	b590      	push	{r4, r7, lr}
 800a192:	b087      	sub	sp, #28
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a19c:	f04f 0300 	mov.w	r3, #0
 800a1a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10d      	bne.n	800a1c4 <RTC_SetAlarm+0x34>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a1a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a1ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d12c      	bne.n	800a214 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f04f 0200 	mov.w	r2, #0
 800a1c0:	70da      	strb	r2, [r3, #3]
 800a1c2:	e027      	b.n	800a214 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a1c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a1c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d007      	beq.n	800a1e6 <RTC_SetAlarm+0x56>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f001 f8e6 	bl	800b3ac <RTC_Bcd2ToByte>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	617b      	str	r3, [r7, #20]
 800a1e4:	e003      	b.n	800a1ee <RTC_SetAlarm+0x5e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f04f 0200 	mov.w	r2, #0
 800a1ec:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d107      	bne.n	800a206 <RTC_SetAlarm+0x76>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	7b1b      	ldrb	r3, [r3, #12]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f001 f8d6 	bl	800b3ac <RTC_Bcd2ToByte>
 800a200:	4603      	mov	r3, r0
 800a202:	617b      	str	r3, [r7, #20]
 800a204:	e006      	b.n	800a214 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	7b1b      	ldrb	r3, [r3, #12]
 800a20a:	4618      	mov	r0, r3
 800a20c:	f001 f8ce 	bl	800b3ac <RTC_Bcd2ToByte>
 800a210:	4603      	mov	r3, r0
 800a212:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d01d      	beq.n	800a256 <RTC_SetAlarm+0xc6>
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	ea4f 4203 	mov.w	r2, r3, lsl #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	785b      	ldrb	r3, [r3, #1]
 800a226:	ea4f 2303 	mov.w	r3, r3, lsl #8
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800a22a:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800a230:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	78db      	ldrb	r3, [r3, #3]
 800a236:	ea4f 4303 	mov.w	r3, r3, lsl #16
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800a23a:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	7b1b      	ldrb	r3, [r3, #12]
 800a240:	ea4f 6303 	mov.w	r3, r3, lsl #24
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800a244:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800a24a:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800a250:	4313      	orrs	r3, r2
 800a252:	617b      	str	r3, [r7, #20]
 800a254:	e02f      	b.n	800a2b6 <RTC_SetAlarm+0x126>
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f001 f884 	bl	800b368 <RTC_ByteToBcd2>
 800a260:	4603      	mov	r3, r0
 800a262:	ea4f 4403 	mov.w	r4, r3, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	785b      	ldrb	r3, [r3, #1]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f001 f87c 	bl	800b368 <RTC_ByteToBcd2>
 800a270:	4603      	mov	r3, r0
 800a272:	ea4f 2303 	mov.w	r3, r3, lsl #8
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800a276:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	789b      	ldrb	r3, [r3, #2]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f001 f873 	bl	800b368 <RTC_ByteToBcd2>
 800a282:	4603      	mov	r3, r0
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800a284:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	78db      	ldrb	r3, [r3, #3]
 800a28c:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800a290:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	7b1b      	ldrb	r3, [r3, #12]
 800a298:	4618      	mov	r0, r3
 800a29a:	f001 f865 	bl	800b368 <RTC_ByteToBcd2>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	ea4f 6303 	mov.w	r3, r3, lsl #24
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800a2a4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800a2ac:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	685b      	ldr	r3, [r3, #4]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	617b      	str	r3, [r7, #20]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a2b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a2ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a2be:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a2c2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a2c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a2c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a2cc:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a2d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2d8:	d106      	bne.n	800a2e8 <RTC_SetAlarm+0x158>
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 800a2da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a2de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	61da      	str	r2, [r3, #28]
 800a2e6:	e005      	b.n	800a2f4 <RTC_SetAlarm+0x164>
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 800a2e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a2ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	621a      	str	r2, [r3, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800a2f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a2f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a2fc:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a300:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a302:	f107 071c 	add.w	r7, r7, #28
 800a306:	46bd      	mov	sp, r7
 800a308:	bd90      	pop	{r4, r7, pc}
 800a30a:	bf00      	nop

0800a30c <RTC_AlarmStructInit>:
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f04f 0200 	mov.w	r2, #0
 800a31a:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f04f 0200 	mov.w	r2, #0
 800a322:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f04f 0200 	mov.w	r2, #0
 800a32a:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f04f 0200 	mov.w	r2, #0
 800a332:	709a      	strb	r2, [r3, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f04f 0200 	mov.w	r2, #0
 800a33a:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f04f 0201 	mov.w	r2, #1
 800a342:	731a      	strb	r2, [r3, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f04f 0200 	mov.w	r2, #0
 800a34a:	605a      	str	r2, [r3, #4]
}
 800a34c:	f107 070c 	add.w	r7, r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	bc80      	pop	{r7}
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop

0800a358 <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a364:	f04f 0300 	mov.w	r3, #0
 800a368:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a370:	d106      	bne.n	800a380 <RTC_GetAlarm+0x28>
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 800a372:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a376:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a37a:	69db      	ldr	r3, [r3, #28]
 800a37c:	617b      	str	r3, [r7, #20]
 800a37e:	e005      	b.n	800a38c <RTC_GetAlarm+0x34>
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 800a380:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a384:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	617b      	str	r3, [r7, #20]
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800a392:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a396:	b2da      	uxtb	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	701a      	strb	r2, [r3, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800a3a2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800a3a6:	b2da      	uxtb	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	705a      	strb	r2, [r3, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3b4:	b2da      	uxtb	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	709a      	strb	r2, [r3, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3c0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800a3d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	731a      	strb	r2, [r3, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	605a      	str	r2, [r3, #4]

  if (RTC_Format == RTC_Format_BIN)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d123      	bne.n	800a43c <RTC_GetAlarm+0xe4>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 ffd7 	bl	800b3ac <RTC_Bcd2ToByte>
 800a3fe:	4603      	mov	r3, r0
 800a400:	461a      	mov	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	701a      	strb	r2, [r3, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	785b      	ldrb	r3, [r3, #1]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 ffce 	bl	800b3ac <RTC_Bcd2ToByte>
 800a410:	4603      	mov	r3, r0
 800a412:	461a      	mov	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	705a      	strb	r2, [r3, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	789b      	ldrb	r3, [r3, #2]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 ffc5 	bl	800b3ac <RTC_Bcd2ToByte>
 800a422:	4603      	mov	r3, r0
 800a424:	461a      	mov	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	709a      	strb	r2, [r3, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	7b1b      	ldrb	r3, [r3, #12]
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 ffbc 	bl	800b3ac <RTC_Bcd2ToByte>
 800a434:	4603      	mov	r3, r0
 800a436:	461a      	mov	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	731a      	strb	r2, [r3, #12]
  }  
}
 800a43c:	f107 0718 	add.w	r7, r7, #24
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 800a444:	b480      	push	{r7}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t alarmcounter = 0x00;
 800a450:	f04f 0300 	mov.w	r3, #0
 800a454:	60fb      	str	r3, [r7, #12]
  uint32_t alarmstatus = 0x00;
 800a456:	f04f 0300 	mov.w	r3, #0
 800a45a:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800a45c:	f04f 0300 	mov.w	r3, #0
 800a460:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a462:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a466:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a46a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a46e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a470:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a474:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a478:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a47c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 800a47e:	78fb      	ldrb	r3, [r7, #3]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d00f      	beq.n	800a4a4 <RTC_AlarmCmd+0x60>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 800a484:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a488:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a48c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a490:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a494:	6891      	ldr	r1, [r2, #8]
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	430a      	orrs	r2, r1
 800a49a:	609a      	str	r2, [r3, #8]

    status = SUCCESS;    
 800a49c:	f04f 0301 	mov.w	r3, #1
 800a4a0:	75fb      	strb	r3, [r7, #23]
 800a4a2:	e034      	b.n	800a50e <RTC_AlarmCmd+0xca>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 800a4a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a4a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a4ac:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a4b0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a4b4:	6891      	ldr	r1, [r2, #8]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	ea6f 0202 	mvn.w	r2, r2
 800a4bc:	400a      	ands	r2, r1
 800a4be:	609a      	str	r2, [r3, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 800a4c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a4c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a4c8:	68da      	ldr	r2, [r3, #12]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	613b      	str	r3, [r7, #16]
      alarmcounter++;  
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f103 0301 	add.w	r3, r3, #1
 800a4da:	60fb      	str	r3, [r7, #12]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4e2:	d002      	beq.n	800a4ea <RTC_AlarmCmd+0xa6>
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d0ea      	beq.n	800a4c0 <RTC_AlarmCmd+0x7c>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 800a4ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a4ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a4f2:	68da      	ldr	r2, [r3, #12]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d103      	bne.n	800a508 <RTC_AlarmCmd+0xc4>
    {
      status = ERROR;
 800a500:	f04f 0300 	mov.w	r3, #0
 800a504:	75fb      	strb	r3, [r7, #23]
 800a506:	e002      	b.n	800a50e <RTC_AlarmCmd+0xca>
    } 
    else
    {
      status = SUCCESS;
 800a508:	f04f 0301 	mov.w	r3, #1
 800a50c:	75fb      	strb	r3, [r7, #23]
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a50e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a512:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a516:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a51a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a51c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	f107 071c 	add.w	r7, r7, #28
 800a524:	46bd      	mov	sp, r7
 800a526:	bc80      	pop	{r7}
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop

0800a52c <RTC_AlarmSubSecondConfig>:
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b087      	sub	sp, #28
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a538:	f04f 0300 	mov.w	r3, #0
 800a53c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a53e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a542:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a546:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a54a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a54c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a550:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a554:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a558:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm A or Alarm B SubSecond registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4313      	orrs	r3, r2
 800a560:	617b      	str	r3, [r7, #20]
  
  if (RTC_Alarm == RTC_Alarm_A)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a568:	d106      	bne.n	800a578 <RTC_AlarmSubSecondConfig+0x4c>
  {
    /* Configure the AlarmA SubSecond register */
    RTC->ALRMASSR = tmpreg;
 800a56a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a56e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a572:	697a      	ldr	r2, [r7, #20]
 800a574:	645a      	str	r2, [r3, #68]	; 0x44
 800a576:	e005      	b.n	800a584 <RTC_AlarmSubSecondConfig+0x58>
  }
  else
  {
    /* Configure the Alarm B SubSecond register */
    RTC->ALRMBSSR = tmpreg;
 800a578:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a57c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a580:	697a      	ldr	r2, [r7, #20]
 800a582:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800a584:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a588:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a58c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a590:	625a      	str	r2, [r3, #36]	; 0x24

}
 800a592:	f107 071c 	add.w	r7, r7, #28
 800a596:	46bd      	mov	sp, r7
 800a598:	bc80      	pop	{r7}
 800a59a:	4770      	bx	lr

0800a59c <RTC_GetAlarmSubSecond>:
  *     @arg RTC_Alarm_B: to select Alarm B
  * @param  None
  * @retval RTC Alarm Subseconds value.
  */
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a5a4:	f04f 0300 	mov.w	r3, #0
 800a5a8:	60fb      	str	r3, [r7, #12]
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5b0:	d10a      	bne.n	800a5c8 <RTC_GetAlarmSubSecond+0x2c>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 800a5b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a5b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a5ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5bc:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800a5c0:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800a5c4:	60fb      	str	r3, [r7, #12]
 800a5c6:	e009      	b.n	800a5dc <RTC_GetAlarmSubSecond+0x40>
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800a5c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a5cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a5d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5d2:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800a5d6:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800a5da:	60fb      	str	r3, [r7, #12]
  } 
  
  return (tmpreg);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f107 0714 	add.w	r7, r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bc80      	pop	{r7}
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop

0800a5ec <RTC_WakeUpClockConfig>:
  *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
  *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
  * @retval None
  */
void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a5f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a5f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a5fc:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a600:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a602:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a606:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a60a:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a60e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800a610:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a614:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a618:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a61c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a620:	6892      	ldr	r2, [r2, #8]
 800a622:	f022 0207 	bic.w	r2, r2, #7
 800a626:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 800a628:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a62c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a630:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a634:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a638:	6891      	ldr	r1, [r2, #8]
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	430a      	orrs	r2, r1
 800a63e:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a640:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a644:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a648:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a64c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a64e:	f107 070c 	add.w	r7, r7, #12
 800a652:	46bd      	mov	sp, r7
 800a654:	bc80      	pop	{r7}
 800a656:	4770      	bx	lr

0800a658 <RTC_SetWakeUpCounter>:
  * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
  *          This parameter can be a value from 0x0000 to 0xFFFF. 
  * @retval None
  */
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a660:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a664:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a668:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a66c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a66e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a672:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a676:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a67a:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 800a67c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a680:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	615a      	str	r2, [r3, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a688:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a68c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a690:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a694:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a696:	f107 070c 	add.w	r7, r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bc80      	pop	{r7}
 800a69e:	4770      	bx	lr

0800a6a0 <RTC_GetWakeUpCounter>:
  * @brief  Returns the RTC WakeUp timer counter value.
  * @param  None
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	af00      	add	r7, sp, #0
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 800a6a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a6a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800a6b2:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bc80      	pop	{r7}
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop

0800a6c0 <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b087      	sub	sp, #28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t wutcounter = 0x00;
 800a6ca:	f04f 0300 	mov.w	r3, #0
 800a6ce:	60fb      	str	r3, [r7, #12]
  uint32_t wutwfstatus = 0x00;
 800a6d0:	f04f 0300 	mov.w	r3, #0
 800a6d4:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800a6d6:	f04f 0300 	mov.w	r3, #0
 800a6da:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a6dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a6e0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a6e4:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a6e8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a6ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a6ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a6f2:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a6f6:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800a6f8:	79fb      	ldrb	r3, [r7, #7]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00f      	beq.n	800a71e <RTC_WakeUpCmd+0x5e>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 800a6fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a702:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a706:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a70a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a70e:	6892      	ldr	r2, [r2, #8]
 800a710:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a714:	609a      	str	r2, [r3, #8]
    status = SUCCESS;    
 800a716:	f04f 0301 	mov.w	r3, #1
 800a71a:	75fb      	strb	r3, [r7, #23]
 800a71c:	e02e      	b.n	800a77c <RTC_WakeUpCmd+0xbc>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 800a71e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a722:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a726:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a72a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a72e:	6892      	ldr	r2, [r2, #8]
 800a730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a734:	609a      	str	r2, [r3, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800a736:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a73a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	f003 0304 	and.w	r3, r3, #4
 800a744:	613b      	str	r3, [r7, #16]
      wutcounter++;  
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f103 0301 	add.w	r3, r3, #1
 800a74c:	60fb      	str	r3, [r7, #12]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a754:	d002      	beq.n	800a75c <RTC_WakeUpCmd+0x9c>
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d0ec      	beq.n	800a736 <RTC_WakeUpCmd+0x76>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800a75c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a760:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	f003 0304 	and.w	r3, r3, #4
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d103      	bne.n	800a776 <RTC_WakeUpCmd+0xb6>
    {
      status = ERROR;
 800a76e:	f04f 0300 	mov.w	r3, #0
 800a772:	75fb      	strb	r3, [r7, #23]
 800a774:	e002      	b.n	800a77c <RTC_WakeUpCmd+0xbc>
    }
    else
    {
      status = SUCCESS;
 800a776:	f04f 0301 	mov.w	r3, #1
 800a77a:	75fb      	strb	r3, [r7, #23]
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a77c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a780:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a784:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a788:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a78a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	f107 071c 	add.w	r7, r7, #28
 800a792:	46bd      	mov	sp, r7
 800a794:	bc80      	pop	{r7}
 800a796:	4770      	bx	lr

0800a798 <RTC_DayLightSavingConfig>:
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a7a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a7a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a7aa:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a7ae:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a7b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a7b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a7b8:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a7bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 800a7be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a7c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a7c6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a7ca:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a7ce:	6892      	ldr	r2, [r2, #8]
 800a7d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a7d4:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 800a7d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a7da:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a7de:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a7e2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a7e6:	6891      	ldr	r1, [r2, #8]
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	4302      	orrs	r2, r0
 800a7ee:	430a      	orrs	r2, r1
 800a7f0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a7f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a7f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a7fa:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a7fe:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a800:	f107 070c 	add.w	r7, r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	bc80      	pop	{r7}
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop

0800a80c <RTC_GetStoreOperation>:
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
 800a80c:	b480      	push	{r7}
 800a80e:	af00      	add	r7, sp, #0
  return (RTC->CR & RTC_CR_BCK);
 800a810:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a814:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
}
 800a81e:	4618      	mov	r0, r3
 800a820:	46bd      	mov	sp, r7
 800a822:	bc80      	pop	{r7}
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop

0800a828 <RTC_OutputConfig>:
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a832:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a836:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a83a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a83e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a840:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a844:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a848:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a84c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 800a84e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a852:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a856:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a85a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a85e:	6892      	ldr	r2, [r2, #8]
 800a860:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800a864:	609a      	str	r2, [r3, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 800a866:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a86a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a86e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a872:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a876:	6891      	ldr	r1, [r2, #8]
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	683a      	ldr	r2, [r7, #0]
 800a87c:	4302      	orrs	r2, r0
 800a87e:	430a      	orrs	r2, r1
 800a880:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a882:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a886:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a88a:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a88e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a890:	f107 070c 	add.w	r7, r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	bc80      	pop	{r7}
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop

0800a89c <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a8a6:	f04f 0300 	mov.w	r3, #0
 800a8aa:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a8ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a8b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a8b4:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a8b8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a8ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a8be:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a8c2:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a8c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a8c8:	f7ff f8d2 	bl	8009a70 <RTC_EnterInitMode>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d103      	bne.n	800a8da <RTC_CoarseCalibConfig+0x3e>
  {
    status = ERROR;
 800a8d2:	f04f 0300 	mov.w	r3, #0
 800a8d6:	73fb      	strb	r3, [r7, #15]
 800a8d8:	e00c      	b.n	800a8f4 <RTC_CoarseCalibConfig+0x58>
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 800a8da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a8de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a8e2:	6879      	ldr	r1, [r7, #4]
 800a8e4:	683a      	ldr	r2, [r7, #0]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	619a      	str	r2, [r3, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800a8ea:	f7ff f90b 	bl	8009b04 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800a8ee:	f04f 0301 	mov.w	r3, #1
 800a8f2:	73fb      	strb	r3, [r7, #15]
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a8f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a8f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a8fc:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a900:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a902:	7bfb      	ldrb	r3, [r7, #15]
}
 800a904:	4618      	mov	r0, r3
 800a906:	f107 0710 	add.w	r7, r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop

0800a910 <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	4603      	mov	r3, r0
 800a918:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800a91a:	f04f 0300 	mov.w	r3, #0
 800a91e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a920:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a924:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a928:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a92c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a92e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a932:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a936:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a93a:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a93c:	f7ff f898 	bl	8009a70 <RTC_EnterInitMode>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d103      	bne.n	800a94e <RTC_CoarseCalibCmd+0x3e>
  {
    status =  ERROR;
 800a946:	f04f 0300 	mov.w	r3, #0
 800a94a:	73fb      	strb	r3, [r7, #15]
 800a94c:	e020      	b.n	800a990 <RTC_CoarseCalibCmd+0x80>
  }
  else
  {
    if (NewState != DISABLE)
 800a94e:	79fb      	ldrb	r3, [r7, #7]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00c      	beq.n	800a96e <RTC_CoarseCalibCmd+0x5e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 800a954:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a958:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a95c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a960:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a964:	6892      	ldr	r2, [r2, #8]
 800a966:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a96a:	609a      	str	r2, [r3, #8]
 800a96c:	e00b      	b.n	800a986 <RTC_CoarseCalibCmd+0x76>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 800a96e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a972:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a976:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a97a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a97e:	6892      	ldr	r2, [r2, #8]
 800a980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a984:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800a986:	f7ff f8bd 	bl	8009b04 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800a98a:	f04f 0301 	mov.w	r3, #1
 800a98e:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a990:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a994:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a998:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a99c:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a99e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f107 0710 	add.w	r7, r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop

0800a9ac <RTC_CalibOutputCmd>:
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a9b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a9ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a9be:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a9c2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a9c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a9c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a9cc:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a9d0:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 800a9d2:	79fb      	ldrb	r3, [r7, #7]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00c      	beq.n	800a9f2 <RTC_CalibOutputCmd+0x46>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 800a9d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a9dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a9e0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a9e4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a9e8:	6892      	ldr	r2, [r2, #8]
 800a9ea:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a9ee:	609a      	str	r2, [r3, #8]
 800a9f0:	e00b      	b.n	800aa0a <RTC_CalibOutputCmd+0x5e>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 800a9f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a9f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a9fa:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a9fe:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800aa02:	6892      	ldr	r2, [r2, #8]
 800aa04:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800aa08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800aa0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aa0e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aa12:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800aa16:	625a      	str	r2, [r3, #36]	; 0x24
}
 800aa18:	f107 070c 	add.w	r7, r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bc80      	pop	{r7}
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop

0800aa24 <RTC_CalibOutputConfig>:
  *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
  *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
  * @retval None
*/
void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800aa2c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aa30:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aa34:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800aa38:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800aa3a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aa3e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aa42:	f04f 0253 	mov.w	r2, #83	; 0x53
 800aa46:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before config*/
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 800aa48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aa4c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aa50:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800aa54:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800aa58:	6892      	ldr	r2, [r2, #8]
 800aa5a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800aa5e:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 800aa60:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aa64:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aa68:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800aa6c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800aa70:	6891      	ldr	r1, [r2, #8]
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	430a      	orrs	r2, r1
 800aa76:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800aa78:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aa7c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aa80:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800aa84:	625a      	str	r2, [r3, #36]	; 0x24
}
 800aa86:	f107 070c 	add.w	r7, r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bc80      	pop	{r7}
 800aa8e:	4770      	bx	lr

0800aa90 <RTC_SmoothCalibConfig>:
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b087      	sub	sp, #28
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 800aa9c:	f04f 0300 	mov.w	r3, #0
 800aaa0:	75fb      	strb	r3, [r7, #23]
  uint32_t recalpfcount = 0;
 800aaa2:	f04f 0300 	mov.w	r3, #0
 800aaa6:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800aaa8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aaac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aab0:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800aab4:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800aab6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aaba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aabe:	f04f 0253 	mov.w	r2, #83	; 0x53
 800aac2:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 800aac4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aac8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d011      	beq.n	800aafa <RTC_SmoothCalibConfig+0x6a>
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 800aad6:	e003      	b.n	800aae0 <RTC_SmoothCalibConfig+0x50>
    {
      recalpfcount++;
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	f103 0301 	add.w	r3, r3, #1
 800aade:	613b      	str	r3, [r7, #16]
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 800aae0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aae4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d003      	beq.n	800aafa <RTC_SmoothCalibConfig+0x6a>
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaf8:	d1ee      	bne.n	800aad8 <RTC_SmoothCalibConfig+0x48>
      recalpfcount++;
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 800aafa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aafe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10d      	bne.n	800ab28 <RTC_SmoothCalibConfig+0x98>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 800ab0c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ab10:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ab14:	68f9      	ldr	r1, [r7, #12]
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	4311      	orrs	r1, r2
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	430a      	orrs	r2, r1
 800ab1e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = SUCCESS;
 800ab20:	f04f 0301 	mov.w	r3, #1
 800ab24:	75fb      	strb	r3, [r7, #23]
 800ab26:	e002      	b.n	800ab2e <RTC_SmoothCalibConfig+0x9e>
  }
  else
  {
    status = ERROR;
 800ab28:	f04f 0300 	mov.w	r3, #0
 800ab2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800ab2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ab32:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ab36:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800ab3a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 800ab3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f107 071c 	add.w	r7, r7, #28
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bc80      	pop	{r7}
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop

0800ab4c <RTC_TimeStampCmd>:
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800ab58:	f04f 0300 	mov.w	r3, #0
 800ab5c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800ab5e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ab62:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab6c:	f023 0308 	bic.w	r3, r3, #8
 800ab70:	60fb      	str	r3, [r7, #12]

  /* Get the new configuration */
  if (NewState != DISABLE)
 800ab72:	78fb      	ldrb	r3, [r7, #3]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d006      	beq.n	800ab86 <RTC_TimeStampCmd+0x3a>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ab82:	60fb      	str	r3, [r7, #12]
 800ab84:	e003      	b.n	800ab8e <RTC_TimeStampCmd+0x42>
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800ab8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ab92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ab96:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800ab9a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800ab9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aba0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aba4:	f04f 0253 	mov.w	r2, #83	; 0x53
 800aba8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 800abaa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800abae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800abb6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800abba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800abbe:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800abc2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800abc4:	f107 0714 	add.w	r7, r7, #20
 800abc8:	46bd      	mov	sp, r7
 800abca:	bc80      	pop	{r7}
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop

0800abd0 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
  uint32_t tmptime = 0, tmpdate = 0;
 800abdc:	f04f 0300 	mov.w	r3, #0
 800abe0:	617b      	str	r3, [r7, #20]
 800abe2:	f04f 0300 	mov.w	r3, #0
 800abe6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 800abe8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800abec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800abf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800abf6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800abfa:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 800abfc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ac00:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ac04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ac0a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ac0e:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800ac16:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ac1a:	b2da      	uxtb	r2, r3
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	701a      	strb	r2, [r3, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800ac26:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800ac2a:	b2da      	uxtb	r2, r3
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	705a      	strb	r2, [r3, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	709a      	strb	r2, [r3, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac44:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	70da      	strb	r2, [r3, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f04f 0200 	mov.w	r2, #0
 800ac54:	70da      	strb	r2, [r3, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800ac5c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800ac60:	b2da      	uxtb	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	705a      	strb	r2, [r3, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac6e:	b2da      	uxtb	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	709a      	strb	r2, [r3, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ac7a:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800ac7e:	b2da      	uxtb	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d135      	bne.n	800acf6 <RTC_GetTimeStamp+0x126>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f000 fb8c 	bl	800b3ac <RTC_Bcd2ToByte>
 800ac94:	4603      	mov	r3, r0
 800ac96:	461a      	mov	r2, r3
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	701a      	strb	r2, [r3, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	785b      	ldrb	r3, [r3, #1]
 800aca0:	4618      	mov	r0, r3
 800aca2:	f000 fb83 	bl	800b3ac <RTC_Bcd2ToByte>
 800aca6:	4603      	mov	r3, r0
 800aca8:	461a      	mov	r2, r3
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	705a      	strb	r2, [r3, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	789b      	ldrb	r3, [r3, #2]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 fb7a 	bl	800b3ac <RTC_Bcd2ToByte>
 800acb8:	4603      	mov	r3, r0
 800acba:	461a      	mov	r2, r3
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	709a      	strb	r2, [r3, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	785b      	ldrb	r3, [r3, #1]
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 fb71 	bl	800b3ac <RTC_Bcd2ToByte>
 800acca:	4603      	mov	r3, r0
 800accc:	461a      	mov	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	705a      	strb	r2, [r3, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	789b      	ldrb	r3, [r3, #2]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 fb68 	bl	800b3ac <RTC_Bcd2ToByte>
 800acdc:	4603      	mov	r3, r0
 800acde:	461a      	mov	r2, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	709a      	strb	r2, [r3, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 fb5f 	bl	800b3ac <RTC_Bcd2ToByte>
 800acee:	4603      	mov	r3, r0
 800acf0:	461a      	mov	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	701a      	strb	r2, [r3, #0]
  }
}
 800acf6:	f107 0718 	add.w	r7, r7, #24
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop

0800ad00 <RTC_GetTimeStampSubSecond>:
  * @brief  Get the RTC timestamp Subseconds value.
  * @param  None
  * @retval RTC current timestamp Subseconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
 800ad00:	b480      	push	{r7}
 800ad02:	af00      	add	r7, sp, #0
  /* Get timestamp subseconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 800ad04:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ad08:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ad0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bc80      	pop	{r7}
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop

0800ad18 <RTC_TamperTriggerConfig>:
  *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d110      	bne.n	800ad4a <RTC_TamperTriggerConfig+0x32>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 800ad28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ad2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ad30:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ad34:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ad38:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ad40:	ea6f 0202 	mvn.w	r2, r2
 800ad44:	400a      	ands	r2, r1
 800ad46:	641a      	str	r2, [r3, #64]	; 0x40
 800ad48:	e00d      	b.n	800ad66 <RTC_TamperTriggerConfig+0x4e>
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 800ad4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ad4e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ad52:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ad56:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ad5a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ad62:	430a      	orrs	r2, r1
 800ad64:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 800ad66:	f107 070c 	add.w	r7, r7, #12
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bc80      	pop	{r7}
 800ad6e:	4770      	bx	lr

0800ad70 <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	460b      	mov	r3, r1
 800ad7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800ad7c:	78fb      	ldrb	r3, [r7, #3]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00c      	beq.n	800ad9c <RTC_TamperCmd+0x2c>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 800ad82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ad86:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ad8a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ad8e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ad92:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	430a      	orrs	r2, r1
 800ad98:	641a      	str	r2, [r3, #64]	; 0x40
 800ad9a:	e00d      	b.n	800adb8 <RTC_TamperCmd+0x48>
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 800ad9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ada0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ada4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ada8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800adac:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	ea6f 0202 	mvn.w	r2, r2
 800adb4:	400a      	ands	r2, r1
 800adb6:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 800adb8:	f107 070c 	add.w	r7, r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bc80      	pop	{r7}
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop

0800adc4 <RTC_TamperFilterConfig>:
  *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
  *                                    samples at the active level 
  * @retval None
  */
void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 800adcc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800add0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800add4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800add8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800addc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800adde:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800ade2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 800ade4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ade8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800adec:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800adf0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800adf4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	430a      	orrs	r2, r1
 800adfa:	641a      	str	r2, [r3, #64]	; 0x40
}
 800adfc:	f107 070c 	add.w	r7, r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bc80      	pop	{r7}
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop

0800ae08 <RTC_TamperSamplingFreqConfig>:
  *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
  *                                           with a frequency =  RTCCLK / 256  
  * @retval None
  */
void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 800ae10:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ae14:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ae18:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ae1c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ae20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ae22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ae26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 800ae28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ae2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ae30:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ae34:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ae38:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	641a      	str	r2, [r3, #64]	; 0x40
}
 800ae40:	f107 070c 	add.w	r7, r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bc80      	pop	{r7}
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop

0800ae4c <RTC_TamperPinsPrechargeDuration>:
  *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling during 4 RTCCLK cycle    
  *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling during 8 RTCCLK cycle
  * @retval None
  */
void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 800ae54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ae58:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ae5c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ae60:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ae64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ae66:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800ae6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 800ae6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ae70:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ae74:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ae78:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ae7c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	430a      	orrs	r2, r1
 800ae82:	641a      	str	r2, [r3, #64]	; 0x40
}
 800ae84:	f107 070c 	add.w	r7, r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bc80      	pop	{r7}
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop

0800ae90 <RTC_TimeStampOnTamperDetectionCmd>:
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	4603      	mov	r3, r0
 800ae98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 800ae9a:	79fb      	ldrb	r3, [r7, #7]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00c      	beq.n	800aeba <RTC_TimeStampOnTamperDetectionCmd+0x2a>
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 800aea0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aea4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aea8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800aeac:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800aeb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800aeb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aeb6:	641a      	str	r2, [r3, #64]	; 0x40
 800aeb8:	e00b      	b.n	800aed2 <RTC_TimeStampOnTamperDetectionCmd+0x42>
  }
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 800aeba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aebe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aec2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800aec6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800aeca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800aecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aed0:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800aed2:	f107 070c 	add.w	r7, r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bc80      	pop	{r7}
 800aeda:	4770      	bx	lr

0800aedc <RTC_TamperPullUpCmd>:
  * @param  NewState: new state of tamper pull up.
  *   This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	4603      	mov	r3, r0
 800aee4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 800aee6:	79fb      	ldrb	r3, [r7, #7]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00c      	beq.n	800af06 <RTC_TamperPullUpCmd+0x2a>
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 800aeec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aef0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aef4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800aef8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800aefc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800aefe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af02:	641a      	str	r2, [r3, #64]	; 0x40
 800af04:	e00b      	b.n	800af1e <RTC_TamperPullUpCmd+0x42>
  }
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 800af06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af0a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af0e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800af12:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800af16:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800af18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af1c:	641a      	str	r2, [r3, #64]	; 0x40
  } 
}
 800af1e:	f107 070c 	add.w	r7, r7, #12
 800af22:	46bd      	mov	sp, r7
 800af24:	bc80      	pop	{r7}
 800af26:	4770      	bx	lr

0800af28 <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800af32:	f04f 0300 	mov.w	r3, #0
 800af36:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800af38:	f642 0350 	movw	r3, #10320	; 0x2850
 800af3c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af40:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	18d3      	adds	r3, r2, r3
 800af4c:	60fb      	str	r3, [r7, #12]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	683a      	ldr	r2, [r7, #0]
 800af52:	601a      	str	r2, [r3, #0]
}
 800af54:	f107 0714 	add.w	r7, r7, #20
 800af58:	46bd      	mov	sp, r7
 800af5a:	bc80      	pop	{r7}
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop

0800af60 <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800af68:	f04f 0300 	mov.w	r3, #0
 800af6c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800af6e:	f642 0350 	movw	r3, #10320	; 0x2850
 800af72:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af76:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	18d3      	adds	r3, r2, r3
 800af82:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	f107 0714 	add.w	r7, r7, #20
 800af8e:	46bd      	mov	sp, r7
 800af90:	bc80      	pop	{r7}
 800af92:	4770      	bx	lr

0800af94 <RTC_TamperPinSelection>:
  *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
  *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
  * @retval None
  */
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 800af9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800afa0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800afa4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800afa8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800afac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800afae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800afb2:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 800afb4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800afb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800afbc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800afc0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800afc4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	430a      	orrs	r2, r1
 800afca:	641a      	str	r2, [r3, #64]	; 0x40
}
 800afcc:	f107 070c 	add.w	r7, r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bc80      	pop	{r7}
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop

0800afd8 <RTC_TimeStampPinSelection>:
  *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
  *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
  * @retval None
  */
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 800afe0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800afe4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800afe8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800afec:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800aff0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800aff2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800aff6:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 800aff8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800affc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b000:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b004:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b008:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	430a      	orrs	r2, r1
 800b00e:	641a      	str	r2, [r3, #64]	; 0x40
}
 800b010:	f107 070c 	add.w	r7, r7, #12
 800b014:	46bd      	mov	sp, r7
 800b016:	bc80      	pop	{r7}
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop

0800b01c <RTC_OutputTypeConfig>:
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 800b024:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b028:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b02c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b030:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b034:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b036:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b03a:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 800b03c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b040:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b044:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b048:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b04c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	430a      	orrs	r2, r1
 800b052:	641a      	str	r2, [r3, #64]	; 0x40
}
 800b054:	f107 070c 	add.w	r7, r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	bc80      	pop	{r7}
 800b05c:	4770      	bx	lr
 800b05e:	bf00      	nop

0800b060 <RTC_SynchroShiftConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800b06a:	f04f 0300 	mov.w	r3, #0
 800b06e:	73fb      	strb	r3, [r7, #15]
  uint32_t shpfcount = 0;
 800b070:	f04f 0300 	mov.w	r3, #0
 800b074:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b076:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b07a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b07e:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b082:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b084:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b088:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b08c:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b090:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 800b092:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b096:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	f003 0308 	and.w	r3, r3, #8
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d011      	beq.n	800b0c8 <RTC_SynchroShiftConfig+0x68>
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800b0a4:	e003      	b.n	800b0ae <RTC_SynchroShiftConfig+0x4e>
    {
      shpfcount++;
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	f103 0301 	add.w	r3, r3, #1
 800b0ac:	60bb      	str	r3, [r7, #8]
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800b0ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b0b2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	f003 0308 	and.w	r3, r3, #8
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d003      	beq.n	800b0c8 <RTC_SynchroShiftConfig+0x68>
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0c6:	d1ee      	bne.n	800b0a6 <RTC_SynchroShiftConfig+0x46>
      shpfcount++;
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 800b0c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b0cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	f003 0308 	and.w	r3, r3, #8
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d121      	bne.n	800b11e <RTC_SynchroShiftConfig+0xbe>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 800b0da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b0de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	f003 0310 	and.w	r3, r3, #16
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d114      	bne.n	800b116 <RTC_SynchroShiftConfig+0xb6>
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 800b0ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b0f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	430a      	orrs	r2, r1
 800b0fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 800b0fc:	f7fe fd14 	bl	8009b28 <RTC_WaitForSynchro>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d103      	bne.n	800b10e <RTC_SynchroShiftConfig+0xae>
      {
        status = ERROR;
 800b106:	f04f 0300 	mov.w	r3, #0
 800b10a:	73fb      	strb	r3, [r7, #15]
 800b10c:	e00a      	b.n	800b124 <RTC_SynchroShiftConfig+0xc4>
      }
      else
      {
        status = SUCCESS;
 800b10e:	f04f 0301 	mov.w	r3, #1
 800b112:	73fb      	strb	r3, [r7, #15]
 800b114:	e006      	b.n	800b124 <RTC_SynchroShiftConfig+0xc4>
      }
    }
    else
    {
      status = ERROR;
 800b116:	f04f 0300 	mov.w	r3, #0
 800b11a:	73fb      	strb	r3, [r7, #15]
 800b11c:	e002      	b.n	800b124 <RTC_SynchroShiftConfig+0xc4>
    }
  }
  else
  {
    status = ERROR;
 800b11e:	f04f 0300 	mov.w	r3, #0
 800b122:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800b124:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b128:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b12c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b130:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 800b132:	7bfb      	ldrb	r3, [r7, #15]
}
 800b134:	4618      	mov	r0, r3
 800b136:	f107 0710 	add.w	r7, r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop

0800b140 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b14c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b150:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b154:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b158:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b15a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b15e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b162:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b166:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800b168:	78fb      	ldrb	r3, [r7, #3]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d01c      	beq.n	800b1a8 <RTC_ITConfig+0x68>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 800b16e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b172:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b176:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b17a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b17e:	6891      	ldr	r1, [r2, #8]
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	f022 0204 	bic.w	r2, r2, #4
 800b186:	430a      	orrs	r2, r1
 800b188:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 800b18a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b18e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b192:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b196:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b19a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	f002 0204 	and.w	r2, r2, #4
 800b1a2:	430a      	orrs	r2, r1
 800b1a4:	641a      	str	r2, [r3, #64]	; 0x40
 800b1a6:	e01f      	b.n	800b1e8 <RTC_ITConfig+0xa8>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 800b1a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b1ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b1b0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b1b4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b1b8:	6891      	ldr	r1, [r2, #8]
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	f022 0204 	bic.w	r2, r2, #4
 800b1c0:	ea6f 0202 	mvn.w	r2, r2
 800b1c4:	400a      	ands	r2, r1
 800b1c6:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 800b1c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b1cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b1d0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b1d4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b1d8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	f002 0204 	and.w	r2, r2, #4
 800b1e0:	ea6f 0202 	mvn.w	r2, r2
 800b1e4:	400a      	ands	r2, r1
 800b1e6:	641a      	str	r2, [r3, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b1e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b1ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b1f0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b1f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b1f6:	f107 070c 	add.w	r7, r7, #12
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bc80      	pop	{r7}
 800b1fe:	4770      	bx	lr

0800b200 <RTC_GetFlagStatus>:
  *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
  *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800b208:	f04f 0300 	mov.w	r3, #0
 800b20c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800b20e:	f04f 0300 	mov.w	r3, #0
 800b212:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 800b214:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b218:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b21c:	68da      	ldr	r2, [r3, #12]
 800b21e:	f643 737f 	movw	r3, #16255	; 0x3f7f
 800b222:	f2c0 0301 	movt	r3, #1
 800b226:	4013      	ands	r3, r2
 800b228:	60bb      	str	r3, [r7, #8]
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4013      	ands	r3, r2
 800b230:	2b00      	cmp	r3, #0
 800b232:	d003      	beq.n	800b23c <RTC_GetFlagStatus+0x3c>
  {
    bitstatus = SET;
 800b234:	f04f 0301 	mov.w	r3, #1
 800b238:	73fb      	strb	r3, [r7, #15]
 800b23a:	e002      	b.n	800b242 <RTC_GetFlagStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
 800b23c:	f04f 0300 	mov.w	r3, #0
 800b240:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b242:	7bfb      	ldrb	r3, [r7, #15]
}
 800b244:	4618      	mov	r0, r3
 800b246:	f107 0714 	add.w	r7, r7, #20
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bc80      	pop	{r7}
 800b24e:	4770      	bx	lr

0800b250 <RTC_ClearFlag>:
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 800b258:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b25c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800b266:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800b26a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b26e:	ea6f 0102 	mvn.w	r1, r2
 800b272:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b276:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b27a:	68d2      	ldr	r2, [r2, #12]
 800b27c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800b280:	430a      	orrs	r2, r1
 800b282:	60da      	str	r2, [r3, #12]
}
 800b284:	f107 070c 	add.w	r7, r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	bc80      	pop	{r7}
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop

0800b290 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 800b290:	b480      	push	{r7}
 800b292:	b087      	sub	sp, #28
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800b298:	f04f 0300 	mov.w	r3, #0
 800b29c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 800b29e:	f04f 0300 	mov.w	r3, #0
 800b2a2:	613b      	str	r3, [r7, #16]
 800b2a4:	f04f 0300 	mov.w	r3, #0
 800b2a8:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 800b2aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b2ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b4:	f003 0304 	and.w	r3, r3, #4
 800b2b8:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 800b2ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b2be:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b2c2:	689a      	ldr	r2, [r3, #8]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	401a      	ands	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	ea4f 31d3 	mov.w	r1, r3, lsr #15
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	400b      	ands	r3, r1
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 800b2d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b2da:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b2de:	68da      	ldr	r2, [r3, #12]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00a      	beq.n	800b306 <RTC_GetITStatus+0x76>
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800b2f6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d003      	beq.n	800b306 <RTC_GetITStatus+0x76>
  {
    bitstatus = SET;
 800b2fe:	f04f 0301 	mov.w	r3, #1
 800b302:	75fb      	strb	r3, [r7, #23]
 800b304:	e002      	b.n	800b30c <RTC_GetITStatus+0x7c>
  }
  else
  {
    bitstatus = RESET;
 800b306:	f04f 0300 	mov.w	r3, #0
 800b30a:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 800b30c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	f107 071c 	add.w	r7, r7, #28
 800b314:	46bd      	mov	sp, r7
 800b316:	bc80      	pop	{r7}
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop

0800b31c <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b085      	sub	sp, #20
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b324:	f04f 0300 	mov.w	r3, #0
 800b328:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800b330:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 800b332:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b336:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800b340:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800b344:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b348:	ea6f 0102 	mvn.w	r1, r2
 800b34c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b350:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b354:	68d2      	ldr	r2, [r2, #12]
 800b356:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800b35a:	430a      	orrs	r2, r1
 800b35c:	60da      	str	r2, [r3, #12]
}
 800b35e:	f107 0714 	add.w	r7, r7, #20
 800b362:	46bd      	mov	sp, r7
 800b364:	bc80      	pop	{r7}
 800b366:	4770      	bx	lr

0800b368 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	4603      	mov	r3, r0
 800b370:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 800b372:	f04f 0300 	mov.w	r3, #0
 800b376:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 800b378:	e007      	b.n	800b38a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800b37a:	7bfb      	ldrb	r3, [r7, #15]
 800b37c:	f103 0301 	add.w	r3, r3, #1
 800b380:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 800b382:	79fb      	ldrb	r3, [r7, #7]
 800b384:	f1a3 030a 	sub.w	r3, r3, #10
 800b388:	71fb      	strb	r3, [r7, #7]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800b38a:	79fb      	ldrb	r3, [r7, #7]
 800b38c:	2b09      	cmp	r3, #9
 800b38e:	d8f4      	bhi.n	800b37a <RTC_ByteToBcd2+0x12>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 800b390:	7bfb      	ldrb	r3, [r7, #15]
 800b392:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800b396:	b2da      	uxtb	r2, r3
 800b398:	79fb      	ldrb	r3, [r7, #7]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	b2db      	uxtb	r3, r3
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f107 0714 	add.w	r7, r7, #20
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bc80      	pop	{r7}
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop

0800b3ac <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 800b3b6:	f04f 0300 	mov.w	r3, #0
 800b3ba:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800b3bc:	79fb      	ldrb	r3, [r7, #7]
 800b3be:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800b3ca:	18d3      	adds	r3, r2, r3
 800b3cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b3d0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 800b3d2:	79fb      	ldrb	r3, [r7, #7]
 800b3d4:	f003 030f 	and.w	r3, r3, #15
 800b3d8:	b2da      	uxtb	r2, r3
 800b3da:	7bfb      	ldrb	r3, [r7, #15]
 800b3dc:	18d3      	adds	r3, r2, r3
 800b3de:	b2db      	uxtb	r3, r3
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f107 0714 	add.w	r7, r7, #20
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bc80      	pop	{r7}
 800b3ea:	4770      	bx	lr

0800b3ec <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 800b3f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b3f4:	f04f 0101 	mov.w	r1, #1
 800b3f8:	f7fd ff48 	bl	800928c <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 800b3fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b400:	f04f 0100 	mov.w	r1, #0
 800b404:	f7fd ff42 	bl	800928c <RCC_APB2PeriphResetCmd>
}
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop

0800b40c <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b414:	f04f 0300 	mov.w	r3, #0
 800b418:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 800b41a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b41e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b42c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b430:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	7d1b      	ldrb	r3, [r3, #20]
 800b436:	461a      	mov	r2, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	685b      	ldr	r3, [r3, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800b442:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800b44e:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	691b      	ldr	r3, [r3, #16]
 800b454:	4313      	orrs	r3, r2
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	4313      	orrs	r3, r2
 800b45a:	60fb      	str	r3, [r7, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 800b45c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b460:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	605a      	str	r2, [r3, #4]
}
 800b468:	f107 0714 	add.w	r7, r7, #20
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bc80      	pop	{r7}
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop

0800b474 <SDIO_StructInit>:
  * @param  SDIO_InitStruct: pointer to an SDIO_InitTypeDef structure which 
  *         will be initialized.
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f04f 0200 	mov.w	r2, #0
 800b482:	751a      	strb	r2, [r3, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f04f 0200 	mov.w	r2, #0
 800b48a:	601a      	str	r2, [r3, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f04f 0200 	mov.w	r2, #0
 800b492:	605a      	str	r2, [r3, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f04f 0200 	mov.w	r2, #0
 800b49a:	609a      	str	r2, [r3, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f04f 0200 	mov.w	r2, #0
 800b4a2:	60da      	str	r2, [r3, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f04f 0200 	mov.w	r2, #0
 800b4aa:	611a      	str	r2, [r3, #16]
}
 800b4ac:	f107 070c 	add.w	r7, r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bc80      	pop	{r7}
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop

0800b4b8 <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	4603      	mov	r3, r0
 800b4c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 800b4c2:	f248 03a0 	movw	r3, #32928	; 0x80a0
 800b4c6:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800b4ca:	79fa      	ldrb	r2, [r7, #7]
 800b4cc:	601a      	str	r2, [r3, #0]
}
 800b4ce:	f107 070c 	add.w	r7, r7, #12
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bc80      	pop	{r7}
 800b4d6:	4770      	bx	lr

0800b4d8 <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 800b4e0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b4e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	601a      	str	r2, [r3, #0]
}
 800b4ec:	f107 070c 	add.w	r7, r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bc80      	pop	{r7}
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop

0800b4f8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 800b4fc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b500:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f003 0303 	and.w	r3, r3, #3
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bc80      	pop	{r7}
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop

0800b514 <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b51c:	f04f 0300 	mov.w	r3, #0
 800b520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 800b522:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b526:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	6812      	ldr	r2, [r2, #0]
 800b52e:	609a      	str	r2, [r3, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 800b530:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b534:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b542:	f023 0307 	bic.w	r3, r3, #7
 800b546:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	685a      	ldr	r2, [r3, #4]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	431a      	orrs	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	691b      	ldr	r3, [r3, #16]
 800b55c:	4313      	orrs	r3, r2
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800b55e:	68fa      	ldr	r2, [r7, #12]
 800b560:	4313      	orrs	r3, r2
 800b562:	60fb      	str	r3, [r7, #12]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 800b564:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b568:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	60da      	str	r2, [r3, #12]
}
 800b570:	f107 0714 	add.w	r7, r7, #20
 800b574:	46bd      	mov	sp, r7
 800b576:	bc80      	pop	{r7}
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop

0800b57c <SDIO_CmdStructInit>:
  * @param  SDIO_CmdInitStruct: pointer to an SDIO_CmdInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f04f 0200 	mov.w	r2, #0
 800b58a:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f04f 0200 	mov.w	r2, #0
 800b592:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f04f 0200 	mov.w	r2, #0
 800b59a:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f04f 0200 	mov.w	r2, #0
 800b5a2:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f04f 0200 	mov.w	r2, #0
 800b5aa:	611a      	str	r2, [r3, #16]
}
 800b5ac:	f107 070c 	add.w	r7, r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bc80      	pop	{r7}
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop

0800b5b8 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 800b5bc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b5c0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	b2db      	uxtb	r3, r3
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bc80      	pop	{r7}
 800b5ce:	4770      	bx	lr

0800b5d0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800b5d8:	f04f 0300 	mov.w	r3, #0
 800b5dc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	f642 4314 	movw	r3, #11284	; 0x2c14
 800b5e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b5e8:	18d3      	adds	r3, r2, r3
 800b5ea:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f107 0714 	add.w	r7, r7, #20
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bc80      	pop	{r7}
 800b5fa:	4770      	bx	lr

0800b5fc <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b604:	f04f 0300 	mov.w	r3, #0
 800b608:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 800b60a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b60e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	6812      	ldr	r2, [r2, #0]
 800b616:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 800b618:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b61c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	6852      	ldr	r2, [r2, #4]
 800b624:	629a      	str	r2, [r3, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 800b626:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b62a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b630:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800b638:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	689a      	ldr	r2, [r3, #8]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	691b      	ldr	r3, [r3, #16]
 800b648:	431a      	orrs	r2, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	4313      	orrs	r3, r2
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	4313      	orrs	r3, r2
 800b654:	60fb      	str	r3, [r7, #12]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 800b656:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b65a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b662:	f107 0714 	add.w	r7, r7, #20
 800b666:	46bd      	mov	sp, r7
 800b668:	bc80      	pop	{r7}
 800b66a:	4770      	bx	lr

0800b66c <SDIO_DataStructInit>:
  * @param  SDIO_DataInitStruct: pointer to an SDIO_DataInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b67a:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f04f 0200 	mov.w	r2, #0
 800b682:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f04f 0200 	mov.w	r2, #0
 800b68a:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f04f 0200 	mov.w	r2, #0
 800b692:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f04f 0200 	mov.w	r2, #0
 800b69a:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f04f 0200 	mov.w	r2, #0
 800b6a2:	615a      	str	r2, [r3, #20]
}
 800b6a4:	f107 070c 	add.w	r7, r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bc80      	pop	{r7}
 800b6ac:	4770      	bx	lr
 800b6ae:	bf00      	nop

0800b6b0 <SDIO_GetDataCounter>:
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
 800b6b0:	b480      	push	{r7}
 800b6b2:	af00      	add	r7, sp, #0
  return SDIO->DCOUNT;
 800b6b4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b6b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bc80      	pop	{r7}
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop

0800b6c8 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 800b6c8:	b480      	push	{r7}
 800b6ca:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 800b6cc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b6d0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b6d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bc80      	pop	{r7}
 800b6de:	4770      	bx	lr

0800b6e0 <SDIO_WriteData>:
  * @brief  Write one data word to Tx FIFO.
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  SDIO->FIFO = Data;
 800b6e8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b6ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800b6f6:	f107 070c 	add.w	r7, r7, #12
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bc80      	pop	{r7}
 800b6fe:	4770      	bx	lr

0800b700 <SDIO_GetFIFOCount>:
  * @brief  Returns the number of words left to be written to or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
 800b700:	b480      	push	{r7}
 800b702:	af00      	add	r7, sp, #0
  return SDIO->FIFOCNT;
 800b704:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b708:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b70c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800b70e:	4618      	mov	r0, r3
 800b710:	46bd      	mov	sp, r7
 800b712:	bc80      	pop	{r7}
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop

0800b718 <SDIO_StartSDIOReadWait>:
  * @param  NewState: new state of the Start SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	4603      	mov	r3, r0
 800b720:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 800b722:	f248 53a0 	movw	r3, #34208	; 0x85a0
 800b726:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800b72a:	79fa      	ldrb	r2, [r7, #7]
 800b72c:	601a      	str	r2, [r3, #0]
}
 800b72e:	f107 070c 	add.w	r7, r7, #12
 800b732:	46bd      	mov	sp, r7
 800b734:	bc80      	pop	{r7}
 800b736:	4770      	bx	lr

0800b738 <SDIO_StopSDIOReadWait>:
  * @param  NewState: new state of the Stop SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	4603      	mov	r3, r0
 800b740:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 800b742:	f248 53a4 	movw	r3, #34212	; 0x85a4
 800b746:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800b74a:	79fa      	ldrb	r2, [r7, #7]
 800b74c:	601a      	str	r2, [r3, #0]
}
 800b74e:	f107 070c 	add.w	r7, r7, #12
 800b752:	46bd      	mov	sp, r7
 800b754:	bc80      	pop	{r7}
 800b756:	4770      	bx	lr

0800b758 <SDIO_SetSDIOReadWaitMode>:
  *            @arg SDIO_ReadWaitMode_CLK: Read Wait control by stopping SDIOCLK
  *            @arg SDIO_ReadWaitMode_DATA2: Read Wait control using SDIO_DATA2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 800b760:	f248 53a8 	movw	r3, #34216	; 0x85a8
 800b764:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	601a      	str	r2, [r3, #0]
}
 800b76c:	f107 070c 	add.w	r7, r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	bc80      	pop	{r7}
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop

0800b778 <SDIO_SetSDIOOperation>:
  * @param  NewState: new state of SDIO specific operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	4603      	mov	r3, r0
 800b780:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 800b782:	f248 53ac 	movw	r3, #34220	; 0x85ac
 800b786:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800b78a:	79fa      	ldrb	r2, [r7, #7]
 800b78c:	601a      	str	r2, [r3, #0]
}
 800b78e:	f107 070c 	add.w	r7, r7, #12
 800b792:	46bd      	mov	sp, r7
 800b794:	bc80      	pop	{r7}
 800b796:	4770      	bx	lr

0800b798 <SDIO_SendSDIOSuspendCmd>:
  * @param  NewState: new state of the SD I/O Mode suspend command.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	4603      	mov	r3, r0
 800b7a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 800b7a2:	f248 13ac 	movw	r3, #33196	; 0x81ac
 800b7a6:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800b7aa:	79fa      	ldrb	r2, [r7, #7]
 800b7ac:	601a      	str	r2, [r3, #0]
}
 800b7ae:	f107 070c 	add.w	r7, r7, #12
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bc80      	pop	{r7}
 800b7b6:	4770      	bx	lr

0800b7b8 <SDIO_CommandCompletionCmd>:
  * @param  NewState: new state of command completion signal. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	4603      	mov	r3, r0
 800b7c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 800b7c2:	f248 13b0 	movw	r3, #33200	; 0x81b0
 800b7c6:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800b7ca:	79fa      	ldrb	r2, [r7, #7]
 800b7cc:	601a      	str	r2, [r3, #0]
}
 800b7ce:	f107 070c 	add.w	r7, r7, #12
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bc80      	pop	{r7}
 800b7d6:	4770      	bx	lr

0800b7d8 <SDIO_CEATAITCmd>:
  * @param  NewState: new state of CE-ATA interrupt. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	4603      	mov	r3, r0
 800b7e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 800b7e2:	f248 13b4 	movw	r3, #33204	; 0x81b4
 800b7e6:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800b7ea:	79fa      	ldrb	r2, [r7, #7]
 800b7ec:	f002 0201 	and.w	r2, r2, #1
 800b7f0:	2a00      	cmp	r2, #0
 800b7f2:	bf14      	ite	ne
 800b7f4:	2200      	movne	r2, #0
 800b7f6:	2201      	moveq	r2, #1
 800b7f8:	601a      	str	r2, [r3, #0]
}
 800b7fa:	f107 070c 	add.w	r7, r7, #12
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bc80      	pop	{r7}
 800b802:	4770      	bx	lr

0800b804 <SDIO_SendCEATACmd>:
  * @param  NewState: new state of CE-ATA command. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
 800b80a:	4603      	mov	r3, r0
 800b80c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 800b80e:	f248 13b8 	movw	r3, #33208	; 0x81b8
 800b812:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800b816:	79fa      	ldrb	r2, [r7, #7]
 800b818:	601a      	str	r2, [r3, #0]
}
 800b81a:	f107 070c 	add.w	r7, r7, #12
 800b81e:	46bd      	mov	sp, r7
 800b820:	bc80      	pop	{r7}
 800b822:	4770      	bx	lr

0800b824 <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	4603      	mov	r3, r0
 800b82c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 800b82e:	f248 538c 	movw	r3, #34188	; 0x858c
 800b832:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800b836:	79fa      	ldrb	r2, [r7, #7]
 800b838:	601a      	str	r2, [r3, #0]
}
 800b83a:	f107 070c 	add.w	r7, r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	bc80      	pop	{r7}
 800b842:	4770      	bx	lr

0800b844 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	460b      	mov	r3, r1
 800b84e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800b850:	78fb      	ldrb	r3, [r7, #3]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00c      	beq.n	800b870 <SDIO_ITConfig+0x2c>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 800b856:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b85a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b85e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800b862:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800b866:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	430a      	orrs	r2, r1
 800b86c:	63da      	str	r2, [r3, #60]	; 0x3c
 800b86e:	e00d      	b.n	800b88c <SDIO_ITConfig+0x48>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 800b870:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b874:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b878:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800b87c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800b880:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	ea6f 0202 	mvn.w	r2, r2
 800b888:	400a      	ands	r2, r1
 800b88a:	63da      	str	r2, [r3, #60]	; 0x3c
  } 
}
 800b88c:	f107 070c 	add.w	r7, r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	bc80      	pop	{r7}
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop

0800b898 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800b8a0:	f04f 0300 	mov.w	r3, #0
 800b8a4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 800b8a6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b8aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b8ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4013      	ands	r3, r2
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d003      	beq.n	800b8c0 <SDIO_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 800b8b8:	f04f 0301 	mov.w	r3, #1
 800b8bc:	73fb      	strb	r3, [r7, #15]
 800b8be:	e002      	b.n	800b8c6 <SDIO_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800b8c0:	f04f 0300 	mov.w	r3, #0
 800b8c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f107 0714 	add.w	r7, r7, #20
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bc80      	pop	{r7}
 800b8d2:	4770      	bx	lr

0800b8d4 <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 800b8dc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b8e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b8e8:	f107 070c 	add.w	r7, r7, #12
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bc80      	pop	{r7}
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop

0800b8f4 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 800b8f4:	b480      	push	{r7}
 800b8f6:	b085      	sub	sp, #20
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800b8fc:	f04f 0300 	mov.w	r3, #0
 800b900:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 800b902:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b906:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b90a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	4013      	ands	r3, r2
 800b910:	2b00      	cmp	r3, #0
 800b912:	d003      	beq.n	800b91c <SDIO_GetITStatus+0x28>
  {
    bitstatus = SET;
 800b914:	f04f 0301 	mov.w	r3, #1
 800b918:	73fb      	strb	r3, [r7, #15]
 800b91a:	e002      	b.n	800b922 <SDIO_GetITStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800b91c:	f04f 0300 	mov.w	r3, #0
 800b920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b922:	7bfb      	ldrb	r3, [r7, #15]
}
 800b924:	4618      	mov	r0, r3
 800b926:	f107 0714 	add.w	r7, r7, #20
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bc80      	pop	{r7}
 800b92e:	4770      	bx	lr

0800b930 <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 800b938:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b93c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b944:	f107 070c 	add.w	r7, r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	bc80      	pop	{r7}
 800b94c:	4770      	bx	lr
 800b94e:	bf00      	nop

0800b950 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b95e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b962:	429a      	cmp	r2, r3
 800b964:	d10c      	bne.n	800b980 <SPI_I2S_DeInit+0x30>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 800b966:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b96a:	f04f 0101 	mov.w	r1, #1
 800b96e:	f7fd fc8d 	bl	800928c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800b972:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b976:	f04f 0100 	mov.w	r1, #0
 800b97a:	f7fd fc87 	bl	800928c <RCC_APB2PeriphResetCmd>
 800b97e:	e026      	b.n	800b9ce <SPI_I2S_DeInit+0x7e>
  }
  else if (SPIx == SPI2)
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b986:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d10c      	bne.n	800b9a8 <SPI_I2S_DeInit+0x58>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800b98e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b992:	f04f 0101 	mov.w	r1, #1
 800b996:	f7fd fc4f 	bl	8009238 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800b99a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b99e:	f04f 0100 	mov.w	r1, #0
 800b9a2:	f7fd fc49 	bl	8009238 <RCC_APB1PeriphResetCmd>
 800b9a6:	e012      	b.n	800b9ce <SPI_I2S_DeInit+0x7e>
    }
  else
  {
    if (SPIx == SPI3)
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b9ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d10b      	bne.n	800b9ce <SPI_I2S_DeInit+0x7e>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800b9b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b9ba:	f04f 0101 	mov.w	r1, #1
 800b9be:	f7fd fc3b 	bl	8009238 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800b9c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b9c6:	f04f 0100 	mov.w	r1, #0
 800b9ca:	f7fd fc35 	bl	8009238 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800b9ce:	f107 0708 	add.w	r7, r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop

0800b9d8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800b9e2:	f04f 0300 	mov.w	r3, #0
 800b9e6:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	881b      	ldrh	r3, [r3, #0]
 800b9ec:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800b9ee:	89fb      	ldrh	r3, [r7, #14]
 800b9f0:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800b9f4:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	881a      	ldrh	r2, [r3, #0]
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	885b      	ldrh	r3, [r3, #2]
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ba06:	4313      	orrs	r3, r2
 800ba08:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ba16:	4313      	orrs	r3, r2
 800ba18:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ba26:	4313      	orrs	r3, r2
 800ba28:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	89fb      	ldrh	r3, [r7, #14]
 800ba34:	4313      	orrs	r3, r2
 800ba36:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	89fa      	ldrh	r2, [r7, #14]
 800ba3c:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	8b9b      	ldrh	r3, [r3, #28]
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	8a1a      	ldrh	r2, [r3, #16]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	821a      	strh	r2, [r3, #16]
}
 800ba56:	f107 0714 	add.w	r7, r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bc80      	pop	{r7}
 800ba5e:	4770      	bx	lr

0800ba60 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b08b      	sub	sp, #44	; 0x2c
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800ba6a:	f04f 0300 	mov.w	r3, #0
 800ba6e:	837b      	strh	r3, [r7, #26]
 800ba70:	f04f 0302 	mov.w	r3, #2
 800ba74:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ba76:	f04f 0300 	mov.w	r3, #0
 800ba7a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ba7c:	f04f 0301 	mov.w	r3, #1
 800ba80:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800ba82:	f04f 0300 	mov.w	r3, #0
 800ba86:	61fb      	str	r3, [r7, #28]
 800ba88:	f04f 0300 	mov.w	r3, #0
 800ba8c:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 800ba8e:	f04f 0300 	mov.w	r3, #0
 800ba92:	613b      	str	r3, [r7, #16]
 800ba94:	f04f 0300 	mov.w	r3, #0
 800ba98:	60fb      	str	r3, [r7, #12]
 800ba9a:	f04f 0300 	mov.w	r3, #0
 800ba9e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	8b9b      	ldrh	r3, [r3, #28]
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800baaa:	f023 030f 	bic.w	r3, r3, #15
 800baae:	b29a      	uxth	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f04f 0202 	mov.w	r2, #2
 800baba:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	8b9b      	ldrh	r3, [r3, #28]
 800bac0:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	2b02      	cmp	r3, #2
 800bac8:	d106      	bne.n	800bad8 <I2S_Init+0x78>
  {
    i2sodd = (uint16_t)0;
 800baca:	f04f 0300 	mov.w	r3, #0
 800bace:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800bad0:	f04f 0302 	mov.w	r3, #2
 800bad4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bad6:	e09a      	b.n	800bc0e <I2S_Init+0x1ae>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	889b      	ldrh	r3, [r3, #4]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d103      	bne.n	800bae8 <I2S_Init+0x88>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 800bae0:	f04f 0301 	mov.w	r3, #1
 800bae4:	847b      	strh	r3, [r7, #34]	; 0x22
 800bae6:	e002      	b.n	800baee <I2S_Init+0x8e>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 800bae8:	f04f 0302 	mov.w	r3, #2
 800baec:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 800baee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800baf2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d00b      	beq.n	800bb18 <I2S_Init+0xb8>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 800bb00:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bb04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bb08:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bb0c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bb10:	6892      	ldr	r2, [r2, #8]
 800bb12:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bb16:	609a      	str	r2, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800bb18:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bb1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bb20:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800bb24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bb28:	4013      	ands	r3, r2
 800bb2a:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800bb2e:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800bb32:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800bb36:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800bb38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bb3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bb40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb44:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bb48:	ea4f 7313 	mov.w	r3, r3, lsr #28
 800bb4c:	f003 0307 	and.w	r3, r3, #7
 800bb50:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 800bb52:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bb56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb60:	613b      	str	r3, [r7, #16]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800bb62:	f647 0340 	movw	r3, #30784	; 0x7840
 800bb66:	f2c0 137d 	movt	r3, #381	; 0x17d
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	fb02 f203 	mul.w	r2, r2, r3
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb7c:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	88db      	ldrh	r3, [r3, #6]
 800bb82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb86:	d113      	bne.n	800bbb0 <I2S_Init+0x150>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	ea4f 2213 	mov.w	r2, r3, lsr #8
 800bb8e:	4613      	mov	r3, r2
 800bb90:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800bb94:	189b      	adds	r3, r3, r2
 800bb96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	f103 0305 	add.w	r3, r3, #5
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	61fb      	str	r3, [r7, #28]
 800bbae:	e015      	b.n	800bbdc <I2S_Init+0x17c>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800bbb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbb2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800bbb6:	697a      	ldr	r2, [r7, #20]
 800bbb8:	fbb2 f2f3 	udiv	r2, r2, r3
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800bbc2:	189b      	adds	r3, r3, r2
 800bbc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bbc8:	461a      	mov	r2, r3
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	f103 0305 	add.w	r3, r3, #5
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800bbdc:	69fa      	ldr	r2, [r7, #28]
 800bbde:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 800bbe2:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 800bbe6:	fba3 1302 	umull	r1, r3, r3, r2
 800bbea:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800bbee:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	f003 0301 	and.w	r3, r3, #1
 800bbf8:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800bbfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbfc:	69fa      	ldr	r2, [r7, #28]
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800bc04:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800bc06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc08:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800bc0c:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800bc0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d902      	bls.n	800bc1a <I2S_Init+0x1ba>
 800bc14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc16:	2bff      	cmp	r3, #255	; 0xff
 800bc18:	d905      	bls.n	800bc26 <I2S_Init+0x1c6>
  {
    /* Set the default values */
    i2sdiv = 2;
 800bc1a:	f04f 0302 	mov.w	r3, #2
 800bc1e:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 800bc20:	f04f 0300 	mov.w	r3, #0
 800bc24:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	88da      	ldrh	r2, [r3, #6]
 800bc2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	b29a      	uxth	r2, r3
 800bc30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc32:	4313      	orrs	r3, r2
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	8859      	ldrh	r1, [r3, #2]
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800bc4a:	4303      	orrs	r3, r0
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	430b      	orrs	r3, r1
 800bc50:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800bc52:	4313      	orrs	r3, r2
 800bc54:	b29a      	uxth	r2, r3
 800bc56:	8b7b      	ldrh	r3, [r7, #26]
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bc60:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	8b7a      	ldrh	r2, [r7, #26]
 800bc66:	839a      	strh	r2, [r3, #28]
}
 800bc68:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bc80      	pop	{r7}
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop

0800bc74 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f04f 0200 	mov.w	r2, #0
 800bc82:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f04f 0200 	mov.w	r2, #0
 800bc8a:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f04f 0200 	mov.w	r2, #0
 800bc92:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f04f 0200 	mov.w	r2, #0
 800bc9a:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f04f 0200 	mov.w	r2, #0
 800bca2:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f04f 0200 	mov.w	r2, #0
 800bcaa:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f04f 0200 	mov.w	r2, #0
 800bcb2:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f04f 0200 	mov.w	r2, #0
 800bcba:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f04f 0207 	mov.w	r2, #7
 800bcc2:	821a      	strh	r2, [r3, #16]
}
 800bcc4:	f107 070c 	add.w	r7, r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bc80      	pop	{r7}
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop

0800bcd0 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f04f 0200 	mov.w	r2, #0
 800bcde:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f04f 0200 	mov.w	r2, #0
 800bce6:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f04f 0200 	mov.w	r2, #0
 800bcee:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f04f 0200 	mov.w	r2, #0
 800bcf6:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f04f 0202 	mov.w	r2, #2
 800bcfe:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f04f 0200 	mov.w	r2, #0
 800bd06:	819a      	strh	r2, [r3, #12]
}
 800bd08:	f107 070c 	add.w	r7, r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bc80      	pop	{r7}
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop

0800bd14 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800bd20:	78fb      	ldrb	r3, [r7, #3]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d008      	beq.n	800bd38 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd30:	b29a      	uxth	r2, r3
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	801a      	strh	r2, [r3, #0]
 800bd36:	e007      	b.n	800bd48 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	881b      	ldrh	r3, [r3, #0]
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	801a      	strh	r2, [r3, #0]
  }
}
 800bd48:	f107 070c 	add.w	r7, r7, #12
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bc80      	pop	{r7}
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop

0800bd54 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800bd60:	78fb      	ldrb	r3, [r7, #3]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d008      	beq.n	800bd78 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	8b9b      	ldrh	r3, [r3, #28]
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	839a      	strh	r2, [r3, #28]
 800bd76:	e007      	b.n	800bd88 <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	8b9b      	ldrh	r3, [r3, #28]
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	839a      	strh	r2, [r3, #28]
  }
}
 800bd88:	f107 070c 	add.w	r7, r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bc80      	pop	{r7}
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop

0800bd94 <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	881b      	ldrh	r3, [r3, #0]
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bdaa:	b29a      	uxth	r2, r3
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	881b      	ldrh	r3, [r3, #0]
 800bdb4:	b29a      	uxth	r2, r3
 800bdb6:	887b      	ldrh	r3, [r7, #2]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	b29a      	uxth	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	801a      	strh	r2, [r3, #0]
}
 800bdc0:	f107 070c 	add.w	r7, r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bc80      	pop	{r7}
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop

0800bdcc <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800bdd8:	887b      	ldrh	r3, [r7, #2]
 800bdda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdde:	d108      	bne.n	800bdf2 <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	881b      	ldrh	r3, [r3, #0]
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	801a      	strh	r2, [r3, #0]
 800bdf0:	e007      	b.n	800be02 <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	801a      	strh	r2, [r3, #0]
  }
}
 800be02:	f107 070c 	add.w	r7, r7, #12
 800be06:	46bd      	mov	sp, r7
 800be08:	bc80      	pop	{r7}
 800be0a:	4770      	bx	lr

0800be0c <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	460b      	mov	r3, r1
 800be16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800be18:	887a      	ldrh	r2, [r7, #2]
 800be1a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800be1e:	429a      	cmp	r2, r3
 800be20:	d008      	beq.n	800be34 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	881b      	ldrh	r3, [r3, #0]
 800be26:	b29b      	uxth	r3, r3
 800be28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be2c:	b29a      	uxth	r2, r3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	801a      	strh	r2, [r3, #0]
 800be32:	e007      	b.n	800be44 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	881b      	ldrh	r3, [r3, #0]
 800be38:	b29b      	uxth	r3, r3
 800be3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be3e:	b29a      	uxth	r2, r3
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	801a      	strh	r2, [r3, #0]
  }
}
 800be44:	f107 070c 	add.w	r7, r7, #12
 800be48:	46bd      	mov	sp, r7
 800be4a:	bc80      	pop	{r7}
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop

0800be50 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800be50:	b480      	push	{r7}
 800be52:	b083      	sub	sp, #12
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	460b      	mov	r3, r1
 800be5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800be5c:	78fb      	ldrb	r3, [r7, #3]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d008      	beq.n	800be74 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	889b      	ldrh	r3, [r3, #4]
 800be66:	b29b      	uxth	r3, r3
 800be68:	f043 0304 	orr.w	r3, r3, #4
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	809a      	strh	r2, [r3, #4]
 800be72:	e007      	b.n	800be84 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	889b      	ldrh	r3, [r3, #4]
 800be78:	b29b      	uxth	r3, r3
 800be7a:	f023 0304 	bic.w	r3, r3, #4
 800be7e:	b29a      	uxth	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	809a      	strh	r2, [r3, #4]
  }
}
 800be84:	f107 070c 	add.w	r7, r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	bc80      	pop	{r7}
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop

0800be90 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	460b      	mov	r3, r1
 800be9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800be9c:	78fb      	ldrb	r3, [r7, #3]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d008      	beq.n	800beb4 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	889b      	ldrh	r3, [r3, #4]
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	f043 0310 	orr.w	r3, r3, #16
 800beac:	b29a      	uxth	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	809a      	strh	r2, [r3, #4]
 800beb2:	e007      	b.n	800bec4 <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	889b      	ldrh	r3, [r3, #4]
 800beb8:	b29b      	uxth	r3, r3
 800beba:	f023 0310 	bic.w	r3, r3, #16
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	809a      	strh	r2, [r3, #4]
  }
}
 800bec4:	f107 070c 	add.w	r7, r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	bc80      	pop	{r7}
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop

0800bed0 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b085      	sub	sp, #20
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 800beda:	f04f 0300 	mov.w	r3, #0
 800bede:	81bb      	strh	r3, [r7, #12]
 800bee0:	f04f 0300 	mov.w	r3, #0
 800bee4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	8b9b      	ldrh	r3, [r3, #28]
 800beea:	b29b      	uxth	r3, r3
 800beec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800bef0:	f023 030f 	bic.w	r3, r3, #15
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f04f 0202 	mov.w	r2, #2
 800bf00:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	8b9b      	ldrh	r3, [r3, #28]
 800bf06:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	881b      	ldrh	r3, [r3, #0]
 800bf0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf10:	d003      	beq.n	800bf1a <I2S_FullDuplexConfig+0x4a>
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	881b      	ldrh	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d103      	bne.n	800bf22 <I2S_FullDuplexConfig+0x52>
  {
    tmp = I2S_Mode_SlaveRx;
 800bf1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf1e:	81fb      	strh	r3, [r7, #14]
 800bf20:	e00c      	b.n	800bf3c <I2S_FullDuplexConfig+0x6c>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	881b      	ldrh	r3, [r3, #0]
 800bf26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf2a:	d004      	beq.n	800bf36 <I2S_FullDuplexConfig+0x66>
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	881b      	ldrh	r3, [r3, #0]
 800bf30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf34:	d102      	bne.n	800bf3c <I2S_FullDuplexConfig+0x6c>
    {
      tmp = I2S_Mode_SlaveTx;
 800bf36:	f04f 0300 	mov.w	r3, #0
 800bf3a:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	885a      	ldrh	r2, [r3, #2]
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800bf48:	430b      	orrs	r3, r1
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800bf50:	89fb      	ldrh	r3, [r7, #14]
 800bf52:	4313      	orrs	r3, r2
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	89bb      	ldrh	r3, [r7, #12]
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bf60:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	89ba      	ldrh	r2, [r7, #12]
 800bf66:	839a      	strh	r2, [r3, #28]
}
 800bf68:	f107 0714 	add.w	r7, r7, #20
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bc80      	pop	{r7}
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop

0800bf74 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	899b      	ldrh	r3, [r3, #12]
 800bf80:	b29b      	uxth	r3, r3
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	f107 070c 	add.w	r7, r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bc80      	pop	{r7}
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop

0800bf90 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	460b      	mov	r3, r1
 800bf9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	887a      	ldrh	r2, [r7, #2]
 800bfa0:	819a      	strh	r2, [r3, #12]
}
 800bfa2:	f107 070c 	add.w	r7, r7, #12
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bc80      	pop	{r7}
 800bfaa:	4770      	bx	lr

0800bfac <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800bfb8:	78fb      	ldrb	r3, [r7, #3]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d008      	beq.n	800bfd0 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	881b      	ldrh	r3, [r3, #0]
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	801a      	strh	r2, [r3, #0]
 800bfce:	e007      	b.n	800bfe0 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	881b      	ldrh	r3, [r3, #0]
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bfda:	b29a      	uxth	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	801a      	strh	r2, [r3, #0]
  }
}
 800bfe0:	f107 070c 	add.w	r7, r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bc80      	pop	{r7}
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop

0800bfec <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	881b      	ldrh	r3, [r3, #0]
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bffe:	b29a      	uxth	r2, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	801a      	strh	r2, [r3, #0]
}
 800c004:	f107 070c 	add.w	r7, r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	bc80      	pop	{r7}
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop

0800c010 <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 800c010:	b480      	push	{r7}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	460b      	mov	r3, r1
 800c01a:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 800c01c:	f04f 0300 	mov.w	r3, #0
 800c020:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 800c022:	78fb      	ldrb	r3, [r7, #3]
 800c024:	2b01      	cmp	r3, #1
 800c026:	d003      	beq.n	800c030 <SPI_GetCRC+0x20>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	8b1b      	ldrh	r3, [r3, #24]
 800c02c:	81fb      	strh	r3, [r7, #14]
 800c02e:	e002      	b.n	800c036 <SPI_GetCRC+0x26>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	8a9b      	ldrh	r3, [r3, #20]
 800c034:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 800c036:	89fb      	ldrh	r3, [r7, #14]
}
 800c038:	4618      	mov	r0, r3
 800c03a:	f107 0714 	add.w	r7, r7, #20
 800c03e:	46bd      	mov	sp, r7
 800c040:	bc80      	pop	{r7}
 800c042:	4770      	bx	lr

0800c044 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	8a1b      	ldrh	r3, [r3, #16]
 800c050:	b29b      	uxth	r3, r3
}
 800c052:	4618      	mov	r0, r3
 800c054:	f107 070c 	add.w	r7, r7, #12
 800c058:	46bd      	mov	sp, r7
 800c05a:	bc80      	pop	{r7}
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop

0800c060 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	4613      	mov	r3, r2
 800c06a:	460a      	mov	r2, r1
 800c06c:	807a      	strh	r2, [r7, #2]
 800c06e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 800c070:	787b      	ldrb	r3, [r7, #1]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d008      	beq.n	800c088 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	889b      	ldrh	r3, [r3, #4]
 800c07a:	b29a      	uxth	r2, r3
 800c07c:	887b      	ldrh	r3, [r7, #2]
 800c07e:	4313      	orrs	r3, r2
 800c080:	b29a      	uxth	r2, r3
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	809a      	strh	r2, [r3, #4]
 800c086:	e00a      	b.n	800c09e <SPI_I2S_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	889b      	ldrh	r3, [r3, #4]
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	887b      	ldrh	r3, [r7, #2]
 800c090:	ea6f 0303 	mvn.w	r3, r3
 800c094:	b29b      	uxth	r3, r3
 800c096:	4013      	ands	r3, r2
 800c098:	b29a      	uxth	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	809a      	strh	r2, [r3, #4]
  }
}
 800c09e:	f107 070c 	add.w	r7, r7, #12
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bc80      	pop	{r7}
 800c0a6:	4770      	bx	lr

0800c0a8 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	460a      	mov	r2, r1
 800c0b4:	70fa      	strb	r2, [r7, #3]
 800c0b6:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800c0b8:	f04f 0300 	mov.w	r3, #0
 800c0bc:	81fb      	strh	r3, [r7, #14]
 800c0be:	f04f 0300 	mov.w	r3, #0
 800c0c2:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 800c0c4:	78fb      	ldrb	r3, [r7, #3]
 800c0c6:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800c0ce:	89fb      	ldrh	r3, [r7, #14]
 800c0d0:	f04f 0201 	mov.w	r2, #1
 800c0d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0d8:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800c0da:	78bb      	ldrb	r3, [r7, #2]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d008      	beq.n	800c0f2 <SPI_I2S_ITConfig+0x4a>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	889b      	ldrh	r3, [r3, #4]
 800c0e4:	b29a      	uxth	r2, r3
 800c0e6:	89bb      	ldrh	r3, [r7, #12]
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	809a      	strh	r2, [r3, #4]
 800c0f0:	e00a      	b.n	800c108 <SPI_I2S_ITConfig+0x60>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	889b      	ldrh	r3, [r3, #4]
 800c0f6:	b29a      	uxth	r2, r3
 800c0f8:	89bb      	ldrh	r3, [r7, #12]
 800c0fa:	ea6f 0303 	mvn.w	r3, r3
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	4013      	ands	r3, r2
 800c102:	b29a      	uxth	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	809a      	strh	r2, [r3, #4]
  }
}
 800c108:	f107 0714 	add.w	r7, r7, #20
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bc80      	pop	{r7}
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop

0800c114 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	460b      	mov	r3, r1
 800c11e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800c120:	f04f 0300 	mov.w	r3, #0
 800c124:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	891b      	ldrh	r3, [r3, #8]
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	887b      	ldrh	r3, [r7, #2]
 800c12e:	4013      	ands	r3, r2
 800c130:	b29b      	uxth	r3, r3
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800c136:	f04f 0301 	mov.w	r3, #1
 800c13a:	73fb      	strb	r3, [r7, #15]
 800c13c:	e002      	b.n	800c144 <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800c13e:	f04f 0300 	mov.w	r3, #0
 800c142:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800c144:	7bfb      	ldrb	r3, [r7, #15]
}
 800c146:	4618      	mov	r0, r3
 800c148:	f107 0714 	add.w	r7, r7, #20
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bc80      	pop	{r7}
 800c150:	4770      	bx	lr
 800c152:	bf00      	nop

0800c154 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	460b      	mov	r3, r1
 800c15e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800c160:	887b      	ldrh	r3, [r7, #2]
 800c162:	ea6f 0303 	mvn.w	r3, r3
 800c166:	b29a      	uxth	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	811a      	strh	r2, [r3, #8]
}
 800c16c:	f107 070c 	add.w	r7, r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	bc80      	pop	{r7}
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop

0800c178 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800c178:	b480      	push	{r7}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	460b      	mov	r3, r1
 800c182:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 800c184:	f04f 0300 	mov.w	r3, #0
 800c188:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 800c18a:	f04f 0300 	mov.w	r3, #0
 800c18e:	81bb      	strh	r3, [r7, #12]
 800c190:	f04f 0300 	mov.w	r3, #0
 800c194:	817b      	strh	r3, [r7, #10]
 800c196:	f04f 0300 	mov.w	r3, #0
 800c19a:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800c19c:	78fb      	ldrb	r3, [r7, #3]
 800c19e:	f003 030f 	and.w	r3, r3, #15
 800c1a2:	f04f 0201 	mov.w	r2, #1
 800c1a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1aa:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 800c1ac:	78fb      	ldrb	r3, [r7, #3]
 800c1ae:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 800c1b6:	897b      	ldrh	r3, [r7, #10]
 800c1b8:	f04f 0201 	mov.w	r2, #1
 800c1bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c1c0:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	889b      	ldrh	r3, [r3, #4]
 800c1c6:	b29a      	uxth	r2, r3
 800c1c8:	897b      	ldrh	r3, [r7, #10]
 800c1ca:	4013      	ands	r3, r2
 800c1cc:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	891b      	ldrh	r3, [r3, #8]
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	89bb      	ldrh	r3, [r7, #12]
 800c1d6:	4013      	ands	r3, r2
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d006      	beq.n	800c1ec <SPI_I2S_GetITStatus+0x74>
 800c1de:	893b      	ldrh	r3, [r7, #8]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d003      	beq.n	800c1ec <SPI_I2S_GetITStatus+0x74>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 800c1e4:	f04f 0301 	mov.w	r3, #1
 800c1e8:	73fb      	strb	r3, [r7, #15]
 800c1ea:	e002      	b.n	800c1f2 <SPI_I2S_GetITStatus+0x7a>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 800c1ec:	f04f 0300 	mov.w	r3, #0
 800c1f0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 800c1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f107 0714 	add.w	r7, r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bc80      	pop	{r7}
 800c1fe:	4770      	bx	lr

0800c200 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800c200:	b480      	push	{r7}
 800c202:	b085      	sub	sp, #20
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	460b      	mov	r3, r1
 800c20a:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 800c20c:	f04f 0300 	mov.w	r3, #0
 800c210:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800c212:	78fb      	ldrb	r3, [r7, #3]
 800c214:	f003 030f 	and.w	r3, r3, #15
 800c218:	f04f 0201 	mov.w	r2, #1
 800c21c:	fa02 f303 	lsl.w	r3, r2, r3
 800c220:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800c222:	89fb      	ldrh	r3, [r7, #14]
 800c224:	ea6f 0303 	mvn.w	r3, r3
 800c228:	b29a      	uxth	r2, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	811a      	strh	r2, [r3, #8]
}
 800c22e:	f107 0714 	add.w	r7, r7, #20
 800c232:	46bd      	mov	sp, r7
 800c234:	bc80      	pop	{r7}
 800c236:	4770      	bx	lr

0800c238 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800c23c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c240:	f04f 0101 	mov.w	r1, #1
 800c244:	f7fd f822 	bl	800928c <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 800c248:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c24c:	f04f 0100 	mov.w	r1, #0
 800c250:	f7fd f81c 	bl	800928c <RCC_APB2PeriphResetCmd>
}
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop

0800c258 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	4603      	mov	r3, r0
 800c260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800c262:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c266:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c26a:	79fa      	ldrb	r2, [r7, #7]
 800c26c:	601a      	str	r2, [r3, #0]
}
 800c26e:	f107 070c 	add.w	r7, r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	bc80      	pop	{r7}
 800c276:	4770      	bx	lr

0800c278 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800c278:	b490      	push	{r4, r7}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	4602      	mov	r2, r0
 800c280:	460b      	mov	r3, r1
 800c282:	71fa      	strb	r2, [r7, #7]
 800c284:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800c286:	f04f 0300 	mov.w	r3, #0
 800c28a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800c28c:	79bb      	ldrb	r3, [r7, #6]
 800c28e:	f003 0303 	and.w	r3, r3, #3
 800c292:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800c296:	f04f 020f 	mov.w	r2, #15
 800c29a:	fa02 f303 	lsl.w	r3, r2, r3
 800c29e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800c2a0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c2a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c2a8:	79ba      	ldrb	r2, [r7, #6]
 800c2aa:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800c2ae:	b2d2      	uxtb	r2, r2
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c2b6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800c2ba:	79b9      	ldrb	r1, [r7, #6]
 800c2bc:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800c2c0:	b2c9      	uxtb	r1, r1
 800c2c2:	f101 0102 	add.w	r1, r1, #2
 800c2c6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	ea6f 0202 	mvn.w	r2, r2
 800c2d0:	4011      	ands	r1, r2
 800c2d2:	f100 0202 	add.w	r2, r0, #2
 800c2d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800c2da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c2de:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c2e2:	79ba      	ldrb	r2, [r7, #6]
 800c2e4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800c2e8:	b2d2      	uxtb	r2, r2
 800c2ea:	4610      	mov	r0, r2
 800c2ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c2f0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800c2f4:	79b9      	ldrb	r1, [r7, #6]
 800c2f6:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800c2fa:	b2c9      	uxtb	r1, r1
 800c2fc:	f101 0102 	add.w	r1, r1, #2
 800c300:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800c304:	79fc      	ldrb	r4, [r7, #7]
 800c306:	79ba      	ldrb	r2, [r7, #6]
 800c308:	f002 0203 	and.w	r2, r2, #3
 800c30c:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800c310:	fa04 f202 	lsl.w	r2, r4, r2
 800c314:	4311      	orrs	r1, r2
 800c316:	f100 0202 	add.w	r2, r0, #2
 800c31a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800c31e:	f107 0710 	add.w	r7, r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bc90      	pop	{r4, r7}
 800c326:	4770      	bx	lr

0800c328 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 800c330:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 800c334:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	601a      	str	r2, [r3, #0]
}
 800c33c:	f107 070c 	add.w	r7, r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	bc80      	pop	{r7}
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop

0800c348 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 800c352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c356:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800c35a:	79fa      	ldrb	r2, [r7, #7]
 800c35c:	601a      	str	r2, [r3, #0]
}
 800c35e:	f107 070c 	add.w	r7, r7, #12
 800c362:	46bd      	mov	sp, r7
 800c364:	bc80      	pop	{r7}
 800c366:	4770      	bx	lr

0800c368 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800c36e:	f04f 0300 	mov.w	r3, #0
 800c372:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 800c374:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c378:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c37c:	6a1b      	ldr	r3, [r3, #32]
 800c37e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c382:	2b00      	cmp	r3, #0
 800c384:	d003      	beq.n	800c38e <SYSCFG_GetCompensationCellStatus+0x26>
  {
    bitstatus = SET;
 800c386:	f04f 0301 	mov.w	r3, #1
 800c38a:	71fb      	strb	r3, [r7, #7]
 800c38c:	e002      	b.n	800c394 <SYSCFG_GetCompensationCellStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 800c38e:	f04f 0300 	mov.w	r3, #0
 800c392:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800c394:	79fb      	ldrb	r3, [r7, #7]
}
 800c396:	4618      	mov	r0, r3
 800c398:	f107 070c 	add.w	r7, r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bc80      	pop	{r7}
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop

0800c3a4 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	f04f 0300 	mov.w	r3, #0
 800c3b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d10c      	bne.n	800c3d4 <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800c3ba:	f04f 0001 	mov.w	r0, #1
 800c3be:	f04f 0101 	mov.w	r1, #1
 800c3c2:	f7fc ff63 	bl	800928c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800c3c6:	f04f 0001 	mov.w	r0, #1
 800c3ca:	f04f 0100 	mov.w	r1, #0
 800c3ce:	f7fc ff5d 	bl	800928c <RCC_APB2PeriphResetCmd>
 800c3d2:	e0ff      	b.n	800c5d4 <TIM_DeInit+0x230>
  } 
  else if (TIMx == TIM2) 
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3da:	d10c      	bne.n	800c3f6 <TIM_DeInit+0x52>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800c3dc:	f04f 0001 	mov.w	r0, #1
 800c3e0:	f04f 0101 	mov.w	r1, #1
 800c3e4:	f7fc ff28 	bl	8009238 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800c3e8:	f04f 0001 	mov.w	r0, #1
 800c3ec:	f04f 0100 	mov.w	r1, #0
 800c3f0:	f7fc ff22 	bl	8009238 <RCC_APB1PeriphResetCmd>
 800c3f4:	e0ee      	b.n	800c5d4 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM3)
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c400:	429a      	cmp	r2, r3
 800c402:	d10c      	bne.n	800c41e <TIM_DeInit+0x7a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800c404:	f04f 0002 	mov.w	r0, #2
 800c408:	f04f 0101 	mov.w	r1, #1
 800c40c:	f7fc ff14 	bl	8009238 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800c410:	f04f 0002 	mov.w	r0, #2
 800c414:	f04f 0100 	mov.w	r1, #0
 800c418:	f7fc ff0e 	bl	8009238 <RCC_APB1PeriphResetCmd>
 800c41c:	e0da      	b.n	800c5d4 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM4)
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c424:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c428:	429a      	cmp	r2, r3
 800c42a:	d10c      	bne.n	800c446 <TIM_DeInit+0xa2>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800c42c:	f04f 0004 	mov.w	r0, #4
 800c430:	f04f 0101 	mov.w	r1, #1
 800c434:	f7fc ff00 	bl	8009238 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800c438:	f04f 0004 	mov.w	r0, #4
 800c43c:	f04f 0100 	mov.w	r1, #0
 800c440:	f7fc fefa 	bl	8009238 <RCC_APB1PeriphResetCmd>
 800c444:	e0c6      	b.n	800c5d4 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM5)
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c44c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c450:	429a      	cmp	r2, r3
 800c452:	d10c      	bne.n	800c46e <TIM_DeInit+0xca>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 800c454:	f04f 0008 	mov.w	r0, #8
 800c458:	f04f 0101 	mov.w	r1, #1
 800c45c:	f7fc feec 	bl	8009238 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800c460:	f04f 0008 	mov.w	r0, #8
 800c464:	f04f 0100 	mov.w	r1, #0
 800c468:	f7fc fee6 	bl	8009238 <RCC_APB1PeriphResetCmd>
 800c46c:	e0b2      	b.n	800c5d4 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM6)  
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c474:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c478:	429a      	cmp	r2, r3
 800c47a:	d10c      	bne.n	800c496 <TIM_DeInit+0xf2>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800c47c:	f04f 0010 	mov.w	r0, #16
 800c480:	f04f 0101 	mov.w	r1, #1
 800c484:	f7fc fed8 	bl	8009238 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800c488:	f04f 0010 	mov.w	r0, #16
 800c48c:	f04f 0100 	mov.w	r1, #0
 800c490:	f7fc fed2 	bl	8009238 <RCC_APB1PeriphResetCmd>
 800c494:	e09e      	b.n	800c5d4 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM7)
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c49c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d10c      	bne.n	800c4be <TIM_DeInit+0x11a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800c4a4:	f04f 0020 	mov.w	r0, #32
 800c4a8:	f04f 0101 	mov.w	r1, #1
 800c4ac:	f7fc fec4 	bl	8009238 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800c4b0:	f04f 0020 	mov.w	r0, #32
 800c4b4:	f04f 0100 	mov.w	r1, #0
 800c4b8:	f7fc febe 	bl	8009238 <RCC_APB1PeriphResetCmd>
 800c4bc:	e08a      	b.n	800c5d4 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM8)
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d10c      	bne.n	800c4e6 <TIM_DeInit+0x142>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800c4cc:	f04f 0002 	mov.w	r0, #2
 800c4d0:	f04f 0101 	mov.w	r1, #1
 800c4d4:	f7fc feda 	bl	800928c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800c4d8:	f04f 0002 	mov.w	r0, #2
 800c4dc:	f04f 0100 	mov.w	r1, #0
 800c4e0:	f7fc fed4 	bl	800928c <RCC_APB2PeriphResetCmd>
 800c4e4:	e076      	b.n	800c5d4 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM9)
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c4ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d10c      	bne.n	800c50e <TIM_DeInit+0x16a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800c4f4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c4f8:	f04f 0101 	mov.w	r1, #1
 800c4fc:	f7fc fec6 	bl	800928c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800c500:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c504:	f04f 0100 	mov.w	r1, #0
 800c508:	f7fc fec0 	bl	800928c <RCC_APB2PeriphResetCmd>
 800c50c:	e062      	b.n	800c5d4 <TIM_DeInit+0x230>
   }  
  else if (TIMx == TIM10)
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800c514:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c518:	429a      	cmp	r2, r3
 800c51a:	d10c      	bne.n	800c536 <TIM_DeInit+0x192>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800c51c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c520:	f04f 0101 	mov.w	r1, #1
 800c524:	f7fc feb2 	bl	800928c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800c528:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c52c:	f04f 0100 	mov.w	r1, #0
 800c530:	f7fc feac 	bl	800928c <RCC_APB2PeriphResetCmd>
 800c534:	e04e      	b.n	800c5d4 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM11) 
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800c53c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c540:	429a      	cmp	r2, r3
 800c542:	d10c      	bne.n	800c55e <TIM_DeInit+0x1ba>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800c544:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c548:	f04f 0101 	mov.w	r1, #1
 800c54c:	f7fc fe9e 	bl	800928c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800c550:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c554:	f04f 0100 	mov.w	r1, #0
 800c558:	f7fc fe98 	bl	800928c <RCC_APB2PeriphResetCmd>
 800c55c:	e03a      	b.n	800c5d4 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM12)
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c564:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c568:	429a      	cmp	r2, r3
 800c56a:	d10c      	bne.n	800c586 <TIM_DeInit+0x1e2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800c56c:	f04f 0040 	mov.w	r0, #64	; 0x40
 800c570:	f04f 0101 	mov.w	r1, #1
 800c574:	f7fc fe60 	bl	8009238 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800c578:	f04f 0040 	mov.w	r0, #64	; 0x40
 800c57c:	f04f 0100 	mov.w	r1, #0
 800c580:	f7fc fe5a 	bl	8009238 <RCC_APB1PeriphResetCmd>
 800c584:	e026      	b.n	800c5d4 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM13) 
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c58c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c590:	429a      	cmp	r2, r3
 800c592:	d10c      	bne.n	800c5ae <TIM_DeInit+0x20a>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 800c594:	f04f 0080 	mov.w	r0, #128	; 0x80
 800c598:	f04f 0101 	mov.w	r1, #1
 800c59c:	f7fc fe4c 	bl	8009238 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800c5a0:	f04f 0080 	mov.w	r0, #128	; 0x80
 800c5a4:	f04f 0100 	mov.w	r1, #0
 800c5a8:	f7fc fe46 	bl	8009238 <RCC_APB1PeriphResetCmd>
 800c5ac:	e012      	b.n	800c5d4 <TIM_DeInit+0x230>
  }  
  else
  { 
    if (TIMx == TIM14) 
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c5b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d10b      	bne.n	800c5d4 <TIM_DeInit+0x230>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800c5bc:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c5c0:	f04f 0101 	mov.w	r1, #1
 800c5c4:	f7fc fe38 	bl	8009238 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800c5c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c5cc:	f04f 0100 	mov.w	r1, #0
 800c5d0:	f7fc fe32 	bl	8009238 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 800c5d4:	f107 0708 	add.w	r7, r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b085      	sub	sp, #20
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800c5e6:	f04f 0300 	mov.w	r3, #0
 800c5ea:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	881b      	ldrh	r3, [r3, #0]
 800c5f0:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	f04f 0300 	mov.w	r3, #0
 800c5f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d01f      	beq.n	800c640 <TIM_TimeBaseInit+0x64>
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c606:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d018      	beq.n	800c640 <TIM_TimeBaseInit+0x64>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c614:	d014      	beq.n	800c640 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c61c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c620:	429a      	cmp	r2, r3
 800c622:	d00d      	beq.n	800c640 <TIM_TimeBaseInit+0x64>
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c62a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c62e:	429a      	cmp	r2, r3
 800c630:	d006      	beq.n	800c640 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c638:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d108      	bne.n	800c652 <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800c640:	89fb      	ldrh	r3, [r7, #14]
 800c642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c646:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	885a      	ldrh	r2, [r3, #2]
 800c64c:	89fb      	ldrh	r3, [r7, #14]
 800c64e:	4313      	orrs	r3, r2
 800c650:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c658:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d00f      	beq.n	800c680 <TIM_TimeBaseInit+0xa4>
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c666:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d008      	beq.n	800c680 <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800c66e:	89fb      	ldrh	r3, [r7, #14]
 800c670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c674:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	891a      	ldrh	r2, [r3, #8]
 800c67a:	89fb      	ldrh	r3, [r7, #14]
 800c67c:	4313      	orrs	r3, r2
 800c67e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	89fa      	ldrh	r2, [r7, #14]
 800c684:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	685a      	ldr	r2, [r3, #4]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	881a      	ldrh	r2, [r3, #0]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	f04f 0300 	mov.w	r3, #0
 800c69c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d006      	beq.n	800c6b2 <TIM_TimeBaseInit+0xd6>
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d104      	bne.n	800c6bc <TIM_TimeBaseInit+0xe0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	7a9b      	ldrb	r3, [r3, #10]
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f04f 0201 	mov.w	r2, #1
 800c6c2:	829a      	strh	r2, [r3, #20]
}
 800c6c4:	f107 0714 	add.w	r7, r7, #20
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bc80      	pop	{r7}
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop

0800c6d0 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b083      	sub	sp, #12
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6de:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f04f 0200 	mov.w	r2, #0
 800c6e6:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f04f 0200 	mov.w	r2, #0
 800c6ee:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f04f 0200 	mov.w	r2, #0
 800c6f6:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f04f 0200 	mov.w	r2, #0
 800c6fe:	729a      	strb	r2, [r3, #10]
}
 800c700:	f107 070c 	add.w	r7, r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	bc80      	pop	{r7}
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop

0800c70c <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	4613      	mov	r3, r2
 800c716:	460a      	mov	r2, r1
 800c718:	807a      	strh	r2, [r7, #2]
 800c71a:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	887a      	ldrh	r2, [r7, #2]
 800c720:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	883a      	ldrh	r2, [r7, #0]
 800c726:	829a      	strh	r2, [r3, #20]
}
 800c728:	f107 070c 	add.w	r7, r7, #12
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bc80      	pop	{r7}
 800c730:	4770      	bx	lr
 800c732:	bf00      	nop

0800c734 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	460b      	mov	r3, r1
 800c73e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 800c740:	f04f 0300 	mov.w	r3, #0
 800c744:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	881b      	ldrh	r3, [r3, #0]
 800c74a:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c74c:	89fb      	ldrh	r3, [r7, #14]
 800c74e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c752:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800c754:	89fa      	ldrh	r2, [r7, #14]
 800c756:	887b      	ldrh	r3, [r7, #2]
 800c758:	4313      	orrs	r3, r2
 800c75a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	89fa      	ldrh	r2, [r7, #14]
 800c760:	801a      	strh	r2, [r3, #0]
}
 800c762:	f107 0714 	add.w	r7, r7, #20
 800c766:	46bd      	mov	sp, r7
 800c768:	bc80      	pop	{r7}
 800c76a:	4770      	bx	lr

0800c76c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	683a      	ldr	r2, [r7, #0]
 800c77a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c77c:	f107 070c 	add.w	r7, r7, #12
 800c780:	46bd      	mov	sp, r7
 800c782:	bc80      	pop	{r7}
 800c784:	4770      	bx	lr
 800c786:	bf00      	nop

0800c788 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	683a      	ldr	r2, [r7, #0]
 800c796:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c798:	f107 070c 	add.w	r7, r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bc80      	pop	{r7}
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop

0800c7a4 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f107 070c 	add.w	r7, r7, #12
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bc80      	pop	{r7}
 800c7ba:	4770      	bx	lr

0800c7bc <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7c8:	b29b      	uxth	r3, r3
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f107 070c 	add.w	r7, r7, #12
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bc80      	pop	{r7}
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop

0800c7d8 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b083      	sub	sp, #12
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c7e4:	78fb      	ldrb	r3, [r7, #3]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d008      	beq.n	800c7fc <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	881b      	ldrh	r3, [r3, #0]
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	f043 0302 	orr.w	r3, r3, #2
 800c7f4:	b29a      	uxth	r2, r3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	801a      	strh	r2, [r3, #0]
 800c7fa:	e007      	b.n	800c80c <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	881b      	ldrh	r3, [r3, #0]
 800c800:	b29b      	uxth	r3, r3
 800c802:	f023 0302 	bic.w	r3, r3, #2
 800c806:	b29a      	uxth	r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	801a      	strh	r2, [r3, #0]
  }
}
 800c80c:	f107 070c 	add.w	r7, r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	bc80      	pop	{r7}
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop

0800c818 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	460b      	mov	r3, r1
 800c822:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 800c824:	887b      	ldrh	r3, [r7, #2]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d008      	beq.n	800c83c <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	881b      	ldrh	r3, [r3, #0]
 800c82e:	b29b      	uxth	r3, r3
 800c830:	f043 0304 	orr.w	r3, r3, #4
 800c834:	b29a      	uxth	r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	801a      	strh	r2, [r3, #0]
 800c83a:	e007      	b.n	800c84c <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	881b      	ldrh	r3, [r3, #0]
 800c840:	b29b      	uxth	r3, r3
 800c842:	f023 0304 	bic.w	r3, r3, #4
 800c846:	b29a      	uxth	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	801a      	strh	r2, [r3, #0]
  }
}
 800c84c:	f107 070c 	add.w	r7, r7, #12
 800c850:	46bd      	mov	sp, r7
 800c852:	bc80      	pop	{r7}
 800c854:	4770      	bx	lr
 800c856:	bf00      	nop

0800c858 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	460b      	mov	r3, r1
 800c862:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c864:	78fb      	ldrb	r3, [r7, #3]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d008      	beq.n	800c87c <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	881b      	ldrh	r3, [r3, #0]
 800c86e:	b29b      	uxth	r3, r3
 800c870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c874:	b29a      	uxth	r2, r3
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	801a      	strh	r2, [r3, #0]
 800c87a:	e007      	b.n	800c88c <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	881b      	ldrh	r3, [r3, #0]
 800c880:	b29b      	uxth	r3, r3
 800c882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c886:	b29a      	uxth	r2, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	801a      	strh	r2, [r3, #0]
  }
}
 800c88c:	f107 070c 	add.w	r7, r7, #12
 800c890:	46bd      	mov	sp, r7
 800c892:	bc80      	pop	{r7}
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop

0800c898 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	881b      	ldrh	r3, [r3, #0]
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	f023 0308 	bic.w	r3, r3, #8
 800c8ae:	b29a      	uxth	r2, r3
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	881b      	ldrh	r3, [r3, #0]
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	887b      	ldrh	r3, [r7, #2]
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	b29a      	uxth	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	801a      	strh	r2, [r3, #0]
}
 800c8c4:	f107 070c 	add.w	r7, r7, #12
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bc80      	pop	{r7}
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop

0800c8d0 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	460b      	mov	r3, r1
 800c8da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	881b      	ldrh	r3, [r3, #0]
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8e6:	b29a      	uxth	r2, r3
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	b29a      	uxth	r2, r3
 800c8f2:	887b      	ldrh	r3, [r7, #2]
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	b29a      	uxth	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	801a      	strh	r2, [r3, #0]
}
 800c8fc:	f107 070c 	add.w	r7, r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	bc80      	pop	{r7}
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop

0800c908 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800c908:	b480      	push	{r7}
 800c90a:	b083      	sub	sp, #12
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	460b      	mov	r3, r1
 800c912:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c914:	78fb      	ldrb	r3, [r7, #3]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d008      	beq.n	800c92c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	881b      	ldrh	r3, [r3, #0]
 800c91e:	b29b      	uxth	r3, r3
 800c920:	f043 0301 	orr.w	r3, r3, #1
 800c924:	b29a      	uxth	r2, r3
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	801a      	strh	r2, [r3, #0]
 800c92a:	e007      	b.n	800c93c <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	881b      	ldrh	r3, [r3, #0]
 800c930:	b29b      	uxth	r3, r3
 800c932:	f023 0301 	bic.w	r3, r3, #1
 800c936:	b29a      	uxth	r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	801a      	strh	r2, [r3, #0]
  }
}
 800c93c:	f107 070c 	add.w	r7, r7, #12
 800c940:	46bd      	mov	sp, r7
 800c942:	bc80      	pop	{r7}
 800c944:	4770      	bx	lr
 800c946:	bf00      	nop

0800c948 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800c952:	f04f 0300 	mov.w	r3, #0
 800c956:	817b      	strh	r3, [r7, #10]
 800c958:	f04f 0300 	mov.w	r3, #0
 800c95c:	81fb      	strh	r3, [r7, #14]
 800c95e:	f04f 0300 	mov.w	r3, #0
 800c962:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	8c1b      	ldrh	r3, [r3, #32]
 800c968:	b29b      	uxth	r3, r3
 800c96a:	f023 0301 	bic.w	r3, r3, #1
 800c96e:	b29a      	uxth	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	8c1b      	ldrh	r3, [r3, #32]
 800c978:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	889b      	ldrh	r3, [r3, #4]
 800c97e:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	8b1b      	ldrh	r3, [r3, #24]
 800c984:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 800c986:	897b      	ldrh	r3, [r7, #10]
 800c988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c98c:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800c98e:	897b      	ldrh	r3, [r7, #10]
 800c990:	f023 0303 	bic.w	r3, r3, #3
 800c994:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	881a      	ldrh	r2, [r3, #0]
 800c99a:	897b      	ldrh	r3, [r7, #10]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800c9a0:	89fb      	ldrh	r3, [r7, #14]
 800c9a2:	f023 0302 	bic.w	r3, r3, #2
 800c9a6:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	899a      	ldrh	r2, [r3, #12]
 800c9ac:	89fb      	ldrh	r3, [r7, #14]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	885a      	ldrh	r2, [r3, #2]
 800c9b6:	89fb      	ldrh	r3, [r7, #14]
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	f04f 0300 	mov.w	r3, #0
 800c9c2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d006      	beq.n	800c9d8 <TIM_OC1Init+0x90>
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9d0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d123      	bne.n	800ca20 <TIM_OC1Init+0xd8>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800c9d8:	89fb      	ldrh	r3, [r7, #14]
 800c9da:	f023 0308 	bic.w	r3, r3, #8
 800c9de:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	89da      	ldrh	r2, [r3, #14]
 800c9e4:	89fb      	ldrh	r3, [r7, #14]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800c9ea:	89fb      	ldrh	r3, [r7, #14]
 800c9ec:	f023 0304 	bic.w	r3, r3, #4
 800c9f0:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	889a      	ldrh	r2, [r3, #4]
 800c9f6:	89fb      	ldrh	r3, [r7, #14]
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800c9fc:	89bb      	ldrh	r3, [r7, #12]
 800c9fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca02:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800ca04:	89bb      	ldrh	r3, [r7, #12]
 800ca06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ca0a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	8a1a      	ldrh	r2, [r3, #16]
 800ca10:	89bb      	ldrh	r3, [r7, #12]
 800ca12:	4313      	orrs	r3, r2
 800ca14:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	8a5a      	ldrh	r2, [r3, #18]
 800ca1a:	89bb      	ldrh	r3, [r7, #12]
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	89ba      	ldrh	r2, [r7, #12]
 800ca24:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	897a      	ldrh	r2, [r7, #10]
 800ca2a:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	689a      	ldr	r2, [r3, #8]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	89fa      	ldrh	r2, [r7, #14]
 800ca38:	841a      	strh	r2, [r3, #32]
}
 800ca3a:	f107 0714 	add.w	r7, r7, #20
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bc80      	pop	{r7}
 800ca42:	4770      	bx	lr

0800ca44 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b085      	sub	sp, #20
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800ca4e:	f04f 0300 	mov.w	r3, #0
 800ca52:	817b      	strh	r3, [r7, #10]
 800ca54:	f04f 0300 	mov.w	r3, #0
 800ca58:	81fb      	strh	r3, [r7, #14]
 800ca5a:	f04f 0300 	mov.w	r3, #0
 800ca5e:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	8c1b      	ldrh	r3, [r3, #32]
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	f023 0310 	bic.w	r3, r3, #16
 800ca6a:	b29a      	uxth	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	8c1b      	ldrh	r3, [r3, #32]
 800ca74:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	889b      	ldrh	r3, [r3, #4]
 800ca7a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	8b1b      	ldrh	r3, [r3, #24]
 800ca80:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 800ca82:	897b      	ldrh	r3, [r7, #10]
 800ca84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca88:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800ca8a:	897b      	ldrh	r3, [r7, #10]
 800ca8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca90:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	881b      	ldrh	r3, [r3, #0]
 800ca96:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800ca9a:	b29a      	uxth	r2, r3
 800ca9c:	897b      	ldrh	r3, [r7, #10]
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800caa2:	89fb      	ldrh	r3, [r7, #14]
 800caa4:	f023 0320 	bic.w	r3, r3, #32
 800caa8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	899b      	ldrh	r3, [r3, #12]
 800caae:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800cab2:	b29a      	uxth	r2, r3
 800cab4:	89fb      	ldrh	r3, [r7, #14]
 800cab6:	4313      	orrs	r3, r2
 800cab8:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	885b      	ldrh	r3, [r3, #2]
 800cabe:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800cac2:	b29a      	uxth	r2, r3
 800cac4:	89fb      	ldrh	r3, [r7, #14]
 800cac6:	4313      	orrs	r3, r2
 800cac8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	f04f 0300 	mov.w	r3, #0
 800cad0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d006      	beq.n	800cae6 <TIM_OC2Init+0xa2>
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cade:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d12f      	bne.n	800cb46 <TIM_OC2Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800cae6:	89fb      	ldrh	r3, [r7, #14]
 800cae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800caec:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	89db      	ldrh	r3, [r3, #14]
 800caf2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800caf6:	b29a      	uxth	r2, r3
 800caf8:	89fb      	ldrh	r3, [r7, #14]
 800cafa:	4313      	orrs	r3, r2
 800cafc:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800cafe:	89fb      	ldrh	r3, [r7, #14]
 800cb00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb04:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	889b      	ldrh	r3, [r3, #4]
 800cb0a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	89fb      	ldrh	r3, [r7, #14]
 800cb12:	4313      	orrs	r3, r2
 800cb14:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800cb16:	89bb      	ldrh	r3, [r7, #12]
 800cb18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cb1c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800cb1e:	89bb      	ldrh	r3, [r7, #12]
 800cb20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cb24:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	8a1b      	ldrh	r3, [r3, #16]
 800cb2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800cb2e:	b29a      	uxth	r2, r3
 800cb30:	89bb      	ldrh	r3, [r7, #12]
 800cb32:	4313      	orrs	r3, r2
 800cb34:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	8a5b      	ldrh	r3, [r3, #18]
 800cb3a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800cb3e:	b29a      	uxth	r2, r3
 800cb40:	89bb      	ldrh	r3, [r7, #12]
 800cb42:	4313      	orrs	r3, r2
 800cb44:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	89ba      	ldrh	r2, [r7, #12]
 800cb4a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	897a      	ldrh	r2, [r7, #10]
 800cb50:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	689a      	ldr	r2, [r3, #8]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	89fa      	ldrh	r2, [r7, #14]
 800cb5e:	841a      	strh	r2, [r3, #32]
}
 800cb60:	f107 0714 	add.w	r7, r7, #20
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bc80      	pop	{r7}
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop

0800cb6c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b085      	sub	sp, #20
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800cb76:	f04f 0300 	mov.w	r3, #0
 800cb7a:	817b      	strh	r3, [r7, #10]
 800cb7c:	f04f 0300 	mov.w	r3, #0
 800cb80:	81fb      	strh	r3, [r7, #14]
 800cb82:	f04f 0300 	mov.w	r3, #0
 800cb86:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	8c1b      	ldrh	r3, [r3, #32]
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb92:	b29a      	uxth	r2, r3
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	8c1b      	ldrh	r3, [r3, #32]
 800cb9c:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	889b      	ldrh	r3, [r3, #4]
 800cba2:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	8b9b      	ldrh	r3, [r3, #28]
 800cba8:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 800cbaa:	897b      	ldrh	r3, [r7, #10]
 800cbac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbb0:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800cbb2:	897b      	ldrh	r3, [r7, #10]
 800cbb4:	f023 0303 	bic.w	r3, r3, #3
 800cbb8:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	881a      	ldrh	r2, [r3, #0]
 800cbbe:	897b      	ldrh	r3, [r7, #10]
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800cbc4:	89fb      	ldrh	r3, [r7, #14]
 800cbc6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cbca:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	899b      	ldrh	r3, [r3, #12]
 800cbd0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800cbd4:	b29a      	uxth	r2, r3
 800cbd6:	89fb      	ldrh	r3, [r7, #14]
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	885b      	ldrh	r3, [r3, #2]
 800cbe0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800cbe4:	b29a      	uxth	r2, r3
 800cbe6:	89fb      	ldrh	r3, [r7, #14]
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	f04f 0300 	mov.w	r3, #0
 800cbf2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d006      	beq.n	800cc08 <TIM_OC3Init+0x9c>
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc00:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d12f      	bne.n	800cc68 <TIM_OC3Init+0xfc>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800cc08:	89fb      	ldrh	r3, [r7, #14]
 800cc0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc0e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	89db      	ldrh	r3, [r3, #14]
 800cc14:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	89fb      	ldrh	r3, [r7, #14]
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800cc20:	89fb      	ldrh	r3, [r7, #14]
 800cc22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cc26:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	889b      	ldrh	r3, [r3, #4]
 800cc2c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	89fb      	ldrh	r3, [r7, #14]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800cc38:	89bb      	ldrh	r3, [r7, #12]
 800cc3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc3e:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800cc40:	89bb      	ldrh	r3, [r7, #12]
 800cc42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cc46:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	8a1b      	ldrh	r3, [r3, #16]
 800cc4c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	89bb      	ldrh	r3, [r7, #12]
 800cc54:	4313      	orrs	r3, r2
 800cc56:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	8a5b      	ldrh	r3, [r3, #18]
 800cc5c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800cc60:	b29a      	uxth	r2, r3
 800cc62:	89bb      	ldrh	r3, [r7, #12]
 800cc64:	4313      	orrs	r3, r2
 800cc66:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	89ba      	ldrh	r2, [r7, #12]
 800cc6c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	897a      	ldrh	r2, [r7, #10]
 800cc72:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	689a      	ldr	r2, [r3, #8]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	89fa      	ldrh	r2, [r7, #14]
 800cc80:	841a      	strh	r2, [r3, #32]
}
 800cc82:	f107 0714 	add.w	r7, r7, #20
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bc80      	pop	{r7}
 800cc8a:	4770      	bx	lr

0800cc8c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b085      	sub	sp, #20
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800cc96:	f04f 0300 	mov.w	r3, #0
 800cc9a:	81bb      	strh	r3, [r7, #12]
 800cc9c:	f04f 0300 	mov.w	r3, #0
 800cca0:	817b      	strh	r3, [r7, #10]
 800cca2:	f04f 0300 	mov.w	r3, #0
 800cca6:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	8c1b      	ldrh	r3, [r3, #32]
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	8c1b      	ldrh	r3, [r3, #32]
 800ccbc:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	889b      	ldrh	r3, [r3, #4]
 800ccc2:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	8b9b      	ldrh	r3, [r3, #28]
 800ccc8:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 800ccca:	89bb      	ldrh	r3, [r7, #12]
 800cccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccd0:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800ccd2:	89bb      	ldrh	r3, [r7, #12]
 800ccd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccd8:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	881b      	ldrh	r3, [r3, #0]
 800ccde:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	89bb      	ldrh	r3, [r7, #12]
 800cce6:	4313      	orrs	r3, r2
 800cce8:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800ccea:	897b      	ldrh	r3, [r7, #10]
 800ccec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ccf0:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	899b      	ldrh	r3, [r3, #12]
 800ccf6:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800ccfa:	b29a      	uxth	r2, r3
 800ccfc:	897b      	ldrh	r3, [r7, #10]
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	885b      	ldrh	r3, [r3, #2]
 800cd06:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	897b      	ldrh	r3, [r7, #10]
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	f04f 0300 	mov.w	r3, #0
 800cd18:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d006      	beq.n	800cd2e <TIM_OC4Init+0xa2>
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd26:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d10b      	bne.n	800cd46 <TIM_OC4Init+0xba>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800cd2e:	89fb      	ldrh	r3, [r7, #14]
 800cd30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd34:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	8a1b      	ldrh	r3, [r3, #16]
 800cd3a:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800cd3e:	b29a      	uxth	r2, r3
 800cd40:	89fb      	ldrh	r3, [r7, #14]
 800cd42:	4313      	orrs	r3, r2
 800cd44:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	89fa      	ldrh	r2, [r7, #14]
 800cd4a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	89ba      	ldrh	r2, [r7, #12]
 800cd50:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	689a      	ldr	r2, [r3, #8]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	897a      	ldrh	r2, [r7, #10]
 800cd5e:	841a      	strh	r2, [r3, #32]
}
 800cd60:	f107 0714 	add.w	r7, r7, #20
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bc80      	pop	{r7}
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop

0800cd6c <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f04f 0200 	mov.w	r2, #0
 800cd7a:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f04f 0200 	mov.w	r2, #0
 800cd82:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f04f 0200 	mov.w	r2, #0
 800cd8a:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f04f 0200 	mov.w	r2, #0
 800cd92:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f04f 0200 	mov.w	r2, #0
 800cd9a:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f04f 0200 	mov.w	r2, #0
 800cda2:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f04f 0200 	mov.w	r2, #0
 800cdaa:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f04f 0200 	mov.w	r2, #0
 800cdb2:	825a      	strh	r2, [r3, #18]
}
 800cdb4:	f107 070c 	add.w	r7, r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bc80      	pop	{r7}
 800cdbc:	4770      	bx	lr
 800cdbe:	bf00      	nop

0800cdc0 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	4613      	mov	r3, r2
 800cdca:	460a      	mov	r2, r1
 800cdcc:	807a      	strh	r2, [r7, #2]
 800cdce:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 800cdd0:	f04f 0300 	mov.w	r3, #0
 800cdd4:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 800cdd6:	f04f 0300 	mov.w	r3, #0
 800cdda:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f103 0318 	add.w	r3, r3, #24
 800cde6:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800cde8:	887b      	ldrh	r3, [r7, #2]
 800cdea:	f04f 0201 	mov.w	r2, #1
 800cdee:	fa02 f303 	lsl.w	r3, r2, r3
 800cdf2:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	8c1b      	ldrh	r3, [r3, #32]
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	897b      	ldrh	r3, [r7, #10]
 800cdfc:	ea6f 0303 	mvn.w	r3, r3
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	4013      	ands	r3, r2
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800ce0a:	887b      	ldrh	r3, [r7, #2]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d002      	beq.n	800ce16 <TIM_SelectOCxM+0x56>
 800ce10:	887b      	ldrh	r3, [r7, #2]
 800ce12:	2b08      	cmp	r3, #8
 800ce14:	d114      	bne.n	800ce40 <TIM_SelectOCxM+0x80>
  {
    tmp += (TIM_Channel>>1);
 800ce16:	887b      	ldrh	r3, [r7, #2]
 800ce18:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	68fa      	ldr	r2, [r7, #12]
 800ce20:	18d3      	adds	r3, r2, r3
 800ce22:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 800ce24:	68fa      	ldr	r2, [r7, #12]
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	6819      	ldr	r1, [r3, #0]
 800ce2a:	f64f 738f 	movw	r3, #65423	; 0xff8f
 800ce2e:	400b      	ands	r3, r1
 800ce30:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	6811      	ldr	r1, [r2, #0]
 800ce38:	883a      	ldrh	r2, [r7, #0]
 800ce3a:	430a      	orrs	r2, r1
 800ce3c:	601a      	str	r2, [r3, #0]
 800ce3e:	e019      	b.n	800ce74 <TIM_SelectOCxM+0xb4>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800ce40:	887b      	ldrh	r3, [r7, #2]
 800ce42:	f1a3 0304 	sub.w	r3, r3, #4
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	68fa      	ldr	r2, [r7, #12]
 800ce50:	18d3      	adds	r3, r2, r3
 800ce52:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	6819      	ldr	r1, [r3, #0]
 800ce5a:	f648 73ff 	movw	r3, #36863	; 0x8fff
 800ce5e:	400b      	ands	r3, r1
 800ce60:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	68fa      	ldr	r2, [r7, #12]
 800ce66:	6811      	ldr	r1, [r2, #0]
 800ce68:	883a      	ldrh	r2, [r7, #0]
 800ce6a:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800ce6e:	b292      	uxth	r2, r2
 800ce70:	430a      	orrs	r2, r1
 800ce72:	601a      	str	r2, [r3, #0]
  }
}
 800ce74:	f107 0714 	add.w	r7, r7, #20
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bc80      	pop	{r7}
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop

0800ce80 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b083      	sub	sp, #12
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	683a      	ldr	r2, [r7, #0]
 800ce8e:	635a      	str	r2, [r3, #52]	; 0x34
}
 800ce90:	f107 070c 	add.w	r7, r7, #12
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bc80      	pop	{r7}
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop

0800ce9c <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	683a      	ldr	r2, [r7, #0]
 800ceaa:	639a      	str	r2, [r3, #56]	; 0x38
}
 800ceac:	f107 070c 	add.w	r7, r7, #12
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bc80      	pop	{r7}
 800ceb4:	4770      	bx	lr
 800ceb6:	bf00      	nop

0800ceb8 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b083      	sub	sp, #12
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	683a      	ldr	r2, [r7, #0]
 800cec6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800cec8:	f107 070c 	add.w	r7, r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	bc80      	pop	{r7}
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop

0800ced4 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	683a      	ldr	r2, [r7, #0]
 800cee2:	641a      	str	r2, [r3, #64]	; 0x40
}
 800cee4:	f107 070c 	add.w	r7, r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bc80      	pop	{r7}
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop

0800cef0 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	460b      	mov	r3, r1
 800cefa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800cefc:	f04f 0300 	mov.w	r3, #0
 800cf00:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	8b1b      	ldrh	r3, [r3, #24]
 800cf06:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 800cf08:	89fb      	ldrh	r3, [r7, #14]
 800cf0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf0e:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 800cf10:	89fa      	ldrh	r2, [r7, #14]
 800cf12:	887b      	ldrh	r3, [r7, #2]
 800cf14:	4313      	orrs	r3, r2
 800cf16:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	89fa      	ldrh	r2, [r7, #14]
 800cf1c:	831a      	strh	r2, [r3, #24]
}
 800cf1e:	f107 0714 	add.w	r7, r7, #20
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bc80      	pop	{r7}
 800cf26:	4770      	bx	lr

0800cf28 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	460b      	mov	r3, r1
 800cf32:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800cf34:	f04f 0300 	mov.w	r3, #0
 800cf38:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	8b1b      	ldrh	r3, [r3, #24]
 800cf3e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 800cf40:	89fb      	ldrh	r3, [r7, #14]
 800cf42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf46:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 800cf48:	887b      	ldrh	r3, [r7, #2]
 800cf4a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800cf4e:	b29a      	uxth	r2, r3
 800cf50:	89fb      	ldrh	r3, [r7, #14]
 800cf52:	4313      	orrs	r3, r2
 800cf54:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	89fa      	ldrh	r2, [r7, #14]
 800cf5a:	831a      	strh	r2, [r3, #24]
}
 800cf5c:	f107 0714 	add.w	r7, r7, #20
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bc80      	pop	{r7}
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop

0800cf68 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b085      	sub	sp, #20
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	460b      	mov	r3, r1
 800cf72:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800cf74:	f04f 0300 	mov.w	r3, #0
 800cf78:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	8b9b      	ldrh	r3, [r3, #28]
 800cf7e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 800cf80:	89fb      	ldrh	r3, [r7, #14]
 800cf82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf86:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800cf88:	89fa      	ldrh	r2, [r7, #14]
 800cf8a:	887b      	ldrh	r3, [r7, #2]
 800cf8c:	4313      	orrs	r3, r2
 800cf8e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	89fa      	ldrh	r2, [r7, #14]
 800cf94:	839a      	strh	r2, [r3, #28]
}
 800cf96:	f107 0714 	add.w	r7, r7, #20
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bc80      	pop	{r7}
 800cf9e:	4770      	bx	lr

0800cfa0 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b085      	sub	sp, #20
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800cfac:	f04f 0300 	mov.w	r3, #0
 800cfb0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	8b9b      	ldrh	r3, [r3, #28]
 800cfb6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 800cfb8:	89fb      	ldrh	r3, [r7, #14]
 800cfba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cfbe:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 800cfc0:	887b      	ldrh	r3, [r7, #2]
 800cfc2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	89fb      	ldrh	r3, [r7, #14]
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	89fa      	ldrh	r2, [r7, #14]
 800cfd2:	839a      	strh	r2, [r3, #28]
}
 800cfd4:	f107 0714 	add.w	r7, r7, #20
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bc80      	pop	{r7}
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop

0800cfe0 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	460b      	mov	r3, r1
 800cfea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800cfec:	f04f 0300 	mov.w	r3, #0
 800cff0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	8b1b      	ldrh	r3, [r3, #24]
 800cff6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800cff8:	89fb      	ldrh	r3, [r7, #14]
 800cffa:	f023 0308 	bic.w	r3, r3, #8
 800cffe:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800d000:	89fa      	ldrh	r2, [r7, #14]
 800d002:	887b      	ldrh	r3, [r7, #2]
 800d004:	4313      	orrs	r3, r2
 800d006:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	89fa      	ldrh	r2, [r7, #14]
 800d00c:	831a      	strh	r2, [r3, #24]
}
 800d00e:	f107 0714 	add.w	r7, r7, #20
 800d012:	46bd      	mov	sp, r7
 800d014:	bc80      	pop	{r7}
 800d016:	4770      	bx	lr

0800d018 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800d018:	b480      	push	{r7}
 800d01a:	b085      	sub	sp, #20
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	460b      	mov	r3, r1
 800d022:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d024:	f04f 0300 	mov.w	r3, #0
 800d028:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	8b1b      	ldrh	r3, [r3, #24]
 800d02e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 800d030:	89fb      	ldrh	r3, [r7, #14]
 800d032:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d036:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 800d038:	887b      	ldrh	r3, [r7, #2]
 800d03a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d03e:	b29a      	uxth	r2, r3
 800d040:	89fb      	ldrh	r3, [r7, #14]
 800d042:	4313      	orrs	r3, r2
 800d044:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	89fa      	ldrh	r2, [r7, #14]
 800d04a:	831a      	strh	r2, [r3, #24]
}
 800d04c:	f107 0714 	add.w	r7, r7, #20
 800d050:	46bd      	mov	sp, r7
 800d052:	bc80      	pop	{r7}
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop

0800d058 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800d058:	b480      	push	{r7}
 800d05a:	b085      	sub	sp, #20
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	460b      	mov	r3, r1
 800d062:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d064:	f04f 0300 	mov.w	r3, #0
 800d068:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	8b9b      	ldrh	r3, [r3, #28]
 800d06e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 800d070:	89fb      	ldrh	r3, [r7, #14]
 800d072:	f023 0308 	bic.w	r3, r3, #8
 800d076:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800d078:	89fa      	ldrh	r2, [r7, #14]
 800d07a:	887b      	ldrh	r3, [r7, #2]
 800d07c:	4313      	orrs	r3, r2
 800d07e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	89fa      	ldrh	r2, [r7, #14]
 800d084:	839a      	strh	r2, [r3, #28]
}
 800d086:	f107 0714 	add.w	r7, r7, #20
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bc80      	pop	{r7}
 800d08e:	4770      	bx	lr

0800d090 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800d090:	b480      	push	{r7}
 800d092:	b085      	sub	sp, #20
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	460b      	mov	r3, r1
 800d09a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d09c:	f04f 0300 	mov.w	r3, #0
 800d0a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	8b9b      	ldrh	r3, [r3, #28]
 800d0a6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800d0a8:	89fb      	ldrh	r3, [r7, #14]
 800d0aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d0ae:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800d0b0:	887b      	ldrh	r3, [r7, #2]
 800d0b2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d0b6:	b29a      	uxth	r2, r3
 800d0b8:	89fb      	ldrh	r3, [r7, #14]
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	89fa      	ldrh	r2, [r7, #14]
 800d0c2:	839a      	strh	r2, [r3, #28]
}
 800d0c4:	f107 0714 	add.w	r7, r7, #20
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bc80      	pop	{r7}
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop

0800d0d0 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	460b      	mov	r3, r1
 800d0da:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d0dc:	f04f 0300 	mov.w	r3, #0
 800d0e0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	8b1b      	ldrh	r3, [r3, #24]
 800d0e6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 800d0e8:	89fb      	ldrh	r3, [r7, #14]
 800d0ea:	f023 0304 	bic.w	r3, r3, #4
 800d0ee:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 800d0f0:	89fa      	ldrh	r2, [r7, #14]
 800d0f2:	887b      	ldrh	r3, [r7, #2]
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	89fa      	ldrh	r2, [r7, #14]
 800d0fc:	831a      	strh	r2, [r3, #24]
}
 800d0fe:	f107 0714 	add.w	r7, r7, #20
 800d102:	46bd      	mov	sp, r7
 800d104:	bc80      	pop	{r7}
 800d106:	4770      	bx	lr

0800d108 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	460b      	mov	r3, r1
 800d112:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d114:	f04f 0300 	mov.w	r3, #0
 800d118:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	8b1b      	ldrh	r3, [r3, #24]
 800d11e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 800d120:	89fb      	ldrh	r3, [r7, #14]
 800d122:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d126:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 800d128:	887b      	ldrh	r3, [r7, #2]
 800d12a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d12e:	b29a      	uxth	r2, r3
 800d130:	89fb      	ldrh	r3, [r7, #14]
 800d132:	4313      	orrs	r3, r2
 800d134:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	89fa      	ldrh	r2, [r7, #14]
 800d13a:	831a      	strh	r2, [r3, #24]
}
 800d13c:	f107 0714 	add.w	r7, r7, #20
 800d140:	46bd      	mov	sp, r7
 800d142:	bc80      	pop	{r7}
 800d144:	4770      	bx	lr
 800d146:	bf00      	nop

0800d148 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800d148:	b480      	push	{r7}
 800d14a:	b085      	sub	sp, #20
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	460b      	mov	r3, r1
 800d152:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d154:	f04f 0300 	mov.w	r3, #0
 800d158:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	8b9b      	ldrh	r3, [r3, #28]
 800d15e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 800d160:	89fb      	ldrh	r3, [r7, #14]
 800d162:	f023 0304 	bic.w	r3, r3, #4
 800d166:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 800d168:	89fa      	ldrh	r2, [r7, #14]
 800d16a:	887b      	ldrh	r3, [r7, #2]
 800d16c:	4313      	orrs	r3, r2
 800d16e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	89fa      	ldrh	r2, [r7, #14]
 800d174:	839a      	strh	r2, [r3, #28]
}
 800d176:	f107 0714 	add.w	r7, r7, #20
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bc80      	pop	{r7}
 800d17e:	4770      	bx	lr

0800d180 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800d180:	b480      	push	{r7}
 800d182:	b085      	sub	sp, #20
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	460b      	mov	r3, r1
 800d18a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d18c:	f04f 0300 	mov.w	r3, #0
 800d190:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	8b9b      	ldrh	r3, [r3, #28]
 800d196:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 800d198:	89fb      	ldrh	r3, [r7, #14]
 800d19a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d19e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800d1a0:	887b      	ldrh	r3, [r7, #2]
 800d1a2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d1a6:	b29a      	uxth	r2, r3
 800d1a8:	89fb      	ldrh	r3, [r7, #14]
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	89fa      	ldrh	r2, [r7, #14]
 800d1b2:	839a      	strh	r2, [r3, #28]
}
 800d1b4:	f107 0714 	add.w	r7, r7, #20
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bc80      	pop	{r7}
 800d1bc:	4770      	bx	lr
 800d1be:	bf00      	nop

0800d1c0 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d1cc:	f04f 0300 	mov.w	r3, #0
 800d1d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	8b1b      	ldrh	r3, [r3, #24]
 800d1d6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 800d1d8:	89fb      	ldrh	r3, [r7, #14]
 800d1da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1de:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800d1e0:	89fa      	ldrh	r2, [r7, #14]
 800d1e2:	887b      	ldrh	r3, [r7, #2]
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	89fa      	ldrh	r2, [r7, #14]
 800d1ec:	831a      	strh	r2, [r3, #24]
}
 800d1ee:	f107 0714 	add.w	r7, r7, #20
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bc80      	pop	{r7}
 800d1f6:	4770      	bx	lr

0800d1f8 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	460b      	mov	r3, r1
 800d202:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d204:	f04f 0300 	mov.w	r3, #0
 800d208:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	8b1b      	ldrh	r3, [r3, #24]
 800d20e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 800d210:	89fb      	ldrh	r3, [r7, #14]
 800d212:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800d216:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800d21a:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800d21c:	887b      	ldrh	r3, [r7, #2]
 800d21e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d222:	b29a      	uxth	r2, r3
 800d224:	89fb      	ldrh	r3, [r7, #14]
 800d226:	4313      	orrs	r3, r2
 800d228:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	89fa      	ldrh	r2, [r7, #14]
 800d22e:	831a      	strh	r2, [r3, #24]
}
 800d230:	f107 0714 	add.w	r7, r7, #20
 800d234:	46bd      	mov	sp, r7
 800d236:	bc80      	pop	{r7}
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop

0800d23c <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b085      	sub	sp, #20
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	460b      	mov	r3, r1
 800d246:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d248:	f04f 0300 	mov.w	r3, #0
 800d24c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	8b9b      	ldrh	r3, [r3, #28]
 800d252:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 800d254:	89fb      	ldrh	r3, [r7, #14]
 800d256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d25a:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800d25c:	89fa      	ldrh	r2, [r7, #14]
 800d25e:	887b      	ldrh	r3, [r7, #2]
 800d260:	4313      	orrs	r3, r2
 800d262:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	89fa      	ldrh	r2, [r7, #14]
 800d268:	839a      	strh	r2, [r3, #28]
}
 800d26a:	f107 0714 	add.w	r7, r7, #20
 800d26e:	46bd      	mov	sp, r7
 800d270:	bc80      	pop	{r7}
 800d272:	4770      	bx	lr

0800d274 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	460b      	mov	r3, r1
 800d27e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d280:	f04f 0300 	mov.w	r3, #0
 800d284:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	8b9b      	ldrh	r3, [r3, #28]
 800d28a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 800d28c:	89fb      	ldrh	r3, [r7, #14]
 800d28e:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800d292:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800d296:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 800d298:	887b      	ldrh	r3, [r7, #2]
 800d29a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d29e:	b29a      	uxth	r2, r3
 800d2a0:	89fb      	ldrh	r3, [r7, #14]
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	89fa      	ldrh	r2, [r7, #14]
 800d2aa:	839a      	strh	r2, [r3, #28]
}
 800d2ac:	f107 0714 	add.w	r7, r7, #20
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bc80      	pop	{r7}
 800d2b4:	4770      	bx	lr
 800d2b6:	bf00      	nop

0800d2b8 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800d2c4:	f04f 0300 	mov.w	r3, #0
 800d2c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	8c1b      	ldrh	r3, [r3, #32]
 800d2ce:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 800d2d0:	89fb      	ldrh	r3, [r7, #14]
 800d2d2:	f023 0302 	bic.w	r3, r3, #2
 800d2d6:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 800d2d8:	89fa      	ldrh	r2, [r7, #14]
 800d2da:	887b      	ldrh	r3, [r7, #2]
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	89fa      	ldrh	r2, [r7, #14]
 800d2e4:	841a      	strh	r2, [r3, #32]
}
 800d2e6:	f107 0714 	add.w	r7, r7, #20
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bc80      	pop	{r7}
 800d2ee:	4770      	bx	lr

0800d2f0 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800d2fc:	f04f 0300 	mov.w	r3, #0
 800d300:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	8c1b      	ldrh	r3, [r3, #32]
 800d306:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800d308:	89fb      	ldrh	r3, [r7, #14]
 800d30a:	f023 0308 	bic.w	r3, r3, #8
 800d30e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 800d310:	89fa      	ldrh	r2, [r7, #14]
 800d312:	887b      	ldrh	r3, [r7, #2]
 800d314:	4313      	orrs	r3, r2
 800d316:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	89fa      	ldrh	r2, [r7, #14]
 800d31c:	841a      	strh	r2, [r3, #32]
}
 800d31e:	f107 0714 	add.w	r7, r7, #20
 800d322:	46bd      	mov	sp, r7
 800d324:	bc80      	pop	{r7}
 800d326:	4770      	bx	lr

0800d328 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800d328:	b480      	push	{r7}
 800d32a:	b085      	sub	sp, #20
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	460b      	mov	r3, r1
 800d332:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800d334:	f04f 0300 	mov.w	r3, #0
 800d338:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	8c1b      	ldrh	r3, [r3, #32]
 800d33e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 800d340:	89fb      	ldrh	r3, [r7, #14]
 800d342:	f023 0320 	bic.w	r3, r3, #32
 800d346:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 800d348:	887b      	ldrh	r3, [r7, #2]
 800d34a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d34e:	b29a      	uxth	r2, r3
 800d350:	89fb      	ldrh	r3, [r7, #14]
 800d352:	4313      	orrs	r3, r2
 800d354:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	89fa      	ldrh	r2, [r7, #14]
 800d35a:	841a      	strh	r2, [r3, #32]
}
 800d35c:	f107 0714 	add.w	r7, r7, #20
 800d360:	46bd      	mov	sp, r7
 800d362:	bc80      	pop	{r7}
 800d364:	4770      	bx	lr
 800d366:	bf00      	nop

0800d368 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800d368:	b480      	push	{r7}
 800d36a:	b085      	sub	sp, #20
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	460b      	mov	r3, r1
 800d372:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800d374:	f04f 0300 	mov.w	r3, #0
 800d378:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	8c1b      	ldrh	r3, [r3, #32]
 800d37e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800d380:	89fb      	ldrh	r3, [r7, #14]
 800d382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d386:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800d388:	887b      	ldrh	r3, [r7, #2]
 800d38a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d38e:	b29a      	uxth	r2, r3
 800d390:	89fb      	ldrh	r3, [r7, #14]
 800d392:	4313      	orrs	r3, r2
 800d394:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	89fa      	ldrh	r2, [r7, #14]
 800d39a:	841a      	strh	r2, [r3, #32]
}
 800d39c:	f107 0714 	add.w	r7, r7, #20
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bc80      	pop	{r7}
 800d3a4:	4770      	bx	lr
 800d3a6:	bf00      	nop

0800d3a8 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b085      	sub	sp, #20
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800d3b4:	f04f 0300 	mov.w	r3, #0
 800d3b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	8c1b      	ldrh	r3, [r3, #32]
 800d3be:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800d3c0:	89fb      	ldrh	r3, [r7, #14]
 800d3c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d3c6:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 800d3c8:	887b      	ldrh	r3, [r7, #2]
 800d3ca:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d3ce:	b29a      	uxth	r2, r3
 800d3d0:	89fb      	ldrh	r3, [r7, #14]
 800d3d2:	4313      	orrs	r3, r2
 800d3d4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	89fa      	ldrh	r2, [r7, #14]
 800d3da:	841a      	strh	r2, [r3, #32]
}
 800d3dc:	f107 0714 	add.w	r7, r7, #20
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bc80      	pop	{r7}
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop

0800d3e8 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b085      	sub	sp, #20
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800d3f4:	f04f 0300 	mov.w	r3, #0
 800d3f8:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	8c1b      	ldrh	r3, [r3, #32]
 800d3fe:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800d400:	89fb      	ldrh	r3, [r7, #14]
 800d402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d406:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 800d408:	887b      	ldrh	r3, [r7, #2]
 800d40a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d40e:	b29a      	uxth	r2, r3
 800d410:	89fb      	ldrh	r3, [r7, #14]
 800d412:	4313      	orrs	r3, r2
 800d414:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	89fa      	ldrh	r2, [r7, #14]
 800d41a:	841a      	strh	r2, [r3, #32]
}
 800d41c:	f107 0714 	add.w	r7, r7, #20
 800d420:	46bd      	mov	sp, r7
 800d422:	bc80      	pop	{r7}
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop

0800d428 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800d428:	b480      	push	{r7}
 800d42a:	b085      	sub	sp, #20
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	460b      	mov	r3, r1
 800d432:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800d434:	f04f 0300 	mov.w	r3, #0
 800d438:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	8c1b      	ldrh	r3, [r3, #32]
 800d43e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800d440:	89fb      	ldrh	r3, [r7, #14]
 800d442:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d446:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 800d448:	887b      	ldrh	r3, [r7, #2]
 800d44a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d44e:	b29a      	uxth	r2, r3
 800d450:	89fb      	ldrh	r3, [r7, #14]
 800d452:	4313      	orrs	r3, r2
 800d454:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	89fa      	ldrh	r2, [r7, #14]
 800d45a:	841a      	strh	r2, [r3, #32]
}
 800d45c:	f107 0714 	add.w	r7, r7, #20
 800d460:	46bd      	mov	sp, r7
 800d462:	bc80      	pop	{r7}
 800d464:	4770      	bx	lr
 800d466:	bf00      	nop

0800d468 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 800d468:	b480      	push	{r7}
 800d46a:	b085      	sub	sp, #20
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	4613      	mov	r3, r2
 800d472:	460a      	mov	r2, r1
 800d474:	807a      	strh	r2, [r7, #2]
 800d476:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800d478:	f04f 0300 	mov.w	r3, #0
 800d47c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 800d47e:	887b      	ldrh	r3, [r7, #2]
 800d480:	f04f 0201 	mov.w	r2, #1
 800d484:	fa02 f303 	lsl.w	r3, r2, r3
 800d488:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	8c1b      	ldrh	r3, [r3, #32]
 800d48e:	b29a      	uxth	r2, r3
 800d490:	89fb      	ldrh	r3, [r7, #14]
 800d492:	ea6f 0303 	mvn.w	r3, r3
 800d496:	b29b      	uxth	r3, r3
 800d498:	4013      	ands	r3, r2
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	8c1b      	ldrh	r3, [r3, #32]
 800d4a4:	b29a      	uxth	r2, r3
 800d4a6:	8839      	ldrh	r1, [r7, #0]
 800d4a8:	887b      	ldrh	r3, [r7, #2]
 800d4aa:	fa01 f303 	lsl.w	r3, r1, r3
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	b29a      	uxth	r2, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	841a      	strh	r2, [r3, #32]
}
 800d4b8:	f107 0714 	add.w	r7, r7, #20
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bc80      	pop	{r7}
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop

0800d4c4 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	4613      	mov	r3, r2
 800d4ce:	460a      	mov	r2, r1
 800d4d0:	807a      	strh	r2, [r7, #2]
 800d4d2:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800d4d4:	f04f 0300 	mov.w	r3, #0
 800d4d8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 800d4da:	887b      	ldrh	r3, [r7, #2]
 800d4dc:	f04f 0204 	mov.w	r2, #4
 800d4e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4e4:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	8c1b      	ldrh	r3, [r3, #32]
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	89fb      	ldrh	r3, [r7, #14]
 800d4ee:	ea6f 0303 	mvn.w	r3, r3
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	4013      	ands	r3, r2
 800d4f6:	b29a      	uxth	r2, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	8c1b      	ldrh	r3, [r3, #32]
 800d500:	b29a      	uxth	r2, r3
 800d502:	8839      	ldrh	r1, [r7, #0]
 800d504:	887b      	ldrh	r3, [r7, #2]
 800d506:	fa01 f303 	lsl.w	r3, r1, r3
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	4313      	orrs	r3, r2
 800d50e:	b29a      	uxth	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	841a      	strh	r2, [r3, #32]
}
 800d514:	f107 0714 	add.w	r7, r7, #20
 800d518:	46bd      	mov	sp, r7
 800d51a:	bc80      	pop	{r7}
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop

0800d520 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	881b      	ldrh	r3, [r3, #0]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d10f      	bne.n	800d552 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800d536:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d538:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800d53a:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d53c:	891b      	ldrh	r3, [r3, #8]
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 fcc4 	bl	800decc <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	88db      	ldrh	r3, [r3, #6]
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	4619      	mov	r1, r3
 800d54c:	f000 f8ec 	bl	800d728 <TIM_SetIC1Prescaler>
 800d550:	e036      	b.n	800d5c0 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	881b      	ldrh	r3, [r3, #0]
 800d556:	2b04      	cmp	r3, #4
 800d558:	d10f      	bne.n	800d57a <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800d55e:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d560:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800d562:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d564:	891b      	ldrh	r3, [r3, #8]
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 fcf0 	bl	800df4c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	88db      	ldrh	r3, [r3, #6]
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	4619      	mov	r1, r3
 800d574:	f000 f8f4 	bl	800d760 <TIM_SetIC2Prescaler>
 800d578:	e022      	b.n	800d5c0 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	881b      	ldrh	r3, [r3, #0]
 800d57e:	2b08      	cmp	r3, #8
 800d580:	d10f      	bne.n	800d5a2 <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800d586:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800d588:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800d58a:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800d58c:	891b      	ldrh	r3, [r3, #8]
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 fd2a 	bl	800dfe8 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	88db      	ldrh	r3, [r3, #6]
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	4619      	mov	r1, r3
 800d59c:	f000 f8fe 	bl	800d79c <TIM_SetIC3Prescaler>
 800d5a0:	e00e      	b.n	800d5c0 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800d5a6:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d5a8:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800d5aa:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800d5ac:	891b      	ldrh	r3, [r3, #8]
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 fd60 	bl	800e074 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	88db      	ldrh	r3, [r3, #6]
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	f000 f90a 	bl	800d7d4 <TIM_SetIC4Prescaler>
  }
}
 800d5c0:	f107 0708 	add.w	r7, r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f04f 0200 	mov.w	r2, #0
 800d5d6:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f04f 0200 	mov.w	r2, #0
 800d5de:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f04f 0201 	mov.w	r2, #1
 800d5e6:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f04f 0200 	mov.w	r2, #0
 800d5ee:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f04f 0200 	mov.w	r2, #0
 800d5f6:	811a      	strh	r2, [r3, #8]
}
 800d5f8:	f107 070c 	add.w	r7, r7, #12
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bc80      	pop	{r7}
 800d600:	4770      	bx	lr
 800d602:	bf00      	nop

0800d604 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b084      	sub	sp, #16
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 800d60e:	f04f 0300 	mov.w	r3, #0
 800d612:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 800d614:	f04f 0301 	mov.w	r3, #1
 800d618:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	885b      	ldrh	r3, [r3, #2]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d103      	bne.n	800d62a <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800d622:	f04f 0302 	mov.w	r3, #2
 800d626:	81fb      	strh	r3, [r7, #14]
 800d628:	e002      	b.n	800d630 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 800d62a:	f04f 0300 	mov.w	r3, #0
 800d62e:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	889b      	ldrh	r3, [r3, #4]
 800d634:	2b01      	cmp	r3, #1
 800d636:	d103      	bne.n	800d640 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 800d638:	f04f 0302 	mov.w	r3, #2
 800d63c:	81bb      	strh	r3, [r7, #12]
 800d63e:	e002      	b.n	800d646 <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 800d640:	f04f 0301 	mov.w	r3, #1
 800d644:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	881b      	ldrh	r3, [r3, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d11c      	bne.n	800d688 <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	8859      	ldrh	r1, [r3, #2]
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800d656:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800d658:	891b      	ldrh	r3, [r3, #8]
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 fc36 	bl	800decc <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	88db      	ldrh	r3, [r3, #6]
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	4619      	mov	r1, r3
 800d668:	f000 f85e 	bl	800d728 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	891b      	ldrh	r3, [r3, #8]
 800d670:	89f9      	ldrh	r1, [r7, #14]
 800d672:	89ba      	ldrh	r2, [r7, #12]
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 fc69 	bl	800df4c <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	88db      	ldrh	r3, [r3, #6]
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	4619      	mov	r1, r3
 800d682:	f000 f86d 	bl	800d760 <TIM_SetIC2Prescaler>
 800d686:	e01b      	b.n	800d6c0 <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	8859      	ldrh	r1, [r3, #2]
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800d690:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800d692:	891b      	ldrh	r3, [r3, #8]
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 fc59 	bl	800df4c <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	88db      	ldrh	r3, [r3, #6]
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	f000 f85d 	bl	800d760 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	891b      	ldrh	r3, [r3, #8]
 800d6aa:	89f9      	ldrh	r1, [r7, #14]
 800d6ac:	89ba      	ldrh	r2, [r7, #12]
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 fc0c 	bl	800decc <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	88db      	ldrh	r3, [r3, #6]
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	f000 f834 	bl	800d728 <TIM_SetIC1Prescaler>
  }
}
 800d6c0:	f107 0710 	add.w	r7, r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f107 070c 	add.w	r7, r7, #12
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bc80      	pop	{r7}
 800d6de:	4770      	bx	lr

0800d6e0 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f107 070c 	add.w	r7, r7, #12
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bc80      	pop	{r7}
 800d6f6:	4770      	bx	lr

0800d6f8 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800d704:	4618      	mov	r0, r3
 800d706:	f107 070c 	add.w	r7, r7, #12
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bc80      	pop	{r7}
 800d70e:	4770      	bx	lr

0800d710 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 800d710:	b480      	push	{r7}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	f107 070c 	add.w	r7, r7, #12
 800d722:	46bd      	mov	sp, r7
 800d724:	bc80      	pop	{r7}
 800d726:	4770      	bx	lr

0800d728 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800d728:	b480      	push	{r7}
 800d72a:	b083      	sub	sp, #12
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	460b      	mov	r3, r1
 800d732:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	8b1b      	ldrh	r3, [r3, #24]
 800d738:	b29b      	uxth	r3, r3
 800d73a:	f023 030c 	bic.w	r3, r3, #12
 800d73e:	b29a      	uxth	r2, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	8b1b      	ldrh	r3, [r3, #24]
 800d748:	b29a      	uxth	r2, r3
 800d74a:	887b      	ldrh	r3, [r7, #2]
 800d74c:	4313      	orrs	r3, r2
 800d74e:	b29a      	uxth	r2, r3
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	831a      	strh	r2, [r3, #24]
}
 800d754:	f107 070c 	add.w	r7, r7, #12
 800d758:	46bd      	mov	sp, r7
 800d75a:	bc80      	pop	{r7}
 800d75c:	4770      	bx	lr
 800d75e:	bf00      	nop

0800d760 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	460b      	mov	r3, r1
 800d76a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	8b1b      	ldrh	r3, [r3, #24]
 800d770:	b29b      	uxth	r3, r3
 800d772:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d776:	b29a      	uxth	r2, r3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	8b1b      	ldrh	r3, [r3, #24]
 800d780:	b29a      	uxth	r2, r3
 800d782:	887b      	ldrh	r3, [r7, #2]
 800d784:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d788:	b29b      	uxth	r3, r3
 800d78a:	4313      	orrs	r3, r2
 800d78c:	b29a      	uxth	r2, r3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	831a      	strh	r2, [r3, #24]
}
 800d792:	f107 070c 	add.w	r7, r7, #12
 800d796:	46bd      	mov	sp, r7
 800d798:	bc80      	pop	{r7}
 800d79a:	4770      	bx	lr

0800d79c <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	8b9b      	ldrh	r3, [r3, #28]
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	f023 030c 	bic.w	r3, r3, #12
 800d7b2:	b29a      	uxth	r2, r3
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	8b9b      	ldrh	r3, [r3, #28]
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	887b      	ldrh	r3, [r7, #2]
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	839a      	strh	r2, [r3, #28]
}
 800d7c8:	f107 070c 	add.w	r7, r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bc80      	pop	{r7}
 800d7d0:	4770      	bx	lr
 800d7d2:	bf00      	nop

0800d7d4 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	460b      	mov	r3, r1
 800d7de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	8b9b      	ldrh	r3, [r3, #28]
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	8b9b      	ldrh	r3, [r3, #28]
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	887b      	ldrh	r3, [r7, #2]
 800d7f8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	4313      	orrs	r3, r2
 800d800:	b29a      	uxth	r2, r3
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	839a      	strh	r2, [r3, #28]
}
 800d806:	f107 070c 	add.w	r7, r7, #12
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bc80      	pop	{r7}
 800d80e:	4770      	bx	lr

0800d810 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	881a      	ldrh	r2, [r3, #0]
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	885b      	ldrh	r3, [r3, #2]
 800d822:	4313      	orrs	r3, r2
 800d824:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d82a:	4313      	orrs	r3, r2
 800d82c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d832:	4313      	orrs	r3, r2
 800d834:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d83a:	4313      	orrs	r3, r2
 800d83c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d842:	4313      	orrs	r3, r2
 800d844:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d84a:	4313      	orrs	r3, r2
 800d84c:	b29a      	uxth	r2, r3
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 800d854:	f107 070c 	add.w	r7, r7, #12
 800d858:	46bd      	mov	sp, r7
 800d85a:	bc80      	pop	{r7}
 800d85c:	4770      	bx	lr
 800d85e:	bf00      	nop

0800d860 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f04f 0200 	mov.w	r2, #0
 800d86e:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f04f 0200 	mov.w	r2, #0
 800d876:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f04f 0200 	mov.w	r2, #0
 800d87e:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f04f 0200 	mov.w	r2, #0
 800d886:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f04f 0200 	mov.w	r2, #0
 800d88e:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f04f 0200 	mov.w	r2, #0
 800d896:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f04f 0200 	mov.w	r2, #0
 800d89e:	819a      	strh	r2, [r3, #12]
}
 800d8a0:	f107 070c 	add.w	r7, r7, #12
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bc80      	pop	{r7}
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop

0800d8ac <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d8b8:	78fb      	ldrb	r3, [r7, #3]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d00c      	beq.n	800d8d8 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8ce:	b29a      	uxth	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800d8d6:	e00b      	b.n	800d8f0 <TIM_CtrlPWMOutputs+0x44>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800d8e4:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800d8e8:	b29a      	uxth	r2, r3
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 800d8f0:	f107 070c 	add.w	r7, r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bc80      	pop	{r7}
 800d8f8:	4770      	bx	lr
 800d8fa:	bf00      	nop

0800d8fc <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	460b      	mov	r3, r1
 800d906:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d908:	78fb      	ldrb	r3, [r7, #3]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d008      	beq.n	800d920 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	889b      	ldrh	r3, [r3, #4]
 800d912:	b29b      	uxth	r3, r3
 800d914:	f043 0304 	orr.w	r3, r3, #4
 800d918:	b29a      	uxth	r2, r3
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	809a      	strh	r2, [r3, #4]
 800d91e:	e007      	b.n	800d930 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	889b      	ldrh	r3, [r3, #4]
 800d924:	b29b      	uxth	r3, r3
 800d926:	f023 0304 	bic.w	r3, r3, #4
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	809a      	strh	r2, [r3, #4]
  }
}
 800d930:	f107 070c 	add.w	r7, r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	bc80      	pop	{r7}
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop

0800d93c <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 800d93c:	b480      	push	{r7}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	460b      	mov	r3, r1
 800d946:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800d948:	78fb      	ldrb	r3, [r7, #3]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d008      	beq.n	800d960 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	889b      	ldrh	r3, [r3, #4]
 800d952:	b29b      	uxth	r3, r3
 800d954:	f043 0301 	orr.w	r3, r3, #1
 800d958:	b29a      	uxth	r2, r3
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	809a      	strh	r2, [r3, #4]
 800d95e:	e007      	b.n	800d970 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	889b      	ldrh	r3, [r3, #4]
 800d964:	b29b      	uxth	r3, r3
 800d966:	f023 0301 	bic.w	r3, r3, #1
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	809a      	strh	r2, [r3, #4]
  }
}
 800d970:	f107 070c 	add.w	r7, r7, #12
 800d974:	46bd      	mov	sp, r7
 800d976:	bc80      	pop	{r7}
 800d978:	4770      	bx	lr
 800d97a:	bf00      	nop

0800d97c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800d97c:	b480      	push	{r7}
 800d97e:	b083      	sub	sp, #12
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	4613      	mov	r3, r2
 800d986:	460a      	mov	r2, r1
 800d988:	807a      	strh	r2, [r7, #2]
 800d98a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d98c:	787b      	ldrb	r3, [r7, #1]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d008      	beq.n	800d9a4 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	899b      	ldrh	r3, [r3, #12]
 800d996:	b29a      	uxth	r2, r3
 800d998:	887b      	ldrh	r3, [r7, #2]
 800d99a:	4313      	orrs	r3, r2
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	819a      	strh	r2, [r3, #12]
 800d9a2:	e00a      	b.n	800d9ba <TIM_ITConfig+0x3e>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	899b      	ldrh	r3, [r3, #12]
 800d9a8:	b29a      	uxth	r2, r3
 800d9aa:	887b      	ldrh	r3, [r7, #2]
 800d9ac:	ea6f 0303 	mvn.w	r3, r3
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	4013      	ands	r3, r2
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	819a      	strh	r2, [r3, #12]
  }
}
 800d9ba:	f107 070c 	add.w	r7, r7, #12
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bc80      	pop	{r7}
 800d9c2:	4770      	bx	lr

0800d9c4 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 800d9c4:	b480      	push	{r7}
 800d9c6:	b083      	sub	sp, #12
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	887a      	ldrh	r2, [r7, #2]
 800d9d4:	829a      	strh	r2, [r3, #20]
}
 800d9d6:	f107 070c 	add.w	r7, r7, #12
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bc80      	pop	{r7}
 800d9de:	4770      	bx	lr

0800d9e0 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800d9ec:	f04f 0300 	mov.w	r3, #0
 800d9f0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	8a1b      	ldrh	r3, [r3, #16]
 800d9f6:	b29a      	uxth	r2, r3
 800d9f8:	887b      	ldrh	r3, [r7, #2]
 800d9fa:	4013      	ands	r3, r2
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d003      	beq.n	800da0a <TIM_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800da02:	f04f 0301 	mov.w	r3, #1
 800da06:	73fb      	strb	r3, [r7, #15]
 800da08:	e002      	b.n	800da10 <TIM_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800da0a:	f04f 0300 	mov.w	r3, #0
 800da0e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800da10:	7bfb      	ldrb	r3, [r7, #15]
}
 800da12:	4618      	mov	r0, r3
 800da14:	f107 0714 	add.w	r7, r7, #20
 800da18:	46bd      	mov	sp, r7
 800da1a:	bc80      	pop	{r7}
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop

0800da20 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 800da20:	b480      	push	{r7}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	460b      	mov	r3, r1
 800da2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 800da2c:	887b      	ldrh	r3, [r7, #2]
 800da2e:	ea6f 0303 	mvn.w	r3, r3
 800da32:	b29a      	uxth	r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	821a      	strh	r2, [r3, #16]
}
 800da38:	f107 070c 	add.w	r7, r7, #12
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bc80      	pop	{r7}
 800da40:	4770      	bx	lr
 800da42:	bf00      	nop

0800da44 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800da44:	b480      	push	{r7}
 800da46:	b085      	sub	sp, #20
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	460b      	mov	r3, r1
 800da4e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800da50:	f04f 0300 	mov.w	r3, #0
 800da54:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800da56:	f04f 0300 	mov.w	r3, #0
 800da5a:	81bb      	strh	r3, [r7, #12]
 800da5c:	f04f 0300 	mov.w	r3, #0
 800da60:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	8a1b      	ldrh	r3, [r3, #16]
 800da66:	b29a      	uxth	r2, r3
 800da68:	887b      	ldrh	r3, [r7, #2]
 800da6a:	4013      	ands	r3, r2
 800da6c:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	899b      	ldrh	r3, [r3, #12]
 800da72:	b29a      	uxth	r2, r3
 800da74:	887b      	ldrh	r3, [r7, #2]
 800da76:	4013      	ands	r3, r2
 800da78:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800da7a:	89bb      	ldrh	r3, [r7, #12]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d006      	beq.n	800da8e <TIM_GetITStatus+0x4a>
 800da80:	897b      	ldrh	r3, [r7, #10]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d003      	beq.n	800da8e <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 800da86:	f04f 0301 	mov.w	r3, #1
 800da8a:	73fb      	strb	r3, [r7, #15]
 800da8c:	e002      	b.n	800da94 <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 800da8e:	f04f 0300 	mov.w	r3, #0
 800da92:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800da94:	7bfb      	ldrb	r3, [r7, #15]
}
 800da96:	4618      	mov	r0, r3
 800da98:	f107 0714 	add.w	r7, r7, #20
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bc80      	pop	{r7}
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop

0800daa4 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b083      	sub	sp, #12
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	460b      	mov	r3, r1
 800daae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800dab0:	887b      	ldrh	r3, [r7, #2]
 800dab2:	ea6f 0303 	mvn.w	r3, r3
 800dab6:	b29a      	uxth	r2, r3
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	821a      	strh	r2, [r3, #16]
}
 800dabc:	f107 070c 	add.w	r7, r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bc80      	pop	{r7}
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop

0800dac8 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	4613      	mov	r3, r2
 800dad2:	460a      	mov	r2, r1
 800dad4:	807a      	strh	r2, [r7, #2]
 800dad6:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 800dad8:	887a      	ldrh	r2, [r7, #2]
 800dada:	883b      	ldrh	r3, [r7, #0]
 800dadc:	4313      	orrs	r3, r2
 800dade:	b29a      	uxth	r2, r3
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 800dae6:	f107 070c 	add.w	r7, r7, #12
 800daea:	46bd      	mov	sp, r7
 800daec:	bc80      	pop	{r7}
 800daee:	4770      	bx	lr

0800daf0 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	4613      	mov	r3, r2
 800dafa:	460a      	mov	r2, r1
 800dafc:	807a      	strh	r2, [r7, #2]
 800dafe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800db00:	787b      	ldrb	r3, [r7, #1]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d008      	beq.n	800db18 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	899b      	ldrh	r3, [r3, #12]
 800db0a:	b29a      	uxth	r2, r3
 800db0c:	887b      	ldrh	r3, [r7, #2]
 800db0e:	4313      	orrs	r3, r2
 800db10:	b29a      	uxth	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	819a      	strh	r2, [r3, #12]
 800db16:	e00a      	b.n	800db2e <TIM_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	899b      	ldrh	r3, [r3, #12]
 800db1c:	b29a      	uxth	r2, r3
 800db1e:	887b      	ldrh	r3, [r7, #2]
 800db20:	ea6f 0303 	mvn.w	r3, r3
 800db24:	b29b      	uxth	r3, r3
 800db26:	4013      	ands	r3, r2
 800db28:	b29a      	uxth	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	819a      	strh	r2, [r3, #12]
  }
}
 800db2e:	f107 070c 	add.w	r7, r7, #12
 800db32:	46bd      	mov	sp, r7
 800db34:	bc80      	pop	{r7}
 800db36:	4770      	bx	lr

0800db38 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	460b      	mov	r3, r1
 800db42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800db44:	78fb      	ldrb	r3, [r7, #3]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d008      	beq.n	800db5c <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	889b      	ldrh	r3, [r3, #4]
 800db4e:	b29b      	uxth	r3, r3
 800db50:	f043 0308 	orr.w	r3, r3, #8
 800db54:	b29a      	uxth	r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	809a      	strh	r2, [r3, #4]
 800db5a:	e007      	b.n	800db6c <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	889b      	ldrh	r3, [r3, #4]
 800db60:	b29b      	uxth	r3, r3
 800db62:	f023 0308 	bic.w	r3, r3, #8
 800db66:	b29a      	uxth	r2, r3
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	809a      	strh	r2, [r3, #4]
  }
}
 800db6c:	f107 070c 	add.w	r7, r7, #12
 800db70:	46bd      	mov	sp, r7
 800db72:	bc80      	pop	{r7}
 800db74:	4770      	bx	lr
 800db76:	bf00      	nop

0800db78 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	891b      	ldrh	r3, [r3, #8]
 800db84:	b29b      	uxth	r3, r3
 800db86:	f023 0307 	bic.w	r3, r3, #7
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	811a      	strh	r2, [r3, #8]
}
 800db90:	f107 070c 	add.w	r7, r7, #12
 800db94:	46bd      	mov	sp, r7
 800db96:	bc80      	pop	{r7}
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop

0800db9c <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	460b      	mov	r3, r1
 800dba6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 800dba8:	887b      	ldrh	r3, [r7, #2]
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	4619      	mov	r1, r3
 800dbae:	f000 f87d 	bl	800dcac <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	891b      	ldrh	r3, [r3, #8]
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	f043 0307 	orr.w	r3, r3, #7
 800dbbc:	b29a      	uxth	r2, r3
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	811a      	strh	r2, [r3, #8]
}
 800dbc2:	f107 0708 	add.w	r7, r7, #8
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop

0800dbcc <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	8179      	strh	r1, [r7, #10]
 800dbd6:	813a      	strh	r2, [r7, #8]
 800dbd8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800dbda:	897b      	ldrh	r3, [r7, #10]
 800dbdc:	2b60      	cmp	r3, #96	; 0x60
 800dbde:	d108      	bne.n	800dbf2 <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800dbe0:	893a      	ldrh	r2, [r7, #8]
 800dbe2:	88fb      	ldrh	r3, [r7, #6]
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	4611      	mov	r1, r2
 800dbe8:	f04f 0201 	mov.w	r2, #1
 800dbec:	f000 f9ae 	bl	800df4c <TI2_Config>
 800dbf0:	e007      	b.n	800dc02 <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800dbf2:	893a      	ldrh	r2, [r7, #8]
 800dbf4:	88fb      	ldrh	r3, [r7, #6]
 800dbf6:	68f8      	ldr	r0, [r7, #12]
 800dbf8:	4611      	mov	r1, r2
 800dbfa:	f04f 0201 	mov.w	r2, #1
 800dbfe:	f000 f965 	bl	800decc <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 800dc02:	897b      	ldrh	r3, [r7, #10]
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	4619      	mov	r1, r3
 800dc08:	f000 f850 	bl	800dcac <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	891b      	ldrh	r3, [r3, #8]
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	f043 0307 	orr.w	r3, r3, #7
 800dc16:	b29a      	uxth	r2, r3
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	811a      	strh	r2, [r3, #8]
}
 800dc1c:	f107 0710 	add.w	r7, r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b086      	sub	sp, #24
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	8179      	strh	r1, [r7, #10]
 800dc2e:	813a      	strh	r2, [r7, #8]
 800dc30:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800dc32:	f04f 0300 	mov.w	r3, #0
 800dc36:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800dc38:	8979      	ldrh	r1, [r7, #10]
 800dc3a:	893a      	ldrh	r2, [r7, #8]
 800dc3c:	88fb      	ldrh	r3, [r7, #6]
 800dc3e:	68f8      	ldr	r0, [r7, #12]
 800dc40:	f000 f8a4 	bl	800dd8c <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	891b      	ldrh	r3, [r3, #8]
 800dc48:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800dc4a:	8afb      	ldrh	r3, [r7, #22]
 800dc4c:	f023 0307 	bic.w	r3, r3, #7
 800dc50:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 800dc52:	8afb      	ldrh	r3, [r7, #22]
 800dc54:	f043 0307 	orr.w	r3, r3, #7
 800dc58:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800dc5a:	8afb      	ldrh	r3, [r7, #22]
 800dc5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc60:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 800dc62:	8afb      	ldrh	r3, [r7, #22]
 800dc64:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800dc68:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	8afa      	ldrh	r2, [r7, #22]
 800dc6e:	811a      	strh	r2, [r3, #8]
}
 800dc70:	f107 0718 	add.w	r7, r7, #24
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	8179      	strh	r1, [r7, #10]
 800dc82:	813a      	strh	r2, [r7, #8]
 800dc84:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800dc86:	8979      	ldrh	r1, [r7, #10]
 800dc88:	893a      	ldrh	r2, [r7, #8]
 800dc8a:	88fb      	ldrh	r3, [r7, #6]
 800dc8c:	68f8      	ldr	r0, [r7, #12]
 800dc8e:	f000 f87d 	bl	800dd8c <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	891b      	ldrh	r3, [r3, #8]
 800dc96:	b29b      	uxth	r3, r3
 800dc98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dc9c:	b29a      	uxth	r2, r3
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	811a      	strh	r2, [r3, #8]
}
 800dca2:	f107 0710 	add.w	r7, r7, #16
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	bf00      	nop

0800dcac <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b085      	sub	sp, #20
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 800dcb8:	f04f 0300 	mov.w	r3, #0
 800dcbc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	891b      	ldrh	r3, [r3, #8]
 800dcc2:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800dcc4:	89fb      	ldrh	r3, [r7, #14]
 800dcc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcca:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800dccc:	89fa      	ldrh	r2, [r7, #14]
 800dcce:	887b      	ldrh	r3, [r7, #2]
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	89fa      	ldrh	r2, [r7, #14]
 800dcd8:	811a      	strh	r2, [r3, #8]
}
 800dcda:	f107 0714 	add.w	r7, r7, #20
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bc80      	pop	{r7}
 800dce2:	4770      	bx	lr

0800dce4 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	460b      	mov	r3, r1
 800dcee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	889b      	ldrh	r3, [r3, #4]
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcfa:	b29a      	uxth	r2, r3
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	889b      	ldrh	r3, [r3, #4]
 800dd04:	b29a      	uxth	r2, r3
 800dd06:	887b      	ldrh	r3, [r7, #2]
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	809a      	strh	r2, [r3, #4]
}
 800dd10:	f107 070c 	add.w	r7, r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bc80      	pop	{r7}
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop

0800dd1c <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	460b      	mov	r3, r1
 800dd26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	891b      	ldrh	r3, [r3, #8]
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	f023 0307 	bic.w	r3, r3, #7
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	891b      	ldrh	r3, [r3, #8]
 800dd3c:	b29a      	uxth	r2, r3
 800dd3e:	887b      	ldrh	r3, [r7, #2]
 800dd40:	4313      	orrs	r3, r2
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	811a      	strh	r2, [r3, #8]
}
 800dd48:	f107 070c 	add.w	r7, r7, #12
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bc80      	pop	{r7}
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop

0800dd54 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b083      	sub	sp, #12
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	891b      	ldrh	r3, [r3, #8]
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd6a:	b29a      	uxth	r2, r3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	891b      	ldrh	r3, [r3, #8]
 800dd74:	b29a      	uxth	r2, r3
 800dd76:	887b      	ldrh	r3, [r7, #2]
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	811a      	strh	r2, [r3, #8]
}
 800dd80:	f107 070c 	add.w	r7, r7, #12
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bc80      	pop	{r7}
 800dd88:	4770      	bx	lr
 800dd8a:	bf00      	nop

0800dd8c <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b087      	sub	sp, #28
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	8179      	strh	r1, [r7, #10]
 800dd96:	813a      	strh	r2, [r7, #8]
 800dd98:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800dd9a:	f04f 0300 	mov.w	r3, #0
 800dd9e:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	891b      	ldrh	r3, [r3, #8]
 800dda4:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800dda6:	8afb      	ldrh	r3, [r7, #22]
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800ddac:	88fb      	ldrh	r3, [r7, #6]
 800ddae:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800ddb2:	b29a      	uxth	r2, r3
 800ddb4:	893b      	ldrh	r3, [r7, #8]
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	b29a      	uxth	r2, r3
 800ddba:	897b      	ldrh	r3, [r7, #10]
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	b29a      	uxth	r2, r3
 800ddc0:	8afb      	ldrh	r3, [r7, #22]
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	8afa      	ldrh	r2, [r7, #22]
 800ddca:	811a      	strh	r2, [r3, #8]
}
 800ddcc:	f107 071c 	add.w	r7, r7, #28
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bc80      	pop	{r7}
 800ddd4:	4770      	bx	lr
 800ddd6:	bf00      	nop

0800ddd8 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b087      	sub	sp, #28
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	8179      	strh	r1, [r7, #10]
 800dde2:	813a      	strh	r2, [r7, #8]
 800dde4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800dde6:	f04f 0300 	mov.w	r3, #0
 800ddea:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 800ddec:	f04f 0300 	mov.w	r3, #0
 800ddf0:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 800ddf2:	f04f 0300 	mov.w	r3, #0
 800ddf6:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	891b      	ldrh	r3, [r3, #8]
 800ddfc:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	8b1b      	ldrh	r3, [r3, #24]
 800de02:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	8c1b      	ldrh	r3, [r3, #32]
 800de08:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800de0a:	8afb      	ldrh	r3, [r7, #22]
 800de0c:	f023 0307 	bic.w	r3, r3, #7
 800de10:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 800de12:	8afa      	ldrh	r2, [r7, #22]
 800de14:	897b      	ldrh	r3, [r7, #10]
 800de16:	4313      	orrs	r3, r2
 800de18:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800de1a:	8abb      	ldrh	r3, [r7, #20]
 800de1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de20:	f023 0303 	bic.w	r3, r3, #3
 800de24:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800de26:	8abb      	ldrh	r3, [r7, #20]
 800de28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de2c:	f043 0301 	orr.w	r3, r3, #1
 800de30:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 800de32:	8a7b      	ldrh	r3, [r7, #18]
 800de34:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800de38:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800de3a:	88fb      	ldrh	r3, [r7, #6]
 800de3c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800de40:	b29a      	uxth	r2, r3
 800de42:	893b      	ldrh	r3, [r7, #8]
 800de44:	4313      	orrs	r3, r2
 800de46:	b29a      	uxth	r2, r3
 800de48:	8a7b      	ldrh	r3, [r7, #18]
 800de4a:	4313      	orrs	r3, r2
 800de4c:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	8afa      	ldrh	r2, [r7, #22]
 800de52:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	8aba      	ldrh	r2, [r7, #20]
 800de58:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	8a7a      	ldrh	r2, [r7, #18]
 800de5e:	841a      	strh	r2, [r3, #32]
}
 800de60:	f107 071c 	add.w	r7, r7, #28
 800de64:	46bd      	mov	sp, r7
 800de66:	bc80      	pop	{r7}
 800de68:	4770      	bx	lr
 800de6a:	bf00      	nop

0800de6c <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b083      	sub	sp, #12
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	460b      	mov	r3, r1
 800de76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800de78:	78fb      	ldrb	r3, [r7, #3]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d008      	beq.n	800de90 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	889b      	ldrh	r3, [r3, #4]
 800de82:	b29b      	uxth	r3, r3
 800de84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de88:	b29a      	uxth	r2, r3
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	809a      	strh	r2, [r3, #4]
 800de8e:	e007      	b.n	800dea0 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	889b      	ldrh	r3, [r3, #4]
 800de94:	b29b      	uxth	r3, r3
 800de96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de9a:	b29a      	uxth	r2, r3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	809a      	strh	r2, [r3, #4]
  }
}
 800dea0:	f107 070c 	add.w	r7, r7, #12
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bc80      	pop	{r7}
 800dea8:	4770      	bx	lr
 800deaa:	bf00      	nop

0800deac <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 800deac:	b480      	push	{r7}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	460b      	mov	r3, r1
 800deb6:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	887a      	ldrh	r2, [r7, #2]
 800debc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800dec0:	f107 070c 	add.w	r7, r7, #12
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bc80      	pop	{r7}
 800dec8:	4770      	bx	lr
 800deca:	bf00      	nop

0800decc <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800decc:	b480      	push	{r7}
 800dece:	b087      	sub	sp, #28
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	8179      	strh	r1, [r7, #10]
 800ded6:	813a      	strh	r2, [r7, #8]
 800ded8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800deda:	f04f 0300 	mov.w	r3, #0
 800dede:	82fb      	strh	r3, [r7, #22]
 800dee0:	f04f 0300 	mov.w	r3, #0
 800dee4:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	8c1b      	ldrh	r3, [r3, #32]
 800deea:	b29b      	uxth	r3, r3
 800deec:	f023 0301 	bic.w	r3, r3, #1
 800def0:	b29a      	uxth	r2, r3
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	8b1b      	ldrh	r3, [r3, #24]
 800defa:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	8c1b      	ldrh	r3, [r3, #32]
 800df00:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800df02:	8afb      	ldrh	r3, [r7, #22]
 800df04:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800df08:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800df0a:	88fb      	ldrh	r3, [r7, #6]
 800df0c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800df10:	b29a      	uxth	r2, r3
 800df12:	893b      	ldrh	r3, [r7, #8]
 800df14:	4313      	orrs	r3, r2
 800df16:	b29a      	uxth	r2, r3
 800df18:	8afb      	ldrh	r3, [r7, #22]
 800df1a:	4313      	orrs	r3, r2
 800df1c:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800df1e:	8abb      	ldrh	r3, [r7, #20]
 800df20:	f023 030a 	bic.w	r3, r3, #10
 800df24:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800df26:	897a      	ldrh	r2, [r7, #10]
 800df28:	8abb      	ldrh	r3, [r7, #20]
 800df2a:	4313      	orrs	r3, r2
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	f043 0301 	orr.w	r3, r3, #1
 800df32:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	8afa      	ldrh	r2, [r7, #22]
 800df38:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	8aba      	ldrh	r2, [r7, #20]
 800df3e:	841a      	strh	r2, [r3, #32]
}
 800df40:	f107 071c 	add.w	r7, r7, #28
 800df44:	46bd      	mov	sp, r7
 800df46:	bc80      	pop	{r7}
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop

0800df4c <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b087      	sub	sp, #28
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	8179      	strh	r1, [r7, #10]
 800df56:	813a      	strh	r2, [r7, #8]
 800df58:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 800df5a:	f04f 0300 	mov.w	r3, #0
 800df5e:	82fb      	strh	r3, [r7, #22]
 800df60:	f04f 0300 	mov.w	r3, #0
 800df64:	82bb      	strh	r3, [r7, #20]
 800df66:	f04f 0300 	mov.w	r3, #0
 800df6a:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	8c1b      	ldrh	r3, [r3, #32]
 800df70:	b29b      	uxth	r3, r3
 800df72:	f023 0310 	bic.w	r3, r3, #16
 800df76:	b29a      	uxth	r2, r3
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	8b1b      	ldrh	r3, [r3, #24]
 800df80:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	8c1b      	ldrh	r3, [r3, #32]
 800df86:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 800df88:	897b      	ldrh	r3, [r7, #10]
 800df8a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800df8e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800df90:	8afb      	ldrh	r3, [r7, #22]
 800df92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df96:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800df9a:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800df9e:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800dfa0:	88fb      	ldrh	r3, [r7, #6]
 800dfa2:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800dfa6:	b29a      	uxth	r2, r3
 800dfa8:	8afb      	ldrh	r3, [r7, #22]
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800dfae:	893b      	ldrh	r3, [r7, #8]
 800dfb0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800dfb4:	b29a      	uxth	r2, r3
 800dfb6:	8afb      	ldrh	r3, [r7, #22]
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dfbc:	8abb      	ldrh	r3, [r7, #20]
 800dfbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dfc2:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800dfc4:	8a7a      	ldrh	r2, [r7, #18]
 800dfc6:	8abb      	ldrh	r3, [r7, #20]
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	f043 0310 	orr.w	r3, r3, #16
 800dfd0:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	8afa      	ldrh	r2, [r7, #22]
 800dfd6:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	8aba      	ldrh	r2, [r7, #20]
 800dfdc:	841a      	strh	r2, [r3, #32]
}
 800dfde:	f107 071c 	add.w	r7, r7, #28
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bc80      	pop	{r7}
 800dfe6:	4770      	bx	lr

0800dfe8 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b087      	sub	sp, #28
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	8179      	strh	r1, [r7, #10]
 800dff2:	813a      	strh	r2, [r7, #8]
 800dff4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800dff6:	f04f 0300 	mov.w	r3, #0
 800dffa:	82fb      	strh	r3, [r7, #22]
 800dffc:	f04f 0300 	mov.w	r3, #0
 800e000:	82bb      	strh	r3, [r7, #20]
 800e002:	f04f 0300 	mov.w	r3, #0
 800e006:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	8c1b      	ldrh	r3, [r3, #32]
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e012:	b29a      	uxth	r2, r3
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	8b9b      	ldrh	r3, [r3, #28]
 800e01c:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	8c1b      	ldrh	r3, [r3, #32]
 800e022:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800e024:	897b      	ldrh	r3, [r7, #10]
 800e026:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e02a:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 800e02c:	8afb      	ldrh	r3, [r7, #22]
 800e02e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800e032:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800e034:	88fb      	ldrh	r3, [r7, #6]
 800e036:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800e03a:	b29a      	uxth	r2, r3
 800e03c:	893b      	ldrh	r3, [r7, #8]
 800e03e:	4313      	orrs	r3, r2
 800e040:	b29a      	uxth	r2, r3
 800e042:	8afb      	ldrh	r3, [r7, #22]
 800e044:	4313      	orrs	r3, r2
 800e046:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e048:	8abb      	ldrh	r3, [r7, #20]
 800e04a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800e04e:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800e050:	8a7a      	ldrh	r2, [r7, #18]
 800e052:	8abb      	ldrh	r3, [r7, #20]
 800e054:	4313      	orrs	r3, r2
 800e056:	b29b      	uxth	r3, r3
 800e058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e05c:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	8afa      	ldrh	r2, [r7, #22]
 800e062:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	8aba      	ldrh	r2, [r7, #20]
 800e068:	841a      	strh	r2, [r3, #32]
}
 800e06a:	f107 071c 	add.w	r7, r7, #28
 800e06e:	46bd      	mov	sp, r7
 800e070:	bc80      	pop	{r7}
 800e072:	4770      	bx	lr

0800e074 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800e074:	b480      	push	{r7}
 800e076:	b087      	sub	sp, #28
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	8179      	strh	r1, [r7, #10]
 800e07e:	813a      	strh	r2, [r7, #8]
 800e080:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800e082:	f04f 0300 	mov.w	r3, #0
 800e086:	82fb      	strh	r3, [r7, #22]
 800e088:	f04f 0300 	mov.w	r3, #0
 800e08c:	82bb      	strh	r3, [r7, #20]
 800e08e:	f04f 0300 	mov.w	r3, #0
 800e092:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	8c1b      	ldrh	r3, [r3, #32]
 800e098:	b29b      	uxth	r3, r3
 800e09a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e09e:	b29a      	uxth	r2, r3
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	8b9b      	ldrh	r3, [r3, #28]
 800e0a8:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	8c1b      	ldrh	r3, [r3, #32]
 800e0ae:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 800e0b0:	897b      	ldrh	r3, [r7, #10]
 800e0b2:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e0b6:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800e0b8:	8afb      	ldrh	r3, [r7, #22]
 800e0ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0be:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800e0c2:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800e0c6:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800e0c8:	893b      	ldrh	r3, [r7, #8]
 800e0ca:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e0ce:	b29a      	uxth	r2, r3
 800e0d0:	8afb      	ldrh	r3, [r7, #22]
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800e0d6:	88fb      	ldrh	r3, [r7, #6]
 800e0d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	8afb      	ldrh	r3, [r7, #22]
 800e0e0:	4313      	orrs	r3, r2
 800e0e2:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e0e4:	8abb      	ldrh	r3, [r7, #20]
 800e0e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e0ea:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800e0ee:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800e0f2:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800e0f4:	8a7a      	ldrh	r2, [r7, #18]
 800e0f6:	8abb      	ldrh	r3, [r7, #20]
 800e0f8:	4313      	orrs	r3, r2
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e100:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	8afa      	ldrh	r2, [r7, #22]
 800e106:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	8aba      	ldrh	r2, [r7, #20]
 800e10c:	841a      	strh	r2, [r3, #32]
}
 800e10e:	f107 071c 	add.w	r7, r7, #28
 800e112:	46bd      	mov	sp, r7
 800e114:	bc80      	pop	{r7}
 800e116:	4770      	bx	lr

0800e118 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e126:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d10c      	bne.n	800e148 <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800e12e:	f04f 0010 	mov.w	r0, #16
 800e132:	f04f 0101 	mov.w	r1, #1
 800e136:	f7fb f8a9 	bl	800928c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800e13a:	f04f 0010 	mov.w	r0, #16
 800e13e:	f04f 0100 	mov.w	r1, #0
 800e142:	f7fb f8a3 	bl	800928c <RCC_APB2PeriphResetCmd>
 800e146:	e062      	b.n	800e20e <USART_DeInit+0xf6>
  }
  else if (USARTx == USART2)
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800e14e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e152:	429a      	cmp	r2, r3
 800e154:	d10c      	bne.n	800e170 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800e156:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800e15a:	f04f 0101 	mov.w	r1, #1
 800e15e:	f7fb f86b 	bl	8009238 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800e162:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800e166:	f04f 0100 	mov.w	r1, #0
 800e16a:	f7fb f865 	bl	8009238 <RCC_APB1PeriphResetCmd>
 800e16e:	e04e      	b.n	800e20e <USART_DeInit+0xf6>
  }
  else if (USARTx == USART3)
 800e170:	687a      	ldr	r2, [r7, #4]
 800e172:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800e176:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d10c      	bne.n	800e198 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800e17e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800e182:	f04f 0101 	mov.w	r1, #1
 800e186:	f7fb f857 	bl	8009238 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800e18a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800e18e:	f04f 0100 	mov.w	r1, #0
 800e192:	f7fb f851 	bl	8009238 <RCC_APB1PeriphResetCmd>
 800e196:	e03a      	b.n	800e20e <USART_DeInit+0xf6>
  }    
  else if (USARTx == UART4)
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 800e19e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d10c      	bne.n	800e1c0 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800e1a6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800e1aa:	f04f 0101 	mov.w	r1, #1
 800e1ae:	f7fb f843 	bl	8009238 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 800e1b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800e1b6:	f04f 0100 	mov.w	r1, #0
 800e1ba:	f7fb f83d 	bl	8009238 <RCC_APB1PeriphResetCmd>
 800e1be:	e026      	b.n	800e20e <USART_DeInit+0xf6>
  }
  else if (USARTx == UART5)
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800e1c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d10c      	bne.n	800e1e8 <USART_DeInit+0xd0>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800e1ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e1d2:	f04f 0101 	mov.w	r1, #1
 800e1d6:	f7fb f82f 	bl	8009238 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800e1da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e1de:	f04f 0100 	mov.w	r1, #0
 800e1e2:	f7fb f829 	bl	8009238 <RCC_APB1PeriphResetCmd>
 800e1e6:	e012      	b.n	800e20e <USART_DeInit+0xf6>
  }     
  else
  {
    if (USARTx == USART6)
 800e1e8:	687a      	ldr	r2, [r7, #4]
 800e1ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e1ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d10b      	bne.n	800e20e <USART_DeInit+0xf6>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 800e1f6:	f04f 0020 	mov.w	r0, #32
 800e1fa:	f04f 0101 	mov.w	r1, #1
 800e1fe:	f7fb f845 	bl	800928c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800e202:	f04f 0020 	mov.w	r0, #32
 800e206:	f04f 0100 	mov.w	r1, #0
 800e20a:	f7fb f83f 	bl	800928c <RCC_APB2PeriphResetCmd>
    }
  }
}
 800e20e:	f107 0708 	add.w	r7, r7, #8
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop

0800e218 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b08a      	sub	sp, #40	; 0x28
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800e222:	f04f 0300 	mov.w	r3, #0
 800e226:	627b      	str	r3, [r7, #36]	; 0x24
 800e228:	f04f 0300 	mov.w	r3, #0
 800e22c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800e22e:	f04f 0300 	mov.w	r3, #0
 800e232:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800e234:	f04f 0300 	mov.w	r3, #0
 800e238:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	8a1b      	ldrh	r3, [r3, #16]
 800e23e:	b29b      	uxth	r3, r3
 800e240:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800e242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e244:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e248:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	88db      	ldrh	r3, [r3, #6]
 800e24e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e250:	4313      	orrs	r3, r2
 800e252:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800e254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e256:	b29a      	uxth	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	899b      	ldrh	r3, [r3, #12]
 800e260:	b29b      	uxth	r3, r3
 800e262:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800e264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e266:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800e26a:	f023 030c 	bic.w	r3, r3, #12
 800e26e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	889a      	ldrh	r2, [r3, #4]
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	891b      	ldrh	r3, [r3, #8]
 800e278:	4313      	orrs	r3, r2
 800e27a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800e280:	4313      	orrs	r3, r2
 800e282:	b29b      	uxth	r3, r3
 800e284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e286:	4313      	orrs	r3, r2
 800e288:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800e28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28c:	b29a      	uxth	r2, r3
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	8a9b      	ldrh	r3, [r3, #20]
 800e296:	b29b      	uxth	r3, r3
 800e298:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800e29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	899b      	ldrh	r3, [r3, #12]
 800e2a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800e2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ae:	b29a      	uxth	r2, r3
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800e2b4:	f107 0308 	add.w	r3, r7, #8
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7fa fd1d 	bl	8008cf8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800e2be:	687a      	ldr	r2, [r7, #4]
 800e2c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d006      	beq.n	800e2da <USART_Init+0xc2>
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e2d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d102      	bne.n	800e2e0 <USART_Init+0xc8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	623b      	str	r3, [r7, #32]
 800e2de:	e001      	b.n	800e2e4 <USART_Init+0xcc>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	899b      	ldrh	r3, [r3, #12]
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	b21b      	sxth	r3, r3
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	da0f      	bge.n	800e312 <USART_Init+0xfa>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800e2f2:	6a3a      	ldr	r2, [r7, #32]
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e2fa:	189b      	adds	r3, r3, r2
 800e2fc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800e300:	189a      	adds	r2, r3, r2
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e30a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e30e:	61fb      	str	r3, [r7, #28]
 800e310:	e00e      	b.n	800e330 <USART_Init+0x118>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800e312:	6a3a      	ldr	r2, [r7, #32]
 800e314:	4613      	mov	r3, r2
 800e316:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e31a:	189b      	adds	r3, r3, r2
 800e31c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800e320:	189a      	adds	r2, r3, r2
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e32a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e32e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800e330:	69fa      	ldr	r2, [r7, #28]
 800e332:	f248 531f 	movw	r3, #34079	; 0x851f
 800e336:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800e33a:	fba3 1302 	umull	r1, r3, r3, r2
 800e33e:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800e342:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800e346:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800e348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34a:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800e34e:	f04f 0264 	mov.w	r2, #100	; 0x64
 800e352:	fb02 f303 	mul.w	r3, r2, r3
 800e356:	69fa      	ldr	r2, [r7, #28]
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	899b      	ldrh	r3, [r3, #12]
 800e360:	b29b      	uxth	r3, r3
 800e362:	b29b      	uxth	r3, r3
 800e364:	b21b      	sxth	r3, r3
 800e366:	2b00      	cmp	r3, #0
 800e368:	da12      	bge.n	800e390 <USART_Init+0x178>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800e370:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800e374:	f248 531f 	movw	r3, #34079	; 0x851f
 800e378:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800e37c:	fba3 1302 	umull	r1, r3, r3, r2
 800e380:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800e384:	f003 0307 	and.w	r3, r3, #7
 800e388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e38a:	4313      	orrs	r3, r2
 800e38c:	627b      	str	r3, [r7, #36]	; 0x24
 800e38e:	e011      	b.n	800e3b4 <USART_Init+0x19c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800e396:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800e39a:	f248 531f 	movw	r3, #34079	; 0x851f
 800e39e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800e3a2:	fba3 1302 	umull	r1, r3, r3, r2
 800e3a6:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800e3aa:	f003 030f 	and.w	r3, r3, #15
 800e3ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3b0:	4313      	orrs	r3, r2
 800e3b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800e3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b6:	b29a      	uxth	r2, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	811a      	strh	r2, [r3, #8]
}
 800e3bc:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800e3d2:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f04f 0200 	mov.w	r2, #0
 800e3da:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f04f 0200 	mov.w	r2, #0
 800e3e2:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f04f 0200 	mov.w	r2, #0
 800e3ea:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f04f 020c 	mov.w	r2, #12
 800e3f2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f04f 0200 	mov.w	r2, #0
 800e3fa:	819a      	strh	r2, [r3, #12]
}
 800e3fc:	f107 070c 	add.w	r7, r7, #12
 800e400:	46bd      	mov	sp, r7
 800e402:	bc80      	pop	{r7}
 800e404:	4770      	bx	lr
 800e406:	bf00      	nop

0800e408 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800e408:	b480      	push	{r7}
 800e40a:	b085      	sub	sp, #20
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 800e412:	f04f 0300 	mov.w	r3, #0
 800e416:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	8a1b      	ldrh	r3, [r3, #16]
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e426:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	881a      	ldrh	r2, [r3, #0]
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800e430:	4313      	orrs	r3, r2
 800e432:	b29a      	uxth	r2, r3
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	889b      	ldrh	r3, [r3, #4]
 800e438:	4313      	orrs	r3, r2
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	88db      	ldrh	r3, [r3, #6]
 800e440:	4313      	orrs	r3, r2
 800e442:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800e444:	68fa      	ldr	r2, [r7, #12]
 800e446:	4313      	orrs	r3, r2
 800e448:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	b29a      	uxth	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	821a      	strh	r2, [r3, #16]
}
 800e452:	f107 0714 	add.w	r7, r7, #20
 800e456:	46bd      	mov	sp, r7
 800e458:	bc80      	pop	{r7}
 800e45a:	4770      	bx	lr

0800e45c <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b083      	sub	sp, #12
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f04f 0200 	mov.w	r2, #0
 800e46a:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f04f 0200 	mov.w	r2, #0
 800e472:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f04f 0200 	mov.w	r2, #0
 800e47a:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f04f 0200 	mov.w	r2, #0
 800e482:	80da      	strh	r2, [r3, #6]
}
 800e484:	f107 070c 	add.w	r7, r7, #12
 800e488:	46bd      	mov	sp, r7
 800e48a:	bc80      	pop	{r7}
 800e48c:	4770      	bx	lr
 800e48e:	bf00      	nop

0800e490 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	460b      	mov	r3, r1
 800e49a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e49c:	78fb      	ldrb	r3, [r7, #3]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d008      	beq.n	800e4b4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	899b      	ldrh	r3, [r3, #12]
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e4ac:	b29a      	uxth	r2, r3
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	819a      	strh	r2, [r3, #12]
 800e4b2:	e007      	b.n	800e4c4 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	899b      	ldrh	r3, [r3, #12]
 800e4b8:	b29b      	uxth	r3, r3
 800e4ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e4be:	b29a      	uxth	r2, r3
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	819a      	strh	r2, [r3, #12]
  }
}
 800e4c4:	f107 070c 	add.w	r7, r7, #12
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bc80      	pop	{r7}
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop

0800e4d0 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 800e4d0:	b480      	push	{r7}
 800e4d2:	b083      	sub	sp, #12
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	460b      	mov	r3, r1
 800e4da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	8b1b      	ldrh	r3, [r3, #24]
 800e4e0:	b29b      	uxth	r3, r3
 800e4e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e4e6:	b29a      	uxth	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	8b1b      	ldrh	r3, [r3, #24]
 800e4f0:	b29a      	uxth	r2, r3
 800e4f2:	78fb      	ldrb	r3, [r7, #3]
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	4313      	orrs	r3, r2
 800e4f8:	b29a      	uxth	r2, r3
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	831a      	strh	r2, [r3, #24]
}
 800e4fe:	f107 070c 	add.w	r7, r7, #12
 800e502:	46bd      	mov	sp, r7
 800e504:	bc80      	pop	{r7}
 800e506:	4770      	bx	lr

0800e508 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	460b      	mov	r3, r1
 800e512:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e514:	78fb      	ldrb	r3, [r7, #3]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d00a      	beq.n	800e530 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	899b      	ldrh	r3, [r3, #12]
 800e51e:	b29b      	uxth	r3, r3
 800e520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e528:	b29a      	uxth	r2, r3
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	819a      	strh	r2, [r3, #12]
 800e52e:	e009      	b.n	800e544 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	899b      	ldrh	r3, [r3, #12]
 800e534:	b29b      	uxth	r3, r3
 800e536:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800e53a:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800e53e:	b29a      	uxth	r2, r3
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	819a      	strh	r2, [r3, #12]
  }
}  
 800e544:	f107 070c 	add.w	r7, r7, #12
 800e548:	46bd      	mov	sp, r7
 800e54a:	bc80      	pop	{r7}
 800e54c:	4770      	bx	lr
 800e54e:	bf00      	nop

0800e550 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	460b      	mov	r3, r1
 800e55a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e55c:	78fb      	ldrb	r3, [r7, #3]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d008      	beq.n	800e574 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	8a9b      	ldrh	r3, [r3, #20]
 800e566:	b29b      	uxth	r3, r3
 800e568:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e56c:	b29a      	uxth	r2, r3
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	829a      	strh	r2, [r3, #20]
 800e572:	e007      	b.n	800e584 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	8a9b      	ldrh	r3, [r3, #20]
 800e578:	b29b      	uxth	r3, r3
 800e57a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e57e:	b29a      	uxth	r2, r3
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	829a      	strh	r2, [r3, #20]
  }
}
 800e584:	f107 070c 	add.w	r7, r7, #12
 800e588:	46bd      	mov	sp, r7
 800e58a:	bc80      	pop	{r7}
 800e58c:	4770      	bx	lr
 800e58e:	bf00      	nop

0800e590 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800e590:	b480      	push	{r7}
 800e592:	b083      	sub	sp, #12
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	460b      	mov	r3, r1
 800e59a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800e59c:	887b      	ldrh	r3, [r7, #2]
 800e59e:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800e5a2:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800e5a6:	b29a      	uxth	r2, r3
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	809a      	strh	r2, [r3, #4]
}
 800e5ac:	f107 070c 	add.w	r7, r7, #12
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bc80      	pop	{r7}
 800e5b4:	4770      	bx	lr
 800e5b6:	bf00      	nop

0800e5b8 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b083      	sub	sp, #12
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	889b      	ldrh	r3, [r3, #4]
 800e5c4:	b29b      	uxth	r3, r3
 800e5c6:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800e5ca:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800e5ce:	b29b      	uxth	r3, r3
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f107 070c 	add.w	r7, r7, #12
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bc80      	pop	{r7}
 800e5da:	4770      	bx	lr

0800e5dc <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b083      	sub	sp, #12
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	8a1b      	ldrh	r3, [r3, #16]
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	f023 030f 	bic.w	r3, r3, #15
 800e5f2:	b29a      	uxth	r2, r3
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	8a1b      	ldrh	r3, [r3, #16]
 800e5fc:	b29a      	uxth	r2, r3
 800e5fe:	78fb      	ldrb	r3, [r7, #3]
 800e600:	b29b      	uxth	r3, r3
 800e602:	4313      	orrs	r3, r2
 800e604:	b29a      	uxth	r2, r3
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	821a      	strh	r2, [r3, #16]
}
 800e60a:	f107 070c 	add.w	r7, r7, #12
 800e60e:	46bd      	mov	sp, r7
 800e610:	bc80      	pop	{r7}
 800e612:	4770      	bx	lr

0800e614 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	460b      	mov	r3, r1
 800e61e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 800e620:	78fb      	ldrb	r3, [r7, #3]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d008      	beq.n	800e638 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	899b      	ldrh	r3, [r3, #12]
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	f043 0302 	orr.w	r3, r3, #2
 800e630:	b29a      	uxth	r2, r3
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	819a      	strh	r2, [r3, #12]
 800e636:	e007      	b.n	800e648 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	899b      	ldrh	r3, [r3, #12]
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	f023 0302 	bic.w	r3, r3, #2
 800e642:	b29a      	uxth	r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	819a      	strh	r2, [r3, #12]
  }
}
 800e648:	f107 070c 	add.w	r7, r7, #12
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bc80      	pop	{r7}
 800e650:	4770      	bx	lr
 800e652:	bf00      	nop

0800e654 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 800e654:	b480      	push	{r7}
 800e656:	b083      	sub	sp, #12
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	460b      	mov	r3, r1
 800e65e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	899b      	ldrh	r3, [r3, #12]
 800e664:	b29b      	uxth	r3, r3
 800e666:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e66a:	b29a      	uxth	r2, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	899b      	ldrh	r3, [r3, #12]
 800e674:	b29a      	uxth	r2, r3
 800e676:	887b      	ldrh	r3, [r7, #2]
 800e678:	4313      	orrs	r3, r2
 800e67a:	b29a      	uxth	r2, r3
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	819a      	strh	r2, [r3, #12]
}
 800e680:	f107 070c 	add.w	r7, r7, #12
 800e684:	46bd      	mov	sp, r7
 800e686:	bc80      	pop	{r7}
 800e688:	4770      	bx	lr
 800e68a:	bf00      	nop

0800e68c <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b083      	sub	sp, #12
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	460b      	mov	r3, r1
 800e696:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	8a1b      	ldrh	r3, [r3, #16]
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	f023 0320 	bic.w	r3, r3, #32
 800e6a2:	b29a      	uxth	r2, r3
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	8a1b      	ldrh	r3, [r3, #16]
 800e6ac:	b29a      	uxth	r2, r3
 800e6ae:	887b      	ldrh	r3, [r7, #2]
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	b29a      	uxth	r2, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	821a      	strh	r2, [r3, #16]
}
 800e6b8:	f107 070c 	add.w	r7, r7, #12
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bc80      	pop	{r7}
 800e6c0:	4770      	bx	lr
 800e6c2:	bf00      	nop

0800e6c4 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b083      	sub	sp, #12
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e6d0:	78fb      	ldrb	r3, [r7, #3]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d008      	beq.n	800e6e8 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	8a1b      	ldrh	r3, [r3, #16]
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	821a      	strh	r2, [r3, #16]
 800e6e6:	e007      	b.n	800e6f8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	8a1b      	ldrh	r3, [r3, #16]
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e6f2:	b29a      	uxth	r2, r3
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	821a      	strh	r2, [r3, #16]
  }
}
 800e6f8:	f107 070c 	add.w	r7, r7, #12
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bc80      	pop	{r7}
 800e700:	4770      	bx	lr
 800e702:	bf00      	nop

0800e704 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 800e704:	b480      	push	{r7}
 800e706:	b083      	sub	sp, #12
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	899b      	ldrh	r3, [r3, #12]
 800e710:	b29b      	uxth	r3, r3
 800e712:	f043 0301 	orr.w	r3, r3, #1
 800e716:	b29a      	uxth	r2, r3
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	819a      	strh	r2, [r3, #12]
}
 800e71c:	f107 070c 	add.w	r7, r7, #12
 800e720:	46bd      	mov	sp, r7
 800e722:	bc80      	pop	{r7}
 800e724:	4770      	bx	lr
 800e726:	bf00      	nop

0800e728 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e728:	b480      	push	{r7}
 800e72a:	b083      	sub	sp, #12
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	460b      	mov	r3, r1
 800e732:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e734:	78fb      	ldrb	r3, [r7, #3]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d008      	beq.n	800e74c <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	8a9b      	ldrh	r3, [r3, #20]
 800e73e:	b29b      	uxth	r3, r3
 800e740:	f043 0308 	orr.w	r3, r3, #8
 800e744:	b29a      	uxth	r2, r3
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	829a      	strh	r2, [r3, #20]
 800e74a:	e007      	b.n	800e75c <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	8a9b      	ldrh	r3, [r3, #20]
 800e750:	b29b      	uxth	r3, r3
 800e752:	f023 0308 	bic.w	r3, r3, #8
 800e756:	b29a      	uxth	r2, r3
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	829a      	strh	r2, [r3, #20]
  }
}
 800e75c:	f107 070c 	add.w	r7, r7, #12
 800e760:	46bd      	mov	sp, r7
 800e762:	bc80      	pop	{r7}
 800e764:	4770      	bx	lr
 800e766:	bf00      	nop

0800e768 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 800e768:	b480      	push	{r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	460b      	mov	r3, r1
 800e772:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	8b1b      	ldrh	r3, [r3, #24]
 800e778:	b29b      	uxth	r3, r3
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	b29a      	uxth	r2, r3
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	8b1b      	ldrh	r3, [r3, #24]
 800e786:	b29a      	uxth	r2, r3
 800e788:	78fb      	ldrb	r3, [r7, #3]
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e790:	b29b      	uxth	r3, r3
 800e792:	4313      	orrs	r3, r2
 800e794:	b29a      	uxth	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	831a      	strh	r2, [r3, #24]
}
 800e79a:	f107 070c 	add.w	r7, r7, #12
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bc80      	pop	{r7}
 800e7a2:	4770      	bx	lr

0800e7a4 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e7b0:	78fb      	ldrb	r3, [r7, #3]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d008      	beq.n	800e7c8 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	8a9b      	ldrh	r3, [r3, #20]
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	f043 0320 	orr.w	r3, r3, #32
 800e7c0:	b29a      	uxth	r2, r3
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	829a      	strh	r2, [r3, #20]
 800e7c6:	e007      	b.n	800e7d8 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	8a9b      	ldrh	r3, [r3, #20]
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	f023 0320 	bic.w	r3, r3, #32
 800e7d2:	b29a      	uxth	r2, r3
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	829a      	strh	r2, [r3, #20]
  }
}
 800e7d8:	f107 070c 	add.w	r7, r7, #12
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bc80      	pop	{r7}
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop

0800e7e4 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e7f0:	78fb      	ldrb	r3, [r7, #3]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d008      	beq.n	800e808 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	8a9b      	ldrh	r3, [r3, #20]
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	f043 0310 	orr.w	r3, r3, #16
 800e800:	b29a      	uxth	r2, r3
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	829a      	strh	r2, [r3, #20]
 800e806:	e007      	b.n	800e818 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	8a9b      	ldrh	r3, [r3, #20]
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	f023 0310 	bic.w	r3, r3, #16
 800e812:	b29a      	uxth	r2, r3
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	829a      	strh	r2, [r3, #20]
  }
}
 800e818:	f107 070c 	add.w	r7, r7, #12
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bc80      	pop	{r7}
 800e820:	4770      	bx	lr
 800e822:	bf00      	nop

0800e824 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	460b      	mov	r3, r1
 800e82e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	8a9b      	ldrh	r3, [r3, #20]
 800e834:	b29b      	uxth	r3, r3
 800e836:	f023 0304 	bic.w	r3, r3, #4
 800e83a:	b29a      	uxth	r2, r3
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	8a9b      	ldrh	r3, [r3, #20]
 800e844:	b29a      	uxth	r2, r3
 800e846:	887b      	ldrh	r3, [r7, #2]
 800e848:	4313      	orrs	r3, r2
 800e84a:	b29a      	uxth	r2, r3
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	829a      	strh	r2, [r3, #20]
}
 800e850:	f107 070c 	add.w	r7, r7, #12
 800e854:	46bd      	mov	sp, r7
 800e856:	bc80      	pop	{r7}
 800e858:	4770      	bx	lr
 800e85a:	bf00      	nop

0800e85c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b083      	sub	sp, #12
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	460b      	mov	r3, r1
 800e866:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800e868:	78fb      	ldrb	r3, [r7, #3]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d008      	beq.n	800e880 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	8a9b      	ldrh	r3, [r3, #20]
 800e872:	b29b      	uxth	r3, r3
 800e874:	f043 0302 	orr.w	r3, r3, #2
 800e878:	b29a      	uxth	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	829a      	strh	r2, [r3, #20]
 800e87e:	e007      	b.n	800e890 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	8a9b      	ldrh	r3, [r3, #20]
 800e884:	b29b      	uxth	r3, r3
 800e886:	f023 0302 	bic.w	r3, r3, #2
 800e88a:	b29a      	uxth	r2, r3
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	829a      	strh	r2, [r3, #20]
  }
}
 800e890:	f107 070c 	add.w	r7, r7, #12
 800e894:	46bd      	mov	sp, r7
 800e896:	bc80      	pop	{r7}
 800e898:	4770      	bx	lr
 800e89a:	bf00      	nop

0800e89c <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 800e89c:	b480      	push	{r7}
 800e89e:	b083      	sub	sp, #12
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	460a      	mov	r2, r1
 800e8a8:	807a      	strh	r2, [r7, #2]
 800e8aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800e8ac:	787b      	ldrb	r3, [r7, #1]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d008      	beq.n	800e8c4 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	8a9b      	ldrh	r3, [r3, #20]
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	887b      	ldrh	r3, [r7, #2]
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	b29a      	uxth	r2, r3
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	829a      	strh	r2, [r3, #20]
 800e8c2:	e00a      	b.n	800e8da <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	8a9b      	ldrh	r3, [r3, #20]
 800e8c8:	b29a      	uxth	r2, r3
 800e8ca:	887b      	ldrh	r3, [r7, #2]
 800e8cc:	ea6f 0303 	mvn.w	r3, r3
 800e8d0:	b29b      	uxth	r3, r3
 800e8d2:	4013      	ands	r3, r2
 800e8d4:	b29a      	uxth	r2, r3
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	829a      	strh	r2, [r3, #20]
  }
}
 800e8da:	f107 070c 	add.w	r7, r7, #12
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bc80      	pop	{r7}
 800e8e2:	4770      	bx	lr

0800e8e4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b087      	sub	sp, #28
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	4613      	mov	r3, r2
 800e8ee:	460a      	mov	r2, r1
 800e8f0:	807a      	strh	r2, [r7, #2]
 800e8f2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800e8f4:	f04f 0300 	mov.w	r3, #0
 800e8f8:	613b      	str	r3, [r7, #16]
 800e8fa:	f04f 0300 	mov.w	r3, #0
 800e8fe:	60fb      	str	r3, [r7, #12]
 800e900:	f04f 0300 	mov.w	r3, #0
 800e904:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800e906:	f04f 0300 	mov.w	r3, #0
 800e90a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800e910:	887b      	ldrh	r3, [r7, #2]
 800e912:	b2db      	uxtb	r3, r3
 800e914:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800e918:	b2db      	uxtb	r3, r3
 800e91a:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800e91c:	887b      	ldrh	r3, [r7, #2]
 800e91e:	f003 031f 	and.w	r3, r3, #31
 800e922:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f04f 0201 	mov.w	r2, #1
 800e92a:	fa02 f303 	lsl.w	r3, r2, r3
 800e92e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	2b01      	cmp	r3, #1
 800e934:	d104      	bne.n	800e940 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	f103 030c 	add.w	r3, r3, #12
 800e93c:	617b      	str	r3, [r7, #20]
 800e93e:	e00b      	b.n	800e958 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	2b02      	cmp	r3, #2
 800e944:	d104      	bne.n	800e950 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	f103 0310 	add.w	r3, r3, #16
 800e94c:	617b      	str	r3, [r7, #20]
 800e94e:	e003      	b.n	800e958 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	f103 0314 	add.w	r3, r3, #20
 800e956:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800e958:	787b      	ldrb	r3, [r7, #1]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d006      	beq.n	800e96c <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	697a      	ldr	r2, [r7, #20]
 800e962:	6811      	ldr	r1, [r2, #0]
 800e964:	68ba      	ldr	r2, [r7, #8]
 800e966:	430a      	orrs	r2, r1
 800e968:	601a      	str	r2, [r3, #0]
 800e96a:	e007      	b.n	800e97c <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	697a      	ldr	r2, [r7, #20]
 800e970:	6811      	ldr	r1, [r2, #0]
 800e972:	68ba      	ldr	r2, [r7, #8]
 800e974:	ea6f 0202 	mvn.w	r2, r2
 800e978:	400a      	ands	r2, r1
 800e97a:	601a      	str	r2, [r3, #0]
  }
}
 800e97c:	f107 071c 	add.w	r7, r7, #28
 800e980:	46bd      	mov	sp, r7
 800e982:	bc80      	pop	{r7}
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop

0800e988 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800e988:	b480      	push	{r7}
 800e98a:	b085      	sub	sp, #20
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	460b      	mov	r3, r1
 800e992:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800e994:	f04f 0300 	mov.w	r3, #0
 800e998:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	881b      	ldrh	r3, [r3, #0]
 800e99e:	b29a      	uxth	r2, r3
 800e9a0:	887b      	ldrh	r3, [r7, #2]
 800e9a2:	4013      	ands	r3, r2
 800e9a4:	b29b      	uxth	r3, r3
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d003      	beq.n	800e9b2 <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800e9aa:	f04f 0301 	mov.w	r3, #1
 800e9ae:	73fb      	strb	r3, [r7, #15]
 800e9b0:	e002      	b.n	800e9b8 <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800e9b2:	f04f 0300 	mov.w	r3, #0
 800e9b6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f107 0714 	add.w	r7, r7, #20
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bc80      	pop	{r7}
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop

0800e9c8 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 800e9d4:	887b      	ldrh	r3, [r7, #2]
 800e9d6:	ea6f 0303 	mvn.w	r3, r3
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	801a      	strh	r2, [r3, #0]
}
 800e9e0:	f107 070c 	add.w	r7, r7, #12
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bc80      	pop	{r7}
 800e9e8:	4770      	bx	lr
 800e9ea:	bf00      	nop

0800e9ec <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b087      	sub	sp, #28
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800e9f8:	f04f 0300 	mov.w	r3, #0
 800e9fc:	60fb      	str	r3, [r7, #12]
 800e9fe:	f04f 0300 	mov.w	r3, #0
 800ea02:	617b      	str	r3, [r7, #20]
 800ea04:	f04f 0300 	mov.w	r3, #0
 800ea08:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800ea0a:	f04f 0300 	mov.w	r3, #0
 800ea0e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800ea10:	887b      	ldrh	r3, [r7, #2]
 800ea12:	b2db      	uxtb	r3, r3
 800ea14:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800ea1c:	887b      	ldrh	r3, [r7, #2]
 800ea1e:	f003 031f 	and.w	r3, r3, #31
 800ea22:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	f04f 0201 	mov.w	r2, #1
 800ea2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ea2e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d106      	bne.n	800ea44 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	899b      	ldrh	r3, [r3, #12]
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	697a      	ldr	r2, [r7, #20]
 800ea3e:	4013      	ands	r3, r2
 800ea40:	617b      	str	r3, [r7, #20]
 800ea42:	e00f      	b.n	800ea64 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	2b02      	cmp	r3, #2
 800ea48:	d106      	bne.n	800ea58 <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	8a1b      	ldrh	r3, [r3, #16]
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	697a      	ldr	r2, [r7, #20]
 800ea52:	4013      	ands	r3, r2
 800ea54:	617b      	str	r3, [r7, #20]
 800ea56:	e005      	b.n	800ea64 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	8a9b      	ldrh	r3, [r3, #20]
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	697a      	ldr	r2, [r7, #20]
 800ea60:	4013      	ands	r3, r2
 800ea62:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800ea64:	887b      	ldrh	r3, [r7, #2]
 800ea66:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	f04f 0201 	mov.w	r2, #1
 800ea74:	fa02 f303 	lsl.w	r3, r2, r3
 800ea78:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	881b      	ldrh	r3, [r3, #0]
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	68fa      	ldr	r2, [r7, #12]
 800ea82:	4013      	ands	r3, r2
 800ea84:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d006      	beq.n	800ea9a <USART_GetITStatus+0xae>
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d003      	beq.n	800ea9a <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
 800ea92:	f04f 0301 	mov.w	r3, #1
 800ea96:	74fb      	strb	r3, [r7, #19]
 800ea98:	e002      	b.n	800eaa0 <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
 800ea9a:	f04f 0300 	mov.w	r3, #0
 800ea9e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800eaa0:	7cfb      	ldrb	r3, [r7, #19]
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f107 071c 	add.w	r7, r7, #28
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bc80      	pop	{r7}
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop

0800eab0 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b085      	sub	sp, #20
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	460b      	mov	r3, r1
 800eaba:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800eabc:	f04f 0300 	mov.w	r3, #0
 800eac0:	81fb      	strh	r3, [r7, #14]
 800eac2:	f04f 0300 	mov.w	r3, #0
 800eac6:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 800eac8:	887b      	ldrh	r3, [r7, #2]
 800eaca:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800eace:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800ead0:	89fb      	ldrh	r3, [r7, #14]
 800ead2:	f04f 0201 	mov.w	r2, #1
 800ead6:	fa02 f303 	lsl.w	r3, r2, r3
 800eada:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 800eadc:	89bb      	ldrh	r3, [r7, #12]
 800eade:	ea6f 0303 	mvn.w	r3, r3
 800eae2:	b29a      	uxth	r2, r3
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	801a      	strh	r2, [r3, #0]
}
 800eae8:	f107 0714 	add.w	r7, r7, #20
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bc80      	pop	{r7}
 800eaf0:	4770      	bx	lr
 800eaf2:	bf00      	nop

0800eaf4 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 800eaf8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800eafc:	f04f 0101 	mov.w	r1, #1
 800eb00:	f7fa fb9a 	bl	8009238 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 800eb04:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800eb08:	f04f 0100 	mov.w	r1, #0
 800eb0c:	f7fa fb94 	bl	8009238 <RCC_APB1PeriphResetCmd>
}
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop

0800eb14 <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b085      	sub	sp, #20
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800eb1c:	f04f 0300 	mov.w	r3, #0
 800eb20:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 800eb22:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800eb26:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800eb2a:	685b      	ldr	r3, [r3, #4]
 800eb2c:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800eb30:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 800eb32:	68fa      	ldr	r2, [r7, #12]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	4313      	orrs	r3, r2
 800eb38:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 800eb3a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800eb3e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800eb42:	68fa      	ldr	r2, [r7, #12]
 800eb44:	605a      	str	r2, [r3, #4]
}
 800eb46:	f107 0714 	add.w	r7, r7, #20
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bc80      	pop	{r7}
 800eb4e:	4770      	bx	lr

0800eb50 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b085      	sub	sp, #20
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	4603      	mov	r3, r0
 800eb58:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 800eb5a:	f04f 0300 	mov.w	r3, #0
 800eb5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 800eb60:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800eb64:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eb6e:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 800eb70:	79fb      	ldrb	r3, [r7, #7]
 800eb72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	4313      	orrs	r3, r2
 800eb7a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 800eb7c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800eb80:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800eb84:	68fa      	ldr	r2, [r7, #12]
 800eb86:	605a      	str	r2, [r3, #4]
}
 800eb88:	f107 0714 	add.w	r7, r7, #20
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bc80      	pop	{r7}
 800eb90:	4770      	bx	lr
 800eb92:	bf00      	nop

0800eb94 <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset.
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 800eb94:	b480      	push	{r7}
 800eb96:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 800eb98:	f248 03a4 	movw	r3, #32932	; 0x80a4
 800eb9c:	f2c4 2305 	movt	r3, #16901	; 0x4205
 800eba0:	f04f 0201 	mov.w	r2, #1
 800eba4:	601a      	str	r2, [r3, #0]
}
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bc80      	pop	{r7}
 800ebaa:	4770      	bx	lr

0800ebac <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset) 
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 800ebb6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ebba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ebbe:	79fa      	ldrb	r2, [r7, #7]
 800ebc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ebc4:	601a      	str	r2, [r3, #0]
}
 800ebc6:	f107 070c 	add.w	r7, r7, #12
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bc80      	pop	{r7}
 800ebce:	4770      	bx	lr

0800ebd0 <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset)
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 800ebda:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ebde:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ebe2:	79fa      	ldrb	r2, [r7, #7]
 800ebe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ebe8:	b2d2      	uxtb	r2, r2
 800ebea:	601a      	str	r2, [r3, #0]
}
 800ebec:	f107 070c 	add.w	r7, r7, #12
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bc80      	pop	{r7}
 800ebf4:	4770      	bx	lr
 800ebf6:	bf00      	nop

0800ebf8 <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b083      	sub	sp, #12
 800ebfc:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800ebfe:	f04f 0300 	mov.w	r3, #0
 800ec02:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 800ec04:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ec08:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ec0c:	689b      	ldr	r3, [r3, #8]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d003      	beq.n	800ec1a <WWDG_GetFlagStatus+0x22>
  {
    bitstatus = SET;
 800ec12:	f04f 0301 	mov.w	r3, #1
 800ec16:	71fb      	strb	r3, [r7, #7]
 800ec18:	e002      	b.n	800ec20 <WWDG_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 800ec1a:	f04f 0300 	mov.w	r3, #0
 800ec1e:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800ec20:	79fb      	ldrb	r3, [r7, #7]
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	f107 070c 	add.w	r7, r7, #12
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bc80      	pop	{r7}
 800ec2c:	4770      	bx	lr
 800ec2e:	bf00      	nop

0800ec30 <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 800ec30:	b480      	push	{r7}
 800ec32:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 800ec34:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ec38:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ec3c:	f04f 0200 	mov.w	r2, #0
 800ec40:	609a      	str	r2, [r3, #8]
}
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bc80      	pop	{r7}
 800ec46:	4770      	bx	lr

0800ec48 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b083      	sub	sp, #12
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	4603      	mov	r3, r0
 800ec50:	6039      	str	r1, [r7, #0]
 800ec52:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800ec54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	da10      	bge.n	800ec7e <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800ec5c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800ec60:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ec64:	79fa      	ldrb	r2, [r7, #7]
 800ec66:	f002 020f 	and.w	r2, r2, #15
 800ec6a:	f1a2 0104 	sub.w	r1, r2, #4
 800ec6e:	683a      	ldr	r2, [r7, #0]
 800ec70:	b2d2      	uxtb	r2, r2
 800ec72:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800ec76:	b2d2      	uxtb	r2, r2
 800ec78:	185b      	adds	r3, r3, r1
 800ec7a:	761a      	strb	r2, [r3, #24]
 800ec7c:	e00d      	b.n	800ec9a <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800ec7e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800ec82:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ec86:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800ec8a:	683a      	ldr	r2, [r7, #0]
 800ec8c:	b2d2      	uxtb	r2, r2
 800ec8e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800ec92:	b2d2      	uxtb	r2, r2
 800ec94:	185b      	adds	r3, r3, r1
 800ec96:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ec9a:	f107 070c 	add.w	r7, r7, #12
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bc80      	pop	{r7}
 800eca2:	4770      	bx	lr

0800eca4 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b082      	sub	sp, #8
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800ecac:	687a      	ldr	r2, [r7, #4]
 800ecae:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d902      	bls.n	800ecbc <SysTick_Config+0x18>
 800ecb6:	f04f 0301 	mov.w	r3, #1
 800ecba:	e01f      	b.n	800ecfc <SysTick_Config+0x58>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800ecbc:	f24e 0310 	movw	r3, #57360	; 0xe010
 800ecc0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800ecca:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800ecce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 800ecd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ecd4:	f04f 010f 	mov.w	r1, #15
 800ecd8:	f7ff ffb6 	bl	800ec48 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800ecdc:	f24e 0310 	movw	r3, #57360	; 0xe010
 800ece0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ece4:	f04f 0200 	mov.w	r2, #0
 800ece8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ecea:	f24e 0310 	movw	r3, #57360	; 0xe010
 800ecee:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ecf2:	f04f 0207 	mov.w	r2, #7
 800ecf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800ecf8:	f04f 0300 	mov.w	r3, #0
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f107 0708 	add.w	r7, r7, #8
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop

0800ed08 <main>:
  * @brief   Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	af00      	add	r7, sp, #0
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f4xx.c file
     */     

  /* SysTick end of count event each 10ms */
  RCC_GetClocksFreq(&RCC_Clocks);
 800ed0c:	f240 0094 	movw	r0, #148	; 0x94
 800ed10:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ed14:	f7f9 fff0 	bl	8008cf8 <RCC_GetClocksFreq>
  SysTick_Config(RCC_Clocks.HCLK_Frequency / 100);
 800ed18:	f240 0394 	movw	r3, #148	; 0x94
 800ed1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed20:	685a      	ldr	r2, [r3, #4]
 800ed22:	f248 531f 	movw	r3, #34079	; 0x851f
 800ed26:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800ed2a:	fba3 1302 	umull	r1, r3, r3, r2
 800ed2e:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7ff ffb6 	bl	800eca4 <SysTick_Config>
         
  /* Initialize LEDs and push-buttons mounted on STM324xG-EVAL board */
  STM_EVAL_LEDInit(LED1);
 800ed38:	f04f 0000 	mov.w	r0, #0
 800ed3c:	f000 f912 	bl	800ef64 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED2);
 800ed40:	f04f 0001 	mov.w	r0, #1
 800ed44:	f000 f90e 	bl	800ef64 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED3);
 800ed48:	f04f 0002 	mov.w	r0, #2
 800ed4c:	f000 f90a 	bl	800ef64 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 800ed50:	f04f 0003 	mov.w	r0, #3
 800ed54:	f000 f906 	bl	800ef64 <STM_EVAL_LEDInit>

  /* Select the Button test mode (polling or interrupt) BUTTON_MODE in main.h */
  STM_EVAL_PBInit(BUTTON_WAKEUP, BUTTON_MODE);
 800ed58:	f04f 0000 	mov.w	r0, #0
 800ed5c:	f04f 0101 	mov.w	r1, #1
 800ed60:	f000 f98c 	bl	800f07c <STM_EVAL_PBInit>
  STM_EVAL_PBInit(BUTTON_TAMPER, BUTTON_MODE);
 800ed64:	f04f 0001 	mov.w	r0, #1
 800ed68:	f04f 0101 	mov.w	r1, #1
 800ed6c:	f000 f986 	bl	800f07c <STM_EVAL_PBInit>
  STM_EVAL_PBInit(BUTTON_KEY, BUTTON_MODE);
 800ed70:	f04f 0002 	mov.w	r0, #2
 800ed74:	f04f 0101 	mov.w	r1, #1
 800ed78:	f000 f980 	bl	800f07c <STM_EVAL_PBInit>

  /* Initialize the LCD */
  STM324xG_LCD_Init();
 800ed7c:	f002 fdf4 	bl	8011968 <STM324xG_LCD_Init>
 
  /* Clear the LCD */ 
  LCD_Clear(White);
 800ed80:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ed84:	f003 f960 	bl	8012048 <LCD_Clear>
  /* Set the LCD Back Color */
  LCD_SetBackColor(Blue);
 800ed88:	f04f 001f 	mov.w	r0, #31
 800ed8c:	f003 f900 	bl	8011f90 <LCD_SetBackColor>
  /* Set the LCD Text Color */
  LCD_SetTextColor(White);    
 800ed90:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ed94:	f003 f8ea 	bl	8011f6c <LCD_SetTextColor>
 
  LCD_DisplayStringLine(Line0, (uint8_t *)"   STM324xG-EVAL    ");
 800ed98:	f003 f91c 	bl	8011fd4 <LCD_GetFont>
 800ed9c:	f04f 0000 	mov.w	r0, #0
 800eda0:	f244 4198 	movw	r1, #17560	; 0x4498
 800eda4:	f6c0 0101 	movt	r1, #2049	; 0x801
 800eda8:	f003 fa58 	bl	801225c <LCD_DisplayStringLine>
  LCD_DisplayStringLine(Line1, (uint8_t *)"  Example on how to ");
 800edac:	f003 f912 	bl	8011fd4 <LCD_GetFont>
 800edb0:	4603      	mov	r3, r0
 800edb2:	88db      	ldrh	r3, [r3, #6]
 800edb4:	4618      	mov	r0, r3
 800edb6:	f244 41b0 	movw	r1, #17584	; 0x44b0
 800edba:	f6c0 0101 	movt	r1, #2049	; 0x801
 800edbe:	f003 fa4d 	bl	801225c <LCD_DisplayStringLine>
  LCD_DisplayStringLine(Line2, (uint8_t *)" use the IO Expander");
 800edc2:	f003 f907 	bl	8011fd4 <LCD_GetFont>
 800edc6:	4603      	mov	r3, r0
 800edc8:	88db      	ldrh	r3, [r3, #6]
 800edca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800edce:	b29b      	uxth	r3, r3
 800edd0:	4618      	mov	r0, r3
 800edd2:	f244 41c8 	movw	r1, #17608	; 0x44c8
 800edd6:	f6c0 0101 	movt	r1, #2049	; 0x801
 800edda:	f003 fa3f 	bl	801225c <LCD_DisplayStringLine>
  
  /* Configure the IO Expander */
  if (IOE_Config() == IOE_OK)
 800edde:	f000 fecd 	bl	800fb7c <IOE_Config>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d14a      	bne.n	800ee7e <main+0x176>
  {
    LCD_DisplayStringLine(Line4, (uint8_t *)"   IO Expander OK   ");
 800ede8:	f003 f8f4 	bl	8011fd4 <LCD_GetFont>
 800edec:	4603      	mov	r3, r0
 800edee:	88db      	ldrh	r3, [r3, #6]
 800edf0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	4618      	mov	r0, r3
 800edf8:	f244 41e0 	movw	r1, #17632	; 0x44e0
 800edfc:	f6c0 0101 	movt	r1, #2049	; 0x801
 800ee00:	f003 fa2c 	bl	801225c <LCD_DisplayStringLine>
    LCD_DisplayStringLine(Line7, (uint8_t *)"    again          ");
    while(1);
  }

  /* Leds Control blocks */
  LCD_SetTextColor(Blue);
 800ee04:	f04f 001f 	mov.w	r0, #31
 800ee08:	f003 f8b0 	bl	8011f6c <LCD_SetTextColor>
  LCD_DrawRect(180, 310, 40, 60);
 800ee0c:	f04f 00b4 	mov.w	r0, #180	; 0xb4
 800ee10:	f44f 719b 	mov.w	r1, #310	; 0x136
 800ee14:	f04f 0228 	mov.w	r2, #40	; 0x28
 800ee18:	f04f 033c 	mov.w	r3, #60	; 0x3c
 800ee1c:	f003 fb12 	bl	8012444 <LCD_DrawRect>
  LCD_SetTextColor(Red);
 800ee20:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800ee24:	f003 f8a2 	bl	8011f6c <LCD_SetTextColor>
  LCD_DrawRect(180, 230, 40, 60);
 800ee28:	f04f 00b4 	mov.w	r0, #180	; 0xb4
 800ee2c:	f04f 01e6 	mov.w	r1, #230	; 0xe6
 800ee30:	f04f 0228 	mov.w	r2, #40	; 0x28
 800ee34:	f04f 033c 	mov.w	r3, #60	; 0x3c
 800ee38:	f003 fb04 	bl	8012444 <LCD_DrawRect>
  LCD_SetTextColor(Yellow);
 800ee3c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800ee40:	f003 f894 	bl	8011f6c <LCD_SetTextColor>
  LCD_DrawRect(180, 150, 40, 60);
 800ee44:	f04f 00b4 	mov.w	r0, #180	; 0xb4
 800ee48:	f04f 0196 	mov.w	r1, #150	; 0x96
 800ee4c:	f04f 0228 	mov.w	r2, #40	; 0x28
 800ee50:	f04f 033c 	mov.w	r3, #60	; 0x3c
 800ee54:	f003 faf6 	bl	8012444 <LCD_DrawRect>
  LCD_SetTextColor(Green);
 800ee58:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800ee5c:	f003 f886 	bl	8011f6c <LCD_SetTextColor>
  LCD_DrawRect(180, 70, 40, 60);
 800ee60:	f04f 00b4 	mov.w	r0, #180	; 0xb4
 800ee64:	f04f 0146 	mov.w	r1, #70	; 0x46
 800ee68:	f04f 0228 	mov.w	r2, #40	; 0x28
 800ee6c:	f04f 033c 	mov.w	r3, #60	; 0x3c
 800ee70:	f003 fae8 	bl	8012444 <LCD_DrawRect>

#ifdef IOE_INTERRUPT_MODE
  /* Enable the Touch Screen and Joystick interrupts */
  IOE_ITConfig(IOE_ITSRC_JOYSTICK | IOE_ITSRC_TSC); 
 800ee74:	f04f 0005 	mov.w	r0, #5
 800ee78:	f000 ff24 	bl	800fcc4 <IOE_ITConfig>
 800ee7c:	e040      	b.n	800ef00 <main+0x1f8>
  {
    LCD_DisplayStringLine(Line4, (uint8_t *)"   IO Expander OK   ");
  }
  else
  {
    LCD_DisplayStringLine(Line4, (uint8_t *)"IO Expander FAILED ");
 800ee7e:	f003 f8a9 	bl	8011fd4 <LCD_GetFont>
 800ee82:	4603      	mov	r3, r0
 800ee84:	88db      	ldrh	r3, [r3, #6]
 800ee86:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f244 41f8 	movw	r1, #17656	; 0x44f8
 800ee92:	f6c0 0101 	movt	r1, #2049	; 0x801
 800ee96:	f003 f9e1 	bl	801225c <LCD_DisplayStringLine>
    LCD_DisplayStringLine(Line5, (uint8_t *)" Please Reset the  ");
 800ee9a:	f003 f89b 	bl	8011fd4 <LCD_GetFont>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	88db      	ldrh	r3, [r3, #6]
 800eea2:	461a      	mov	r2, r3
 800eea4:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800eea8:	18d3      	adds	r3, r2, r3
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	4618      	mov	r0, r3
 800eeae:	f244 510c 	movw	r1, #17676	; 0x450c
 800eeb2:	f6c0 0101 	movt	r1, #2049	; 0x801
 800eeb6:	f003 f9d1 	bl	801225c <LCD_DisplayStringLine>
    LCD_DisplayStringLine(Line6, (uint8_t *)"   board and start ");
 800eeba:	f003 f88b 	bl	8011fd4 <LCD_GetFont>
 800eebe:	4603      	mov	r3, r0
 800eec0:	88db      	ldrh	r3, [r3, #6]
 800eec2:	461a      	mov	r2, r3
 800eec4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800eec8:	18d3      	adds	r3, r2, r3
 800eeca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eece:	b29b      	uxth	r3, r3
 800eed0:	4618      	mov	r0, r3
 800eed2:	f244 5120 	movw	r1, #17696	; 0x4520
 800eed6:	f6c0 0101 	movt	r1, #2049	; 0x801
 800eeda:	f003 f9bf 	bl	801225c <LCD_DisplayStringLine>
    LCD_DisplayStringLine(Line7, (uint8_t *)"    again          ");
 800eede:	f003 f879 	bl	8011fd4 <LCD_GetFont>
 800eee2:	4603      	mov	r3, r0
 800eee4:	88db      	ldrh	r3, [r3, #6]
 800eee6:	461a      	mov	r2, r3
 800eee8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800eeec:	1ad3      	subs	r3, r2, r3
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	4618      	mov	r0, r3
 800eef2:	f244 5134 	movw	r1, #17716	; 0x4534
 800eef6:	f6c0 0101 	movt	r1, #2049	; 0x801
 800eefa:	f003 f9af 	bl	801225c <LCD_DisplayStringLine>
    while(1);
 800eefe:	e7fe      	b.n	800eefe <main+0x1f6>
      /* Toggle LD3 */
      STM_EVAL_LEDToggle(LED3);
      LCD_DisplayStringLine(Line4, (uint8_t *)"Pol: WAKEUP Pressed ");
    }
#endif
  }
 800ef00:	e7fe      	b.n	800ef00 <main+0x1f8>
 800ef02:	bf00      	nop

0800ef04 <Delay>:
  * @brief  Inserts a delay time.
  * @param  nTime: specifies the delay time length, in 10 ms.
  * @retval None
  */
void Delay(uint32_t nTime)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b083      	sub	sp, #12
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 800ef0c:	f240 0374 	movw	r3, #116	; 0x74
 800ef10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef14:	687a      	ldr	r2, [r7, #4]
 800ef16:	601a      	str	r2, [r3, #0]

  while(TimingDelay != 0);
 800ef18:	bf00      	nop
 800ef1a:	f240 0374 	movw	r3, #116	; 0x74
 800ef1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d1f8      	bne.n	800ef1a <Delay+0x16>
}
 800ef28:	f107 070c 	add.w	r7, r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bc80      	pop	{r7}
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop

0800ef34 <TimingDelay_Decrement>:
  * @brief  Decrements the TimingDelay variable.
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement(void)
{
 800ef34:	b480      	push	{r7}
 800ef36:	af00      	add	r7, sp, #0
  if (TimingDelay != 0x00)
 800ef38:	f240 0374 	movw	r3, #116	; 0x74
 800ef3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d00b      	beq.n	800ef5e <TimingDelay_Decrement+0x2a>
  { 
    TimingDelay--;
 800ef46:	f240 0374 	movw	r3, #116	; 0x74
 800ef4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800ef54:	f240 0374 	movw	r3, #116	; 0x74
 800ef58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef5c:	601a      	str	r2, [r3, #0]
  }
}
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bc80      	pop	{r7}
 800ef62:	4770      	bx	lr

0800ef64 <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800ef6e:	79fa      	ldrb	r2, [r7, #7]
 800ef70:	f244 5350 	movw	r3, #17744	; 0x4550
 800ef74:	f6c0 0301 	movt	r3, #2049	; 0x801
 800ef78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f04f 0101 	mov.w	r1, #1
 800ef82:	f7fa f809 	bl	8008f98 <RCC_AHB1PeriphClockCmd>


  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 800ef86:	79fa      	ldrb	r2, [r7, #7]
 800ef88:	f244 5348 	movw	r3, #17736	; 0x4548
 800ef8c:	f6c0 0301 	movt	r3, #2049	; 0x801
 800ef90:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ef94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800ef96:	f04f 0301 	mov.w	r3, #1
 800ef9a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800ef9c:	f04f 0300 	mov.w	r3, #0
 800efa0:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800efa2:	f04f 0301 	mov.w	r3, #1
 800efa6:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800efa8:	f04f 0302 	mov.w	r3, #2
 800efac:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 800efae:	79fa      	ldrb	r2, [r7, #7]
 800efb0:	f240 0310 	movw	r3, #16
 800efb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800efb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800efbc:	f107 0308 	add.w	r3, r7, #8
 800efc0:	4610      	mov	r0, r2
 800efc2:	4619      	mov	r1, r3
 800efc4:	f7f7 fda2 	bl	8006b0c <GPIO_Init>
}
 800efc8:	f107 0710 	add.w	r7, r7, #16
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <STM_EVAL_LEDOn>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	4603      	mov	r3, r0
 800efd8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 800efda:	79fa      	ldrb	r2, [r7, #7]
 800efdc:	f240 0310 	movw	r3, #16
 800efe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800efe4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800efe8:	79f9      	ldrb	r1, [r7, #7]
 800efea:	f244 5348 	movw	r3, #17736	; 0x4548
 800efee:	f6c0 0301 	movt	r3, #2049	; 0x801
 800eff2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800eff6:	8313      	strh	r3, [r2, #24]
}
 800eff8:	f107 070c 	add.w	r7, r7, #12
 800effc:	46bd      	mov	sp, r7
 800effe:	bc80      	pop	{r7}
 800f000:	4770      	bx	lr
 800f002:	bf00      	nop

0800f004 <STM_EVAL_LEDOff>:
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 800f004:	b480      	push	{r7}
 800f006:	b083      	sub	sp, #12
 800f008:	af00      	add	r7, sp, #0
 800f00a:	4603      	mov	r3, r0
 800f00c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 800f00e:	79fa      	ldrb	r2, [r7, #7]
 800f010:	f240 0310 	movw	r3, #16
 800f014:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f018:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f01c:	79f9      	ldrb	r1, [r7, #7]
 800f01e:	f244 5348 	movw	r3, #17736	; 0x4548
 800f022:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f026:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800f02a:	8353      	strh	r3, [r2, #26]
}
 800f02c:	f107 070c 	add.w	r7, r7, #12
 800f030:	46bd      	mov	sp, r7
 800f032:	bc80      	pop	{r7}
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop

0800f038 <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 800f038:	b480      	push	{r7}
 800f03a:	b083      	sub	sp, #12
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	4603      	mov	r3, r0
 800f040:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 800f042:	79fa      	ldrb	r2, [r7, #7]
 800f044:	f240 0310 	movw	r3, #16
 800f048:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f04c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f050:	79f9      	ldrb	r1, [r7, #7]
 800f052:	f240 0310 	movw	r3, #16
 800f056:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f05a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f05e:	6959      	ldr	r1, [r3, #20]
 800f060:	79f8      	ldrb	r0, [r7, #7]
 800f062:	f244 5348 	movw	r3, #17736	; 0x4548
 800f066:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f06a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 800f06e:	404b      	eors	r3, r1
 800f070:	6153      	str	r3, [r2, #20]
}
 800f072:	f107 070c 	add.w	r7, r7, #12
 800f076:	46bd      	mov	sp, r7
 800f078:	bc80      	pop	{r7}
 800f07a:	4770      	bx	lr

0800f07c <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                     generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b088      	sub	sp, #32
 800f080:	af00      	add	r7, sp, #0
 800f082:	4602      	mov	r2, r0
 800f084:	460b      	mov	r3, r1
 800f086:	71fa      	strb	r2, [r7, #7]
 800f088:	71bb      	strb	r3, [r7, #6]
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;


  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 800f08a:	79fa      	ldrb	r2, [r7, #7]
 800f08c:	f244 5368 	movw	r3, #17768	; 0x4568
 800f090:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f098:	4618      	mov	r0, r3
 800f09a:	f04f 0101 	mov.w	r1, #1
 800f09e:	f7f9 ff7b 	bl	8008f98 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800f0a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f0a6:	f04f 0101 	mov.w	r1, #1
 800f0aa:	f7fa f81d 	bl	80090e8 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800f0ae:	f04f 0300 	mov.w	r3, #0
 800f0b2:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800f0b4:	f04f 0300 	mov.w	r3, #0
 800f0b8:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 800f0ba:	79fa      	ldrb	r2, [r7, #7]
 800f0bc:	f244 5360 	movw	r3, #17760	; 0x4560
 800f0c0:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f0c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f0c8:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 800f0ca:	79fa      	ldrb	r2, [r7, #7]
 800f0cc:	f240 0320 	movw	r3, #32
 800f0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f0d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f0d8:	f107 0318 	add.w	r3, r7, #24
 800f0dc:	4610      	mov	r0, r2
 800f0de:	4619      	mov	r1, r3
 800f0e0:	f7f7 fd14 	bl	8006b0c <GPIO_Init>


  if (Button_Mode == BUTTON_MODE_EXTI)
 800f0e4:	79bb      	ldrb	r3, [r7, #6]
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d147      	bne.n	800f17a <STM_EVAL_PBInit+0xfe>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 800f0ea:	79fa      	ldrb	r2, [r7, #7]
 800f0ec:	f244 537c 	movw	r3, #17788	; 0x457c
 800f0f0:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f0f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f0f8:	b2da      	uxtb	r2, r3
 800f0fa:	79f9      	ldrb	r1, [r7, #7]
 800f0fc:	f244 5384 	movw	r3, #17796	; 0x4584
 800f100:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f104:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	4610      	mov	r0, r2
 800f10c:	4619      	mov	r1, r3
 800f10e:	f7fd f8b3 	bl	800c278 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 800f112:	79fa      	ldrb	r2, [r7, #7]
 800f114:	f244 5374 	movw	r3, #17780	; 0x4574
 800f118:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f11c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f120:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800f122:	f04f 0300 	mov.w	r3, #0
 800f126:	753b      	strb	r3, [r7, #20]

    if(Button != BUTTON_WAKEUP)
 800f128:	79fb      	ldrb	r3, [r7, #7]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d003      	beq.n	800f136 <STM_EVAL_PBInit+0xba>
    {
      EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
 800f12e:	f04f 030c 	mov.w	r3, #12
 800f132:	757b      	strb	r3, [r7, #21]
 800f134:	e002      	b.n	800f13c <STM_EVAL_PBInit+0xc0>
    }
    else
    {
      EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 800f136:	f04f 0308 	mov.w	r3, #8
 800f13a:	757b      	strb	r3, [r7, #21]
    }
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800f13c:	f04f 0301 	mov.w	r3, #1
 800f140:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 800f142:	f107 0310 	add.w	r3, r7, #16
 800f146:	4618      	mov	r0, r3
 800f148:	f7f6 f816 	bl	8005178 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 800f14c:	79fa      	ldrb	r2, [r7, #7]
 800f14e:	f244 538c 	movw	r3, #17804	; 0x458c
 800f152:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f156:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 800f15e:	f04f 030f 	mov.w	r3, #15
 800f162:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 800f164:	f04f 030f 	mov.w	r3, #15
 800f168:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800f16a:	f04f 0301 	mov.w	r3, #1
 800f16e:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 800f170:	f107 030c 	add.w	r3, r7, #12
 800f174:	4618      	mov	r0, r3
 800f176:	f7f0 ff57 	bl	8000028 <NVIC_Init>
  }
}
 800f17a:	f107 0720 	add.w	r7, r7, #32
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	bf00      	nop

0800f184 <STM_EVAL_PBGetState>:
  *     @arg BUTTON_DOWN: Joystick Down Push Button
  *     @arg BUTTON_SEL: Joystick Sel Push Button    
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b082      	sub	sp, #8
 800f188:	af00      	add	r7, sp, #0
 800f18a:	4603      	mov	r3, r0
 800f18c:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800f18e:	79fa      	ldrb	r2, [r7, #7]
 800f190:	f240 0320 	movw	r3, #32
 800f194:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f198:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f19c:	79f9      	ldrb	r1, [r7, #7]
 800f19e:	f244 5360 	movw	r3, #17760	; 0x4560
 800f1a2:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f1a6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800f1aa:	4610      	mov	r0, r2
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	f7f7 fd8f 	bl	8006cd0 <GPIO_ReadInputDataBit>
 800f1b2:	4603      	mov	r3, r0
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f107 0708 	add.w	r7, r7, #8
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop

0800f1c0 <STM_EVAL_COMInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that
  *   contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b084      	sub	sp, #16
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	6039      	str	r1, [r7, #0]
 800f1ca:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIO clock */
  RCC_AHB1PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
 800f1cc:	79fa      	ldrb	r2, [r7, #7]
 800f1ce:	f244 5398 	movw	r3, #17816	; 0x4598
 800f1d2:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f1d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f1da:	79f9      	ldrb	r1, [r7, #7]
 800f1dc:	f244 539c 	movw	r3, #17820	; 0x459c
 800f1e0:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f1e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f1e8:	4313      	orrs	r3, r2
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f04f 0101 	mov.w	r1, #1
 800f1f0:	f7f9 fed2 	bl	8008f98 <RCC_AHB1PeriphClockCmd>

  if (COM == COM1)
 800f1f4:	79fb      	ldrb	r3, [r7, #7]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d10b      	bne.n	800f212 <STM_EVAL_COMInit+0x52>
  {
    /* Enable UART clock */
    RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
 800f1fa:	79fa      	ldrb	r2, [r7, #7]
 800f1fc:	f244 5394 	movw	r3, #17812	; 0x4594
 800f200:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f208:	4618      	mov	r0, r3
 800f20a:	f04f 0101 	mov.w	r1, #1
 800f20e:	f7f9 ff41 	bl	8009094 <RCC_APB1PeriphClockCmd>
  }

  /* Connect PXx to USARTx_Tx*/
  GPIO_PinAFConfig(COM_TX_PORT[COM], COM_TX_PIN_SOURCE[COM], COM_TX_AF[COM]);
 800f212:	79fa      	ldrb	r2, [r7, #7]
 800f214:	f240 0330 	movw	r3, #48	; 0x30
 800f218:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f21c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f220:	79fa      	ldrb	r2, [r7, #7]
 800f222:	f244 53a8 	movw	r3, #17832	; 0x45a8
 800f226:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f22a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800f22e:	79f8      	ldrb	r0, [r7, #7]
 800f230:	f244 53b0 	movw	r3, #17840	; 0x45b0
 800f234:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f238:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	4608      	mov	r0, r1
 800f240:	4611      	mov	r1, r2
 800f242:	461a      	mov	r2, r3
 800f244:	f7f7 fdf0 	bl	8006e28 <GPIO_PinAFConfig>

  /* Connect PXx to USARTx_Rx*/
  GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);
 800f248:	79fa      	ldrb	r2, [r7, #7]
 800f24a:	f240 0334 	movw	r3, #52	; 0x34
 800f24e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f252:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f256:	79fa      	ldrb	r2, [r7, #7]
 800f258:	f244 53ac 	movw	r3, #17836	; 0x45ac
 800f25c:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f260:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800f264:	79f8      	ldrb	r0, [r7, #7]
 800f266:	f244 53b4 	movw	r3, #17844	; 0x45b4
 800f26a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f26e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 800f272:	b2db      	uxtb	r3, r3
 800f274:	4608      	mov	r0, r1
 800f276:	4611      	mov	r1, r2
 800f278:	461a      	mov	r2, r3
 800f27a:	f7f7 fdd5 	bl	8006e28 <GPIO_PinAFConfig>

  /* Configure USART Tx as alternate function  */
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800f27e:	f04f 0300 	mov.w	r3, #0
 800f282:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800f284:	f04f 0301 	mov.w	r3, #1
 800f288:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800f28a:	f04f 0302 	mov.w	r3, #2
 800f28e:	733b      	strb	r3, [r7, #12]

  GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
 800f290:	79fa      	ldrb	r2, [r7, #7]
 800f292:	f244 53a0 	movw	r3, #17824	; 0x45a0
 800f296:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f29a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f29e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800f2a0:	f04f 0302 	mov.w	r3, #2
 800f2a4:	737b      	strb	r3, [r7, #13]
  GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
 800f2a6:	79fa      	ldrb	r2, [r7, #7]
 800f2a8:	f240 0330 	movw	r3, #48	; 0x30
 800f2ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f2b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f2b4:	f107 0308 	add.w	r3, r7, #8
 800f2b8:	4610      	mov	r0, r2
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	f7f7 fc26 	bl	8006b0c <GPIO_Init>

  /* Configure USART Rx as alternate function  */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800f2c0:	f04f 0302 	mov.w	r3, #2
 800f2c4:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
 800f2c6:	79fa      	ldrb	r2, [r7, #7]
 800f2c8:	f244 53a4 	movw	r3, #17828	; 0x45a4
 800f2cc:	f6c0 0301 	movt	r3, #2049	; 0x801
 800f2d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f2d4:	60bb      	str	r3, [r7, #8]
  GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
 800f2d6:	79fa      	ldrb	r2, [r7, #7]
 800f2d8:	f240 0334 	movw	r3, #52	; 0x34
 800f2dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f2e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f2e4:	f107 0308 	add.w	r3, r7, #8
 800f2e8:	4610      	mov	r0, r2
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	f7f7 fc0e 	bl	8006b0c <GPIO_Init>

  /* USART configuration */
  USART_Init(COM_USART[COM], USART_InitStruct);
 800f2f0:	79fa      	ldrb	r2, [r7, #7]
 800f2f2:	f240 032c 	movw	r3, #44	; 0x2c
 800f2f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f2fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2fe:	4618      	mov	r0, r3
 800f300:	6839      	ldr	r1, [r7, #0]
 800f302:	f7fe ff89 	bl	800e218 <USART_Init>
    
  /* Enable USART */
  USART_Cmd(COM_USART[COM], ENABLE);
 800f306:	79fa      	ldrb	r2, [r7, #7]
 800f308:	f240 032c 	movw	r3, #44	; 0x2c
 800f30c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f314:	4618      	mov	r0, r3
 800f316:	f04f 0101 	mov.w	r1, #1
 800f31a:	f7ff f8b9 	bl	800e490 <USART_Cmd>
}
 800f31e:	f107 0710 	add.w	r7, r7, #16
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop

0800f328 <SD_LowLevel_DeInit>:
  * @brief  DeInitializes the SDIO interface.
  * @param  None
  * @retval None
  */
void SD_LowLevel_DeInit(void)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /*!< Disable SDIO Clock */
  SDIO_ClockCmd(DISABLE);
 800f32e:	f04f 0000 	mov.w	r0, #0
 800f332:	f7fc f8c1 	bl	800b4b8 <SDIO_ClockCmd>
  
  /*!< Set Power State to OFF */
  SDIO_SetPowerState(SDIO_PowerState_OFF);
 800f336:	f04f 0000 	mov.w	r0, #0
 800f33a:	f7fc f8cd 	bl	800b4d8 <SDIO_SetPowerState>

  /*!< DeInitializes the SDIO peripheral */
  SDIO_DeInit();
 800f33e:	f7fc f855 	bl	800b3ec <SDIO_DeInit>
  
  /* Disable the SDIO APB2 Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, DISABLE);
 800f342:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f346:	f04f 0100 	mov.w	r1, #0
 800f34a:	f7f9 fecd 	bl	80090e8 <RCC_APB2PeriphClockCmd>

  GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_MCO);
 800f34e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f352:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f356:	f04f 0108 	mov.w	r1, #8
 800f35a:	f04f 0200 	mov.w	r2, #0
 800f35e:	f7f7 fd63 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_MCO);
 800f362:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f366:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f36a:	f04f 0109 	mov.w	r1, #9
 800f36e:	f04f 0200 	mov.w	r2, #0
 800f372:	f7f7 fd59 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_MCO);
 800f376:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f37a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f37e:	f04f 010a 	mov.w	r1, #10
 800f382:	f04f 0200 	mov.w	r2, #0
 800f386:	f7f7 fd4f 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_MCO);
 800f38a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f38e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f392:	f04f 010b 	mov.w	r1, #11
 800f396:	f04f 0200 	mov.w	r2, #0
 800f39a:	f7f7 fd45 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_MCO);
 800f39e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f3a2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f3a6:	f04f 010c 	mov.w	r1, #12
 800f3aa:	f04f 0200 	mov.w	r2, #0
 800f3ae:	f7f7 fd3b 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_MCO);
 800f3b2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800f3b6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f3ba:	f04f 0102 	mov.w	r1, #2
 800f3be:	f04f 0200 	mov.w	r2, #0
 800f3c2:	f7f7 fd31 	bl	8006e28 <GPIO_PinAFConfig>

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
 800f3c6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800f3ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800f3cc:	f04f 0300 	mov.w	r3, #0
 800f3d0:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800f3d2:	f04f 0300 	mov.w	r3, #0
 800f3d6:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 800f3d8:	463b      	mov	r3, r7
 800f3da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f3de:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	f7f7 fb92 	bl	8006b0c <GPIO_Init>

  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 800f3e8:	f04f 0304 	mov.w	r3, #4
 800f3ec:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 800f3ee:	463b      	mov	r3, r7
 800f3f0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800f3f4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	f7f7 fb87 	bl	8006b0c <GPIO_Init>

  /* Configure PC.12 pin: CLK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 800f3fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f402:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 800f404:	463b      	mov	r3, r7
 800f406:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f40a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f40e:	4619      	mov	r1, r3
 800f410:	f7f7 fb7c 	bl	8006b0c <GPIO_Init>
}
 800f414:	f107 0708 	add.w	r7, r7, #8
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <SD_LowLevel_Init>:
  *         data transfer).
  * @param  None
  * @retval None
  */
void SD_LowLevel_Init(void)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;

  /* GPIOC and GPIOD Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);
 800f422:	f04f 008c 	mov.w	r0, #140	; 0x8c
 800f426:	f04f 0101 	mov.w	r1, #1
 800f42a:	f7f9 fdb5 	bl	8008f98 <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_SDIO);
 800f42e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f432:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f436:	f04f 0108 	mov.w	r1, #8
 800f43a:	f04f 020c 	mov.w	r2, #12
 800f43e:	f7f7 fcf3 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_SDIO);
 800f442:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f446:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f44a:	f04f 0109 	mov.w	r1, #9
 800f44e:	f04f 020c 	mov.w	r2, #12
 800f452:	f7f7 fce9 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SDIO);
 800f456:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f45a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f45e:	f04f 010a 	mov.w	r1, #10
 800f462:	f04f 020c 	mov.w	r2, #12
 800f466:	f7f7 fcdf 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SDIO);
 800f46a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f46e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f472:	f04f 010b 	mov.w	r1, #11
 800f476:	f04f 020c 	mov.w	r2, #12
 800f47a:	f7f7 fcd5 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
 800f47e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f482:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f486:	f04f 010c 	mov.w	r1, #12
 800f48a:	f04f 020c 	mov.w	r2, #12
 800f48e:	f7f7 fccb 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);
 800f492:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800f496:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f49a:	f04f 0102 	mov.w	r1, #2
 800f49e:	f04f 020c 	mov.w	r2, #12
 800f4a2:	f7f7 fcc1 	bl	8006e28 <GPIO_PinAFConfig>

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
 800f4a6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800f4aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 800f4ac:	f04f 0301 	mov.w	r3, #1
 800f4b0:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800f4b2:	f04f 0302 	mov.w	r3, #2
 800f4b6:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800f4b8:	f04f 0300 	mov.w	r3, #0
 800f4bc:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800f4be:	f04f 0301 	mov.w	r3, #1
 800f4c2:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 800f4c4:	463b      	mov	r3, r7
 800f4c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f4ca:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f4ce:	4619      	mov	r1, r3
 800f4d0:	f7f7 fb1c 	bl	8006b0c <GPIO_Init>

  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 800f4d4:	f04f 0304 	mov.w	r3, #4
 800f4d8:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 800f4da:	463b      	mov	r3, r7
 800f4dc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800f4e0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	f7f7 fb11 	bl	8006b0c <GPIO_Init>

  /* Configure PC.12 pin: CLK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 800f4ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f4ee:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800f4f0:	f04f 0300 	mov.w	r3, #0
 800f4f4:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 800f4f6:	463b      	mov	r3, r7
 800f4f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f4fc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f500:	4619      	mov	r1, r3
 800f502:	f7f7 fb03 	bl	8006b0c <GPIO_Init>
  
  /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
  GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
 800f506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f50a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800f50c:	f04f 0300 	mov.w	r3, #0
 800f510:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800f512:	f04f 0301 	mov.w	r3, #1
 800f516:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
 800f518:	463b      	mov	r3, r7
 800f51a:	f44f 50e0 	mov.w	r0, #7168	; 0x1c00
 800f51e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f522:	4619      	mov	r1, r3
 800f524:	f7f7 faf2 	bl	8006b0c <GPIO_Init>

  /* Enable the SDIO APB2 Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, ENABLE);
 800f528:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f52c:	f04f 0101 	mov.w	r1, #1
 800f530:	f7f9 fdda 	bl	80090e8 <RCC_APB2PeriphClockCmd>

  /* Enable the DMA2 Clock */
  RCC_AHB1PeriphClockCmd(SD_SDIO_DMA_CLK, ENABLE);
 800f534:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800f538:	f04f 0101 	mov.w	r1, #1
 800f53c:	f7f9 fd2c 	bl	8008f98 <RCC_AHB1PeriphClockCmd>
}
 800f540:	f107 0708 	add.w	r7, r7, #8
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <SD_LowLevel_DMA_TxConfig>:
  * @param  BufferSRC: pointer to the source buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b092      	sub	sp, #72	; 0x48
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6039      	str	r1, [r7, #0]
  DMA_InitTypeDef SDDMA_InitStructure;

  DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 800f552:	f246 4058 	movw	r0, #25688	; 0x6458
 800f556:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f55a:	f04f 51fa 	mov.w	r1, #524288000	; 0x1f400000
 800f55e:	f7f5 fce7 	bl	8004f30 <DMA_ClearFlag>

  /* DMA2 Stream3  or Stream6 disable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
 800f562:	f246 4058 	movw	r0, #25688	; 0x6458
 800f566:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f56a:	f04f 0100 	mov.w	r1, #0
 800f56e:	f7f5 fb95 	bl	8004c9c <DMA_Cmd>

  /* DMA2 Stream3  or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);
 800f572:	f246 4058 	movw	r0, #25688	; 0x6458
 800f576:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f57a:	f7f5 f9cf 	bl	800491c <DMA_DeInit>

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
 800f57e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f582:	60fb      	str	r3, [r7, #12]
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 800f584:	f44f 5332 	mov.w	r3, #11392	; 0x2c80
 800f588:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f58c:	613b      	str	r3, [r7, #16]
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	617b      	str	r3, [r7, #20]
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 800f592:	f04f 0340 	mov.w	r3, #64	; 0x40
 800f596:	61bb      	str	r3, [r7, #24]
  SDDMA_InitStructure.DMA_BufferSize = 0;
 800f598:	f04f 0300 	mov.w	r3, #0
 800f59c:	61fb      	str	r3, [r7, #28]
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800f59e:	f04f 0300 	mov.w	r3, #0
 800f5a2:	623b      	str	r3, [r7, #32]
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800f5a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5a8:	627b      	str	r3, [r7, #36]	; 0x24
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 800f5aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f5ae:	62bb      	str	r3, [r7, #40]	; 0x28
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 800f5b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800f5b6:	f04f 0300 	mov.w	r3, #0
 800f5ba:	633b      	str	r3, [r7, #48]	; 0x30
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 800f5bc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800f5c0:	637b      	str	r3, [r7, #52]	; 0x34
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 800f5c2:	f04f 0304 	mov.w	r3, #4
 800f5c6:	63bb      	str	r3, [r7, #56]	; 0x38
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 800f5c8:	f04f 0303 	mov.w	r3, #3
 800f5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
 800f5ce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f5d2:	643b      	str	r3, [r7, #64]	; 0x40
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 800f5d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f5d8:	647b      	str	r3, [r7, #68]	; 0x44
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 800f5da:	f107 030c 	add.w	r3, r7, #12
 800f5de:	f246 4058 	movw	r0, #25688	; 0x6458
 800f5e2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	f7f5 faba 	bl	8004b60 <DMA_Init>
  DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
 800f5ec:	f246 4058 	movw	r0, #25688	; 0x6458
 800f5f0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f5f4:	f04f 0110 	mov.w	r1, #16
 800f5f8:	f04f 0201 	mov.w	r2, #1
 800f5fc:	f7f5 fcc8 	bl	8004f90 <DMA_ITConfig>
  DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
 800f600:	f246 4058 	movw	r0, #25688	; 0x6458
 800f604:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f608:	f04f 0120 	mov.w	r1, #32
 800f60c:	f7f5 fb7c 	bl	8004d08 <DMA_FlowControllerConfig>

  /* DMA2 Stream3  or Stream6 enable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
 800f610:	f246 4058 	movw	r0, #25688	; 0x6458
 800f614:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f618:	f04f 0101 	mov.w	r1, #1
 800f61c:	f7f5 fb3e 	bl	8004c9c <DMA_Cmd>
    
}
 800f620:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <SD_LowLevel_DMA_RxConfig>:
  * @param  BufferDST: pointer to the destination buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b092      	sub	sp, #72	; 0x48
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
  DMA_InitTypeDef SDDMA_InitStructure;

  DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 800f632:	f246 4058 	movw	r0, #25688	; 0x6458
 800f636:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f63a:	f04f 51fa 	mov.w	r1, #524288000	; 0x1f400000
 800f63e:	f7f5 fc77 	bl	8004f30 <DMA_ClearFlag>

  /* DMA2 Stream3  or Stream6 disable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
 800f642:	f246 4058 	movw	r0, #25688	; 0x6458
 800f646:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f64a:	f04f 0100 	mov.w	r1, #0
 800f64e:	f7f5 fb25 	bl	8004c9c <DMA_Cmd>

  /* DMA2 Stream3 or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);
 800f652:	f246 4058 	movw	r0, #25688	; 0x6458
 800f656:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f65a:	f7f5 f95f 	bl	800491c <DMA_DeInit>

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
 800f65e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f662:	60fb      	str	r3, [r7, #12]
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 800f664:	f44f 5332 	mov.w	r3, #11392	; 0x2c80
 800f668:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f66c:	613b      	str	r3, [r7, #16]
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	617b      	str	r3, [r7, #20]
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 800f672:	f04f 0300 	mov.w	r3, #0
 800f676:	61bb      	str	r3, [r7, #24]
  SDDMA_InitStructure.DMA_BufferSize = 0;
 800f678:	f04f 0300 	mov.w	r3, #0
 800f67c:	61fb      	str	r3, [r7, #28]
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800f67e:	f04f 0300 	mov.w	r3, #0
 800f682:	623b      	str	r3, [r7, #32]
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800f684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f688:	627b      	str	r3, [r7, #36]	; 0x24
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 800f68a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f68e:	62bb      	str	r3, [r7, #40]	; 0x28
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 800f690:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f694:	62fb      	str	r3, [r7, #44]	; 0x2c
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800f696:	f04f 0300 	mov.w	r3, #0
 800f69a:	633b      	str	r3, [r7, #48]	; 0x30
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 800f69c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800f6a0:	637b      	str	r3, [r7, #52]	; 0x34
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 800f6a2:	f04f 0304 	mov.w	r3, #4
 800f6a6:	63bb      	str	r3, [r7, #56]	; 0x38
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 800f6a8:	f04f 0303 	mov.w	r3, #3
 800f6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
 800f6ae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f6b2:	643b      	str	r3, [r7, #64]	; 0x40
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 800f6b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f6b8:	647b      	str	r3, [r7, #68]	; 0x44
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 800f6ba:	f107 030c 	add.w	r3, r7, #12
 800f6be:	f246 4058 	movw	r0, #25688	; 0x6458
 800f6c2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	f7f5 fa4a 	bl	8004b60 <DMA_Init>
  DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
 800f6cc:	f246 4058 	movw	r0, #25688	; 0x6458
 800f6d0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f6d4:	f04f 0110 	mov.w	r1, #16
 800f6d8:	f04f 0201 	mov.w	r2, #1
 800f6dc:	f7f5 fc58 	bl	8004f90 <DMA_ITConfig>
  DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
 800f6e0:	f246 4058 	movw	r0, #25688	; 0x6458
 800f6e4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f6e8:	f04f 0120 	mov.w	r1, #32
 800f6ec:	f7f5 fb0c 	bl	8004d08 <DMA_FlowControllerConfig>

  /* DMA2 Stream3 or Stream6 enable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
 800f6f0:	f246 4058 	movw	r0, #25688	; 0x6458
 800f6f4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f6f8:	f04f 0101 	mov.w	r1, #1
 800f6fc:	f7f5 face 	bl	8004c9c <DMA_Cmd>
}
 800f700:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}

0800f708 <sEE_LowLevel_DeInit>:
  * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DeInit(void)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /* sEE_I2C Peripheral Disable */
  I2C_Cmd(sEE_I2C, DISABLE);
 800f70e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800f712:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800f716:	f04f 0100 	mov.w	r1, #0
 800f71a:	f7f8 fb2d 	bl	8007d78 <I2C_Cmd>
 
  /* sEE_I2C DeInit */
  I2C_DeInit(sEE_I2C);
 800f71e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800f722:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800f726:	f7f8 f9eb 	bl	8007b00 <I2C_DeInit>

  /*!< sEE_I2C Periph clock disable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
 800f72a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800f72e:	f04f 0100 	mov.w	r1, #0
 800f732:	f7f9 fcaf 	bl	8009094 <RCC_APB1PeriphClockCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 800f736:	f04f 0340 	mov.w	r3, #64	; 0x40
 800f73a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800f73c:	f04f 0300 	mov.w	r3, #0
 800f740:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800f742:	f04f 0300 	mov.w	r3, #0
 800f746:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 800f748:	463b      	mov	r3, r7
 800f74a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f74e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f752:	4619      	mov	r1, r3
 800f754:	f7f7 f9da 	bl	8006b0c <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 800f758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f75c:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 800f75e:	463b      	mov	r3, r7
 800f760:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f764:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f768:	4619      	mov	r1, r3
 800f76a:	f7f7 f9cf 	bl	8006b0c <GPIO_Init>

  /* Configure and enable I2C DMA TX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 800f76e:	f240 03e0 	movw	r3, #224	; 0xe0
 800f772:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f776:	f04f 0211 	mov.w	r2, #17
 800f77a:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 800f77c:	f240 03e0 	movw	r3, #224	; 0xe0
 800f780:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f784:	f04f 0200 	mov.w	r2, #0
 800f788:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800f78a:	f240 03e0 	movw	r3, #224	; 0xe0
 800f78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f792:	f04f 0200 	mov.w	r2, #0
 800f796:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 800f798:	f240 03e0 	movw	r3, #224	; 0xe0
 800f79c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f7a0:	f04f 0200 	mov.w	r2, #0
 800f7a4:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 800f7a6:	f240 00e0 	movw	r0, #224	; 0xe0
 800f7aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800f7ae:	f7f0 fc3b 	bl	8000028 <NVIC_Init>

  /* Configure and enable I2C DMA RX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 800f7b2:	f240 03e0 	movw	r3, #224	; 0xe0
 800f7b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f7ba:	f04f 020b 	mov.w	r2, #11
 800f7be:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 800f7c0:	f240 03e0 	movw	r3, #224	; 0xe0
 800f7c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f7c8:	f04f 0200 	mov.w	r2, #0
 800f7cc:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800f7ce:	f240 03e0 	movw	r3, #224	; 0xe0
 800f7d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f7d6:	f04f 0200 	mov.w	r2, #0
 800f7da:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);   
 800f7dc:	f240 00e0 	movw	r0, #224	; 0xe0
 800f7e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800f7e4:	f7f0 fc20 	bl	8000028 <NVIC_Init>
  
  /* Disable and Deinitialize the DMA Streams */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 800f7e8:	f246 00a0 	movw	r0, #24736	; 0x60a0
 800f7ec:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f7f0:	f04f 0100 	mov.w	r1, #0
 800f7f4:	f7f5 fa52 	bl	8004c9c <DMA_Cmd>
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 800f7f8:	f246 0010 	movw	r0, #24592	; 0x6010
 800f7fc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f800:	f04f 0100 	mov.w	r1, #0
 800f804:	f7f5 fa4a 	bl	8004c9c <DMA_Cmd>
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 800f808:	f246 00a0 	movw	r0, #24736	; 0x60a0
 800f80c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f810:	f7f5 f884 	bl	800491c <DMA_DeInit>
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 800f814:	f246 0010 	movw	r0, #24592	; 0x6010
 800f818:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f81c:	f7f5 f87e 	bl	800491c <DMA_DeInit>
}
 800f820:	f107 0708 	add.w	r7, r7, #8
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <sEE_LowLevel_Init>:
  * @brief  Initializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_Init(void)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b082      	sub	sp, #8
 800f82c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /*!< sEE_I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
 800f82e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800f832:	f04f 0101 	mov.w	r1, #1
 800f836:	f7f9 fc2d 	bl	8009094 <RCC_APB1PeriphClockCmd>
  
  /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
  RCC_AHB1PeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
 800f83a:	f04f 0002 	mov.w	r0, #2
 800f83e:	f04f 0101 	mov.w	r1, #1
 800f842:	f7f9 fba9 	bl	8008f98 <RCC_AHB1PeriphClockCmd>

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800f846:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f84a:	f04f 0101 	mov.w	r1, #1
 800f84e:	f7f9 fc4b 	bl	80090e8 <RCC_APB2PeriphClockCmd>
  
  /* Reset sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);
 800f852:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800f856:	f04f 0101 	mov.w	r1, #1
 800f85a:	f7f9 fced 	bl	8009238 <RCC_APB1PeriphResetCmd>
  
  /* Release reset signal of sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
 800f85e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800f862:	f04f 0100 	mov.w	r1, #0
 800f866:	f7f9 fce7 	bl	8009238 <RCC_APB1PeriphResetCmd>
    
  /*!< GPIO configuration */
  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
 800f86a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f86e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f872:	f04f 0106 	mov.w	r1, #6
 800f876:	f04f 0204 	mov.w	r2, #4
 800f87a:	f7f7 fad5 	bl	8006e28 <GPIO_PinAFConfig>
  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
 800f87e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f882:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f886:	f04f 0109 	mov.w	r1, #9
 800f88a:	f04f 0204 	mov.w	r2, #4
 800f88e:	f7f7 facb 	bl	8006e28 <GPIO_PinAFConfig>
  
  /*!< Configure sEE_I2C pins: SCL */   
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 800f892:	f04f 0340 	mov.w	r3, #64	; 0x40
 800f896:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800f898:	f04f 0302 	mov.w	r3, #2
 800f89c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800f89e:	f04f 0302 	mov.w	r3, #2
 800f8a2:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800f8a4:	f04f 0301 	mov.w	r3, #1
 800f8a8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800f8aa:	f04f 0300 	mov.w	r3, #0
 800f8ae:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 800f8b0:	463b      	mov	r3, r7
 800f8b2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f8b6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f8ba:	4619      	mov	r1, r3
 800f8bc:	f7f7 f926 	bl	8006b0c <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 800f8c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f8c4:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 800f8c6:	463b      	mov	r3, r7
 800f8c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f8cc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f8d0:	4619      	mov	r1, r3
 800f8d2:	f7f7 f91b 	bl	8006b0c <GPIO_Init>

 
  /* Configure and enable I2C DMA TX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 800f8d6:	f240 03e0 	movw	r3, #224	; 0xe0
 800f8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8de:	f04f 0211 	mov.w	r2, #17
 800f8e2:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 800f8e4:	f240 03e0 	movw	r3, #224	; 0xe0
 800f8e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8ec:	f04f 0200 	mov.w	r2, #0
 800f8f0:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800f8f2:	f240 03e0 	movw	r3, #224	; 0xe0
 800f8f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8fa:	f04f 0200 	mov.w	r2, #0
 800f8fe:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800f900:	f240 03e0 	movw	r3, #224	; 0xe0
 800f904:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f908:	f04f 0201 	mov.w	r2, #1
 800f90c:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 800f90e:	f240 00e0 	movw	r0, #224	; 0xe0
 800f912:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800f916:	f7f0 fb87 	bl	8000028 <NVIC_Init>

  /* Configure and enable I2C DMA RX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 800f91a:	f240 03e0 	movw	r3, #224	; 0xe0
 800f91e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f922:	f04f 020b 	mov.w	r2, #11
 800f926:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 800f928:	f240 03e0 	movw	r3, #224	; 0xe0
 800f92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f930:	f04f 0200 	mov.w	r2, #0
 800f934:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800f936:	f240 03e0 	movw	r3, #224	; 0xe0
 800f93a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f93e:	f04f 0200 	mov.w	r2, #0
 800f942:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);  
 800f944:	f240 00e0 	movw	r0, #224	; 0xe0
 800f948:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800f94c:	f7f0 fb6c 	bl	8000028 <NVIC_Init>
  
  /*!< I2C DMA TX and RX channels configuration */
  /* Enable the DMA clock */
  RCC_AHB1PeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
 800f950:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800f954:	f04f 0101 	mov.w	r1, #1
 800f958:	f7f9 fb1e 	bl	8008f98 <RCC_AHB1PeriphClockCmd>
  
  /* Clear any pending flag on Rx Stream  */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_FEIF | sEE_TX_DMA_FLAG_DMEIF | sEE_TX_DMA_FLAG_TEIF | \
 800f95c:	f246 00a0 	movw	r0, #24736	; 0x60a0
 800f960:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f964:	f04f 0100 	mov.w	r1, #0
 800f968:	f2c2 013d 	movt	r1, #8253	; 0x203d
 800f96c:	f7f5 fae0 	bl	8004f30 <DMA_ClearFlag>
                                       sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
  /* Disable the EE I2C Tx DMA stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 800f970:	f246 00a0 	movw	r0, #24736	; 0x60a0
 800f974:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f978:	f04f 0100 	mov.w	r1, #0
 800f97c:	f7f5 f98e 	bl	8004c9c <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral TX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 800f980:	f246 00a0 	movw	r0, #24736	; 0x60a0
 800f984:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800f988:	f7f4 ffc8 	bl	800491c <DMA_DeInit>
  sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
 800f98c:	f240 03a4 	movw	r3, #164	; 0xa4
 800f990:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f994:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800f998:	601a      	str	r2, [r3, #0]
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
 800f99a:	f240 03a4 	movw	r3, #164	; 0xa4
 800f99e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f9a2:	f245 4210 	movw	r2, #21520	; 0x5410
 800f9a6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800f9aa:	605a      	str	r2, [r3, #4]
  sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
 800f9ac:	f240 03a4 	movw	r3, #164	; 0xa4
 800f9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f9b4:	f04f 0200 	mov.w	r2, #0
 800f9b8:	609a      	str	r2, [r3, #8]
  sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
 800f9ba:	f240 03a4 	movw	r3, #164	; 0xa4
 800f9be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f9c2:	f04f 0240 	mov.w	r2, #64	; 0x40
 800f9c6:	60da      	str	r2, [r3, #12]
  sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;              /* This parameter will be configured durig communication */
 800f9c8:	f240 03a4 	movw	r3, #164	; 0xa4
 800f9cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f9d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9d4:	611a      	str	r2, [r3, #16]
  sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800f9d6:	f240 03a4 	movw	r3, #164	; 0xa4
 800f9da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f9de:	f04f 0200 	mov.w	r2, #0
 800f9e2:	615a      	str	r2, [r3, #20]
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800f9e4:	f240 03a4 	movw	r3, #164	; 0xa4
 800f9e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f9ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f9f0:	619a      	str	r2, [r3, #24]
  sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800f9f2:	f240 03a4 	movw	r3, #164	; 0xa4
 800f9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f9fa:	f04f 0200 	mov.w	r2, #0
 800f9fe:	61da      	str	r2, [r3, #28]
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800fa00:	f240 03a4 	movw	r3, #164	; 0xa4
 800fa04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa08:	f04f 0200 	mov.w	r2, #0
 800fa0c:	621a      	str	r2, [r3, #32]
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800fa0e:	f240 03a4 	movw	r3, #164	; 0xa4
 800fa12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa16:	f04f 0200 	mov.w	r2, #0
 800fa1a:	625a      	str	r2, [r3, #36]	; 0x24
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 800fa1c:	f240 03a4 	movw	r3, #164	; 0xa4
 800fa20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800fa28:	629a      	str	r2, [r3, #40]	; 0x28
  sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 800fa2a:	f240 03a4 	movw	r3, #164	; 0xa4
 800fa2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa32:	f04f 0204 	mov.w	r2, #4
 800fa36:	62da      	str	r2, [r3, #44]	; 0x2c
  sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 800fa38:	f240 03a4 	movw	r3, #164	; 0xa4
 800fa3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa40:	f04f 0203 	mov.w	r2, #3
 800fa44:	631a      	str	r2, [r3, #48]	; 0x30
  sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800fa46:	f240 03a4 	movw	r3, #164	; 0xa4
 800fa4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa4e:	f04f 0200 	mov.w	r2, #0
 800fa52:	635a      	str	r2, [r3, #52]	; 0x34
  sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800fa54:	f240 03a4 	movw	r3, #164	; 0xa4
 800fa58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa5c:	f04f 0200 	mov.w	r2, #0
 800fa60:	639a      	str	r2, [r3, #56]	; 0x38
  DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);
 800fa62:	f246 00a0 	movw	r0, #24736	; 0x60a0
 800fa66:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800fa6a:	f240 01a4 	movw	r1, #164	; 0xa4
 800fa6e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800fa72:	f7f5 f875 	bl	8004b60 <DMA_Init>

  /* Clear any pending flag on Rx Stream */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_FEIF | sEE_RX_DMA_FLAG_DMEIF | sEE_RX_DMA_FLAG_TEIF | \
 800fa76:	f246 0010 	movw	r0, #24592	; 0x6010
 800fa7a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800fa7e:	f04f 013d 	mov.w	r1, #61	; 0x3d
 800fa82:	f2c1 0180 	movt	r1, #4224	; 0x1080
 800fa86:	f7f5 fa53 	bl	8004f30 <DMA_ClearFlag>
                                       sEE_RX_DMA_FLAG_HTIF | sEE_RX_DMA_FLAG_TCIF);
  /* Disable the EE I2C DMA Rx stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 800fa8a:	f246 0010 	movw	r0, #24592	; 0x6010
 800fa8e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800fa92:	f04f 0100 	mov.w	r1, #0
 800fa96:	f7f5 f901 	bl	8004c9c <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral RX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 800fa9a:	f246 0010 	movw	r0, #24592	; 0x6010
 800fa9e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800faa2:	f7f4 ff3b 	bl	800491c <DMA_DeInit>
  DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);
 800faa6:	f246 0010 	movw	r0, #24592	; 0x6010
 800faaa:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800faae:	f240 01a4 	movw	r1, #164	; 0xa4
 800fab2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800fab6:	f7f5 f853 	bl	8004b60 <DMA_Init>
  
  /* Enable the DMA Channels Interrupts */
  DMA_ITConfig(sEE_I2C_DMA_STREAM_TX, DMA_IT_TC, ENABLE);
 800faba:	f246 00a0 	movw	r0, #24736	; 0x60a0
 800fabe:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800fac2:	f04f 0110 	mov.w	r1, #16
 800fac6:	f04f 0201 	mov.w	r2, #1
 800faca:	f7f5 fa61 	bl	8004f90 <DMA_ITConfig>
  DMA_ITConfig(sEE_I2C_DMA_STREAM_RX, DMA_IT_TC, ENABLE);      
 800face:	f246 0010 	movw	r0, #24592	; 0x6010
 800fad2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800fad6:	f04f 0110 	mov.w	r1, #16
 800fada:	f04f 0201 	mov.w	r2, #1
 800fade:	f7f5 fa57 	bl	8004f90 <DMA_ITConfig>
}
 800fae2:	f107 0708 	add.w	r7, r7, #8
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
 800faea:	bf00      	nop

0800faec <sEE_LowLevel_DMAConfig>:
  * @brief  Initializes DMA channel used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
{ 
 800faec:	b580      	push	{r7, lr}
 800faee:	b084      	sub	sp, #16
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	60f8      	str	r0, [r7, #12]
 800faf4:	60b9      	str	r1, [r7, #8]
 800faf6:	607a      	str	r2, [r7, #4]
  /* Initialize the DMA with the new parameters */
  if (Direction == sEE_DIRECTION_TX)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d11d      	bne.n	800fb3a <sEE_LowLevel_DMAConfig+0x4e>
  {
    /* Configure the DMA Tx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 800fafe:	f240 03a4 	movw	r3, #164	; 0xa4
 800fb02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb06:	68fa      	ldr	r2, [r7, #12]
 800fb08:	609a      	str	r2, [r3, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;    
 800fb0a:	f240 03a4 	movw	r3, #164	; 0xa4
 800fb0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb12:	f04f 0240 	mov.w	r2, #64	; 0x40
 800fb16:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
 800fb18:	f240 03a4 	movw	r3, #164	; 0xa4
 800fb1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb20:	68ba      	ldr	r2, [r7, #8]
 800fb22:	611a      	str	r2, [r3, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);  
 800fb24:	f246 00a0 	movw	r0, #24736	; 0x60a0
 800fb28:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800fb2c:	f240 01a4 	movw	r1, #164	; 0xa4
 800fb30:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800fb34:	f7f5 f814 	bl	8004b60 <DMA_Init>
 800fb38:	e01c      	b.n	800fb74 <sEE_LowLevel_DMAConfig+0x88>
  }
  else
  { 
    /* Configure the DMA Rx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 800fb3a:	f240 03a4 	movw	r3, #164	; 0xa4
 800fb3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb42:	68fa      	ldr	r2, [r7, #12]
 800fb44:	609a      	str	r2, [r3, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 800fb46:	f240 03a4 	movw	r3, #164	; 0xa4
 800fb4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb4e:	f04f 0200 	mov.w	r2, #0
 800fb52:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
 800fb54:	f240 03a4 	movw	r3, #164	; 0xa4
 800fb58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb5c:	68ba      	ldr	r2, [r7, #8]
 800fb5e:	611a      	str	r2, [r3, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
 800fb60:	f246 0010 	movw	r0, #24592	; 0x6010
 800fb64:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800fb68:	f240 01a4 	movw	r1, #164	; 0xa4
 800fb6c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800fb70:	f7f4 fff6 	bl	8004b60 <DMA_Init>
  }
}
 800fb74:	f107 0710 	add.w	r7, r7, #16
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <IOE_Config>:
  *         hardware (GPIOs, APB clocks ..).
  * @param  None
  * @retval IOE_OK if all initializations done correctly. Other value if error.
  */
uint8_t IOE_Config(void)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	af00      	add	r7, sp, #0
  /* Configure the needed pins */
  IOE_GPIO_Config(); 
 800fb80:	f001 fb86 	bl	8011290 <IOE_GPIO_Config>
  
  IOE_I2C_Config();
 800fb84:	f001 fbf6 	bl	8011374 <IOE_I2C_Config>
    
  /* Read IO Expander 1 ID  */
  if(IOE_IsOperational(IOE_1_ADDR))
 800fb88:	f04f 0082 	mov.w	r0, #130	; 0x82
 800fb8c:	f000 fb66 	bl	801025c <IOE_IsOperational>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d002      	beq.n	800fb9c <IOE_Config+0x20>
  {
    return IOE1_NOT_OPERATIONAL;
 800fb96:	f04f 0304 	mov.w	r3, #4
 800fb9a:	e091      	b.n	800fcc0 <IOE_Config+0x144>
  }
  if(IOE_IsOperational(IOE_2_ADDR))
 800fb9c:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fba0:	f000 fb5c 	bl	801025c <IOE_IsOperational>
 800fba4:	4603      	mov	r3, r0
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d002      	beq.n	800fbb0 <IOE_Config+0x34>
  {
    return IOE2_NOT_OPERATIONAL;
 800fbaa:	f04f 0305 	mov.w	r3, #5
 800fbae:	e087      	b.n	800fcc0 <IOE_Config+0x144>
  }
  
  /* Generate IOExpander Software reset */
  IOE_Reset(IOE_1_ADDR); 
 800fbb0:	f04f 0082 	mov.w	r0, #130	; 0x82
 800fbb4:	f000 fb76 	bl	80102a4 <IOE_Reset>
  IOE_Reset(IOE_2_ADDR);
 800fbb8:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fbbc:	f000 fb72 	bl	80102a4 <IOE_Reset>
  
  /* ---------------------- IO Expander 1 configuration --------------------- */
  /* Enable the GPIO, Touch Screen and ADC functionalities */
  IOE_FnctCmd(IOE_1_ADDR, IOE_IO_FCT | IOE_TS_FCT | IOE_ADC_FCT, ENABLE);
 800fbc0:	f04f 0082 	mov.w	r0, #130	; 0x82
 800fbc4:	f04f 0107 	mov.w	r1, #7
 800fbc8:	f04f 0201 	mov.w	r2, #1
 800fbcc:	f000 fbb0 	bl	8010330 <IOE_FnctCmd>
  /* Configure the VBAT pin in output mode pin*/
  IOE_IOPinConfig(IOE_1_ADDR, VBAT_DIV_PIN , Direction_OUT);  
 800fbd0:	f04f 0082 	mov.w	r0, #130	; 0x82
 800fbd4:	f04f 0101 	mov.w	r1, #1
 800fbd8:	f04f 0201 	mov.w	r2, #1
 800fbdc:	f000 fbdc 	bl	8010398 <IOE_IOPinConfig>
  /* ENABLE the alternate function for IN1 pin */
  IOE_IOAFConfig(IOE_1_ADDR, VBAT_DIV_PIN, ENABLE);
 800fbe0:	f04f 0082 	mov.w	r0, #130	; 0x82
 800fbe4:	f04f 0101 	mov.w	r1, #1
 800fbe8:	f04f 0201 	mov.w	r2, #1
 800fbec:	f000 fd92 	bl	8010714 <IOE_IOAFConfig>
  
  /* Apply the default state for the out pins */
  IOE_WriteIOPin(VBAT_DIV_PIN, BitReset);
 800fbf0:	f04f 0001 	mov.w	r0, #1
 800fbf4:	f04f 0100 	mov.w	r1, #0
 800fbf8:	f000 f8f0 	bl	800fddc <IOE_WriteIOPin>
  /* Configure the MEMS interrupt pins in Input mode */
  IOE_IOPinConfig(IOE_2_ADDR, (uint32_t)(MEMS_INT1_PIN | MEMS_INT2_PIN), Direction_IN); 
 800fbfc:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fc00:	f04f 010c 	mov.w	r1, #12
 800fc04:	f04f 0200 	mov.w	r2, #0
 800fc08:	f000 fbc6 	bl	8010398 <IOE_IOPinConfig>
  
  /* ENABLE the alternate function for the Joystick pins */
  IOE_IOAFConfig(IOE_2_ADDR, (uint32_t)(MEMS_INT1_PIN | MEMS_INT2_PIN), ENABLE);
 800fc0c:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fc10:	f04f 010c 	mov.w	r1, #12
 800fc14:	f04f 0201 	mov.w	r2, #1
 800fc18:	f000 fd7c 	bl	8010714 <IOE_IOAFConfig>
  /* Configure the IOs to detect Falling and Rising Edges */
  IOE_IOEdgeConfig(IOE_2_ADDR, (uint32_t)(MEMS_INT1_PIN | MEMS_INT2_PIN), (uint32_t)(EDGE_FALLING | EDGE_RISING));
 800fc1c:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fc20:	f04f 010c 	mov.w	r1, #12
 800fc24:	f04f 0203 	mov.w	r2, #3
 800fc28:	f000 fda8 	bl	801077c <IOE_IOEdgeConfig>
  /* Touch Screen controller configuration */
  IOE_TS_Config();
 800fc2c:	f000 fc7c 	bl	8010528 <IOE_TS_Config>
  
  /* ------------------------------------------------------------------------ */
  
  /* ---------------------- IO Expander 2 configuration --------------------- */
  /* Enable the GPIO, Temperature Sensor and ADC functionalities */
  IOE_FnctCmd(IOE_2_ADDR, IOE_IO_FCT | IOE_TEMPSENS_FCT | IOE_ADC_FCT, ENABLE);
 800fc30:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fc34:	f04f 010d 	mov.w	r1, #13
 800fc38:	f04f 0201 	mov.w	r2, #1
 800fc3c:	f000 fb78 	bl	8010330 <IOE_FnctCmd>
  
  /* Configure the Audio Codec Reset pin in output mode pin*/
  IOE_IOPinConfig(IOE_2_ADDR, (uint32_t)(AUDIO_RESET_PIN), Direction_OUT);
 800fc40:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fc44:	f04f 0104 	mov.w	r1, #4
 800fc48:	f04f 0201 	mov.w	r2, #1
 800fc4c:	f000 fba4 	bl	8010398 <IOE_IOPinConfig>
  IOE_IOPinConfig(IOE_2_ADDR, (uint32_t)(MII_INT_PIN), Direction_IN);
 800fc50:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fc54:	f04f 0101 	mov.w	r1, #1
 800fc58:	f04f 0200 	mov.w	r2, #0
 800fc5c:	f000 fb9c 	bl	8010398 <IOE_IOPinConfig>
      
  /* ENABLE the alternate function for IN1 pin */
  IOE_IOAFConfig(IOE_2_ADDR, (uint32_t)(AUDIO_RESET_PIN | MII_INT_PIN), ENABLE);
 800fc60:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fc64:	f04f 0105 	mov.w	r1, #5
 800fc68:	f04f 0201 	mov.w	r2, #1
 800fc6c:	f000 fd52 	bl	8010714 <IOE_IOAFConfig>
    
  /* Apply the default state for the out pins */
  IOE_WriteIOPin(AUDIO_RESET_PIN, BitReset);
 800fc70:	f04f 0004 	mov.w	r0, #4
 800fc74:	f04f 0100 	mov.w	r1, #0
 800fc78:	f000 f8b0 	bl	800fddc <IOE_WriteIOPin>
  IOE_WriteIOPin(MII_INT_PIN, BitReset);
 800fc7c:	f04f 0001 	mov.w	r0, #1
 800fc80:	f04f 0100 	mov.w	r1, #0
 800fc84:	f000 f8aa 	bl	800fddc <IOE_WriteIOPin>
  /* Configure the Joystick pins in Input mode */
  IOE_IOPinConfig(IOE_2_ADDR, JOY_IO_PINS , Direction_IN); 
 800fc88:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fc8c:	f04f 01f8 	mov.w	r1, #248	; 0xf8
 800fc90:	f04f 0200 	mov.w	r2, #0
 800fc94:	f000 fb80 	bl	8010398 <IOE_IOPinConfig>
  
  /* ENABLE the alternate function for the Joystick pins */
  IOE_IOAFConfig(IOE_2_ADDR, JOY_IO_PINS, ENABLE);
 800fc98:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fc9c:	f04f 01f8 	mov.w	r1, #248	; 0xf8
 800fca0:	f04f 0201 	mov.w	r2, #1
 800fca4:	f000 fd36 	bl	8010714 <IOE_IOAFConfig>
  /* Configure the IOs to detect Falling and Rising Edges */
  IOE_IOEdgeConfig(IOE_2_ADDR, JOY_IO_PINS, (uint8_t)(EDGE_FALLING | EDGE_RISING));
 800fca8:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fcac:	f04f 01f8 	mov.w	r1, #248	; 0xf8
 800fcb0:	f04f 0203 	mov.w	r2, #3
 800fcb4:	f000 fd62 	bl	801077c <IOE_IOEdgeConfig>
  
  /* Temperature Sensor module configuration */
  IOE_TempSens_Config();
 800fcb8:	f000 fcf8 	bl	80106ac <IOE_TempSens_Config>
  /* ------------------------------------------------------------------------ */
  
  /* Configuration is OK */
  return IOE_OK; 
 800fcbc:	f04f 0300 	mov.w	r3, #0
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <IOE_ITConfig>:
  *   @arg  IOE_ITSRC_TSC: Touch Screen interrupts.
  *   @arg  IOE_ITSRC_INMEMS: MEMS interrupt lines.
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_ITConfig(uint32_t IOE_ITSRC_Source)
{   
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b082      	sub	sp, #8
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
  /* Configure the Interrupt output pin to generate low level (INT_CTRL) */
  IOE_ITOutConfig(Polarity_High, Type_Level);  
 800fccc:	f04f 0004 	mov.w	r0, #4
 800fcd0:	f04f 0100 	mov.w	r1, #0
 800fcd4:	f000 fdac 	bl	8010830 <IOE_ITOutConfig>
  
  /* Manage the Joystick Interrupts */  
  if (IOE_ITSRC_Source & IOE_ITSRC_JOYSTICK)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f003 0304 	and.w	r3, r3, #4
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d029      	beq.n	800fd36 <IOE_ITConfig+0x72>
  {   
    /* Enable the Global interrupt */  
    IOE_GITCmd(IOE_2_ADDR, ENABLE);     
 800fce2:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fce6:	f04f 0101 	mov.w	r1, #1
 800fcea:	f000 fb89 	bl	8010400 <IOE_GITCmd>
        
    /* Enable the Joystick pins to generate interrupt (GPIO_INT_EN) */
    IOE_IOITConfig(IOE_2_ADDR, IOE_JOY_IT, ENABLE);   
 800fcee:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fcf2:	f04f 01f8 	mov.w	r1, #248	; 0xf8
 800fcf6:	f04f 0201 	mov.w	r2, #1
 800fcfa:	f000 fbe1 	bl	80104c0 <IOE_IOITConfig>
    
    /* Enable the Global GPIO Interrupt */
    IOE_GITConfig(IOE_2_ADDR, IOE_GIT_GPIO, ENABLE);    
 800fcfe:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fd02:	f04f 0180 	mov.w	r1, #128	; 0x80
 800fd06:	f04f 0201 	mov.w	r2, #1
 800fd0a:	f000 fba5 	bl	8010458 <IOE_GITConfig>
    
    /* Read the GPIO_IT_STA to clear all pending bits if any */
    I2C_ReadDeviceRegister(IOE_2_ADDR, IOE_REG_GPIO_INT_STA);    
 800fd0e:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fd12:	f04f 010d 	mov.w	r1, #13
 800fd16:	f000 ff0d 	bl	8010b34 <I2C_ReadDeviceRegister>
    
    /* Enable the Joystick pins to generate interrupt */
    IOE_IOITConfig(IOE_2_ADDR, IOE_JOY_IT, ENABLE);  
 800fd1a:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fd1e:	f04f 01f8 	mov.w	r1, #248	; 0xf8
 800fd22:	f04f 0201 	mov.w	r2, #1
 800fd26:	f000 fbcb 	bl	80104c0 <IOE_IOITConfig>
    
    /* Read the GPIO_IT_STA to clear all pending bits if any */
    I2C_ReadDeviceRegister(IOE_2_ADDR, IOE_REG_GPIO_INT_STA);     
 800fd2a:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fd2e:	f04f 010d 	mov.w	r1, #13
 800fd32:	f000 feff 	bl	8010b34 <I2C_ReadDeviceRegister>
  }

  /* Manage the MEMS Interrupts lines  */  
  if (IOE_ITSRC_Source & IOE_ITSRC_INMEMS)
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f003 0302 	and.w	r3, r3, #2
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d029      	beq.n	800fd94 <IOE_ITConfig+0xd0>
  {   
    /* Enable the Global interrupt */  
    IOE_GITCmd(IOE_1_ADDR, ENABLE);     
 800fd40:	f04f 0082 	mov.w	r0, #130	; 0x82
 800fd44:	f04f 0101 	mov.w	r1, #1
 800fd48:	f000 fb5a 	bl	8010400 <IOE_GITCmd>
        
    /* Enable the pins to generate interrupt (GPIO_INT_EN) */
    IOE_IOITConfig(IOE_1_ADDR, IOE_INMEMS_IT, ENABLE);   
 800fd4c:	f04f 0082 	mov.w	r0, #130	; 0x82
 800fd50:	f04f 010c 	mov.w	r1, #12
 800fd54:	f04f 0201 	mov.w	r2, #1
 800fd58:	f000 fbb2 	bl	80104c0 <IOE_IOITConfig>
    
    /* Enable the Global GPIO Interrupt */
    IOE_GITConfig(IOE_1_ADDR, IOE_GIT_GPIO, ENABLE);    
 800fd5c:	f04f 0082 	mov.w	r0, #130	; 0x82
 800fd60:	f04f 0180 	mov.w	r1, #128	; 0x80
 800fd64:	f04f 0201 	mov.w	r2, #1
 800fd68:	f000 fb76 	bl	8010458 <IOE_GITConfig>
    
    /* Read the GPIO_IT_STA to clear all pending bits if any */
    I2C_ReadDeviceRegister(IOE_1_ADDR, IOE_REG_GPIO_INT_STA);    
 800fd6c:	f04f 0082 	mov.w	r0, #130	; 0x82
 800fd70:	f04f 010d 	mov.w	r1, #13
 800fd74:	f000 fede 	bl	8010b34 <I2C_ReadDeviceRegister>
    
    /* Enable the pins to generate interrupt */
    IOE_IOITConfig(IOE_1_ADDR, IOE_INMEMS_IT, ENABLE);  
 800fd78:	f04f 0082 	mov.w	r0, #130	; 0x82
 800fd7c:	f04f 010c 	mov.w	r1, #12
 800fd80:	f04f 0201 	mov.w	r2, #1
 800fd84:	f000 fb9c 	bl	80104c0 <IOE_IOITConfig>
    
    /* Read the GPIO_IT_STA to clear all pending bits if any */
    I2C_ReadDeviceRegister(IOE_1_ADDR, IOE_REG_GPIO_INT_STA);     
 800fd88:	f04f 0082 	mov.w	r0, #130	; 0x82
 800fd8c:	f04f 010d 	mov.w	r1, #13
 800fd90:	f000 fed0 	bl	8010b34 <I2C_ReadDeviceRegister>
  }  
  
  /* Manage the Touch Screen Interrupts */  
  if (IOE_ITSRC_Source & IOE_ITSRC_TSC)
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f003 0301 	and.w	r3, r3, #1
 800fd9a:	b2db      	uxtb	r3, r3
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d013      	beq.n	800fdc8 <IOE_ITConfig+0x104>
  {   
    /* Enable the Global interrupt */  
    IOE_GITCmd(IOE_1_ADDR, ENABLE);     
 800fda0:	f04f 0082 	mov.w	r0, #130	; 0x82
 800fda4:	f04f 0101 	mov.w	r1, #1
 800fda8:	f000 fb2a 	bl	8010400 <IOE_GITCmd>
           
    /* Enable the Global GPIO Interrupt */
    IOE_GITConfig(IOE_1_ADDR, (uint8_t)(IOE_GIT_TOUCH | IOE_GIT_FTH | IOE_GIT_FOV), ENABLE);    
 800fdac:	f04f 0082 	mov.w	r0, #130	; 0x82
 800fdb0:	f04f 0107 	mov.w	r1, #7
 800fdb4:	f04f 0201 	mov.w	r2, #1
 800fdb8:	f000 fb4e 	bl	8010458 <IOE_GITConfig>
    
    /* Read the GPIO_IT_STA to clear all pending bits if any */
    I2C_ReadDeviceRegister(IOE_1_ADDR, IOE_REG_GPIO_INT_STA); 
 800fdbc:	f04f 0082 	mov.w	r0, #130	; 0x82
 800fdc0:	f04f 010d 	mov.w	r1, #13
 800fdc4:	f000 feb6 	bl	8010b34 <I2C_ReadDeviceRegister>
  }
  
  /* Configure the Interrupt line as EXTI source */
  IOE_EXTI_Config();    
 800fdc8:	f001 fb62 	bl	8011490 <IOE_EXTI_Config>
  
  /* If all OK return IOE_OK */
  return IOE_OK;
 800fdcc:	f04f 0300 	mov.w	r3, #0
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f107 0708 	add.w	r7, r7, #8
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}
 800fdda:	bf00      	nop

0800fddc <IOE_WriteIOPin>:
  * @param BitVal: The value to be set. This parameter can be one of the
  *        following values: BitSet or BitReset. See IOE_BitVal_TypeDef.
  * @retval IOE_OK or PARAM_ERROR
  */
uint8_t IOE_WriteIOPin(uint8_t IO_Pin, IOE_BitValue_TypeDef BitVal)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b084      	sub	sp, #16
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	4602      	mov	r2, r0
 800fde4:	460b      	mov	r3, r1
 800fde6:	71fa      	strb	r2, [r7, #7]
 800fde8:	71bb      	strb	r3, [r7, #6]
  uint8_t DeviceAddr = 0;
 800fdea:	f04f 0300 	mov.w	r3, #0
 800fdee:	73fb      	strb	r3, [r7, #15]
  
  /* Get the IO expander Address according to which pin is to be controlled */
  if (IO_Pin & IO1_OUT_ALL_PINS)
 800fdf0:	79fb      	ldrb	r3, [r7, #7]
 800fdf2:	f003 0301 	and.w	r3, r3, #1
 800fdf6:	b2db      	uxtb	r3, r3
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d003      	beq.n	800fe04 <IOE_WriteIOPin+0x28>
  {
    DeviceAddr = IOE_1_ADDR;
 800fdfc:	f04f 0382 	mov.w	r3, #130	; 0x82
 800fe00:	73fb      	strb	r3, [r7, #15]
 800fe02:	e00b      	b.n	800fe1c <IOE_WriteIOPin+0x40>
  }
  else if (IO_Pin & IO2_OUT_ALL_PINS)
 800fe04:	79fb      	ldrb	r3, [r7, #7]
 800fe06:	f003 0305 	and.w	r3, r3, #5
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d003      	beq.n	800fe16 <IOE_WriteIOPin+0x3a>
  {
    DeviceAddr = IOE_2_ADDR;
 800fe0e:	f04f 0388 	mov.w	r3, #136	; 0x88
 800fe12:	73fb      	strb	r3, [r7, #15]
 800fe14:	e002      	b.n	800fe1c <IOE_WriteIOPin+0x40>
  }
  else
  {
    return PARAM_ERROR;
 800fe16:	f04f 0303 	mov.w	r3, #3
 800fe1a:	e015      	b.n	800fe48 <IOE_WriteIOPin+0x6c>
  }
  
  /* Apply the bit value to the selected pin */
  if (BitVal == BitReset)
 800fe1c:	79bb      	ldrb	r3, [r7, #6]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d108      	bne.n	800fe34 <IOE_WriteIOPin+0x58>
  {
    /* Set the register */
    I2C_WriteDeviceRegister(DeviceAddr, IOE_REG_GPIO_CLR_PIN, IO_Pin);
 800fe22:	7bfa      	ldrb	r2, [r7, #15]
 800fe24:	79fb      	ldrb	r3, [r7, #7]
 800fe26:	4610      	mov	r0, r2
 800fe28:	f04f 0111 	mov.w	r1, #17
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	f000 fd47 	bl	80108c0 <I2C_WriteDeviceRegister>
 800fe32:	e007      	b.n	800fe44 <IOE_WriteIOPin+0x68>
  }
  else
  {
    /* Set the register */
    I2C_WriteDeviceRegister(DeviceAddr, IOE_REG_GPIO_SET_PIN, IO_Pin);
 800fe34:	7bfa      	ldrb	r2, [r7, #15]
 800fe36:	79fb      	ldrb	r3, [r7, #7]
 800fe38:	4610      	mov	r0, r2
 800fe3a:	f04f 0110 	mov.w	r1, #16
 800fe3e:	461a      	mov	r2, r3
 800fe40:	f000 fd3e 	bl	80108c0 <I2C_WriteDeviceRegister>
  }
  
  return IOE_OK;
 800fe44:	f04f 0300 	mov.w	r3, #0
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f107 0710 	add.w	r7, r7, #16
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}
 800fe52:	bf00      	nop

0800fe54 <IOE_ReadIOPin>:
  *   @arg  MEMS_INT2_PIN: MEMS interrupt line 2.
  *   @arg  JOY_IO_PINS: Joystick IO pins (use IOE_JoyStickGetState for these pins)  
  * @retval None
  */
uint8_t IOE_ReadIOPin(uint32_t IO_Pin)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b084      	sub	sp, #16
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
  uint8_t DeviceAddr = 0;
 800fe5c:	f04f 0300 	mov.w	r3, #0
 800fe60:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp = 0;  
 800fe62:	f04f 0300 	mov.w	r3, #0
 800fe66:	73bb      	strb	r3, [r7, #14]
  if (IO_Pin & IO1_IN_ALL_PINS)
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f003 030c 	and.w	r3, r3, #12
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d003      	beq.n	800fe7a <IOE_ReadIOPin+0x26>
  {
    DeviceAddr = IOE_1_ADDR;
 800fe72:	f04f 0382 	mov.w	r3, #130	; 0x82
 800fe76:	73fb      	strb	r3, [r7, #15]
 800fe78:	e00b      	b.n	800fe92 <IOE_ReadIOPin+0x3e>
  }
  else if (IO_Pin & IO2_IN_ALL_PINS)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d003      	beq.n	800fe8c <IOE_ReadIOPin+0x38>
  {
    DeviceAddr = IOE_2_ADDR;
 800fe84:	f04f 0388 	mov.w	r3, #136	; 0x88
 800fe88:	73fb      	strb	r3, [r7, #15]
 800fe8a:	e002      	b.n	800fe92 <IOE_ReadIOPin+0x3e>
  }
  else 
  {
    return PARAM_ERROR;
 800fe8c:	f04f 0303 	mov.w	r3, #3
 800fe90:	e013      	b.n	800feba <IOE_ReadIOPin+0x66>
  }
  
  /* Get all the Pins status */
  tmp = I2C_ReadDeviceRegister(DeviceAddr, IOE_REG_GPIO_MP_STA);
 800fe92:	7bfb      	ldrb	r3, [r7, #15]
 800fe94:	4618      	mov	r0, r3
 800fe96:	f04f 0112 	mov.w	r1, #18
 800fe9a:	f000 fe4b 	bl	8010b34 <I2C_ReadDeviceRegister>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	73bb      	strb	r3, [r7, #14]
  if ((tmp & (uint8_t)IO_Pin) != 0)
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	b2da      	uxtb	r2, r3
 800fea6:	7bbb      	ldrb	r3, [r7, #14]
 800fea8:	4013      	ands	r3, r2
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	2b00      	cmp	r3, #0
 800feae:	d002      	beq.n	800feb6 <IOE_ReadIOPin+0x62>
  {
    return BitSet;
 800feb0:	f04f 0301 	mov.w	r3, #1
 800feb4:	e001      	b.n	800feba <IOE_ReadIOPin+0x66>
  }  
  else 
  {
    return BitReset;
 800feb6:	f04f 0300 	mov.w	r3, #0
  }
}
 800feba:	4618      	mov	r0, r3
 800febc:	f107 0710 	add.w	r7, r7, #16
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <IOE_JoyStickGetState>:
  *   @arg  JOY_RIGHT
  *   @arg  JOY_UP
  */
JOYState_TypeDef
 IOE_JoyStickGetState(void)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 800feca:	f04f 0300 	mov.w	r3, #0
 800fece:	71fb      	strb	r3, [r7, #7]
  /* Read the status of all pins */
  tmp = (uint32_t)I2C_ReadDeviceRegister(IOE_2_ADDR, IOE_REG_GPIO_MP_STA);
 800fed0:	f04f 0088 	mov.w	r0, #136	; 0x88
 800fed4:	f04f 0112 	mov.w	r1, #18
 800fed8:	f000 fe2c 	bl	8010b34 <I2C_ReadDeviceRegister>
 800fedc:	4603      	mov	r3, r0
 800fede:	71fb      	strb	r3, [r7, #7]
   
  /* Check the pressed keys */
  if ((tmp & JOY_IO_NONE) == JOY_IO_NONE)
 800fee0:	79fb      	ldrb	r3, [r7, #7]
 800fee2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800fee6:	2bf8      	cmp	r3, #248	; 0xf8
 800fee8:	d102      	bne.n	800fef0 <IOE_JoyStickGetState+0x2c>
  {
    return (JOYState_TypeDef) JOY_NONE;
 800feea:	f04f 0300 	mov.w	r3, #0
 800feee:	e028      	b.n	800ff42 <IOE_JoyStickGetState+0x7e>
  }
  else if (!(tmp & JOY_IO_SEL))
 800fef0:	79fb      	ldrb	r3, [r7, #7]
 800fef2:	b25b      	sxtb	r3, r3
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	db02      	blt.n	800fefe <IOE_JoyStickGetState+0x3a>
  {
    return (JOYState_TypeDef) JOY_SEL;
 800fef8:	f04f 0301 	mov.w	r3, #1
 800fefc:	e021      	b.n	800ff42 <IOE_JoyStickGetState+0x7e>
  }
  else if (!(tmp & JOY_IO_DOWN))
 800fefe:	79fb      	ldrb	r3, [r7, #7]
 800ff00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d102      	bne.n	800ff0e <IOE_JoyStickGetState+0x4a>
  {
    return (JOYState_TypeDef) JOY_DOWN;
 800ff08:	f04f 0302 	mov.w	r3, #2
 800ff0c:	e019      	b.n	800ff42 <IOE_JoyStickGetState+0x7e>
  }
  else if (!(tmp & JOY_IO_LEFT))
 800ff0e:	79fb      	ldrb	r3, [r7, #7]
 800ff10:	f003 0320 	and.w	r3, r3, #32
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d102      	bne.n	800ff1e <IOE_JoyStickGetState+0x5a>
  {
    return (JOYState_TypeDef) JOY_LEFT;
 800ff18:	f04f 0303 	mov.w	r3, #3
 800ff1c:	e011      	b.n	800ff42 <IOE_JoyStickGetState+0x7e>
  }
  else if (!(tmp & JOY_IO_RIGHT))
 800ff1e:	79fb      	ldrb	r3, [r7, #7]
 800ff20:	f003 0310 	and.w	r3, r3, #16
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d102      	bne.n	800ff2e <IOE_JoyStickGetState+0x6a>
  {
    return (JOYState_TypeDef) JOY_RIGHT;
 800ff28:	f04f 0304 	mov.w	r3, #4
 800ff2c:	e009      	b.n	800ff42 <IOE_JoyStickGetState+0x7e>
  }
  else if (!(tmp & JOY_IO_UP))
 800ff2e:	79fb      	ldrb	r3, [r7, #7]
 800ff30:	f003 0308 	and.w	r3, r3, #8
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d102      	bne.n	800ff3e <IOE_JoyStickGetState+0x7a>
  {
    return (JOYState_TypeDef) JOY_UP;
 800ff38:	f04f 0305 	mov.w	r3, #5
 800ff3c:	e001      	b.n	800ff42 <IOE_JoyStickGetState+0x7e>
  }
  else
  { 
    return (JOYState_TypeDef) JOY_NONE;
 800ff3e:	f04f 0300 	mov.w	r3, #0
  }
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	f107 0708 	add.w	r7, r7, #8
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}

0800ff4c <IOE_TS_GetState>:
  * @brief  Returns Status and positions of the Touch screen.
  * @param  None
  * @retval Pointer to TS_STATE structure holding Touch Screen information.
  */
TS_STATE* IOE_TS_GetState(void)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
  uint32_t xDiff, yDiff , x , y;
  static uint32_t _x = 0, _y = 0;
  
  /* Check if the Touch detect event happened */
  TS_State.TouchDetected = (I2C_ReadDeviceRegister(IOE_1_ADDR, IOE_REG_TSC_CTRL) & 0x80);
 800ff52:	f04f 0082 	mov.w	r0, #130	; 0x82
 800ff56:	f04f 0140 	mov.w	r1, #64	; 0x40
 800ff5a:	f000 fdeb 	bl	8010b34 <I2C_ReadDeviceRegister>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff64:	b29a      	uxth	r2, r3
 800ff66:	f240 03e4 	movw	r3, #228	; 0xe4
 800ff6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff6e:	801a      	strh	r2, [r3, #0]
  if(TS_State.TouchDetected) 
 800ff70:	f240 03e4 	movw	r3, #228	; 0xe4
 800ff74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff78:	881b      	ldrh	r3, [r3, #0]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d048      	beq.n	8010010 <IOE_TS_GetState+0xc4>
  {
    x = IOE_TS_Read_X();
 800ff7e:	f001 f903 	bl	8011188 <IOE_TS_Read_X>
 800ff82:	4603      	mov	r3, r0
 800ff84:	60fb      	str	r3, [r7, #12]
    y = IOE_TS_Read_Y();
 800ff86:	f001 f933 	bl	80111f0 <IOE_TS_Read_Y>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	60bb      	str	r3, [r7, #8]
    xDiff = x > _x? (x - _x): (_x - x);
 800ff8e:	f240 037c 	movw	r3, #124	; 0x7c
 800ff92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	68fa      	ldr	r2, [r7, #12]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d907      	bls.n	800ffae <IOE_TS_GetState+0x62>
 800ff9e:	f240 037c 	movw	r3, #124	; 0x7c
 800ffa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	68fa      	ldr	r2, [r7, #12]
 800ffaa:	1ad3      	subs	r3, r2, r3
 800ffac:	e006      	b.n	800ffbc <IOE_TS_GetState+0x70>
 800ffae:	f240 037c 	movw	r3, #124	; 0x7c
 800ffb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ffb6:	681a      	ldr	r2, [r3, #0]
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	1ad3      	subs	r3, r2, r3
 800ffbc:	607b      	str	r3, [r7, #4]
    yDiff = y > _y? (y - _y): (_y - y);       
 800ffbe:	f240 0380 	movw	r3, #128	; 0x80
 800ffc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	68ba      	ldr	r2, [r7, #8]
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d907      	bls.n	800ffde <IOE_TS_GetState+0x92>
 800ffce:	f240 0380 	movw	r3, #128	; 0x80
 800ffd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	68ba      	ldr	r2, [r7, #8]
 800ffda:	1ad3      	subs	r3, r2, r3
 800ffdc:	e006      	b.n	800ffec <IOE_TS_GetState+0xa0>
 800ffde:	f240 0380 	movw	r3, #128	; 0x80
 800ffe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	1ad3      	subs	r3, r2, r3
 800ffec:	603b      	str	r3, [r7, #0]
    if (xDiff + yDiff > 5)
 800ffee:	687a      	ldr	r2, [r7, #4]
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	18d3      	adds	r3, r2, r3
 800fff4:	2b05      	cmp	r3, #5
 800fff6:	d90b      	bls.n	8010010 <IOE_TS_GetState+0xc4>
    {
      _x = x;
 800fff8:	f240 037c 	movw	r3, #124	; 0x7c
 800fffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010000:	68fa      	ldr	r2, [r7, #12]
 8010002:	601a      	str	r2, [r3, #0]
      _y = y;       
 8010004:	f240 0380 	movw	r3, #128	; 0x80
 8010008:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801000c:	68ba      	ldr	r2, [r7, #8]
 801000e:	601a      	str	r2, [r3, #0]
    }
  }  
  /* Update the X position */
  TS_State.X = _x;
 8010010:	f240 037c 	movw	r3, #124	; 0x7c
 8010014:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	b29a      	uxth	r2, r3
 801001c:	f240 03e4 	movw	r3, #228	; 0xe4
 8010020:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010024:	805a      	strh	r2, [r3, #2]
    
  /* Update the Y position */  
  TS_State.Y = _y;
 8010026:	f240 0380 	movw	r3, #128	; 0x80
 801002a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	b29a      	uxth	r2, r3
 8010032:	f240 03e4 	movw	r3, #228	; 0xe4
 8010036:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801003a:	809a      	strh	r2, [r3, #4]
  /* Update the Z Pression index */  
  TS_State.Z = IOE_TS_Read_Z();  
 801003c:	f001 f910 	bl	8011260 <IOE_TS_Read_Z>
 8010040:	4603      	mov	r3, r0
 8010042:	461a      	mov	r2, r3
 8010044:	f240 03e4 	movw	r3, #228	; 0xe4
 8010048:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801004c:	80da      	strh	r2, [r3, #6]
  
  /* Clear the interrupt pending bit and enable the FIFO again */
  I2C_WriteDeviceRegister(IOE_1_ADDR, IOE_REG_FIFO_STA, 0x01);
 801004e:	f04f 0082 	mov.w	r0, #130	; 0x82
 8010052:	f04f 014b 	mov.w	r1, #75	; 0x4b
 8010056:	f04f 0201 	mov.w	r2, #1
 801005a:	f000 fc31 	bl	80108c0 <I2C_WriteDeviceRegister>
  I2C_WriteDeviceRegister(IOE_1_ADDR, IOE_REG_FIFO_STA, 0x00);
 801005e:	f04f 0082 	mov.w	r0, #130	; 0x82
 8010062:	f04f 014b 	mov.w	r1, #75	; 0x4b
 8010066:	f04f 0200 	mov.w	r2, #0
 801006a:	f000 fc29 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* Return pointer to the updated structure */
  return &TS_State; 
 801006e:	f240 03e4 	movw	r3, #228	; 0xe4
 8010072:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8010076:	4618      	mov	r0, r3
 8010078:	f107 0710 	add.w	r7, r7, #16
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <IOE_TempSens_GetData>:
  * @brief  Returns the temperature row value (in 16 bit format).
  * @param  None
  * @retval The temperature row value.
  */
uint32_t IOE_TempSens_GetData(void)
{  
 8010080:	b580      	push	{r7, lr}
 8010082:	af00      	add	r7, sp, #0
  static __IO uint32_t tmp = 0;  
    
  /* Acquire data enable */
  I2C_WriteDeviceRegister(IOE_2_ADDR, IOE_REG_TEMP_CTRL, 0x03);
 8010084:	f04f 0088 	mov.w	r0, #136	; 0x88
 8010088:	f04f 0160 	mov.w	r1, #96	; 0x60
 801008c:	f04f 0203 	mov.w	r2, #3
 8010090:	f000 fc16 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* Enable the TEMPSENS module */
  tmp = (uint32_t)((I2C_ReadDeviceRegister(IOE_2_ADDR, IOE_REG_TEMP_DATA) & 0x03) << 8); 
 8010094:	f04f 0088 	mov.w	r0, #136	; 0x88
 8010098:	f04f 0161 	mov.w	r1, #97	; 0x61
 801009c:	f000 fd4a 	bl	8010b34 <I2C_ReadDeviceRegister>
 80100a0:	4603      	mov	r3, r0
 80100a2:	f003 0303 	and.w	r3, r3, #3
 80100a6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80100aa:	461a      	mov	r2, r3
 80100ac:	f240 0378 	movw	r3, #120	; 0x78
 80100b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80100b4:	601a      	str	r2, [r3, #0]
  tmp |= (uint32_t)I2C_ReadDeviceRegister(IOE_2_ADDR, IOE_REG_TEMP_DATA + 1); 
 80100b6:	f04f 0088 	mov.w	r0, #136	; 0x88
 80100ba:	f04f 0162 	mov.w	r1, #98	; 0x62
 80100be:	f000 fd39 	bl	8010b34 <I2C_ReadDeviceRegister>
 80100c2:	4603      	mov	r3, r0
 80100c4:	461a      	mov	r2, r3
 80100c6:	f240 0378 	movw	r3, #120	; 0x78
 80100ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	431a      	orrs	r2, r3
 80100d2:	f240 0378 	movw	r3, #120	; 0x78
 80100d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80100da:	601a      	str	r2, [r3, #0]
  
  tmp = (uint32_t)((33 * tmp * 100) / 751);
 80100dc:	f240 0378 	movw	r3, #120	; 0x78
 80100e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	f640 42e4 	movw	r2, #3300	; 0xce4
 80100ea:	fb02 f203 	mul.w	r2, r2, r3
 80100ee:	f245 63ed 	movw	r3, #22253	; 0x56ed
 80100f2:	f6c5 530f 	movt	r3, #23823	; 0x5d0f
 80100f6:	fba3 1302 	umull	r1, r3, r3, r2
 80100fa:	1ad2      	subs	r2, r2, r3
 80100fc:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010100:	189b      	adds	r3, r3, r2
 8010102:	ea4f 2253 	mov.w	r2, r3, lsr #9
 8010106:	f240 0378 	movw	r3, #120	; 0x78
 801010a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801010e:	601a      	str	r2, [r3, #0]
  tmp = (uint32_t)((tmp + 5) / 10);
 8010110:	f240 0378 	movw	r3, #120	; 0x78
 8010114:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f103 0205 	add.w	r2, r3, #5
 801011e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 8010122:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 8010126:	fba3 1302 	umull	r1, r3, r3, r2
 801012a:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 801012e:	f240 0378 	movw	r3, #120	; 0x78
 8010132:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010136:	601a      	str	r2, [r3, #0]
  
  /* return the temperature row value */
  return tmp;
 8010138:	f240 0378 	movw	r3, #120	; 0x78
 801013c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010140:	681b      	ldr	r3, [r3, #0]
}
 8010142:	4618      	mov	r0, r3
 8010144:	bd80      	pop	{r7, pc}
 8010146:	bf00      	nop

08010148 <IOE_GetGITStatus>:
  *   @arg  Global_IT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  Global_IT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval Status of the checked flag. Could be SET or RESET.
  */
FlagStatus IOE_GetGITStatus(uint8_t DeviceAddr, uint8_t Global_IT)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b084      	sub	sp, #16
 801014c:	af00      	add	r7, sp, #0
 801014e:	4602      	mov	r2, r0
 8010150:	460b      	mov	r3, r1
 8010152:	71fa      	strb	r2, [r7, #7]
 8010154:	71bb      	strb	r3, [r7, #6]
  __IO uint8_t tmp = 0;
 8010156:	f04f 0300 	mov.w	r3, #0
 801015a:	73fb      	strb	r3, [r7, #15]
 
  /* get the Interrupt status */
  tmp = I2C_ReadDeviceRegister(DeviceAddr, IOE_REG_INT_STA);
 801015c:	79fb      	ldrb	r3, [r7, #7]
 801015e:	4618      	mov	r0, r3
 8010160:	f04f 010b 	mov.w	r1, #11
 8010164:	f000 fce6 	bl	8010b34 <I2C_ReadDeviceRegister>
 8010168:	4603      	mov	r3, r0
 801016a:	73fb      	strb	r3, [r7, #15]
  
  if ((tmp & (uint8_t)Global_IT) != 0)
 801016c:	7bfb      	ldrb	r3, [r7, #15]
 801016e:	b2da      	uxtb	r2, r3
 8010170:	79bb      	ldrb	r3, [r7, #6]
 8010172:	4013      	ands	r3, r2
 8010174:	b2db      	uxtb	r3, r3
 8010176:	2b00      	cmp	r3, #0
 8010178:	d002      	beq.n	8010180 <IOE_GetGITStatus+0x38>
  {
    return SET;
 801017a:	f04f 0301 	mov.w	r3, #1
 801017e:	e001      	b.n	8010184 <IOE_GetGITStatus+0x3c>
  }
  else
  {
    return RESET;
 8010180:	f04f 0300 	mov.w	r3, #0
  }
}
 8010184:	4618      	mov	r0, r3
 8010186:	f107 0710 	add.w	r7, r7, #16
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop

08010190 <IOE_ClearGITPending>:
  *   @arg  Global_IT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  Global_IT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_ClearGITPending(uint8_t DeviceAddr, uint8_t Global_IT)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b082      	sub	sp, #8
 8010194:	af00      	add	r7, sp, #0
 8010196:	4602      	mov	r2, r0
 8010198:	460b      	mov	r3, r1
 801019a:	71fa      	strb	r2, [r7, #7]
 801019c:	71bb      	strb	r3, [r7, #6]
  /* Write 1 to the bits that have to be cleared */
  I2C_WriteDeviceRegister(DeviceAddr, IOE_REG_INT_STA, Global_IT); 
 801019e:	79fa      	ldrb	r2, [r7, #7]
 80101a0:	79bb      	ldrb	r3, [r7, #6]
 80101a2:	4610      	mov	r0, r2
 80101a4:	f04f 010b 	mov.w	r1, #11
 80101a8:	461a      	mov	r2, r3
 80101aa:	f000 fb89 	bl	80108c0 <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;
 80101ae:	f04f 0300 	mov.w	r3, #0
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	f107 0708 	add.w	r7, r7, #8
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}

080101bc <IOE_GetIOITStatus>:
  * @param  IO_IT: the IO interrupt to be checked could be IO_ITx Where x can be 
  *         from 0 to 7.             
  * @retval Status of the checked flag. Could be SET or RESET.
  */
FlagStatus IOE_GetIOITStatus(uint8_t DeviceAddr, uint8_t IO_IT)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b084      	sub	sp, #16
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	4602      	mov	r2, r0
 80101c4:	460b      	mov	r3, r1
 80101c6:	71fa      	strb	r2, [r7, #7]
 80101c8:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 80101ca:	f04f 0300 	mov.w	r3, #0
 80101ce:	73fb      	strb	r3, [r7, #15]
 
  /* get the Interrupt status */
  tmp = I2C_ReadDeviceRegister(DeviceAddr, IOE_REG_GPIO_INT_STA);
 80101d0:	79fb      	ldrb	r3, [r7, #7]
 80101d2:	4618      	mov	r0, r3
 80101d4:	f04f 010d 	mov.w	r1, #13
 80101d8:	f000 fcac 	bl	8010b34 <I2C_ReadDeviceRegister>
 80101dc:	4603      	mov	r3, r0
 80101de:	73fb      	strb	r3, [r7, #15]
  
  if ((tmp & (uint8_t)IO_IT) != 0)
 80101e0:	7bfa      	ldrb	r2, [r7, #15]
 80101e2:	79bb      	ldrb	r3, [r7, #6]
 80101e4:	4013      	ands	r3, r2
 80101e6:	b2db      	uxtb	r3, r3
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d002      	beq.n	80101f2 <IOE_GetIOITStatus+0x36>
  {
    return SET;
 80101ec:	f04f 0301 	mov.w	r3, #1
 80101f0:	e001      	b.n	80101f6 <IOE_GetIOITStatus+0x3a>
  }
  else
  {
    return RESET;
 80101f2:	f04f 0300 	mov.w	r3, #0
  }
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	f107 0710 	add.w	r7, r7, #16
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <IOE_ClearIOITPending>:
  * @param  IO_IT: the IO interrupt to be checked could be IO_ITx Where x can be 
  *         from 0 to 7.              
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_ClearIOITPending(uint8_t DeviceAddr, uint8_t IO_IT)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	4602      	mov	r2, r0
 8010208:	460b      	mov	r3, r1
 801020a:	71fa      	strb	r2, [r7, #7]
 801020c:	71bb      	strb	r3, [r7, #6]
  /* Write 1 to the bits that have to be cleared */
  I2C_WriteDeviceRegister(DeviceAddr, IOE_REG_GPIO_INT_STA, IO_IT);  
 801020e:	79fa      	ldrb	r2, [r7, #7]
 8010210:	79bb      	ldrb	r3, [r7, #6]
 8010212:	4610      	mov	r0, r2
 8010214:	f04f 010d 	mov.w	r1, #13
 8010218:	461a      	mov	r2, r3
 801021a:	f000 fb51 	bl	80108c0 <I2C_WriteDeviceRegister>

  /* Clear the Edge detection pending bit*/
  I2C_WriteDeviceRegister(IOE_2_ADDR, IOE_REG_GPIO_ED, IO_IT);
 801021e:	79bb      	ldrb	r3, [r7, #6]
 8010220:	f04f 0088 	mov.w	r0, #136	; 0x88
 8010224:	f04f 0114 	mov.w	r1, #20
 8010228:	461a      	mov	r2, r3
 801022a:	f000 fb49 	bl	80108c0 <I2C_WriteDeviceRegister>

  /* Clear the Rising edge pending bit */
  I2C_WriteDeviceRegister(IOE_2_ADDR, IOE_REG_GPIO_RE, IO_IT);
 801022e:	79bb      	ldrb	r3, [r7, #6]
 8010230:	f04f 0088 	mov.w	r0, #136	; 0x88
 8010234:	f04f 0115 	mov.w	r1, #21
 8010238:	461a      	mov	r2, r3
 801023a:	f000 fb41 	bl	80108c0 <I2C_WriteDeviceRegister>

  /* Clear the Falling edge pending bit */
  I2C_WriteDeviceRegister(IOE_2_ADDR, IOE_REG_GPIO_FE, IO_IT);  
 801023e:	79bb      	ldrb	r3, [r7, #6]
 8010240:	f04f 0088 	mov.w	r0, #136	; 0x88
 8010244:	f04f 0116 	mov.w	r1, #22
 8010248:	461a      	mov	r2, r3
 801024a:	f000 fb39 	bl	80108c0 <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;
 801024e:	f04f 0300 	mov.w	r3, #0
}
 8010252:	4618      	mov	r0, r3
 8010254:	f107 0708 	add.w	r7, r7, #8
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <IOE_IsOperational>:
  * @param  DeviceAddr: The address of the IOExpander, could be : IOE_1_ADDR
  *         or IOE_2_ADDR.
  * @retval IOE_OK if IOE is operational. Other value if failure.
  */
uint8_t IOE_IsOperational(uint8_t DeviceAddr)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b082      	sub	sp, #8
 8010260:	af00      	add	r7, sp, #0
 8010262:	4603      	mov	r3, r0
 8010264:	71fb      	strb	r3, [r7, #7]
  /* Return Error if the ID is not correct */
  if( IOE_ReadID(DeviceAddr) != (uint16_t)STMPE811_ID )
 8010266:	79fb      	ldrb	r3, [r7, #7]
 8010268:	4618      	mov	r0, r3
 801026a:	f000 f83b 	bl	80102e4 <IOE_ReadID>
 801026e:	4603      	mov	r3, r0
 8010270:	461a      	mov	r2, r3
 8010272:	f640 0311 	movw	r3, #2065	; 0x811
 8010276:	429a      	cmp	r2, r3
 8010278:	d00c      	beq.n	8010294 <IOE_IsOperational+0x38>
  {
    /* Check if a Timeout occurred */
    if (IOE_TimeOut == 0)
 801027a:	f240 0338 	movw	r3, #56	; 0x38
 801027e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d102      	bne.n	801028e <IOE_IsOperational+0x32>
    {
      return(IOE_TimeoutUserCallback());
 8010288:	f04f 0302 	mov.w	r3, #2
 801028c:	e004      	b.n	8010298 <IOE_IsOperational+0x3c>
    }
    else
    {
      return IOE_FAILURE; /* ID is not Correct */
 801028e:	f04f 0301 	mov.w	r3, #1
 8010292:	e001      	b.n	8010298 <IOE_IsOperational+0x3c>
    }
  } 
  else 
  {
    return IOE_OK; /* ID is correct */
 8010294:	f04f 0300 	mov.w	r3, #0
  }
}
 8010298:	4618      	mov	r0, r3
 801029a:	f107 0708 	add.w	r7, r7, #8
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop

080102a4 <IOE_Reset>:
  * @param  DeviceAddr: The address of the IOExpander, could be : IOE_1_ADDR
  *         or IOE_2_ADDR.
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_Reset(uint8_t DeviceAddr)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b082      	sub	sp, #8
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	4603      	mov	r3, r0
 80102ac:	71fb      	strb	r3, [r7, #7]
  /* Power Down the IO_Expander */
  I2C_WriteDeviceRegister(DeviceAddr, IOE_REG_SYS_CTRL1, 0x02);
 80102ae:	79fb      	ldrb	r3, [r7, #7]
 80102b0:	4618      	mov	r0, r3
 80102b2:	f04f 0103 	mov.w	r1, #3
 80102b6:	f04f 0202 	mov.w	r2, #2
 80102ba:	f000 fb01 	bl	80108c0 <I2C_WriteDeviceRegister>

  /* wait for a delay to insure registers erasing */
  _delay_(2); 
 80102be:	f04f 0002 	mov.w	r0, #2
 80102c2:	f001 f933 	bl	801152c <delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized*/
  I2C_WriteDeviceRegister(DeviceAddr, IOE_REG_SYS_CTRL1, 0x00);
 80102c6:	79fb      	ldrb	r3, [r7, #7]
 80102c8:	4618      	mov	r0, r3
 80102ca:	f04f 0103 	mov.w	r1, #3
 80102ce:	f04f 0200 	mov.w	r2, #0
 80102d2:	f000 faf5 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;    
 80102d6:	f04f 0300 	mov.w	r3, #0
}
 80102da:	4618      	mov	r0, r3
 80102dc:	f107 0708 	add.w	r7, r7, #8
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}

080102e4 <IOE_ReadID>:
  * @param  DeviceAddr: The address of the IOExpander, could be : IOE_1_ADDR
  *         or IOE_2_ADDR.
  * @retval The Device ID (two bytes).
  */
uint16_t IOE_ReadID(uint8_t DeviceAddr)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b084      	sub	sp, #16
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	4603      	mov	r3, r0
 80102ec:	71fb      	strb	r3, [r7, #7]
  uint16_t tmp = 0;
 80102ee:	f04f 0300 	mov.w	r3, #0
 80102f2:	81fb      	strh	r3, [r7, #14]

  /* Read device ID  */
  tmp = I2C_ReadDeviceRegister(DeviceAddr, 0);
 80102f4:	79fb      	ldrb	r3, [r7, #7]
 80102f6:	4618      	mov	r0, r3
 80102f8:	f04f 0100 	mov.w	r1, #0
 80102fc:	f000 fc1a 	bl	8010b34 <I2C_ReadDeviceRegister>
 8010300:	4603      	mov	r3, r0
 8010302:	81fb      	strh	r3, [r7, #14]
  tmp = (uint32_t)(tmp << 8);
 8010304:	89fb      	ldrh	r3, [r7, #14]
 8010306:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801030a:	81fb      	strh	r3, [r7, #14]
  tmp |= (uint32_t)I2C_ReadDeviceRegister(DeviceAddr, 1);
 801030c:	79fb      	ldrb	r3, [r7, #7]
 801030e:	4618      	mov	r0, r3
 8010310:	f04f 0101 	mov.w	r1, #1
 8010314:	f000 fc0e 	bl	8010b34 <I2C_ReadDeviceRegister>
 8010318:	4603      	mov	r3, r0
 801031a:	461a      	mov	r2, r3
 801031c:	89fb      	ldrh	r3, [r7, #14]
 801031e:	4313      	orrs	r3, r2
 8010320:	81fb      	strh	r3, [r7, #14]
  
  /* Return the ID */
  return (uint16_t)tmp;
 8010322:	89fb      	ldrh	r3, [r7, #14]
}
 8010324:	4618      	mov	r0, r3
 8010326:	f107 0710 	add.w	r7, r7, #16
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}
 801032e:	bf00      	nop

08010330 <IOE_FnctCmd>:
  *   @arg  IOE_ADC_FCT : ADC function
  *   @arg  IOE_TEMPSENS_FCT : Temperature Sensor function
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_FnctCmd(uint8_t DeviceAddr, uint8_t Fct, FunctionalState NewState)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b084      	sub	sp, #16
 8010334:	af00      	add	r7, sp, #0
 8010336:	4613      	mov	r3, r2
 8010338:	4602      	mov	r2, r0
 801033a:	71fa      	strb	r2, [r7, #7]
 801033c:	460a      	mov	r2, r1
 801033e:	71ba      	strb	r2, [r7, #6]
 8010340:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8010342:	f04f 0300 	mov.w	r3, #0
 8010346:	73fb      	strb	r3, [r7, #15]
  
  /* Get the register value */
  tmp = I2C_ReadDeviceRegister(DeviceAddr, IOE_REG_SYS_CTRL2);
 8010348:	79fb      	ldrb	r3, [r7, #7]
 801034a:	4618      	mov	r0, r3
 801034c:	f04f 0104 	mov.w	r1, #4
 8010350:	f000 fbf0 	bl	8010b34 <I2C_ReadDeviceRegister>
 8010354:	4603      	mov	r3, r0
 8010356:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 8010358:	797b      	ldrb	r3, [r7, #5]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d008      	beq.n	8010370 <IOE_FnctCmd+0x40>
  {
    /* Set the Functionalities to be Enabled */    
    tmp &= ~(uint8_t)Fct;
 801035e:	79bb      	ldrb	r3, [r7, #6]
 8010360:	ea6f 0303 	mvn.w	r3, r3
 8010364:	b2da      	uxtb	r2, r3
 8010366:	7bfb      	ldrb	r3, [r7, #15]
 8010368:	4013      	ands	r3, r2
 801036a:	b2db      	uxtb	r3, r3
 801036c:	73fb      	strb	r3, [r7, #15]
 801036e:	e003      	b.n	8010378 <IOE_FnctCmd+0x48>
  }
  else
  {
    /* Set the Functionalities to be Disabled */    
    tmp |= (uint8_t)Fct;  
 8010370:	7bfa      	ldrb	r2, [r7, #15]
 8010372:	79bb      	ldrb	r3, [r7, #6]
 8010374:	4313      	orrs	r3, r2
 8010376:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Set the register value */
  I2C_WriteDeviceRegister(DeviceAddr, IOE_REG_SYS_CTRL2, tmp);
 8010378:	79fa      	ldrb	r2, [r7, #7]
 801037a:	7bfb      	ldrb	r3, [r7, #15]
 801037c:	4610      	mov	r0, r2
 801037e:	f04f 0104 	mov.w	r1, #4
 8010382:	461a      	mov	r2, r3
 8010384:	f000 fa9c 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;    
 8010388:	f04f 0300 	mov.w	r3, #0
}
 801038c:	4618      	mov	r0, r3
 801038e:	f107 0710 	add.w	r7, r7, #16
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}
 8010396:	bf00      	nop

08010398 <IOE_IOPinConfig>:
  * @param  IO_Pin: IO_Pin_x: Where x can be from 0 to 7.   
  * @param  Direction: could be Direction_IN or Direction_OUT.      
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_IOPinConfig(uint8_t DeviceAddr, uint8_t IO_Pin, uint8_t Direction)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	4613      	mov	r3, r2
 80103a0:	4602      	mov	r2, r0
 80103a2:	71fa      	strb	r2, [r7, #7]
 80103a4:	460a      	mov	r2, r1
 80103a6:	71ba      	strb	r2, [r7, #6]
 80103a8:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;   
 80103aa:	f04f 0300 	mov.w	r3, #0
 80103ae:	73fb      	strb	r3, [r7, #15]
  
  /* Get all the Pins direction */
  tmp = I2C_ReadDeviceRegister(DeviceAddr, IOE_REG_GPIO_DIR);
 80103b0:	79fb      	ldrb	r3, [r7, #7]
 80103b2:	4618      	mov	r0, r3
 80103b4:	f04f 0113 	mov.w	r1, #19
 80103b8:	f000 fbbc 	bl	8010b34 <I2C_ReadDeviceRegister>
 80103bc:	4603      	mov	r3, r0
 80103be:	73fb      	strb	r3, [r7, #15]
  
  if (Direction != Direction_IN)
 80103c0:	797b      	ldrb	r3, [r7, #5]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d004      	beq.n	80103d0 <IOE_IOPinConfig+0x38>
  {
    tmp |= (uint8_t)IO_Pin;
 80103c6:	7bfa      	ldrb	r2, [r7, #15]
 80103c8:	79bb      	ldrb	r3, [r7, #6]
 80103ca:	4313      	orrs	r3, r2
 80103cc:	73fb      	strb	r3, [r7, #15]
 80103ce:	e007      	b.n	80103e0 <IOE_IOPinConfig+0x48>
  }  
  else 
  {
    tmp &= ~(uint8_t)IO_Pin;
 80103d0:	79bb      	ldrb	r3, [r7, #6]
 80103d2:	ea6f 0303 	mvn.w	r3, r3
 80103d6:	b2da      	uxtb	r2, r3
 80103d8:	7bfb      	ldrb	r3, [r7, #15]
 80103da:	4013      	ands	r3, r2
 80103dc:	b2db      	uxtb	r3, r3
 80103de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write the register new value */
  I2C_WriteDeviceRegister(DeviceAddr, IOE_REG_GPIO_DIR, tmp);
 80103e0:	79fa      	ldrb	r2, [r7, #7]
 80103e2:	7bfb      	ldrb	r3, [r7, #15]
 80103e4:	4610      	mov	r0, r2
 80103e6:	f04f 0113 	mov.w	r1, #19
 80103ea:	461a      	mov	r2, r3
 80103ec:	f000 fa68 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;      
 80103f0:	f04f 0300 	mov.w	r3, #0
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	f107 0710 	add.w	r7, r7, #16
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop

08010400 <IOE_GITCmd>:
  *         or IOE_2_ADDR.
  * @param  NewState: could be ENABLE or DISABLE.        
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_GITCmd(uint8_t DeviceAddr, FunctionalState NewState)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af00      	add	r7, sp, #0
 8010406:	4602      	mov	r2, r0
 8010408:	460b      	mov	r3, r1
 801040a:	71fa      	strb	r2, [r7, #7]
 801040c:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 801040e:	f04f 0300 	mov.w	r3, #0
 8010412:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  I2C_ReadDeviceRegister(DeviceAddr, IOE_REG_INT_CTRL);
 8010414:	79fb      	ldrb	r3, [r7, #7]
 8010416:	4618      	mov	r0, r3
 8010418:	f04f 0109 	mov.w	r1, #9
 801041c:	f000 fb8a 	bl	8010b34 <I2C_ReadDeviceRegister>
  
  if (NewState != DISABLE)
 8010420:	79bb      	ldrb	r3, [r7, #6]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d004      	beq.n	8010430 <IOE_GITCmd+0x30>
  {
    /* Set the global interrupts to be Enabled */    
    tmp |= (uint8_t)IOE_GIT_EN;
 8010426:	7bfb      	ldrb	r3, [r7, #15]
 8010428:	f043 0301 	orr.w	r3, r3, #1
 801042c:	73fb      	strb	r3, [r7, #15]
 801042e:	e003      	b.n	8010438 <IOE_GITCmd+0x38>
  }
  else
  {
    /* Set the global interrupts to be Disabled */    
    tmp &= ~(uint8_t)IOE_GIT_EN;
 8010430:	7bfb      	ldrb	r3, [r7, #15]
 8010432:	f023 0301 	bic.w	r3, r3, #1
 8010436:	73fb      	strb	r3, [r7, #15]
  }  
  
  /* Write Back the Interrupt Control register */
  I2C_WriteDeviceRegister(DeviceAddr, IOE_REG_INT_CTRL, tmp);
 8010438:	79fa      	ldrb	r2, [r7, #7]
 801043a:	7bfb      	ldrb	r3, [r7, #15]
 801043c:	4610      	mov	r0, r2
 801043e:	f04f 0109 	mov.w	r1, #9
 8010442:	461a      	mov	r2, r3
 8010444:	f000 fa3c 	bl	80108c0 <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;     
 8010448:	f04f 0300 	mov.w	r3, #0
}
 801044c:	4618      	mov	r0, r3
 801044e:	f107 0710 	add.w	r7, r7, #16
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}
 8010456:	bf00      	nop

08010458 <IOE_GITConfig>:
  *   @arg  Global_IT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  Global_IT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_GITConfig(uint8_t DeviceAddr, uint8_t Global_IT, FunctionalState NewState)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b084      	sub	sp, #16
 801045c:	af00      	add	r7, sp, #0
 801045e:	4613      	mov	r3, r2
 8010460:	4602      	mov	r2, r0
 8010462:	71fa      	strb	r2, [r7, #7]
 8010464:	460a      	mov	r2, r1
 8010466:	71ba      	strb	r2, [r7, #6]
 8010468:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 801046a:	f04f 0300 	mov.w	r3, #0
 801046e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = I2C_ReadDeviceRegister(DeviceAddr, IOE_REG_INT_EN);
 8010470:	79fb      	ldrb	r3, [r7, #7]
 8010472:	4618      	mov	r0, r3
 8010474:	f04f 010a 	mov.w	r1, #10
 8010478:	f000 fb5c 	bl	8010b34 <I2C_ReadDeviceRegister>
 801047c:	4603      	mov	r3, r0
 801047e:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 8010480:	797b      	ldrb	r3, [r7, #5]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d004      	beq.n	8010490 <IOE_GITConfig+0x38>
  {
    /* Set the interrupts to be Enabled */    
    tmp |= (uint8_t)Global_IT;  
 8010486:	7bfa      	ldrb	r2, [r7, #15]
 8010488:	79bb      	ldrb	r3, [r7, #6]
 801048a:	4313      	orrs	r3, r2
 801048c:	73fb      	strb	r3, [r7, #15]
 801048e:	e007      	b.n	80104a0 <IOE_GITConfig+0x48>
  }
  else
  {
    /* Set the interrupts to be Disabled */    
    tmp &= ~(uint8_t)Global_IT;
 8010490:	79bb      	ldrb	r3, [r7, #6]
 8010492:	ea6f 0303 	mvn.w	r3, r3
 8010496:	b2da      	uxtb	r2, r3
 8010498:	7bfb      	ldrb	r3, [r7, #15]
 801049a:	4013      	ands	r3, r2
 801049c:	b2db      	uxtb	r3, r3
 801049e:	73fb      	strb	r3, [r7, #15]
  }
  /* Set the register */
  I2C_WriteDeviceRegister(DeviceAddr, IOE_REG_INT_EN, tmp);
 80104a0:	79fa      	ldrb	r2, [r7, #7]
 80104a2:	7bfb      	ldrb	r3, [r7, #15]
 80104a4:	4610      	mov	r0, r2
 80104a6:	f04f 010a 	mov.w	r1, #10
 80104aa:	461a      	mov	r2, r3
 80104ac:	f000 fa08 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;  
 80104b0:	f04f 0300 	mov.w	r3, #0
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	f107 0710 	add.w	r7, r7, #16
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
 80104be:	bf00      	nop

080104c0 <IOE_IOITConfig>:
  *   @arg  IO_IT_x: where x can be from 0 to 7.
  * @param  NewState: could be ENABLE or DISABLE.  
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_IOITConfig(uint8_t DeviceAddr, uint8_t IO_IT, FunctionalState NewState)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	4613      	mov	r3, r2
 80104c8:	4602      	mov	r2, r0
 80104ca:	71fa      	strb	r2, [r7, #7]
 80104cc:	460a      	mov	r2, r1
 80104ce:	71ba      	strb	r2, [r7, #6]
 80104d0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80104d2:	f04f 0300 	mov.w	r3, #0
 80104d6:	73fb      	strb	r3, [r7, #15]
 
  tmp = I2C_ReadDeviceRegister(DeviceAddr, IOE_REG_GPIO_INT_EN);
 80104d8:	79fb      	ldrb	r3, [r7, #7]
 80104da:	4618      	mov	r0, r3
 80104dc:	f04f 010c 	mov.w	r1, #12
 80104e0:	f000 fb28 	bl	8010b34 <I2C_ReadDeviceRegister>
 80104e4:	4603      	mov	r3, r0
 80104e6:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 80104e8:	797b      	ldrb	r3, [r7, #5]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d004      	beq.n	80104f8 <IOE_IOITConfig+0x38>
  {
    /* Set the interrupts to be Enabled */    
    tmp |= (uint8_t)IO_IT;
 80104ee:	7bfa      	ldrb	r2, [r7, #15]
 80104f0:	79bb      	ldrb	r3, [r7, #6]
 80104f2:	4313      	orrs	r3, r2
 80104f4:	73fb      	strb	r3, [r7, #15]
 80104f6:	e007      	b.n	8010508 <IOE_IOITConfig+0x48>
  }
  else
  {
    /* Set the interrupts to be Disabled */    
    tmp &= ~(uint8_t)IO_IT;
 80104f8:	79bb      	ldrb	r3, [r7, #6]
 80104fa:	ea6f 0303 	mvn.w	r3, r3
 80104fe:	b2da      	uxtb	r2, r3
 8010500:	7bfb      	ldrb	r3, [r7, #15]
 8010502:	4013      	ands	r3, r2
 8010504:	b2db      	uxtb	r3, r3
 8010506:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Set the register */
  I2C_WriteDeviceRegister(DeviceAddr, IOE_REG_GPIO_INT_EN, tmp);
 8010508:	79fa      	ldrb	r2, [r7, #7]
 801050a:	7bfb      	ldrb	r3, [r7, #15]
 801050c:	4610      	mov	r0, r2
 801050e:	f04f 010c 	mov.w	r1, #12
 8010512:	461a      	mov	r2, r3
 8010514:	f000 f9d4 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;   
 8010518:	f04f 0300 	mov.w	r3, #0
}
 801051c:	4618      	mov	r0, r3
 801051e:	f107 0710 	add.w	r7, r7, #16
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
 8010526:	bf00      	nop

08010528 <IOE_TS_Config>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  None
  * @retval IOE_OK if all initializations are OK. Other value if error.
  */
uint8_t IOE_TS_Config(void)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b082      	sub	sp, #8
 801052c:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;  
 801052e:	f04f 0300 	mov.w	r3, #0
 8010532:	71fb      	strb	r3, [r7, #7]
  
  /* Enable TSC Fct: already done in IOE_Config */
  tmp = I2C_ReadDeviceRegister(IOE_1_ADDR, IOE_REG_SYS_CTRL2);
 8010534:	f04f 0082 	mov.w	r0, #130	; 0x82
 8010538:	f04f 0104 	mov.w	r1, #4
 801053c:	f000 fafa 	bl	8010b34 <I2C_ReadDeviceRegister>
 8010540:	4603      	mov	r3, r0
 8010542:	71fb      	strb	r3, [r7, #7]
  tmp &= ~(uint32_t)(IOE_TS_FCT | IOE_ADC_FCT);
 8010544:	79fb      	ldrb	r3, [r7, #7]
 8010546:	f023 0303 	bic.w	r3, r3, #3
 801054a:	71fb      	strb	r3, [r7, #7]
  I2C_WriteDeviceRegister(IOE_1_ADDR, IOE_REG_SYS_CTRL2, tmp); 
 801054c:	79fb      	ldrb	r3, [r7, #7]
 801054e:	f04f 0082 	mov.w	r0, #130	; 0x82
 8010552:	f04f 0104 	mov.w	r1, #4
 8010556:	461a      	mov	r2, r3
 8010558:	f000 f9b2 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* Enable the TSC global interrupts */
  tmp = I2C_ReadDeviceRegister(IOE_1_ADDR, IOE_REG_INT_EN);
 801055c:	f04f 0082 	mov.w	r0, #130	; 0x82
 8010560:	f04f 010a 	mov.w	r1, #10
 8010564:	f000 fae6 	bl	8010b34 <I2C_ReadDeviceRegister>
 8010568:	4603      	mov	r3, r0
 801056a:	71fb      	strb	r3, [r7, #7]
  tmp |= (uint32_t)(IOE_GIT_TOUCH | IOE_GIT_FTH | IOE_GIT_FOV);
 801056c:	79fb      	ldrb	r3, [r7, #7]
 801056e:	f043 0307 	orr.w	r3, r3, #7
 8010572:	71fb      	strb	r3, [r7, #7]
  I2C_WriteDeviceRegister(IOE_1_ADDR, IOE_REG_INT_EN, tmp); 
 8010574:	79fb      	ldrb	r3, [r7, #7]
 8010576:	f04f 0082 	mov.w	r0, #130	; 0x82
 801057a:	f04f 010a 	mov.w	r1, #10
 801057e:	461a      	mov	r2, r3
 8010580:	f000 f99e 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* Select Sample Time, bit number and ADC Reference */
  I2C_WriteDeviceRegister(IOE_1_ADDR, IOE_REG_ADC_CTRL1, 0x49);
 8010584:	f04f 0082 	mov.w	r0, #130	; 0x82
 8010588:	f04f 0120 	mov.w	r1, #32
 801058c:	f04f 0249 	mov.w	r2, #73	; 0x49
 8010590:	f000 f996 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* Wait for ~20 ms */
  _delay_(2);  
 8010594:	f04f 0002 	mov.w	r0, #2
 8010598:	f000 ffc8 	bl	801152c <delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  I2C_WriteDeviceRegister(IOE_1_ADDR, IOE_REG_ADC_CTRL2, 0x01);
 801059c:	f04f 0082 	mov.w	r0, #130	; 0x82
 80105a0:	f04f 0121 	mov.w	r1, #33	; 0x21
 80105a4:	f04f 0201 	mov.w	r2, #1
 80105a8:	f000 f98a 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* Select TSC pins in non default mode */  
  tmp = I2C_ReadDeviceRegister(IOE_1_ADDR, IOE_REG_GPIO_AF);
 80105ac:	f04f 0082 	mov.w	r0, #130	; 0x82
 80105b0:	f04f 0117 	mov.w	r1, #23
 80105b4:	f000 fabe 	bl	8010b34 <I2C_ReadDeviceRegister>
 80105b8:	4603      	mov	r3, r0
 80105ba:	71fb      	strb	r3, [r7, #7]
  tmp &= ~(uint8_t)TOUCH_IO_ALL;
 80105bc:	79fb      	ldrb	r3, [r7, #7]
 80105be:	f023 031e 	bic.w	r3, r3, #30
 80105c2:	71fb      	strb	r3, [r7, #7]
  I2C_WriteDeviceRegister(IOE_1_ADDR, IOE_REG_GPIO_AF, tmp); 
 80105c4:	79fb      	ldrb	r3, [r7, #7]
 80105c6:	f04f 0082 	mov.w	r0, #130	; 0x82
 80105ca:	f04f 0117 	mov.w	r1, #23
 80105ce:	461a      	mov	r2, r3
 80105d0:	f000 f976 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* Select 2 nF filter capacitor */
  I2C_WriteDeviceRegister(IOE_1_ADDR, IOE_REG_TSC_CFG, 0x9A);   
 80105d4:	f04f 0082 	mov.w	r0, #130	; 0x82
 80105d8:	f04f 0141 	mov.w	r1, #65	; 0x41
 80105dc:	f04f 029a 	mov.w	r2, #154	; 0x9a
 80105e0:	f000 f96e 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* Select single point reading  */
  I2C_WriteDeviceRegister(IOE_1_ADDR, IOE_REG_FIFO_TH, 0x01);
 80105e4:	f04f 0082 	mov.w	r0, #130	; 0x82
 80105e8:	f04f 014a 	mov.w	r1, #74	; 0x4a
 80105ec:	f04f 0201 	mov.w	r2, #1
 80105f0:	f000 f966 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* Write 0x01 to clear the FIFO memory content. */
  I2C_WriteDeviceRegister(IOE_1_ADDR, IOE_REG_FIFO_STA, 0x01);
 80105f4:	f04f 0082 	mov.w	r0, #130	; 0x82
 80105f8:	f04f 014b 	mov.w	r1, #75	; 0x4b
 80105fc:	f04f 0201 	mov.w	r2, #1
 8010600:	f000 f95e 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* Write 0x00 to put the FIFO back into operation mode  */
  I2C_WriteDeviceRegister(IOE_1_ADDR, IOE_REG_FIFO_STA, 0x00);
 8010604:	f04f 0082 	mov.w	r0, #130	; 0x82
 8010608:	f04f 014b 	mov.w	r1, #75	; 0x4b
 801060c:	f04f 0200 	mov.w	r2, #0
 8010610:	f000 f956 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* set the data format for Z value: 7 fractional part and 1 whole part */
  I2C_WriteDeviceRegister(IOE_1_ADDR, IOE_REG_TSC_FRACT_XYZ, 0x01);
 8010614:	f04f 0082 	mov.w	r0, #130	; 0x82
 8010618:	f04f 0156 	mov.w	r1, #86	; 0x56
 801061c:	f04f 0201 	mov.w	r2, #1
 8010620:	f000 f94e 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* set the driving capability of the device for TSC pins: 50mA */
  I2C_WriteDeviceRegister(IOE_1_ADDR, IOE_REG_TSC_I_DRIVE, 0x01);
 8010624:	f04f 0082 	mov.w	r0, #130	; 0x82
 8010628:	f04f 0158 	mov.w	r1, #88	; 0x58
 801062c:	f04f 0201 	mov.w	r2, #1
 8010630:	f000 f946 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* Use no tracking index, touch-screen controller operation mode (XYZ) and 
     enable the TSC */
  I2C_WriteDeviceRegister(IOE_1_ADDR, IOE_REG_TSC_CTRL, 0x01);
 8010634:	f04f 0082 	mov.w	r0, #130	; 0x82
 8010638:	f04f 0140 	mov.w	r1, #64	; 0x40
 801063c:	f04f 0201 	mov.w	r2, #1
 8010640:	f000 f93e 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /*  Clear all the status pending bits */
  I2C_WriteDeviceRegister(IOE_1_ADDR, IOE_REG_INT_STA, 0xFF); 
 8010644:	f04f 0082 	mov.w	r0, #130	; 0x82
 8010648:	f04f 010b 	mov.w	r1, #11
 801064c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8010650:	f000 f936 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* Initialize the TS structure to their default values */ 
  TS_State.TouchDetected = TS_State.X = TS_State.Y = TS_State.Z = 0;
 8010654:	f240 03e4 	movw	r3, #228	; 0xe4
 8010658:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801065c:	f04f 0200 	mov.w	r2, #0
 8010660:	80da      	strh	r2, [r3, #6]
 8010662:	f240 03e4 	movw	r3, #228	; 0xe4
 8010666:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801066a:	88da      	ldrh	r2, [r3, #6]
 801066c:	f240 03e4 	movw	r3, #228	; 0xe4
 8010670:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010674:	809a      	strh	r2, [r3, #4]
 8010676:	f240 03e4 	movw	r3, #228	; 0xe4
 801067a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801067e:	889a      	ldrh	r2, [r3, #4]
 8010680:	f240 03e4 	movw	r3, #228	; 0xe4
 8010684:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010688:	805a      	strh	r2, [r3, #2]
 801068a:	f240 03e4 	movw	r3, #228	; 0xe4
 801068e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010692:	885a      	ldrh	r2, [r3, #2]
 8010694:	f240 03e4 	movw	r3, #228	; 0xe4
 8010698:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801069c:	801a      	strh	r2, [r3, #0]
  
  /* All configuration done */
  return IOE_OK;  
 801069e:	f04f 0300 	mov.w	r3, #0
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	f107 0708 	add.w	r7, r7, #8
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}

080106ac <IOE_TempSens_Config>:
  * @brief  Configures and enables the Temperature sensor module.
  * @param  None
  * @retval IOE_OK if all initializations are OK. Other value if error.
  */
uint8_t IOE_TempSens_Config(void)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b082      	sub	sp, #8
 80106b0:	af00      	add	r7, sp, #0
  __IO uint8_t tmp = 0;
 80106b2:	f04f 0300 	mov.w	r3, #0
 80106b6:	71fb      	strb	r3, [r7, #7]
  
  /* Enable Temperature Sensor Fct: already done in IOE_Config */
  tmp = I2C_ReadDeviceRegister(IOE_2_ADDR, IOE_REG_SYS_CTRL2);
 80106b8:	f04f 0088 	mov.w	r0, #136	; 0x88
 80106bc:	f04f 0104 	mov.w	r1, #4
 80106c0:	f000 fa38 	bl	8010b34 <I2C_ReadDeviceRegister>
 80106c4:	4603      	mov	r3, r0
 80106c6:	71fb      	strb	r3, [r7, #7]
  tmp &= ~(uint32_t)(IOE_TEMPSENS_FCT | IOE_ADC_FCT);
 80106c8:	79fb      	ldrb	r3, [r7, #7]
 80106ca:	b2db      	uxtb	r3, r3
 80106cc:	f023 0309 	bic.w	r3, r3, #9
 80106d0:	b2db      	uxtb	r3, r3
 80106d2:	71fb      	strb	r3, [r7, #7]
  I2C_WriteDeviceRegister(IOE_2_ADDR, IOE_REG_SYS_CTRL2, tmp);  
 80106d4:	79fb      	ldrb	r3, [r7, #7]
 80106d6:	b2db      	uxtb	r3, r3
 80106d8:	f04f 0088 	mov.w	r0, #136	; 0x88
 80106dc:	f04f 0104 	mov.w	r1, #4
 80106e0:	461a      	mov	r2, r3
 80106e2:	f000 f8ed 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* Enable the TEMPSENS module */
  I2C_WriteDeviceRegister(IOE_2_ADDR, IOE_REG_TEMP_CTRL, 0x01);
 80106e6:	f04f 0088 	mov.w	r0, #136	; 0x88
 80106ea:	f04f 0160 	mov.w	r1, #96	; 0x60
 80106ee:	f04f 0201 	mov.w	r2, #1
 80106f2:	f000 f8e5 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* Aquire data enable */
  I2C_WriteDeviceRegister(IOE_2_ADDR, IOE_REG_TEMP_CTRL, 0x3);
 80106f6:	f04f 0088 	mov.w	r0, #136	; 0x88
 80106fa:	f04f 0160 	mov.w	r1, #96	; 0x60
 80106fe:	f04f 0203 	mov.w	r2, #3
 8010702:	f000 f8dd 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* All configuration done */
  return IOE_OK;
 8010706:	f04f 0300 	mov.w	r3, #0
}
 801070a:	4618      	mov	r0, r3
 801070c:	f107 0708 	add.w	r7, r7, #8
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}

08010714 <IOE_IOAFConfig>:
  * @param  NewState: State of the AF for the selected pin, could be 
  *         ENABLE or DISABLE.       
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_IOAFConfig(uint8_t DeviceAddr, uint8_t IO_Pin, FunctionalState NewState)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b084      	sub	sp, #16
 8010718:	af00      	add	r7, sp, #0
 801071a:	4613      	mov	r3, r2
 801071c:	4602      	mov	r2, r0
 801071e:	71fa      	strb	r2, [r7, #7]
 8010720:	460a      	mov	r2, r1
 8010722:	71ba      	strb	r2, [r7, #6]
 8010724:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8010726:	f04f 0300 	mov.w	r3, #0
 801072a:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current state of the GPIO_AF register */
  tmp = I2C_ReadDeviceRegister(DeviceAddr, IOE_REG_GPIO_AF);
 801072c:	79fb      	ldrb	r3, [r7, #7]
 801072e:	4618      	mov	r0, r3
 8010730:	f04f 0117 	mov.w	r1, #23
 8010734:	f000 f9fe 	bl	8010b34 <I2C_ReadDeviceRegister>
 8010738:	4603      	mov	r3, r0
 801073a:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 801073c:	797b      	ldrb	r3, [r7, #5]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d004      	beq.n	801074c <IOE_IOAFConfig+0x38>
  {
    /* Enable the selected pins alternate function */
    tmp |= (uint8_t)IO_Pin;
 8010742:	7bfa      	ldrb	r2, [r7, #15]
 8010744:	79bb      	ldrb	r3, [r7, #6]
 8010746:	4313      	orrs	r3, r2
 8010748:	73fb      	strb	r3, [r7, #15]
 801074a:	e007      	b.n	801075c <IOE_IOAFConfig+0x48>
  }
  else
  {
    /* Disable the selected pins alternate function */   
    tmp &= ~(uint8_t)IO_Pin;   
 801074c:	79bb      	ldrb	r3, [r7, #6]
 801074e:	ea6f 0303 	mvn.w	r3, r3
 8010752:	b2da      	uxtb	r2, r3
 8010754:	7bfb      	ldrb	r3, [r7, #15]
 8010756:	4013      	ands	r3, r2
 8010758:	b2db      	uxtb	r3, r3
 801075a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write back the new value in GPIO_AF register */  
  I2C_WriteDeviceRegister(DeviceAddr, IOE_REG_GPIO_AF, tmp);  
 801075c:	79fa      	ldrb	r2, [r7, #7]
 801075e:	7bfb      	ldrb	r3, [r7, #15]
 8010760:	4610      	mov	r0, r2
 8010762:	f04f 0117 	mov.w	r1, #23
 8010766:	461a      	mov	r2, r3
 8010768:	f000 f8aa 	bl	80108c0 <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;
 801076c:	f04f 0300 	mov.w	r3, #0
}
 8010770:	4618      	mov	r0, r3
 8010772:	f107 0710 	add.w	r7, r7, #16
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
 801077a:	bf00      	nop

0801077c <IOE_IOEdgeConfig>:
  * @param  Edge: The edge which will be detected. This parameter can be one or a
  *         a combination of following values: EDGE_FALLING and EDGE_RISING .
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_IOEdgeConfig(uint8_t DeviceAddr, uint8_t IO_Pin, uint8_t Edge)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b084      	sub	sp, #16
 8010780:	af00      	add	r7, sp, #0
 8010782:	4613      	mov	r3, r2
 8010784:	4602      	mov	r2, r0
 8010786:	71fa      	strb	r2, [r7, #7]
 8010788:	460a      	mov	r2, r1
 801078a:	71ba      	strb	r2, [r7, #6]
 801078c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp1 = 0, tmp2 = 0;   
 801078e:	f04f 0300 	mov.w	r3, #0
 8010792:	73fb      	strb	r3, [r7, #15]
 8010794:	f04f 0300 	mov.w	r3, #0
 8010798:	73bb      	strb	r3, [r7, #14]
  
  /* Get the registers values */
  tmp1 = I2C_ReadDeviceRegister(DeviceAddr, IOE_REG_GPIO_FE);
 801079a:	79fb      	ldrb	r3, [r7, #7]
 801079c:	4618      	mov	r0, r3
 801079e:	f04f 0116 	mov.w	r1, #22
 80107a2:	f000 f9c7 	bl	8010b34 <I2C_ReadDeviceRegister>
 80107a6:	4603      	mov	r3, r0
 80107a8:	73fb      	strb	r3, [r7, #15]
  tmp2 = I2C_ReadDeviceRegister(DeviceAddr, IOE_REG_GPIO_RE);
 80107aa:	79fb      	ldrb	r3, [r7, #7]
 80107ac:	4618      	mov	r0, r3
 80107ae:	f04f 0115 	mov.w	r1, #21
 80107b2:	f000 f9bf 	bl	8010b34 <I2C_ReadDeviceRegister>
 80107b6:	4603      	mov	r3, r0
 80107b8:	73bb      	strb	r3, [r7, #14]

  /* Disable the Falling Edge */
  tmp1 &= ~(uint8_t)IO_Pin;
 80107ba:	79bb      	ldrb	r3, [r7, #6]
 80107bc:	ea6f 0303 	mvn.w	r3, r3
 80107c0:	b2da      	uxtb	r2, r3
 80107c2:	7bfb      	ldrb	r3, [r7, #15]
 80107c4:	4013      	ands	r3, r2
 80107c6:	b2db      	uxtb	r3, r3
 80107c8:	73fb      	strb	r3, [r7, #15]
  /* Disable the Falling Edge */
  tmp2 &= ~(uint8_t)IO_Pin;
 80107ca:	79bb      	ldrb	r3, [r7, #6]
 80107cc:	ea6f 0303 	mvn.w	r3, r3
 80107d0:	b2da      	uxtb	r2, r3
 80107d2:	7bbb      	ldrb	r3, [r7, #14]
 80107d4:	4013      	ands	r3, r2
 80107d6:	b2db      	uxtb	r3, r3
 80107d8:	73bb      	strb	r3, [r7, #14]

  /* Enable the Falling edge if selected */
  if (Edge & EDGE_FALLING)
 80107da:	797b      	ldrb	r3, [r7, #5]
 80107dc:	f003 0301 	and.w	r3, r3, #1
 80107e0:	b2db      	uxtb	r3, r3
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d003      	beq.n	80107ee <IOE_IOEdgeConfig+0x72>
  {
    tmp1 |= (uint8_t)IO_Pin;
 80107e6:	7bfa      	ldrb	r2, [r7, #15]
 80107e8:	79bb      	ldrb	r3, [r7, #6]
 80107ea:	4313      	orrs	r3, r2
 80107ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the Rising edge if selected */
  if (Edge & EDGE_RISING)
 80107ee:	797b      	ldrb	r3, [r7, #5]
 80107f0:	f003 0302 	and.w	r3, r3, #2
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d003      	beq.n	8010800 <IOE_IOEdgeConfig+0x84>
  {
    tmp2 |= (uint8_t)IO_Pin;
 80107f8:	7bba      	ldrb	r2, [r7, #14]
 80107fa:	79bb      	ldrb	r3, [r7, #6]
 80107fc:	4313      	orrs	r3, r2
 80107fe:	73bb      	strb	r3, [r7, #14]
  }

  /* Write back the registers values */
  I2C_WriteDeviceRegister(DeviceAddr, IOE_REG_GPIO_FE, tmp1);
 8010800:	79fa      	ldrb	r2, [r7, #7]
 8010802:	7bfb      	ldrb	r3, [r7, #15]
 8010804:	4610      	mov	r0, r2
 8010806:	f04f 0116 	mov.w	r1, #22
 801080a:	461a      	mov	r2, r3
 801080c:	f000 f858 	bl	80108c0 <I2C_WriteDeviceRegister>
  I2C_WriteDeviceRegister(DeviceAddr, IOE_REG_GPIO_RE, tmp2);
 8010810:	79fa      	ldrb	r2, [r7, #7]
 8010812:	7bbb      	ldrb	r3, [r7, #14]
 8010814:	4610      	mov	r0, r2
 8010816:	f04f 0115 	mov.w	r1, #21
 801081a:	461a      	mov	r2, r3
 801081c:	f000 f850 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* if OK return 0 */
  return IOE_OK;
 8010820:	f04f 0300 	mov.w	r3, #0
}
 8010824:	4618      	mov	r0, r3
 8010826:	f107 0710 	add.w	r7, r7, #16
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop

08010830 <IOE_ITOutConfig>:
  *   @arg  Type_Level: Interrupt line is active in level model         
  *   @arg  Type_Edge: Interrupt line is active in edge model           
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_ITOutConfig(uint8_t Polarity, uint8_t Type)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b084      	sub	sp, #16
 8010834:	af00      	add	r7, sp, #0
 8010836:	4602      	mov	r2, r0
 8010838:	460b      	mov	r3, r1
 801083a:	71fa      	strb	r2, [r7, #7]
 801083c:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 801083e:	f04f 0300 	mov.w	r3, #0
 8010842:	73fb      	strb	r3, [r7, #15]
  
  /*  Get the register IOE_REG_INT_CTRL value */ 
  tmp = I2C_ReadDeviceRegister(IOE_1_ADDR, IOE_REG_INT_CTRL);
 8010844:	f04f 0082 	mov.w	r0, #130	; 0x82
 8010848:	f04f 0109 	mov.w	r1, #9
 801084c:	f000 f972 	bl	8010b34 <I2C_ReadDeviceRegister>
 8010850:	4603      	mov	r3, r0
 8010852:	73fb      	strb	r3, [r7, #15]
  
  /* Mask the polarity and type bits */
  tmp &= ~(uint8_t)0x06;
 8010854:	7bfb      	ldrb	r3, [r7, #15]
 8010856:	f023 0306 	bic.w	r3, r3, #6
 801085a:	73fb      	strb	r3, [r7, #15]
    
  /* Modify the Interrupt Output line configuration */
  tmp |= (uint8_t)(Polarity | Type);
 801085c:	79fa      	ldrb	r2, [r7, #7]
 801085e:	79bb      	ldrb	r3, [r7, #6]
 8010860:	4313      	orrs	r3, r2
 8010862:	b2da      	uxtb	r2, r3
 8010864:	7bfb      	ldrb	r3, [r7, #15]
 8010866:	4313      	orrs	r3, r2
 8010868:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  I2C_WriteDeviceRegister(IOE_1_ADDR, IOE_REG_INT_CTRL, tmp);
 801086a:	7bfb      	ldrb	r3, [r7, #15]
 801086c:	f04f 0082 	mov.w	r0, #130	; 0x82
 8010870:	f04f 0109 	mov.w	r1, #9
 8010874:	461a      	mov	r2, r3
 8010876:	f000 f823 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  
  /*  Get the register IOE_REG_INT_CTRL value */ 
  tmp = I2C_ReadDeviceRegister(IOE_2_ADDR, IOE_REG_INT_CTRL);
 801087a:	f04f 0088 	mov.w	r0, #136	; 0x88
 801087e:	f04f 0109 	mov.w	r1, #9
 8010882:	f000 f957 	bl	8010b34 <I2C_ReadDeviceRegister>
 8010886:	4603      	mov	r3, r0
 8010888:	73fb      	strb	r3, [r7, #15]
  /* Mask the polarity and type bits */
  tmp &= ~(uint8_t)0x06;
 801088a:	7bfb      	ldrb	r3, [r7, #15]
 801088c:	f023 0306 	bic.w	r3, r3, #6
 8010890:	73fb      	strb	r3, [r7, #15]
    
  /* Modify the Interrupt Output line configuration */
  tmp |= (uint8_t)(Polarity | Type);
 8010892:	79fa      	ldrb	r2, [r7, #7]
 8010894:	79bb      	ldrb	r3, [r7, #6]
 8010896:	4313      	orrs	r3, r2
 8010898:	b2da      	uxtb	r2, r3
 801089a:	7bfb      	ldrb	r3, [r7, #15]
 801089c:	4313      	orrs	r3, r2
 801089e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  I2C_WriteDeviceRegister(IOE_2_ADDR, IOE_REG_INT_CTRL, tmp);  
 80108a0:	7bfb      	ldrb	r3, [r7, #15]
 80108a2:	f04f 0088 	mov.w	r0, #136	; 0x88
 80108a6:	f04f 0109 	mov.w	r1, #9
 80108aa:	461a      	mov	r2, r3
 80108ac:	f000 f808 	bl	80108c0 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;  
 80108b0:	f04f 0300 	mov.w	r3, #0
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	f107 0710 	add.w	r7, r7, #16
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}
 80108be:	bf00      	nop

080108c0 <I2C_WriteDeviceRegister>:
  * @param  RegisterAddr: The target register address
  * @param  RegisterValue: The target register value to be written 
  * @retval IOE_OK: if all operations are OK. Other value if error.
  */
uint8_t I2C_WriteDeviceRegister(uint8_t DeviceAddr, uint8_t RegisterAddr, uint8_t RegisterValue)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	4613      	mov	r3, r2
 80108c8:	4602      	mov	r2, r0
 80108ca:	71fa      	strb	r2, [r7, #7]
 80108cc:	460a      	mov	r2, r1
 80108ce:	71ba      	strb	r2, [r7, #6]
 80108d0:	717b      	strb	r3, [r7, #5]
  uint32_t read_verif = 0;  
 80108d2:	f04f 0300 	mov.w	r3, #0
 80108d6:	60fb      	str	r3, [r7, #12]
  uint8_t IOE_BufferTX = 0;
 80108d8:	f04f 0300 	mov.w	r3, #0
 80108dc:	72fb      	strb	r3, [r7, #11]
  
  /* Get Value to be written */
  IOE_BufferTX = RegisterValue;
 80108de:	797b      	ldrb	r3, [r7, #5]
 80108e0:	72fb      	strb	r3, [r7, #11]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_TX, (uint8_t*)(&IOE_BufferTX));
 80108e2:	f107 030b 	add.w	r3, r7, #11
 80108e6:	f04f 0000 	mov.w	r0, #0
 80108ea:	4619      	mov	r1, r3
 80108ec:	f000 fd66 	bl	80113bc <IOE_DMA_Config>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 80108f0:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80108f4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80108f8:	f04f 0101 	mov.w	r1, #1
 80108fc:	f7f7 fa5c 	bl	8007db8 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 8010900:	f240 0338 	movw	r3, #56	; 0x38
 8010904:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010908:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 801090c:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB) == RESET) 
 801090e:	e015      	b.n	801093c <I2C_WriteDeviceRegister+0x7c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8010910:	f240 0338 	movw	r3, #56	; 0x38
 8010914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	2b00      	cmp	r3, #0
 801091c:	bf14      	ite	ne
 801091e:	2200      	movne	r2, #0
 8010920:	2201      	moveq	r2, #1
 8010922:	b2d2      	uxtb	r2, r2
 8010924:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8010928:	f240 0338 	movw	r3, #56	; 0x38
 801092c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010930:	6019      	str	r1, [r3, #0]
 8010932:	2a00      	cmp	r2, #0
 8010934:	d002      	beq.n	801093c <I2C_WriteDeviceRegister+0x7c>
 8010936:	f04f 0302 	mov.w	r3, #2
 801093a:	e0f5      	b.n	8010b28 <I2C_WriteDeviceRegister+0x268>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB) == RESET) 
 801093c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010940:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010944:	f04f 0101 	mov.w	r1, #1
 8010948:	f2c1 0100 	movt	r1, #4096	; 0x1000
 801094c:	f7f7 fd42 	bl	80083d4 <I2C_GetFlagStatus>
 8010950:	4603      	mov	r3, r0
 8010952:	2b00      	cmp	r3, #0
 8010954:	d0dc      	beq.n	8010910 <I2C_WriteDeviceRegister+0x50>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, DeviceAddr, I2C_Direction_Transmitter);
 8010956:	79fb      	ldrb	r3, [r7, #7]
 8010958:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801095c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010960:	4619      	mov	r1, r3
 8010962:	f04f 0200 	mov.w	r2, #0
 8010966:	f7f7 fa67 	bl	8007e38 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 801096a:	f240 0338 	movw	r3, #56	; 0x38
 801096e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010972:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8010976:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8010978:	e015      	b.n	80109a6 <I2C_WriteDeviceRegister+0xe6>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 801097a:	f240 0338 	movw	r3, #56	; 0x38
 801097e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	2b00      	cmp	r3, #0
 8010986:	bf14      	ite	ne
 8010988:	2200      	movne	r2, #0
 801098a:	2201      	moveq	r2, #1
 801098c:	b2d2      	uxtb	r2, r2
 801098e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8010992:	f240 0338 	movw	r3, #56	; 0x38
 8010996:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801099a:	6019      	str	r1, [r3, #0]
 801099c:	2a00      	cmp	r2, #0
 801099e:	d002      	beq.n	80109a6 <I2C_WriteDeviceRegister+0xe6>
 80109a0:	f04f 0302 	mov.w	r3, #2
 80109a4:	e0c0      	b.n	8010b28 <I2C_WriteDeviceRegister+0x268>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, DeviceAddr, I2C_Direction_Transmitter);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 80109a6:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80109aa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80109ae:	f04f 0182 	mov.w	r1, #130	; 0x82
 80109b2:	f2c0 0107 	movt	r1, #7
 80109b6:	f7f7 fcaf 	bl	8008318 <I2C_CheckEvent>
 80109ba:	4603      	mov	r3, r0
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d0dc      	beq.n	801097a <I2C_WriteDeviceRegister+0xba>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 80109c0:	79bb      	ldrb	r3, [r7, #6]
 80109c2:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80109c6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80109ca:	4619      	mov	r1, r3
 80109cc:	f7f7 fb98 	bl	8008100 <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 80109d0:	f240 0338 	movw	r3, #56	; 0x38
 80109d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80109d8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80109dc:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 80109de:	e015      	b.n	8010a0c <I2C_WriteDeviceRegister+0x14c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 80109e0:	f240 0338 	movw	r3, #56	; 0x38
 80109e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	bf14      	ite	ne
 80109ee:	2200      	movne	r2, #0
 80109f0:	2201      	moveq	r2, #1
 80109f2:	b2d2      	uxtb	r2, r2
 80109f4:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 80109f8:	f240 0338 	movw	r3, #56	; 0x38
 80109fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010a00:	6019      	str	r1, [r3, #0]
 8010a02:	2a00      	cmp	r2, #0
 8010a04:	d002      	beq.n	8010a0c <I2C_WriteDeviceRegister+0x14c>
 8010a06:	f04f 0302 	mov.w	r3, #2
 8010a0a:	e08d      	b.n	8010b28 <I2C_WriteDeviceRegister+0x268>
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 8010a0c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010a10:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010a14:	f04f 0180 	mov.w	r1, #128	; 0x80
 8010a18:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8010a1c:	f7f7 fcda 	bl	80083d4 <I2C_GetFlagStatus>
 8010a20:	4603      	mov	r3, r0
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d10c      	bne.n	8010a40 <I2C_WriteDeviceRegister+0x180>
 8010a26:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010a2a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010a2e:	f04f 0104 	mov.w	r1, #4
 8010a32:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8010a36:	f7f7 fccd 	bl	80083d4 <I2C_GetFlagStatus>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d0cf      	beq.n	80109e0 <I2C_WriteDeviceRegister+0x120>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 8010a40:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010a44:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010a48:	f04f 0101 	mov.w	r1, #1
 8010a4c:	f7f7 fbe8 	bl	8008220 <I2C_DMACmd>
  
  /* Enable DMA TX Channel */
  DMA_Cmd(IOE_DMA_TX_STREAM, ENABLE);
 8010a50:	f246 00a0 	movw	r0, #24736	; 0x60a0
 8010a54:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010a58:	f04f 0101 	mov.w	r1, #1
 8010a5c:	f7f4 f91e 	bl	8004c9c <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = TIMEOUT_MAX;
 8010a60:	f240 0338 	movw	r3, #56	; 0x38
 8010a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010a68:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8010a6c:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG))
 8010a6e:	e015      	b.n	8010a9c <I2C_WriteDeviceRegister+0x1dc>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8010a70:	f240 0338 	movw	r3, #56	; 0x38
 8010a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	bf14      	ite	ne
 8010a7e:	2200      	movne	r2, #0
 8010a80:	2201      	moveq	r2, #1
 8010a82:	b2d2      	uxtb	r2, r2
 8010a84:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8010a88:	f240 0338 	movw	r3, #56	; 0x38
 8010a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010a90:	6019      	str	r1, [r3, #0]
 8010a92:	2a00      	cmp	r2, #0
 8010a94:	d002      	beq.n	8010a9c <I2C_WriteDeviceRegister+0x1dc>
 8010a96:	f04f 0302 	mov.w	r3, #2
 8010a9a:	e045      	b.n	8010b28 <I2C_WriteDeviceRegister+0x268>
  /* Enable DMA TX Channel */
  DMA_Cmd(IOE_DMA_TX_STREAM, ENABLE);
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!DMA_GetFlagStatus(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG))
 8010a9c:	f246 00a0 	movw	r0, #24736	; 0x60a0
 8010aa0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010aa4:	f04f 0100 	mov.w	r1, #0
 8010aa8:	f2c2 0120 	movt	r1, #8224	; 0x2020
 8010aac:	f7f4 f9fe 	bl	8004eac <DMA_GetFlagStatus>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d0dc      	beq.n	8010a70 <I2C_WriteDeviceRegister+0x1b0>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }  
  
  /* Wait until BTF Flag is set before generating STOP */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
 8010ab6:	f240 0338 	movw	r3, #56	; 0x38
 8010aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010abe:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8010ac2:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 8010ac4:	bf00      	nop
 8010ac6:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010aca:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010ace:	f04f 0104 	mov.w	r1, #4
 8010ad2:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8010ad6:	f7f7 fc7d 	bl	80083d4 <I2C_GetFlagStatus>
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d0f2      	beq.n	8010ac6 <I2C_WriteDeviceRegister+0x206>
  {
  }
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 8010ae0:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010ae4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010ae8:	f04f 0101 	mov.w	r1, #1
 8010aec:	f7f7 f984 	bl	8007df8 <I2C_GenerateSTOP>
  
  /* Disable DMA TX Channel */
  DMA_Cmd(IOE_DMA_TX_STREAM, DISABLE);
 8010af0:	f246 00a0 	movw	r0, #24736	; 0x60a0
 8010af4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010af8:	f04f 0100 	mov.w	r1, #0
 8010afc:	f7f4 f8ce 	bl	8004c9c <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 8010b00:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010b04:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010b08:	f04f 0100 	mov.w	r1, #0
 8010b0c:	f7f7 fb88 	bl	8008220 <I2C_DMACmd>
  
  /* Clear DMA TX Transfer Complete Flag */
  DMA_ClearFlag(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG);
 8010b10:	f246 00a0 	movw	r0, #24736	; 0x60a0
 8010b14:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010b18:	f04f 0100 	mov.w	r1, #0
 8010b1c:	f2c2 0120 	movt	r1, #8224	; 0x2020
 8010b20:	f7f4 fa06 	bl	8004f30 <DMA_ClearFlag>
    read_verif = 0;
  }
#endif
  
  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return read_verif;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	b2db      	uxtb	r3, r3
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f107 0710 	add.w	r7, r7, #16
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop

08010b34 <I2C_ReadDeviceRegister>:
  *         or IOE_2_ADDR. 
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval The value of the read register (0xAA if Timeout occurred)   
  */
uint8_t I2C_ReadDeviceRegister(uint8_t DeviceAddr, uint8_t RegisterAddr)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b084      	sub	sp, #16
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	4602      	mov	r2, r0
 8010b3c:	460b      	mov	r3, r1
 8010b3e:	71fa      	strb	r2, [r7, #7]
 8010b40:	71bb      	strb	r3, [r7, #6]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 8010b42:	f04f 0300 	mov.w	r3, #0
 8010b46:	733b      	strb	r3, [r7, #12]
 8010b48:	f04f 0300 	mov.w	r3, #0
 8010b4c:	737b      	strb	r3, [r7, #13]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_RX, (uint8_t*)IOE_BufferRX);
 8010b4e:	f107 030c 	add.w	r3, r7, #12
 8010b52:	f04f 0001 	mov.w	r0, #1
 8010b56:	4619      	mov	r1, r3
 8010b58:	f000 fc30 	bl	80113bc <IOE_DMA_Config>
  
  /* Enable DMA NACK automatic generation */
  I2C_DMALastTransferCmd(IOE_I2C, ENABLE);
 8010b5c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010b60:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010b64:	f04f 0101 	mov.w	r1, #1
 8010b68:	f7f7 fb7a 	bl	8008260 <I2C_DMALastTransferCmd>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8010b6c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010b70:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010b74:	f04f 0101 	mov.w	r1, #1
 8010b78:	f7f7 f91e 	bl	8007db8 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 8010b7c:	f240 0338 	movw	r3, #56	; 0x38
 8010b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b84:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8010b88:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 8010b8a:	e015      	b.n	8010bb8 <I2C_ReadDeviceRegister+0x84>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8010b8c:	f240 0338 	movw	r3, #56	; 0x38
 8010b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	bf14      	ite	ne
 8010b9a:	2200      	movne	r2, #0
 8010b9c:	2201      	moveq	r2, #1
 8010b9e:	b2d2      	uxtb	r2, r2
 8010ba0:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8010ba4:	f240 0338 	movw	r3, #56	; 0x38
 8010ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010bac:	6019      	str	r1, [r3, #0]
 8010bae:	2a00      	cmp	r2, #0
 8010bb0:	d002      	beq.n	8010bb8 <I2C_ReadDeviceRegister+0x84>
 8010bb2:	f04f 0302 	mov.w	r3, #2
 8010bb6:	e147      	b.n	8010e48 <I2C_ReadDeviceRegister+0x314>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 8010bb8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010bbc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010bc0:	f04f 0101 	mov.w	r1, #1
 8010bc4:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8010bc8:	f7f7 fc04 	bl	80083d4 <I2C_GetFlagStatus>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d0dc      	beq.n	8010b8c <I2C_ReadDeviceRegister+0x58>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, DeviceAddr, I2C_Direction_Transmitter);
 8010bd2:	79fb      	ldrb	r3, [r7, #7]
 8010bd4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010bd8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010bdc:	4619      	mov	r1, r3
 8010bde:	f04f 0200 	mov.w	r2, #0
 8010be2:	f7f7 f929 	bl	8007e38 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 8010be6:	f240 0338 	movw	r3, #56	; 0x38
 8010bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010bee:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8010bf2:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) 
 8010bf4:	e015      	b.n	8010c22 <I2C_ReadDeviceRegister+0xee>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8010bf6:	f240 0338 	movw	r3, #56	; 0x38
 8010bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	bf14      	ite	ne
 8010c04:	2200      	movne	r2, #0
 8010c06:	2201      	moveq	r2, #1
 8010c08:	b2d2      	uxtb	r2, r2
 8010c0a:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8010c0e:	f240 0338 	movw	r3, #56	; 0x38
 8010c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c16:	6019      	str	r1, [r3, #0]
 8010c18:	2a00      	cmp	r2, #0
 8010c1a:	d002      	beq.n	8010c22 <I2C_ReadDeviceRegister+0xee>
 8010c1c:	f04f 0302 	mov.w	r3, #2
 8010c20:	e112      	b.n	8010e48 <I2C_ReadDeviceRegister+0x314>
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, DeviceAddr, I2C_Direction_Transmitter);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) 
 8010c22:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010c26:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010c2a:	f04f 0182 	mov.w	r1, #130	; 0x82
 8010c2e:	f2c0 0107 	movt	r1, #7
 8010c32:	f7f7 fb71 	bl	8008318 <I2C_CheckEvent>
 8010c36:	4603      	mov	r3, r0
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d0dc      	beq.n	8010bf6 <I2C_ReadDeviceRegister+0xc2>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 8010c3c:	79bb      	ldrb	r3, [r7, #6]
 8010c3e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010c42:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010c46:	4619      	mov	r1, r3
 8010c48:	f7f7 fa5a 	bl	8008100 <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 8010c4c:	f240 0338 	movw	r3, #56	; 0x38
 8010c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c54:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8010c58:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 8010c5a:	e015      	b.n	8010c88 <I2C_ReadDeviceRegister+0x154>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8010c5c:	f240 0338 	movw	r3, #56	; 0x38
 8010c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	bf14      	ite	ne
 8010c6a:	2200      	movne	r2, #0
 8010c6c:	2201      	moveq	r2, #1
 8010c6e:	b2d2      	uxtb	r2, r2
 8010c70:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8010c74:	f240 0338 	movw	r3, #56	; 0x38
 8010c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c7c:	6019      	str	r1, [r3, #0]
 8010c7e:	2a00      	cmp	r2, #0
 8010c80:	d002      	beq.n	8010c88 <I2C_ReadDeviceRegister+0x154>
 8010c82:	f04f 0302 	mov.w	r3, #2
 8010c86:	e0df      	b.n	8010e48 <I2C_ReadDeviceRegister+0x314>
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 8010c88:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010c8c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010c90:	f04f 0180 	mov.w	r1, #128	; 0x80
 8010c94:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8010c98:	f7f7 fb9c 	bl	80083d4 <I2C_GetFlagStatus>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d10c      	bne.n	8010cbc <I2C_ReadDeviceRegister+0x188>
 8010ca2:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010ca6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010caa:	f04f 0104 	mov.w	r1, #4
 8010cae:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8010cb2:	f7f7 fb8f 	bl	80083d4 <I2C_GetFlagStatus>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d0cf      	beq.n	8010c5c <I2C_ReadDeviceRegister+0x128>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8010cbc:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010cc0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010cc4:	f04f 0101 	mov.w	r1, #1
 8010cc8:	f7f7 f876 	bl	8007db8 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 8010ccc:	f240 0338 	movw	r3, #56	; 0x38
 8010cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010cd4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8010cd8:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 8010cda:	e015      	b.n	8010d08 <I2C_ReadDeviceRegister+0x1d4>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8010cdc:	f240 0338 	movw	r3, #56	; 0x38
 8010ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	bf14      	ite	ne
 8010cea:	2200      	movne	r2, #0
 8010cec:	2201      	moveq	r2, #1
 8010cee:	b2d2      	uxtb	r2, r2
 8010cf0:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8010cf4:	f240 0338 	movw	r3, #56	; 0x38
 8010cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010cfc:	6019      	str	r1, [r3, #0]
 8010cfe:	2a00      	cmp	r2, #0
 8010d00:	d002      	beq.n	8010d08 <I2C_ReadDeviceRegister+0x1d4>
 8010d02:	f04f 0302 	mov.w	r3, #2
 8010d06:	e09f      	b.n	8010e48 <I2C_ReadDeviceRegister+0x314>
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 8010d08:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010d0c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010d10:	f04f 0101 	mov.w	r1, #1
 8010d14:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8010d18:	f7f7 fb5c 	bl	80083d4 <I2C_GetFlagStatus>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d0dc      	beq.n	8010cdc <I2C_ReadDeviceRegister+0x1a8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send IOExpander address for read */
  I2C_Send7bitAddress(IOE_I2C, DeviceAddr, I2C_Direction_Receiver);
 8010d22:	79fb      	ldrb	r3, [r7, #7]
 8010d24:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010d28:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010d2c:	4619      	mov	r1, r3
 8010d2e:	f04f 0201 	mov.w	r2, #1
 8010d32:	f7f7 f881 	bl	8007e38 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 8010d36:	f240 0338 	movw	r3, #56	; 0x38
 8010d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d3e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8010d42:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 8010d44:	e015      	b.n	8010d72 <I2C_ReadDeviceRegister+0x23e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8010d46:	f240 0338 	movw	r3, #56	; 0x38
 8010d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	bf14      	ite	ne
 8010d54:	2200      	movne	r2, #0
 8010d56:	2201      	moveq	r2, #1
 8010d58:	b2d2      	uxtb	r2, r2
 8010d5a:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8010d5e:	f240 0338 	movw	r3, #56	; 0x38
 8010d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010d66:	6019      	str	r1, [r3, #0]
 8010d68:	2a00      	cmp	r2, #0
 8010d6a:	d002      	beq.n	8010d72 <I2C_ReadDeviceRegister+0x23e>
 8010d6c:	f04f 0302 	mov.w	r3, #2
 8010d70:	e06a      	b.n	8010e48 <I2C_ReadDeviceRegister+0x314>
  /* Send IOExpander address for read */
  I2C_Send7bitAddress(IOE_I2C, DeviceAddr, I2C_Direction_Receiver);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 8010d72:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010d76:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010d7a:	f04f 0102 	mov.w	r1, #2
 8010d7e:	f2c0 0103 	movt	r1, #3
 8010d82:	f7f7 fac9 	bl	8008318 <I2C_CheckEvent>
 8010d86:	4603      	mov	r3, r0
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d0dc      	beq.n	8010d46 <I2C_ReadDeviceRegister+0x212>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
    
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 8010d8c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010d90:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010d94:	f04f 0101 	mov.w	r1, #1
 8010d98:	f7f7 fa42 	bl	8008220 <I2C_DMACmd>
  
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
 8010d9c:	f246 0010 	movw	r0, #24592	; 0x6010
 8010da0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010da4:	f04f 0101 	mov.w	r1, #1
 8010da8:	f7f3 ff78 	bl	8004c9c <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
 8010dac:	f240 0338 	movw	r3, #56	; 0x38
 8010db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010db4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8010db8:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG))
 8010dba:	e015      	b.n	8010de8 <I2C_ReadDeviceRegister+0x2b4>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8010dbc:	f240 0338 	movw	r3, #56	; 0x38
 8010dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	bf14      	ite	ne
 8010dca:	2200      	movne	r2, #0
 8010dcc:	2201      	moveq	r2, #1
 8010dce:	b2d2      	uxtb	r2, r2
 8010dd0:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8010dd4:	f240 0338 	movw	r3, #56	; 0x38
 8010dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ddc:	6019      	str	r1, [r3, #0]
 8010dde:	2a00      	cmp	r2, #0
 8010de0:	d002      	beq.n	8010de8 <I2C_ReadDeviceRegister+0x2b4>
 8010de2:	f04f 0302 	mov.w	r3, #2
 8010de6:	e02f      	b.n	8010e48 <I2C_ReadDeviceRegister+0x314>
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG))
 8010de8:	f246 0010 	movw	r0, #24592	; 0x6010
 8010dec:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010df0:	f04f 0120 	mov.w	r1, #32
 8010df4:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8010df8:	f7f4 f858 	bl	8004eac <DMA_GetFlagStatus>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d0dc      	beq.n	8010dbc <I2C_ReadDeviceRegister+0x288>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }        
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 8010e02:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010e06:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010e0a:	f04f 0101 	mov.w	r1, #1
 8010e0e:	f7f6 fff3 	bl	8007df8 <I2C_GenerateSTOP>
  
  /* Disable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, DISABLE);
 8010e12:	f246 0010 	movw	r0, #24592	; 0x6010
 8010e16:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010e1a:	f04f 0100 	mov.w	r1, #0
 8010e1e:	f7f3 ff3d 	bl	8004c9c <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 8010e22:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010e26:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010e2a:	f04f 0100 	mov.w	r1, #0
 8010e2e:	f7f7 f9f7 	bl	8008220 <I2C_DMACmd>
  
  /* Clear DMA RX Transfer Complete Flag */
 DMA_ClearFlag(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG);
 8010e32:	f246 0010 	movw	r0, #24592	; 0x6010
 8010e36:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8010e3a:	f04f 0120 	mov.w	r1, #32
 8010e3e:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8010e42:	f7f4 f875 	bl	8004f30 <DMA_ClearFlag>
  
  /* return a pointer to the IOE_Buffer */
  return (uint8_t)IOE_BufferRX[0];
 8010e46:	7b3b      	ldrb	r3, [r7, #12]
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f107 0710 	add.w	r7, r7, #16
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}
 8010e52:	bf00      	nop

08010e54 <I2C_ReadDataBuffer>:
  *         or IOE_2_ADDR. 
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval A pointer to the buffer containing the two returned bytes (in halfword).  
  */
uint16_t I2C_ReadDataBuffer(uint8_t DeviceAddr, uint32_t RegisterAddr)
{ 
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b084      	sub	sp, #16
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	6039      	str	r1, [r7, #0]
 8010e5e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp= 0;
 8010e60:	f04f 0300 	mov.w	r3, #0
 8010e64:	73fb      	strb	r3, [r7, #15]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 8010e66:	f04f 0300 	mov.w	r3, #0
 8010e6a:	733b      	strb	r3, [r7, #12]
 8010e6c:	f04f 0300 	mov.w	r3, #0
 8010e70:	737b      	strb	r3, [r7, #13]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_RX, (uint8_t*)IOE_BufferRX);
 8010e72:	f107 030c 	add.w	r3, r7, #12
 8010e76:	f04f 0001 	mov.w	r0, #1
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	f000 fa9e 	bl	80113bc <IOE_DMA_Config>
  
  /* Enable DMA NACK automatic generation */
  I2C_DMALastTransferCmd(IOE_I2C, ENABLE);
 8010e80:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010e84:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010e88:	f04f 0101 	mov.w	r1, #1
 8010e8c:	f7f7 f9e8 	bl	8008260 <I2C_DMALastTransferCmd>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8010e90:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010e94:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010e98:	f04f 0101 	mov.w	r1, #1
 8010e9c:	f7f6 ff8c 	bl	8007db8 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 8010ea0:	f240 0338 	movw	r3, #56	; 0x38
 8010ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ea8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8010eac:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 8010eae:	e015      	b.n	8010edc <I2C_ReadDataBuffer+0x88>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8010eb0:	f240 0338 	movw	r3, #56	; 0x38
 8010eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	bf14      	ite	ne
 8010ebe:	2200      	movne	r2, #0
 8010ec0:	2201      	moveq	r2, #1
 8010ec2:	b2d2      	uxtb	r2, r2
 8010ec4:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8010ec8:	f240 0338 	movw	r3, #56	; 0x38
 8010ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ed0:	6019      	str	r1, [r3, #0]
 8010ed2:	2a00      	cmp	r2, #0
 8010ed4:	d002      	beq.n	8010edc <I2C_ReadDataBuffer+0x88>
 8010ed6:	f04f 0302 	mov.w	r3, #2
 8010eda:	e150      	b.n	801117e <I2C_ReadDataBuffer+0x32a>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 8010edc:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010ee0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010ee4:	f04f 0101 	mov.w	r1, #1
 8010ee8:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8010eec:	f7f7 fa72 	bl	80083d4 <I2C_GetFlagStatus>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d0dc      	beq.n	8010eb0 <I2C_ReadDataBuffer+0x5c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, DeviceAddr, I2C_Direction_Transmitter);
 8010ef6:	79fb      	ldrb	r3, [r7, #7]
 8010ef8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010efc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010f00:	4619      	mov	r1, r3
 8010f02:	f04f 0200 	mov.w	r2, #0
 8010f06:	f7f6 ff97 	bl	8007e38 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 8010f0a:	f240 0338 	movw	r3, #56	; 0x38
 8010f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f12:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8010f16:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8010f18:	e015      	b.n	8010f46 <I2C_ReadDataBuffer+0xf2>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8010f1a:	f240 0338 	movw	r3, #56	; 0x38
 8010f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	bf14      	ite	ne
 8010f28:	2200      	movne	r2, #0
 8010f2a:	2201      	moveq	r2, #1
 8010f2c:	b2d2      	uxtb	r2, r2
 8010f2e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8010f32:	f240 0338 	movw	r3, #56	; 0x38
 8010f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f3a:	6019      	str	r1, [r3, #0]
 8010f3c:	2a00      	cmp	r2, #0
 8010f3e:	d002      	beq.n	8010f46 <I2C_ReadDataBuffer+0xf2>
 8010f40:	f04f 0302 	mov.w	r3, #2
 8010f44:	e11b      	b.n	801117e <I2C_ReadDataBuffer+0x32a>
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, DeviceAddr, I2C_Direction_Transmitter);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8010f46:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010f4a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010f4e:	f04f 0182 	mov.w	r1, #130	; 0x82
 8010f52:	f2c0 0107 	movt	r1, #7
 8010f56:	f7f7 f9df 	bl	8008318 <I2C_CheckEvent>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d0dc      	beq.n	8010f1a <I2C_ReadDataBuffer+0xc6>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	b2db      	uxtb	r3, r3
 8010f64:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010f68:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010f6c:	4619      	mov	r1, r3
 8010f6e:	f7f7 f8c7 	bl	8008100 <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 8010f72:	f240 0338 	movw	r3, #56	; 0x38
 8010f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f7a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8010f7e:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 8010f80:	e015      	b.n	8010fae <I2C_ReadDataBuffer+0x15a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8010f82:	f240 0338 	movw	r3, #56	; 0x38
 8010f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	bf14      	ite	ne
 8010f90:	2200      	movne	r2, #0
 8010f92:	2201      	moveq	r2, #1
 8010f94:	b2d2      	uxtb	r2, r2
 8010f96:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8010f9a:	f240 0338 	movw	r3, #56	; 0x38
 8010f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010fa2:	6019      	str	r1, [r3, #0]
 8010fa4:	2a00      	cmp	r2, #0
 8010fa6:	d002      	beq.n	8010fae <I2C_ReadDataBuffer+0x15a>
 8010fa8:	f04f 0302 	mov.w	r3, #2
 8010fac:	e0e7      	b.n	801117e <I2C_ReadDataBuffer+0x32a>
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 8010fae:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010fb2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010fb6:	f04f 0180 	mov.w	r1, #128	; 0x80
 8010fba:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8010fbe:	f7f7 fa09 	bl	80083d4 <I2C_GetFlagStatus>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d10c      	bne.n	8010fe2 <I2C_ReadDataBuffer+0x18e>
 8010fc8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010fcc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010fd0:	f04f 0104 	mov.w	r1, #4
 8010fd4:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8010fd8:	f7f7 f9fc 	bl	80083d4 <I2C_GetFlagStatus>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d0cf      	beq.n	8010f82 <I2C_ReadDataBuffer+0x12e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8010fe2:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8010fe6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8010fea:	f04f 0101 	mov.w	r1, #1
 8010fee:	f7f6 fee3 	bl	8007db8 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 8010ff2:	f240 0338 	movw	r3, #56	; 0x38
 8010ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ffa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8010ffe:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 8011000:	e015      	b.n	801102e <I2C_ReadDataBuffer+0x1da>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8011002:	f240 0338 	movw	r3, #56	; 0x38
 8011006:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	2b00      	cmp	r3, #0
 801100e:	bf14      	ite	ne
 8011010:	2200      	movne	r2, #0
 8011012:	2201      	moveq	r2, #1
 8011014:	b2d2      	uxtb	r2, r2
 8011016:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 801101a:	f240 0338 	movw	r3, #56	; 0x38
 801101e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011022:	6019      	str	r1, [r3, #0]
 8011024:	2a00      	cmp	r2, #0
 8011026:	d002      	beq.n	801102e <I2C_ReadDataBuffer+0x1da>
 8011028:	f04f 0302 	mov.w	r3, #2
 801102c:	e0a7      	b.n	801117e <I2C_ReadDataBuffer+0x32a>
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 801102e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8011032:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8011036:	f04f 0101 	mov.w	r1, #1
 801103a:	f2c1 0100 	movt	r1, #4096	; 0x1000
 801103e:	f7f7 f9c9 	bl	80083d4 <I2C_GetFlagStatus>
 8011042:	4603      	mov	r3, r0
 8011044:	2b00      	cmp	r3, #0
 8011046:	d0dc      	beq.n	8011002 <I2C_ReadDataBuffer+0x1ae>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send IOExpander address for read */
  I2C_Send7bitAddress(IOE_I2C, DeviceAddr, I2C_Direction_Receiver);
 8011048:	79fb      	ldrb	r3, [r7, #7]
 801104a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801104e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8011052:	4619      	mov	r1, r3
 8011054:	f04f 0201 	mov.w	r2, #1
 8011058:	f7f6 feee 	bl	8007e38 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 801105c:	f240 0338 	movw	r3, #56	; 0x38
 8011060:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011064:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8011068:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 801106a:	e015      	b.n	8011098 <I2C_ReadDataBuffer+0x244>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 801106c:	f240 0338 	movw	r3, #56	; 0x38
 8011070:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	2b00      	cmp	r3, #0
 8011078:	bf14      	ite	ne
 801107a:	2200      	movne	r2, #0
 801107c:	2201      	moveq	r2, #1
 801107e:	b2d2      	uxtb	r2, r2
 8011080:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8011084:	f240 0338 	movw	r3, #56	; 0x38
 8011088:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801108c:	6019      	str	r1, [r3, #0]
 801108e:	2a00      	cmp	r2, #0
 8011090:	d002      	beq.n	8011098 <I2C_ReadDataBuffer+0x244>
 8011092:	f04f 0302 	mov.w	r3, #2
 8011096:	e072      	b.n	801117e <I2C_ReadDataBuffer+0x32a>
  /* Send IOExpander address for read */
  I2C_Send7bitAddress(IOE_I2C, DeviceAddr, I2C_Direction_Receiver);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 8011098:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801109c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80110a0:	f04f 0102 	mov.w	r1, #2
 80110a4:	f2c0 0103 	movt	r1, #3
 80110a8:	f7f7 f936 	bl	8008318 <I2C_CheckEvent>
 80110ac:	4603      	mov	r3, r0
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d0dc      	beq.n	801106c <I2C_ReadDataBuffer+0x218>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 80110b2:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80110b6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80110ba:	f04f 0101 	mov.w	r1, #1
 80110be:	f7f7 f8af 	bl	8008220 <I2C_DMACmd>
  
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
 80110c2:	f246 0010 	movw	r0, #24592	; 0x6010
 80110c6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80110ca:	f04f 0101 	mov.w	r1, #1
 80110ce:	f7f3 fde5 	bl	8004c9c <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
 80110d2:	f240 0338 	movw	r3, #56	; 0x38
 80110d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80110da:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80110de:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM, IOE_DMA_RX_TCFLAG))
 80110e0:	e015      	b.n	801110e <I2C_ReadDataBuffer+0x2ba>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 80110e2:	f240 0338 	movw	r3, #56	; 0x38
 80110e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	bf14      	ite	ne
 80110f0:	2200      	movne	r2, #0
 80110f2:	2201      	moveq	r2, #1
 80110f4:	b2d2      	uxtb	r2, r2
 80110f6:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 80110fa:	f240 0338 	movw	r3, #56	; 0x38
 80110fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011102:	6019      	str	r1, [r3, #0]
 8011104:	2a00      	cmp	r2, #0
 8011106:	d002      	beq.n	801110e <I2C_ReadDataBuffer+0x2ba>
 8011108:	f04f 0302 	mov.w	r3, #2
 801110c:	e037      	b.n	801117e <I2C_ReadDataBuffer+0x32a>
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM, IOE_DMA_RX_TCFLAG))
 801110e:	f246 0010 	movw	r0, #24592	; 0x6010
 8011112:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011116:	f04f 0120 	mov.w	r1, #32
 801111a:	f2c1 0100 	movt	r1, #4096	; 0x1000
 801111e:	f7f3 fec5 	bl	8004eac <DMA_GetFlagStatus>
 8011122:	4603      	mov	r3, r0
 8011124:	2b00      	cmp	r3, #0
 8011126:	d0dc      	beq.n	80110e2 <I2C_ReadDataBuffer+0x28e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }        
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 8011128:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801112c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8011130:	f04f 0101 	mov.w	r1, #1
 8011134:	f7f6 fe60 	bl	8007df8 <I2C_GenerateSTOP>
  
  /* Disable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, DISABLE);
 8011138:	f246 0010 	movw	r0, #24592	; 0x6010
 801113c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011140:	f04f 0100 	mov.w	r1, #0
 8011144:	f7f3 fdaa 	bl	8004c9c <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 8011148:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 801114c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8011150:	f04f 0100 	mov.w	r1, #0
 8011154:	f7f7 f864 	bl	8008220 <I2C_DMACmd>
  
  /* Clear DMA RX Transfer Complete Flag */
  DMA_ClearFlag(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG);
 8011158:	f246 0010 	movw	r0, #24592	; 0x6010
 801115c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011160:	f04f 0120 	mov.w	r1, #32
 8011164:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8011168:	f7f3 fee2 	bl	8004f30 <DMA_ClearFlag>
  
  /* Reorganize received data */  
  tmp = IOE_BufferRX[0];
 801116c:	7b3b      	ldrb	r3, [r7, #12]
 801116e:	73fb      	strb	r3, [r7, #15]
  IOE_BufferRX[0] = IOE_BufferRX[1];
 8011170:	7b7b      	ldrb	r3, [r7, #13]
 8011172:	733b      	strb	r3, [r7, #12]
  IOE_BufferRX[1] = tmp;
 8011174:	7bfb      	ldrb	r3, [r7, #15]
 8011176:	737b      	strb	r3, [r7, #13]
  
  /* return a pointer to the IOE_Buffer */
  return *(uint16_t *)IOE_BufferRX; 
 8011178:	f107 030c 	add.w	r3, r7, #12
 801117c:	881b      	ldrh	r3, [r3, #0]
}
 801117e:	4618      	mov	r0, r3
 8011180:	f107 0710 	add.w	r7, r7, #16
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}

08011188 <IOE_TS_Read_X>:
  * @brief  Return Touch Screen X position value
  * @param  None
  * @retval X position.
  */
static uint16_t IOE_TS_Read_X(void)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b082      	sub	sp, #8
 801118c:	af00      	add	r7, sp, #0
  int32_t x, xr;
 
  x = I2C_ReadDataBuffer(IOE_1_ADDR, IOE_REG_TSC_DATA_Y);
 801118e:	f04f 0082 	mov.w	r0, #130	; 0x82
 8011192:	f04f 014f 	mov.w	r1, #79	; 0x4f
 8011196:	f7ff fe5d 	bl	8010e54 <I2C_ReadDataBuffer>
 801119a:	4603      	mov	r3, r0
 801119c:	603b      	str	r3, [r7, #0]
  
  /* first correction */
  xr =  (x * 320) >> 12;
 801119e:	683a      	ldr	r2, [r7, #0]
 80111a0:	4613      	mov	r3, r2
 80111a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80111a6:	189b      	adds	r3, r3, r2
 80111a8:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80111ac:	ea4f 3323 	mov.w	r3, r3, asr #12
 80111b0:	607b      	str	r3, [r7, #4]
  /* second correction */
  xr = ((xr * 32)/29) - 17;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80111b8:	f64c 3209 	movw	r2, #51977	; 0xcb09
 80111bc:	f6c8 523d 	movt	r2, #36157	; 0x8d3d
 80111c0:	fb82 1203 	smull	r1, r2, r2, r3
 80111c4:	18d2      	adds	r2, r2, r3
 80111c6:	ea4f 1222 	mov.w	r2, r2, asr #4
 80111ca:	ea4f 73e3 	mov.w	r3, r3, asr #31
 80111ce:	1ad3      	subs	r3, r2, r3
 80111d0:	f1a3 0311 	sub.w	r3, r3, #17
 80111d4:	607b      	str	r3, [r7, #4]
  
  if(xr <= 0)
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	dc02      	bgt.n	80111e2 <IOE_TS_Read_X+0x5a>
    xr = 0;
 80111dc:	f04f 0300 	mov.w	r3, #0
 80111e0:	607b      	str	r3, [r7, #4]
  
  return (uint16_t)(xr); 
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	b29b      	uxth	r3, r3
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	f107 0708 	add.w	r7, r7, #8
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}

080111f0 <IOE_TS_Read_Y>:
  * @brief  Return Touch Screen Y position value
  * @param  None
  * @retval Y position.
  */
static uint16_t IOE_TS_Read_Y(void)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
  int32_t y, yr;
  y= I2C_ReadDataBuffer(IOE_1_ADDR, IOE_REG_TSC_DATA_X);
 80111f6:	f04f 0082 	mov.w	r0, #130	; 0x82
 80111fa:	f04f 014d 	mov.w	r1, #77	; 0x4d
 80111fe:	f7ff fe29 	bl	8010e54 <I2C_ReadDataBuffer>
 8011202:	4603      	mov	r3, r0
 8011204:	603b      	str	r3, [r7, #0]
  
  yr= (y * 240) >> 12;
 8011206:	683a      	ldr	r2, [r7, #0]
 8011208:	4613      	mov	r3, r2
 801120a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801120e:	1a9b      	subs	r3, r3, r2
 8011210:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011214:	ea4f 3323 	mov.w	r3, r3, asr #12
 8011218:	607b      	str	r3, [r7, #4]
  yr = ((yr * 240) / 217) - 12;
 801121a:	687a      	ldr	r2, [r7, #4]
 801121c:	4613      	mov	r3, r2
 801121e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011222:	1a9b      	subs	r3, r3, r2
 8011224:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011228:	f642 6203 	movw	r2, #11779	; 0x2e03
 801122c:	f2c9 7201 	movt	r2, #38657	; 0x9701
 8011230:	fb82 1203 	smull	r1, r2, r2, r3
 8011234:	18d2      	adds	r2, r2, r3
 8011236:	ea4f 12e2 	mov.w	r2, r2, asr #7
 801123a:	ea4f 73e3 	mov.w	r3, r3, asr #31
 801123e:	1ad3      	subs	r3, r2, r3
 8011240:	f1a3 030c 	sub.w	r3, r3, #12
 8011244:	607b      	str	r3, [r7, #4]
  
  if(yr <= 0)
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2b00      	cmp	r3, #0
 801124a:	dc02      	bgt.n	8011252 <IOE_TS_Read_Y+0x62>
    yr = 0;
 801124c:	f04f 0300 	mov.w	r3, #0
 8011250:	607b      	str	r3, [r7, #4]
  
  return (uint16_t)(yr); 
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	b29b      	uxth	r3, r3
}
 8011256:	4618      	mov	r0, r3
 8011258:	f107 0708 	add.w	r7, r7, #8
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}

08011260 <IOE_TS_Read_Z>:
  * @brief  Return Touch Screen Z position value
  * @param  None
  * @retval Z position.
  */
static uint16_t IOE_TS_Read_Z(void)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b082      	sub	sp, #8
 8011264:	af00      	add	r7, sp, #0
  uint32_t z;
  z = I2C_ReadDataBuffer(IOE_1_ADDR, IOE_REG_TSC_DATA_Z);
 8011266:	f04f 0082 	mov.w	r0, #130	; 0x82
 801126a:	f04f 0151 	mov.w	r1, #81	; 0x51
 801126e:	f7ff fdf1 	bl	8010e54 <I2C_ReadDataBuffer>
 8011272:	4603      	mov	r3, r0
 8011274:	607b      	str	r3, [r7, #4]
  
  
  if(z <= 0)
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d102      	bne.n	8011282 <IOE_TS_Read_Z+0x22>
    z = 0;
 801127c:	f04f 0300 	mov.w	r3, #0
 8011280:	607b      	str	r3, [r7, #4]
  
  return (uint16_t)(z); 
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	b29b      	uxth	r3, r3
}
 8011286:	4618      	mov	r0, r3
 8011288:	f107 0708 	add.w	r7, r7, #8
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}

08011290 <IOE_GPIO_Config>:
  * @brief  Initializes the GPIO pins used by the IO expander.
  * @param  None
  * @retval None
  */
static void IOE_GPIO_Config(void)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable IOE_I2C and IOE_I2C_GPIO_PORT & Alternate Function clocks */
  RCC_APB1PeriphClockCmd(IOE_I2C_CLK, ENABLE);
 8011296:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 801129a:	f04f 0101 	mov.w	r1, #1
 801129e:	f7f7 fef9 	bl	8009094 <RCC_APB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(IOE_I2C_SCL_GPIO_CLK | IOE_I2C_SDA_GPIO_CLK |
 80112a2:	f44f 7081 	mov.w	r0, #258	; 0x102
 80112a6:	f04f 0101 	mov.w	r1, #1
 80112aa:	f7f7 fe75 	bl	8008f98 <RCC_AHB1PeriphClockCmd>
                         IOE_IT_GPIO_CLK, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80112ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80112b2:	f04f 0101 	mov.w	r1, #1
 80112b6:	f7f7 ff17 	bl	80090e8 <RCC_APB2PeriphClockCmd>
  
  /* Reset IOE_I2C IP */
  RCC_APB1PeriphResetCmd(IOE_I2C_CLK, ENABLE);
 80112ba:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80112be:	f04f 0101 	mov.w	r1, #1
 80112c2:	f7f7 ffb9 	bl	8009238 <RCC_APB1PeriphResetCmd>
  /* Release reset signal of IOE_I2C IP */
  RCC_APB1PeriphResetCmd(IOE_I2C_CLK, DISABLE);
 80112c6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80112ca:	f04f 0100 	mov.w	r1, #0
 80112ce:	f7f7 ffb3 	bl	8009238 <RCC_APB1PeriphResetCmd>

  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(IOE_I2C_SCL_GPIO_PORT, IOE_I2C_SCL_SOURCE, IOE_I2C_SCL_AF);
 80112d2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80112d6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80112da:	f04f 0106 	mov.w	r1, #6
 80112de:	f04f 0204 	mov.w	r2, #4
 80112e2:	f7f5 fda1 	bl	8006e28 <GPIO_PinAFConfig>
  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(IOE_I2C_SDA_GPIO_PORT, IOE_I2C_SDA_SOURCE, IOE_I2C_SDA_AF); 
 80112e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80112ea:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80112ee:	f04f 0109 	mov.w	r1, #9
 80112f2:	f04f 0204 	mov.w	r2, #4
 80112f6:	f7f5 fd97 	bl	8006e28 <GPIO_PinAFConfig>
    
  /* IOE_I2C SCL and SDA pins configuration */
  GPIO_InitStructure.GPIO_Pin = IOE_I2C_SCL_PIN;
 80112fa:	f04f 0340 	mov.w	r3, #64	; 0x40
 80112fe:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8011300:	f04f 0302 	mov.w	r3, #2
 8011304:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8011306:	f04f 0302 	mov.w	r3, #2
 801130a:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 801130c:	f04f 0301 	mov.w	r3, #1
 8011310:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8011312:	f04f 0300 	mov.w	r3, #0
 8011316:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(IOE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8011318:	463b      	mov	r3, r7
 801131a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801131e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011322:	4619      	mov	r1, r3
 8011324:	f7f5 fbf2 	bl	8006b0c <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = IOE_I2C_SDA_PIN;
 8011328:	f44f 7300 	mov.w	r3, #512	; 0x200
 801132c:	603b      	str	r3, [r7, #0]
  GPIO_Init(IOE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 801132e:	463b      	mov	r3, r7
 8011330:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011334:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011338:	4619      	mov	r1, r3
 801133a:	f7f5 fbe7 	bl	8006b0c <GPIO_Init>

  /* Set EXTI pin as Input PullUp - IO_Expander_INT */
  GPIO_InitStructure.GPIO_Pin = IOE_IT_PIN;
 801133e:	f04f 0304 	mov.w	r3, #4
 8011342:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8011344:	f04f 0300 	mov.w	r3, #0
 8011348:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 801134a:	f04f 0300 	mov.w	r3, #0
 801134e:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(IOE_IT_GPIO_PORT, &GPIO_InitStructure);
 8011350:	463b      	mov	r3, r7
 8011352:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8011356:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801135a:	4619      	mov	r1, r3
 801135c:	f7f5 fbd6 	bl	8006b0c <GPIO_Init>

  /* Connect Button EXTI Line to Button GPIO Pin */
  SYSCFG_EXTILineConfig(IOE_IT_EXTI_PORT_SOURCE, IOE_IT_EXTI_PIN_SOURCE);  
 8011360:	f04f 0008 	mov.w	r0, #8
 8011364:	f04f 0102 	mov.w	r1, #2
 8011368:	f7fa ff86 	bl	800c278 <SYSCFG_EXTILineConfig>
}
 801136c:	f107 0708 	add.w	r7, r7, #8
 8011370:	46bd      	mov	sp, r7
 8011372:	bd80      	pop	{r7, pc}

08011374 <IOE_I2C_Config>:
  * @brief  Configure the I2C Peripheral used to communicate with IO_Expanders.
  * @param  None
  * @retval None
  */
static void IOE_I2C_Config(void)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b084      	sub	sp, #16
 8011378:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;
  
  /* IOE_I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 801137a:	f04f 0300 	mov.w	r3, #0
 801137e:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8011380:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8011384:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8011386:	f04f 0300 	mov.w	r3, #0
 801138a:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 801138c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011390:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8011392:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011396:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8011398:	f248 63a0 	movw	r3, #34464	; 0x86a0
 801139c:	f2c0 0301 	movt	r3, #1
 80113a0:	603b      	str	r3, [r7, #0]
  
  I2C_Init(IOE_I2C, &I2C_InitStructure);
 80113a2:	463b      	mov	r3, r7
 80113a4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80113a8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80113ac:	4619      	mov	r1, r3
 80113ae:	f7f6 fbeb 	bl	8007b88 <I2C_Init>
}
 80113b2:	f107 0710 	add.w	r7, r7, #16
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop

080113bc <IOE_DMA_Config>:
  * @param  None
  * @retval None
  */

static void IOE_DMA_Config(IOE_DMADirection_TypeDef Direction, uint8_t* buffer)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b092      	sub	sp, #72	; 0x48
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	4603      	mov	r3, r0
 80113c4:	6039      	str	r1, [r7, #0]
 80113c6:	71fb      	strb	r3, [r7, #7]
  DMA_InitTypeDef DMA_InitStructure;
  
  RCC_AHB1PeriphClockCmd(IOE_DMA_CLK, ENABLE);
 80113c8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80113cc:	f04f 0101 	mov.w	r1, #1
 80113d0:	f7f7 fde2 	bl	8008f98 <RCC_AHB1PeriphClockCmd>
  
  /* Initialize the DMA_Channel member */
  DMA_InitStructure.DMA_Channel = IOE_DMA_CHANNEL;
 80113d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80113d8:	60fb      	str	r3, [r7, #12]
  
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStructure.DMA_PeripheralBaseAddr = IOE_I2C_DR;
 80113da:	f245 4310 	movw	r3, #21520	; 0x5410
 80113de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80113e2:	613b      	str	r3, [r7, #16]
  
  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)buffer;
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	617b      	str	r3, [r7, #20]
  
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80113e8:	f04f 0300 	mov.w	r3, #0
 80113ec:	623b      	str	r3, [r7, #32]
  
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80113ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113f2:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80113f4:	f04f 0300 	mov.w	r3, #0
 80113f8:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80113fa:	f04f 0300 	mov.w	r3, #0
 80113fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize the DMA_Mode member */
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8011400:	f04f 0300 	mov.w	r3, #0
 8011404:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize the DMA_Priority member */
  DMA_InitStructure.DMA_Priority = DMA_Priority_Low;
 8011406:	f04f 0300 	mov.w	r3, #0
 801140a:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Initialize the DMA_FIFOMode member */
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 801140c:	f04f 0304 	mov.w	r3, #4
 8011410:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8011412:	f04f 0300 	mov.w	r3, #0
 8011416:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8011418:	f04f 0300 	mov.w	r3, #0
 801141c:	643b      	str	r3, [r7, #64]	; 0x40
  
  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 801141e:	f04f 0300 	mov.w	r3, #0
 8011422:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* If using DMA for Reception */
  if (Direction == IOE_DMA_RX)
 8011424:	79fb      	ldrb	r3, [r7, #7]
 8011426:	2b01      	cmp	r3, #1
 8011428:	d115      	bne.n	8011456 <IOE_DMA_Config+0x9a>
  {    
    /* Initialize the DMA_DIR member */
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 801142a:	f04f 0300 	mov.w	r3, #0
 801142e:	61bb      	str	r3, [r7, #24]
    
    /* Initialize the DMA_BufferSize member */
    DMA_InitStructure.DMA_BufferSize = 2;
 8011430:	f04f 0302 	mov.w	r3, #2
 8011434:	61fb      	str	r3, [r7, #28]
    
    DMA_DeInit(IOE_DMA_RX_STREAM);
 8011436:	f246 0010 	movw	r0, #24592	; 0x6010
 801143a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801143e:	f7f3 fa6d 	bl	800491c <DMA_DeInit>
    
    DMA_Init(IOE_DMA_RX_STREAM, &DMA_InitStructure);
 8011442:	f107 030c 	add.w	r3, r7, #12
 8011446:	f246 0010 	movw	r0, #24592	; 0x6010
 801144a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801144e:	4619      	mov	r1, r3
 8011450:	f7f3 fb86 	bl	8004b60 <DMA_Init>
 8011454:	e017      	b.n	8011486 <IOE_DMA_Config+0xca>
  }
  /* If using DMA for Transmission */
  else if (Direction == IOE_DMA_TX)
 8011456:	79fb      	ldrb	r3, [r7, #7]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d114      	bne.n	8011486 <IOE_DMA_Config+0xca>
  { 
    /* Initialize the DMA_DIR member */
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 801145c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8011460:	61bb      	str	r3, [r7, #24]
    
    /* Initialize the DMA_BufferSize member */
    DMA_InitStructure.DMA_BufferSize = 1;
 8011462:	f04f 0301 	mov.w	r3, #1
 8011466:	61fb      	str	r3, [r7, #28]
    
    DMA_DeInit(IOE_DMA_TX_STREAM);
 8011468:	f246 00a0 	movw	r0, #24736	; 0x60a0
 801146c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011470:	f7f3 fa54 	bl	800491c <DMA_DeInit>
    
    DMA_Init(IOE_DMA_TX_STREAM, &DMA_InitStructure);
 8011474:	f107 030c 	add.w	r3, r7, #12
 8011478:	f246 00a0 	movw	r0, #24736	; 0x60a0
 801147c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011480:	4619      	mov	r1, r3
 8011482:	f7f3 fb6d 	bl	8004b60 <DMA_Init>
  }
}
 8011486:	f107 0748 	add.w	r7, r7, #72	; 0x48
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}
 801148e:	bf00      	nop

08011490 <IOE_EXTI_Config>:
  * @brief  Configures the IO expander Interrupt line and GPIO in EXTI mode.
  * @param  None        
  * @retval None
  */
static void IOE_EXTI_Config(void)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b086      	sub	sp, #24
 8011494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
 
  /* Enable GPIO clock */
  RCC_AHB1PeriphClockCmd(IOE_IT_GPIO_CLK, ENABLE);
 8011496:	f44f 7080 	mov.w	r0, #256	; 0x100
 801149a:	f04f 0101 	mov.w	r1, #1
 801149e:	f7f7 fd7b 	bl	8008f98 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80114a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80114a6:	f04f 0101 	mov.w	r1, #1
 80114aa:	f7f7 fe1d 	bl	80090e8 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input floating */
  GPIO_InitStructure.GPIO_Pin = IOE_IT_PIN;
 80114ae:	f04f 0304 	mov.w	r3, #4
 80114b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80114b4:	f04f 0300 	mov.w	r3, #0
 80114b8:	753b      	strb	r3, [r7, #20]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80114ba:	f04f 0300 	mov.w	r3, #0
 80114be:	75fb      	strb	r3, [r7, #23]
  GPIO_Init(IOE_IT_GPIO_PORT, &GPIO_InitStructure);  
 80114c0:	f107 0310 	add.w	r3, r7, #16
 80114c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80114c8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80114cc:	4619      	mov	r1, r3
 80114ce:	f7f5 fb1d 	bl	8006b0c <GPIO_Init>
  
  /* Connect Button EXTI Line to Button GPIO Pin */
  SYSCFG_EXTILineConfig(IOE_IT_EXTI_PORT_SOURCE, IOE_IT_EXTI_PIN_SOURCE);  
 80114d2:	f04f 0008 	mov.w	r0, #8
 80114d6:	f04f 0102 	mov.w	r1, #2
 80114da:	f7fa fecd 	bl	800c278 <SYSCFG_EXTILineConfig>
  
  /* Configure Button EXTI line */
  EXTI_InitStructure.EXTI_Line = IOE_IT_EXTI_LINE;
 80114de:	f04f 0304 	mov.w	r3, #4
 80114e2:	607b      	str	r3, [r7, #4]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80114e4:	f04f 0300 	mov.w	r3, #0
 80114e8:	723b      	strb	r3, [r7, #8]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;  
 80114ea:	f04f 0310 	mov.w	r3, #16
 80114ee:	727b      	strb	r3, [r7, #9]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80114f0:	f04f 0301 	mov.w	r3, #1
 80114f4:	72bb      	strb	r3, [r7, #10]
  EXTI_Init(&EXTI_InitStructure);
 80114f6:	f107 0304 	add.w	r3, r7, #4
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7f3 fe3c 	bl	8005178 <EXTI_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  NVIC_InitStructure.NVIC_IRQChannel = IOE_IT_EXTI_IRQn;
 8011500:	f04f 0308 	mov.w	r3, #8
 8011504:	733b      	strb	r3, [r7, #12]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8011506:	f04f 030f 	mov.w	r3, #15
 801150a:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 801150c:	f04f 030f 	mov.w	r3, #15
 8011510:	73bb      	strb	r3, [r7, #14]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8011512:	f04f 0301 	mov.w	r3, #1
 8011516:	73fb      	strb	r3, [r7, #15]
  NVIC_Init(&NVIC_InitStructure);
 8011518:	f107 030c 	add.w	r3, r7, #12
 801151c:	4618      	mov	r0, r3
 801151e:	f7ee fd83 	bl	8000028 <NVIC_Init>
}
 8011522:	f107 0718 	add.w	r7, r7, #24
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}
 801152a:	bf00      	nop

0801152c <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 801152c:	b480      	push	{r7}
 801152e:	b085      	sub	sp, #20
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8011534:	f04f 0300 	mov.w	r3, #0
 8011538:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 801153a:	687a      	ldr	r2, [r7, #4]
 801153c:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8011540:	f2c0 0301 	movt	r3, #1
 8011544:	fb03 f302 	mul.w	r3, r3, r2
 8011548:	60fb      	str	r3, [r7, #12]
 801154a:	e003      	b.n	8011554 <delay+0x28>
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8011552:	60fb      	str	r3, [r7, #12]
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d1f8      	bne.n	801154c <delay+0x20>
  {
  }
}
 801155a:	f107 0714 	add.w	r7, r7, #20
 801155e:	46bd      	mov	sp, r7
 8011560:	bc80      	pop	{r7}
 8011562:	4770      	bx	lr

08011564 <LCD_DeInit>:
  * @brief  DeInitializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_DeInit(void)
{ 
 8011564:	b580      	push	{r7, lr}
 8011566:	b082      	sub	sp, #8
 8011568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /*!< LCD Display Off */
  LCD_DisplayOff();
 801156a:	f001 ff9d 	bl	80134a8 <LCD_DisplayOff>

  /* BANK 3 (of NOR/SRAM Bank 1~4) is disabled */
  FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);
 801156e:	f04f 0004 	mov.w	r0, #4
 8011572:	f04f 0101 	mov.w	r1, #1
 8011576:	f7f4 fd91 	bl	800609c <FSMC_NORSRAMCmd>
  
  /*!< LCD_SPI DeInit */
  FSMC_NORSRAMDeInit(FSMC_Bank1_NORSRAM3);
 801157a:	f04f 0004 	mov.w	r0, #4
 801157e:	f7f4 fc33 	bl	8005de8 <FSMC_NORSRAMDeInit>
   
/*-- GPIO Configuration ------------------------------------------------------*/
  /* SRAM Data lines configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
 8011582:	f24c 7303 	movw	r3, #50947	; 0xc703
 8011586:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8011588:	f04f 0300 	mov.w	r3, #0
 801158c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801158e:	f04f 0300 	mov.w	r3, #0
 8011592:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8011594:	463b      	mov	r3, r7
 8011596:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801159a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801159e:	4619      	mov	r1, r3
 80115a0:	f7f5 fab4 	bl	8006b0c <GPIO_Init>
 
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_MCO);
 80115a4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80115a8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80115ac:	f04f 0100 	mov.w	r1, #0
 80115b0:	f04f 0200 	mov.w	r2, #0
 80115b4:	f7f5 fc38 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_MCO);
 80115b8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80115bc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80115c0:	f04f 0101 	mov.w	r1, #1
 80115c4:	f04f 0200 	mov.w	r2, #0
 80115c8:	f7f5 fc2e 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_MCO);
 80115cc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80115d0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80115d4:	f04f 0108 	mov.w	r1, #8
 80115d8:	f04f 0200 	mov.w	r2, #0
 80115dc:	f7f5 fc24 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_MCO);
 80115e0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80115e4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80115e8:	f04f 0109 	mov.w	r1, #9
 80115ec:	f04f 0200 	mov.w	r2, #0
 80115f0:	f7f5 fc1a 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_MCO);
 80115f4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80115f8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80115fc:	f04f 010a 	mov.w	r1, #10
 8011600:	f04f 0200 	mov.w	r2, #0
 8011604:	f7f5 fc10 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_MCO);
 8011608:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801160c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011610:	f04f 010e 	mov.w	r1, #14
 8011614:	f04f 0200 	mov.w	r2, #0
 8011618:	f7f5 fc06 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_MCO);
 801161c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8011620:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011624:	f04f 010f 	mov.w	r1, #15
 8011628:	f04f 0200 	mov.w	r2, #0
 801162c:	f7f5 fbfc 	bl	8006e28 <GPIO_PinAFConfig>


  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
 8011630:	f64f 7380 	movw	r3, #65408	; 0xff80
 8011634:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
                                GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8011636:	463b      	mov	r3, r7
 8011638:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801163c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011640:	4619      	mov	r1, r3
 8011642:	f7f5 fa63 	bl	8006b0c <GPIO_Init>

  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_MCO);
 8011646:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801164a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801164e:	f04f 0107 	mov.w	r1, #7
 8011652:	f04f 0200 	mov.w	r2, #0
 8011656:	f7f5 fbe7 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_MCO);
 801165a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801165e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011662:	f04f 0108 	mov.w	r1, #8
 8011666:	f04f 0200 	mov.w	r2, #0
 801166a:	f7f5 fbdd 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_MCO);
 801166e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011672:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011676:	f04f 0109 	mov.w	r1, #9
 801167a:	f04f 0200 	mov.w	r2, #0
 801167e:	f7f5 fbd3 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_MCO);
 8011682:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011686:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801168a:	f04f 010a 	mov.w	r1, #10
 801168e:	f04f 0200 	mov.w	r2, #0
 8011692:	f7f5 fbc9 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_MCO);
 8011696:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801169a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801169e:	f04f 010b 	mov.w	r1, #11
 80116a2:	f04f 0200 	mov.w	r2, #0
 80116a6:	f7f5 fbbf 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_MCO);
 80116aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80116ae:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80116b2:	f04f 010c 	mov.w	r1, #12
 80116b6:	f04f 0200 	mov.w	r2, #0
 80116ba:	f7f5 fbb5 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_MCO);
 80116be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80116c2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80116c6:	f04f 010d 	mov.w	r1, #13
 80116ca:	f04f 0200 	mov.w	r2, #0
 80116ce:	f7f5 fbab 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_MCO);
 80116d2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80116d6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80116da:	f04f 010e 	mov.w	r1, #14
 80116de:	f04f 0200 	mov.w	r2, #0
 80116e2:	f7f5 fba1 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_MCO);
 80116e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80116ea:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80116ee:	f04f 010f 	mov.w	r1, #15
 80116f2:	f04f 0200 	mov.w	r2, #0
 80116f6:	f7f5 fb97 	bl	8006e28 <GPIO_PinAFConfig>

  /* SRAM Address lines configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
 80116fa:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80116fe:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_12 | GPIO_Pin_13 | 
                                GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_Init(GPIOF, &GPIO_InitStructure);
 8011700:	463b      	mov	r3, r7
 8011702:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8011706:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801170a:	4619      	mov	r1, r3
 801170c:	f7f5 f9fe 	bl	8006b0c <GPIO_Init>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource0, GPIO_AF_MCO);
 8011710:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8011714:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011718:	f04f 0100 	mov.w	r1, #0
 801171c:	f04f 0200 	mov.w	r2, #0
 8011720:	f7f5 fb82 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource1, GPIO_AF_MCO);
 8011724:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8011728:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801172c:	f04f 0101 	mov.w	r1, #1
 8011730:	f04f 0200 	mov.w	r2, #0
 8011734:	f7f5 fb78 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource2, GPIO_AF_MCO);
 8011738:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801173c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011740:	f04f 0102 	mov.w	r1, #2
 8011744:	f04f 0200 	mov.w	r2, #0
 8011748:	f7f5 fb6e 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource3, GPIO_AF_MCO);
 801174c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8011750:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011754:	f04f 0103 	mov.w	r1, #3
 8011758:	f04f 0200 	mov.w	r2, #0
 801175c:	f7f5 fb64 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource4, GPIO_AF_MCO);
 8011760:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8011764:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011768:	f04f 0104 	mov.w	r1, #4
 801176c:	f04f 0200 	mov.w	r2, #0
 8011770:	f7f5 fb5a 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource5, GPIO_AF_MCO);
 8011774:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8011778:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801177c:	f04f 0105 	mov.w	r1, #5
 8011780:	f04f 0200 	mov.w	r2, #0
 8011784:	f7f5 fb50 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource12, GPIO_AF_MCO);
 8011788:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801178c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011790:	f04f 010c 	mov.w	r1, #12
 8011794:	f04f 0200 	mov.w	r2, #0
 8011798:	f7f5 fb46 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource13, GPIO_AF_MCO);
 801179c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80117a0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80117a4:	f04f 010d 	mov.w	r1, #13
 80117a8:	f04f 0200 	mov.w	r2, #0
 80117ac:	f7f5 fb3c 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource14, GPIO_AF_MCO);
 80117b0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80117b4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80117b8:	f04f 010e 	mov.w	r1, #14
 80117bc:	f04f 0200 	mov.w	r2, #0
 80117c0:	f7f5 fb32 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource15, GPIO_AF_MCO);
 80117c4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80117c8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80117cc:	f04f 010f 	mov.w	r1, #15
 80117d0:	f04f 0200 	mov.w	r2, #0
 80117d4:	f7f5 fb28 	bl	8006e28 <GPIO_PinAFConfig>


  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
 80117d8:	f04f 033f 	mov.w	r3, #63	; 0x3f
 80117dc:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_4 | GPIO_Pin_5;

  GPIO_Init(GPIOG, &GPIO_InitStructure);
 80117de:	463b      	mov	r3, r7
 80117e0:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80117e4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80117e8:	4619      	mov	r1, r3
 80117ea:	f7f5 f98f 	bl	8006b0c <GPIO_Init>

  GPIO_PinAFConfig(GPIOG,GPIO_PinSource0, GPIO_AF_MCO);
 80117ee:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80117f2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80117f6:	f04f 0100 	mov.w	r1, #0
 80117fa:	f04f 0200 	mov.w	r2, #0
 80117fe:	f7f5 fb13 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource1, GPIO_AF_MCO);
 8011802:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8011806:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801180a:	f04f 0101 	mov.w	r1, #1
 801180e:	f04f 0200 	mov.w	r2, #0
 8011812:	f7f5 fb09 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource2, GPIO_AF_MCO);
 8011816:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 801181a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801181e:	f04f 0102 	mov.w	r1, #2
 8011822:	f04f 0200 	mov.w	r2, #0
 8011826:	f7f5 faff 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource3, GPIO_AF_MCO);
 801182a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 801182e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011832:	f04f 0103 	mov.w	r1, #3
 8011836:	f04f 0200 	mov.w	r2, #0
 801183a:	f7f5 faf5 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource4, GPIO_AF_MCO);
 801183e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8011842:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011846:	f04f 0104 	mov.w	r1, #4
 801184a:	f04f 0200 	mov.w	r2, #0
 801184e:	f7f5 faeb 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource5, GPIO_AF_MCO);
 8011852:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8011856:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801185a:	f04f 0105 	mov.w	r1, #5
 801185e:	f04f 0200 	mov.w	r2, #0
 8011862:	f7f5 fae1 	bl	8006e28 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13; 
 8011866:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801186a:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 801186c:	463b      	mov	r3, r7
 801186e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8011872:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011876:	4619      	mov	r1, r3
 8011878:	f7f5 f948 	bl	8006b0c <GPIO_Init>

  GPIO_PinAFConfig(GPIOD,GPIO_PinSource11, GPIO_AF_MCO);
 801187c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8011880:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011884:	f04f 010b 	mov.w	r1, #11
 8011888:	f04f 0200 	mov.w	r2, #0
 801188c:	f7f5 facc 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD,GPIO_PinSource12, GPIO_AF_MCO);
 8011890:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8011894:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011898:	f04f 010c 	mov.w	r1, #12
 801189c:	f04f 0200 	mov.w	r2, #0
 80118a0:	f7f5 fac2 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD,GPIO_PinSource13, GPIO_AF_MCO);
 80118a4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80118a8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80118ac:	f04f 010d 	mov.w	r1, #13
 80118b0:	f04f 0200 	mov.w	r2, #0
 80118b4:	f7f5 fab8 	bl	8006e28 <GPIO_PinAFConfig>

  /* NOE and NWE configuration */  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 |GPIO_Pin_5;
 80118b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80118bc:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80118be:	463b      	mov	r3, r7
 80118c0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80118c4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80118c8:	4619      	mov	r1, r3
 80118ca:	f7f5 f91f 	bl	8006b0c <GPIO_Init>
  GPIO_PinAFConfig(GPIOD,GPIO_PinSource4, GPIO_AF_MCO);
 80118ce:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80118d2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80118d6:	f04f 0104 	mov.w	r1, #4
 80118da:	f04f 0200 	mov.w	r2, #0
 80118de:	f7f5 faa3 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD,GPIO_PinSource5, GPIO_AF_MCO);
 80118e2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80118e6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80118ea:	f04f 0105 	mov.w	r1, #5
 80118ee:	f04f 0200 	mov.w	r2, #0
 80118f2:	f7f5 fa99 	bl	8006e28 <GPIO_PinAFConfig>

  /* NE3 configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
 80118f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80118fa:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOG, &GPIO_InitStructure);
 80118fc:	463b      	mov	r3, r7
 80118fe:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8011902:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011906:	4619      	mov	r1, r3
 8011908:	f7f5 f900 	bl	8006b0c <GPIO_Init>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_MCO);
 801190c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8011910:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011914:	f04f 010c 	mov.w	r1, #12
 8011918:	f04f 0200 	mov.w	r2, #0
 801191c:	f7f5 fa84 	bl	8006e28 <GPIO_PinAFConfig>

  /* NBL0, NBL1 configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; 
 8011920:	f04f 0303 	mov.w	r3, #3
 8011924:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOE, &GPIO_InitStructure); 
 8011926:	463b      	mov	r3, r7
 8011928:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801192c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011930:	4619      	mov	r1, r3
 8011932:	f7f5 f8eb 	bl	8006b0c <GPIO_Init>

  GPIO_PinAFConfig(GPIOE,GPIO_PinSource0, GPIO_AF_MCO);
 8011936:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801193a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801193e:	f04f 0100 	mov.w	r1, #0
 8011942:	f04f 0200 	mov.w	r2, #0
 8011946:	f7f5 fa6f 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE,GPIO_PinSource1, GPIO_AF_MCO);
 801194a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801194e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8011952:	f04f 0101 	mov.w	r1, #1
 8011956:	f04f 0200 	mov.w	r2, #0
 801195a:	f7f5 fa65 	bl	8006e28 <GPIO_PinAFConfig>
}
 801195e:	f107 0708 	add.w	r7, r7, #8
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}
 8011966:	bf00      	nop

08011968 <STM324xG_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval None
  */
void STM324xG_LCD_Init(void)
{ 
 8011968:	b580      	push	{r7, lr}
 801196a:	b082      	sub	sp, #8
 801196c:	af00      	add	r7, sp, #0
  __IO uint32_t lcdid = 0;
 801196e:	f04f 0300 	mov.w	r3, #0
 8011972:	607b      	str	r3, [r7, #4]
  
/* Configure the LCD Control pins --------------------------------------------*/
  LCD_CtrlLinesConfig();
 8011974:	f001 fda2 	bl	80134bc <LCD_CtrlLinesConfig>

/* Configure the FSMC Parallel interface -------------------------------------*/
  LCD_FSMCConfig();
 8011978:	f001 feae 	bl	80136d8 <LCD_FSMCConfig>

  _delay_(5); /* delay 50 ms */
 801197c:	f04f 0005 	mov.w	r0, #5
 8011980:	f001 ff2c 	bl	80137dc <delay>

  /* Read the LCD ID */
  lcdid = LCD_ReadReg(0x00);  
 8011984:	f04f 0000 	mov.w	r0, #0
 8011988:	f001 fcf8 	bl	801337c <LCD_ReadReg>
 801198c:	4603      	mov	r3, r0
 801198e:	607b      	str	r3, [r7, #4]

  /* Check if the LCD is ILI9320 Controller */
  if(lcdid == 0x9320)
 8011990:	687a      	ldr	r2, [r7, #4]
 8011992:	f249 3320 	movw	r3, #37664	; 0x9320
 8011996:	429a      	cmp	r2, r3
 8011998:	f040 8155 	bne.w	8011c46 <STM324xG_LCD_Init+0x2de>
  {
    /* Start Initial Sequence ------------------------------------------------*/
    LCD_WriteReg(LCD_REG_229,0x8000); /* Set the internal vcore voltage */
 801199c:	f04f 00e5 	mov.w	r0, #229	; 0xe5
 80119a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80119a4:	f001 fcd4 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_0,  0x0001); /* Start internal OSC. */
 80119a8:	f04f 0000 	mov.w	r0, #0
 80119ac:	f04f 0101 	mov.w	r1, #1
 80119b0:	f001 fcce 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_1,  0x0100); /* set SS and SM bit */
 80119b4:	f04f 0001 	mov.w	r0, #1
 80119b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80119bc:	f001 fcc8 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_2,  0x0700); /* set 1 line inversion */
 80119c0:	f04f 0002 	mov.w	r0, #2
 80119c4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80119c8:	f001 fcc2 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_3,  0x1030); /* set GRAM write direction and BGR=1. */
 80119cc:	f04f 0003 	mov.w	r0, #3
 80119d0:	f241 0130 	movw	r1, #4144	; 0x1030
 80119d4:	f001 fcbc 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_4,  0x0000); /* Resize register */
 80119d8:	f04f 0004 	mov.w	r0, #4
 80119dc:	f04f 0100 	mov.w	r1, #0
 80119e0:	f001 fcb6 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_8,  0x0202); /* set the back porch and front porch */
 80119e4:	f04f 0008 	mov.w	r0, #8
 80119e8:	f240 2102 	movw	r1, #514	; 0x202
 80119ec:	f001 fcb0 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_9,  0x0000); /* set non-display area refresh cycle ISC[3:0] */
 80119f0:	f04f 0009 	mov.w	r0, #9
 80119f4:	f04f 0100 	mov.w	r1, #0
 80119f8:	f001 fcaa 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 80119fc:	f04f 000a 	mov.w	r0, #10
 8011a00:	f04f 0100 	mov.w	r1, #0
 8011a04:	f001 fca4 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 8011a08:	f04f 000c 	mov.w	r0, #12
 8011a0c:	f04f 0100 	mov.w	r1, #0
 8011a10:	f001 fc9e 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 8011a14:	f04f 000d 	mov.w	r0, #13
 8011a18:	f04f 0100 	mov.w	r1, #0
 8011a1c:	f001 fc98 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 8011a20:	f04f 000f 	mov.w	r0, #15
 8011a24:	f04f 0100 	mov.w	r1, #0
 8011a28:	f001 fc92 	bl	8013350 <LCD_WriteReg>

    /* Power On sequence -----------------------------------------------------*/
    LCD_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8011a2c:	f04f 0010 	mov.w	r0, #16
 8011a30:	f04f 0100 	mov.w	r1, #0
 8011a34:	f001 fc8c 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8011a38:	f04f 0011 	mov.w	r0, #17
 8011a3c:	f04f 0100 	mov.w	r1, #0
 8011a40:	f001 fc86 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8011a44:	f04f 0012 	mov.w	r0, #18
 8011a48:	f04f 0100 	mov.w	r1, #0
 8011a4c:	f001 fc80 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 8011a50:	f04f 0013 	mov.w	r0, #19
 8011a54:	f04f 0100 	mov.w	r1, #0
 8011a58:	f001 fc7a 	bl	8013350 <LCD_WriteReg>
    _delay_(20);                 /* Dis-charge capacitor power voltage (200ms) */
 8011a5c:	f04f 0014 	mov.w	r0, #20
 8011a60:	f001 febc 	bl	80137dc <delay>
    LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8011a64:	f04f 0010 	mov.w	r0, #16
 8011a68:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8011a6c:	f001 fc70 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8011a70:	f04f 0011 	mov.w	r0, #17
 8011a74:	f240 1137 	movw	r1, #311	; 0x137
 8011a78:	f001 fc6a 	bl	8013350 <LCD_WriteReg>
    _delay_(5);                  /* Delay 50 ms */
 8011a7c:	f04f 0005 	mov.w	r0, #5
 8011a80:	f001 feac 	bl	80137dc <delay>
    LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8011a84:	f04f 0012 	mov.w	r0, #18
 8011a88:	f240 1139 	movw	r1, #313	; 0x139
 8011a8c:	f001 fc60 	bl	8013350 <LCD_WriteReg>
    _delay_(5);                  /* Delay 50 ms */
 8011a90:	f04f 0005 	mov.w	r0, #5
 8011a94:	f001 fea2 	bl	80137dc <delay>
    LCD_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8011a98:	f04f 0013 	mov.w	r0, #19
 8011a9c:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8011aa0:	f001 fc56 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8011aa4:	f04f 0029 	mov.w	r0, #41	; 0x29
 8011aa8:	f04f 0113 	mov.w	r1, #19
 8011aac:	f001 fc50 	bl	8013350 <LCD_WriteReg>
    _delay_(5);                  /* Delay 50 ms */
 8011ab0:	f04f 0005 	mov.w	r0, #5
 8011ab4:	f001 fe92 	bl	80137dc <delay>
    LCD_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 8011ab8:	f04f 0020 	mov.w	r0, #32
 8011abc:	f04f 0100 	mov.w	r1, #0
 8011ac0:	f001 fc46 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 8011ac4:	f04f 0021 	mov.w	r0, #33	; 0x21
 8011ac8:	f04f 0100 	mov.w	r1, #0
 8011acc:	f001 fc40 	bl	8013350 <LCD_WriteReg>

    /* Adjust the Gamma Curve ------------------------------------------------*/
    LCD_WriteReg(LCD_REG_48, 0x0007);
 8011ad0:	f04f 0030 	mov.w	r0, #48	; 0x30
 8011ad4:	f04f 0107 	mov.w	r1, #7
 8011ad8:	f001 fc3a 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_49, 0x0007);
 8011adc:	f04f 0031 	mov.w	r0, #49	; 0x31
 8011ae0:	f04f 0107 	mov.w	r1, #7
 8011ae4:	f001 fc34 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_50, 0x0007);
 8011ae8:	f04f 0032 	mov.w	r0, #50	; 0x32
 8011aec:	f04f 0107 	mov.w	r1, #7
 8011af0:	f001 fc2e 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_53, 0x0007);
 8011af4:	f04f 0035 	mov.w	r0, #53	; 0x35
 8011af8:	f04f 0107 	mov.w	r1, #7
 8011afc:	f001 fc28 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_54, 0x0007);
 8011b00:	f04f 0036 	mov.w	r0, #54	; 0x36
 8011b04:	f04f 0107 	mov.w	r1, #7
 8011b08:	f001 fc22 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_55, 0x0700);
 8011b0c:	f04f 0037 	mov.w	r0, #55	; 0x37
 8011b10:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8011b14:	f001 fc1c 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_56, 0x0700);
 8011b18:	f04f 0038 	mov.w	r0, #56	; 0x38
 8011b1c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8011b20:	f001 fc16 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_57, 0x0700);
 8011b24:	f04f 0039 	mov.w	r0, #57	; 0x39
 8011b28:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8011b2c:	f001 fc10 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_60, 0x0700);
 8011b30:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8011b34:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8011b38:	f001 fc0a 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_61, 0x1F00);
 8011b3c:	f04f 003d 	mov.w	r0, #61	; 0x3d
 8011b40:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8011b44:	f001 fc04 	bl	8013350 <LCD_WriteReg>
  
    /* Set GRAM area ---------------------------------------------------------*/
    LCD_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 8011b48:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011b4c:	f04f 0100 	mov.w	r1, #0
 8011b50:	f001 fbfe 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 8011b54:	f04f 0051 	mov.w	r0, #81	; 0x51
 8011b58:	f04f 01ef 	mov.w	r1, #239	; 0xef
 8011b5c:	f001 fbf8 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 8011b60:	f04f 0052 	mov.w	r0, #82	; 0x52
 8011b64:	f04f 0100 	mov.w	r1, #0
 8011b68:	f001 fbf2 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 8011b6c:	f04f 0053 	mov.w	r0, #83	; 0x53
 8011b70:	f240 113f 	movw	r1, #319	; 0x13f
 8011b74:	f001 fbec 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_96,  0x2700); /* Gate Scan Line */
 8011b78:	f04f 0060 	mov.w	r0, #96	; 0x60
 8011b7c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8011b80:	f001 fbe6 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 8011b84:	f04f 0061 	mov.w	r0, #97	; 0x61
 8011b88:	f04f 0101 	mov.w	r1, #1
 8011b8c:	f001 fbe0 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 8011b90:	f04f 006a 	mov.w	r0, #106	; 0x6a
 8011b94:	f04f 0100 	mov.w	r1, #0
 8011b98:	f001 fbda 	bl	8013350 <LCD_WriteReg>

    /* Partial Display Control -----------------------------------------------*/
    LCD_WriteReg(LCD_REG_128, 0x0000);
 8011b9c:	f04f 0080 	mov.w	r0, #128	; 0x80
 8011ba0:	f04f 0100 	mov.w	r1, #0
 8011ba4:	f001 fbd4 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_129, 0x0000);
 8011ba8:	f04f 0081 	mov.w	r0, #129	; 0x81
 8011bac:	f04f 0100 	mov.w	r1, #0
 8011bb0:	f001 fbce 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_130, 0x0000);
 8011bb4:	f04f 0082 	mov.w	r0, #130	; 0x82
 8011bb8:	f04f 0100 	mov.w	r1, #0
 8011bbc:	f001 fbc8 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_131, 0x0000);
 8011bc0:	f04f 0083 	mov.w	r0, #131	; 0x83
 8011bc4:	f04f 0100 	mov.w	r1, #0
 8011bc8:	f001 fbc2 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_132, 0x0000);
 8011bcc:	f04f 0084 	mov.w	r0, #132	; 0x84
 8011bd0:	f04f 0100 	mov.w	r1, #0
 8011bd4:	f001 fbbc 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_133, 0x0000);
 8011bd8:	f04f 0085 	mov.w	r0, #133	; 0x85
 8011bdc:	f04f 0100 	mov.w	r1, #0
 8011be0:	f001 fbb6 	bl	8013350 <LCD_WriteReg>

    /* Panel Control ---------------------------------------------------------*/
    LCD_WriteReg(LCD_REG_144, 0x0010);
 8011be4:	f04f 0090 	mov.w	r0, #144	; 0x90
 8011be8:	f04f 0110 	mov.w	r1, #16
 8011bec:	f001 fbb0 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_146, 0x0000);
 8011bf0:	f04f 0092 	mov.w	r0, #146	; 0x92
 8011bf4:	f04f 0100 	mov.w	r1, #0
 8011bf8:	f001 fbaa 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_147, 0x0003);
 8011bfc:	f04f 0093 	mov.w	r0, #147	; 0x93
 8011c00:	f04f 0103 	mov.w	r1, #3
 8011c04:	f001 fba4 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_149, 0x0110);
 8011c08:	f04f 0095 	mov.w	r0, #149	; 0x95
 8011c0c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8011c10:	f001 fb9e 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_151, 0x0000);
 8011c14:	f04f 0097 	mov.w	r0, #151	; 0x97
 8011c18:	f04f 0100 	mov.w	r1, #0
 8011c1c:	f001 fb98 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_152, 0x0000);
 8011c20:	f04f 0098 	mov.w	r0, #152	; 0x98
 8011c24:	f04f 0100 	mov.w	r1, #0
 8011c28:	f001 fb92 	bl	8013350 <LCD_WriteReg>

    /* Set GRAM write direction and BGR = 1 */
    /* I/D=01 (Horizontal : increment, Vertical : decrement) */
    /* AM=1 (address is updated in vertical writing direction) */
    LCD_WriteReg(LCD_REG_3, 0x1018);
 8011c2c:	f04f 0003 	mov.w	r0, #3
 8011c30:	f241 0118 	movw	r1, #4120	; 0x1018
 8011c34:	f001 fb8c 	bl	8013350 <LCD_WriteReg>

    LCD_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */  
 8011c38:	f04f 0007 	mov.w	r0, #7
 8011c3c:	f240 1173 	movw	r1, #371	; 0x173
 8011c40:	f001 fb86 	bl	8013350 <LCD_WriteReg>
 8011c44:	e153      	b.n	8011eee <STM324xG_LCD_Init+0x586>
  }
  else if(lcdid == 0x9325) /* Check if the LCD is ILI9325 Controller */
 8011c46:	687a      	ldr	r2, [r7, #4]
 8011c48:	f249 3325 	movw	r3, #37669	; 0x9325
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	f040 814e 	bne.w	8011eee <STM324xG_LCD_Init+0x586>
  {
    /* Start Initial Sequence ------------------------------------------------*/
    LCD_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
 8011c52:	f04f 0000 	mov.w	r0, #0
 8011c56:	f04f 0101 	mov.w	r1, #1
 8011c5a:	f001 fb79 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
 8011c5e:	f04f 0001 	mov.w	r0, #1
 8011c62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011c66:	f001 fb73 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
 8011c6a:	f04f 0002 	mov.w	r0, #2
 8011c6e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8011c72:	f001 fb6d 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
 8011c76:	f04f 0003 	mov.w	r0, #3
 8011c7a:	f241 0118 	movw	r1, #4120	; 0x1018
 8011c7e:	f001 fb67 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
 8011c82:	f04f 0004 	mov.w	r0, #4
 8011c86:	f04f 0100 	mov.w	r1, #0
 8011c8a:	f001 fb61 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
 8011c8e:	f04f 0008 	mov.w	r0, #8
 8011c92:	f240 2102 	movw	r1, #514	; 0x202
 8011c96:	f001 fb5b 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
 8011c9a:	f04f 0009 	mov.w	r0, #9
 8011c9e:	f04f 0100 	mov.w	r1, #0
 8011ca2:	f001 fb55 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 8011ca6:	f04f 000a 	mov.w	r0, #10
 8011caa:	f04f 0100 	mov.w	r1, #0
 8011cae:	f001 fb4f 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 8011cb2:	f04f 000c 	mov.w	r0, #12
 8011cb6:	f04f 0100 	mov.w	r1, #0
 8011cba:	f001 fb49 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 8011cbe:	f04f 000d 	mov.w	r0, #13
 8011cc2:	f04f 0100 	mov.w	r1, #0
 8011cc6:	f001 fb43 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 8011cca:	f04f 000f 	mov.w	r0, #15
 8011cce:	f04f 0100 	mov.w	r1, #0
 8011cd2:	f001 fb3d 	bl	8013350 <LCD_WriteReg>

    /* Power On sequence -----------------------------------------------------*/
    LCD_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8011cd6:	f04f 0010 	mov.w	r0, #16
 8011cda:	f04f 0100 	mov.w	r1, #0
 8011cde:	f001 fb37 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8011ce2:	f04f 0011 	mov.w	r0, #17
 8011ce6:	f04f 0100 	mov.w	r1, #0
 8011cea:	f001 fb31 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8011cee:	f04f 0012 	mov.w	r0, #18
 8011cf2:	f04f 0100 	mov.w	r1, #0
 8011cf6:	f001 fb2b 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 8011cfa:	f04f 0013 	mov.w	r0, #19
 8011cfe:	f04f 0100 	mov.w	r1, #0
 8011d02:	f001 fb25 	bl	8013350 <LCD_WriteReg>
    _delay_(20);                      /* Dis-charge capacitor power voltage (200ms) */
 8011d06:	f04f 0014 	mov.w	r0, #20
 8011d0a:	f001 fd67 	bl	80137dc <delay>
    LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8011d0e:	f04f 0010 	mov.w	r0, #16
 8011d12:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8011d16:	f001 fb1b 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8011d1a:	f04f 0011 	mov.w	r0, #17
 8011d1e:	f240 1137 	movw	r1, #311	; 0x137
 8011d22:	f001 fb15 	bl	8013350 <LCD_WriteReg>
    _delay_(5);                       /* Delay 50 ms */
 8011d26:	f04f 0005 	mov.w	r0, #5
 8011d2a:	f001 fd57 	bl	80137dc <delay>
    LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8011d2e:	f04f 0012 	mov.w	r0, #18
 8011d32:	f240 1139 	movw	r1, #313	; 0x139
 8011d36:	f001 fb0b 	bl	8013350 <LCD_WriteReg>
    _delay_(5);                       /* Delay 50 ms */
 8011d3a:	f04f 0005 	mov.w	r0, #5
 8011d3e:	f001 fd4d 	bl	80137dc <delay>
    LCD_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8011d42:	f04f 0013 	mov.w	r0, #19
 8011d46:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8011d4a:	f001 fb01 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8011d4e:	f04f 0029 	mov.w	r0, #41	; 0x29
 8011d52:	f04f 0113 	mov.w	r1, #19
 8011d56:	f001 fafb 	bl	8013350 <LCD_WriteReg>
    _delay_(5);                       /* Delay 50 ms */
 8011d5a:	f04f 0005 	mov.w	r0, #5
 8011d5e:	f001 fd3d 	bl	80137dc <delay>
    LCD_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 8011d62:	f04f 0020 	mov.w	r0, #32
 8011d66:	f04f 0100 	mov.w	r1, #0
 8011d6a:	f001 faf1 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 8011d6e:	f04f 0021 	mov.w	r0, #33	; 0x21
 8011d72:	f04f 0100 	mov.w	r1, #0
 8011d76:	f001 faeb 	bl	8013350 <LCD_WriteReg>

    /* Adjust the Gamma Curve (ILI9325)---------------------------------------*/
    LCD_WriteReg(LCD_REG_48, 0x0007);
 8011d7a:	f04f 0030 	mov.w	r0, #48	; 0x30
 8011d7e:	f04f 0107 	mov.w	r1, #7
 8011d82:	f001 fae5 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_49, 0x0302);
 8011d86:	f04f 0031 	mov.w	r0, #49	; 0x31
 8011d8a:	f240 3102 	movw	r1, #770	; 0x302
 8011d8e:	f001 fadf 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_50, 0x0105);
 8011d92:	f04f 0032 	mov.w	r0, #50	; 0x32
 8011d96:	f240 1105 	movw	r1, #261	; 0x105
 8011d9a:	f001 fad9 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_53, 0x0206);
 8011d9e:	f04f 0035 	mov.w	r0, #53	; 0x35
 8011da2:	f240 2106 	movw	r1, #518	; 0x206
 8011da6:	f001 fad3 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_54, 0x0808);
 8011daa:	f04f 0036 	mov.w	r0, #54	; 0x36
 8011dae:	f640 0108 	movw	r1, #2056	; 0x808
 8011db2:	f001 facd 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_55, 0x0206);
 8011db6:	f04f 0037 	mov.w	r0, #55	; 0x37
 8011dba:	f240 2106 	movw	r1, #518	; 0x206
 8011dbe:	f001 fac7 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_56, 0x0504);
 8011dc2:	f04f 0038 	mov.w	r0, #56	; 0x38
 8011dc6:	f240 5104 	movw	r1, #1284	; 0x504
 8011dca:	f001 fac1 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_57, 0x0007);
 8011dce:	f04f 0039 	mov.w	r0, #57	; 0x39
 8011dd2:	f04f 0107 	mov.w	r1, #7
 8011dd6:	f001 fabb 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_60, 0x0105);
 8011dda:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8011dde:	f240 1105 	movw	r1, #261	; 0x105
 8011de2:	f001 fab5 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_61, 0x0808);
 8011de6:	f04f 003d 	mov.w	r0, #61	; 0x3d
 8011dea:	f640 0108 	movw	r1, #2056	; 0x808
 8011dee:	f001 faaf 	bl	8013350 <LCD_WriteReg>

    /* Set GRAM area ---------------------------------------------------------*/
    LCD_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 8011df2:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011df6:	f04f 0100 	mov.w	r1, #0
 8011dfa:	f001 faa9 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 8011dfe:	f04f 0051 	mov.w	r0, #81	; 0x51
 8011e02:	f04f 01ef 	mov.w	r1, #239	; 0xef
 8011e06:	f001 faa3 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 8011e0a:	f04f 0052 	mov.w	r0, #82	; 0x52
 8011e0e:	f04f 0100 	mov.w	r1, #0
 8011e12:	f001 fa9d 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 8011e16:	f04f 0053 	mov.w	r0, #83	; 0x53
 8011e1a:	f240 113f 	movw	r1, #319	; 0x13f
 8011e1e:	f001 fa97 	bl	8013350 <LCD_WriteReg>

    LCD_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
 8011e22:	f04f 0060 	mov.w	r0, #96	; 0x60
 8011e26:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8011e2a:	f001 fa91 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 8011e2e:	f04f 0061 	mov.w	r0, #97	; 0x61
 8011e32:	f04f 0101 	mov.w	r1, #1
 8011e36:	f001 fa8b 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 8011e3a:	f04f 006a 	mov.w	r0, #106	; 0x6a
 8011e3e:	f04f 0100 	mov.w	r1, #0
 8011e42:	f001 fa85 	bl	8013350 <LCD_WriteReg>

    /* Partial Display Control -----------------------------------------------*/
    LCD_WriteReg(LCD_REG_128, 0x0000);
 8011e46:	f04f 0080 	mov.w	r0, #128	; 0x80
 8011e4a:	f04f 0100 	mov.w	r1, #0
 8011e4e:	f001 fa7f 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_129, 0x0000);
 8011e52:	f04f 0081 	mov.w	r0, #129	; 0x81
 8011e56:	f04f 0100 	mov.w	r1, #0
 8011e5a:	f001 fa79 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_130, 0x0000);
 8011e5e:	f04f 0082 	mov.w	r0, #130	; 0x82
 8011e62:	f04f 0100 	mov.w	r1, #0
 8011e66:	f001 fa73 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_131, 0x0000);
 8011e6a:	f04f 0083 	mov.w	r0, #131	; 0x83
 8011e6e:	f04f 0100 	mov.w	r1, #0
 8011e72:	f001 fa6d 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_132, 0x0000);
 8011e76:	f04f 0084 	mov.w	r0, #132	; 0x84
 8011e7a:	f04f 0100 	mov.w	r1, #0
 8011e7e:	f001 fa67 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_133, 0x0000);
 8011e82:	f04f 0085 	mov.w	r0, #133	; 0x85
 8011e86:	f04f 0100 	mov.w	r1, #0
 8011e8a:	f001 fa61 	bl	8013350 <LCD_WriteReg>

    /* Panel Control ---------------------------------------------------------*/
    LCD_WriteReg(LCD_REG_144, 0x0010);
 8011e8e:	f04f 0090 	mov.w	r0, #144	; 0x90
 8011e92:	f04f 0110 	mov.w	r1, #16
 8011e96:	f001 fa5b 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_146, 0x0000);
 8011e9a:	f04f 0092 	mov.w	r0, #146	; 0x92
 8011e9e:	f04f 0100 	mov.w	r1, #0
 8011ea2:	f001 fa55 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_147, 0x0003);
 8011ea6:	f04f 0093 	mov.w	r0, #147	; 0x93
 8011eaa:	f04f 0103 	mov.w	r1, #3
 8011eae:	f001 fa4f 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_149, 0x0110);
 8011eb2:	f04f 0095 	mov.w	r0, #149	; 0x95
 8011eb6:	f44f 7188 	mov.w	r1, #272	; 0x110
 8011eba:	f001 fa49 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_151, 0x0000);
 8011ebe:	f04f 0097 	mov.w	r0, #151	; 0x97
 8011ec2:	f04f 0100 	mov.w	r1, #0
 8011ec6:	f001 fa43 	bl	8013350 <LCD_WriteReg>
    LCD_WriteReg(LCD_REG_152, 0x0000);
 8011eca:	f04f 0098 	mov.w	r0, #152	; 0x98
 8011ece:	f04f 0100 	mov.w	r1, #0
 8011ed2:	f001 fa3d 	bl	8013350 <LCD_WriteReg>

    /* set GRAM write direction and BGR = 1 */
    /* I/D=00 (Horizontal : increment, Vertical : decrement) */
    /* AM=1 (address is updated in vertical writing direction) */
    LCD_WriteReg(LCD_REG_3, 0x1018);
 8011ed6:	f04f 0003 	mov.w	r0, #3
 8011eda:	f241 0118 	movw	r1, #4120	; 0x1018
 8011ede:	f001 fa37 	bl	8013350 <LCD_WriteReg>

    LCD_WriteReg(LCD_REG_7, 0x0133); /* 262K color and display ON */ 
 8011ee2:	f04f 0007 	mov.w	r0, #7
 8011ee6:	f240 1133 	movw	r1, #307	; 0x133
 8011eea:	f001 fa31 	bl	8013350 <LCD_WriteReg>
  }
  LCD_SetFont(&LCD_DEFAULT_FONT);
 8011eee:	f240 003c 	movw	r0, #60	; 0x3c
 8011ef2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8011ef6:	f000 f85d 	bl	8011fb4 <LCD_SetFont>
}
 8011efa:	f107 0708 	add.w	r7, r7, #8
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}
 8011f02:	bf00      	nop

08011f04 <LCD_SetColors>:
  * @param  _TextColor: specifies the Text Color.
  * @param  _BackColor: specifies the Background Color.
  * @retval None
  */
void LCD_SetColors(__IO uint16_t _TextColor, __IO uint16_t _BackColor)
{
 8011f04:	b480      	push	{r7}
 8011f06:	b083      	sub	sp, #12
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	4602      	mov	r2, r0
 8011f0c:	460b      	mov	r3, r1
 8011f0e:	80fa      	strh	r2, [r7, #6]
 8011f10:	80bb      	strh	r3, [r7, #4]
  TextColor = _TextColor; 
 8011f12:	88fb      	ldrh	r3, [r7, #6]
 8011f14:	b29a      	uxth	r2, r3
 8011f16:	f240 0388 	movw	r3, #136	; 0x88
 8011f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f1e:	801a      	strh	r2, [r3, #0]
  BackColor = _BackColor;
 8011f20:	88bb      	ldrh	r3, [r7, #4]
 8011f22:	b29a      	uxth	r2, r3
 8011f24:	f240 035c 	movw	r3, #92	; 0x5c
 8011f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f2c:	801a      	strh	r2, [r3, #0]
}
 8011f2e:	f107 070c 	add.w	r7, r7, #12
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bc80      	pop	{r7}
 8011f36:	4770      	bx	lr

08011f38 <LCD_GetColors>:
  * @param  _BackColor: pointer to the variable that will contain the Background 
            Color.
  * @retval None
  */
void LCD_GetColors(__IO uint16_t *_TextColor, __IO uint16_t *_BackColor)
{
 8011f38:	b480      	push	{r7}
 8011f3a:	b083      	sub	sp, #12
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	6039      	str	r1, [r7, #0]
  *_TextColor = TextColor; *_BackColor = BackColor;
 8011f42:	f240 0388 	movw	r3, #136	; 0x88
 8011f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f4a:	881b      	ldrh	r3, [r3, #0]
 8011f4c:	b29a      	uxth	r2, r3
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	801a      	strh	r2, [r3, #0]
 8011f52:	f240 035c 	movw	r3, #92	; 0x5c
 8011f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f5a:	881b      	ldrh	r3, [r3, #0]
 8011f5c:	b29a      	uxth	r2, r3
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	801a      	strh	r2, [r3, #0]
}
 8011f62:	f107 070c 	add.w	r7, r7, #12
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bc80      	pop	{r7}
 8011f6a:	4770      	bx	lr

08011f6c <LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: specifies the Text color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetTextColor(__IO uint16_t Color)
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b083      	sub	sp, #12
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	4603      	mov	r3, r0
 8011f74:	80fb      	strh	r3, [r7, #6]
  TextColor = Color;
 8011f76:	88fb      	ldrh	r3, [r7, #6]
 8011f78:	b29a      	uxth	r2, r3
 8011f7a:	f240 0388 	movw	r3, #136	; 0x88
 8011f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f82:	801a      	strh	r2, [r3, #0]
}
 8011f84:	f107 070c 	add.w	r7, r7, #12
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bc80      	pop	{r7}
 8011f8c:	4770      	bx	lr
 8011f8e:	bf00      	nop

08011f90 <LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: specifies the Background color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetBackColor(__IO uint16_t Color)
{
 8011f90:	b480      	push	{r7}
 8011f92:	b083      	sub	sp, #12
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	4603      	mov	r3, r0
 8011f98:	80fb      	strh	r3, [r7, #6]
  BackColor = Color;
 8011f9a:	88fb      	ldrh	r3, [r7, #6]
 8011f9c:	b29a      	uxth	r2, r3
 8011f9e:	f240 035c 	movw	r3, #92	; 0x5c
 8011fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011fa6:	801a      	strh	r2, [r3, #0]
}
 8011fa8:	f107 070c 	add.w	r7, r7, #12
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bc80      	pop	{r7}
 8011fb0:	4770      	bx	lr
 8011fb2:	bf00      	nop

08011fb4 <LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
 8011fb4:	b480      	push	{r7}
 8011fb6:	b083      	sub	sp, #12
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8011fbc:	f240 0384 	movw	r3, #132	; 0x84
 8011fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011fc4:	687a      	ldr	r2, [r7, #4]
 8011fc6:	601a      	str	r2, [r3, #0]
}
 8011fc8:	f107 070c 	add.w	r7, r7, #12
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bc80      	pop	{r7}
 8011fd0:	4770      	bx	lr
 8011fd2:	bf00      	nop

08011fd4 <LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None.
  * @retval the used font.
  */
sFONT *LCD_GetFont(void)
{
 8011fd4:	b480      	push	{r7}
 8011fd6:	af00      	add	r7, sp, #0
  return LCD_Currentfonts;
 8011fd8:	f240 0384 	movw	r3, #132	; 0x84
 8011fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011fe0:	681b      	ldr	r3, [r3, #0]
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bc80      	pop	{r7}
 8011fe8:	4770      	bx	lr
 8011fea:	bf00      	nop

08011fec <LCD_ClearLine>:
  *   This parameter can be one of the following values:
  *     @arg Linex: where x can be 0..n
  * @retval None
  */
void LCD_ClearLine(uint16_t Line)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b084      	sub	sp, #16
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = LCD_PIXEL_WIDTH - 1;
 8011ff6:	f240 133f 	movw	r3, #319	; 0x13f
 8011ffa:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while (((refcolumn + 1)& 0xFFFF) >= LCD_Currentfonts->Width)
 8011ffc:	e010      	b.n	8012020 <LCD_ClearLine+0x34>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
 8011ffe:	88fa      	ldrh	r2, [r7, #6]
 8012000:	89fb      	ldrh	r3, [r7, #14]
 8012002:	4610      	mov	r0, r2
 8012004:	4619      	mov	r1, r3
 8012006:	f04f 0220 	mov.w	r2, #32
 801200a:	f000 f8fd 	bl	8012208 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn -= LCD_Currentfonts->Width;
 801200e:	f240 0384 	movw	r3, #132	; 0x84
 8012012:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	889b      	ldrh	r3, [r3, #4]
 801201a:	89fa      	ldrh	r2, [r7, #14]
 801201c:	1ad3      	subs	r3, r2, r3
 801201e:	81fb      	strh	r3, [r7, #14]
  */
void LCD_ClearLine(uint16_t Line)
{
  uint16_t refcolumn = LCD_PIXEL_WIDTH - 1;
  /* Send the string character by character on lCD */
  while (((refcolumn + 1)& 0xFFFF) >= LCD_Currentfonts->Width)
 8012020:	89fb      	ldrh	r3, [r7, #14]
 8012022:	f103 0301 	add.w	r3, r3, #1
 8012026:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801202a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801202e:	f240 0284 	movw	r2, #132	; 0x84
 8012032:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8012036:	6812      	ldr	r2, [r2, #0]
 8012038:	8892      	ldrh	r2, [r2, #4]
 801203a:	4293      	cmp	r3, r2
 801203c:	dadf      	bge.n	8011ffe <LCD_ClearLine+0x12>
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
    /* Decrement the column position by 16 */
    refcolumn -= LCD_Currentfonts->Width;
  }
}
 801203e:	f107 0710 	add.w	r7, r7, #16
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}
 8012046:	bf00      	nop

08012048 <LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b084      	sub	sp, #16
 801204c:	af00      	add	r7, sp, #0
 801204e:	4603      	mov	r3, r0
 8012050:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 8012052:	f04f 0300 	mov.w	r3, #0
 8012056:	60fb      	str	r3, [r7, #12]
  
  LCD_SetCursor(0x00, 0x013F); 
 8012058:	f04f 0000 	mov.w	r0, #0
 801205c:	f240 113f 	movw	r1, #319	; 0x13f
 8012060:	f000 f81a 	bl	8012098 <LCD_SetCursor>
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8012064:	f001 f99e 	bl	80133a4 <LCD_WriteRAM_Prepare>
  for(index = 0; index < 76800; index++)
 8012068:	f04f 0300 	mov.w	r3, #0
 801206c:	60fb      	str	r3, [r7, #12]
 801206e:	e007      	b.n	8012080 <LCD_Clear+0x38>
  {
    LCD->LCD_RAM = Color;
 8012070:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8012074:	88fa      	ldrh	r2, [r7, #6]
 8012076:	805a      	strh	r2, [r3, #2]
{
  uint32_t index = 0;
  
  LCD_SetCursor(0x00, 0x013F); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < 76800; index++)
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	f103 0301 	add.w	r3, r3, #1
 801207e:	60fb      	str	r3, [r7, #12]
 8012080:	68fa      	ldr	r2, [r7, #12]
 8012082:	f642 33ff 	movw	r3, #11263	; 0x2bff
 8012086:	f2c0 0301 	movt	r3, #1
 801208a:	429a      	cmp	r2, r3
 801208c:	d9f0      	bls.n	8012070 <LCD_Clear+0x28>
  {
    LCD->LCD_RAM = Color;
  }  
}
 801208e:	f107 0710 	add.w	r7, r7, #16
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}
 8012096:	bf00      	nop

08012098 <LCD_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position. 
  * @retval None
  */
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b082      	sub	sp, #8
 801209c:	af00      	add	r7, sp, #0
 801209e:	4602      	mov	r2, r0
 80120a0:	460b      	mov	r3, r1
 80120a2:	80fa      	strh	r2, [r7, #6]
 80120a4:	80bb      	strh	r3, [r7, #4]
  LCD_WriteReg(LCD_REG_32, Xpos);
 80120a6:	88fb      	ldrh	r3, [r7, #6]
 80120a8:	f04f 0020 	mov.w	r0, #32
 80120ac:	4619      	mov	r1, r3
 80120ae:	f001 f94f 	bl	8013350 <LCD_WriteReg>
  LCD_WriteReg(LCD_REG_33, Ypos);
 80120b2:	88bb      	ldrh	r3, [r7, #4]
 80120b4:	f04f 0021 	mov.w	r0, #33	; 0x21
 80120b8:	4619      	mov	r1, r3
 80120ba:	f001 f949 	bl	8013350 <LCD_WriteReg>
}
 80120be:	f107 0708 	add.w	r7, r7, #8
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}
 80120c6:	bf00      	nop

080120c8 <LCD_DrawChar>:
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b086      	sub	sp, #24
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	460b      	mov	r3, r1
 80120d0:	603a      	str	r2, [r7, #0]
 80120d2:	4602      	mov	r2, r0
 80120d4:	80fa      	strh	r2, [r7, #6]
 80120d6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, i = 0;
 80120d8:	f04f 0300 	mov.w	r3, #0
 80120dc:	617b      	str	r3, [r7, #20]
 80120de:	f04f 0300 	mov.w	r3, #0
 80120e2:	613b      	str	r3, [r7, #16]
  uint16_t  Xaddress = 0;
 80120e4:	f04f 0300 	mov.w	r3, #0
 80120e8:	81fb      	strh	r3, [r7, #14]
  Xaddress = Xpos;
 80120ea:	88fb      	ldrh	r3, [r7, #6]
 80120ec:	81fb      	strh	r3, [r7, #14]
  
  LCD_SetCursor(Xaddress, Ypos);
 80120ee:	89fa      	ldrh	r2, [r7, #14]
 80120f0:	88bb      	ldrh	r3, [r7, #4]
 80120f2:	4610      	mov	r0, r2
 80120f4:	4619      	mov	r1, r3
 80120f6:	f7ff ffcf 	bl	8012098 <LCD_SetCursor>
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80120fa:	f04f 0300 	mov.w	r3, #0
 80120fe:	617b      	str	r3, [r7, #20]
 8012100:	e074      	b.n	80121ec <LCD_DrawChar+0x124>
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8012102:	f001 f94f 	bl	80133a4 <LCD_WriteRAM_Prepare>
    for(i = 0; i < LCD_Currentfonts->Width; i++)
 8012106:	f04f 0300 	mov.w	r3, #0
 801210a:	613b      	str	r3, [r7, #16]
 801210c:	e056      	b.n	80121bc <LCD_DrawChar+0xf4>
    {
  
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> i)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 801210e:	697b      	ldr	r3, [r7, #20]
 8012110:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012114:	683a      	ldr	r2, [r7, #0]
 8012116:	18d3      	adds	r3, r2, r3
 8012118:	881b      	ldrh	r3, [r3, #0]
 801211a:	461a      	mov	r2, r3
 801211c:	f240 0384 	movw	r3, #132	; 0x84
 8012120:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	8899      	ldrh	r1, [r3, #4]
 8012128:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 801212c:	f6ca 23aa 	movt	r3, #43690	; 0xaaaa
 8012130:	fba3 0301 	umull	r0, r3, r3, r1
 8012134:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8012138:	b29b      	uxth	r3, r3
 801213a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801213e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8012142:	fa01 f103 	lsl.w	r1, r1, r3
 8012146:	693b      	ldr	r3, [r7, #16]
 8012148:	fa41 f303 	asr.w	r3, r1, r3
 801214c:	4013      	ands	r3, r2
 801214e:	2b00      	cmp	r3, #0
 8012150:	d107      	bne.n	8012162 <LCD_DrawChar+0x9a>
 8012152:	f240 0384 	movw	r3, #132	; 0x84
 8012156:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	889b      	ldrh	r3, [r3, #4]
 801215e:	2b0c      	cmp	r3, #12
 8012160:	d915      	bls.n	801218e <LCD_DrawChar+0xc6>
        (((c[index] & (0x1 << i)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012168:	683a      	ldr	r2, [r7, #0]
 801216a:	18d3      	adds	r3, r2, r3
 801216c:	881b      	ldrh	r3, [r3, #0]
 801216e:	461a      	mov	r2, r3
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	fa42 f303 	asr.w	r3, r2, r3
 8012176:	f003 0301 	and.w	r3, r3, #1
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < LCD_Currentfonts->Width; i++)
    {
  
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> i)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 801217a:	2b00      	cmp	r3, #0
 801217c:	d111      	bne.n	80121a2 <LCD_DrawChar+0xda>
        (((c[index] & (0x1 << i)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 801217e:	f240 0384 	movw	r3, #132	; 0x84
 8012182:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	889b      	ldrh	r3, [r3, #4]
 801218a:	2b0c      	cmp	r3, #12
 801218c:	d909      	bls.n	80121a2 <LCD_DrawChar+0xda>

      {
        LCD_WriteRAM(BackColor);
 801218e:	f240 035c 	movw	r3, #92	; 0x5c
 8012192:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012196:	881b      	ldrh	r3, [r3, #0]
 8012198:	b29b      	uxth	r3, r3
 801219a:	4618      	mov	r0, r3
 801219c:	f001 f90c 	bl	80133b8 <LCD_WriteRAM>
 80121a0:	e008      	b.n	80121b4 <LCD_DrawChar+0xec>
      }
      else
      {
        LCD_WriteRAM(TextColor);
 80121a2:	f240 0388 	movw	r3, #136	; 0x88
 80121a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80121aa:	881b      	ldrh	r3, [r3, #0]
 80121ac:	b29b      	uxth	r3, r3
 80121ae:	4618      	mov	r0, r3
 80121b0:	f001 f902 	bl	80133b8 <LCD_WriteRAM>
  LCD_SetCursor(Xaddress, Ypos);
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < LCD_Currentfonts->Width; i++)
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	f103 0301 	add.w	r3, r3, #1
 80121ba:	613b      	str	r3, [r7, #16]
 80121bc:	f240 0384 	movw	r3, #132	; 0x84
 80121c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	889b      	ldrh	r3, [r3, #4]
 80121c8:	461a      	mov	r2, r3
 80121ca:	693b      	ldr	r3, [r7, #16]
 80121cc:	429a      	cmp	r2, r3
 80121ce:	d89e      	bhi.n	801210e <LCD_DrawChar+0x46>
      else
      {
        LCD_WriteRAM(TextColor);
      } 
    }
    Xaddress++;
 80121d0:	89fb      	ldrh	r3, [r7, #14]
 80121d2:	f103 0301 	add.w	r3, r3, #1
 80121d6:	81fb      	strh	r3, [r7, #14]
    LCD_SetCursor(Xaddress, Ypos);
 80121d8:	89fa      	ldrh	r2, [r7, #14]
 80121da:	88bb      	ldrh	r3, [r7, #4]
 80121dc:	4610      	mov	r0, r2
 80121de:	4619      	mov	r1, r3
 80121e0:	f7ff ff5a 	bl	8012098 <LCD_SetCursor>
  uint16_t  Xaddress = 0;
  Xaddress = Xpos;
  
  LCD_SetCursor(Xaddress, Ypos);
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80121e4:	697b      	ldr	r3, [r7, #20]
 80121e6:	f103 0301 	add.w	r3, r3, #1
 80121ea:	617b      	str	r3, [r7, #20]
 80121ec:	f240 0384 	movw	r3, #132	; 0x84
 80121f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	88db      	ldrh	r3, [r3, #6]
 80121f8:	461a      	mov	r2, r3
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	429a      	cmp	r2, r3
 80121fe:	d880      	bhi.n	8012102 <LCD_DrawChar+0x3a>
      } 
    }
    Xaddress++;
    LCD_SetCursor(Xaddress, Ypos);
  }
}
 8012200:	f107 0718 	add.w	r7, r7, #24
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}

08012208 <LCD_DisplayChar>:
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b082      	sub	sp, #8
 801220c:	af00      	add	r7, sp, #0
 801220e:	4613      	mov	r3, r2
 8012210:	4602      	mov	r2, r0
 8012212:	80fa      	strh	r2, [r7, #6]
 8012214:	460a      	mov	r2, r1
 8012216:	80ba      	strh	r2, [r7, #4]
 8012218:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 801221a:	78fb      	ldrb	r3, [r7, #3]
 801221c:	f1a3 0320 	sub.w	r3, r3, #32
 8012220:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8012222:	f240 0384 	movw	r3, #132	; 0x84
 8012226:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	681a      	ldr	r2, [r3, #0]
 801222e:	78f9      	ldrb	r1, [r7, #3]
 8012230:	f240 0384 	movw	r3, #132	; 0x84
 8012234:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	88db      	ldrh	r3, [r3, #6]
 801223c:	fb03 f301 	mul.w	r3, r3, r1
 8012240:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012244:	18d3      	adds	r3, r2, r3
 8012246:	88f9      	ldrh	r1, [r7, #6]
 8012248:	88ba      	ldrh	r2, [r7, #4]
 801224a:	4608      	mov	r0, r1
 801224c:	4611      	mov	r1, r2
 801224e:	461a      	mov	r2, r3
 8012250:	f7ff ff3a 	bl	80120c8 <LCD_DrawChar>
}
 8012254:	f107 0708 	add.w	r7, r7, #8
 8012258:	46bd      	mov	sp, r7
 801225a:	bd80      	pop	{r7, pc}

0801225c <LCD_DisplayStringLine>:
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b084      	sub	sp, #16
 8012260:	af00      	add	r7, sp, #0
 8012262:	4603      	mov	r3, r0
 8012264:	6039      	str	r1, [r7, #0]
 8012266:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = LCD_PIXEL_WIDTH - 1;
 8012268:	f240 133f 	movw	r3, #319	; 0x13f
 801226c:	81fb      	strh	r3, [r7, #14]

  /* Send the string character by character on lCD */
  while ((*ptr != 0) & (((refcolumn + 1) & 0xFFFF) >= LCD_Currentfonts->Width))
 801226e:	e015      	b.n	801229c <LCD_DisplayStringLine+0x40>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	88f9      	ldrh	r1, [r7, #6]
 8012276:	89fa      	ldrh	r2, [r7, #14]
 8012278:	4608      	mov	r0, r1
 801227a:	4611      	mov	r1, r2
 801227c:	461a      	mov	r2, r3
 801227e:	f7ff ffc3 	bl	8012208 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn -= LCD_Currentfonts->Width;
 8012282:	f240 0384 	movw	r3, #132	; 0x84
 8012286:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	889b      	ldrh	r3, [r3, #4]
 801228e:	89fa      	ldrh	r2, [r7, #14]
 8012290:	1ad3      	subs	r3, r2, r3
 8012292:	81fb      	strh	r3, [r7, #14]
    /* Point on the next character */
    ptr++;
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	f103 0301 	add.w	r3, r3, #1
 801229a:	603b      	str	r3, [r7, #0]
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{
  uint16_t refcolumn = LCD_PIXEL_WIDTH - 1;

  /* Send the string character by character on lCD */
  while ((*ptr != 0) & (((refcolumn + 1) & 0xFFFF) >= LCD_Currentfonts->Width))
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	bf0c      	ite	eq
 80122a4:	2300      	moveq	r3, #0
 80122a6:	2301      	movne	r3, #1
 80122a8:	b2d9      	uxtb	r1, r3
 80122aa:	89fb      	ldrh	r3, [r7, #14]
 80122ac:	f103 0301 	add.w	r3, r3, #1
 80122b0:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80122b4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80122b8:	f240 0284 	movw	r2, #132	; 0x84
 80122bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80122c0:	6812      	ldr	r2, [r2, #0]
 80122c2:	8892      	ldrh	r2, [r2, #4]
 80122c4:	4293      	cmp	r3, r2
 80122c6:	bfb4      	ite	lt
 80122c8:	2300      	movlt	r3, #0
 80122ca:	2301      	movge	r3, #1
 80122cc:	b2db      	uxtb	r3, r3
 80122ce:	400b      	ands	r3, r1
 80122d0:	b2db      	uxtb	r3, r3
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d1cc      	bne.n	8012270 <LCD_DisplayStringLine+0x14>
    /* Decrement the column position by 16 */
    refcolumn -= LCD_Currentfonts->Width;
    /* Point on the next character */
    ptr++;
  }
}
 80122d6:	f107 0710 	add.w	r7, r7, #16
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}
 80122de:	bf00      	nop

080122e0 <LCD_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width: display window width.
  * @retval None
  */
void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint8_t Height, uint16_t Width)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b082      	sub	sp, #8
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	80f8      	strh	r0, [r7, #6]
 80122e8:	80b9      	strh	r1, [r7, #4]
 80122ea:	70fa      	strb	r2, [r7, #3]
 80122ec:	803b      	strh	r3, [r7, #0]
  /* Horizontal GRAM Start Address */
  if(Xpos >= Height)
 80122ee:	78fb      	ldrb	r3, [r7, #3]
 80122f0:	b29b      	uxth	r3, r3
 80122f2:	88fa      	ldrh	r2, [r7, #6]
 80122f4:	429a      	cmp	r2, r3
 80122f6:	d30d      	bcc.n	8012314 <LCD_SetDisplayWindow+0x34>
  {
    LCD_WriteReg(LCD_REG_80, (Xpos - Height + 1));
 80122f8:	78fb      	ldrb	r3, [r7, #3]
 80122fa:	b29b      	uxth	r3, r3
 80122fc:	88fa      	ldrh	r2, [r7, #6]
 80122fe:	1ad3      	subs	r3, r2, r3
 8012300:	b29b      	uxth	r3, r3
 8012302:	f103 0301 	add.w	r3, r3, #1
 8012306:	b29b      	uxth	r3, r3
 8012308:	f04f 0050 	mov.w	r0, #80	; 0x50
 801230c:	4619      	mov	r1, r3
 801230e:	f001 f81f 	bl	8013350 <LCD_WriteReg>
 8012312:	e005      	b.n	8012320 <LCD_SetDisplayWindow+0x40>
  }
  else
  {
    LCD_WriteReg(LCD_REG_80, 0);
 8012314:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012318:	f04f 0100 	mov.w	r1, #0
 801231c:	f001 f818 	bl	8013350 <LCD_WriteReg>
  }
  /* Horizontal GRAM End Address */
  LCD_WriteReg(LCD_REG_81, Xpos);
 8012320:	88fb      	ldrh	r3, [r7, #6]
 8012322:	f04f 0051 	mov.w	r0, #81	; 0x51
 8012326:	4619      	mov	r1, r3
 8012328:	f001 f812 	bl	8013350 <LCD_WriteReg>
  /* Vertical GRAM Start Address */
  if(Ypos >= Width)
 801232c:	88ba      	ldrh	r2, [r7, #4]
 801232e:	883b      	ldrh	r3, [r7, #0]
 8012330:	429a      	cmp	r2, r3
 8012332:	d30c      	bcc.n	801234e <LCD_SetDisplayWindow+0x6e>
  {
    LCD_WriteReg(LCD_REG_82, (Ypos - Width + 1));
 8012334:	88ba      	ldrh	r2, [r7, #4]
 8012336:	883b      	ldrh	r3, [r7, #0]
 8012338:	1ad3      	subs	r3, r2, r3
 801233a:	b29b      	uxth	r3, r3
 801233c:	f103 0301 	add.w	r3, r3, #1
 8012340:	b29b      	uxth	r3, r3
 8012342:	f04f 0052 	mov.w	r0, #82	; 0x52
 8012346:	4619      	mov	r1, r3
 8012348:	f001 f802 	bl	8013350 <LCD_WriteReg>
 801234c:	e005      	b.n	801235a <LCD_SetDisplayWindow+0x7a>
  }  
  else
  {
    LCD_WriteReg(LCD_REG_82, 0);
 801234e:	f04f 0052 	mov.w	r0, #82	; 0x52
 8012352:	f04f 0100 	mov.w	r1, #0
 8012356:	f000 fffb 	bl	8013350 <LCD_WriteReg>
  }
  /* Vertical GRAM End Address */
  LCD_WriteReg(LCD_REG_83, Ypos);
 801235a:	88bb      	ldrh	r3, [r7, #4]
 801235c:	f04f 0053 	mov.w	r0, #83	; 0x53
 8012360:	4619      	mov	r1, r3
 8012362:	f000 fff5 	bl	8013350 <LCD_WriteReg>
  LCD_SetCursor(Xpos, Ypos);
 8012366:	88fa      	ldrh	r2, [r7, #6]
 8012368:	88bb      	ldrh	r3, [r7, #4]
 801236a:	4610      	mov	r0, r2
 801236c:	4619      	mov	r1, r3
 801236e:	f7ff fe93 	bl	8012098 <LCD_SetCursor>
}
 8012372:	f107 0708 	add.w	r7, r7, #8
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}
 801237a:	bf00      	nop

0801237c <LCD_WindowModeDisable>:
  * @brief  Disables LCD Window mode.
  * @param  None
  * @retval None
  */
void LCD_WindowModeDisable(void)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	af00      	add	r7, sp, #0
  LCD_SetDisplayWindow(239, 0x13F, 240, 320);
 8012380:	f04f 00ef 	mov.w	r0, #239	; 0xef
 8012384:	f240 113f 	movw	r1, #319	; 0x13f
 8012388:	f04f 02f0 	mov.w	r2, #240	; 0xf0
 801238c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8012390:	f7ff ffa6 	bl	80122e0 <LCD_SetDisplayWindow>
  LCD_WriteReg(LCD_REG_3, 0x1018);    
 8012394:	f04f 0003 	mov.w	r0, #3
 8012398:	f241 0118 	movw	r1, #4120	; 0x1018
 801239c:	f000 ffd8 	bl	8013350 <LCD_WriteReg>
}
 80123a0:	bd80      	pop	{r7, pc}
 80123a2:	bf00      	nop

080123a4 <LCD_DrawLine>:
  * @param Direction: line direction.
  *   This parameter can be one of the following values: Vertical or Horizontal.
  * @retval None
  */
void LCD_DrawLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint8_t Direction)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b084      	sub	sp, #16
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	80f8      	strh	r0, [r7, #6]
 80123ac:	80b9      	strh	r1, [r7, #4]
 80123ae:	807a      	strh	r2, [r7, #2]
 80123b0:	707b      	strb	r3, [r7, #1]
  uint32_t i = 0;
 80123b2:	f04f 0300 	mov.w	r3, #0
 80123b6:	60fb      	str	r3, [r7, #12]
  
  LCD_SetCursor(Xpos, Ypos);
 80123b8:	88fa      	ldrh	r2, [r7, #6]
 80123ba:	88bb      	ldrh	r3, [r7, #4]
 80123bc:	4610      	mov	r0, r2
 80123be:	4619      	mov	r1, r3
 80123c0:	f7ff fe6a 	bl	8012098 <LCD_SetCursor>
  if(Direction == LCD_DIR_HORIZONTAL)
 80123c4:	787b      	ldrb	r3, [r7, #1]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d117      	bne.n	80123fa <LCD_DrawLine+0x56>
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 80123ca:	f000 ffeb 	bl	80133a4 <LCD_WriteRAM_Prepare>
    for(i = 0; i < Length; i++)
 80123ce:	f04f 0300 	mov.w	r3, #0
 80123d2:	60fb      	str	r3, [r7, #12]
 80123d4:	e00c      	b.n	80123f0 <LCD_DrawLine+0x4c>
    {
      LCD_WriteRAM(TextColor);
 80123d6:	f240 0388 	movw	r3, #136	; 0x88
 80123da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80123de:	881b      	ldrh	r3, [r3, #0]
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	4618      	mov	r0, r3
 80123e4:	f000 ffe8 	bl	80133b8 <LCD_WriteRAM>
  
  LCD_SetCursor(Xpos, Ypos);
  if(Direction == LCD_DIR_HORIZONTAL)
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < Length; i++)
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	f103 0301 	add.w	r3, r3, #1
 80123ee:	60fb      	str	r3, [r7, #12]
 80123f0:	887a      	ldrh	r2, [r7, #2]
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d8ee      	bhi.n	80123d6 <LCD_DrawLine+0x32>
 80123f8:	e020      	b.n	801243c <LCD_DrawLine+0x98>
      LCD_WriteRAM(TextColor);
    }
  }
  else
  {
    for(i = 0; i < Length; i++)
 80123fa:	f04f 0300 	mov.w	r3, #0
 80123fe:	60fb      	str	r3, [r7, #12]
 8012400:	e018      	b.n	8012434 <LCD_DrawLine+0x90>
    {
      LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8012402:	f000 ffcf 	bl	80133a4 <LCD_WriteRAM_Prepare>
      LCD_WriteRAM(TextColor);
 8012406:	f240 0388 	movw	r3, #136	; 0x88
 801240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801240e:	881b      	ldrh	r3, [r3, #0]
 8012410:	b29b      	uxth	r3, r3
 8012412:	4618      	mov	r0, r3
 8012414:	f000 ffd0 	bl	80133b8 <LCD_WriteRAM>
      Xpos++;
 8012418:	88fb      	ldrh	r3, [r7, #6]
 801241a:	f103 0301 	add.w	r3, r3, #1
 801241e:	80fb      	strh	r3, [r7, #6]
      LCD_SetCursor(Xpos, Ypos);
 8012420:	88fa      	ldrh	r2, [r7, #6]
 8012422:	88bb      	ldrh	r3, [r7, #4]
 8012424:	4610      	mov	r0, r2
 8012426:	4619      	mov	r1, r3
 8012428:	f7ff fe36 	bl	8012098 <LCD_SetCursor>
      LCD_WriteRAM(TextColor);
    }
  }
  else
  {
    for(i = 0; i < Length; i++)
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	f103 0301 	add.w	r3, r3, #1
 8012432:	60fb      	str	r3, [r7, #12]
 8012434:	887a      	ldrh	r2, [r7, #2]
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	429a      	cmp	r2, r3
 801243a:	d8e2      	bhi.n	8012402 <LCD_DrawLine+0x5e>
      LCD_WriteRAM(TextColor);
      Xpos++;
      LCD_SetCursor(Xpos, Ypos);
    }
  }
}
 801243c:	f107 0710 	add.w	r7, r7, #16
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}

08012444 <LCD_DrawRect>:
  * @param  Height: display rectangle height.
  * @param  Width: display rectangle width.
  * @retval None
  */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint8_t Height, uint16_t Width)
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b082      	sub	sp, #8
 8012448:	af00      	add	r7, sp, #0
 801244a:	80f8      	strh	r0, [r7, #6]
 801244c:	80b9      	strh	r1, [r7, #4]
 801244e:	70fa      	strb	r2, [r7, #3]
 8012450:	803b      	strh	r3, [r7, #0]
  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
 8012452:	88f9      	ldrh	r1, [r7, #6]
 8012454:	88ba      	ldrh	r2, [r7, #4]
 8012456:	883b      	ldrh	r3, [r7, #0]
 8012458:	4608      	mov	r0, r1
 801245a:	4611      	mov	r1, r2
 801245c:	461a      	mov	r2, r3
 801245e:	f04f 0300 	mov.w	r3, #0
 8012462:	f7ff ff9f 	bl	80123a4 <LCD_DrawLine>
  LCD_DrawLine((Xpos + Height), Ypos, Width, LCD_DIR_HORIZONTAL);
 8012466:	78fb      	ldrb	r3, [r7, #3]
 8012468:	b29a      	uxth	r2, r3
 801246a:	88fb      	ldrh	r3, [r7, #6]
 801246c:	18d3      	adds	r3, r2, r3
 801246e:	b299      	uxth	r1, r3
 8012470:	88ba      	ldrh	r2, [r7, #4]
 8012472:	883b      	ldrh	r3, [r7, #0]
 8012474:	4608      	mov	r0, r1
 8012476:	4611      	mov	r1, r2
 8012478:	461a      	mov	r2, r3
 801247a:	f04f 0300 	mov.w	r3, #0
 801247e:	f7ff ff91 	bl	80123a4 <LCD_DrawLine>
  
  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
 8012482:	78fb      	ldrb	r3, [r7, #3]
 8012484:	b29b      	uxth	r3, r3
 8012486:	88f9      	ldrh	r1, [r7, #6]
 8012488:	88ba      	ldrh	r2, [r7, #4]
 801248a:	4608      	mov	r0, r1
 801248c:	4611      	mov	r1, r2
 801248e:	461a      	mov	r2, r3
 8012490:	f04f 0301 	mov.w	r3, #1
 8012494:	f7ff ff86 	bl	80123a4 <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos - Width + 1), Height, LCD_DIR_VERTICAL);
 8012498:	88ba      	ldrh	r2, [r7, #4]
 801249a:	883b      	ldrh	r3, [r7, #0]
 801249c:	1ad3      	subs	r3, r2, r3
 801249e:	b29b      	uxth	r3, r3
 80124a0:	f103 0301 	add.w	r3, r3, #1
 80124a4:	b29a      	uxth	r2, r3
 80124a6:	78fb      	ldrb	r3, [r7, #3]
 80124a8:	b29b      	uxth	r3, r3
 80124aa:	88f9      	ldrh	r1, [r7, #6]
 80124ac:	4608      	mov	r0, r1
 80124ae:	4611      	mov	r1, r2
 80124b0:	461a      	mov	r2, r3
 80124b2:	f04f 0301 	mov.w	r3, #1
 80124b6:	f7ff ff75 	bl	80123a4 <LCD_DrawLine>
}
 80124ba:	f107 0708 	add.w	r7, r7, #8
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}
 80124c2:	bf00      	nop

080124c4 <LCD_DrawCircle>:
  * @param  Ypos: specifies the Y position.
  * @param  Radius
  * @retval None
  */
void LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b086      	sub	sp, #24
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	4613      	mov	r3, r2
 80124cc:	4602      	mov	r2, r0
 80124ce:	80fa      	strh	r2, [r7, #6]
 80124d0:	460a      	mov	r2, r1
 80124d2:	80ba      	strh	r2, [r7, #4]
 80124d4:	807b      	strh	r3, [r7, #2]
  int32_t  D;/* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 80124d6:	887b      	ldrh	r3, [r7, #2]
 80124d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80124dc:	f1c3 0303 	rsb	r3, r3, #3
 80124e0:	617b      	str	r3, [r7, #20]
  CurX = 0;
 80124e2:	f04f 0300 	mov.w	r3, #0
 80124e6:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 80124e8:	887b      	ldrh	r3, [r7, #2]
 80124ea:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 80124ec:	e0e5      	b.n	80126ba <LCD_DrawCircle+0x1f6>
  {
    LCD_SetCursor(Xpos + CurX, Ypos + CurY);
 80124ee:	693b      	ldr	r3, [r7, #16]
 80124f0:	b29a      	uxth	r2, r3
 80124f2:	88fb      	ldrh	r3, [r7, #6]
 80124f4:	18d3      	adds	r3, r2, r3
 80124f6:	b29a      	uxth	r2, r3
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	b299      	uxth	r1, r3
 80124fc:	88bb      	ldrh	r3, [r7, #4]
 80124fe:	18cb      	adds	r3, r1, r3
 8012500:	b29b      	uxth	r3, r3
 8012502:	4610      	mov	r0, r2
 8012504:	4619      	mov	r1, r3
 8012506:	f7ff fdc7 	bl	8012098 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 801250a:	f000 ff4b 	bl	80133a4 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 801250e:	f240 0388 	movw	r3, #136	; 0x88
 8012512:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012516:	881b      	ldrh	r3, [r3, #0]
 8012518:	b29b      	uxth	r3, r3
 801251a:	4618      	mov	r0, r3
 801251c:	f000 ff4c 	bl	80133b8 <LCD_WriteRAM>
    LCD_SetCursor(Xpos + CurX, Ypos - CurY);
 8012520:	693b      	ldr	r3, [r7, #16]
 8012522:	b29a      	uxth	r2, r3
 8012524:	88fb      	ldrh	r3, [r7, #6]
 8012526:	18d3      	adds	r3, r2, r3
 8012528:	b29a      	uxth	r2, r3
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	b29b      	uxth	r3, r3
 801252e:	88b9      	ldrh	r1, [r7, #4]
 8012530:	1acb      	subs	r3, r1, r3
 8012532:	b29b      	uxth	r3, r3
 8012534:	4610      	mov	r0, r2
 8012536:	4619      	mov	r1, r3
 8012538:	f7ff fdae 	bl	8012098 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 801253c:	f000 ff32 	bl	80133a4 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8012540:	f240 0388 	movw	r3, #136	; 0x88
 8012544:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012548:	881b      	ldrh	r3, [r3, #0]
 801254a:	b29b      	uxth	r3, r3
 801254c:	4618      	mov	r0, r3
 801254e:	f000 ff33 	bl	80133b8 <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurX, Ypos + CurY);
 8012552:	693b      	ldr	r3, [r7, #16]
 8012554:	b29b      	uxth	r3, r3
 8012556:	88fa      	ldrh	r2, [r7, #6]
 8012558:	1ad3      	subs	r3, r2, r3
 801255a:	b29a      	uxth	r2, r3
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	b299      	uxth	r1, r3
 8012560:	88bb      	ldrh	r3, [r7, #4]
 8012562:	18cb      	adds	r3, r1, r3
 8012564:	b29b      	uxth	r3, r3
 8012566:	4610      	mov	r0, r2
 8012568:	4619      	mov	r1, r3
 801256a:	f7ff fd95 	bl	8012098 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 801256e:	f000 ff19 	bl	80133a4 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8012572:	f240 0388 	movw	r3, #136	; 0x88
 8012576:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801257a:	881b      	ldrh	r3, [r3, #0]
 801257c:	b29b      	uxth	r3, r3
 801257e:	4618      	mov	r0, r3
 8012580:	f000 ff1a 	bl	80133b8 <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurX, Ypos - CurY);
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	b29b      	uxth	r3, r3
 8012588:	88fa      	ldrh	r2, [r7, #6]
 801258a:	1ad3      	subs	r3, r2, r3
 801258c:	b29a      	uxth	r2, r3
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	b29b      	uxth	r3, r3
 8012592:	88b9      	ldrh	r1, [r7, #4]
 8012594:	1acb      	subs	r3, r1, r3
 8012596:	b29b      	uxth	r3, r3
 8012598:	4610      	mov	r0, r2
 801259a:	4619      	mov	r1, r3
 801259c:	f7ff fd7c 	bl	8012098 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 80125a0:	f000 ff00 	bl	80133a4 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 80125a4:	f240 0388 	movw	r3, #136	; 0x88
 80125a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80125ac:	881b      	ldrh	r3, [r3, #0]
 80125ae:	b29b      	uxth	r3, r3
 80125b0:	4618      	mov	r0, r3
 80125b2:	f000 ff01 	bl	80133b8 <LCD_WriteRAM>
    LCD_SetCursor(Xpos + CurY, Ypos + CurX);
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	b29a      	uxth	r2, r3
 80125ba:	88fb      	ldrh	r3, [r7, #6]
 80125bc:	18d3      	adds	r3, r2, r3
 80125be:	b29a      	uxth	r2, r3
 80125c0:	693b      	ldr	r3, [r7, #16]
 80125c2:	b299      	uxth	r1, r3
 80125c4:	88bb      	ldrh	r3, [r7, #4]
 80125c6:	18cb      	adds	r3, r1, r3
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	4610      	mov	r0, r2
 80125cc:	4619      	mov	r1, r3
 80125ce:	f7ff fd63 	bl	8012098 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 80125d2:	f000 fee7 	bl	80133a4 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 80125d6:	f240 0388 	movw	r3, #136	; 0x88
 80125da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80125de:	881b      	ldrh	r3, [r3, #0]
 80125e0:	b29b      	uxth	r3, r3
 80125e2:	4618      	mov	r0, r3
 80125e4:	f000 fee8 	bl	80133b8 <LCD_WriteRAM>
    LCD_SetCursor(Xpos + CurY, Ypos - CurX);
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	b29a      	uxth	r2, r3
 80125ec:	88fb      	ldrh	r3, [r7, #6]
 80125ee:	18d3      	adds	r3, r2, r3
 80125f0:	b29a      	uxth	r2, r3
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	b29b      	uxth	r3, r3
 80125f6:	88b9      	ldrh	r1, [r7, #4]
 80125f8:	1acb      	subs	r3, r1, r3
 80125fa:	b29b      	uxth	r3, r3
 80125fc:	4610      	mov	r0, r2
 80125fe:	4619      	mov	r1, r3
 8012600:	f7ff fd4a 	bl	8012098 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8012604:	f000 fece 	bl	80133a4 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8012608:	f240 0388 	movw	r3, #136	; 0x88
 801260c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012610:	881b      	ldrh	r3, [r3, #0]
 8012612:	b29b      	uxth	r3, r3
 8012614:	4618      	mov	r0, r3
 8012616:	f000 fecf 	bl	80133b8 <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurY, Ypos + CurX);
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	b29b      	uxth	r3, r3
 801261e:	88fa      	ldrh	r2, [r7, #6]
 8012620:	1ad3      	subs	r3, r2, r3
 8012622:	b29a      	uxth	r2, r3
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	b299      	uxth	r1, r3
 8012628:	88bb      	ldrh	r3, [r7, #4]
 801262a:	18cb      	adds	r3, r1, r3
 801262c:	b29b      	uxth	r3, r3
 801262e:	4610      	mov	r0, r2
 8012630:	4619      	mov	r1, r3
 8012632:	f7ff fd31 	bl	8012098 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8012636:	f000 feb5 	bl	80133a4 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 801263a:	f240 0388 	movw	r3, #136	; 0x88
 801263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012642:	881b      	ldrh	r3, [r3, #0]
 8012644:	b29b      	uxth	r3, r3
 8012646:	4618      	mov	r0, r3
 8012648:	f000 feb6 	bl	80133b8 <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurY, Ypos - CurX);
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	b29b      	uxth	r3, r3
 8012650:	88fa      	ldrh	r2, [r7, #6]
 8012652:	1ad3      	subs	r3, r2, r3
 8012654:	b29a      	uxth	r2, r3
 8012656:	693b      	ldr	r3, [r7, #16]
 8012658:	b29b      	uxth	r3, r3
 801265a:	88b9      	ldrh	r1, [r7, #4]
 801265c:	1acb      	subs	r3, r1, r3
 801265e:	b29b      	uxth	r3, r3
 8012660:	4610      	mov	r0, r2
 8012662:	4619      	mov	r1, r3
 8012664:	f7ff fd18 	bl	8012098 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8012668:	f000 fe9c 	bl	80133a4 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 801266c:	f240 0388 	movw	r3, #136	; 0x88
 8012670:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012674:	881b      	ldrh	r3, [r3, #0]
 8012676:	b29b      	uxth	r3, r3
 8012678:	4618      	mov	r0, r3
 801267a:	f000 fe9d 	bl	80133b8 <LCD_WriteRAM>
    if (D < 0)
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	2b00      	cmp	r3, #0
 8012682:	da08      	bge.n	8012696 <LCD_DrawCircle+0x1d2>
    { 
      D += (CurX << 2) + 6;
 8012684:	693b      	ldr	r3, [r7, #16]
 8012686:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	18d3      	adds	r3, r2, r3
 801268e:	f103 0306 	add.w	r3, r3, #6
 8012692:	617b      	str	r3, [r7, #20]
 8012694:	e00d      	b.n	80126b2 <LCD_DrawCircle+0x1ee>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8012696:	693a      	ldr	r2, [r7, #16]
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	1ad3      	subs	r3, r2, r3
 801269c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80126a0:	697b      	ldr	r3, [r7, #20]
 80126a2:	18d3      	adds	r3, r2, r3
 80126a4:	f103 030a 	add.w	r3, r3, #10
 80126a8:	617b      	str	r3, [r7, #20]
      CurY--;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80126b0:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 80126b2:	693b      	ldr	r3, [r7, #16]
 80126b4:	f103 0301 	add.w	r3, r3, #1
 80126b8:	613b      	str	r3, [r7, #16]
  
  D = 3 - (Radius << 1);
  CurX = 0;
  CurY = Radius;
  
  while (CurX <= CurY)
 80126ba:	693a      	ldr	r2, [r7, #16]
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	429a      	cmp	r2, r3
 80126c0:	f67f af15 	bls.w	80124ee <LCD_DrawCircle+0x2a>
      D += ((CurX - CurY) << 2) + 10;
      CurY--;
    }
    CurX++;
  }
}
 80126c4:	f107 0718 	add.w	r7, r7, #24
 80126c8:	46bd      	mov	sp, r7
 80126ca:	bd80      	pop	{r7, pc}

080126cc <LCD_DrawMonoPict>:
  * @brief  Displays a mono-color picture.
  * @param  Pict: pointer to the picture array.
  * @retval None
  */
void LCD_DrawMonoPict(const uint32_t *Pict)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b084      	sub	sp, #16
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, i = 0;
 80126d4:	f04f 0300 	mov.w	r3, #0
 80126d8:	60fb      	str	r3, [r7, #12]
 80126da:	f04f 0300 	mov.w	r3, #0
 80126de:	60bb      	str	r3, [r7, #8]
  LCD_SetCursor(0, (LCD_PIXEL_WIDTH - 1)); 
 80126e0:	f04f 0000 	mov.w	r0, #0
 80126e4:	f240 113f 	movw	r1, #319	; 0x13f
 80126e8:	f7ff fcd6 	bl	8012098 <LCD_SetCursor>
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 80126ec:	f000 fe5a 	bl	80133a4 <LCD_WriteRAM_Prepare>
  for(index = 0; index < 2400; index++)
 80126f0:	f04f 0300 	mov.w	r3, #0
 80126f4:	60fb      	str	r3, [r7, #12]
 80126f6:	e02f      	b.n	8012758 <LCD_DrawMonoPict+0x8c>
  {
    for(i = 0; i < 32; i++)
 80126f8:	f04f 0300 	mov.w	r3, #0
 80126fc:	60bb      	str	r3, [r7, #8]
 80126fe:	e024      	b.n	801274a <LCD_DrawMonoPict+0x7e>
    {
      if((Pict[index] & (1 << i)) == 0x00)
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012706:	687a      	ldr	r2, [r7, #4]
 8012708:	18d3      	adds	r3, r2, r3
 801270a:	681a      	ldr	r2, [r3, #0]
 801270c:	68bb      	ldr	r3, [r7, #8]
 801270e:	f04f 0101 	mov.w	r1, #1
 8012712:	fa01 f303 	lsl.w	r3, r1, r3
 8012716:	4013      	ands	r3, r2
 8012718:	2b00      	cmp	r3, #0
 801271a:	d109      	bne.n	8012730 <LCD_DrawMonoPict+0x64>
      {
        LCD_WriteRAM(BackColor);
 801271c:	f240 035c 	movw	r3, #92	; 0x5c
 8012720:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012724:	881b      	ldrh	r3, [r3, #0]
 8012726:	b29b      	uxth	r3, r3
 8012728:	4618      	mov	r0, r3
 801272a:	f000 fe45 	bl	80133b8 <LCD_WriteRAM>
 801272e:	e008      	b.n	8012742 <LCD_DrawMonoPict+0x76>
      }
      else
      {
        LCD_WriteRAM(TextColor);
 8012730:	f240 0388 	movw	r3, #136	; 0x88
 8012734:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012738:	881b      	ldrh	r3, [r3, #0]
 801273a:	b29b      	uxth	r3, r3
 801273c:	4618      	mov	r0, r3
 801273e:	f000 fe3b 	bl	80133b8 <LCD_WriteRAM>
  uint32_t index = 0, i = 0;
  LCD_SetCursor(0, (LCD_PIXEL_WIDTH - 1)); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < 2400; index++)
  {
    for(i = 0; i < 32; i++)
 8012742:	68bb      	ldr	r3, [r7, #8]
 8012744:	f103 0301 	add.w	r3, r3, #1
 8012748:	60bb      	str	r3, [r7, #8]
 801274a:	68bb      	ldr	r3, [r7, #8]
 801274c:	2b1f      	cmp	r3, #31
 801274e:	d9d7      	bls.n	8012700 <LCD_DrawMonoPict+0x34>
void LCD_DrawMonoPict(const uint32_t *Pict)
{
  uint32_t index = 0, i = 0;
  LCD_SetCursor(0, (LCD_PIXEL_WIDTH - 1)); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < 2400; index++)
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	f103 0301 	add.w	r3, r3, #1
 8012756:	60fb      	str	r3, [r7, #12]
 8012758:	68fa      	ldr	r2, [r7, #12]
 801275a:	f640 135f 	movw	r3, #2399	; 0x95f
 801275e:	429a      	cmp	r2, r3
 8012760:	d9ca      	bls.n	80126f8 <LCD_DrawMonoPict+0x2c>
      {
        LCD_WriteRAM(TextColor);
      }
    }
  }
}
 8012762:	f107 0710 	add.w	r7, r7, #16
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}
 801276a:	bf00      	nop

0801276c <LCD_WriteBMP>:
  * @brief  Displays a bitmap picture loaded in the internal Flash.
  * @param  BmpAddress: Bmp picture address in the internal Flash.
  * @retval None
  */
void LCD_WriteBMP(uint32_t BmpAddress)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b084      	sub	sp, #16
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, size = 0;
 8012774:	f04f 0300 	mov.w	r3, #0
 8012778:	60fb      	str	r3, [r7, #12]
 801277a:	f04f 0300 	mov.w	r3, #0
 801277e:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  size = *(__IO uint16_t *) (BmpAddress + 2);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f103 0302 	add.w	r3, r3, #2
 8012786:	881b      	ldrh	r3, [r3, #0]
 8012788:	b29b      	uxth	r3, r3
 801278a:	60bb      	str	r3, [r7, #8]
  size |= (*(__IO uint16_t *) (BmpAddress + 4)) << 16;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f103 0304 	add.w	r3, r3, #4
 8012792:	881b      	ldrh	r3, [r3, #0]
 8012794:	b29b      	uxth	r3, r3
 8012796:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801279a:	68ba      	ldr	r2, [r7, #8]
 801279c:	4313      	orrs	r3, r2
 801279e:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(__IO uint16_t *) (BmpAddress + 10);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f103 030a 	add.w	r3, r3, #10
 80127a6:	881b      	ldrh	r3, [r3, #0]
 80127a8:	b29b      	uxth	r3, r3
 80127aa:	60fb      	str	r3, [r7, #12]
  index |= (*(__IO uint16_t *) (BmpAddress + 12)) << 16;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	f103 030c 	add.w	r3, r3, #12
 80127b2:	881b      	ldrh	r3, [r3, #0]
 80127b4:	b29b      	uxth	r3, r3
 80127b6:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80127ba:	68fa      	ldr	r2, [r7, #12]
 80127bc:	4313      	orrs	r3, r2
 80127be:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 80127c0:	68ba      	ldr	r2, [r7, #8]
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	1ad3      	subs	r3, r2, r3
 80127c6:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80127ca:	60bb      	str	r3, [r7, #8]
  BmpAddress += index;
 80127cc:	687a      	ldr	r2, [r7, #4]
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	18d3      	adds	r3, r2, r3
 80127d2:	607b      	str	r3, [r7, #4]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  LCD_WriteReg(LCD_REG_3, 0x1008);
 80127d4:	f04f 0003 	mov.w	r0, #3
 80127d8:	f241 0108 	movw	r1, #4104	; 0x1008
 80127dc:	f000 fdb8 	bl	8013350 <LCD_WriteReg>
 
  LCD_WriteRAM_Prepare();
 80127e0:	f000 fde0 	bl	80133a4 <LCD_WriteRAM_Prepare>
 
  for(index = 0; index < size; index++)
 80127e4:	f04f 0300 	mov.w	r3, #0
 80127e8:	60fb      	str	r3, [r7, #12]
 80127ea:	e00d      	b.n	8012808 <LCD_WriteBMP+0x9c>
  {
    LCD_WriteRAM(*(__IO uint16_t *)BmpAddress);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	881b      	ldrh	r3, [r3, #0]
 80127f0:	b29b      	uxth	r3, r3
 80127f2:	4618      	mov	r0, r3
 80127f4:	f000 fde0 	bl	80133b8 <LCD_WriteRAM>
    BmpAddress += 2;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	f103 0302 	add.w	r3, r3, #2
 80127fe:	607b      	str	r3, [r7, #4]
  /* AM=1 (address is updated in vertical writing direction) */
  LCD_WriteReg(LCD_REG_3, 0x1008);
 
  LCD_WriteRAM_Prepare();
 
  for(index = 0; index < size; index++)
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	f103 0301 	add.w	r3, r3, #1
 8012806:	60fb      	str	r3, [r7, #12]
 8012808:	68fa      	ldr	r2, [r7, #12]
 801280a:	68bb      	ldr	r3, [r7, #8]
 801280c:	429a      	cmp	r2, r3
 801280e:	d3ed      	bcc.n	80127ec <LCD_WriteBMP+0x80>
  }
 
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  LCD_WriteReg(LCD_REG_3, 0x1018);
 8012810:	f04f 0003 	mov.w	r0, #3
 8012814:	f241 0118 	movw	r1, #4120	; 0x1018
 8012818:	f000 fd9a 	bl	8013350 <LCD_WriteReg>
}
 801281c:	f107 0710 	add.w	r7, r7, #16
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}

08012824 <LCD_DrawFullRect>:
  * @param  Height: rectangle height.
  * @param  Width: rectangle width.
  * @retval None
  */
void LCD_DrawFullRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b082      	sub	sp, #8
 8012828:	af00      	add	r7, sp, #0
 801282a:	80f8      	strh	r0, [r7, #6]
 801282c:	80b9      	strh	r1, [r7, #4]
 801282e:	807a      	strh	r2, [r7, #2]
 8012830:	803b      	strh	r3, [r7, #0]
  LCD_SetTextColor(TextColor);
 8012832:	f240 0388 	movw	r3, #136	; 0x88
 8012836:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801283a:	881b      	ldrh	r3, [r3, #0]
 801283c:	b29b      	uxth	r3, r3
 801283e:	4618      	mov	r0, r3
 8012840:	f7ff fb94 	bl	8011f6c <LCD_SetTextColor>

  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
 8012844:	88f9      	ldrh	r1, [r7, #6]
 8012846:	88ba      	ldrh	r2, [r7, #4]
 8012848:	887b      	ldrh	r3, [r7, #2]
 801284a:	4608      	mov	r0, r1
 801284c:	4611      	mov	r1, r2
 801284e:	461a      	mov	r2, r3
 8012850:	f04f 0300 	mov.w	r3, #0
 8012854:	f7ff fda6 	bl	80123a4 <LCD_DrawLine>
  LCD_DrawLine((Xpos + Height), Ypos, Width, LCD_DIR_HORIZONTAL);
 8012858:	88fa      	ldrh	r2, [r7, #6]
 801285a:	883b      	ldrh	r3, [r7, #0]
 801285c:	18d3      	adds	r3, r2, r3
 801285e:	b299      	uxth	r1, r3
 8012860:	88ba      	ldrh	r2, [r7, #4]
 8012862:	887b      	ldrh	r3, [r7, #2]
 8012864:	4608      	mov	r0, r1
 8012866:	4611      	mov	r1, r2
 8012868:	461a      	mov	r2, r3
 801286a:	f04f 0300 	mov.w	r3, #0
 801286e:	f7ff fd99 	bl	80123a4 <LCD_DrawLine>
  
  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
 8012872:	88f9      	ldrh	r1, [r7, #6]
 8012874:	88ba      	ldrh	r2, [r7, #4]
 8012876:	883b      	ldrh	r3, [r7, #0]
 8012878:	4608      	mov	r0, r1
 801287a:	4611      	mov	r1, r2
 801287c:	461a      	mov	r2, r3
 801287e:	f04f 0301 	mov.w	r3, #1
 8012882:	f7ff fd8f 	bl	80123a4 <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos - Width + 1), Height, LCD_DIR_VERTICAL);
 8012886:	88ba      	ldrh	r2, [r7, #4]
 8012888:	887b      	ldrh	r3, [r7, #2]
 801288a:	1ad3      	subs	r3, r2, r3
 801288c:	b29b      	uxth	r3, r3
 801288e:	f103 0301 	add.w	r3, r3, #1
 8012892:	b29a      	uxth	r2, r3
 8012894:	88f9      	ldrh	r1, [r7, #6]
 8012896:	883b      	ldrh	r3, [r7, #0]
 8012898:	4608      	mov	r0, r1
 801289a:	4611      	mov	r1, r2
 801289c:	461a      	mov	r2, r3
 801289e:	f04f 0301 	mov.w	r3, #1
 80128a2:	f7ff fd7f 	bl	80123a4 <LCD_DrawLine>

  Width -= 2;
 80128a6:	887b      	ldrh	r3, [r7, #2]
 80128a8:	f1a3 0302 	sub.w	r3, r3, #2
 80128ac:	807b      	strh	r3, [r7, #2]
  Height--;
 80128ae:	883b      	ldrh	r3, [r7, #0]
 80128b0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80128b4:	803b      	strh	r3, [r7, #0]
  Ypos--;
 80128b6:	88bb      	ldrh	r3, [r7, #4]
 80128b8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80128bc:	80bb      	strh	r3, [r7, #4]

  LCD_SetTextColor(BackColor);
 80128be:	f240 035c 	movw	r3, #92	; 0x5c
 80128c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80128c6:	881b      	ldrh	r3, [r3, #0]
 80128c8:	b29b      	uxth	r3, r3
 80128ca:	4618      	mov	r0, r3
 80128cc:	f7ff fb4e 	bl	8011f6c <LCD_SetTextColor>

  while(Height--)
 80128d0:	e00d      	b.n	80128ee <LCD_DrawFullRect+0xca>
  {
    LCD_DrawLine(++Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);    
 80128d2:	88fb      	ldrh	r3, [r7, #6]
 80128d4:	f103 0301 	add.w	r3, r3, #1
 80128d8:	80fb      	strh	r3, [r7, #6]
 80128da:	88f9      	ldrh	r1, [r7, #6]
 80128dc:	88ba      	ldrh	r2, [r7, #4]
 80128de:	887b      	ldrh	r3, [r7, #2]
 80128e0:	4608      	mov	r0, r1
 80128e2:	4611      	mov	r1, r2
 80128e4:	461a      	mov	r2, r3
 80128e6:	f04f 0300 	mov.w	r3, #0
 80128ea:	f7ff fd5b 	bl	80123a4 <LCD_DrawLine>
  Height--;
  Ypos--;

  LCD_SetTextColor(BackColor);

  while(Height--)
 80128ee:	883b      	ldrh	r3, [r7, #0]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	bf0c      	ite	eq
 80128f4:	2300      	moveq	r3, #0
 80128f6:	2301      	movne	r3, #1
 80128f8:	b2db      	uxtb	r3, r3
 80128fa:	883a      	ldrh	r2, [r7, #0]
 80128fc:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8012900:	803a      	strh	r2, [r7, #0]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d1e5      	bne.n	80128d2 <LCD_DrawFullRect+0xae>
  {
    LCD_DrawLine(++Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);    
  }

  LCD_SetTextColor(TextColor);
 8012906:	f240 0388 	movw	r3, #136	; 0x88
 801290a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801290e:	881b      	ldrh	r3, [r3, #0]
 8012910:	b29b      	uxth	r3, r3
 8012912:	4618      	mov	r0, r3
 8012914:	f7ff fb2a 	bl	8011f6c <LCD_SetTextColor>
}
 8012918:	f107 0708 	add.w	r7, r7, #8
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}

08012920 <LCD_DrawFullCircle>:
  * @param  Ypos: specifies the Y position.
  * @param  Radius
  * @retval None
  */
void LCD_DrawFullCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b086      	sub	sp, #24
 8012924:	af00      	add	r7, sp, #0
 8012926:	4613      	mov	r3, r2
 8012928:	4602      	mov	r2, r0
 801292a:	80fa      	strh	r2, [r7, #6]
 801292c:	460a      	mov	r2, r1
 801292e:	80ba      	strh	r2, [r7, #4]
 8012930:	807b      	strh	r3, [r7, #2]
  int32_t  D;    /* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8012932:	887b      	ldrh	r3, [r7, #2]
 8012934:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012938:	f1c3 0303 	rsb	r3, r3, #3
 801293c:	617b      	str	r3, [r7, #20]

  CurX = 0;
 801293e:	f04f 0300 	mov.w	r3, #0
 8012942:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8012944:	887b      	ldrh	r3, [r7, #2]
 8012946:	60fb      	str	r3, [r7, #12]
  
  LCD_SetTextColor(BackColor);
 8012948:	f240 035c 	movw	r3, #92	; 0x5c
 801294c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012950:	881b      	ldrh	r3, [r3, #0]
 8012952:	b29b      	uxth	r3, r3
 8012954:	4618      	mov	r0, r3
 8012956:	f7ff fb09 	bl	8011f6c <LCD_SetTextColor>

  while (CurX <= CurY)
 801295a:	e07b      	b.n	8012a54 <LCD_DrawFullCircle+0x134>
  {
    if(CurY > 0) 
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d02b      	beq.n	80129ba <LCD_DrawFullCircle+0x9a>
    {
      LCD_DrawLine(Xpos - CurX, Ypos + CurY, 2*CurY, LCD_DIR_HORIZONTAL);
 8012962:	693b      	ldr	r3, [r7, #16]
 8012964:	b29b      	uxth	r3, r3
 8012966:	88fa      	ldrh	r2, [r7, #6]
 8012968:	1ad3      	subs	r3, r2, r3
 801296a:	b299      	uxth	r1, r3
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	b29a      	uxth	r2, r3
 8012970:	88bb      	ldrh	r3, [r7, #4]
 8012972:	18d3      	adds	r3, r2, r3
 8012974:	b29a      	uxth	r2, r3
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	b29b      	uxth	r3, r3
 801297a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801297e:	b29b      	uxth	r3, r3
 8012980:	4608      	mov	r0, r1
 8012982:	4611      	mov	r1, r2
 8012984:	461a      	mov	r2, r3
 8012986:	f04f 0300 	mov.w	r3, #0
 801298a:	f7ff fd0b 	bl	80123a4 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurX, Ypos + CurY, 2*CurY, LCD_DIR_HORIZONTAL);
 801298e:	693b      	ldr	r3, [r7, #16]
 8012990:	b29a      	uxth	r2, r3
 8012992:	88fb      	ldrh	r3, [r7, #6]
 8012994:	18d3      	adds	r3, r2, r3
 8012996:	b299      	uxth	r1, r3
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	b29a      	uxth	r2, r3
 801299c:	88bb      	ldrh	r3, [r7, #4]
 801299e:	18d3      	adds	r3, r2, r3
 80129a0:	b29a      	uxth	r2, r3
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	b29b      	uxth	r3, r3
 80129a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80129aa:	b29b      	uxth	r3, r3
 80129ac:	4608      	mov	r0, r1
 80129ae:	4611      	mov	r1, r2
 80129b0:	461a      	mov	r2, r3
 80129b2:	f04f 0300 	mov.w	r3, #0
 80129b6:	f7ff fcf5 	bl	80123a4 <LCD_DrawLine>
    }

    if(CurX > 0) 
 80129ba:	693b      	ldr	r3, [r7, #16]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d02b      	beq.n	8012a18 <LCD_DrawFullCircle+0xf8>
    {
      LCD_DrawLine(Xpos - CurY, Ypos + CurX, 2*CurX, LCD_DIR_HORIZONTAL);
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	b29b      	uxth	r3, r3
 80129c4:	88fa      	ldrh	r2, [r7, #6]
 80129c6:	1ad3      	subs	r3, r2, r3
 80129c8:	b299      	uxth	r1, r3
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	b29a      	uxth	r2, r3
 80129ce:	88bb      	ldrh	r3, [r7, #4]
 80129d0:	18d3      	adds	r3, r2, r3
 80129d2:	b29a      	uxth	r2, r3
 80129d4:	693b      	ldr	r3, [r7, #16]
 80129d6:	b29b      	uxth	r3, r3
 80129d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80129dc:	b29b      	uxth	r3, r3
 80129de:	4608      	mov	r0, r1
 80129e0:	4611      	mov	r1, r2
 80129e2:	461a      	mov	r2, r3
 80129e4:	f04f 0300 	mov.w	r3, #0
 80129e8:	f7ff fcdc 	bl	80123a4 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurY, Ypos + CurX, 2*CurX, LCD_DIR_HORIZONTAL);
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	b29a      	uxth	r2, r3
 80129f0:	88fb      	ldrh	r3, [r7, #6]
 80129f2:	18d3      	adds	r3, r2, r3
 80129f4:	b299      	uxth	r1, r3
 80129f6:	693b      	ldr	r3, [r7, #16]
 80129f8:	b29a      	uxth	r2, r3
 80129fa:	88bb      	ldrh	r3, [r7, #4]
 80129fc:	18d3      	adds	r3, r2, r3
 80129fe:	b29a      	uxth	r2, r3
 8012a00:	693b      	ldr	r3, [r7, #16]
 8012a02:	b29b      	uxth	r3, r3
 8012a04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012a08:	b29b      	uxth	r3, r3
 8012a0a:	4608      	mov	r0, r1
 8012a0c:	4611      	mov	r1, r2
 8012a0e:	461a      	mov	r2, r3
 8012a10:	f04f 0300 	mov.w	r3, #0
 8012a14:	f7ff fcc6 	bl	80123a4 <LCD_DrawLine>
    }
    if (D < 0)
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	da08      	bge.n	8012a30 <LCD_DrawFullCircle+0x110>
    { 
      D += (CurX << 2) + 6;
 8012a1e:	693b      	ldr	r3, [r7, #16]
 8012a20:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	18d3      	adds	r3, r2, r3
 8012a28:	f103 0306 	add.w	r3, r3, #6
 8012a2c:	617b      	str	r3, [r7, #20]
 8012a2e:	e00d      	b.n	8012a4c <LCD_DrawFullCircle+0x12c>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8012a30:	693a      	ldr	r2, [r7, #16]
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	1ad3      	subs	r3, r2, r3
 8012a36:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8012a3a:	697b      	ldr	r3, [r7, #20]
 8012a3c:	18d3      	adds	r3, r2, r3
 8012a3e:	f103 030a 	add.w	r3, r3, #10
 8012a42:	617b      	str	r3, [r7, #20]
      CurY--;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012a4a:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8012a4c:	693b      	ldr	r3, [r7, #16]
 8012a4e:	f103 0301 	add.w	r3, r3, #1
 8012a52:	613b      	str	r3, [r7, #16]
  CurX = 0;
  CurY = Radius;
  
  LCD_SetTextColor(BackColor);

  while (CurX <= CurY)
 8012a54:	693a      	ldr	r2, [r7, #16]
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	429a      	cmp	r2, r3
 8012a5a:	f67f af7f 	bls.w	801295c <LCD_DrawFullCircle+0x3c>
      CurY--;
    }
    CurX++;
  }

  LCD_SetTextColor(TextColor);
 8012a5e:	f240 0388 	movw	r3, #136	; 0x88
 8012a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012a66:	881b      	ldrh	r3, [r3, #0]
 8012a68:	b29b      	uxth	r3, r3
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f7ff fa7e 	bl	8011f6c <LCD_SetTextColor>
  LCD_DrawCircle(Xpos, Ypos, Radius);
 8012a70:	88f9      	ldrh	r1, [r7, #6]
 8012a72:	88ba      	ldrh	r2, [r7, #4]
 8012a74:	887b      	ldrh	r3, [r7, #2]
 8012a76:	4608      	mov	r0, r1
 8012a78:	4611      	mov	r1, r2
 8012a7a:	461a      	mov	r2, r3
 8012a7c:	f7ff fd22 	bl	80124c4 <LCD_DrawCircle>
}
 8012a80:	f107 0718 	add.w	r7, r7, #24
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}

08012a88 <LCD_DrawUniLine>:
  * @param  x2: specifies the point 2 x position.
  * @param  y2: specifies the point 2 y position.
  * @retval None
  */
void LCD_DrawUniLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b08a      	sub	sp, #40	; 0x28
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	80f8      	strh	r0, [r7, #6]
 8012a90:	80b9      	strh	r1, [r7, #4]
 8012a92:	807a      	strh	r2, [r7, #2]
 8012a94:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8012a96:	f04f 0300 	mov.w	r3, #0
 8012a9a:	823b      	strh	r3, [r7, #16]
 8012a9c:	f04f 0300 	mov.w	r3, #0
 8012aa0:	81fb      	strh	r3, [r7, #14]
 8012aa2:	f04f 0300 	mov.w	r3, #0
 8012aa6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012aa8:	f04f 0300 	mov.w	r3, #0
 8012aac:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012aae:	f04f 0300 	mov.w	r3, #0
 8012ab2:	847b      	strh	r3, [r7, #34]	; 0x22
 8012ab4:	f04f 0300 	mov.w	r3, #0
 8012ab8:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8012aba:	f04f 0300 	mov.w	r3, #0
 8012abe:	83fb      	strh	r3, [r7, #30]
 8012ac0:	f04f 0300 	mov.w	r3, #0
 8012ac4:	83bb      	strh	r3, [r7, #28]
 8012ac6:	f04f 0300 	mov.w	r3, #0
 8012aca:	837b      	strh	r3, [r7, #26]
 8012acc:	f04f 0300 	mov.w	r3, #0
 8012ad0:	833b      	strh	r3, [r7, #24]
 8012ad2:	f04f 0300 	mov.w	r3, #0
 8012ad6:	82fb      	strh	r3, [r7, #22]
 8012ad8:	f04f 0300 	mov.w	r3, #0
 8012adc:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8012ade:	f04f 0300 	mov.w	r3, #0
 8012ae2:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8012ae4:	887a      	ldrh	r2, [r7, #2]
 8012ae6:	88fb      	ldrh	r3, [r7, #6]
 8012ae8:	1ad3      	subs	r3, r2, r3
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	bfb8      	it	lt
 8012aee:	425b      	neglt	r3, r3
 8012af0:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8012af2:	883a      	ldrh	r2, [r7, #0]
 8012af4:	88bb      	ldrh	r3, [r7, #4]
 8012af6:	1ad3      	subs	r3, r2, r3
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	bfb8      	it	lt
 8012afc:	425b      	neglt	r3, r3
 8012afe:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8012b00:	88fb      	ldrh	r3, [r7, #6]
 8012b02:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8012b04:	88bb      	ldrh	r3, [r7, #4]
 8012b06:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8012b08:	887a      	ldrh	r2, [r7, #2]
 8012b0a:	88fb      	ldrh	r3, [r7, #6]
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d306      	bcc.n	8012b1e <LCD_DrawUniLine+0x96>
  {
    xinc1 = 1;
 8012b10:	f04f 0301 	mov.w	r3, #1
 8012b14:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8012b16:	f04f 0301 	mov.w	r3, #1
 8012b1a:	843b      	strh	r3, [r7, #32]
 8012b1c:	e005      	b.n	8012b2a <LCD_DrawUniLine+0xa2>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8012b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b22:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8012b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b28:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8012b2a:	883a      	ldrh	r2, [r7, #0]
 8012b2c:	88bb      	ldrh	r3, [r7, #4]
 8012b2e:	429a      	cmp	r2, r3
 8012b30:	d306      	bcc.n	8012b40 <LCD_DrawUniLine+0xb8>
  {
    yinc1 = 1;
 8012b32:	f04f 0301 	mov.w	r3, #1
 8012b36:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8012b38:	f04f 0301 	mov.w	r3, #1
 8012b3c:	83bb      	strh	r3, [r7, #28]
 8012b3e:	e005      	b.n	8012b4c <LCD_DrawUniLine+0xc4>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8012b40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b44:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8012b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b4a:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8012b4c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8012b50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012b54:	429a      	cmp	r2, r3
 8012b56:	db14      	blt.n	8012b82 <LCD_DrawUniLine+0xfa>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8012b58:	f04f 0300 	mov.w	r3, #0
 8012b5c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8012b5e:	f04f 0300 	mov.w	r3, #0
 8012b62:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8012b64:	8a3b      	ldrh	r3, [r7, #16]
 8012b66:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8012b68:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012b6c:	ea4f 72d3 	mov.w	r2, r3, lsr #31
 8012b70:	18d3      	adds	r3, r2, r3
 8012b72:	ea4f 0363 	mov.w	r3, r3, asr #1
 8012b76:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8012b78:	89fb      	ldrh	r3, [r7, #14]
 8012b7a:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8012b7c:	8a3b      	ldrh	r3, [r7, #16]
 8012b7e:	82bb      	strh	r3, [r7, #20]
 8012b80:	e013      	b.n	8012baa <LCD_DrawUniLine+0x122>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8012b82:	f04f 0300 	mov.w	r3, #0
 8012b86:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8012b88:	f04f 0300 	mov.w	r3, #0
 8012b8c:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8012b8e:	89fb      	ldrh	r3, [r7, #14]
 8012b90:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8012b92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012b96:	ea4f 72d3 	mov.w	r2, r3, lsr #31
 8012b9a:	18d3      	adds	r3, r2, r3
 8012b9c:	ea4f 0363 	mov.w	r3, r3, asr #1
 8012ba0:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8012ba2:	8a3b      	ldrh	r3, [r7, #16]
 8012ba4:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8012ba6:	89fb      	ldrh	r3, [r7, #14]
 8012ba8:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8012baa:	f04f 0300 	mov.w	r3, #0
 8012bae:	827b      	strh	r3, [r7, #18]
 8012bb0:	e02f      	b.n	8012c12 <LCD_DrawUniLine+0x18a>
  {
    PutPixel(x, y);             /* Draw the current pixel */
 8012bb2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8012bb6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012bba:	4610      	mov	r0, r2
 8012bbc:	4619      	mov	r1, r3
 8012bbe:	f000 fde3 	bl	8013788 <PutPixel>
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8012bc2:	8b3a      	ldrh	r2, [r7, #24]
 8012bc4:	8afb      	ldrh	r3, [r7, #22]
 8012bc6:	18d3      	adds	r3, r2, r3
 8012bc8:	b29b      	uxth	r3, r3
 8012bca:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8012bcc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8012bd0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	db0e      	blt.n	8012bf6 <LCD_DrawUniLine+0x16e>
    {
      num -= den;               /* Calculate the new numerator value */
 8012bd8:	8b3a      	ldrh	r2, [r7, #24]
 8012bda:	8b7b      	ldrh	r3, [r7, #26]
 8012bdc:	1ad3      	subs	r3, r2, r3
 8012bde:	b29b      	uxth	r3, r3
 8012be0:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8012be2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012be4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012be6:	18d3      	adds	r3, r2, r3
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8012bec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012bee:	8bfb      	ldrh	r3, [r7, #30]
 8012bf0:	18d3      	adds	r3, r2, r3
 8012bf2:	b29b      	uxth	r3, r3
 8012bf4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8012bf6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012bf8:	8c3b      	ldrh	r3, [r7, #32]
 8012bfa:	18d3      	adds	r3, r2, r3
 8012bfc:	b29b      	uxth	r3, r3
 8012bfe:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8012c00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c02:	8bbb      	ldrh	r3, [r7, #28]
 8012c04:	18d3      	adds	r3, r2, r3
 8012c06:	b29b      	uxth	r3, r3
 8012c08:	84bb      	strh	r3, [r7, #36]	; 0x24
    num = deltay / 2;
    numadd = deltax;
    numpixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8012c0a:	8a7b      	ldrh	r3, [r7, #18]
 8012c0c:	f103 0301 	add.w	r3, r3, #1
 8012c10:	827b      	strh	r3, [r7, #18]
 8012c12:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8012c16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	ddc9      	ble.n	8012bb2 <LCD_DrawUniLine+0x12a>
      y += yinc1;               /* Change the y as appropriate */
    }
    x += xinc2;                 /* Change the x as appropriate */
    y += yinc2;                 /* Change the y as appropriate */
  }
}
 8012c1e:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
 8012c26:	bf00      	nop

08012c28 <LCD_PolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLine(pPoint Points, uint16_t PointCount)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b084      	sub	sp, #16
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
 8012c30:	460b      	mov	r3, r1
 8012c32:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 8012c34:	f04f 0300 	mov.w	r3, #0
 8012c38:	81fb      	strh	r3, [r7, #14]
 8012c3a:	f04f 0300 	mov.w	r3, #0
 8012c3e:	81bb      	strh	r3, [r7, #12]

  if(PointCount < 2)
 8012c40:	887b      	ldrh	r3, [r7, #2]
 8012c42:	2b01      	cmp	r3, #1
 8012c44:	d814      	bhi.n	8012c70 <LCD_PolyLine+0x48>
  {
    return;
 8012c46:	e01a      	b.n	8012c7e <LCD_PolyLine+0x56>
  }

  while(--PointCount)
  {
    X = Points->X;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	881b      	ldrh	r3, [r3, #0]
 8012c4c:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	885b      	ldrh	r3, [r3, #2]
 8012c52:	81bb      	strh	r3, [r7, #12]
    Points++;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f103 0304 	add.w	r3, r3, #4
 8012c5a:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 8012c5c:	89f8      	ldrh	r0, [r7, #14]
 8012c5e:	89b9      	ldrh	r1, [r7, #12]
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	881b      	ldrh	r3, [r3, #0]
 8012c64:	b29a      	uxth	r2, r3
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	885b      	ldrh	r3, [r3, #2]
 8012c6a:	b29b      	uxth	r3, r3
 8012c6c:	f7ff ff0c 	bl	8012a88 <LCD_DrawUniLine>
  if(PointCount < 2)
  {
    return;
  }

  while(--PointCount)
 8012c70:	887b      	ldrh	r3, [r7, #2]
 8012c72:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012c76:	807b      	strh	r3, [r7, #2]
 8012c78:	887b      	ldrh	r3, [r7, #2]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d1e4      	bne.n	8012c48 <LCD_PolyLine+0x20>
    X = Points->X;
    Y = Points->Y;
    Points++;
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
  }
}
 8012c7e:	f107 0710 	add.w	r7, r7, #16
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}
 8012c86:	bf00      	nop

08012c88 <LCD_PolyLineRelativeClosed>:
  * @param  Closed: specifies if the draw is closed or not.
  *           1: closed, 0 : not closed.
  * @retval None
  */
static void LCD_PolyLineRelativeClosed(pPoint Points, uint16_t PointCount, uint16_t Closed)
{
 8012c88:	b590      	push	{r4, r7, lr}
 8012c8a:	b085      	sub	sp, #20
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	4613      	mov	r3, r2
 8012c92:	460a      	mov	r2, r1
 8012c94:	807a      	strh	r2, [r7, #2]
 8012c96:	803b      	strh	r3, [r7, #0]
  int16_t X = 0, Y = 0;
 8012c98:	f04f 0300 	mov.w	r3, #0
 8012c9c:	81fb      	strh	r3, [r7, #14]
 8012c9e:	f04f 0300 	mov.w	r3, #0
 8012ca2:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	60bb      	str	r3, [r7, #8]

  if(PointCount < 2)
 8012ca8:	887b      	ldrh	r3, [r7, #2]
 8012caa:	2b01      	cmp	r3, #1
 8012cac:	d93d      	bls.n	8012d2a <LCD_PolyLineRelativeClosed+0xa2>
  {
    return;
  }  
  X = Points->X;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	881b      	ldrh	r3, [r3, #0]
 8012cb2:	81fb      	strh	r3, [r7, #14]
  Y = Points->Y;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	885b      	ldrh	r3, [r3, #2]
 8012cb8:	81bb      	strh	r3, [r7, #12]
  while(--PointCount)
 8012cba:	e021      	b.n	8012d00 <LCD_PolyLineRelativeClosed+0x78>
  {
    Points++;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	f103 0304 	add.w	r3, r3, #4
 8012cc2:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
 8012cc4:	89f8      	ldrh	r0, [r7, #14]
 8012cc6:	89b9      	ldrh	r1, [r7, #12]
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	881b      	ldrh	r3, [r3, #0]
 8012ccc:	b29a      	uxth	r2, r3
 8012cce:	89fb      	ldrh	r3, [r7, #14]
 8012cd0:	18d3      	adds	r3, r2, r3
 8012cd2:	b29a      	uxth	r2, r3
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	885b      	ldrh	r3, [r3, #2]
 8012cd8:	b29c      	uxth	r4, r3
 8012cda:	89bb      	ldrh	r3, [r7, #12]
 8012cdc:	18e3      	adds	r3, r4, r3
 8012cde:	b29b      	uxth	r3, r3
 8012ce0:	f7ff fed2 	bl	8012a88 <LCD_DrawUniLine>
    X = X + Points->X;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	881b      	ldrh	r3, [r3, #0]
 8012ce8:	b29a      	uxth	r2, r3
 8012cea:	89fb      	ldrh	r3, [r7, #14]
 8012cec:	18d3      	adds	r3, r2, r3
 8012cee:	b29b      	uxth	r3, r3
 8012cf0:	81fb      	strh	r3, [r7, #14]
    Y = Y + Points->Y;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	885b      	ldrh	r3, [r3, #2]
 8012cf6:	b29a      	uxth	r2, r3
 8012cf8:	89bb      	ldrh	r3, [r7, #12]
 8012cfa:	18d3      	adds	r3, r2, r3
 8012cfc:	b29b      	uxth	r3, r3
 8012cfe:	81bb      	strh	r3, [r7, #12]
  {
    return;
  }  
  X = Points->X;
  Y = Points->Y;
  while(--PointCount)
 8012d00:	887b      	ldrh	r3, [r7, #2]
 8012d02:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012d06:	807b      	strh	r3, [r7, #2]
 8012d08:	887b      	ldrh	r3, [r7, #2]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d1d6      	bne.n	8012cbc <LCD_PolyLineRelativeClosed+0x34>
    Points++;
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
    X = X + Points->X;
    Y = Y + Points->Y;
  }
  if(Closed)
 8012d0e:	883b      	ldrh	r3, [r7, #0]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d00b      	beq.n	8012d2c <LCD_PolyLineRelativeClosed+0xa4>
  {
    LCD_DrawUniLine(First->X, First->Y, X, Y);
 8012d14:	68bb      	ldr	r3, [r7, #8]
 8012d16:	881b      	ldrh	r3, [r3, #0]
 8012d18:	b298      	uxth	r0, r3
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	885b      	ldrh	r3, [r3, #2]
 8012d1e:	b299      	uxth	r1, r3
 8012d20:	89fa      	ldrh	r2, [r7, #14]
 8012d22:	89bb      	ldrh	r3, [r7, #12]
 8012d24:	f7ff feb0 	bl	8012a88 <LCD_DrawUniLine>
 8012d28:	e000      	b.n	8012d2c <LCD_PolyLineRelativeClosed+0xa4>
  int16_t X = 0, Y = 0;
  pPoint First = Points;

  if(PointCount < 2)
  {
    return;
 8012d2a:	bf00      	nop
  }
  if(Closed)
  {
    LCD_DrawUniLine(First->X, First->Y, X, Y);
  }  
}
 8012d2c:	f107 0714 	add.w	r7, r7, #20
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd90      	pop	{r4, r7, pc}

08012d34 <LCD_ClosedPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLine(pPoint Points, uint16_t PointCount)
{
 8012d34:	b590      	push	{r4, r7, lr}
 8012d36:	b083      	sub	sp, #12
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
 8012d3c:	460b      	mov	r3, r1
 8012d3e:	807b      	strh	r3, [r7, #2]
  LCD_PolyLine(Points, PointCount);
 8012d40:	887b      	ldrh	r3, [r7, #2]
 8012d42:	6878      	ldr	r0, [r7, #4]
 8012d44:	4619      	mov	r1, r3
 8012d46:	f7ff ff6f 	bl	8012c28 <LCD_PolyLine>
  LCD_DrawUniLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	881b      	ldrh	r3, [r3, #0]
 8012d4e:	b298      	uxth	r0, r3
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	885b      	ldrh	r3, [r3, #2]
 8012d54:	b299      	uxth	r1, r3
 8012d56:	887b      	ldrh	r3, [r7, #2]
 8012d58:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012d5c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012d60:	687a      	ldr	r2, [r7, #4]
 8012d62:	18d3      	adds	r3, r2, r3
 8012d64:	881b      	ldrh	r3, [r3, #0]
 8012d66:	b29a      	uxth	r2, r3
 8012d68:	887b      	ldrh	r3, [r7, #2]
 8012d6a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012d6e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012d72:	687c      	ldr	r4, [r7, #4]
 8012d74:	18e3      	adds	r3, r4, r3
 8012d76:	885b      	ldrh	r3, [r3, #2]
 8012d78:	b29b      	uxth	r3, r3
 8012d7a:	f7ff fe85 	bl	8012a88 <LCD_DrawUniLine>
}
 8012d7e:	f107 070c 	add.w	r7, r7, #12
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd90      	pop	{r4, r7, pc}
 8012d86:	bf00      	nop

08012d88 <LCD_PolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLineRelative(pPoint Points, uint16_t PointCount)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b082      	sub	sp, #8
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	460b      	mov	r3, r1
 8012d92:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 0);
 8012d94:	887b      	ldrh	r3, [r7, #2]
 8012d96:	6878      	ldr	r0, [r7, #4]
 8012d98:	4619      	mov	r1, r3
 8012d9a:	f04f 0200 	mov.w	r2, #0
 8012d9e:	f7ff ff73 	bl	8012c88 <LCD_PolyLineRelativeClosed>
}
 8012da2:	f107 0708 	add.w	r7, r7, #8
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}
 8012daa:	bf00      	nop

08012dac <LCD_ClosedPolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLineRelative(pPoint Points, uint16_t PointCount)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b082      	sub	sp, #8
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
 8012db4:	460b      	mov	r3, r1
 8012db6:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 1);
 8012db8:	887b      	ldrh	r3, [r7, #2]
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	4619      	mov	r1, r3
 8012dbe:	f04f 0201 	mov.w	r2, #1
 8012dc2:	f7ff ff61 	bl	8012c88 <LCD_PolyLineRelativeClosed>
}
 8012dc6:	f107 0708 	add.w	r7, r7, #8
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop

08012dd0 <LCD_FillPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_FillPolyLine(pPoint Points, uint16_t PointCount)
{
 8012dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012dd2:	b0ed      	sub	sp, #436	; 0x1b4
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	f107 0304 	add.w	r3, r7, #4
 8012dda:	6018      	str	r0, [r3, #0]
 8012ddc:	460a      	mov	r2, r1
 8012dde:	f107 0302 	add.w	r3, r7, #2
 8012de2:	801a      	strh	r2, [r3, #0]
  /*  public-domain code by Darel Rex Finley, 2007 */
  uint16_t  nodes = 0, nodeX[MAX_POLY_CORNERS], pixelX = 0, pixelY = 0, i = 0,
 8012de4:	f04f 0300 	mov.w	r3, #0
 8012de8:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
 8012dec:	f04f 0300 	mov.w	r3, #0
 8012df0:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
 8012df4:	f04f 0300 	mov.w	r3, #0
 8012df8:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
 8012dfc:	f04f 0300 	mov.w	r3, #0
 8012e00:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
  j = 0, swap = 0;
 8012e04:	f04f 0300 	mov.w	r3, #0
 8012e08:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8
 8012e0c:	f04f 0300 	mov.w	r3, #0
 8012e10:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;
 8012e14:	f04f 0300 	mov.w	r3, #0
 8012e18:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
 8012e1c:	f04f 0300 	mov.w	r3, #0
 8012e20:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
 8012e24:	f04f 0300 	mov.w	r3, #0
 8012e28:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
 8012e2c:	f04f 0300 	mov.w	r3, #0
 8012e30:	f8a7 31a0 	strh.w	r3, [r7, #416]	; 0x1a0

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
 8012e34:	f107 0304 	add.w	r3, r7, #4
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	881b      	ldrh	r3, [r3, #0]
 8012e3c:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
 8012e40:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 8012e44:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;
 8012e48:	f107 0304 	add.w	r3, r7, #4
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	885b      	ldrh	r3, [r3, #2]
 8012e50:	f8a7 31a0 	strh.w	r3, [r7, #416]	; 0x1a0
 8012e54:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 8012e58:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2

  for(i = 1; i < PointCount; i++)
 8012e5c:	f04f 0301 	mov.w	r3, #1
 8012e60:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8012e64:	e043      	b.n	8012eee <LCD_FillPolyLine+0x11e>
  {
    pixelX = POLY_X(i);
 8012e66:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8012e6a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012e6e:	f107 0204 	add.w	r2, r7, #4
 8012e72:	6812      	ldr	r2, [r2, #0]
 8012e74:	18d3      	adds	r3, r2, r3
 8012e76:	885b      	ldrh	r3, [r3, #2]
 8012e78:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
    if(pixelX < IMAGE_LEFT)
 8012e7c:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 8012e80:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
 8012e84:	429a      	cmp	r2, r3
 8012e86:	d203      	bcs.n	8012e90 <LCD_FillPolyLine+0xc0>
    {
      IMAGE_LEFT = pixelX;
 8012e88:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 8012e8c:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
    }
    if(pixelX > IMAGE_RIGHT)
 8012e90:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 8012e94:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 8012e98:	429a      	cmp	r2, r3
 8012e9a:	d903      	bls.n	8012ea4 <LCD_FillPolyLine+0xd4>
    {
      IMAGE_RIGHT = pixelX;
 8012e9c:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 8012ea0:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
    }
    
    pixelY = POLY_Y(i);
 8012ea4:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8012ea8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012eac:	f107 0204 	add.w	r2, r7, #4
 8012eb0:	6812      	ldr	r2, [r2, #0]
 8012eb2:	18d3      	adds	r3, r2, r3
 8012eb4:	881b      	ldrh	r3, [r3, #0]
 8012eb6:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
    if(pixelY < IMAGE_TOP)
 8012eba:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 8012ebe:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	d203      	bcs.n	8012ece <LCD_FillPolyLine+0xfe>
    { 
      IMAGE_TOP = pixelY;
 8012ec6:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8012eca:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
    }
    if(pixelY > IMAGE_BOTTOM)
 8012ece:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 8012ed2:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 8012ed6:	429a      	cmp	r2, r3
 8012ed8:	d903      	bls.n	8012ee2 <LCD_FillPolyLine+0x112>
    {
      IMAGE_BOTTOM = pixelY;
 8012eda:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8012ede:	f8a7 31a0 	strh.w	r3, [r7, #416]	; 0x1a0
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;

  for(i = 1; i < PointCount; i++)
 8012ee2:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8012ee6:	f103 0301 	add.w	r3, r3, #1
 8012eea:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8012eee:	f107 0302 	add.w	r3, r7, #2
 8012ef2:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8012ef6:	881b      	ldrh	r3, [r3, #0]
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	d3b4      	bcc.n	8012e66 <LCD_FillPolyLine+0x96>
    {
      IMAGE_BOTTOM = pixelY;
    }
  }
  
  LCD_SetTextColor(BackColor);  
 8012efc:	f240 035c 	movw	r3, #92	; 0x5c
 8012f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012f04:	881b      	ldrh	r3, [r3, #0]
 8012f06:	b29b      	uxth	r3, r3
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f7ff f82f 	bl	8011f6c <LCD_SetTextColor>

  /*  Loop through the rows of the image. */
  for (pixelY = IMAGE_TOP; pixelY < IMAGE_BOTTOM; pixelY++) 
 8012f0e:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8012f12:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
 8012f16:	e207      	b.n	8013328 <LCD_FillPolyLine+0x558>
  {  
    /* Build a list of nodes. */
    nodes = 0; j = PointCount-1;
 8012f18:	f04f 0300 	mov.w	r3, #0
 8012f1c:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
 8012f20:	f107 0302 	add.w	r3, r7, #2
 8012f24:	881b      	ldrh	r3, [r3, #0]
 8012f26:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012f2a:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8

    for (i = 0; i < PointCount; i++) 
 8012f2e:	f04f 0300 	mov.w	r3, #0
 8012f32:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8012f36:	e0f5      	b.n	8013124 <LCD_FillPolyLine+0x354>
    {
      if (((POLY_Y(i)<(double) pixelY) && (POLY_Y(j)>=(double) pixelY)) || \
 8012f38:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8012f3c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012f40:	f107 0204 	add.w	r2, r7, #4
 8012f44:	6812      	ldr	r2, [r2, #0]
 8012f46:	18d3      	adds	r3, r2, r3
 8012f48:	881b      	ldrh	r3, [r3, #0]
 8012f4a:	b21b      	sxth	r3, r3
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f001 f9b5 	bl	80142bc <__aeabi_i2d>
 8012f52:	4604      	mov	r4, r0
 8012f54:	460d      	mov	r5, r1
 8012f56:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f001 f99e 	bl	801429c <__aeabi_ui2d>
 8012f60:	4602      	mov	r2, r0
 8012f62:	460b      	mov	r3, r1
 8012f64:	f04f 0101 	mov.w	r1, #1
 8012f68:	460e      	mov	r6, r1
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	4629      	mov	r1, r5
 8012f6e:	f001 fa6b 	bl	8014448 <__aeabi_dcmplt>
 8012f72:	4603      	mov	r3, r0
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d102      	bne.n	8012f7e <LCD_FillPolyLine+0x1ae>
 8012f78:	f04f 0300 	mov.w	r3, #0
 8012f7c:	461e      	mov	r6, r3
 8012f7e:	b2f3      	uxtb	r3, r6
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d025      	beq.n	8012fd0 <LCD_FillPolyLine+0x200>
 8012f84:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	; 0x1a8
 8012f88:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012f8c:	f107 0204 	add.w	r2, r7, #4
 8012f90:	6812      	ldr	r2, [r2, #0]
 8012f92:	18d3      	adds	r3, r2, r3
 8012f94:	881b      	ldrh	r3, [r3, #0]
 8012f96:	b21b      	sxth	r3, r3
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f001 f98f 	bl	80142bc <__aeabi_i2d>
 8012f9e:	4604      	mov	r4, r0
 8012fa0:	460d      	mov	r5, r1
 8012fa2:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f001 f978 	bl	801429c <__aeabi_ui2d>
 8012fac:	4602      	mov	r2, r0
 8012fae:	460b      	mov	r3, r1
 8012fb0:	f04f 0101 	mov.w	r1, #1
 8012fb4:	460e      	mov	r6, r1
 8012fb6:	4620      	mov	r0, r4
 8012fb8:	4629      	mov	r1, r5
 8012fba:	f001 fa59 	bl	8014470 <__aeabi_dcmpge>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d102      	bne.n	8012fca <LCD_FillPolyLine+0x1fa>
 8012fc4:	f04f 0300 	mov.w	r3, #0
 8012fc8:	461e      	mov	r6, r3
 8012fca:	b2f3      	uxtb	r3, r6
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d14b      	bne.n	8013068 <LCD_FillPolyLine+0x298>
          ((POLY_Y(j)<(double) pixelY) && (POLY_Y(i)>=(double) pixelY)))
 8012fd0:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	; 0x1a8
 8012fd4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012fd8:	f107 0204 	add.w	r2, r7, #4
 8012fdc:	6812      	ldr	r2, [r2, #0]
 8012fde:	18d3      	adds	r3, r2, r3
 8012fe0:	881b      	ldrh	r3, [r3, #0]
 8012fe2:	b21b      	sxth	r3, r3
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f001 f969 	bl	80142bc <__aeabi_i2d>
 8012fea:	4604      	mov	r4, r0
 8012fec:	460d      	mov	r5, r1
 8012fee:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f001 f952 	bl	801429c <__aeabi_ui2d>
 8012ff8:	4602      	mov	r2, r0
 8012ffa:	460b      	mov	r3, r1
 8012ffc:	f04f 0101 	mov.w	r1, #1
 8013000:	460e      	mov	r6, r1
 8013002:	4620      	mov	r0, r4
 8013004:	4629      	mov	r1, r5
 8013006:	f001 fa1f 	bl	8014448 <__aeabi_dcmplt>
 801300a:	4603      	mov	r3, r0
 801300c:	2b00      	cmp	r3, #0
 801300e:	d102      	bne.n	8013016 <LCD_FillPolyLine+0x246>
 8013010:	f04f 0300 	mov.w	r3, #0
 8013014:	461e      	mov	r6, r3
 8013016:	b2f3      	uxtb	r3, r6
    /* Build a list of nodes. */
    nodes = 0; j = PointCount-1;

    for (i = 0; i < PointCount; i++) 
    {
      if (((POLY_Y(i)<(double) pixelY) && (POLY_Y(j)>=(double) pixelY)) || \
 8013018:	2b00      	cmp	r3, #0
 801301a:	d079      	beq.n	8013110 <LCD_FillPolyLine+0x340>
          ((POLY_Y(j)<(double) pixelY) && (POLY_Y(i)>=(double) pixelY)))
 801301c:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8013020:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013024:	f107 0204 	add.w	r2, r7, #4
 8013028:	6812      	ldr	r2, [r2, #0]
 801302a:	18d3      	adds	r3, r2, r3
 801302c:	881b      	ldrh	r3, [r3, #0]
 801302e:	b21b      	sxth	r3, r3
 8013030:	4618      	mov	r0, r3
 8013032:	f001 f943 	bl	80142bc <__aeabi_i2d>
 8013036:	4604      	mov	r4, r0
 8013038:	460d      	mov	r5, r1
 801303a:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 801303e:	4618      	mov	r0, r3
 8013040:	f001 f92c 	bl	801429c <__aeabi_ui2d>
 8013044:	4602      	mov	r2, r0
 8013046:	460b      	mov	r3, r1
 8013048:	f04f 0101 	mov.w	r1, #1
 801304c:	460e      	mov	r6, r1
 801304e:	4620      	mov	r0, r4
 8013050:	4629      	mov	r1, r5
 8013052:	f001 fa0d 	bl	8014470 <__aeabi_dcmpge>
 8013056:	4603      	mov	r3, r0
 8013058:	2b00      	cmp	r3, #0
 801305a:	d102      	bne.n	8013062 <LCD_FillPolyLine+0x292>
 801305c:	f04f 0300 	mov.w	r3, #0
 8013060:	461e      	mov	r6, r3
 8013062:	b2f3      	uxtb	r3, r6
 8013064:	2b00      	cmp	r3, #0
 8013066:	d053      	beq.n	8013110 <LCD_FillPolyLine+0x340>
      {
        nodeX[nodes++]=(int) (POLY_X(i)+((pixelY-POLY_Y(i))*(POLY_X(j)-POLY_X(i)))/(POLY_Y(j)-POLY_Y(i))); 
 8013068:	f8b7 21ae 	ldrh.w	r2, [r7, #430]	; 0x1ae
 801306c:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8013070:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013074:	f107 0104 	add.w	r1, r7, #4
 8013078:	6809      	ldr	r1, [r1, #0]
 801307a:	18cb      	adds	r3, r1, r3
 801307c:	885b      	ldrh	r3, [r3, #2]
 801307e:	b299      	uxth	r1, r3
 8013080:	f8b7 01ac 	ldrh.w	r0, [r7, #428]	; 0x1ac
 8013084:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8013088:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801308c:	f107 0404 	add.w	r4, r7, #4
 8013090:	6824      	ldr	r4, [r4, #0]
 8013092:	18e3      	adds	r3, r4, r3
 8013094:	881b      	ldrh	r3, [r3, #0]
 8013096:	b21b      	sxth	r3, r3
 8013098:	1ac3      	subs	r3, r0, r3
 801309a:	f8b7 01a8 	ldrh.w	r0, [r7, #424]	; 0x1a8
 801309e:	ea4f 0080 	mov.w	r0, r0, lsl #2
 80130a2:	f107 0404 	add.w	r4, r7, #4
 80130a6:	6824      	ldr	r4, [r4, #0]
 80130a8:	1820      	adds	r0, r4, r0
 80130aa:	8840      	ldrh	r0, [r0, #2]
 80130ac:	b204      	sxth	r4, r0
 80130ae:	f8b7 01aa 	ldrh.w	r0, [r7, #426]	; 0x1aa
 80130b2:	ea4f 0080 	mov.w	r0, r0, lsl #2
 80130b6:	f107 0504 	add.w	r5, r7, #4
 80130ba:	682d      	ldr	r5, [r5, #0]
 80130bc:	1828      	adds	r0, r5, r0
 80130be:	8840      	ldrh	r0, [r0, #2]
 80130c0:	b200      	sxth	r0, r0
 80130c2:	1a20      	subs	r0, r4, r0
 80130c4:	fb00 f003 	mul.w	r0, r0, r3
 80130c8:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	; 0x1a8
 80130cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80130d0:	f107 0404 	add.w	r4, r7, #4
 80130d4:	6824      	ldr	r4, [r4, #0]
 80130d6:	18e3      	adds	r3, r4, r3
 80130d8:	881b      	ldrh	r3, [r3, #0]
 80130da:	b21c      	sxth	r4, r3
 80130dc:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80130e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80130e4:	f107 0504 	add.w	r5, r7, #4
 80130e8:	682d      	ldr	r5, [r5, #0]
 80130ea:	18eb      	adds	r3, r5, r3
 80130ec:	881b      	ldrh	r3, [r3, #0]
 80130ee:	b21b      	sxth	r3, r3
 80130f0:	1ae3      	subs	r3, r4, r3
 80130f2:	fb90 f3f3 	sdiv	r3, r0, r3
 80130f6:	b29b      	uxth	r3, r3
 80130f8:	18cb      	adds	r3, r1, r3
 80130fa:	b299      	uxth	r1, r3
 80130fc:	f107 030c 	add.w	r3, r7, #12
 8013100:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8013104:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8013108:	f103 0301 	add.w	r3, r3, #1
 801310c:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
      }
      j = i; 
 8013110:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8013114:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8
  for (pixelY = IMAGE_TOP; pixelY < IMAGE_BOTTOM; pixelY++) 
  {  
    /* Build a list of nodes. */
    nodes = 0; j = PointCount-1;

    for (i = 0; i < PointCount; i++) 
 8013118:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 801311c:	f103 0301 	add.w	r3, r3, #1
 8013120:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8013124:	f107 0302 	add.w	r3, r7, #2
 8013128:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 801312c:	881b      	ldrh	r3, [r3, #0]
 801312e:	429a      	cmp	r2, r3
 8013130:	f4ff af02 	bcc.w	8012f38 <LCD_FillPolyLine+0x168>
      }
      j = i; 
    }
  
    /* Sort the nodes, via a simple "Bubble" sort. */
    i = 0;
 8013134:	f04f 0300 	mov.w	r3, #0
 8013138:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
    while (i < nodes-1) 
 801313c:	e040      	b.n	80131c0 <LCD_FillPolyLine+0x3f0>
    {
      if (nodeX[i]>nodeX[i+1]) 
 801313e:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8013142:	f107 030c 	add.w	r3, r7, #12
 8013146:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801314a:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 801314e:	f103 0101 	add.w	r1, r3, #1
 8013152:	f107 030c 	add.w	r3, r7, #12
 8013156:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 801315a:	429a      	cmp	r2, r3
 801315c:	d92a      	bls.n	80131b4 <LCD_FillPolyLine+0x3e4>
      {
        swap = nodeX[i]; 
 801315e:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8013162:	f107 030c 	add.w	r3, r7, #12
 8013166:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801316a:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
        nodeX[i] = nodeX[i+1]; 
 801316e:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8013172:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8013176:	f103 0101 	add.w	r1, r3, #1
 801317a:	f107 030c 	add.w	r3, r7, #12
 801317e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8013182:	f107 030c 	add.w	r3, r7, #12
 8013186:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        nodeX[i+1] = swap; 
 801318a:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 801318e:	f103 0201 	add.w	r2, r3, #1
 8013192:	f107 030c 	add.w	r3, r7, #12
 8013196:	f8b7 119c 	ldrh.w	r1, [r7, #412]	; 0x19c
 801319a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if(i)
 801319e:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d00c      	beq.n	80131c0 <LCD_FillPolyLine+0x3f0>
        {
          i--; 
 80131a6:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80131aa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80131ae:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 80131b2:	e005      	b.n	80131c0 <LCD_FillPolyLine+0x3f0>
        }
      }
      else 
      {
        i++;
 80131b4:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80131b8:	f103 0301 	add.w	r3, r3, #1
 80131bc:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
      j = i; 
    }
  
    /* Sort the nodes, via a simple "Bubble" sort. */
    i = 0;
    while (i < nodes-1) 
 80131c0:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 80131c4:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 80131c8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80131cc:	429a      	cmp	r2, r3
 80131ce:	dbb6      	blt.n	801313e <LCD_FillPolyLine+0x36e>
        i++;
      }
    }
  
    /*  Fill the pixels between node pairs. */
    for (i = 0; i < nodes; i+=2) 
 80131d0:	f04f 0300 	mov.w	r3, #0
 80131d4:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 80131d8:	e097      	b.n	801330a <LCD_FillPolyLine+0x53a>
    {
      if(nodeX[i] >= IMAGE_RIGHT) 
 80131da:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 80131de:	f107 030c 	add.w	r3, r7, #12
 80131e2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80131e6:	f8b7 21a4 	ldrh.w	r2, [r7, #420]	; 0x1a4
 80131ea:	429a      	cmp	r2, r3
 80131ec:	f240 8095 	bls.w	801331a <LCD_FillPolyLine+0x54a>
      {
        break;
      }
      if(nodeX[i+1] > IMAGE_LEFT) 
 80131f0:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80131f4:	f103 0201 	add.w	r2, r3, #1
 80131f8:	f107 030c 	add.w	r3, r7, #12
 80131fc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013200:	f8b7 21a6 	ldrh.w	r2, [r7, #422]	; 0x1a6
 8013204:	429a      	cmp	r2, r3
 8013206:	d27a      	bcs.n	80132fe <LCD_FillPolyLine+0x52e>
      {
        if (nodeX[i] < IMAGE_LEFT)
 8013208:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 801320c:	f107 030c 	add.w	r3, r7, #12
 8013210:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013214:	f8b7 21a6 	ldrh.w	r2, [r7, #422]	; 0x1a6
 8013218:	429a      	cmp	r2, r3
 801321a:	d907      	bls.n	801322c <LCD_FillPolyLine+0x45c>
        {
          nodeX[i]=IMAGE_LEFT;
 801321c:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8013220:	f107 030c 	add.w	r3, r7, #12
 8013224:	f8b7 11a6 	ldrh.w	r1, [r7, #422]	; 0x1a6
 8013228:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        if(nodeX[i+1] > IMAGE_RIGHT)
 801322c:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8013230:	f103 0201 	add.w	r2, r3, #1
 8013234:	f107 030c 	add.w	r3, r7, #12
 8013238:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801323c:	f8b7 21a4 	ldrh.w	r2, [r7, #420]	; 0x1a4
 8013240:	429a      	cmp	r2, r3
 8013242:	d209      	bcs.n	8013258 <LCD_FillPolyLine+0x488>
        {
          nodeX[i+1] = IMAGE_RIGHT;
 8013244:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8013248:	f103 0201 	add.w	r2, r3, #1
 801324c:	f107 030c 	add.w	r3, r7, #12
 8013250:	f8b7 11a4 	ldrh.w	r1, [r7, #420]	; 0x1a4
 8013254:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        LCD_SetTextColor(BackColor);
 8013258:	f240 035c 	movw	r3, #92	; 0x5c
 801325c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013260:	881b      	ldrh	r3, [r3, #0]
 8013262:	b29b      	uxth	r3, r3
 8013264:	4618      	mov	r0, r3
 8013266:	f7fe fe81 	bl	8011f6c <LCD_SetTextColor>
        LCD_DrawLine(pixelY, nodeX[i+1], nodeX[i+1] - nodeX[i], LCD_DIR_HORIZONTAL);
 801326a:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 801326e:	f103 0201 	add.w	r2, r3, #1
 8013272:	f107 030c 	add.w	r3, r7, #12
 8013276:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801327a:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 801327e:	f103 0101 	add.w	r1, r3, #1
 8013282:	f107 030c 	add.w	r3, r7, #12
 8013286:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 801328a:	f8b7 01aa 	ldrh.w	r0, [r7, #426]	; 0x1aa
 801328e:	f107 030c 	add.w	r3, r7, #12
 8013292:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8013296:	1acb      	subs	r3, r1, r3
 8013298:	b29b      	uxth	r3, r3
 801329a:	f8b7 11ac 	ldrh.w	r1, [r7, #428]	; 0x1ac
 801329e:	4608      	mov	r0, r1
 80132a0:	4611      	mov	r1, r2
 80132a2:	461a      	mov	r2, r3
 80132a4:	f04f 0300 	mov.w	r3, #0
 80132a8:	f7ff f87c 	bl	80123a4 <LCD_DrawLine>
        LCD_SetTextColor(TextColor);
 80132ac:	f240 0388 	movw	r3, #136	; 0x88
 80132b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80132b4:	881b      	ldrh	r3, [r3, #0]
 80132b6:	b29b      	uxth	r3, r3
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7fe fe57 	bl	8011f6c <LCD_SetTextColor>
        PutPixel(pixelY, nodeX[i+1]);
 80132be:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 80132c2:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80132c6:	f103 0101 	add.w	r1, r3, #1
 80132ca:	f107 030c 	add.w	r3, r7, #12
 80132ce:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80132d2:	b29b      	uxth	r3, r3
 80132d4:	b212      	sxth	r2, r2
 80132d6:	b21b      	sxth	r3, r3
 80132d8:	4610      	mov	r0, r2
 80132da:	4619      	mov	r1, r3
 80132dc:	f000 fa54 	bl	8013788 <PutPixel>
        PutPixel(pixelY, nodeX[i]);
 80132e0:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 80132e4:	f8b7 11aa 	ldrh.w	r1, [r7, #426]	; 0x1aa
 80132e8:	f107 030c 	add.w	r3, r7, #12
 80132ec:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80132f0:	b29b      	uxth	r3, r3
 80132f2:	b212      	sxth	r2, r2
 80132f4:	b21b      	sxth	r3, r3
 80132f6:	4610      	mov	r0, r2
 80132f8:	4619      	mov	r1, r3
 80132fa:	f000 fa45 	bl	8013788 <PutPixel>
        i++;
      }
    }
  
    /*  Fill the pixels between node pairs. */
    for (i = 0; i < nodes; i+=2) 
 80132fe:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8013302:	f103 0302 	add.w	r3, r3, #2
 8013306:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 801330a:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 801330e:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8013312:	429a      	cmp	r2, r3
 8013314:	f4ff af61 	bcc.w	80131da <LCD_FillPolyLine+0x40a>
 8013318:	e000      	b.n	801331c <LCD_FillPolyLine+0x54c>
    {
      if(nodeX[i] >= IMAGE_RIGHT) 
      {
        break;
 801331a:	bf00      	nop
  }
  
  LCD_SetTextColor(BackColor);  

  /*  Loop through the rows of the image. */
  for (pixelY = IMAGE_TOP; pixelY < IMAGE_BOTTOM; pixelY++) 
 801331c:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8013320:	f103 0301 	add.w	r3, r3, #1
 8013324:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
 8013328:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 801332c:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 8013330:	429a      	cmp	r2, r3
 8013332:	f4ff adf1 	bcc.w	8012f18 <LCD_FillPolyLine+0x148>
      }
    }
  } 

  /* draw the edges */
  LCD_SetTextColor(TextColor);
 8013336:	f240 0388 	movw	r3, #136	; 0x88
 801333a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801333e:	881b      	ldrh	r3, [r3, #0]
 8013340:	b29b      	uxth	r3, r3
 8013342:	4618      	mov	r0, r3
 8013344:	f7fe fe12 	bl	8011f6c <LCD_SetTextColor>
}
 8013348:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 801334c:	46bd      	mov	sp, r7
 801334e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013350 <LCD_WriteReg>:
  * @param  LCD_Reg: address of the selected register.
  * @param  LCD_RegValue: value to write to the selected register.
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 8013350:	b480      	push	{r7}
 8013352:	b083      	sub	sp, #12
 8013354:	af00      	add	r7, sp, #0
 8013356:	4602      	mov	r2, r0
 8013358:	460b      	mov	r3, r1
 801335a:	71fa      	strb	r2, [r7, #7]
 801335c:	80bb      	strh	r3, [r7, #4]
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 801335e:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8013362:	79fa      	ldrb	r2, [r7, #7]
 8013364:	b292      	uxth	r2, r2
 8013366:	801a      	strh	r2, [r3, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8013368:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 801336c:	88ba      	ldrh	r2, [r7, #4]
 801336e:	805a      	strh	r2, [r3, #2]
}
 8013370:	f107 070c 	add.w	r7, r7, #12
 8013374:	46bd      	mov	sp, r7
 8013376:	bc80      	pop	{r7}
 8013378:	4770      	bx	lr
 801337a:	bf00      	nop

0801337c <LCD_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCD_Reg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t LCD_ReadReg(uint8_t LCD_Reg)
{
 801337c:	b480      	push	{r7}
 801337e:	b083      	sub	sp, #12
 8013380:	af00      	add	r7, sp, #0
 8013382:	4603      	mov	r3, r0
 8013384:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index (then Read Reg) */
  LCD->LCD_REG = LCD_Reg;
 8013386:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 801338a:	79fa      	ldrb	r2, [r7, #7]
 801338c:	b292      	uxth	r2, r2
 801338e:	801a      	strh	r2, [r3, #0]
  /* Read 16-bit Reg */
  return (LCD->LCD_RAM);
 8013390:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8013394:	885b      	ldrh	r3, [r3, #2]
 8013396:	b29b      	uxth	r3, r3
}
 8013398:	4618      	mov	r0, r3
 801339a:	f107 070c 	add.w	r7, r7, #12
 801339e:	46bd      	mov	sp, r7
 80133a0:	bc80      	pop	{r7}
 80133a2:	4770      	bx	lr

080133a4 <LCD_WriteRAM_Prepare>:
  * @brief  Prepare to write to the LCD RAM.
  * @param  None
  * @retval None
  */
void LCD_WriteRAM_Prepare(void)
{
 80133a4:	b480      	push	{r7}
 80133a6:	af00      	add	r7, sp, #0
  LCD->LCD_REG = LCD_REG_34;
 80133a8:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80133ac:	f04f 0222 	mov.w	r2, #34	; 0x22
 80133b0:	801a      	strh	r2, [r3, #0]
}
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bc80      	pop	{r7}
 80133b6:	4770      	bx	lr

080133b8 <LCD_WriteRAM>:
  * @brief  Writes to the LCD RAM.
  * @param  RGB_Code: the pixel color in RGB mode (5-6-5).
  * @retval None
  */
void LCD_WriteRAM(uint16_t RGB_Code)
{
 80133b8:	b480      	push	{r7}
 80133ba:	b083      	sub	sp, #12
 80133bc:	af00      	add	r7, sp, #0
 80133be:	4603      	mov	r3, r0
 80133c0:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit GRAM Reg */
  LCD->LCD_RAM = RGB_Code;
 80133c2:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80133c6:	88fa      	ldrh	r2, [r7, #6]
 80133c8:	805a      	strh	r2, [r3, #2]
}
 80133ca:	f107 070c 	add.w	r7, r7, #12
 80133ce:	46bd      	mov	sp, r7
 80133d0:	bc80      	pop	{r7}
 80133d2:	4770      	bx	lr

080133d4 <LCD_ReadRAM>:
  * @brief  Reads the LCD RAM.
  * @param  None
  * @retval LCD RAM Value.
  */
uint16_t LCD_ReadRAM(void)
{
 80133d4:	b480      	push	{r7}
 80133d6:	af00      	add	r7, sp, #0
  /* Write 16-bit Index (then Read Reg) */
  LCD->LCD_REG = LCD_REG_34; /* Select GRAM Reg */
 80133d8:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80133dc:	f04f 0222 	mov.w	r2, #34	; 0x22
 80133e0:	801a      	strh	r2, [r3, #0]
  /* Read 16-bit Reg */
  return LCD->LCD_RAM;
 80133e2:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80133e6:	885b      	ldrh	r3, [r3, #2]
 80133e8:	b29b      	uxth	r3, r3
}
 80133ea:	4618      	mov	r0, r3
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bc80      	pop	{r7}
 80133f0:	4770      	bx	lr
 80133f2:	bf00      	nop

080133f4 <LCD_PowerOn>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void LCD_PowerOn(void)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	af00      	add	r7, sp, #0
/* Power On sequence ---------------------------------------------------------*/
  LCD_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80133f8:	f04f 0010 	mov.w	r0, #16
 80133fc:	f04f 0100 	mov.w	r1, #0
 8013400:	f7ff ffa6 	bl	8013350 <LCD_WriteReg>
  LCD_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8013404:	f04f 0011 	mov.w	r0, #17
 8013408:	f04f 0100 	mov.w	r1, #0
 801340c:	f7ff ffa0 	bl	8013350 <LCD_WriteReg>
  LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8013410:	f04f 0012 	mov.w	r0, #18
 8013414:	f04f 0100 	mov.w	r1, #0
 8013418:	f7ff ff9a 	bl	8013350 <LCD_WriteReg>
  LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 801341c:	f04f 0013 	mov.w	r0, #19
 8013420:	f04f 0100 	mov.w	r1, #0
 8013424:	f7ff ff94 	bl	8013350 <LCD_WriteReg>
  _delay_(20);                 /* Dis-charge capacitor power voltage (200ms) */
 8013428:	f04f 0014 	mov.w	r0, #20
 801342c:	f000 f9d6 	bl	80137dc <delay>
  LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8013430:	f04f 0010 	mov.w	r0, #16
 8013434:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8013438:	f7ff ff8a 	bl	8013350 <LCD_WriteReg>
  LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 801343c:	f04f 0011 	mov.w	r0, #17
 8013440:	f240 1137 	movw	r1, #311	; 0x137
 8013444:	f7ff ff84 	bl	8013350 <LCD_WriteReg>
  _delay_(5);                  /* Delay 50 ms */
 8013448:	f04f 0005 	mov.w	r0, #5
 801344c:	f000 f9c6 	bl	80137dc <delay>
  LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8013450:	f04f 0012 	mov.w	r0, #18
 8013454:	f240 1139 	movw	r1, #313	; 0x139
 8013458:	f7ff ff7a 	bl	8013350 <LCD_WriteReg>
  _delay_(5);                  /* Delay 50 ms */
 801345c:	f04f 0005 	mov.w	r0, #5
 8013460:	f000 f9bc 	bl	80137dc <delay>
  LCD_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8013464:	f04f 0013 	mov.w	r0, #19
 8013468:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 801346c:	f7ff ff70 	bl	8013350 <LCD_WriteReg>
  LCD_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8013470:	f04f 0029 	mov.w	r0, #41	; 0x29
 8013474:	f04f 0113 	mov.w	r1, #19
 8013478:	f7ff ff6a 	bl	8013350 <LCD_WriteReg>
  _delay_(5);                  /* Delay 50 ms */
 801347c:	f04f 0005 	mov.w	r0, #5
 8013480:	f000 f9ac 	bl	80137dc <delay>
  LCD_WriteReg(LCD_REG_7, 0x0173);  /* 262K color and display ON */
 8013484:	f04f 0007 	mov.w	r0, #7
 8013488:	f240 1173 	movw	r1, #371	; 0x173
 801348c:	f7ff ff60 	bl	8013350 <LCD_WriteReg>
}
 8013490:	bd80      	pop	{r7, pc}
 8013492:	bf00      	nop

08013494 <LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOn(void)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	af00      	add	r7, sp, #0
  /* Display On */
  LCD_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 8013498:	f04f 0007 	mov.w	r0, #7
 801349c:	f240 1173 	movw	r1, #371	; 0x173
 80134a0:	f7ff ff56 	bl	8013350 <LCD_WriteReg>
}
 80134a4:	bd80      	pop	{r7, pc}
 80134a6:	bf00      	nop

080134a8 <LCD_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOff(void)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	af00      	add	r7, sp, #0
  /* Display Off */
  LCD_WriteReg(LCD_REG_7, 0x0); 
 80134ac:	f04f 0007 	mov.w	r0, #7
 80134b0:	f04f 0100 	mov.w	r1, #0
 80134b4:	f7ff ff4c 	bl	8013350 <LCD_WriteReg>
}
 80134b8:	bd80      	pop	{r7, pc}
 80134ba:	bf00      	nop

080134bc <LCD_CtrlLinesConfig>:
  * @brief  Configures LCD Control lines (FSMC Pins) in alternate function mode.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b082      	sub	sp, #8
 80134c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOD, GPIOE, GPIOF, GPIOG and AFIO clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOG | RCC_AHB1Periph_GPIOE |
 80134c2:	f04f 0078 	mov.w	r0, #120	; 0x78
 80134c6:	f04f 0101 	mov.w	r1, #1
 80134ca:	f7f5 fd65 	bl	8008f98 <RCC_AHB1PeriphClockCmd>
                         RCC_AHB1Periph_GPIOF, ENABLE);

/*-- GPIO Configuration ------------------------------------------------------*/
  /* SRAM Data lines,  NOE and NWE configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
 80134ce:	f24c 7333 	movw	r3, #50995	; 0xc733
 80134d2:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15 |
                                GPIO_Pin_4 |GPIO_Pin_5;;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80134d4:	f04f 0302 	mov.w	r3, #2
 80134d8:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80134da:	f04f 0302 	mov.w	r3, #2
 80134de:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80134e0:	f04f 0300 	mov.w	r3, #0
 80134e4:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80134e6:	f04f 0300 	mov.w	r3, #0
 80134ea:	71fb      	strb	r3, [r7, #7]

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80134ec:	463b      	mov	r3, r7
 80134ee:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80134f2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80134f6:	4619      	mov	r1, r3
 80134f8:	f7f3 fb08 	bl	8006b0c <GPIO_Init>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC);
 80134fc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8013500:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013504:	f04f 0100 	mov.w	r1, #0
 8013508:	f04f 020c 	mov.w	r2, #12
 801350c:	f7f3 fc8c 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FSMC);
 8013510:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8013514:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013518:	f04f 0101 	mov.w	r1, #1
 801351c:	f04f 020c 	mov.w	r2, #12
 8013520:	f7f3 fc82 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_FSMC);
 8013524:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8013528:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801352c:	f04f 0104 	mov.w	r1, #4
 8013530:	f04f 020c 	mov.w	r2, #12
 8013534:	f7f3 fc78 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_FSMC);
 8013538:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801353c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013540:	f04f 0105 	mov.w	r1, #5
 8013544:	f04f 020c 	mov.w	r2, #12
 8013548:	f7f3 fc6e 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FSMC);
 801354c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8013550:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013554:	f04f 0108 	mov.w	r1, #8
 8013558:	f04f 020c 	mov.w	r2, #12
 801355c:	f7f3 fc64 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC);
 8013560:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8013564:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013568:	f04f 0109 	mov.w	r1, #9
 801356c:	f04f 020c 	mov.w	r2, #12
 8013570:	f7f3 fc5a 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
 8013574:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8013578:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801357c:	f04f 010a 	mov.w	r1, #10
 8013580:	f04f 020c 	mov.w	r2, #12
 8013584:	f7f3 fc50 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);
 8013588:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801358c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013590:	f04f 010e 	mov.w	r1, #14
 8013594:	f04f 020c 	mov.w	r2, #12
 8013598:	f7f3 fc46 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);
 801359c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80135a0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80135a4:	f04f 010f 	mov.w	r1, #15
 80135a8:	f04f 020c 	mov.w	r2, #12
 80135ac:	f7f3 fc3c 	bl	8006e28 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
 80135b0:	f64f 7380 	movw	r3, #65408	; 0xff80
 80135b4:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
                                GPIO_Pin_15;
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 80135b6:	463b      	mov	r3, r7
 80135b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80135bc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80135c0:	4619      	mov	r1, r3
 80135c2:	f7f3 faa3 	bl	8006b0c <GPIO_Init>

  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FSMC);
 80135c6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80135ca:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80135ce:	f04f 0107 	mov.w	r1, #7
 80135d2:	f04f 020c 	mov.w	r2, #12
 80135d6:	f7f3 fc27 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FSMC);
 80135da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80135de:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80135e2:	f04f 0108 	mov.w	r1, #8
 80135e6:	f04f 020c 	mov.w	r2, #12
 80135ea:	f7f3 fc1d 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FSMC);
 80135ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80135f2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80135f6:	f04f 0109 	mov.w	r1, #9
 80135fa:	f04f 020c 	mov.w	r2, #12
 80135fe:	f7f3 fc13 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FSMC);
 8013602:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8013606:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801360a:	f04f 010a 	mov.w	r1, #10
 801360e:	f04f 020c 	mov.w	r2, #12
 8013612:	f7f3 fc09 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FSMC);
 8013616:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801361a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801361e:	f04f 010b 	mov.w	r1, #11
 8013622:	f04f 020c 	mov.w	r2, #12
 8013626:	f7f3 fbff 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FSMC);
 801362a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801362e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013632:	f04f 010c 	mov.w	r1, #12
 8013636:	f04f 020c 	mov.w	r2, #12
 801363a:	f7f3 fbf5 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FSMC);
 801363e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8013642:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013646:	f04f 010d 	mov.w	r1, #13
 801364a:	f04f 020c 	mov.w	r2, #12
 801364e:	f7f3 fbeb 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FSMC);
 8013652:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8013656:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801365a:	f04f 010e 	mov.w	r1, #14
 801365e:	f04f 020c 	mov.w	r2, #12
 8013662:	f7f3 fbe1 	bl	8006e28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FSMC);
 8013666:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801366a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801366e:	f04f 010f 	mov.w	r1, #15
 8013672:	f04f 020c 	mov.w	r2, #12
 8013676:	f7f3 fbd7 	bl	8006e28 <GPIO_PinAFConfig>

  /* SRAM Address lines configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 801367a:	f04f 0301 	mov.w	r3, #1
 801367e:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOF, &GPIO_InitStructure);  
 8013680:	463b      	mov	r3, r7
 8013682:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8013686:	f2c4 0002 	movt	r0, #16386	; 0x4002
 801368a:	4619      	mov	r1, r3
 801368c:	f7f3 fa3e 	bl	8006b0c <GPIO_Init>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0, GPIO_AF_FSMC);	   
 8013690:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8013694:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8013698:	f04f 0100 	mov.w	r1, #0
 801369c:	f04f 020c 	mov.w	r2, #12
 80136a0:	f7f3 fbc2 	bl	8006e28 <GPIO_PinAFConfig>

  /* NE3 configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
 80136a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80136a8:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOG, &GPIO_InitStructure);
 80136aa:	463b      	mov	r3, r7
 80136ac:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80136b0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80136b4:	4619      	mov	r1, r3
 80136b6:	f7f3 fa29 	bl	8006b0c <GPIO_Init>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, GPIO_AF_FSMC);
 80136ba:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80136be:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80136c2:	f04f 010a 	mov.w	r1, #10
 80136c6:	f04f 020c 	mov.w	r2, #12
 80136ca:	f7f3 fbad 	bl	8006e28 <GPIO_PinAFConfig>
}
 80136ce:	f107 0708 	add.w	r7, r7, #8
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bd80      	pop	{r7, pc}
 80136d6:	bf00      	nop

080136d8 <LCD_FSMCConfig>:
  * @brief  Configures the Parallel interface (FSMC) for LCD(Parallel mode)
  * @param  None
  * @retval None
  */
void LCD_FSMCConfig(void)
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b096      	sub	sp, #88	; 0x58
 80136dc:	af00      	add	r7, sp, #0
  FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
  FSMC_NORSRAMTimingInitTypeDef  p;
   
  /* Enable FSMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
 80136de:	f04f 0001 	mov.w	r0, #1
 80136e2:	f04f 0101 	mov.w	r1, #1
 80136e6:	f7f5 fcab 	bl	8009040 <RCC_AHB3PeriphClockCmd>
  
/*-- FSMC Configuration ------------------------------------------------------*/
/*----------------------- SRAM Bank 3 ----------------------------------------*/
  /* FSMC_Bank1_NORSRAM4 configuration */
  p.FSMC_AddressSetupTime = 5;
 80136ea:	f04f 0305 	mov.w	r3, #5
 80136ee:	603b      	str	r3, [r7, #0]
  p.FSMC_AddressHoldTime = 0;
 80136f0:	f04f 0300 	mov.w	r3, #0
 80136f4:	607b      	str	r3, [r7, #4]
  p.FSMC_DataSetupTime = 9;
 80136f6:	f04f 0309 	mov.w	r3, #9
 80136fa:	60bb      	str	r3, [r7, #8]
  p.FSMC_BusTurnAroundDuration = 0;
 80136fc:	f04f 0300 	mov.w	r3, #0
 8013700:	60fb      	str	r3, [r7, #12]
  p.FSMC_CLKDivision = 0;
 8013702:	f04f 0300 	mov.w	r3, #0
 8013706:	613b      	str	r3, [r7, #16]
  p.FSMC_DataLatency = 0;
 8013708:	f04f 0300 	mov.w	r3, #0
 801370c:	617b      	str	r3, [r7, #20]
  p.FSMC_AccessMode = FSMC_AccessMode_A;
 801370e:	f04f 0300 	mov.w	r3, #0
 8013712:	61bb      	str	r3, [r7, #24]
        - Data Width = 16bit
        - Write Operation = Enable
        - Extended Mode = Enable
        - Asynchronous Wait = Disable */

  FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;
 8013714:	f04f 0304 	mov.w	r3, #4
 8013718:	61fb      	str	r3, [r7, #28]
  FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
 801371a:	f04f 0300 	mov.w	r3, #0
 801371e:	623b      	str	r3, [r7, #32]
  FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8013720:	f04f 0300 	mov.w	r3, #0
 8013724:	627b      	str	r3, [r7, #36]	; 0x24
  FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
 8013726:	f04f 0310 	mov.w	r3, #16
 801372a:	62bb      	str	r3, [r7, #40]	; 0x28
  FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 801372c:	f04f 0300 	mov.w	r3, #0
 8013730:	62fb      	str	r3, [r7, #44]	; 0x2c
  FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 8013732:	f04f 0300 	mov.w	r3, #0
 8013736:	633b      	str	r3, [r7, #48]	; 0x30
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8013738:	f04f 0300 	mov.w	r3, #0
 801373c:	637b      	str	r3, [r7, #52]	; 0x34
  FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
 801373e:	f04f 0300 	mov.w	r3, #0
 8013742:	63bb      	str	r3, [r7, #56]	; 0x38
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 8013744:	f04f 0300 	mov.w	r3, #0
 8013748:	63fb      	str	r3, [r7, #60]	; 0x3c
  FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 801374a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801374e:	643b      	str	r3, [r7, #64]	; 0x40
  FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
 8013750:	f04f 0300 	mov.w	r3, #0
 8013754:	647b      	str	r3, [r7, #68]	; 0x44
  FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 8013756:	f04f 0300 	mov.w	r3, #0
 801375a:	64bb      	str	r3, [r7, #72]	; 0x48
  FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 801375c:	f04f 0300 	mov.w	r3, #0
 8013760:	64fb      	str	r3, [r7, #76]	; 0x4c
  FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
 8013762:	463b      	mov	r3, r7
 8013764:	653b      	str	r3, [r7, #80]	; 0x50
  FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
 8013766:	463b      	mov	r3, r7
 8013768:	657b      	str	r3, [r7, #84]	; 0x54

  FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);   
 801376a:	f107 031c 	add.w	r3, r7, #28
 801376e:	4618      	mov	r0, r3
 8013770:	f7f2 fb68 	bl	8005e44 <FSMC_NORSRAMInit>

  /* Enable FSMC NOR/SRAM Bank3 */
  FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);
 8013774:	f04f 0004 	mov.w	r0, #4
 8013778:	f04f 0101 	mov.w	r1, #1
 801377c:	f7f2 fc8e 	bl	800609c <FSMC_NORSRAMCmd>
}
 8013780:	f107 0758 	add.w	r7, r7, #88	; 0x58
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}

08013788 <PutPixel>:
  * @param  x: pixel x.
  * @param  y: pixel y.  
  * @retval None
  */
static void PutPixel(int16_t x, int16_t y)
{ 
 8013788:	b580      	push	{r7, lr}
 801378a:	b082      	sub	sp, #8
 801378c:	af00      	add	r7, sp, #0
 801378e:	4602      	mov	r2, r0
 8013790:	460b      	mov	r3, r1
 8013792:	80fa      	strh	r2, [r7, #6]
 8013794:	80bb      	strh	r3, [r7, #4]
  if(x < 0 || x > 239 || y < 0 || y > 319)
 8013796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801379a:	2b00      	cmp	r3, #0
 801379c:	db18      	blt.n	80137d0 <PutPixel+0x48>
 801379e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80137a2:	2bef      	cmp	r3, #239	; 0xef
 80137a4:	dc14      	bgt.n	80137d0 <PutPixel+0x48>
 80137a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	db10      	blt.n	80137d0 <PutPixel+0x48>
 80137ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80137b2:	f240 133f 	movw	r3, #319	; 0x13f
 80137b6:	429a      	cmp	r2, r3
 80137b8:	dc0a      	bgt.n	80137d0 <PutPixel+0x48>
  {
    return;  
  }
  LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
 80137ba:	88fa      	ldrh	r2, [r7, #6]
 80137bc:	88bb      	ldrh	r3, [r7, #4]
 80137be:	4610      	mov	r0, r2
 80137c0:	4619      	mov	r1, r3
 80137c2:	f04f 0201 	mov.w	r2, #1
 80137c6:	f04f 0300 	mov.w	r3, #0
 80137ca:	f7fe fdeb 	bl	80123a4 <LCD_DrawLine>
 80137ce:	e000      	b.n	80137d2 <PutPixel+0x4a>
  */
static void PutPixel(int16_t x, int16_t y)
{ 
  if(x < 0 || x > 239 || y < 0 || y > 319)
  {
    return;  
 80137d0:	bf00      	nop
  }
  LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
}
 80137d2:	f107 0708 	add.w	r7, r7, #8
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd80      	pop	{r7, pc}
 80137da:	bf00      	nop

080137dc <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 80137dc:	b480      	push	{r7}
 80137de:	b085      	sub	sp, #20
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 80137e4:	f04f 0300 	mov.w	r3, #0
 80137e8:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 80137ea:	687a      	ldr	r2, [r7, #4]
 80137ec:	f248 63a0 	movw	r3, #34464	; 0x86a0
 80137f0:	f2c0 0301 	movt	r3, #1
 80137f4:	fb03 f302 	mul.w	r3, r3, r2
 80137f8:	60fb      	str	r3, [r7, #12]
 80137fa:	e003      	b.n	8013804 <delay+0x28>
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8013802:	60fb      	str	r3, [r7, #12]
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d1f8      	bne.n	80137fc <delay+0x20>
  {
  }
}
 801380a:	f107 0714 	add.w	r7, r7, #20
 801380e:	46bd      	mov	sp, r7
 8013810:	bc80      	pop	{r7}
 8013812:	4770      	bx	lr

08013814 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8013814:	b480      	push	{r7}
 8013816:	af00      	add	r7, sp, #0
}
 8013818:	46bd      	mov	sp, r7
 801381a:	bc80      	pop	{r7}
 801381c:	4770      	bx	lr
 801381e:	bf00      	nop

08013820 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8013820:	b480      	push	{r7}
 8013822:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8013824:	e7fe      	b.n	8013824 <HardFault_Handler+0x4>
 8013826:	bf00      	nop

08013828 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8013828:	b480      	push	{r7}
 801382a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 801382c:	e7fe      	b.n	801382c <MemManage_Handler+0x4>
 801382e:	bf00      	nop

08013830 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8013830:	b480      	push	{r7}
 8013832:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8013834:	e7fe      	b.n	8013834 <BusFault_Handler+0x4>
 8013836:	bf00      	nop

08013838 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8013838:	b480      	push	{r7}
 801383a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 801383c:	e7fe      	b.n	801383c <UsageFault_Handler+0x4>
 801383e:	bf00      	nop

08013840 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8013840:	b480      	push	{r7}
 8013842:	af00      	add	r7, sp, #0
}
 8013844:	46bd      	mov	sp, r7
 8013846:	bc80      	pop	{r7}
 8013848:	4770      	bx	lr
 801384a:	bf00      	nop

0801384c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 801384c:	b480      	push	{r7}
 801384e:	af00      	add	r7, sp, #0
}
 8013850:	46bd      	mov	sp, r7
 8013852:	bc80      	pop	{r7}
 8013854:	4770      	bx	lr
 8013856:	bf00      	nop

08013858 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8013858:	b480      	push	{r7}
 801385a:	af00      	add	r7, sp, #0
}
 801385c:	46bd      	mov	sp, r7
 801385e:	bc80      	pop	{r7}
 8013860:	4770      	bx	lr
 8013862:	bf00      	nop

08013864 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8013864:	b580      	push	{r7, lr}
 8013866:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 8013868:	f7fb fb64 	bl	800ef34 <TimingDelay_Decrement>
}
 801386c:	bd80      	pop	{r7, pc}
 801386e:	bf00      	nop

08013870 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	af00      	add	r7, sp, #0
  if(EXTI_GetITStatus(WAKEUP_BUTTON_EXTI_LINE) != RESET)
 8013874:	f04f 0001 	mov.w	r0, #1
 8013878:	f7f1 fd78 	bl	800536c <EXTI_GetITStatus>
 801387c:	4603      	mov	r3, r0
 801387e:	2b00      	cmp	r3, #0
 8013880:	d015      	beq.n	80138ae <EXTI0_IRQHandler+0x3e>
  {
    /* Toggle LD3 */
    STM_EVAL_LEDToggle(LED3);
 8013882:	f04f 0002 	mov.w	r0, #2
 8013886:	f7fb fbd7 	bl	800f038 <STM_EVAL_LEDToggle>

    LCD_DisplayStringLine(Line4, (uint8_t *)"IT:  WAKEUP Pressed ");
 801388a:	f7fe fba3 	bl	8011fd4 <LCD_GetFont>
 801388e:	4603      	mov	r3, r0
 8013890:	88db      	ldrh	r3, [r3, #6]
 8013892:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013896:	b29b      	uxth	r3, r3
 8013898:	4618      	mov	r0, r3
 801389a:	f646 7188 	movw	r1, #28552	; 0x6f88
 801389e:	f6c0 0101 	movt	r1, #2049	; 0x801
 80138a2:	f7fe fcdb 	bl	801225c <LCD_DisplayStringLine>

    EXTI_ClearITPendingBit(WAKEUP_BUTTON_EXTI_LINE);
 80138a6:	f04f 0001 	mov.w	r0, #1
 80138aa:	f7f1 fd8b 	bl	80053c4 <EXTI_ClearITPendingBit>
  }
}
 80138ae:	bd80      	pop	{r7, pc}

080138b0 <EXTI2_IRQHandler>:
  * @brief  This function handles External line 2 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	af00      	add	r7, sp, #0
  if(EXTI_GetITStatus(IOE_IT_EXTI_LINE) != RESET)
 80138b4:	f04f 0004 	mov.w	r0, #4
 80138b8:	f7f1 fd58 	bl	800536c <EXTI_GetITStatus>
 80138bc:	4603      	mov	r3, r0
 80138be:	2b00      	cmp	r3, #0
 80138c0:	f000 81a4 	beq.w	8013c0c <EXTI2_IRQHandler+0x35c>
#ifdef IOE_INTERRUPT_MODE   
    static JOY_State_TypeDef JoyState = JOY_NONE;
    static TS_STATE* TS_State;
    
    /* Check if the interrupt source is the Touch Screen */
    if (IOE_GetGITStatus(IOE_1_ADDR, IOE_TS_IT) & IOE_TS_IT)
 80138c4:	f04f 0082 	mov.w	r0, #130	; 0x82
 80138c8:	f04f 0107 	mov.w	r1, #7
 80138cc:	f7fc fc3c 	bl	8010148 <IOE_GetGITStatus>
 80138d0:	4603      	mov	r3, r0
 80138d2:	f003 0307 	and.w	r3, r3, #7
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	f000 80db 	beq.w	8013a92 <EXTI2_IRQHandler+0x1e2>
    {
      /* Update the structure with the current position */
      TS_State = IOE_TS_GetState();  
 80138dc:	f7fc fb36 	bl	800ff4c <IOE_TS_GetState>
 80138e0:	4602      	mov	r2, r0
 80138e2:	f240 038c 	movw	r3, #140	; 0x8c
 80138e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80138ea:	601a      	str	r2, [r3, #0]
      
      if ((TS_State->TouchDetected) && (TS_State->Y < 220) && (TS_State->Y > 180))
 80138ec:	f240 038c 	movw	r3, #140	; 0x8c
 80138f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	881b      	ldrh	r3, [r3, #0]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	f000 80b1 	beq.w	8013a60 <EXTI2_IRQHandler+0x1b0>
 80138fe:	f240 038c 	movw	r3, #140	; 0x8c
 8013902:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	889b      	ldrh	r3, [r3, #4]
 801390a:	2bdb      	cmp	r3, #219	; 0xdb
 801390c:	f200 80a8 	bhi.w	8013a60 <EXTI2_IRQHandler+0x1b0>
 8013910:	f240 038c 	movw	r3, #140	; 0x8c
 8013914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	889b      	ldrh	r3, [r3, #4]
 801391c:	2bb4      	cmp	r3, #180	; 0xb4
 801391e:	f240 809f 	bls.w	8013a60 <EXTI2_IRQHandler+0x1b0>
      {
        if ((TS_State->X > 10) && (TS_State->X < 70))
 8013922:	f240 038c 	movw	r3, #140	; 0x8c
 8013926:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	885b      	ldrh	r3, [r3, #2]
 801392e:	2b0a      	cmp	r3, #10
 8013930:	d91e      	bls.n	8013970 <EXTI2_IRQHandler+0xc0>
 8013932:	f240 038c 	movw	r3, #140	; 0x8c
 8013936:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	885b      	ldrh	r3, [r3, #2]
 801393e:	2b45      	cmp	r3, #69	; 0x45
 8013940:	d816      	bhi.n	8013970 <EXTI2_IRQHandler+0xc0>
        {
          LCD_DisplayStringLine(Line6, (uint8_t *)" LD4                ");
 8013942:	f7fe fb47 	bl	8011fd4 <LCD_GetFont>
 8013946:	4603      	mov	r3, r0
 8013948:	88db      	ldrh	r3, [r3, #6]
 801394a:	461a      	mov	r2, r3
 801394c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8013950:	18d3      	adds	r3, r2, r3
 8013952:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013956:	b29b      	uxth	r3, r3
 8013958:	4618      	mov	r0, r3
 801395a:	f646 71a0 	movw	r1, #28576	; 0x6fa0
 801395e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8013962:	f7fe fc7b 	bl	801225c <LCD_DisplayStringLine>
          STM_EVAL_LEDOn(LED4);
 8013966:	f04f 0003 	mov.w	r0, #3
 801396a:	f7fb fb31 	bl	800efd0 <STM_EVAL_LEDOn>
 801396e:	e076      	b.n	8013a5e <EXTI2_IRQHandler+0x1ae>
        }
        else if ((TS_State->X > 90) && (TS_State->X < 150))
 8013970:	f240 038c 	movw	r3, #140	; 0x8c
 8013974:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	885b      	ldrh	r3, [r3, #2]
 801397c:	2b5a      	cmp	r3, #90	; 0x5a
 801397e:	d91e      	bls.n	80139be <EXTI2_IRQHandler+0x10e>
 8013980:	f240 038c 	movw	r3, #140	; 0x8c
 8013984:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	885b      	ldrh	r3, [r3, #2]
 801398c:	2b95      	cmp	r3, #149	; 0x95
 801398e:	d816      	bhi.n	80139be <EXTI2_IRQHandler+0x10e>
        {
          LCD_DisplayStringLine(Line6, (uint8_t *)"      LD3           ");
 8013990:	f7fe fb20 	bl	8011fd4 <LCD_GetFont>
 8013994:	4603      	mov	r3, r0
 8013996:	88db      	ldrh	r3, [r3, #6]
 8013998:	461a      	mov	r2, r3
 801399a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801399e:	18d3      	adds	r3, r2, r3
 80139a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80139a4:	b29b      	uxth	r3, r3
 80139a6:	4618      	mov	r0, r3
 80139a8:	f646 71b8 	movw	r1, #28600	; 0x6fb8
 80139ac:	f6c0 0101 	movt	r1, #2049	; 0x801
 80139b0:	f7fe fc54 	bl	801225c <LCD_DisplayStringLine>
          STM_EVAL_LEDOn(LED3);
 80139b4:	f04f 0002 	mov.w	r0, #2
 80139b8:	f7fb fb0a 	bl	800efd0 <STM_EVAL_LEDOn>
 80139bc:	e04f      	b.n	8013a5e <EXTI2_IRQHandler+0x1ae>
        }
        else if ((TS_State->X > 170) && (TS_State->X < 230))
 80139be:	f240 038c 	movw	r3, #140	; 0x8c
 80139c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	885b      	ldrh	r3, [r3, #2]
 80139ca:	2baa      	cmp	r3, #170	; 0xaa
 80139cc:	d91e      	bls.n	8013a0c <EXTI2_IRQHandler+0x15c>
 80139ce:	f240 038c 	movw	r3, #140	; 0x8c
 80139d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	885b      	ldrh	r3, [r3, #2]
 80139da:	2be5      	cmp	r3, #229	; 0xe5
 80139dc:	d816      	bhi.n	8013a0c <EXTI2_IRQHandler+0x15c>
        {
          LCD_DisplayStringLine(Line6, (uint8_t *)"           LD2      ");
 80139de:	f7fe faf9 	bl	8011fd4 <LCD_GetFont>
 80139e2:	4603      	mov	r3, r0
 80139e4:	88db      	ldrh	r3, [r3, #6]
 80139e6:	461a      	mov	r2, r3
 80139e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80139ec:	18d3      	adds	r3, r2, r3
 80139ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80139f2:	b29b      	uxth	r3, r3
 80139f4:	4618      	mov	r0, r3
 80139f6:	f646 71d0 	movw	r1, #28624	; 0x6fd0
 80139fa:	f6c0 0101 	movt	r1, #2049	; 0x801
 80139fe:	f7fe fc2d 	bl	801225c <LCD_DisplayStringLine>
          STM_EVAL_LEDOn(LED2);
 8013a02:	f04f 0001 	mov.w	r0, #1
 8013a06:	f7fb fae3 	bl	800efd0 <STM_EVAL_LEDOn>
 8013a0a:	e028      	b.n	8013a5e <EXTI2_IRQHandler+0x1ae>
        }     
        else if ((TS_State->X > 250) && (TS_State->X < 310))
 8013a0c:	f240 038c 	movw	r3, #140	; 0x8c
 8013a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	885b      	ldrh	r3, [r3, #2]
 8013a18:	2bfa      	cmp	r3, #250	; 0xfa
 8013a1a:	d932      	bls.n	8013a82 <EXTI2_IRQHandler+0x1d2>
 8013a1c:	f240 038c 	movw	r3, #140	; 0x8c
 8013a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	885a      	ldrh	r2, [r3, #2]
 8013a28:	f240 1335 	movw	r3, #309	; 0x135
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	d828      	bhi.n	8013a82 <EXTI2_IRQHandler+0x1d2>
        {
          LCD_DisplayStringLine(Line6, (uint8_t *)"                LD1 ");
 8013a30:	f7fe fad0 	bl	8011fd4 <LCD_GetFont>
 8013a34:	4603      	mov	r3, r0
 8013a36:	88db      	ldrh	r3, [r3, #6]
 8013a38:	461a      	mov	r2, r3
 8013a3a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8013a3e:	18d3      	adds	r3, r2, r3
 8013a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013a44:	b29b      	uxth	r3, r3
 8013a46:	4618      	mov	r0, r3
 8013a48:	f646 71e8 	movw	r1, #28648	; 0x6fe8
 8013a4c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8013a50:	f7fe fc04 	bl	801225c <LCD_DisplayStringLine>
          STM_EVAL_LEDOn(LED1);
 8013a54:	f04f 0000 	mov.w	r0, #0
 8013a58:	f7fb faba 	bl	800efd0 <STM_EVAL_LEDOn>
      /* Update the structure with the current position */
      TS_State = IOE_TS_GetState();  
      
      if ((TS_State->TouchDetected) && (TS_State->Y < 220) && (TS_State->Y > 180))
      {
        if ((TS_State->X > 10) && (TS_State->X < 70))
 8013a5c:	e011      	b.n	8013a82 <EXTI2_IRQHandler+0x1d2>
 8013a5e:	e010      	b.n	8013a82 <EXTI2_IRQHandler+0x1d2>
          STM_EVAL_LEDOn(LED1);
        }
      }
      else
      {
        STM_EVAL_LEDOff(LED1);
 8013a60:	f04f 0000 	mov.w	r0, #0
 8013a64:	f7fb face 	bl	800f004 <STM_EVAL_LEDOff>
        STM_EVAL_LEDOff(LED2);
 8013a68:	f04f 0001 	mov.w	r0, #1
 8013a6c:	f7fb faca 	bl	800f004 <STM_EVAL_LEDOff>
        STM_EVAL_LEDOff(LED3);
 8013a70:	f04f 0002 	mov.w	r0, #2
 8013a74:	f7fb fac6 	bl	800f004 <STM_EVAL_LEDOff>
        STM_EVAL_LEDOff(LED4);
 8013a78:	f04f 0003 	mov.w	r0, #3
 8013a7c:	f7fb fac2 	bl	800f004 <STM_EVAL_LEDOff>
 8013a80:	e000      	b.n	8013a84 <EXTI2_IRQHandler+0x1d4>
      /* Update the structure with the current position */
      TS_State = IOE_TS_GetState();  
      
      if ((TS_State->TouchDetected) && (TS_State->Y < 220) && (TS_State->Y > 180))
      {
        if ((TS_State->X > 10) && (TS_State->X < 70))
 8013a82:	bf00      	nop
        STM_EVAL_LEDOff(LED3);
        STM_EVAL_LEDOff(LED4);
      }    
      
      /* Clear the interrupt pending bits */    
      IOE_ClearGITPending(IOE_1_ADDR, IOE_TS_IT);      
 8013a84:	f04f 0082 	mov.w	r0, #130	; 0x82
 8013a88:	f04f 0107 	mov.w	r1, #7
 8013a8c:	f7fc fb80 	bl	8010190 <IOE_ClearGITPending>
 8013a90:	e0b8      	b.n	8013c04 <EXTI2_IRQHandler+0x354>
    }
    else if (IOE_GetGITStatus(IOE_2_ADDR, IOE_GIT_GPIO))
 8013a92:	f04f 0088 	mov.w	r0, #136	; 0x88
 8013a96:	f04f 0180 	mov.w	r1, #128	; 0x80
 8013a9a:	f7fc fb55 	bl	8010148 <IOE_GetGITStatus>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	f000 80a3 	beq.w	8013bec <EXTI2_IRQHandler+0x33c>
    {
      /* Get the Joytick State */
      JoyState = IOE_JoyStickGetState();
 8013aa6:	f7fc fa0d 	bl	800fec4 <IOE_JoyStickGetState>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	461a      	mov	r2, r3
 8013aae:	f240 0390 	movw	r3, #144	; 0x90
 8013ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ab6:	701a      	strb	r2, [r3, #0]
      
      switch (JoyState)
 8013ab8:	f240 0390 	movw	r3, #144	; 0x90
 8013abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013ac0:	781b      	ldrb	r3, [r3, #0]
 8013ac2:	2b05      	cmp	r3, #5
 8013ac4:	d874      	bhi.n	8013bb0 <EXTI2_IRQHandler+0x300>
 8013ac6:	a201      	add	r2, pc, #4	; (adr r2, 8013acc <EXTI2_IRQHandler+0x21c>)
 8013ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013acc:	08013ae5 	.word	0x08013ae5
 8013ad0:	08013b8f 	.word	0x08013b8f
 8013ad4:	08013b29 	.word	0x08013b29
 8013ad8:	08013b4b 	.word	0x08013b4b
 8013adc:	08013b6d 	.word	0x08013b6d
 8013ae0:	08013b07 	.word	0x08013b07
      {
      case JOY_NONE:
        LCD_DisplayStringLine(Line5, (uint8_t *)"JOY: IT  ----        ");
 8013ae4:	f7fe fa76 	bl	8011fd4 <LCD_GetFont>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	88db      	ldrh	r3, [r3, #6]
 8013aec:	461a      	mov	r2, r3
 8013aee:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8013af2:	18d3      	adds	r3, r2, r3
 8013af4:	b29b      	uxth	r3, r3
 8013af6:	4618      	mov	r0, r3
 8013af8:	f247 0100 	movw	r1, #28672	; 0x7000
 8013afc:	f6c0 0101 	movt	r1, #2049	; 0x801
 8013b00:	f7fe fbac 	bl	801225c <LCD_DisplayStringLine>
        break;
 8013b04:	e065      	b.n	8013bd2 <EXTI2_IRQHandler+0x322>
      case JOY_UP:
        LCD_DisplayStringLine(Line5, (uint8_t *)"JOY: IT  UP         ");
 8013b06:	f7fe fa65 	bl	8011fd4 <LCD_GetFont>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	88db      	ldrh	r3, [r3, #6]
 8013b0e:	461a      	mov	r2, r3
 8013b10:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8013b14:	18d3      	adds	r3, r2, r3
 8013b16:	b29b      	uxth	r3, r3
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f247 0118 	movw	r1, #28696	; 0x7018
 8013b1e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8013b22:	f7fe fb9b 	bl	801225c <LCD_DisplayStringLine>
        break;     
 8013b26:	e054      	b.n	8013bd2 <EXTI2_IRQHandler+0x322>
      case JOY_DOWN:
        LCD_DisplayStringLine(Line5, (uint8_t *)"JOY: IT DOWN        ");
 8013b28:	f7fe fa54 	bl	8011fd4 <LCD_GetFont>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	88db      	ldrh	r3, [r3, #6]
 8013b30:	461a      	mov	r2, r3
 8013b32:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8013b36:	18d3      	adds	r3, r2, r3
 8013b38:	b29b      	uxth	r3, r3
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f247 0130 	movw	r1, #28720	; 0x7030
 8013b40:	f6c0 0101 	movt	r1, #2049	; 0x801
 8013b44:	f7fe fb8a 	bl	801225c <LCD_DisplayStringLine>
        break;          
 8013b48:	e043      	b.n	8013bd2 <EXTI2_IRQHandler+0x322>
      case JOY_LEFT:
        LCD_DisplayStringLine(Line5, (uint8_t *)"JOY: IT LEFT        ");
 8013b4a:	f7fe fa43 	bl	8011fd4 <LCD_GetFont>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	88db      	ldrh	r3, [r3, #6]
 8013b52:	461a      	mov	r2, r3
 8013b54:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8013b58:	18d3      	adds	r3, r2, r3
 8013b5a:	b29b      	uxth	r3, r3
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f247 0148 	movw	r1, #28744	; 0x7048
 8013b62:	f6c0 0101 	movt	r1, #2049	; 0x801
 8013b66:	f7fe fb79 	bl	801225c <LCD_DisplayStringLine>
        break;         
 8013b6a:	e032      	b.n	8013bd2 <EXTI2_IRQHandler+0x322>
      case JOY_RIGHT:
        LCD_DisplayStringLine(Line5, (uint8_t *)"JOY: IT  RIGHT        ");
 8013b6c:	f7fe fa32 	bl	8011fd4 <LCD_GetFont>
 8013b70:	4603      	mov	r3, r0
 8013b72:	88db      	ldrh	r3, [r3, #6]
 8013b74:	461a      	mov	r2, r3
 8013b76:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8013b7a:	18d3      	adds	r3, r2, r3
 8013b7c:	b29b      	uxth	r3, r3
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f247 0160 	movw	r1, #28768	; 0x7060
 8013b84:	f6c0 0101 	movt	r1, #2049	; 0x801
 8013b88:	f7fe fb68 	bl	801225c <LCD_DisplayStringLine>
        break;                 
 8013b8c:	e021      	b.n	8013bd2 <EXTI2_IRQHandler+0x322>
      case JOY_CENTER:
        LCD_DisplayStringLine(Line5, (uint8_t *)"JOY: IT CENTER       ");
 8013b8e:	f7fe fa21 	bl	8011fd4 <LCD_GetFont>
 8013b92:	4603      	mov	r3, r0
 8013b94:	88db      	ldrh	r3, [r3, #6]
 8013b96:	461a      	mov	r2, r3
 8013b98:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8013b9c:	18d3      	adds	r3, r2, r3
 8013b9e:	b29b      	uxth	r3, r3
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f247 0178 	movw	r1, #28792	; 0x7078
 8013ba6:	f6c0 0101 	movt	r1, #2049	; 0x801
 8013baa:	f7fe fb57 	bl	801225c <LCD_DisplayStringLine>
        break; 
 8013bae:	e010      	b.n	8013bd2 <EXTI2_IRQHandler+0x322>
      default:
        LCD_DisplayStringLine(Line5, (uint8_t *)"JOY: IT ERROR      ");
 8013bb0:	f7fe fa10 	bl	8011fd4 <LCD_GetFont>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	88db      	ldrh	r3, [r3, #6]
 8013bb8:	461a      	mov	r2, r3
 8013bba:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8013bbe:	18d3      	adds	r3, r2, r3
 8013bc0:	b29b      	uxth	r3, r3
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f247 0190 	movw	r1, #28816	; 0x7090
 8013bc8:	f6c0 0101 	movt	r1, #2049	; 0x801
 8013bcc:	f7fe fb46 	bl	801225c <LCD_DisplayStringLine>
        break;         
 8013bd0:	bf00      	nop
      }   
      
      /* Clear the interrupt pending bits */    
      IOE_ClearGITPending(IOE_2_ADDR, IOE_GIT_GPIO);
 8013bd2:	f04f 0088 	mov.w	r0, #136	; 0x88
 8013bd6:	f04f 0180 	mov.w	r1, #128	; 0x80
 8013bda:	f7fc fad9 	bl	8010190 <IOE_ClearGITPending>
      IOE_ClearIOITPending(IOE_2_ADDR, IOE_JOY_IT);     
 8013bde:	f04f 0088 	mov.w	r0, #136	; 0x88
 8013be2:	f04f 01f8 	mov.w	r1, #248	; 0xf8
 8013be6:	f7fc fb0b 	bl	8010200 <IOE_ClearIOITPending>
 8013bea:	e00b      	b.n	8013c04 <EXTI2_IRQHandler+0x354>
    }
    else
    {
      IOE_ClearGITPending(IOE_1_ADDR, ALL_IT);
 8013bec:	f04f 0082 	mov.w	r0, #130	; 0x82
 8013bf0:	f04f 01ff 	mov.w	r1, #255	; 0xff
 8013bf4:	f7fc facc 	bl	8010190 <IOE_ClearGITPending>
      IOE_ClearGITPending(IOE_2_ADDR, ALL_IT);
 8013bf8:	f04f 0088 	mov.w	r0, #136	; 0x88
 8013bfc:	f04f 01ff 	mov.w	r1, #255	; 0xff
 8013c00:	f7fc fac6 	bl	8010190 <IOE_ClearGITPending>
    }
#endif /* IOE_INTERRUPT_MODE */
    
    EXTI_ClearITPendingBit(IOE_IT_EXTI_LINE);
 8013c04:	f04f 0004 	mov.w	r0, #4
 8013c08:	f7f1 fbdc 	bl	80053c4 <EXTI_ClearITPendingBit>
  }  
}
 8013c0c:	bd80      	pop	{r7, pc}
 8013c0e:	bf00      	nop

08013c10 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	af00      	add	r7, sp, #0
  if(EXTI_GetITStatus(KEY_BUTTON_EXTI_LINE) != RESET)
 8013c14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8013c18:	f7f1 fba8 	bl	800536c <EXTI_GetITStatus>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d015      	beq.n	8013c4e <EXTI15_10_IRQHandler+0x3e>
  {
    /* Toggle LD1 */
    STM_EVAL_LEDToggle(LED1);
 8013c22:	f04f 0000 	mov.w	r0, #0
 8013c26:	f7fb fa07 	bl	800f038 <STM_EVAL_LEDToggle>

    LCD_DisplayStringLine(Line4, (uint8_t *)"IT:   KEY Pressed   ");
 8013c2a:	f7fe f9d3 	bl	8011fd4 <LCD_GetFont>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	88db      	ldrh	r3, [r3, #6]
 8013c32:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013c36:	b29b      	uxth	r3, r3
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f247 01a4 	movw	r1, #28836	; 0x70a4
 8013c3e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8013c42:	f7fe fb0b 	bl	801225c <LCD_DisplayStringLine>
	
    EXTI_ClearITPendingBit(KEY_BUTTON_EXTI_LINE);
 8013c46:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8013c4a:	f7f1 fbbb 	bl	80053c4 <EXTI_ClearITPendingBit>
  }

  if(EXTI_GetITStatus(TAMPER_BUTTON_EXTI_LINE) != RESET)
 8013c4e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8013c52:	f7f1 fb8b 	bl	800536c <EXTI_GetITStatus>
 8013c56:	4603      	mov	r3, r0
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d015      	beq.n	8013c88 <EXTI15_10_IRQHandler+0x78>
  {
    /* Toggle LD2 */
    STM_EVAL_LEDToggle(LED2);
 8013c5c:	f04f 0001 	mov.w	r0, #1
 8013c60:	f7fb f9ea 	bl	800f038 <STM_EVAL_LEDToggle>

    LCD_DisplayStringLine(Line4, (uint8_t *)"IT: TAMPER Pressed  ");
 8013c64:	f7fe f9b6 	bl	8011fd4 <LCD_GetFont>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	88db      	ldrh	r3, [r3, #6]
 8013c6c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	4618      	mov	r0, r3
 8013c74:	f247 01bc 	movw	r1, #28860	; 0x70bc
 8013c78:	f6c0 0101 	movt	r1, #2049	; 0x801
 8013c7c:	f7fe faee 	bl	801225c <LCD_DisplayStringLine>
   
    EXTI_ClearITPendingBit(TAMPER_BUTTON_EXTI_LINE);
 8013c80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8013c84:	f7f1 fb9e 	bl	80053c4 <EXTI_ClearITPendingBit>
  }
}
 8013c88:	bd80      	pop	{r7, pc}
 8013c8a:	bf00      	nop

08013c8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	af00      	add	r7, sp, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8013c90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013c94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013c98:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8013c9c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013ca0:	6812      	ldr	r2, [r2, #0]
 8013ca2:	f042 0201 	orr.w	r2, r2, #1
 8013ca6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8013ca8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013cac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013cb0:	f04f 0200 	mov.w	r2, #0
 8013cb4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8013cb6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013cba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013cbe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8013cc2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013cc6:	6812      	ldr	r2, [r2, #0]
 8013cc8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8013ccc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8013cd0:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8013cd2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013cd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013cda:	f243 0210 	movw	r2, #12304	; 0x3010
 8013cde:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8013ce2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8013ce4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013ce8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013cec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8013cf0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013cf4:	6812      	ldr	r2, [r2, #0]
 8013cf6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8013cfa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8013cfc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013d00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013d04:	f04f 0200 	mov.w	r2, #0
 8013d08:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8013d0a:	f000 f8c1 	bl	8013e90 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8013d0e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8013d12:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8013d16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013d1a:	609a      	str	r2, [r3, #8]
#endif
}
 8013d1c:	bd80      	pop	{r7, pc}
 8013d1e:	bf00      	nop

08013d20 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8013d20:	b480      	push	{r7}
 8013d22:	b087      	sub	sp, #28
 8013d24:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8013d26:	f04f 0300 	mov.w	r3, #0
 8013d2a:	613b      	str	r3, [r7, #16]
 8013d2c:	f04f 0300 	mov.w	r3, #0
 8013d30:	617b      	str	r3, [r7, #20]
 8013d32:	f04f 0302 	mov.w	r3, #2
 8013d36:	60fb      	str	r3, [r7, #12]
 8013d38:	f04f 0300 	mov.w	r3, #0
 8013d3c:	60bb      	str	r3, [r7, #8]
 8013d3e:	f04f 0302 	mov.w	r3, #2
 8013d42:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8013d44:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013d48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013d4c:	689b      	ldr	r3, [r3, #8]
 8013d4e:	f003 030c 	and.w	r3, r3, #12
 8013d52:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8013d54:	693b      	ldr	r3, [r7, #16]
 8013d56:	2b04      	cmp	r3, #4
 8013d58:	d00d      	beq.n	8013d76 <SystemCoreClockUpdate+0x56>
 8013d5a:	2b08      	cmp	r3, #8
 8013d5c:	d015      	beq.n	8013d8a <SystemCoreClockUpdate+0x6a>
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d169      	bne.n	8013e36 <SystemCoreClockUpdate+0x116>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8013d62:	f240 0360 	movw	r3, #96	; 0x60
 8013d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d6a:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8013d6e:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8013d72:	601a      	str	r2, [r3, #0]
      break;
 8013d74:	e069      	b.n	8013e4a <SystemCoreClockUpdate+0x12a>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8013d76:	f240 0360 	movw	r3, #96	; 0x60
 8013d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013d7e:	f647 0240 	movw	r2, #30784	; 0x7840
 8013d82:	f2c0 127d 	movt	r2, #381	; 0x17d
 8013d86:	601a      	str	r2, [r3, #0]
      break;
 8013d88:	e05f      	b.n	8013e4a <SystemCoreClockUpdate+0x12a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8013d8a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013d8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013d92:	685b      	ldr	r3, [r3, #4]
 8013d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013d98:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8013d9c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013d9e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013da2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013da6:	685b      	ldr	r3, [r3, #4]
 8013da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013dac:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8013dae:	68bb      	ldr	r3, [r7, #8]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d014      	beq.n	8013dde <SystemCoreClockUpdate+0xbe>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8013db4:	f647 0340 	movw	r3, #30784	; 0x7840
 8013db8:	f2c0 137d 	movt	r3, #381	; 0x17d
 8013dbc:	687a      	ldr	r2, [r7, #4]
 8013dbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8013dc2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013dc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013dca:	6859      	ldr	r1, [r3, #4]
 8013dcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013dd0:	400b      	ands	r3, r1
 8013dd2:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8013dd6:	fb03 f302 	mul.w	r3, r3, r2
 8013dda:	617b      	str	r3, [r7, #20]
 8013ddc:	e013      	b.n	8013e06 <SystemCoreClockUpdate+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8013dde:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8013de2:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8013de6:	687a      	ldr	r2, [r7, #4]
 8013de8:	fbb3 f2f2 	udiv	r2, r3, r2
 8013dec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013df4:	6859      	ldr	r1, [r3, #4]
 8013df6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013dfa:	400b      	ands	r3, r1
 8013dfc:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8013e00:	fb03 f302 	mul.w	r3, r3, r2
 8013e04:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8013e06:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013e0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013e0e:	685b      	ldr	r3, [r3, #4]
 8013e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8013e14:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8013e18:	f103 0301 	add.w	r3, r3, #1
 8013e1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013e20:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8013e22:	697a      	ldr	r2, [r7, #20]
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	fbb2 f2f3 	udiv	r2, r2, r3
 8013e2a:	f240 0360 	movw	r3, #96	; 0x60
 8013e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e32:	601a      	str	r2, [r3, #0]
      break;
 8013e34:	e009      	b.n	8013e4a <SystemCoreClockUpdate+0x12a>
    default:
      SystemCoreClock = HSI_VALUE;
 8013e36:	f240 0360 	movw	r3, #96	; 0x60
 8013e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e3e:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8013e42:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8013e46:	601a      	str	r2, [r3, #0]
      break;
 8013e48:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8013e4a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013e4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013e52:	689b      	ldr	r3, [r3, #8]
 8013e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013e58:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8013e5c:	f240 0364 	movw	r3, #100	; 0x64
 8013e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e64:	5c9b      	ldrb	r3, [r3, r2]
 8013e66:	b2db      	uxtb	r3, r3
 8013e68:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8013e6a:	f240 0360 	movw	r3, #96	; 0x60
 8013e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e72:	681a      	ldr	r2, [r3, #0]
 8013e74:	693b      	ldr	r3, [r7, #16]
 8013e76:	fa22 f203 	lsr.w	r2, r2, r3
 8013e7a:	f240 0360 	movw	r3, #96	; 0x60
 8013e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013e82:	601a      	str	r2, [r3, #0]
}
 8013e84:	f107 071c 	add.w	r7, r7, #28
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bc80      	pop	{r7}
 8013e8c:	4770      	bx	lr
 8013e8e:	bf00      	nop

08013e90 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8013e90:	b480      	push	{r7}
 8013e92:	b083      	sub	sp, #12
 8013e94:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8013e96:	f04f 0300 	mov.w	r3, #0
 8013e9a:	607b      	str	r3, [r7, #4]
 8013e9c:	f04f 0300 	mov.w	r3, #0
 8013ea0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8013ea2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013ea6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013eaa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8013eae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013eb2:	6812      	ldr	r2, [r2, #0]
 8013eb4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8013eb8:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8013eba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013ebe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013ec8:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f103 0301 	add.w	r3, r3, #1
 8013ed0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8013ed2:	683b      	ldr	r3, [r7, #0]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d103      	bne.n	8013ee0 <SetSysClock+0x50>
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8013ede:	d1ec      	bne.n	8013eba <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8013ee0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013ee4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d003      	beq.n	8013efa <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 8013ef2:	f04f 0301 	mov.w	r3, #1
 8013ef6:	603b      	str	r3, [r7, #0]
 8013ef8:	e002      	b.n	8013f00 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8013efa:	f04f 0300 	mov.w	r3, #0
 8013efe:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	2b01      	cmp	r3, #1
 8013f04:	f040 8082 	bne.w	801400c <SetSysClock+0x17c>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8013f08:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013f0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013f10:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8013f14:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013f18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8013f1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8013f1e:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8013f20:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8013f24:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8013f28:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8013f2c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8013f30:	6812      	ldr	r2, [r2, #0]
 8013f32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013f36:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8013f38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013f3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013f40:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8013f44:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013f48:	6892      	ldr	r2, [r2, #8]
 8013f4a:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8013f4c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013f50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013f54:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8013f58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013f5c:	6892      	ldr	r2, [r2, #8]
 8013f5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013f62:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8013f64:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013f68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013f6c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8013f70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013f74:	6892      	ldr	r2, [r2, #8]
 8013f76:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8013f7a:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8013f7c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013f80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013f84:	f245 4219 	movw	r2, #21529	; 0x5419
 8013f88:	f2c0 7240 	movt	r2, #1856	; 0x740
 8013f8c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8013f8e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013f92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013f96:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8013f9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013f9e:	6812      	ldr	r2, [r2, #0]
 8013fa0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8013fa4:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8013fa6:	bf00      	nop
 8013fa8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013fac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d0f6      	beq.n	8013fa8 <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8013fba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013fbe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013fc2:	f240 6205 	movw	r2, #1541	; 0x605
 8013fc6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8013fc8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013fcc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013fd0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8013fd4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013fd8:	6892      	ldr	r2, [r2, #8]
 8013fda:	f022 0203 	bic.w	r2, r2, #3
 8013fde:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8013fe0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013fe4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013fe8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8013fec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8013ff0:	6892      	ldr	r2, [r2, #8]
 8013ff2:	f042 0202 	orr.w	r2, r2, #2
 8013ff6:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8013ff8:	bf00      	nop
 8013ffa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013ffe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8014002:	689b      	ldr	r3, [r3, #8]
 8014004:	f003 030c 	and.w	r3, r3, #12
 8014008:	2b08      	cmp	r3, #8
 801400a:	d1f6      	bne.n	8013ffa <SetSysClock+0x16a>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 801400c:	f107 070c 	add.w	r7, r7, #12
 8014010:	46bd      	mov	sp, r7
 8014012:	bc80      	pop	{r7}
 8014014:	4770      	bx	lr
 8014016:	bf00      	nop

08014018 <__aeabi_drsub>:
 8014018:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 801401c:	e002      	b.n	8014024 <__adddf3>
 801401e:	bf00      	nop

08014020 <__aeabi_dsub>:
 8014020:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08014024 <__adddf3>:
 8014024:	b530      	push	{r4, r5, lr}
 8014026:	ea4f 0441 	mov.w	r4, r1, lsl #1
 801402a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 801402e:	ea94 0f05 	teq	r4, r5
 8014032:	bf08      	it	eq
 8014034:	ea90 0f02 	teqeq	r0, r2
 8014038:	bf1f      	itttt	ne
 801403a:	ea54 0c00 	orrsne.w	ip, r4, r0
 801403e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8014042:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8014046:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 801404a:	f000 80e2 	beq.w	8014212 <__adddf3+0x1ee>
 801404e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8014052:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8014056:	bfb8      	it	lt
 8014058:	426d      	neglt	r5, r5
 801405a:	dd0c      	ble.n	8014076 <__adddf3+0x52>
 801405c:	442c      	add	r4, r5
 801405e:	ea80 0202 	eor.w	r2, r0, r2
 8014062:	ea81 0303 	eor.w	r3, r1, r3
 8014066:	ea82 0000 	eor.w	r0, r2, r0
 801406a:	ea83 0101 	eor.w	r1, r3, r1
 801406e:	ea80 0202 	eor.w	r2, r0, r2
 8014072:	ea81 0303 	eor.w	r3, r1, r3
 8014076:	2d36      	cmp	r5, #54	; 0x36
 8014078:	bf88      	it	hi
 801407a:	bd30      	pophi	{r4, r5, pc}
 801407c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8014080:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8014084:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8014088:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 801408c:	d002      	beq.n	8014094 <__adddf3+0x70>
 801408e:	4240      	negs	r0, r0
 8014090:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8014094:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8014098:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801409c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80140a0:	d002      	beq.n	80140a8 <__adddf3+0x84>
 80140a2:	4252      	negs	r2, r2
 80140a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80140a8:	ea94 0f05 	teq	r4, r5
 80140ac:	f000 80a7 	beq.w	80141fe <__adddf3+0x1da>
 80140b0:	f1a4 0401 	sub.w	r4, r4, #1
 80140b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80140b8:	db0d      	blt.n	80140d6 <__adddf3+0xb2>
 80140ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80140be:	fa22 f205 	lsr.w	r2, r2, r5
 80140c2:	1880      	adds	r0, r0, r2
 80140c4:	f141 0100 	adc.w	r1, r1, #0
 80140c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80140cc:	1880      	adds	r0, r0, r2
 80140ce:	fa43 f305 	asr.w	r3, r3, r5
 80140d2:	4159      	adcs	r1, r3
 80140d4:	e00e      	b.n	80140f4 <__adddf3+0xd0>
 80140d6:	f1a5 0520 	sub.w	r5, r5, #32
 80140da:	f10e 0e20 	add.w	lr, lr, #32
 80140de:	2a01      	cmp	r2, #1
 80140e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80140e4:	bf28      	it	cs
 80140e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80140ea:	fa43 f305 	asr.w	r3, r3, r5
 80140ee:	18c0      	adds	r0, r0, r3
 80140f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80140f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80140f8:	d507      	bpl.n	801410a <__adddf3+0xe6>
 80140fa:	f04f 0e00 	mov.w	lr, #0
 80140fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8014102:	eb7e 0000 	sbcs.w	r0, lr, r0
 8014106:	eb6e 0101 	sbc.w	r1, lr, r1
 801410a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801410e:	d31b      	bcc.n	8014148 <__adddf3+0x124>
 8014110:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8014114:	d30c      	bcc.n	8014130 <__adddf3+0x10c>
 8014116:	0849      	lsrs	r1, r1, #1
 8014118:	ea5f 0030 	movs.w	r0, r0, rrx
 801411c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8014120:	f104 0401 	add.w	r4, r4, #1
 8014124:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8014128:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 801412c:	f080 809a 	bcs.w	8014264 <__adddf3+0x240>
 8014130:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8014134:	bf08      	it	eq
 8014136:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 801413a:	f150 0000 	adcs.w	r0, r0, #0
 801413e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8014142:	ea41 0105 	orr.w	r1, r1, r5
 8014146:	bd30      	pop	{r4, r5, pc}
 8014148:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 801414c:	4140      	adcs	r0, r0
 801414e:	eb41 0101 	adc.w	r1, r1, r1
 8014152:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8014156:	f1a4 0401 	sub.w	r4, r4, #1
 801415a:	d1e9      	bne.n	8014130 <__adddf3+0x10c>
 801415c:	f091 0f00 	teq	r1, #0
 8014160:	bf04      	itt	eq
 8014162:	4601      	moveq	r1, r0
 8014164:	2000      	moveq	r0, #0
 8014166:	fab1 f381 	clz	r3, r1
 801416a:	bf08      	it	eq
 801416c:	3320      	addeq	r3, #32
 801416e:	f1a3 030b 	sub.w	r3, r3, #11
 8014172:	f1b3 0220 	subs.w	r2, r3, #32
 8014176:	da0c      	bge.n	8014192 <__adddf3+0x16e>
 8014178:	320c      	adds	r2, #12
 801417a:	dd08      	ble.n	801418e <__adddf3+0x16a>
 801417c:	f102 0c14 	add.w	ip, r2, #20
 8014180:	f1c2 020c 	rsb	r2, r2, #12
 8014184:	fa01 f00c 	lsl.w	r0, r1, ip
 8014188:	fa21 f102 	lsr.w	r1, r1, r2
 801418c:	e00c      	b.n	80141a8 <__adddf3+0x184>
 801418e:	f102 0214 	add.w	r2, r2, #20
 8014192:	bfd8      	it	le
 8014194:	f1c2 0c20 	rsble	ip, r2, #32
 8014198:	fa01 f102 	lsl.w	r1, r1, r2
 801419c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80141a0:	bfdc      	itt	le
 80141a2:	ea41 010c 	orrle.w	r1, r1, ip
 80141a6:	4090      	lslle	r0, r2
 80141a8:	1ae4      	subs	r4, r4, r3
 80141aa:	bfa2      	ittt	ge
 80141ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80141b0:	4329      	orrge	r1, r5
 80141b2:	bd30      	popge	{r4, r5, pc}
 80141b4:	ea6f 0404 	mvn.w	r4, r4
 80141b8:	3c1f      	subs	r4, #31
 80141ba:	da1c      	bge.n	80141f6 <__adddf3+0x1d2>
 80141bc:	340c      	adds	r4, #12
 80141be:	dc0e      	bgt.n	80141de <__adddf3+0x1ba>
 80141c0:	f104 0414 	add.w	r4, r4, #20
 80141c4:	f1c4 0220 	rsb	r2, r4, #32
 80141c8:	fa20 f004 	lsr.w	r0, r0, r4
 80141cc:	fa01 f302 	lsl.w	r3, r1, r2
 80141d0:	ea40 0003 	orr.w	r0, r0, r3
 80141d4:	fa21 f304 	lsr.w	r3, r1, r4
 80141d8:	ea45 0103 	orr.w	r1, r5, r3
 80141dc:	bd30      	pop	{r4, r5, pc}
 80141de:	f1c4 040c 	rsb	r4, r4, #12
 80141e2:	f1c4 0220 	rsb	r2, r4, #32
 80141e6:	fa20 f002 	lsr.w	r0, r0, r2
 80141ea:	fa01 f304 	lsl.w	r3, r1, r4
 80141ee:	ea40 0003 	orr.w	r0, r0, r3
 80141f2:	4629      	mov	r1, r5
 80141f4:	bd30      	pop	{r4, r5, pc}
 80141f6:	fa21 f004 	lsr.w	r0, r1, r4
 80141fa:	4629      	mov	r1, r5
 80141fc:	bd30      	pop	{r4, r5, pc}
 80141fe:	f094 0f00 	teq	r4, #0
 8014202:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8014206:	bf06      	itte	eq
 8014208:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 801420c:	3401      	addeq	r4, #1
 801420e:	3d01      	subne	r5, #1
 8014210:	e74e      	b.n	80140b0 <__adddf3+0x8c>
 8014212:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8014216:	bf18      	it	ne
 8014218:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 801421c:	d029      	beq.n	8014272 <__adddf3+0x24e>
 801421e:	ea94 0f05 	teq	r4, r5
 8014222:	bf08      	it	eq
 8014224:	ea90 0f02 	teqeq	r0, r2
 8014228:	d005      	beq.n	8014236 <__adddf3+0x212>
 801422a:	ea54 0c00 	orrs.w	ip, r4, r0
 801422e:	bf04      	itt	eq
 8014230:	4619      	moveq	r1, r3
 8014232:	4610      	moveq	r0, r2
 8014234:	bd30      	pop	{r4, r5, pc}
 8014236:	ea91 0f03 	teq	r1, r3
 801423a:	bf1e      	ittt	ne
 801423c:	2100      	movne	r1, #0
 801423e:	2000      	movne	r0, #0
 8014240:	bd30      	popne	{r4, r5, pc}
 8014242:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8014246:	d105      	bne.n	8014254 <__adddf3+0x230>
 8014248:	0040      	lsls	r0, r0, #1
 801424a:	4149      	adcs	r1, r1
 801424c:	bf28      	it	cs
 801424e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8014252:	bd30      	pop	{r4, r5, pc}
 8014254:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8014258:	bf3c      	itt	cc
 801425a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 801425e:	bd30      	popcc	{r4, r5, pc}
 8014260:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8014264:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8014268:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801426c:	f04f 0000 	mov.w	r0, #0
 8014270:	bd30      	pop	{r4, r5, pc}
 8014272:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8014276:	bf1a      	itte	ne
 8014278:	4619      	movne	r1, r3
 801427a:	4610      	movne	r0, r2
 801427c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8014280:	bf1c      	itt	ne
 8014282:	460b      	movne	r3, r1
 8014284:	4602      	movne	r2, r0
 8014286:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 801428a:	bf06      	itte	eq
 801428c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8014290:	ea91 0f03 	teqeq	r1, r3
 8014294:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8014298:	bd30      	pop	{r4, r5, pc}
 801429a:	bf00      	nop

0801429c <__aeabi_ui2d>:
 801429c:	f090 0f00 	teq	r0, #0
 80142a0:	bf04      	itt	eq
 80142a2:	2100      	moveq	r1, #0
 80142a4:	4770      	bxeq	lr
 80142a6:	b530      	push	{r4, r5, lr}
 80142a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80142ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80142b0:	f04f 0500 	mov.w	r5, #0
 80142b4:	f04f 0100 	mov.w	r1, #0
 80142b8:	e750      	b.n	801415c <__adddf3+0x138>
 80142ba:	bf00      	nop

080142bc <__aeabi_i2d>:
 80142bc:	f090 0f00 	teq	r0, #0
 80142c0:	bf04      	itt	eq
 80142c2:	2100      	moveq	r1, #0
 80142c4:	4770      	bxeq	lr
 80142c6:	b530      	push	{r4, r5, lr}
 80142c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80142cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80142d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80142d4:	bf48      	it	mi
 80142d6:	4240      	negmi	r0, r0
 80142d8:	f04f 0100 	mov.w	r1, #0
 80142dc:	e73e      	b.n	801415c <__adddf3+0x138>
 80142de:	bf00      	nop

080142e0 <__aeabi_f2d>:
 80142e0:	0042      	lsls	r2, r0, #1
 80142e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80142e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80142ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80142ee:	bf1f      	itttt	ne
 80142f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80142f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80142f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80142fc:	4770      	bxne	lr
 80142fe:	f092 0f00 	teq	r2, #0
 8014302:	bf14      	ite	ne
 8014304:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8014308:	4770      	bxeq	lr
 801430a:	b530      	push	{r4, r5, lr}
 801430c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8014310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8014314:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014318:	e720      	b.n	801415c <__adddf3+0x138>
 801431a:	bf00      	nop

0801431c <__aeabi_ul2d>:
 801431c:	ea50 0201 	orrs.w	r2, r0, r1
 8014320:	bf08      	it	eq
 8014322:	4770      	bxeq	lr
 8014324:	b530      	push	{r4, r5, lr}
 8014326:	f04f 0500 	mov.w	r5, #0
 801432a:	e00a      	b.n	8014342 <__aeabi_l2d+0x16>

0801432c <__aeabi_l2d>:
 801432c:	ea50 0201 	orrs.w	r2, r0, r1
 8014330:	bf08      	it	eq
 8014332:	4770      	bxeq	lr
 8014334:	b530      	push	{r4, r5, lr}
 8014336:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 801433a:	d502      	bpl.n	8014342 <__aeabi_l2d+0x16>
 801433c:	4240      	negs	r0, r0
 801433e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8014342:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8014346:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801434a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 801434e:	f43f aedc 	beq.w	801410a <__adddf3+0xe6>
 8014352:	f04f 0203 	mov.w	r2, #3
 8014356:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801435a:	bf18      	it	ne
 801435c:	3203      	addne	r2, #3
 801435e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8014362:	bf18      	it	ne
 8014364:	3203      	addne	r2, #3
 8014366:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801436a:	f1c2 0320 	rsb	r3, r2, #32
 801436e:	fa00 fc03 	lsl.w	ip, r0, r3
 8014372:	fa20 f002 	lsr.w	r0, r0, r2
 8014376:	fa01 fe03 	lsl.w	lr, r1, r3
 801437a:	ea40 000e 	orr.w	r0, r0, lr
 801437e:	fa21 f102 	lsr.w	r1, r1, r2
 8014382:	4414      	add	r4, r2
 8014384:	e6c1      	b.n	801410a <__adddf3+0xe6>
 8014386:	bf00      	nop

08014388 <__gedf2>:
 8014388:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801438c:	e006      	b.n	801439c <__cmpdf2+0x4>
 801438e:	bf00      	nop

08014390 <__ledf2>:
 8014390:	f04f 0c01 	mov.w	ip, #1
 8014394:	e002      	b.n	801439c <__cmpdf2+0x4>
 8014396:	bf00      	nop

08014398 <__cmpdf2>:
 8014398:	f04f 0c01 	mov.w	ip, #1
 801439c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80143a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80143a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80143a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80143ac:	bf18      	it	ne
 80143ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80143b2:	d01b      	beq.n	80143ec <__cmpdf2+0x54>
 80143b4:	b001      	add	sp, #4
 80143b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80143ba:	bf0c      	ite	eq
 80143bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80143c0:	ea91 0f03 	teqne	r1, r3
 80143c4:	bf02      	ittt	eq
 80143c6:	ea90 0f02 	teqeq	r0, r2
 80143ca:	2000      	moveq	r0, #0
 80143cc:	4770      	bxeq	lr
 80143ce:	f110 0f00 	cmn.w	r0, #0
 80143d2:	ea91 0f03 	teq	r1, r3
 80143d6:	bf58      	it	pl
 80143d8:	4299      	cmppl	r1, r3
 80143da:	bf08      	it	eq
 80143dc:	4290      	cmpeq	r0, r2
 80143de:	bf2c      	ite	cs
 80143e0:	17d8      	asrcs	r0, r3, #31
 80143e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80143e6:	f040 0001 	orr.w	r0, r0, #1
 80143ea:	4770      	bx	lr
 80143ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80143f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80143f4:	d102      	bne.n	80143fc <__cmpdf2+0x64>
 80143f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80143fa:	d107      	bne.n	801440c <__cmpdf2+0x74>
 80143fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8014400:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8014404:	d1d6      	bne.n	80143b4 <__cmpdf2+0x1c>
 8014406:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801440a:	d0d3      	beq.n	80143b4 <__cmpdf2+0x1c>
 801440c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8014410:	4770      	bx	lr
 8014412:	bf00      	nop

08014414 <__aeabi_cdrcmple>:
 8014414:	4684      	mov	ip, r0
 8014416:	4610      	mov	r0, r2
 8014418:	4662      	mov	r2, ip
 801441a:	468c      	mov	ip, r1
 801441c:	4619      	mov	r1, r3
 801441e:	4663      	mov	r3, ip
 8014420:	e000      	b.n	8014424 <__aeabi_cdcmpeq>
 8014422:	bf00      	nop

08014424 <__aeabi_cdcmpeq>:
 8014424:	b501      	push	{r0, lr}
 8014426:	f7ff ffb7 	bl	8014398 <__cmpdf2>
 801442a:	2800      	cmp	r0, #0
 801442c:	bf48      	it	mi
 801442e:	f110 0f00 	cmnmi.w	r0, #0
 8014432:	bd01      	pop	{r0, pc}

08014434 <__aeabi_dcmpeq>:
 8014434:	f84d ed08 	str.w	lr, [sp, #-8]!
 8014438:	f7ff fff4 	bl	8014424 <__aeabi_cdcmpeq>
 801443c:	bf0c      	ite	eq
 801443e:	2001      	moveq	r0, #1
 8014440:	2000      	movne	r0, #0
 8014442:	f85d fb08 	ldr.w	pc, [sp], #8
 8014446:	bf00      	nop

08014448 <__aeabi_dcmplt>:
 8014448:	f84d ed08 	str.w	lr, [sp, #-8]!
 801444c:	f7ff ffea 	bl	8014424 <__aeabi_cdcmpeq>
 8014450:	bf34      	ite	cc
 8014452:	2001      	movcc	r0, #1
 8014454:	2000      	movcs	r0, #0
 8014456:	f85d fb08 	ldr.w	pc, [sp], #8
 801445a:	bf00      	nop

0801445c <__aeabi_dcmple>:
 801445c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8014460:	f7ff ffe0 	bl	8014424 <__aeabi_cdcmpeq>
 8014464:	bf94      	ite	ls
 8014466:	2001      	movls	r0, #1
 8014468:	2000      	movhi	r0, #0
 801446a:	f85d fb08 	ldr.w	pc, [sp], #8
 801446e:	bf00      	nop

08014470 <__aeabi_dcmpge>:
 8014470:	f84d ed08 	str.w	lr, [sp, #-8]!
 8014474:	f7ff ffce 	bl	8014414 <__aeabi_cdrcmple>
 8014478:	bf94      	ite	ls
 801447a:	2001      	movls	r0, #1
 801447c:	2000      	movhi	r0, #0
 801447e:	f85d fb08 	ldr.w	pc, [sp], #8
 8014482:	bf00      	nop

08014484 <__aeabi_dcmpgt>:
 8014484:	f84d ed08 	str.w	lr, [sp, #-8]!
 8014488:	f7ff ffc4 	bl	8014414 <__aeabi_cdrcmple>
 801448c:	bf34      	ite	cc
 801448e:	2001      	movcc	r0, #1
 8014490:	2000      	movcs	r0, #0
 8014492:	f85d fb08 	ldr.w	pc, [sp], #8
 8014496:	bf00      	nop
 8014498:	53202020 	.word	0x53202020
 801449c:	32334d54 	.word	0x32334d54
 80144a0:	2d477834 	.word	0x2d477834
 80144a4:	4c415645 	.word	0x4c415645
 80144a8:	20202020 	.word	0x20202020
 80144ac:	00000000 	.word	0x00000000
 80144b0:	78452020 	.word	0x78452020
 80144b4:	6c706d61 	.word	0x6c706d61
 80144b8:	6e6f2065 	.word	0x6e6f2065
 80144bc:	776f6820 	.word	0x776f6820
 80144c0:	206f7420 	.word	0x206f7420
 80144c4:	00000000 	.word	0x00000000
 80144c8:	65737520 	.word	0x65737520
 80144cc:	65687420 	.word	0x65687420
 80144d0:	204f4920 	.word	0x204f4920
 80144d4:	61707845 	.word	0x61707845
 80144d8:	7265646e 	.word	0x7265646e
 80144dc:	00000000 	.word	0x00000000
 80144e0:	49202020 	.word	0x49202020
 80144e4:	7845204f 	.word	0x7845204f
 80144e8:	646e6170 	.word	0x646e6170
 80144ec:	4f207265 	.word	0x4f207265
 80144f0:	2020204b 	.word	0x2020204b
 80144f4:	00000000 	.word	0x00000000
 80144f8:	45204f49 	.word	0x45204f49
 80144fc:	6e617078 	.word	0x6e617078
 8014500:	20726564 	.word	0x20726564
 8014504:	4c494146 	.word	0x4c494146
 8014508:	00204445 	.word	0x00204445
 801450c:	656c5020 	.word	0x656c5020
 8014510:	20657361 	.word	0x20657361
 8014514:	65736552 	.word	0x65736552
 8014518:	68742074 	.word	0x68742074
 801451c:	00202065 	.word	0x00202065
 8014520:	62202020 	.word	0x62202020
 8014524:	6472616f 	.word	0x6472616f
 8014528:	646e6120 	.word	0x646e6120
 801452c:	61747320 	.word	0x61747320
 8014530:	00207472 	.word	0x00207472
 8014534:	20202020 	.word	0x20202020
 8014538:	69616761 	.word	0x69616761
 801453c:	2020206e 	.word	0x2020206e
 8014540:	20202020 	.word	0x20202020
 8014544:	00202020 	.word	0x00202020

08014548 <GPIO_PIN>:
 8014548:	01000040 00800200                       @.......

08014550 <GPIO_CLK>:
 8014550:	00000040 00000040 00000100 00000004     @...@...........

08014560 <BUTTON_PIN>:
 8014560:	20000001 00008000                       ... ....

08014568 <BUTTON_CLK>:
 8014568:	00000001 00000004 00000040              ........@...

08014574 <BUTTON_EXTI_LINE>:
 8014574:	20000001 00008000                       ... ....

0801457c <BUTTON_PORT_SOURCE>:
 801457c:	00020000 00000006                       ........

08014584 <BUTTON_PIN_SOURCE>:
 8014584:	000d0000 0000000f                       ........

0801458c <BUTTON_IRQn>:
 801458c:	00280006 00000028                       ..(.(...

08014594 <COM_USART_CLK>:
 8014594:	00040000                                ....

08014598 <COM_TX_PORT_CLK>:
 8014598:	00000004                                ....

0801459c <COM_RX_PORT_CLK>:
 801459c:	00000004                                ....

080145a0 <COM_TX_PIN>:
 80145a0:	00000400                                ....

080145a4 <COM_RX_PIN>:
 80145a4:	00000800                                ....

080145a8 <COM_TX_PIN_SOURCE>:
 80145a8:	0000000a                                ....

080145ac <COM_RX_PIN_SOURCE>:
 80145ac:	0000000b                                ....

080145b0 <COM_TX_AF>:
 80145b0:	00000007                                ....

080145b4 <COM_RX_AF>:
 80145b4:	00000007                                ....

080145b8 <ASCII16x24_Table>:
	...
 80145e8:	01800000 01800180 01800180 01800180     ................
 80145f8:	01800180 01800180 01800180 00000000     ................
 8014608:	01800180 00000000 00000000 00000000     ................
 8014618:	00000000 00cc00cc 00cc00cc 00cc00cc     ................
	...
 8014654:	0c600c60 06300c60 1ffe0630 06301ffe     `.`.`.0.0.....0.
 8014664:	03180738 1ffe1ffe 03180318 018c018c     8...............
 8014674:	0000018c 00800000 0ff803e0 1c8c0e9c     ................
 8014684:	008c188c 01f80098 0e8007e0 188c1c80     ................
 8014694:	189c188c 0ff00cb8 008003e0 00000080     ................
	...
 80146ac:	180e0000 0c110c1b 06110611 03110311     ................
 80146bc:	018e019b 6cc038c0 44604460 44304430     .....8.l`D`D0D0D
 80146cc:	6c184418 0000380c 00000000 01e00000     .D.l.8..........
 80146dc:	073803f0 06180618 01f00330 00f800f0     ..8.....0.......
 80146ec:	330e319c 1c061e06 3f061c06 21f073fc     .1.3.......?.s.!
	...
 801470c:	000c000c 000c000c 000c000c 00000000     ................
	...
 8014738:	02000000 01800300 00c000c0 00600060     ............`.`.
 8014748:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 8014758:	00600060 00c000c0 03000180 00000200     `.`.............
 8014768:	00200000 00c00060 01800180 03000300     .. .`...........
 8014778:	06000600 06000600 06000600 06000600     ................
 8014788:	03000300 01800180 006000c0 00000020     ..........`. ...
	...
 80147a4:	00c000c0 07f806d8 033001e0 00000738     ..........0.8...
	...
 80147d4:	01800180 01800180 3ffc0180 01803ffc     ...........?.?..
 80147e4:	01800180 01800180 00000000 00000000     ................
	...
 8014818:	01800000 01000180 00800100 00000000     ................
	...
 8014840:	07e007e0 00000000 00000000 00000000     ................
	...
 8014878:	00c00000 000000c0 00000000 00000000     ................
 8014888:	0c000000 06000c00 06000600 03000300     ................
 8014898:	03800300 01800180 00c00180 00c000c0     ................
 80148a8:	00600060 00000000 00000000 00000000     `.`.............
 80148b8:	03e00000 0e3807f0 180c0c18 180c180c     ......8.........
 80148c8:	180c180c 180c180c 180c180c 0e380c18     ..............8.
 80148d8:	03e007f0 00000000 00000000 00000000     ................
 80148e8:	01000000 01c00180 019801f0 01800188     ................
 80148f8:	01800180 01800180 01800180 01800180     ................
 8014908:	01800180 00000000 00000000 00000000     ................
 8014918:	03e00000 0c180ff8 180c180c 18001800     ................
 8014928:	06000c00 01800300 006000c0 00180030     ..........`.0...
 8014938:	1ffc1ffc 00000000 00000000 00000000     ................
 8014948:	01e00000 0e1807f8 0c0c0c0c 06000c00     ................
 8014958:	07c003c0 18000c00 180c1800 0c18180c     ................
 8014968:	03e007f8 00000000 00000000 00000000     ................
 8014978:	0c000000 0f000e00 0d800f00 0c600cc0     ..............`.
 8014988:	0c300c60 0c0c0c18 3ffc3ffc 0c000c00     `.0......?.?....
 8014998:	0c000c00 00000000 00000000 00000000     ................
 80149a8:	0ff80000 00180ff8 000c0018 07fc03ec     ................
 80149b8:	1c000e1c 18001800 180c1800 0e180c1c     ................
 80149c8:	03e007f8 00000000 00000000 00000000     ................
 80149d8:	07c00000 1c380ff0 00181818 03cc000c     ......8.........
 80149e8:	0e3c0fec 180c1c1c 180c180c 0e381c18     ..<...........8.
 80149f8:	03e007f0 00000000 00000000 00000000     ................
 8014a08:	1ffc0000 0c001ffc 06000600 03800300     ................
 8014a18:	01c00180 00e000c0 00600060 00300070     ........`.`.p.0.
 8014a28:	00300030 00000000 00000000 00000000     0.0.............
 8014a38:	03e00000 0e3807f0 0c180c18 06380c18     ......8.......8.
 8014a48:	07f007f0 180c0c18 180c180c 0c38180c     ..............8.
 8014a58:	03e00ff8 00000000 00000000 00000000     ................
 8014a68:	03e00000 0e3807f0 180c0c1c 180c180c     ......8.........
 8014a78:	1e381c1c 19e01bf8 0c001800 0e1c0c00     ..8.............
 8014a88:	01f007f8 00000000 00000000 00000000     ................
	...
 8014aa4:	01800180 00000000 00000000 00000000     ................
 8014ab4:	00000000 01800180 00000000 00000000     ................
	...
 8014ad4:	01800180 00000000 00000000 00000000     ................
 8014ae4:	00000000 01800180 01000100 00000080     ................
	...
 8014b08:	1c001000 03e00f80 001800f8 03e000f8     ................
 8014b18:	1c000f80 00001000 00000000 00000000     ................
	...
 8014b38:	00001ff8 00000000 00001ff8 00000000     ................
	...
 8014b68:	00380008 07c001f0 18001f00 07c01f00     ..8.............
 8014b78:	003801f0 00000008 00000000 00000000     ..8.............
 8014b88:	03e00000 0c180ff8 180c180c 0c001800     ................
 8014b98:	03000600 00c00180 00c000c0 00000000     ................
 8014ba8:	00c000c0 00000000 00000000 00000000     ................
 8014bb8:	00000000 181807e0 29c22004 44114a22     ......... .)"J.D
 8014bc8:	44094409 22094409 0ce21311 20044002     .D.D.D.".....@. 
 8014bd8:	07e01818 00000000 00000000 00000000     ................
 8014be8:	03800000 06c00380 06c006c0 0c600c60     ............`.`.
 8014bf8:	18301830 3ff81830 701c3ff8 600c600c     0.0.0..?.?.p.`.`
 8014c08:	c006c006 00000000 00000000 00000000     ................
 8014c18:	03fc0000 0c0c0ffc 180c180c 0c0c180c     ................
 8014c28:	0ffc07fc 300c180c 300c300c 180c300c     .......0.0.0.0..
 8014c38:	07fc1ffc 00000000 00000000 00000000     ................
 8014c48:	07c00000 38381ff0 700c301c 00066006     ......88.0.p.`..
 8014c58:	00060006 00060006 60060006 301c700c     ...........`.p.0
 8014c68:	07e01ff0 00000000 00000000 00000000     ................
 8014c78:	03fe0000 0e060ffe 18061806 30063006     .............0.0
 8014c88:	30063006 30063006 18063006 0e061806     .0.0.0.0.0......
 8014c98:	03fe0ffe 00000000 00000000 00000000     ................
 8014ca8:	3ffc0000 000c3ffc 000c000c 000c000c     ...?.?..........
 8014cb8:	1ffc1ffc 000c000c 000c000c 000c000c     ................
 8014cc8:	3ffc3ffc 00000000 00000000 00000000     .?.?............
 8014cd8:	3ff80000 00183ff8 00180018 00180018     ...?.?..........
 8014ce8:	1ff81ff8 00180018 00180018 00180018     ................
 8014cf8:	00180018 00000000 00000000 00000000     ................
 8014d08:	0fe00000 783c3ff8 e006600e 0003c007     .....?<x.`......
 8014d18:	fe030003 c003fe03 c006c007 f03cc00e     ..............<.
 8014d28:	0fe03ff8 00000000 00000000 00000000     .?..............
 8014d38:	300c0000 300c300c 300c300c 300c300c     ...0.0.0.0.0.0.0
 8014d48:	3ffc3ffc 300c300c 300c300c 300c300c     .?.?.0.0.0.0.0.0
 8014d58:	300c300c 00000000 00000000 00000000     .0.0............
 8014d68:	01800000 01800180 01800180 01800180     ................
 8014d78:	01800180 01800180 01800180 01800180     ................
 8014d88:	01800180 00000000 00000000 00000000     ................
 8014d98:	06000000 06000600 06000600 06000600     ................
 8014da8:	06000600 06000600 06180600 07380618     ..............8.
 8014db8:	01e003f0 00000000 00000000 00000000     ................
 8014dc8:	30060000 0c061806 03060606 00c60186     ...0............
 8014dd8:	00760066 018e00de 06060306 18060c06     f.v.............
 8014de8:	60063006 00000000 00000000 00000000     .0.`............
 8014df8:	00180000 00180018 00180018 00180018     ................
 8014e08:	00180018 00180018 00180018 00180018     ................
 8014e18:	1ff81ff8 00000000 00000000 00000000     ................
 8014e28:	e00e0000 f01ef01e d836f01e d836d836     ..........6.6.6.
 8014e38:	cc66d836 cc66cc66 c6c6c6c6 c6c6c6c6     6.f.f.f.........
 8014e48:	c386c386 00000000 00000000 00000000     ................
 8014e58:	300c0000 303c301c 306c303c 30cc306c     ...0.0<0<0l0l0.0
 8014e68:	318c30cc 330c330c 360c360c 3c0c3c0c     .0.1.3.3.6.6.<.<
 8014e78:	300c380c 00000000 00000000 00000000     .8.0............
 8014e88:	07e00000 381c1ff8 6006700e c003c003     .......8.p.`....
 8014e98:	c003c003 c003c003 6006c003 381c700e     ...........`.p.8
 8014ea8:	07e01ff8 00000000 00000000 00000000     ................
 8014eb8:	0ffc0000 380c1ffc 300c300c 300c300c     .......8.0.0.0.0
 8014ec8:	1ffc180c 000c07fc 000c000c 000c000c     ................
 8014ed8:	000c000c 00000000 00000000 00000000     ................
 8014ee8:	07e00000 381c1ff8 6006700e c003e003     .......8.p.`....
 8014ef8:	c003c003 c003c003 6306e007 3c1c3f0e     ...........c.?.<
 8014f08:	f7e03ff8 0000c000 00000000 00000000     .?..............
 8014f18:	0ffe0000 38061ffe 30063006 38063006     .......8.0.0.0.8
 8014f28:	07fe1ffe 06060306 18060c06 30061806     ...............0
 8014f38:	60063006 00000000 00000000 00000000     .0.`............
 8014f48:	03e00000 0c1c0ff8 180c180c 001c000c     ................
 8014f58:	0fe003f8 38001e00 30063006 1c1c300e     .......8.0.0.0..
 8014f68:	07e00ff8 00000000 00000000 00000000     ................
 8014f78:	7ffe0000 01807ffe 01800180 01800180     ................
 8014f88:	01800180 01800180 01800180 01800180     ................
 8014f98:	01800180 00000000 00000000 00000000     ................
 8014fa8:	300c0000 300c300c 300c300c 300c300c     ...0.0.0.0.0.0.0
 8014fb8:	300c300c 300c300c 300c300c 1818300c     .0.0.0.0.0.0.0..
 8014fc8:	07e01ff8 00000000 00000000 00000000     ................
 8014fd8:	60030000 30063006 180c3006 180c180c     ...`.0.0.0......
 8014fe8:	0c180c18 06300e38 07700630 03600360     ....8.0.0.p.`.`.
 8014ff8:	01c001c0 00000000 00000000 00000000     ................
 8015008:	60030000 61c361c3 336661c3 33663366     ...`.a.a.af3f3f3
 8015018:	33663366 1b6c3366 1b6c1b6c 1e3c1a2c     f3f3f3l.l.l.,.<.
 8015028:	0e380e38 00000000 00000000 00000000     8.8.............
 8015038:	e00f0000 3018700c 0c701830 07c00e60     .....p.00.p.`...
 8015048:	03800380 06e003c0 1c300c70 300c1818     ........p.0....0
 8015058:	e007600e 00000000 00000000 00000000     .`..............
 8015068:	c0030000 300c6006 1838381c 06600c30     .....`.0.88.0.`.
 8015078:	03c007e0 01800180 01800180 01800180     ................
 8015088:	01800180 00000000 00000000 00000000     ................
 8015098:	7ffc0000 60007ffc 18003000 06000c00     .......`.0......
 80150a8:	01800300 006000c0 00180030 0006000c     ......`.0.......
 80150b8:	7ffe7ffe 00000000 00000000 00000000     ................
 80150c8:	03e00000 006003e0 00600060 00600060     ......`.`.`.`.`.
 80150d8:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 80150e8:	00600060 00600060 03e00060 000003e0     `.`.`.`.`.......
 80150f8:	00300000 00600030 00600060 00c000c0     ..0.0.`.`.`.....
 8015108:	01c000c0 01800180 03000180 03000300     ................
 8015118:	06000600 00000000 00000000 00000000     ................
 8015128:	03e00000 030003e0 03000300 03000300     ................
 8015138:	03000300 03000300 03000300 03000300     ................
 8015148:	03000300 03000300 03e00300 000003e0     ................
 8015158:	00000000 01c001c0 03600360 06300360     ........`.`.`.0.
 8015168:	0c180630 00000c18 00000000 00000000     0...............
	...
 80151a8:	ffff0000 0000ffff 00000000 00000000     ................
 80151b8:	000c0000 000c000c 000c000c 0000000c     ................
	...
 80151f4:	07f803f0 0c0c0c1c 0ff00f00 0c0c0cf8     ................
 8015204:	0f1c0c0c 18f00ff8 00000000 00000000     ................
 8015214:	00000000 00180000 00180018 00180018     ................
 8015224:	0ff803d8 18180c38 18181818 18181818     ....8...........
 8015234:	0c381818 03d80ff8 00000000 00000000     ..8.............
	...
 8015254:	07f003c0 0c180e30 00180018 00180018     ....0...........
 8015264:	0e300c18 03c007f0 00000000 00000000     ..0.............
 8015274:	00000000 18000000 18001800 18001800     ................
 8015284:	1ff01bc0 18181c30 18181818 18181818     ....0...........
 8015294:	1c301818 1bc01ff0 00000000 00000000     ..0.............
	...
 80152b4:	0ff003c0 18180c30 1ff81ff8 00180018     ....0...........
 80152c4:	1c301838 07c00ff0 00000000 00000000     8.0.............
 80152d4:	00000000 0f800000 00c00fc0 00c000c0     ................
 80152e4:	07f007f0 00c000c0 00c000c0 00c000c0     ................
 80152f4:	00c000c0 00c000c0 00000000 00000000     ................
	...
 8015314:	0ff80de0 0c0c0e18 0c0c0c0c 0c0c0c0c     ................
 8015324:	0e180c0c 0de00ff8 0c0c0c00 07f8061c     ................
 8015334:	000001f0 00180000 00180018 00180018     ................
 8015344:	0ff807d8 18181c38 18181818 18181818     ....8...........
 8015354:	18181818 18181818 00000000 00000000     ................
 8015364:	00000000 00c00000 000000c0 00000000     ................
 8015374:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 8015384:	00c000c0 00c000c0 00000000 00000000     ................
 8015394:	00000000 00c00000 000000c0 00000000     ................
 80153a4:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 80153b4:	00c000c0 00c000c0 00c000c0 00f800c0     ................
 80153c4:	00000078 000c0000 000c000c 000c000c     x...............
 80153d4:	060c0c0c 018c030c 006c00cc 019c00fc     ..........l.....
 80153e4:	030c038c 0c0c060c 00000000 00000000     ................
 80153f4:	00000000 00c00000 00c000c0 00c000c0     ................
 8015404:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 8015414:	00c000c0 00c000c0 00000000 00000000     ................
	...
 8015434:	7eff3c7c c183e3c7 c183c183 c183c183     |<.~............
 8015444:	c183c183 c183c183 00000000 00000000     ................
	...
 8015464:	0ff80798 18181c38 18181818 18181818     ....8...........
 8015474:	18181818 18181818 00000000 00000000     ................
	...
 8015494:	0ff003c0 18180c30 18181818 18181818     ....0...........
 80154a4:	0c301818 03c00ff0 00000000 00000000     ..0.............
	...
 80154c4:	0ff803d8 18180c38 18181818 18181818     ....8...........
 80154d4:	0c381818 03d80ff8 00180018 00180018     ..8.............
 80154e4:	00000018 00000000 00000000 00000000     ................
 80154f4:	1ff01bc0 18181c30 18181818 18181818     ....0...........
 8015504:	1c301818 1bc01ff0 18001800 18001800     ..0.............
 8015514:	00001800 00000000 00000000 00000000     ................
 8015524:	03f007b0 00300070 00300030 00300030     ....p.0.0.0.0.0.
 8015534:	00300030 00300030 00000000 00000000     0.0.0.0.........
	...
 8015554:	03f003e0 0c180e38 03f00038 0c0007c0     ....8...8.......
 8015564:	0e380c18 03e007f0 00000000 00000000     ..8.............
	...
 801557c:	00c00080 00c000c0 07f007f0 00c000c0     ................
 801558c:	00c000c0 00c000c0 00c000c0 078007c0     ................
	...
 80155b4:	18181818 18181818 18181818 18181818     ................
 80155c4:	1c381818 19e01ff0 00000000 00000000     ..8.............
	...
 80155e4:	0c18180c 0c180c18 06300630 03600630     ........0.0.0.`.
 80155f4:	03600360 01c001c0 00000000 00000000     `.`.............
	...
 8015614:	41c141c1 636361c3 63636363 36363636     .A.A.acccccc6666
 8015624:	1c1c3636 1c1c1c1c 00000000 00000000     66..............
	...
 8015644:	1c38381c 06600c30 03600360 03600360     .88.0.`.`.`.`.`.
 8015654:	0c300660 381c1c38 00000000 00000000     `.0.8..8........
	...
 8015674:	18303018 18701830 0c600c60 06c00ce0     .00.0.p.`.`.....
 8015684:	038006c0 03800380 01800180 00f001c0     ................
 8015694:	00000070 00000000 00000000 00000000     p...............
 80156a4:	1ffc1ffc 06000c00 01800300 006000c0     ..............`.
 80156b4:	00180030 1ffc1ffc 00000000 00000000     0...............
 80156c4:	00000000 03000000 00c00180 00c000c0     ................
 80156d4:	00c000c0 006000c0 00300060 00400060     ......`.`.0.`.@.
 80156e4:	00c000c0 00c000c0 00c000c0 03000180     ................
 80156f4:	00000000 01800000 01800180 01800180     ................
 8015704:	01800180 01800180 01800180 01800180     ................
 8015714:	01800180 01800180 01800180 01800180     ................
 8015724:	00000180 00600000 01c000c0 01800180     ......`.........
 8015734:	01800180 03000180 06000300 01000300     ................
 8015744:	01800180 01800180 01800180 006000c0     ..............`.
	...
 8015768:	1ff810f0 00000f08 00000000 00000000     ................
	...

08015788 <ASCII12x12_Table>:
	...
 80157a0:	20000000 20002000 20002000 20002000     ... . . . . . . 
 80157b0:	20000000 00000000 50000000 50005000     ... .......P.P.P
	...
 80157d0:	09000000 12000900 12007f00 12007f00     ................
 80157e0:	24002400 00000000 38001000 50005400     .$.$.......8.T.P
 80157f0:	38005000 54001400 38005400 00001000     .P.8...T.T.8....
 8015800:	30800000 49004900 32c04a00 09200520     ...0.I.I.J.2 . .
 8015810:	10c00920 00000000 0c000000 12001200      ...............
 8015820:	18001400 23002500 1d802300 00000000     .....%.#.#......
 8015830:	40000000 40004000 00000000 00000000     ...@.@.@........
	...
 8015848:	08000000 10001000 20002000 20002000     ......... . . . 
 8015858:	20002000 10001000 40000000 20002000     . . .......@. . 
 8015868:	10001000 10001000 10001000 20002000     ............. . 
 8015878:	20000000 20007000 00005000 00000000     ... .p. .P......
	...
 8015894:	08000000 7f000800 08000800 00000000     ................
	...
 80158b8:	20000000 40002000 00000000 00000000     ... . .@........
 80158c8:	00000000 00007000 00000000 00000000     .....p..........
	...
 80158e8:	20000000 00000000 10000000 10001000     ... ............
 80158f8:	20002000 20002000 40004000 00000000     . . . . .@.@....
 8015908:	10000000 44002800 44004400 44004400     .....(.D.D.D.D.D
 8015918:	10002800 00000000 10000000 50003000     .(...........0.P
 8015928:	10001000 10001000 10001000 00000000     ................
 8015938:	30000000 44004800 08000400 20001000     ...0.H.D....... 
 8015948:	7c004000 00000000 30000000 04004800     .@.|.......0.H..
 8015958:	10000800 44000800 30004800 00000000     .......D.H.0....
 8015968:	08000000 18001800 28002800 7c004800     .........(.(.H.|
 8015978:	08000800 00000000 3c000000 40002000     ...........<. .@
 8015988:	48007000 44000400 30004800 00000000     .p.H...D.H.0....
 8015998:	18000000 40002400 68005000 44004400     .....$.@.P.h.D.D
 80159a8:	10002800 00000000 7c000000 08000400     .(.........|....
 80159b8:	10001000 20001000 20002000 00000000     ....... . . ....
 80159c8:	10000000 44002800 10002800 44002800     .....(.D.(...(.D
 80159d8:	10002800 00000000 10000000 44002800     .(...........(.D
 80159e8:	2c004400 04001400 30004800 00000000     .D.,.....H.0....
 80159f8:	00000000 20000000 00000000 00000000     ....... ........
 8015a08:	20000000 00000000 00000000 20000000     ... ........... 
	...
 8015a20:	20000000 40002000 00000000 08000400     ... . .@........
 8015a30:	40003000 08003000 00000400 00000000     .0.@.0..........
 8015a40:	00000000 7c000000 00000000 00007c00     .......|.....|..
	...
 8015a5c:	20004000 04001800 20001800 00004000     .@. ....... .@..
 8015a6c:	00000000 38000000 44006400 08000400     .......8.d.D....
 8015a7c:	10001000 10000000 00000000 0f800000     ................
 8015a8c:	2ea01040 512051a0 51205120 4dc05320     @....Q Q Q Q S.M
 8015a9c:	10402020 08000000 14001400 22001400       @............"
 8015aac:	22003e00 41004100 00000000 3c000000     .>.".A.A.......<
 8015abc:	22002200 3c002200 22002200 3c002200     .".".".<.".".".<
 8015acc:	00000000 0e000000 21001100 20002000     ...........!. . 
 8015adc:	21002000 0e001100 00000000 3c000000     . .!...........<
 8015aec:	21002200 21002100 21002100 3c002200     .".!.!.!.!.!.".<
 8015afc:	00000000 3e000000 20002000 3e002000     .......>. . . .>
 8015b0c:	20002000 3e002000 00000000 3e000000     . . . .>.......>
 8015b1c:	20002000 3c002000 20002000 20002000     . . . .<. . . . 
 8015b2c:	00000000 0e000000 21001100 27002000     ...........!. .'
 8015b3c:	21002100 0e001100 00000000 21000000     .!.!...........!
 8015b4c:	21002100 3f002100 21002100 21002100     .!.!.!.?.!.!.!.!
 8015b5c:	00000000 20000000 20002000 20002000     ....... . . . . 
 8015b6c:	20002000 20002000 00000000 08000000     . . . . ........
 8015b7c:	08000800 08000800 48000800 30004800     ...........H.H.0
 8015b8c:	00000000 22000000 28002400 38002800     .......".$.(.(.8
 8015b9c:	24002800 22002400 00000000 20000000     .(.$.$."....... 
 8015bac:	20002000 20002000 20002000 3e002000     . . . . . . . .>
 8015bbc:	00000000 20800000 31803180 2a803180     ....... .1.1.1.*
 8015bcc:	2a802a80 24802a80 00000000 21000000     .*.*.*.$.......!
 8015bdc:	31003100 29002900 23002500 21002300     .1.1.).).%.#.#.!
 8015bec:	00000000 0c000000 21001200 21002100     ...........!.!.!
 8015bfc:	21002100 0c001200 00000000 3c000000     .!.!...........<
 8015c0c:	22002200 3c002200 20002000 20002000     .".".".<. . . . 
 8015c1c:	00000000 0c000000 21001200 21002100     ...........!.!.!
 8015c2c:	21002100 0d001600 00000100 3e000000     .!.!...........>
 8015c3c:	21002100 3e002100 22002400 20802100     .!.!.!.>.$.".!. 
 8015c4c:	00000000 1c000000 22002200 1c002000     .........".". ..
 8015c5c:	22000200 1c002200 00000000 3e000000     ...".".........>
 8015c6c:	08000800 08000800 08000800 08000800     ................
 8015c7c:	00000000 21000000 21002100 21002100     .......!.!.!.!.!
 8015c8c:	21002100 0c001200 00000000 41000000     .!.!...........A
 8015c9c:	22004100 22002200 14001400 08001400     .A."."."........
 8015cac:	00000000 44400000 2a404a40 2a802a80     ......@D@J@*.*.*
 8015cbc:	2a802a80 11002a80 00000000 41000000     .*.*.*.........A
 8015ccc:	14002200 08001400 14001400 41002200     ."...........".A
 8015cdc:	00000000 41000000 22002200 08001400     .......A."."....
 8015cec:	08000800 08000800 00000000 7e000000     ...............~
 8015cfc:	04000200 10000800 20001000 7e004000     ........... .@.~
 8015d0c:	00000000 30000000 20002000 20002000     .......0. . . . 
 8015d1c:	20002000 20002000 20002000 40000000     . . . . . . ...@
 8015d2c:	20004000 20002000 20002000 10001000     .@. . . . . ....
 8015d3c:	00000000 60000000 20002000 20002000     .......`. . . . 
 8015d4c:	20002000 20002000 20002000 10000000     . . . . . . ....
 8015d5c:	28002800 44002800 00000000 00000000     .(.(.(.D........
	...
 8015d84:	7e000000 20004000 00000000 00000000     ...~.@. ........
	...
 8015da4:	38000000 04004400 44003c00 3c004400     ...8.D...<.D.D.<
 8015db4:	00000000 40000000 58004000 44006400     .......@.@.X.d.D
 8015dc4:	44004400 58006400 00000000 00000000     .D.D.d.X........
 8015dd4:	30000000 40004800 40004000 30004800     ...0.H.@.@.@.H.0
 8015de4:	00000000 04000000 34000400 44004c00     ...........4.L.D
 8015df4:	44004400 34004c00 00000000 00000000     .D.D.L.4........
 8015e04:	38000000 44004400 40007c00 38004400     ...8.D.D.|.@.D.8
 8015e14:	00000000 60000000 e0004000 40004000     .......`.@...@.@
 8015e24:	40004000 40004000 00000000 00000000     .@.@.@.@........
 8015e34:	34000000 44004c00 44004400 34004c00     ...4.L.D.D.D.L.4
 8015e44:	44000400 40000000 58004000 44006400     ...D...@.@.X.d.D
 8015e54:	44004400 44004400 00000000 40000000     .D.D.D.D.......@
 8015e64:	40000000 40004000 40004000 40004000     ...@.@.@.@.@.@.@
 8015e74:	00000000 40000000 40000000 40004000     .......@...@.@.@
 8015e84:	40004000 40004000 40004000 40000000     .@.@.@.@.@.@...@
 8015e94:	48004000 60005000 50005000 48004800     .@.H.P.`.P.P.H.H
 8015ea4:	00000000 40000000 40004000 40004000     .......@.@.@.@.@
 8015eb4:	40004000 40004000 00000000 00000000     .@.@.@.@........
 8015ec4:	52000000 49006d00 49004900 49004900     ...R.m.I.I.I.I.I
	...
 8015edc:	58000000 44006400 44004400 44004400     ...X.d.D.D.D.D.D
	...
 8015ef4:	38000000 44004400 44004400 38004400     ...8.D.D.D.D.D.8
	...
 8015f0c:	58000000 44006400 44004400 58006400     ...X.d.D.D.D.d.X
 8015f1c:	40004000 00000000 34000000 44004c00     .@.@.......4.L.D
 8015f2c:	44004400 34004c00 04000400 00000000     .D.D.L.4........
 8015f3c:	50000000 40006000 40004000 40004000     ...P.`.@.@.@.@.@
	...
 8015f54:	30000000 40004800 08003000 30004800     ...0.H.@.0...H.0
 8015f64:	00000000 40000000 e0004000 40004000     .......@.@...@.@
 8015f74:	40004000 60004000 00000000 00000000     .@.@.@.`........
 8015f84:	44000000 44004400 44004400 34004c00     ...D.D.D.D.D.L.4
	...
 8015f9c:	44000000 28004400 28002800 10002800     ...D.D.(.(.(.(..
	...
 8015fb4:	49000000 55004900 55005500 22005500     ...I.I.U.U.U.U."
	...
 8015fcc:	44000000 28002800 28001000 44002800     ...D.(.(...(.(.D
	...
 8015fe4:	44000000 28004400 28002800 10001000     ...D.D.(.(.(....
 8015ff4:	10001000 00000000 78000000 10000800     ...........x....
 8016004:	20002000 78004000 00000000 10000000     . . .@.x........
 8016014:	20002000 20002000 20004000 20002000     . . . . .@. . . 
 8016024:	20002000 20000000 20002000 20002000     . . ... . . . . 
 8016034:	20002000 20002000 20002000 40000000     . . . . . . ...@
 8016044:	20002000 20002000 20001000 20002000     . . . . ... . . 
 8016054:	20002000 00000000 00000000 58007400     . . .........t.X
	...
 8016074:	50007000 50005000 50005000 70005000     .p.P.P.P.P.P.P.p
 8016084:	00000000                                ....

08016088 <ASCII8x12_Table>:
	...
 80160a4:	00100000 00100010 00100010 00000010     ................
 80160b4:	00000010 00000000 00280000 00280028     ..........(.(.(.
	...
 80160d4:	00140000 003e0014 00280014 0028007c     ......>...(.|.(.
 80160e4:	00000028 00000000 00380010 00500054     (.........8.T.P.
 80160f4:	00140038 00540014 00100038 00000000     8.....T.8.......
 8016104:	00440000 00a800a8 00140050 002a001a     ..D.....P.....*.
 8016114:	00000024 00000000 00200000 00500050     $......... .P.P.
 8016124:	00e80020 00980098 00000060 00000000      .......`.......
 8016134:	00800000 00800080 00000000 00000000     ................
	...
 801614c:	00400000 00800080 00800080 00800080     ..@.............
 801615c:	00800080 00000000 00800000 00400040     ............@.@.
 801616c:	00400040 00400040 00400040 00000000     @.@.@.@.@.@.....
 801617c:	00400000 004000e0 000000a0 00000000     ..@...@.........
	...
 8016198:	00200000 00f80020 00200020 00000000     .. . ... . .....
	...
 80161bc:	00400040 00000000 00000000 00000000     @.@.............
 80161cc:	00000000 000000c0 00000000 00000000     ................
	...
 80161ec:	00000040 00000000 00200000 00200020     @......... . . .
 80161fc:	00400040 00800080 00000080 00000000     @.@.............
 801620c:	00600000 00900090 00900090 00900090     ..`.............
 801621c:	00000060 00000000 00200000 00a00060     `......... .`...
 801622c:	00200020 00200020 00000020 00000000      . . . . .......
 801623c:	00600000 00100090 00200010 00800040     ..`....... .@...
 801624c:	000000f0 00000000 00600000 00100090     ..........`.....
 801625c:	00100060 00900010 00000060 00000000     `.......`.......
 801626c:	00100000 00500030 00900050 001000f8     ....0.P.P.......
 801627c:	00000010 00000000 00700000 00800040     ..........p.@...
 801628c:	001000e0 00900010 00000060 00000000     ........`.......
 801629c:	00600000 00800090 00d000a0 00900090     ..`.............
 80162ac:	00000060 00000000 00f00000 00200010     `............. .
 80162bc:	00200020 00400040 00000040 00000000      . .@.@.@.......
 80162cc:	00600000 00900090 00900060 00900090     ..`.....`.......
 80162dc:	00000060 00000000 00600000 00900090     `.........`.....
 80162ec:	005000b0 00900010 00000060 00000000     ..P.....`.......
 80162fc:	00000000 00400000 00000000 00000000     ......@.........
 801630c:	00000040 00000000 00000000 00400000     @.............@.
	...
 8016324:	00400040 00000000 00000000 00100000     @.@.............
 8016334:	00800060 00100060 00000000 00000000     `...`...........
	...
 801634c:	000000f0 000000f0 00000000 00000000     ................
 801635c:	00000000 00800000 00100060 00800060     ........`...`...
	...
 8016374:	00600000 00100090 00400020 00000040     ..`..... .@.@...
 8016384:	00000040 00000000 001c0000 005b0022     @...........".[.
 8016394:	00a500a5 00a500a5 0041009e 00000000     ..........A.....
 80163a4:	00200000 00500050 00500050 00880070     .. .P.P.P.P.p...
 80163b4:	00000088 00000000 00f00000 00880088     ................
 80163c4:	008800f0 00880088 000000f0 00000000     ................
 80163d4:	00380000 00840044 00800080 00440084     ..8.D.........D.
 80163e4:	00000038 00000000 00e00000 00880090     8...............
 80163f4:	00880088 00900088 000000e0 00000000     ................
 8016404:	00f80000 00800080 008000f8 00800080     ................
 8016414:	000000f8 00000000 00780000 00400040     ..........x.@.@.
 8016424:	00400070 00400040 00000040 00000000     p.@.@.@.@.......
 8016434:	00380000 00840044 009c0080 00440084     ..8.D.........D.
 8016444:	00000038 00000000 00880000 00880088     8...............
 8016454:	008800f8 00880088 00000088 00000000     ................
 8016464:	00800000 00800080 00800080 00800080     ................
 8016474:	00000080 00000000 00100000 00100010     ................
 8016484:	00100010 00900090 00000060 00000000     ........`.......
 8016494:	00880000 00a00090 00a000e0 00900090     ................
 80164a4:	00000088 00000000 00800000 00800080     ................
 80164b4:	00800080 00800080 000000f0 00000000     ................
 80164c4:	00820000 00c600c6 00aa00aa 00aa00aa     ................
 80164d4:	00000092 00000000 00840000 00a400c4     ................
 80164e4:	009400a4 008c0094 00000084 00000000     ................
 80164f4:	00300000 00840048 00840084 00480084     ..0.H.........H.
 8016504:	00000030 00000000 00f00000 00880088     0...............
 8016514:	00f00088 00800080 00000080 00000000     ................
 8016524:	00300000 00840048 00840084 00580084     ..0.H.........X.
 8016534:	00040034 00000000 00780000 00440044     4.........x.D.D.
 8016544:	00500078 00440048 00000042 00000000     x.P.H.D.B.......
 8016554:	00700000 00800088 00080070 00880088     ..p.....p.......
 8016564:	00000070 00000000 00f80000 00200020     p........... . .
 8016574:	00200020 00200020 00000020 00000000      . . . . .......
 8016584:	00840000 00840084 00840084 00480084     ..............H.
 8016594:	00000030 00000000 00880000 00500088     0.............P.
 80165a4:	00500050 00500050 00000020 00000000     P.P.P.P. .......
 80165b4:	00920000 00aa00aa 00aa00aa 00aa00aa     ................
 80165c4:	00000044 00000000 00840000 00480048     D...........H.H.
 80165d4:	00300030 00480048 00000084 00000000     0.0.H.H.........
 80165e4:	00880000 00500050 00200020 00200020     ....P.P. . . . .
 80165f4:	00000020 00000000 00f80000 00100008      ...............
 8016604:	00200020 00800040 000000f8 00000000      . .@...........
 8016614:	00c00000 00800080 00800080 00800080     ................
 8016624:	00800080 00000000 00800000 00400080     ..............@.
 8016634:	00400040 00200040 00000020 00000000     @.@.@. . .......
 8016644:	00c00000 00400040 00400040 00400040     ....@.@.@.@.@.@.
 8016654:	00400040 00000000 00400000 00a000a0     @.@.......@.....
 8016664:	000000a0 00000000 00000000 00000000     ................
	...
 8016684:	00f80000 00000000 00800000 00000040     ............@...
	...
 80166a8:	00e00000 00700010 00900090 00000070     ......p.....p...
 80166b8:	00000000 00800000 00a00080 009000d0     ................
 80166c8:	00d00090 000000a0 00000000 00000000     ................
 80166d8:	00600000 00800090 00900080 00000060     ..`.........`...
 80166e8:	00000000 00100000 00500010 009000b0     ..........P.....
 80166f8:	00b00090 00000050 00000000 00000000     ....P...........
 8016708:	00600000 00f00090 00900080 00000060     ..`.........`...
 8016718:	00000000 00c00000 00c00080 00800080     ................
 8016728:	00800080 00000080 00000000 00000000     ................
 8016738:	00500000 009000b0 00b00090 00100050     ..P.........P...
 8016748:	00000000 00800000 00a00080 009000d0     ................
 8016758:	00900090 00000090 00000000 00800000     ................
 8016768:	00800000 00800080 00800080 00000080     ................
 8016778:	00000000 00800000 00800000 00800080     ................
 8016788:	00800080 00800080 00000000 00800000     ................
 8016798:	00900080 00c000a0 009000a0 00000090     ................
 80167a8:	00000000 00800000 00800080 00800080     ................
 80167b8:	00800080 00000080 00000000 00000000     ................
 80167c8:	00a60000 009200da 00920092 00000092     ................
	...
 80167e0:	00a00000 009000d0 00900090 00000090     ................
	...
 80167f8:	00600000 00900090 00900090 00000060     ..`.........`...
	...
 8016810:	00a00000 009000d0 00d00090 008000a0     ................
	...
 8016828:	00500000 009000b0 00b00090 00100050     ..P.........P...
	...
 8016840:	00a00000 008000c0 00800080 00000080     ................
	...
 8016858:	00e00000 00400090 00900020 00000060     ......@. ...`...
 8016868:	00000000 00800000 00c00080 00800080     ................
 8016878:	00800080 000000c0 00000000 00000000     ................
 8016888:	00900000 00900090 00b00090 00000050     ............P...
	...
 80168a0:	00880000 00500088 00500050 00000020     ......P.P.P. ...
	...
 80168b8:	00920000 00aa00aa 00aa00aa 00000044     ............D...
	...
 80168d0:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
 80168e8:	00880000 00500050 00200050 00200020     ....P.P.P. . . .
	...
 8016900:	00f00000 00200010 00800040 000000f0     ...... .@.......
 8016910:	00000000 00c00000 00800080 00000080     ................
 8016920:	00800080 00800080 00000000 00800000     ................
 8016930:	00800080 00800080 00800080 00800080     ................
 8016940:	00000000 00c00000 00400040 00200040     ........@.@.@. .
 8016950:	00400040 00400040 00000000 00000000     @.@.@.@.........
 8016960:	00000000 00b000e8 00000000 00000000     ................
	...
 8016978:	00a000e0 00a000a0 00a000a0 000000e0     ................

08016988 <ASCII8x8_Table>:
	...
 8016998:	00400040 00400040 00400040 00400000     @.@.@.@.@.@...@.
 80169a8:	00a000a0 000000a0 00000000 00000000     ................
 80169b8:	00240000 00fe0024 00fc0048 00480048     ..$.$...H...H.H.
 80169c8:	00540038 00380050 00140014 00380054     8.T.P.8.....T.8.
 80169d8:	00a80044 005000a8 001a0014 0024002a     D.....P.....*.$.
 80169e8:	00280010 00100028 004c0074 0030004c     ..(.(...t.L.L.0.
 80169f8:	00100010 00000010 00000000 00000000     ................
 8016a08:	00100008 00100010 00100010 00080010     ................
 8016a18:	00080010 00080008 00080008 00100008     ................
 8016a28:	00000000 00180024 0018003c 00000024     ....$...<...$...
 8016a38:	00000000 00100010 0010007c 00000010     ........|.......
	...
 8016a50:	00080000 00100008 00000000 00000000     ................
 8016a60:	0000003c 00000000 00000000 00000000     <...............
 8016a70:	00000000 00180018 00080008 00100008     ................
 8016a80:	00200010 00200020 00240018 00240024     .. . . ...$.$.$.
 8016a90:	00240024 00180024 00180008 00080028     $.$.$.......(...
 8016aa0:	00080008 00080008 00440038 00040000     ........8.D.....
 8016ab0:	00100008 007c0020 00240018 00180004     .... .|...$.....
 8016ac0:	00040004 00180024 000c0004 00240014     ....$.........$.
 8016ad0:	007e0044 00040004 0020003c 00380020     D.~.....<. . .8.
 8016ae0:	00040004 00180024 00240018 00380020     ....$.....$. .8.
 8016af0:	00240024 00180024 0004003c 00080008     $.$.$...<.......
 8016b00:	00100008 00100010 00240018 00180024     ..........$.$...
 8016b10:	00240024 00180024 00240018 00240024     $.$.$.....$.$.$.
 8016b20:	0004001c 00180024 00000000 00000010     ....$...........
 8016b30:	00100000 00000000 00000000 00000008     ................
 8016b40:	00080000 00000010 00000000 00180004     ................
 8016b50:	00180020 00000004 00000000 003c0000      .............<.
 8016b60:	003c0000 00000000 00000000 00180020     ..<......... ...
 8016b70:	00180004 00000020 00240018 00080004     .... .....$.....
 8016b80:	00100010 00100000 0042003c 00a50099     ........<.B.....
 8016b90:	009d00a5 00380042 00440038 00440044     ....B.8.8.D.D.D.
 8016ba0:	0044007c 00440044 00440078 00780044     |.D.D.D.x.D.D.x.
 8016bb0:	00440044 00780044 0022001c 00400042     D.D.D.x...".B.@.
 8016bc0:	00420040 001c0022 00480070 00440044     @.B."...p.H.D.D.
 8016bd0:	00440044 00700048 0040007c 007c0040     D.D.H.p.|.@.@.|.
 8016be0:	00400040 007c0040 0020003c 00380020     @.@.@.|.<. . .8.
 8016bf0:	00200020 00200020 0022001c 00400042      . . . ...".B.@.
 8016c00:	0042004e 001c0022 00440044 007c0044     N.B."...D.D.D.|.
 8016c10:	00440044 00440044 00100010 00100010     D.D.D.D.........
 8016c20:	00100010 00100010 00040004 00040004     ................
 8016c30:	00240004 00180024 00480044 00700050     ..$.$...D.H.P.p.
 8016c40:	00480050 00440048 00200020 00200020     P.H.H.D. . . . .
 8016c50:	00200020 003c0020 00c60082 00aa00c6      . . .<.........
 8016c60:	00aa00aa 009200aa 00620042 00520052     ........B.b.R.R.
 8016c70:	004a004a 00420046 00240018 00420042     J.J.F.B...$.B.B.
 8016c80:	00420042 00180024 00440078 00440044     B.B.$...x.D.D.D.
 8016c90:	00400078 00400040 00240018 00420042     x.@.@.@...$.B.B.
 8016ca0:	00420042 001a002c 00440078 00780044     B.B.,...x.D.D.x.
 8016cb0:	00480050 00420044 00440038 00380040     P.H.D.B.8.D.@.8.
 8016cc0:	00440004 00380044 0010007c 00100010     ..D.D.8.|.......
 8016cd0:	00100010 00100010 00420042 00420042     ........B.B.B.B.
 8016ce0:	00420042 00180024 00440044 00280028     B.B.$...D.D.(.(.
 8016cf0:	00280028 00100028 00aa0092 00aa00aa     (.(.(...........
 8016d00:	00aa00aa 004400aa 00240042 00180024     ......D.B.$.$...
 8016d10:	00240018 00420024 00280044 00100028     ..$.$.B.D.(.(...
 8016d20:	00100010 00100010 0004007c 00100008     ........|.......
 8016d30:	00200010 007c0040 0010001c 00100010     .. .@.|.........
 8016d40:	00100010 001c0010 00100010 00080008     ................
 8016d50:	00080008 00040004 0004001c 00040004     ................
 8016d60:	00040004 001c0004 00280010 00000044     ..........(.D...
	...
 8016d88:	00100020 00000010 00000000 00000000      ...............
 8016d98:	00000000 00040018 0024001c 001c0024     ..........$.$...
 8016da8:	00200020 00340028 00240024 00280034      . .(.4.$.$.4.(.
 8016db8:	00000000 00240018 00200020 00180024     ......$. . .$...
 8016dc8:	00040004 002c0014 00240024 0014002c     ......,.$.$.,...
 8016dd8:	00000000 00240018 0020003c 00180024     ......$.<. .$...
 8016de8:	00180000 00100010 00100018 00100010     ................
 8016df8:	00180000 00240024 00040018 00180024     ....$.$.....$...
 8016e08:	00200020 00340028 00240024 00240024      . .(.4.$.$.$.$.
 8016e18:	00000010 00100010 00100010 00100010     ................
 8016e28:	00000008 00080008 00080008 00100028     ............(...
 8016e38:	00200020 00280024 00280030 00240024      . .$.(.0.(.$.$.
 8016e48:	00100010 00100010 00100010 00100010     ................
 8016e58:	00000000 00da00a6 00920092 00920092     ................
 8016e68:	00000000 00340028 00240024 00240024     ....(.4.$.$.$.$.
 8016e78:	00000000 00240018 00240024 00180024     ......$.$.$.$...
 8016e88:	00280000 00240034 00200038 00200020     ..(.4.$.8. . . .
 8016e98:	00140000 0024002c 0004001c 00040004     ....,.$.........
 8016ea8:	00000000 0030002c 00200020 00200020     ....,.0. . . . .
 8016eb8:	00000000 00240018 00080010 00180024     ......$.....$...
 8016ec8:	00100000 00100038 00100010 00180010     ....8...........
 8016ed8:	00000000 00240024 00240024 0014002c     ....$.$.$.$.,...
 8016ee8:	00000000 00440044 00280028 00100028     ....D.D.(.(.(...
 8016ef8:	00000000 00aa0092 00aa00aa 004400aa     ..............D.
 8016f08:	00000000 00280044 00100010 00440028     ....D.(.....(.D.
 8016f18:	00280000 00280028 00100010 00100010     ..(.(.(.........
 8016f28:	00000000 0004003c 00100008 003c0020     ....<....... .<.
 8016f38:	00080000 00100010 00100020 00080010     ........ .......
 8016f48:	00100010 00100010 00100010 00100010     ................
 8016f58:	00100000 00080008 00080004 00100008     ................
 8016f68:	00000000 00600000 000c0092 00000000     ......`.........
 8016f78:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................
 8016f88:	203a5449 4b415720 20505545 73657250     IT:  WAKEUP Pres
 8016f98:	20646573 00000000 34444c20 20202020     sed .... LD4    
 8016fa8:	20202020 20202020 20202020 00000000                 ....
 8016fb8:	20202020 444c2020 20202033 20202020           LD3       
 8016fc8:	20202020 00000000 20202020 20202020         ....        
 8016fd8:	4c202020 20203244 20202020 00000000        LD2      ....
 8016fe8:	20202020 20202020 20202020 20202020                     
 8016ff8:	2031444c 00000000 3a594f4a 20544920     LD1 ....JOY: IT 
 8017008:	2d2d2d20 2020202d 20202020 00000020      ----        ...
 8017018:	3a594f4a 20544920 20505520 20202020     JOY: IT  UP     
 8017028:	20202020 00000000 3a594f4a 20544920         ....JOY: IT 
 8017038:	4e574f44 20202020 20202020 00000000     DOWN        ....
 8017048:	3a594f4a 20544920 5446454c 20202020     JOY: IT LEFT    
 8017058:	20202020 00000000 3a594f4a 20544920         ....JOY: IT 
 8017068:	47495220 20205448 20202020 00002020      RIGHT        ..
 8017078:	3a594f4a 20544920 544e4543 20205245     JOY: IT CENTER  
 8017088:	20202020 00000020 3a594f4a 20544920          ...JOY: IT 
 8017098:	4f525245 20202052 00202020 203a5449     ERROR      .IT: 
 80170a8:	454b2020 72502059 65737365 20202064       KEY Pressed   
 80170b8:	00000000 203a5449 504d4154 50205245     ....IT: TAMPER P
 80170c8:	73736572 20206465 00000000              ressed  ....
