
stm32f4-i2c.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <delay_us>:
  * @brief  wait micro second
  * @param  wait_time : time to wait in micro second
  * @retval None
  */
void delay_us(uint16_t waittime)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	80fb      	strh	r3, [r7, #6]
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);
 8000192:	f04f 0001 	mov.w	r0, #1
 8000196:	f04f 0101 	mov.w	r1, #1
 800019a:	f002 f9f9 	bl	8002590 <RCC_APB1PeriphClockCmd>

  /* Time base configuration */
  TIM_TimeBaseStructureMicro.TIM_Period = ((waittime+1) * 2)-1;
 800019e:	88fb      	ldrh	r3, [r7, #6]
 80001a0:	f103 0301 	add.w	r3, r3, #1
 80001a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80001a8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80001ac:	461a      	mov	r2, r3
 80001ae:	f240 0300 	movw	r3, #0
 80001b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001b6:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMicro);
 80001b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001bc:	f240 0100 	movw	r1, #0
 80001c0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80001c4:	f002 fdb2 	bl	8002d2c <TIM_TimeBaseInit>

  TIM_SelectOnePulseMode(TIM_NUM, TIM_OPMode_Single);
 80001c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001cc:	f04f 0108 	mov.w	r1, #8
 80001d0:	f002 ff0a 	bl	8002fe8 <TIM_SelectOnePulseMode>

  TIM_SetCounter(TIM_NUM,2);
 80001d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001d8:	f04f 0102 	mov.w	r1, #2
 80001dc:	f002 fe6e 	bl	8002ebc <TIM_SetCounter>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, ENABLE);
 80001e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001e4:	f04f 0101 	mov.w	r1, #1
 80001e8:	f002 ff36 	bl	8003058 <TIM_Cmd>

  while (TIM_GetCounter(TIM_NUM)){};
 80001ec:	bf00      	nop
 80001ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001f2:	f002 fe7f 	bl	8002ef4 <TIM_GetCounter>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d1f8      	bne.n	80001ee <delay_us+0x66>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 80001fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000200:	f04f 0100 	mov.w	r1, #0
 8000204:	f002 ff28 	bl	8003058 <TIM_Cmd>

}
 8000208:	f107 0708 	add.w	r7, r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <delay_ms>:
  * @brief  wait millisecond
  * @param  wait_time : time to wait in millisecond
  * @retval None
  */
void delay_ms(uint16_t waittime)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	80fb      	strh	r3, [r7, #6]
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);
 800021a:	f04f 0001 	mov.w	r0, #1
 800021e:	f04f 0101 	mov.w	r1, #1
 8000222:	f002 f9b5 	bl	8002590 <RCC_APB1PeriphClockCmd>

  /* Time base configuration */
  TIM_TimeBaseStructureMili.TIM_Period = ((waittime+1) * 2)-1;
 8000226:	88fb      	ldrh	r3, [r7, #6]
 8000228:	f103 0301 	add.w	r3, r3, #1
 800022c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000230:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000234:	461a      	mov	r2, r3
 8000236:	f240 030c 	movw	r3, #12
 800023a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800023e:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMili);
 8000240:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000244:	f240 010c 	movw	r1, #12
 8000248:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800024c:	f002 fd6e 	bl	8002d2c <TIM_TimeBaseInit>

  TIM_SelectOnePulseMode(TIM_NUM, TIM_OPMode_Single);
 8000250:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000254:	f04f 0108 	mov.w	r1, #8
 8000258:	f002 fec6 	bl	8002fe8 <TIM_SelectOnePulseMode>

  TIM_SetCounter(TIM_NUM,2);
 800025c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000260:	f04f 0102 	mov.w	r1, #2
 8000264:	f002 fe2a 	bl	8002ebc <TIM_SetCounter>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, ENABLE);
 8000268:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800026c:	f04f 0101 	mov.w	r1, #1
 8000270:	f002 fef2 	bl	8003058 <TIM_Cmd>

  while (TIM_GetCounter(TIM_NUM)){};
 8000274:	bf00      	nop
 8000276:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800027a:	f002 fe3b 	bl	8002ef4 <TIM_GetCounter>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d1f8      	bne.n	8000276 <delay_ms+0x66>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 8000284:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000288:	f04f 0100 	mov.w	r1, #0
 800028c:	f002 fee4 	bl	8003058 <TIM_Cmd>
}
 8000290:	f107 0708 	add.w	r7, r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <pinMode>:
 static const uint8_t MISO = 12;
 static const uint8_t SCK  = 13; // PB7
 static const uint8_t LED_BUILTIN = 14;
 */

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	460b      	mov	r3, r1
 80002a2:	70fb      	strb	r3, [r7, #3]

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80002aa:	f003 020f 	and.w	r2, r3, #15
 80002ae:	f240 0318 	movw	r3, #24
 80002b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002ba:	4618      	mov	r0, r3
 80002bc:	f04f 0101 	mov.w	r1, #1
 80002c0:	f002 f8e8 	bl	8002494 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80002ca:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80002ce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = mode;
 80002d0:	78fb      	ldrb	r3, [r7, #3]
 80002d2:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002d4:	f04f 0300 	mov.w	r3, #0
 80002d8:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80002da:	f04f 0300 	mov.w	r3, #0
 80002de:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80002e0:	f04f 0302 	mov.w	r3, #2
 80002e4:	737b      	strb	r3, [r7, #13]
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80002ec:	f003 020f 	and.w	r2, r3, #15
 80002f0:	f240 0340 	movw	r3, #64	; 0x40
 80002f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80002fc:	f107 0308 	add.w	r3, r7, #8
 8000300:	4610      	mov	r0, r2
 8000302:	4619      	mov	r1, r3
 8000304:	f000 fe46 	bl	8000f94 <GPIO_Init>
}
 8000308:	f107 0710 	add.w	r7, r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <GPIOMode>:


void GPIOMode(uint32_t portpin, GPIOMode_TypeDef mode,
		GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	70f9      	strb	r1, [r7, #3]
 800031a:	70ba      	strb	r2, [r7, #2]
 800031c:	707b      	strb	r3, [r7, #1]

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000324:	f003 020f 	and.w	r2, r3, #15
 8000328:	f240 0318 	movw	r3, #24
 800032c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000334:	4618      	mov	r0, r3
 8000336:	f04f 0101 	mov.w	r1, #1
 800033a:	f002 f8ab 	bl	8002494 <RCC_AHB1PeriphClockCmd>
	//
	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8000344:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000348:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = mode;
 800034a:	78fb      	ldrb	r3, [r7, #3]
 800034c:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = otype;
 800034e:	787b      	ldrb	r3, [r7, #1]
 8000350:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8000352:	7e3b      	ldrb	r3, [r7, #24]
 8000354:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = clk;
 8000356:	78bb      	ldrb	r3, [r7, #2]
 8000358:	737b      	strb	r3, [r7, #13]
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000360:	f003 020f 	and.w	r2, r3, #15
 8000364:	f240 0340 	movw	r3, #64	; 0x40
 8000368:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800036c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000370:	f107 0308 	add.w	r3, r7, #8
 8000374:	4610      	mov	r0, r2
 8000376:	4619      	mov	r1, r3
 8000378:	f000 fe0c 	bl	8000f94 <GPIO_Init>
}
 800037c:	f107 0710 	add.w	r7, r7, #16
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <digitalWrite>:

/*
 static void turnOffPWM(uint8_t timer) {
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	70fb      	strb	r3, [r7, #3]
	if (bit) {
 8000390:	78fb      	ldrb	r3, [r7, #3]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d011      	beq.n	80003ba <digitalWrite+0x36>
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800039c:	f003 020f 	and.w	r2, r3, #15
 80003a0:	f240 0340 	movw	r3, #64	; 0x40
 80003a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	b29b      	uxth	r3, r3
 80003b0:	4610      	mov	r0, r2
 80003b2:	4619      	mov	r1, r3
 80003b4:	f000 ff28 	bl	8001208 <GPIO_SetBits>
 80003b8:	e010      	b.n	80003dc <digitalWrite+0x58>
	} else {
		GPIO_ResetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80003c0:	f003 020f 	and.w	r2, r3, #15
 80003c4:	f240 0340 	movw	r3, #64	; 0x40
 80003c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	4610      	mov	r0, r2
 80003d6:	4619      	mov	r1, r3
 80003d8:	f000 ff24 	bl	8001224 <GPIO_ResetBits>
	}
}
 80003dc:	f107 0708 	add.w	r7, r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <portWrite>:

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	460b      	mov	r3, r1
 80003ee:	807b      	strh	r3, [r7, #2]
	GPIO_Write(port, bits);
 80003f0:	887b      	ldrh	r3, [r7, #2]
 80003f2:	6878      	ldr	r0, [r7, #4]
 80003f4:	4619      	mov	r1, r3
 80003f6:	f000 ff3b 	bl	8001270 <GPIO_Write>
}
 80003fa:	f107 0708 	add.w	r7, r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop

08000404 <digitalRead>:

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	807b      	strh	r3, [r7, #2]
	uint8_t mode = (port->MODER) >> (pin * 2);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	887b      	ldrh	r3, [r7, #2]
 8000416:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800041a:	fa22 f303 	lsr.w	r3, r2, r3
 800041e:	73fb      	strb	r3, [r7, #15]
	if (mode == GPIO_Mode_OUT)
 8000420:	7bfb      	ldrb	r3, [r7, #15]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d10b      	bne.n	800043e <digitalRead+0x3a>
		return (GPIO_ReadOutputDataBit(port, pin) ? SET : RESET);
 8000426:	887b      	ldrh	r3, [r7, #2]
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	4619      	mov	r1, r3
 800042c:	f000 fec0 	bl	80011b0 <GPIO_ReadOutputDataBit>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	bf0c      	ite	eq
 8000436:	2300      	moveq	r3, #0
 8000438:	2301      	movne	r3, #1
 800043a:	b2db      	uxtb	r3, r3
 800043c:	e00a      	b.n	8000454 <digitalRead+0x50>
	return (GPIO_ReadInputDataBit(port, pin) ? SET : RESET);
 800043e:	887b      	ldrh	r3, [r7, #2]
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	4619      	mov	r1, r3
 8000444:	f000 fe88 	bl	8001158 <GPIO_ReadInputDataBit>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	bf0c      	ite	eq
 800044e:	2300      	moveq	r3, #0
 8000450:	2301      	movne	r3, #1
 8000452:	b2db      	uxtb	r3, r3
}
 8000454:	4618      	mov	r0, r3
 8000456:	f107 0710 	add.w	r7, r7, #16
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop

08000460 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	6039      	str	r1, [r7, #0]
 800046a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800046c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000470:	2b00      	cmp	r3, #0
 8000472:	da10      	bge.n	8000496 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000474:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000478:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800047c:	79fa      	ldrb	r2, [r7, #7]
 800047e:	f002 020f 	and.w	r2, r2, #15
 8000482:	f1a2 0104 	sub.w	r1, r2, #4
 8000486:	683a      	ldr	r2, [r7, #0]
 8000488:	b2d2      	uxtb	r2, r2
 800048a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800048e:	b2d2      	uxtb	r2, r2
 8000490:	185b      	adds	r3, r3, r1
 8000492:	761a      	strb	r2, [r3, #24]
 8000494:	e00d      	b.n	80004b2 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000496:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800049a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800049e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80004a2:	683a      	ldr	r2, [r7, #0]
 80004a4:	b2d2      	uxtb	r2, r2
 80004a6:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80004aa:	b2d2      	uxtb	r2, r2
 80004ac:	185b      	adds	r3, r3, r1
 80004ae:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80004b2:	f107 070c 	add.w	r7, r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d902      	bls.n	80004d4 <SysTick_Config+0x18>
 80004ce:	f04f 0301 	mov.w	r3, #1
 80004d2:	e01f      	b.n	8000514 <SysTick_Config+0x58>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80004d4:	f24e 0310 	movw	r3, #57360	; 0xe010
 80004d8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80004e2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80004e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80004e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004ec:	f04f 010f 	mov.w	r1, #15
 80004f0:	f7ff ffb6 	bl	8000460 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80004f4:	f24e 0310 	movw	r3, #57360	; 0xe010
 80004f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80004fc:	f04f 0200 	mov.w	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000502:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000506:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800050a:	f04f 0207 	mov.w	r2, #7
 800050e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000510:	f04f 0300 	mov.w	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	f107 0708 	add.w	r7, r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop

08000520 <SysTick_Handler>:
#include "stm32f4xx.h"
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	_systick_counter++; /* increment timeTicks counter */
 8000524:	f240 03ec 	movw	r3, #236	; 0xec
 8000528:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f103 0201 	add.w	r2, r3, #1
 8000532:	f240 03ec 	movw	r3, #236	; 0xec
 8000536:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800053a:	601a      	str	r2, [r3, #0]
}
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	uint32_t currTicks = _systick_counter;
 800054c:	f240 03ec 	movw	r3, #236	; 0xec
 8000550:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	60fb      	str	r3, [r7, #12]

	while ((_systick_counter - currTicks) < dlyTicks)
 8000558:	bf00      	nop
 800055a:	f240 03ec 	movw	r3, #236	; 0xec
 800055e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	1ad2      	subs	r2, r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	429a      	cmp	r2, r3
 800056c:	d3f5      	bcc.n	800055a <SysTick_delay+0x16>
		;
}
 800056e:	f107 0714 	add.w	r7, r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <SysTick_Start>:

void SysTick_Start(const uint32_t ticks) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	if ( SysTick_Config(SystemCoreClock / ticks) ) {
 8000580:	f240 03d8 	movw	r3, #216	; 0xd8
 8000584:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ff93 	bl	80004bc <SysTick_Config>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d000      	beq.n	800059e <SysTick_Start+0x26>
		/* Setup SysTick for 1 msec interrupts */
		/* Handle Error */
		while (1)
			;
 800059c:	e7fe      	b.n	800059c <SysTick_Start+0x24>
	}
}
 800059e:	f107 0708 	add.w	r7, r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop

080005a8 <SysTick_count>:

uint32_t SysTick_count() {
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
	return _systick_counter;
 80005ac:	f240 03ec 	movw	r3, #236	; 0xec
 80005b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005b4:	681b      	ldr	r3, [r3, #0]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <buffer_clear>:
	USART_6
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	r->head = 0;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f04f 0200 	mov.w	r2, #0
 80005ce:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	r->tail = 0;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	f04f 0200 	mov.w	r2, #0
 80005d8:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	r->count = 0;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f04f 0200 	mov.w	r2, #0
 80005e2:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 80005e6:	f107 070c 	add.w	r7, r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	return r->count;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
}
 80005fe:	4618      	mov	r0, r3
 8000600:	f107 070c 	add.w	r7, r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8000620:	b212      	sxth	r2, r2
 8000622:	b21b      	sxth	r3, r3
 8000624:	429a      	cmp	r2, r3
 8000626:	d107      	bne.n	8000638 <buffer_is_full+0x2c>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <buffer_is_full+0x2c>
		return 1;
 8000632:	f04f 0301 	mov.w	r3, #1
 8000636:	e001      	b.n	800063c <buffer_is_full+0x30>
	}
	return 0;
 8000638:	f04f 0300 	mov.w	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	f107 070c 	add.w	r7, r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <buffer_enque>:

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
	if ( buffer_is_full(r) )
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ffd9 	bl	800060c <buffer_is_full>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <buffer_enque+0x1e>
		return 0xffff;
 8000660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000664:	e027      	b.n	80006b6 <buffer_enque+0x6e>
	r->buf[r->head++] = w;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800066c:	b219      	sxth	r1, r3
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	8878      	ldrh	r0, [r7, #2]
 8000672:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8000676:	f103 0301 	add.w	r3, r3, #1
 800067a:	b29a      	uxth	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	r->count++;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000688:	f103 0301 	add.w	r3, r3, #1
 800068c:	b29a      	uxth	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800069a:	b21a      	sxth	r2, r3
 800069c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80006a0:	ea4f 6353 	mov.w	r3, r3, lsr #25
 80006a4:	18d2      	adds	r2, r2, r3
 80006a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	return w;
 80006b4:	887b      	ldrh	r3, [r7, #2]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	f107 0708 	add.w	r7, r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <buffer_deque>:

uint16_t buffer_deque(USARTRing * r) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	uint16_t w;
	if ( buffer_count(r) == 0 )
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ff91 	bl	80005f0 <buffer_count>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d102      	bne.n	80006da <buffer_deque+0x1a>
		return 0xffff;
 80006d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d8:	e027      	b.n	800072a <buffer_deque+0x6a>
	w = r->buf[r->tail++];
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80006e0:	b219      	sxth	r1, r3
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80006e8:	81fa      	strh	r2, [r7, #14]
 80006ea:	f103 0301 	add.w	r3, r3, #1
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	r->count--;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80006fc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000700:	b29a      	uxth	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800070e:	b21a      	sxth	r2, r3
 8000710:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000714:	ea4f 6353 	mov.w	r3, r3, lsr #25
 8000718:	18d2      	adds	r2, r2, r3
 800071a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	b29a      	uxth	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	return w;
 8000728:	89fb      	ldrh	r3, [r7, #14]
}
 800072a:	4618      	mov	r0, r3
 800072c:	f107 0710 	add.w	r7, r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <usart_id>:
  UART4,
  UART5,
  USART6,
};

uint8_t usart_id(USART_TypeDef * USARTx) {
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	if ( USARTx == USART1 )
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000746:	429a      	cmp	r2, r3
 8000748:	d102      	bne.n	8000750 <usart_id+0x1c>
			return USART_1;
 800074a:	f04f 0300 	mov.w	r3, #0
 800074e:	e01f      	b.n	8000790 <usart_id+0x5c>
	if ( USARTx == USART2 )
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000756:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800075a:	429a      	cmp	r2, r3
 800075c:	d102      	bne.n	8000764 <usart_id+0x30>
			return USART_2;
 800075e:	f04f 0301 	mov.w	r3, #1
 8000762:	e015      	b.n	8000790 <usart_id+0x5c>
	if ( USARTx == USART3 )
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800076a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800076e:	429a      	cmp	r2, r3
 8000770:	d102      	bne.n	8000778 <usart_id+0x44>
			return USART_3;
 8000772:	f04f 0302 	mov.w	r3, #2
 8000776:	e00b      	b.n	8000790 <usart_id+0x5c>
	if ( USARTx == USART6 )
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000782:	429a      	cmp	r2, r3
 8000784:	d102      	bne.n	800078c <usart_id+0x58>
			return USART_6;
 8000786:	f04f 0305 	mov.w	r3, #5
 800078a:	e001      	b.n	8000790 <usart_id+0x5c>
	return 0;
 800078c:	f04f 0300 	mov.w	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	f107 070c 	add.w	r7, r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <usart_begin>:
				((uint32_t) RCC_APB1Periph_USART3), GPIOB, GPIO_PinSource11, GPIO_PinSource10, GPIO_AF_USART3,
				USART3_IRQn
		}
};

void usart_begin(USART_TypeDef * USARTx, const uint32_t baud) {
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b08b      	sub	sp, #44	; 0x2c
 80007a0:	af02      	add	r7, sp, #8
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
	//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	uint8_t portid = usart_id(USARTx);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ffc4 	bl	8000734 <usart_id>
 80007ac:	4603      	mov	r3, r0
 80007ae:	77fb      	strb	r3, [r7, #31]
	if ( portid == 6 )
 80007b0:	7ffb      	ldrb	r3, [r7, #31]
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d100      	bne.n	80007b8 <usart_begin+0x1c>
		while(1);
 80007b6:	e7fe      	b.n	80007b6 <usart_begin+0x1a>

	//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
	GPIOMode(USARTPortInfo[portid].rxpin | USARTPortInfo[portid].txpin, GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP,
 80007b8:	7ff9      	ldrb	r1, [r7, #31]
 80007ba:	f240 028c 	movw	r2, #140	; 0x8c
 80007be:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80007c2:	460b      	mov	r3, r1
 80007c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80007c8:	185b      	adds	r3, r3, r1
 80007ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80007ce:	18d3      	adds	r3, r2, r3
 80007d0:	6818      	ldr	r0, [r3, #0]
 80007d2:	7ff9      	ldrb	r1, [r7, #31]
 80007d4:	f240 028c 	movw	r2, #140	; 0x8c
 80007d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80007dc:	460b      	mov	r3, r1
 80007de:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80007e2:	185b      	adds	r3, r3, r1
 80007e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80007e8:	18d3      	adds	r3, r2, r3
 80007ea:	f103 0304 	add.w	r3, r3, #4
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4303      	orrs	r3, r0
 80007f2:	f04f 0201 	mov.w	r2, #1
 80007f6:	9200      	str	r2, [sp, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f04f 0102 	mov.w	r1, #2
 80007fe:	f04f 0202 	mov.w	r2, #2
 8000802:	f04f 0300 	mov.w	r3, #0
 8000806:	f7ff fd83 	bl	8000310 <GPIOMode>
			GPIO_PuPd_UP);
	/* USART3 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, (FunctionalState) ENABLE);
 800080a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800080e:	f04f 0101 	mov.w	r1, #1
 8000812:	f001 febd 	bl	8002590 <RCC_APB1PeriphClockCmd>

	GPIO_PinAFConfig(USARTPortInfo[portid].afgpio, USARTPortInfo[portid].txsource, USARTPortInfo[portid].afmapping ); // TX -- PB10
 8000816:	7ff9      	ldrb	r1, [r7, #31]
 8000818:	f240 028c 	movw	r2, #140	; 0x8c
 800081c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000820:	460b      	mov	r3, r1
 8000822:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000826:	185b      	adds	r3, r3, r1
 8000828:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800082c:	18d3      	adds	r3, r2, r3
 800082e:	f103 030c 	add.w	r3, r3, #12
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	7ff9      	ldrb	r1, [r7, #31]
 8000836:	f240 028c 	movw	r2, #140	; 0x8c
 800083a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800083e:	460b      	mov	r3, r1
 8000840:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000844:	185b      	adds	r3, r3, r1
 8000846:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800084a:	18d3      	adds	r3, r2, r3
 800084c:	f103 0310 	add.w	r3, r3, #16
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	461c      	mov	r4, r3
 8000854:	7ff9      	ldrb	r1, [r7, #31]
 8000856:	f240 028c 	movw	r2, #140	; 0x8c
 800085a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800085e:	460b      	mov	r3, r1
 8000860:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000864:	185b      	adds	r3, r3, r1
 8000866:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800086a:	18d3      	adds	r3, r2, r3
 800086c:	f103 0310 	add.w	r3, r3, #16
 8000870:	789b      	ldrb	r3, [r3, #2]
 8000872:	4621      	mov	r1, r4
 8000874:	461a      	mov	r2, r3
 8000876:	f000 fd1b 	bl	80012b0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(USARTPortInfo[portid].afgpio, USARTPortInfo[portid].rxsource,  USARTPortInfo[portid].afmapping ); // RX -- PB11
 800087a:	7ff9      	ldrb	r1, [r7, #31]
 800087c:	f240 028c 	movw	r2, #140	; 0x8c
 8000880:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000884:	460b      	mov	r3, r1
 8000886:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800088a:	185b      	adds	r3, r3, r1
 800088c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000890:	18d3      	adds	r3, r2, r3
 8000892:	f103 030c 	add.w	r3, r3, #12
 8000896:	6818      	ldr	r0, [r3, #0]
 8000898:	7ff9      	ldrb	r1, [r7, #31]
 800089a:	f240 028c 	movw	r2, #140	; 0x8c
 800089e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80008a2:	460b      	mov	r3, r1
 80008a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80008a8:	185b      	adds	r3, r3, r1
 80008aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80008ae:	18d3      	adds	r3, r2, r3
 80008b0:	f103 0310 	add.w	r3, r3, #16
 80008b4:	785b      	ldrb	r3, [r3, #1]
 80008b6:	461c      	mov	r4, r3
 80008b8:	7ff9      	ldrb	r1, [r7, #31]
 80008ba:	f240 028c 	movw	r2, #140	; 0x8c
 80008be:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80008c2:	460b      	mov	r3, r1
 80008c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80008c8:	185b      	adds	r3, r3, r1
 80008ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80008ce:	18d3      	adds	r3, r2, r3
 80008d0:	f103 0310 	add.w	r3, r3, #16
 80008d4:	789b      	ldrb	r3, [r3, #2]
 80008d6:	4621      	mov	r1, r4
 80008d8:	461a      	mov	r2, r3
 80008da:	f000 fce9 	bl	80012b0 <GPIO_PinAFConfig>

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 80008e2:	f04f 0300 	mov.w	r3, #0
 80008e6:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 80008e8:	f04f 0300 	mov.w	r3, #0
 80008ec:	827b      	strh	r3, [r7, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 80008ee:	f04f 0300 	mov.w	r3, #0
 80008f2:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 80008fa:	f04f 030c 	mov.w	r3, #12
 80008fe:	82fb      	strh	r3, [r7, #22]

	USART_Init(USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	4619      	mov	r1, r3
 8000908:	f004 f82e 	bl	8004968 <USART_Init>

	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f240 5125 	movw	r1, #1317	; 0x525
 8000912:	f04f 0201 	mov.w	r2, #1
 8000916:	f004 fb8d 	bl	8005034 <USART_ITConfig>
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f240 7127 	movw	r1, #1831	; 0x727
 8000920:	f04f 0200 	mov.w	r2, #0
 8000924:	f004 fb86 	bl	8005034 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USARTPortInfo[portid].irq_channel;
 8000928:	7ff9      	ldrb	r1, [r7, #31]
 800092a:	f240 028c 	movw	r2, #140	; 0x8c
 800092e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000932:	460b      	mov	r3, r1
 8000934:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000938:	185b      	adds	r3, r3, r1
 800093a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800093e:	18d3      	adds	r3, r2, r3
 8000940:	f103 0310 	add.w	r3, r3, #16
 8000944:	78db      	ldrb	r3, [r3, #3]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	723b      	strb	r3, [r7, #8]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 800094a:	f04f 0300 	mov.w	r3, #0
 800094e:	727b      	strb	r3, [r7, #9]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8000950:	f04f 0300 	mov.w	r3, #0
 8000954:	72bb      	strb	r3, [r7, #10]
	NVIC_InitStructure.NVIC_IRQChannelCmd = (FunctionalState) ENABLE;	// the USART3 interrupts are globally enabled
 8000956:	f04f 0301 	mov.w	r3, #1
 800095a:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f983 	bl	8000c6c <NVIC_Init>

	buffer_clear(&rxring[portid]);
 8000966:	7ffb      	ldrb	r3, [r7, #31]
 8000968:	f44f 7283 	mov.w	r2, #262	; 0x106
 800096c:	fb02 f203 	mul.w	r2, r2, r3
 8000970:	f240 4304 	movw	r3, #1028	; 0x404
 8000974:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000978:	18d3      	adds	r3, r2, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fe20 	bl	80005c0 <buffer_clear>
	buffer_clear(&txring[portid]);
 8000980:	7ffb      	ldrb	r3, [r7, #31]
 8000982:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000986:	fb02 f203 	mul.w	r2, r2, r3
 800098a:	f240 03f0 	movw	r3, #240	; 0xf0
 800098e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000992:	18d3      	adds	r3, r2, r3
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fe13 	bl	80005c0 <buffer_clear>

	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx, (FunctionalState) ENABLE);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f04f 0101 	mov.w	r1, #1
 80009a0:	f004 f91e 	bl	8004be0 <USART_Cmd>
}
 80009a4:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd90      	pop	{r4, r7, pc}

080009ac <usart_bare_write>:

void usart_bare_write(USART_TypeDef * USARTx, const uint16_t w) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	807b      	strh	r3, [r7, #2]
	while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET)
 80009b8:	bf00      	nop
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f04f 0180 	mov.w	r1, #128	; 0x80
 80009c0:	f004 fb8a 	bl	80050d8 <USART_GetFlagStatus>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d0f7      	beq.n	80009ba <usart_bare_write+0xe>
		;
	USART_SendData(USARTx, w);
 80009ca:	887b      	ldrh	r3, [r7, #2]
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	4619      	mov	r1, r3
 80009d0:	f004 f986 	bl	8004ce0 <USART_SendData>
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
}
 80009d4:	f107 0708 	add.w	r7, r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <usart_write>:

void usart_write(USART_TypeDef * USARTx, const uint16_t w) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	807b      	strh	r3, [r7, #2]
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f240 7127 	movw	r1, #1831	; 0x727
 80009ee:	f04f 0200 	mov.w	r2, #0
 80009f2:	f004 fb1f 	bl	8005034 <USART_ITConfig>
	buffer_enque(&txring[USART_3], w);
 80009f6:	887b      	ldrh	r3, [r7, #2]
 80009f8:	4807      	ldr	r0, [pc, #28]	; (8000a18 <usart_write+0x3c>)
 80009fa:	4619      	mov	r1, r3
 80009fc:	f7ff fe24 	bl	8000648 <buffer_enque>
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) ENABLE);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f240 7127 	movw	r1, #1831	; 0x727
 8000a06:	f04f 0201 	mov.w	r2, #1
 8000a0a:	f004 fb13 	bl	8005034 <USART_ITConfig>
}
 8000a0e:	f107 0708 	add.w	r7, r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200002fc 	.word	0x200002fc

08000a1c <usart_print>:

void usart_print(USART_TypeDef * USARTx, const char * s) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
	while (*s)
 8000a26:	e009      	b.n	8000a3c <usart_print+0x20>
		usart_write(USARTx, (uint16_t) *s++);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	f102 0201 	add.w	r2, r2, #1
 8000a32:	603a      	str	r2, [r7, #0]
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	4619      	mov	r1, r3
 8000a38:	f7ff ffd0 	bl	80009dc <usart_write>
	buffer_enque(&txring[USART_3], w);
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) ENABLE);
}

void usart_print(USART_TypeDef * USARTx, const char * s) {
	while (*s)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1f1      	bne.n	8000a28 <usart_print+0xc>
		usart_write(USARTx, (uint16_t) *s++);
}
 8000a44:	f107 0708 	add.w	r7, r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <usart_bare_read>:

uint16_t usart_bare_read(USART_TypeDef * USARTx) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	return USART_ReceiveData(USARTx );
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f004 f957 	bl	8004d08 <USART_ReceiveData>
 8000a5a:	4603      	mov	r3, r0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f107 0708 	add.w	r7, r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop

08000a68 <usart_read>:

uint16_t usart_read(USART_TypeDef * USARTx) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	uint16_t w = buffer_deque(&rxring[USART_3]);
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <usart_read+0x30>)
 8000a72:	f7ff fe25 	bl	80006c0 <buffer_deque>
 8000a76:	4603      	mov	r3, r0
 8000a78:	81fb      	strh	r3, [r7, #14]
	if ( w == 0xffff ) return 0; // buffer is empty
 8000a7a:	89fa      	ldrh	r2, [r7, #14]
 8000a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d102      	bne.n	8000a8a <usart_read+0x22>
 8000a84:	f04f 0300 	mov.w	r3, #0
 8000a88:	e000      	b.n	8000a8c <usart_read+0x24>
	return w;
 8000a8a:	89fb      	ldrh	r3, [r7, #14]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f107 0710 	add.w	r7, r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000610 	.word	0x20000610

08000a9c <usart_flush>:

void usart_flush(USART_TypeDef * USARTx) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f240 5125 	movw	r1, #1317	; 0x525
 8000aaa:	f04f 0200 	mov.w	r2, #0
 8000aae:	f004 fac1 	bl	8005034 <USART_ITConfig>
	buffer_clear(&rxring[USART_3]);
 8000ab2:	4821      	ldr	r0, [pc, #132]	; (8000b38 <usart_flush+0x9c>)
 8000ab4:	f7ff fd84 	bl	80005c0 <buffer_clear>
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f240 5125 	movw	r1, #1317	; 0x525
 8000abe:	f004 fb9f 	bl	8005200 <USART_ClearITPendingBit>
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f240 5125 	movw	r1, #1317	; 0x525
 8000ac8:	f04f 0201 	mov.w	r2, #1
 8000acc:	f004 fab2 	bl	8005034 <USART_ITConfig>
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f240 7127 	movw	r1, #1831	; 0x727
 8000ad6:	f04f 0200 	mov.w	r2, #0
 8000ada:	f004 faab 	bl	8005034 <USART_ITConfig>
	while ( buffer_count(&txring[USART_3]) > 0 ) {
 8000ade:	e019      	b.n	8000b14 <usart_flush+0x78>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
 8000ae0:	bf00      	nop
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000ae8:	f004 faf6 	bl	80050d8 <USART_GetFlagStatus>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d0f7      	beq.n	8000ae2 <usart_flush+0x46>
		USART_SendData(USARTx, buffer_deque(&txring[USART_3]));
 8000af2:	4812      	ldr	r0, [pc, #72]	; (8000b3c <usart_flush+0xa0>)
 8000af4:	f7ff fde4 	bl	80006c0 <buffer_deque>
 8000af8:	4603      	mov	r3, r0
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f004 f8ef 	bl	8004ce0 <USART_SendData>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
 8000b02:	bf00      	nop
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f04f 0140 	mov.w	r1, #64	; 0x40
 8000b0a:	f004 fae5 	bl	80050d8 <USART_GetFlagStatus>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0f7      	beq.n	8000b04 <usart_flush+0x68>
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[USART_3]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
	while ( buffer_count(&txring[USART_3]) > 0 ) {
 8000b14:	4809      	ldr	r0, [pc, #36]	; (8000b3c <usart_flush+0xa0>)
 8000b16:	f7ff fd6b 	bl	80005f0 <buffer_count>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1df      	bne.n	8000ae0 <usart_flush+0x44>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
		USART_SendData(USARTx, buffer_deque(&txring[USART_3]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f240 7127 	movw	r1, #1831	; 0x727
 8000b26:	f004 fb6b 	bl	8005200 <USART_ClearITPendingBit>
	buffer_clear(&txring[USART_3]);
 8000b2a:	4804      	ldr	r0, [pc, #16]	; (8000b3c <usart_flush+0xa0>)
 8000b2c:	f7ff fd48 	bl	80005c0 <buffer_clear>
}
 8000b30:	f107 0708 	add.w	r7, r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000610 	.word	0x20000610
 8000b3c:	200002fc 	.word	0x200002fc

08000b40 <usart_peek>:

uint16_t usart_peek(USART_TypeDef * uport) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	if ( ! buffer_count(&rxring[USART_3]) == 0 )
 8000b48:	480e      	ldr	r0, [pc, #56]	; (8000b84 <usart_peek+0x44>)
 8000b4a:	f7ff fd51 	bl	80005f0 <buffer_count>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00f      	beq.n	8000b74 <usart_peek+0x34>
		return rxring[USART_3].buf[rxring[USART_3].tail];
 8000b54:	f240 4304 	movw	r3, #1028	; 0x404
 8000b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b5c:	f8b3 330e 	ldrh.w	r3, [r3, #782]	; 0x30e
 8000b60:	b21a      	sxth	r2, r3
 8000b62:	f240 4304 	movw	r3, #1028	; 0x404
 8000b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b6a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8000b6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b72:	e001      	b.n	8000b78 <usart_peek+0x38>
	return 0xffff;
 8000b74:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f107 0708 	add.w	r7, r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000610 	.word	0x20000610

08000b88 <usart_available>:

uint16_t usart_available(USART_TypeDef * uport) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	return buffer_count(&rxring[USART_3]);
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <usart_available+0x1c>)
 8000b92:	f7ff fd2d 	bl	80005f0 <buffer_count>
 8000b96:	4603      	mov	r3, r0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f107 0708 	add.w	r7, r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000610 	.word	0x20000610

08000ba8 <USART3_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART3_IRQHandler(void) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8000bac:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000bb0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000bb4:	f240 5125 	movw	r1, #1317	; 0x525
 8000bb8:	f004 fac0 	bl	800513c <USART_GetITStatus>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00a      	beq.n	8000bd8 <USART3_IRQHandler+0x30>
		buffer_enque(&rxring[USART_3], USART_ReceiveData(USART3) );
 8000bc2:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000bc6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000bca:	f004 f89d 	bl	8004d08 <USART_ReceiveData>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	481a      	ldr	r0, [pc, #104]	; (8000c3c <USART3_IRQHandler+0x94>)
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f7ff fd38 	bl	8000648 <buffer_enque>
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8000bd8:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000bdc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000be0:	f240 7127 	movw	r1, #1831	; 0x727
 8000be4:	f004 faaa 	bl	800513c <USART_GetITStatus>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d025      	beq.n	8000c3a <USART3_IRQHandler+0x92>
		if (txring[USART_3].count == 0) {
 8000bee:	f240 03f0 	movw	r3, #240	; 0xf0
 8000bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bf6:	f8b3 3310 	ldrh.w	r3, [r3, #784]	; 0x310
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d112      	bne.n	8000c24 <USART3_IRQHandler+0x7c>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8000bfe:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000c02:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000c06:	f240 7127 	movw	r1, #1831	; 0x727
 8000c0a:	f04f 0200 	mov.w	r2, #0
 8000c0e:	f004 fa11 	bl	8005034 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000c12:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000c16:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000c1a:	f240 7127 	movw	r1, #1831	; 0x727
 8000c1e:	f004 faef 	bl	8005200 <USART_ClearITPendingBit>
 8000c22:	e00a      	b.n	8000c3a <USART3_IRQHandler+0x92>
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART_3]));
 8000c24:	4806      	ldr	r0, [pc, #24]	; (8000c40 <USART3_IRQHandler+0x98>)
 8000c26:	f7ff fd4b 	bl	80006c0 <buffer_deque>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000c30:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000c34:	4619      	mov	r1, r3
 8000c36:	f004 f853 	bl	8004ce0 <USART_SendData>
		}
	}
}
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000610 	.word	0x20000610
 8000c40:	200002fc 	.word	0x200002fc

08000c44 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000c4c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000c50:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 8000c5a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c5e:	60da      	str	r2, [r3, #12]
}
 8000c60:	f107 070c 	add.w	r7, r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]
 8000c7a:	f04f 0300 	mov.w	r3, #0
 8000c7e:	73bb      	strb	r3, [r7, #14]
 8000c80:	f04f 030f 	mov.w	r3, #15
 8000c84:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	78db      	ldrb	r3, [r3, #3]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d045      	beq.n	8000d1a <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000c8e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000c92:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	ea6f 0303 	mvn.w	r3, r3
 8000c9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ca0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000ca4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	f1c3 0304 	rsb	r3, r3, #4
 8000cac:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000cae:	7b7a      	ldrb	r2, [r7, #13]
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	fa42 f303 	asr.w	r3, r2, r3
 8000cb6:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	785b      	ldrb	r3, [r3, #1]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	7bbb      	ldrb	r3, [r7, #14]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	789a      	ldrb	r2, [r3, #2]
 8000cca:	7b7b      	ldrb	r3, [r7, #13]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000cdc:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000cde:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000ce2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	7812      	ldrb	r2, [r2, #0]
 8000cea:	189b      	adds	r3, r3, r2
 8000cec:	7bfa      	ldrb	r2, [r7, #15]
 8000cee:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000cf2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000cf6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	7812      	ldrb	r2, [r2, #0]
 8000cfe:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000d02:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	7809      	ldrb	r1, [r1, #0]
 8000d08:	f001 011f 	and.w	r1, r1, #31
 8000d0c:	f04f 0001 	mov.w	r0, #1
 8000d10:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000d18:	e014      	b.n	8000d44 <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d1a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000d1e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	7812      	ldrb	r2, [r2, #0]
 8000d26:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000d2a:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	7809      	ldrb	r1, [r1, #0]
 8000d30:	f001 011f 	and.w	r1, r1, #31
 8000d34:	f04f 0001 	mov.w	r0, #1
 8000d38:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d3c:	f102 0220 	add.w	r2, r2, #32
 8000d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000d44:	f107 0714 	add.w	r7, r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000d5a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000d5e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8000d68:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	609a      	str	r2, [r3, #8]
}
 8000d72:	f107 070c 	add.w	r7, r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	71fa      	strb	r2, [r7, #7]
 8000d88:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000d8a:	79bb      	ldrb	r3, [r7, #6]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d00c      	beq.n	8000daa <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
 8000d90:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000d94:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000d98:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000d9c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000da0:	6911      	ldr	r1, [r2, #16]
 8000da2:	79fa      	ldrb	r2, [r7, #7]
 8000da4:	430a      	orrs	r2, r1
 8000da6:	611a      	str	r2, [r3, #16]
 8000da8:	e00d      	b.n	8000dc6 <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000daa:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000dae:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000db2:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000db6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000dba:	6911      	ldr	r1, [r2, #16]
 8000dbc:	79fa      	ldrb	r2, [r7, #7]
 8000dbe:	ea6f 0202 	mvn.w	r2, r2
 8000dc2:	400a      	ands	r2, r1
 8000dc4:	611a      	str	r2, [r3, #16]
  }
}
 8000dc6:	f107 070c 	add.w	r7, r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	d10c      	bne.n	8000df8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000dde:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000de2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000de6:	f24e 0210 	movw	r2, #57360	; 0xe010
 8000dea:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000dee:	6812      	ldr	r2, [r2, #0]
 8000df0:	f042 0204 	orr.w	r2, r2, #4
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	e00b      	b.n	8000e10 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000df8:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000dfc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000e00:	f24e 0210 	movw	r2, #57360	; 0xe010
 8000e04:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	f022 0204 	bic.w	r2, r2, #4
 8000e0e:	601a      	str	r2, [r3, #0]
  }
}
 8000e10:	f107 070c 	add.w	r7, r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	f04f 0300 	mov.w	r3, #0
 8000e2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d10c      	bne.n	8000e4c <GPIO_DeInit+0x30>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000e32:	f04f 0001 	mov.w	r0, #1
 8000e36:	f04f 0101 	mov.w	r1, #1
 8000e3a:	f001 fbfd 	bl	8002638 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000e3e:	f04f 0001 	mov.w	r0, #1
 8000e42:	f04f 0100 	mov.w	r1, #0
 8000e46:	f001 fbf7 	bl	8002638 <RCC_AHB1PeriphResetCmd>
 8000e4a:	e09e      	b.n	8000f8a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOB)
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d10c      	bne.n	8000e74 <GPIO_DeInit+0x58>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000e5a:	f04f 0002 	mov.w	r0, #2
 8000e5e:	f04f 0101 	mov.w	r1, #1
 8000e62:	f001 fbe9 	bl	8002638 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8000e66:	f04f 0002 	mov.w	r0, #2
 8000e6a:	f04f 0100 	mov.w	r1, #0
 8000e6e:	f001 fbe3 	bl	8002638 <RCC_AHB1PeriphResetCmd>
 8000e72:	e08a      	b.n	8000f8a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOC)
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d10c      	bne.n	8000e9c <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000e82:	f04f 0004 	mov.w	r0, #4
 8000e86:	f04f 0101 	mov.w	r1, #1
 8000e8a:	f001 fbd5 	bl	8002638 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8000e8e:	f04f 0004 	mov.w	r0, #4
 8000e92:	f04f 0100 	mov.w	r1, #0
 8000e96:	f001 fbcf 	bl	8002638 <RCC_AHB1PeriphResetCmd>
 8000e9a:	e076      	b.n	8000f8a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOD)
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ea2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d10c      	bne.n	8000ec4 <GPIO_DeInit+0xa8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000eaa:	f04f 0008 	mov.w	r0, #8
 8000eae:	f04f 0101 	mov.w	r1, #1
 8000eb2:	f001 fbc1 	bl	8002638 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8000eb6:	f04f 0008 	mov.w	r0, #8
 8000eba:	f04f 0100 	mov.w	r1, #0
 8000ebe:	f001 fbbb 	bl	8002638 <RCC_AHB1PeriphResetCmd>
 8000ec2:	e062      	b.n	8000f8a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOE)
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d10c      	bne.n	8000eec <GPIO_DeInit+0xd0>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000ed2:	f04f 0010 	mov.w	r0, #16
 8000ed6:	f04f 0101 	mov.w	r1, #1
 8000eda:	f001 fbad 	bl	8002638 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000ede:	f04f 0010 	mov.w	r0, #16
 8000ee2:	f04f 0100 	mov.w	r1, #0
 8000ee6:	f001 fba7 	bl	8002638 <RCC_AHB1PeriphResetCmd>
 8000eea:	e04e      	b.n	8000f8a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOF)
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ef2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d10c      	bne.n	8000f14 <GPIO_DeInit+0xf8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000efa:	f04f 0020 	mov.w	r0, #32
 8000efe:	f04f 0101 	mov.w	r1, #1
 8000f02:	f001 fb99 	bl	8002638 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000f06:	f04f 0020 	mov.w	r0, #32
 8000f0a:	f04f 0100 	mov.w	r1, #0
 8000f0e:	f001 fb93 	bl	8002638 <RCC_AHB1PeriphResetCmd>
 8000f12:	e03a      	b.n	8000f8a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOG)
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d10c      	bne.n	8000f3c <GPIO_DeInit+0x120>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000f22:	f04f 0040 	mov.w	r0, #64	; 0x40
 8000f26:	f04f 0101 	mov.w	r1, #1
 8000f2a:	f001 fb85 	bl	8002638 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000f2e:	f04f 0040 	mov.w	r0, #64	; 0x40
 8000f32:	f04f 0100 	mov.w	r1, #0
 8000f36:	f001 fb7f 	bl	8002638 <RCC_AHB1PeriphResetCmd>
 8000f3a:	e026      	b.n	8000f8a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOH)
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f42:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d10c      	bne.n	8000f64 <GPIO_DeInit+0x148>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000f4a:	f04f 0080 	mov.w	r0, #128	; 0x80
 8000f4e:	f04f 0101 	mov.w	r1, #1
 8000f52:	f001 fb71 	bl	8002638 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000f56:	f04f 0080 	mov.w	r0, #128	; 0x80
 8000f5a:	f04f 0100 	mov.w	r1, #0
 8000f5e:	f001 fb6b 	bl	8002638 <RCC_AHB1PeriphResetCmd>
 8000f62:	e012      	b.n	8000f8a <GPIO_DeInit+0x16e>
  }
  else
  {
    if (GPIOx == GPIOI)
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d10b      	bne.n	8000f8a <GPIO_DeInit+0x16e>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000f72:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f76:	f04f 0101 	mov.w	r1, #1
 8000f7a:	f001 fb5d 	bl	8002638 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000f7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f82:	f04f 0100 	mov.w	r1, #0
 8000f86:	f001 fb57 	bl	8002638 <RCC_AHB1PeriphResetCmd>
    }
  }
}
 8000f8a:	f107 0708 	add.w	r7, r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop

08000f94 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	e086      	b.n	80010c6 <GPIO_Init+0x132>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f04f 0201 	mov.w	r2, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d173      	bne.n	80010be <GPIO_Init+0x12a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000fe0:	f04f 0103 	mov.w	r1, #3
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	ea6f 0303 	mvn.w	r3, r3
 8000fec:	401a      	ands	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	791b      	ldrb	r3, [r3, #4]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	431a      	orrs	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	791b      	ldrb	r3, [r3, #4]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d003      	beq.n	800101c <GPIO_Init+0x88>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	791b      	ldrb	r3, [r3, #4]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d134      	bne.n	8001086 <GPIO_Init+0xf2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001026:	f04f 0103 	mov.w	r1, #3
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	ea6f 0303 	mvn.w	r3, r3
 8001032:	401a      	ands	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	795b      	ldrb	r3, [r3, #5]
 8001040:	4619      	mov	r1, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	431a      	orrs	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	b29b      	uxth	r3, r3
 800105a:	f04f 0101 	mov.w	r1, #1
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	ea6f 0303 	mvn.w	r3, r3
 8001066:	401a      	ands	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	799b      	ldrb	r3, [r3, #6]
 8001074:	4619      	mov	r1, r3
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	b29b      	uxth	r3, r3
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	b29b      	uxth	r3, r3
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68da      	ldr	r2, [r3, #12]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	b29b      	uxth	r3, r3
 800108e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001092:	f04f 0103 	mov.w	r1, #3
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	ea6f 0303 	mvn.w	r3, r3
 800109e:	401a      	ands	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	79db      	ldrb	r3, [r3, #7]
 80010ac:	4619      	mov	r1, r3
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	431a      	orrs	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f103 0301 	add.w	r3, r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	f67f af75 	bls.w	8000fb8 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80010ce:	f107 071c 	add.w	r7, r7, #28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	71da      	strb	r2, [r3, #7]
}
 8001108:	f107 070c 	add.w	r7, r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop

08001114 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8001120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001124:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001134:	887a      	ldrh	r2, [r7, #2]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	60fb      	str	r3, [r7, #12]
}
 800114c:	f107 0714 	add.w	r7, r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop

08001158 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691a      	ldr	r2, [r3, #16]
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	4013      	ands	r3, r2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001176:	f04f 0301 	mov.w	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e002      	b.n	8001184 <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800117e:	f04f 0300 	mov.w	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
}
 8001186:	4618      	mov	r0, r3
 8001188:	f107 0714 	add.w	r7, r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop

08001194 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	b29b      	uxth	r3, r3
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	f107 070c 	add.w	r7, r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop

080011b0 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695a      	ldr	r2, [r3, #20]
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80011ce:	f04f 0301 	mov.w	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e002      	b.n	80011dc <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80011d6:	f04f 0300 	mov.w	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	f107 0714 	add.w	r7, r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop

080011ec <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	b29b      	uxth	r3, r3
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	f107 070c 	add.w	r7, r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop

08001208 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	887a      	ldrh	r2, [r7, #2]
 8001218:	831a      	strh	r2, [r3, #24]
}
 800121a:	f107 070c 	add.w	r7, r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	835a      	strh	r2, [r3, #26]
}
 8001236:	f107 070c 	add.w	r7, r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	460a      	mov	r2, r1
 800124c:	807a      	strh	r2, [r7, #2]
 800124e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	887a      	ldrh	r2, [r7, #2]
 800125a:	831a      	strh	r2, [r3, #24]
 800125c:	e002      	b.n	8001264 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	887a      	ldrh	r2, [r7, #2]
 8001262:	835a      	strh	r2, [r3, #26]
  }
}
 8001264:	f107 070c 	add.w	r7, r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop

08001270 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800127c:	887a      	ldrh	r2, [r7, #2]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	615a      	str	r2, [r3, #20]
}
 8001282:	f107 070c 	add.w	r7, r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	887b      	ldrh	r3, [r7, #2]
 800129e:	405a      	eors	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	615a      	str	r2, [r3, #20]
}
 80012a4:	f107 070c 	add.w	r7, r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop

080012b0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	460a      	mov	r2, r1
 80012bc:	807a      	strh	r2, [r7, #2]
 80012be:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80012cc:	787a      	ldrb	r2, [r7, #1]
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	461a      	mov	r2, r3
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4619      	mov	r1, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f101 0108 	add.w	r1, r1, #8
 80012f8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80012fc:	887b      	ldrh	r3, [r7, #2]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001306:	f04f 000f 	mov.w	r0, #15
 800130a:	fa00 f303 	lsl.w	r3, r0, r3
 800130e:	ea6f 0303 	mvn.w	r3, r3
 8001312:	4019      	ands	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f102 0208 	add.w	r2, r2, #8
 800131a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8001324:	b29b      	uxth	r3, r3
 8001326:	461a      	mov	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f102 0208 	add.w	r2, r2, #8
 800132e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4313      	orrs	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001338:	887b      	ldrh	r3, [r7, #2]
 800133a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800133e:	b29b      	uxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f102 0208 	add.w	r2, r2, #8
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800134e:	f107 0714 	add.w	r7, r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8001366:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800136a:	429a      	cmp	r2, r3
 800136c:	d10c      	bne.n	8001388 <I2C_DeInit+0x30>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800136e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001372:	f04f 0101 	mov.w	r1, #1
 8001376:	f001 f9dd 	bl	8002734 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800137a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800137e:	f04f 0100 	mov.w	r1, #0
 8001382:	f001 f9d7 	bl	8002734 <RCC_APB1PeriphResetCmd>
 8001386:	e026      	b.n	80013d6 <I2C_DeInit+0x7e>
  }
  else if (I2Cx == I2C2)
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800138e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001392:	429a      	cmp	r2, r3
 8001394:	d10c      	bne.n	80013b0 <I2C_DeInit+0x58>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001396:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800139a:	f04f 0101 	mov.w	r1, #1
 800139e:	f001 f9c9 	bl	8002734 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80013a2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80013a6:	f04f 0100 	mov.w	r1, #0
 80013aa:	f001 f9c3 	bl	8002734 <RCC_APB1PeriphResetCmd>
 80013ae:	e012      	b.n	80013d6 <I2C_DeInit+0x7e>
  }
  else 
  {
    if (I2Cx == I2C3)
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80013b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d10b      	bne.n	80013d6 <I2C_DeInit+0x7e>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 80013be:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80013c2:	f04f 0101 	mov.w	r1, #1
 80013c6:	f001 f9b5 	bl	8002734 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80013ca:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80013ce:	f04f 0100 	mov.w	r1, #0
 80013d2:	f001 f9af 	bl	8002734 <RCC_APB1PeriphResetCmd>
    }
  }
}
 80013d6:	f107 0708 	add.w	r7, r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop

080013e0 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80013f6:	f04f 0304 	mov.w	r3, #4
 80013fa:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80013fc:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001400:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001404:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	889b      	ldrh	r3, [r3, #4]
 800140a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800140c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800140e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001412:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	4618      	mov	r0, r3
 800141a:	f000 feeb 	bl	80021f4 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	f64d 6383 	movw	r3, #56963	; 0xde83
 8001428:	f2c4 331b 	movt	r3, #17179	; 0x431b
 800142c:	fba3 1302 	umull	r1, r3, r3, r2
 8001430:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8001434:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8001436:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001438:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800143a:	4313      	orrs	r3, r2
 800143c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001442:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	b29a      	uxth	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8001462:	f2c0 0301 	movt	r3, #1
 8001466:	429a      	cmp	r2, r3
 8001468:	d818      	bhi.n	800149c <I2C_Init+0xbc>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	fbb2 f3f3 	udiv	r3, r2, r3
 8001478:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800147a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800147c:	2b03      	cmp	r3, #3
 800147e:	d802      	bhi.n	8001486 <I2C_Init+0xa6>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8001480:	f04f 0304 	mov.w	r3, #4
 8001484:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001486:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001488:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800148a:	4313      	orrs	r3, r2
 800148c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800148e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001490:	f103 0301 	add.w	r3, r3, #1
 8001494:	b29a      	uxth	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	841a      	strh	r2, [r3, #32]
 800149a:	e04b      	b.n	8001534 <I2C_Init+0x154>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	88da      	ldrh	r2, [r3, #6]
 80014a0:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d10a      	bne.n	80014be <I2C_Init+0xde>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4613      	mov	r3, r2
 80014ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80014b2:	189b      	adds	r3, r3, r2
 80014b4:	69fa      	ldr	r2, [r7, #28]
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 80014bc:	e010      	b.n	80014e0 <I2C_Init+0x100>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4613      	mov	r3, r2
 80014c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80014c8:	189b      	adds	r3, r3, r2
 80014ca:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80014ce:	189b      	adds	r3, r3, r2
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80014d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014de:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80014e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014e2:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80014e6:	ea4f 5313 	mov.w	r3, r3, lsr #20
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d103      	bne.n	80014f6 <I2C_Init+0x116>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80014ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80014f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80014f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001506:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001508:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800150a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800150e:	fb02 f203 	mul.w	r2, r2, r3
 8001512:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8001516:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800151a:	fb83 1302 	smull	r1, r3, r3, r2
 800151e:	ea4f 11a3 	mov.w	r1, r3, asr #6
 8001522:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001526:	1acb      	subs	r3, r1, r3
 8001528:	b29b      	uxth	r3, r3
 800152a:	f103 0301 	add.w	r3, r3, #1
 800152e:	b29a      	uxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001538:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	b29a      	uxth	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001550:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001552:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8001556:	f023 0302 	bic.w	r3, r3, #2
 800155a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	889a      	ldrh	r2, [r3, #4]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	895b      	ldrh	r3, [r3, #10]
 8001564:	4313      	orrs	r3, r2
 8001566:	b29a      	uxth	r2, r3
 8001568:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800156a:	4313      	orrs	r3, r2
 800156c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001572:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	899a      	ldrh	r2, [r3, #12]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	891b      	ldrh	r3, [r3, #8]
 800157c:	4313      	orrs	r3, r2
 800157e:	b29a      	uxth	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	811a      	strh	r2, [r3, #8]
}
 8001584:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f241 3288 	movw	r2, #5000	; 0x1388
 800159a:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80015aa:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015c2:	819a      	strh	r2, [r3, #12]
}
 80015c4:	f107 070c 	add.w	r7, r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop

080015d0 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	801a      	strh	r2, [r3, #0]
 80015f2:	e007      	b.n	8001604 <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	b29a      	uxth	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	801a      	strh	r2, [r3, #0]
  }
}
 8001604:	f107 070c 	add.w	r7, r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop

08001610 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d008      	beq.n	8001634 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	b29b      	uxth	r3, r3
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	b29a      	uxth	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	801a      	strh	r2, [r3, #0]
 8001632:	e007      	b.n	8001644 <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	b29b      	uxth	r3, r3
 800163a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800163e:	b29a      	uxth	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	801a      	strh	r2, [r3, #0]
  }
}
 8001644:	f107 070c 	add.w	r7, r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop

08001650 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d008      	beq.n	8001674 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	b29b      	uxth	r3, r3
 8001668:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166c:	b29a      	uxth	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	801a      	strh	r2, [r3, #0]
 8001672:	e007      	b.n	8001684 <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800167e:	b29a      	uxth	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	801a      	strh	r2, [r3, #0]
  }
}
 8001684:	f107 070c 	add.w	r7, r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop

08001690 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	460a      	mov	r2, r1
 800169c:	70fa      	strb	r2, [r7, #3]
 800169e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80016a0:	78bb      	ldrb	r3, [r7, #2]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d004      	beq.n	80016b0 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	70fb      	strb	r3, [r7, #3]
 80016ae:	e003      	b.n	80016b8 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	821a      	strh	r2, [r3, #16]
}
 80016c0:	f107 070c 	add.w	r7, r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop

080016cc <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d008      	beq.n	80016f0 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	801a      	strh	r2, [r3, #0]
 80016ee:	e007      	b.n	8001700 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	801a      	strh	r2, [r3, #0]
  }
}
 8001700:	f107 070c 	add.w	r7, r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop

0800170c <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	899b      	ldrh	r3, [r3, #12]
 8001722:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8001724:	89fb      	ldrh	r3, [r7, #14]
 8001726:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800172a:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	b29b      	uxth	r3, r3
 8001730:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001734:	b29a      	uxth	r2, r3
 8001736:	89fb      	ldrh	r3, [r7, #14]
 8001738:	4313      	orrs	r3, r2
 800173a:	b29b      	uxth	r3, r3
 800173c:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	89fa      	ldrh	r2, [r7, #14]
 8001742:	819a      	strh	r2, [r3, #12]
}
 8001744:	f107 0714 	add.w	r7, r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop

08001750 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d008      	beq.n	8001774 <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	899b      	ldrh	r3, [r3, #12]
 8001766:	b29b      	uxth	r3, r3
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	819a      	strh	r2, [r3, #12]
 8001772:	e007      	b.n	8001784 <I2C_DualAddressCmd+0x34>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	899b      	ldrh	r3, [r3, #12]
 8001778:	b29b      	uxth	r3, r3
 800177a:	f023 0301 	bic.w	r3, r3, #1
 800177e:	b29a      	uxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	819a      	strh	r2, [r3, #12]
  }
}
 8001784:	f107 070c 	add.w	r7, r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d008      	beq.n	80017b4 <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	801a      	strh	r2, [r3, #0]
 80017b2:	e007      	b.n	80017c4 <I2C_GeneralCallCmd+0x34>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	801a      	strh	r2, [r3, #0]
  }
}
 80017c4:	f107 070c 	add.w	r7, r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop

080017d0 <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00a      	beq.n	80017f8 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	801a      	strh	r2, [r3, #0]
 80017f6:	e009      	b.n	800180c <I2C_SoftwareResetCmd+0x3c>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8001802:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8001806:	b29a      	uxth	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	801a      	strh	r2, [r3, #0]
  }
}
 800180c:	f107 070c 	add.w	r7, r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop

08001818 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d108      	bne.n	800183c <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	b29b      	uxth	r3, r3
 8001830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001834:	b29a      	uxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	801a      	strh	r2, [r3, #0]
 800183a:	e007      	b.n	800184c <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001846:	b29a      	uxth	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	801a      	strh	r2, [r3, #0]
  }
}
 800184c:	f107 070c 	add.w	r7, r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop

08001858 <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800186a:	d008      	beq.n	800187e <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	8b9b      	ldrh	r3, [r3, #28]
 8001870:	b29b      	uxth	r3, r3
 8001872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001876:	b29a      	uxth	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	839a      	strh	r2, [r3, #28]
 800187c:	e007      	b.n	800188e <I2C_FastModeDutyCycleConfig+0x36>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	8b9b      	ldrh	r3, [r3, #28]
 8001882:	b29b      	uxth	r3, r3
 8001884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001888:	b29a      	uxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	839a      	strh	r2, [r3, #28]
  }
}
 800188e:	f107 070c 	add.w	r7, r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80018a4:	887b      	ldrh	r3, [r7, #2]
 80018a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018aa:	d108      	bne.n	80018be <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	801a      	strh	r2, [r3, #0]
 80018bc:	e007      	b.n	80018ce <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	801a      	strh	r2, [r3, #0]
  }
}
 80018ce:	f107 070c 	add.w	r7, r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ea:	d108      	bne.n	80018fe <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	801a      	strh	r2, [r3, #0]
 80018fc:	e007      	b.n	800190e <I2C_SMBusAlertConfig+0x36>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001908:	b29a      	uxth	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	801a      	strh	r2, [r3, #0]
  }
}
 800190e:	f107 070c 	add.w	r7, r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d008      	beq.n	800193c <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	f043 0310 	orr.w	r3, r3, #16
 8001934:	b29a      	uxth	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	801a      	strh	r2, [r3, #0]
 800193a:	e007      	b.n	800194c <I2C_ARPCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	b29b      	uxth	r3, r3
 8001942:	f023 0310 	bic.w	r3, r3, #16
 8001946:	b29a      	uxth	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	801a      	strh	r2, [r3, #0]
  }
}
 800194c:	f107 070c 	add.w	r7, r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop

08001958 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	b29a      	uxth	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	821a      	strh	r2, [r3, #16]
}
 800196c:	f107 070c 	add.w	r7, r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop

08001978 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	8a1b      	ldrh	r3, [r3, #16]
 8001984:	b29b      	uxth	r3, r3
 8001986:	b2db      	uxtb	r3, r3
}
 8001988:	4618      	mov	r0, r3
 800198a:	f107 070c 	add.w	r7, r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d008      	beq.n	80019b8 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	801a      	strh	r2, [r3, #0]
 80019b6:	e007      	b.n	80019c8 <I2C_TransmitPEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	801a      	strh	r2, [r3, #0]
  }
}
 80019c8:	f107 070c 	add.w	r7, r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop

080019d4 <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 80019e0:	887b      	ldrh	r3, [r7, #2]
 80019e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019e6:	d108      	bne.n	80019fa <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	801a      	strh	r2, [r3, #0]
 80019f8:	e007      	b.n	8001a0a <I2C_PECPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	801a      	strh	r2, [r3, #0]
  }
}
 8001a0a:	f107 070c 	add.w	r7, r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d008      	beq.n	8001a38 <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	f043 0320 	orr.w	r3, r3, #32
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	801a      	strh	r2, [r3, #0]
 8001a36:	e007      	b.n	8001a48 <I2C_CalculatePEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	f023 0320 	bic.w	r3, r3, #32
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	801a      	strh	r2, [r3, #0]
  }
}
 8001a48:	f107 070c 	add.w	r7, r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	8b1b      	ldrh	r3, [r3, #24]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f107 070c 	add.w	r7, r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop

08001a78 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d008      	beq.n	8001a9c <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	889b      	ldrh	r3, [r3, #4]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	809a      	strh	r2, [r3, #4]
 8001a9a:	e007      	b.n	8001aac <I2C_DMACmd+0x34>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	889b      	ldrh	r3, [r3, #4]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	809a      	strh	r2, [r3, #4]
  }
}
 8001aac:	f107 070c 	add.w	r7, r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop

08001ab8 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d008      	beq.n	8001adc <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	889b      	ldrh	r3, [r3, #4]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	809a      	strh	r2, [r3, #4]
 8001ada:	e007      	b.n	8001aec <I2C_DMALastTransferCmd+0x34>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	889b      	ldrh	r3, [r3, #4]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	809a      	strh	r2, [r3, #4]
  }
}
 8001aec:	f107 070c 	add.w	r7, r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop

08001af8 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 8001b0e:	78fa      	ldrb	r2, [r7, #3]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	18d3      	adds	r3, r2, r3
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f107 0714 	add.w	r7, r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	460a      	mov	r2, r1
 8001b34:	807a      	strh	r2, [r7, #2]
 8001b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8001b38:	787b      	ldrb	r3, [r7, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d008      	beq.n	8001b50 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	889b      	ldrh	r3, [r3, #4]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	809a      	strh	r2, [r3, #4]
 8001b4e:	e00a      	b.n	8001b66 <I2C_ITConfig+0x3e>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	889b      	ldrh	r3, [r3, #4]
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	887b      	ldrh	r3, [r7, #2]
 8001b58:	ea6f 0303 	mvn.w	r3, r3
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	4013      	ands	r3, r2
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	809a      	strh	r2, [r3, #4]
  }
}
 8001b66:	f107 070c 	add.w	r7, r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	8a9b      	ldrh	r3, [r3, #20]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	8b1b      	ldrh	r3, [r3, #24]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8001ba8:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bb4:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	401a      	ands	r2, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d103      	bne.n	8001bca <I2C_CheckEvent+0x5a>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001bc2:	f04f 0301 	mov.w	r3, #1
 8001bc6:	75fb      	strb	r3, [r7, #23]
 8001bc8:	e002      	b.n	8001bd0 <I2C_CheckEvent+0x60>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f107 071c 	add.w	r7, r7, #28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop

08001be0 <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	8a9b      	ldrh	r3, [r3, #20]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	8b1b      	ldrh	r3, [r3, #24]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c1c:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 8001c1e:	697b      	ldr	r3, [r7, #20]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	f107 071c 	add.w	r7, r7, #28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8001c52:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c5a:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d004      	beq.n	8001c6c <I2C_GetFlagStatus+0x40>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f103 0314 	add.w	r3, r3, #20
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e007      	b.n	8001c7c <I2C_GetFlagStatus+0x50>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8001c72:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f103 0318 	add.w	r3, r3, #24
 8001c7a:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <I2C_GetFlagStatus+0x64>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001c88:	f04f 0301 	mov.w	r3, #1
 8001c8c:	75fb      	strb	r3, [r7, #23]
 8001c8e:	e002      	b.n	8001c96 <I2C_GetFlagStatus+0x6a>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f107 071c 	add.w	r7, r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001cba:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	ea6f 0303 	mvn.w	r3, r3
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	829a      	strh	r2, [r3, #20]
}
 8001cca:	f107 0714 	add.w	r7, r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001cf0:	ea4f 4213 	mov.w	r2, r3, lsr #16
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	889b      	ldrh	r3, [r3, #4]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d04:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	8a9b      	ldrh	r3, [r3, #20]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d006      	beq.n	8001d24 <I2C_GetITStatus+0x50>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <I2C_GetITStatus+0x50>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8001d1c:	f04f 0301 	mov.w	r3, #1
 8001d20:	73fb      	strb	r3, [r7, #15]
 8001d22:	e002      	b.n	8001d2a <I2C_GetITStatus+0x56>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f107 0714 	add.w	r7, r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	ea6f 0303 	mvn.w	r3, r3
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	829a      	strh	r2, [r3, #20]
}
 8001d5e:	f107 0714 	add.w	r7, r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d6c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d74:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001d78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d84:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d92:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d9a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001d9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001da8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dac:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001dae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001db2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001db6:	f243 0210 	movw	r2, #12304	; 0x3010
 8001dba:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8001dbe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001dc0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001dc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dc8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001dcc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001dd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ddc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
}
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8001df6:	f643 0302 	movw	r3, #14338	; 0x3802
 8001dfa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8001e04:	f643 0302 	movw	r3, #14338	; 0x3802
 8001e08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e0c:	79fa      	ldrb	r2, [r7, #7]
 8001e0e:	701a      	strb	r2, [r3, #0]
}
 8001e10:	f107 070c 	add.w	r7, r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop

08001e1c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001e34:	f04f 0031 	mov.w	r0, #49	; 0x31
 8001e38:	f000 fdd2 	bl	80029e0 <RCC_GetFlagStatus>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f103 0301 	add.w	r3, r3, #1
 8001e46:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001e4e:	d002      	beq.n	8001e56 <RCC_WaitForHSEStartUp+0x3a>
 8001e50:	79bb      	ldrb	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0ee      	beq.n	8001e34 <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001e56:	f04f 0031 	mov.w	r0, #49	; 0x31
 8001e5a:	f000 fdc1 	bl	80029e0 <RCC_GetFlagStatus>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 8001e64:	f04f 0301 	mov.w	r3, #1
 8001e68:	71fb      	strb	r3, [r7, #7]
 8001e6a:	e002      	b.n	8001e72 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8001e72:	79fb      	ldrb	r3, [r7, #7]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	f107 0708 	add.w	r7, r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop

08001e80 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8001e90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 8001eb0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001eb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	601a      	str	r2, [r3, #0]
}
 8001ebc:	f107 0714 	add.w	r7, r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop

08001ec8 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001eda:	79fa      	ldrb	r2, [r7, #7]
 8001edc:	601a      	str	r2, [r3, #0]
}
 8001ede:	f107 070c 	add.w	r7, r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001ef2:	f643 0370 	movw	r3, #14448	; 0x3870
 8001ef6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001f00:	f643 0370 	movw	r3, #14448	; 0x3870
 8001f04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d002      	beq.n	8001f1a <RCC_LSEConfig+0x32>
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d008      	beq.n	8001f2a <RCC_LSEConfig+0x42>
 8001f18:	e00f      	b.n	8001f3a <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8001f1a:	f643 0370 	movw	r3, #14448	; 0x3870
 8001f1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f22:	f04f 0201 	mov.w	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
      break;
 8001f28:	e008      	b.n	8001f3c <RCC_LSEConfig+0x54>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001f2a:	f643 0370 	movw	r3, #14448	; 0x3870
 8001f2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f32:	f04f 0205 	mov.w	r2, #5
 8001f36:	701a      	strb	r2, [r3, #0]
      break;
 8001f38:	e000      	b.n	8001f3c <RCC_LSEConfig+0x54>
    default:
      break;
 8001f3a:	bf00      	nop
  }
}
 8001f3c:	f107 070c 	add.w	r7, r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop

08001f48 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8001f52:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8001f56:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001f5a:	79fa      	ldrb	r2, [r7, #7]
 8001f5c:	601a      	str	r2, [r3, #0]
}
 8001f5e:	f107 070c 	add.w	r7, r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001f76:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	ea4f 1182 	mov.w	r1, r2, lsl #6
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	4311      	orrs	r1, r2
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8001f8e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8001f92:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8001f96:	4311      	orrs	r1, r2
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	ea4f 6202 	mov.w	r2, r2, lsl #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 8001fa6:	f107 0714 	add.w	r7, r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001fba:	f04f 0360 	mov.w	r3, #96	; 0x60
 8001fbe:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001fc2:	79fa      	ldrb	r2, [r7, #7]
 8001fc4:	601a      	str	r2, [r3, #0]
}
 8001fc6:	f107 070c 	add.w	r7, r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8001fda:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001fde:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	ea4f 1182 	mov.w	r1, r2, lsl #6
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	ea4f 7202 	mov.w	r2, r2, lsl #28
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001ff4:	f107 070c 	add.w	r7, r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop

08002000 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800200a:	f04f 0368 	mov.w	r3, #104	; 0x68
 800200e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8002012:	79fa      	ldrb	r2, [r7, #7]
 8002014:	601a      	str	r2, [r3, #0]
}
 8002016:	f107 070c 	add.w	r7, r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800202a:	f04f 034c 	mov.w	r3, #76	; 0x4c
 800202e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8002032:	79fa      	ldrb	r2, [r7, #7]
 8002034:	601a      	str	r2, [r3, #0]
}
 8002036:	f107 070c 	add.w	r7, r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8002050:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002054:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8002062:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	4313      	orrs	r3, r2
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8002070:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002074:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	609a      	str	r2, [r3, #8]
}
 800207c:	f107 0714 	add.w	r7, r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop

08002088 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8002098:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800209c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80020b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80020bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	609a      	str	r2, [r3, #8]
}
 80020c4:	f107 0714 	add.w	r7, r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop

080020d0 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80020de:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80020e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f023 0303 	bic.w	r3, r3, #3
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80020fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80020fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	609a      	str	r2, [r3, #8]
}
 8002106:	f107 0714 	add.w	r7, r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8002114:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002118:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	b2db      	uxtb	r3, r3
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop

08002130 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800213e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002142:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002150:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800215a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800215e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	609a      	str	r2, [r3, #8]
}
 8002166:	f107 0714 	add.w	r7, r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800217e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002182:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002190:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800219a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800219e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	609a      	str	r2, [r3, #8]
}
 80021a6:	f107 0714 	add.w	r7, r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80021be:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80021c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4313      	orrs	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80021de:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80021e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	609a      	str	r2, [r3, #8]
}
 80021ea:	f107 0714 	add.w	r7, r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	f04f 0302 	mov.w	r3, #2
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	f04f 0302 	mov.w	r3, #2
 800221e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002220:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002224:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	2b04      	cmp	r3, #4
 8002234:	d00a      	beq.n	800224c <RCC_GetClocksFreq+0x58>
 8002236:	2b08      	cmp	r3, #8
 8002238:	d00f      	beq.n	800225a <RCC_GetClocksFreq+0x66>
 800223a:	2b00      	cmp	r3, #0
 800223c:	d160      	bne.n	8002300 <RCC_GetClocksFreq+0x10c>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002244:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8002248:	6013      	str	r3, [r2, #0]
      break;
 800224a:	e060      	b.n	800230e <RCC_GetClocksFreq+0x11a>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8002252:	f2c0 037a 	movt	r3, #122	; 0x7a
 8002256:	6013      	str	r3, [r2, #0]
      break;
 8002258:	e059      	b.n	800230e <RCC_GetClocksFreq+0x11a>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800225a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800225e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002268:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800226c:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800226e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002272:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800227c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d014      	beq.n	80022ae <RCC_GetClocksFreq+0xba>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002284:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8002288:	f2c0 037a 	movt	r3, #122	; 0x7a
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002292:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002296:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022a0:	400b      	ands	r3, r1
 80022a2:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80022a6:	fb03 f302 	mul.w	r3, r3, r2
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	e013      	b.n	80022d6 <RCC_GetClocksFreq+0xe2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80022ae:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80022b2:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80022bc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80022c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022c4:	6859      	ldr	r1, [r3, #4]
 80022c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022ca:	400b      	ands	r3, r1
 80022cc:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80022d0:	fb03 f302 	mul.w	r3, r3, r2
 80022d4:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80022d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80022da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022e4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80022e8:	f103 0301 	add.w	r3, r3, #1
 80022ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80022f0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	601a      	str	r2, [r3, #0]
      break;
 80022fe:	e006      	b.n	800230e <RCC_GetClocksFreq+0x11a>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002306:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800230a:	6013      	str	r3, [r2, #0]
      break;
 800230c:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800230e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002312:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800231c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8002324:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8002326:	f240 03c8 	movw	r3, #200	; 0xc8
 800232a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	189b      	adds	r3, r3, r2
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa22 f203 	lsr.w	r2, r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8002346:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800234a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002354:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	ea4f 2393 	mov.w	r3, r3, lsr #10
 800235c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800235e:	f240 03c8 	movw	r3, #200	; 0xc8
 8002362:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	189b      	adds	r3, r3, r2
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa22 f203 	lsr.w	r2, r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800237e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002382:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800238c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	ea4f 3353 	mov.w	r3, r3, lsr #13
 8002394:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8002396:	f240 03c8 	movw	r3, #200	; 0xc8
 800239a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	189b      	adds	r3, r3, r2
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa22 f203 	lsr.w	r2, r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	60da      	str	r2, [r3, #12]
}
 80023b6:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023d8:	d117      	bne.n	800240a <RCC_RTCCLKConfig+0x4a>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 80023da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80023de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80023ec:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80023f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 80023fe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002402:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 800240a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800240e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002412:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002416:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800241a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	ea4f 5202 	mov.w	r2, r2, lsl #20
 8002422:	ea4f 5212 	mov.w	r2, r2, lsr #20
 8002426:	430a      	orrs	r2, r1
 8002428:	671a      	str	r2, [r3, #112]	; 0x70
}
 800242a:	f107 0714 	add.w	r7, r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800243e:	f640 633c 	movw	r3, #3644	; 0xe3c
 8002442:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8002446:	79fa      	ldrb	r2, [r7, #7]
 8002448:	601a      	str	r2, [r3, #0]
}
 800244a:	f107 070c 	add.w	r7, r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800245e:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8002462:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8002466:	79fa      	ldrb	r2, [r7, #7]
 8002468:	601a      	str	r2, [r3, #0]
}
 800246a:	f107 070c 	add.w	r7, r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 800247c:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8002480:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	601a      	str	r2, [r3, #0]
}
 8002488:	f107 070c 	add.w	r7, r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop

08002494 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <RCC_AHB1PeriphClockCmd+0x2c>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80024a6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80024aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024ae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80024b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80024b6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30
 80024be:	e00d      	b.n	80024dc <RCC_AHB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80024c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80024c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80024cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80024d0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	ea6f 0202 	mvn.w	r2, r2
 80024d8:	400a      	ands	r2, r1
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80024dc:	f107 070c 	add.w	r7, r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop

080024e8 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00c      	beq.n	8002514 <RCC_AHB2PeriphClockCmd+0x2c>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80024fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80024fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002502:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002506:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800250a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	430a      	orrs	r2, r1
 8002510:	635a      	str	r2, [r3, #52]	; 0x34
 8002512:	e00d      	b.n	8002530 <RCC_AHB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8002514:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002518:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800251c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002520:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002524:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	ea6f 0202 	mvn.w	r2, r2
 800252c:	400a      	ands	r2, r1
 800252e:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8002530:	f107 070c 	add.w	r7, r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop

0800253c <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00c      	beq.n	8002568 <RCC_AHB3PeriphClockCmd+0x2c>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800254e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002552:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002556:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800255a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800255e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	430a      	orrs	r2, r1
 8002564:	639a      	str	r2, [r3, #56]	; 0x38
 8002566:	e00d      	b.n	8002584 <RCC_AHB3PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8002568:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800256c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002570:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002574:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002578:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	ea6f 0202 	mvn.w	r2, r2
 8002580:	400a      	ands	r2, r1
 8002582:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 8002584:	f107 070c 	add.w	r7, r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop

08002590 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00c      	beq.n	80025bc <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80025a2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80025a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025aa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80025ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80025b2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
 80025ba:	e00d      	b.n	80025d8 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80025bc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80025c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80025c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80025cc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	ea6f 0202 	mvn.w	r2, r2
 80025d4:	400a      	ands	r2, r1
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80025d8:	f107 070c 	add.w	r7, r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop

080025e4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00c      	beq.n	8002610 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80025f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80025fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025fe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002602:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002606:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	430a      	orrs	r2, r1
 800260c:	645a      	str	r2, [r3, #68]	; 0x44
 800260e:	e00d      	b.n	800262c <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002610:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002614:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002618:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800261c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002620:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	ea6f 0202 	mvn.w	r2, r2
 8002628:	400a      	ands	r2, r1
 800262a:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800262c:	f107 070c 	add.w	r7, r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop

08002638 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00c      	beq.n	8002664 <RCC_AHB1PeriphResetCmd+0x2c>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800264a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800264e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002652:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002656:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800265a:	6911      	ldr	r1, [r2, #16]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	430a      	orrs	r2, r1
 8002660:	611a      	str	r2, [r3, #16]
 8002662:	e00d      	b.n	8002680 <RCC_AHB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8002664:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002668:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800266c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002670:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002674:	6911      	ldr	r1, [r2, #16]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	ea6f 0202 	mvn.w	r2, r2
 800267c:	400a      	ands	r2, r1
 800267e:	611a      	str	r2, [r3, #16]
  }
}
 8002680:	f107 070c 	add.w	r7, r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop

0800268c <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00c      	beq.n	80026b8 <RCC_AHB2PeriphResetCmd+0x2c>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800269e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80026a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026a6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80026aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80026ae:	6951      	ldr	r1, [r2, #20]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	615a      	str	r2, [r3, #20]
 80026b6:	e00d      	b.n	80026d4 <RCC_AHB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80026b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80026bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80026c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80026c8:	6951      	ldr	r1, [r2, #20]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	ea6f 0202 	mvn.w	r2, r2
 80026d0:	400a      	ands	r2, r1
 80026d2:	615a      	str	r2, [r3, #20]
  }
}
 80026d4:	f107 070c 	add.w	r7, r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop

080026e0 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00c      	beq.n	800270c <RCC_AHB3PeriphResetCmd+0x2c>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80026f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80026f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026fa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80026fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002702:	6991      	ldr	r1, [r2, #24]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	430a      	orrs	r2, r1
 8002708:	619a      	str	r2, [r3, #24]
 800270a:	e00d      	b.n	8002728 <RCC_AHB3PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 800270c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002710:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002714:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002718:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800271c:	6991      	ldr	r1, [r2, #24]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	ea6f 0202 	mvn.w	r2, r2
 8002724:	400a      	ands	r2, r1
 8002726:	619a      	str	r2, [r3, #24]
  }
}
 8002728:	f107 070c 	add.w	r7, r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop

08002734 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00c      	beq.n	8002760 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002746:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800274a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800274e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002752:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002756:	6a11      	ldr	r1, [r2, #32]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	430a      	orrs	r2, r1
 800275c:	621a      	str	r2, [r3, #32]
 800275e:	e00d      	b.n	800277c <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002760:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002764:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002768:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800276c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002770:	6a11      	ldr	r1, [r2, #32]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	ea6f 0202 	mvn.w	r2, r2
 8002778:	400a      	ands	r2, r1
 800277a:	621a      	str	r2, [r3, #32]
  }
}
 800277c:	f107 070c 	add.w	r7, r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop

08002788 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00c      	beq.n	80027b4 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800279a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800279e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027a2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80027aa:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24
 80027b2:	e00d      	b.n	80027d0 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80027b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80027b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80027c4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	ea6f 0202 	mvn.w	r2, r2
 80027cc:	400a      	ands	r2, r1
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80027d0:	f107 070c 	add.w	r7, r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop

080027dc <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00c      	beq.n	8002808 <RCC_AHB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 80027ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80027f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027f6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80027fe:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	430a      	orrs	r2, r1
 8002804:	651a      	str	r2, [r3, #80]	; 0x50
 8002806:	e00d      	b.n	8002824 <RCC_AHB1PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8002808:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800280c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002810:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002814:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002818:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	ea6f 0202 	mvn.w	r2, r2
 8002820:	400a      	ands	r2, r1
 8002822:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 8002824:	f107 070c 	add.w	r7, r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop

08002830 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00c      	beq.n	800285c <RCC_AHB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8002842:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002846:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800284a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800284e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002852:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	430a      	orrs	r2, r1
 8002858:	655a      	str	r2, [r3, #84]	; 0x54
 800285a:	e00d      	b.n	8002878 <RCC_AHB2PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800285c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002860:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002864:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002868:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800286c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	ea6f 0202 	mvn.w	r2, r2
 8002874:	400a      	ands	r2, r1
 8002876:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 8002878:	f107 070c 	add.w	r7, r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop

08002884 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00c      	beq.n	80028b0 <RCC_AHB3PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8002896:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800289a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800289e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80028a6:	6d91      	ldr	r1, [r2, #88]	; 0x58
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	659a      	str	r2, [r3, #88]	; 0x58
 80028ae:	e00d      	b.n	80028cc <RCC_AHB3PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 80028b0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80028b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80028c0:	6d91      	ldr	r1, [r2, #88]	; 0x58
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	ea6f 0202 	mvn.w	r2, r2
 80028c8:	400a      	ands	r2, r1
 80028ca:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 80028cc:	f107 070c 	add.w	r7, r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop

080028d8 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00c      	beq.n	8002904 <RCC_APB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80028ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80028ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028f2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80028fa:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	430a      	orrs	r2, r1
 8002900:	661a      	str	r2, [r3, #96]	; 0x60
 8002902:	e00d      	b.n	8002920 <RCC_APB1PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8002904:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002908:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800290c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002910:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002914:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	ea6f 0202 	mvn.w	r2, r2
 800291c:	400a      	ands	r2, r1
 800291e:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 8002920:	f107 070c 	add.w	r7, r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop

0800292c <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00c      	beq.n	8002958 <RCC_APB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800293e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002942:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002946:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800294a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800294e:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	430a      	orrs	r2, r1
 8002954:	665a      	str	r2, [r3, #100]	; 0x64
 8002956:	e00d      	b.n	8002974 <RCC_APB2PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8002958:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800295c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002960:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002964:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002968:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	ea6f 0202 	mvn.w	r2, r2
 8002970:	400a      	ands	r2, r1
 8002972:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 8002974:	f107 070c 	add.w	r7, r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop

08002980 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	71fa      	strb	r2, [r7, #7]
 800298c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800298e:	79bb      	ldrb	r3, [r7, #6]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00e      	beq.n	80029b2 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8002994:	f643 030d 	movw	r3, #14349	; 0x380d
 8002998:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800299c:	f643 020d 	movw	r2, #14349	; 0x380d
 80029a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80029a4:	7812      	ldrb	r2, [r2, #0]
 80029a6:	b2d1      	uxtb	r1, r2
 80029a8:	79fa      	ldrb	r2, [r7, #7]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	701a      	strb	r2, [r3, #0]
 80029b0:	e010      	b.n	80029d4 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80029b2:	f643 030d 	movw	r3, #14349	; 0x380d
 80029b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029ba:	f643 020d 	movw	r2, #14349	; 0x380d
 80029be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80029c2:	7812      	ldrb	r2, [r2, #0]
 80029c4:	b2d1      	uxtb	r1, r2
 80029c6:	79fa      	ldrb	r2, [r7, #7]
 80029c8:	ea6f 0202 	mvn.w	r2, r2
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	400a      	ands	r2, r1
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	701a      	strb	r2, [r3, #0]
  }
}
 80029d4:	f107 070c 	add.w	r7, r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop

080029e0 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d106      	bne.n	8002a1a <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 8002a0c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002a10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	e00f      	b.n	8002a3a <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d106      	bne.n	8002a2e <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 8002a20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002a24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	e005      	b.n	8002a3a <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8002a2e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002a32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a38:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
 8002a54:	f04f 0301 	mov.w	r3, #1
 8002a58:	74fb      	strb	r3, [r7, #19]
 8002a5a:	e002      	b.n	8002a62 <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	f107 071c 	add.w	r7, r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8002a74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002a78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a7c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002a84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a86:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002a8a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop

08002a94 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8002aa4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002aa8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
 8002ab6:	f04f 0301 	mov.w	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e002      	b.n	8002ac4 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f107 0714 	add.w	r7, r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop

08002ad4 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8002ade:	f643 030e 	movw	r3, #14350	; 0x380e
 8002ae2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ae6:	79fa      	ldrb	r2, [r7, #7]
 8002ae8:	701a      	strb	r2, [r3, #0]
}
 8002aea:	f107 070c 	add.w	r7, r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d10c      	bne.n	8002b24 <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002b0a:	f04f 0001 	mov.w	r0, #1
 8002b0e:	f04f 0101 	mov.w	r1, #1
 8002b12:	f7ff fe39 	bl	8002788 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8002b16:	f04f 0001 	mov.w	r0, #1
 8002b1a:	f04f 0100 	mov.w	r1, #0
 8002b1e:	f7ff fe33 	bl	8002788 <RCC_APB2PeriphResetCmd>
 8002b22:	e0ff      	b.n	8002d24 <TIM_DeInit+0x230>
  } 
  else if (TIMx == TIM2) 
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2a:	d10c      	bne.n	8002b46 <TIM_DeInit+0x52>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002b2c:	f04f 0001 	mov.w	r0, #1
 8002b30:	f04f 0101 	mov.w	r1, #1
 8002b34:	f7ff fdfe 	bl	8002734 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8002b38:	f04f 0001 	mov.w	r0, #1
 8002b3c:	f04f 0100 	mov.w	r1, #0
 8002b40:	f7ff fdf8 	bl	8002734 <RCC_APB1PeriphResetCmd>
 8002b44:	e0ee      	b.n	8002d24 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM3)
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b4c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d10c      	bne.n	8002b6e <TIM_DeInit+0x7a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8002b54:	f04f 0002 	mov.w	r0, #2
 8002b58:	f04f 0101 	mov.w	r1, #1
 8002b5c:	f7ff fdea 	bl	8002734 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8002b60:	f04f 0002 	mov.w	r0, #2
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	f7ff fde4 	bl	8002734 <RCC_APB1PeriphResetCmd>
 8002b6c:	e0da      	b.n	8002d24 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM4)
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b74:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d10c      	bne.n	8002b96 <TIM_DeInit+0xa2>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8002b7c:	f04f 0004 	mov.w	r0, #4
 8002b80:	f04f 0101 	mov.w	r1, #1
 8002b84:	f7ff fdd6 	bl	8002734 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8002b88:	f04f 0004 	mov.w	r0, #4
 8002b8c:	f04f 0100 	mov.w	r1, #0
 8002b90:	f7ff fdd0 	bl	8002734 <RCC_APB1PeriphResetCmd>
 8002b94:	e0c6      	b.n	8002d24 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM5)
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d10c      	bne.n	8002bbe <TIM_DeInit+0xca>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8002ba4:	f04f 0008 	mov.w	r0, #8
 8002ba8:	f04f 0101 	mov.w	r1, #1
 8002bac:	f7ff fdc2 	bl	8002734 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8002bb0:	f04f 0008 	mov.w	r0, #8
 8002bb4:	f04f 0100 	mov.w	r1, #0
 8002bb8:	f7ff fdbc 	bl	8002734 <RCC_APB1PeriphResetCmd>
 8002bbc:	e0b2      	b.n	8002d24 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM6)  
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d10c      	bne.n	8002be6 <TIM_DeInit+0xf2>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8002bcc:	f04f 0010 	mov.w	r0, #16
 8002bd0:	f04f 0101 	mov.w	r1, #1
 8002bd4:	f7ff fdae 	bl	8002734 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8002bd8:	f04f 0010 	mov.w	r0, #16
 8002bdc:	f04f 0100 	mov.w	r1, #0
 8002be0:	f7ff fda8 	bl	8002734 <RCC_APB1PeriphResetCmd>
 8002be4:	e09e      	b.n	8002d24 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM7)
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d10c      	bne.n	8002c0e <TIM_DeInit+0x11a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8002bf4:	f04f 0020 	mov.w	r0, #32
 8002bf8:	f04f 0101 	mov.w	r1, #1
 8002bfc:	f7ff fd9a 	bl	8002734 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8002c00:	f04f 0020 	mov.w	r0, #32
 8002c04:	f04f 0100 	mov.w	r1, #0
 8002c08:	f7ff fd94 	bl	8002734 <RCC_APB1PeriphResetCmd>
 8002c0c:	e08a      	b.n	8002d24 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM8)
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c14:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d10c      	bne.n	8002c36 <TIM_DeInit+0x142>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8002c1c:	f04f 0002 	mov.w	r0, #2
 8002c20:	f04f 0101 	mov.w	r1, #1
 8002c24:	f7ff fdb0 	bl	8002788 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8002c28:	f04f 0002 	mov.w	r0, #2
 8002c2c:	f04f 0100 	mov.w	r1, #0
 8002c30:	f7ff fdaa 	bl	8002788 <RCC_APB2PeriphResetCmd>
 8002c34:	e076      	b.n	8002d24 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM9)
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c3c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d10c      	bne.n	8002c5e <TIM_DeInit+0x16a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8002c44:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002c48:	f04f 0101 	mov.w	r1, #1
 8002c4c:	f7ff fd9c 	bl	8002788 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8002c50:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002c54:	f04f 0100 	mov.w	r1, #0
 8002c58:	f7ff fd96 	bl	8002788 <RCC_APB2PeriphResetCmd>
 8002c5c:	e062      	b.n	8002d24 <TIM_DeInit+0x230>
   }  
  else if (TIMx == TIM10)
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002c64:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d10c      	bne.n	8002c86 <TIM_DeInit+0x192>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8002c6c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c70:	f04f 0101 	mov.w	r1, #1
 8002c74:	f7ff fd88 	bl	8002788 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8002c78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c7c:	f04f 0100 	mov.w	r1, #0
 8002c80:	f7ff fd82 	bl	8002788 <RCC_APB2PeriphResetCmd>
 8002c84:	e04e      	b.n	8002d24 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM11) 
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002c8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d10c      	bne.n	8002cae <TIM_DeInit+0x1ba>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8002c94:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002c98:	f04f 0101 	mov.w	r1, #1
 8002c9c:	f7ff fd74 	bl	8002788 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8002ca0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002ca4:	f04f 0100 	mov.w	r1, #0
 8002ca8:	f7ff fd6e 	bl	8002788 <RCC_APB2PeriphResetCmd>
 8002cac:	e03a      	b.n	8002d24 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM12)
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002cb4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d10c      	bne.n	8002cd6 <TIM_DeInit+0x1e2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8002cbc:	f04f 0040 	mov.w	r0, #64	; 0x40
 8002cc0:	f04f 0101 	mov.w	r1, #1
 8002cc4:	f7ff fd36 	bl	8002734 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8002cc8:	f04f 0040 	mov.w	r0, #64	; 0x40
 8002ccc:	f04f 0100 	mov.w	r1, #0
 8002cd0:	f7ff fd30 	bl	8002734 <RCC_APB1PeriphResetCmd>
 8002cd4:	e026      	b.n	8002d24 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM13) 
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002cdc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d10c      	bne.n	8002cfe <TIM_DeInit+0x20a>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8002ce4:	f04f 0080 	mov.w	r0, #128	; 0x80
 8002ce8:	f04f 0101 	mov.w	r1, #1
 8002cec:	f7ff fd22 	bl	8002734 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8002cf0:	f04f 0080 	mov.w	r0, #128	; 0x80
 8002cf4:	f04f 0100 	mov.w	r1, #0
 8002cf8:	f7ff fd1c 	bl	8002734 <RCC_APB1PeriphResetCmd>
 8002cfc:	e012      	b.n	8002d24 <TIM_DeInit+0x230>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d10b      	bne.n	8002d24 <TIM_DeInit+0x230>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8002d0c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d10:	f04f 0101 	mov.w	r1, #1
 8002d14:	f7ff fd0e 	bl	8002734 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8002d18:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	f7ff fd08 	bl	8002734 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 8002d24:	f107 0708 	add.w	r7, r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d01f      	beq.n	8002d90 <TIM_TimeBaseInit+0x64>
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d56:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d018      	beq.n	8002d90 <TIM_TimeBaseInit+0x64>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d64:	d014      	beq.n	8002d90 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d6c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d00d      	beq.n	8002d90 <TIM_TimeBaseInit+0x64>
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d7a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d006      	beq.n	8002d90 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d88:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d108      	bne.n	8002da2 <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002d90:	89fb      	ldrh	r3, [r7, #14]
 8002d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d96:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	885a      	ldrh	r2, [r3, #2]
 8002d9c:	89fb      	ldrh	r3, [r7, #14]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d00f      	beq.n	8002dd0 <TIM_TimeBaseInit+0xa4>
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002db6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d008      	beq.n	8002dd0 <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002dbe:	89fb      	ldrh	r3, [r7, #14]
 8002dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	891a      	ldrh	r2, [r3, #8]
 8002dca:	89fb      	ldrh	r3, [r7, #14]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	89fa      	ldrh	r2, [r7, #14]
 8002dd4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	881a      	ldrh	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d006      	beq.n	8002e02 <TIM_TimeBaseInit+0xd6>
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dfa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d104      	bne.n	8002e0c <TIM_TimeBaseInit+0xe0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	7a9b      	ldrb	r3, [r3, #10]
 8002e06:	461a      	mov	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f04f 0201 	mov.w	r2, #1
 8002e12:	829a      	strh	r2, [r3, #20]
}
 8002e14:	f107 0714 	add.w	r7, r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop

08002e20 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e2e:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	729a      	strb	r2, [r3, #10]
}
 8002e50:	f107 070c 	add.w	r7, r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop

08002e5c <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	460a      	mov	r2, r1
 8002e68:	807a      	strh	r2, [r7, #2]
 8002e6a:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	887a      	ldrh	r2, [r7, #2]
 8002e70:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	883a      	ldrh	r2, [r7, #0]
 8002e76:	829a      	strh	r2, [r3, #20]
}
 8002e78:	f107 070c 	add.w	r7, r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop

08002e84 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e9c:	89fb      	ldrh	r3, [r7, #14]
 8002e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea2:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8002ea4:	89fa      	ldrh	r2, [r7, #14]
 8002ea6:	887b      	ldrh	r3, [r7, #2]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	89fa      	ldrh	r2, [r7, #14]
 8002eb0:	801a      	strh	r2, [r3, #0]
}
 8002eb2:	f107 0714 	add.w	r7, r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ecc:	f107 070c 	add.w	r7, r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop

08002ed8 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002ee8:	f107 070c 	add.w	r7, r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop

08002ef4 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	f107 070c 	add.w	r7, r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	b29b      	uxth	r3, r3
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f107 070c 	add.w	r7, r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop

08002f28 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	f043 0302 	orr.w	r3, r3, #2
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	801a      	strh	r2, [r3, #0]
 8002f4a:	e007      	b.n	8002f5c <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	f023 0302 	bic.w	r3, r3, #2
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	801a      	strh	r2, [r3, #0]
  }
}
 8002f5c:	f107 070c 	add.w	r7, r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop

08002f68 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8002f74:	887b      	ldrh	r3, [r7, #2]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	f043 0304 	orr.w	r3, r3, #4
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	801a      	strh	r2, [r3, #0]
 8002f8a:	e007      	b.n	8002f9c <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	f023 0304 	bic.w	r3, r3, #4
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	801a      	strh	r2, [r3, #0]
  }
}
 8002f9c:	f107 070c 	add.w	r7, r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop

08002fa8 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	801a      	strh	r2, [r3, #0]
 8002fca:	e007      	b.n	8002fdc <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	801a      	strh	r2, [r3, #0]
  }
}
 8002fdc:	f107 070c 	add.w	r7, r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop

08002fe8 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	f023 0308 	bic.w	r3, r3, #8
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	b29a      	uxth	r2, r3
 800300a:	887b      	ldrh	r3, [r7, #2]
 800300c:	4313      	orrs	r3, r2
 800300e:	b29a      	uxth	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	801a      	strh	r2, [r3, #0]
}
 8003014:	f107 070c 	add.w	r7, r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop

08003020 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	b29b      	uxth	r3, r3
 8003032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003036:	b29a      	uxth	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	b29a      	uxth	r2, r3
 8003042:	887b      	ldrh	r3, [r7, #2]
 8003044:	4313      	orrs	r3, r2
 8003046:	b29a      	uxth	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	801a      	strh	r2, [r3, #0]
}
 800304c:	f107 070c 	add.w	r7, r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop

08003058 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	801a      	strh	r2, [r3, #0]
 800307a:	e007      	b.n	800308c <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	b29b      	uxth	r3, r3
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	801a      	strh	r2, [r3, #0]
  }
}
 800308c:	f107 070c 	add.w	r7, r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop

08003098 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	817b      	strh	r3, [r7, #10]
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	81fb      	strh	r3, [r7, #14]
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	8c1b      	ldrh	r3, [r3, #32]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	8c1b      	ldrh	r3, [r3, #32]
 80030c8:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	889b      	ldrh	r3, [r3, #4]
 80030ce:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	8b1b      	ldrh	r3, [r3, #24]
 80030d4:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 80030d6:	897b      	ldrh	r3, [r7, #10]
 80030d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030dc:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80030de:	897b      	ldrh	r3, [r7, #10]
 80030e0:	f023 0303 	bic.w	r3, r3, #3
 80030e4:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	881a      	ldrh	r2, [r3, #0]
 80030ea:	897b      	ldrh	r3, [r7, #10]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80030f0:	89fb      	ldrh	r3, [r7, #14]
 80030f2:	f023 0302 	bic.w	r3, r3, #2
 80030f6:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	899a      	ldrh	r2, [r3, #12]
 80030fc:	89fb      	ldrh	r3, [r7, #14]
 80030fe:	4313      	orrs	r3, r2
 8003100:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	885a      	ldrh	r2, [r3, #2]
 8003106:	89fb      	ldrh	r3, [r7, #14]
 8003108:	4313      	orrs	r3, r2
 800310a:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003116:	429a      	cmp	r2, r3
 8003118:	d006      	beq.n	8003128 <TIM_OC1Init+0x90>
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003120:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003124:	429a      	cmp	r2, r3
 8003126:	d123      	bne.n	8003170 <TIM_OC1Init+0xd8>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8003128:	89fb      	ldrh	r3, [r7, #14]
 800312a:	f023 0308 	bic.w	r3, r3, #8
 800312e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	89da      	ldrh	r2, [r3, #14]
 8003134:	89fb      	ldrh	r3, [r7, #14]
 8003136:	4313      	orrs	r3, r2
 8003138:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800313a:	89fb      	ldrh	r3, [r7, #14]
 800313c:	f023 0304 	bic.w	r3, r3, #4
 8003140:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	889a      	ldrh	r2, [r3, #4]
 8003146:	89fb      	ldrh	r3, [r7, #14]
 8003148:	4313      	orrs	r3, r2
 800314a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800314c:	89bb      	ldrh	r3, [r7, #12]
 800314e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003152:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8003154:	89bb      	ldrh	r3, [r7, #12]
 8003156:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800315a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	8a1a      	ldrh	r2, [r3, #16]
 8003160:	89bb      	ldrh	r3, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	8a5a      	ldrh	r2, [r3, #18]
 800316a:	89bb      	ldrh	r3, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	89ba      	ldrh	r2, [r7, #12]
 8003174:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	897a      	ldrh	r2, [r7, #10]
 800317a:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	89fa      	ldrh	r2, [r7, #14]
 8003188:	841a      	strh	r2, [r3, #32]
}
 800318a:	f107 0714 	add.w	r7, r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	817b      	strh	r3, [r7, #10]
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	81fb      	strh	r3, [r7, #14]
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8c1b      	ldrh	r3, [r3, #32]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f023 0310 	bic.w	r3, r3, #16
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8c1b      	ldrh	r3, [r3, #32]
 80031c4:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	889b      	ldrh	r3, [r3, #4]
 80031ca:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8b1b      	ldrh	r3, [r3, #24]
 80031d0:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 80031d2:	897b      	ldrh	r3, [r7, #10]
 80031d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d8:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80031da:	897b      	ldrh	r3, [r7, #10]
 80031dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e0:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	897b      	ldrh	r3, [r7, #10]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80031f2:	89fb      	ldrh	r3, [r7, #14]
 80031f4:	f023 0320 	bic.w	r3, r3, #32
 80031f8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	899b      	ldrh	r3, [r3, #12]
 80031fe:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003202:	b29a      	uxth	r2, r3
 8003204:	89fb      	ldrh	r3, [r7, #14]
 8003206:	4313      	orrs	r3, r2
 8003208:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	885b      	ldrh	r3, [r3, #2]
 800320e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003212:	b29a      	uxth	r2, r3
 8003214:	89fb      	ldrh	r3, [r7, #14]
 8003216:	4313      	orrs	r3, r2
 8003218:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003224:	429a      	cmp	r2, r3
 8003226:	d006      	beq.n	8003236 <TIM_OC2Init+0xa2>
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800322e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003232:	429a      	cmp	r2, r3
 8003234:	d12f      	bne.n	8003296 <TIM_OC2Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8003236:	89fb      	ldrh	r3, [r7, #14]
 8003238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800323c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	89db      	ldrh	r3, [r3, #14]
 8003242:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003246:	b29a      	uxth	r2, r3
 8003248:	89fb      	ldrh	r3, [r7, #14]
 800324a:	4313      	orrs	r3, r2
 800324c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800324e:	89fb      	ldrh	r3, [r7, #14]
 8003250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003254:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	889b      	ldrh	r3, [r3, #4]
 800325a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800325e:	b29a      	uxth	r2, r3
 8003260:	89fb      	ldrh	r3, [r7, #14]
 8003262:	4313      	orrs	r3, r2
 8003264:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 8003266:	89bb      	ldrh	r3, [r7, #12]
 8003268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800326c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800326e:	89bb      	ldrh	r3, [r7, #12]
 8003270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003274:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	8a1b      	ldrh	r3, [r3, #16]
 800327a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800327e:	b29a      	uxth	r2, r3
 8003280:	89bb      	ldrh	r3, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	8a5b      	ldrh	r3, [r3, #18]
 800328a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800328e:	b29a      	uxth	r2, r3
 8003290:	89bb      	ldrh	r3, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	89ba      	ldrh	r2, [r7, #12]
 800329a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	897a      	ldrh	r2, [r7, #10]
 80032a0:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	89fa      	ldrh	r2, [r7, #14]
 80032ae:	841a      	strh	r2, [r3, #32]
}
 80032b0:	f107 0714 	add.w	r7, r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop

080032bc <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	817b      	strh	r3, [r7, #10]
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	81fb      	strh	r3, [r7, #14]
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8c1b      	ldrh	r3, [r3, #32]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8c1b      	ldrh	r3, [r3, #32]
 80032ec:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	889b      	ldrh	r3, [r3, #4]
 80032f2:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	8b9b      	ldrh	r3, [r3, #28]
 80032f8:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 80032fa:	897b      	ldrh	r3, [r7, #10]
 80032fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003300:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	f023 0303 	bic.w	r3, r3, #3
 8003308:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	881a      	ldrh	r2, [r3, #0]
 800330e:	897b      	ldrh	r3, [r7, #10]
 8003310:	4313      	orrs	r3, r2
 8003312:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8003314:	89fb      	ldrh	r3, [r7, #14]
 8003316:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800331a:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	899b      	ldrh	r3, [r3, #12]
 8003320:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003324:	b29a      	uxth	r2, r3
 8003326:	89fb      	ldrh	r3, [r7, #14]
 8003328:	4313      	orrs	r3, r2
 800332a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	885b      	ldrh	r3, [r3, #2]
 8003330:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003334:	b29a      	uxth	r2, r3
 8003336:	89fb      	ldrh	r3, [r7, #14]
 8003338:	4313      	orrs	r3, r2
 800333a:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003346:	429a      	cmp	r2, r3
 8003348:	d006      	beq.n	8003358 <TIM_OC3Init+0x9c>
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003350:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003354:	429a      	cmp	r2, r3
 8003356:	d12f      	bne.n	80033b8 <TIM_OC3Init+0xfc>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8003358:	89fb      	ldrh	r3, [r7, #14]
 800335a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800335e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	89db      	ldrh	r3, [r3, #14]
 8003364:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003368:	b29a      	uxth	r2, r3
 800336a:	89fb      	ldrh	r3, [r7, #14]
 800336c:	4313      	orrs	r3, r2
 800336e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8003370:	89fb      	ldrh	r3, [r7, #14]
 8003372:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003376:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	889b      	ldrh	r3, [r3, #4]
 800337c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003380:	b29a      	uxth	r2, r3
 8003382:	89fb      	ldrh	r3, [r7, #14]
 8003384:	4313      	orrs	r3, r2
 8003386:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8003388:	89bb      	ldrh	r3, [r7, #12]
 800338a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800338e:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8003390:	89bb      	ldrh	r3, [r7, #12]
 8003392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003396:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	8a1b      	ldrh	r3, [r3, #16]
 800339c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	89bb      	ldrh	r3, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	8a5b      	ldrh	r3, [r3, #18]
 80033ac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	89bb      	ldrh	r3, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	89ba      	ldrh	r2, [r7, #12]
 80033bc:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	897a      	ldrh	r2, [r7, #10]
 80033c2:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	89fa      	ldrh	r2, [r7, #14]
 80033d0:	841a      	strh	r2, [r3, #32]
}
 80033d2:	f107 0714 	add.w	r7, r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	81bb      	strh	r3, [r7, #12]
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	817b      	strh	r3, [r7, #10]
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8c1b      	ldrh	r3, [r3, #32]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003402:	b29a      	uxth	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8c1b      	ldrh	r3, [r3, #32]
 800340c:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	889b      	ldrh	r3, [r3, #4]
 8003412:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8b9b      	ldrh	r3, [r3, #28]
 8003418:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 800341a:	89bb      	ldrh	r3, [r7, #12]
 800341c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003420:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8003422:	89bb      	ldrh	r3, [r7, #12]
 8003424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003428:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003432:	b29a      	uxth	r2, r3
 8003434:	89bb      	ldrh	r3, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800343a:	897b      	ldrh	r3, [r7, #10]
 800343c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003440:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	899b      	ldrh	r3, [r3, #12]
 8003446:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800344a:	b29a      	uxth	r2, r3
 800344c:	897b      	ldrh	r3, [r7, #10]
 800344e:	4313      	orrs	r3, r2
 8003450:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	885b      	ldrh	r3, [r3, #2]
 8003456:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800345a:	b29a      	uxth	r2, r3
 800345c:	897b      	ldrh	r3, [r7, #10]
 800345e:	4313      	orrs	r3, r2
 8003460:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800346c:	429a      	cmp	r2, r3
 800346e:	d006      	beq.n	800347e <TIM_OC4Init+0xa2>
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003476:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800347a:	429a      	cmp	r2, r3
 800347c:	d10b      	bne.n	8003496 <TIM_OC4Init+0xba>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800347e:	89fb      	ldrh	r3, [r7, #14]
 8003480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003484:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	8a1b      	ldrh	r3, [r3, #16]
 800348a:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800348e:	b29a      	uxth	r2, r3
 8003490:	89fb      	ldrh	r3, [r7, #14]
 8003492:	4313      	orrs	r3, r2
 8003494:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	89fa      	ldrh	r2, [r7, #14]
 800349a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	89ba      	ldrh	r2, [r7, #12]
 80034a0:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	897a      	ldrh	r2, [r7, #10]
 80034ae:	841a      	strh	r2, [r3, #32]
}
 80034b0:	f107 0714 	add.w	r7, r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop

080034bc <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	825a      	strh	r2, [r3, #18]
}
 8003504:	f107 070c 	add.w	r7, r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop

08003510 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	460a      	mov	r2, r1
 800351c:	807a      	strh	r2, [r7, #2]
 800351e:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f103 0318 	add.w	r3, r3, #24
 8003536:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8003538:	887b      	ldrh	r3, [r7, #2]
 800353a:	f04f 0201 	mov.w	r2, #1
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8c1b      	ldrh	r3, [r3, #32]
 8003548:	b29a      	uxth	r2, r3
 800354a:	897b      	ldrh	r3, [r7, #10]
 800354c:	ea6f 0303 	mvn.w	r3, r3
 8003550:	b29b      	uxth	r3, r3
 8003552:	4013      	ands	r3, r2
 8003554:	b29a      	uxth	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800355a:	887b      	ldrh	r3, [r7, #2]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <TIM_SelectOCxM+0x56>
 8003560:	887b      	ldrh	r3, [r7, #2]
 8003562:	2b08      	cmp	r3, #8
 8003564:	d114      	bne.n	8003590 <TIM_SelectOCxM+0x80>
  {
    tmp += (TIM_Channel>>1);
 8003566:	887b      	ldrh	r3, [r7, #2]
 8003568:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800356c:	b29b      	uxth	r3, r3
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	18d3      	adds	r3, r2, r3
 8003572:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6819      	ldr	r1, [r3, #0]
 800357a:	f64f 738f 	movw	r3, #65423	; 0xff8f
 800357e:	400b      	ands	r3, r1
 8003580:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	6811      	ldr	r1, [r2, #0]
 8003588:	883a      	ldrh	r2, [r7, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e019      	b.n	80035c4 <TIM_SelectOCxM+0xb4>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8003590:	887b      	ldrh	r3, [r7, #2]
 8003592:	f1a3 0304 	sub.w	r3, r3, #4
 8003596:	b29b      	uxth	r3, r3
 8003598:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800359c:	b29b      	uxth	r3, r3
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	18d3      	adds	r3, r2, r3
 80035a2:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6819      	ldr	r1, [r3, #0]
 80035aa:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80035ae:	400b      	ands	r3, r1
 80035b0:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	6811      	ldr	r1, [r2, #0]
 80035b8:	883a      	ldrh	r2, [r7, #0]
 80035ba:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80035be:	b292      	uxth	r2, r2
 80035c0:	430a      	orrs	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
  }
}
 80035c4:	f107 0714 	add.w	r7, r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop

080035d0 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80035e0:	f107 070c 	add.w	r7, r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop

080035ec <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80035fc:	f107 070c 	add.w	r7, r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop

08003608 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003618:	f107 070c 	add.w	r7, r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop

08003624 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003634:	f107 070c 	add.w	r7, r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop

08003640 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	8b1b      	ldrh	r3, [r3, #24]
 8003656:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8003658:	89fb      	ldrh	r3, [r7, #14]
 800365a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365e:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8003660:	89fa      	ldrh	r2, [r7, #14]
 8003662:	887b      	ldrh	r3, [r7, #2]
 8003664:	4313      	orrs	r3, r2
 8003666:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	89fa      	ldrh	r2, [r7, #14]
 800366c:	831a      	strh	r2, [r3, #24]
}
 800366e:	f107 0714 	add.w	r7, r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8b1b      	ldrh	r3, [r3, #24]
 800368e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8003690:	89fb      	ldrh	r3, [r7, #14]
 8003692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003696:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8003698:	887b      	ldrh	r3, [r7, #2]
 800369a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800369e:	b29a      	uxth	r2, r3
 80036a0:	89fb      	ldrh	r3, [r7, #14]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	89fa      	ldrh	r2, [r7, #14]
 80036aa:	831a      	strh	r2, [r3, #24]
}
 80036ac:	f107 0714 	add.w	r7, r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop

080036b8 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8b9b      	ldrh	r3, [r3, #28]
 80036ce:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 80036d0:	89fb      	ldrh	r3, [r7, #14]
 80036d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d6:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80036d8:	89fa      	ldrh	r2, [r7, #14]
 80036da:	887b      	ldrh	r3, [r7, #2]
 80036dc:	4313      	orrs	r3, r2
 80036de:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	89fa      	ldrh	r2, [r7, #14]
 80036e4:	839a      	strh	r2, [r3, #28]
}
 80036e6:	f107 0714 	add.w	r7, r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8b9b      	ldrh	r3, [r3, #28]
 8003706:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8003708:	89fb      	ldrh	r3, [r7, #14]
 800370a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800370e:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8003710:	887b      	ldrh	r3, [r7, #2]
 8003712:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003716:	b29a      	uxth	r2, r3
 8003718:	89fb      	ldrh	r3, [r7, #14]
 800371a:	4313      	orrs	r3, r2
 800371c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	89fa      	ldrh	r2, [r7, #14]
 8003722:	839a      	strh	r2, [r3, #28]
}
 8003724:	f107 0714 	add.w	r7, r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop

08003730 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	8b1b      	ldrh	r3, [r3, #24]
 8003746:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8003748:	89fb      	ldrh	r3, [r7, #14]
 800374a:	f023 0308 	bic.w	r3, r3, #8
 800374e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8003750:	89fa      	ldrh	r2, [r7, #14]
 8003752:	887b      	ldrh	r3, [r7, #2]
 8003754:	4313      	orrs	r3, r2
 8003756:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	89fa      	ldrh	r2, [r7, #14]
 800375c:	831a      	strh	r2, [r3, #24]
}
 800375e:	f107 0714 	add.w	r7, r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	8b1b      	ldrh	r3, [r3, #24]
 800377e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8003780:	89fb      	ldrh	r3, [r7, #14]
 8003782:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003786:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8003788:	887b      	ldrh	r3, [r7, #2]
 800378a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800378e:	b29a      	uxth	r2, r3
 8003790:	89fb      	ldrh	r3, [r7, #14]
 8003792:	4313      	orrs	r3, r2
 8003794:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	89fa      	ldrh	r2, [r7, #14]
 800379a:	831a      	strh	r2, [r3, #24]
}
 800379c:	f107 0714 	add.w	r7, r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop

080037a8 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8b9b      	ldrh	r3, [r3, #28]
 80037be:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80037c0:	89fb      	ldrh	r3, [r7, #14]
 80037c2:	f023 0308 	bic.w	r3, r3, #8
 80037c6:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80037c8:	89fa      	ldrh	r2, [r7, #14]
 80037ca:	887b      	ldrh	r3, [r7, #2]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	89fa      	ldrh	r2, [r7, #14]
 80037d4:	839a      	strh	r2, [r3, #28]
}
 80037d6:	f107 0714 	add.w	r7, r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr

080037e0 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	8b9b      	ldrh	r3, [r3, #28]
 80037f6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80037f8:	89fb      	ldrh	r3, [r7, #14]
 80037fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037fe:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8003800:	887b      	ldrh	r3, [r7, #2]
 8003802:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003806:	b29a      	uxth	r2, r3
 8003808:	89fb      	ldrh	r3, [r7, #14]
 800380a:	4313      	orrs	r3, r2
 800380c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	89fa      	ldrh	r2, [r7, #14]
 8003812:	839a      	strh	r2, [r3, #28]
}
 8003814:	f107 0714 	add.w	r7, r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop

08003820 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	8b1b      	ldrh	r3, [r3, #24]
 8003836:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8003838:	89fb      	ldrh	r3, [r7, #14]
 800383a:	f023 0304 	bic.w	r3, r3, #4
 800383e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8003840:	89fa      	ldrh	r2, [r7, #14]
 8003842:	887b      	ldrh	r3, [r7, #2]
 8003844:	4313      	orrs	r3, r2
 8003846:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	89fa      	ldrh	r2, [r7, #14]
 800384c:	831a      	strh	r2, [r3, #24]
}
 800384e:	f107 0714 	add.w	r7, r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr

08003858 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8b1b      	ldrh	r3, [r3, #24]
 800386e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8003870:	89fb      	ldrh	r3, [r7, #14]
 8003872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003876:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8003878:	887b      	ldrh	r3, [r7, #2]
 800387a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800387e:	b29a      	uxth	r2, r3
 8003880:	89fb      	ldrh	r3, [r7, #14]
 8003882:	4313      	orrs	r3, r2
 8003884:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	89fa      	ldrh	r2, [r7, #14]
 800388a:	831a      	strh	r2, [r3, #24]
}
 800388c:	f107 0714 	add.w	r7, r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop

08003898 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	8b9b      	ldrh	r3, [r3, #28]
 80038ae:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 80038b0:	89fb      	ldrh	r3, [r7, #14]
 80038b2:	f023 0304 	bic.w	r3, r3, #4
 80038b6:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 80038b8:	89fa      	ldrh	r2, [r7, #14]
 80038ba:	887b      	ldrh	r3, [r7, #2]
 80038bc:	4313      	orrs	r3, r2
 80038be:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	89fa      	ldrh	r2, [r7, #14]
 80038c4:	839a      	strh	r2, [r3, #28]
}
 80038c6:	f107 0714 	add.w	r7, r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8b9b      	ldrh	r3, [r3, #28]
 80038e6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 80038e8:	89fb      	ldrh	r3, [r7, #14]
 80038ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ee:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	89fb      	ldrh	r3, [r7, #14]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	89fa      	ldrh	r2, [r7, #14]
 8003902:	839a      	strh	r2, [r3, #28]
}
 8003904:	f107 0714 	add.w	r7, r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop

08003910 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8b1b      	ldrh	r3, [r3, #24]
 8003926:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8003928:	89fb      	ldrh	r3, [r7, #14]
 800392a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800392e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8003930:	89fa      	ldrh	r2, [r7, #14]
 8003932:	887b      	ldrh	r3, [r7, #2]
 8003934:	4313      	orrs	r3, r2
 8003936:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	89fa      	ldrh	r2, [r7, #14]
 800393c:	831a      	strh	r2, [r3, #24]
}
 800393e:	f107 0714 	add.w	r7, r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr

08003948 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8b1b      	ldrh	r3, [r3, #24]
 800395e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8003960:	89fb      	ldrh	r3, [r7, #14]
 8003962:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8003966:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800396a:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800396c:	887b      	ldrh	r3, [r7, #2]
 800396e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003972:	b29a      	uxth	r2, r3
 8003974:	89fb      	ldrh	r3, [r7, #14]
 8003976:	4313      	orrs	r3, r2
 8003978:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	89fa      	ldrh	r2, [r7, #14]
 800397e:	831a      	strh	r2, [r3, #24]
}
 8003980:	f107 0714 	add.w	r7, r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop

0800398c <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8b9b      	ldrh	r3, [r3, #28]
 80039a2:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 80039a4:	89fb      	ldrh	r3, [r7, #14]
 80039a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039aa:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 80039ac:	89fa      	ldrh	r2, [r7, #14]
 80039ae:	887b      	ldrh	r3, [r7, #2]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	89fa      	ldrh	r2, [r7, #14]
 80039b8:	839a      	strh	r2, [r3, #28]
}
 80039ba:	f107 0714 	add.w	r7, r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8b9b      	ldrh	r3, [r3, #28]
 80039da:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 80039dc:	89fb      	ldrh	r3, [r7, #14]
 80039de:	ea4f 4343 	mov.w	r3, r3, lsl #17
 80039e2:	ea4f 4353 	mov.w	r3, r3, lsr #17
 80039e6:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 80039e8:	887b      	ldrh	r3, [r7, #2]
 80039ea:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	89fb      	ldrh	r3, [r7, #14]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	89fa      	ldrh	r2, [r7, #14]
 80039fa:	839a      	strh	r2, [r3, #28]
}
 80039fc:	f107 0714 	add.w	r7, r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop

08003a08 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8c1b      	ldrh	r3, [r3, #32]
 8003a1e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8003a20:	89fb      	ldrh	r3, [r7, #14]
 8003a22:	f023 0302 	bic.w	r3, r3, #2
 8003a26:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 8003a28:	89fa      	ldrh	r2, [r7, #14]
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	89fa      	ldrh	r2, [r7, #14]
 8003a34:	841a      	strh	r2, [r3, #32]
}
 8003a36:	f107 0714 	add.w	r7, r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	8c1b      	ldrh	r3, [r3, #32]
 8003a56:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8003a58:	89fb      	ldrh	r3, [r7, #14]
 8003a5a:	f023 0308 	bic.w	r3, r3, #8
 8003a5e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 8003a60:	89fa      	ldrh	r2, [r7, #14]
 8003a62:	887b      	ldrh	r3, [r7, #2]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	89fa      	ldrh	r2, [r7, #14]
 8003a6c:	841a      	strh	r2, [r3, #32]
}
 8003a6e:	f107 0714 	add.w	r7, r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8c1b      	ldrh	r3, [r3, #32]
 8003a8e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8003a90:	89fb      	ldrh	r3, [r7, #14]
 8003a92:	f023 0320 	bic.w	r3, r3, #32
 8003a96:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8003a98:	887b      	ldrh	r3, [r7, #2]
 8003a9a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	89fb      	ldrh	r3, [r7, #14]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	89fa      	ldrh	r2, [r7, #14]
 8003aaa:	841a      	strh	r2, [r3, #32]
}
 8003aac:	f107 0714 	add.w	r7, r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop

08003ab8 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	8c1b      	ldrh	r3, [r3, #32]
 8003ace:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8003ad0:	89fb      	ldrh	r3, [r7, #14]
 8003ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad6:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8003ad8:	887b      	ldrh	r3, [r7, #2]
 8003ada:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	89fb      	ldrh	r3, [r7, #14]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	89fa      	ldrh	r2, [r7, #14]
 8003aea:	841a      	strh	r2, [r3, #32]
}
 8003aec:	f107 0714 	add.w	r7, r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop

08003af8 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8c1b      	ldrh	r3, [r3, #32]
 8003b0e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8003b10:	89fb      	ldrh	r3, [r7, #14]
 8003b12:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b16:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8003b18:	887b      	ldrh	r3, [r7, #2]
 8003b1a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	89fb      	ldrh	r3, [r7, #14]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	89fa      	ldrh	r2, [r7, #14]
 8003b2a:	841a      	strh	r2, [r3, #32]
}
 8003b2c:	f107 0714 	add.w	r7, r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop

08003b38 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8c1b      	ldrh	r3, [r3, #32]
 8003b4e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8003b50:	89fb      	ldrh	r3, [r7, #14]
 8003b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b56:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8003b58:	887b      	ldrh	r3, [r7, #2]
 8003b5a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	89fb      	ldrh	r3, [r7, #14]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	89fa      	ldrh	r2, [r7, #14]
 8003b6a:	841a      	strh	r2, [r3, #32]
}
 8003b6c:	f107 0714 	add.w	r7, r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop

08003b78 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8c1b      	ldrh	r3, [r3, #32]
 8003b8e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8003b90:	89fb      	ldrh	r3, [r7, #14]
 8003b92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b96:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8003b98:	887b      	ldrh	r3, [r7, #2]
 8003b9a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	89fb      	ldrh	r3, [r7, #14]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	89fa      	ldrh	r2, [r7, #14]
 8003baa:	841a      	strh	r2, [r3, #32]
}
 8003bac:	f107 0714 	add.w	r7, r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop

08003bb8 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	460a      	mov	r2, r1
 8003bc4:	807a      	strh	r2, [r7, #2]
 8003bc6:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8003bce:	887b      	ldrh	r3, [r7, #2]
 8003bd0:	f04f 0201 	mov.w	r2, #1
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8c1b      	ldrh	r3, [r3, #32]
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	89fb      	ldrh	r3, [r7, #14]
 8003be2:	ea6f 0303 	mvn.w	r3, r3
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	4013      	ands	r3, r2
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8c1b      	ldrh	r3, [r3, #32]
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	8839      	ldrh	r1, [r7, #0]
 8003bf8:	887b      	ldrh	r3, [r7, #2]
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	4313      	orrs	r3, r2
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	841a      	strh	r2, [r3, #32]
}
 8003c08:	f107 0714 	add.w	r7, r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop

08003c14 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	460a      	mov	r2, r1
 8003c20:	807a      	strh	r2, [r7, #2]
 8003c22:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8003c2a:	887b      	ldrh	r3, [r7, #2]
 8003c2c:	f04f 0204 	mov.w	r2, #4
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	8c1b      	ldrh	r3, [r3, #32]
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	89fb      	ldrh	r3, [r7, #14]
 8003c3e:	ea6f 0303 	mvn.w	r3, r3
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	4013      	ands	r3, r2
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8c1b      	ldrh	r3, [r3, #32]
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	8839      	ldrh	r1, [r7, #0]
 8003c54:	887b      	ldrh	r3, [r7, #2]
 8003c56:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	841a      	strh	r2, [r3, #32]
}
 8003c64:	f107 0714 	add.w	r7, r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop

08003c70 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10f      	bne.n	8003ca2 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8003c86:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003c88:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8003c8a:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003c8c:	891b      	ldrh	r3, [r3, #8]
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fcc4 	bl	800461c <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	88db      	ldrh	r3, [r3, #6]
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f000 f8ec 	bl	8003e78 <TIM_SetIC1Prescaler>
 8003ca0:	e036      	b.n	8003d10 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d10f      	bne.n	8003cca <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8003cae:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003cb0:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8003cb2:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003cb4:	891b      	ldrh	r3, [r3, #8]
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fcf0 	bl	800469c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	88db      	ldrh	r3, [r3, #6]
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	f000 f8f4 	bl	8003eb0 <TIM_SetIC2Prescaler>
 8003cc8:	e022      	b.n	8003d10 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d10f      	bne.n	8003cf2 <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8003cd6:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8003cd8:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8003cda:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8003cdc:	891b      	ldrh	r3, [r3, #8]
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fd2a 	bl	8004738 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	88db      	ldrh	r3, [r3, #6]
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4619      	mov	r1, r3
 8003cec:	f000 f8fe 	bl	8003eec <TIM_SetIC3Prescaler>
 8003cf0:	e00e      	b.n	8003d10 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8003cf6:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003cf8:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8003cfa:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003cfc:	891b      	ldrh	r3, [r3, #8]
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fd60 	bl	80047c4 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	88db      	ldrh	r3, [r3, #6]
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	f000 f90a 	bl	8003f24 <TIM_SetIC4Prescaler>
  }
}
 8003d10:	f107 0708 	add.w	r7, r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f04f 0201 	mov.w	r2, #1
 8003d36:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	811a      	strh	r2, [r3, #8]
}
 8003d48:	f107 070c 	add.w	r7, r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop

08003d54 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 8003d64:	f04f 0301 	mov.w	r3, #1
 8003d68:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	885b      	ldrh	r3, [r3, #2]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d103      	bne.n	8003d7a <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8003d72:	f04f 0302 	mov.w	r3, #2
 8003d76:	81fb      	strh	r3, [r7, #14]
 8003d78:	e002      	b.n	8003d80 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	889b      	ldrh	r3, [r3, #4]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d103      	bne.n	8003d90 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8003d88:	f04f 0302 	mov.w	r3, #2
 8003d8c:	81bb      	strh	r3, [r7, #12]
 8003d8e:	e002      	b.n	8003d96 <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8003d90:	f04f 0301 	mov.w	r3, #1
 8003d94:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d11c      	bne.n	8003dd8 <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	8859      	ldrh	r1, [r3, #2]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 8003da6:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003da8:	891b      	ldrh	r3, [r3, #8]
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fc36 	bl	800461c <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	88db      	ldrh	r3, [r3, #6]
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4619      	mov	r1, r3
 8003db8:	f000 f85e 	bl	8003e78 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	891b      	ldrh	r3, [r3, #8]
 8003dc0:	89f9      	ldrh	r1, [r7, #14]
 8003dc2:	89ba      	ldrh	r2, [r7, #12]
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fc69 	bl	800469c <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	88db      	ldrh	r3, [r3, #6]
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	f000 f86d 	bl	8003eb0 <TIM_SetIC2Prescaler>
 8003dd6:	e01b      	b.n	8003e10 <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	8859      	ldrh	r1, [r3, #2]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 8003de0:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003de2:	891b      	ldrh	r3, [r3, #8]
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fc59 	bl	800469c <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	88db      	ldrh	r3, [r3, #6]
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4619      	mov	r1, r3
 8003df2:	f000 f85d 	bl	8003eb0 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	891b      	ldrh	r3, [r3, #8]
 8003dfa:	89f9      	ldrh	r1, [r7, #14]
 8003dfc:	89ba      	ldrh	r2, [r7, #12]
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fc0c 	bl	800461c <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	88db      	ldrh	r3, [r3, #6]
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	f000 f834 	bl	8003e78 <TIM_SetIC1Prescaler>
  }
}
 8003e10:	f107 0710 	add.w	r7, r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	f107 070c 	add.w	r7, r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f107 070c 	add.w	r7, r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	f107 070c 	add.w	r7, r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f107 070c 	add.w	r7, r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr

08003e78 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8b1b      	ldrh	r3, [r3, #24]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f023 030c 	bic.w	r3, r3, #12
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8b1b      	ldrh	r3, [r3, #24]
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	887b      	ldrh	r3, [r7, #2]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	831a      	strh	r2, [r3, #24]
}
 8003ea4:	f107 070c 	add.w	r7, r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop

08003eb0 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8b1b      	ldrh	r3, [r3, #24]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8b1b      	ldrh	r3, [r3, #24]
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	887b      	ldrh	r3, [r7, #2]
 8003ed4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	4313      	orrs	r3, r2
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	831a      	strh	r2, [r3, #24]
}
 8003ee2:	f107 070c 	add.w	r7, r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8b9b      	ldrh	r3, [r3, #28]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	f023 030c 	bic.w	r3, r3, #12
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	8b9b      	ldrh	r3, [r3, #28]
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	887b      	ldrh	r3, [r7, #2]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	839a      	strh	r2, [r3, #28]
}
 8003f18:	f107 070c 	add.w	r7, r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop

08003f24 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8b9b      	ldrh	r3, [r3, #28]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	8b9b      	ldrh	r3, [r3, #28]
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	887b      	ldrh	r3, [r7, #2]
 8003f48:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	839a      	strh	r2, [r3, #28]
}
 8003f56:	f107 070c 	add.w	r7, r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	881a      	ldrh	r2, [r3, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	885b      	ldrh	r3, [r3, #2]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003f82:	4313      	orrs	r3, r2
 8003f84:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003f92:	4313      	orrs	r3, r2
 8003f94:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8003fa4:	f107 070c 	add.w	r7, r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop

08003fb0 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	819a      	strh	r2, [r3, #12]
}
 8003ff0:	f107 070c 	add.w	r7, r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop

08003ffc <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00c      	beq.n	8004028 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004014:	b29b      	uxth	r3, r3
 8004016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800401a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800401e:	b29a      	uxth	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8004026:	e00b      	b.n	8004040 <TIM_CtrlPWMOutputs+0x44>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800402e:	b29b      	uxth	r3, r3
 8004030:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8004034:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8004038:	b29a      	uxth	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8004040:	f107 070c 	add.w	r7, r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop

0800404c <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d008      	beq.n	8004070 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	889b      	ldrh	r3, [r3, #4]
 8004062:	b29b      	uxth	r3, r3
 8004064:	f043 0304 	orr.w	r3, r3, #4
 8004068:	b29a      	uxth	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	809a      	strh	r2, [r3, #4]
 800406e:	e007      	b.n	8004080 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	889b      	ldrh	r3, [r3, #4]
 8004074:	b29b      	uxth	r3, r3
 8004076:	f023 0304 	bic.w	r3, r3, #4
 800407a:	b29a      	uxth	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	809a      	strh	r2, [r3, #4]
  }
}
 8004080:	f107 070c 	add.w	r7, r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop

0800408c <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	889b      	ldrh	r3, [r3, #4]
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	809a      	strh	r2, [r3, #4]
 80040ae:	e007      	b.n	80040c0 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	889b      	ldrh	r3, [r3, #4]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	f023 0301 	bic.w	r3, r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	809a      	strh	r2, [r3, #4]
  }
}
 80040c0:	f107 070c 	add.w	r7, r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop

080040cc <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	460a      	mov	r2, r1
 80040d8:	807a      	strh	r2, [r7, #2]
 80040da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80040dc:	787b      	ldrb	r3, [r7, #1]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d008      	beq.n	80040f4 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	899b      	ldrh	r3, [r3, #12]
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	887b      	ldrh	r3, [r7, #2]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	819a      	strh	r2, [r3, #12]
 80040f2:	e00a      	b.n	800410a <TIM_ITConfig+0x3e>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	899b      	ldrh	r3, [r3, #12]
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	887b      	ldrh	r3, [r7, #2]
 80040fc:	ea6f 0303 	mvn.w	r3, r3
 8004100:	b29b      	uxth	r3, r3
 8004102:	4013      	ands	r3, r2
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	819a      	strh	r2, [r3, #12]
  }
}
 800410a:	f107 070c 	add.w	r7, r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	887a      	ldrh	r2, [r7, #2]
 8004124:	829a      	strh	r2, [r3, #20]
}
 8004126:	f107 070c 	add.w	r7, r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	8a1b      	ldrh	r3, [r3, #16]
 8004146:	b29a      	uxth	r2, r3
 8004148:	887b      	ldrh	r3, [r7, #2]
 800414a:	4013      	ands	r3, r2
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <TIM_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8004152:	f04f 0301 	mov.w	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
 8004158:	e002      	b.n	8004160 <TIM_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004160:	7bfb      	ldrb	r3, [r7, #15]
}
 8004162:	4618      	mov	r0, r3
 8004164:	f107 0714 	add.w	r7, r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop

08004170 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 800417c:	887b      	ldrh	r3, [r7, #2]
 800417e:	ea6f 0303 	mvn.w	r3, r3
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	821a      	strh	r2, [r3, #16]
}
 8004188:	f107 070c 	add.w	r7, r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop

08004194 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	81bb      	strh	r3, [r7, #12]
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8a1b      	ldrh	r3, [r3, #16]
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	887b      	ldrh	r3, [r7, #2]
 80041ba:	4013      	ands	r3, r2
 80041bc:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	899b      	ldrh	r3, [r3, #12]
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	887b      	ldrh	r3, [r7, #2]
 80041c6:	4013      	ands	r3, r2
 80041c8:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80041ca:	89bb      	ldrh	r3, [r7, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d006      	beq.n	80041de <TIM_GetITStatus+0x4a>
 80041d0:	897b      	ldrh	r3, [r7, #10]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 80041d6:	f04f 0301 	mov.w	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
 80041dc:	e002      	b.n	80041e4 <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	f107 0714 	add.w	r7, r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop

080041f4 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8004200:	887b      	ldrh	r3, [r7, #2]
 8004202:	ea6f 0303 	mvn.w	r3, r3
 8004206:	b29a      	uxth	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	821a      	strh	r2, [r3, #16]
}
 800420c:	f107 070c 	add.w	r7, r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop

08004218 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	460a      	mov	r2, r1
 8004224:	807a      	strh	r2, [r7, #2]
 8004226:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8004228:	887a      	ldrh	r2, [r7, #2]
 800422a:	883b      	ldrh	r3, [r7, #0]
 800422c:	4313      	orrs	r3, r2
 800422e:	b29a      	uxth	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8004236:	f107 070c 	add.w	r7, r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr

08004240 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	460a      	mov	r2, r1
 800424c:	807a      	strh	r2, [r7, #2]
 800424e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004250:	787b      	ldrb	r3, [r7, #1]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	899b      	ldrh	r3, [r3, #12]
 800425a:	b29a      	uxth	r2, r3
 800425c:	887b      	ldrh	r3, [r7, #2]
 800425e:	4313      	orrs	r3, r2
 8004260:	b29a      	uxth	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	819a      	strh	r2, [r3, #12]
 8004266:	e00a      	b.n	800427e <TIM_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	899b      	ldrh	r3, [r3, #12]
 800426c:	b29a      	uxth	r2, r3
 800426e:	887b      	ldrh	r3, [r7, #2]
 8004270:	ea6f 0303 	mvn.w	r3, r3
 8004274:	b29b      	uxth	r3, r3
 8004276:	4013      	ands	r3, r2
 8004278:	b29a      	uxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	819a      	strh	r2, [r3, #12]
  }
}
 800427e:	f107 070c 	add.w	r7, r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	889b      	ldrh	r3, [r3, #4]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	f043 0308 	orr.w	r3, r3, #8
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	809a      	strh	r2, [r3, #4]
 80042aa:	e007      	b.n	80042bc <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	889b      	ldrh	r3, [r3, #4]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	f023 0308 	bic.w	r3, r3, #8
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	809a      	strh	r2, [r3, #4]
  }
}
 80042bc:	f107 070c 	add.w	r7, r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop

080042c8 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	891b      	ldrh	r3, [r3, #8]
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	f023 0307 	bic.w	r3, r3, #7
 80042da:	b29a      	uxth	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	811a      	strh	r2, [r3, #8]
}
 80042e0:	f107 070c 	add.w	r7, r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop

080042ec <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 80042f8:	887b      	ldrh	r3, [r7, #2]
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4619      	mov	r1, r3
 80042fe:	f000 f87d 	bl	80043fc <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	891b      	ldrh	r3, [r3, #8]
 8004306:	b29b      	uxth	r3, r3
 8004308:	f043 0307 	orr.w	r3, r3, #7
 800430c:	b29a      	uxth	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	811a      	strh	r2, [r3, #8]
}
 8004312:	f107 0708 	add.w	r7, r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop

0800431c <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	8179      	strh	r1, [r7, #10]
 8004326:	813a      	strh	r2, [r7, #8]
 8004328:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800432a:	897b      	ldrh	r3, [r7, #10]
 800432c:	2b60      	cmp	r3, #96	; 0x60
 800432e:	d108      	bne.n	8004342 <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8004330:	893a      	ldrh	r2, [r7, #8]
 8004332:	88fb      	ldrh	r3, [r7, #6]
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	4611      	mov	r1, r2
 8004338:	f04f 0201 	mov.w	r2, #1
 800433c:	f000 f9ae 	bl	800469c <TI2_Config>
 8004340:	e007      	b.n	8004352 <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8004342:	893a      	ldrh	r2, [r7, #8]
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	4611      	mov	r1, r2
 800434a:	f04f 0201 	mov.w	r2, #1
 800434e:	f000 f965 	bl	800461c <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8004352:	897b      	ldrh	r3, [r7, #10]
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	4619      	mov	r1, r3
 8004358:	f000 f850 	bl	80043fc <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	891b      	ldrh	r3, [r3, #8]
 8004360:	b29b      	uxth	r3, r3
 8004362:	f043 0307 	orr.w	r3, r3, #7
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	811a      	strh	r2, [r3, #8]
}
 800436c:	f107 0710 	add.w	r7, r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	8179      	strh	r1, [r7, #10]
 800437e:	813a      	strh	r2, [r7, #8]
 8004380:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8004388:	8979      	ldrh	r1, [r7, #10]
 800438a:	893a      	ldrh	r2, [r7, #8]
 800438c:	88fb      	ldrh	r3, [r7, #6]
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f8a4 	bl	80044dc <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	891b      	ldrh	r3, [r3, #8]
 8004398:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800439a:	8afb      	ldrh	r3, [r7, #22]
 800439c:	f023 0307 	bic.w	r3, r3, #7
 80043a0:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 80043a2:	8afb      	ldrh	r3, [r7, #22]
 80043a4:	f043 0307 	orr.w	r3, r3, #7
 80043a8:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80043aa:	8afb      	ldrh	r3, [r7, #22]
 80043ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b0:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 80043b2:	8afb      	ldrh	r3, [r7, #22]
 80043b4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80043b8:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8afa      	ldrh	r2, [r7, #22]
 80043be:	811a      	strh	r2, [r3, #8]
}
 80043c0:	f107 0718 	add.w	r7, r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	8179      	strh	r1, [r7, #10]
 80043d2:	813a      	strh	r2, [r7, #8]
 80043d4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80043d6:	8979      	ldrh	r1, [r7, #10]
 80043d8:	893a      	ldrh	r2, [r7, #8]
 80043da:	88fb      	ldrh	r3, [r7, #6]
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f87d 	bl	80044dc <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	891b      	ldrh	r3, [r3, #8]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	811a      	strh	r2, [r3, #8]
}
 80043f2:	f107 0710 	add.w	r7, r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop

080043fc <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	891b      	ldrh	r3, [r3, #8]
 8004412:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8004414:	89fb      	ldrh	r3, [r7, #14]
 8004416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441a:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800441c:	89fa      	ldrh	r2, [r7, #14]
 800441e:	887b      	ldrh	r3, [r7, #2]
 8004420:	4313      	orrs	r3, r2
 8004422:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	89fa      	ldrh	r2, [r7, #14]
 8004428:	811a      	strh	r2, [r3, #8]
}
 800442a:	f107 0714 	add.w	r7, r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	889b      	ldrh	r3, [r3, #4]
 8004444:	b29b      	uxth	r3, r3
 8004446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444a:	b29a      	uxth	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	889b      	ldrh	r3, [r3, #4]
 8004454:	b29a      	uxth	r2, r3
 8004456:	887b      	ldrh	r3, [r7, #2]
 8004458:	4313      	orrs	r3, r2
 800445a:	b29a      	uxth	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	809a      	strh	r2, [r3, #4]
}
 8004460:	f107 070c 	add.w	r7, r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop

0800446c <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	891b      	ldrh	r3, [r3, #8]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f023 0307 	bic.w	r3, r3, #7
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	891b      	ldrh	r3, [r3, #8]
 800448c:	b29a      	uxth	r2, r3
 800448e:	887b      	ldrh	r3, [r7, #2]
 8004490:	4313      	orrs	r3, r2
 8004492:	b29a      	uxth	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	811a      	strh	r2, [r3, #8]
}
 8004498:	f107 070c 	add.w	r7, r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop

080044a4 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	891b      	ldrh	r3, [r3, #8]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	891b      	ldrh	r3, [r3, #8]
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	887b      	ldrh	r3, [r7, #2]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	811a      	strh	r2, [r3, #8]
}
 80044d0:	f107 070c 	add.w	r7, r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop

080044dc <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	8179      	strh	r1, [r7, #10]
 80044e6:	813a      	strh	r2, [r7, #8]
 80044e8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	891b      	ldrh	r3, [r3, #8]
 80044f4:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80044f6:	8afb      	ldrh	r3, [r7, #22]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004502:	b29a      	uxth	r2, r3
 8004504:	893b      	ldrh	r3, [r7, #8]
 8004506:	4313      	orrs	r3, r2
 8004508:	b29a      	uxth	r2, r3
 800450a:	897b      	ldrh	r3, [r7, #10]
 800450c:	4313      	orrs	r3, r2
 800450e:	b29a      	uxth	r2, r3
 8004510:	8afb      	ldrh	r3, [r7, #22]
 8004512:	4313      	orrs	r3, r2
 8004514:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8afa      	ldrh	r2, [r7, #22]
 800451a:	811a      	strh	r2, [r3, #8]
}
 800451c:	f107 071c 	add.w	r7, r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop

08004528 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	8179      	strh	r1, [r7, #10]
 8004532:	813a      	strh	r2, [r7, #8]
 8004534:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8004542:	f04f 0300 	mov.w	r3, #0
 8004546:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	891b      	ldrh	r3, [r3, #8]
 800454c:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8b1b      	ldrh	r3, [r3, #24]
 8004552:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8c1b      	ldrh	r3, [r3, #32]
 8004558:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800455a:	8afb      	ldrh	r3, [r7, #22]
 800455c:	f023 0307 	bic.w	r3, r3, #7
 8004560:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8004562:	8afa      	ldrh	r2, [r7, #22]
 8004564:	897b      	ldrh	r3, [r7, #10]
 8004566:	4313      	orrs	r3, r2
 8004568:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800456a:	8abb      	ldrh	r3, [r7, #20]
 800456c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004570:	f023 0303 	bic.w	r3, r3, #3
 8004574:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8004576:	8abb      	ldrh	r3, [r7, #20]
 8004578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800457c:	f043 0301 	orr.w	r3, r3, #1
 8004580:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8004582:	8a7b      	ldrh	r3, [r7, #18]
 8004584:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004588:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004590:	b29a      	uxth	r2, r3
 8004592:	893b      	ldrh	r3, [r7, #8]
 8004594:	4313      	orrs	r3, r2
 8004596:	b29a      	uxth	r2, r3
 8004598:	8a7b      	ldrh	r3, [r7, #18]
 800459a:	4313      	orrs	r3, r2
 800459c:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8afa      	ldrh	r2, [r7, #22]
 80045a2:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8aba      	ldrh	r2, [r7, #20]
 80045a8:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8a7a      	ldrh	r2, [r7, #18]
 80045ae:	841a      	strh	r2, [r3, #32]
}
 80045b0:	f107 071c 	add.w	r7, r7, #28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop

080045bc <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80045c8:	78fb      	ldrb	r3, [r7, #3]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	889b      	ldrh	r3, [r3, #4]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d8:	b29a      	uxth	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	809a      	strh	r2, [r3, #4]
 80045de:	e007      	b.n	80045f0 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	889b      	ldrh	r3, [r3, #4]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	809a      	strh	r2, [r3, #4]
  }
}
 80045f0:	f107 070c 	add.w	r7, r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc80      	pop	{r7}
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop

080045fc <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	887a      	ldrh	r2, [r7, #2]
 800460c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8004610:	f107 070c 	add.w	r7, r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop

0800461c <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	8179      	strh	r1, [r7, #10]
 8004626:	813a      	strh	r2, [r7, #8]
 8004628:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	82fb      	strh	r3, [r7, #22]
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8c1b      	ldrh	r3, [r3, #32]
 800463a:	b29b      	uxth	r3, r3
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8b1b      	ldrh	r3, [r3, #24]
 800464a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8c1b      	ldrh	r3, [r3, #32]
 8004650:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8004652:	8afb      	ldrh	r3, [r7, #22]
 8004654:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8004658:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004660:	b29a      	uxth	r2, r3
 8004662:	893b      	ldrh	r3, [r7, #8]
 8004664:	4313      	orrs	r3, r2
 8004666:	b29a      	uxth	r2, r3
 8004668:	8afb      	ldrh	r3, [r7, #22]
 800466a:	4313      	orrs	r3, r2
 800466c:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800466e:	8abb      	ldrh	r3, [r7, #20]
 8004670:	f023 030a 	bic.w	r3, r3, #10
 8004674:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8004676:	897a      	ldrh	r2, [r7, #10]
 8004678:	8abb      	ldrh	r3, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	b29b      	uxth	r3, r3
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8afa      	ldrh	r2, [r7, #22]
 8004688:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8aba      	ldrh	r2, [r7, #20]
 800468e:	841a      	strh	r2, [r3, #32]
}
 8004690:	f107 071c 	add.w	r7, r7, #28
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop

0800469c <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	8179      	strh	r1, [r7, #10]
 80046a6:	813a      	strh	r2, [r7, #8]
 80046a8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	82fb      	strh	r3, [r7, #22]
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	82bb      	strh	r3, [r7, #20]
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8c1b      	ldrh	r3, [r3, #32]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f023 0310 	bic.w	r3, r3, #16
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8b1b      	ldrh	r3, [r3, #24]
 80046d0:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8c1b      	ldrh	r3, [r3, #32]
 80046d6:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80046d8:	897b      	ldrh	r3, [r7, #10]
 80046da:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80046de:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80046e0:	8afb      	ldrh	r3, [r7, #22]
 80046e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e6:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80046ea:	ea4f 5313 	mov.w	r3, r3, lsr #20
 80046ee:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80046f0:	88fb      	ldrh	r3, [r7, #6]
 80046f2:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	8afb      	ldrh	r3, [r7, #22]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80046fe:	893b      	ldrh	r3, [r7, #8]
 8004700:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004704:	b29a      	uxth	r2, r3
 8004706:	8afb      	ldrh	r3, [r7, #22]
 8004708:	4313      	orrs	r3, r2
 800470a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800470c:	8abb      	ldrh	r3, [r7, #20]
 800470e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004712:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8004714:	8a7a      	ldrh	r2, [r7, #18]
 8004716:	8abb      	ldrh	r3, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	b29b      	uxth	r3, r3
 800471c:	f043 0310 	orr.w	r3, r3, #16
 8004720:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8afa      	ldrh	r2, [r7, #22]
 8004726:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8aba      	ldrh	r2, [r7, #20]
 800472c:	841a      	strh	r2, [r3, #32]
}
 800472e:	f107 071c 	add.w	r7, r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr

08004738 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	8179      	strh	r1, [r7, #10]
 8004742:	813a      	strh	r2, [r7, #8]
 8004744:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	82fb      	strh	r3, [r7, #22]
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	82bb      	strh	r3, [r7, #20]
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8c1b      	ldrh	r3, [r3, #32]
 800475c:	b29b      	uxth	r3, r3
 800475e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8b9b      	ldrh	r3, [r3, #28]
 800476c:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8c1b      	ldrh	r3, [r3, #32]
 8004772:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8004774:	897b      	ldrh	r3, [r7, #10]
 8004776:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800477a:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 800477c:	8afb      	ldrh	r3, [r7, #22]
 800477e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8004782:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8004784:	88fb      	ldrh	r3, [r7, #6]
 8004786:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800478a:	b29a      	uxth	r2, r3
 800478c:	893b      	ldrh	r3, [r7, #8]
 800478e:	4313      	orrs	r3, r2
 8004790:	b29a      	uxth	r2, r3
 8004792:	8afb      	ldrh	r3, [r7, #22]
 8004794:	4313      	orrs	r3, r2
 8004796:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004798:	8abb      	ldrh	r3, [r7, #20]
 800479a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800479e:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80047a0:	8a7a      	ldrh	r2, [r7, #18]
 80047a2:	8abb      	ldrh	r3, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ac:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8afa      	ldrh	r2, [r7, #22]
 80047b2:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8aba      	ldrh	r2, [r7, #20]
 80047b8:	841a      	strh	r2, [r3, #32]
}
 80047ba:	f107 071c 	add.w	r7, r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	8179      	strh	r1, [r7, #10]
 80047ce:	813a      	strh	r2, [r7, #8]
 80047d0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	82fb      	strh	r3, [r7, #22]
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	82bb      	strh	r3, [r7, #20]
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8c1b      	ldrh	r3, [r3, #32]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8b9b      	ldrh	r3, [r3, #28]
 80047f8:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8c1b      	ldrh	r3, [r3, #32]
 80047fe:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8004800:	897b      	ldrh	r3, [r7, #10]
 8004802:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004806:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8004808:	8afb      	ldrh	r3, [r7, #22]
 800480a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480e:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8004812:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8004816:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8004818:	893b      	ldrh	r3, [r7, #8]
 800481a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800481e:	b29a      	uxth	r2, r3
 8004820:	8afb      	ldrh	r3, [r7, #22]
 8004822:	4313      	orrs	r3, r2
 8004824:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800482c:	b29a      	uxth	r2, r3
 800482e:	8afb      	ldrh	r3, [r7, #22]
 8004830:	4313      	orrs	r3, r2
 8004832:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004834:	8abb      	ldrh	r3, [r7, #20]
 8004836:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800483a:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800483e:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8004842:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8004844:	8a7a      	ldrh	r2, [r7, #18]
 8004846:	8abb      	ldrh	r3, [r7, #20]
 8004848:	4313      	orrs	r3, r2
 800484a:	b29b      	uxth	r3, r3
 800484c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004850:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8afa      	ldrh	r2, [r7, #22]
 8004856:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8aba      	ldrh	r2, [r7, #20]
 800485c:	841a      	strh	r2, [r3, #32]
}
 800485e:	f107 071c 	add.w	r7, r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004876:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800487a:	429a      	cmp	r2, r3
 800487c:	d10c      	bne.n	8004898 <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800487e:	f04f 0010 	mov.w	r0, #16
 8004882:	f04f 0101 	mov.w	r1, #1
 8004886:	f7fd ff7f 	bl	8002788 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800488a:	f04f 0010 	mov.w	r0, #16
 800488e:	f04f 0100 	mov.w	r1, #0
 8004892:	f7fd ff79 	bl	8002788 <RCC_APB2PeriphResetCmd>
 8004896:	e062      	b.n	800495e <USART_DeInit+0xf6>
  }
  else if (USARTx == USART2)
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800489e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d10c      	bne.n	80048c0 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80048a6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80048aa:	f04f 0101 	mov.w	r1, #1
 80048ae:	f7fd ff41 	bl	8002734 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80048b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80048b6:	f04f 0100 	mov.w	r1, #0
 80048ba:	f7fd ff3b 	bl	8002734 <RCC_APB1PeriphResetCmd>
 80048be:	e04e      	b.n	800495e <USART_DeInit+0xf6>
  }
  else if (USARTx == USART3)
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80048c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d10c      	bne.n	80048e8 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80048ce:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80048d2:	f04f 0101 	mov.w	r1, #1
 80048d6:	f7fd ff2d 	bl	8002734 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80048da:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80048de:	f04f 0100 	mov.w	r1, #0
 80048e2:	f7fd ff27 	bl	8002734 <RCC_APB1PeriphResetCmd>
 80048e6:	e03a      	b.n	800495e <USART_DeInit+0xf6>
  }    
  else if (USARTx == UART4)
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 80048ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d10c      	bne.n	8004910 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80048f6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80048fa:	f04f 0101 	mov.w	r1, #1
 80048fe:	f7fd ff19 	bl	8002734 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8004902:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004906:	f04f 0100 	mov.w	r1, #0
 800490a:	f7fd ff13 	bl	8002734 <RCC_APB1PeriphResetCmd>
 800490e:	e026      	b.n	800495e <USART_DeInit+0xf6>
  }
  else if (USARTx == UART5)
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8004916:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800491a:	429a      	cmp	r2, r3
 800491c:	d10c      	bne.n	8004938 <USART_DeInit+0xd0>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800491e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004922:	f04f 0101 	mov.w	r1, #1
 8004926:	f7fd ff05 	bl	8002734 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800492a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800492e:	f04f 0100 	mov.w	r1, #0
 8004932:	f7fd feff 	bl	8002734 <RCC_APB1PeriphResetCmd>
 8004936:	e012      	b.n	800495e <USART_DeInit+0xf6>
  }     
  else
  {
    if (USARTx == USART6)
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800493e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004942:	429a      	cmp	r2, r3
 8004944:	d10b      	bne.n	800495e <USART_DeInit+0xf6>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8004946:	f04f 0020 	mov.w	r0, #32
 800494a:	f04f 0101 	mov.w	r1, #1
 800494e:	f7fd ff1b 	bl	8002788 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8004952:	f04f 0020 	mov.w	r0, #32
 8004956:	f04f 0100 	mov.w	r1, #0
 800495a:	f7fd ff15 	bl	8002788 <RCC_APB2PeriphResetCmd>
    }
  }
}
 800495e:	f107 0708 	add.w	r7, r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop

08004968 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08a      	sub	sp, #40	; 0x28
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	8a1b      	ldrh	r3, [r3, #16]
 800498e:	b29b      	uxth	r3, r3
 8004990:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004998:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	88db      	ldrh	r3, [r3, #6]
 800499e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a0:	4313      	orrs	r3, r2
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	899b      	ldrh	r3, [r3, #12]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80049ba:	f023 030c 	bic.w	r3, r3, #12
 80049be:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	889a      	ldrh	r2, [r3, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	891b      	ldrh	r3, [r3, #8]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80049d0:	4313      	orrs	r3, r2
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d6:	4313      	orrs	r3, r2
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	b29a      	uxth	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8a9b      	ldrh	r3, [r3, #20]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	899b      	ldrh	r3, [r3, #12]
 80049f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f8:	4313      	orrs	r3, r2
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8004a04:	f107 0308 	add.w	r3, r7, #8
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fd fbf3 	bl	80021f4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a14:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d006      	beq.n	8004a2a <USART_Init+0xc2>
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004a22:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d102      	bne.n	8004a30 <USART_Init+0xc8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	623b      	str	r3, [r7, #32]
 8004a2e:	e001      	b.n	8004a34 <USART_Init+0xcc>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	899b      	ldrh	r3, [r3, #12]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	b21b      	sxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	da0f      	bge.n	8004a62 <USART_Init+0xfa>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8004a42:	6a3a      	ldr	r2, [r7, #32]
 8004a44:	4613      	mov	r3, r2
 8004a46:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004a4a:	189b      	adds	r3, r3, r2
 8004a4c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8004a50:	189a      	adds	r2, r3, r2
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5e:	61fb      	str	r3, [r7, #28]
 8004a60:	e00e      	b.n	8004a80 <USART_Init+0x118>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8004a62:	6a3a      	ldr	r2, [r7, #32]
 8004a64:	4613      	mov	r3, r2
 8004a66:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004a6a:	189b      	adds	r3, r3, r2
 8004a6c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8004a70:	189a      	adds	r2, r3, r2
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	f248 531f 	movw	r3, #34079	; 0x851f
 8004a86:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8004a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a8e:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8004a92:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8004a9e:	f04f 0264 	mov.w	r2, #100	; 0x64
 8004aa2:	fb02 f303 	mul.w	r3, r2, r3
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	899b      	ldrh	r3, [r3, #12]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	b21b      	sxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	da12      	bge.n	8004ae0 <USART_Init+0x178>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004ac0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ac4:	f248 531f 	movw	r3, #34079	; 0x851f
 8004ac8:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8004acc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad0:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ada:	4313      	orrs	r3, r2
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ade:	e011      	b.n	8004b04 <USART_Init+0x19c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004ae6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004aea:	f248 531f 	movw	r3, #34079	; 0x851f
 8004aee:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8004af2:	fba3 1302 	umull	r1, r3, r3, r2
 8004af6:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b00:	4313      	orrs	r3, r2
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	811a      	strh	r2, [r3, #8]
}
 8004b0c:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004b22:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f04f 020c 	mov.w	r2, #12
 8004b42:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	819a      	strh	r2, [r3, #12]
}
 8004b4c:	f107 070c 	add.w	r7, r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop

08004b58 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	8a1b      	ldrh	r3, [r3, #16]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b76:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	881a      	ldrh	r2, [r3, #0]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8004b80:	4313      	orrs	r3, r2
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	889b      	ldrh	r3, [r3, #4]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	88db      	ldrh	r3, [r3, #6]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	821a      	strh	r2, [r3, #16]
}
 8004ba2:	f107 0714 	add.w	r7, r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr

08004bac <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	80da      	strh	r2, [r3, #6]
}
 8004bd4:	f107 070c 	add.w	r7, r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bc80      	pop	{r7}
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop

08004be0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d008      	beq.n	8004c04 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	899b      	ldrh	r3, [r3, #12]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	819a      	strh	r2, [r3, #12]
 8004c02:	e007      	b.n	8004c14 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	899b      	ldrh	r3, [r3, #12]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	819a      	strh	r2, [r3, #12]
  }
}
 8004c14:	f107 070c 	add.w	r7, r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop

08004c20 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	8b1b      	ldrh	r3, [r3, #24]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8b1b      	ldrh	r3, [r3, #24]
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	4313      	orrs	r3, r2
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	831a      	strh	r2, [r3, #24]
}
 8004c4e:	f107 070c 	add.w	r7, r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr

08004c58 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	899b      	ldrh	r3, [r3, #12]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	819a      	strh	r2, [r3, #12]
 8004c7e:	e009      	b.n	8004c94 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	899b      	ldrh	r3, [r3, #12]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8004c8a:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	819a      	strh	r2, [r3, #12]
  }
}  
 8004c94:	f107 070c 	add.w	r7, r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop

08004ca0 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d008      	beq.n	8004cc4 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	8a9b      	ldrh	r3, [r3, #20]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	829a      	strh	r2, [r3, #20]
 8004cc2:	e007      	b.n	8004cd4 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	8a9b      	ldrh	r3, [r3, #20]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	829a      	strh	r2, [r3, #20]
  }
}
 8004cd4:	f107 070c 	add.w	r7, r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop

08004ce0 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8004cec:	887b      	ldrh	r3, [r7, #2]
 8004cee:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8004cf2:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	809a      	strh	r2, [r3, #4]
}
 8004cfc:	f107 070c 	add.w	r7, r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop

08004d08 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	889b      	ldrh	r3, [r3, #4]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8004d1a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8004d1e:	b29b      	uxth	r3, r3
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	f107 070c 	add.w	r7, r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8a1b      	ldrh	r3, [r3, #16]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f023 030f 	bic.w	r3, r3, #15
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8a1b      	ldrh	r3, [r3, #16]
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	78fb      	ldrb	r3, [r7, #3]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	4313      	orrs	r3, r2
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	821a      	strh	r2, [r3, #16]
}
 8004d5a:	f107 070c 	add.w	r7, r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr

08004d64 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d008      	beq.n	8004d88 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	899b      	ldrh	r3, [r3, #12]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	f043 0302 	orr.w	r3, r3, #2
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	819a      	strh	r2, [r3, #12]
 8004d86:	e007      	b.n	8004d98 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	899b      	ldrh	r3, [r3, #12]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f023 0302 	bic.w	r3, r3, #2
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	819a      	strh	r2, [r3, #12]
  }
}
 8004d98:	f107 070c 	add.w	r7, r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop

08004da4 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	899b      	ldrh	r3, [r3, #12]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	899b      	ldrh	r3, [r3, #12]
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	887b      	ldrh	r3, [r7, #2]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	819a      	strh	r2, [r3, #12]
}
 8004dd0:	f107 070c 	add.w	r7, r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop

08004ddc <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	8a1b      	ldrh	r3, [r3, #16]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f023 0320 	bic.w	r3, r3, #32
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8a1b      	ldrh	r3, [r3, #16]
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	887b      	ldrh	r3, [r7, #2]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	821a      	strh	r2, [r3, #16]
}
 8004e08:	f107 070c 	add.w	r7, r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop

08004e14 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	8a1b      	ldrh	r3, [r3, #16]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	821a      	strh	r2, [r3, #16]
 8004e36:	e007      	b.n	8004e48 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8a1b      	ldrh	r3, [r3, #16]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	821a      	strh	r2, [r3, #16]
  }
}
 8004e48:	f107 070c 	add.w	r7, r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc80      	pop	{r7}
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop

08004e54 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	899b      	ldrh	r3, [r3, #12]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	819a      	strh	r2, [r3, #12]
}
 8004e6c:	f107 070c 	add.w	r7, r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop

08004e78 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	460b      	mov	r3, r1
 8004e82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d008      	beq.n	8004e9c <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	8a9b      	ldrh	r3, [r3, #20]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f043 0308 	orr.w	r3, r3, #8
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	829a      	strh	r2, [r3, #20]
 8004e9a:	e007      	b.n	8004eac <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8a9b      	ldrh	r3, [r3, #20]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	f023 0308 	bic.w	r3, r3, #8
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	829a      	strh	r2, [r3, #20]
  }
}
 8004eac:	f107 070c 	add.w	r7, r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop

08004eb8 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8b1b      	ldrh	r3, [r3, #24]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	8b1b      	ldrh	r3, [r3, #24]
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	831a      	strh	r2, [r3, #24]
}
 8004eea:	f107 070c 	add.w	r7, r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr

08004ef4 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	8a9b      	ldrh	r3, [r3, #20]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	f043 0320 	orr.w	r3, r3, #32
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	829a      	strh	r2, [r3, #20]
 8004f16:	e007      	b.n	8004f28 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8a9b      	ldrh	r3, [r3, #20]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	f023 0320 	bic.w	r3, r3, #32
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	829a      	strh	r2, [r3, #20]
  }
}
 8004f28:	f107 070c 	add.w	r7, r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bc80      	pop	{r7}
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop

08004f34 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d008      	beq.n	8004f58 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	8a9b      	ldrh	r3, [r3, #20]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f043 0310 	orr.w	r3, r3, #16
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	829a      	strh	r2, [r3, #20]
 8004f56:	e007      	b.n	8004f68 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8a9b      	ldrh	r3, [r3, #20]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f023 0310 	bic.w	r3, r3, #16
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	829a      	strh	r2, [r3, #20]
  }
}
 8004f68:	f107 070c 	add.w	r7, r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bc80      	pop	{r7}
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop

08004f74 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	8a9b      	ldrh	r3, [r3, #20]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	f023 0304 	bic.w	r3, r3, #4
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	8a9b      	ldrh	r3, [r3, #20]
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	887b      	ldrh	r3, [r7, #2]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	829a      	strh	r2, [r3, #20]
}
 8004fa0:	f107 070c 	add.w	r7, r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop

08004fac <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d008      	beq.n	8004fd0 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	8a9b      	ldrh	r3, [r3, #20]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	f043 0302 	orr.w	r3, r3, #2
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	829a      	strh	r2, [r3, #20]
 8004fce:	e007      	b.n	8004fe0 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	8a9b      	ldrh	r3, [r3, #20]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	f023 0302 	bic.w	r3, r3, #2
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	829a      	strh	r2, [r3, #20]
  }
}
 8004fe0:	f107 070c 	add.w	r7, r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop

08004fec <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	460a      	mov	r2, r1
 8004ff8:	807a      	strh	r2, [r7, #2]
 8004ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8004ffc:	787b      	ldrb	r3, [r7, #1]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d008      	beq.n	8005014 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	8a9b      	ldrh	r3, [r3, #20]
 8005006:	b29a      	uxth	r2, r3
 8005008:	887b      	ldrh	r3, [r7, #2]
 800500a:	4313      	orrs	r3, r2
 800500c:	b29a      	uxth	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	829a      	strh	r2, [r3, #20]
 8005012:	e00a      	b.n	800502a <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8a9b      	ldrh	r3, [r3, #20]
 8005018:	b29a      	uxth	r2, r3
 800501a:	887b      	ldrh	r3, [r7, #2]
 800501c:	ea6f 0303 	mvn.w	r3, r3
 8005020:	b29b      	uxth	r3, r3
 8005022:	4013      	ands	r3, r2
 8005024:	b29a      	uxth	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	829a      	strh	r2, [r3, #20]
  }
}
 800502a:	f107 070c 	add.w	r7, r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr

08005034 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	4613      	mov	r3, r2
 800503e:	460a      	mov	r2, r1
 8005040:	807a      	strh	r2, [r7, #2]
 8005042:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	f04f 0300 	mov.w	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8005060:	887b      	ldrh	r3, [r7, #2]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005068:	b2db      	uxtb	r3, r3
 800506a:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800506c:	887b      	ldrh	r3, [r7, #2]
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f04f 0201 	mov.w	r2, #1
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d104      	bne.n	8005090 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f103 030c 	add.w	r3, r3, #12
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	e00b      	b.n	80050a8 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	2b02      	cmp	r3, #2
 8005094:	d104      	bne.n	80050a0 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f103 0310 	add.w	r3, r3, #16
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	e003      	b.n	80050a8 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f103 0314 	add.w	r3, r3, #20
 80050a6:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80050a8:	787b      	ldrb	r3, [r7, #1]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d006      	beq.n	80050bc <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	6811      	ldr	r1, [r2, #0]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	e007      	b.n	80050cc <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	6811      	ldr	r1, [r2, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	ea6f 0202 	mvn.w	r2, r2
 80050c8:	400a      	ands	r2, r1
 80050ca:	601a      	str	r2, [r3, #0]
  }
}
 80050cc:	f107 071c 	add.w	r7, r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc80      	pop	{r7}
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop

080050d8 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	887b      	ldrh	r3, [r7, #2]
 80050f2:	4013      	ands	r3, r2
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 80050fa:	f04f 0301 	mov.w	r3, #1
 80050fe:	73fb      	strb	r3, [r7, #15]
 8005100:	e002      	b.n	8005108 <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
}
 800510a:	4618      	mov	r0, r3
 800510c:	f107 0714 	add.w	r7, r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop

08005118 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8005124:	887b      	ldrh	r3, [r7, #2]
 8005126:	ea6f 0303 	mvn.w	r3, r3
 800512a:	b29a      	uxth	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	801a      	strh	r2, [r3, #0]
}
 8005130:	f107 070c 	add.w	r7, r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	bc80      	pop	{r7}
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop

0800513c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8005160:	887b      	ldrh	r3, [r7, #2]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005168:	b2db      	uxtb	r3, r3
 800516a:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800516c:	887b      	ldrh	r3, [r7, #2]
 800516e:	f003 031f 	and.w	r3, r3, #31
 8005172:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f04f 0201 	mov.w	r2, #1
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d106      	bne.n	8005194 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	899b      	ldrh	r3, [r3, #12]
 800518a:	b29b      	uxth	r3, r3
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4013      	ands	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	e00f      	b.n	80051b4 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d106      	bne.n	80051a8 <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8a1b      	ldrh	r3, [r3, #16]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	4013      	ands	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	e005      	b.n	80051b4 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	8a9b      	ldrh	r3, [r3, #20]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4013      	ands	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80051b4:	887b      	ldrh	r3, [r7, #2]
 80051b6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f04f 0201 	mov.w	r2, #1
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4013      	ands	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d006      	beq.n	80051ea <USART_GetITStatus+0xae>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
 80051e2:	f04f 0301 	mov.w	r3, #1
 80051e6:	74fb      	strb	r3, [r7, #19]
 80051e8:	e002      	b.n	80051f0 <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	f107 071c 	add.w	r7, r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc80      	pop	{r7}
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop

08005200 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	81fb      	strh	r3, [r7, #14]
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8005218:	887b      	ldrh	r3, [r7, #2]
 800521a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800521e:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8005220:	89fb      	ldrh	r3, [r7, #14]
 8005222:	f04f 0201 	mov.w	r2, #1
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 800522c:	89bb      	ldrh	r3, [r7, #12]
 800522e:	ea6f 0303 	mvn.w	r3, r3
 8005232:	b29a      	uxth	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	801a      	strh	r2, [r3, #0]
}
 8005238:	f107 0714 	add.w	r7, r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop

08005244 <main>:
  * @brief  Main program.
  * @param  None
  * @retval : None
  */
int main(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0

  // Configure board specific setting
//  BoardInit();
  // Setting up COM port for Print function
//  COM_Configuration();
	usart_begin(USART3, 19200);
 8005248:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800524c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005250:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8005254:	f7fb faa2 	bl	800079c <usart_begin>

  //Send welcome messages
  usart_print(USART3, (char *) Welcome_Message);
 8005258:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800525c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005260:	f645 2150 	movw	r1, #23120	; 0x5a50
 8005264:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005268:	f7fb fbd8 	bl	8000a1c <usart_print>

  delay_ms(40);
 800526c:	f04f 0028 	mov.w	r0, #40	; 0x28
 8005270:	f7fa ffce 	bl	8000210 <delay_ms>

  I2C_Configuration();
 8005274:	f000 f880 	bl	8005378 <I2C_Configuration>

  //Function Set
  ST7032i_Command_Write(0b00111000);
 8005278:	f04f 0038 	mov.w	r0, #56	; 0x38
 800527c:	f000 f8e8 	bl	8005450 <ST7032i_Command_Write>

  delay_us(27);
 8005280:	f04f 001b 	mov.w	r0, #27
 8005284:	f7fa ff80 	bl	8000188 <delay_us>

  //Function Set
  ST7032i_Command_Write(0b00111001);
 8005288:	f04f 0039 	mov.w	r0, #57	; 0x39
 800528c:	f000 f8e0 	bl	8005450 <ST7032i_Command_Write>

  delay_us(27);
 8005290:	f04f 001b 	mov.w	r0, #27
 8005294:	f7fa ff78 	bl	8000188 <delay_us>

  //Bias and OSC frequency
  ST7032i_Command_Write(0b00010100);
 8005298:	f04f 0014 	mov.w	r0, #20
 800529c:	f000 f8d8 	bl	8005450 <ST7032i_Command_Write>

  delay_us(27);
 80052a0:	f04f 001b 	mov.w	r0, #27
 80052a4:	f7fa ff70 	bl	8000188 <delay_us>

  //Contrast set
  ST7032i_Command_Write(0b01110000);
 80052a8:	f04f 0070 	mov.w	r0, #112	; 0x70
 80052ac:	f000 f8d0 	bl	8005450 <ST7032i_Command_Write>

  delay_us(27);
 80052b0:	f04f 001b 	mov.w	r0, #27
 80052b4:	f7fa ff68 	bl	8000188 <delay_us>

  //Power/Icon/Contrast control
  ST7032i_Command_Write(0b01010110);
 80052b8:	f04f 0056 	mov.w	r0, #86	; 0x56
 80052bc:	f000 f8c8 	bl	8005450 <ST7032i_Command_Write>

  delay_us(27);
 80052c0:	f04f 001b 	mov.w	r0, #27
 80052c4:	f7fa ff60 	bl	8000188 <delay_us>

  //Follower control
  ST7032i_Command_Write(0b01101100);
 80052c8:	f04f 006c 	mov.w	r0, #108	; 0x6c
 80052cc:	f000 f8c0 	bl	8005450 <ST7032i_Command_Write>

  delay_ms(200);
 80052d0:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 80052d4:	f7fa ff9c 	bl	8000210 <delay_ms>

  //Function Set
  ST7032i_Command_Write(0b00111000);
 80052d8:	f04f 0038 	mov.w	r0, #56	; 0x38
 80052dc:	f000 f8b8 	bl	8005450 <ST7032i_Command_Write>

  //Display control : on
  ST7032i_Command_Write(0b00001100);
 80052e0:	f04f 000c 	mov.w	r0, #12
 80052e4:	f000 f8b4 	bl	8005450 <ST7032i_Command_Write>

  delay_us(27);
 80052e8:	f04f 001b 	mov.w	r0, #27
 80052ec:	f7fa ff4c 	bl	8000188 <delay_us>

  //Clear
  ST7032i_Command_Write(0b00000001);
 80052f0:	f04f 0001 	mov.w	r0, #1
 80052f4:	f000 f8ac 	bl	8005450 <ST7032i_Command_Write>

  delay_ms(2);
 80052f8:	f04f 0002 	mov.w	r0, #2
 80052fc:	f7fa ff88 	bl	8000210 <delay_ms>

  ST7032i_Data_Write('H');
 8005300:	f04f 0048 	mov.w	r0, #72	; 0x48
 8005304:	f000 f910 	bl	8005528 <ST7032i_Data_Write>
  ST7032i_Data_Write('e');
 8005308:	f04f 0065 	mov.w	r0, #101	; 0x65
 800530c:	f000 f90c 	bl	8005528 <ST7032i_Data_Write>
  ST7032i_Data_Write('l');
 8005310:	f04f 006c 	mov.w	r0, #108	; 0x6c
 8005314:	f000 f908 	bl	8005528 <ST7032i_Data_Write>
  ST7032i_Data_Write('l');
 8005318:	f04f 006c 	mov.w	r0, #108	; 0x6c
 800531c:	f000 f904 	bl	8005528 <ST7032i_Data_Write>
  ST7032i_Data_Write('o');
 8005320:	f04f 006f 	mov.w	r0, #111	; 0x6f
 8005324:	f000 f900 	bl	8005528 <ST7032i_Data_Write>

  ST7032i_Command_Write(0b10000000 | 0x40);
 8005328:	f04f 00c0 	mov.w	r0, #192	; 0xc0
 800532c:	f000 f890 	bl	8005450 <ST7032i_Command_Write>

  ST7032i_Data_Write('W');
 8005330:	f04f 0057 	mov.w	r0, #87	; 0x57
 8005334:	f000 f8f8 	bl	8005528 <ST7032i_Data_Write>
  ST7032i_Data_Write('o');
 8005338:	f04f 006f 	mov.w	r0, #111	; 0x6f
 800533c:	f000 f8f4 	bl	8005528 <ST7032i_Data_Write>
  ST7032i_Data_Write('r');
 8005340:	f04f 0072 	mov.w	r0, #114	; 0x72
 8005344:	f000 f8f0 	bl	8005528 <ST7032i_Data_Write>
  ST7032i_Data_Write('l');
 8005348:	f04f 006c 	mov.w	r0, #108	; 0x6c
 800534c:	f000 f8ec 	bl	8005528 <ST7032i_Data_Write>
  ST7032i_Data_Write('d');
 8005350:	f04f 0064 	mov.w	r0, #100	; 0x64
 8005354:	f000 f8e8 	bl	8005528 <ST7032i_Data_Write>
  ST7032i_Data_Write('!');
 8005358:	f04f 0021 	mov.w	r0, #33	; 0x21
 800535c:	f000 f8e4 	bl	8005528 <ST7032i_Data_Write>

  usart_print(USART3, "Done! Confirm a message is on LCD.");
 8005360:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8005364:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005368:	f645 21e0 	movw	r1, #23264	; 0x5ae0
 800536c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005370:	f7fb fb54 	bl	8000a1c <usart_print>

  while(1){}
 8005374:	e7fe      	b.n	8005374 <main+0x130>
 8005376:	bf00      	nop

08005378 <I2C_Configuration>:
  * @brief  I2C Configuration
  * @param  None
  * @retval None
  */
void I2C_Configuration(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;
  I2C_InitTypeDef  I2C_InitStructure;

  /* I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 800537e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005382:	f04f 0101 	mov.w	r1, #1
 8005386:	f7fd f903 	bl	8002590 <RCC_APB1PeriphClockCmd>
  //Reset the Peripheral
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800538a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800538e:	f04f 0101 	mov.w	r1, #1
 8005392:	f7fd f9cf 	bl	8002734 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 8005396:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800539a:	f04f 0100 	mov.w	r1, #0
 800539e:	f7fd f9c9 	bl	8002734 <RCC_APB1PeriphResetCmd>

  /* GPIO Periph clock enable */
//  RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80053a2:	f04f 0002 	mov.w	r0, #2
 80053a6:	f04f 0101 	mov.w	r1, #1
 80053aa:	f7fd f873 	bl	8002494 <RCC_AHB1PeriphClockCmd>

  /* Configure I2C pins: SCL 6 and SDA 7 */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_7;
 80053ae:	f04f 03c0 	mov.w	r3, #192	; 0xc0
 80053b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80053b4:	f04f 0302 	mov.w	r3, #2
 80053b8:	757b      	strb	r3, [r7, #21]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80053ba:	f04f 0302 	mov.w	r3, #2
 80053be:	753b      	strb	r3, [r7, #20]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	75fb      	strb	r3, [r7, #23]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80053c6:	f107 0310 	add.w	r3, r7, #16
 80053ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80053ce:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80053d2:	4619      	mov	r1, r3
 80053d4:	f7fb fdde 	bl	8000f94 <GPIO_Init>

  //Connect GPIO pins to peripheral
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 80053d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80053dc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80053e0:	f04f 0106 	mov.w	r1, #6
 80053e4:	f04f 0204 	mov.w	r2, #4
 80053e8:	f7fb ff62 	bl	80012b0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1);
 80053ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80053f0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80053f4:	f04f 0107 	mov.w	r1, #7
 80053f8:	f04f 0204 	mov.w	r2, #4
 80053fc:	f7fb ff58 	bl	80012b0 <GPIO_PinAFConfig>

  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8005406:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800540a:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x00; //We are the master. We don't need this
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8005412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005416:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8005418:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800541c:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = 400000; //I2C_CLOCK;
 800541e:	f44f 53d4 	mov.w	r3, #6784	; 0x1a80
 8005422:	f2c0 0306 	movt	r3, #6
 8005426:	603b      	str	r3, [r7, #0]

  /* Apply I2C configuration after enabling it */
  I2C_Init(I2C1, &I2C_InitStructure);
 8005428:	463b      	mov	r3, r7
 800542a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800542e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005432:	4619      	mov	r1, r3
 8005434:	f7fb ffd4 	bl	80013e0 <I2C_Init>
  /* I2C Peripheral Enable */
  I2C_Cmd(I2C1, ENABLE);
 8005438:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800543c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005440:	f04f 0101 	mov.w	r1, #1
 8005444:	f7fc f8c4 	bl	80015d0 <I2C_Cmd>
}
 8005448:	f107 0718 	add.w	r7, r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <ST7032i_Command_Write>:
  * @brief  Write Command to ST7032i
  * @param  Data : Command Data
  * @retval None
  */
void ST7032i_Command_Write(uint8_t Data)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	71fb      	strb	r3, [r7, #7]

  /* Send STRAT condition */
  I2C_GenerateSTART(I2C1, ENABLE);
 800545a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800545e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005462:	f04f 0101 	mov.w	r1, #1
 8005466:	f7fc f8d3 	bl	8001610 <I2C_GenerateSTART>
  /* Test on EV5 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 800546a:	bf00      	nop
 800546c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8005470:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005474:	f04f 0101 	mov.w	r1, #1
 8005478:	f2c0 0103 	movt	r1, #3
 800547c:	f7fc fb78 	bl	8001b70 <I2C_CheckEvent>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f2      	beq.n	800546c <ST7032i_Command_Write+0x1c>
  /* Send EEPROM address for write */
  I2C_Send7bitAddress(I2C1, ST7032I_ADDR << 1, I2C_Direction_Transmitter);
 8005486:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800548a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800548e:	f04f 017c 	mov.w	r1, #124	; 0x7c
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f7fc f8fb 	bl	8001690 <I2C_Send7bitAddress>
  /* Test on EV6 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 800549a:	bf00      	nop
 800549c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80054a0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80054a4:	f04f 0182 	mov.w	r1, #130	; 0x82
 80054a8:	f2c0 0107 	movt	r1, #7
 80054ac:	f7fc fb60 	bl	8001b70 <I2C_CheckEvent>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0f2      	beq.n	800549c <ST7032i_Command_Write+0x4c>
  /* Send the EEPROM's internal address to write to : MSB of the address first */
  I2C_SendData(I2C1, 0b00000000);
 80054b6:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80054ba:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80054be:	f04f 0100 	mov.w	r1, #0
 80054c2:	f7fc fa49 	bl	8001958 <I2C_SendData>
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80054c6:	bf00      	nop
 80054c8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80054cc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80054d0:	f04f 0184 	mov.w	r1, #132	; 0x84
 80054d4:	f2c0 0107 	movt	r1, #7
 80054d8:	f7fc fb4a 	bl	8001b70 <I2C_CheckEvent>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0f2      	beq.n	80054c8 <ST7032i_Command_Write+0x78>
  /* Send the EEPROM's internal address to write to : MSB of the address first */
  I2C_SendData(I2C1, Data);
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80054e8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80054ec:	4619      	mov	r1, r3
 80054ee:	f7fc fa33 	bl	8001958 <I2C_SendData>
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80054f2:	bf00      	nop
 80054f4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80054f8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80054fc:	f04f 0184 	mov.w	r1, #132	; 0x84
 8005500:	f2c0 0107 	movt	r1, #7
 8005504:	f7fc fb34 	bl	8001b70 <I2C_CheckEvent>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0f2      	beq.n	80054f4 <ST7032i_Command_Write+0xa4>
  /* Send STOP condition */
  I2C_GenerateSTOP(I2C1, ENABLE);
 800550e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8005512:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005516:	f04f 0101 	mov.w	r1, #1
 800551a:	f7fc f899 	bl	8001650 <I2C_GenerateSTOP>
}
 800551e:	f107 0708 	add.w	r7, r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop

08005528 <ST7032i_Data_Write>:
  * @brief  Write Data to ST7032i
  * @param  Data : "Data" Data
  * @retval None
  */
void ST7032i_Data_Write(uint8_t Data)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	4603      	mov	r3, r0
 8005530:	71fb      	strb	r3, [r7, #7]

  /* Send STRAT condition */
  I2C_GenerateSTART(I2C1, ENABLE);
 8005532:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8005536:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800553a:	f04f 0101 	mov.w	r1, #1
 800553e:	f7fc f867 	bl	8001610 <I2C_GenerateSTART>
  /* Test on EV5 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 8005542:	bf00      	nop
 8005544:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8005548:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800554c:	f04f 0101 	mov.w	r1, #1
 8005550:	f2c0 0103 	movt	r1, #3
 8005554:	f7fc fb0c 	bl	8001b70 <I2C_CheckEvent>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f2      	beq.n	8005544 <ST7032i_Data_Write+0x1c>
  /* Send EEPROM address for write */
  I2C_Send7bitAddress(I2C1, ST7032I_ADDR << 1, I2C_Direction_Transmitter);
 800555e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8005562:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005566:	f04f 017c 	mov.w	r1, #124	; 0x7c
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	f7fc f88f 	bl	8001690 <I2C_Send7bitAddress>
  /* Test on EV6 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8005572:	bf00      	nop
 8005574:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8005578:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800557c:	f04f 0182 	mov.w	r1, #130	; 0x82
 8005580:	f2c0 0107 	movt	r1, #7
 8005584:	f7fc faf4 	bl	8001b70 <I2C_CheckEvent>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f2      	beq.n	8005574 <ST7032i_Data_Write+0x4c>
  /* Send the EEPROM's internal address to write to : MSB of the address first */
  I2C_SendData(I2C1, 0b01000000);
 800558e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8005592:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005596:	f04f 0140 	mov.w	r1, #64	; 0x40
 800559a:	f7fc f9dd 	bl	8001958 <I2C_SendData>
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 800559e:	bf00      	nop
 80055a0:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80055a4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80055a8:	f04f 0184 	mov.w	r1, #132	; 0x84
 80055ac:	f2c0 0107 	movt	r1, #7
 80055b0:	f7fc fade 	bl	8001b70 <I2C_CheckEvent>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0f2      	beq.n	80055a0 <ST7032i_Data_Write+0x78>
  /* Send the EEPROM's internal address to write to : MSB of the address first */
  I2C_SendData(I2C1, Data);
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80055c0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80055c4:	4619      	mov	r1, r3
 80055c6:	f7fc f9c7 	bl	8001958 <I2C_SendData>
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80055ca:	bf00      	nop
 80055cc:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80055d0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80055d4:	f04f 0184 	mov.w	r1, #132	; 0x84
 80055d8:	f2c0 0107 	movt	r1, #7
 80055dc:	f7fc fac8 	bl	8001b70 <I2C_CheckEvent>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0f2      	beq.n	80055cc <ST7032i_Data_Write+0xa4>
  /* Send STOP condition */
  I2C_GenerateSTOP(I2C1, ENABLE);
 80055e6:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80055ea:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80055ee:	f04f 0101 	mov.w	r1, #1
 80055f2:	f7fc f82d 	bl	8001650 <I2C_GenerateSTOP>
}
 80055f6:	f107 0708 	add.w	r7, r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	08005b04 	.word	0x08005b04
 8005604:	20000000 	.word	0x20000000
 8005608:	200000ec 	.word	0x200000ec
 800560c:	200000ec 	.word	0x200000ec
 8005610:	20000718 	.word	0x20000718

08005614 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
}
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop

08005620 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8005624:	e7fe      	b.n	8005624 <HardFault_Handler+0x4>
 8005626:	bf00      	nop

08005628 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800562c:	e7fe      	b.n	800562c <MemManage_Handler+0x4>
 800562e:	bf00      	nop

08005630 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8005634:	e7fe      	b.n	8005634 <BusFault_Handler+0x4>
 8005636:	bf00      	nop

08005638 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 800563c:	e7fe      	b.n	800563c <UsageFault_Handler+0x4>
 800563e:	bf00      	nop

08005640 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
}
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop

0800564c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
}
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop

08005658 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
}
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop

08005664 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005668:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800566c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005670:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005674:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005678:	6812      	ldr	r2, [r2, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005680:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005684:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800568e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005692:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005696:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800569a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80056a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80056a8:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80056aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80056ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80056b2:	f243 0210 	movw	r2, #12304	; 0x3010
 80056b6:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80056ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80056bc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80056c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80056c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80056c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80056cc:	6812      	ldr	r2, [r2, #0]
 80056ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056d2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80056d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80056d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80056e2:	f000 f8c1 	bl	8005868 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80056e6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80056ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80056ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056f2:	609a      	str	r2, [r3, #8]
#endif
}
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop

080056f8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80056fe:	f04f 0300 	mov.w	r3, #0
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	617b      	str	r3, [r7, #20]
 800570a:	f04f 0302 	mov.w	r3, #2
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	60bb      	str	r3, [r7, #8]
 8005716:	f04f 0302 	mov.w	r3, #2
 800571a:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800571c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005720:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f003 030c 	and.w	r3, r3, #12
 800572a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b04      	cmp	r3, #4
 8005730:	d00d      	beq.n	800574e <SystemCoreClockUpdate+0x56>
 8005732:	2b08      	cmp	r3, #8
 8005734:	d015      	beq.n	8005762 <SystemCoreClockUpdate+0x6a>
 8005736:	2b00      	cmp	r3, #0
 8005738:	d169      	bne.n	800580e <SystemCoreClockUpdate+0x116>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800573a:	f240 03d8 	movw	r3, #216	; 0xd8
 800573e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005742:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8005746:	f2c0 02f4 	movt	r2, #244	; 0xf4
 800574a:	601a      	str	r2, [r3, #0]
      break;
 800574c:	e069      	b.n	8005822 <SystemCoreClockUpdate+0x12a>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800574e:	f240 03d8 	movw	r3, #216	; 0xd8
 8005752:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005756:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 800575a:	f2c0 027a 	movt	r2, #122	; 0x7a
 800575e:	601a      	str	r2, [r3, #0]
      break;
 8005760:	e05f      	b.n	8005822 <SystemCoreClockUpdate+0x12a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005762:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005766:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005770:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8005774:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005776:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800577a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005784:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d014      	beq.n	80057b6 <SystemCoreClockUpdate+0xbe>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800578c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8005790:	f2c0 037a 	movt	r3, #122	; 0x7a
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	fbb3 f2f2 	udiv	r2, r3, r2
 800579a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800579e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057a2:	6859      	ldr	r1, [r3, #4]
 80057a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057a8:	400b      	ands	r3, r1
 80057aa:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80057ae:	fb03 f302 	mul.w	r3, r3, r2
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	e013      	b.n	80057de <SystemCoreClockUpdate+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80057b6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80057ba:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80057c4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80057c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057cc:	6859      	ldr	r1, [r3, #4]
 80057ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057d2:	400b      	ands	r3, r1
 80057d4:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80057d8:	fb03 f302 	mul.w	r3, r3, r2
 80057dc:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80057de:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80057e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057ec:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80057f0:	f103 0301 	add.w	r3, r3, #1
 80057f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80057f8:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005802:	f240 03d8 	movw	r3, #216	; 0xd8
 8005806:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800580a:	601a      	str	r2, [r3, #0]
      break;
 800580c:	e009      	b.n	8005822 <SystemCoreClockUpdate+0x12a>
    default:
      SystemCoreClock = HSI_VALUE;
 800580e:	f240 03d8 	movw	r3, #216	; 0xd8
 8005812:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005816:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 800581a:	f2c0 02f4 	movt	r2, #244	; 0xf4
 800581e:	601a      	str	r2, [r3, #0]
      break;
 8005820:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8005822:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005826:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005830:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8005834:	f240 03dc 	movw	r3, #220	; 0xdc
 8005838:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800583c:	5c9b      	ldrb	r3, [r3, r2]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8005842:	f240 03d8 	movw	r3, #216	; 0xd8
 8005846:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	fa22 f203 	lsr.w	r2, r2, r3
 8005852:	f240 03d8 	movw	r3, #216	; 0xd8
 8005856:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800585a:	601a      	str	r2, [r3, #0]
}
 800585c:	f107 071c 	add.w	r7, r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	bc80      	pop	{r7}
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop

08005868 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	607b      	str	r3, [r7, #4]
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800587a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800587e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005882:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005886:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800588a:	6812      	ldr	r2, [r2, #0]
 800588c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005890:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8005892:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005896:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a0:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f103 0301 	add.w	r3, r3, #1
 80058a8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d103      	bne.n	80058b8 <SetSysClock+0x50>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80058b6:	d1ec      	bne.n	8005892 <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80058b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80058bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 80058ca:	f04f 0301 	mov.w	r3, #1
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	e002      	b.n	80058d8 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80058d2:	f04f 0300 	mov.w	r3, #0
 80058d6:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	f040 8082 	bne.w	80059e4 <SetSysClock+0x17c>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80058e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80058e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80058e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80058ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80058f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80058f6:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80058f8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80058fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005900:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8005904:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005908:	6812      	ldr	r2, [r2, #0]
 800590a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800590e:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8005910:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005914:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005918:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800591c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005920:	6892      	ldr	r2, [r2, #8]
 8005922:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8005924:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005928:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800592c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005930:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005934:	6892      	ldr	r2, [r2, #8]
 8005936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800593a:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800593c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005940:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005944:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005948:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800594c:	6892      	ldr	r2, [r2, #8]
 800594e:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8005952:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8005954:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005958:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800595c:	f245 4219 	movw	r2, #21529	; 0x5419
 8005960:	f2c0 7240 	movt	r2, #1856	; 0x740
 8005964:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8005966:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800596a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800596e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005972:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005976:	6812      	ldr	r2, [r2, #0]
 8005978:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800597c:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800597e:	bf00      	nop
 8005980:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005984:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0f6      	beq.n	8005980 <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8005992:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005996:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800599a:	f240 6205 	movw	r2, #1541	; 0x605
 800599e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80059a0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80059a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80059ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80059b0:	6892      	ldr	r2, [r2, #8]
 80059b2:	f022 0203 	bic.w	r2, r2, #3
 80059b6:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80059b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80059bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80059c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80059c8:	6892      	ldr	r2, [r2, #8]
 80059ca:	f042 0202 	orr.w	r2, r2, #2
 80059ce:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80059d0:	bf00      	nop
 80059d2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80059d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f003 030c 	and.w	r3, r3, #12
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d1f6      	bne.n	80059d2 <SetSysClock+0x16a>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80059e4:	f107 070c 	add.w	r7, r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bc80      	pop	{r7}
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop

080059f0 <Reset_Handler>:
 80059f0:	2100      	movs	r1, #0
 80059f2:	e003      	b.n	80059fc <LoopCopyDataInit>

080059f4 <CopyDataInit>:
 80059f4:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <LoopFillZerobss+0x10>)
 80059f6:	585b      	ldr	r3, [r3, r1]
 80059f8:	5043      	str	r3, [r0, r1]
 80059fa:	3104      	adds	r1, #4

080059fc <LoopCopyDataInit>:
 80059fc:	4809      	ldr	r0, [pc, #36]	; (8005a24 <LoopFillZerobss+0x14>)
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <LoopFillZerobss+0x18>)
 8005a00:	1842      	adds	r2, r0, r1
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d3f6      	bcc.n	80059f4 <CopyDataInit>
 8005a06:	4a09      	ldr	r2, [pc, #36]	; (8005a2c <LoopFillZerobss+0x1c>)
 8005a08:	e002      	b.n	8005a10 <LoopFillZerobss>

08005a0a <FillZerobss>:
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f842 3b04 	str.w	r3, [r2], #4

08005a10 <LoopFillZerobss>:
 8005a10:	4b07      	ldr	r3, [pc, #28]	; (8005a30 <LoopFillZerobss+0x20>)
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d3f9      	bcc.n	8005a0a <FillZerobss>
 8005a16:	f7ff fe25 	bl	8005664 <SystemInit>
 8005a1a:	f7ff fc13 	bl	8005244 <main>
 8005a1e:	4770      	bx	lr
 8005a20:	08005b04 	.word	0x08005b04
 8005a24:	20000000 	.word	0x20000000
 8005a28:	200000ec 	.word	0x200000ec
 8005a2c:	200000ec 	.word	0x200000ec
 8005a30:	20000718 	.word	0x20000718

08005a34 <ADC_IRQHandler>:
 8005a34:	e7fe      	b.n	8005a34 <ADC_IRQHandler>
	...

08005a38 <USARTPort>:
 8005a38:	1000 4001 4400 4000 4800 4000 4c00 4000     ...@.D.@.H.@.L.@
 8005a48:	5000 4000 1400 4001                         .P.@...@

08005a50 <Welcome_Message>:
 8005a50:	0a0d 6557 636c 6d6f 7465 7420 206f 6874     ..Welcomet to th
 8005a60:	2065 6f43 7472 7865 4d2d 2f33 5453 334d     e Cortex-M3/STM3
 8005a70:	2032 6f57 6c72 2164 0a0d 7845 6170 646e     2 World!..Expand
 8005a80:	7920 756f 2072 7263 6165 6974 6976 7974      your creativity
 8005a90:	6120 646e 6520 6a6e 796f 6d20 6b61 6e69      and enjoy makin
 8005aa0:	2067 6874 6e69 7367 0d2e 0d0a 490a 696e     g things.....Ini
 8005ab0:	6974 6c61 7a69 2065 6e61 2064 7570 2074     tialize and put 
 8005ac0:	6863 7261 6361 6574 2072 6e6f 5320 3754     character on ST7
 8005ad0:	3330 6932 4c20 4443 0d2e 0d0a 000a 0000     032i LCD........
 8005ae0:	6f44 656e 2021 6f43 666e 7269 206d 2061     Done! Confirm a 
 8005af0:	656d 7373 6761 2065 7369 6f20 206e 434c     message is on LC
 8005b00:	2e44 0000                                   D...
