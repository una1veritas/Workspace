
stm32f4-usart_test.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <pinMode>:
 static const uint8_t MISO = 12;
 static const uint8_t SCK  = 13; // PB7
 static const uint8_t LED_BUILTIN = 14;
 */

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
 8000190:	460b      	mov	r3, r1
 8000192:	70fb      	strb	r3, [r7, #3]

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800019a:	f003 020f 	and.w	r2, r3, #15
 800019e:	f240 0300 	movw	r3, #0
 80001a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001aa:	4618      	mov	r0, r3
 80001ac:	f04f 0101 	mov.w	r1, #1
 80001b0:	f001 fbe0 	bl	8001974 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80001ba:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80001be:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = mode;
 80001c0:	78fb      	ldrb	r3, [r7, #3]
 80001c2:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001c4:	f04f 0300 	mov.w	r3, #0
 80001c8:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80001ca:	f04f 0300 	mov.w	r3, #0
 80001ce:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80001d0:	f04f 0302 	mov.w	r3, #2
 80001d4:	737b      	strb	r3, [r7, #13]
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80001dc:	f003 020f 	and.w	r2, r3, #15
 80001e0:	f240 0328 	movw	r3, #40	; 0x28
 80001e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80001ec:	f107 0308 	add.w	r3, r7, #8
 80001f0:	4610      	mov	r0, r2
 80001f2:	4619      	mov	r1, r3
 80001f4:	f000 fe46 	bl	8000e84 <GPIO_Init>
}
 80001f8:	f107 0710 	add.w	r7, r7, #16
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <GPIOMode>:


void GPIOMode(uint32_t portpin, GPIOMode_TypeDef mode,
		GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	70f9      	strb	r1, [r7, #3]
 800020a:	70ba      	strb	r2, [r7, #2]
 800020c:	707b      	strb	r3, [r7, #1]

	GPIO_InitTypeDef GPIO_InitStructure;
	// wake up the port
	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000214:	f003 020f 	and.w	r2, r3, #15
 8000218:	f240 0300 	movw	r3, #0
 800021c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000224:	4618      	mov	r0, r3
 8000226:	f04f 0101 	mov.w	r1, #1
 800022a:	f001 fba3 	bl	8001974 <RCC_AHB1PeriphClockCmd>
	//
	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8000234:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000238:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = mode;
 800023a:	78fb      	ldrb	r3, [r7, #3]
 800023c:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = otype;
 800023e:	787b      	ldrb	r3, [r7, #1]
 8000240:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8000242:	7e3b      	ldrb	r3, [r7, #24]
 8000244:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = clk;
 8000246:	78bb      	ldrb	r3, [r7, #2]
 8000248:	737b      	strb	r3, [r7, #13]
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000250:	f003 020f 	and.w	r2, r3, #15
 8000254:	f240 0328 	movw	r3, #40	; 0x28
 8000258:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800025c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000260:	f107 0308 	add.w	r3, r7, #8
 8000264:	4610      	mov	r0, r2
 8000266:	4619      	mov	r1, r3
 8000268:	f000 fe0c 	bl	8000e84 <GPIO_Init>
}
 800026c:	f107 0710 	add.w	r7, r7, #16
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <digitalWrite>:

/*
 static void turnOffPWM(uint8_t timer) {
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	70fb      	strb	r3, [r7, #3]
	if (bit) {
 8000280:	78fb      	ldrb	r3, [r7, #3]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d011      	beq.n	80002aa <digitalWrite+0x36>
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800028c:	f003 020f 	and.w	r2, r3, #15
 8000290:	f240 0328 	movw	r3, #40	; 0x28
 8000294:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000298:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	b29b      	uxth	r3, r3
 80002a0:	4610      	mov	r0, r2
 80002a2:	4619      	mov	r1, r3
 80002a4:	f000 ff28 	bl	80010f8 <GPIO_SetBits>
 80002a8:	e010      	b.n	80002cc <digitalWrite+0x58>
	} else {
		GPIO_ResetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80002b0:	f003 020f 	and.w	r2, r3, #15
 80002b4:	f240 0328 	movw	r3, #40	; 0x28
 80002b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	4610      	mov	r0, r2
 80002c6:	4619      	mov	r1, r3
 80002c8:	f000 ff24 	bl	8001114 <GPIO_ResetBits>
	}
}
 80002cc:	f107 0708 	add.w	r7, r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <portWrite>:

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	460b      	mov	r3, r1
 80002de:	807b      	strh	r3, [r7, #2]
	GPIO_Write(port, bits);
 80002e0:	887b      	ldrh	r3, [r7, #2]
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	4619      	mov	r1, r3
 80002e6:	f000 ff3b 	bl	8001160 <GPIO_Write>
}
 80002ea:	f107 0708 	add.w	r7, r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop

080002f4 <digitalRead>:

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	807b      	strh	r3, [r7, #2]
	uint8_t mode = (port->MODER) >> (pin * 2);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	887b      	ldrh	r3, [r7, #2]
 8000306:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800030a:	fa22 f303 	lsr.w	r3, r2, r3
 800030e:	73fb      	strb	r3, [r7, #15]
	if (mode == GPIO_Mode_OUT)
 8000310:	7bfb      	ldrb	r3, [r7, #15]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d10b      	bne.n	800032e <digitalRead+0x3a>
		return (GPIO_ReadOutputDataBit(port, pin) ? SET : RESET);
 8000316:	887b      	ldrh	r3, [r7, #2]
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	4619      	mov	r1, r3
 800031c:	f000 fec0 	bl	80010a0 <GPIO_ReadOutputDataBit>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	bf0c      	ite	eq
 8000326:	2300      	moveq	r3, #0
 8000328:	2301      	movne	r3, #1
 800032a:	b2db      	uxtb	r3, r3
 800032c:	e00a      	b.n	8000344 <digitalRead+0x50>
	return (GPIO_ReadInputDataBit(port, pin) ? SET : RESET);
 800032e:	887b      	ldrh	r3, [r7, #2]
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	4619      	mov	r1, r3
 8000334:	f000 fe88 	bl	8001048 <GPIO_ReadInputDataBit>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	bf0c      	ite	eq
 800033e:	2300      	moveq	r3, #0
 8000340:	2301      	movne	r3, #1
 8000342:	b2db      	uxtb	r3, r3
}
 8000344:	4618      	mov	r0, r3
 8000346:	f107 0710 	add.w	r7, r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop

08000350 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	6039      	str	r1, [r7, #0]
 800035a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800035c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000360:	2b00      	cmp	r3, #0
 8000362:	da10      	bge.n	8000386 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000364:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000368:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800036c:	79fa      	ldrb	r2, [r7, #7]
 800036e:	f002 020f 	and.w	r2, r2, #15
 8000372:	f1a2 0104 	sub.w	r1, r2, #4
 8000376:	683a      	ldr	r2, [r7, #0]
 8000378:	b2d2      	uxtb	r2, r2
 800037a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800037e:	b2d2      	uxtb	r2, r2
 8000380:	185b      	adds	r3, r3, r1
 8000382:	761a      	strb	r2, [r3, #24]
 8000384:	e00d      	b.n	80003a2 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000386:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800038a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800038e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8000392:	683a      	ldr	r2, [r7, #0]
 8000394:	b2d2      	uxtb	r2, r2
 8000396:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800039a:	b2d2      	uxtb	r2, r2
 800039c:	185b      	adds	r3, r3, r1
 800039e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003a2:	f107 070c 	add.w	r7, r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr

080003ac <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d902      	bls.n	80003c4 <SysTick_Config+0x18>
 80003be:	f04f 0301 	mov.w	r3, #1
 80003c2:	e01f      	b.n	8000404 <SysTick_Config+0x58>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80003c4:	f24e 0310 	movw	r3, #57360	; 0xe010
 80003c8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80003d2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80003d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80003d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003dc:	f04f 010f 	mov.w	r1, #15
 80003e0:	f7ff ffb6 	bl	8000350 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80003e4:	f24e 0310 	movw	r3, #57360	; 0xe010
 80003e8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80003ec:	f04f 0200 	mov.w	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f2:	f24e 0310 	movw	r3, #57360	; 0xe010
 80003f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80003fa:	f04f 0207 	mov.w	r2, #7
 80003fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000400:	f04f 0300 	mov.w	r3, #0
}
 8000404:	4618      	mov	r0, r3
 8000406:	f107 0708 	add.w	r7, r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop

08000410 <SysTick_Handler>:
#include "stm32f4xx.h"
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
	_systick_counter++; /* increment timeTicks counter */
 8000414:	f640 13dc 	movw	r3, #2524	; 0x9dc
 8000418:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f103 0201 	add.w	r2, r3, #1
 8000422:	f640 13dc 	movw	r3, #2524	; 0x9dc
 8000426:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800042a:	601a      	str	r2, [r3, #0]
}
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop

08000434 <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	uint32_t currTicks = _systick_counter;
 800043c:	f640 13dc 	movw	r3, #2524	; 0x9dc
 8000440:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	60fb      	str	r3, [r7, #12]

	while ((_systick_counter - currTicks) < dlyTicks)
 8000448:	bf00      	nop
 800044a:	f640 13dc 	movw	r3, #2524	; 0x9dc
 800044e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	1ad2      	subs	r2, r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	429a      	cmp	r2, r3
 800045c:	d3f5      	bcc.n	800044a <SysTick_delay+0x16>
		;
}
 800045e:	f107 0714 	add.w	r7, r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr

08000468 <SysTick_Start>:

void SysTick_Start(const uint32_t ticks) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	if ( SysTick_Config(SystemCoreClock / ticks) ) {
 8000470:	f240 03c4 	movw	r3, #196	; 0xc4
 8000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff ff93 	bl	80003ac <SysTick_Config>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d000      	beq.n	800048e <SysTick_Start+0x26>
		/* Setup SysTick for 1 msec interrupts */
		/* Handle Error */
		while (1)
			;
 800048c:	e7fe      	b.n	800048c <SysTick_Start+0x24>
	}
}
 800048e:	f107 0708 	add.w	r7, r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop

08000498 <SysTick_count>:

uint32_t SysTick_count() {
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
	return _systick_counter;
 800049c:	f640 13dc 	movw	r3, #2524	; 0x9dc
 80004a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004a4:	681b      	ldr	r3, [r3, #0]
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <buffer_clear>:
	USART_6
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	r->head = 0;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	f04f 0200 	mov.w	r2, #0
 80004be:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	r->tail = 0;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f04f 0200 	mov.w	r2, #0
 80004c8:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	r->count = 0;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f04f 0200 	mov.w	r2, #0
 80004d2:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 80004d6:	f107 070c 	add.w	r7, r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	return r->count;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	f107 070c 	add.w	r7, r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8000510:	b212      	sxth	r2, r2
 8000512:	b21b      	sxth	r3, r3
 8000514:	429a      	cmp	r2, r3
 8000516:	d107      	bne.n	8000528 <buffer_is_full+0x2c>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800051e:	2b00      	cmp	r3, #0
 8000520:	d002      	beq.n	8000528 <buffer_is_full+0x2c>
		return 1;
 8000522:	f04f 0301 	mov.w	r3, #1
 8000526:	e001      	b.n	800052c <buffer_is_full+0x30>
	}
	return 0;
 8000528:	f04f 0300 	mov.w	r3, #0
}
 800052c:	4618      	mov	r0, r3
 800052e:	f107 070c 	add.w	r7, r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <buffer_enque>:

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	460b      	mov	r3, r1
 8000542:	807b      	strh	r3, [r7, #2]
	if ( buffer_is_full(r) )
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f7ff ffd9 	bl	80004fc <buffer_is_full>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d002      	beq.n	8000556 <buffer_enque+0x1e>
		return 0xffff;
 8000550:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000554:	e027      	b.n	80005a6 <buffer_enque+0x6e>
	r->buf[r->head++] = w;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800055c:	b219      	sxth	r1, r3
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	8878      	ldrh	r0, [r7, #2]
 8000562:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8000566:	f103 0301 	add.w	r3, r3, #1
 800056a:	b29a      	uxth	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	r->count++;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000578:	f103 0301 	add.w	r3, r3, #1
 800057c:	b29a      	uxth	r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800058a:	b21a      	sxth	r2, r3
 800058c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000590:	ea4f 6353 	mov.w	r3, r3, lsr #25
 8000594:	18d2      	adds	r2, r2, r3
 8000596:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	b29a      	uxth	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	return w;
 80005a4:	887b      	ldrh	r3, [r7, #2]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	f107 0708 	add.w	r7, r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <buffer_deque>:

uint16_t buffer_deque(USARTRing * r) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	uint16_t w;
	if ( buffer_count(r) == 0 )
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff ff91 	bl	80004e0 <buffer_count>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d102      	bne.n	80005ca <buffer_deque+0x1a>
		return 0xffff;
 80005c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c8:	e027      	b.n	800061a <buffer_deque+0x6a>
	w = r->buf[r->tail++];
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80005d0:	b219      	sxth	r1, r3
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80005d8:	81fa      	strh	r2, [r7, #14]
 80005da:	f103 0301 	add.w	r3, r3, #1
 80005de:	b29a      	uxth	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	r->count--;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80005ec:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80005fe:	b21a      	sxth	r2, r3
 8000600:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000604:	ea4f 6353 	mov.w	r3, r3, lsr #25
 8000608:	18d2      	adds	r2, r2, r3
 800060a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	b29a      	uxth	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	return w;
 8000618:	89fb      	ldrh	r3, [r7, #14]
}
 800061a:	4618      	mov	r0, r3
 800061c:	f107 0710 	add.w	r7, r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <usart_id>:
  UART4,
  UART5,
  USART6,
};

uint8_t usart_id(USART_TypeDef * USARTx) {
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	if ( USARTx == USART1 )
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000636:	429a      	cmp	r2, r3
 8000638:	d102      	bne.n	8000640 <usart_id+0x1c>
			return USART_1;
 800063a:	f04f 0300 	mov.w	r3, #0
 800063e:	e01f      	b.n	8000680 <usart_id+0x5c>
	if ( USARTx == USART2 )
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000646:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800064a:	429a      	cmp	r2, r3
 800064c:	d102      	bne.n	8000654 <usart_id+0x30>
			return USART_2;
 800064e:	f04f 0301 	mov.w	r3, #1
 8000652:	e015      	b.n	8000680 <usart_id+0x5c>
	if ( USARTx == USART3 )
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800065a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800065e:	429a      	cmp	r2, r3
 8000660:	d102      	bne.n	8000668 <usart_id+0x44>
			return USART_3;
 8000662:	f04f 0302 	mov.w	r3, #2
 8000666:	e00b      	b.n	8000680 <usart_id+0x5c>
	if ( USARTx == USART6 )
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000672:	429a      	cmp	r2, r3
 8000674:	d102      	bne.n	800067c <usart_id+0x58>
			return USART_6;
 8000676:	f04f 0305 	mov.w	r3, #5
 800067a:	e001      	b.n	8000680 <usart_id+0x5c>
	return 6;
 800067c:	f04f 0306 	mov.w	r3, #6
}
 8000680:	4618      	mov	r0, r3
 8000682:	f107 070c 	add.w	r7, r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <usart_begin>:
				((uint32_t) RCC_APB1Periph_USART3), GPIOB, GPIO_PinSource11, GPIO_PinSource10, GPIO_AF_USART3,
				USART3_IRQn
		}
};

void usart_begin(USART_TypeDef * USARTx, const uint32_t baud) {
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b08b      	sub	sp, #44	; 0x2c
 8000690:	af02      	add	r7, sp, #8
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	uint8_t portid = usart_id(USARTx);
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff ffc4 	bl	8000624 <usart_id>
 800069c:	4603      	mov	r3, r0
 800069e:	77fb      	strb	r3, [r7, #31]
	if ( portid == 6 )
 80006a0:	7ffb      	ldrb	r3, [r7, #31]
 80006a2:	2b06      	cmp	r3, #6
 80006a4:	d100      	bne.n	80006a8 <usart_begin+0x1c>
		while(1);
 80006a6:	e7fe      	b.n	80006a6 <usart_begin+0x1a>

	//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
	GPIOMode(USARTPortInfo[portid].rxpin | USARTPortInfo[portid].txpin, GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP,
 80006a8:	7ff9      	ldrb	r1, [r7, #31]
 80006aa:	f240 0274 	movw	r2, #116	; 0x74
 80006ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80006b2:	460b      	mov	r3, r1
 80006b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80006b8:	185b      	adds	r3, r3, r1
 80006ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80006be:	18d3      	adds	r3, r2, r3
 80006c0:	6818      	ldr	r0, [r3, #0]
 80006c2:	7ff9      	ldrb	r1, [r7, #31]
 80006c4:	f240 0274 	movw	r2, #116	; 0x74
 80006c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80006cc:	460b      	mov	r3, r1
 80006ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80006d2:	185b      	adds	r3, r3, r1
 80006d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80006d8:	18d3      	adds	r3, r2, r3
 80006da:	f103 0304 	add.w	r3, r3, #4
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4303      	orrs	r3, r0
 80006e2:	f04f 0201 	mov.w	r2, #1
 80006e6:	9200      	str	r2, [sp, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f04f 0102 	mov.w	r1, #2
 80006ee:	f04f 0202 	mov.w	r2, #2
 80006f2:	f04f 0300 	mov.w	r3, #0
 80006f6:	f7ff fd83 	bl	8000200 <GPIOMode>
			GPIO_PuPd_UP);
	/* USART3 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, (FunctionalState) ENABLE);
 80006fa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80006fe:	f04f 0101 	mov.w	r1, #1
 8000702:	f001 f9b5 	bl	8001a70 <RCC_APB1PeriphClockCmd>

	GPIO_PinAFConfig(USARTPortInfo[portid].afgpio, USARTPortInfo[portid].txsource, USARTPortInfo[portid].afmapping ); // TX -- PB10
 8000706:	7ff9      	ldrb	r1, [r7, #31]
 8000708:	f240 0274 	movw	r2, #116	; 0x74
 800070c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000710:	460b      	mov	r3, r1
 8000712:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000716:	185b      	adds	r3, r3, r1
 8000718:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800071c:	18d3      	adds	r3, r2, r3
 800071e:	f103 030c 	add.w	r3, r3, #12
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	7ff9      	ldrb	r1, [r7, #31]
 8000726:	f240 0274 	movw	r2, #116	; 0x74
 800072a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800072e:	460b      	mov	r3, r1
 8000730:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000734:	185b      	adds	r3, r3, r1
 8000736:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800073a:	18d3      	adds	r3, r2, r3
 800073c:	f103 0310 	add.w	r3, r3, #16
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	461c      	mov	r4, r3
 8000744:	7ff9      	ldrb	r1, [r7, #31]
 8000746:	f240 0274 	movw	r2, #116	; 0x74
 800074a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800074e:	460b      	mov	r3, r1
 8000750:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000754:	185b      	adds	r3, r3, r1
 8000756:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800075a:	18d3      	adds	r3, r2, r3
 800075c:	f103 0310 	add.w	r3, r3, #16
 8000760:	789b      	ldrb	r3, [r3, #2]
 8000762:	4621      	mov	r1, r4
 8000764:	461a      	mov	r2, r3
 8000766:	f000 fd1b 	bl	80011a0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(USARTPortInfo[portid].afgpio, USARTPortInfo[portid].rxsource,  USARTPortInfo[portid].afmapping ); // RX -- PB11
 800076a:	7ff9      	ldrb	r1, [r7, #31]
 800076c:	f240 0274 	movw	r2, #116	; 0x74
 8000770:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000774:	460b      	mov	r3, r1
 8000776:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800077a:	185b      	adds	r3, r3, r1
 800077c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000780:	18d3      	adds	r3, r2, r3
 8000782:	f103 030c 	add.w	r3, r3, #12
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	7ff9      	ldrb	r1, [r7, #31]
 800078a:	f240 0274 	movw	r2, #116	; 0x74
 800078e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000792:	460b      	mov	r3, r1
 8000794:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000798:	185b      	adds	r3, r3, r1
 800079a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800079e:	18d3      	adds	r3, r2, r3
 80007a0:	f103 0310 	add.w	r3, r3, #16
 80007a4:	785b      	ldrb	r3, [r3, #1]
 80007a6:	461c      	mov	r4, r3
 80007a8:	7ff9      	ldrb	r1, [r7, #31]
 80007aa:	f240 0274 	movw	r2, #116	; 0x74
 80007ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80007b2:	460b      	mov	r3, r1
 80007b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80007b8:	185b      	adds	r3, r3, r1
 80007ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80007be:	18d3      	adds	r3, r2, r3
 80007c0:	f103 0310 	add.w	r3, r3, #16
 80007c4:	789b      	ldrb	r3, [r3, #2]
 80007c6:	4621      	mov	r1, r4
 80007c8:	461a      	mov	r2, r3
 80007ca:	f000 fce9 	bl	80011a0 <GPIO_PinAFConfig>

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	60fb      	str	r3, [r7, #12]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 80007d2:	f04f 0300 	mov.w	r3, #0
 80007d6:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 80007d8:	f04f 0300 	mov.w	r3, #0
 80007dc:	827b      	strh	r3, [r7, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 80007de:	f04f 0300 	mov.w	r3, #0
 80007e2:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 80007ea:	f04f 030c 	mov.w	r3, #12
 80007ee:	82fb      	strh	r3, [r7, #22]

	USART_Init(USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	4619      	mov	r1, r3
 80007f8:	f001 fc6c 	bl	80020d4 <USART_Init>

	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f240 5125 	movw	r1, #1317	; 0x525
 8000802:	f04f 0201 	mov.w	r2, #1
 8000806:	f001 ffcb 	bl	80027a0 <USART_ITConfig>
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f240 7127 	movw	r1, #1831	; 0x727
 8000810:	f04f 0200 	mov.w	r2, #0
 8000814:	f001 ffc4 	bl	80027a0 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USARTPortInfo[portid].irq_channel;
 8000818:	7ff9      	ldrb	r1, [r7, #31]
 800081a:	f240 0274 	movw	r2, #116	; 0x74
 800081e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000822:	460b      	mov	r3, r1
 8000824:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000828:	185b      	adds	r3, r3, r1
 800082a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800082e:	18d3      	adds	r3, r2, r3
 8000830:	f103 0310 	add.w	r3, r3, #16
 8000834:	78db      	ldrb	r3, [r3, #3]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	723b      	strb	r3, [r7, #8]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 800083a:	f04f 0300 	mov.w	r3, #0
 800083e:	727b      	strb	r3, [r7, #9]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8000840:	f04f 0300 	mov.w	r3, #0
 8000844:	72bb      	strb	r3, [r7, #10]
	NVIC_InitStructure.NVIC_IRQChannelCmd = (FunctionalState) ENABLE;	// the USART3 interrupts are globally enabled
 8000846:	f04f 0301 	mov.w	r3, #1
 800084a:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f983 	bl	8000b5c <NVIC_Init>

	buffer_clear(&rxring[portid]);
 8000856:	7ffb      	ldrb	r3, [r7, #31]
 8000858:	f44f 7283 	mov.w	r2, #262	; 0x106
 800085c:	fb02 f203 	mul.w	r2, r2, r3
 8000860:	f640 43f4 	movw	r3, #3316	; 0xcf4
 8000864:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000868:	18d3      	adds	r3, r2, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fe20 	bl	80004b0 <buffer_clear>
	buffer_clear(&txring[portid]);
 8000870:	7ffb      	ldrb	r3, [r7, #31]
 8000872:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000876:	fb02 f203 	mul.w	r2, r2, r3
 800087a:	f640 13e0 	movw	r3, #2528	; 0x9e0
 800087e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000882:	18d3      	adds	r3, r2, r3
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe13 	bl	80004b0 <buffer_clear>

	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx, (FunctionalState) ENABLE);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f04f 0101 	mov.w	r1, #1
 8000890:	f001 fd5c 	bl	800234c <USART_Cmd>
}
 8000894:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd90      	pop	{r4, r7, pc}

0800089c <usart_bare_write>:

void usart_bare_write(USART_TypeDef * USARTx, const uint16_t w) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	807b      	strh	r3, [r7, #2]
	while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET)
 80008a8:	bf00      	nop
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f04f 0180 	mov.w	r1, #128	; 0x80
 80008b0:	f001 ffc8 	bl	8002844 <USART_GetFlagStatus>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d0f7      	beq.n	80008aa <usart_bare_write+0xe>
		;
	USART_SendData(USARTx, w);
 80008ba:	887b      	ldrh	r3, [r7, #2]
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	4619      	mov	r1, r3
 80008c0:	f001 fdc4 	bl	800244c <USART_SendData>
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
}
 80008c4:	f107 0708 	add.w	r7, r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <usart_write>:

void usart_write(USART_TypeDef * USARTx, const uint16_t w) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	807b      	strh	r3, [r7, #2]
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f240 7127 	movw	r1, #1831	; 0x727
 80008de:	f04f 0200 	mov.w	r2, #0
 80008e2:	f001 ff5d 	bl	80027a0 <USART_ITConfig>
	buffer_enque(&txring[USART_3], w);
 80008e6:	887b      	ldrh	r3, [r7, #2]
 80008e8:	4807      	ldr	r0, [pc, #28]	; (8000908 <usart_write+0x3c>)
 80008ea:	4619      	mov	r1, r3
 80008ec:	f7ff fe24 	bl	8000538 <buffer_enque>
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) ENABLE);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f240 7127 	movw	r1, #1831	; 0x727
 80008f6:	f04f 0201 	mov.w	r2, #1
 80008fa:	f001 ff51 	bl	80027a0 <USART_ITConfig>
}
 80008fe:	f107 0708 	add.w	r7, r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000bec 	.word	0x20000bec

0800090c <usart_print>:

void usart_print(USART_TypeDef * USARTx, const char * s) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
	while (*s)
 8000916:	e009      	b.n	800092c <usart_print+0x20>
		usart_write(USARTx, (uint16_t) *s++);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	683a      	ldr	r2, [r7, #0]
 800091e:	f102 0201 	add.w	r2, r2, #1
 8000922:	603a      	str	r2, [r7, #0]
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	4619      	mov	r1, r3
 8000928:	f7ff ffd0 	bl	80008cc <usart_write>
	buffer_enque(&txring[USART_3], w);
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) ENABLE);
}

void usart_print(USART_TypeDef * USARTx, const char * s) {
	while (*s)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1f1      	bne.n	8000918 <usart_print+0xc>
		usart_write(USARTx, (uint16_t) *s++);
}
 8000934:	f107 0708 	add.w	r7, r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <usart_bare_read>:

uint16_t usart_bare_read(USART_TypeDef * USARTx) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	return USART_ReceiveData(USARTx );
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f001 fd95 	bl	8002474 <USART_ReceiveData>
 800094a:	4603      	mov	r3, r0
}
 800094c:	4618      	mov	r0, r3
 800094e:	f107 0708 	add.w	r7, r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop

08000958 <usart_read>:

uint16_t usart_read(USART_TypeDef * USARTx) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	uint16_t w = buffer_deque(&rxring[USART_3]);
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <usart_read+0x30>)
 8000962:	f7ff fe25 	bl	80005b0 <buffer_deque>
 8000966:	4603      	mov	r3, r0
 8000968:	81fb      	strh	r3, [r7, #14]
	if ( w == 0xffff ) return 0; // buffer is empty
 800096a:	89fa      	ldrh	r2, [r7, #14]
 800096c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000970:	429a      	cmp	r2, r3
 8000972:	d102      	bne.n	800097a <usart_read+0x22>
 8000974:	f04f 0300 	mov.w	r3, #0
 8000978:	e000      	b.n	800097c <usart_read+0x24>
	return w;
 800097a:	89fb      	ldrh	r3, [r7, #14]
}
 800097c:	4618      	mov	r0, r3
 800097e:	f107 0710 	add.w	r7, r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000f00 	.word	0x20000f00

0800098c <usart_flush>:

void usart_flush(USART_TypeDef * USARTx) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f240 5125 	movw	r1, #1317	; 0x525
 800099a:	f04f 0200 	mov.w	r2, #0
 800099e:	f001 feff 	bl	80027a0 <USART_ITConfig>
	buffer_clear(&rxring[USART_3]);
 80009a2:	4821      	ldr	r0, [pc, #132]	; (8000a28 <usart_flush+0x9c>)
 80009a4:	f7ff fd84 	bl	80004b0 <buffer_clear>
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f240 5125 	movw	r1, #1317	; 0x525
 80009ae:	f001 ffdd 	bl	800296c <USART_ClearITPendingBit>
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f240 5125 	movw	r1, #1317	; 0x525
 80009b8:	f04f 0201 	mov.w	r2, #1
 80009bc:	f001 fef0 	bl	80027a0 <USART_ITConfig>
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f240 7127 	movw	r1, #1831	; 0x727
 80009c6:	f04f 0200 	mov.w	r2, #0
 80009ca:	f001 fee9 	bl	80027a0 <USART_ITConfig>
	while ( buffer_count(&txring[USART_3]) > 0 ) {
 80009ce:	e019      	b.n	8000a04 <usart_flush+0x78>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
 80009d0:	bf00      	nop
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f04f 0180 	mov.w	r1, #128	; 0x80
 80009d8:	f001 ff34 	bl	8002844 <USART_GetFlagStatus>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d0f7      	beq.n	80009d2 <usart_flush+0x46>
		USART_SendData(USARTx, buffer_deque(&txring[USART_3]));
 80009e2:	4812      	ldr	r0, [pc, #72]	; (8000a2c <usart_flush+0xa0>)
 80009e4:	f7ff fde4 	bl	80005b0 <buffer_deque>
 80009e8:	4603      	mov	r3, r0
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f001 fd2d 	bl	800244c <USART_SendData>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
 80009f2:	bf00      	nop
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f04f 0140 	mov.w	r1, #64	; 0x40
 80009fa:	f001 ff23 	bl	8002844 <USART_GetFlagStatus>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0f7      	beq.n	80009f4 <usart_flush+0x68>
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[USART_3]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
	while ( buffer_count(&txring[USART_3]) > 0 ) {
 8000a04:	4809      	ldr	r0, [pc, #36]	; (8000a2c <usart_flush+0xa0>)
 8000a06:	f7ff fd6b 	bl	80004e0 <buffer_count>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1df      	bne.n	80009d0 <usart_flush+0x44>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
		USART_SendData(USARTx, buffer_deque(&txring[USART_3]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f240 7127 	movw	r1, #1831	; 0x727
 8000a16:	f001 ffa9 	bl	800296c <USART_ClearITPendingBit>
	buffer_clear(&txring[USART_3]);
 8000a1a:	4804      	ldr	r0, [pc, #16]	; (8000a2c <usart_flush+0xa0>)
 8000a1c:	f7ff fd48 	bl	80004b0 <buffer_clear>
}
 8000a20:	f107 0708 	add.w	r7, r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000f00 	.word	0x20000f00
 8000a2c:	20000bec 	.word	0x20000bec

08000a30 <usart_peek>:

uint16_t usart_peek(USART_TypeDef * uport) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	if ( ! buffer_count(&rxring[USART_3]) == 0 )
 8000a38:	480e      	ldr	r0, [pc, #56]	; (8000a74 <usart_peek+0x44>)
 8000a3a:	f7ff fd51 	bl	80004e0 <buffer_count>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d00f      	beq.n	8000a64 <usart_peek+0x34>
		return rxring[USART_3].buf[rxring[USART_3].tail];
 8000a44:	f640 43f4 	movw	r3, #3316	; 0xcf4
 8000a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a4c:	f8b3 330e 	ldrh.w	r3, [r3, #782]	; 0x30e
 8000a50:	b21a      	sxth	r2, r3
 8000a52:	f640 43f4 	movw	r3, #3316	; 0xcf4
 8000a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a5a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8000a5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000a62:	e001      	b.n	8000a68 <usart_peek+0x38>
	return 0xffff;
 8000a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f107 0708 	add.w	r7, r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000f00 	.word	0x20000f00

08000a78 <usart_available>:

uint16_t usart_available(USART_TypeDef * uport) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	return buffer_count(&rxring[USART_3]);
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <usart_available+0x1c>)
 8000a82:	f7ff fd2d 	bl	80004e0 <buffer_count>
 8000a86:	4603      	mov	r3, r0
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f107 0708 	add.w	r7, r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000f00 	.word	0x20000f00

08000a98 <USART3_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART3_IRQHandler(void) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8000a9c:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000aa0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000aa4:	f240 5125 	movw	r1, #1317	; 0x525
 8000aa8:	f001 fefe 	bl	80028a8 <USART_GetITStatus>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d00a      	beq.n	8000ac8 <USART3_IRQHandler+0x30>
		buffer_enque(&rxring[USART_3], USART_ReceiveData(USART3) );
 8000ab2:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000ab6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000aba:	f001 fcdb 	bl	8002474 <USART_ReceiveData>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	481a      	ldr	r0, [pc, #104]	; (8000b2c <USART3_IRQHandler+0x94>)
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f7ff fd38 	bl	8000538 <buffer_enque>
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8000ac8:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000acc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000ad0:	f240 7127 	movw	r1, #1831	; 0x727
 8000ad4:	f001 fee8 	bl	80028a8 <USART_GetITStatus>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d025      	beq.n	8000b2a <USART3_IRQHandler+0x92>
		if (txring[USART_3].count == 0) {
 8000ade:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8000ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ae6:	f8b3 3310 	ldrh.w	r3, [r3, #784]	; 0x310
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d112      	bne.n	8000b14 <USART3_IRQHandler+0x7c>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8000aee:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000af2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000af6:	f240 7127 	movw	r1, #1831	; 0x727
 8000afa:	f04f 0200 	mov.w	r2, #0
 8000afe:	f001 fe4f 	bl	80027a0 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000b02:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000b06:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000b0a:	f240 7127 	movw	r1, #1831	; 0x727
 8000b0e:	f001 ff2d 	bl	800296c <USART_ClearITPendingBit>
 8000b12:	e00a      	b.n	8000b2a <USART3_IRQHandler+0x92>
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART_3]));
 8000b14:	4806      	ldr	r0, [pc, #24]	; (8000b30 <USART3_IRQHandler+0x98>)
 8000b16:	f7ff fd4b 	bl	80005b0 <buffer_deque>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000b20:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000b24:	4619      	mov	r1, r3
 8000b26:	f001 fc91 	bl	800244c <USART_SendData>
		}
	}
}
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000f00 	.word	0x20000f00
 8000b30:	20000bec 	.word	0x20000bec

08000b34 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000b3c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000b40:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 8000b4a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b4e:	60da      	str	r2, [r3, #12]
}
 8000b50:	f107 070c 	add.w	r7, r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	73fb      	strb	r3, [r7, #15]
 8000b6a:	f04f 0300 	mov.w	r3, #0
 8000b6e:	73bb      	strb	r3, [r7, #14]
 8000b70:	f04f 030f 	mov.w	r3, #15
 8000b74:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	78db      	ldrb	r3, [r3, #3]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d045      	beq.n	8000c0a <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000b7e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000b82:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	ea6f 0303 	mvn.w	r3, r3
 8000b8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b90:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000b94:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	f1c3 0304 	rsb	r3, r3, #4
 8000b9c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000b9e:	7b7a      	ldrb	r2, [r7, #13]
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	fa42 f303 	asr.w	r3, r2, r3
 8000ba6:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	785b      	ldrb	r3, [r3, #1]
 8000bac:	461a      	mov	r2, r3
 8000bae:	7bbb      	ldrb	r3, [r7, #14]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	789a      	ldrb	r2, [r3, #2]
 8000bba:	7b7b      	ldrb	r3, [r7, #13]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000bcc:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000bce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000bd2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	7812      	ldrb	r2, [r2, #0]
 8000bda:	189b      	adds	r3, r3, r2
 8000bdc:	7bfa      	ldrb	r2, [r7, #15]
 8000bde:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000be2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000be6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	7812      	ldrb	r2, [r2, #0]
 8000bee:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000bf2:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	7809      	ldrb	r1, [r1, #0]
 8000bf8:	f001 011f 	and.w	r1, r1, #31
 8000bfc:	f04f 0001 	mov.w	r0, #1
 8000c00:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000c08:	e014      	b.n	8000c34 <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c0a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000c0e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	7812      	ldrb	r2, [r2, #0]
 8000c16:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000c1a:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	7809      	ldrb	r1, [r1, #0]
 8000c20:	f001 011f 	and.w	r1, r1, #31
 8000c24:	f04f 0001 	mov.w	r0, #1
 8000c28:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c2c:	f102 0220 	add.w	r2, r2, #32
 8000c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000c34:	f107 0714 	add.w	r7, r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000c4a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000c4e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8000c58:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000c5c:	6879      	ldr	r1, [r7, #4]
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	609a      	str	r2, [r3, #8]
}
 8000c62:	f107 070c 	add.w	r7, r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4602      	mov	r2, r0
 8000c74:	460b      	mov	r3, r1
 8000c76:	71fa      	strb	r2, [r7, #7]
 8000c78:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000c7a:	79bb      	ldrb	r3, [r7, #6]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d00c      	beq.n	8000c9a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
 8000c80:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000c84:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000c88:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000c8c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000c90:	6911      	ldr	r1, [r2, #16]
 8000c92:	79fa      	ldrb	r2, [r7, #7]
 8000c94:	430a      	orrs	r2, r1
 8000c96:	611a      	str	r2, [r3, #16]
 8000c98:	e00d      	b.n	8000cb6 <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000c9a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000c9e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000ca2:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000ca6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000caa:	6911      	ldr	r1, [r2, #16]
 8000cac:	79fa      	ldrb	r2, [r7, #7]
 8000cae:	ea6f 0202 	mvn.w	r2, r2
 8000cb2:	400a      	ands	r2, r1
 8000cb4:	611a      	str	r2, [r3, #16]
  }
}
 8000cb6:	f107 070c 	add.w	r7, r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	d10c      	bne.n	8000ce8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000cce:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000cd2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000cd6:	f24e 0210 	movw	r2, #57360	; 0xe010
 8000cda:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000cde:	6812      	ldr	r2, [r2, #0]
 8000ce0:	f042 0204 	orr.w	r2, r2, #4
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	e00b      	b.n	8000d00 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000ce8:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000cec:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000cf0:	f24e 0210 	movw	r2, #57360	; 0xe010
 8000cf4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000cf8:	6812      	ldr	r2, [r2, #0]
 8000cfa:	f022 0204 	bic.w	r2, r2, #4
 8000cfe:	601a      	str	r2, [r3, #0]
  }
}
 8000d00:	f107 070c 	add.w	r7, r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	f04f 0300 	mov.w	r3, #0
 8000d1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d10c      	bne.n	8000d3c <GPIO_DeInit+0x30>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000d22:	f04f 0001 	mov.w	r0, #1
 8000d26:	f04f 0101 	mov.w	r1, #1
 8000d2a:	f000 fef5 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000d2e:	f04f 0001 	mov.w	r0, #1
 8000d32:	f04f 0100 	mov.w	r1, #0
 8000d36:	f000 feef 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
 8000d3a:	e09e      	b.n	8000e7a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOB)
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d42:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d10c      	bne.n	8000d64 <GPIO_DeInit+0x58>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000d4a:	f04f 0002 	mov.w	r0, #2
 8000d4e:	f04f 0101 	mov.w	r1, #1
 8000d52:	f000 fee1 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8000d56:	f04f 0002 	mov.w	r0, #2
 8000d5a:	f04f 0100 	mov.w	r1, #0
 8000d5e:	f000 fedb 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
 8000d62:	e08a      	b.n	8000e7a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOC)
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d10c      	bne.n	8000d8c <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000d72:	f04f 0004 	mov.w	r0, #4
 8000d76:	f04f 0101 	mov.w	r1, #1
 8000d7a:	f000 fecd 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8000d7e:	f04f 0004 	mov.w	r0, #4
 8000d82:	f04f 0100 	mov.w	r1, #0
 8000d86:	f000 fec7 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
 8000d8a:	e076      	b.n	8000e7a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOD)
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d10c      	bne.n	8000db4 <GPIO_DeInit+0xa8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000d9a:	f04f 0008 	mov.w	r0, #8
 8000d9e:	f04f 0101 	mov.w	r1, #1
 8000da2:	f000 feb9 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8000da6:	f04f 0008 	mov.w	r0, #8
 8000daa:	f04f 0100 	mov.w	r1, #0
 8000dae:	f000 feb3 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
 8000db2:	e062      	b.n	8000e7a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOE)
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d10c      	bne.n	8000ddc <GPIO_DeInit+0xd0>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000dc2:	f04f 0010 	mov.w	r0, #16
 8000dc6:	f04f 0101 	mov.w	r1, #1
 8000dca:	f000 fea5 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000dce:	f04f 0010 	mov.w	r0, #16
 8000dd2:	f04f 0100 	mov.w	r1, #0
 8000dd6:	f000 fe9f 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
 8000dda:	e04e      	b.n	8000e7a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOF)
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000de2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d10c      	bne.n	8000e04 <GPIO_DeInit+0xf8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000dea:	f04f 0020 	mov.w	r0, #32
 8000dee:	f04f 0101 	mov.w	r1, #1
 8000df2:	f000 fe91 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000df6:	f04f 0020 	mov.w	r0, #32
 8000dfa:	f04f 0100 	mov.w	r1, #0
 8000dfe:	f000 fe8b 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
 8000e02:	e03a      	b.n	8000e7a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOG)
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d10c      	bne.n	8000e2c <GPIO_DeInit+0x120>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000e12:	f04f 0040 	mov.w	r0, #64	; 0x40
 8000e16:	f04f 0101 	mov.w	r1, #1
 8000e1a:	f000 fe7d 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000e1e:	f04f 0040 	mov.w	r0, #64	; 0x40
 8000e22:	f04f 0100 	mov.w	r1, #0
 8000e26:	f000 fe77 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
 8000e2a:	e026      	b.n	8000e7a <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOH)
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d10c      	bne.n	8000e54 <GPIO_DeInit+0x148>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000e3a:	f04f 0080 	mov.w	r0, #128	; 0x80
 8000e3e:	f04f 0101 	mov.w	r1, #1
 8000e42:	f000 fe69 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000e46:	f04f 0080 	mov.w	r0, #128	; 0x80
 8000e4a:	f04f 0100 	mov.w	r1, #0
 8000e4e:	f000 fe63 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
 8000e52:	e012      	b.n	8000e7a <GPIO_DeInit+0x16e>
  }
  else
  {
    if (GPIOx == GPIOI)
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d10b      	bne.n	8000e7a <GPIO_DeInit+0x16e>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000e62:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e66:	f04f 0101 	mov.w	r1, #1
 8000e6a:	f000 fe55 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000e6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e72:	f04f 0100 	mov.w	r1, #0
 8000e76:	f000 fe4f 	bl	8001b18 <RCC_AHB1PeriphResetCmd>
    }
  }
}
 8000e7a:	f107 0708 	add.w	r7, r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop

08000e84 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000e8e:	f04f 0300 	mov.w	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	f04f 0300 	mov.w	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	f04f 0300 	mov.w	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	e086      	b.n	8000fb6 <GPIO_Init+0x132>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f04f 0201 	mov.w	r2, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d173      	bne.n	8000fae <GPIO_Init+0x12a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ed0:	f04f 0103 	mov.w	r1, #3
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	ea6f 0303 	mvn.w	r3, r3
 8000edc:	401a      	ands	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	791b      	ldrb	r3, [r3, #4]
 8000eea:	4619      	mov	r1, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	791b      	ldrb	r3, [r3, #4]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d003      	beq.n	8000f0c <GPIO_Init+0x88>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	791b      	ldrb	r3, [r3, #4]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d134      	bne.n	8000f76 <GPIO_Init+0xf2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f16:	f04f 0103 	mov.w	r1, #3
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	ea6f 0303 	mvn.w	r3, r3
 8000f22:	401a      	ands	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	795b      	ldrb	r3, [r3, #5]
 8000f30:	4619      	mov	r1, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	f04f 0101 	mov.w	r1, #1
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	ea6f 0303 	mvn.w	r3, r3
 8000f56:	401a      	ands	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	799b      	ldrb	r3, [r3, #6]
 8000f64:	4619      	mov	r1, r3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f82:	f04f 0103 	mov.w	r1, #3
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	ea6f 0303 	mvn.w	r3, r3
 8000f8e:	401a      	ands	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	79db      	ldrb	r3, [r3, #7]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f103 0301 	add.w	r3, r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	f67f af75 	bls.w	8000ea8 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000fbe:	f107 071c 	add.w	r7, r7, #28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	71da      	strb	r2, [r3, #7]
}
 8000ff8:	f107 070c 	add.w	r7, r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8001010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001014:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8001016:	887a      	ldrh	r2, [r7, #2]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001024:	887a      	ldrh	r2, [r7, #2]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	60fb      	str	r3, [r7, #12]
}
 800103c:	f107 0714 	add.w	r7, r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	4013      	ands	r3, r2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001066:	f04f 0301 	mov.w	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	e002      	b.n	8001074 <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	f107 0714 	add.w	r7, r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	b29b      	uxth	r3, r3
}
 8001092:	4618      	mov	r0, r3
 8001094:	f107 070c 	add.w	r7, r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	695a      	ldr	r2, [r3, #20]
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80010be:	f04f 0301 	mov.w	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e002      	b.n	80010cc <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	f107 0714 	add.w	r7, r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	b29b      	uxth	r3, r3
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	f107 070c 	add.w	r7, r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop

080010f8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	831a      	strh	r2, [r3, #24]
}
 800110a:	f107 070c 	add.w	r7, r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	835a      	strh	r2, [r3, #26]
}
 8001126:	f107 070c 	add.w	r7, r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	460a      	mov	r2, r1
 800113c:	807a      	strh	r2, [r7, #2]
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	887a      	ldrh	r2, [r7, #2]
 800114a:	831a      	strh	r2, [r3, #24]
 800114c:	e002      	b.n	8001154 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	887a      	ldrh	r2, [r7, #2]
 8001152:	835a      	strh	r2, [r3, #26]
  }
}
 8001154:	f107 070c 	add.w	r7, r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop

08001160 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800116c:	887a      	ldrh	r2, [r7, #2]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	615a      	str	r2, [r3, #20]
}
 8001172:	f107 070c 	add.w	r7, r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	695a      	ldr	r2, [r3, #20]
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	405a      	eors	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	615a      	str	r2, [r3, #20]
}
 8001194:	f107 070c 	add.w	r7, r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	460a      	mov	r2, r1
 80011ac:	807a      	strh	r2, [r7, #2]
 80011ae:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80011bc:	787a      	ldrb	r2, [r7, #1]
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80011de:	b29b      	uxth	r3, r3
 80011e0:	4619      	mov	r1, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f101 0108 	add.w	r1, r1, #8
 80011e8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80011ec:	887b      	ldrh	r3, [r7, #2]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80011f6:	f04f 000f 	mov.w	r0, #15
 80011fa:	fa00 f303 	lsl.w	r3, r0, r3
 80011fe:	ea6f 0303 	mvn.w	r3, r3
 8001202:	4019      	ands	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f102 0208 	add.w	r2, r2, #8
 800120a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8001214:	b29b      	uxth	r3, r3
 8001216:	461a      	mov	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f102 0208 	add.w	r2, r2, #8
 800121e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800122e:	b29b      	uxth	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f102 0208 	add.w	r2, r2, #8
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800123e:	f107 0714 	add.w	r7, r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800124c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001250:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001254:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001258:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	f042 0201 	orr.w	r2, r2, #1
 8001262:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001264:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001268:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001272:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001276:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800127a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800127e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001288:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800128c:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800128e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001292:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001296:	f243 0210 	movw	r2, #12304	; 0x3010
 800129a:	f2c2 4200 	movt	r2, #9216	; 0x2400
 800129e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012a0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012b6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
}
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80012d6:	f643 0302 	movw	r3, #14338	; 0x3802
 80012da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80012e4:	f643 0302 	movw	r3, #14338	; 0x3802
 80012e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012ec:	79fa      	ldrb	r2, [r7, #7]
 80012ee:	701a      	strb	r2, [r3, #0]
}
 80012f0:	f107 070c 	add.w	r7, r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop

080012fc <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001314:	f04f 0031 	mov.w	r0, #49	; 0x31
 8001318:	f000 fdd2 	bl	8001ec0 <RCC_GetFlagStatus>
 800131c:	4603      	mov	r3, r0
 800131e:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	f103 0301 	add.w	r3, r3, #1
 8001326:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800132e:	d002      	beq.n	8001336 <RCC_WaitForHSEStartUp+0x3a>
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0ee      	beq.n	8001314 <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001336:	f04f 0031 	mov.w	r0, #49	; 0x31
 800133a:	f000 fdc1 	bl	8001ec0 <RCC_GetFlagStatus>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 8001344:	f04f 0301 	mov.w	r3, #1
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	e002      	b.n	8001352 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8001352:	79fb      	ldrb	r3, [r7, #7]
}
 8001354:	4618      	mov	r0, r3
 8001356:	f107 0708 	add.w	r7, r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop

08001360 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8001370:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001374:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001382:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	4313      	orrs	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 8001390:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001394:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	601a      	str	r2, [r3, #0]
}
 800139c:	f107 0714 	add.w	r7, r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop

080013a8 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80013ba:	79fa      	ldrb	r2, [r7, #7]
 80013bc:	601a      	str	r2, [r3, #0]
}
 80013be:	f107 070c 	add.w	r7, r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80013d2:	f643 0370 	movw	r3, #14448	; 0x3870
 80013d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80013e0:	f643 0370 	movw	r3, #14448	; 0x3870
 80013e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d002      	beq.n	80013fa <RCC_LSEConfig+0x32>
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d008      	beq.n	800140a <RCC_LSEConfig+0x42>
 80013f8:	e00f      	b.n	800141a <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80013fa:	f643 0370 	movw	r3, #14448	; 0x3870
 80013fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001402:	f04f 0201 	mov.w	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
      break;
 8001408:	e008      	b.n	800141c <RCC_LSEConfig+0x54>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800140a:	f643 0370 	movw	r3, #14448	; 0x3870
 800140e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001412:	f04f 0205 	mov.w	r2, #5
 8001416:	701a      	strb	r2, [r3, #0]
      break;
 8001418:	e000      	b.n	800141c <RCC_LSEConfig+0x54>
    default:
      break;
 800141a:	bf00      	nop
  }
}
 800141c:	f107 070c 	add.w	r7, r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop

08001428 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8001432:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8001436:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800143a:	79fa      	ldrb	r2, [r7, #7]
 800143c:	601a      	str	r2, [r3, #0]
}
 800143e:	f107 070c 	add.w	r7, r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001456:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800145a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	ea4f 1182 	mov.w	r1, r2, lsl #6
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	4311      	orrs	r1, r2
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800146e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8001472:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8001476:	4311      	orrs	r1, r2
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	ea4f 6202 	mov.w	r2, r2, lsl #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001482:	430a      	orrs	r2, r1
 8001484:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 8001486:	f107 0714 	add.w	r7, r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800149a:	f04f 0360 	mov.w	r3, #96	; 0x60
 800149e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80014a2:	79fa      	ldrb	r2, [r7, #7]
 80014a4:	601a      	str	r2, [r3, #0]
}
 80014a6:	f107 070c 	add.w	r7, r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80014ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	ea4f 1182 	mov.w	r1, r2, lsl #6
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	ea4f 7202 	mov.w	r2, r2, lsl #28
 80014ce:	430a      	orrs	r2, r1
 80014d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80014d4:	f107 070c 	add.w	r7, r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop

080014e0 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80014ea:	f04f 0368 	mov.w	r3, #104	; 0x68
 80014ee:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80014f2:	79fa      	ldrb	r2, [r7, #7]
 80014f4:	601a      	str	r2, [r3, #0]
}
 80014f6:	f107 070c 	add.w	r7, r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800150a:	f04f 034c 	mov.w	r3, #76	; 0x4c
 800150e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001512:	79fa      	ldrb	r2, [r7, #7]
 8001514:	601a      	str	r2, [r3, #0]
}
 8001516:	f107 070c 	add.w	r7, r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8001530:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001534:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8001542:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	4313      	orrs	r3, r2
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	4313      	orrs	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001550:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001554:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	609a      	str	r2, [r3, #8]
}
 800155c:	f107 0714 	add.w	r7, r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop

08001568 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8001578:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800157c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800158a:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	4313      	orrs	r3, r2
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001598:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800159c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	609a      	str	r2, [r3, #8]
}
 80015a4:	f107 0714 	add.w	r7, r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop

080015b0 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80015be:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f023 0303 	bic.w	r3, r3, #3
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80015da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	609a      	str	r2, [r3, #8]
}
 80015e6:	f107 0714 	add.w	r7, r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 80015f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	b2db      	uxtb	r3, r3
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop

08001610 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800161e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001622:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001630:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4313      	orrs	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800163a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800163e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	609a      	str	r2, [r3, #8]
}
 8001646:	f107 0714 	add.w	r7, r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800165e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001662:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001670:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800167a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800167e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	609a      	str	r2, [r3, #8]
}
 8001686:	f107 0714 	add.w	r7, r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800169e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80016be:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	609a      	str	r2, [r3, #8]
}
 80016ca:	f107 0714 	add.w	r7, r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	f04f 0302 	mov.w	r3, #2
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	f04f 0302 	mov.w	r3, #2
 80016fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001700:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001704:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2b04      	cmp	r3, #4
 8001714:	d00a      	beq.n	800172c <RCC_GetClocksFreq+0x58>
 8001716:	2b08      	cmp	r3, #8
 8001718:	d00f      	beq.n	800173a <RCC_GetClocksFreq+0x66>
 800171a:	2b00      	cmp	r3, #0
 800171c:	d160      	bne.n	80017e0 <RCC_GetClocksFreq+0x10c>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001724:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8001728:	6013      	str	r3, [r2, #0]
      break;
 800172a:	e060      	b.n	80017ee <RCC_GetClocksFreq+0x11a>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001732:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001736:	6013      	str	r3, [r2, #0]
      break;
 8001738:	e059      	b.n	80017ee <RCC_GetClocksFreq+0x11a>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800173a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800173e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001748:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800174c:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800174e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001752:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800175c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d014      	beq.n	800178e <RCC_GetClocksFreq+0xba>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001764:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001768:	f2c0 037a 	movt	r3, #122	; 0x7a
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001772:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001776:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800177a:	6859      	ldr	r1, [r3, #4]
 800177c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001780:	400b      	ands	r3, r1
 8001782:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8001786:	fb03 f302 	mul.w	r3, r3, r2
 800178a:	61fb      	str	r3, [r7, #28]
 800178c:	e013      	b.n	80017b6 <RCC_GetClocksFreq+0xe2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800178e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001792:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	fbb3 f2f2 	udiv	r2, r3, r2
 800179c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017a4:	6859      	ldr	r1, [r3, #4]
 80017a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017aa:	400b      	ands	r3, r1
 80017ac:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80017b0:	fb03 f302 	mul.w	r3, r3, r2
 80017b4:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80017b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017c4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80017c8:	f103 0301 	add.w	r3, r3, #1
 80017cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80017d0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	601a      	str	r2, [r3, #0]
      break;
 80017de:	e006      	b.n	80017ee <RCC_GetClocksFreq+0x11a>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80017e6:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80017ea:	6013      	str	r3, [r2, #0]
      break;
 80017ec:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80017ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017fc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8001804:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001806:	f240 03b0 	movw	r3, #176	; 0xb0
 800180a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	189b      	adds	r3, r3, r2
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa22 f203 	lsr.w	r2, r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001826:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800182a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001834:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	ea4f 2393 	mov.w	r3, r3, lsr #10
 800183c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800183e:	f240 03b0 	movw	r3, #176	; 0xb0
 8001842:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	189b      	adds	r3, r3, r2
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa22 f203 	lsr.w	r2, r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800185e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001862:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800186c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	ea4f 3353 	mov.w	r3, r3, lsr #13
 8001874:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001876:	f240 03b0 	movw	r3, #176	; 0xb0
 800187a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	189b      	adds	r3, r3, r2
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa22 f203 	lsr.w	r2, r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	60da      	str	r2, [r3, #12]
}
 8001896:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018b8:	d117      	bne.n	80018ea <RCC_RTCCLKConfig+0x4a>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 80018ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80018cc:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80018d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 80018de:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 80018ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018f2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80018f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018fa:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	ea4f 5202 	mov.w	r2, r2, lsl #20
 8001902:	ea4f 5212 	mov.w	r2, r2, lsr #20
 8001906:	430a      	orrs	r2, r1
 8001908:	671a      	str	r2, [r3, #112]	; 0x70
}
 800190a:	f107 0714 	add.w	r7, r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800191e:	f640 633c 	movw	r3, #3644	; 0xe3c
 8001922:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001926:	79fa      	ldrb	r2, [r7, #7]
 8001928:	601a      	str	r2, [r3, #0]
}
 800192a:	f107 070c 	add.w	r7, r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800193e:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8001942:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001946:	79fa      	ldrb	r2, [r7, #7]
 8001948:	601a      	str	r2, [r3, #0]
}
 800194a:	f107 070c 	add.w	r7, r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 800195c:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8001960:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	601a      	str	r2, [r3, #0]
}
 8001968:	f107 070c 	add.w	r7, r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop

08001974 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00c      	beq.n	80019a0 <RCC_AHB1PeriphClockCmd+0x2c>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001986:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800198a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800198e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001992:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001996:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	430a      	orrs	r2, r1
 800199c:	631a      	str	r2, [r3, #48]	; 0x30
 800199e:	e00d      	b.n	80019bc <RCC_AHB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80019a0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80019ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	ea6f 0202 	mvn.w	r2, r2
 80019b8:	400a      	ands	r2, r1
 80019ba:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80019bc:	f107 070c 	add.w	r7, r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00c      	beq.n	80019f4 <RCC_AHB2PeriphClockCmd+0x2c>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80019da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019e2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80019e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019ea:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	635a      	str	r2, [r3, #52]	; 0x34
 80019f2:	e00d      	b.n	8001a10 <RCC_AHB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 80019f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a00:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a04:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	ea6f 0202 	mvn.w	r2, r2
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8001a10:	f107 070c 	add.w	r7, r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop

08001a1c <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00c      	beq.n	8001a48 <RCC_AHB3PeriphClockCmd+0x2c>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001a2e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a36:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a3a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a3e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	639a      	str	r2, [r3, #56]	; 0x38
 8001a46:	e00d      	b.n	8001a64 <RCC_AHB3PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8001a48:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a50:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a54:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a58:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	ea6f 0202 	mvn.w	r2, r2
 8001a60:	400a      	ands	r2, r1
 8001a62:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 8001a64:	f107 070c 	add.w	r7, r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop

08001a70 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00c      	beq.n	8001a9c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001a82:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a8a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a92:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40
 8001a9a:	e00d      	b.n	8001ab8 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001a9c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001aa0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001aa4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001aa8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001aac:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	ea6f 0202 	mvn.w	r2, r2
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8001ab8:	f107 070c 	add.w	r7, r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop

08001ac4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00c      	beq.n	8001af0 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001ad6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ada:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ade:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001ae2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ae6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	645a      	str	r2, [r3, #68]	; 0x44
 8001aee:	e00d      	b.n	8001b0c <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001af0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001af4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001af8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001afc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b00:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	ea6f 0202 	mvn.w	r2, r2
 8001b08:	400a      	ands	r2, r1
 8001b0a:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8001b0c:	f107 070c 	add.w	r7, r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop

08001b18 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00c      	beq.n	8001b44 <RCC_AHB1PeriphResetCmd+0x2c>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001b2a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b32:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001b36:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b3a:	6911      	ldr	r1, [r2, #16]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	611a      	str	r2, [r3, #16]
 8001b42:	e00d      	b.n	8001b60 <RCC_AHB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8001b44:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b4c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001b50:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b54:	6911      	ldr	r1, [r2, #16]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	ea6f 0202 	mvn.w	r2, r2
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	611a      	str	r2, [r3, #16]
  }
}
 8001b60:	f107 070c 	add.w	r7, r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop

08001b6c <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00c      	beq.n	8001b98 <RCC_AHB2PeriphResetCmd+0x2c>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001b7e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b86:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001b8a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b8e:	6951      	ldr	r1, [r2, #20]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	615a      	str	r2, [r3, #20]
 8001b96:	e00d      	b.n	8001bb4 <RCC_AHB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8001b98:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ba0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001ba4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ba8:	6951      	ldr	r1, [r2, #20]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	ea6f 0202 	mvn.w	r2, r2
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	615a      	str	r2, [r3, #20]
  }
}
 8001bb4:	f107 070c 	add.w	r7, r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop

08001bc0 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00c      	beq.n	8001bec <RCC_AHB3PeriphResetCmd+0x2c>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001bd2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001bd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bda:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001bde:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001be2:	6991      	ldr	r1, [r2, #24]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	619a      	str	r2, [r3, #24]
 8001bea:	e00d      	b.n	8001c08 <RCC_AHB3PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8001bec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001bf0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bf4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001bf8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bfc:	6991      	ldr	r1, [r2, #24]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	ea6f 0202 	mvn.w	r2, r2
 8001c04:	400a      	ands	r2, r1
 8001c06:	619a      	str	r2, [r3, #24]
  }
}
 8001c08:	f107 070c 	add.w	r7, r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop

08001c14 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00c      	beq.n	8001c40 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001c26:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c2e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001c32:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c36:	6a11      	ldr	r1, [r2, #32]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	621a      	str	r2, [r3, #32]
 8001c3e:	e00d      	b.n	8001c5c <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001c40:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c48:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001c4c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c50:	6a11      	ldr	r1, [r2, #32]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	ea6f 0202 	mvn.w	r2, r2
 8001c58:	400a      	ands	r2, r1
 8001c5a:	621a      	str	r2, [r3, #32]
  }
}
 8001c5c:	f107 070c 	add.w	r7, r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop

08001c68 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00c      	beq.n	8001c94 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001c7a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c82:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001c86:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c8a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24
 8001c92:	e00d      	b.n	8001cb0 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001c94:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c9c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001ca0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ca4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	ea6f 0202 	mvn.w	r2, r2
 8001cac:	400a      	ands	r2, r1
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8001cb0:	f107 070c 	add.w	r7, r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop

08001cbc <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00c      	beq.n	8001ce8 <RCC_AHB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001cce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cd2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cd6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001cda:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cde:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	651a      	str	r2, [r3, #80]	; 0x50
 8001ce6:	e00d      	b.n	8001d04 <RCC_AHB1PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8001ce8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cf0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001cf4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cf8:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	ea6f 0202 	mvn.w	r2, r2
 8001d00:	400a      	ands	r2, r1
 8001d02:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 8001d04:	f107 070c 	add.w	r7, r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop

08001d10 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00c      	beq.n	8001d3c <RCC_AHB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001d22:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d2a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001d2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d32:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
 8001d3a:	e00d      	b.n	8001d58 <RCC_AHB2PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8001d3c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d44:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001d48:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d4c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	ea6f 0202 	mvn.w	r2, r2
 8001d54:	400a      	ands	r2, r1
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 8001d58:	f107 070c 	add.w	r7, r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop

08001d64 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00c      	beq.n	8001d90 <RCC_AHB3PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001d76:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d7e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001d82:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d86:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	659a      	str	r2, [r3, #88]	; 0x58
 8001d8e:	e00d      	b.n	8001dac <RCC_AHB3PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8001d90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d98:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001d9c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001da0:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	ea6f 0202 	mvn.w	r2, r2
 8001da8:	400a      	ands	r2, r1
 8001daa:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8001dac:	f107 070c 	add.w	r7, r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop

08001db8 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00c      	beq.n	8001de4 <RCC_APB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001dca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001dce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dd2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001dd6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001dda:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	661a      	str	r2, [r3, #96]	; 0x60
 8001de2:	e00d      	b.n	8001e00 <RCC_APB1PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8001de4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001de8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001df0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001df4:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	ea6f 0202 	mvn.w	r2, r2
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 8001e00:	f107 070c 	add.w	r7, r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop

08001e0c <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00c      	beq.n	8001e38 <RCC_APB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001e1e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e26:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001e2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e2e:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	665a      	str	r2, [r3, #100]	; 0x64
 8001e36:	e00d      	b.n	8001e54 <RCC_APB2PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8001e38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e40:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001e44:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e48:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	ea6f 0202 	mvn.w	r2, r2
 8001e50:	400a      	ands	r2, r1
 8001e52:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 8001e54:	f107 070c 	add.w	r7, r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop

08001e60 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	71fa      	strb	r2, [r7, #7]
 8001e6c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e6e:	79bb      	ldrb	r3, [r7, #6]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00e      	beq.n	8001e92 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001e74:	f643 030d 	movw	r3, #14349	; 0x380d
 8001e78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e7c:	f643 020d 	movw	r2, #14349	; 0x380d
 8001e80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e84:	7812      	ldrb	r2, [r2, #0]
 8001e86:	b2d1      	uxtb	r1, r2
 8001e88:	79fa      	ldrb	r2, [r7, #7]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	701a      	strb	r2, [r3, #0]
 8001e90:	e010      	b.n	8001eb4 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001e92:	f643 030d 	movw	r3, #14349	; 0x380d
 8001e96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e9a:	f643 020d 	movw	r2, #14349	; 0x380d
 8001e9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	b2d1      	uxtb	r1, r2
 8001ea6:	79fa      	ldrb	r2, [r7, #7]
 8001ea8:	ea6f 0202 	mvn.w	r2, r2
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	400a      	ands	r2, r1
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]
  }
}
 8001eb4:	f107 070c 	add.w	r7, r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop

08001ec0 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d106      	bne.n	8001efa <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 8001eec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ef0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	e00f      	b.n	8001f1a <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d106      	bne.n	8001f0e <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 8001f00:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	e005      	b.n	8001f1a <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001f0e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f18:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
 8001f34:	f04f 0301 	mov.w	r3, #1
 8001f38:	74fb      	strb	r3, [r7, #19]
 8001f3a:	e002      	b.n	8001f42 <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8001f42:	7cfb      	ldrb	r3, [r7, #19]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	f107 071c 	add.w	r7, r7, #28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001f54:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f5c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001f60:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f64:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f66:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001f6a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop

08001f74 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001f84:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
 8001f96:	f04f 0301 	mov.w	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	e002      	b.n	8001fa4 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f107 0714 	add.w	r7, r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop

08001fb4 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001fbe:	f643 030e 	movw	r3, #14350	; 0x380e
 8001fc2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fc6:	79fa      	ldrb	r2, [r7, #7]
 8001fc8:	701a      	strb	r2, [r3, #0]
}
 8001fca:	f107 070c 	add.w	r7, r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d10c      	bne.n	8002004 <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8001fea:	f04f 0010 	mov.w	r0, #16
 8001fee:	f04f 0101 	mov.w	r1, #1
 8001ff2:	f7ff fe39 	bl	8001c68 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8001ff6:	f04f 0010 	mov.w	r0, #16
 8001ffa:	f04f 0100 	mov.w	r1, #0
 8001ffe:	f7ff fe33 	bl	8001c68 <RCC_APB2PeriphResetCmd>
 8002002:	e062      	b.n	80020ca <USART_DeInit+0xf6>
  }
  else if (USARTx == USART2)
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800200a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800200e:	429a      	cmp	r2, r3
 8002010:	d10c      	bne.n	800202c <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002012:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002016:	f04f 0101 	mov.w	r1, #1
 800201a:	f7ff fdfb 	bl	8001c14 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800201e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	f7ff fdf5 	bl	8001c14 <RCC_APB1PeriphResetCmd>
 800202a:	e04e      	b.n	80020ca <USART_DeInit+0xf6>
  }
  else if (USARTx == USART3)
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002032:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002036:	429a      	cmp	r2, r3
 8002038:	d10c      	bne.n	8002054 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800203a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800203e:	f04f 0101 	mov.w	r1, #1
 8002042:	f7ff fde7 	bl	8001c14 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002046:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800204a:	f04f 0100 	mov.w	r1, #0
 800204e:	f7ff fde1 	bl	8001c14 <RCC_APB1PeriphResetCmd>
 8002052:	e03a      	b.n	80020ca <USART_DeInit+0xf6>
  }    
  else if (USARTx == UART4)
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 800205a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800205e:	429a      	cmp	r2, r3
 8002060:	d10c      	bne.n	800207c <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8002062:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002066:	f04f 0101 	mov.w	r1, #1
 800206a:	f7ff fdd3 	bl	8001c14 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 800206e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002072:	f04f 0100 	mov.w	r1, #0
 8002076:	f7ff fdcd 	bl	8001c14 <RCC_APB1PeriphResetCmd>
 800207a:	e026      	b.n	80020ca <USART_DeInit+0xf6>
  }
  else if (USARTx == UART5)
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002082:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002086:	429a      	cmp	r2, r3
 8002088:	d10c      	bne.n	80020a4 <USART_DeInit+0xd0>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800208a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800208e:	f04f 0101 	mov.w	r1, #1
 8002092:	f7ff fdbf 	bl	8001c14 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8002096:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800209a:	f04f 0100 	mov.w	r1, #0
 800209e:	f7ff fdb9 	bl	8001c14 <RCC_APB1PeriphResetCmd>
 80020a2:	e012      	b.n	80020ca <USART_DeInit+0xf6>
  }     
  else
  {
    if (USARTx == USART6)
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d10b      	bne.n	80020ca <USART_DeInit+0xf6>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 80020b2:	f04f 0020 	mov.w	r0, #32
 80020b6:	f04f 0101 	mov.w	r1, #1
 80020ba:	f7ff fdd5 	bl	8001c68 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80020be:	f04f 0020 	mov.w	r0, #32
 80020c2:	f04f 0100 	mov.w	r1, #0
 80020c6:	f7ff fdcf 	bl	8001c68 <RCC_APB2PeriphResetCmd>
    }
  }
}
 80020ca:	f107 0708 	add.w	r7, r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop

080020d4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80020ea:	f04f 0300 	mov.w	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	8a1b      	ldrh	r3, [r3, #16]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002104:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	88db      	ldrh	r3, [r3, #6]
 800210a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210c:	4313      	orrs	r3, r2
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	b29a      	uxth	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	899b      	ldrh	r3, [r3, #12]
 800211c:	b29b      	uxth	r3, r3
 800211e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002126:	f023 030c 	bic.w	r3, r3, #12
 800212a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	889a      	ldrh	r2, [r3, #4]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	891b      	ldrh	r3, [r3, #8]
 8002134:	4313      	orrs	r3, r2
 8002136:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800213c:	4313      	orrs	r3, r2
 800213e:	b29b      	uxth	r3, r3
 8002140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002142:	4313      	orrs	r3, r2
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	b29a      	uxth	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	8a9b      	ldrh	r3, [r3, #20]
 8002152:	b29b      	uxth	r3, r3
 8002154:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800215c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	899b      	ldrh	r3, [r3, #12]
 8002162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002164:	4313      	orrs	r3, r2
 8002166:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	b29a      	uxth	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff faad 	bl	80016d4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002180:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002184:	429a      	cmp	r2, r3
 8002186:	d006      	beq.n	8002196 <USART_Init+0xc2>
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800218e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002192:	429a      	cmp	r2, r3
 8002194:	d102      	bne.n	800219c <USART_Init+0xc8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	623b      	str	r3, [r7, #32]
 800219a:	e001      	b.n	80021a0 <USART_Init+0xcc>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	899b      	ldrh	r3, [r3, #12]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	da0f      	bge.n	80021ce <USART_Init+0xfa>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80021ae:	6a3a      	ldr	r2, [r7, #32]
 80021b0:	4613      	mov	r3, r2
 80021b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80021b6:	189b      	adds	r3, r3, r2
 80021b8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80021bc:	189a      	adds	r2, r3, r2
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80021c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	e00e      	b.n	80021ec <USART_Init+0x118>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80021ce:	6a3a      	ldr	r2, [r7, #32]
 80021d0:	4613      	mov	r3, r2
 80021d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80021d6:	189b      	adds	r3, r3, r2
 80021d8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80021dc:	189a      	adds	r2, r3, r2
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80021e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ea:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	f248 531f 	movw	r3, #34079	; 0x851f
 80021f2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80021f6:	fba3 1302 	umull	r1, r3, r3, r2
 80021fa:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80021fe:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002202:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800220a:	f04f 0264 	mov.w	r2, #100	; 0x64
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	899b      	ldrh	r3, [r3, #12]
 800221c:	b29b      	uxth	r3, r3
 800221e:	b29b      	uxth	r3, r3
 8002220:	b21b      	sxth	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	da12      	bge.n	800224c <USART_Init+0x178>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800222c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002230:	f248 531f 	movw	r3, #34079	; 0x851f
 8002234:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8002238:	fba3 1302 	umull	r1, r3, r3, r2
 800223c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002246:	4313      	orrs	r3, r2
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
 800224a:	e011      	b.n	8002270 <USART_Init+0x19c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002252:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002256:	f248 531f 	movw	r3, #34079	; 0x851f
 800225a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800225e:	fba3 1302 	umull	r1, r3, r3, r2
 8002262:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226c:	4313      	orrs	r3, r2
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	b29a      	uxth	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	811a      	strh	r2, [r3, #8]
}
 8002278:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800228e:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f04f 020c 	mov.w	r2, #12
 80022ae:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	819a      	strh	r2, [r3, #12]
}
 80022b8:	f107 070c 	add.w	r7, r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop

080022c4 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	8a1b      	ldrh	r3, [r3, #16]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022e2:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	881a      	ldrh	r2, [r3, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80022ec:	4313      	orrs	r3, r2
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	889b      	ldrh	r3, [r3, #4]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	88db      	ldrh	r3, [r3, #6]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	b29a      	uxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	821a      	strh	r2, [r3, #16]
}
 800230e:	f107 0714 	add.w	r7, r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	80da      	strh	r2, [r3, #6]
}
 8002340:	f107 070c 	add.w	r7, r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop

0800234c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	899b      	ldrh	r3, [r3, #12]
 8002362:	b29b      	uxth	r3, r3
 8002364:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002368:	b29a      	uxth	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	819a      	strh	r2, [r3, #12]
 800236e:	e007      	b.n	8002380 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	899b      	ldrh	r3, [r3, #12]
 8002374:	b29b      	uxth	r3, r3
 8002376:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800237a:	b29a      	uxth	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	819a      	strh	r2, [r3, #12]
  }
}
 8002380:	f107 070c 	add.w	r7, r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop

0800238c <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	8b1b      	ldrh	r3, [r3, #24]
 800239c:	b29b      	uxth	r3, r3
 800239e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	8b1b      	ldrh	r3, [r3, #24]
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	4313      	orrs	r3, r2
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	831a      	strh	r2, [r3, #24]
}
 80023ba:	f107 070c 	add.w	r7, r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00a      	beq.n	80023ec <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	899b      	ldrh	r3, [r3, #12]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	819a      	strh	r2, [r3, #12]
 80023ea:	e009      	b.n	8002400 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	899b      	ldrh	r3, [r3, #12]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	ea4f 4343 	mov.w	r3, r3, lsl #17
 80023f6:	ea4f 4353 	mov.w	r3, r3, lsr #17
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	819a      	strh	r2, [r3, #12]
  }
}  
 8002400:	f107 070c 	add.w	r7, r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop

0800240c <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	8a9b      	ldrh	r3, [r3, #20]
 8002422:	b29b      	uxth	r3, r3
 8002424:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002428:	b29a      	uxth	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	829a      	strh	r2, [r3, #20]
 800242e:	e007      	b.n	8002440 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	8a9b      	ldrh	r3, [r3, #20]
 8002434:	b29b      	uxth	r3, r3
 8002436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800243a:	b29a      	uxth	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	829a      	strh	r2, [r3, #20]
  }
}
 8002440:	f107 070c 	add.w	r7, r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop

0800244c <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002458:	887b      	ldrh	r3, [r7, #2]
 800245a:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800245e:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8002462:	b29a      	uxth	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	809a      	strh	r2, [r3, #4]
}
 8002468:	f107 070c 	add.w	r7, r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop

08002474 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	889b      	ldrh	r3, [r3, #4]
 8002480:	b29b      	uxth	r3, r3
 8002482:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8002486:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800248a:	b29b      	uxth	r3, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	f107 070c 	add.w	r7, r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	8a1b      	ldrh	r3, [r3, #16]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	f023 030f 	bic.w	r3, r3, #15
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	8a1b      	ldrh	r3, [r3, #16]
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	4313      	orrs	r3, r2
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	821a      	strh	r2, [r3, #16]
}
 80024c6:	f107 070c 	add.w	r7, r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	899b      	ldrh	r3, [r3, #12]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	819a      	strh	r2, [r3, #12]
 80024f2:	e007      	b.n	8002504 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	899b      	ldrh	r3, [r3, #12]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	f023 0302 	bic.w	r3, r3, #2
 80024fe:	b29a      	uxth	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	819a      	strh	r2, [r3, #12]
  }
}
 8002504:	f107 070c 	add.w	r7, r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop

08002510 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	899b      	ldrh	r3, [r3, #12]
 8002520:	b29b      	uxth	r3, r3
 8002522:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002526:	b29a      	uxth	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	899b      	ldrh	r3, [r3, #12]
 8002530:	b29a      	uxth	r2, r3
 8002532:	887b      	ldrh	r3, [r7, #2]
 8002534:	4313      	orrs	r3, r2
 8002536:	b29a      	uxth	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	819a      	strh	r2, [r3, #12]
}
 800253c:	f107 070c 	add.w	r7, r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop

08002548 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	8a1b      	ldrh	r3, [r3, #16]
 8002558:	b29b      	uxth	r3, r3
 800255a:	f023 0320 	bic.w	r3, r3, #32
 800255e:	b29a      	uxth	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	8a1b      	ldrh	r3, [r3, #16]
 8002568:	b29a      	uxth	r2, r3
 800256a:	887b      	ldrh	r3, [r7, #2]
 800256c:	4313      	orrs	r3, r2
 800256e:	b29a      	uxth	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	821a      	strh	r2, [r3, #16]
}
 8002574:	f107 070c 	add.w	r7, r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop

08002580 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d008      	beq.n	80025a4 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	8a1b      	ldrh	r3, [r3, #16]
 8002596:	b29b      	uxth	r3, r3
 8002598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	821a      	strh	r2, [r3, #16]
 80025a2:	e007      	b.n	80025b4 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	8a1b      	ldrh	r3, [r3, #16]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	821a      	strh	r2, [r3, #16]
  }
}
 80025b4:	f107 070c 	add.w	r7, r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop

080025c0 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	899b      	ldrh	r3, [r3, #12]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	819a      	strh	r2, [r3, #12]
}
 80025d8:	f107 070c 	add.w	r7, r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop

080025e4 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	8a9b      	ldrh	r3, [r3, #20]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f043 0308 	orr.w	r3, r3, #8
 8002600:	b29a      	uxth	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	829a      	strh	r2, [r3, #20]
 8002606:	e007      	b.n	8002618 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	8a9b      	ldrh	r3, [r3, #20]
 800260c:	b29b      	uxth	r3, r3
 800260e:	f023 0308 	bic.w	r3, r3, #8
 8002612:	b29a      	uxth	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	829a      	strh	r2, [r3, #20]
  }
}
 8002618:	f107 070c 	add.w	r7, r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop

08002624 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8b1b      	ldrh	r3, [r3, #24]
 8002634:	b29b      	uxth	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	b29a      	uxth	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	8b1b      	ldrh	r3, [r3, #24]
 8002642:	b29a      	uxth	r2, r3
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	b29b      	uxth	r3, r3
 8002648:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800264c:	b29b      	uxth	r3, r3
 800264e:	4313      	orrs	r3, r2
 8002650:	b29a      	uxth	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	831a      	strh	r2, [r3, #24]
}
 8002656:	f107 070c 	add.w	r7, r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	8a9b      	ldrh	r3, [r3, #20]
 8002676:	b29b      	uxth	r3, r3
 8002678:	f043 0320 	orr.w	r3, r3, #32
 800267c:	b29a      	uxth	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	829a      	strh	r2, [r3, #20]
 8002682:	e007      	b.n	8002694 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8a9b      	ldrh	r3, [r3, #20]
 8002688:	b29b      	uxth	r3, r3
 800268a:	f023 0320 	bic.w	r3, r3, #32
 800268e:	b29a      	uxth	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	829a      	strh	r2, [r3, #20]
  }
}
 8002694:	f107 070c 	add.w	r7, r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop

080026a0 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d008      	beq.n	80026c4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8a9b      	ldrh	r3, [r3, #20]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f043 0310 	orr.w	r3, r3, #16
 80026bc:	b29a      	uxth	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	829a      	strh	r2, [r3, #20]
 80026c2:	e007      	b.n	80026d4 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	8a9b      	ldrh	r3, [r3, #20]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f023 0310 	bic.w	r3, r3, #16
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	829a      	strh	r2, [r3, #20]
  }
}
 80026d4:	f107 070c 	add.w	r7, r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop

080026e0 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	8a9b      	ldrh	r3, [r3, #20]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	f023 0304 	bic.w	r3, r3, #4
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	8a9b      	ldrh	r3, [r3, #20]
 8002700:	b29a      	uxth	r2, r3
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	4313      	orrs	r3, r2
 8002706:	b29a      	uxth	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	829a      	strh	r2, [r3, #20]
}
 800270c:	f107 070c 	add.w	r7, r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop

08002718 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d008      	beq.n	800273c <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	8a9b      	ldrh	r3, [r3, #20]
 800272e:	b29b      	uxth	r3, r3
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	b29a      	uxth	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	829a      	strh	r2, [r3, #20]
 800273a:	e007      	b.n	800274c <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	8a9b      	ldrh	r3, [r3, #20]
 8002740:	b29b      	uxth	r3, r3
 8002742:	f023 0302 	bic.w	r3, r3, #2
 8002746:	b29a      	uxth	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	829a      	strh	r2, [r3, #20]
  }
}
 800274c:	f107 070c 	add.w	r7, r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop

08002758 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	460a      	mov	r2, r1
 8002764:	807a      	strh	r2, [r7, #2]
 8002766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8002768:	787b      	ldrb	r3, [r7, #1]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d008      	beq.n	8002780 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	8a9b      	ldrh	r3, [r3, #20]
 8002772:	b29a      	uxth	r2, r3
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	4313      	orrs	r3, r2
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	829a      	strh	r2, [r3, #20]
 800277e:	e00a      	b.n	8002796 <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	8a9b      	ldrh	r3, [r3, #20]
 8002784:	b29a      	uxth	r2, r3
 8002786:	887b      	ldrh	r3, [r7, #2]
 8002788:	ea6f 0303 	mvn.w	r3, r3
 800278c:	b29b      	uxth	r3, r3
 800278e:	4013      	ands	r3, r2
 8002790:	b29a      	uxth	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	829a      	strh	r2, [r3, #20]
  }
}
 8002796:	f107 070c 	add.w	r7, r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	460a      	mov	r2, r1
 80027ac:	807a      	strh	r2, [r7, #2]
 80027ae:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80027cc:	887b      	ldrh	r3, [r7, #2]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80027d8:	887b      	ldrh	r3, [r7, #2]
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f04f 0201 	mov.w	r2, #1
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d104      	bne.n	80027fc <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f103 030c 	add.w	r3, r3, #12
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	e00b      	b.n	8002814 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d104      	bne.n	800280c <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f103 0310 	add.w	r3, r3, #16
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	e003      	b.n	8002814 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f103 0314 	add.w	r3, r3, #20
 8002812:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8002814:	787b      	ldrb	r3, [r7, #1]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d006      	beq.n	8002828 <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	6811      	ldr	r1, [r2, #0]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	430a      	orrs	r2, r1
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e007      	b.n	8002838 <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	6811      	ldr	r1, [r2, #0]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	ea6f 0202 	mvn.w	r2, r2
 8002834:	400a      	ands	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
  }
}
 8002838:	f107 071c 	add.w	r7, r7, #28
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop

08002844 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	b29a      	uxth	r2, r3
 800285c:	887b      	ldrh	r3, [r7, #2]
 800285e:	4013      	ands	r3, r2
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8002866:	f04f 0301 	mov.w	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	e002      	b.n	8002874 <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002874:	7bfb      	ldrb	r3, [r7, #15]
}
 8002876:	4618      	mov	r0, r3
 8002878:	f107 0714 	add.w	r7, r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop

08002884 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002890:	887b      	ldrh	r3, [r7, #2]
 8002892:	ea6f 0303 	mvn.w	r3, r3
 8002896:	b29a      	uxth	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	801a      	strh	r2, [r3, #0]
}
 800289c:	f107 070c 	add.w	r7, r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop

080028a8 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80028cc:	887b      	ldrh	r3, [r7, #2]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80028d8:	887b      	ldrh	r3, [r7, #2]
 80028da:	f003 031f 	and.w	r3, r3, #31
 80028de:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f04f 0201 	mov.w	r2, #1
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d106      	bne.n	8002900 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	899b      	ldrh	r3, [r3, #12]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4013      	ands	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e00f      	b.n	8002920 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d106      	bne.n	8002914 <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	8a1b      	ldrh	r3, [r3, #16]
 800290a:	b29b      	uxth	r3, r3
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	4013      	ands	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e005      	b.n	8002920 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	8a9b      	ldrh	r3, [r3, #20]
 8002918:	b29b      	uxth	r3, r3
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4013      	ands	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8002920:	887b      	ldrh	r3, [r7, #2]
 8002922:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8002926:	b29b      	uxth	r3, r3
 8002928:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f04f 0201 	mov.w	r2, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4013      	ands	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <USART_GetITStatus+0xae>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
 800294e:	f04f 0301 	mov.w	r3, #1
 8002952:	74fb      	strb	r3, [r7, #19]
 8002954:	e002      	b.n	800295c <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800295c:	7cfb      	ldrb	r3, [r7, #19]
}
 800295e:	4618      	mov	r0, r3
 8002960:	f107 071c 	add.w	r7, r7, #28
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop

0800296c <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	81fb      	strh	r3, [r7, #14]
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8002984:	887b      	ldrh	r3, [r7, #2]
 8002986:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800298a:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800298c:	89fb      	ldrh	r3, [r7, #14]
 800298e:	f04f 0201 	mov.w	r2, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8002998:	89bb      	ldrh	r3, [r7, #12]
 800299a:	ea6f 0303 	mvn.w	r3, r3
 800299e:	b29a      	uxth	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	801a      	strh	r2, [r3, #0]
}
 80029a4:	f107 0714 	add.w	r7, r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop

080029b0 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	6039      	str	r1, [r7, #0]
 80029ba:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80029bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	da10      	bge.n	80029e6 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80029c4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80029c8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80029cc:	79fa      	ldrb	r2, [r7, #7]
 80029ce:	f002 020f 	and.w	r2, r2, #15
 80029d2:	f1a2 0104 	sub.w	r1, r2, #4
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	185b      	adds	r3, r3, r1
 80029e2:	761a      	strb	r2, [r3, #24]
 80029e4:	e00d      	b.n	8002a02 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80029e6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80029ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80029ee:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	185b      	adds	r3, r3, r1
 80029fe:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a02:	f107 070c 	add.w	r7, r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d902      	bls.n	8002a24 <SysTick_Config+0x18>
 8002a1e:	f04f 0301 	mov.w	r3, #1
 8002a22:	e01f      	b.n	8002a64 <SysTick_Config+0x58>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8002a24:	f24e 0310 	movw	r3, #57360	; 0xe010
 8002a28:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002a32:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8002a36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a3c:	f04f 010f 	mov.w	r1, #15
 8002a40:	f7ff ffb6 	bl	80029b0 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002a44:	f24e 0310 	movw	r3, #57360	; 0xe010
 8002a48:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 8002a52:	f24e 0310 	movw	r3, #57360	; 0xe010
 8002a56:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002a5a:	f04f 0207 	mov.w	r2, #7
 8002a5e:	601a      	str	r2, [r3, #0]
  return (0);                                                  /* Function successful */
 8002a60:	f04f 0300 	mov.w	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	f107 0708 	add.w	r7, r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop

08002a70 <main>:
#include "gpio.h"
//#include "delay.h"
#include "systick.h"
#include "usart.h"

int main(void) {
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b09b      	sub	sp, #108	; 0x6c
 8002a74:	af00      	add	r7, sp, #0
	uint16_t count = 0;
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	uint32_t dval = 230;
 8002a7e:	f04f 03e6 	mov.w	r3, #230	; 0xe6
 8002a82:	663b      	str	r3, [r7, #96]	; 0x60
	uint32_t intval = 16;
 8002a84:	f04f 0310 	mov.w	r3, #16
 8002a88:	65fb      	str	r3, [r7, #92]	; 0x5c
	char tmp[92];
	
	SysTick_Config(SystemCoreClock/1000);
 8002a8a:	f240 03c4 	movw	r3, #196	; 0xc4
 8002a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8002a98:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8002a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002aa0:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ffb1 	bl	8002a0c <SysTick_Config>

	usart_begin(USART3, 19200);
 8002aaa:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8002aae:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002ab2:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8002ab6:	f7fd fde9 	bl	800068c <usart_begin>
	usart_print(USART3, "Happy are those who know they are spiritually poor; \n");
 8002aba:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8002abe:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002ac2:	f248 516c 	movw	r1, #34156	; 0x856c
 8002ac6:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002aca:	f7fd ff1f 	bl	800090c <usart_print>
	usart_print(USART3, "The kingdom of heaven belongs to them!\n");
 8002ace:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8002ad2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002ad6:	f248 51a4 	movw	r1, #34212	; 0x85a4
 8002ada:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002ade:	f7fd ff15 	bl	800090c <usart_print>
//	sprintf(tmp, "port = %d\n", Serial3.port());
//	usart3_print(tmp);
	usart_print(USART3, "\nHow many eyes does Mississipi river have?\n");
 8002ae2:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8002ae6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002aea:	f248 51cc 	movw	r1, #34252	; 0x85cc
 8002aee:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002af2:	f7fd ff0b 	bl	800090c <usart_print>
	usart_flush(USART3);
 8002af6:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8002afa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002afe:	f7fd ff45 	bl	800098c <usart_flush>

	pinMode(PD12 | PD13 | PD14 | PD15, GPIO_Mode_OUT);
 8002b02:	f44f 209e 	mov.w	r0, #323584	; 0x4f000
 8002b06:	f04f 0101 	mov.w	r1, #1
 8002b0a:	f7fd fb3d 	bl	8000188 <pinMode>
 8002b0e:	e000      	b.n	8002b12 <main+0xa2>
		//GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	while (1) {
 8002b10:	bf00      	nop
		digitalWrite(PD15, SET);
 8002b12:	f44f 2090 	mov.w	r0, #294912	; 0x48000
 8002b16:	f04f 0101 	mov.w	r1, #1
 8002b1a:	f7fd fbab 	bl	8000274 <digitalWrite>
		digitalWrite(PD12 | PD13 | PD14, RESET);
 8002b1e:	f44f 208e 	mov.w	r0, #290816	; 0x47000
 8002b22:	f04f 0100 	mov.w	r1, #0
 8002b26:	f7fd fba5 	bl	8000274 <digitalWrite>
		SysTick_delay(intval);
 8002b2a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002b2c:	f7fd fc82 	bl	8000434 <SysTick_delay>
		digitalWrite(PD12, SET);
 8002b30:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 8002b34:	f04f 0101 	mov.w	r1, #1
 8002b38:	f7fd fb9c 	bl	8000274 <digitalWrite>
		digitalWrite(PD13 | PD14 | PD15, RESET);
 8002b3c:	f44f 209c 	mov.w	r0, #319488	; 0x4e000
 8002b40:	f04f 0100 	mov.w	r1, #0
 8002b44:	f7fd fb96 	bl	8000274 <digitalWrite>
		SysTick_delay(intval);
 8002b48:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002b4a:	f7fd fc73 	bl	8000434 <SysTick_delay>
		digitalWrite(PD13, SET);
 8002b4e:	f44f 2084 	mov.w	r0, #270336	; 0x42000
 8002b52:	f04f 0101 	mov.w	r1, #1
 8002b56:	f7fd fb8d 	bl	8000274 <digitalWrite>
		digitalWrite(PD12 | PD14 | PD15, RESET);
 8002b5a:	f44f 209a 	mov.w	r0, #315392	; 0x4d000
 8002b5e:	f04f 0100 	mov.w	r1, #0
 8002b62:	f7fd fb87 	bl	8000274 <digitalWrite>
		SysTick_delay(intval);
 8002b66:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002b68:	f7fd fc64 	bl	8000434 <SysTick_delay>
		digitalWrite(PD14, SET);
 8002b6c:	f44f 2088 	mov.w	r0, #278528	; 0x44000
 8002b70:	f04f 0101 	mov.w	r1, #1
 8002b74:	f7fd fb7e 	bl	8000274 <digitalWrite>
		digitalWrite(PD12 | PD13 | PD15, RESET);
 8002b78:	f44f 2096 	mov.w	r0, #307200	; 0x4b000
 8002b7c:	f04f 0100 	mov.w	r1, #0
 8002b80:	f7fd fb78 	bl	8000274 <digitalWrite>
		SysTick_delay(intval);
 8002b84:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002b86:	f7fd fc55 	bl	8000434 <SysTick_delay>
		//
		digitalWrite(PD15, SET);
 8002b8a:	f44f 2090 	mov.w	r0, #294912	; 0x48000
 8002b8e:	f04f 0101 	mov.w	r1, #1
 8002b92:	f7fd fb6f 	bl	8000274 <digitalWrite>
		digitalWrite(PD12 | PD13 | PD14, RESET);
 8002b96:	f44f 208e 	mov.w	r0, #290816	; 0x47000
 8002b9a:	f04f 0100 	mov.w	r1, #0
 8002b9e:	f7fd fb69 	bl	8000274 <digitalWrite>
		SysTick_delay(dval);
 8002ba2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002ba4:	f7fd fc46 	bl	8000434 <SysTick_delay>
/*
		usart3.print((float)(count++ / 32.0f), 3);
		*/
		count++;
 8002ba8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002bac:	f103 0301 	add.w	r3, r3, #1
 8002bb0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
//		uint16_t h, t;
//		h = tx_head();
//		t = tx_tail();
		sprintf(tmp, /*"head =% 4d, tail =% 4d,*/ "%04X\n", count);
 8002bb4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002bb8:	463a      	mov	r2, r7
 8002bba:	4610      	mov	r0, r2
 8002bbc:	f248 51f8 	movw	r1, #34296	; 0x85f8
 8002bc0:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f000 fcf1 	bl	80035ac <sprintf>
		usart_print(USART3, tmp);
 8002bca:	463b      	mov	r3, r7
 8002bcc:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8002bd0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f7fd fe99 	bl	800090c <usart_print>
		/*
		dval = (uint32) (100.0f + 64*sinf( (count % (uint32)(3.14159 * 2 * 32))/32.0f));
		usart3.println(dval);
		*/
		uint16_t i;
		if ( usart_available(USART3) > 0 ) {
 8002bda:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8002bde:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002be2:	f7fd ff49 	bl	8000a78 <usart_available>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	bf0c      	ite	eq
 8002bec:	2300      	moveq	r3, #0
 8002bee:	2301      	movne	r3, #1
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d08c      	beq.n	8002b10 <main+0xa0>
			usart_write(USART3, usart_peek(USART3));
 8002bf6:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8002bfa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002bfe:	f7fd ff17 	bl	8000a30 <usart_peek>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8002c08:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f7fd fe5d 	bl	80008cc <usart_write>
			i = 0;
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			while ( usart_available(USART3) > 0 ) {
 8002c1a:	e014      	b.n	8002c46 <main+0x1d6>
				tmp[i++] = (char) usart_read(USART3);
 8002c1c:	f8b7 4064 	ldrh.w	r4, [r7, #100]	; 0x64
 8002c20:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8002c24:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002c28:	f7fd fe96 	bl	8000958 <usart_read>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002c34:	190b      	adds	r3, r1, r4
 8002c36:	f803 2c68 	strb.w	r2, [r3, #-104]
 8002c3a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c3e:	f103 0301 	add.w	r3, r3, #1
 8002c42:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		*/
		uint16_t i;
		if ( usart_available(USART3) > 0 ) {
			usart_write(USART3, usart_peek(USART3));
			i = 0;
			while ( usart_available(USART3) > 0 ) {
 8002c46:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8002c4a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002c4e:	f7fd ff13 	bl	8000a78 <usart_available>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf0c      	ite	eq
 8002c58:	2300      	moveq	r3, #0
 8002c5a:	2301      	movne	r3, #1
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1dc      	bne.n	8002c1c <main+0x1ac>
				tmp[i++] = (char) usart_read(USART3);
			}
			tmp[i] = 0;
 8002c62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c66:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002c6a:	18d3      	adds	r3, r2, r3
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f803 2c68 	strb.w	r2, [r3, #-104]
			usart_print(USART3, ": read: ");
 8002c74:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8002c78:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002c7c:	f248 6100 	movw	r1, #34304	; 0x8600
 8002c80:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002c84:	f7fd fe42 	bl	800090c <usart_print>
			usart_print(USART3, tmp);
 8002c88:	463b      	mov	r3, r7
 8002c8a:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8002c8e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002c92:	4619      	mov	r1, r3
 8002c94:	f7fd fe3a 	bl	800090c <usart_print>
			usart_print(USART3, "\n");
 8002c98:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8002c9c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002ca0:	f248 610c 	movw	r1, #34316	; 0x860c
 8002ca4:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002ca8:	f7fd fe30 	bl	800090c <usart_print>
	usart_flush(USART3);

	pinMode(PD12 | PD13 | PD14 | PD15, GPIO_Mode_OUT);
		//GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	while (1) {
 8002cac:	e730      	b.n	8002b10 <main+0xa0>
 8002cae:	bf00      	nop

08002cb0 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	_write(1, "exit", 4);
 8002cb8:	f04f 0001 	mov.w	r0, #1
 8002cbc:	f248 6110 	movw	r1, #34320	; 0x8610
 8002cc0:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002cc4:	f04f 0204 	mov.w	r2, #4
 8002cc8:	f000 f97c 	bl	8002fc4 <_write>
	while (1) {
		;
	}
 8002ccc:	e7fe      	b.n	8002ccc <_exit+0x1c>
 8002cce:	bf00      	nop

08002cd0 <_close>:
}

int _close(int file) {
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	return -1;
 8002cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f107 070c 	add.w	r7, r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
 8002cf4:	f241 0308 	movw	r3, #4104	; 0x1008
 8002cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cfc:	f04f 020c 	mov.w	r2, #12
 8002d00:	601a      	str	r2, [r3, #0]
	return -1;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	f107 0714 	add.w	r7, r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop

08002d14 <_fork>:
/*
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
	errno = EAGAIN;
 8002d18:	f241 0308 	movw	r3, #4104	; 0x1008
 8002d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d20:	f04f 020b 	mov.w	r2, #11
 8002d24:	601a      	str	r2, [r3, #0]
	return -1;
 8002d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop

08002d34 <_fstat>:
 fstat
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d44:	605a      	str	r2, [r3, #4]
	return 0;
 8002d46:	f04f 0300 	mov.w	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f107 070c 	add.w	r7, r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop

08002d58 <_getpid>:
/*
 getpid
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
	return 1;
 8002d5c:	f04f 0301 	mov.w	r3, #1
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <_isatty>:

/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	switch (file) {
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f103 0300 	add.w	r3, r3, #0
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d802      	bhi.n	8002d80 <_isatty+0x18>
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 8002d7a:	f04f 0301 	mov.w	r3, #1
 8002d7e:	e008      	b.n	8002d92 <_isatty+0x2a>
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8002d80:	f241 0308 	movw	r3, #4104	; 0x1008
 8002d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d88:	f04f 0209 	mov.w	r2, #9
 8002d8c:	601a      	str	r2, [r3, #0]
		return 0;
 8002d8e:	f04f 0300 	mov.w	r3, #0
	}
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	f107 070c 	add.w	r7, r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop

08002da0 <_kill>:

/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002daa:	f241 0308 	movw	r3, #4104	; 0x1008
 8002dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002db2:	f04f 0216 	mov.w	r2, #22
 8002db6:	601a      	str	r2, [r3, #0]
	return (-1);
 8002db8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f107 070c 	add.w	r7, r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <_link>:
/*
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
 8002dd2:	f241 0308 	movw	r3, #4104	; 0x1008
 8002dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dda:	f04f 021f 	mov.w	r2, #31
 8002dde:	601a      	str	r2, [r3, #0]
	return -1;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	f107 070c 	add.w	r7, r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <_lseek>:

/*
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
	return 0;
 8002dfc:	f04f 0300 	mov.w	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	f107 0714 	add.w	r7, r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8002e0c:	b590      	push	{r4, r7, lr}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8002e14:	f640 1398 	movw	r3, #2456	; 0x998
 8002e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d108      	bne.n	8002e34 <_sbrk+0x28>
		heap_end = &_ebss;
 8002e22:	f640 1398 	movw	r3, #2456	; 0x998
 8002e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e2a:	f241 020c 	movw	r2, #4108	; 0x100c
 8002e2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002e32:	601a      	str	r2, [r3, #0]
	}
	prev_heap_end = heap_end;
 8002e34:	f640 1398 	movw	r3, #2456	; 0x998
 8002e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60fb      	str	r3, [r7, #12]
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8002e40:	f3ef 8408 	mrs	r4, MSP
  return(result);
 8002e44:	4623      	mov	r3, r4

	char * stack = (char*) __get_MSP();
 8002e46:	60bb      	str	r3, [r7, #8]
	if (heap_end + incr > stack) {
 8002e48:	f640 1398 	movw	r3, #2456	; 0x998
 8002e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	18d2      	adds	r2, r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d913      	bls.n	8002e84 <_sbrk+0x78>
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 8002e5c:	f04f 0002 	mov.w	r0, #2
 8002e60:	f248 6118 	movw	r1, #34328	; 0x8618
 8002e64:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002e68:	f04f 0219 	mov.w	r2, #25
 8002e6c:	f000 f8aa 	bl	8002fc4 <_write>
		errno = ENOMEM;
 8002e70:	f241 0308 	movw	r3, #4104	; 0x1008
 8002e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e78:	f04f 020c 	mov.w	r2, #12
 8002e7c:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e82:	e00c      	b.n	8002e9e <_sbrk+0x92>
		//abort ();
	}

	heap_end += incr;
 8002e84:	f640 1398 	movw	r3, #2456	; 0x998
 8002e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	18d2      	adds	r2, r2, r3
 8002e92:	f640 1398 	movw	r3, #2456	; 0x998
 8002e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e9a:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8002e9c:	68fb      	ldr	r3, [r7, #12]

}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f107 0714 	add.w	r7, r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd90      	pop	{r4, r7, pc}

08002ea8 <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	; 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
	int n;
	int num = 0;
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
	switch (file) {
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d129      	bne.n	8002f14 <_read+0x6c>
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	e020      	b.n	8002f0a <_read+0x62>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002ec8:	bf00      	nop
 8002eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ece:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f5      	beq.n	8002eca <_read+0x22>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 8002ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002ee6:	889b      	ldrh	r3, [r3, #4]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	75fb      	strb	r3, [r7, #23]
		char c = (char) (USART2->DR & (uint16_t) 0x01FF);
#elif STDIN_USART == 3
					while ((USART3->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
					char c = (char)(USART3->DR & (uint16_t)0x01FF);
#endif
					*ptr++ = c;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	7dfa      	ldrb	r2, [r7, #23]
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f103 0301 	add.w	r3, r3, #1
 8002ef8:	60bb      	str	r3, [r7, #8]
					num++;
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	f103 0301 	add.w	r3, r3, #1
 8002f00:	61bb      	str	r3, [r7, #24]
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f103 0301 	add.w	r3, r3, #1
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	dbda      	blt.n	8002ec8 <_read+0x20>
					char c = (char)(USART3->DR & (uint16_t)0x01FF);
#endif
					*ptr++ = c;
					num++;
				}
				break;
 8002f12:	e009      	b.n	8002f28 <_read+0x80>
				default:
				errno = EBADF;
 8002f14:	f241 0308 	movw	r3, #4104	; 0x1008
 8002f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f1c:	f04f 0209 	mov.w	r2, #9
 8002f20:	601a      	str	r2, [r3, #0]
				return -1;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f26:	e000      	b.n	8002f2a <_read+0x82>
			}
	return num;
 8002f28:	69bb      	ldr	r3, [r7, #24]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop

08002f38 <_stat>:
 stat
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f48:	605a      	str	r2, [r3, #4]
	return 0;
 8002f4a:	f04f 0300 	mov.w	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f107 070c 	add.w	r7, r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop

08002f5c <_times>:
/*
 times
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	return -1;
 8002f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f107 070c 	add.w	r7, r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <_unlink>:

/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
 8002f7c:	f241 0308 	movw	r3, #4104	; 0x1008
 8002f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f84:	f04f 0202 	mov.w	r2, #2
 8002f88:	601a      	str	r2, [r3, #0]
	return -1;
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f107 070c 	add.w	r7, r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop

08002f9c <_wait>:

/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
 8002fa4:	f241 0308 	movw	r3, #4104	; 0x1008
 8002fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fac:	f04f 020a 	mov.w	r2, #10
 8002fb0:	601a      	str	r2, [r3, #0]
	return -1;
 8002fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f107 070c 	add.w	r7, r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop

08002fc4 <_write>:
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
	int n;
	switch (file) {
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d002      	beq.n	8002fdc <_write+0x18>
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d023      	beq.n	8003022 <_write+0x5e>
 8002fda:	e045      	b.n	8003068 <_write+0xa4>
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	e019      	b.n	8003018 <_write+0x54>
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002fe4:	bf00      	nop
 8002fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f5      	beq.n	8002fe6 <_write+0x22>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	7812      	ldrb	r2, [r2, #0]
 8003006:	809a      	strh	r2, [r3, #4]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f103 0301 	add.w	r3, r3, #1
 800300e:	60bb      	str	r3, [r7, #8]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f103 0301 	add.w	r3, r3, #1
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	429a      	cmp	r2, r3
 800301e:	dbe1      	blt.n	8002fe4 <_write+0x20>
#elif  STDOUT_USART == 3
					while ((USART3->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
 8003020:	e02c      	b.n	800307c <_write+0xb8>
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	e019      	b.n	800305e <_write+0x9a>
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800302a:	bf00      	nop
 800302c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003030:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	b29b      	uxth	r3, r3
 8003038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f5      	beq.n	800302c <_write+0x68>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8003040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003044:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	7812      	ldrb	r2, [r2, #0]
 800304c:	809a      	strh	r2, [r3, #4]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f103 0301 	add.w	r3, r3, #1
 8003054:	60bb      	str	r3, [r7, #8]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f103 0301 	add.w	r3, r3, #1
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	429a      	cmp	r2, r3
 8003064:	dbe1      	blt.n	800302a <_write+0x66>
#elif  STDERR_USART == 3
					while ((USART3->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
 8003066:	e009      	b.n	800307c <_write+0xb8>
				default:
				errno = EBADF;
 8003068:	f241 0308 	movw	r3, #4104	; 0x1008
 800306c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003070:	f04f 0209 	mov.w	r2, #9
 8003074:	601a      	str	r2, [r3, #0]
				return -1;
 8003076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800307a:	e000      	b.n	800307e <_write+0xba>
			}
	return len;
 800307c:	687b      	ldr	r3, [r7, #4]
}
 800307e:	4618      	mov	r0, r3
 8003080:	f107 071c 	add.w	r7, r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	08008804 	.word	0x08008804
 8003090:	20000000 	.word	0x20000000
 8003094:	20000994 	.word	0x20000994
 8003098:	20000994 	.word	0x20000994
 800309c:	2000100c 	.word	0x2000100c

080030a0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
}
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop

080030ac <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80030b0:	e7fe      	b.n	80030b0 <HardFault_Handler+0x4>
 80030b2:	bf00      	nop

080030b4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80030b8:	e7fe      	b.n	80030b8 <MemManage_Handler+0x4>
 80030ba:	bf00      	nop

080030bc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80030c0:	e7fe      	b.n	80030c0 <BusFault_Handler+0x4>
 80030c2:	bf00      	nop

080030c4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80030c8:	e7fe      	b.n	80030c8 <UsageFault_Handler+0x4>
 80030ca:	bf00      	nop

080030cc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
}
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop

080030d8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
}
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop

080030e4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
}
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop

080030f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80030f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80030f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80030fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003100:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800310c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003110:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800311a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800311e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003122:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003126:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003130:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003134:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003136:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800313a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800313e:	f243 0210 	movw	r2, #12304	; 0x3010
 8003142:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8003146:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003148:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800314c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003150:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003154:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800315e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003160:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003164:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800316e:	f000 f8c1 	bl	80032f4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003172:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003176:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800317a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800317e:	609a      	str	r2, [r3, #8]
#endif
}
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop

08003184 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	f04f 0302 	mov.w	r3, #2
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	f04f 0302 	mov.w	r3, #2
 80031a6:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80031a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80031ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d00d      	beq.n	80031da <SystemCoreClockUpdate+0x56>
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d015      	beq.n	80031ee <SystemCoreClockUpdate+0x6a>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d169      	bne.n	800329a <SystemCoreClockUpdate+0x116>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80031c6:	f240 03c4 	movw	r3, #196	; 0xc4
 80031ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031ce:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 80031d2:	f2c0 02f4 	movt	r2, #244	; 0xf4
 80031d6:	601a      	str	r2, [r3, #0]
      break;
 80031d8:	e069      	b.n	80032ae <SystemCoreClockUpdate+0x12a>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80031da:	f240 03c4 	movw	r3, #196	; 0xc4
 80031de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031e2:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 80031e6:	f2c0 027a 	movt	r2, #122	; 0x7a
 80031ea:	601a      	str	r2, [r3, #0]
      break;
 80031ec:	e05f      	b.n	80032ae <SystemCoreClockUpdate+0x12a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80031ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80031f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fc:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8003200:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003202:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003206:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003210:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d014      	beq.n	8003242 <SystemCoreClockUpdate+0xbe>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003218:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800321c:	f2c0 037a 	movt	r3, #122	; 0x7a
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	fbb3 f2f2 	udiv	r2, r3, r2
 8003226:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800322a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003234:	400b      	ands	r3, r1
 8003236:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800323a:	fb03 f302 	mul.w	r3, r3, r2
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	e013      	b.n	800326a <SystemCoreClockUpdate+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003242:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8003246:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003250:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003254:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003258:	6859      	ldr	r1, [r3, #4]
 800325a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800325e:	400b      	ands	r3, r1
 8003260:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8003264:	fb03 f302 	mul.w	r3, r3, r2
 8003268:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800326a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800326e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003278:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800327c:	f103 0301 	add.w	r3, r3, #1
 8003280:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003284:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	fbb2 f2f3 	udiv	r2, r2, r3
 800328e:	f240 03c4 	movw	r3, #196	; 0xc4
 8003292:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003296:	601a      	str	r2, [r3, #0]
      break;
 8003298:	e009      	b.n	80032ae <SystemCoreClockUpdate+0x12a>
    default:
      SystemCoreClock = HSI_VALUE;
 800329a:	f240 03c4 	movw	r3, #196	; 0xc4
 800329e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032a2:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 80032a6:	f2c0 02f4 	movt	r2, #244	; 0xf4
 80032aa:	601a      	str	r2, [r3, #0]
      break;
 80032ac:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80032ae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80032b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032bc:	ea4f 1213 	mov.w	r2, r3, lsr #4
 80032c0:	f240 03c8 	movw	r3, #200	; 0xc8
 80032c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032c8:	5c9b      	ldrb	r3, [r3, r2]
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80032ce:	f240 03c4 	movw	r3, #196	; 0xc4
 80032d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	fa22 f203 	lsr.w	r2, r2, r3
 80032de:	f240 03c4 	movw	r3, #196	; 0xc4
 80032e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032e6:	601a      	str	r2, [r3, #0]
}
 80032e8:	f107 071c 	add.w	r7, r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop

080032f4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003306:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800330a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800330e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003312:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800331c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800331e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003322:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332c:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f103 0301 	add.w	r3, r3, #1
 8003334:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d103      	bne.n	8003344 <SetSysClock+0x50>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003342:	d1ec      	bne.n	800331e <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003344:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003348:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 8003356:	f04f 0301 	mov.w	r3, #1
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	e002      	b.n	8003364 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b01      	cmp	r3, #1
 8003368:	f040 8082 	bne.w	8003470 <SetSysClock+0x17c>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800336c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003370:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003374:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003378:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800337c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800337e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003384:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003388:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800338c:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8003390:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800339a:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800339c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80033a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80033a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80033a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80033ac:	6892      	ldr	r2, [r2, #8]
 80033ae:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80033b0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80033b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80033b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80033bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80033c0:	6892      	ldr	r2, [r2, #8]
 80033c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033c6:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80033c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80033cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80033d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80033d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80033d8:	6892      	ldr	r2, [r2, #8]
 80033da:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80033de:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80033e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80033e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80033e8:	f245 4219 	movw	r2, #21529	; 0x5419
 80033ec:	f2c0 7240 	movt	r2, #1856	; 0x740
 80033f0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80033f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80033f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80033fa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80033fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003408:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800340a:	bf00      	nop
 800340c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003410:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f6      	beq.n	800340c <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800341e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003422:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003426:	f240 6205 	movw	r2, #1541	; 0x605
 800342a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800342c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003430:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003434:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003438:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800343c:	6892      	ldr	r2, [r2, #8]
 800343e:	f022 0203 	bic.w	r2, r2, #3
 8003442:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003444:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003448:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800344c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003450:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003454:	6892      	ldr	r2, [r2, #8]
 8003456:	f042 0202 	orr.w	r2, r2, #2
 800345a:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800345c:	bf00      	nop
 800345e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003462:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b08      	cmp	r3, #8
 800346e:	d1f6      	bne.n	800345e <SetSysClock+0x16a>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003470:	f107 070c 	add.w	r7, r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop

0800347c <cleanup_glue>:
 800347c:	b538      	push	{r3, r4, r5, lr}
 800347e:	460c      	mov	r4, r1
 8003480:	6809      	ldr	r1, [r1, #0]
 8003482:	4605      	mov	r5, r0
 8003484:	b109      	cbz	r1, 800348a <cleanup_glue+0xe>
 8003486:	f7ff fff9 	bl	800347c <cleanup_glue>
 800348a:	4628      	mov	r0, r5
 800348c:	4621      	mov	r1, r4
 800348e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003492:	f002 ba21 	b.w	80058d8 <_free_r>
 8003496:	bf00      	nop

08003498 <_reclaim_reent>:
 8003498:	4b22      	ldr	r3, [pc, #136]	; (8003524 <_reclaim_reent+0x8c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4298      	cmp	r0, r3
 800349e:	b570      	push	{r4, r5, r6, lr}
 80034a0:	4605      	mov	r5, r0
 80034a2:	d032      	beq.n	800350a <_reclaim_reent+0x72>
 80034a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80034a6:	b1ab      	cbz	r3, 80034d4 <_reclaim_reent+0x3c>
 80034a8:	2200      	movs	r2, #0
 80034aa:	4616      	mov	r6, r2
 80034ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034b0:	b909      	cbnz	r1, 80034b6 <_reclaim_reent+0x1e>
 80034b2:	e007      	b.n	80034c4 <_reclaim_reent+0x2c>
 80034b4:	4621      	mov	r1, r4
 80034b6:	680c      	ldr	r4, [r1, #0]
 80034b8:	4628      	mov	r0, r5
 80034ba:	f002 fa0d 	bl	80058d8 <_free_r>
 80034be:	2c00      	cmp	r4, #0
 80034c0:	d1f8      	bne.n	80034b4 <_reclaim_reent+0x1c>
 80034c2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80034c4:	3601      	adds	r6, #1
 80034c6:	2e20      	cmp	r6, #32
 80034c8:	4632      	mov	r2, r6
 80034ca:	d1ef      	bne.n	80034ac <_reclaim_reent+0x14>
 80034cc:	4628      	mov	r0, r5
 80034ce:	4619      	mov	r1, r3
 80034d0:	f002 fa02 	bl	80058d8 <_free_r>
 80034d4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80034d6:	b111      	cbz	r1, 80034de <_reclaim_reent+0x46>
 80034d8:	4628      	mov	r0, r5
 80034da:	f002 f9fd 	bl	80058d8 <_free_r>
 80034de:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 80034e2:	b159      	cbz	r1, 80034fc <_reclaim_reent+0x64>
 80034e4:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 80034e8:	42b1      	cmp	r1, r6
 80034ea:	d101      	bne.n	80034f0 <_reclaim_reent+0x58>
 80034ec:	e006      	b.n	80034fc <_reclaim_reent+0x64>
 80034ee:	4621      	mov	r1, r4
 80034f0:	680c      	ldr	r4, [r1, #0]
 80034f2:	4628      	mov	r0, r5
 80034f4:	f002 f9f0 	bl	80058d8 <_free_r>
 80034f8:	42a6      	cmp	r6, r4
 80034fa:	d1f8      	bne.n	80034ee <_reclaim_reent+0x56>
 80034fc:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80034fe:	b111      	cbz	r1, 8003506 <_reclaim_reent+0x6e>
 8003500:	4628      	mov	r0, r5
 8003502:	f002 f9e9 	bl	80058d8 <_free_r>
 8003506:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003508:	b903      	cbnz	r3, 800350c <_reclaim_reent+0x74>
 800350a:	bd70      	pop	{r4, r5, r6, pc}
 800350c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800350e:	4628      	mov	r0, r5
 8003510:	4798      	blx	r3
 8003512:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 8003516:	2900      	cmp	r1, #0
 8003518:	d0f7      	beq.n	800350a <_reclaim_reent+0x72>
 800351a:	4628      	mov	r0, r5
 800351c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003520:	e7ac      	b.n	800347c <cleanup_glue>
 8003522:	bf00      	nop
 8003524:	200000d8 	.word	0x200000d8

08003528 <_wrapup_reent>:
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352a:	4607      	mov	r7, r0
 800352c:	b1b0      	cbz	r0, 800355c <_wrapup_reent+0x34>
 800352e:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 8003532:	b176      	cbz	r6, 8003552 <_wrapup_reent+0x2a>
 8003534:	6875      	ldr	r5, [r6, #4]
 8003536:	1e6c      	subs	r4, r5, #1
 8003538:	d408      	bmi.n	800354c <_wrapup_reent+0x24>
 800353a:	3502      	adds	r5, #2
 800353c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8003540:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003544:	3c01      	subs	r4, #1
 8003546:	4798      	blx	r3
 8003548:	1c63      	adds	r3, r4, #1
 800354a:	d1f9      	bne.n	8003540 <_wrapup_reent+0x18>
 800354c:	6836      	ldr	r6, [r6, #0]
 800354e:	2e00      	cmp	r6, #0
 8003550:	d1f0      	bne.n	8003534 <_wrapup_reent+0xc>
 8003552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003554:	b10b      	cbz	r3, 800355a <_wrapup_reent+0x32>
 8003556:	4638      	mov	r0, r7
 8003558:	4798      	blx	r3
 800355a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800355c:	4b01      	ldr	r3, [pc, #4]	; (8003564 <_wrapup_reent+0x3c>)
 800355e:	681f      	ldr	r7, [r3, #0]
 8003560:	e7e5      	b.n	800352e <_wrapup_reent+0x6>
 8003562:	bf00      	nop
 8003564:	200000d8 	.word	0x200000d8

08003568 <_sprintf_r>:
 8003568:	b40c      	push	{r2, r3}
 800356a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800356c:	b09d      	sub	sp, #116	; 0x74
 800356e:	ac22      	add	r4, sp, #136	; 0x88
 8003570:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8003574:	f854 2b04 	ldr.w	r2, [r4], #4
 8003578:	9101      	str	r1, [sp, #4]
 800357a:	460e      	mov	r6, r1
 800357c:	4623      	mov	r3, r4
 800357e:	9503      	str	r5, [sp, #12]
 8003580:	9506      	str	r5, [sp, #24]
 8003582:	a901      	add	r1, sp, #4
 8003584:	f44f 7702 	mov.w	r7, #520	; 0x208
 8003588:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800358c:	f8ad 7010 	strh.w	r7, [sp, #16]
 8003590:	9605      	str	r6, [sp, #20]
 8003592:	f8ad 5012 	strh.w	r5, [sp, #18]
 8003596:	941b      	str	r4, [sp, #108]	; 0x6c
 8003598:	f000 f830 	bl	80035fc <_svfprintf_r>
 800359c:	9b01      	ldr	r3, [sp, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	b01d      	add	sp, #116	; 0x74
 80035a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80035a8:	b002      	add	sp, #8
 80035aa:	4770      	bx	lr

080035ac <sprintf>:
 80035ac:	b40e      	push	{r1, r2, r3}
 80035ae:	b570      	push	{r4, r5, r6, lr}
 80035b0:	b09d      	sub	sp, #116	; 0x74
 80035b2:	ac21      	add	r4, sp, #132	; 0x84
 80035b4:	f240 03d8 	movw	r3, #216	; 0xd8
 80035b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035bc:	f854 2b04 	ldr.w	r2, [r4], #4
 80035c0:	4606      	mov	r6, r0
 80035c2:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80035c6:	6818      	ldr	r0, [r3, #0]
 80035c8:	9503      	str	r5, [sp, #12]
 80035ca:	f44f 7302 	mov.w	r3, #520	; 0x208
 80035ce:	f8ad 3010 	strh.w	r3, [sp, #16]
 80035d2:	9506      	str	r5, [sp, #24]
 80035d4:	4623      	mov	r3, r4
 80035d6:	a901      	add	r1, sp, #4
 80035d8:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80035dc:	9601      	str	r6, [sp, #4]
 80035de:	9605      	str	r6, [sp, #20]
 80035e0:	f8ad 5012 	strh.w	r5, [sp, #18]
 80035e4:	941b      	str	r4, [sp, #108]	; 0x6c
 80035e6:	f000 f809 	bl	80035fc <_svfprintf_r>
 80035ea:	9b01      	ldr	r3, [sp, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	b01d      	add	sp, #116	; 0x74
 80035f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80035f6:	b003      	add	sp, #12
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop

080035fc <_svfprintf_r>:
 80035fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003600:	b0c5      	sub	sp, #276	; 0x114
 8003602:	468a      	mov	sl, r1
 8003604:	4614      	mov	r4, r2
 8003606:	930e      	str	r3, [sp, #56]	; 0x38
 8003608:	900f      	str	r0, [sp, #60]	; 0x3c
 800360a:	f002 fa5d 	bl	8005ac8 <_localeconv_r>
 800360e:	6800      	ldr	r0, [r0, #0]
 8003610:	9017      	str	r0, [sp, #92]	; 0x5c
 8003612:	f003 fb33 	bl	8006c7c <strlen>
 8003616:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800361a:	901a      	str	r0, [sp, #104]	; 0x68
 800361c:	2100      	movs	r1, #0
 800361e:	2000      	movs	r0, #0
 8003620:	061a      	lsls	r2, r3, #24
 8003622:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8003626:	d504      	bpl.n	8003632 <_svfprintf_r+0x36>
 8003628:	f8da 3010 	ldr.w	r3, [sl, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	f001 8004 	beq.w	800463a <_svfprintf_r+0x103e>
 8003632:	2300      	movs	r3, #0
 8003634:	f10d 00e3 	add.w	r0, sp, #227	; 0xe3
 8003638:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 800363c:	a91f      	add	r1, sp, #124	; 0x7c
 800363e:	9310      	str	r3, [sp, #64]	; 0x40
 8003640:	933b      	str	r3, [sp, #236]	; 0xec
 8003642:	933a      	str	r3, [sp, #232]	; 0xe8
 8003644:	931c      	str	r3, [sp, #112]	; 0x70
 8003646:	931b      	str	r3, [sp, #108]	; 0x6c
 8003648:	930c      	str	r3, [sp, #48]	; 0x30
 800364a:	ebc0 030b 	rsb	r3, r0, fp
 800364e:	9007      	str	r0, [sp, #28]
 8003650:	9139      	str	r1, [sp, #228]	; 0xe4
 8003652:	9409      	str	r4, [sp, #36]	; 0x24
 8003654:	460e      	mov	r6, r1
 8003656:	931d      	str	r3, [sp, #116]	; 0x74
 8003658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800365a:	7803      	ldrb	r3, [r0, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf18      	it	ne
 8003660:	2b25      	cmpne	r3, #37	; 0x25
 8003662:	f000 80af 	beq.w	80037c4 <_svfprintf_r+0x1c8>
 8003666:	4607      	mov	r7, r0
 8003668:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 800366c:	2b25      	cmp	r3, #37	; 0x25
 800366e:	bf18      	it	ne
 8003670:	2b00      	cmpne	r3, #0
 8003672:	d1f9      	bne.n	8003668 <_svfprintf_r+0x6c>
 8003674:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003676:	ebb7 0801 	subs.w	r8, r7, r1
 800367a:	d00e      	beq.n	800369a <_svfprintf_r+0x9e>
 800367c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800367e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003680:	6031      	str	r1, [r6, #0]
 8003682:	3401      	adds	r4, #1
 8003684:	4445      	add	r5, r8
 8003686:	2c07      	cmp	r4, #7
 8003688:	f8c6 8004 	str.w	r8, [r6, #4]
 800368c:	953b      	str	r5, [sp, #236]	; 0xec
 800368e:	943a      	str	r4, [sp, #232]	; 0xe8
 8003690:	dc7c      	bgt.n	800378c <_svfprintf_r+0x190>
 8003692:	3608      	adds	r6, #8
 8003694:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003696:	4442      	add	r2, r8
 8003698:	920c      	str	r2, [sp, #48]	; 0x30
 800369a:	783b      	ldrb	r3, [r7, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d07d      	beq.n	800379c <_svfprintf_r+0x1a0>
 80036a0:	3701      	adds	r7, #1
 80036a2:	9709      	str	r7, [sp, #36]	; 0x24
 80036a4:	2300      	movs	r3, #0
 80036a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80036aa:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 80036ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80036b2:	9308      	str	r3, [sp, #32]
 80036b4:	2720      	movs	r7, #32
 80036b6:	252b      	movs	r5, #43	; 0x2b
 80036b8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80036bc:	f1a3 0220 	sub.w	r2, r3, #32
 80036c0:	2a58      	cmp	r2, #88	; 0x58
 80036c2:	f200 823b 	bhi.w	8003b3c <_svfprintf_r+0x540>
 80036c6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80036ca:	024c      	.short	0x024c
 80036cc:	02390239 	.word	0x02390239
 80036d0:	02390254 	.word	0x02390254
 80036d4:	02390239 	.word	0x02390239
 80036d8:	02390239 	.word	0x02390239
 80036dc:	02590239 	.word	0x02590239
 80036e0:	0239007f 	.word	0x0239007f
 80036e4:	0082005c 	.word	0x0082005c
 80036e8:	009d0239 	.word	0x009d0239
 80036ec:	00a200a2 	.word	0x00a200a2
 80036f0:	00a200a2 	.word	0x00a200a2
 80036f4:	00a200a2 	.word	0x00a200a2
 80036f8:	00a200a2 	.word	0x00a200a2
 80036fc:	023900a2 	.word	0x023900a2
 8003700:	02390239 	.word	0x02390239
 8003704:	02390239 	.word	0x02390239
 8003708:	02390239 	.word	0x02390239
 800370c:	02390239 	.word	0x02390239
 8003710:	00b50239 	.word	0x00b50239
 8003714:	02390154 	.word	0x02390154
 8003718:	02390154 	.word	0x02390154
 800371c:	02390239 	.word	0x02390239
 8003720:	018b0239 	.word	0x018b0239
 8003724:	02390239 	.word	0x02390239
 8003728:	02390190 	.word	0x02390190
 800372c:	02390239 	.word	0x02390239
 8003730:	02390239 	.word	0x02390239
 8003734:	023901a7 	.word	0x023901a7
 8003738:	01ba0239 	.word	0x01ba0239
 800373c:	02390239 	.word	0x02390239
 8003740:	02390239 	.word	0x02390239
 8003744:	02390239 	.word	0x02390239
 8003748:	02390239 	.word	0x02390239
 800374c:	02390239 	.word	0x02390239
 8003750:	02780293 	.word	0x02780293
 8003754:	01540154 	.word	0x01540154
 8003758:	028e0154 	.word	0x028e0154
 800375c:	02390278 	.word	0x02390278
 8003760:	02130239 	.word	0x02130239
 8003764:	02180239 	.word	0x02180239
 8003768:	02a50224 	.word	0x02a50224
 800376c:	023901de 	.word	0x023901de
 8003770:	023901e3 	.word	0x023901e3
 8003774:	02390264 	.word	0x02390264
 8003778:	02c70239 	.word	0x02c70239
 800377c:	4252      	negs	r2, r2
 800377e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003780:	930e      	str	r3, [sp, #56]	; 0x38
 8003782:	9b08      	ldr	r3, [sp, #32]
 8003784:	f043 0304 	orr.w	r3, r3, #4
 8003788:	9308      	str	r3, [sp, #32]
 800378a:	e795      	b.n	80036b8 <_svfprintf_r+0xbc>
 800378c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800378e:	4651      	mov	r1, sl
 8003790:	465a      	mov	r2, fp
 8003792:	f003 faa3 	bl	8006cdc <__ssprint_r>
 8003796:	b940      	cbnz	r0, 80037aa <_svfprintf_r+0x1ae>
 8003798:	ae1f      	add	r6, sp, #124	; 0x7c
 800379a:	e77b      	b.n	8003694 <_svfprintf_r+0x98>
 800379c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800379e:	b123      	cbz	r3, 80037aa <_svfprintf_r+0x1ae>
 80037a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80037a2:	4651      	mov	r1, sl
 80037a4:	aa39      	add	r2, sp, #228	; 0xe4
 80037a6:	f003 fa99 	bl	8006cdc <__ssprint_r>
 80037aa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80037ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80037b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80037b4:	bf18      	it	ne
 80037b6:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 80037ba:	930c      	str	r3, [sp, #48]	; 0x30
 80037bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80037be:	b045      	add	sp, #276	; 0x114
 80037c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80037c6:	e768      	b.n	800369a <_svfprintf_r+0x9e>
 80037c8:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 80037cc:	e774      	b.n	80036b8 <_svfprintf_r+0xbc>
 80037ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80037d2:	2b2a      	cmp	r3, #42	; 0x2a
 80037d4:	f001 804c 	beq.w	8004870 <_svfprintf_r+0x1274>
 80037d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80037dc:	2400      	movs	r4, #0
 80037de:	2a09      	cmp	r2, #9
 80037e0:	f63f af6c 	bhi.w	80036bc <_svfprintf_r+0xc0>
 80037e4:	4601      	mov	r1, r0
 80037e6:	2400      	movs	r4, #0
 80037e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037ec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80037f0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80037f4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80037f8:	2a09      	cmp	r2, #9
 80037fa:	4608      	mov	r0, r1
 80037fc:	d9f4      	bls.n	80037e8 <_svfprintf_r+0x1ec>
 80037fe:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8003802:	e75b      	b.n	80036bc <_svfprintf_r+0xc0>
 8003804:	9a08      	ldr	r2, [sp, #32]
 8003806:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800380a:	9208      	str	r2, [sp, #32]
 800380c:	e754      	b.n	80036b8 <_svfprintf_r+0xbc>
 800380e:	4601      	mov	r1, r0
 8003810:	2200      	movs	r2, #0
 8003812:	46b4      	mov	ip, r6
 8003814:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8003818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800381c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8003820:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003824:	2e09      	cmp	r6, #9
 8003826:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800382a:	4608      	mov	r0, r1
 800382c:	d9f2      	bls.n	8003814 <_svfprintf_r+0x218>
 800382e:	4666      	mov	r6, ip
 8003830:	920b      	str	r2, [sp, #44]	; 0x2c
 8003832:	e743      	b.n	80036bc <_svfprintf_r+0xc0>
 8003834:	9315      	str	r3, [sp, #84]	; 0x54
 8003836:	9b08      	ldr	r3, [sp, #32]
 8003838:	9009      	str	r0, [sp, #36]	; 0x24
 800383a:	f043 0310 	orr.w	r3, r3, #16
 800383e:	9308      	str	r3, [sp, #32]
 8003840:	9808      	ldr	r0, [sp, #32]
 8003842:	06c3      	lsls	r3, r0, #27
 8003844:	f100 81bf 	bmi.w	8003bc6 <_svfprintf_r+0x5ca>
 8003848:	9a08      	ldr	r2, [sp, #32]
 800384a:	0655      	lsls	r5, r2, #25
 800384c:	f140 81bb 	bpl.w	8003bc6 <_svfprintf_r+0x5ca>
 8003850:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003852:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003856:	3004      	adds	r0, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	900e      	str	r0, [sp, #56]	; 0x38
 800385c:	f2c0 81ba 	blt.w	8003bd4 <_svfprintf_r+0x5d8>
 8003860:	bf0c      	ite	eq
 8003862:	2100      	moveq	r1, #0
 8003864:	2101      	movne	r1, #1
 8003866:	2201      	movs	r2, #1
 8003868:	2c00      	cmp	r4, #0
 800386a:	bfa2      	ittt	ge
 800386c:	9808      	ldrge	r0, [sp, #32]
 800386e:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8003872:	9008      	strge	r0, [sp, #32]
 8003874:	2c00      	cmp	r4, #0
 8003876:	bf18      	it	ne
 8003878:	f041 0101 	orrne.w	r1, r1, #1
 800387c:	2900      	cmp	r1, #0
 800387e:	f000 8323 	beq.w	8003ec8 <_svfprintf_r+0x8cc>
 8003882:	2a01      	cmp	r2, #1
 8003884:	f000 845f 	beq.w	8004146 <_svfprintf_r+0xb4a>
 8003888:	2a02      	cmp	r2, #2
 800388a:	bf18      	it	ne
 800388c:	465a      	movne	r2, fp
 800388e:	d102      	bne.n	8003896 <_svfprintf_r+0x29a>
 8003890:	f000 bc48 	b.w	8004124 <_svfprintf_r+0xb28>
 8003894:	4602      	mov	r2, r0
 8003896:	f003 0107 	and.w	r1, r3, #7
 800389a:	3130      	adds	r1, #48	; 0x30
 800389c:	1e50      	subs	r0, r2, #1
 800389e:	08db      	lsrs	r3, r3, #3
 80038a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80038a4:	d1f6      	bne.n	8003894 <_svfprintf_r+0x298>
 80038a6:	9b08      	ldr	r3, [sp, #32]
 80038a8:	9011      	str	r0, [sp, #68]	; 0x44
 80038aa:	07dd      	lsls	r5, r3, #31
 80038ac:	d507      	bpl.n	80038be <_svfprintf_r+0x2c2>
 80038ae:	2930      	cmp	r1, #48	; 0x30
 80038b0:	f000 8733 	beq.w	800471a <_svfprintf_r+0x111e>
 80038b4:	1e90      	subs	r0, r2, #2
 80038b6:	2330      	movs	r3, #48	; 0x30
 80038b8:	9011      	str	r0, [sp, #68]	; 0x44
 80038ba:	f802 3c02 	strb.w	r3, [r2, #-2]
 80038be:	ebc0 030b 	rsb	r3, r0, fp
 80038c2:	930d      	str	r3, [sp, #52]	; 0x34
 80038c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038c6:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80038ca:	9412      	str	r4, [sp, #72]	; 0x48
 80038cc:	42a3      	cmp	r3, r4
 80038ce:	bfb8      	it	lt
 80038d0:	4623      	movlt	r3, r4
 80038d2:	2000      	movs	r0, #0
 80038d4:	930a      	str	r3, [sp, #40]	; 0x28
 80038d6:	9016      	str	r0, [sp, #88]	; 0x58
 80038d8:	b111      	cbz	r1, 80038e0 <_svfprintf_r+0x2e4>
 80038da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038dc:	3301      	adds	r3, #1
 80038de:	930a      	str	r3, [sp, #40]	; 0x28
 80038e0:	9b08      	ldr	r3, [sp, #32]
 80038e2:	f013 0302 	ands.w	r3, r3, #2
 80038e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80038e8:	d002      	beq.n	80038f0 <_svfprintf_r+0x2f4>
 80038ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80038ec:	3002      	adds	r0, #2
 80038ee:	900a      	str	r0, [sp, #40]	; 0x28
 80038f0:	9b08      	ldr	r3, [sp, #32]
 80038f2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80038f6:	9314      	str	r3, [sp, #80]	; 0x50
 80038f8:	f040 81bb 	bne.w	8003c72 <_svfprintf_r+0x676>
 80038fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80038fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003900:	1a47      	subs	r7, r0, r1
 8003902:	2f00      	cmp	r7, #0
 8003904:	f340 81b5 	ble.w	8003c72 <_svfprintf_r+0x676>
 8003908:	2f10      	cmp	r7, #16
 800390a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800390c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800390e:	f8df 8344 	ldr.w	r8, [pc, #836]	; 8003c54 <_svfprintf_r+0x658>
 8003912:	dd22      	ble.n	800395a <_svfprintf_r+0x35e>
 8003914:	4623      	mov	r3, r4
 8003916:	f04f 0910 	mov.w	r9, #16
 800391a:	4644      	mov	r4, r8
 800391c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003920:	e003      	b.n	800392a <_svfprintf_r+0x32e>
 8003922:	3f10      	subs	r7, #16
 8003924:	3608      	adds	r6, #8
 8003926:	2f10      	cmp	r7, #16
 8003928:	dd15      	ble.n	8003956 <_svfprintf_r+0x35a>
 800392a:	3301      	adds	r3, #1
 800392c:	3510      	adds	r5, #16
 800392e:	2b07      	cmp	r3, #7
 8003930:	e886 0210 	stmia.w	r6, {r4, r9}
 8003934:	953b      	str	r5, [sp, #236]	; 0xec
 8003936:	933a      	str	r3, [sp, #232]	; 0xe8
 8003938:	ddf3      	ble.n	8003922 <_svfprintf_r+0x326>
 800393a:	4640      	mov	r0, r8
 800393c:	4651      	mov	r1, sl
 800393e:	465a      	mov	r2, fp
 8003940:	f003 f9cc 	bl	8006cdc <__ssprint_r>
 8003944:	2800      	cmp	r0, #0
 8003946:	f47f af30 	bne.w	80037aa <_svfprintf_r+0x1ae>
 800394a:	3f10      	subs	r7, #16
 800394c:	2f10      	cmp	r7, #16
 800394e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003950:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003952:	ae1f      	add	r6, sp, #124	; 0x7c
 8003954:	dce9      	bgt.n	800392a <_svfprintf_r+0x32e>
 8003956:	46a0      	mov	r8, r4
 8003958:	461c      	mov	r4, r3
 800395a:	3401      	adds	r4, #1
 800395c:	19ed      	adds	r5, r5, r7
 800395e:	2c07      	cmp	r4, #7
 8003960:	f8c6 8000 	str.w	r8, [r6]
 8003964:	6077      	str	r7, [r6, #4]
 8003966:	953b      	str	r5, [sp, #236]	; 0xec
 8003968:	943a      	str	r4, [sp, #232]	; 0xe8
 800396a:	f300 8414 	bgt.w	8004196 <_svfprintf_r+0xb9a>
 800396e:	3608      	adds	r6, #8
 8003970:	e180      	b.n	8003c74 <_svfprintf_r+0x678>
 8003972:	9009      	str	r0, [sp, #36]	; 0x24
 8003974:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003976:	9315      	str	r3, [sp, #84]	; 0x54
 8003978:	1dc3      	adds	r3, r0, #7
 800397a:	f023 0307 	bic.w	r3, r3, #7
 800397e:	f103 0108 	add.w	r1, r3, #8
 8003982:	910e      	str	r1, [sp, #56]	; 0x38
 8003984:	f8d3 8000 	ldr.w	r8, [r3]
 8003988:	685d      	ldr	r5, [r3, #4]
 800398a:	4642      	mov	r2, r8
 800398c:	462b      	mov	r3, r5
 800398e:	4629      	mov	r1, r5
 8003990:	4640      	mov	r0, r8
 8003992:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8003996:	f003 f839 	bl	8006a0c <__fpclassifyd>
 800399a:	2801      	cmp	r0, #1
 800399c:	4629      	mov	r1, r5
 800399e:	4640      	mov	r0, r8
 80039a0:	f040 84d0 	bne.w	8004344 <_svfprintf_r+0xd48>
 80039a4:	2200      	movs	r2, #0
 80039a6:	2300      	movs	r3, #0
 80039a8:	f004 fd60 	bl	800846c <__aeabi_dcmplt>
 80039ac:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80039b0:	b110      	cbz	r0, 80039b8 <_svfprintf_r+0x3bc>
 80039b2:	212d      	movs	r1, #45	; 0x2d
 80039b4:	f88d 110f 	strb.w	r1, [sp, #271]	; 0x10f
 80039b8:	2303      	movs	r3, #3
 80039ba:	930a      	str	r3, [sp, #40]	; 0x28
 80039bc:	2300      	movs	r3, #0
 80039be:	9312      	str	r3, [sp, #72]	; 0x48
 80039c0:	4aa0      	ldr	r2, [pc, #640]	; (8003c44 <_svfprintf_r+0x648>)
 80039c2:	4ba1      	ldr	r3, [pc, #644]	; (8003c48 <_svfprintf_r+0x64c>)
 80039c4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80039c6:	2847      	cmp	r0, #71	; 0x47
 80039c8:	bfd8      	it	le
 80039ca:	461a      	movle	r2, r3
 80039cc:	9211      	str	r2, [sp, #68]	; 0x44
 80039ce:	9a08      	ldr	r2, [sp, #32]
 80039d0:	2303      	movs	r3, #3
 80039d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039d6:	930d      	str	r3, [sp, #52]	; 0x34
 80039d8:	2300      	movs	r3, #0
 80039da:	9208      	str	r2, [sp, #32]
 80039dc:	9316      	str	r3, [sp, #88]	; 0x58
 80039de:	e77b      	b.n	80038d8 <_svfprintf_r+0x2dc>
 80039e0:	9b08      	ldr	r3, [sp, #32]
 80039e2:	f043 0308 	orr.w	r3, r3, #8
 80039e6:	9308      	str	r3, [sp, #32]
 80039e8:	e666      	b.n	80036b8 <_svfprintf_r+0xbc>
 80039ea:	9908      	ldr	r1, [sp, #32]
 80039ec:	9009      	str	r0, [sp, #36]	; 0x24
 80039ee:	f041 0110 	orr.w	r1, r1, #16
 80039f2:	9108      	str	r1, [sp, #32]
 80039f4:	9a08      	ldr	r2, [sp, #32]
 80039f6:	9315      	str	r3, [sp, #84]	; 0x54
 80039f8:	f012 0110 	ands.w	r1, r2, #16
 80039fc:	f000 8090 	beq.w	8003b20 <_svfprintf_r+0x524>
 8003a00:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003a02:	6803      	ldr	r3, [r0, #0]
 8003a04:	2200      	movs	r2, #0
 8003a06:	1a99      	subs	r1, r3, r2
 8003a08:	bf18      	it	ne
 8003a0a:	2101      	movne	r1, #1
 8003a0c:	3004      	adds	r0, #4
 8003a0e:	900e      	str	r0, [sp, #56]	; 0x38
 8003a10:	2000      	movs	r0, #0
 8003a12:	f88d 010f 	strb.w	r0, [sp, #271]	; 0x10f
 8003a16:	e727      	b.n	8003868 <_svfprintf_r+0x26c>
 8003a18:	9908      	ldr	r1, [sp, #32]
 8003a1a:	9009      	str	r0, [sp, #36]	; 0x24
 8003a1c:	f041 0110 	orr.w	r1, r1, #16
 8003a20:	9108      	str	r1, [sp, #32]
 8003a22:	9a08      	ldr	r2, [sp, #32]
 8003a24:	9315      	str	r3, [sp, #84]	; 0x54
 8003a26:	06d0      	lsls	r0, r2, #27
 8003a28:	f140 80b9 	bpl.w	8003b9e <_svfprintf_r+0x5a2>
 8003a2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003a2e:	6803      	ldr	r3, [r0, #0]
 8003a30:	2201      	movs	r2, #1
 8003a32:	1c19      	adds	r1, r3, #0
 8003a34:	bf18      	it	ne
 8003a36:	2101      	movne	r1, #1
 8003a38:	3004      	adds	r0, #4
 8003a3a:	900e      	str	r0, [sp, #56]	; 0x38
 8003a3c:	e7e8      	b.n	8003a10 <_svfprintf_r+0x414>
 8003a3e:	4a83      	ldr	r2, [pc, #524]	; (8003c4c <_svfprintf_r+0x650>)
 8003a40:	9315      	str	r3, [sp, #84]	; 0x54
 8003a42:	9b08      	ldr	r3, [sp, #32]
 8003a44:	921c      	str	r2, [sp, #112]	; 0x70
 8003a46:	06da      	lsls	r2, r3, #27
 8003a48:	9009      	str	r0, [sp, #36]	; 0x24
 8003a4a:	f100 810d 	bmi.w	8003c68 <_svfprintf_r+0x66c>
 8003a4e:	9908      	ldr	r1, [sp, #32]
 8003a50:	064b      	lsls	r3, r1, #25
 8003a52:	f140 8109 	bpl.w	8003c68 <_svfprintf_r+0x66c>
 8003a56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a58:	8813      	ldrh	r3, [r2, #0]
 8003a5a:	3204      	adds	r2, #4
 8003a5c:	920e      	str	r2, [sp, #56]	; 0x38
 8003a5e:	1c19      	adds	r1, r3, #0
 8003a60:	9a08      	ldr	r2, [sp, #32]
 8003a62:	bf18      	it	ne
 8003a64:	2101      	movne	r1, #1
 8003a66:	420a      	tst	r2, r1
 8003a68:	f000 83ca 	beq.w	8004200 <_svfprintf_r+0xc04>
 8003a6c:	9908      	ldr	r1, [sp, #32]
 8003a6e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003a70:	2230      	movs	r2, #48	; 0x30
 8003a72:	f041 0102 	orr.w	r1, r1, #2
 8003a76:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8003a7a:	9108      	str	r1, [sp, #32]
 8003a7c:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8003a80:	2101      	movs	r1, #1
 8003a82:	2202      	movs	r2, #2
 8003a84:	e7c4      	b.n	8003a10 <_svfprintf_r+0x414>
 8003a86:	9b08      	ldr	r3, [sp, #32]
 8003a88:	f043 0310 	orr.w	r3, r3, #16
 8003a8c:	9308      	str	r3, [sp, #32]
 8003a8e:	e613      	b.n	80036b8 <_svfprintf_r+0xbc>
 8003a90:	2500      	movs	r5, #0
 8003a92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a94:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8003a98:	9315      	str	r3, [sp, #84]	; 0x54
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a9e:	9009      	str	r0, [sp, #36]	; 0x24
 8003aa0:	9211      	str	r2, [sp, #68]	; 0x44
 8003aa2:	1d1f      	adds	r7, r3, #4
 8003aa4:	2a00      	cmp	r2, #0
 8003aa6:	f000 864b 	beq.w	8004740 <_svfprintf_r+0x1144>
 8003aaa:	2c00      	cmp	r4, #0
 8003aac:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003aae:	f2c0 8602 	blt.w	80046b6 <_svfprintf_r+0x10ba>
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	4622      	mov	r2, r4
 8003ab6:	f002 facf 	bl	8006058 <memchr>
 8003aba:	2800      	cmp	r0, #0
 8003abc:	f000 866f 	beq.w	800479e <_svfprintf_r+0x11a2>
 8003ac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003ac2:	9512      	str	r5, [sp, #72]	; 0x48
 8003ac4:	1ac0      	subs	r0, r0, r3
 8003ac6:	42a0      	cmp	r0, r4
 8003ac8:	900d      	str	r0, [sp, #52]	; 0x34
 8003aca:	bfd1      	iteee	le
 8003acc:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 8003ace:	f89d 110f 	ldrbgt.w	r1, [sp, #271]	; 0x10f
 8003ad2:	970e      	strgt	r7, [sp, #56]	; 0x38
 8003ad4:	ea24 70e4 	bicgt.w	r0, r4, r4, asr #31
 8003ad8:	bfd3      	iteet	le
 8003ada:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8003ade:	900a      	strgt	r0, [sp, #40]	; 0x28
 8003ae0:	940d      	strgt	r4, [sp, #52]	; 0x34
 8003ae2:	930a      	strle	r3, [sp, #40]	; 0x28
 8003ae4:	bfdc      	itt	le
 8003ae6:	f89d 110f 	ldrble.w	r1, [sp, #271]	; 0x10f
 8003aea:	970e      	strle	r7, [sp, #56]	; 0x38
 8003aec:	9516      	str	r5, [sp, #88]	; 0x58
 8003aee:	e6f3      	b.n	80038d8 <_svfprintf_r+0x2dc>
 8003af0:	9a08      	ldr	r2, [sp, #32]
 8003af2:	f042 0210 	orr.w	r2, r2, #16
 8003af6:	9208      	str	r2, [sp, #32]
 8003af8:	e5de      	b.n	80036b8 <_svfprintf_r+0xbc>
 8003afa:	9009      	str	r0, [sp, #36]	; 0x24
 8003afc:	9808      	ldr	r0, [sp, #32]
 8003afe:	06c3      	lsls	r3, r0, #27
 8003b00:	f140 843f 	bpl.w	8004382 <_svfprintf_r+0xd86>
 8003b04:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003b06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b08:	680b      	ldr	r3, [r1, #0]
 8003b0a:	3104      	adds	r1, #4
 8003b0c:	910e      	str	r1, [sp, #56]	; 0x38
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e5a2      	b.n	8003658 <_svfprintf_r+0x5c>
 8003b12:	9a08      	ldr	r2, [sp, #32]
 8003b14:	9009      	str	r0, [sp, #36]	; 0x24
 8003b16:	f012 0110 	ands.w	r1, r2, #16
 8003b1a:	9315      	str	r3, [sp, #84]	; 0x54
 8003b1c:	f47f af70 	bne.w	8003a00 <_svfprintf_r+0x404>
 8003b20:	9b08      	ldr	r3, [sp, #32]
 8003b22:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8003b26:	f000 8437 	beq.w	8004398 <_svfprintf_r+0xd9c>
 8003b2a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003b2c:	8803      	ldrh	r3, [r0, #0]
 8003b2e:	460a      	mov	r2, r1
 8003b30:	1c19      	adds	r1, r3, #0
 8003b32:	bf18      	it	ne
 8003b34:	2101      	movne	r1, #1
 8003b36:	3004      	adds	r0, #4
 8003b38:	900e      	str	r0, [sp, #56]	; 0x38
 8003b3a:	e769      	b.n	8003a10 <_svfprintf_r+0x414>
 8003b3c:	9009      	str	r0, [sp, #36]	; 0x24
 8003b3e:	9315      	str	r3, [sp, #84]	; 0x54
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f43f ae2b 	beq.w	800379c <_svfprintf_r+0x1a0>
 8003b46:	2101      	movs	r1, #1
 8003b48:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8003b4c:	aa2f      	add	r2, sp, #188	; 0xbc
 8003b4e:	2300      	movs	r3, #0
 8003b50:	910a      	str	r1, [sp, #40]	; 0x28
 8003b52:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8003b56:	910d      	str	r1, [sp, #52]	; 0x34
 8003b58:	9211      	str	r2, [sp, #68]	; 0x44
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	9312      	str	r3, [sp, #72]	; 0x48
 8003b5e:	9316      	str	r3, [sp, #88]	; 0x58
 8003b60:	e6be      	b.n	80038e0 <_svfprintf_r+0x2e4>
 8003b62:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f47f ada6 	bne.w	80036b8 <_svfprintf_r+0xbc>
 8003b6c:	f88d 710f 	strb.w	r7, [sp, #271]	; 0x10f
 8003b70:	e5a2      	b.n	80036b8 <_svfprintf_r+0xbc>
 8003b72:	9a08      	ldr	r2, [sp, #32]
 8003b74:	f042 0201 	orr.w	r2, r2, #1
 8003b78:	9208      	str	r2, [sp, #32]
 8003b7a:	e59d      	b.n	80036b8 <_svfprintf_r+0xbc>
 8003b7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b7e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003b86:	1d0b      	adds	r3, r1, #4
 8003b88:	2a00      	cmp	r2, #0
 8003b8a:	f6ff adf7 	blt.w	800377c <_svfprintf_r+0x180>
 8003b8e:	930e      	str	r3, [sp, #56]	; 0x38
 8003b90:	e592      	b.n	80036b8 <_svfprintf_r+0xbc>
 8003b92:	9a08      	ldr	r2, [sp, #32]
 8003b94:	9009      	str	r0, [sp, #36]	; 0x24
 8003b96:	06d0      	lsls	r0, r2, #27
 8003b98:	9315      	str	r3, [sp, #84]	; 0x54
 8003b9a:	f53f af47 	bmi.w	8003a2c <_svfprintf_r+0x430>
 8003b9e:	9908      	ldr	r1, [sp, #32]
 8003ba0:	0649      	lsls	r1, r1, #25
 8003ba2:	f140 83ea 	bpl.w	800437a <_svfprintf_r+0xd7e>
 8003ba6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ba8:	8813      	ldrh	r3, [r2, #0]
 8003baa:	2201      	movs	r2, #1
 8003bac:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003bae:	1c19      	adds	r1, r3, #0
 8003bb0:	bf18      	it	ne
 8003bb2:	2101      	movne	r1, #1
 8003bb4:	3004      	adds	r0, #4
 8003bb6:	900e      	str	r0, [sp, #56]	; 0x38
 8003bb8:	e72a      	b.n	8003a10 <_svfprintf_r+0x414>
 8003bba:	9009      	str	r0, [sp, #36]	; 0x24
 8003bbc:	9808      	ldr	r0, [sp, #32]
 8003bbe:	9315      	str	r3, [sp, #84]	; 0x54
 8003bc0:	06c3      	lsls	r3, r0, #27
 8003bc2:	f57f ae41 	bpl.w	8003848 <_svfprintf_r+0x24c>
 8003bc6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003bc8:	680b      	ldr	r3, [r1, #0]
 8003bca:	3104      	adds	r1, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	910e      	str	r1, [sp, #56]	; 0x38
 8003bd0:	f6bf ae46 	bge.w	8003860 <_svfprintf_r+0x264>
 8003bd4:	425b      	negs	r3, r3
 8003bd6:	222d      	movs	r2, #45	; 0x2d
 8003bd8:	1c19      	adds	r1, r3, #0
 8003bda:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8003bde:	bf18      	it	ne
 8003be0:	2101      	movne	r1, #1
 8003be2:	2201      	movs	r2, #1
 8003be4:	e640      	b.n	8003868 <_svfprintf_r+0x26c>
 8003be6:	9908      	ldr	r1, [sp, #32]
 8003be8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003bec:	9108      	str	r1, [sp, #32]
 8003bee:	e563      	b.n	80036b8 <_svfprintf_r+0xbc>
 8003bf0:	9315      	str	r3, [sp, #84]	; 0x54
 8003bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bf4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	9009      	str	r0, [sp, #36]	; 0x24
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8003c02:	3104      	adds	r1, #4
 8003c04:	aa2f      	add	r2, sp, #188	; 0xbc
 8003c06:	900a      	str	r0, [sp, #40]	; 0x28
 8003c08:	910e      	str	r1, [sp, #56]	; 0x38
 8003c0a:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8003c0e:	900d      	str	r0, [sp, #52]	; 0x34
 8003c10:	9211      	str	r2, [sp, #68]	; 0x44
 8003c12:	e7a2      	b.n	8003b5a <_svfprintf_r+0x55e>
 8003c14:	490e      	ldr	r1, [pc, #56]	; (8003c50 <_svfprintf_r+0x654>)
 8003c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c1a:	911c      	str	r1, [sp, #112]	; 0x70
 8003c1c:	9908      	ldr	r1, [sp, #32]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	9009      	str	r0, [sp, #36]	; 0x24
 8003c22:	3204      	adds	r2, #4
 8003c24:	f041 0102 	orr.w	r1, r1, #2
 8003c28:	2078      	movs	r0, #120	; 0x78
 8003c2a:	920e      	str	r2, [sp, #56]	; 0x38
 8003c2c:	9108      	str	r1, [sp, #32]
 8003c2e:	2230      	movs	r2, #48	; 0x30
 8003c30:	1c19      	adds	r1, r3, #0
 8003c32:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8003c36:	bf18      	it	ne
 8003c38:	2101      	movne	r1, #1
 8003c3a:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8003c3e:	2202      	movs	r2, #2
 8003c40:	9015      	str	r0, [sp, #84]	; 0x54
 8003c42:	e6e5      	b.n	8003a10 <_svfprintf_r+0x414>
 8003c44:	080087a4 	.word	0x080087a4
 8003c48:	080087a0 	.word	0x080087a0
 8003c4c:	080087b0 	.word	0x080087b0
 8003c50:	080087c4 	.word	0x080087c4
 8003c54:	08008634 	.word	0x08008634
 8003c58:	9315      	str	r3, [sp, #84]	; 0x54
 8003c5a:	9b08      	ldr	r3, [sp, #32]
 8003c5c:	49a4      	ldr	r1, [pc, #656]	; (8003ef0 <_svfprintf_r+0x8f4>)
 8003c5e:	9009      	str	r0, [sp, #36]	; 0x24
 8003c60:	06da      	lsls	r2, r3, #27
 8003c62:	911c      	str	r1, [sp, #112]	; 0x70
 8003c64:	f57f aef3 	bpl.w	8003a4e <_svfprintf_r+0x452>
 8003c68:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003c6a:	6803      	ldr	r3, [r0, #0]
 8003c6c:	3004      	adds	r0, #4
 8003c6e:	900e      	str	r0, [sp, #56]	; 0x38
 8003c70:	e6f5      	b.n	8003a5e <_svfprintf_r+0x462>
 8003c72:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003c74:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8003c78:	b16b      	cbz	r3, 8003c96 <_svfprintf_r+0x69a>
 8003c7a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003c7c:	f20d 130f 	addw	r3, sp, #271	; 0x10f
 8003c80:	3401      	adds	r4, #1
 8003c82:	6033      	str	r3, [r6, #0]
 8003c84:	3501      	adds	r5, #1
 8003c86:	2301      	movs	r3, #1
 8003c88:	2c07      	cmp	r4, #7
 8003c8a:	6073      	str	r3, [r6, #4]
 8003c8c:	953b      	str	r5, [sp, #236]	; 0xec
 8003c8e:	943a      	str	r4, [sp, #232]	; 0xe8
 8003c90:	f300 81f5 	bgt.w	800407e <_svfprintf_r+0xa82>
 8003c94:	3608      	adds	r6, #8
 8003c96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003c98:	b163      	cbz	r3, 8003cb4 <_svfprintf_r+0x6b8>
 8003c9a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003c9c:	ab43      	add	r3, sp, #268	; 0x10c
 8003c9e:	3401      	adds	r4, #1
 8003ca0:	6033      	str	r3, [r6, #0]
 8003ca2:	3502      	adds	r5, #2
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	2c07      	cmp	r4, #7
 8003ca8:	6073      	str	r3, [r6, #4]
 8003caa:	953b      	str	r5, [sp, #236]	; 0xec
 8003cac:	943a      	str	r4, [sp, #232]	; 0xe8
 8003cae:	f300 81db 	bgt.w	8004068 <_svfprintf_r+0xa6c>
 8003cb2:	3608      	adds	r6, #8
 8003cb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003cb6:	2b80      	cmp	r3, #128	; 0x80
 8003cb8:	f000 8122 	beq.w	8003f00 <_svfprintf_r+0x904>
 8003cbc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cc0:	1ac7      	subs	r7, r0, r3
 8003cc2:	2f00      	cmp	r7, #0
 8003cc4:	dd32      	ble.n	8003d2c <_svfprintf_r+0x730>
 8003cc6:	2f10      	cmp	r7, #16
 8003cc8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003cca:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8003ef8 <_svfprintf_r+0x8fc>
 8003cce:	dd22      	ble.n	8003d16 <_svfprintf_r+0x71a>
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	f04f 0910 	mov.w	r9, #16
 8003cd6:	4644      	mov	r4, r8
 8003cd8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003cdc:	e003      	b.n	8003ce6 <_svfprintf_r+0x6ea>
 8003cde:	3f10      	subs	r7, #16
 8003ce0:	3608      	adds	r6, #8
 8003ce2:	2f10      	cmp	r7, #16
 8003ce4:	dd15      	ble.n	8003d12 <_svfprintf_r+0x716>
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	3510      	adds	r5, #16
 8003cea:	2b07      	cmp	r3, #7
 8003cec:	e886 0210 	stmia.w	r6, {r4, r9}
 8003cf0:	953b      	str	r5, [sp, #236]	; 0xec
 8003cf2:	933a      	str	r3, [sp, #232]	; 0xe8
 8003cf4:	ddf3      	ble.n	8003cde <_svfprintf_r+0x6e2>
 8003cf6:	4640      	mov	r0, r8
 8003cf8:	4651      	mov	r1, sl
 8003cfa:	465a      	mov	r2, fp
 8003cfc:	f002 ffee 	bl	8006cdc <__ssprint_r>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	f47f ad52 	bne.w	80037aa <_svfprintf_r+0x1ae>
 8003d06:	3f10      	subs	r7, #16
 8003d08:	2f10      	cmp	r7, #16
 8003d0a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003d0c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003d0e:	ae1f      	add	r6, sp, #124	; 0x7c
 8003d10:	dce9      	bgt.n	8003ce6 <_svfprintf_r+0x6ea>
 8003d12:	46a0      	mov	r8, r4
 8003d14:	461c      	mov	r4, r3
 8003d16:	3401      	adds	r4, #1
 8003d18:	19ed      	adds	r5, r5, r7
 8003d1a:	2c07      	cmp	r4, #7
 8003d1c:	f8c6 8000 	str.w	r8, [r6]
 8003d20:	6077      	str	r7, [r6, #4]
 8003d22:	953b      	str	r5, [sp, #236]	; 0xec
 8003d24:	943a      	str	r4, [sp, #232]	; 0xe8
 8003d26:	f300 8194 	bgt.w	8004052 <_svfprintf_r+0xa56>
 8003d2a:	3608      	adds	r6, #8
 8003d2c:	9908      	ldr	r1, [sp, #32]
 8003d2e:	05ca      	lsls	r2, r1, #23
 8003d30:	d472      	bmi.n	8003e18 <_svfprintf_r+0x81c>
 8003d32:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003d38:	6073      	str	r3, [r6, #4]
 8003d3a:	3401      	adds	r4, #1
 8003d3c:	18ed      	adds	r5, r5, r3
 8003d3e:	2c07      	cmp	r4, #7
 8003d40:	6032      	str	r2, [r6, #0]
 8003d42:	953b      	str	r5, [sp, #236]	; 0xec
 8003d44:	943a      	str	r4, [sp, #232]	; 0xe8
 8003d46:	dc5c      	bgt.n	8003e02 <_svfprintf_r+0x806>
 8003d48:	3608      	adds	r6, #8
 8003d4a:	9908      	ldr	r1, [sp, #32]
 8003d4c:	074b      	lsls	r3, r1, #29
 8003d4e:	d53e      	bpl.n	8003dce <_svfprintf_r+0x7d2>
 8003d50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d54:	1ad7      	subs	r7, r2, r3
 8003d56:	2f00      	cmp	r7, #0
 8003d58:	dd39      	ble.n	8003dce <_svfprintf_r+0x7d2>
 8003d5a:	2f10      	cmp	r7, #16
 8003d5c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003d5e:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8003efc <_svfprintf_r+0x900>
 8003d62:	dd22      	ble.n	8003daa <_svfprintf_r+0x7ae>
 8003d64:	4623      	mov	r3, r4
 8003d66:	f04f 0910 	mov.w	r9, #16
 8003d6a:	4644      	mov	r4, r8
 8003d6c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003d70:	e003      	b.n	8003d7a <_svfprintf_r+0x77e>
 8003d72:	3f10      	subs	r7, #16
 8003d74:	3608      	adds	r6, #8
 8003d76:	2f10      	cmp	r7, #16
 8003d78:	dd15      	ble.n	8003da6 <_svfprintf_r+0x7aa>
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	3510      	adds	r5, #16
 8003d7e:	2b07      	cmp	r3, #7
 8003d80:	e886 0210 	stmia.w	r6, {r4, r9}
 8003d84:	953b      	str	r5, [sp, #236]	; 0xec
 8003d86:	933a      	str	r3, [sp, #232]	; 0xe8
 8003d88:	ddf3      	ble.n	8003d72 <_svfprintf_r+0x776>
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	4651      	mov	r1, sl
 8003d8e:	465a      	mov	r2, fp
 8003d90:	f002 ffa4 	bl	8006cdc <__ssprint_r>
 8003d94:	2800      	cmp	r0, #0
 8003d96:	f47f ad08 	bne.w	80037aa <_svfprintf_r+0x1ae>
 8003d9a:	3f10      	subs	r7, #16
 8003d9c:	2f10      	cmp	r7, #16
 8003d9e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003da0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003da2:	ae1f      	add	r6, sp, #124	; 0x7c
 8003da4:	dce9      	bgt.n	8003d7a <_svfprintf_r+0x77e>
 8003da6:	46a0      	mov	r8, r4
 8003da8:	461c      	mov	r4, r3
 8003daa:	3401      	adds	r4, #1
 8003dac:	197d      	adds	r5, r7, r5
 8003dae:	2c07      	cmp	r4, #7
 8003db0:	f8c6 8000 	str.w	r8, [r6]
 8003db4:	6077      	str	r7, [r6, #4]
 8003db6:	953b      	str	r5, [sp, #236]	; 0xec
 8003db8:	943a      	str	r4, [sp, #232]	; 0xe8
 8003dba:	dd08      	ble.n	8003dce <_svfprintf_r+0x7d2>
 8003dbc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003dbe:	4651      	mov	r1, sl
 8003dc0:	465a      	mov	r2, fp
 8003dc2:	f002 ff8b 	bl	8006cdc <__ssprint_r>
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	f47f acef 	bne.w	80037aa <_svfprintf_r+0x1ae>
 8003dcc:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003dce:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003dd4:	428a      	cmp	r2, r1
 8003dd6:	bfac      	ite	ge
 8003dd8:	1880      	addge	r0, r0, r2
 8003dda:	1840      	addlt	r0, r0, r1
 8003ddc:	900c      	str	r0, [sp, #48]	; 0x30
 8003dde:	2d00      	cmp	r5, #0
 8003de0:	f040 8129 	bne.w	8004036 <_svfprintf_r+0xa3a>
 8003de4:	2300      	movs	r3, #0
 8003de6:	933a      	str	r3, [sp, #232]	; 0xe8
 8003de8:	ae1f      	add	r6, sp, #124	; 0x7c
 8003dea:	e435      	b.n	8003658 <_svfprintf_r+0x5c>
 8003dec:	46a0      	mov	r8, r4
 8003dee:	461c      	mov	r4, r3
 8003df0:	3401      	adds	r4, #1
 8003df2:	19ed      	adds	r5, r5, r7
 8003df4:	2c07      	cmp	r4, #7
 8003df6:	f8c6 8000 	str.w	r8, [r6]
 8003dfa:	6077      	str	r7, [r6, #4]
 8003dfc:	953b      	str	r5, [sp, #236]	; 0xec
 8003dfe:	943a      	str	r4, [sp, #232]	; 0xe8
 8003e00:	dda2      	ble.n	8003d48 <_svfprintf_r+0x74c>
 8003e02:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003e04:	4651      	mov	r1, sl
 8003e06:	465a      	mov	r2, fp
 8003e08:	f002 ff68 	bl	8006cdc <__ssprint_r>
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	f47f accc 	bne.w	80037aa <_svfprintf_r+0x1ae>
 8003e12:	ae1f      	add	r6, sp, #124	; 0x7c
 8003e14:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003e16:	e798      	b.n	8003d4a <_svfprintf_r+0x74e>
 8003e18:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003e1a:	2865      	cmp	r0, #101	; 0x65
 8003e1c:	f340 80aa 	ble.w	8003f74 <_svfprintf_r+0x978>
 8003e20:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8003e24:	2200      	movs	r2, #0
 8003e26:	2300      	movs	r3, #0
 8003e28:	f004 fb16 	bl	8008458 <__aeabi_dcmpeq>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	f000 8131 	beq.w	8004094 <_svfprintf_r+0xa98>
 8003e32:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003e34:	4b2f      	ldr	r3, [pc, #188]	; (8003ef4 <_svfprintf_r+0x8f8>)
 8003e36:	3401      	adds	r4, #1
 8003e38:	6033      	str	r3, [r6, #0]
 8003e3a:	3501      	adds	r5, #1
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	2c07      	cmp	r4, #7
 8003e40:	6073      	str	r3, [r6, #4]
 8003e42:	953b      	str	r5, [sp, #236]	; 0xec
 8003e44:	943a      	str	r4, [sp, #232]	; 0xe8
 8003e46:	f300 82b8 	bgt.w	80043ba <_svfprintf_r+0xdbe>
 8003e4a:	3608      	adds	r6, #8
 8003e4c:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8003e4e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003e50:	4299      	cmp	r1, r3
 8003e52:	dc03      	bgt.n	8003e5c <_svfprintf_r+0x860>
 8003e54:	9a08      	ldr	r2, [sp, #32]
 8003e56:	07d3      	lsls	r3, r2, #31
 8003e58:	f57f af77 	bpl.w	8003d4a <_svfprintf_r+0x74e>
 8003e5c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003e5e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003e60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003e62:	6070      	str	r0, [r6, #4]
 8003e64:	3401      	adds	r4, #1
 8003e66:	182d      	adds	r5, r5, r0
 8003e68:	2c07      	cmp	r4, #7
 8003e6a:	6033      	str	r3, [r6, #0]
 8003e6c:	953b      	str	r5, [sp, #236]	; 0xec
 8003e6e:	943a      	str	r4, [sp, #232]	; 0xe8
 8003e70:	f300 8300 	bgt.w	8004474 <_svfprintf_r+0xe78>
 8003e74:	3608      	adds	r6, #8
 8003e76:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003e78:	1e4f      	subs	r7, r1, #1
 8003e7a:	2f00      	cmp	r7, #0
 8003e7c:	f77f af65 	ble.w	8003d4a <_svfprintf_r+0x74e>
 8003e80:	2f10      	cmp	r7, #16
 8003e82:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003e84:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003ef8 <_svfprintf_r+0x8fc>
 8003e88:	ddb2      	ble.n	8003df0 <_svfprintf_r+0x7f4>
 8003e8a:	4623      	mov	r3, r4
 8003e8c:	f04f 0910 	mov.w	r9, #16
 8003e90:	4644      	mov	r4, r8
 8003e92:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003e96:	e003      	b.n	8003ea0 <_svfprintf_r+0x8a4>
 8003e98:	3608      	adds	r6, #8
 8003e9a:	3f10      	subs	r7, #16
 8003e9c:	2f10      	cmp	r7, #16
 8003e9e:	dda5      	ble.n	8003dec <_svfprintf_r+0x7f0>
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	3510      	adds	r5, #16
 8003ea4:	2b07      	cmp	r3, #7
 8003ea6:	e886 0210 	stmia.w	r6, {r4, r9}
 8003eaa:	953b      	str	r5, [sp, #236]	; 0xec
 8003eac:	933a      	str	r3, [sp, #232]	; 0xe8
 8003eae:	ddf3      	ble.n	8003e98 <_svfprintf_r+0x89c>
 8003eb0:	4640      	mov	r0, r8
 8003eb2:	4651      	mov	r1, sl
 8003eb4:	465a      	mov	r2, fp
 8003eb6:	f002 ff11 	bl	8006cdc <__ssprint_r>
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	f47f ac75 	bne.w	80037aa <_svfprintf_r+0x1ae>
 8003ec0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003ec2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003ec4:	ae1f      	add	r6, sp, #124	; 0x7c
 8003ec6:	e7e8      	b.n	8003e9a <_svfprintf_r+0x89e>
 8003ec8:	2a00      	cmp	r2, #0
 8003eca:	f040 80be 	bne.w	800404a <_svfprintf_r+0xa4e>
 8003ece:	9808      	ldr	r0, [sp, #32]
 8003ed0:	07c1      	lsls	r1, r0, #31
 8003ed2:	bf5c      	itt	pl
 8003ed4:	920d      	strpl	r2, [sp, #52]	; 0x34
 8003ed6:	f8cd b044 	strpl.w	fp, [sp, #68]	; 0x44
 8003eda:	f57f acf3 	bpl.w	80038c4 <_svfprintf_r+0x2c8>
 8003ede:	991d      	ldr	r1, [sp, #116]	; 0x74
 8003ee0:	2330      	movs	r3, #48	; 0x30
 8003ee2:	f10d 02e3 	add.w	r2, sp, #227	; 0xe3
 8003ee6:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8003eea:	910d      	str	r1, [sp, #52]	; 0x34
 8003eec:	9211      	str	r2, [sp, #68]	; 0x44
 8003eee:	e4e9      	b.n	80038c4 <_svfprintf_r+0x2c8>
 8003ef0:	080087c4 	.word	0x080087c4
 8003ef4:	080087e0 	.word	0x080087e0
 8003ef8:	08008644 	.word	0x08008644
 8003efc:	08008634 	.word	0x08008634
 8003f00:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003f02:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003f04:	1a47      	subs	r7, r0, r1
 8003f06:	2f00      	cmp	r7, #0
 8003f08:	f77f aed8 	ble.w	8003cbc <_svfprintf_r+0x6c0>
 8003f0c:	2f10      	cmp	r7, #16
 8003f0e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003f10:	f8df 86d8 	ldr.w	r8, [pc, #1752]	; 80045ec <_svfprintf_r+0xff0>
 8003f14:	dd22      	ble.n	8003f5c <_svfprintf_r+0x960>
 8003f16:	4623      	mov	r3, r4
 8003f18:	f04f 0910 	mov.w	r9, #16
 8003f1c:	4644      	mov	r4, r8
 8003f1e:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003f22:	e003      	b.n	8003f2c <_svfprintf_r+0x930>
 8003f24:	3f10      	subs	r7, #16
 8003f26:	3608      	adds	r6, #8
 8003f28:	2f10      	cmp	r7, #16
 8003f2a:	dd15      	ble.n	8003f58 <_svfprintf_r+0x95c>
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	3510      	adds	r5, #16
 8003f30:	2b07      	cmp	r3, #7
 8003f32:	e886 0210 	stmia.w	r6, {r4, r9}
 8003f36:	953b      	str	r5, [sp, #236]	; 0xec
 8003f38:	933a      	str	r3, [sp, #232]	; 0xe8
 8003f3a:	ddf3      	ble.n	8003f24 <_svfprintf_r+0x928>
 8003f3c:	4640      	mov	r0, r8
 8003f3e:	4651      	mov	r1, sl
 8003f40:	465a      	mov	r2, fp
 8003f42:	f002 fecb 	bl	8006cdc <__ssprint_r>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	f47f ac2f 	bne.w	80037aa <_svfprintf_r+0x1ae>
 8003f4c:	3f10      	subs	r7, #16
 8003f4e:	2f10      	cmp	r7, #16
 8003f50:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003f52:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003f54:	ae1f      	add	r6, sp, #124	; 0x7c
 8003f56:	dce9      	bgt.n	8003f2c <_svfprintf_r+0x930>
 8003f58:	46a0      	mov	r8, r4
 8003f5a:	461c      	mov	r4, r3
 8003f5c:	3401      	adds	r4, #1
 8003f5e:	19ed      	adds	r5, r5, r7
 8003f60:	2c07      	cmp	r4, #7
 8003f62:	f8c6 8000 	str.w	r8, [r6]
 8003f66:	6077      	str	r7, [r6, #4]
 8003f68:	953b      	str	r5, [sp, #236]	; 0xec
 8003f6a:	943a      	str	r4, [sp, #232]	; 0xe8
 8003f6c:	f300 81df 	bgt.w	800432e <_svfprintf_r+0xd32>
 8003f70:	3608      	adds	r6, #8
 8003f72:	e6a3      	b.n	8003cbc <_svfprintf_r+0x6c0>
 8003f74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003f76:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003f78:	2a01      	cmp	r2, #1
 8003f7a:	f340 81a5 	ble.w	80042c8 <_svfprintf_r+0xccc>
 8003f7e:	3401      	adds	r4, #1
 8003f80:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003f82:	3501      	adds	r5, #1
 8003f84:	2301      	movs	r3, #1
 8003f86:	2c07      	cmp	r4, #7
 8003f88:	6030      	str	r0, [r6, #0]
 8003f8a:	6073      	str	r3, [r6, #4]
 8003f8c:	953b      	str	r5, [sp, #236]	; 0xec
 8003f8e:	943a      	str	r4, [sp, #232]	; 0xe8
 8003f90:	f300 81c1 	bgt.w	8004316 <_svfprintf_r+0xd1a>
 8003f94:	3608      	adds	r6, #8
 8003f96:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003f98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003f9a:	6071      	str	r1, [r6, #4]
 8003f9c:	3401      	adds	r4, #1
 8003f9e:	186d      	adds	r5, r5, r1
 8003fa0:	2c07      	cmp	r4, #7
 8003fa2:	6032      	str	r2, [r6, #0]
 8003fa4:	953b      	str	r5, [sp, #236]	; 0xec
 8003fa6:	943a      	str	r4, [sp, #232]	; 0xe8
 8003fa8:	f300 81a9 	bgt.w	80042fe <_svfprintf_r+0xd02>
 8003fac:	3608      	adds	r6, #8
 8003fae:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f004 fa4f 	bl	8008458 <__aeabi_dcmpeq>
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	f040 80f6 	bne.w	80041ac <_svfprintf_r+0xbb0>
 8003fc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003fc2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003fc4:	1e5a      	subs	r2, r3, #1
 8003fc6:	3401      	adds	r4, #1
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	18ad      	adds	r5, r5, r2
 8003fcc:	2c07      	cmp	r4, #7
 8003fce:	6033      	str	r3, [r6, #0]
 8003fd0:	6072      	str	r2, [r6, #4]
 8003fd2:	953b      	str	r5, [sp, #236]	; 0xec
 8003fd4:	943a      	str	r4, [sp, #232]	; 0xe8
 8003fd6:	dc22      	bgt.n	800401e <_svfprintf_r+0xa22>
 8003fd8:	3608      	adds	r6, #8
 8003fda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003fdc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003fde:	3401      	adds	r4, #1
 8003fe0:	18ed      	adds	r5, r5, r3
 8003fe2:	2c07      	cmp	r4, #7
 8003fe4:	ab3c      	add	r3, sp, #240	; 0xf0
 8003fe6:	6033      	str	r3, [r6, #0]
 8003fe8:	6070      	str	r0, [r6, #4]
 8003fea:	953b      	str	r5, [sp, #236]	; 0xec
 8003fec:	943a      	str	r4, [sp, #232]	; 0xe8
 8003fee:	f77f aeab 	ble.w	8003d48 <_svfprintf_r+0x74c>
 8003ff2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003ff4:	4651      	mov	r1, sl
 8003ff6:	465a      	mov	r2, fp
 8003ff8:	f002 fe70 	bl	8006cdc <__ssprint_r>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	f47f abd4 	bne.w	80037aa <_svfprintf_r+0x1ae>
 8004002:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004004:	ae1f      	add	r6, sp, #124	; 0x7c
 8004006:	e6a0      	b.n	8003d4a <_svfprintf_r+0x74e>
 8004008:	46a0      	mov	r8, r4
 800400a:	461c      	mov	r4, r3
 800400c:	3401      	adds	r4, #1
 800400e:	19ed      	adds	r5, r5, r7
 8004010:	2c07      	cmp	r4, #7
 8004012:	f8c6 8000 	str.w	r8, [r6]
 8004016:	6077      	str	r7, [r6, #4]
 8004018:	953b      	str	r5, [sp, #236]	; 0xec
 800401a:	943a      	str	r4, [sp, #232]	; 0xe8
 800401c:	dddc      	ble.n	8003fd8 <_svfprintf_r+0x9dc>
 800401e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004020:	4651      	mov	r1, sl
 8004022:	465a      	mov	r2, fp
 8004024:	f002 fe5a 	bl	8006cdc <__ssprint_r>
 8004028:	2800      	cmp	r0, #0
 800402a:	f47f abbe 	bne.w	80037aa <_svfprintf_r+0x1ae>
 800402e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004030:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004032:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004034:	e7d1      	b.n	8003fda <_svfprintf_r+0x9de>
 8004036:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004038:	4651      	mov	r1, sl
 800403a:	465a      	mov	r2, fp
 800403c:	f002 fe4e 	bl	8006cdc <__ssprint_r>
 8004040:	2800      	cmp	r0, #0
 8004042:	f43f aecf 	beq.w	8003de4 <_svfprintf_r+0x7e8>
 8004046:	f7ff bbb0 	b.w	80037aa <_svfprintf_r+0x1ae>
 800404a:	910d      	str	r1, [sp, #52]	; 0x34
 800404c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8004050:	e438      	b.n	80038c4 <_svfprintf_r+0x2c8>
 8004052:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004054:	4651      	mov	r1, sl
 8004056:	465a      	mov	r2, fp
 8004058:	f002 fe40 	bl	8006cdc <__ssprint_r>
 800405c:	2800      	cmp	r0, #0
 800405e:	f47f aba4 	bne.w	80037aa <_svfprintf_r+0x1ae>
 8004062:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004064:	ae1f      	add	r6, sp, #124	; 0x7c
 8004066:	e661      	b.n	8003d2c <_svfprintf_r+0x730>
 8004068:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800406a:	4651      	mov	r1, sl
 800406c:	465a      	mov	r2, fp
 800406e:	f002 fe35 	bl	8006cdc <__ssprint_r>
 8004072:	2800      	cmp	r0, #0
 8004074:	f47f ab99 	bne.w	80037aa <_svfprintf_r+0x1ae>
 8004078:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800407a:	ae1f      	add	r6, sp, #124	; 0x7c
 800407c:	e61a      	b.n	8003cb4 <_svfprintf_r+0x6b8>
 800407e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004080:	4651      	mov	r1, sl
 8004082:	465a      	mov	r2, fp
 8004084:	f002 fe2a 	bl	8006cdc <__ssprint_r>
 8004088:	2800      	cmp	r0, #0
 800408a:	f47f ab8e 	bne.w	80037aa <_svfprintf_r+0x1ae>
 800408e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004090:	ae1f      	add	r6, sp, #124	; 0x7c
 8004092:	e600      	b.n	8003c96 <_svfprintf_r+0x69a>
 8004094:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8004096:	2f00      	cmp	r7, #0
 8004098:	f340 819a 	ble.w	80043d0 <_svfprintf_r+0xdd4>
 800409c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800409e:	9816      	ldr	r0, [sp, #88]	; 0x58
 80040a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80040a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80040a4:	4287      	cmp	r7, r0
 80040a6:	bfa8      	it	ge
 80040a8:	4607      	movge	r7, r0
 80040aa:	1889      	adds	r1, r1, r2
 80040ac:	2f00      	cmp	r7, #0
 80040ae:	910d      	str	r1, [sp, #52]	; 0x34
 80040b0:	dd0b      	ble.n	80040ca <_svfprintf_r+0xace>
 80040b2:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80040b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80040b6:	6077      	str	r7, [r6, #4]
 80040b8:	3401      	adds	r4, #1
 80040ba:	19ed      	adds	r5, r5, r7
 80040bc:	2c07      	cmp	r4, #7
 80040be:	6032      	str	r2, [r6, #0]
 80040c0:	953b      	str	r5, [sp, #236]	; 0xec
 80040c2:	943a      	str	r4, [sp, #232]	; 0xe8
 80040c4:	f300 8304 	bgt.w	80046d0 <_svfprintf_r+0x10d4>
 80040c8:	3608      	adds	r6, #8
 80040ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80040cc:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 80040d0:	1bdf      	subs	r7, r3, r7
 80040d2:	2f00      	cmp	r7, #0
 80040d4:	f340 80a0 	ble.w	8004218 <_svfprintf_r+0xc1c>
 80040d8:	2f10      	cmp	r7, #16
 80040da:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80040dc:	f8df 850c 	ldr.w	r8, [pc, #1292]	; 80045ec <_svfprintf_r+0xff0>
 80040e0:	f340 815f 	ble.w	80043a2 <_svfprintf_r+0xda6>
 80040e4:	4623      	mov	r3, r4
 80040e6:	f04f 0910 	mov.w	r9, #16
 80040ea:	4644      	mov	r4, r8
 80040ec:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80040f0:	e004      	b.n	80040fc <_svfprintf_r+0xb00>
 80040f2:	3608      	adds	r6, #8
 80040f4:	3f10      	subs	r7, #16
 80040f6:	2f10      	cmp	r7, #16
 80040f8:	f340 8151 	ble.w	800439e <_svfprintf_r+0xda2>
 80040fc:	3301      	adds	r3, #1
 80040fe:	3510      	adds	r5, #16
 8004100:	2b07      	cmp	r3, #7
 8004102:	e886 0210 	stmia.w	r6, {r4, r9}
 8004106:	953b      	str	r5, [sp, #236]	; 0xec
 8004108:	933a      	str	r3, [sp, #232]	; 0xe8
 800410a:	ddf2      	ble.n	80040f2 <_svfprintf_r+0xaf6>
 800410c:	4640      	mov	r0, r8
 800410e:	4651      	mov	r1, sl
 8004110:	465a      	mov	r2, fp
 8004112:	f002 fde3 	bl	8006cdc <__ssprint_r>
 8004116:	2800      	cmp	r0, #0
 8004118:	f47f ab47 	bne.w	80037aa <_svfprintf_r+0x1ae>
 800411c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800411e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004120:	ae1f      	add	r6, sp, #124	; 0x7c
 8004122:	e7e7      	b.n	80040f4 <_svfprintf_r+0xaf8>
 8004124:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8004126:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 800412a:	f003 000f 	and.w	r0, r3, #15
 800412e:	460a      	mov	r2, r1
 8004130:	5c28      	ldrb	r0, [r5, r0]
 8004132:	3901      	subs	r1, #1
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	7010      	strb	r0, [r2, #0]
 8004138:	d1f7      	bne.n	800412a <_svfprintf_r+0xb2e>
 800413a:	ebc2 030b 	rsb	r3, r2, fp
 800413e:	9211      	str	r2, [sp, #68]	; 0x44
 8004140:	930d      	str	r3, [sp, #52]	; 0x34
 8004142:	f7ff bbbf 	b.w	80038c4 <_svfprintf_r+0x2c8>
 8004146:	2b09      	cmp	r3, #9
 8004148:	bf82      	ittt	hi
 800414a:	f64c 45cd 	movwhi	r5, #52429	; 0xcccd
 800414e:	f10d 01e3 	addhi.w	r1, sp, #227	; 0xe3
 8004152:	f6cc 45cc 	movthi	r5, #52428	; 0xcccc
 8004156:	d809      	bhi.n	800416c <_svfprintf_r+0xb70>
 8004158:	981d      	ldr	r0, [sp, #116]	; 0x74
 800415a:	3330      	adds	r3, #48	; 0x30
 800415c:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 8004160:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8004164:	900d      	str	r0, [sp, #52]	; 0x34
 8004166:	9111      	str	r1, [sp, #68]	; 0x44
 8004168:	f7ff bbac 	b.w	80038c4 <_svfprintf_r+0x2c8>
 800416c:	fba5 0203 	umull	r0, r2, r5, r3
 8004170:	08d2      	lsrs	r2, r2, #3
 8004172:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 8004176:	4608      	mov	r0, r1
 8004178:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 800417c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004180:	7001      	strb	r1, [r0, #0]
 8004182:	4613      	mov	r3, r2
 8004184:	1e41      	subs	r1, r0, #1
 8004186:	2a00      	cmp	r2, #0
 8004188:	d1f0      	bne.n	800416c <_svfprintf_r+0xb70>
 800418a:	ebc0 030b 	rsb	r3, r0, fp
 800418e:	9011      	str	r0, [sp, #68]	; 0x44
 8004190:	930d      	str	r3, [sp, #52]	; 0x34
 8004192:	f7ff bb97 	b.w	80038c4 <_svfprintf_r+0x2c8>
 8004196:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004198:	4651      	mov	r1, sl
 800419a:	465a      	mov	r2, fp
 800419c:	f002 fd9e 	bl	8006cdc <__ssprint_r>
 80041a0:	2800      	cmp	r0, #0
 80041a2:	f47f ab02 	bne.w	80037aa <_svfprintf_r+0x1ae>
 80041a6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80041a8:	ae1f      	add	r6, sp, #124	; 0x7c
 80041aa:	e563      	b.n	8003c74 <_svfprintf_r+0x678>
 80041ac:	9910      	ldr	r1, [sp, #64]	; 0x40
 80041ae:	1e4f      	subs	r7, r1, #1
 80041b0:	2f00      	cmp	r7, #0
 80041b2:	f77f af12 	ble.w	8003fda <_svfprintf_r+0x9de>
 80041b6:	2f10      	cmp	r7, #16
 80041b8:	f8df 8430 	ldr.w	r8, [pc, #1072]	; 80045ec <_svfprintf_r+0xff0>
 80041bc:	f77f af26 	ble.w	800400c <_svfprintf_r+0xa10>
 80041c0:	4623      	mov	r3, r4
 80041c2:	f04f 0910 	mov.w	r9, #16
 80041c6:	4644      	mov	r4, r8
 80041c8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80041cc:	e004      	b.n	80041d8 <_svfprintf_r+0xbdc>
 80041ce:	3608      	adds	r6, #8
 80041d0:	3f10      	subs	r7, #16
 80041d2:	2f10      	cmp	r7, #16
 80041d4:	f77f af18 	ble.w	8004008 <_svfprintf_r+0xa0c>
 80041d8:	3301      	adds	r3, #1
 80041da:	3510      	adds	r5, #16
 80041dc:	2b07      	cmp	r3, #7
 80041de:	e886 0210 	stmia.w	r6, {r4, r9}
 80041e2:	953b      	str	r5, [sp, #236]	; 0xec
 80041e4:	933a      	str	r3, [sp, #232]	; 0xe8
 80041e6:	ddf2      	ble.n	80041ce <_svfprintf_r+0xbd2>
 80041e8:	4640      	mov	r0, r8
 80041ea:	4651      	mov	r1, sl
 80041ec:	465a      	mov	r2, fp
 80041ee:	f002 fd75 	bl	8006cdc <__ssprint_r>
 80041f2:	2800      	cmp	r0, #0
 80041f4:	f47f aad9 	bne.w	80037aa <_svfprintf_r+0x1ae>
 80041f8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80041fa:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80041fc:	ae1f      	add	r6, sp, #124	; 0x7c
 80041fe:	e7e7      	b.n	80041d0 <_svfprintf_r+0xbd4>
 8004200:	2202      	movs	r2, #2
 8004202:	e405      	b.n	8003a10 <_svfprintf_r+0x414>
 8004204:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004206:	4651      	mov	r1, sl
 8004208:	465a      	mov	r2, fp
 800420a:	f002 fd67 	bl	8006cdc <__ssprint_r>
 800420e:	2800      	cmp	r0, #0
 8004210:	f47f aacb 	bne.w	80037aa <_svfprintf_r+0x1ae>
 8004214:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004216:	ae1f      	add	r6, sp, #124	; 0x7c
 8004218:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800421a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800421c:	4298      	cmp	r0, r3
 800421e:	dc45      	bgt.n	80042ac <_svfprintf_r+0xcb0>
 8004220:	9908      	ldr	r1, [sp, #32]
 8004222:	07c9      	lsls	r1, r1, #31
 8004224:	d442      	bmi.n	80042ac <_svfprintf_r+0xcb0>
 8004226:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004228:	9816      	ldr	r0, [sp, #88]	; 0x58
 800422a:	180a      	adds	r2, r1, r0
 800422c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800422e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004230:	1a8f      	subs	r7, r1, r2
 8004232:	1ac3      	subs	r3, r0, r3
 8004234:	42bb      	cmp	r3, r7
 8004236:	bfb8      	it	lt
 8004238:	461f      	movlt	r7, r3
 800423a:	2f00      	cmp	r7, #0
 800423c:	dd0a      	ble.n	8004254 <_svfprintf_r+0xc58>
 800423e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004240:	6032      	str	r2, [r6, #0]
 8004242:	3401      	adds	r4, #1
 8004244:	19ed      	adds	r5, r5, r7
 8004246:	2c07      	cmp	r4, #7
 8004248:	6077      	str	r7, [r6, #4]
 800424a:	953b      	str	r5, [sp, #236]	; 0xec
 800424c:	943a      	str	r4, [sp, #232]	; 0xe8
 800424e:	f300 8256 	bgt.w	80046fe <_svfprintf_r+0x1102>
 8004252:	3608      	adds	r6, #8
 8004254:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8004258:	1bdf      	subs	r7, r3, r7
 800425a:	2f00      	cmp	r7, #0
 800425c:	f77f ad75 	ble.w	8003d4a <_svfprintf_r+0x74e>
 8004260:	2f10      	cmp	r7, #16
 8004262:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004264:	f8df 8384 	ldr.w	r8, [pc, #900]	; 80045ec <_svfprintf_r+0xff0>
 8004268:	f77f adc2 	ble.w	8003df0 <_svfprintf_r+0x7f4>
 800426c:	4623      	mov	r3, r4
 800426e:	f04f 0910 	mov.w	r9, #16
 8004272:	4644      	mov	r4, r8
 8004274:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004278:	e004      	b.n	8004284 <_svfprintf_r+0xc88>
 800427a:	3608      	adds	r6, #8
 800427c:	3f10      	subs	r7, #16
 800427e:	2f10      	cmp	r7, #16
 8004280:	f77f adb4 	ble.w	8003dec <_svfprintf_r+0x7f0>
 8004284:	3301      	adds	r3, #1
 8004286:	3510      	adds	r5, #16
 8004288:	2b07      	cmp	r3, #7
 800428a:	e886 0210 	stmia.w	r6, {r4, r9}
 800428e:	953b      	str	r5, [sp, #236]	; 0xec
 8004290:	933a      	str	r3, [sp, #232]	; 0xe8
 8004292:	ddf2      	ble.n	800427a <_svfprintf_r+0xc7e>
 8004294:	4640      	mov	r0, r8
 8004296:	4651      	mov	r1, sl
 8004298:	465a      	mov	r2, fp
 800429a:	f002 fd1f 	bl	8006cdc <__ssprint_r>
 800429e:	2800      	cmp	r0, #0
 80042a0:	f47f aa83 	bne.w	80037aa <_svfprintf_r+0x1ae>
 80042a4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042a6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80042a8:	ae1f      	add	r6, sp, #124	; 0x7c
 80042aa:	e7e7      	b.n	800427c <_svfprintf_r+0xc80>
 80042ac:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80042ae:	981a      	ldr	r0, [sp, #104]	; 0x68
 80042b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80042b2:	6070      	str	r0, [r6, #4]
 80042b4:	3401      	adds	r4, #1
 80042b6:	182d      	adds	r5, r5, r0
 80042b8:	2c07      	cmp	r4, #7
 80042ba:	6032      	str	r2, [r6, #0]
 80042bc:	953b      	str	r5, [sp, #236]	; 0xec
 80042be:	943a      	str	r4, [sp, #232]	; 0xe8
 80042c0:	f300 8211 	bgt.w	80046e6 <_svfprintf_r+0x10ea>
 80042c4:	3608      	adds	r6, #8
 80042c6:	e7ae      	b.n	8004226 <_svfprintf_r+0xc2a>
 80042c8:	9b08      	ldr	r3, [sp, #32]
 80042ca:	07da      	lsls	r2, r3, #31
 80042cc:	f53f ae57 	bmi.w	8003f7e <_svfprintf_r+0x982>
 80042d0:	3401      	adds	r4, #1
 80042d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80042d4:	3501      	adds	r5, #1
 80042d6:	2301      	movs	r3, #1
 80042d8:	2c07      	cmp	r4, #7
 80042da:	6032      	str	r2, [r6, #0]
 80042dc:	6073      	str	r3, [r6, #4]
 80042de:	953b      	str	r5, [sp, #236]	; 0xec
 80042e0:	943a      	str	r4, [sp, #232]	; 0xe8
 80042e2:	f77f ae79 	ble.w	8003fd8 <_svfprintf_r+0x9dc>
 80042e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80042e8:	4651      	mov	r1, sl
 80042ea:	465a      	mov	r2, fp
 80042ec:	f002 fcf6 	bl	8006cdc <__ssprint_r>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	f47f aa5a 	bne.w	80037aa <_svfprintf_r+0x1ae>
 80042f6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042f8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80042fa:	ae1f      	add	r6, sp, #124	; 0x7c
 80042fc:	e66d      	b.n	8003fda <_svfprintf_r+0x9de>
 80042fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004300:	4651      	mov	r1, sl
 8004302:	465a      	mov	r2, fp
 8004304:	f002 fcea 	bl	8006cdc <__ssprint_r>
 8004308:	2800      	cmp	r0, #0
 800430a:	f47f aa4e 	bne.w	80037aa <_svfprintf_r+0x1ae>
 800430e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004310:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004312:	ae1f      	add	r6, sp, #124	; 0x7c
 8004314:	e64b      	b.n	8003fae <_svfprintf_r+0x9b2>
 8004316:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004318:	4651      	mov	r1, sl
 800431a:	465a      	mov	r2, fp
 800431c:	f002 fcde 	bl	8006cdc <__ssprint_r>
 8004320:	2800      	cmp	r0, #0
 8004322:	f47f aa42 	bne.w	80037aa <_svfprintf_r+0x1ae>
 8004326:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004328:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800432a:	ae1f      	add	r6, sp, #124	; 0x7c
 800432c:	e633      	b.n	8003f96 <_svfprintf_r+0x99a>
 800432e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004330:	4651      	mov	r1, sl
 8004332:	465a      	mov	r2, fp
 8004334:	f002 fcd2 	bl	8006cdc <__ssprint_r>
 8004338:	2800      	cmp	r0, #0
 800433a:	f47f aa36 	bne.w	80037aa <_svfprintf_r+0x1ae>
 800433e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004340:	ae1f      	add	r6, sp, #124	; 0x7c
 8004342:	e4bb      	b.n	8003cbc <_svfprintf_r+0x6c0>
 8004344:	f002 fb62 	bl	8006a0c <__fpclassifyd>
 8004348:	2800      	cmp	r0, #0
 800434a:	f040 809e 	bne.w	800448a <_svfprintf_r+0xe8e>
 800434e:	2203      	movs	r2, #3
 8004350:	9012      	str	r0, [sp, #72]	; 0x48
 8004352:	4ba3      	ldr	r3, [pc, #652]	; (80045e0 <_svfprintf_r+0xfe4>)
 8004354:	920a      	str	r2, [sp, #40]	; 0x28
 8004356:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004358:	4aa2      	ldr	r2, [pc, #648]	; (80045e4 <_svfprintf_r+0xfe8>)
 800435a:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800435e:	2847      	cmp	r0, #71	; 0x47
 8004360:	bfd8      	it	le
 8004362:	461a      	movle	r2, r3
 8004364:	9211      	str	r2, [sp, #68]	; 0x44
 8004366:	2303      	movs	r3, #3
 8004368:	9a08      	ldr	r2, [sp, #32]
 800436a:	930d      	str	r3, [sp, #52]	; 0x34
 800436c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800436e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004372:	9208      	str	r2, [sp, #32]
 8004374:	9316      	str	r3, [sp, #88]	; 0x58
 8004376:	f7ff baaf 	b.w	80038d8 <_svfprintf_r+0x2dc>
 800437a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800437c:	2201      	movs	r2, #1
 800437e:	680b      	ldr	r3, [r1, #0]
 8004380:	e414      	b.n	8003bac <_svfprintf_r+0x5b0>
 8004382:	9b08      	ldr	r3, [sp, #32]
 8004384:	065f      	lsls	r7, r3, #25
 8004386:	d56d      	bpl.n	8004464 <_svfprintf_r+0xe68>
 8004388:	980e      	ldr	r0, [sp, #56]	; 0x38
 800438a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800438c:	6803      	ldr	r3, [r0, #0]
 800438e:	3004      	adds	r0, #4
 8004390:	900e      	str	r0, [sp, #56]	; 0x38
 8004392:	8019      	strh	r1, [r3, #0]
 8004394:	f7ff b960 	b.w	8003658 <_svfprintf_r+0x5c>
 8004398:	990e      	ldr	r1, [sp, #56]	; 0x38
 800439a:	680b      	ldr	r3, [r1, #0]
 800439c:	e406      	b.n	8003bac <_svfprintf_r+0x5b0>
 800439e:	46a0      	mov	r8, r4
 80043a0:	461c      	mov	r4, r3
 80043a2:	3401      	adds	r4, #1
 80043a4:	19ed      	adds	r5, r5, r7
 80043a6:	2c07      	cmp	r4, #7
 80043a8:	f8c6 8000 	str.w	r8, [r6]
 80043ac:	6077      	str	r7, [r6, #4]
 80043ae:	953b      	str	r5, [sp, #236]	; 0xec
 80043b0:	943a      	str	r4, [sp, #232]	; 0xe8
 80043b2:	f73f af27 	bgt.w	8004204 <_svfprintf_r+0xc08>
 80043b6:	3608      	adds	r6, #8
 80043b8:	e72e      	b.n	8004218 <_svfprintf_r+0xc1c>
 80043ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80043bc:	4651      	mov	r1, sl
 80043be:	465a      	mov	r2, fp
 80043c0:	f002 fc8c 	bl	8006cdc <__ssprint_r>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	f47f a9f0 	bne.w	80037aa <_svfprintf_r+0x1ae>
 80043ca:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80043cc:	ae1f      	add	r6, sp, #124	; 0x7c
 80043ce:	e53d      	b.n	8003e4c <_svfprintf_r+0x850>
 80043d0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80043d2:	4b85      	ldr	r3, [pc, #532]	; (80045e8 <_svfprintf_r+0xfec>)
 80043d4:	3401      	adds	r4, #1
 80043d6:	6033      	str	r3, [r6, #0]
 80043d8:	3501      	adds	r5, #1
 80043da:	2301      	movs	r3, #1
 80043dc:	2c07      	cmp	r4, #7
 80043de:	6073      	str	r3, [r6, #4]
 80043e0:	953b      	str	r5, [sp, #236]	; 0xec
 80043e2:	943a      	str	r4, [sp, #232]	; 0xe8
 80043e4:	f300 8139 	bgt.w	800465a <_svfprintf_r+0x105e>
 80043e8:	3608      	adds	r6, #8
 80043ea:	b92f      	cbnz	r7, 80043f8 <_svfprintf_r+0xdfc>
 80043ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80043ee:	b91a      	cbnz	r2, 80043f8 <_svfprintf_r+0xdfc>
 80043f0:	9b08      	ldr	r3, [sp, #32]
 80043f2:	07d8      	lsls	r0, r3, #31
 80043f4:	f57f aca9 	bpl.w	8003d4a <_svfprintf_r+0x74e>
 80043f8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80043fa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80043fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80043fe:	6071      	str	r1, [r6, #4]
 8004400:	3401      	adds	r4, #1
 8004402:	186d      	adds	r5, r5, r1
 8004404:	2c07      	cmp	r4, #7
 8004406:	6030      	str	r0, [r6, #0]
 8004408:	953b      	str	r5, [sp, #236]	; 0xec
 800440a:	943a      	str	r4, [sp, #232]	; 0xe8
 800440c:	f300 81d2 	bgt.w	80047b4 <_svfprintf_r+0x11b8>
 8004410:	3608      	adds	r6, #8
 8004412:	427f      	negs	r7, r7
 8004414:	2f00      	cmp	r7, #0
 8004416:	f340 8141 	ble.w	800469c <_svfprintf_r+0x10a0>
 800441a:	2f10      	cmp	r7, #16
 800441c:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 80045ec <_svfprintf_r+0xff0>
 8004420:	f340 8183 	ble.w	800472a <_svfprintf_r+0x112e>
 8004424:	4623      	mov	r3, r4
 8004426:	f04f 0910 	mov.w	r9, #16
 800442a:	4644      	mov	r4, r8
 800442c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004430:	e004      	b.n	800443c <_svfprintf_r+0xe40>
 8004432:	3608      	adds	r6, #8
 8004434:	3f10      	subs	r7, #16
 8004436:	2f10      	cmp	r7, #16
 8004438:	f340 8175 	ble.w	8004726 <_svfprintf_r+0x112a>
 800443c:	3301      	adds	r3, #1
 800443e:	3510      	adds	r5, #16
 8004440:	2b07      	cmp	r3, #7
 8004442:	e886 0210 	stmia.w	r6, {r4, r9}
 8004446:	953b      	str	r5, [sp, #236]	; 0xec
 8004448:	933a      	str	r3, [sp, #232]	; 0xe8
 800444a:	ddf2      	ble.n	8004432 <_svfprintf_r+0xe36>
 800444c:	4640      	mov	r0, r8
 800444e:	4651      	mov	r1, sl
 8004450:	465a      	mov	r2, fp
 8004452:	f002 fc43 	bl	8006cdc <__ssprint_r>
 8004456:	2800      	cmp	r0, #0
 8004458:	f47f a9a7 	bne.w	80037aa <_svfprintf_r+0x1ae>
 800445c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800445e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004460:	ae1f      	add	r6, sp, #124	; 0x7c
 8004462:	e7e7      	b.n	8004434 <_svfprintf_r+0xe38>
 8004464:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004466:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004468:	6813      	ldr	r3, [r2, #0]
 800446a:	3204      	adds	r2, #4
 800446c:	920e      	str	r2, [sp, #56]	; 0x38
 800446e:	6018      	str	r0, [r3, #0]
 8004470:	f7ff b8f2 	b.w	8003658 <_svfprintf_r+0x5c>
 8004474:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004476:	4651      	mov	r1, sl
 8004478:	465a      	mov	r2, fp
 800447a:	f002 fc2f 	bl	8006cdc <__ssprint_r>
 800447e:	2800      	cmp	r0, #0
 8004480:	f47f a993 	bne.w	80037aa <_svfprintf_r+0x1ae>
 8004484:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004486:	ae1f      	add	r6, sp, #124	; 0x7c
 8004488:	e4f5      	b.n	8003e76 <_svfprintf_r+0x87a>
 800448a:	1c60      	adds	r0, r4, #1
 800448c:	f000 80f1 	beq.w	8004672 <_svfprintf_r+0x1076>
 8004490:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004492:	2967      	cmp	r1, #103	; 0x67
 8004494:	bf18      	it	ne
 8004496:	2947      	cmpne	r1, #71	; 0x47
 8004498:	bf14      	ite	ne
 800449a:	2300      	movne	r3, #0
 800449c:	2301      	moveq	r3, #1
 800449e:	bf18      	it	ne
 80044a0:	930a      	strne	r3, [sp, #40]	; 0x28
 80044a2:	d104      	bne.n	80044ae <_svfprintf_r+0xeb2>
 80044a4:	2c00      	cmp	r4, #0
 80044a6:	f000 81ad 	beq.w	8004804 <_svfprintf_r+0x1208>
 80044aa:	2201      	movs	r2, #1
 80044ac:	920a      	str	r2, [sp, #40]	; 0x28
 80044ae:	9808      	ldr	r0, [sp, #32]
 80044b0:	2d00      	cmp	r5, #0
 80044b2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80044b6:	9008      	str	r0, [sp, #32]
 80044b8:	f2c0 8189 	blt.w	80047ce <_svfprintf_r+0x11d2>
 80044bc:	2200      	movs	r2, #0
 80044be:	9212      	str	r2, [sp, #72]	; 0x48
 80044c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80044c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80044c4:	f1a3 0166 	sub.w	r1, r3, #102	; 0x66
 80044c8:	424b      	negs	r3, r1
 80044ca:	eb43 0301 	adc.w	r3, r3, r1
 80044ce:	469c      	mov	ip, r3
 80044d0:	2846      	cmp	r0, #70	; 0x46
 80044d2:	bf08      	it	eq
 80044d4:	f04c 0c01 	orreq.w	ip, ip, #1
 80044d8:	930d      	str	r3, [sp, #52]	; 0x34
 80044da:	46a1      	mov	r9, r4
 80044dc:	2103      	movs	r1, #3
 80044de:	f1bc 0f00 	cmp.w	ip, #0
 80044e2:	d107      	bne.n	80044f4 <_svfprintf_r+0xef8>
 80044e4:	2865      	cmp	r0, #101	; 0x65
 80044e6:	bf18      	it	ne
 80044e8:	2845      	cmpne	r0, #69	; 0x45
 80044ea:	bf0c      	ite	eq
 80044ec:	f104 0901 	addeq.w	r9, r4, #1
 80044f0:	46a1      	movne	r9, r4
 80044f2:	2102      	movs	r1, #2
 80044f4:	e88d 0202 	stmia.w	sp, {r1, r9}
 80044f8:	a940      	add	r1, sp, #256	; 0x100
 80044fa:	9102      	str	r1, [sp, #8]
 80044fc:	a941      	add	r1, sp, #260	; 0x104
 80044fe:	9103      	str	r1, [sp, #12]
 8004500:	4642      	mov	r2, r8
 8004502:	a942      	add	r1, sp, #264	; 0x108
 8004504:	462b      	mov	r3, r5
 8004506:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004508:	9104      	str	r1, [sp, #16]
 800450a:	f8cd c018 	str.w	ip, [sp, #24]
 800450e:	f000 fa6b 	bl	80049e8 <_dtoa_r>
 8004512:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004514:	9011      	str	r0, [sp, #68]	; 0x44
 8004516:	2947      	cmp	r1, #71	; 0x47
 8004518:	bf18      	it	ne
 800451a:	2967      	cmpne	r1, #103	; 0x67
 800451c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004520:	d104      	bne.n	800452c <_svfprintf_r+0xf30>
 8004522:	9a08      	ldr	r2, [sp, #32]
 8004524:	07d2      	lsls	r2, r2, #31
 8004526:	bf58      	it	pl
 8004528:	9f42      	ldrpl	r7, [sp, #264]	; 0x108
 800452a:	d515      	bpl.n	8004558 <_svfprintf_r+0xf5c>
 800452c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800452e:	eb03 0709 	add.w	r7, r3, r9
 8004532:	f1bc 0f00 	cmp.w	ip, #0
 8004536:	d005      	beq.n	8004544 <_svfprintf_r+0xf48>
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b30      	cmp	r3, #48	; 0x30
 800453c:	f000 8165 	beq.w	800480a <_svfprintf_r+0x120e>
 8004540:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004542:	18ff      	adds	r7, r7, r3
 8004544:	4640      	mov	r0, r8
 8004546:	4629      	mov	r1, r5
 8004548:	2200      	movs	r2, #0
 800454a:	2300      	movs	r3, #0
 800454c:	f003 ff84 	bl	8008458 <__aeabi_dcmpeq>
 8004550:	2800      	cmp	r0, #0
 8004552:	f000 8117 	beq.w	8004784 <_svfprintf_r+0x1188>
 8004556:	9742      	str	r7, [sp, #264]	; 0x108
 8004558:	9811      	ldr	r0, [sp, #68]	; 0x44
 800455a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800455c:	1a3f      	subs	r7, r7, r0
 800455e:	9710      	str	r7, [sp, #64]	; 0x40
 8004560:	2900      	cmp	r1, #0
 8004562:	f000 80f9 	beq.w	8004758 <_svfprintf_r+0x115c>
 8004566:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004568:	1ccb      	adds	r3, r1, #3
 800456a:	db02      	blt.n	8004572 <_svfprintf_r+0xf76>
 800456c:	428c      	cmp	r4, r1
 800456e:	f280 80fa 	bge.w	8004766 <_svfprintf_r+0x116a>
 8004572:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004574:	3a02      	subs	r2, #2
 8004576:	9215      	str	r2, [sp, #84]	; 0x54
 8004578:	3901      	subs	r1, #1
 800457a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800457c:	9140      	str	r1, [sp, #256]	; 0x100
 800457e:	2900      	cmp	r1, #0
 8004580:	f88d 00f0 	strb.w	r0, [sp, #240]	; 0xf0
 8004584:	f2c0 815d 	blt.w	8004842 <_svfprintf_r+0x1246>
 8004588:	232b      	movs	r3, #43	; 0x2b
 800458a:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 800458e:	2909      	cmp	r1, #9
 8004590:	f340 8122 	ble.w	80047d8 <_svfprintf_r+0x11dc>
 8004594:	f10d 07ff 	add.w	r7, sp, #255	; 0xff
 8004598:	f246 6467 	movw	r4, #26215	; 0x6667
 800459c:	4638      	mov	r0, r7
 800459e:	f2c6 6466 	movt	r4, #26214	; 0x6666
 80045a2:	fb84 3201 	smull	r3, r2, r4, r1
 80045a6:	17cb      	asrs	r3, r1, #31
 80045a8:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 80045ac:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80045b0:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 80045b4:	3230      	adds	r2, #48	; 0x30
 80045b6:	2b09      	cmp	r3, #9
 80045b8:	4605      	mov	r5, r0
 80045ba:	4619      	mov	r1, r3
 80045bc:	f800 2d01 	strb.w	r2, [r0, #-1]!
 80045c0:	dcef      	bgt.n	80045a2 <_svfprintf_r+0xfa6>
 80045c2:	3130      	adds	r1, #48	; 0x30
 80045c4:	1eaa      	subs	r2, r5, #2
 80045c6:	b2c9      	uxtb	r1, r1
 80045c8:	42ba      	cmp	r2, r7
 80045ca:	f805 1c02 	strb.w	r1, [r5, #-2]
 80045ce:	bf28      	it	cs
 80045d0:	f10d 01f2 	addcs.w	r1, sp, #242	; 0xf2
 80045d4:	d213      	bcs.n	80045fe <_svfprintf_r+0x1002>
 80045d6:	f10d 03f2 	add.w	r3, sp, #242	; 0xf2
 80045da:	f10d 00fe 	add.w	r0, sp, #254	; 0xfe
 80045de:	e009      	b.n	80045f4 <_svfprintf_r+0xff8>
 80045e0:	080087a8 	.word	0x080087a8
 80045e4:	080087ac 	.word	0x080087ac
 80045e8:	080087e0 	.word	0x080087e0
 80045ec:	08008644 	.word	0x08008644
 80045f0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80045f4:	f803 1b01 	strb.w	r1, [r3], #1
 80045f8:	4282      	cmp	r2, r0
 80045fa:	4619      	mov	r1, r3
 80045fc:	d1f8      	bne.n	80045f0 <_svfprintf_r+0xff4>
 80045fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004600:	ab3c      	add	r3, sp, #240	; 0xf0
 8004602:	1acb      	subs	r3, r1, r3
 8004604:	931b      	str	r3, [sp, #108]	; 0x6c
 8004606:	2801      	cmp	r0, #1
 8004608:	4403      	add	r3, r0
 800460a:	930d      	str	r3, [sp, #52]	; 0x34
 800460c:	f340 8125 	ble.w	800485a <_svfprintf_r+0x125e>
 8004610:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004612:	3301      	adds	r3, #1
 8004614:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8004618:	2100      	movs	r1, #0
 800461a:	930d      	str	r3, [sp, #52]	; 0x34
 800461c:	900a      	str	r0, [sp, #40]	; 0x28
 800461e:	9116      	str	r1, [sp, #88]	; 0x58
 8004620:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004622:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004626:	2b00      	cmp	r3, #0
 8004628:	f43f a956 	beq.w	80038d8 <_svfprintf_r+0x2dc>
 800462c:	232d      	movs	r3, #45	; 0x2d
 800462e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8004632:	2300      	movs	r3, #0
 8004634:	9312      	str	r3, [sp, #72]	; 0x48
 8004636:	f7ff b950 	b.w	80038da <_svfprintf_r+0x2de>
 800463a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800463c:	2140      	movs	r1, #64	; 0x40
 800463e:	f001 fa57 	bl	8005af0 <_malloc_r>
 8004642:	f8ca 0000 	str.w	r0, [sl]
 8004646:	f8ca 0010 	str.w	r0, [sl, #16]
 800464a:	2800      	cmp	r0, #0
 800464c:	f000 812b 	beq.w	80048a6 <_svfprintf_r+0x12aa>
 8004650:	2340      	movs	r3, #64	; 0x40
 8004652:	f8ca 3014 	str.w	r3, [sl, #20]
 8004656:	f7fe bfec 	b.w	8003632 <_svfprintf_r+0x36>
 800465a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800465c:	4651      	mov	r1, sl
 800465e:	465a      	mov	r2, fp
 8004660:	f002 fb3c 	bl	8006cdc <__ssprint_r>
 8004664:	2800      	cmp	r0, #0
 8004666:	f47f a8a0 	bne.w	80037aa <_svfprintf_r+0x1ae>
 800466a:	9f40      	ldr	r7, [sp, #256]	; 0x100
 800466c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800466e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004670:	e6bb      	b.n	80043ea <_svfprintf_r+0xdee>
 8004672:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004674:	2847      	cmp	r0, #71	; 0x47
 8004676:	bf18      	it	ne
 8004678:	2867      	cmpne	r0, #103	; 0x67
 800467a:	bf14      	ite	ne
 800467c:	2000      	movne	r0, #0
 800467e:	2001      	moveq	r0, #1
 8004680:	900a      	str	r0, [sp, #40]	; 0x28
 8004682:	2406      	movs	r4, #6
 8004684:	e713      	b.n	80044ae <_svfprintf_r+0xeb2>
 8004686:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004688:	4651      	mov	r1, sl
 800468a:	465a      	mov	r2, fp
 800468c:	f002 fb26 	bl	8006cdc <__ssprint_r>
 8004690:	2800      	cmp	r0, #0
 8004692:	f47f a88a 	bne.w	80037aa <_svfprintf_r+0x1ae>
 8004696:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004698:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800469a:	ae1f      	add	r6, sp, #124	; 0x7c
 800469c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800469e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80046a0:	6072      	str	r2, [r6, #4]
 80046a2:	3401      	adds	r4, #1
 80046a4:	18ad      	adds	r5, r5, r2
 80046a6:	2c07      	cmp	r4, #7
 80046a8:	6033      	str	r3, [r6, #0]
 80046aa:	953b      	str	r5, [sp, #236]	; 0xec
 80046ac:	943a      	str	r4, [sp, #232]	; 0xe8
 80046ae:	f77f ab4b 	ble.w	8003d48 <_svfprintf_r+0x74c>
 80046b2:	f7ff bba6 	b.w	8003e02 <_svfprintf_r+0x806>
 80046b6:	f002 fae1 	bl	8006c7c <strlen>
 80046ba:	900d      	str	r0, [sp, #52]	; 0x34
 80046bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80046c0:	9512      	str	r5, [sp, #72]	; 0x48
 80046c2:	900a      	str	r0, [sp, #40]	; 0x28
 80046c4:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80046c8:	970e      	str	r7, [sp, #56]	; 0x38
 80046ca:	9516      	str	r5, [sp, #88]	; 0x58
 80046cc:	f7ff b904 	b.w	80038d8 <_svfprintf_r+0x2dc>
 80046d0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80046d2:	4651      	mov	r1, sl
 80046d4:	465a      	mov	r2, fp
 80046d6:	f002 fb01 	bl	8006cdc <__ssprint_r>
 80046da:	2800      	cmp	r0, #0
 80046dc:	f47f a865 	bne.w	80037aa <_svfprintf_r+0x1ae>
 80046e0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80046e2:	ae1f      	add	r6, sp, #124	; 0x7c
 80046e4:	e4f1      	b.n	80040ca <_svfprintf_r+0xace>
 80046e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80046e8:	4651      	mov	r1, sl
 80046ea:	465a      	mov	r2, fp
 80046ec:	f002 faf6 	bl	8006cdc <__ssprint_r>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	f47f a85a 	bne.w	80037aa <_svfprintf_r+0x1ae>
 80046f6:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80046f8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80046fa:	ae1f      	add	r6, sp, #124	; 0x7c
 80046fc:	e593      	b.n	8004226 <_svfprintf_r+0xc2a>
 80046fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004700:	4651      	mov	r1, sl
 8004702:	465a      	mov	r2, fp
 8004704:	f002 faea 	bl	8006cdc <__ssprint_r>
 8004708:	2800      	cmp	r0, #0
 800470a:	f47f a84e 	bne.w	80037aa <_svfprintf_r+0x1ae>
 800470e:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004710:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004712:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004714:	1acb      	subs	r3, r1, r3
 8004716:	ae1f      	add	r6, sp, #124	; 0x7c
 8004718:	e59c      	b.n	8004254 <_svfprintf_r+0xc58>
 800471a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800471c:	ebc3 030b 	rsb	r3, r3, fp
 8004720:	930d      	str	r3, [sp, #52]	; 0x34
 8004722:	f7ff b8cf 	b.w	80038c4 <_svfprintf_r+0x2c8>
 8004726:	46a0      	mov	r8, r4
 8004728:	461c      	mov	r4, r3
 800472a:	3401      	adds	r4, #1
 800472c:	19ed      	adds	r5, r5, r7
 800472e:	2c07      	cmp	r4, #7
 8004730:	f8c6 8000 	str.w	r8, [r6]
 8004734:	6077      	str	r7, [r6, #4]
 8004736:	953b      	str	r5, [sp, #236]	; 0xec
 8004738:	943a      	str	r4, [sp, #232]	; 0xe8
 800473a:	dca4      	bgt.n	8004686 <_svfprintf_r+0x108a>
 800473c:	3608      	adds	r6, #8
 800473e:	e7ad      	b.n	800469c <_svfprintf_r+0x10a0>
 8004740:	2c06      	cmp	r4, #6
 8004742:	bf28      	it	cs
 8004744:	2406      	movcs	r4, #6
 8004746:	495f      	ldr	r1, [pc, #380]	; (80048c4 <_svfprintf_r+0x12c8>)
 8004748:	940d      	str	r4, [sp, #52]	; 0x34
 800474a:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 800474e:	900a      	str	r0, [sp, #40]	; 0x28
 8004750:	970e      	str	r7, [sp, #56]	; 0x38
 8004752:	9111      	str	r1, [sp, #68]	; 0x44
 8004754:	f7ff ba01 	b.w	8003b5a <_svfprintf_r+0x55e>
 8004758:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800475a:	2b65      	cmp	r3, #101	; 0x65
 800475c:	dd6f      	ble.n	800483e <_svfprintf_r+0x1242>
 800475e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004760:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004762:	2a00      	cmp	r2, #0
 8004764:	d15e      	bne.n	8004824 <_svfprintf_r+0x1228>
 8004766:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004768:	428a      	cmp	r2, r1
 800476a:	dc3d      	bgt.n	80047e8 <_svfprintf_r+0x11ec>
 800476c:	9b08      	ldr	r3, [sp, #32]
 800476e:	07da      	lsls	r2, r3, #31
 8004770:	d56c      	bpl.n	800484c <_svfprintf_r+0x1250>
 8004772:	1c4b      	adds	r3, r1, #1
 8004774:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8004778:	2267      	movs	r2, #103	; 0x67
 800477a:	930d      	str	r3, [sp, #52]	; 0x34
 800477c:	900a      	str	r0, [sp, #40]	; 0x28
 800477e:	9215      	str	r2, [sp, #84]	; 0x54
 8004780:	9116      	str	r1, [sp, #88]	; 0x58
 8004782:	e74d      	b.n	8004620 <_svfprintf_r+0x1024>
 8004784:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8004786:	429f      	cmp	r7, r3
 8004788:	bf98      	it	ls
 800478a:	461f      	movls	r7, r3
 800478c:	f67f aee4 	bls.w	8004558 <_svfprintf_r+0xf5c>
 8004790:	2230      	movs	r2, #48	; 0x30
 8004792:	f803 2b01 	strb.w	r2, [r3], #1
 8004796:	42bb      	cmp	r3, r7
 8004798:	9342      	str	r3, [sp, #264]	; 0x108
 800479a:	d1fa      	bne.n	8004792 <_svfprintf_r+0x1196>
 800479c:	e6dc      	b.n	8004558 <_svfprintf_r+0xf5c>
 800479e:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 80047a2:	9012      	str	r0, [sp, #72]	; 0x48
 80047a4:	920a      	str	r2, [sp, #40]	; 0x28
 80047a6:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80047aa:	970e      	str	r7, [sp, #56]	; 0x38
 80047ac:	940d      	str	r4, [sp, #52]	; 0x34
 80047ae:	9016      	str	r0, [sp, #88]	; 0x58
 80047b0:	f7ff b892 	b.w	80038d8 <_svfprintf_r+0x2dc>
 80047b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80047b6:	4651      	mov	r1, sl
 80047b8:	465a      	mov	r2, fp
 80047ba:	f002 fa8f 	bl	8006cdc <__ssprint_r>
 80047be:	2800      	cmp	r0, #0
 80047c0:	f47e aff3 	bne.w	80037aa <_svfprintf_r+0x1ae>
 80047c4:	9f40      	ldr	r7, [sp, #256]	; 0x100
 80047c6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80047c8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80047ca:	ae1f      	add	r6, sp, #124	; 0x7c
 80047cc:	e621      	b.n	8004412 <_svfprintf_r+0xe16>
 80047ce:	212d      	movs	r1, #45	; 0x2d
 80047d0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80047d4:	9112      	str	r1, [sp, #72]	; 0x48
 80047d6:	e673      	b.n	80044c0 <_svfprintf_r+0xec4>
 80047d8:	3130      	adds	r1, #48	; 0x30
 80047da:	2330      	movs	r3, #48	; 0x30
 80047dc:	f88d 10f3 	strb.w	r1, [sp, #243]	; 0xf3
 80047e0:	f88d 30f2 	strb.w	r3, [sp, #242]	; 0xf2
 80047e4:	a93d      	add	r1, sp, #244	; 0xf4
 80047e6:	e70a      	b.n	80045fe <_svfprintf_r+0x1002>
 80047e8:	2900      	cmp	r1, #0
 80047ea:	9810      	ldr	r0, [sp, #64]	; 0x40
 80047ec:	bfd4      	ite	le
 80047ee:	f1c1 0302 	rsble	r3, r1, #2
 80047f2:	2301      	movgt	r3, #1
 80047f4:	181b      	adds	r3, r3, r0
 80047f6:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80047fa:	930d      	str	r3, [sp, #52]	; 0x34
 80047fc:	2367      	movs	r3, #103	; 0x67
 80047fe:	920a      	str	r2, [sp, #40]	; 0x28
 8004800:	9315      	str	r3, [sp, #84]	; 0x54
 8004802:	e7bd      	b.n	8004780 <_svfprintf_r+0x1184>
 8004804:	2401      	movs	r4, #1
 8004806:	940a      	str	r4, [sp, #40]	; 0x28
 8004808:	e651      	b.n	80044ae <_svfprintf_r+0xeb2>
 800480a:	4640      	mov	r0, r8
 800480c:	4629      	mov	r1, r5
 800480e:	2200      	movs	r2, #0
 8004810:	2300      	movs	r3, #0
 8004812:	f003 fe21 	bl	8008458 <__aeabi_dcmpeq>
 8004816:	2800      	cmp	r0, #0
 8004818:	f47f ae92 	bne.w	8004540 <_svfprintf_r+0xf44>
 800481c:	f1c9 0301 	rsb	r3, r9, #1
 8004820:	9340      	str	r3, [sp, #256]	; 0x100
 8004822:	e68e      	b.n	8004542 <_svfprintf_r+0xf46>
 8004824:	2900      	cmp	r1, #0
 8004826:	dd38      	ble.n	800489a <_svfprintf_r+0x129e>
 8004828:	bb74      	cbnz	r4, 8004888 <_svfprintf_r+0x128c>
 800482a:	9b08      	ldr	r3, [sp, #32]
 800482c:	07dd      	lsls	r5, r3, #31
 800482e:	d42b      	bmi.n	8004888 <_svfprintf_r+0x128c>
 8004830:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004834:	2266      	movs	r2, #102	; 0x66
 8004836:	900a      	str	r0, [sp, #40]	; 0x28
 8004838:	910d      	str	r1, [sp, #52]	; 0x34
 800483a:	9215      	str	r2, [sp, #84]	; 0x54
 800483c:	e7a0      	b.n	8004780 <_svfprintf_r+0x1184>
 800483e:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004840:	e69a      	b.n	8004578 <_svfprintf_r+0xf7c>
 8004842:	232d      	movs	r3, #45	; 0x2d
 8004844:	4249      	negs	r1, r1
 8004846:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 800484a:	e6a0      	b.n	800458e <_svfprintf_r+0xf92>
 800484c:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004850:	2267      	movs	r2, #103	; 0x67
 8004852:	900a      	str	r0, [sp, #40]	; 0x28
 8004854:	910d      	str	r1, [sp, #52]	; 0x34
 8004856:	9215      	str	r2, [sp, #84]	; 0x54
 8004858:	e792      	b.n	8004780 <_svfprintf_r+0x1184>
 800485a:	9908      	ldr	r1, [sp, #32]
 800485c:	f011 0301 	ands.w	r3, r1, #1
 8004860:	f47f aed6 	bne.w	8004610 <_svfprintf_r+0x1014>
 8004864:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004866:	9316      	str	r3, [sp, #88]	; 0x58
 8004868:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800486c:	920a      	str	r2, [sp, #40]	; 0x28
 800486e:	e6d7      	b.n	8004620 <_svfprintf_r+0x1024>
 8004870:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004872:	680c      	ldr	r4, [r1, #0]
 8004874:	1d0b      	adds	r3, r1, #4
 8004876:	2c00      	cmp	r4, #0
 8004878:	bfbc      	itt	lt
 800487a:	930e      	strlt	r3, [sp, #56]	; 0x38
 800487c:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 8004880:	f6bf a985 	bge.w	8003b8e <_svfprintf_r+0x592>
 8004884:	f7fe bf18 	b.w	80036b8 <_svfprintf_r+0xbc>
 8004888:	3401      	adds	r4, #1
 800488a:	190c      	adds	r4, r1, r4
 800488c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004890:	2066      	movs	r0, #102	; 0x66
 8004892:	940d      	str	r4, [sp, #52]	; 0x34
 8004894:	930a      	str	r3, [sp, #40]	; 0x28
 8004896:	9015      	str	r0, [sp, #84]	; 0x54
 8004898:	e772      	b.n	8004780 <_svfprintf_r+0x1184>
 800489a:	b914      	cbnz	r4, 80048a2 <_svfprintf_r+0x12a6>
 800489c:	9a08      	ldr	r2, [sp, #32]
 800489e:	07d0      	lsls	r0, r2, #31
 80048a0:	d509      	bpl.n	80048b6 <_svfprintf_r+0x12ba>
 80048a2:	3402      	adds	r4, #2
 80048a4:	e7f2      	b.n	800488c <_svfprintf_r+0x1290>
 80048a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80048a8:	230c      	movs	r3, #12
 80048aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048ae:	600b      	str	r3, [r1, #0]
 80048b0:	920c      	str	r2, [sp, #48]	; 0x30
 80048b2:	f7fe bf83 	b.w	80037bc <_svfprintf_r+0x1c0>
 80048b6:	2001      	movs	r0, #1
 80048b8:	2266      	movs	r2, #102	; 0x66
 80048ba:	900a      	str	r0, [sp, #40]	; 0x28
 80048bc:	9215      	str	r2, [sp, #84]	; 0x54
 80048be:	900d      	str	r0, [sp, #52]	; 0x34
 80048c0:	e75e      	b.n	8004780 <_svfprintf_r+0x1184>
 80048c2:	bf00      	nop
 80048c4:	080087d8 	.word	0x080087d8

080048c8 <quorem>:
 80048c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048cc:	6903      	ldr	r3, [r0, #16]
 80048ce:	690d      	ldr	r5, [r1, #16]
 80048d0:	429d      	cmp	r5, r3
 80048d2:	4681      	mov	r9, r0
 80048d4:	f300 8084 	bgt.w	80049e0 <quorem+0x118>
 80048d8:	1ceb      	adds	r3, r5, #3
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	18cf      	adds	r7, r1, r3
 80048de:	18c3      	adds	r3, r0, r3
 80048e0:	687e      	ldr	r6, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	3601      	adds	r6, #1
 80048e6:	fbb3 f6f6 	udiv	r6, r3, r6
 80048ea:	f101 0414 	add.w	r4, r1, #20
 80048ee:	3d01      	subs	r5, #1
 80048f0:	3704      	adds	r7, #4
 80048f2:	f100 0814 	add.w	r8, r0, #20
 80048f6:	2e00      	cmp	r6, #0
 80048f8:	d03c      	beq.n	8004974 <quorem+0xac>
 80048fa:	f04f 0e00 	mov.w	lr, #0
 80048fe:	4642      	mov	r2, r8
 8004900:	4623      	mov	r3, r4
 8004902:	46f4      	mov	ip, lr
 8004904:	f853 bb04 	ldr.w	fp, [r3], #4
 8004908:	6810      	ldr	r0, [r2, #0]
 800490a:	fa1f fa8b 	uxth.w	sl, fp
 800490e:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 8004912:	fb06 ea0a 	mla	sl, r6, sl, lr
 8004916:	fb06 fe0b 	mul.w	lr, r6, fp
 800491a:	eb0e 4e1a 	add.w	lr, lr, sl, lsr #16
 800491e:	fa1c fc80 	uxtah	ip, ip, r0
 8004922:	fa1f fb8e 	uxth.w	fp, lr
 8004926:	fa1f fa8a 	uxth.w	sl, sl
 800492a:	ebca 0c0c 	rsb	ip, sl, ip
 800492e:	ebcb 4010 	rsb	r0, fp, r0, lsr #16
 8004932:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004936:	fa1f fc8c 	uxth.w	ip, ip
 800493a:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 800493e:	429f      	cmp	r7, r3
 8004940:	f842 cb04 	str.w	ip, [r2], #4
 8004944:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8004948:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800494c:	d2da      	bcs.n	8004904 <quorem+0x3c>
 800494e:	1d2a      	adds	r2, r5, #4
 8004950:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004954:	6858      	ldr	r0, [r3, #4]
 8004956:	b968      	cbnz	r0, 8004974 <quorem+0xac>
 8004958:	4598      	cmp	r8, r3
 800495a:	d209      	bcs.n	8004970 <quorem+0xa8>
 800495c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004960:	b112      	cbz	r2, 8004968 <quorem+0xa0>
 8004962:	e005      	b.n	8004970 <quorem+0xa8>
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	b91a      	cbnz	r2, 8004970 <quorem+0xa8>
 8004968:	3b04      	subs	r3, #4
 800496a:	3d01      	subs	r5, #1
 800496c:	4598      	cmp	r8, r3
 800496e:	d3f9      	bcc.n	8004964 <quorem+0x9c>
 8004970:	f8c9 5010 	str.w	r5, [r9, #16]
 8004974:	4648      	mov	r0, r9
 8004976:	f001 fe4f 	bl	8006618 <__mcmp>
 800497a:	2800      	cmp	r0, #0
 800497c:	db2d      	blt.n	80049da <quorem+0x112>
 800497e:	3601      	adds	r6, #1
 8004980:	4643      	mov	r3, r8
 8004982:	f04f 0c00 	mov.w	ip, #0
 8004986:	f854 2b04 	ldr.w	r2, [r4], #4
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	b291      	uxth	r1, r2
 800498e:	fa1f fa80 	uxth.w	sl, r0
 8004992:	0c12      	lsrs	r2, r2, #16
 8004994:	ebc1 010a 	rsb	r1, r1, sl
 8004998:	4461      	add	r1, ip
 800499a:	ebc2 4210 	rsb	r2, r2, r0, lsr #16
 800499e:	eb02 4221 	add.w	r2, r2, r1, asr #16
 80049a2:	b289      	uxth	r1, r1
 80049a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80049a8:	42a7      	cmp	r7, r4
 80049aa:	f843 1b04 	str.w	r1, [r3], #4
 80049ae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80049b2:	d2e8      	bcs.n	8004986 <quorem+0xbe>
 80049b4:	1d2a      	adds	r2, r5, #4
 80049b6:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 80049ba:	6859      	ldr	r1, [r3, #4]
 80049bc:	b969      	cbnz	r1, 80049da <quorem+0x112>
 80049be:	4598      	cmp	r8, r3
 80049c0:	d209      	bcs.n	80049d6 <quorem+0x10e>
 80049c2:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80049c6:	b112      	cbz	r2, 80049ce <quorem+0x106>
 80049c8:	e005      	b.n	80049d6 <quorem+0x10e>
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	b91a      	cbnz	r2, 80049d6 <quorem+0x10e>
 80049ce:	3b04      	subs	r3, #4
 80049d0:	3d01      	subs	r5, #1
 80049d2:	4598      	cmp	r8, r3
 80049d4:	d3f9      	bcc.n	80049ca <quorem+0x102>
 80049d6:	f8c9 5010 	str.w	r5, [r9, #16]
 80049da:	4630      	mov	r0, r6
 80049dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e0:	2000      	movs	r0, #0
 80049e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e6:	bf00      	nop

080049e8 <_dtoa_r>:
 80049e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ec:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80049ee:	b09d      	sub	sp, #116	; 0x74
 80049f0:	4607      	mov	r7, r0
 80049f2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80049f4:	4692      	mov	sl, r2
 80049f6:	469b      	mov	fp, r3
 80049f8:	b141      	cbz	r1, 8004a0c <_dtoa_r+0x24>
 80049fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80049fc:	2201      	movs	r2, #1
 80049fe:	409a      	lsls	r2, r3
 8004a00:	604b      	str	r3, [r1, #4]
 8004a02:	608a      	str	r2, [r1, #8]
 8004a04:	f001 fbd4 	bl	80061b0 <_Bfree>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a0c:	f1bb 0500 	subs.w	r5, fp, #0
 8004a10:	f2c0 80df 	blt.w	8004bd2 <_dtoa_r+0x1ea>
 8004a14:	2300      	movs	r3, #0
 8004a16:	6023      	str	r3, [r4, #0]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8004a20:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8004a24:	402b      	ands	r3, r5
 8004a26:	4293      	cmp	r3, r2
 8004a28:	f000 80be 	beq.w	8004ba8 <_dtoa_r+0x1c0>
 8004a2c:	4650      	mov	r0, sl
 8004a2e:	4659      	mov	r1, fp
 8004a30:	2200      	movs	r2, #0
 8004a32:	2300      	movs	r3, #0
 8004a34:	46d0      	mov	r8, sl
 8004a36:	46d9      	mov	r9, fp
 8004a38:	2401      	movs	r4, #1
 8004a3a:	f003 fd0d 	bl	8008458 <__aeabi_dcmpeq>
 8004a3e:	b978      	cbnz	r0, 8004a60 <_dtoa_r+0x78>
 8004a40:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004a44:	d110      	bne.n	8004a68 <_dtoa_r+0x80>
 8004a46:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004a48:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	602b      	str	r3, [r5, #0]
 8004a4e:	4d78      	ldr	r5, [pc, #480]	; (8004c30 <_dtoa_r+0x248>)
 8004a50:	b114      	cbz	r4, 8004a58 <_dtoa_r+0x70>
 8004a52:	4d78      	ldr	r5, [pc, #480]	; (8004c34 <_dtoa_r+0x24c>)
 8004a54:	6025      	str	r5, [r4, #0]
 8004a56:	3d01      	subs	r5, #1
 8004a58:	4628      	mov	r0, r5
 8004a5a:	b01d      	add	sp, #116	; 0x74
 8004a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a60:	2400      	movs	r4, #0
 8004a62:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004a66:	d0ee      	beq.n	8004a46 <_dtoa_r+0x5e>
 8004a68:	a91b      	add	r1, sp, #108	; 0x6c
 8004a6a:	9100      	str	r1, [sp, #0]
 8004a6c:	4638      	mov	r0, r7
 8004a6e:	a91a      	add	r1, sp, #104	; 0x68
 8004a70:	4642      	mov	r2, r8
 8004a72:	464b      	mov	r3, r9
 8004a74:	9101      	str	r1, [sp, #4]
 8004a76:	f001 fed1 	bl	800681c <__d2b>
 8004a7a:	f3c5 540a 	ubfx	r4, r5, #20, #11
 8004a7e:	900a      	str	r0, [sp, #40]	; 0x28
 8004a80:	2c00      	cmp	r4, #0
 8004a82:	f040 80b5 	bne.w	8004bf0 <_dtoa_r+0x208>
 8004a86:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004a88:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8004a8a:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8004a8e:	1934      	adds	r4, r6, r4
 8004a90:	429c      	cmp	r4, r3
 8004a92:	f2c0 8281 	blt.w	8004f98 <_dtoa_r+0x5b0>
 8004a96:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8004a9a:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8004a9e:	1b1b      	subs	r3, r3, r4
 8004aa0:	f204 4212 	addw	r2, r4, #1042	; 0x412
 8004aa4:	fa15 f303 	lsls.w	r3, r5, r3
 8004aa8:	fa2a f002 	lsr.w	r0, sl, r2
 8004aac:	4318      	orrs	r0, r3
 8004aae:	f003 f9f5 	bl	8007e9c <__aeabi_ui2d>
 8004ab2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004ab6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004ab8:	2501      	movs	r5, #1
 8004aba:	f1a0 70f8 	sub.w	r0, r0, #32505856	; 0x1f00000
 8004abe:	900d      	str	r0, [sp, #52]	; 0x34
 8004ac0:	3c01      	subs	r4, #1
 8004ac2:	9516      	str	r5, [sp, #88]	; 0x58
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8004acc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ad0:	f003 f8a6 	bl	8007c20 <__aeabi_dsub>
 8004ad4:	a350      	add	r3, pc, #320	; (adr r3, 8004c18 <_dtoa_r+0x230>)
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	f003 fa55 	bl	8007f88 <__aeabi_dmul>
 8004ade:	a350      	add	r3, pc, #320	; (adr r3, 8004c20 <_dtoa_r+0x238>)
 8004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae4:	f003 f89e 	bl	8007c24 <__adddf3>
 8004ae8:	4680      	mov	r8, r0
 8004aea:	4620      	mov	r0, r4
 8004aec:	4689      	mov	r9, r1
 8004aee:	f003 f9e5 	bl	8007ebc <__aeabi_i2d>
 8004af2:	a34d      	add	r3, pc, #308	; (adr r3, 8004c28 <_dtoa_r+0x240>)
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	f003 fa46 	bl	8007f88 <__aeabi_dmul>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4640      	mov	r0, r8
 8004b02:	4649      	mov	r1, r9
 8004b04:	f003 f88e 	bl	8007c24 <__adddf3>
 8004b08:	4680      	mov	r8, r0
 8004b0a:	4689      	mov	r9, r1
 8004b0c:	f003 fcd6 	bl	80084bc <__aeabi_d2iz>
 8004b10:	4649      	mov	r1, r9
 8004b12:	9005      	str	r0, [sp, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	4640      	mov	r0, r8
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f003 fca7 	bl	800846c <__aeabi_dcmplt>
 8004b1e:	b150      	cbz	r0, 8004b36 <_dtoa_r+0x14e>
 8004b20:	9805      	ldr	r0, [sp, #20]
 8004b22:	f003 f9cb 	bl	8007ebc <__aeabi_i2d>
 8004b26:	4642      	mov	r2, r8
 8004b28:	464b      	mov	r3, r9
 8004b2a:	f003 fc95 	bl	8008458 <__aeabi_dcmpeq>
 8004b2e:	b910      	cbnz	r0, 8004b36 <_dtoa_r+0x14e>
 8004b30:	9d05      	ldr	r5, [sp, #20]
 8004b32:	3d01      	subs	r5, #1
 8004b34:	9505      	str	r5, [sp, #20]
 8004b36:	9d05      	ldr	r5, [sp, #20]
 8004b38:	2d16      	cmp	r5, #22
 8004b3a:	f200 815e 	bhi.w	8004dfa <_dtoa_r+0x412>
 8004b3e:	4b3e      	ldr	r3, [pc, #248]	; (8004c38 <_dtoa_r+0x250>)
 8004b40:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004b44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b48:	4652      	mov	r2, sl
 8004b4a:	465b      	mov	r3, fp
 8004b4c:	f003 fcac 	bl	80084a8 <__aeabi_dcmpgt>
 8004b50:	2800      	cmp	r0, #0
 8004b52:	f000 8229 	beq.w	8004fa8 <_dtoa_r+0x5c0>
 8004b56:	9d05      	ldr	r5, [sp, #20]
 8004b58:	3d01      	subs	r5, #1
 8004b5a:	9505      	str	r5, [sp, #20]
 8004b5c:	2500      	movs	r5, #0
 8004b5e:	9514      	str	r5, [sp, #80]	; 0x50
 8004b60:	1b34      	subs	r4, r6, r4
 8004b62:	3c01      	subs	r4, #1
 8004b64:	f100 8213 	bmi.w	8004f8e <_dtoa_r+0x5a6>
 8004b68:	2500      	movs	r5, #0
 8004b6a:	940b      	str	r4, [sp, #44]	; 0x2c
 8004b6c:	950f      	str	r5, [sp, #60]	; 0x3c
 8004b6e:	9c05      	ldr	r4, [sp, #20]
 8004b70:	2c00      	cmp	r4, #0
 8004b72:	f2c0 8203 	blt.w	8004f7c <_dtoa_r+0x594>
 8004b76:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004b78:	9413      	str	r4, [sp, #76]	; 0x4c
 8004b7a:	192d      	adds	r5, r5, r4
 8004b7c:	2400      	movs	r4, #0
 8004b7e:	950b      	str	r5, [sp, #44]	; 0x2c
 8004b80:	9410      	str	r4, [sp, #64]	; 0x40
 8004b82:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8004b84:	2d09      	cmp	r5, #9
 8004b86:	d85d      	bhi.n	8004c44 <_dtoa_r+0x25c>
 8004b88:	2401      	movs	r4, #1
 8004b8a:	2d05      	cmp	r5, #5
 8004b8c:	dd02      	ble.n	8004b94 <_dtoa_r+0x1ac>
 8004b8e:	3d04      	subs	r5, #4
 8004b90:	9526      	str	r5, [sp, #152]	; 0x98
 8004b92:	2400      	movs	r4, #0
 8004b94:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8004b96:	1eab      	subs	r3, r5, #2
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d855      	bhi.n	8004c48 <_dtoa_r+0x260>
 8004b9c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004ba0:	036d0382 	.word	0x036d0382
 8004ba4:	03850246 	.word	0x03850246
 8004ba8:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8004baa:	f242 730f 	movw	r3, #9999	; 0x270f
 8004bae:	6023      	str	r3, [r4, #0]
 8004bb0:	f1ba 0f00 	cmp.w	sl, #0
 8004bb4:	d013      	beq.n	8004bde <_dtoa_r+0x1f6>
 8004bb6:	4d21      	ldr	r5, [pc, #132]	; (8004c3c <_dtoa_r+0x254>)
 8004bb8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004bba:	2c00      	cmp	r4, #0
 8004bbc:	f43f af4c 	beq.w	8004a58 <_dtoa_r+0x70>
 8004bc0:	78eb      	ldrb	r3, [r5, #3]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8117 	beq.w	8004df6 <_dtoa_r+0x40e>
 8004bc8:	f105 0308 	add.w	r3, r5, #8
 8004bcc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004bce:	6023      	str	r3, [r4, #0]
 8004bd0:	e742      	b.n	8004a58 <_dtoa_r+0x70>
 8004bd2:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	46ab      	mov	fp, r5
 8004bdc:	e71c      	b.n	8004a18 <_dtoa_r+0x30>
 8004bde:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <_dtoa_r+0x254>)
 8004be0:	4a17      	ldr	r2, [pc, #92]	; (8004c40 <_dtoa_r+0x258>)
 8004be2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004be6:	2d00      	cmp	r5, #0
 8004be8:	bf0c      	ite	eq
 8004bea:	4615      	moveq	r5, r2
 8004bec:	461d      	movne	r5, r3
 8004bee:	e7e3      	b.n	8004bb8 <_dtoa_r+0x1d0>
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	4640      	mov	r0, r8
 8004bf4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004bf8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004bfa:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004bfc:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 8004c00:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c04:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004c08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004c0c:	2500      	movs	r5, #0
 8004c0e:	930d      	str	r3, [sp, #52]	; 0x34
 8004c10:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004c14:	9516      	str	r5, [sp, #88]	; 0x58
 8004c16:	e755      	b.n	8004ac4 <_dtoa_r+0xdc>
 8004c18:	636f4361 	.word	0x636f4361
 8004c1c:	3fd287a7 	.word	0x3fd287a7
 8004c20:	8b60c8b3 	.word	0x8b60c8b3
 8004c24:	3fc68a28 	.word	0x3fc68a28
 8004c28:	509f79fb 	.word	0x509f79fb
 8004c2c:	3fd34413 	.word	0x3fd34413
 8004c30:	080087e0 	.word	0x080087e0
 8004c34:	080087e1 	.word	0x080087e1
 8004c38:	08008668 	.word	0x08008668
 8004c3c:	080087f0 	.word	0x080087f0
 8004c40:	080087e4 	.word	0x080087e4
 8004c44:	2400      	movs	r4, #0
 8004c46:	9426      	str	r4, [sp, #152]	; 0x98
 8004c48:	2400      	movs	r4, #0
 8004c4a:	647c      	str	r4, [r7, #68]	; 0x44
 8004c4c:	4638      	mov	r0, r7
 8004c4e:	4621      	mov	r1, r4
 8004c50:	f001 fa88 	bl	8006164 <_Balloc>
 8004c54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c58:	950e      	str	r5, [sp, #56]	; 0x38
 8004c5a:	2501      	movs	r5, #1
 8004c5c:	9512      	str	r5, [sp, #72]	; 0x48
 8004c5e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c62:	9009      	str	r0, [sp, #36]	; 0x24
 8004c64:	6438      	str	r0, [r7, #64]	; 0x40
 8004c66:	9515      	str	r5, [sp, #84]	; 0x54
 8004c68:	9427      	str	r4, [sp, #156]	; 0x9c
 8004c6a:	9c05      	ldr	r4, [sp, #20]
 8004c6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c6e:	2c0e      	cmp	r4, #14
 8004c70:	bfcc      	ite	gt
 8004c72:	2500      	movgt	r5, #0
 8004c74:	2501      	movle	r5, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bfb8      	it	lt
 8004c7a:	2500      	movlt	r5, #0
 8004c7c:	2d00      	cmp	r5, #0
 8004c7e:	f000 80c1 	beq.w	8004e04 <_dtoa_r+0x41c>
 8004c82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8004c84:	4b5e      	ldr	r3, [pc, #376]	; (8004e00 <_dtoa_r+0x418>)
 8004c86:	0fe5      	lsrs	r5, r4, #31
 8004c88:	9c05      	ldr	r4, [sp, #20]
 8004c8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c92:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004c94:	2c00      	cmp	r4, #0
 8004c96:	bfcc      	ite	gt
 8004c98:	2500      	movgt	r5, #0
 8004c9a:	f005 0501 	andle.w	r5, r5, #1
 8004c9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ca2:	2d00      	cmp	r5, #0
 8004ca4:	f040 81a8 	bne.w	8004ff8 <_dtoa_r+0x610>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4650      	mov	r0, sl
 8004cae:	4659      	mov	r1, fp
 8004cb0:	f003 fa94 	bl	80081dc <__aeabi_ddiv>
 8004cb4:	f003 fc02 	bl	80084bc <__aeabi_d2iz>
 8004cb8:	4606      	mov	r6, r0
 8004cba:	f003 f8ff 	bl	8007ebc <__aeabi_i2d>
 8004cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cc2:	f003 f961 	bl	8007f88 <__aeabi_dmul>
 8004cc6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4602      	mov	r2, r0
 8004ccc:	4659      	mov	r1, fp
 8004cce:	4650      	mov	r0, sl
 8004cd0:	f002 ffa6 	bl	8007c20 <__aeabi_dsub>
 8004cd4:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8004cd8:	f804 3b01 	strb.w	r3, [r4], #1
 8004cdc:	9411      	str	r4, [sp, #68]	; 0x44
 8004cde:	46a0      	mov	r8, r4
 8004ce0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004ce2:	2c01      	cmp	r4, #1
 8004ce4:	4682      	mov	sl, r0
 8004ce6:	468b      	mov	fp, r1
 8004ce8:	d04c      	beq.n	8004d84 <_dtoa_r+0x39c>
 8004cea:	2300      	movs	r3, #0
 8004cec:	2200      	movs	r2, #0
 8004cee:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004cf2:	f003 f949 	bl	8007f88 <__aeabi_dmul>
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	4682      	mov	sl, r0
 8004cfc:	468b      	mov	fp, r1
 8004cfe:	2401      	movs	r4, #1
 8004d00:	f003 fbaa 	bl	8008458 <__aeabi_dcmpeq>
 8004d04:	b100      	cbz	r0, 8004d08 <_dtoa_r+0x320>
 8004d06:	462c      	mov	r4, r5
 8004d08:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004d0c:	f000 8575 	beq.w	80057fa <_dtoa_r+0xe12>
 8004d10:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004d12:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004d14:	1ca5      	adds	r5, r4, #2
 8004d16:	eb04 0900 	add.w	r9, r4, r0
 8004d1a:	e00d      	b.n	8004d38 <_dtoa_r+0x350>
 8004d1c:	f003 f934 	bl	8007f88 <__aeabi_dmul>
 8004d20:	2200      	movs	r2, #0
 8004d22:	2300      	movs	r3, #0
 8004d24:	4682      	mov	sl, r0
 8004d26:	468b      	mov	fp, r1
 8004d28:	f003 fb96 	bl	8008458 <__aeabi_dcmpeq>
 8004d2c:	b100      	cbz	r0, 8004d30 <_dtoa_r+0x348>
 8004d2e:	2400      	movs	r4, #0
 8004d30:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004d34:	f000 8423 	beq.w	800557e <_dtoa_r+0xb96>
 8004d38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d3c:	4650      	mov	r0, sl
 8004d3e:	4659      	mov	r1, fp
 8004d40:	f003 fa4c 	bl	80081dc <__aeabi_ddiv>
 8004d44:	f003 fbba 	bl	80084bc <__aeabi_d2iz>
 8004d48:	4606      	mov	r6, r0
 8004d4a:	f003 f8b7 	bl	8007ebc <__aeabi_i2d>
 8004d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d52:	f003 f919 	bl	8007f88 <__aeabi_dmul>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4650      	mov	r0, sl
 8004d5c:	4659      	mov	r1, fp
 8004d5e:	f002 ff5f 	bl	8007c20 <__aeabi_dsub>
 8004d62:	f106 0430 	add.w	r4, r6, #48	; 0x30
 8004d66:	2300      	movs	r3, #0
 8004d68:	2200      	movs	r2, #0
 8004d6a:	454d      	cmp	r5, r9
 8004d6c:	f805 4c01 	strb.w	r4, [r5, #-1]
 8004d70:	46a8      	mov	r8, r5
 8004d72:	4682      	mov	sl, r0
 8004d74:	468b      	mov	fp, r1
 8004d76:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004d7a:	f04f 0401 	mov.w	r4, #1
 8004d7e:	f105 0501 	add.w	r5, r5, #1
 8004d82:	d1cb      	bne.n	8004d1c <_dtoa_r+0x334>
 8004d84:	4652      	mov	r2, sl
 8004d86:	465b      	mov	r3, fp
 8004d88:	4650      	mov	r0, sl
 8004d8a:	4659      	mov	r1, fp
 8004d8c:	f002 ff4a 	bl	8007c24 <__adddf3>
 8004d90:	4604      	mov	r4, r0
 8004d92:	460d      	mov	r5, r1
 8004d94:	4622      	mov	r2, r4
 8004d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d9a:	462b      	mov	r3, r5
 8004d9c:	f003 fb66 	bl	800846c <__aeabi_dcmplt>
 8004da0:	b958      	cbnz	r0, 8004dba <_dtoa_r+0x3d2>
 8004da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004da6:	4622      	mov	r2, r4
 8004da8:	462b      	mov	r3, r5
 8004daa:	f003 fb55 	bl	8008458 <__aeabi_dcmpeq>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	f000 83e5 	beq.w	800557e <_dtoa_r+0xb96>
 8004db4:	07f3      	lsls	r3, r6, #31
 8004db6:	f140 83e2 	bpl.w	800557e <_dtoa_r+0xb96>
 8004dba:	9c05      	ldr	r4, [sp, #20]
 8004dbc:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8004dc0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004dc2:	9417      	str	r4, [sp, #92]	; 0x5c
 8004dc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004dc6:	e003      	b.n	8004dd0 <_dtoa_r+0x3e8>
 8004dc8:	f818 6c02 	ldrb.w	r6, [r8, #-2]
 8004dcc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004dd0:	2e39      	cmp	r6, #57	; 0x39
 8004dd2:	4643      	mov	r3, r8
 8004dd4:	f040 8489 	bne.w	80056ea <_dtoa_r+0xd02>
 8004dd8:	4590      	cmp	r8, r2
 8004dda:	d1f5      	bne.n	8004dc8 <_dtoa_r+0x3e0>
 8004ddc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8004dde:	9309      	str	r3, [sp, #36]	; 0x24
 8004de0:	3401      	adds	r4, #1
 8004de2:	9405      	str	r4, [sp, #20]
 8004de4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8004de6:	2330      	movs	r3, #48	; 0x30
 8004de8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004dec:	2231      	movs	r2, #49	; 0x31
 8004dee:	4623      	mov	r3, r4
 8004df0:	f803 2c01 	strb.w	r2, [r3, #-1]
 8004df4:	e0b0      	b.n	8004f58 <_dtoa_r+0x570>
 8004df6:	1ceb      	adds	r3, r5, #3
 8004df8:	e6e8      	b.n	8004bcc <_dtoa_r+0x1e4>
 8004dfa:	2501      	movs	r5, #1
 8004dfc:	9514      	str	r5, [sp, #80]	; 0x50
 8004dfe:	e6af      	b.n	8004b60 <_dtoa_r+0x178>
 8004e00:	08008668 	.word	0x08008668
 8004e04:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004e06:	2c00      	cmp	r4, #0
 8004e08:	f040 80d1 	bne.w	8004fae <_dtoa_r+0x5c6>
 8004e0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e0e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004e10:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004e12:	9306      	str	r3, [sp, #24]
 8004e14:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004e16:	2800      	cmp	r0, #0
 8004e18:	bfc8      	it	gt
 8004e1a:	2c00      	cmpgt	r4, #0
 8004e1c:	dd09      	ble.n	8004e32 <_dtoa_r+0x44a>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e22:	42a3      	cmp	r3, r4
 8004e24:	bfa8      	it	ge
 8004e26:	4623      	movge	r3, r4
 8004e28:	1ac9      	subs	r1, r1, r3
 8004e2a:	1ac0      	subs	r0, r0, r3
 8004e2c:	910f      	str	r1, [sp, #60]	; 0x3c
 8004e2e:	1ae4      	subs	r4, r4, r3
 8004e30:	900b      	str	r0, [sp, #44]	; 0x2c
 8004e32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e34:	2a00      	cmp	r2, #0
 8004e36:	dd1a      	ble.n	8004e6e <_dtoa_r+0x486>
 8004e38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 841d 	beq.w	800567a <_dtoa_r+0xc92>
 8004e40:	2d00      	cmp	r5, #0
 8004e42:	dd10      	ble.n	8004e66 <_dtoa_r+0x47e>
 8004e44:	9906      	ldr	r1, [sp, #24]
 8004e46:	462a      	mov	r2, r5
 8004e48:	4638      	mov	r0, r7
 8004e4a:	f001 fb39 	bl	80064c0 <__pow5mult>
 8004e4e:	9006      	str	r0, [sp, #24]
 8004e50:	9906      	ldr	r1, [sp, #24]
 8004e52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e54:	4638      	mov	r0, r7
 8004e56:	f001 fa9b 	bl	8006390 <__multiply>
 8004e5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e5c:	4606      	mov	r6, r0
 8004e5e:	4638      	mov	r0, r7
 8004e60:	f001 f9a6 	bl	80061b0 <_Bfree>
 8004e64:	960a      	str	r6, [sp, #40]	; 0x28
 8004e66:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004e68:	1b42      	subs	r2, r0, r5
 8004e6a:	f040 8429 	bne.w	80056c0 <_dtoa_r+0xcd8>
 8004e6e:	2101      	movs	r1, #1
 8004e70:	4638      	mov	r0, r7
 8004e72:	f001 fa83 	bl	800637c <__i2b>
 8004e76:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8004e78:	2d00      	cmp	r5, #0
 8004e7a:	4606      	mov	r6, r0
 8004e7c:	dd05      	ble.n	8004e8a <_dtoa_r+0x4a2>
 8004e7e:	4631      	mov	r1, r6
 8004e80:	4638      	mov	r0, r7
 8004e82:	462a      	mov	r2, r5
 8004e84:	f001 fb1c 	bl	80064c0 <__pow5mult>
 8004e88:	4606      	mov	r6, r0
 8004e8a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8004e8c:	2d01      	cmp	r5, #1
 8004e8e:	f340 820f 	ble.w	80052b0 <_dtoa_r+0x8c8>
 8004e92:	2500      	movs	r5, #0
 8004e94:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004e96:	2301      	movs	r3, #1
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	f040 838c 	bne.w	80055b6 <_dtoa_r+0xbce>
 8004e9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ea0:	185b      	adds	r3, r3, r1
 8004ea2:	f013 031f 	ands.w	r3, r3, #31
 8004ea6:	f000 82cb 	beq.w	8005440 <_dtoa_r+0xa58>
 8004eaa:	f1c3 0220 	rsb	r2, r3, #32
 8004eae:	2a04      	cmp	r2, #4
 8004eb0:	f340 84bf 	ble.w	8005832 <_dtoa_r+0xe4a>
 8004eb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004eb6:	f1c3 031c 	rsb	r3, r3, #28
 8004eba:	18d2      	adds	r2, r2, r3
 8004ebc:	18c9      	adds	r1, r1, r3
 8004ebe:	920f      	str	r2, [sp, #60]	; 0x3c
 8004ec0:	18e4      	adds	r4, r4, r3
 8004ec2:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ec4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ec6:	2a00      	cmp	r2, #0
 8004ec8:	dd04      	ble.n	8004ed4 <_dtoa_r+0x4ec>
 8004eca:	4638      	mov	r0, r7
 8004ecc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ece:	f001 fb43 	bl	8006558 <__lshift>
 8004ed2:	900a      	str	r0, [sp, #40]	; 0x28
 8004ed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	dd05      	ble.n	8004ee6 <_dtoa_r+0x4fe>
 8004eda:	4631      	mov	r1, r6
 8004edc:	4638      	mov	r0, r7
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f001 fb3a 	bl	8006558 <__lshift>
 8004ee4:	4606      	mov	r6, r0
 8004ee6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	f040 834c 	bne.w	8005586 <_dtoa_r+0xb9e>
 8004eee:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004ef0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	bfcc      	ite	gt
 8004ef6:	2300      	movgt	r3, #0
 8004ef8:	2301      	movle	r3, #1
 8004efa:	2a02      	cmp	r2, #2
 8004efc:	bfd8      	it	le
 8004efe:	2300      	movle	r3, #0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8226 	beq.w	8005352 <_dtoa_r+0x96a>
 8004f06:	2900      	cmp	r1, #0
 8004f08:	f040 808a 	bne.w	8005020 <_dtoa_r+0x638>
 8004f0c:	4631      	mov	r1, r6
 8004f0e:	2205      	movs	r2, #5
 8004f10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f12:	4638      	mov	r0, r7
 8004f14:	f001 f956 	bl	80061c4 <__multadd>
 8004f18:	4606      	mov	r6, r0
 8004f1a:	4631      	mov	r1, r6
 8004f1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004f1e:	f001 fb7b 	bl	8006618 <__mcmp>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	dd7c      	ble.n	8005020 <_dtoa_r+0x638>
 8004f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f28:	9c05      	ldr	r4, [sp, #20]
 8004f2a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004f2c:	2231      	movs	r2, #49	; 0x31
 8004f2e:	f803 2b01 	strb.w	r2, [r3], #1
 8004f32:	3401      	adds	r4, #1
 8004f34:	9405      	str	r4, [sp, #20]
 8004f36:	9309      	str	r3, [sp, #36]	; 0x24
 8004f38:	2400      	movs	r4, #0
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	4631      	mov	r1, r6
 8004f3e:	f001 f937 	bl	80061b0 <_Bfree>
 8004f42:	9806      	ldr	r0, [sp, #24]
 8004f44:	b140      	cbz	r0, 8004f58 <_dtoa_r+0x570>
 8004f46:	4284      	cmp	r4, r0
 8004f48:	bf18      	it	ne
 8004f4a:	2c00      	cmpne	r4, #0
 8004f4c:	f040 8273 	bne.w	8005436 <_dtoa_r+0xa4e>
 8004f50:	4638      	mov	r0, r7
 8004f52:	9906      	ldr	r1, [sp, #24]
 8004f54:	f001 f92c 	bl	80061b0 <_Bfree>
 8004f58:	4638      	mov	r0, r7
 8004f5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004f5c:	f001 f928 	bl	80061b0 <_Bfree>
 8004f60:	9c05      	ldr	r4, [sp, #20]
 8004f62:	1c63      	adds	r3, r4, #1
 8004f64:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004f66:	2200      	movs	r2, #0
 8004f68:	7022      	strb	r2, [r4, #0]
 8004f6a:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004f70:	2c00      	cmp	r4, #0
 8004f72:	f43f ad71 	beq.w	8004a58 <_dtoa_r+0x70>
 8004f76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f78:	6020      	str	r0, [r4, #0]
 8004f7a:	e56d      	b.n	8004a58 <_dtoa_r+0x70>
 8004f7c:	9c05      	ldr	r4, [sp, #20]
 8004f7e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004f80:	1b2d      	subs	r5, r5, r4
 8004f82:	950f      	str	r5, [sp, #60]	; 0x3c
 8004f84:	4265      	negs	r5, r4
 8004f86:	2400      	movs	r4, #0
 8004f88:	9510      	str	r5, [sp, #64]	; 0x40
 8004f8a:	9413      	str	r4, [sp, #76]	; 0x4c
 8004f8c:	e5f9      	b.n	8004b82 <_dtoa_r+0x19a>
 8004f8e:	4264      	negs	r4, r4
 8004f90:	940f      	str	r4, [sp, #60]	; 0x3c
 8004f92:	2400      	movs	r4, #0
 8004f94:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f96:	e5ea      	b.n	8004b6e <_dtoa_r+0x186>
 8004f98:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8004f9c:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8004fa0:	1b00      	subs	r0, r0, r4
 8004fa2:	fa0a f000 	lsl.w	r0, sl, r0
 8004fa6:	e582      	b.n	8004aae <_dtoa_r+0xc6>
 8004fa8:	2500      	movs	r5, #0
 8004faa:	9514      	str	r5, [sp, #80]	; 0x50
 8004fac:	e5d8      	b.n	8004b60 <_dtoa_r+0x178>
 8004fae:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8004fb0:	2c01      	cmp	r4, #1
 8004fb2:	f340 838f 	ble.w	80056d4 <_dtoa_r+0xcec>
 8004fb6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004fb8:	1e62      	subs	r2, r4, #1
 8004fba:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8004fbc:	4294      	cmp	r4, r2
 8004fbe:	bfbf      	itttt	lt
 8004fc0:	9c10      	ldrlt	r4, [sp, #64]	; 0x40
 8004fc2:	9210      	strlt	r2, [sp, #64]	; 0x40
 8004fc4:	ebc4 0302 	rsblt	r3, r4, r2
 8004fc8:	9c13      	ldrlt	r4, [sp, #76]	; 0x4c
 8004fca:	bfb6      	itet	lt
 8004fcc:	18e4      	addlt	r4, r4, r3
 8004fce:	ebc2 0504 	rsbge	r5, r2, r4
 8004fd2:	9413      	strlt	r4, [sp, #76]	; 0x4c
 8004fd4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004fd6:	2c00      	cmp	r4, #0
 8004fd8:	f2c0 838f 	blt.w	80056fa <_dtoa_r+0xd12>
 8004fdc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004fde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004fe2:	18d2      	adds	r2, r2, r3
 8004fe4:	920f      	str	r2, [sp, #60]	; 0x3c
 8004fe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004fe8:	4638      	mov	r0, r7
 8004fea:	18d2      	adds	r2, r2, r3
 8004fec:	2101      	movs	r1, #1
 8004fee:	920b      	str	r2, [sp, #44]	; 0x2c
 8004ff0:	f001 f9c4 	bl	800637c <__i2b>
 8004ff4:	9006      	str	r0, [sp, #24]
 8004ff6:	e70d      	b.n	8004e14 <_dtoa_r+0x42c>
 8004ff8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004ffa:	2d00      	cmp	r5, #0
 8004ffc:	f040 8367 	bne.w	80056ce <_dtoa_r+0xce6>
 8005000:	2300      	movs	r3, #0
 8005002:	2200      	movs	r2, #0
 8005004:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8005008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800500c:	f002 ffbc 	bl	8007f88 <__aeabi_dmul>
 8005010:	4652      	mov	r2, sl
 8005012:	465b      	mov	r3, fp
 8005014:	f003 fa3e 	bl	8008494 <__aeabi_dcmpge>
 8005018:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800501a:	9606      	str	r6, [sp, #24]
 800501c:	2800      	cmp	r0, #0
 800501e:	d082      	beq.n	8004f26 <_dtoa_r+0x53e>
 8005020:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8005022:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005024:	43e4      	mvns	r4, r4
 8005026:	9405      	str	r4, [sp, #20]
 8005028:	2400      	movs	r4, #0
 800502a:	e786      	b.n	8004f3a <_dtoa_r+0x552>
 800502c:	2501      	movs	r5, #1
 800502e:	9512      	str	r5, [sp, #72]	; 0x48
 8005030:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8005032:	2d00      	cmp	r5, #0
 8005034:	f340 82d3 	ble.w	80055de <_dtoa_r+0xbf6>
 8005038:	46a9      	mov	r9, r5
 800503a:	2d0e      	cmp	r5, #14
 800503c:	bf8c      	ite	hi
 800503e:	2400      	movhi	r4, #0
 8005040:	f004 0401 	andls.w	r4, r4, #1
 8005044:	9515      	str	r5, [sp, #84]	; 0x54
 8005046:	950e      	str	r5, [sp, #56]	; 0x38
 8005048:	2100      	movs	r1, #0
 800504a:	f1b9 0f17 	cmp.w	r9, #23
 800504e:	6479      	str	r1, [r7, #68]	; 0x44
 8005050:	d909      	bls.n	8005066 <_dtoa_r+0x67e>
 8005052:	2201      	movs	r2, #1
 8005054:	2304      	movs	r3, #4
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	f103 0014 	add.w	r0, r3, #20
 800505c:	4611      	mov	r1, r2
 800505e:	3201      	adds	r2, #1
 8005060:	4548      	cmp	r0, r9
 8005062:	d9f8      	bls.n	8005056 <_dtoa_r+0x66e>
 8005064:	6479      	str	r1, [r7, #68]	; 0x44
 8005066:	4638      	mov	r0, r7
 8005068:	f001 f87c 	bl	8006164 <_Balloc>
 800506c:	9009      	str	r0, [sp, #36]	; 0x24
 800506e:	6438      	str	r0, [r7, #64]	; 0x40
 8005070:	2c00      	cmp	r4, #0
 8005072:	f43f adfa 	beq.w	8004c6a <_dtoa_r+0x282>
 8005076:	9c05      	ldr	r4, [sp, #20]
 8005078:	4652      	mov	r2, sl
 800507a:	465b      	mov	r3, fp
 800507c:	2c00      	cmp	r4, #0
 800507e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005082:	f340 81f8 	ble.w	8005476 <_dtoa_r+0xa8e>
 8005086:	4b97      	ldr	r3, [pc, #604]	; (80052e4 <_dtoa_r+0x8fc>)
 8005088:	f004 020f 	and.w	r2, r4, #15
 800508c:	1124      	asrs	r4, r4, #4
 800508e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005092:	2602      	movs	r6, #2
 8005094:	06e2      	lsls	r2, r4, #27
 8005096:	e9d3 8900 	ldrd	r8, r9, [r3]
 800509a:	d50b      	bpl.n	80050b4 <_dtoa_r+0x6cc>
 800509c:	4b92      	ldr	r3, [pc, #584]	; (80052e8 <_dtoa_r+0x900>)
 800509e:	4650      	mov	r0, sl
 80050a0:	4659      	mov	r1, fp
 80050a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050a6:	f003 f899 	bl	80081dc <__aeabi_ddiv>
 80050aa:	f004 040f 	and.w	r4, r4, #15
 80050ae:	4682      	mov	sl, r0
 80050b0:	468b      	mov	fp, r1
 80050b2:	2603      	movs	r6, #3
 80050b4:	b174      	cbz	r4, 80050d4 <_dtoa_r+0x6ec>
 80050b6:	4d8c      	ldr	r5, [pc, #560]	; (80052e8 <_dtoa_r+0x900>)
 80050b8:	4640      	mov	r0, r8
 80050ba:	4649      	mov	r1, r9
 80050bc:	07e3      	lsls	r3, r4, #31
 80050be:	d504      	bpl.n	80050ca <_dtoa_r+0x6e2>
 80050c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050c4:	f002 ff60 	bl	8007f88 <__aeabi_dmul>
 80050c8:	3601      	adds	r6, #1
 80050ca:	3508      	adds	r5, #8
 80050cc:	1064      	asrs	r4, r4, #1
 80050ce:	d1f5      	bne.n	80050bc <_dtoa_r+0x6d4>
 80050d0:	4680      	mov	r8, r0
 80050d2:	4689      	mov	r9, r1
 80050d4:	4650      	mov	r0, sl
 80050d6:	4659      	mov	r1, fp
 80050d8:	4642      	mov	r2, r8
 80050da:	464b      	mov	r3, r9
 80050dc:	f003 f87e 	bl	80081dc <__aeabi_ddiv>
 80050e0:	4682      	mov	sl, r0
 80050e2:	468b      	mov	fp, r1
 80050e4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80050e6:	2c00      	cmp	r4, #0
 80050e8:	f000 8100 	beq.w	80052ec <_dtoa_r+0x904>
 80050ec:	2300      	movs	r3, #0
 80050ee:	4650      	mov	r0, sl
 80050f0:	4659      	mov	r1, fp
 80050f2:	2200      	movs	r2, #0
 80050f4:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 80050f8:	2401      	movs	r4, #1
 80050fa:	f003 f9b7 	bl	800846c <__aeabi_dcmplt>
 80050fe:	b900      	cbnz	r0, 8005102 <_dtoa_r+0x71a>
 8005100:	2400      	movs	r4, #0
 8005102:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005104:	2d00      	cmp	r5, #0
 8005106:	bfd4      	ite	le
 8005108:	2400      	movle	r4, #0
 800510a:	f004 0401 	andgt.w	r4, r4, #1
 800510e:	2c00      	cmp	r4, #0
 8005110:	f000 80ec 	beq.w	80052ec <_dtoa_r+0x904>
 8005114:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8005116:	2c00      	cmp	r4, #0
 8005118:	f340 819b 	ble.w	8005452 <_dtoa_r+0xa6a>
 800511c:	2300      	movs	r3, #0
 800511e:	2200      	movs	r2, #0
 8005120:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005124:	4650      	mov	r0, sl
 8005126:	4659      	mov	r1, fp
 8005128:	f002 ff2e 	bl	8007f88 <__aeabi_dmul>
 800512c:	4682      	mov	sl, r0
 800512e:	1c70      	adds	r0, r6, #1
 8005130:	468b      	mov	fp, r1
 8005132:	f002 fec3 	bl	8007ebc <__aeabi_i2d>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4650      	mov	r0, sl
 800513c:	4659      	mov	r1, fp
 800513e:	f002 ff23 	bl	8007f88 <__aeabi_dmul>
 8005142:	2300      	movs	r3, #0
 8005144:	2200      	movs	r2, #0
 8005146:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800514a:	f002 fd6b 	bl	8007c24 <__adddf3>
 800514e:	9d05      	ldr	r5, [sp, #20]
 8005150:	3d01      	subs	r5, #1
 8005152:	9517      	str	r5, [sp, #92]	; 0x5c
 8005154:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005156:	4680      	mov	r8, r0
 8005158:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800515c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800515e:	2c00      	cmp	r4, #0
 8005160:	f000 81b0 	beq.w	80054c4 <_dtoa_r+0xadc>
 8005164:	4b5f      	ldr	r3, [pc, #380]	; (80052e4 <_dtoa_r+0x8fc>)
 8005166:	2100      	movs	r1, #0
 8005168:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800516c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005170:	2000      	movs	r0, #0
 8005172:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8005176:	f003 f831 	bl	80081dc <__aeabi_ddiv>
 800517a:	4642      	mov	r2, r8
 800517c:	464b      	mov	r3, r9
 800517e:	f002 fd4f 	bl	8007c20 <__aeabi_dsub>
 8005182:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005186:	4659      	mov	r1, fp
 8005188:	4650      	mov	r0, sl
 800518a:	f003 f997 	bl	80084bc <__aeabi_d2iz>
 800518e:	4606      	mov	r6, r0
 8005190:	f002 fe94 	bl	8007ebc <__aeabi_i2d>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4650      	mov	r0, sl
 800519a:	4659      	mov	r1, fp
 800519c:	f002 fd40 	bl	8007c20 <__aeabi_dsub>
 80051a0:	3630      	adds	r6, #48	; 0x30
 80051a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80051a4:	b2f6      	uxtb	r6, r6
 80051a6:	4682      	mov	sl, r0
 80051a8:	468b      	mov	fp, r1
 80051aa:	f804 6b01 	strb.w	r6, [r4], #1
 80051ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051b2:	4652      	mov	r2, sl
 80051b4:	465b      	mov	r3, fp
 80051b6:	9411      	str	r4, [sp, #68]	; 0x44
 80051b8:	46a0      	mov	r8, r4
 80051ba:	f003 f975 	bl	80084a8 <__aeabi_dcmpgt>
 80051be:	2800      	cmp	r0, #0
 80051c0:	f040 8325 	bne.w	800580e <_dtoa_r+0xe26>
 80051c4:	2100      	movs	r1, #0
 80051c6:	4652      	mov	r2, sl
 80051c8:	465b      	mov	r3, fp
 80051ca:	2000      	movs	r0, #0
 80051cc:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80051d0:	f002 fd26 	bl	8007c20 <__aeabi_dsub>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051dc:	f003 f964 	bl	80084a8 <__aeabi_dcmpgt>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	f040 827f 	bne.w	80056e4 <_dtoa_r+0xcfc>
 80051e6:	2d01      	cmp	r5, #1
 80051e8:	f340 8133 	ble.w	8005452 <_dtoa_r+0xa6a>
 80051ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051ee:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80051f0:	1945      	adds	r5, r0, r5
 80051f2:	e00f      	b.n	8005214 <_dtoa_r+0x82c>
 80051f4:	2100      	movs	r1, #0
 80051f6:	2000      	movs	r0, #0
 80051f8:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80051fc:	f002 fd10 	bl	8007c20 <__aeabi_dsub>
 8005200:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005204:	f003 f932 	bl	800846c <__aeabi_dcmplt>
 8005208:	2800      	cmp	r0, #0
 800520a:	f040 826b 	bne.w	80056e4 <_dtoa_r+0xcfc>
 800520e:	42ac      	cmp	r4, r5
 8005210:	f000 811f 	beq.w	8005452 <_dtoa_r+0xa6a>
 8005214:	2300      	movs	r3, #0
 8005216:	2200      	movs	r2, #0
 8005218:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800521c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005220:	f002 feb2 	bl	8007f88 <__aeabi_dmul>
 8005224:	2300      	movs	r3, #0
 8005226:	2200      	movs	r2, #0
 8005228:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800522c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005230:	4650      	mov	r0, sl
 8005232:	4659      	mov	r1, fp
 8005234:	f002 fea8 	bl	8007f88 <__aeabi_dmul>
 8005238:	4680      	mov	r8, r0
 800523a:	4689      	mov	r9, r1
 800523c:	f003 f93e 	bl	80084bc <__aeabi_d2iz>
 8005240:	4606      	mov	r6, r0
 8005242:	f002 fe3b 	bl	8007ebc <__aeabi_i2d>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4640      	mov	r0, r8
 800524c:	4649      	mov	r1, r9
 800524e:	f002 fce7 	bl	8007c20 <__aeabi_dsub>
 8005252:	3630      	adds	r6, #48	; 0x30
 8005254:	b2f6      	uxtb	r6, r6
 8005256:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800525a:	f804 6b01 	strb.w	r6, [r4], #1
 800525e:	4682      	mov	sl, r0
 8005260:	468b      	mov	fp, r1
 8005262:	f003 f903 	bl	800846c <__aeabi_dcmplt>
 8005266:	46a0      	mov	r8, r4
 8005268:	4652      	mov	r2, sl
 800526a:	465b      	mov	r3, fp
 800526c:	2800      	cmp	r0, #0
 800526e:	d0c1      	beq.n	80051f4 <_dtoa_r+0x80c>
 8005270:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005272:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005274:	9005      	str	r0, [sp, #20]
 8005276:	9409      	str	r4, [sp, #36]	; 0x24
 8005278:	e66e      	b.n	8004f58 <_dtoa_r+0x570>
 800527a:	2500      	movs	r5, #0
 800527c:	9512      	str	r5, [sp, #72]	; 0x48
 800527e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8005280:	9805      	ldr	r0, [sp, #20]
 8005282:	182d      	adds	r5, r5, r0
 8005284:	f105 0901 	add.w	r9, r5, #1
 8005288:	f1b9 0f00 	cmp.w	r9, #0
 800528c:	9515      	str	r5, [sp, #84]	; 0x54
 800528e:	f340 819b 	ble.w	80055c8 <_dtoa_r+0xbe0>
 8005292:	f1b9 0f0e 	cmp.w	r9, #14
 8005296:	bf8c      	ite	hi
 8005298:	2400      	movhi	r4, #0
 800529a:	f004 0401 	andls.w	r4, r4, #1
 800529e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80052a2:	e6d1      	b.n	8005048 <_dtoa_r+0x660>
 80052a4:	2500      	movs	r5, #0
 80052a6:	9512      	str	r5, [sp, #72]	; 0x48
 80052a8:	e6c2      	b.n	8005030 <_dtoa_r+0x648>
 80052aa:	2501      	movs	r5, #1
 80052ac:	9512      	str	r5, [sp, #72]	; 0x48
 80052ae:	e7e6      	b.n	800527e <_dtoa_r+0x896>
 80052b0:	f1ba 0f00 	cmp.w	sl, #0
 80052b4:	f47f aded 	bne.w	8004e92 <_dtoa_r+0x4aa>
 80052b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80052bc:	4655      	mov	r5, sl
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f47f ade8 	bne.w	8004e94 <_dtoa_r+0x4ac>
 80052c4:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80052c8:	ea0b 0303 	and.w	r3, fp, r3
 80052cc:	461d      	mov	r5, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f43f ade0 	beq.w	8004e94 <_dtoa_r+0x4ac>
 80052d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80052d6:	3501      	adds	r5, #1
 80052d8:	950f      	str	r5, [sp, #60]	; 0x3c
 80052da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80052dc:	3501      	adds	r5, #1
 80052de:	950b      	str	r5, [sp, #44]	; 0x2c
 80052e0:	2501      	movs	r5, #1
 80052e2:	e5d7      	b.n	8004e94 <_dtoa_r+0x4ac>
 80052e4:	08008668 	.word	0x08008668
 80052e8:	08008758 	.word	0x08008758
 80052ec:	4630      	mov	r0, r6
 80052ee:	f002 fde5 	bl	8007ebc <__aeabi_i2d>
 80052f2:	4652      	mov	r2, sl
 80052f4:	465b      	mov	r3, fp
 80052f6:	f002 fe47 	bl	8007f88 <__aeabi_dmul>
 80052fa:	2300      	movs	r3, #0
 80052fc:	2200      	movs	r2, #0
 80052fe:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8005302:	f002 fc8f 	bl	8007c24 <__adddf3>
 8005306:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005308:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 800530c:	4680      	mov	r8, r0
 800530e:	46a1      	mov	r9, r4
 8005310:	2d00      	cmp	r5, #0
 8005312:	f040 80ac 	bne.w	800546e <_dtoa_r+0xa86>
 8005316:	2300      	movs	r3, #0
 8005318:	2200      	movs	r2, #0
 800531a:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800531e:	4650      	mov	r0, sl
 8005320:	4659      	mov	r1, fp
 8005322:	f002 fc7d 	bl	8007c20 <__aeabi_dsub>
 8005326:	4642      	mov	r2, r8
 8005328:	4623      	mov	r3, r4
 800532a:	4682      	mov	sl, r0
 800532c:	468b      	mov	fp, r1
 800532e:	f003 f8bb 	bl	80084a8 <__aeabi_dcmpgt>
 8005332:	2800      	cmp	r0, #0
 8005334:	f040 80c3 	bne.w	80054be <_dtoa_r+0xad6>
 8005338:	4642      	mov	r2, r8
 800533a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 800533e:	4650      	mov	r0, sl
 8005340:	4659      	mov	r1, fp
 8005342:	f003 f893 	bl	800846c <__aeabi_dcmplt>
 8005346:	2800      	cmp	r0, #0
 8005348:	f000 8083 	beq.w	8005452 <_dtoa_r+0xa6a>
 800534c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800534e:	9606      	str	r6, [sp, #24]
 8005350:	e666      	b.n	8005020 <_dtoa_r+0x638>
 8005352:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005354:	2800      	cmp	r0, #0
 8005356:	f000 8147 	beq.w	80055e8 <_dtoa_r+0xc00>
 800535a:	2c00      	cmp	r4, #0
 800535c:	dd05      	ble.n	800536a <_dtoa_r+0x982>
 800535e:	4638      	mov	r0, r7
 8005360:	9906      	ldr	r1, [sp, #24]
 8005362:	4622      	mov	r2, r4
 8005364:	f001 f8f8 	bl	8006558 <__lshift>
 8005368:	9006      	str	r0, [sp, #24]
 800536a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800536e:	2d00      	cmp	r5, #0
 8005370:	f040 8201 	bne.w	8005776 <_dtoa_r+0xd8e>
 8005374:	f00a 0001 	and.w	r0, sl, #1
 8005378:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800537a:	9c06      	ldr	r4, [sp, #24]
 800537c:	900b      	str	r0, [sp, #44]	; 0x2c
 800537e:	4631      	mov	r1, r6
 8005380:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005382:	f7ff faa1 	bl	80048c8 <quorem>
 8005386:	4621      	mov	r1, r4
 8005388:	9008      	str	r0, [sp, #32]
 800538a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800538c:	f001 f944 	bl	8006618 <__mcmp>
 8005390:	4642      	mov	r2, r8
 8005392:	4681      	mov	r9, r0
 8005394:	4631      	mov	r1, r6
 8005396:	4638      	mov	r0, r7
 8005398:	f001 f95e 	bl	8006658 <__mdiff>
 800539c:	9a08      	ldr	r2, [sp, #32]
 800539e:	68c3      	ldr	r3, [r0, #12]
 80053a0:	3230      	adds	r2, #48	; 0x30
 80053a2:	4682      	mov	sl, r0
 80053a4:	9206      	str	r2, [sp, #24]
 80053a6:	f04f 0b01 	mov.w	fp, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d03d      	beq.n	800542a <_dtoa_r+0xa42>
 80053ae:	4638      	mov	r0, r7
 80053b0:	4651      	mov	r1, sl
 80053b2:	f000 fefd 	bl	80061b0 <_Bfree>
 80053b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053b8:	ea5b 0303 	orrs.w	r3, fp, r3
 80053bc:	d103      	bne.n	80053c6 <_dtoa_r+0x9de>
 80053be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80053c0:	2800      	cmp	r0, #0
 80053c2:	f000 8211 	beq.w	80057e8 <_dtoa_r+0xe00>
 80053c6:	f1b9 0f00 	cmp.w	r9, #0
 80053ca:	f2c0 819f 	blt.w	800570c <_dtoa_r+0xd24>
 80053ce:	9826      	ldr	r0, [sp, #152]	; 0x98
 80053d0:	ea59 0000 	orrs.w	r0, r9, r0
 80053d4:	d103      	bne.n	80053de <_dtoa_r+0x9f6>
 80053d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053d8:	2900      	cmp	r1, #0
 80053da:	f000 8197 	beq.w	800570c <_dtoa_r+0xd24>
 80053de:	f1bb 0f00 	cmp.w	fp, #0
 80053e2:	f300 81ea 	bgt.w	80057ba <_dtoa_r+0xdd2>
 80053e6:	9a06      	ldr	r2, [sp, #24]
 80053e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053ea:	f805 2b01 	strb.w	r2, [r5], #1
 80053ee:	990e      	ldr	r1, [sp, #56]	; 0x38
 80053f0:	1a2b      	subs	r3, r5, r0
 80053f2:	428b      	cmp	r3, r1
 80053f4:	46aa      	mov	sl, r5
 80053f6:	f000 81db 	beq.w	80057b0 <_dtoa_r+0xdc8>
 80053fa:	220a      	movs	r2, #10
 80053fc:	2300      	movs	r3, #0
 80053fe:	4638      	mov	r0, r7
 8005400:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005402:	f000 fedf 	bl	80061c4 <__multadd>
 8005406:	4544      	cmp	r4, r8
 8005408:	900a      	str	r0, [sp, #40]	; 0x28
 800540a:	d027      	beq.n	800545c <_dtoa_r+0xa74>
 800540c:	4621      	mov	r1, r4
 800540e:	220a      	movs	r2, #10
 8005410:	2300      	movs	r3, #0
 8005412:	4638      	mov	r0, r7
 8005414:	f000 fed6 	bl	80061c4 <__multadd>
 8005418:	4641      	mov	r1, r8
 800541a:	4604      	mov	r4, r0
 800541c:	220a      	movs	r2, #10
 800541e:	4638      	mov	r0, r7
 8005420:	2300      	movs	r3, #0
 8005422:	f000 fecf 	bl	80061c4 <__multadd>
 8005426:	4680      	mov	r8, r0
 8005428:	e7a9      	b.n	800537e <_dtoa_r+0x996>
 800542a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800542c:	4651      	mov	r1, sl
 800542e:	f001 f8f3 	bl	8006618 <__mcmp>
 8005432:	4683      	mov	fp, r0
 8005434:	e7bb      	b.n	80053ae <_dtoa_r+0x9c6>
 8005436:	4638      	mov	r0, r7
 8005438:	4621      	mov	r1, r4
 800543a:	f000 feb9 	bl	80061b0 <_Bfree>
 800543e:	e587      	b.n	8004f50 <_dtoa_r+0x568>
 8005440:	231c      	movs	r3, #28
 8005442:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005444:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005446:	18c0      	adds	r0, r0, r3
 8005448:	18c9      	adds	r1, r1, r3
 800544a:	900f      	str	r0, [sp, #60]	; 0x3c
 800544c:	18e4      	adds	r4, r4, r3
 800544e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005450:	e538      	b.n	8004ec4 <_dtoa_r+0x4dc>
 8005452:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005456:	4682      	mov	sl, r0
 8005458:	468b      	mov	fp, r1
 800545a:	e406      	b.n	8004c6a <_dtoa_r+0x282>
 800545c:	4621      	mov	r1, r4
 800545e:	4638      	mov	r0, r7
 8005460:	220a      	movs	r2, #10
 8005462:	2300      	movs	r3, #0
 8005464:	f000 feae 	bl	80061c4 <__multadd>
 8005468:	4604      	mov	r4, r0
 800546a:	4680      	mov	r8, r0
 800546c:	e787      	b.n	800537e <_dtoa_r+0x996>
 800546e:	9c05      	ldr	r4, [sp, #20]
 8005470:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005472:	9417      	str	r4, [sp, #92]	; 0x5c
 8005474:	e672      	b.n	800515c <_dtoa_r+0x774>
 8005476:	9d05      	ldr	r5, [sp, #20]
 8005478:	426c      	negs	r4, r5
 800547a:	2c00      	cmp	r4, #0
 800547c:	f000 80fb 	beq.w	8005676 <_dtoa_r+0xc8e>
 8005480:	4ba0      	ldr	r3, [pc, #640]	; (8005704 <_dtoa_r+0xd1c>)
 8005482:	f004 020f 	and.w	r2, r4, #15
 8005486:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800548a:	4650      	mov	r0, sl
 800548c:	4659      	mov	r1, fp
 800548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005492:	f002 fd79 	bl	8007f88 <__aeabi_dmul>
 8005496:	1124      	asrs	r4, r4, #4
 8005498:	4682      	mov	sl, r0
 800549a:	468b      	mov	fp, r1
 800549c:	f000 80eb 	beq.w	8005676 <_dtoa_r+0xc8e>
 80054a0:	4d99      	ldr	r5, [pc, #612]	; (8005708 <_dtoa_r+0xd20>)
 80054a2:	2602      	movs	r6, #2
 80054a4:	07e2      	lsls	r2, r4, #31
 80054a6:	d504      	bpl.n	80054b2 <_dtoa_r+0xaca>
 80054a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054ac:	f002 fd6c 	bl	8007f88 <__aeabi_dmul>
 80054b0:	3601      	adds	r6, #1
 80054b2:	3508      	adds	r5, #8
 80054b4:	1064      	asrs	r4, r4, #1
 80054b6:	d1f5      	bne.n	80054a4 <_dtoa_r+0xabc>
 80054b8:	4682      	mov	sl, r0
 80054ba:	468b      	mov	fp, r1
 80054bc:	e612      	b.n	80050e4 <_dtoa_r+0x6fc>
 80054be:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80054c0:	9606      	str	r6, [sp, #24]
 80054c2:	e530      	b.n	8004f26 <_dtoa_r+0x53e>
 80054c4:	498f      	ldr	r1, [pc, #572]	; (8005704 <_dtoa_r+0xd1c>)
 80054c6:	1e6c      	subs	r4, r5, #1
 80054c8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80054cc:	4642      	mov	r2, r8
 80054ce:	464b      	mov	r3, r9
 80054d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054d4:	9406      	str	r4, [sp, #24]
 80054d6:	f002 fd57 	bl	8007f88 <__aeabi_dmul>
 80054da:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 80054de:	4659      	mov	r1, fp
 80054e0:	4650      	mov	r0, sl
 80054e2:	f002 ffeb 	bl	80084bc <__aeabi_d2iz>
 80054e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054e8:	4604      	mov	r4, r0
 80054ea:	9111      	str	r1, [sp, #68]	; 0x44
 80054ec:	f002 fce6 	bl	8007ebc <__aeabi_i2d>
 80054f0:	460b      	mov	r3, r1
 80054f2:	4602      	mov	r2, r0
 80054f4:	4659      	mov	r1, fp
 80054f6:	4650      	mov	r0, sl
 80054f8:	f002 fb92 	bl	8007c20 <__aeabi_dsub>
 80054fc:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8005500:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005502:	f804 3b01 	strb.w	r3, [r4], #1
 8005506:	2d01      	cmp	r5, #1
 8005508:	4682      	mov	sl, r0
 800550a:	468b      	mov	fp, r1
 800550c:	9411      	str	r4, [sp, #68]	; 0x44
 800550e:	46a0      	mov	r8, r4
 8005510:	d020      	beq.n	8005554 <_dtoa_r+0xb6c>
 8005512:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005514:	1e66      	subs	r6, r4, #1
 8005516:	1976      	adds	r6, r6, r5
 8005518:	2300      	movs	r3, #0
 800551a:	2200      	movs	r2, #0
 800551c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005520:	f002 fd32 	bl	8007f88 <__aeabi_dmul>
 8005524:	4689      	mov	r9, r1
 8005526:	4680      	mov	r8, r0
 8005528:	f002 ffc8 	bl	80084bc <__aeabi_d2iz>
 800552c:	4605      	mov	r5, r0
 800552e:	f002 fcc5 	bl	8007ebc <__aeabi_i2d>
 8005532:	3530      	adds	r5, #48	; 0x30
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4640      	mov	r0, r8
 800553a:	4649      	mov	r1, r9
 800553c:	f002 fb70 	bl	8007c20 <__aeabi_dsub>
 8005540:	f804 5f01 	strb.w	r5, [r4, #1]!
 8005544:	42b4      	cmp	r4, r6
 8005546:	d1e7      	bne.n	8005518 <_dtoa_r+0xb30>
 8005548:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800554a:	9c06      	ldr	r4, [sp, #24]
 800554c:	4682      	mov	sl, r0
 800554e:	468b      	mov	fp, r1
 8005550:	eb05 0804 	add.w	r8, r5, r4
 8005554:	2300      	movs	r3, #0
 8005556:	2200      	movs	r2, #0
 8005558:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800555c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8005560:	f002 fb60 	bl	8007c24 <__adddf3>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4650      	mov	r0, sl
 800556a:	4659      	mov	r1, fp
 800556c:	f002 ff9c 	bl	80084a8 <__aeabi_dcmpgt>
 8005570:	2800      	cmp	r0, #0
 8005572:	f000 808a 	beq.w	800568a <_dtoa_r+0xca2>
 8005576:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 800557a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800557c:	e422      	b.n	8004dc4 <_dtoa_r+0x3dc>
 800557e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005580:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005584:	e4e8      	b.n	8004f58 <_dtoa_r+0x570>
 8005586:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005588:	4631      	mov	r1, r6
 800558a:	f001 f845 	bl	8006618 <__mcmp>
 800558e:	2800      	cmp	r0, #0
 8005590:	f6bf acad 	bge.w	8004eee <_dtoa_r+0x506>
 8005594:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005596:	220a      	movs	r2, #10
 8005598:	4638      	mov	r0, r7
 800559a:	2300      	movs	r3, #0
 800559c:	f000 fe12 	bl	80061c4 <__multadd>
 80055a0:	9905      	ldr	r1, [sp, #20]
 80055a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055a4:	900a      	str	r0, [sp, #40]	; 0x28
 80055a6:	3901      	subs	r1, #1
 80055a8:	9105      	str	r1, [sp, #20]
 80055aa:	2a00      	cmp	r2, #0
 80055ac:	f040 8136 	bne.w	800581c <_dtoa_r+0xe34>
 80055b0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80055b2:	900e      	str	r0, [sp, #56]	; 0x38
 80055b4:	e49b      	b.n	8004eee <_dtoa_r+0x506>
 80055b6:	6933      	ldr	r3, [r6, #16]
 80055b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80055bc:	6918      	ldr	r0, [r3, #16]
 80055be:	f000 fe91 	bl	80062e4 <__hi0bits>
 80055c2:	f1c0 0320 	rsb	r3, r0, #32
 80055c6:	e46a      	b.n	8004e9e <_dtoa_r+0x4b6>
 80055c8:	f1b9 0f0e 	cmp.w	r9, #14
 80055cc:	bf8c      	ite	hi
 80055ce:	2300      	movhi	r3, #0
 80055d0:	2301      	movls	r3, #1
 80055d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80055d6:	2100      	movs	r1, #0
 80055d8:	6479      	str	r1, [r7, #68]	; 0x44
 80055da:	401c      	ands	r4, r3
 80055dc:	e543      	b.n	8005066 <_dtoa_r+0x67e>
 80055de:	2301      	movs	r3, #1
 80055e0:	9315      	str	r3, [sp, #84]	; 0x54
 80055e2:	930e      	str	r3, [sp, #56]	; 0x38
 80055e4:	9327      	str	r3, [sp, #156]	; 0x9c
 80055e6:	e7f6      	b.n	80055d6 <_dtoa_r+0xbee>
 80055e8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80055ea:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80055ee:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80055f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80055f4:	e006      	b.n	8005604 <_dtoa_r+0xc1c>
 80055f6:	4651      	mov	r1, sl
 80055f8:	4638      	mov	r0, r7
 80055fa:	220a      	movs	r2, #10
 80055fc:	2300      	movs	r3, #0
 80055fe:	f000 fde1 	bl	80061c4 <__multadd>
 8005602:	4682      	mov	sl, r0
 8005604:	4631      	mov	r1, r6
 8005606:	4650      	mov	r0, sl
 8005608:	f7ff f95e 	bl	80048c8 <quorem>
 800560c:	3030      	adds	r0, #48	; 0x30
 800560e:	5528      	strb	r0, [r5, r4]
 8005610:	3401      	adds	r4, #1
 8005612:	45a0      	cmp	r8, r4
 8005614:	dcef      	bgt.n	80055f6 <_dtoa_r+0xc0e>
 8005616:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005618:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800561c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005620:	4681      	mov	r9, r0
 8005622:	2c01      	cmp	r4, #1
 8005624:	bfac      	ite	ge
 8005626:	44a2      	addge	sl, r4
 8005628:	f10a 0a01 	addlt.w	sl, sl, #1
 800562c:	2400      	movs	r4, #0
 800562e:	2201      	movs	r2, #1
 8005630:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005632:	4638      	mov	r0, r7
 8005634:	f000 ff90 	bl	8006558 <__lshift>
 8005638:	4631      	mov	r1, r6
 800563a:	900a      	str	r0, [sp, #40]	; 0x28
 800563c:	f000 ffec 	bl	8006618 <__mcmp>
 8005640:	2800      	cmp	r0, #0
 8005642:	f340 8082 	ble.w	800574a <_dtoa_r+0xd62>
 8005646:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 800564a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800564c:	1c6a      	adds	r2, r5, #1
 800564e:	e003      	b.n	8005658 <_dtoa_r+0xc70>
 8005650:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 8005654:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005658:	2b39      	cmp	r3, #57	; 0x39
 800565a:	f040 8084 	bne.w	8005766 <_dtoa_r+0xd7e>
 800565e:	4592      	cmp	sl, r2
 8005660:	d1f6      	bne.n	8005650 <_dtoa_r+0xc68>
 8005662:	9805      	ldr	r0, [sp, #20]
 8005664:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005666:	3001      	adds	r0, #1
 8005668:	2331      	movs	r3, #49	; 0x31
 800566a:	9005      	str	r0, [sp, #20]
 800566c:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8005670:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005674:	e461      	b.n	8004f3a <_dtoa_r+0x552>
 8005676:	2602      	movs	r6, #2
 8005678:	e534      	b.n	80050e4 <_dtoa_r+0x6fc>
 800567a:	4638      	mov	r0, r7
 800567c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800567e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005680:	f000 ff1e 	bl	80064c0 <__pow5mult>
 8005684:	900a      	str	r0, [sp, #40]	; 0x28
 8005686:	f7ff bbf2 	b.w	8004e6e <_dtoa_r+0x486>
 800568a:	2100      	movs	r1, #0
 800568c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005690:	2000      	movs	r0, #0
 8005692:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8005696:	f002 fac3 	bl	8007c20 <__aeabi_dsub>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4650      	mov	r0, sl
 80056a0:	4659      	mov	r1, fp
 80056a2:	f002 fee3 	bl	800846c <__aeabi_dcmplt>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	f43f aed3 	beq.w	8005452 <_dtoa_r+0xa6a>
 80056ac:	4642      	mov	r2, r8
 80056ae:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
 80056b2:	2b30      	cmp	r3, #48	; 0x30
 80056b4:	d0fa      	beq.n	80056ac <_dtoa_r+0xcc4>
 80056b6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80056b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80056ba:	9405      	str	r4, [sp, #20]
 80056bc:	9209      	str	r2, [sp, #36]	; 0x24
 80056be:	e44b      	b.n	8004f58 <_dtoa_r+0x570>
 80056c0:	4638      	mov	r0, r7
 80056c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80056c4:	f000 fefc 	bl	80064c0 <__pow5mult>
 80056c8:	900a      	str	r0, [sp, #40]	; 0x28
 80056ca:	f7ff bbd0 	b.w	8004e6e <_dtoa_r+0x486>
 80056ce:	2600      	movs	r6, #0
 80056d0:	9606      	str	r6, [sp, #24]
 80056d2:	e4a5      	b.n	8005020 <_dtoa_r+0x638>
 80056d4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	d064      	beq.n	80057a4 <_dtoa_r+0xdbc>
 80056da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80056e0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80056e2:	e47d      	b.n	8004fe0 <_dtoa_r+0x5f8>
 80056e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80056e6:	f7ff bb6d 	b.w	8004dc4 <_dtoa_r+0x3dc>
 80056ea:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80056ec:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80056f0:	1c72      	adds	r2, r6, #1
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	9405      	str	r4, [sp, #20]
 80056f6:	f7ff bb7b 	b.w	8004df0 <_dtoa_r+0x408>
 80056fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80056fc:	2300      	movs	r3, #0
 80056fe:	1b04      	subs	r4, r0, r4
 8005700:	e46e      	b.n	8004fe0 <_dtoa_r+0x5f8>
 8005702:	bf00      	nop
 8005704:	08008668 	.word	0x08008668
 8005708:	08008758 	.word	0x08008758
 800570c:	f1bb 0f00 	cmp.w	fp, #0
 8005710:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005714:	dd10      	ble.n	8005738 <_dtoa_r+0xd50>
 8005716:	2201      	movs	r2, #1
 8005718:	990a      	ldr	r1, [sp, #40]	; 0x28
 800571a:	4638      	mov	r0, r7
 800571c:	f000 ff1c 	bl	8006558 <__lshift>
 8005720:	4631      	mov	r1, r6
 8005722:	900a      	str	r0, [sp, #40]	; 0x28
 8005724:	f000 ff78 	bl	8006618 <__mcmp>
 8005728:	2800      	cmp	r0, #0
 800572a:	dd6b      	ble.n	8005804 <_dtoa_r+0xe1c>
 800572c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005730:	d053      	beq.n	80057da <_dtoa_r+0xdf2>
 8005732:	9b08      	ldr	r3, [sp, #32]
 8005734:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005738:	462b      	mov	r3, r5
 800573a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800573c:	f803 9b01 	strb.w	r9, [r3], #1
 8005740:	f8cd 8018 	str.w	r8, [sp, #24]
 8005744:	9309      	str	r3, [sp, #36]	; 0x24
 8005746:	f7ff bbf8 	b.w	8004f3a <_dtoa_r+0x552>
 800574a:	d103      	bne.n	8005754 <_dtoa_r+0xd6c>
 800574c:	f019 0f01 	tst.w	r9, #1
 8005750:	f47f af79 	bne.w	8005646 <_dtoa_r+0xc5e>
 8005754:	4652      	mov	r2, sl
 8005756:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 800575a:	2b30      	cmp	r3, #48	; 0x30
 800575c:	d0fa      	beq.n	8005754 <_dtoa_r+0xd6c>
 800575e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005760:	9209      	str	r2, [sp, #36]	; 0x24
 8005762:	f7ff bbea 	b.w	8004f3a <_dtoa_r+0x552>
 8005766:	3301      	adds	r3, #1
 8005768:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800576a:	f80a 3c01 	strb.w	r3, [sl, #-1]
 800576e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005772:	f7ff bbe2 	b.w	8004f3a <_dtoa_r+0x552>
 8005776:	9c06      	ldr	r4, [sp, #24]
 8005778:	4638      	mov	r0, r7
 800577a:	6861      	ldr	r1, [r4, #4]
 800577c:	f000 fcf2 	bl	8006164 <_Balloc>
 8005780:	9d06      	ldr	r5, [sp, #24]
 8005782:	692a      	ldr	r2, [r5, #16]
 8005784:	3202      	adds	r2, #2
 8005786:	4604      	mov	r4, r0
 8005788:	0092      	lsls	r2, r2, #2
 800578a:	f105 010c 	add.w	r1, r5, #12
 800578e:	f100 000c 	add.w	r0, r0, #12
 8005792:	f000 fc9f 	bl	80060d4 <memcpy>
 8005796:	4638      	mov	r0, r7
 8005798:	4621      	mov	r1, r4
 800579a:	2201      	movs	r2, #1
 800579c:	f000 fedc 	bl	8006558 <__lshift>
 80057a0:	4680      	mov	r8, r0
 80057a2:	e5e7      	b.n	8005374 <_dtoa_r+0x98c>
 80057a4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80057a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80057a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80057aa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057ae:	e417      	b.n	8004fe0 <_dtoa_r+0x5f8>
 80057b0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80057b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80057b8:	e739      	b.n	800562e <_dtoa_r+0xc46>
 80057ba:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80057be:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80057c2:	d00a      	beq.n	80057da <_dtoa_r+0xdf2>
 80057c4:	462b      	mov	r3, r5
 80057c6:	f109 0901 	add.w	r9, r9, #1
 80057ca:	f803 9b01 	strb.w	r9, [r3], #1
 80057ce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80057d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80057d4:	9309      	str	r3, [sp, #36]	; 0x24
 80057d6:	f7ff bbb0 	b.w	8004f3a <_dtoa_r+0x552>
 80057da:	46aa      	mov	sl, r5
 80057dc:	2339      	movs	r3, #57	; 0x39
 80057de:	f80a 3b01 	strb.w	r3, [sl], #1
 80057e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80057e6:	e730      	b.n	800564a <_dtoa_r+0xc62>
 80057e8:	464b      	mov	r3, r9
 80057ea:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80057ee:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80057f2:	d0f2      	beq.n	80057da <_dtoa_r+0xdf2>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	dc9c      	bgt.n	8005732 <_dtoa_r+0xd4a>
 80057f8:	e79e      	b.n	8005738 <_dtoa_r+0xd50>
 80057fa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80057fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80057fe:	9409      	str	r4, [sp, #36]	; 0x24
 8005800:	f7ff bbaa 	b.w	8004f58 <_dtoa_r+0x570>
 8005804:	d198      	bne.n	8005738 <_dtoa_r+0xd50>
 8005806:	f019 0f01 	tst.w	r9, #1
 800580a:	d095      	beq.n	8005738 <_dtoa_r+0xd50>
 800580c:	e78e      	b.n	800572c <_dtoa_r+0xd44>
 800580e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005810:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005812:	9405      	str	r4, [sp, #20]
 8005814:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005816:	9409      	str	r4, [sp, #36]	; 0x24
 8005818:	f7ff bb9e 	b.w	8004f58 <_dtoa_r+0x570>
 800581c:	2300      	movs	r3, #0
 800581e:	4638      	mov	r0, r7
 8005820:	9906      	ldr	r1, [sp, #24]
 8005822:	220a      	movs	r2, #10
 8005824:	f000 fcce 	bl	80061c4 <__multadd>
 8005828:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800582a:	9006      	str	r0, [sp, #24]
 800582c:	930e      	str	r3, [sp, #56]	; 0x38
 800582e:	f7ff bb5e 	b.w	8004eee <_dtoa_r+0x506>
 8005832:	f43f ab47 	beq.w	8004ec4 <_dtoa_r+0x4dc>
 8005836:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800583a:	e602      	b.n	8005442 <_dtoa_r+0xa5a>
 800583c:	f3af 8000 	nop.w

08005840 <_malloc_trim_r>:
 8005840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005842:	4d22      	ldr	r5, [pc, #136]	; (80058cc <_malloc_trim_r+0x8c>)
 8005844:	460f      	mov	r7, r1
 8005846:	4604      	mov	r4, r0
 8005848:	f000 fc88 	bl	800615c <__malloc_lock>
 800584c:	68ab      	ldr	r3, [r5, #8]
 800584e:	685e      	ldr	r6, [r3, #4]
 8005850:	f026 0603 	bic.w	r6, r6, #3
 8005854:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 8005858:	1bdf      	subs	r7, r3, r7
 800585a:	0b3f      	lsrs	r7, r7, #12
 800585c:	3f01      	subs	r7, #1
 800585e:	033f      	lsls	r7, r7, #12
 8005860:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8005864:	4620      	mov	r0, r4
 8005866:	db07      	blt.n	8005878 <_malloc_trim_r+0x38>
 8005868:	2100      	movs	r1, #0
 800586a:	f001 f907 	bl	8006a7c <_sbrk_r>
 800586e:	68ab      	ldr	r3, [r5, #8]
 8005870:	199b      	adds	r3, r3, r6
 8005872:	4298      	cmp	r0, r3
 8005874:	4620      	mov	r0, r4
 8005876:	d003      	beq.n	8005880 <_malloc_trim_r+0x40>
 8005878:	f000 fc72 	bl	8006160 <__malloc_unlock>
 800587c:	2000      	movs	r0, #0
 800587e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005880:	4279      	negs	r1, r7
 8005882:	f001 f8fb 	bl	8006a7c <_sbrk_r>
 8005886:	3001      	adds	r0, #1
 8005888:	d00d      	beq.n	80058a6 <_malloc_trim_r+0x66>
 800588a:	4b11      	ldr	r3, [pc, #68]	; (80058d0 <_malloc_trim_r+0x90>)
 800588c:	68aa      	ldr	r2, [r5, #8]
 800588e:	6819      	ldr	r1, [r3, #0]
 8005890:	1bf6      	subs	r6, r6, r7
 8005892:	f046 0601 	orr.w	r6, r6, #1
 8005896:	1bcf      	subs	r7, r1, r7
 8005898:	4620      	mov	r0, r4
 800589a:	6056      	str	r6, [r2, #4]
 800589c:	601f      	str	r7, [r3, #0]
 800589e:	f000 fc5f 	bl	8006160 <__malloc_unlock>
 80058a2:	2001      	movs	r0, #1
 80058a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058a6:	2100      	movs	r1, #0
 80058a8:	4620      	mov	r0, r4
 80058aa:	f001 f8e7 	bl	8006a7c <_sbrk_r>
 80058ae:	68ab      	ldr	r3, [r5, #8]
 80058b0:	1ac2      	subs	r2, r0, r3
 80058b2:	2a0f      	cmp	r2, #15
 80058b4:	dd07      	ble.n	80058c6 <_malloc_trim_r+0x86>
 80058b6:	4907      	ldr	r1, [pc, #28]	; (80058d4 <_malloc_trim_r+0x94>)
 80058b8:	6809      	ldr	r1, [r1, #0]
 80058ba:	1a40      	subs	r0, r0, r1
 80058bc:	4904      	ldr	r1, [pc, #16]	; (80058d0 <_malloc_trim_r+0x90>)
 80058be:	f042 0201 	orr.w	r2, r2, #1
 80058c2:	6008      	str	r0, [r1, #0]
 80058c4:	605a      	str	r2, [r3, #4]
 80058c6:	4620      	mov	r0, r4
 80058c8:	e7d6      	b.n	8005878 <_malloc_trim_r+0x38>
 80058ca:	bf00      	nop
 80058cc:	20000584 	.word	0x20000584
 80058d0:	200009ac 	.word	0x200009ac
 80058d4:	2000098c 	.word	0x2000098c

080058d8 <_free_r>:
 80058d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058dc:	460d      	mov	r5, r1
 80058de:	4604      	mov	r4, r0
 80058e0:	2900      	cmp	r1, #0
 80058e2:	d06f      	beq.n	80059c4 <_free_r+0xec>
 80058e4:	f000 fc3a 	bl	800615c <__malloc_lock>
 80058e8:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80058ec:	4e58      	ldr	r6, [pc, #352]	; (8005a50 <_free_r+0x178>)
 80058ee:	f1a5 0108 	sub.w	r1, r5, #8
 80058f2:	f020 0301 	bic.w	r3, r0, #1
 80058f6:	18ca      	adds	r2, r1, r3
 80058f8:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80058fc:	6857      	ldr	r7, [r2, #4]
 80058fe:	4594      	cmp	ip, r2
 8005900:	f027 0703 	bic.w	r7, r7, #3
 8005904:	d07c      	beq.n	8005a00 <_free_r+0x128>
 8005906:	f010 0001 	ands.w	r0, r0, #1
 800590a:	6057      	str	r7, [r2, #4]
 800590c:	d049      	beq.n	80059a2 <_free_r+0xca>
 800590e:	2000      	movs	r0, #0
 8005910:	19d5      	adds	r5, r2, r7
 8005912:	686d      	ldr	r5, [r5, #4]
 8005914:	f015 0f01 	tst.w	r5, #1
 8005918:	d106      	bne.n	8005928 <_free_r+0x50>
 800591a:	19db      	adds	r3, r3, r7
 800591c:	6895      	ldr	r5, [r2, #8]
 800591e:	2800      	cmp	r0, #0
 8005920:	d062      	beq.n	80059e8 <_free_r+0x110>
 8005922:	68d2      	ldr	r2, [r2, #12]
 8005924:	60ea      	str	r2, [r5, #12]
 8005926:	6095      	str	r5, [r2, #8]
 8005928:	f043 0201 	orr.w	r2, r3, #1
 800592c:	604a      	str	r2, [r1, #4]
 800592e:	50cb      	str	r3, [r1, r3]
 8005930:	bb90      	cbnz	r0, 8005998 <_free_r+0xc0>
 8005932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005936:	d347      	bcc.n	80059c8 <_free_r+0xf0>
 8005938:	099d      	lsrs	r5, r3, #6
 800593a:	3538      	adds	r5, #56	; 0x38
 800593c:	0a5a      	lsrs	r2, r3, #9
 800593e:	00e8      	lsls	r0, r5, #3
 8005940:	2a04      	cmp	r2, #4
 8005942:	d916      	bls.n	8005972 <_free_r+0x9a>
 8005944:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8005948:	00e8      	lsls	r0, r5, #3
 800594a:	2a14      	cmp	r2, #20
 800594c:	d911      	bls.n	8005972 <_free_r+0x9a>
 800594e:	0b1d      	lsrs	r5, r3, #12
 8005950:	356e      	adds	r5, #110	; 0x6e
 8005952:	00e8      	lsls	r0, r5, #3
 8005954:	2a54      	cmp	r2, #84	; 0x54
 8005956:	d90c      	bls.n	8005972 <_free_r+0x9a>
 8005958:	0bdd      	lsrs	r5, r3, #15
 800595a:	3577      	adds	r5, #119	; 0x77
 800595c:	00e8      	lsls	r0, r5, #3
 800595e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005962:	d906      	bls.n	8005972 <_free_r+0x9a>
 8005964:	f240 5054 	movw	r0, #1364	; 0x554
 8005968:	4282      	cmp	r2, r0
 800596a:	d86d      	bhi.n	8005a48 <_free_r+0x170>
 800596c:	0c9d      	lsrs	r5, r3, #18
 800596e:	357c      	adds	r5, #124	; 0x7c
 8005970:	00e8      	lsls	r0, r5, #3
 8005972:	1986      	adds	r6, r0, r6
 8005974:	4836      	ldr	r0, [pc, #216]	; (8005a50 <_free_r+0x178>)
 8005976:	68b2      	ldr	r2, [r6, #8]
 8005978:	42b2      	cmp	r2, r6
 800597a:	d103      	bne.n	8005984 <_free_r+0xac>
 800597c:	e05b      	b.n	8005a36 <_free_r+0x15e>
 800597e:	6892      	ldr	r2, [r2, #8]
 8005980:	4296      	cmp	r6, r2
 8005982:	d004      	beq.n	800598e <_free_r+0xb6>
 8005984:	6850      	ldr	r0, [r2, #4]
 8005986:	f020 0003 	bic.w	r0, r0, #3
 800598a:	4283      	cmp	r3, r0
 800598c:	d3f7      	bcc.n	800597e <_free_r+0xa6>
 800598e:	68d3      	ldr	r3, [r2, #12]
 8005990:	60cb      	str	r3, [r1, #12]
 8005992:	608a      	str	r2, [r1, #8]
 8005994:	60d1      	str	r1, [r2, #12]
 8005996:	6099      	str	r1, [r3, #8]
 8005998:	4620      	mov	r0, r4
 800599a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800599e:	f000 bbdf 	b.w	8006160 <__malloc_unlock>
 80059a2:	f855 cc08 	ldr.w	ip, [r5, #-8]
 80059a6:	ebcc 0101 	rsb	r1, ip, r1
 80059aa:	f106 0808 	add.w	r8, r6, #8
 80059ae:	688d      	ldr	r5, [r1, #8]
 80059b0:	4545      	cmp	r5, r8
 80059b2:	4463      	add	r3, ip
 80059b4:	d03d      	beq.n	8005a32 <_free_r+0x15a>
 80059b6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80059ba:	f8c5 c00c 	str.w	ip, [r5, #12]
 80059be:	f8cc 5008 	str.w	r5, [ip, #8]
 80059c2:	e7a5      	b.n	8005910 <_free_r+0x38>
 80059c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059c8:	08db      	lsrs	r3, r3, #3
 80059ca:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80059ce:	6875      	ldr	r5, [r6, #4]
 80059d0:	6890      	ldr	r0, [r2, #8]
 80059d2:	60ca      	str	r2, [r1, #12]
 80059d4:	109b      	asrs	r3, r3, #2
 80059d6:	2701      	movs	r7, #1
 80059d8:	fa17 f303 	lsls.w	r3, r7, r3
 80059dc:	432b      	orrs	r3, r5
 80059de:	6088      	str	r0, [r1, #8]
 80059e0:	6073      	str	r3, [r6, #4]
 80059e2:	6091      	str	r1, [r2, #8]
 80059e4:	60c1      	str	r1, [r0, #12]
 80059e6:	e7d7      	b.n	8005998 <_free_r+0xc0>
 80059e8:	4f1a      	ldr	r7, [pc, #104]	; (8005a54 <_free_r+0x17c>)
 80059ea:	42bd      	cmp	r5, r7
 80059ec:	d199      	bne.n	8005922 <_free_r+0x4a>
 80059ee:	f043 0201 	orr.w	r2, r3, #1
 80059f2:	6171      	str	r1, [r6, #20]
 80059f4:	6131      	str	r1, [r6, #16]
 80059f6:	60cd      	str	r5, [r1, #12]
 80059f8:	608d      	str	r5, [r1, #8]
 80059fa:	604a      	str	r2, [r1, #4]
 80059fc:	50cb      	str	r3, [r1, r3]
 80059fe:	e7cb      	b.n	8005998 <_free_r+0xc0>
 8005a00:	07c2      	lsls	r2, r0, #31
 8005a02:	443b      	add	r3, r7
 8005a04:	d407      	bmi.n	8005a16 <_free_r+0x13e>
 8005a06:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8005a0a:	1a89      	subs	r1, r1, r2
 8005a0c:	189b      	adds	r3, r3, r2
 8005a0e:	6888      	ldr	r0, [r1, #8]
 8005a10:	68ca      	ldr	r2, [r1, #12]
 8005a12:	60c2      	str	r2, [r0, #12]
 8005a14:	6090      	str	r0, [r2, #8]
 8005a16:	4a10      	ldr	r2, [pc, #64]	; (8005a58 <_free_r+0x180>)
 8005a18:	60b1      	str	r1, [r6, #8]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	f043 0001 	orr.w	r0, r3, #1
 8005a20:	4293      	cmp	r3, r2
 8005a22:	6048      	str	r0, [r1, #4]
 8005a24:	d3b8      	bcc.n	8005998 <_free_r+0xc0>
 8005a26:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <_free_r+0x184>)
 8005a28:	4620      	mov	r0, r4
 8005a2a:	6819      	ldr	r1, [r3, #0]
 8005a2c:	f7ff ff08 	bl	8005840 <_malloc_trim_r>
 8005a30:	e7b2      	b.n	8005998 <_free_r+0xc0>
 8005a32:	2001      	movs	r0, #1
 8005a34:	e76c      	b.n	8005910 <_free_r+0x38>
 8005a36:	6843      	ldr	r3, [r0, #4]
 8005a38:	10ad      	asrs	r5, r5, #2
 8005a3a:	2601      	movs	r6, #1
 8005a3c:	fa16 f505 	lsls.w	r5, r6, r5
 8005a40:	432b      	orrs	r3, r5
 8005a42:	6043      	str	r3, [r0, #4]
 8005a44:	4613      	mov	r3, r2
 8005a46:	e7a3      	b.n	8005990 <_free_r+0xb8>
 8005a48:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8005a4c:	257e      	movs	r5, #126	; 0x7e
 8005a4e:	e790      	b.n	8005972 <_free_r+0x9a>
 8005a50:	20000584 	.word	0x20000584
 8005a54:	2000058c 	.word	0x2000058c
 8005a58:	20000990 	.word	0x20000990
 8005a5c:	200009a8 	.word	0x200009a8

08005a60 <_setlocale_r>:
 8005a60:	b510      	push	{r4, lr}
 8005a62:	4614      	mov	r4, r2
 8005a64:	b122      	cbz	r2, 8005a70 <_setlocale_r+0x10>
 8005a66:	4610      	mov	r0, r2
 8005a68:	490b      	ldr	r1, [pc, #44]	; (8005a98 <_setlocale_r+0x38>)
 8005a6a:	f001 f819 	bl	8006aa0 <strcmp>
 8005a6e:	b908      	cbnz	r0, 8005a74 <_setlocale_r+0x14>
 8005a70:	480a      	ldr	r0, [pc, #40]	; (8005a9c <_setlocale_r+0x3c>)
 8005a72:	bd10      	pop	{r4, pc}
 8005a74:	4620      	mov	r0, r4
 8005a76:	4909      	ldr	r1, [pc, #36]	; (8005a9c <_setlocale_r+0x3c>)
 8005a78:	f001 f812 	bl	8006aa0 <strcmp>
 8005a7c:	b908      	cbnz	r0, 8005a82 <_setlocale_r+0x22>
 8005a7e:	4807      	ldr	r0, [pc, #28]	; (8005a9c <_setlocale_r+0x3c>)
 8005a80:	bd10      	pop	{r4, pc}
 8005a82:	4620      	mov	r0, r4
 8005a84:	4906      	ldr	r1, [pc, #24]	; (8005aa0 <_setlocale_r+0x40>)
 8005a86:	f001 f80b 	bl	8006aa0 <strcmp>
 8005a8a:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <_setlocale_r+0x3c>)
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	bf0c      	ite	eq
 8005a90:	4618      	moveq	r0, r3
 8005a92:	2000      	movne	r0, #0
 8005a94:	bd10      	pop	{r4, pc}
 8005a96:	bf00      	nop
 8005a98:	080087f8 	.word	0x080087f8
 8005a9c:	080087f4 	.word	0x080087f4
 8005aa0:	080087c0 	.word	0x080087c0

08005aa4 <__locale_charset>:
 8005aa4:	f240 5008 	movw	r0, #1288	; 0x508
 8005aa8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop

08005ab0 <__locale_mb_cur_max>:
 8005ab0:	f240 5308 	movw	r3, #1288	; 0x508
 8005ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ab8:	6a18      	ldr	r0, [r3, #32]
 8005aba:	4770      	bx	lr

08005abc <__locale_msgcharset>:
 8005abc:	4800      	ldr	r0, [pc, #0]	; (8005ac0 <__locale_msgcharset+0x4>)
 8005abe:	4770      	bx	lr
 8005ac0:	2000052c 	.word	0x2000052c

08005ac4 <__locale_cjk_lang>:
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	4770      	bx	lr

08005ac8 <_localeconv_r>:
 8005ac8:	4800      	ldr	r0, [pc, #0]	; (8005acc <_localeconv_r+0x4>)
 8005aca:	4770      	bx	lr
 8005acc:	2000054c 	.word	0x2000054c

08005ad0 <setlocale>:
 8005ad0:	b410      	push	{r4}
 8005ad2:	f240 03d8 	movw	r3, #216	; 0xd8
 8005ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ada:	4604      	mov	r4, r0
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	460a      	mov	r2, r1
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	bc10      	pop	{r4}
 8005ae4:	e7bc      	b.n	8005a60 <_setlocale_r>
 8005ae6:	bf00      	nop

08005ae8 <localeconv>:
 8005ae8:	4800      	ldr	r0, [pc, #0]	; (8005aec <localeconv+0x4>)
 8005aea:	4770      	bx	lr
 8005aec:	2000054c 	.word	0x2000054c

08005af0 <_malloc_r>:
 8005af0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af4:	f101 040b 	add.w	r4, r1, #11
 8005af8:	2c16      	cmp	r4, #22
 8005afa:	4605      	mov	r5, r0
 8005afc:	d92a      	bls.n	8005b54 <_malloc_r+0x64>
 8005afe:	f024 0407 	bic.w	r4, r4, #7
 8005b02:	0fe3      	lsrs	r3, r4, #31
 8005b04:	428c      	cmp	r4, r1
 8005b06:	bf2c      	ite	cs
 8005b08:	4619      	movcs	r1, r3
 8005b0a:	f043 0101 	orrcc.w	r1, r3, #1
 8005b0e:	bb51      	cbnz	r1, 8005b66 <_malloc_r+0x76>
 8005b10:	4628      	mov	r0, r5
 8005b12:	f000 fb23 	bl	800615c <__malloc_lock>
 8005b16:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005b1a:	d22a      	bcs.n	8005b72 <_malloc_r+0x82>
 8005b1c:	4e7d      	ldr	r6, [pc, #500]	; (8005d14 <_malloc_r+0x224>)
 8005b1e:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8005b22:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 8005b26:	68df      	ldr	r7, [r3, #12]
 8005b28:	429f      	cmp	r7, r3
 8005b2a:	f000 8235 	beq.w	8005f98 <_malloc_r+0x4a8>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	68b9      	ldr	r1, [r7, #8]
 8005b34:	f023 0303 	bic.w	r3, r3, #3
 8005b38:	18fb      	adds	r3, r7, r3
 8005b3a:	60ca      	str	r2, [r1, #12]
 8005b3c:	6858      	ldr	r0, [r3, #4]
 8005b3e:	6091      	str	r1, [r2, #8]
 8005b40:	f040 0201 	orr.w	r2, r0, #1
 8005b44:	605a      	str	r2, [r3, #4]
 8005b46:	4628      	mov	r0, r5
 8005b48:	f000 fb0a 	bl	8006160 <__malloc_unlock>
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	4638      	mov	r0, r7
 8005b50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b54:	2300      	movs	r3, #0
 8005b56:	2410      	movs	r4, #16
 8005b58:	428c      	cmp	r4, r1
 8005b5a:	bf2c      	ite	cs
 8005b5c:	4619      	movcs	r1, r3
 8005b5e:	f043 0101 	orrcc.w	r1, r3, #1
 8005b62:	2900      	cmp	r1, #0
 8005b64:	d0d4      	beq.n	8005b10 <_malloc_r+0x20>
 8005b66:	230c      	movs	r3, #12
 8005b68:	2700      	movs	r7, #0
 8005b6a:	602b      	str	r3, [r5, #0]
 8005b6c:	4638      	mov	r0, r7
 8005b6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b72:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 8005b76:	bf04      	itt	eq
 8005b78:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 8005b7c:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 8005b80:	f040 8081 	bne.w	8005c86 <_malloc_r+0x196>
 8005b84:	4e63      	ldr	r6, [pc, #396]	; (8005d14 <_malloc_r+0x224>)
 8005b86:	1871      	adds	r1, r6, r1
 8005b88:	68cf      	ldr	r7, [r1, #12]
 8005b8a:	42b9      	cmp	r1, r7
 8005b8c:	d106      	bne.n	8005b9c <_malloc_r+0xac>
 8005b8e:	e00d      	b.n	8005bac <_malloc_r+0xbc>
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f280 8169 	bge.w	8005e68 <_malloc_r+0x378>
 8005b96:	68ff      	ldr	r7, [r7, #12]
 8005b98:	42b9      	cmp	r1, r7
 8005b9a:	d007      	beq.n	8005bac <_malloc_r+0xbc>
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	f022 0203 	bic.w	r2, r2, #3
 8005ba2:	1b13      	subs	r3, r2, r4
 8005ba4:	2b0f      	cmp	r3, #15
 8005ba6:	ddf3      	ble.n	8005b90 <_malloc_r+0xa0>
 8005ba8:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005bac:	f10e 0e01 	add.w	lr, lr, #1
 8005bb0:	4a58      	ldr	r2, [pc, #352]	; (8005d14 <_malloc_r+0x224>)
 8005bb2:	6937      	ldr	r7, [r6, #16]
 8005bb4:	f102 0c08 	add.w	ip, r2, #8
 8005bb8:	4567      	cmp	r7, ip
 8005bba:	bf08      	it	eq
 8005bbc:	6853      	ldreq	r3, [r2, #4]
 8005bbe:	d023      	beq.n	8005c08 <_malloc_r+0x118>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f023 0303 	bic.w	r3, r3, #3
 8005bc6:	1b19      	subs	r1, r3, r4
 8005bc8:	290f      	cmp	r1, #15
 8005bca:	f300 81b4 	bgt.w	8005f36 <_malloc_r+0x446>
 8005bce:	2900      	cmp	r1, #0
 8005bd0:	f8c2 c014 	str.w	ip, [r2, #20]
 8005bd4:	f8c2 c010 	str.w	ip, [r2, #16]
 8005bd8:	f280 808f 	bge.w	8005cfa <_malloc_r+0x20a>
 8005bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be0:	f080 8161 	bcs.w	8005ea6 <_malloc_r+0x3b6>
 8005be4:	08db      	lsrs	r3, r3, #3
 8005be6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8005bea:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8005bee:	6888      	ldr	r0, [r1, #8]
 8005bf0:	60f9      	str	r1, [r7, #12]
 8005bf2:	109b      	asrs	r3, r3, #2
 8005bf4:	f04f 0901 	mov.w	r9, #1
 8005bf8:	fa09 f303 	lsl.w	r3, r9, r3
 8005bfc:	ea43 0308 	orr.w	r3, r3, r8
 8005c00:	60b8      	str	r0, [r7, #8]
 8005c02:	6053      	str	r3, [r2, #4]
 8005c04:	608f      	str	r7, [r1, #8]
 8005c06:	60c7      	str	r7, [r0, #12]
 8005c08:	2001      	movs	r0, #1
 8005c0a:	ea4f 02ae 	mov.w	r2, lr, asr #2
 8005c0e:	4090      	lsls	r0, r2
 8005c10:	4298      	cmp	r0, r3
 8005c12:	f200 8081 	bhi.w	8005d18 <_malloc_r+0x228>
 8005c16:	4203      	tst	r3, r0
 8005c18:	d106      	bne.n	8005c28 <_malloc_r+0x138>
 8005c1a:	f02e 0e03 	bic.w	lr, lr, #3
 8005c1e:	0040      	lsls	r0, r0, #1
 8005c20:	4203      	tst	r3, r0
 8005c22:	f10e 0e04 	add.w	lr, lr, #4
 8005c26:	d0fa      	beq.n	8005c1e <_malloc_r+0x12e>
 8005c28:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 8005c2c:	464f      	mov	r7, r9
 8005c2e:	46f0      	mov	r8, lr
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	429f      	cmp	r7, r3
 8005c34:	d107      	bne.n	8005c46 <_malloc_r+0x156>
 8005c36:	e191      	b.n	8005f5c <_malloc_r+0x46c>
 8005c38:	2a00      	cmp	r2, #0
 8005c3a:	f280 81b7 	bge.w	8005fac <_malloc_r+0x4bc>
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	429f      	cmp	r7, r3
 8005c42:	f000 818b 	beq.w	8005f5c <_malloc_r+0x46c>
 8005c46:	6859      	ldr	r1, [r3, #4]
 8005c48:	f021 0103 	bic.w	r1, r1, #3
 8005c4c:	1b0a      	subs	r2, r1, r4
 8005c4e:	2a0f      	cmp	r2, #15
 8005c50:	ddf2      	ble.n	8005c38 <_malloc_r+0x148>
 8005c52:	461f      	mov	r7, r3
 8005c54:	1919      	adds	r1, r3, r4
 8005c56:	68d8      	ldr	r0, [r3, #12]
 8005c58:	f857 ef08 	ldr.w	lr, [r7, #8]!
 8005c5c:	508a      	str	r2, [r1, r2]
 8005c5e:	f044 0401 	orr.w	r4, r4, #1
 8005c62:	f042 0201 	orr.w	r2, r2, #1
 8005c66:	f8ce 000c 	str.w	r0, [lr, #12]
 8005c6a:	f8c0 e008 	str.w	lr, [r0, #8]
 8005c6e:	605c      	str	r4, [r3, #4]
 8005c70:	6171      	str	r1, [r6, #20]
 8005c72:	6131      	str	r1, [r6, #16]
 8005c74:	f8c1 c00c 	str.w	ip, [r1, #12]
 8005c78:	f8c1 c008 	str.w	ip, [r1, #8]
 8005c7c:	604a      	str	r2, [r1, #4]
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f000 fa6e 	bl	8006160 <__malloc_unlock>
 8005c84:	e763      	b.n	8005b4e <_malloc_r+0x5e>
 8005c86:	f1be 0f04 	cmp.w	lr, #4
 8005c8a:	bf9e      	ittt	ls
 8005c8c:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 8005c90:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 8005c94:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005c98:	f67f af74 	bls.w	8005b84 <_malloc_r+0x94>
 8005c9c:	f1be 0f14 	cmp.w	lr, #20
 8005ca0:	bf9c      	itt	ls
 8005ca2:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 8005ca6:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005caa:	f67f af6b 	bls.w	8005b84 <_malloc_r+0x94>
 8005cae:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 8005cb2:	bf9e      	ittt	ls
 8005cb4:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8005cb8:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 8005cbc:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005cc0:	f67f af60 	bls.w	8005b84 <_malloc_r+0x94>
 8005cc4:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8005cc8:	bf9e      	ittt	ls
 8005cca:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 8005cce:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 8005cd2:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005cd6:	f67f af55 	bls.w	8005b84 <_malloc_r+0x94>
 8005cda:	f240 5354 	movw	r3, #1364	; 0x554
 8005cde:	459e      	cmp	lr, r3
 8005ce0:	bf9d      	ittte	ls
 8005ce2:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 8005ce6:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 8005cea:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005cee:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 8005cf2:	bf88      	it	hi
 8005cf4:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8005cf8:	e744      	b.n	8005b84 <_malloc_r+0x94>
 8005cfa:	18fb      	adds	r3, r7, r3
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	f042 0201 	orr.w	r2, r2, #1
 8005d04:	605a      	str	r2, [r3, #4]
 8005d06:	3708      	adds	r7, #8
 8005d08:	f000 fa2a 	bl	8006160 <__malloc_unlock>
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d12:	bf00      	nop
 8005d14:	20000584 	.word	0x20000584
 8005d18:	68b7      	ldr	r7, [r6, #8]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f023 0803 	bic.w	r8, r3, #3
 8005d20:	4544      	cmp	r4, r8
 8005d22:	ebc4 0208 	rsb	r2, r4, r8
 8005d26:	bf94      	ite	ls
 8005d28:	2300      	movls	r3, #0
 8005d2a:	2301      	movhi	r3, #1
 8005d2c:	2a0f      	cmp	r2, #15
 8005d2e:	bfd8      	it	le
 8005d30:	f043 0301 	orrle.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 80a7 	beq.w	8005e88 <_malloc_r+0x398>
 8005d3a:	4bb3      	ldr	r3, [pc, #716]	; (8006008 <_malloc_r+0x518>)
 8005d3c:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 800600c <_malloc_r+0x51c>
 8005d40:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005d44:	f8da 3000 	ldr.w	r3, [sl]
 8005d48:	3201      	adds	r2, #1
 8005d4a:	4423      	add	r3, r4
 8005d4c:	bf08      	it	eq
 8005d4e:	f103 0b10 	addeq.w	fp, r3, #16
 8005d52:	d006      	beq.n	8005d62 <_malloc_r+0x272>
 8005d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d58:	330f      	adds	r3, #15
 8005d5a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005d5e:	f023 0b0f 	bic.w	fp, r3, #15
 8005d62:	4628      	mov	r0, r5
 8005d64:	4659      	mov	r1, fp
 8005d66:	f000 fe89 	bl	8006a7c <_sbrk_r>
 8005d6a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005d6e:	4681      	mov	r9, r0
 8005d70:	f000 8144 	beq.w	8005ffc <_malloc_r+0x50c>
 8005d74:	eb07 0208 	add.w	r2, r7, r8
 8005d78:	4282      	cmp	r2, r0
 8005d7a:	f200 8126 	bhi.w	8005fca <_malloc_r+0x4da>
 8005d7e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005d82:	454a      	cmp	r2, r9
 8005d84:	445b      	add	r3, fp
 8005d86:	f8ca 3004 	str.w	r3, [sl, #4]
 8005d8a:	f000 8141 	beq.w	8006010 <_malloc_r+0x520>
 8005d8e:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 8005d92:	3101      	adds	r1, #1
 8005d94:	bf15      	itete	ne
 8005d96:	ebc2 0209 	rsbne	r2, r2, r9
 8005d9a:	4b9b      	ldreq	r3, [pc, #620]	; (8006008 <_malloc_r+0x518>)
 8005d9c:	189b      	addne	r3, r3, r2
 8005d9e:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 8005da2:	bf18      	it	ne
 8005da4:	f8ca 3004 	strne.w	r3, [sl, #4]
 8005da8:	f019 0307 	ands.w	r3, r9, #7
 8005dac:	bf1f      	itttt	ne
 8005dae:	f1c3 0208 	rsbne	r2, r3, #8
 8005db2:	4491      	addne	r9, r2
 8005db4:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8005db8:	f103 0208 	addne.w	r2, r3, #8
 8005dbc:	eb09 030b 	add.w	r3, r9, fp
 8005dc0:	bf08      	it	eq
 8005dc2:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8005dc6:	051b      	lsls	r3, r3, #20
 8005dc8:	0d1b      	lsrs	r3, r3, #20
 8005dca:	ebc3 0b02 	rsb	fp, r3, r2
 8005dce:	4628      	mov	r0, r5
 8005dd0:	4659      	mov	r1, fp
 8005dd2:	f000 fe53 	bl	8006a7c <_sbrk_r>
 8005dd6:	1c43      	adds	r3, r0, #1
 8005dd8:	f000 8126 	beq.w	8006028 <_malloc_r+0x538>
 8005ddc:	ebc9 0200 	rsb	r2, r9, r0
 8005de0:	445a      	add	r2, fp
 8005de2:	f042 0201 	orr.w	r2, r2, #1
 8005de6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005dea:	f8c6 9008 	str.w	r9, [r6, #8]
 8005dee:	445b      	add	r3, fp
 8005df0:	42b7      	cmp	r7, r6
 8005df2:	f8ca 3004 	str.w	r3, [sl, #4]
 8005df6:	f8c9 2004 	str.w	r2, [r9, #4]
 8005dfa:	d015      	beq.n	8005e28 <_malloc_r+0x338>
 8005dfc:	f1b8 0f0f 	cmp.w	r8, #15
 8005e00:	f240 80f6 	bls.w	8005ff0 <_malloc_r+0x500>
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f1a8 020c 	sub.w	r2, r8, #12
 8005e0a:	f022 0207 	bic.w	r2, r2, #7
 8005e0e:	18b9      	adds	r1, r7, r2
 8005e10:	f000 0e01 	and.w	lr, r0, #1
 8005e14:	ea42 0e0e 	orr.w	lr, r2, lr
 8005e18:	2005      	movs	r0, #5
 8005e1a:	2a0f      	cmp	r2, #15
 8005e1c:	f8c7 e004 	str.w	lr, [r7, #4]
 8005e20:	6048      	str	r0, [r1, #4]
 8005e22:	6088      	str	r0, [r1, #8]
 8005e24:	f200 8104 	bhi.w	8006030 <_malloc_r+0x540>
 8005e28:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8005e2c:	68b7      	ldr	r7, [r6, #8]
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	bf84      	itt	hi
 8005e32:	4a76      	ldrhi	r2, [pc, #472]	; (800600c <_malloc_r+0x51c>)
 8005e34:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 8005e36:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	bf84      	itt	hi
 8005e3e:	4a73      	ldrhi	r2, [pc, #460]	; (800600c <_malloc_r+0x51c>)
 8005e40:	6313      	strhi	r3, [r2, #48]	; 0x30
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f023 0303 	bic.w	r3, r3, #3
 8005e48:	429c      	cmp	r4, r3
 8005e4a:	ebc4 0203 	rsb	r2, r4, r3
 8005e4e:	bf94      	ite	ls
 8005e50:	2300      	movls	r3, #0
 8005e52:	2301      	movhi	r3, #1
 8005e54:	2a0f      	cmp	r2, #15
 8005e56:	bfd8      	it	le
 8005e58:	f043 0301 	orrle.w	r3, r3, #1
 8005e5c:	b1a3      	cbz	r3, 8005e88 <_malloc_r+0x398>
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f000 f97e 	bl	8006160 <__malloc_unlock>
 8005e64:	2700      	movs	r7, #0
 8005e66:	e672      	b.n	8005b4e <_malloc_r+0x5e>
 8005e68:	18ba      	adds	r2, r7, r2
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6850      	ldr	r0, [r2, #4]
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	f040 0001 	orr.w	r0, r0, #1
 8005e74:	6050      	str	r0, [r2, #4]
 8005e76:	60cb      	str	r3, [r1, #12]
 8005e78:	4628      	mov	r0, r5
 8005e7a:	6099      	str	r1, [r3, #8]
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	f000 f96f 	bl	8006160 <__malloc_unlock>
 8005e82:	4638      	mov	r0, r7
 8005e84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e88:	193b      	adds	r3, r7, r4
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	f044 0401 	orr.w	r4, r4, #1
 8005e92:	607c      	str	r4, [r7, #4]
 8005e94:	4628      	mov	r0, r5
 8005e96:	605a      	str	r2, [r3, #4]
 8005e98:	3708      	adds	r7, #8
 8005e9a:	60b3      	str	r3, [r6, #8]
 8005e9c:	f000 f960 	bl	8006160 <__malloc_unlock>
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea6:	0a5a      	lsrs	r2, r3, #9
 8005ea8:	2a04      	cmp	r2, #4
 8005eaa:	bf9e      	ittt	ls
 8005eac:	ea4f 1893 	movls.w	r8, r3, lsr #6
 8005eb0:	f108 0838 	addls.w	r8, r8, #56	; 0x38
 8005eb4:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8005eb8:	d928      	bls.n	8005f0c <_malloc_r+0x41c>
 8005eba:	2a14      	cmp	r2, #20
 8005ebc:	bf9c      	itt	ls
 8005ebe:	f102 085b 	addls.w	r8, r2, #91	; 0x5b
 8005ec2:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8005ec6:	d921      	bls.n	8005f0c <_malloc_r+0x41c>
 8005ec8:	2a54      	cmp	r2, #84	; 0x54
 8005eca:	bf9e      	ittt	ls
 8005ecc:	ea4f 3813 	movls.w	r8, r3, lsr #12
 8005ed0:	f108 086e 	addls.w	r8, r8, #110	; 0x6e
 8005ed4:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8005ed8:	d918      	bls.n	8005f0c <_malloc_r+0x41c>
 8005eda:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005ede:	bf9e      	ittt	ls
 8005ee0:	ea4f 38d3 	movls.w	r8, r3, lsr #15
 8005ee4:	f108 0877 	addls.w	r8, r8, #119	; 0x77
 8005ee8:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8005eec:	d90e      	bls.n	8005f0c <_malloc_r+0x41c>
 8005eee:	f240 5154 	movw	r1, #1364	; 0x554
 8005ef2:	428a      	cmp	r2, r1
 8005ef4:	bf9d      	ittte	ls
 8005ef6:	ea4f 4893 	movls.w	r8, r3, lsr #18
 8005efa:	f108 087c 	addls.w	r8, r8, #124	; 0x7c
 8005efe:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8005f02:	f44f 707c 	movhi.w	r0, #1008	; 0x3f0
 8005f06:	bf88      	it	hi
 8005f08:	f04f 087e 	movhi.w	r8, #126	; 0x7e
 8005f0c:	1830      	adds	r0, r6, r0
 8005f0e:	493e      	ldr	r1, [pc, #248]	; (8006008 <_malloc_r+0x518>)
 8005f10:	6882      	ldr	r2, [r0, #8]
 8005f12:	4282      	cmp	r2, r0
 8005f14:	d103      	bne.n	8005f1e <_malloc_r+0x42e>
 8005f16:	e061      	b.n	8005fdc <_malloc_r+0x4ec>
 8005f18:	6892      	ldr	r2, [r2, #8]
 8005f1a:	4290      	cmp	r0, r2
 8005f1c:	d004      	beq.n	8005f28 <_malloc_r+0x438>
 8005f1e:	6851      	ldr	r1, [r2, #4]
 8005f20:	f021 0103 	bic.w	r1, r1, #3
 8005f24:	428b      	cmp	r3, r1
 8005f26:	d3f7      	bcc.n	8005f18 <_malloc_r+0x428>
 8005f28:	68d1      	ldr	r1, [r2, #12]
 8005f2a:	6873      	ldr	r3, [r6, #4]
 8005f2c:	60f9      	str	r1, [r7, #12]
 8005f2e:	60ba      	str	r2, [r7, #8]
 8005f30:	60d7      	str	r7, [r2, #12]
 8005f32:	608f      	str	r7, [r1, #8]
 8005f34:	e668      	b.n	8005c08 <_malloc_r+0x118>
 8005f36:	193b      	adds	r3, r7, r4
 8005f38:	f041 0001 	orr.w	r0, r1, #1
 8005f3c:	f044 0401 	orr.w	r4, r4, #1
 8005f40:	607c      	str	r4, [r7, #4]
 8005f42:	6153      	str	r3, [r2, #20]
 8005f44:	6113      	str	r3, [r2, #16]
 8005f46:	6058      	str	r0, [r3, #4]
 8005f48:	f8c3 c00c 	str.w	ip, [r3, #12]
 8005f4c:	f8c3 c008 	str.w	ip, [r3, #8]
 8005f50:	5059      	str	r1, [r3, r1]
 8005f52:	4628      	mov	r0, r5
 8005f54:	f000 f904 	bl	8006160 <__malloc_unlock>
 8005f58:	3708      	adds	r7, #8
 8005f5a:	e5f8      	b.n	8005b4e <_malloc_r+0x5e>
 8005f5c:	f108 0801 	add.w	r8, r8, #1
 8005f60:	3708      	adds	r7, #8
 8005f62:	f018 0f03 	tst.w	r8, #3
 8005f66:	f47f ae63 	bne.w	8005c30 <_malloc_r+0x140>
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	f01e 0f03 	tst.w	lr, #3
 8005f70:	f1a3 0208 	sub.w	r2, r3, #8
 8005f74:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005f78:	d062      	beq.n	8006040 <_malloc_r+0x550>
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d0f5      	beq.n	8005f6c <_malloc_r+0x47c>
 8005f80:	6873      	ldr	r3, [r6, #4]
 8005f82:	0040      	lsls	r0, r0, #1
 8005f84:	4298      	cmp	r0, r3
 8005f86:	f63f aec7 	bhi.w	8005d18 <_malloc_r+0x228>
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	f43f aec4 	beq.w	8005d18 <_malloc_r+0x228>
 8005f90:	4218      	tst	r0, r3
 8005f92:	d05a      	beq.n	800604a <_malloc_r+0x55a>
 8005f94:	46c6      	mov	lr, r8
 8005f96:	e647      	b.n	8005c28 <_malloc_r+0x138>
 8005f98:	f107 0308 	add.w	r3, r7, #8
 8005f9c:	697f      	ldr	r7, [r7, #20]
 8005f9e:	42bb      	cmp	r3, r7
 8005fa0:	bf08      	it	eq
 8005fa2:	f10e 0e02 	addeq.w	lr, lr, #2
 8005fa6:	f43f ae03 	beq.w	8005bb0 <_malloc_r+0xc0>
 8005faa:	e5c0      	b.n	8005b2e <_malloc_r+0x3e>
 8005fac:	1859      	adds	r1, r3, r1
 8005fae:	461f      	mov	r7, r3
 8005fb0:	6848      	ldr	r0, [r1, #4]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f857 2f08 	ldr.w	r2, [r7, #8]!
 8005fb8:	f040 0001 	orr.w	r0, r0, #1
 8005fbc:	6048      	str	r0, [r1, #4]
 8005fbe:	60d3      	str	r3, [r2, #12]
 8005fc0:	609a      	str	r2, [r3, #8]
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f000 f8cc 	bl	8006160 <__malloc_unlock>
 8005fc8:	e5c1      	b.n	8005b4e <_malloc_r+0x5e>
 8005fca:	42b7      	cmp	r7, r6
 8005fcc:	f43f aed7 	beq.w	8005d7e <_malloc_r+0x28e>
 8005fd0:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <_malloc_r+0x518>)
 8005fd2:	689f      	ldr	r7, [r3, #8]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f023 0303 	bic.w	r3, r3, #3
 8005fda:	e735      	b.n	8005e48 <_malloc_r+0x358>
 8005fdc:	684b      	ldr	r3, [r1, #4]
 8005fde:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	fa00 f008 	lsl.w	r0, r0, r8
 8005fe8:	4303      	orrs	r3, r0
 8005fea:	604b      	str	r3, [r1, #4]
 8005fec:	4611      	mov	r1, r2
 8005fee:	e79d      	b.n	8005f2c <_malloc_r+0x43c>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f8c9 3004 	str.w	r3, [r9, #4]
 8005ff6:	464f      	mov	r7, r9
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	e725      	b.n	8005e48 <_malloc_r+0x358>
 8005ffc:	68b7      	ldr	r7, [r6, #8]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f023 0303 	bic.w	r3, r3, #3
 8006004:	e720      	b.n	8005e48 <_malloc_r+0x358>
 8006006:	bf00      	nop
 8006008:	20000584 	.word	0x20000584
 800600c:	200009a8 	.word	0x200009a8
 8006010:	0511      	lsls	r1, r2, #20
 8006012:	0d09      	lsrs	r1, r1, #20
 8006014:	2900      	cmp	r1, #0
 8006016:	f47f aeba 	bne.w	8005d8e <_malloc_r+0x29e>
 800601a:	68b2      	ldr	r2, [r6, #8]
 800601c:	eb0b 0108 	add.w	r1, fp, r8
 8006020:	f041 0101 	orr.w	r1, r1, #1
 8006024:	6051      	str	r1, [r2, #4]
 8006026:	e6ff      	b.n	8005e28 <_malloc_r+0x338>
 8006028:	2201      	movs	r2, #1
 800602a:	f04f 0b00 	mov.w	fp, #0
 800602e:	e6da      	b.n	8005de6 <_malloc_r+0x2f6>
 8006030:	4628      	mov	r0, r5
 8006032:	f107 0108 	add.w	r1, r7, #8
 8006036:	f7ff fc4f 	bl	80058d8 <_free_r>
 800603a:	4b06      	ldr	r3, [pc, #24]	; (8006054 <_malloc_r+0x564>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	e6f3      	b.n	8005e28 <_malloc_r+0x338>
 8006040:	6873      	ldr	r3, [r6, #4]
 8006042:	ea23 0300 	bic.w	r3, r3, r0
 8006046:	6073      	str	r3, [r6, #4]
 8006048:	e79b      	b.n	8005f82 <_malloc_r+0x492>
 800604a:	0040      	lsls	r0, r0, #1
 800604c:	f108 0804 	add.w	r8, r8, #4
 8006050:	e79e      	b.n	8005f90 <_malloc_r+0x4a0>
 8006052:	bf00      	nop
 8006054:	200009a8 	.word	0x200009a8

08006058 <memchr>:
 8006058:	0783      	lsls	r3, r0, #30
 800605a:	b470      	push	{r4, r5, r6}
 800605c:	b2c9      	uxtb	r1, r1
 800605e:	d00f      	beq.n	8006080 <memchr+0x28>
 8006060:	2a00      	cmp	r2, #0
 8006062:	d033      	beq.n	80060cc <memchr+0x74>
 8006064:	7803      	ldrb	r3, [r0, #0]
 8006066:	3a01      	subs	r2, #1
 8006068:	428b      	cmp	r3, r1
 800606a:	d106      	bne.n	800607a <memchr+0x22>
 800606c:	e01d      	b.n	80060aa <memchr+0x52>
 800606e:	2a00      	cmp	r2, #0
 8006070:	d02c      	beq.n	80060cc <memchr+0x74>
 8006072:	7803      	ldrb	r3, [r0, #0]
 8006074:	3a01      	subs	r2, #1
 8006076:	428b      	cmp	r3, r1
 8006078:	d017      	beq.n	80060aa <memchr+0x52>
 800607a:	3001      	adds	r0, #1
 800607c:	0783      	lsls	r3, r0, #30
 800607e:	d1f6      	bne.n	800606e <memchr+0x16>
 8006080:	2a03      	cmp	r2, #3
 8006082:	bf84      	itt	hi
 8006084:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 8006088:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 800608c:	d80f      	bhi.n	80060ae <memchr+0x56>
 800608e:	b1ea      	cbz	r2, 80060cc <memchr+0x74>
 8006090:	7803      	ldrb	r3, [r0, #0]
 8006092:	3a01      	subs	r2, #1
 8006094:	428b      	cmp	r3, r1
 8006096:	4402      	add	r2, r0
 8006098:	d104      	bne.n	80060a4 <memchr+0x4c>
 800609a:	e006      	b.n	80060aa <memchr+0x52>
 800609c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80060a0:	428b      	cmp	r3, r1
 80060a2:	d002      	beq.n	80060aa <memchr+0x52>
 80060a4:	4290      	cmp	r0, r2
 80060a6:	d1f9      	bne.n	800609c <memchr+0x44>
 80060a8:	2000      	movs	r0, #0
 80060aa:	bc70      	pop	{r4, r5, r6}
 80060ac:	4770      	bx	lr
 80060ae:	4604      	mov	r4, r0
 80060b0:	3004      	adds	r0, #4
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	4073      	eors	r3, r6
 80060b6:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 80060ba:	ea25 0303 	bic.w	r3, r5, r3
 80060be:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80060c2:	d105      	bne.n	80060d0 <memchr+0x78>
 80060c4:	3a04      	subs	r2, #4
 80060c6:	2a03      	cmp	r2, #3
 80060c8:	d8f1      	bhi.n	80060ae <memchr+0x56>
 80060ca:	e7e0      	b.n	800608e <memchr+0x36>
 80060cc:	4610      	mov	r0, r2
 80060ce:	e7ec      	b.n	80060aa <memchr+0x52>
 80060d0:	4620      	mov	r0, r4
 80060d2:	e7dc      	b.n	800608e <memchr+0x36>

080060d4 <memcpy>:
 80060d4:	2a0f      	cmp	r2, #15
 80060d6:	b4f0      	push	{r4, r5, r6, r7}
 80060d8:	bf98      	it	ls
 80060da:	4603      	movls	r3, r0
 80060dc:	d931      	bls.n	8006142 <memcpy+0x6e>
 80060de:	ea41 0300 	orr.w	r3, r1, r0
 80060e2:	079b      	lsls	r3, r3, #30
 80060e4:	d137      	bne.n	8006156 <memcpy+0x82>
 80060e6:	460c      	mov	r4, r1
 80060e8:	4603      	mov	r3, r0
 80060ea:	4615      	mov	r5, r2
 80060ec:	6826      	ldr	r6, [r4, #0]
 80060ee:	601e      	str	r6, [r3, #0]
 80060f0:	6866      	ldr	r6, [r4, #4]
 80060f2:	605e      	str	r6, [r3, #4]
 80060f4:	68a6      	ldr	r6, [r4, #8]
 80060f6:	609e      	str	r6, [r3, #8]
 80060f8:	68e6      	ldr	r6, [r4, #12]
 80060fa:	3d10      	subs	r5, #16
 80060fc:	60de      	str	r6, [r3, #12]
 80060fe:	3410      	adds	r4, #16
 8006100:	3310      	adds	r3, #16
 8006102:	2d0f      	cmp	r5, #15
 8006104:	d8f2      	bhi.n	80060ec <memcpy+0x18>
 8006106:	f1a2 0410 	sub.w	r4, r2, #16
 800610a:	f024 040f 	bic.w	r4, r4, #15
 800610e:	f002 020f 	and.w	r2, r2, #15
 8006112:	3410      	adds	r4, #16
 8006114:	2a03      	cmp	r2, #3
 8006116:	eb00 0304 	add.w	r3, r0, r4
 800611a:	4421      	add	r1, r4
 800611c:	d911      	bls.n	8006142 <memcpy+0x6e>
 800611e:	1f0e      	subs	r6, r1, #4
 8006120:	461d      	mov	r5, r3
 8006122:	4614      	mov	r4, r2
 8006124:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8006128:	3c04      	subs	r4, #4
 800612a:	2c03      	cmp	r4, #3
 800612c:	f845 7b04 	str.w	r7, [r5], #4
 8006130:	d8f8      	bhi.n	8006124 <memcpy+0x50>
 8006132:	1f14      	subs	r4, r2, #4
 8006134:	f024 0403 	bic.w	r4, r4, #3
 8006138:	3404      	adds	r4, #4
 800613a:	f002 0203 	and.w	r2, r2, #3
 800613e:	1909      	adds	r1, r1, r4
 8006140:	191b      	adds	r3, r3, r4
 8006142:	b132      	cbz	r2, 8006152 <memcpy+0x7e>
 8006144:	3901      	subs	r1, #1
 8006146:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800614a:	3a01      	subs	r2, #1
 800614c:	f803 4b01 	strb.w	r4, [r3], #1
 8006150:	d1f9      	bne.n	8006146 <memcpy+0x72>
 8006152:	bcf0      	pop	{r4, r5, r6, r7}
 8006154:	4770      	bx	lr
 8006156:	4603      	mov	r3, r0
 8006158:	e7f4      	b.n	8006144 <memcpy+0x70>
 800615a:	bf00      	nop

0800615c <__malloc_lock>:
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop

08006160 <__malloc_unlock>:
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop

08006164 <_Balloc>:
 8006164:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006166:	b570      	push	{r4, r5, r6, lr}
 8006168:	4605      	mov	r5, r0
 800616a:	460c      	mov	r4, r1
 800616c:	b14b      	cbz	r3, 8006182 <_Balloc+0x1e>
 800616e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006172:	b178      	cbz	r0, 8006194 <_Balloc+0x30>
 8006174:	6802      	ldr	r2, [r0, #0]
 8006176:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800617a:	2300      	movs	r3, #0
 800617c:	6103      	str	r3, [r0, #16]
 800617e:	60c3      	str	r3, [r0, #12]
 8006180:	bd70      	pop	{r4, r5, r6, pc}
 8006182:	2104      	movs	r1, #4
 8006184:	2221      	movs	r2, #33	; 0x21
 8006186:	f001 fa7f 	bl	8007688 <_calloc_r>
 800618a:	4603      	mov	r3, r0
 800618c:	64e8      	str	r0, [r5, #76]	; 0x4c
 800618e:	2800      	cmp	r0, #0
 8006190:	d1ed      	bne.n	800616e <_Balloc+0xa>
 8006192:	bd70      	pop	{r4, r5, r6, pc}
 8006194:	2101      	movs	r1, #1
 8006196:	fa11 f604 	lsls.w	r6, r1, r4
 800619a:	1d72      	adds	r2, r6, #5
 800619c:	4628      	mov	r0, r5
 800619e:	0092      	lsls	r2, r2, #2
 80061a0:	f001 fa72 	bl	8007688 <_calloc_r>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d0f4      	beq.n	8006192 <_Balloc+0x2e>
 80061a8:	6044      	str	r4, [r0, #4]
 80061aa:	6086      	str	r6, [r0, #8]
 80061ac:	e7e5      	b.n	800617a <_Balloc+0x16>
 80061ae:	bf00      	nop

080061b0 <_Bfree>:
 80061b0:	b131      	cbz	r1, 80061c0 <_Bfree+0x10>
 80061b2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80061b4:	684a      	ldr	r2, [r1, #4]
 80061b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80061ba:	6008      	str	r0, [r1, #0]
 80061bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop

080061c4 <__multadd>:
 80061c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061c6:	460d      	mov	r5, r1
 80061c8:	4606      	mov	r6, r0
 80061ca:	690c      	ldr	r4, [r1, #16]
 80061cc:	f101 0014 	add.w	r0, r1, #20
 80061d0:	b083      	sub	sp, #12
 80061d2:	2100      	movs	r1, #0
 80061d4:	6807      	ldr	r7, [r0, #0]
 80061d6:	fa1f fc87 	uxth.w	ip, r7
 80061da:	0c3f      	lsrs	r7, r7, #16
 80061dc:	fb02 330c 	mla	r3, r2, ip, r3
 80061e0:	fb02 f707 	mul.w	r7, r2, r7
 80061e4:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 80061ee:	3101      	adds	r1, #1
 80061f0:	f840 3b04 	str.w	r3, [r0], #4
 80061f4:	0c3b      	lsrs	r3, r7, #16
 80061f6:	428c      	cmp	r4, r1
 80061f8:	dcec      	bgt.n	80061d4 <__multadd+0x10>
 80061fa:	b13b      	cbz	r3, 800620c <__multadd+0x48>
 80061fc:	68aa      	ldr	r2, [r5, #8]
 80061fe:	4294      	cmp	r4, r2
 8006200:	da07      	bge.n	8006212 <__multadd+0x4e>
 8006202:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8006206:	3401      	adds	r4, #1
 8006208:	6153      	str	r3, [r2, #20]
 800620a:	612c      	str	r4, [r5, #16]
 800620c:	4628      	mov	r0, r5
 800620e:	b003      	add	sp, #12
 8006210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006212:	6869      	ldr	r1, [r5, #4]
 8006214:	9301      	str	r3, [sp, #4]
 8006216:	3101      	adds	r1, #1
 8006218:	4630      	mov	r0, r6
 800621a:	f7ff ffa3 	bl	8006164 <_Balloc>
 800621e:	692a      	ldr	r2, [r5, #16]
 8006220:	3202      	adds	r2, #2
 8006222:	f105 010c 	add.w	r1, r5, #12
 8006226:	4607      	mov	r7, r0
 8006228:	0092      	lsls	r2, r2, #2
 800622a:	f100 000c 	add.w	r0, r0, #12
 800622e:	f7ff ff51 	bl	80060d4 <memcpy>
 8006232:	6869      	ldr	r1, [r5, #4]
 8006234:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8006236:	9b01      	ldr	r3, [sp, #4]
 8006238:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800623c:	6028      	str	r0, [r5, #0]
 800623e:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8006242:	463d      	mov	r5, r7
 8006244:	e7dd      	b.n	8006202 <__multadd+0x3e>
 8006246:	bf00      	nop

08006248 <__s2b>:
 8006248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800624c:	461e      	mov	r6, r3
 800624e:	f648 6339 	movw	r3, #36409	; 0x8e39
 8006252:	f106 0408 	add.w	r4, r6, #8
 8006256:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 800625a:	fb83 5304 	smull	r5, r3, r3, r4
 800625e:	17e4      	asrs	r4, r4, #31
 8006260:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 8006264:	460f      	mov	r7, r1
 8006266:	2100      	movs	r1, #0
 8006268:	2b01      	cmp	r3, #1
 800626a:	4604      	mov	r4, r0
 800626c:	4690      	mov	r8, r2
 800626e:	dd05      	ble.n	800627c <__s2b+0x34>
 8006270:	2201      	movs	r2, #1
 8006272:	2100      	movs	r1, #0
 8006274:	0052      	lsls	r2, r2, #1
 8006276:	3101      	adds	r1, #1
 8006278:	4293      	cmp	r3, r2
 800627a:	dcfb      	bgt.n	8006274 <__s2b+0x2c>
 800627c:	4620      	mov	r0, r4
 800627e:	f7ff ff71 	bl	8006164 <_Balloc>
 8006282:	9b08      	ldr	r3, [sp, #32]
 8006284:	6143      	str	r3, [r0, #20]
 8006286:	2301      	movs	r3, #1
 8006288:	f1b8 0f09 	cmp.w	r8, #9
 800628c:	4601      	mov	r1, r0
 800628e:	6103      	str	r3, [r0, #16]
 8006290:	dd23      	ble.n	80062da <__s2b+0x92>
 8006292:	f107 0909 	add.w	r9, r7, #9
 8006296:	464d      	mov	r5, r9
 8006298:	4447      	add	r7, r8
 800629a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800629e:	220a      	movs	r2, #10
 80062a0:	3b30      	subs	r3, #48	; 0x30
 80062a2:	4620      	mov	r0, r4
 80062a4:	f7ff ff8e 	bl	80061c4 <__multadd>
 80062a8:	42bd      	cmp	r5, r7
 80062aa:	4601      	mov	r1, r0
 80062ac:	d1f5      	bne.n	800629a <__s2b+0x52>
 80062ae:	eb09 0708 	add.w	r7, r9, r8
 80062b2:	3f08      	subs	r7, #8
 80062b4:	4546      	cmp	r6, r8
 80062b6:	dd0d      	ble.n	80062d4 <__s2b+0x8c>
 80062b8:	ebc8 0707 	rsb	r7, r8, r7
 80062bc:	f817 3008 	ldrb.w	r3, [r7, r8]
 80062c0:	220a      	movs	r2, #10
 80062c2:	3b30      	subs	r3, #48	; 0x30
 80062c4:	4620      	mov	r0, r4
 80062c6:	f7ff ff7d 	bl	80061c4 <__multadd>
 80062ca:	f108 0801 	add.w	r8, r8, #1
 80062ce:	45b0      	cmp	r8, r6
 80062d0:	4601      	mov	r1, r0
 80062d2:	d1f3      	bne.n	80062bc <__s2b+0x74>
 80062d4:	4608      	mov	r0, r1
 80062d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062da:	370a      	adds	r7, #10
 80062dc:	f04f 0809 	mov.w	r8, #9
 80062e0:	e7e8      	b.n	80062b4 <__s2b+0x6c>
 80062e2:	bf00      	nop

080062e4 <__hi0bits>:
 80062e4:	4603      	mov	r3, r0
 80062e6:	2000      	movs	r0, #0
 80062e8:	0c1a      	lsrs	r2, r3, #16
 80062ea:	d101      	bne.n	80062f0 <__hi0bits+0xc>
 80062ec:	041b      	lsls	r3, r3, #16
 80062ee:	2010      	movs	r0, #16
 80062f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80062f4:	d101      	bne.n	80062fa <__hi0bits+0x16>
 80062f6:	3008      	adds	r0, #8
 80062f8:	021b      	lsls	r3, r3, #8
 80062fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80062fe:	d101      	bne.n	8006304 <__hi0bits+0x20>
 8006300:	3004      	adds	r0, #4
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006308:	d101      	bne.n	800630e <__hi0bits+0x2a>
 800630a:	3002      	adds	r0, #2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	db02      	blt.n	8006318 <__hi0bits+0x34>
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	d401      	bmi.n	800631a <__hi0bits+0x36>
 8006316:	2020      	movs	r0, #32
 8006318:	4770      	bx	lr
 800631a:	3001      	adds	r0, #1
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop

08006320 <__lo0bits>:
 8006320:	6803      	ldr	r3, [r0, #0]
 8006322:	4602      	mov	r2, r0
 8006324:	f013 0007 	ands.w	r0, r3, #7
 8006328:	d007      	beq.n	800633a <__lo0bits+0x1a>
 800632a:	07d9      	lsls	r1, r3, #31
 800632c:	d41f      	bmi.n	800636e <__lo0bits+0x4e>
 800632e:	0798      	lsls	r0, r3, #30
 8006330:	d41f      	bmi.n	8006372 <__lo0bits+0x52>
 8006332:	089b      	lsrs	r3, r3, #2
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	2002      	movs	r0, #2
 8006338:	4770      	bx	lr
 800633a:	b299      	uxth	r1, r3
 800633c:	b909      	cbnz	r1, 8006342 <__lo0bits+0x22>
 800633e:	0c1b      	lsrs	r3, r3, #16
 8006340:	2010      	movs	r0, #16
 8006342:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006346:	d101      	bne.n	800634c <__lo0bits+0x2c>
 8006348:	3008      	adds	r0, #8
 800634a:	0a1b      	lsrs	r3, r3, #8
 800634c:	0719      	lsls	r1, r3, #28
 800634e:	d101      	bne.n	8006354 <__lo0bits+0x34>
 8006350:	3004      	adds	r0, #4
 8006352:	091b      	lsrs	r3, r3, #4
 8006354:	0799      	lsls	r1, r3, #30
 8006356:	d101      	bne.n	800635c <__lo0bits+0x3c>
 8006358:	3002      	adds	r0, #2
 800635a:	089b      	lsrs	r3, r3, #2
 800635c:	07d9      	lsls	r1, r3, #31
 800635e:	d404      	bmi.n	800636a <__lo0bits+0x4a>
 8006360:	085b      	lsrs	r3, r3, #1
 8006362:	d101      	bne.n	8006368 <__lo0bits+0x48>
 8006364:	2020      	movs	r0, #32
 8006366:	4770      	bx	lr
 8006368:	3001      	adds	r0, #1
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	4770      	bx	lr
 800636e:	2000      	movs	r0, #0
 8006370:	4770      	bx	lr
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	2001      	movs	r0, #1
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop

0800637c <__i2b>:
 800637c:	b510      	push	{r4, lr}
 800637e:	460c      	mov	r4, r1
 8006380:	2101      	movs	r1, #1
 8006382:	f7ff feef 	bl	8006164 <_Balloc>
 8006386:	2201      	movs	r2, #1
 8006388:	6144      	str	r4, [r0, #20]
 800638a:	6102      	str	r2, [r0, #16]
 800638c:	bd10      	pop	{r4, pc}
 800638e:	bf00      	nop

08006390 <__multiply>:
 8006390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006394:	690f      	ldr	r7, [r1, #16]
 8006396:	6916      	ldr	r6, [r2, #16]
 8006398:	42b7      	cmp	r7, r6
 800639a:	b085      	sub	sp, #20
 800639c:	460d      	mov	r5, r1
 800639e:	4692      	mov	sl, r2
 80063a0:	da04      	bge.n	80063ac <__multiply+0x1c>
 80063a2:	463a      	mov	r2, r7
 80063a4:	4655      	mov	r5, sl
 80063a6:	4637      	mov	r7, r6
 80063a8:	468a      	mov	sl, r1
 80063aa:	4616      	mov	r6, r2
 80063ac:	68ab      	ldr	r3, [r5, #8]
 80063ae:	6869      	ldr	r1, [r5, #4]
 80063b0:	19bc      	adds	r4, r7, r6
 80063b2:	429c      	cmp	r4, r3
 80063b4:	bfc8      	it	gt
 80063b6:	3101      	addgt	r1, #1
 80063b8:	f7ff fed4 	bl	8006164 <_Balloc>
 80063bc:	1d21      	adds	r1, r4, #4
 80063be:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
 80063c2:	f100 0914 	add.w	r9, r0, #20
 80063c6:	f10b 0b04 	add.w	fp, fp, #4
 80063ca:	45d9      	cmp	r9, fp
 80063cc:	9000      	str	r0, [sp, #0]
 80063ce:	9101      	str	r1, [sp, #4]
 80063d0:	d205      	bcs.n	80063de <__multiply+0x4e>
 80063d2:	464b      	mov	r3, r9
 80063d4:	2200      	movs	r2, #0
 80063d6:	f843 2b04 	str.w	r2, [r3], #4
 80063da:	459b      	cmp	fp, r3
 80063dc:	d8fb      	bhi.n	80063d6 <__multiply+0x46>
 80063de:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 80063e2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80063e6:	f10a 0a14 	add.w	sl, sl, #20
 80063ea:	f106 0814 	add.w	r8, r6, #20
 80063ee:	3514      	adds	r5, #20
 80063f0:	3714      	adds	r7, #20
 80063f2:	45c2      	cmp	sl, r8
 80063f4:	d24f      	bcs.n	8006496 <__multiply+0x106>
 80063f6:	f8cd b008 	str.w	fp, [sp, #8]
 80063fa:	9403      	str	r4, [sp, #12]
 80063fc:	46ab      	mov	fp, r5
 80063fe:	f85a 5b04 	ldr.w	r5, [sl], #4
 8006402:	b2ac      	uxth	r4, r5
 8006404:	b1e4      	cbz	r4, 8006440 <__multiply+0xb0>
 8006406:	465a      	mov	r2, fp
 8006408:	464b      	mov	r3, r9
 800640a:	2100      	movs	r1, #0
 800640c:	f852 6b04 	ldr.w	r6, [r2], #4
 8006410:	681d      	ldr	r5, [r3, #0]
 8006412:	b2b0      	uxth	r0, r6
 8006414:	fa11 f185 	uxtah	r1, r1, r5
 8006418:	0c36      	lsrs	r6, r6, #16
 800641a:	0c2d      	lsrs	r5, r5, #16
 800641c:	fb04 1000 	mla	r0, r4, r0, r1
 8006420:	fb04 5106 	mla	r1, r4, r6, r5
 8006424:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 8006428:	b280      	uxth	r0, r0
 800642a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800642e:	0c09      	lsrs	r1, r1, #16
 8006430:	4297      	cmp	r7, r2
 8006432:	461d      	mov	r5, r3
 8006434:	f843 0b04 	str.w	r0, [r3], #4
 8006438:	d8e8      	bhi.n	800640c <__multiply+0x7c>
 800643a:	6069      	str	r1, [r5, #4]
 800643c:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 8006440:	0c2d      	lsrs	r5, r5, #16
 8006442:	d021      	beq.n	8006488 <__multiply+0xf8>
 8006444:	f8d9 6000 	ldr.w	r6, [r9]
 8006448:	465b      	mov	r3, fp
 800644a:	4630      	mov	r0, r6
 800644c:	4649      	mov	r1, r9
 800644e:	f04f 0c00 	mov.w	ip, #0
 8006452:	e000      	b.n	8006456 <__multiply+0xc6>
 8006454:	4611      	mov	r1, r2
 8006456:	881a      	ldrh	r2, [r3, #0]
 8006458:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
 800645c:	fb05 cc02 	mla	ip, r5, r2, ip
 8006460:	b2b6      	uxth	r6, r6
 8006462:	460a      	mov	r2, r1
 8006464:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 8006468:	f842 6b04 	str.w	r6, [r2], #4
 800646c:	f853 6b04 	ldr.w	r6, [r3], #4
 8006470:	6848      	ldr	r0, [r1, #4]
 8006472:	0c36      	lsrs	r6, r6, #16
 8006474:	b284      	uxth	r4, r0
 8006476:	fb05 4606 	mla	r6, r5, r6, r4
 800647a:	eb06 461c 	add.w	r6, r6, ip, lsr #16
 800647e:	429f      	cmp	r7, r3
 8006480:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 8006484:	d8e6      	bhi.n	8006454 <__multiply+0xc4>
 8006486:	604e      	str	r6, [r1, #4]
 8006488:	45d0      	cmp	r8, sl
 800648a:	f109 0904 	add.w	r9, r9, #4
 800648e:	d8b6      	bhi.n	80063fe <__multiply+0x6e>
 8006490:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006494:	9c03      	ldr	r4, [sp, #12]
 8006496:	2c00      	cmp	r4, #0
 8006498:	dd0c      	ble.n	80064b4 <__multiply+0x124>
 800649a:	e89d 0006 	ldmia.w	sp, {r1, r2}
 800649e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80064a2:	b93b      	cbnz	r3, 80064b4 <__multiply+0x124>
 80064a4:	f1ab 0b04 	sub.w	fp, fp, #4
 80064a8:	e002      	b.n	80064b0 <__multiply+0x120>
 80064aa:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
 80064ae:	b90b      	cbnz	r3, 80064b4 <__multiply+0x124>
 80064b0:	3c01      	subs	r4, #1
 80064b2:	d1fa      	bne.n	80064aa <__multiply+0x11a>
 80064b4:	9a00      	ldr	r2, [sp, #0]
 80064b6:	6114      	str	r4, [r2, #16]
 80064b8:	4610      	mov	r0, r2
 80064ba:	b005      	add	sp, #20
 80064bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064c0 <__pow5mult>:
 80064c0:	f012 0303 	ands.w	r3, r2, #3
 80064c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c8:	4615      	mov	r5, r2
 80064ca:	4604      	mov	r4, r0
 80064cc:	4688      	mov	r8, r1
 80064ce:	d12d      	bne.n	800652c <__pow5mult+0x6c>
 80064d0:	10ad      	asrs	r5, r5, #2
 80064d2:	d01d      	beq.n	8006510 <__pow5mult+0x50>
 80064d4:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 80064d6:	b92f      	cbnz	r7, 80064e4 <__pow5mult+0x24>
 80064d8:	e031      	b.n	800653e <__pow5mult+0x7e>
 80064da:	106d      	asrs	r5, r5, #1
 80064dc:	d018      	beq.n	8006510 <__pow5mult+0x50>
 80064de:	683e      	ldr	r6, [r7, #0]
 80064e0:	b1ce      	cbz	r6, 8006516 <__pow5mult+0x56>
 80064e2:	4637      	mov	r7, r6
 80064e4:	07e8      	lsls	r0, r5, #31
 80064e6:	d5f8      	bpl.n	80064da <__pow5mult+0x1a>
 80064e8:	4641      	mov	r1, r8
 80064ea:	463a      	mov	r2, r7
 80064ec:	4620      	mov	r0, r4
 80064ee:	f7ff ff4f 	bl	8006390 <__multiply>
 80064f2:	f1b8 0f00 	cmp.w	r8, #0
 80064f6:	d017      	beq.n	8006528 <__pow5mult+0x68>
 80064f8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80064fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80064fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006502:	106d      	asrs	r5, r5, #1
 8006504:	f8c8 1000 	str.w	r1, [r8]
 8006508:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 800650c:	4680      	mov	r8, r0
 800650e:	d1e6      	bne.n	80064de <__pow5mult+0x1e>
 8006510:	4640      	mov	r0, r8
 8006512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006516:	4639      	mov	r1, r7
 8006518:	463a      	mov	r2, r7
 800651a:	4620      	mov	r0, r4
 800651c:	f7ff ff38 	bl	8006390 <__multiply>
 8006520:	6038      	str	r0, [r7, #0]
 8006522:	6006      	str	r6, [r0, #0]
 8006524:	4607      	mov	r7, r0
 8006526:	e7dd      	b.n	80064e4 <__pow5mult+0x24>
 8006528:	4680      	mov	r8, r0
 800652a:	e7d6      	b.n	80064da <__pow5mult+0x1a>
 800652c:	1e5e      	subs	r6, r3, #1
 800652e:	4a09      	ldr	r2, [pc, #36]	; (8006554 <__pow5mult+0x94>)
 8006530:	2300      	movs	r3, #0
 8006532:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8006536:	f7ff fe45 	bl	80061c4 <__multadd>
 800653a:	4680      	mov	r8, r0
 800653c:	e7c8      	b.n	80064d0 <__pow5mult+0x10>
 800653e:	4620      	mov	r0, r4
 8006540:	f240 2171 	movw	r1, #625	; 0x271
 8006544:	f7ff ff1a 	bl	800637c <__i2b>
 8006548:	2300      	movs	r3, #0
 800654a:	64a0      	str	r0, [r4, #72]	; 0x48
 800654c:	4607      	mov	r7, r0
 800654e:	6003      	str	r3, [r0, #0]
 8006550:	e7c8      	b.n	80064e4 <__pow5mult+0x24>
 8006552:	bf00      	nop
 8006554:	08008658 	.word	0x08008658

08006558 <__lshift>:
 8006558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655c:	4691      	mov	r9, r2
 800655e:	690a      	ldr	r2, [r1, #16]
 8006560:	688b      	ldr	r3, [r1, #8]
 8006562:	ea4f 1769 	mov.w	r7, r9, asr #5
 8006566:	eb07 0b02 	add.w	fp, r7, r2
 800656a:	f10b 0501 	add.w	r5, fp, #1
 800656e:	429d      	cmp	r5, r3
 8006570:	460c      	mov	r4, r1
 8006572:	4606      	mov	r6, r0
 8006574:	6849      	ldr	r1, [r1, #4]
 8006576:	dd03      	ble.n	8006580 <__lshift+0x28>
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	3101      	adds	r1, #1
 800657c:	429d      	cmp	r5, r3
 800657e:	dcfb      	bgt.n	8006578 <__lshift+0x20>
 8006580:	4630      	mov	r0, r6
 8006582:	f7ff fdef 	bl	8006164 <_Balloc>
 8006586:	2f00      	cmp	r7, #0
 8006588:	f100 0314 	add.w	r3, r0, #20
 800658c:	dd09      	ble.n	80065a2 <__lshift+0x4a>
 800658e:	2200      	movs	r2, #0
 8006590:	4611      	mov	r1, r2
 8006592:	3201      	adds	r2, #1
 8006594:	42ba      	cmp	r2, r7
 8006596:	f843 1b04 	str.w	r1, [r3], #4
 800659a:	d1fa      	bne.n	8006592 <__lshift+0x3a>
 800659c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80065a0:	3314      	adds	r3, #20
 80065a2:	6922      	ldr	r2, [r4, #16]
 80065a4:	f019 091f 	ands.w	r9, r9, #31
 80065a8:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 80065ac:	f104 0114 	add.w	r1, r4, #20
 80065b0:	f10c 0c14 	add.w	ip, ip, #20
 80065b4:	d022      	beq.n	80065fc <__lshift+0xa4>
 80065b6:	f1c9 0a20 	rsb	sl, r9, #32
 80065ba:	2200      	movs	r2, #0
 80065bc:	e000      	b.n	80065c0 <__lshift+0x68>
 80065be:	463b      	mov	r3, r7
 80065c0:	f8d1 8000 	ldr.w	r8, [r1]
 80065c4:	461f      	mov	r7, r3
 80065c6:	fa08 f809 	lsl.w	r8, r8, r9
 80065ca:	ea48 0202 	orr.w	r2, r8, r2
 80065ce:	f847 2b04 	str.w	r2, [r7], #4
 80065d2:	f851 2b04 	ldr.w	r2, [r1], #4
 80065d6:	458c      	cmp	ip, r1
 80065d8:	fa22 f20a 	lsr.w	r2, r2, sl
 80065dc:	d8ef      	bhi.n	80065be <__lshift+0x66>
 80065de:	605a      	str	r2, [r3, #4]
 80065e0:	b10a      	cbz	r2, 80065e6 <__lshift+0x8e>
 80065e2:	f10b 0502 	add.w	r5, fp, #2
 80065e6:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 80065e8:	6862      	ldr	r2, [r4, #4]
 80065ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065ee:	3d01      	subs	r5, #1
 80065f0:	6105      	str	r5, [r0, #16]
 80065f2:	6021      	str	r1, [r4, #0]
 80065f4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fc:	f851 2b04 	ldr.w	r2, [r1], #4
 8006600:	458c      	cmp	ip, r1
 8006602:	f843 2b04 	str.w	r2, [r3], #4
 8006606:	d9ee      	bls.n	80065e6 <__lshift+0x8e>
 8006608:	f851 2b04 	ldr.w	r2, [r1], #4
 800660c:	458c      	cmp	ip, r1
 800660e:	f843 2b04 	str.w	r2, [r3], #4
 8006612:	d8f3      	bhi.n	80065fc <__lshift+0xa4>
 8006614:	e7e7      	b.n	80065e6 <__lshift+0x8e>
 8006616:	bf00      	nop

08006618 <__mcmp>:
 8006618:	4603      	mov	r3, r0
 800661a:	690a      	ldr	r2, [r1, #16]
 800661c:	6900      	ldr	r0, [r0, #16]
 800661e:	1a80      	subs	r0, r0, r2
 8006620:	b430      	push	{r4, r5}
 8006622:	d111      	bne.n	8006648 <__mcmp+0x30>
 8006624:	3204      	adds	r2, #4
 8006626:	0094      	lsls	r4, r2, #2
 8006628:	191a      	adds	r2, r3, r4
 800662a:	1909      	adds	r1, r1, r4
 800662c:	3314      	adds	r3, #20
 800662e:	3204      	adds	r2, #4
 8006630:	3104      	adds	r1, #4
 8006632:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8006636:	f851 4c04 	ldr.w	r4, [r1, #-4]
 800663a:	3a04      	subs	r2, #4
 800663c:	42a5      	cmp	r5, r4
 800663e:	f1a1 0104 	sub.w	r1, r1, #4
 8006642:	d103      	bne.n	800664c <__mcmp+0x34>
 8006644:	4293      	cmp	r3, r2
 8006646:	d3f4      	bcc.n	8006632 <__mcmp+0x1a>
 8006648:	bc30      	pop	{r4, r5}
 800664a:	4770      	bx	lr
 800664c:	bf38      	it	cc
 800664e:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
 8006652:	d3f9      	bcc.n	8006648 <__mcmp+0x30>
 8006654:	2001      	movs	r0, #1
 8006656:	e7f7      	b.n	8006648 <__mcmp+0x30>

08006658 <__mdiff>:
 8006658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800665c:	460c      	mov	r4, r1
 800665e:	4606      	mov	r6, r0
 8006660:	4611      	mov	r1, r2
 8006662:	4620      	mov	r0, r4
 8006664:	4615      	mov	r5, r2
 8006666:	f7ff ffd7 	bl	8006618 <__mcmp>
 800666a:	1e07      	subs	r7, r0, #0
 800666c:	d058      	beq.n	8006720 <__mdiff+0xc8>
 800666e:	db52      	blt.n	8006716 <__mdiff+0xbe>
 8006670:	2700      	movs	r7, #0
 8006672:	4630      	mov	r0, r6
 8006674:	6861      	ldr	r1, [r4, #4]
 8006676:	f7ff fd75 	bl	8006164 <_Balloc>
 800667a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800667e:	692b      	ldr	r3, [r5, #16]
 8006680:	60c7      	str	r7, [r0, #12]
 8006682:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 8006686:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 800668a:	3714      	adds	r7, #20
 800668c:	f108 0814 	add.w	r8, r8, #20
 8006690:	3414      	adds	r4, #20
 8006692:	3514      	adds	r5, #20
 8006694:	f100 0914 	add.w	r9, r0, #20
 8006698:	2600      	movs	r6, #0
 800669a:	f854 3b04 	ldr.w	r3, [r4], #4
 800669e:	f855 2b04 	ldr.w	r2, [r5], #4
 80066a2:	fa16 f183 	uxtah	r1, r6, r3
 80066a6:	fa1f fa82 	uxth.w	sl, r2
 80066aa:	0c12      	lsrs	r2, r2, #16
 80066ac:	ebc2 4613 	rsb	r6, r2, r3, lsr #16
 80066b0:	ebca 0101 	rsb	r1, sl, r1
 80066b4:	eb06 4621 	add.w	r6, r6, r1, asr #16
 80066b8:	464b      	mov	r3, r9
 80066ba:	b289      	uxth	r1, r1
 80066bc:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 80066c0:	f843 1b04 	str.w	r1, [r3], #4
 80066c4:	1436      	asrs	r6, r6, #16
 80066c6:	45a8      	cmp	r8, r5
 80066c8:	4622      	mov	r2, r4
 80066ca:	4699      	mov	r9, r3
 80066cc:	d8e5      	bhi.n	800669a <__mdiff+0x42>
 80066ce:	42a7      	cmp	r7, r4
 80066d0:	4698      	mov	r8, r3
 80066d2:	d914      	bls.n	80066fe <__mdiff+0xa6>
 80066d4:	f852 5b04 	ldr.w	r5, [r2], #4
 80066d8:	fa16 f685 	uxtah	r6, r6, r5
 80066dc:	0c2d      	lsrs	r5, r5, #16
 80066de:	eb05 4526 	add.w	r5, r5, r6, asr #16
 80066e2:	b2b6      	uxth	r6, r6
 80066e4:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 80066e8:	142e      	asrs	r6, r5, #16
 80066ea:	4297      	cmp	r7, r2
 80066ec:	f843 1b04 	str.w	r1, [r3], #4
 80066f0:	d8f0      	bhi.n	80066d4 <__mdiff+0x7c>
 80066f2:	43e3      	mvns	r3, r4
 80066f4:	19db      	adds	r3, r3, r7
 80066f6:	f023 0303 	bic.w	r3, r3, #3
 80066fa:	3304      	adds	r3, #4
 80066fc:	4443      	add	r3, r8
 80066fe:	b931      	cbnz	r1, 800670e <__mdiff+0xb6>
 8006700:	3b04      	subs	r3, #4
 8006702:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006706:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800670a:	2a00      	cmp	r2, #0
 800670c:	d0f9      	beq.n	8006702 <__mdiff+0xaa>
 800670e:	f8c0 c010 	str.w	ip, [r0, #16]
 8006712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006716:	4623      	mov	r3, r4
 8006718:	2701      	movs	r7, #1
 800671a:	462c      	mov	r4, r5
 800671c:	461d      	mov	r5, r3
 800671e:	e7a8      	b.n	8006672 <__mdiff+0x1a>
 8006720:	4630      	mov	r0, r6
 8006722:	4639      	mov	r1, r7
 8006724:	f7ff fd1e 	bl	8006164 <_Balloc>
 8006728:	2301      	movs	r3, #1
 800672a:	6103      	str	r3, [r0, #16]
 800672c:	6147      	str	r7, [r0, #20]
 800672e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006732:	bf00      	nop

08006734 <__ulp>:
 8006734:	2300      	movs	r3, #0
 8006736:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800673a:	400b      	ands	r3, r1
 800673c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006740:	2b00      	cmp	r3, #0
 8006742:	dd02      	ble.n	800674a <__ulp+0x16>
 8006744:	4619      	mov	r1, r3
 8006746:	2000      	movs	r0, #0
 8006748:	4770      	bx	lr
 800674a:	425b      	negs	r3, r3
 800674c:	151b      	asrs	r3, r3, #20
 800674e:	2100      	movs	r1, #0
 8006750:	2b13      	cmp	r3, #19
 8006752:	dd0b      	ble.n	800676c <__ulp+0x38>
 8006754:	2b32      	cmp	r3, #50	; 0x32
 8006756:	dd02      	ble.n	800675e <__ulp+0x2a>
 8006758:	2301      	movs	r3, #1
 800675a:	4618      	mov	r0, r3
 800675c:	4770      	bx	lr
 800675e:	2201      	movs	r2, #1
 8006760:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8006764:	fa12 f303 	lsls.w	r3, r2, r3
 8006768:	4618      	mov	r0, r3
 800676a:	4770      	bx	lr
 800676c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006770:	fa52 f103 	asrs.w	r1, r2, r3
 8006774:	2000      	movs	r0, #0
 8006776:	4770      	bx	lr

08006778 <__b2d>:
 8006778:	6902      	ldr	r2, [r0, #16]
 800677a:	3204      	adds	r2, #4
 800677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8006782:	4603      	mov	r3, r0
 8006784:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8006788:	4628      	mov	r0, r5
 800678a:	460f      	mov	r7, r1
 800678c:	f103 0614 	add.w	r6, r3, #20
 8006790:	f7ff fda8 	bl	80062e4 <__hi0bits>
 8006794:	f1c0 0320 	rsb	r3, r0, #32
 8006798:	280a      	cmp	r0, #10
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	4623      	mov	r3, r4
 800679e:	dc14      	bgt.n	80067ca <__b2d+0x52>
 80067a0:	f1c0 010b 	rsb	r1, r0, #11
 80067a4:	fa35 f701 	lsrs.w	r7, r5, r1
 80067a8:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 80067ac:	42a6      	cmp	r6, r4
 80067ae:	f447 1340 	orr.w	r3, r7, #3145728	; 0x300000
 80067b2:	d22e      	bcs.n	8006812 <__b2d+0x9a>
 80067b4:	f854 4c04 	ldr.w	r4, [r4, #-4]
 80067b8:	fa34 f101 	lsrs.w	r1, r4, r1
 80067bc:	3015      	adds	r0, #21
 80067be:	4085      	lsls	r5, r0
 80067c0:	ea41 0205 	orr.w	r2, r1, r5
 80067c4:	4610      	mov	r0, r2
 80067c6:	4619      	mov	r1, r3
 80067c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067ca:	2100      	movs	r1, #0
 80067cc:	42a6      	cmp	r6, r4
 80067ce:	d202      	bcs.n	80067d6 <__b2d+0x5e>
 80067d0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80067d4:	3c04      	subs	r4, #4
 80067d6:	f1b0 070b 	subs.w	r7, r0, #11
 80067da:	bf02      	ittt	eq
 80067dc:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
 80067e0:	f445 1340 	orreq.w	r3, r5, #3145728	; 0x300000
 80067e4:	460a      	moveq	r2, r1
 80067e6:	d0ed      	beq.n	80067c4 <__b2d+0x4c>
 80067e8:	40bd      	lsls	r5, r7
 80067ea:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 80067ee:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 80067f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80067f6:	fa21 fc00 	lsr.w	ip, r1, r0
 80067fa:	42b4      	cmp	r4, r6
 80067fc:	ea45 030c 	orr.w	r3, r5, ip
 8006800:	d909      	bls.n	8006816 <__b2d+0x9e>
 8006802:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006806:	fa34 f000 	lsrs.w	r0, r4, r0
 800680a:	40b9      	lsls	r1, r7
 800680c:	ea40 0201 	orr.w	r2, r0, r1
 8006810:	e7d8      	b.n	80067c4 <__b2d+0x4c>
 8006812:	2100      	movs	r1, #0
 8006814:	e7d2      	b.n	80067bc <__b2d+0x44>
 8006816:	2000      	movs	r0, #0
 8006818:	e7f7      	b.n	800680a <__b2d+0x92>
 800681a:	bf00      	nop

0800681c <__d2b>:
 800681c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006820:	b083      	sub	sp, #12
 8006822:	2101      	movs	r1, #1
 8006824:	461d      	mov	r5, r3
 8006826:	4614      	mov	r4, r2
 8006828:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800682a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800682c:	f7ff fc9a 	bl	8006164 <_Balloc>
 8006830:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 8006834:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006838:	f3c5 590a 	ubfx	r9, r5, #20, #11
 800683c:	4680      	mov	r8, r0
 800683e:	9301      	str	r3, [sp, #4]
 8006840:	f1b9 0f00 	cmp.w	r9, #0
 8006844:	d002      	beq.n	800684c <__d2b+0x30>
 8006846:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800684a:	9301      	str	r3, [sp, #4]
 800684c:	2c00      	cmp	r4, #0
 800684e:	d025      	beq.n	800689c <__d2b+0x80>
 8006850:	a802      	add	r0, sp, #8
 8006852:	f840 4d08 	str.w	r4, [r0, #-8]!
 8006856:	4668      	mov	r0, sp
 8006858:	f7ff fd62 	bl	8006320 <__lo0bits>
 800685c:	9b01      	ldr	r3, [sp, #4]
 800685e:	2800      	cmp	r0, #0
 8006860:	d132      	bne.n	80068c8 <__d2b+0xac>
 8006862:	9a00      	ldr	r2, [sp, #0]
 8006864:	f8c8 2014 	str.w	r2, [r8, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	bf0c      	ite	eq
 800686c:	2401      	moveq	r4, #1
 800686e:	2402      	movne	r4, #2
 8006870:	f8c8 3018 	str.w	r3, [r8, #24]
 8006874:	f8c8 4010 	str.w	r4, [r8, #16]
 8006878:	f1b9 0f00 	cmp.w	r9, #0
 800687c:	d11b      	bne.n	80068b6 <__d2b+0x9a>
 800687e:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8006882:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 8006886:	6910      	ldr	r0, [r2, #16]
 8006888:	603b      	str	r3, [r7, #0]
 800688a:	f7ff fd2b 	bl	80062e4 <__hi0bits>
 800688e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8006892:	6030      	str	r0, [r6, #0]
 8006894:	4640      	mov	r0, r8
 8006896:	b003      	add	sp, #12
 8006898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800689c:	a801      	add	r0, sp, #4
 800689e:	f7ff fd3f 	bl	8006320 <__lo0bits>
 80068a2:	9b01      	ldr	r3, [sp, #4]
 80068a4:	2401      	movs	r4, #1
 80068a6:	f8c8 3014 	str.w	r3, [r8, #20]
 80068aa:	f8c8 4010 	str.w	r4, [r8, #16]
 80068ae:	3020      	adds	r0, #32
 80068b0:	f1b9 0f00 	cmp.w	r9, #0
 80068b4:	d0e3      	beq.n	800687e <__d2b+0x62>
 80068b6:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 80068ba:	eb09 0300 	add.w	r3, r9, r0
 80068be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80068c2:	603b      	str	r3, [r7, #0]
 80068c4:	6030      	str	r0, [r6, #0]
 80068c6:	e7e5      	b.n	8006894 <__d2b+0x78>
 80068c8:	f1c0 0220 	rsb	r2, r0, #32
 80068cc:	9900      	ldr	r1, [sp, #0]
 80068ce:	fa13 f202 	lsls.w	r2, r3, r2
 80068d2:	430a      	orrs	r2, r1
 80068d4:	40c3      	lsrs	r3, r0
 80068d6:	f8c8 2014 	str.w	r2, [r8, #20]
 80068da:	9301      	str	r3, [sp, #4]
 80068dc:	e7c4      	b.n	8006868 <__d2b+0x4c>
 80068de:	bf00      	nop

080068e0 <__ratio>:
 80068e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068e4:	b083      	sub	sp, #12
 80068e6:	460d      	mov	r5, r1
 80068e8:	4669      	mov	r1, sp
 80068ea:	4604      	mov	r4, r0
 80068ec:	f7ff ff44 	bl	8006778 <__b2d>
 80068f0:	4689      	mov	r9, r1
 80068f2:	4680      	mov	r8, r0
 80068f4:	a901      	add	r1, sp, #4
 80068f6:	4628      	mov	r0, r5
 80068f8:	f7ff ff3e 	bl	8006778 <__b2d>
 80068fc:	460f      	mov	r7, r1
 80068fe:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8006902:	692a      	ldr	r2, [r5, #16]
 8006904:	6924      	ldr	r4, [r4, #16]
 8006906:	1acb      	subs	r3, r1, r3
 8006908:	1aa4      	subs	r4, r4, r2
 800690a:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 800690e:	2c00      	cmp	r4, #0
 8006910:	4606      	mov	r6, r0
 8006912:	464b      	mov	r3, r9
 8006914:	4639      	mov	r1, r7
 8006916:	bfcb      	itete	gt
 8006918:	eb09 5304 	addgt.w	r3, r9, r4, lsl #20
 800691c:	eba7 5104 	suble.w	r1, r7, r4, lsl #20
 8006920:	4699      	movgt	r9, r3
 8006922:	460f      	movle	r7, r1
 8006924:	bfcc      	ite	gt
 8006926:	46c0      	nopgt			; (mov r8, r8)
 8006928:	4636      	movle	r6, r6
 800692a:	4640      	mov	r0, r8
 800692c:	4649      	mov	r1, r9
 800692e:	4632      	mov	r2, r6
 8006930:	463b      	mov	r3, r7
 8006932:	f001 fc53 	bl	80081dc <__aeabi_ddiv>
 8006936:	b003      	add	sp, #12
 8006938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800693c <_mprec_log10>:
 800693c:	b510      	push	{r4, lr}
 800693e:	4604      	mov	r4, r0
 8006940:	2100      	movs	r1, #0
 8006942:	2000      	movs	r0, #0
 8006944:	2c17      	cmp	r4, #23
 8006946:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800694a:	dd08      	ble.n	800695e <_mprec_log10+0x22>
 800694c:	2300      	movs	r3, #0
 800694e:	2200      	movs	r2, #0
 8006950:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006954:	f001 fb18 	bl	8007f88 <__aeabi_dmul>
 8006958:	3c01      	subs	r4, #1
 800695a:	d1f7      	bne.n	800694c <_mprec_log10+0x10>
 800695c:	bd10      	pop	{r4, pc}
 800695e:	4b03      	ldr	r3, [pc, #12]	; (800696c <_mprec_log10+0x30>)
 8006960:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006964:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8006968:	bd10      	pop	{r4, pc}
 800696a:	bf00      	nop
 800696c:	08008658 	.word	0x08008658

08006970 <__copybits>:
 8006970:	6913      	ldr	r3, [r2, #16]
 8006972:	3901      	subs	r1, #1
 8006974:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006978:	1149      	asrs	r1, r1, #5
 800697a:	b470      	push	{r4, r5, r6}
 800697c:	3314      	adds	r3, #20
 800697e:	f102 0414 	add.w	r4, r2, #20
 8006982:	3101      	adds	r1, #1
 8006984:	429c      	cmp	r4, r3
 8006986:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800698a:	d20c      	bcs.n	80069a6 <__copybits+0x36>
 800698c:	4605      	mov	r5, r0
 800698e:	f854 6b04 	ldr.w	r6, [r4], #4
 8006992:	42a3      	cmp	r3, r4
 8006994:	f845 6b04 	str.w	r6, [r5], #4
 8006998:	d8f9      	bhi.n	800698e <__copybits+0x1e>
 800699a:	1a9b      	subs	r3, r3, r2
 800699c:	3b15      	subs	r3, #21
 800699e:	f023 0303 	bic.w	r3, r3, #3
 80069a2:	3304      	adds	r3, #4
 80069a4:	18c0      	adds	r0, r0, r3
 80069a6:	4281      	cmp	r1, r0
 80069a8:	d904      	bls.n	80069b4 <__copybits+0x44>
 80069aa:	2300      	movs	r3, #0
 80069ac:	f840 3b04 	str.w	r3, [r0], #4
 80069b0:	4281      	cmp	r1, r0
 80069b2:	d8fb      	bhi.n	80069ac <__copybits+0x3c>
 80069b4:	bc70      	pop	{r4, r5, r6}
 80069b6:	4770      	bx	lr

080069b8 <__any_on>:
 80069b8:	6902      	ldr	r2, [r0, #16]
 80069ba:	114b      	asrs	r3, r1, #5
 80069bc:	429a      	cmp	r2, r3
 80069be:	b410      	push	{r4}
 80069c0:	db01      	blt.n	80069c6 <__any_on+0xe>
 80069c2:	461a      	mov	r2, r3
 80069c4:	dc13      	bgt.n	80069ee <__any_on+0x36>
 80069c6:	3204      	adds	r2, #4
 80069c8:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80069cc:	f100 0114 	add.w	r1, r0, #20
 80069d0:	1d1c      	adds	r4, r3, #4
 80069d2:	42a1      	cmp	r1, r4
 80069d4:	d218      	bcs.n	8006a08 <__any_on+0x50>
 80069d6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80069da:	b92a      	cbnz	r2, 80069e8 <__any_on+0x30>
 80069dc:	4299      	cmp	r1, r3
 80069de:	d213      	bcs.n	8006a08 <__any_on+0x50>
 80069e0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80069e4:	2a00      	cmp	r2, #0
 80069e6:	d0f9      	beq.n	80069dc <__any_on+0x24>
 80069e8:	2001      	movs	r0, #1
 80069ea:	bc10      	pop	{r4}
 80069ec:	4770      	bx	lr
 80069ee:	f011 011f 	ands.w	r1, r1, #31
 80069f2:	d0e8      	beq.n	80069c6 <__any_on+0xe>
 80069f4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	fa33 f401 	lsrs.w	r4, r3, r1
 80069fe:	fa14 f101 	lsls.w	r1, r4, r1
 8006a02:	4299      	cmp	r1, r3
 8006a04:	d1f0      	bne.n	80069e8 <__any_on+0x30>
 8006a06:	e7de      	b.n	80069c6 <__any_on+0xe>
 8006a08:	2000      	movs	r0, #0
 8006a0a:	e7ee      	b.n	80069ea <__any_on+0x32>

08006a0c <__fpclassifyd>:
 8006a0c:	ea50 0201 	orrs.w	r2, r0, r1
 8006a10:	b410      	push	{r4}
 8006a12:	460b      	mov	r3, r1
 8006a14:	d102      	bne.n	8006a1c <__fpclassifyd+0x10>
 8006a16:	2002      	movs	r0, #2
 8006a18:	bc10      	pop	{r4}
 8006a1a:	4770      	bx	lr
 8006a1c:	f1d0 0101 	rsbs	r1, r0, #1
 8006a20:	bf38      	it	cc
 8006a22:	2100      	movcc	r1, #0
 8006a24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a28:	bf08      	it	eq
 8006a2a:	2800      	cmpeq	r0, #0
 8006a2c:	d0f3      	beq.n	8006a16 <__fpclassifyd+0xa>
 8006a2e:	f103 44ff 	add.w	r4, r3, #2139095040	; 0x7f800000
 8006a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a36:	f504 04e0 	add.w	r4, r4, #7340032	; 0x700000
 8006a3a:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 8006a3e:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 8006a42:	4290      	cmp	r0, r2
 8006a44:	bf88      	it	hi
 8006a46:	4294      	cmphi	r4, r2
 8006a48:	d801      	bhi.n	8006a4e <__fpclassifyd+0x42>
 8006a4a:	2004      	movs	r0, #4
 8006a4c:	e7e4      	b.n	8006a18 <__fpclassifyd+0xc>
 8006a4e:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8006a52:	2003      	movs	r0, #3
 8006a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a58:	bf28      	it	cs
 8006a5a:	f5b2 1f80 	cmpcs.w	r2, #1048576	; 0x100000
 8006a5e:	d3db      	bcc.n	8006a18 <__fpclassifyd+0xc>
 8006a60:	2200      	movs	r2, #0
 8006a62:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8006a66:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8006a6a:	bf18      	it	ne
 8006a6c:	4293      	cmpne	r3, r2
 8006a6e:	bf14      	ite	ne
 8006a70:	2300      	movne	r3, #0
 8006a72:	2301      	moveq	r3, #1
 8006a74:	ea01 0003 	and.w	r0, r1, r3
 8006a78:	e7ce      	b.n	8006a18 <__fpclassifyd+0xc>
 8006a7a:	bf00      	nop

08006a7c <_sbrk_r>:
 8006a7c:	b538      	push	{r3, r4, r5, lr}
 8006a7e:	4c07      	ldr	r4, [pc, #28]	; (8006a9c <_sbrk_r+0x20>)
 8006a80:	2300      	movs	r3, #0
 8006a82:	4605      	mov	r5, r0
 8006a84:	4608      	mov	r0, r1
 8006a86:	6023      	str	r3, [r4, #0]
 8006a88:	f7fc f9c0 	bl	8002e0c <_sbrk>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d000      	beq.n	8006a92 <_sbrk_r+0x16>
 8006a90:	bd38      	pop	{r3, r4, r5, pc}
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d0fb      	beq.n	8006a90 <_sbrk_r+0x14>
 8006a98:	602b      	str	r3, [r5, #0]
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}
 8006a9c:	20001008 	.word	0x20001008

08006aa0 <strcmp>:
 8006aa0:	ea80 0201 	eor.w	r2, r0, r1
 8006aa4:	f012 0f03 	tst.w	r2, #3
 8006aa8:	d13a      	bne.n	8006b20 <strcmp_unaligned>
 8006aaa:	f010 0203 	ands.w	r2, r0, #3
 8006aae:	f020 0003 	bic.w	r0, r0, #3
 8006ab2:	f021 0103 	bic.w	r1, r1, #3
 8006ab6:	f850 cb04 	ldr.w	ip, [r0], #4
 8006aba:	bf08      	it	eq
 8006abc:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006ac0:	d00d      	beq.n	8006ade <strcmp+0x3e>
 8006ac2:	f082 0203 	eor.w	r2, r2, #3
 8006ac6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006aca:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8006ace:	fa23 f202 	lsr.w	r2, r3, r2
 8006ad2:	f851 3b04 	ldr.w	r3, [r1], #4
 8006ad6:	ea4c 0c02 	orr.w	ip, ip, r2
 8006ada:	ea43 0302 	orr.w	r3, r3, r2
 8006ade:	bf00      	nop
 8006ae0:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 8006ae4:	459c      	cmp	ip, r3
 8006ae6:	bf01      	itttt	eq
 8006ae8:	ea22 020c 	biceq.w	r2, r2, ip
 8006aec:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8006af0:	f850 cb04 	ldreq.w	ip, [r0], #4
 8006af4:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006af8:	d0f2      	beq.n	8006ae0 <strcmp+0x40>
 8006afa:	ea4f 600c 	mov.w	r0, ip, lsl #24
 8006afe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8006b02:	2801      	cmp	r0, #1
 8006b04:	bf28      	it	cs
 8006b06:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8006b0a:	bf08      	it	eq
 8006b0c:	0a1b      	lsreq	r3, r3, #8
 8006b0e:	d0f4      	beq.n	8006afa <strcmp+0x5a>
 8006b10:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8006b14:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8006b18:	eba0 0003 	sub.w	r0, r0, r3
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop

08006b20 <strcmp_unaligned>:
 8006b20:	f010 0f03 	tst.w	r0, #3
 8006b24:	d00a      	beq.n	8006b3c <strcmp_unaligned+0x1c>
 8006b26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b2e:	2a01      	cmp	r2, #1
 8006b30:	bf28      	it	cs
 8006b32:	429a      	cmpcs	r2, r3
 8006b34:	d0f4      	beq.n	8006b20 <strcmp_unaligned>
 8006b36:	eba2 0003 	sub.w	r0, r2, r3
 8006b3a:	4770      	bx	lr
 8006b3c:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8006b40:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8006b44:	f04f 0201 	mov.w	r2, #1
 8006b48:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8006b4c:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8006b50:	f001 0c03 	and.w	ip, r1, #3
 8006b54:	f021 0103 	bic.w	r1, r1, #3
 8006b58:	f850 4b04 	ldr.w	r4, [r0], #4
 8006b5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b60:	f1bc 0f02 	cmp.w	ip, #2
 8006b64:	d026      	beq.n	8006bb4 <strcmp_unaligned+0x94>
 8006b66:	d84b      	bhi.n	8006c00 <strcmp_unaligned+0xe0>
 8006b68:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 8006b6c:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8006b70:	eba4 0302 	sub.w	r3, r4, r2
 8006b74:	ea23 0304 	bic.w	r3, r3, r4
 8006b78:	d10d      	bne.n	8006b96 <strcmp_unaligned+0x76>
 8006b7a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006b7e:	bf08      	it	eq
 8006b80:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006b84:	d10a      	bne.n	8006b9c <strcmp_unaligned+0x7c>
 8006b86:	ea8c 0c04 	eor.w	ip, ip, r4
 8006b8a:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 8006b8e:	d10c      	bne.n	8006baa <strcmp_unaligned+0x8a>
 8006b90:	f850 4b04 	ldr.w	r4, [r0], #4
 8006b94:	e7e8      	b.n	8006b68 <strcmp_unaligned+0x48>
 8006b96:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8006b9a:	e05c      	b.n	8006c56 <strcmp_unaligned+0x136>
 8006b9c:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8006ba0:	d152      	bne.n	8006c48 <strcmp_unaligned+0x128>
 8006ba2:	780d      	ldrb	r5, [r1, #0]
 8006ba4:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8006ba8:	e055      	b.n	8006c56 <strcmp_unaligned+0x136>
 8006baa:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8006bae:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8006bb2:	e050      	b.n	8006c56 <strcmp_unaligned+0x136>
 8006bb4:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8006bb8:	eba4 0302 	sub.w	r3, r4, r2
 8006bbc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006bc0:	ea23 0304 	bic.w	r3, r3, r4
 8006bc4:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8006bc8:	d117      	bne.n	8006bfa <strcmp_unaligned+0xda>
 8006bca:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006bce:	bf08      	it	eq
 8006bd0:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006bd4:	d107      	bne.n	8006be6 <strcmp_unaligned+0xc6>
 8006bd6:	ea8c 0c04 	eor.w	ip, ip, r4
 8006bda:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 8006bde:	d108      	bne.n	8006bf2 <strcmp_unaligned+0xd2>
 8006be0:	f850 4b04 	ldr.w	r4, [r0], #4
 8006be4:	e7e6      	b.n	8006bb4 <strcmp_unaligned+0x94>
 8006be6:	041b      	lsls	r3, r3, #16
 8006be8:	d12e      	bne.n	8006c48 <strcmp_unaligned+0x128>
 8006bea:	880d      	ldrh	r5, [r1, #0]
 8006bec:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006bf0:	e031      	b.n	8006c56 <strcmp_unaligned+0x136>
 8006bf2:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8006bf6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006bfa:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8006bfe:	e02a      	b.n	8006c56 <strcmp_unaligned+0x136>
 8006c00:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 8006c04:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8006c08:	eba4 0302 	sub.w	r3, r4, r2
 8006c0c:	ea23 0304 	bic.w	r3, r3, r4
 8006c10:	d10d      	bne.n	8006c2e <strcmp_unaligned+0x10e>
 8006c12:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006c16:	bf08      	it	eq
 8006c18:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006c1c:	d10a      	bne.n	8006c34 <strcmp_unaligned+0x114>
 8006c1e:	ea8c 0c04 	eor.w	ip, ip, r4
 8006c22:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 8006c26:	d10a      	bne.n	8006c3e <strcmp_unaligned+0x11e>
 8006c28:	f850 4b04 	ldr.w	r4, [r0], #4
 8006c2c:	e7e8      	b.n	8006c00 <strcmp_unaligned+0xe0>
 8006c2e:	ea4f 6515 	mov.w	r5, r5, lsr #24
 8006c32:	e010      	b.n	8006c56 <strcmp_unaligned+0x136>
 8006c34:	f014 0fff 	tst.w	r4, #255	; 0xff
 8006c38:	d006      	beq.n	8006c48 <strcmp_unaligned+0x128>
 8006c3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c3e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8006c42:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8006c46:	e006      	b.n	8006c56 <strcmp_unaligned+0x136>
 8006c48:	f04f 0000 	mov.w	r0, #0
 8006c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c50:	f85d 5b04 	ldr.w	r5, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 8006c5a:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 8006c5e:	2801      	cmp	r0, #1
 8006c60:	bf28      	it	cs
 8006c62:	4290      	cmpcs	r0, r2
 8006c64:	bf04      	itt	eq
 8006c66:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 8006c6a:	0a2d      	lsreq	r5, r5, #8
 8006c6c:	d0f3      	beq.n	8006c56 <strcmp_unaligned+0x136>
 8006c6e:	eba2 0000 	sub.w	r0, r2, r0
 8006c72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c76:	f85d 5b04 	ldr.w	r5, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <strlen>:
 8006c7c:	f020 0103 	bic.w	r1, r0, #3
 8006c80:	f010 0003 	ands.w	r0, r0, #3
 8006c84:	f1c0 0000 	rsb	r0, r0, #0
 8006c88:	f851 3b04 	ldr.w	r3, [r1], #4
 8006c8c:	f100 0c04 	add.w	ip, r0, #4
 8006c90:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8006c94:	f06f 0200 	mvn.w	r2, #0
 8006c98:	bf1c      	itt	ne
 8006c9a:	fa22 f20c 	lsrne.w	r2, r2, ip
 8006c9e:	4313      	orrne	r3, r2
 8006ca0:	f04f 0c01 	mov.w	ip, #1
 8006ca4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8006ca8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8006cac:	eba3 020c 	sub.w	r2, r3, ip
 8006cb0:	ea22 0203 	bic.w	r2, r2, r3
 8006cb4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8006cb8:	bf04      	itt	eq
 8006cba:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006cbe:	3004      	addeq	r0, #4
 8006cc0:	d0f4      	beq.n	8006cac <strlen+0x30>
 8006cc2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006cc6:	bf1f      	itttt	ne
 8006cc8:	3001      	addne	r0, #1
 8006cca:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8006cce:	3001      	addne	r0, #1
 8006cd0:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8006cd4:	bf18      	it	ne
 8006cd6:	3001      	addne	r0, #1
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop

08006cdc <__ssprint_r>:
 8006cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	4691      	mov	r9, r2
 8006ce4:	9001      	str	r0, [sp, #4]
 8006ce6:	6890      	ldr	r0, [r2, #8]
 8006ce8:	6817      	ldr	r7, [r2, #0]
 8006cea:	460d      	mov	r5, r1
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d072      	beq.n	8006dd6 <__ssprint_r+0xfa>
 8006cf0:	f04f 0a00 	mov.w	sl, #0
 8006cf4:	6808      	ldr	r0, [r1, #0]
 8006cf6:	688b      	ldr	r3, [r1, #8]
 8006cf8:	4654      	mov	r4, sl
 8006cfa:	2c00      	cmp	r4, #0
 8006cfc:	d048      	beq.n	8006d90 <__ssprint_r+0xb4>
 8006cfe:	429c      	cmp	r4, r3
 8006d00:	461e      	mov	r6, r3
 8006d02:	4698      	mov	r8, r3
 8006d04:	bf3c      	itt	cc
 8006d06:	4626      	movcc	r6, r4
 8006d08:	46a0      	movcc	r8, r4
 8006d0a:	d331      	bcc.n	8006d70 <__ssprint_r+0x94>
 8006d0c:	89ab      	ldrh	r3, [r5, #12]
 8006d0e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006d12:	d02d      	beq.n	8006d70 <__ssprint_r+0x94>
 8006d14:	696e      	ldr	r6, [r5, #20]
 8006d16:	6929      	ldr	r1, [r5, #16]
 8006d18:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006d1c:	ebc1 0800 	rsb	r8, r1, r0
 8006d20:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8006d24:	1c60      	adds	r0, r4, #1
 8006d26:	1076      	asrs	r6, r6, #1
 8006d28:	4440      	add	r0, r8
 8006d2a:	4286      	cmp	r6, r0
 8006d2c:	4632      	mov	r2, r6
 8006d2e:	bf3c      	itt	cc
 8006d30:	4606      	movcc	r6, r0
 8006d32:	4632      	movcc	r2, r6
 8006d34:	055b      	lsls	r3, r3, #21
 8006d36:	9801      	ldr	r0, [sp, #4]
 8006d38:	d52f      	bpl.n	8006d9a <__ssprint_r+0xbe>
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	f7fe fed8 	bl	8005af0 <_malloc_r>
 8006d40:	4683      	mov	fp, r0
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d032      	beq.n	8006dac <__ssprint_r+0xd0>
 8006d46:	6929      	ldr	r1, [r5, #16]
 8006d48:	4642      	mov	r2, r8
 8006d4a:	f7ff f9c3 	bl	80060d4 <memcpy>
 8006d4e:	89ab      	ldrh	r3, [r5, #12]
 8006d50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d58:	81ab      	strh	r3, [r5, #12]
 8006d5a:	ebc8 0306 	rsb	r3, r8, r6
 8006d5e:	eb0b 0008 	add.w	r0, fp, r8
 8006d62:	616e      	str	r6, [r5, #20]
 8006d64:	f8c5 b010 	str.w	fp, [r5, #16]
 8006d68:	6028      	str	r0, [r5, #0]
 8006d6a:	4626      	mov	r6, r4
 8006d6c:	60ab      	str	r3, [r5, #8]
 8006d6e:	46a0      	mov	r8, r4
 8006d70:	4642      	mov	r2, r8
 8006d72:	4651      	mov	r1, sl
 8006d74:	f000 fcb8 	bl	80076e8 <memmove>
 8006d78:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8006d7c:	68ab      	ldr	r3, [r5, #8]
 8006d7e:	6828      	ldr	r0, [r5, #0]
 8006d80:	1b9b      	subs	r3, r3, r6
 8006d82:	4440      	add	r0, r8
 8006d84:	1b14      	subs	r4, r2, r4
 8006d86:	60ab      	str	r3, [r5, #8]
 8006d88:	6028      	str	r0, [r5, #0]
 8006d8a:	f8c9 4008 	str.w	r4, [r9, #8]
 8006d8e:	b1e4      	cbz	r4, 8006dca <__ssprint_r+0xee>
 8006d90:	f8d7 a000 	ldr.w	sl, [r7]
 8006d94:	687c      	ldr	r4, [r7, #4]
 8006d96:	3708      	adds	r7, #8
 8006d98:	e7af      	b.n	8006cfa <__ssprint_r+0x1e>
 8006d9a:	f000 fd47 	bl	800782c <_realloc_r>
 8006d9e:	4683      	mov	fp, r0
 8006da0:	2800      	cmp	r0, #0
 8006da2:	d1da      	bne.n	8006d5a <__ssprint_r+0x7e>
 8006da4:	9801      	ldr	r0, [sp, #4]
 8006da6:	6929      	ldr	r1, [r5, #16]
 8006da8:	f7fe fd96 	bl	80058d8 <_free_r>
 8006dac:	9a01      	ldr	r2, [sp, #4]
 8006dae:	230c      	movs	r3, #12
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	89aa      	ldrh	r2, [r5, #12]
 8006db4:	2300      	movs	r3, #0
 8006db6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dba:	81aa      	strh	r2, [r5, #12]
 8006dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dc0:	f8c9 3008 	str.w	r3, [r9, #8]
 8006dc4:	f8c9 3004 	str.w	r3, [r9, #4]
 8006dc8:	e002      	b.n	8006dd0 <__ssprint_r+0xf4>
 8006dca:	f8c9 4004 	str.w	r4, [r9, #4]
 8006dce:	4620      	mov	r0, r4
 8006dd0:	b003      	add	sp, #12
 8006dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd6:	6050      	str	r0, [r2, #4]
 8006dd8:	e7fa      	b.n	8006dd0 <__ssprint_r+0xf4>
 8006dda:	bf00      	nop

08006ddc <_svfiprintf_r>:
 8006ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de0:	468a      	mov	sl, r1
 8006de2:	8989      	ldrh	r1, [r1, #12]
 8006de4:	b0ad      	sub	sp, #180	; 0xb4
 8006de6:	0609      	lsls	r1, r1, #24
 8006de8:	9007      	str	r0, [sp, #28]
 8006dea:	9305      	str	r3, [sp, #20]
 8006dec:	d504      	bpl.n	8006df8 <_svfiprintf_r+0x1c>
 8006dee:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 8422 	beq.w	800763c <_svfiprintf_r+0x860>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8006dfe:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 8006e02:	a90e      	add	r1, sp, #56	; 0x38
 8006e04:	930c      	str	r3, [sp, #48]	; 0x30
 8006e06:	932a      	str	r3, [sp, #168]	; 0xa8
 8006e08:	9329      	str	r3, [sp, #164]	; 0xa4
 8006e0a:	9304      	str	r3, [sp, #16]
 8006e0c:	ebc0 0308 	rsb	r3, r0, r8
 8006e10:	9001      	str	r0, [sp, #4]
 8006e12:	9128      	str	r1, [sp, #160]	; 0xa0
 8006e14:	4617      	mov	r7, r2
 8006e16:	460c      	mov	r4, r1
 8006e18:	930d      	str	r3, [sp, #52]	; 0x34
 8006e1a:	783b      	ldrb	r3, [r7, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	bf18      	it	ne
 8006e20:	2b25      	cmpne	r3, #37	; 0x25
 8006e22:	463d      	mov	r5, r7
 8006e24:	d016      	beq.n	8006e54 <_svfiprintf_r+0x78>
 8006e26:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8006e2a:	2b25      	cmp	r3, #37	; 0x25
 8006e2c:	bf18      	it	ne
 8006e2e:	2b00      	cmpne	r3, #0
 8006e30:	d1f9      	bne.n	8006e26 <_svfiprintf_r+0x4a>
 8006e32:	1bee      	subs	r6, r5, r7
 8006e34:	d00e      	beq.n	8006e54 <_svfiprintf_r+0x78>
 8006e36:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006e38:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8006e3a:	6027      	str	r7, [r4, #0]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	1992      	adds	r2, r2, r6
 8006e40:	2b07      	cmp	r3, #7
 8006e42:	6066      	str	r6, [r4, #4]
 8006e44:	922a      	str	r2, [sp, #168]	; 0xa8
 8006e46:	9329      	str	r3, [sp, #164]	; 0xa4
 8006e48:	f300 832a 	bgt.w	80074a0 <_svfiprintf_r+0x6c4>
 8006e4c:	3408      	adds	r4, #8
 8006e4e:	9b04      	ldr	r3, [sp, #16]
 8006e50:	199b      	adds	r3, r3, r6
 8006e52:	9304      	str	r3, [sp, #16]
 8006e54:	782b      	ldrb	r3, [r5, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 82c5 	beq.w	80073e6 <_svfiprintf_r+0x60a>
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	1c6f      	adds	r7, r5, #1
 8006e60:	4613      	mov	r3, r2
 8006e62:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8006e66:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006e6a:	9206      	str	r2, [sp, #24]
 8006e6c:	4693      	mov	fp, r2
 8006e6e:	f817 2b01 	ldrb.w	r2, [r7], #1
 8006e72:	f1a2 0120 	sub.w	r1, r2, #32
 8006e76:	2958      	cmp	r1, #88	; 0x58
 8006e78:	f200 8178 	bhi.w	800716c <_svfiprintf_r+0x390>
 8006e7c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006e80:	01760172 	.word	0x01760172
 8006e84:	016f0176 	.word	0x016f0176
 8006e88:	01760176 	.word	0x01760176
 8006e8c:	01760176 	.word	0x01760176
 8006e90:	01760176 	.word	0x01760176
 8006e94:	01d800af 	.word	0x01d800af
 8006e98:	00ba0176 	.word	0x00ba0176
 8006e9c:	017601da 	.word	0x017601da
 8006ea0:	01c401d5 	.word	0x01c401d5
 8006ea4:	01c401c4 	.word	0x01c401c4
 8006ea8:	01c401c4 	.word	0x01c401c4
 8006eac:	01c401c4 	.word	0x01c401c4
 8006eb0:	01c401c4 	.word	0x01c401c4
 8006eb4:	01760176 	.word	0x01760176
 8006eb8:	01760176 	.word	0x01760176
 8006ebc:	01760176 	.word	0x01760176
 8006ec0:	01760176 	.word	0x01760176
 8006ec4:	01760176 	.word	0x01760176
 8006ec8:	017601a7 	.word	0x017601a7
 8006ecc:	01760176 	.word	0x01760176
 8006ed0:	01760176 	.word	0x01760176
 8006ed4:	01760176 	.word	0x01760176
 8006ed8:	01760176 	.word	0x01760176
 8006edc:	005c0176 	.word	0x005c0176
 8006ee0:	01760176 	.word	0x01760176
 8006ee4:	01760176 	.word	0x01760176
 8006ee8:	00a00176 	.word	0x00a00176
 8006eec:	01760176 	.word	0x01760176
 8006ef0:	0176016a 	.word	0x0176016a
 8006ef4:	01760176 	.word	0x01760176
 8006ef8:	01760176 	.word	0x01760176
 8006efc:	01760176 	.word	0x01760176
 8006f00:	01760176 	.word	0x01760176
 8006f04:	01170176 	.word	0x01170176
 8006f08:	01760105 	.word	0x01760105
 8006f0c:	01760176 	.word	0x01760176
 8006f10:	01050102 	.word	0x01050102
 8006f14:	01760176 	.word	0x01760176
 8006f18:	01760059 	.word	0x01760059
 8006f1c:	005e00d1 	.word	0x005e00d1
 8006f20:	005900bd 	.word	0x005900bd
 8006f24:	01870176 	.word	0x01870176
 8006f28:	00a20176 	.word	0x00a20176
 8006f2c:	01760176 	.word	0x01760176
 8006f30:	00e2      	.short	0x00e2
 8006f32:	f04b 0b10 	orr.w	fp, fp, #16
 8006f36:	e79a      	b.n	8006e6e <_svfiprintf_r+0x92>
 8006f38:	f04b 0b10 	orr.w	fp, fp, #16
 8006f3c:	f01b 0210 	ands.w	r2, fp, #16
 8006f40:	f000 8313 	beq.w	800756a <_svfiprintf_r+0x78e>
 8006f44:	9805      	ldr	r0, [sp, #20]
 8006f46:	6803      	ldr	r3, [r0, #0]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	1a99      	subs	r1, r3, r2
 8006f4c:	bf18      	it	ne
 8006f4e:	2101      	movne	r1, #1
 8006f50:	3004      	adds	r0, #4
 8006f52:	9005      	str	r0, [sp, #20]
 8006f54:	2000      	movs	r0, #0
 8006f56:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 8006f5a:	2d00      	cmp	r5, #0
 8006f5c:	bfa8      	it	ge
 8006f5e:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 8006f62:	2d00      	cmp	r5, #0
 8006f64:	bf18      	it	ne
 8006f66:	f041 0101 	orrne.w	r1, r1, #1
 8006f6a:	2900      	cmp	r1, #0
 8006f6c:	f000 8228 	beq.w	80073c0 <_svfiprintf_r+0x5e4>
 8006f70:	2a01      	cmp	r2, #1
 8006f72:	f000 82cf 	beq.w	8007514 <_svfiprintf_r+0x738>
 8006f76:	2a02      	cmp	r2, #2
 8006f78:	bf18      	it	ne
 8006f7a:	4642      	movne	r2, r8
 8006f7c:	d101      	bne.n	8006f82 <_svfiprintf_r+0x1a6>
 8006f7e:	e2b9      	b.n	80074f4 <_svfiprintf_r+0x718>
 8006f80:	4602      	mov	r2, r0
 8006f82:	f003 0107 	and.w	r1, r3, #7
 8006f86:	3130      	adds	r1, #48	; 0x30
 8006f88:	1e50      	subs	r0, r2, #1
 8006f8a:	08db      	lsrs	r3, r3, #3
 8006f8c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006f90:	d1f6      	bne.n	8006f80 <_svfiprintf_r+0x1a4>
 8006f92:	f01b 0f01 	tst.w	fp, #1
 8006f96:	9009      	str	r0, [sp, #36]	; 0x24
 8006f98:	f040 831a 	bne.w	80075d0 <_svfiprintf_r+0x7f4>
 8006f9c:	ebc0 0308 	rsb	r3, r0, r8
 8006fa0:	9303      	str	r3, [sp, #12]
 8006fa2:	9508      	str	r5, [sp, #32]
 8006fa4:	9803      	ldr	r0, [sp, #12]
 8006fa6:	9908      	ldr	r1, [sp, #32]
 8006fa8:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 8006fac:	4288      	cmp	r0, r1
 8006fae:	bfb8      	it	lt
 8006fb0:	4608      	movlt	r0, r1
 8006fb2:	9002      	str	r0, [sp, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 808b 	beq.w	80070d0 <_svfiprintf_r+0x2f4>
 8006fba:	3001      	adds	r0, #1
 8006fbc:	9002      	str	r0, [sp, #8]
 8006fbe:	e087      	b.n	80070d0 <_svfiprintf_r+0x2f4>
 8006fc0:	f04b 0b10 	orr.w	fp, fp, #16
 8006fc4:	f01b 0f10 	tst.w	fp, #16
 8006fc8:	f000 82c1 	beq.w	800754e <_svfiprintf_r+0x772>
 8006fcc:	9805      	ldr	r0, [sp, #20]
 8006fce:	6803      	ldr	r3, [r0, #0]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	1c19      	adds	r1, r3, #0
 8006fd4:	bf18      	it	ne
 8006fd6:	2101      	movne	r1, #1
 8006fd8:	3004      	adds	r0, #4
 8006fda:	9005      	str	r0, [sp, #20]
 8006fdc:	e7ba      	b.n	8006f54 <_svfiprintf_r+0x178>
 8006fde:	9805      	ldr	r0, [sp, #20]
 8006fe0:	9905      	ldr	r1, [sp, #20]
 8006fe2:	6800      	ldr	r0, [r0, #0]
 8006fe4:	1d0a      	adds	r2, r1, #4
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	9006      	str	r0, [sp, #24]
 8006fea:	f280 82e0 	bge.w	80075ae <_svfiprintf_r+0x7d2>
 8006fee:	4240      	negs	r0, r0
 8006ff0:	9006      	str	r0, [sp, #24]
 8006ff2:	9205      	str	r2, [sp, #20]
 8006ff4:	f04b 0b04 	orr.w	fp, fp, #4
 8006ff8:	e739      	b.n	8006e6e <_svfiprintf_r+0x92>
 8006ffa:	9b05      	ldr	r3, [sp, #20]
 8006ffc:	9905      	ldr	r1, [sp, #20]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2230      	movs	r2, #48	; 0x30
 8007002:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 8007006:	2278      	movs	r2, #120	; 0x78
 8007008:	3104      	adds	r1, #4
 800700a:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 800700e:	4aaf      	ldr	r2, [pc, #700]	; (80072cc <_svfiprintf_r+0x4f0>)
 8007010:	9105      	str	r1, [sp, #20]
 8007012:	1c19      	adds	r1, r3, #0
 8007014:	bf18      	it	ne
 8007016:	2101      	movne	r1, #1
 8007018:	920c      	str	r2, [sp, #48]	; 0x30
 800701a:	f04b 0b02 	orr.w	fp, fp, #2
 800701e:	2202      	movs	r2, #2
 8007020:	e798      	b.n	8006f54 <_svfiprintf_r+0x178>
 8007022:	f01b 0f10 	tst.w	fp, #16
 8007026:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800702a:	f040 82dd 	bne.w	80075e8 <_svfiprintf_r+0x80c>
 800702e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007032:	f000 82fb 	beq.w	800762c <_svfiprintf_r+0x850>
 8007036:	9a05      	ldr	r2, [sp, #20]
 8007038:	9804      	ldr	r0, [sp, #16]
 800703a:	6813      	ldr	r3, [r2, #0]
 800703c:	3204      	adds	r2, #4
 800703e:	9205      	str	r2, [sp, #20]
 8007040:	8018      	strh	r0, [r3, #0]
 8007042:	e6ea      	b.n	8006e1a <_svfiprintf_r+0x3e>
 8007044:	49a1      	ldr	r1, [pc, #644]	; (80072cc <_svfiprintf_r+0x4f0>)
 8007046:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800704a:	910c      	str	r1, [sp, #48]	; 0x30
 800704c:	f01b 0f10 	tst.w	fp, #16
 8007050:	d103      	bne.n	800705a <_svfiprintf_r+0x27e>
 8007052:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007056:	f040 82d3 	bne.w	8007600 <_svfiprintf_r+0x824>
 800705a:	9805      	ldr	r0, [sp, #20]
 800705c:	6803      	ldr	r3, [r0, #0]
 800705e:	3004      	adds	r0, #4
 8007060:	9005      	str	r0, [sp, #20]
 8007062:	1c19      	adds	r1, r3, #0
 8007064:	bf18      	it	ne
 8007066:	2101      	movne	r1, #1
 8007068:	ea1b 0f01 	tst.w	fp, r1
 800706c:	f000 8287 	beq.w	800757e <_svfiprintf_r+0x7a2>
 8007070:	2130      	movs	r1, #48	; 0x30
 8007072:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 8007076:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 800707a:	f04b 0b02 	orr.w	fp, fp, #2
 800707e:	2101      	movs	r1, #1
 8007080:	2202      	movs	r2, #2
 8007082:	e767      	b.n	8006f54 <_svfiprintf_r+0x178>
 8007084:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8007088:	e6f1      	b.n	8006e6e <_svfiprintf_r+0x92>
 800708a:	f01b 0f10 	tst.w	fp, #16
 800708e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007092:	f000 80a4 	beq.w	80071de <_svfiprintf_r+0x402>
 8007096:	9805      	ldr	r0, [sp, #20]
 8007098:	6803      	ldr	r3, [r0, #0]
 800709a:	3004      	adds	r0, #4
 800709c:	9005      	str	r0, [sp, #20]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f2c0 80a9 	blt.w	80071f6 <_svfiprintf_r+0x41a>
 80070a4:	bf0c      	ite	eq
 80070a6:	2100      	moveq	r1, #0
 80070a8:	2101      	movne	r1, #1
 80070aa:	2201      	movs	r2, #1
 80070ac:	e755      	b.n	8006f5a <_svfiprintf_r+0x17e>
 80070ae:	9b05      	ldr	r3, [sp, #20]
 80070b0:	9905      	ldr	r1, [sp, #20]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2001      	movs	r0, #1
 80070b6:	2200      	movs	r2, #0
 80070b8:	3104      	adds	r1, #4
 80070ba:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 80070be:	ab1e      	add	r3, sp, #120	; 0x78
 80070c0:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 80070c4:	9002      	str	r0, [sp, #8]
 80070c6:	9105      	str	r1, [sp, #20]
 80070c8:	9003      	str	r0, [sp, #12]
 80070ca:	9309      	str	r3, [sp, #36]	; 0x24
 80070cc:	2300      	movs	r3, #0
 80070ce:	9308      	str	r3, [sp, #32]
 80070d0:	f01b 0302 	ands.w	r3, fp, #2
 80070d4:	930a      	str	r3, [sp, #40]	; 0x28
 80070d6:	d002      	beq.n	80070de <_svfiprintf_r+0x302>
 80070d8:	9b02      	ldr	r3, [sp, #8]
 80070da:	3302      	adds	r3, #2
 80070dc:	9302      	str	r3, [sp, #8]
 80070de:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 80070e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80070e4:	f040 80c1 	bne.w	800726a <_svfiprintf_r+0x48e>
 80070e8:	9b06      	ldr	r3, [sp, #24]
 80070ea:	9802      	ldr	r0, [sp, #8]
 80070ec:	1a1d      	subs	r5, r3, r0
 80070ee:	2d00      	cmp	r5, #0
 80070f0:	f340 80bb 	ble.w	800726a <_svfiprintf_r+0x48e>
 80070f4:	2d10      	cmp	r5, #16
 80070f6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80070f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80070fa:	4e75      	ldr	r6, [pc, #468]	; (80072d0 <_svfiprintf_r+0x4f4>)
 80070fc:	dd1f      	ble.n	800713e <_svfiprintf_r+0x362>
 80070fe:	4621      	mov	r1, r4
 8007100:	f04f 0910 	mov.w	r9, #16
 8007104:	9c07      	ldr	r4, [sp, #28]
 8007106:	e002      	b.n	800710e <_svfiprintf_r+0x332>
 8007108:	3d10      	subs	r5, #16
 800710a:	2d10      	cmp	r5, #16
 800710c:	dd16      	ble.n	800713c <_svfiprintf_r+0x360>
 800710e:	3301      	adds	r3, #1
 8007110:	3210      	adds	r2, #16
 8007112:	e881 0240 	stmia.w	r1, {r6, r9}
 8007116:	3108      	adds	r1, #8
 8007118:	2b07      	cmp	r3, #7
 800711a:	922a      	str	r2, [sp, #168]	; 0xa8
 800711c:	9329      	str	r3, [sp, #164]	; 0xa4
 800711e:	ddf3      	ble.n	8007108 <_svfiprintf_r+0x32c>
 8007120:	4620      	mov	r0, r4
 8007122:	4651      	mov	r1, sl
 8007124:	4642      	mov	r2, r8
 8007126:	f7ff fdd9 	bl	8006cdc <__ssprint_r>
 800712a:	2800      	cmp	r0, #0
 800712c:	f040 8162 	bne.w	80073f4 <_svfiprintf_r+0x618>
 8007130:	3d10      	subs	r5, #16
 8007132:	2d10      	cmp	r5, #16
 8007134:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007136:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007138:	a90e      	add	r1, sp, #56	; 0x38
 800713a:	dce8      	bgt.n	800710e <_svfiprintf_r+0x332>
 800713c:	460c      	mov	r4, r1
 800713e:	3301      	adds	r3, #1
 8007140:	1952      	adds	r2, r2, r5
 8007142:	2b07      	cmp	r3, #7
 8007144:	6026      	str	r6, [r4, #0]
 8007146:	6065      	str	r5, [r4, #4]
 8007148:	922a      	str	r2, [sp, #168]	; 0xa8
 800714a:	9329      	str	r3, [sp, #164]	; 0xa4
 800714c:	f300 8219 	bgt.w	8007582 <_svfiprintf_r+0x7a6>
 8007150:	3408      	adds	r4, #8
 8007152:	e08c      	b.n	800726e <_svfiprintf_r+0x492>
 8007154:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007158:	4b5e      	ldr	r3, [pc, #376]	; (80072d4 <_svfiprintf_r+0x4f8>)
 800715a:	930c      	str	r3, [sp, #48]	; 0x30
 800715c:	e776      	b.n	800704c <_svfiprintf_r+0x270>
 800715e:	f04b 0b01 	orr.w	fp, fp, #1
 8007162:	e684      	b.n	8006e6e <_svfiprintf_r+0x92>
 8007164:	2b00      	cmp	r3, #0
 8007166:	bf08      	it	eq
 8007168:	2320      	moveq	r3, #32
 800716a:	e680      	b.n	8006e6e <_svfiprintf_r+0x92>
 800716c:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007170:	2a00      	cmp	r2, #0
 8007172:	f000 8138 	beq.w	80073e6 <_svfiprintf_r+0x60a>
 8007176:	2301      	movs	r3, #1
 8007178:	9302      	str	r3, [sp, #8]
 800717a:	2300      	movs	r3, #0
 800717c:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007180:	2301      	movs	r3, #1
 8007182:	9303      	str	r3, [sp, #12]
 8007184:	ab1e      	add	r3, sp, #120	; 0x78
 8007186:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800718a:	9309      	str	r3, [sp, #36]	; 0x24
 800718c:	e79e      	b.n	80070cc <_svfiprintf_r+0x2f0>
 800718e:	9b05      	ldr	r3, [sp, #20]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	9309      	str	r3, [sp, #36]	; 0x24
 8007194:	9b05      	ldr	r3, [sp, #20]
 8007196:	3304      	adds	r3, #4
 8007198:	9305      	str	r3, [sp, #20]
 800719a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800719c:	2600      	movs	r6, #0
 800719e:	f88d 60af 	strb.w	r6, [sp, #175]	; 0xaf
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 8259 	beq.w	800765a <_svfiprintf_r+0x87e>
 80071a8:	2d00      	cmp	r5, #0
 80071aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071ac:	f2c0 822d 	blt.w	800760a <_svfiprintf_r+0x82e>
 80071b0:	4631      	mov	r1, r6
 80071b2:	462a      	mov	r2, r5
 80071b4:	f7fe ff50 	bl	8006058 <memchr>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	f000 8258 	beq.w	800766e <_svfiprintf_r+0x892>
 80071be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c0:	9608      	str	r6, [sp, #32]
 80071c2:	1ac0      	subs	r0, r0, r3
 80071c4:	42a8      	cmp	r0, r5
 80071c6:	9003      	str	r0, [sp, #12]
 80071c8:	bfc8      	it	gt
 80071ca:	9503      	strgt	r5, [sp, #12]
 80071cc:	e6ea      	b.n	8006fa4 <_svfiprintf_r+0x1c8>
 80071ce:	f04b 0b10 	orr.w	fp, fp, #16
 80071d2:	f01b 0f10 	tst.w	fp, #16
 80071d6:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80071da:	f47f af5c 	bne.w	8007096 <_svfiprintf_r+0x2ba>
 80071de:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80071e2:	f000 8208 	beq.w	80075f6 <_svfiprintf_r+0x81a>
 80071e6:	9905      	ldr	r1, [sp, #20]
 80071e8:	f9b1 3000 	ldrsh.w	r3, [r1]
 80071ec:	3104      	adds	r1, #4
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	9105      	str	r1, [sp, #20]
 80071f2:	f6bf af57 	bge.w	80070a4 <_svfiprintf_r+0x2c8>
 80071f6:	425b      	negs	r3, r3
 80071f8:	222d      	movs	r2, #45	; 0x2d
 80071fa:	1c19      	adds	r1, r3, #0
 80071fc:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8007200:	bf18      	it	ne
 8007202:	2101      	movne	r1, #1
 8007204:	2201      	movs	r2, #1
 8007206:	e6a8      	b.n	8006f5a <_svfiprintf_r+0x17e>
 8007208:	4638      	mov	r0, r7
 800720a:	2100      	movs	r1, #0
 800720c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8007210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007214:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007218:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800721c:	2e09      	cmp	r6, #9
 800721e:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 8007222:	4607      	mov	r7, r0
 8007224:	d9f2      	bls.n	800720c <_svfiprintf_r+0x430>
 8007226:	9106      	str	r1, [sp, #24]
 8007228:	e623      	b.n	8006e72 <_svfiprintf_r+0x96>
 800722a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800722e:	e61e      	b.n	8006e6e <_svfiprintf_r+0x92>
 8007230:	232b      	movs	r3, #43	; 0x2b
 8007232:	e61c      	b.n	8006e6e <_svfiprintf_r+0x92>
 8007234:	f817 2b01 	ldrb.w	r2, [r7], #1
 8007238:	2a2a      	cmp	r2, #42	; 0x2a
 800723a:	f000 81ae 	beq.w	800759a <_svfiprintf_r+0x7be>
 800723e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007242:	2500      	movs	r5, #0
 8007244:	2909      	cmp	r1, #9
 8007246:	f63f ae14 	bhi.w	8006e72 <_svfiprintf_r+0x96>
 800724a:	4638      	mov	r0, r7
 800724c:	2500      	movs	r5, #0
 800724e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007252:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8007256:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 800725a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800725e:	2909      	cmp	r1, #9
 8007260:	4607      	mov	r7, r0
 8007262:	d9f4      	bls.n	800724e <_svfiprintf_r+0x472>
 8007264:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8007268:	e603      	b.n	8006e72 <_svfiprintf_r+0x96>
 800726a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800726c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800726e:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
 8007272:	b161      	cbz	r1, 800728e <_svfiprintf_r+0x4b2>
 8007274:	3301      	adds	r3, #1
 8007276:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
 800727a:	3201      	adds	r2, #1
 800727c:	6021      	str	r1, [r4, #0]
 800727e:	2101      	movs	r1, #1
 8007280:	2b07      	cmp	r3, #7
 8007282:	6061      	str	r1, [r4, #4]
 8007284:	922a      	str	r2, [sp, #168]	; 0xa8
 8007286:	9329      	str	r3, [sp, #164]	; 0xa4
 8007288:	f300 811e 	bgt.w	80074c8 <_svfiprintf_r+0x6ec>
 800728c:	3408      	adds	r4, #8
 800728e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007290:	b159      	cbz	r1, 80072aa <_svfiprintf_r+0x4ce>
 8007292:	3301      	adds	r3, #1
 8007294:	a92b      	add	r1, sp, #172	; 0xac
 8007296:	3202      	adds	r2, #2
 8007298:	6021      	str	r1, [r4, #0]
 800729a:	2102      	movs	r1, #2
 800729c:	2b07      	cmp	r3, #7
 800729e:	6061      	str	r1, [r4, #4]
 80072a0:	922a      	str	r2, [sp, #168]	; 0xa8
 80072a2:	9329      	str	r3, [sp, #164]	; 0xa4
 80072a4:	f300 811b 	bgt.w	80074de <_svfiprintf_r+0x702>
 80072a8:	3408      	adds	r4, #8
 80072aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80072ac:	2880      	cmp	r0, #128	; 0x80
 80072ae:	f000 80ae 	beq.w	800740e <_svfiprintf_r+0x632>
 80072b2:	9808      	ldr	r0, [sp, #32]
 80072b4:	9903      	ldr	r1, [sp, #12]
 80072b6:	1a45      	subs	r5, r0, r1
 80072b8:	2d00      	cmp	r5, #0
 80072ba:	dd33      	ble.n	8007324 <_svfiprintf_r+0x548>
 80072bc:	2d10      	cmp	r5, #16
 80072be:	4e06      	ldr	r6, [pc, #24]	; (80072d8 <_svfiprintf_r+0x4fc>)
 80072c0:	dd26      	ble.n	8007310 <_svfiprintf_r+0x534>
 80072c2:	4621      	mov	r1, r4
 80072c4:	f04f 0910 	mov.w	r9, #16
 80072c8:	9c07      	ldr	r4, [sp, #28]
 80072ca:	e00a      	b.n	80072e2 <_svfiprintf_r+0x506>
 80072cc:	080087c4 	.word	0x080087c4
 80072d0:	08008780 	.word	0x08008780
 80072d4:	080087b0 	.word	0x080087b0
 80072d8:	08008790 	.word	0x08008790
 80072dc:	3d10      	subs	r5, #16
 80072de:	2d10      	cmp	r5, #16
 80072e0:	dd15      	ble.n	800730e <_svfiprintf_r+0x532>
 80072e2:	3301      	adds	r3, #1
 80072e4:	3210      	adds	r2, #16
 80072e6:	e881 0240 	stmia.w	r1, {r6, r9}
 80072ea:	3108      	adds	r1, #8
 80072ec:	2b07      	cmp	r3, #7
 80072ee:	922a      	str	r2, [sp, #168]	; 0xa8
 80072f0:	9329      	str	r3, [sp, #164]	; 0xa4
 80072f2:	ddf3      	ble.n	80072dc <_svfiprintf_r+0x500>
 80072f4:	4620      	mov	r0, r4
 80072f6:	4651      	mov	r1, sl
 80072f8:	4642      	mov	r2, r8
 80072fa:	f7ff fcef 	bl	8006cdc <__ssprint_r>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d178      	bne.n	80073f4 <_svfiprintf_r+0x618>
 8007302:	3d10      	subs	r5, #16
 8007304:	2d10      	cmp	r5, #16
 8007306:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007308:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800730a:	a90e      	add	r1, sp, #56	; 0x38
 800730c:	dce9      	bgt.n	80072e2 <_svfiprintf_r+0x506>
 800730e:	460c      	mov	r4, r1
 8007310:	3301      	adds	r3, #1
 8007312:	1952      	adds	r2, r2, r5
 8007314:	2b07      	cmp	r3, #7
 8007316:	6026      	str	r6, [r4, #0]
 8007318:	6065      	str	r5, [r4, #4]
 800731a:	922a      	str	r2, [sp, #168]	; 0xa8
 800731c:	9329      	str	r3, [sp, #164]	; 0xa4
 800731e:	f300 80c8 	bgt.w	80074b2 <_svfiprintf_r+0x6d6>
 8007322:	3408      	adds	r4, #8
 8007324:	9903      	ldr	r1, [sp, #12]
 8007326:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007328:	3301      	adds	r3, #1
 800732a:	1852      	adds	r2, r2, r1
 800732c:	2b07      	cmp	r3, #7
 800732e:	e884 0003 	stmia.w	r4, {r0, r1}
 8007332:	922a      	str	r2, [sp, #168]	; 0xa8
 8007334:	9329      	str	r3, [sp, #164]	; 0xa4
 8007336:	bfd8      	it	le
 8007338:	f104 0108 	addle.w	r1, r4, #8
 800733c:	f300 809a 	bgt.w	8007474 <_svfiprintf_r+0x698>
 8007340:	f01b 0f04 	tst.w	fp, #4
 8007344:	d02e      	beq.n	80073a4 <_svfiprintf_r+0x5c8>
 8007346:	9b06      	ldr	r3, [sp, #24]
 8007348:	9802      	ldr	r0, [sp, #8]
 800734a:	1a1d      	subs	r5, r3, r0
 800734c:	2d00      	cmp	r5, #0
 800734e:	dd29      	ble.n	80073a4 <_svfiprintf_r+0x5c8>
 8007350:	2d10      	cmp	r5, #16
 8007352:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007354:	4e97      	ldr	r6, [pc, #604]	; (80075b4 <_svfiprintf_r+0x7d8>)
 8007356:	dd1c      	ble.n	8007392 <_svfiprintf_r+0x5b6>
 8007358:	2410      	movs	r4, #16
 800735a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800735e:	e002      	b.n	8007366 <_svfiprintf_r+0x58a>
 8007360:	3d10      	subs	r5, #16
 8007362:	2d10      	cmp	r5, #16
 8007364:	dd15      	ble.n	8007392 <_svfiprintf_r+0x5b6>
 8007366:	3301      	adds	r3, #1
 8007368:	3210      	adds	r2, #16
 800736a:	600e      	str	r6, [r1, #0]
 800736c:	604c      	str	r4, [r1, #4]
 800736e:	3108      	adds	r1, #8
 8007370:	2b07      	cmp	r3, #7
 8007372:	922a      	str	r2, [sp, #168]	; 0xa8
 8007374:	9329      	str	r3, [sp, #164]	; 0xa4
 8007376:	ddf3      	ble.n	8007360 <_svfiprintf_r+0x584>
 8007378:	4648      	mov	r0, r9
 800737a:	4651      	mov	r1, sl
 800737c:	4642      	mov	r2, r8
 800737e:	f7ff fcad 	bl	8006cdc <__ssprint_r>
 8007382:	2800      	cmp	r0, #0
 8007384:	d136      	bne.n	80073f4 <_svfiprintf_r+0x618>
 8007386:	3d10      	subs	r5, #16
 8007388:	2d10      	cmp	r5, #16
 800738a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800738c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800738e:	a90e      	add	r1, sp, #56	; 0x38
 8007390:	dce9      	bgt.n	8007366 <_svfiprintf_r+0x58a>
 8007392:	3301      	adds	r3, #1
 8007394:	18aa      	adds	r2, r5, r2
 8007396:	2b07      	cmp	r3, #7
 8007398:	600e      	str	r6, [r1, #0]
 800739a:	604d      	str	r5, [r1, #4]
 800739c:	922a      	str	r2, [sp, #168]	; 0xa8
 800739e:	9329      	str	r3, [sp, #164]	; 0xa4
 80073a0:	f300 810c 	bgt.w	80075bc <_svfiprintf_r+0x7e0>
 80073a4:	9b04      	ldr	r3, [sp, #16]
 80073a6:	9902      	ldr	r1, [sp, #8]
 80073a8:	9806      	ldr	r0, [sp, #24]
 80073aa:	4281      	cmp	r1, r0
 80073ac:	bfac      	ite	ge
 80073ae:	185b      	addge	r3, r3, r1
 80073b0:	181b      	addlt	r3, r3, r0
 80073b2:	9304      	str	r3, [sp, #16]
 80073b4:	2a00      	cmp	r2, #0
 80073b6:	d167      	bne.n	8007488 <_svfiprintf_r+0x6ac>
 80073b8:	2300      	movs	r3, #0
 80073ba:	9329      	str	r3, [sp, #164]	; 0xa4
 80073bc:	ac0e      	add	r4, sp, #56	; 0x38
 80073be:	e52c      	b.n	8006e1a <_svfiprintf_r+0x3e>
 80073c0:	2a00      	cmp	r2, #0
 80073c2:	d169      	bne.n	8007498 <_svfiprintf_r+0x6bc>
 80073c4:	f01b 0f01 	tst.w	fp, #1
 80073c8:	bf04      	itt	eq
 80073ca:	9203      	streq	r2, [sp, #12]
 80073cc:	f8cd 8024 	streq.w	r8, [sp, #36]	; 0x24
 80073d0:	f43f ade7 	beq.w	8006fa2 <_svfiprintf_r+0x1c6>
 80073d4:	2330      	movs	r3, #48	; 0x30
 80073d6:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 80073da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073dc:	9303      	str	r3, [sp, #12]
 80073de:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 80073e2:	9309      	str	r3, [sp, #36]	; 0x24
 80073e4:	e5dd      	b.n	8006fa2 <_svfiprintf_r+0x1c6>
 80073e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80073e8:	b123      	cbz	r3, 80073f4 <_svfiprintf_r+0x618>
 80073ea:	9807      	ldr	r0, [sp, #28]
 80073ec:	4651      	mov	r1, sl
 80073ee:	aa28      	add	r2, sp, #160	; 0xa0
 80073f0:	f7ff fc74 	bl	8006cdc <__ssprint_r>
 80073f4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80073f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80073fc:	9b04      	ldr	r3, [sp, #16]
 80073fe:	bf18      	it	ne
 8007400:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8007404:	9304      	str	r3, [sp, #16]
 8007406:	9804      	ldr	r0, [sp, #16]
 8007408:	b02d      	add	sp, #180	; 0xb4
 800740a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740e:	9906      	ldr	r1, [sp, #24]
 8007410:	9802      	ldr	r0, [sp, #8]
 8007412:	1a0d      	subs	r5, r1, r0
 8007414:	2d00      	cmp	r5, #0
 8007416:	f77f af4c 	ble.w	80072b2 <_svfiprintf_r+0x4d6>
 800741a:	2d10      	cmp	r5, #16
 800741c:	4e66      	ldr	r6, [pc, #408]	; (80075b8 <_svfiprintf_r+0x7dc>)
 800741e:	dd1e      	ble.n	800745e <_svfiprintf_r+0x682>
 8007420:	4621      	mov	r1, r4
 8007422:	f04f 0910 	mov.w	r9, #16
 8007426:	9c07      	ldr	r4, [sp, #28]
 8007428:	e002      	b.n	8007430 <_svfiprintf_r+0x654>
 800742a:	3d10      	subs	r5, #16
 800742c:	2d10      	cmp	r5, #16
 800742e:	dd15      	ble.n	800745c <_svfiprintf_r+0x680>
 8007430:	3301      	adds	r3, #1
 8007432:	3210      	adds	r2, #16
 8007434:	e881 0240 	stmia.w	r1, {r6, r9}
 8007438:	3108      	adds	r1, #8
 800743a:	2b07      	cmp	r3, #7
 800743c:	922a      	str	r2, [sp, #168]	; 0xa8
 800743e:	9329      	str	r3, [sp, #164]	; 0xa4
 8007440:	ddf3      	ble.n	800742a <_svfiprintf_r+0x64e>
 8007442:	4620      	mov	r0, r4
 8007444:	4651      	mov	r1, sl
 8007446:	4642      	mov	r2, r8
 8007448:	f7ff fc48 	bl	8006cdc <__ssprint_r>
 800744c:	2800      	cmp	r0, #0
 800744e:	d1d1      	bne.n	80073f4 <_svfiprintf_r+0x618>
 8007450:	3d10      	subs	r5, #16
 8007452:	2d10      	cmp	r5, #16
 8007454:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007456:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007458:	a90e      	add	r1, sp, #56	; 0x38
 800745a:	dce9      	bgt.n	8007430 <_svfiprintf_r+0x654>
 800745c:	460c      	mov	r4, r1
 800745e:	3301      	adds	r3, #1
 8007460:	1952      	adds	r2, r2, r5
 8007462:	2b07      	cmp	r3, #7
 8007464:	6026      	str	r6, [r4, #0]
 8007466:	6065      	str	r5, [r4, #4]
 8007468:	922a      	str	r2, [sp, #168]	; 0xa8
 800746a:	9329      	str	r3, [sp, #164]	; 0xa4
 800746c:	f300 80d2 	bgt.w	8007614 <_svfiprintf_r+0x838>
 8007470:	3408      	adds	r4, #8
 8007472:	e71e      	b.n	80072b2 <_svfiprintf_r+0x4d6>
 8007474:	9807      	ldr	r0, [sp, #28]
 8007476:	4651      	mov	r1, sl
 8007478:	4642      	mov	r2, r8
 800747a:	f7ff fc2f 	bl	8006cdc <__ssprint_r>
 800747e:	2800      	cmp	r0, #0
 8007480:	d1b8      	bne.n	80073f4 <_svfiprintf_r+0x618>
 8007482:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007484:	a90e      	add	r1, sp, #56	; 0x38
 8007486:	e75b      	b.n	8007340 <_svfiprintf_r+0x564>
 8007488:	9807      	ldr	r0, [sp, #28]
 800748a:	4651      	mov	r1, sl
 800748c:	4642      	mov	r2, r8
 800748e:	f7ff fc25 	bl	8006cdc <__ssprint_r>
 8007492:	2800      	cmp	r0, #0
 8007494:	d090      	beq.n	80073b8 <_svfiprintf_r+0x5dc>
 8007496:	e7ad      	b.n	80073f4 <_svfiprintf_r+0x618>
 8007498:	9103      	str	r1, [sp, #12]
 800749a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800749e:	e580      	b.n	8006fa2 <_svfiprintf_r+0x1c6>
 80074a0:	9807      	ldr	r0, [sp, #28]
 80074a2:	4651      	mov	r1, sl
 80074a4:	4642      	mov	r2, r8
 80074a6:	f7ff fc19 	bl	8006cdc <__ssprint_r>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d1a2      	bne.n	80073f4 <_svfiprintf_r+0x618>
 80074ae:	ac0e      	add	r4, sp, #56	; 0x38
 80074b0:	e4cd      	b.n	8006e4e <_svfiprintf_r+0x72>
 80074b2:	9807      	ldr	r0, [sp, #28]
 80074b4:	4651      	mov	r1, sl
 80074b6:	4642      	mov	r2, r8
 80074b8:	f7ff fc10 	bl	8006cdc <__ssprint_r>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d199      	bne.n	80073f4 <_svfiprintf_r+0x618>
 80074c0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80074c2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80074c4:	ac0e      	add	r4, sp, #56	; 0x38
 80074c6:	e72d      	b.n	8007324 <_svfiprintf_r+0x548>
 80074c8:	9807      	ldr	r0, [sp, #28]
 80074ca:	4651      	mov	r1, sl
 80074cc:	4642      	mov	r2, r8
 80074ce:	f7ff fc05 	bl	8006cdc <__ssprint_r>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d18e      	bne.n	80073f4 <_svfiprintf_r+0x618>
 80074d6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80074d8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80074da:	ac0e      	add	r4, sp, #56	; 0x38
 80074dc:	e6d7      	b.n	800728e <_svfiprintf_r+0x4b2>
 80074de:	9807      	ldr	r0, [sp, #28]
 80074e0:	4651      	mov	r1, sl
 80074e2:	4642      	mov	r2, r8
 80074e4:	f7ff fbfa 	bl	8006cdc <__ssprint_r>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d183      	bne.n	80073f4 <_svfiprintf_r+0x618>
 80074ec:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80074ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80074f0:	ac0e      	add	r4, sp, #56	; 0x38
 80074f2:	e6da      	b.n	80072aa <_svfiprintf_r+0x4ce>
 80074f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80074f6:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 80074fa:	f003 000f 	and.w	r0, r3, #15
 80074fe:	4611      	mov	r1, r2
 8007500:	5c30      	ldrb	r0, [r6, r0]
 8007502:	3a01      	subs	r2, #1
 8007504:	091b      	lsrs	r3, r3, #4
 8007506:	7008      	strb	r0, [r1, #0]
 8007508:	d1f7      	bne.n	80074fa <_svfiprintf_r+0x71e>
 800750a:	ebc1 0308 	rsb	r3, r1, r8
 800750e:	9109      	str	r1, [sp, #36]	; 0x24
 8007510:	9303      	str	r3, [sp, #12]
 8007512:	e546      	b.n	8006fa2 <_svfiprintf_r+0x1c6>
 8007514:	2b09      	cmp	r3, #9
 8007516:	bf82      	ittt	hi
 8007518:	f64c 46cd 	movwhi	r6, #52429	; 0xcccd
 800751c:	f10d 019f 	addhi.w	r1, sp, #159	; 0x9f
 8007520:	f6cc 46cc 	movthi	r6, #52428	; 0xcccc
 8007524:	d801      	bhi.n	800752a <_svfiprintf_r+0x74e>
 8007526:	3330      	adds	r3, #48	; 0x30
 8007528:	e755      	b.n	80073d6 <_svfiprintf_r+0x5fa>
 800752a:	fba6 0203 	umull	r0, r2, r6, r3
 800752e:	08d2      	lsrs	r2, r2, #3
 8007530:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8007534:	eba3 0c4c 	sub.w	ip, r3, ip, lsl #1
 8007538:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800753c:	4608      	mov	r0, r1
 800753e:	f881 c000 	strb.w	ip, [r1]
 8007542:	4613      	mov	r3, r2
 8007544:	3901      	subs	r1, #1
 8007546:	2a00      	cmp	r2, #0
 8007548:	d1ef      	bne.n	800752a <_svfiprintf_r+0x74e>
 800754a:	9009      	str	r0, [sp, #36]	; 0x24
 800754c:	e526      	b.n	8006f9c <_svfiprintf_r+0x1c0>
 800754e:	9905      	ldr	r1, [sp, #20]
 8007550:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007554:	bf14      	ite	ne
 8007556:	880b      	ldrhne	r3, [r1, #0]
 8007558:	680b      	ldreq	r3, [r1, #0]
 800755a:	2201      	movs	r2, #1
 800755c:	9805      	ldr	r0, [sp, #20]
 800755e:	1c19      	adds	r1, r3, #0
 8007560:	bf18      	it	ne
 8007562:	2101      	movne	r1, #1
 8007564:	3004      	adds	r0, #4
 8007566:	9005      	str	r0, [sp, #20]
 8007568:	e4f4      	b.n	8006f54 <_svfiprintf_r+0x178>
 800756a:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 800756e:	bf0b      	itete	eq
 8007570:	9a05      	ldreq	r2, [sp, #20]
 8007572:	9905      	ldrne	r1, [sp, #20]
 8007574:	6813      	ldreq	r3, [r2, #0]
 8007576:	880b      	ldrhne	r3, [r1, #0]
 8007578:	bf08      	it	eq
 800757a:	460a      	moveq	r2, r1
 800757c:	e7ee      	b.n	800755c <_svfiprintf_r+0x780>
 800757e:	2202      	movs	r2, #2
 8007580:	e4e8      	b.n	8006f54 <_svfiprintf_r+0x178>
 8007582:	9807      	ldr	r0, [sp, #28]
 8007584:	4651      	mov	r1, sl
 8007586:	4642      	mov	r2, r8
 8007588:	f7ff fba8 	bl	8006cdc <__ssprint_r>
 800758c:	2800      	cmp	r0, #0
 800758e:	f47f af31 	bne.w	80073f4 <_svfiprintf_r+0x618>
 8007592:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007594:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007596:	ac0e      	add	r4, sp, #56	; 0x38
 8007598:	e669      	b.n	800726e <_svfiprintf_r+0x492>
 800759a:	9a05      	ldr	r2, [sp, #20]
 800759c:	6815      	ldr	r5, [r2, #0]
 800759e:	3204      	adds	r2, #4
 80075a0:	2d00      	cmp	r5, #0
 80075a2:	bfbc      	itt	lt
 80075a4:	9205      	strlt	r2, [sp, #20]
 80075a6:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 80075aa:	f6ff ac60 	blt.w	8006e6e <_svfiprintf_r+0x92>
 80075ae:	9205      	str	r2, [sp, #20]
 80075b0:	e45d      	b.n	8006e6e <_svfiprintf_r+0x92>
 80075b2:	bf00      	nop
 80075b4:	08008780 	.word	0x08008780
 80075b8:	08008790 	.word	0x08008790
 80075bc:	9807      	ldr	r0, [sp, #28]
 80075be:	4651      	mov	r1, sl
 80075c0:	4642      	mov	r2, r8
 80075c2:	f7ff fb8b 	bl	8006cdc <__ssprint_r>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f47f af14 	bne.w	80073f4 <_svfiprintf_r+0x618>
 80075cc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80075ce:	e6e9      	b.n	80073a4 <_svfiprintf_r+0x5c8>
 80075d0:	2930      	cmp	r1, #48	; 0x30
 80075d2:	d004      	beq.n	80075de <_svfiprintf_r+0x802>
 80075d4:	1e93      	subs	r3, r2, #2
 80075d6:	9309      	str	r3, [sp, #36]	; 0x24
 80075d8:	2330      	movs	r3, #48	; 0x30
 80075da:	f802 3c02 	strb.w	r3, [r2, #-2]
 80075de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e0:	ebc3 0308 	rsb	r3, r3, r8
 80075e4:	9303      	str	r3, [sp, #12]
 80075e6:	e4dc      	b.n	8006fa2 <_svfiprintf_r+0x1c6>
 80075e8:	9805      	ldr	r0, [sp, #20]
 80075ea:	9904      	ldr	r1, [sp, #16]
 80075ec:	6803      	ldr	r3, [r0, #0]
 80075ee:	3004      	adds	r0, #4
 80075f0:	9005      	str	r0, [sp, #20]
 80075f2:	6019      	str	r1, [r3, #0]
 80075f4:	e411      	b.n	8006e1a <_svfiprintf_r+0x3e>
 80075f6:	9a05      	ldr	r2, [sp, #20]
 80075f8:	6813      	ldr	r3, [r2, #0]
 80075fa:	3204      	adds	r2, #4
 80075fc:	9205      	str	r2, [sp, #20]
 80075fe:	e54e      	b.n	800709e <_svfiprintf_r+0x2c2>
 8007600:	9905      	ldr	r1, [sp, #20]
 8007602:	880b      	ldrh	r3, [r1, #0]
 8007604:	3104      	adds	r1, #4
 8007606:	9105      	str	r1, [sp, #20]
 8007608:	e52b      	b.n	8007062 <_svfiprintf_r+0x286>
 800760a:	f7ff fb37 	bl	8006c7c <strlen>
 800760e:	9608      	str	r6, [sp, #32]
 8007610:	9003      	str	r0, [sp, #12]
 8007612:	e4c7      	b.n	8006fa4 <_svfiprintf_r+0x1c8>
 8007614:	9807      	ldr	r0, [sp, #28]
 8007616:	4651      	mov	r1, sl
 8007618:	4642      	mov	r2, r8
 800761a:	f7ff fb5f 	bl	8006cdc <__ssprint_r>
 800761e:	2800      	cmp	r0, #0
 8007620:	f47f aee8 	bne.w	80073f4 <_svfiprintf_r+0x618>
 8007624:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007626:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007628:	ac0e      	add	r4, sp, #56	; 0x38
 800762a:	e642      	b.n	80072b2 <_svfiprintf_r+0x4d6>
 800762c:	9905      	ldr	r1, [sp, #20]
 800762e:	9a04      	ldr	r2, [sp, #16]
 8007630:	680b      	ldr	r3, [r1, #0]
 8007632:	3104      	adds	r1, #4
 8007634:	9105      	str	r1, [sp, #20]
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	f7ff bbef 	b.w	8006e1a <_svfiprintf_r+0x3e>
 800763c:	2140      	movs	r1, #64	; 0x40
 800763e:	9200      	str	r2, [sp, #0]
 8007640:	f7fe fa56 	bl	8005af0 <_malloc_r>
 8007644:	9a00      	ldr	r2, [sp, #0]
 8007646:	f8ca 0000 	str.w	r0, [sl]
 800764a:	f8ca 0010 	str.w	r0, [sl, #16]
 800764e:	b188      	cbz	r0, 8007674 <_svfiprintf_r+0x898>
 8007650:	2340      	movs	r3, #64	; 0x40
 8007652:	f8ca 3014 	str.w	r3, [sl, #20]
 8007656:	f7ff bbcf 	b.w	8006df8 <_svfiprintf_r+0x1c>
 800765a:	2d06      	cmp	r5, #6
 800765c:	bf28      	it	cs
 800765e:	2506      	movcs	r5, #6
 8007660:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8007664:	9302      	str	r3, [sp, #8]
 8007666:	4b07      	ldr	r3, [pc, #28]	; (8007684 <_svfiprintf_r+0x8a8>)
 8007668:	9503      	str	r5, [sp, #12]
 800766a:	9309      	str	r3, [sp, #36]	; 0x24
 800766c:	e52e      	b.n	80070cc <_svfiprintf_r+0x2f0>
 800766e:	9503      	str	r5, [sp, #12]
 8007670:	9008      	str	r0, [sp, #32]
 8007672:	e497      	b.n	8006fa4 <_svfiprintf_r+0x1c8>
 8007674:	9807      	ldr	r0, [sp, #28]
 8007676:	230c      	movs	r3, #12
 8007678:	6003      	str	r3, [r0, #0]
 800767a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800767e:	9304      	str	r3, [sp, #16]
 8007680:	e6c1      	b.n	8007406 <_svfiprintf_r+0x62a>
 8007682:	bf00      	nop
 8007684:	080087d8 	.word	0x080087d8

08007688 <_calloc_r>:
 8007688:	b510      	push	{r4, lr}
 800768a:	fb01 f102 	mul.w	r1, r1, r2
 800768e:	f7fe fa2f 	bl	8005af0 <_malloc_r>
 8007692:	4604      	mov	r4, r0
 8007694:	b300      	cbz	r0, 80076d8 <_calloc_r+0x50>
 8007696:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800769a:	f022 0203 	bic.w	r2, r2, #3
 800769e:	3a04      	subs	r2, #4
 80076a0:	2a24      	cmp	r2, #36	; 0x24
 80076a2:	d81b      	bhi.n	80076dc <_calloc_r+0x54>
 80076a4:	2a13      	cmp	r2, #19
 80076a6:	bf98      	it	ls
 80076a8:	4602      	movls	r2, r0
 80076aa:	d911      	bls.n	80076d0 <_calloc_r+0x48>
 80076ac:	2300      	movs	r3, #0
 80076ae:	2a1b      	cmp	r2, #27
 80076b0:	6003      	str	r3, [r0, #0]
 80076b2:	6043      	str	r3, [r0, #4]
 80076b4:	bf98      	it	ls
 80076b6:	f100 0208 	addls.w	r2, r0, #8
 80076ba:	d909      	bls.n	80076d0 <_calloc_r+0x48>
 80076bc:	2a24      	cmp	r2, #36	; 0x24
 80076be:	6083      	str	r3, [r0, #8]
 80076c0:	60c3      	str	r3, [r0, #12]
 80076c2:	bf11      	iteee	ne
 80076c4:	f100 0210 	addne.w	r2, r0, #16
 80076c8:	6103      	streq	r3, [r0, #16]
 80076ca:	6143      	streq	r3, [r0, #20]
 80076cc:	f100 0218 	addeq.w	r2, r0, #24
 80076d0:	2300      	movs	r3, #0
 80076d2:	6013      	str	r3, [r2, #0]
 80076d4:	6053      	str	r3, [r2, #4]
 80076d6:	6093      	str	r3, [r2, #8]
 80076d8:	4620      	mov	r0, r4
 80076da:	bd10      	pop	{r4, pc}
 80076dc:	2100      	movs	r1, #0
 80076de:	f000 f85b 	bl	8007798 <memset>
 80076e2:	4620      	mov	r0, r4
 80076e4:	bd10      	pop	{r4, pc}
 80076e6:	bf00      	nop

080076e8 <memmove>:
 80076e8:	4288      	cmp	r0, r1
 80076ea:	b4f0      	push	{r4, r5, r6, r7}
 80076ec:	d912      	bls.n	8007714 <memmove+0x2c>
 80076ee:	188d      	adds	r5, r1, r2
 80076f0:	42a8      	cmp	r0, r5
 80076f2:	d20f      	bcs.n	8007714 <memmove+0x2c>
 80076f4:	b162      	cbz	r2, 8007710 <memmove+0x28>
 80076f6:	4251      	negs	r1, r2
 80076f8:	4613      	mov	r3, r2
 80076fa:	1882      	adds	r2, r0, r2
 80076fc:	186d      	adds	r5, r5, r1
 80076fe:	1852      	adds	r2, r2, r1
 8007700:	18ec      	adds	r4, r5, r3
 8007702:	18d1      	adds	r1, r2, r3
 8007704:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8007708:	3b01      	subs	r3, #1
 800770a:	f801 4c01 	strb.w	r4, [r1, #-1]
 800770e:	d1f7      	bne.n	8007700 <memmove+0x18>
 8007710:	bcf0      	pop	{r4, r5, r6, r7}
 8007712:	4770      	bx	lr
 8007714:	2a0f      	cmp	r2, #15
 8007716:	bf98      	it	ls
 8007718:	4603      	movls	r3, r0
 800771a:	d931      	bls.n	8007780 <memmove+0x98>
 800771c:	ea41 0300 	orr.w	r3, r1, r0
 8007720:	079b      	lsls	r3, r3, #30
 8007722:	d137      	bne.n	8007794 <memmove+0xac>
 8007724:	460c      	mov	r4, r1
 8007726:	4603      	mov	r3, r0
 8007728:	4615      	mov	r5, r2
 800772a:	6826      	ldr	r6, [r4, #0]
 800772c:	601e      	str	r6, [r3, #0]
 800772e:	6866      	ldr	r6, [r4, #4]
 8007730:	605e      	str	r6, [r3, #4]
 8007732:	68a6      	ldr	r6, [r4, #8]
 8007734:	609e      	str	r6, [r3, #8]
 8007736:	68e6      	ldr	r6, [r4, #12]
 8007738:	3d10      	subs	r5, #16
 800773a:	60de      	str	r6, [r3, #12]
 800773c:	3410      	adds	r4, #16
 800773e:	3310      	adds	r3, #16
 8007740:	2d0f      	cmp	r5, #15
 8007742:	d8f2      	bhi.n	800772a <memmove+0x42>
 8007744:	f1a2 0410 	sub.w	r4, r2, #16
 8007748:	f024 040f 	bic.w	r4, r4, #15
 800774c:	f002 020f 	and.w	r2, r2, #15
 8007750:	3410      	adds	r4, #16
 8007752:	2a03      	cmp	r2, #3
 8007754:	eb00 0304 	add.w	r3, r0, r4
 8007758:	4421      	add	r1, r4
 800775a:	d911      	bls.n	8007780 <memmove+0x98>
 800775c:	1f0e      	subs	r6, r1, #4
 800775e:	461d      	mov	r5, r3
 8007760:	4614      	mov	r4, r2
 8007762:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8007766:	3c04      	subs	r4, #4
 8007768:	2c03      	cmp	r4, #3
 800776a:	f845 7b04 	str.w	r7, [r5], #4
 800776e:	d8f8      	bhi.n	8007762 <memmove+0x7a>
 8007770:	1f14      	subs	r4, r2, #4
 8007772:	f024 0403 	bic.w	r4, r4, #3
 8007776:	3404      	adds	r4, #4
 8007778:	f002 0203 	and.w	r2, r2, #3
 800777c:	1909      	adds	r1, r1, r4
 800777e:	191b      	adds	r3, r3, r4
 8007780:	2a00      	cmp	r2, #0
 8007782:	d0c5      	beq.n	8007710 <memmove+0x28>
 8007784:	3901      	subs	r1, #1
 8007786:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800778a:	3a01      	subs	r2, #1
 800778c:	f803 4b01 	strb.w	r4, [r3], #1
 8007790:	d1f9      	bne.n	8007786 <memmove+0x9e>
 8007792:	e7bd      	b.n	8007710 <memmove+0x28>
 8007794:	4603      	mov	r3, r0
 8007796:	e7f5      	b.n	8007784 <memmove+0x9c>

08007798 <memset>:
 8007798:	f010 0f03 	tst.w	r0, #3
 800779c:	b470      	push	{r4, r5, r6}
 800779e:	4603      	mov	r3, r0
 80077a0:	d042      	beq.n	8007828 <memset+0x90>
 80077a2:	2a00      	cmp	r2, #0
 80077a4:	d03e      	beq.n	8007824 <memset+0x8c>
 80077a6:	3a01      	subs	r2, #1
 80077a8:	b2cd      	uxtb	r5, r1
 80077aa:	e003      	b.n	80077b4 <memset+0x1c>
 80077ac:	1e54      	subs	r4, r2, #1
 80077ae:	2a00      	cmp	r2, #0
 80077b0:	d038      	beq.n	8007824 <memset+0x8c>
 80077b2:	4622      	mov	r2, r4
 80077b4:	f803 5b01 	strb.w	r5, [r3], #1
 80077b8:	f013 0f03 	tst.w	r3, #3
 80077bc:	461c      	mov	r4, r3
 80077be:	d1f5      	bne.n	80077ac <memset+0x14>
 80077c0:	2a03      	cmp	r2, #3
 80077c2:	d929      	bls.n	8007818 <memset+0x80>
 80077c4:	b2cd      	uxtb	r5, r1
 80077c6:	2a0f      	cmp	r2, #15
 80077c8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80077cc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80077d0:	bf84      	itt	hi
 80077d2:	4623      	movhi	r3, r4
 80077d4:	4616      	movhi	r6, r2
 80077d6:	d911      	bls.n	80077fc <memset+0x64>
 80077d8:	3e10      	subs	r6, #16
 80077da:	601d      	str	r5, [r3, #0]
 80077dc:	605d      	str	r5, [r3, #4]
 80077de:	609d      	str	r5, [r3, #8]
 80077e0:	60dd      	str	r5, [r3, #12]
 80077e2:	3310      	adds	r3, #16
 80077e4:	2e0f      	cmp	r6, #15
 80077e6:	d8f7      	bhi.n	80077d8 <memset+0x40>
 80077e8:	f1a2 0310 	sub.w	r3, r2, #16
 80077ec:	f023 030f 	bic.w	r3, r3, #15
 80077f0:	f002 020f 	and.w	r2, r2, #15
 80077f4:	3310      	adds	r3, #16
 80077f6:	2a03      	cmp	r2, #3
 80077f8:	441c      	add	r4, r3
 80077fa:	d90d      	bls.n	8007818 <memset+0x80>
 80077fc:	4626      	mov	r6, r4
 80077fe:	4613      	mov	r3, r2
 8007800:	3b04      	subs	r3, #4
 8007802:	2b03      	cmp	r3, #3
 8007804:	f846 5b04 	str.w	r5, [r6], #4
 8007808:	d8fa      	bhi.n	8007800 <memset+0x68>
 800780a:	1f13      	subs	r3, r2, #4
 800780c:	f023 0303 	bic.w	r3, r3, #3
 8007810:	3304      	adds	r3, #4
 8007812:	f002 0203 	and.w	r2, r2, #3
 8007816:	18e4      	adds	r4, r4, r3
 8007818:	b2c9      	uxtb	r1, r1
 800781a:	b11a      	cbz	r2, 8007824 <memset+0x8c>
 800781c:	3a01      	subs	r2, #1
 800781e:	f804 1b01 	strb.w	r1, [r4], #1
 8007822:	d1fb      	bne.n	800781c <memset+0x84>
 8007824:	bc70      	pop	{r4, r5, r6}
 8007826:	4770      	bx	lr
 8007828:	4604      	mov	r4, r0
 800782a:	e7c9      	b.n	80077c0 <memset+0x28>

0800782c <_realloc_r>:
 800782c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007830:	460c      	mov	r4, r1
 8007832:	b083      	sub	sp, #12
 8007834:	4607      	mov	r7, r0
 8007836:	4690      	mov	r8, r2
 8007838:	2900      	cmp	r1, #0
 800783a:	f000 80fe 	beq.w	8007a3a <_realloc_r+0x20e>
 800783e:	f108 050b 	add.w	r5, r8, #11
 8007842:	f7fe fc8b 	bl	800615c <__malloc_lock>
 8007846:	2d16      	cmp	r5, #22
 8007848:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800784c:	d87d      	bhi.n	800794a <_realloc_r+0x11e>
 800784e:	2210      	movs	r2, #16
 8007850:	2600      	movs	r6, #0
 8007852:	4615      	mov	r5, r2
 8007854:	4545      	cmp	r5, r8
 8007856:	bf38      	it	cc
 8007858:	f046 0601 	orrcc.w	r6, r6, #1
 800785c:	2e00      	cmp	r6, #0
 800785e:	f040 80f2 	bne.w	8007a46 <_realloc_r+0x21a>
 8007862:	f021 0a03 	bic.w	sl, r1, #3
 8007866:	4592      	cmp	sl, r2
 8007868:	f1a4 0b08 	sub.w	fp, r4, #8
 800786c:	bfa8      	it	ge
 800786e:	4656      	movge	r6, sl
 8007870:	da55      	bge.n	800791e <_realloc_r+0xf2>
 8007872:	4ba0      	ldr	r3, [pc, #640]	; (8007af4 <_realloc_r+0x2c8>)
 8007874:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8007878:	eb0b 000a 	add.w	r0, fp, sl
 800787c:	4584      	cmp	ip, r0
 800787e:	f000 80e7 	beq.w	8007a50 <_realloc_r+0x224>
 8007882:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8007886:	f02e 0901 	bic.w	r9, lr, #1
 800788a:	4481      	add	r9, r0
 800788c:	f8d9 9004 	ldr.w	r9, [r9, #4]
 8007890:	f019 0f01 	tst.w	r9, #1
 8007894:	bf1c      	itt	ne
 8007896:	46b6      	movne	lr, r6
 8007898:	4670      	movne	r0, lr
 800789a:	d05b      	beq.n	8007954 <_realloc_r+0x128>
 800789c:	07c9      	lsls	r1, r1, #31
 800789e:	d479      	bmi.n	8007994 <_realloc_r+0x168>
 80078a0:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80078a4:	ebc1 090b 	rsb	r9, r1, fp
 80078a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80078ac:	f021 0103 	bic.w	r1, r1, #3
 80078b0:	2800      	cmp	r0, #0
 80078b2:	f000 8097 	beq.w	80079e4 <_realloc_r+0x1b8>
 80078b6:	4560      	cmp	r0, ip
 80078b8:	eb01 0c0a 	add.w	ip, r1, sl
 80078bc:	eb0e 060c 	add.w	r6, lr, ip
 80078c0:	f000 811a 	beq.w	8007af8 <_realloc_r+0x2cc>
 80078c4:	42b2      	cmp	r2, r6
 80078c6:	f300 808f 	bgt.w	80079e8 <_realloc_r+0x1bc>
 80078ca:	68c3      	ldr	r3, [r0, #12]
 80078cc:	6882      	ldr	r2, [r0, #8]
 80078ce:	46c8      	mov	r8, r9
 80078d0:	609a      	str	r2, [r3, #8]
 80078d2:	60d3      	str	r3, [r2, #12]
 80078d4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80078d8:	f858 1f08 	ldr.w	r1, [r8, #8]!
 80078dc:	f1aa 0204 	sub.w	r2, sl, #4
 80078e0:	2a24      	cmp	r2, #36	; 0x24
 80078e2:	60cb      	str	r3, [r1, #12]
 80078e4:	6099      	str	r1, [r3, #8]
 80078e6:	f200 8144 	bhi.w	8007b72 <_realloc_r+0x346>
 80078ea:	2a13      	cmp	r2, #19
 80078ec:	bf98      	it	ls
 80078ee:	4643      	movls	r3, r8
 80078f0:	d90b      	bls.n	800790a <_realloc_r+0xde>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	f8c9 3008 	str.w	r3, [r9, #8]
 80078f8:	6863      	ldr	r3, [r4, #4]
 80078fa:	2a1b      	cmp	r2, #27
 80078fc:	f8c9 300c 	str.w	r3, [r9, #12]
 8007900:	f200 8140 	bhi.w	8007b84 <_realloc_r+0x358>
 8007904:	f109 0310 	add.w	r3, r9, #16
 8007908:	3408      	adds	r4, #8
 800790a:	6822      	ldr	r2, [r4, #0]
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	6862      	ldr	r2, [r4, #4]
 8007910:	605a      	str	r2, [r3, #4]
 8007912:	68a2      	ldr	r2, [r4, #8]
 8007914:	609a      	str	r2, [r3, #8]
 8007916:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800791a:	4644      	mov	r4, r8
 800791c:	46cb      	mov	fp, r9
 800791e:	1b72      	subs	r2, r6, r5
 8007920:	2a0f      	cmp	r2, #15
 8007922:	d822      	bhi.n	800796a <_realloc_r+0x13e>
 8007924:	f001 0101 	and.w	r1, r1, #1
 8007928:	eb0b 0306 	add.w	r3, fp, r6
 800792c:	430e      	orrs	r6, r1
 800792e:	f8cb 6004 	str.w	r6, [fp, #4]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	f042 0201 	orr.w	r2, r2, #1
 8007938:	605a      	str	r2, [r3, #4]
 800793a:	4638      	mov	r0, r7
 800793c:	f7fe fc10 	bl	8006160 <__malloc_unlock>
 8007940:	46a0      	mov	r8, r4
 8007942:	4640      	mov	r0, r8
 8007944:	b003      	add	sp, #12
 8007946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794a:	f025 0507 	bic.w	r5, r5, #7
 800794e:	462a      	mov	r2, r5
 8007950:	0fee      	lsrs	r6, r5, #31
 8007952:	e77f      	b.n	8007854 <_realloc_r+0x28>
 8007954:	f02e 0e03 	bic.w	lr, lr, #3
 8007958:	eb0e 060a 	add.w	r6, lr, sl
 800795c:	42b2      	cmp	r2, r6
 800795e:	dc9d      	bgt.n	800789c <_realloc_r+0x70>
 8007960:	68c3      	ldr	r3, [r0, #12]
 8007962:	6882      	ldr	r2, [r0, #8]
 8007964:	60d3      	str	r3, [r2, #12]
 8007966:	609a      	str	r2, [r3, #8]
 8007968:	e7d9      	b.n	800791e <_realloc_r+0xf2>
 800796a:	eb0b 0305 	add.w	r3, fp, r5
 800796e:	f001 0101 	and.w	r1, r1, #1
 8007972:	1898      	adds	r0, r3, r2
 8007974:	430d      	orrs	r5, r1
 8007976:	f042 0201 	orr.w	r2, r2, #1
 800797a:	f8cb 5004 	str.w	r5, [fp, #4]
 800797e:	605a      	str	r2, [r3, #4]
 8007980:	6842      	ldr	r2, [r0, #4]
 8007982:	f042 0201 	orr.w	r2, r2, #1
 8007986:	6042      	str	r2, [r0, #4]
 8007988:	f103 0108 	add.w	r1, r3, #8
 800798c:	4638      	mov	r0, r7
 800798e:	f7fd ffa3 	bl	80058d8 <_free_r>
 8007992:	e7d2      	b.n	800793a <_realloc_r+0x10e>
 8007994:	4641      	mov	r1, r8
 8007996:	4638      	mov	r0, r7
 8007998:	f7fe f8aa 	bl	8005af0 <_malloc_r>
 800799c:	4680      	mov	r8, r0
 800799e:	b1e8      	cbz	r0, 80079dc <_realloc_r+0x1b0>
 80079a0:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80079a4:	f021 0301 	bic.w	r3, r1, #1
 80079a8:	f1a0 0208 	sub.w	r2, r0, #8
 80079ac:	445b      	add	r3, fp
 80079ae:	429a      	cmp	r2, r3
 80079b0:	f000 80d9 	beq.w	8007b66 <_realloc_r+0x33a>
 80079b4:	f1aa 0204 	sub.w	r2, sl, #4
 80079b8:	2a24      	cmp	r2, #36	; 0x24
 80079ba:	f200 8096 	bhi.w	8007aea <_realloc_r+0x2be>
 80079be:	2a13      	cmp	r2, #19
 80079c0:	bf9c      	itt	ls
 80079c2:	4603      	movls	r3, r0
 80079c4:	4622      	movls	r2, r4
 80079c6:	d863      	bhi.n	8007a90 <_realloc_r+0x264>
 80079c8:	6811      	ldr	r1, [r2, #0]
 80079ca:	6019      	str	r1, [r3, #0]
 80079cc:	6851      	ldr	r1, [r2, #4]
 80079ce:	6059      	str	r1, [r3, #4]
 80079d0:	6892      	ldr	r2, [r2, #8]
 80079d2:	609a      	str	r2, [r3, #8]
 80079d4:	4638      	mov	r0, r7
 80079d6:	4621      	mov	r1, r4
 80079d8:	f7fd ff7e 	bl	80058d8 <_free_r>
 80079dc:	4638      	mov	r0, r7
 80079de:	f7fe fbbf 	bl	8006160 <__malloc_unlock>
 80079e2:	e7ae      	b.n	8007942 <_realloc_r+0x116>
 80079e4:	eb01 0c0a 	add.w	ip, r1, sl
 80079e8:	4562      	cmp	r2, ip
 80079ea:	dcd3      	bgt.n	8007994 <_realloc_r+0x168>
 80079ec:	464e      	mov	r6, r9
 80079ee:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80079f2:	f856 1f08 	ldr.w	r1, [r6, #8]!
 80079f6:	f1aa 0204 	sub.w	r2, sl, #4
 80079fa:	2a24      	cmp	r2, #36	; 0x24
 80079fc:	60cb      	str	r3, [r1, #12]
 80079fe:	6099      	str	r1, [r3, #8]
 8007a00:	d865      	bhi.n	8007ace <_realloc_r+0x2a2>
 8007a02:	2a13      	cmp	r2, #19
 8007a04:	bf98      	it	ls
 8007a06:	4633      	movls	r3, r6
 8007a08:	d90b      	bls.n	8007a22 <_realloc_r+0x1f6>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	f8c9 3008 	str.w	r3, [r9, #8]
 8007a10:	6863      	ldr	r3, [r4, #4]
 8007a12:	2a1b      	cmp	r2, #27
 8007a14:	f8c9 300c 	str.w	r3, [r9, #12]
 8007a18:	f200 80c0 	bhi.w	8007b9c <_realloc_r+0x370>
 8007a1c:	f109 0310 	add.w	r3, r9, #16
 8007a20:	3408      	adds	r4, #8
 8007a22:	6822      	ldr	r2, [r4, #0]
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	6862      	ldr	r2, [r4, #4]
 8007a28:	605a      	str	r2, [r3, #4]
 8007a2a:	68a2      	ldr	r2, [r4, #8]
 8007a2c:	609a      	str	r2, [r3, #8]
 8007a2e:	4634      	mov	r4, r6
 8007a30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a34:	4666      	mov	r6, ip
 8007a36:	46cb      	mov	fp, r9
 8007a38:	e771      	b.n	800791e <_realloc_r+0xf2>
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	b003      	add	sp, #12
 8007a3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a42:	f7fe b855 	b.w	8005af0 <_malloc_r>
 8007a46:	230c      	movs	r3, #12
 8007a48:	603b      	str	r3, [r7, #0]
 8007a4a:	f04f 0800 	mov.w	r8, #0
 8007a4e:	e778      	b.n	8007942 <_realloc_r+0x116>
 8007a50:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007a54:	f026 0e03 	bic.w	lr, r6, #3
 8007a58:	eb0e 000a 	add.w	r0, lr, sl
 8007a5c:	f105 0610 	add.w	r6, r5, #16
 8007a60:	42b0      	cmp	r0, r6
 8007a62:	bfb8      	it	lt
 8007a64:	4660      	movlt	r0, ip
 8007a66:	f6ff af19 	blt.w	800789c <_realloc_r+0x70>
 8007a6a:	eb0b 0205 	add.w	r2, fp, r5
 8007a6e:	1b41      	subs	r1, r0, r5
 8007a70:	f041 0101 	orr.w	r1, r1, #1
 8007a74:	6051      	str	r1, [r2, #4]
 8007a76:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007a7a:	609a      	str	r2, [r3, #8]
 8007a7c:	f001 0301 	and.w	r3, r1, #1
 8007a80:	431d      	orrs	r5, r3
 8007a82:	f844 5c04 	str.w	r5, [r4, #-4]
 8007a86:	4638      	mov	r0, r7
 8007a88:	f7fe fb6a 	bl	8006160 <__malloc_unlock>
 8007a8c:	46a0      	mov	r8, r4
 8007a8e:	e758      	b.n	8007942 <_realloc_r+0x116>
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	6003      	str	r3, [r0, #0]
 8007a94:	6863      	ldr	r3, [r4, #4]
 8007a96:	2a1b      	cmp	r2, #27
 8007a98:	6043      	str	r3, [r0, #4]
 8007a9a:	bf9c      	itt	ls
 8007a9c:	f104 0208 	addls.w	r2, r4, #8
 8007aa0:	f100 0308 	addls.w	r3, r0, #8
 8007aa4:	d990      	bls.n	80079c8 <_realloc_r+0x19c>
 8007aa6:	68a3      	ldr	r3, [r4, #8]
 8007aa8:	6083      	str	r3, [r0, #8]
 8007aaa:	68e3      	ldr	r3, [r4, #12]
 8007aac:	2a24      	cmp	r2, #36	; 0x24
 8007aae:	60c3      	str	r3, [r0, #12]
 8007ab0:	bf03      	ittte	eq
 8007ab2:	6923      	ldreq	r3, [r4, #16]
 8007ab4:	6103      	streq	r3, [r0, #16]
 8007ab6:	6962      	ldreq	r2, [r4, #20]
 8007ab8:	f100 0310 	addne.w	r3, r0, #16
 8007abc:	bf09      	itett	eq
 8007abe:	6142      	streq	r2, [r0, #20]
 8007ac0:	f104 0210 	addne.w	r2, r4, #16
 8007ac4:	f100 0318 	addeq.w	r3, r0, #24
 8007ac8:	f104 0218 	addeq.w	r2, r4, #24
 8007acc:	e77c      	b.n	80079c8 <_realloc_r+0x19c>
 8007ace:	4621      	mov	r1, r4
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	f8cd c004 	str.w	ip, [sp, #4]
 8007ad6:	f7ff fe07 	bl	80076e8 <memmove>
 8007ada:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007ade:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007ae2:	4634      	mov	r4, r6
 8007ae4:	46cb      	mov	fp, r9
 8007ae6:	4666      	mov	r6, ip
 8007ae8:	e719      	b.n	800791e <_realloc_r+0xf2>
 8007aea:	4621      	mov	r1, r4
 8007aec:	f7ff fdfc 	bl	80076e8 <memmove>
 8007af0:	e770      	b.n	80079d4 <_realloc_r+0x1a8>
 8007af2:	bf00      	nop
 8007af4:	20000584 	.word	0x20000584
 8007af8:	f105 0110 	add.w	r1, r5, #16
 8007afc:	428e      	cmp	r6, r1
 8007afe:	f6ff af73 	blt.w	80079e8 <_realloc_r+0x1bc>
 8007b02:	46c8      	mov	r8, r9
 8007b04:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8007b08:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8007b0c:	f1aa 0204 	sub.w	r2, sl, #4
 8007b10:	2a24      	cmp	r2, #36	; 0x24
 8007b12:	60c1      	str	r1, [r0, #12]
 8007b14:	6088      	str	r0, [r1, #8]
 8007b16:	d861      	bhi.n	8007bdc <_realloc_r+0x3b0>
 8007b18:	2a13      	cmp	r2, #19
 8007b1a:	bf98      	it	ls
 8007b1c:	4642      	movls	r2, r8
 8007b1e:	d90a      	bls.n	8007b36 <_realloc_r+0x30a>
 8007b20:	6821      	ldr	r1, [r4, #0]
 8007b22:	f8c9 1008 	str.w	r1, [r9, #8]
 8007b26:	6861      	ldr	r1, [r4, #4]
 8007b28:	2a1b      	cmp	r2, #27
 8007b2a:	f8c9 100c 	str.w	r1, [r9, #12]
 8007b2e:	d85c      	bhi.n	8007bea <_realloc_r+0x3be>
 8007b30:	f109 0210 	add.w	r2, r9, #16
 8007b34:	3408      	adds	r4, #8
 8007b36:	6821      	ldr	r1, [r4, #0]
 8007b38:	6011      	str	r1, [r2, #0]
 8007b3a:	6861      	ldr	r1, [r4, #4]
 8007b3c:	6051      	str	r1, [r2, #4]
 8007b3e:	68a1      	ldr	r1, [r4, #8]
 8007b40:	6091      	str	r1, [r2, #8]
 8007b42:	eb09 0205 	add.w	r2, r9, r5
 8007b46:	1b71      	subs	r1, r6, r5
 8007b48:	f041 0101 	orr.w	r1, r1, #1
 8007b4c:	6051      	str	r1, [r2, #4]
 8007b4e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b52:	609a      	str	r2, [r3, #8]
 8007b54:	f001 0301 	and.w	r3, r1, #1
 8007b58:	431d      	orrs	r5, r3
 8007b5a:	f8c9 5004 	str.w	r5, [r9, #4]
 8007b5e:	4638      	mov	r0, r7
 8007b60:	f7fe fafe 	bl	8006160 <__malloc_unlock>
 8007b64:	e6ed      	b.n	8007942 <_realloc_r+0x116>
 8007b66:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8007b6a:	f026 0603 	bic.w	r6, r6, #3
 8007b6e:	4456      	add	r6, sl
 8007b70:	e6d5      	b.n	800791e <_realloc_r+0xf2>
 8007b72:	4621      	mov	r1, r4
 8007b74:	4640      	mov	r0, r8
 8007b76:	f7ff fdb7 	bl	80076e8 <memmove>
 8007b7a:	4644      	mov	r4, r8
 8007b7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b80:	46cb      	mov	fp, r9
 8007b82:	e6cc      	b.n	800791e <_realloc_r+0xf2>
 8007b84:	68a3      	ldr	r3, [r4, #8]
 8007b86:	f8c9 3010 	str.w	r3, [r9, #16]
 8007b8a:	68e3      	ldr	r3, [r4, #12]
 8007b8c:	2a24      	cmp	r2, #36	; 0x24
 8007b8e:	f8c9 3014 	str.w	r3, [r9, #20]
 8007b92:	d00f      	beq.n	8007bb4 <_realloc_r+0x388>
 8007b94:	f109 0318 	add.w	r3, r9, #24
 8007b98:	3410      	adds	r4, #16
 8007b9a:	e6b6      	b.n	800790a <_realloc_r+0xde>
 8007b9c:	68a3      	ldr	r3, [r4, #8]
 8007b9e:	f8c9 3010 	str.w	r3, [r9, #16]
 8007ba2:	68e3      	ldr	r3, [r4, #12]
 8007ba4:	2a24      	cmp	r2, #36	; 0x24
 8007ba6:	f8c9 3014 	str.w	r3, [r9, #20]
 8007baa:	d00d      	beq.n	8007bc8 <_realloc_r+0x39c>
 8007bac:	f109 0318 	add.w	r3, r9, #24
 8007bb0:	3410      	adds	r4, #16
 8007bb2:	e736      	b.n	8007a22 <_realloc_r+0x1f6>
 8007bb4:	6923      	ldr	r3, [r4, #16]
 8007bb6:	f8c9 3018 	str.w	r3, [r9, #24]
 8007bba:	6962      	ldr	r2, [r4, #20]
 8007bbc:	f109 0320 	add.w	r3, r9, #32
 8007bc0:	f8c9 201c 	str.w	r2, [r9, #28]
 8007bc4:	3418      	adds	r4, #24
 8007bc6:	e6a0      	b.n	800790a <_realloc_r+0xde>
 8007bc8:	6923      	ldr	r3, [r4, #16]
 8007bca:	f8c9 3018 	str.w	r3, [r9, #24]
 8007bce:	6962      	ldr	r2, [r4, #20]
 8007bd0:	f109 0320 	add.w	r3, r9, #32
 8007bd4:	f8c9 201c 	str.w	r2, [r9, #28]
 8007bd8:	3418      	adds	r4, #24
 8007bda:	e722      	b.n	8007a22 <_realloc_r+0x1f6>
 8007bdc:	4640      	mov	r0, r8
 8007bde:	4621      	mov	r1, r4
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	f7ff fd81 	bl	80076e8 <memmove>
 8007be6:	9b01      	ldr	r3, [sp, #4]
 8007be8:	e7ab      	b.n	8007b42 <_realloc_r+0x316>
 8007bea:	68a1      	ldr	r1, [r4, #8]
 8007bec:	f8c9 1010 	str.w	r1, [r9, #16]
 8007bf0:	68e1      	ldr	r1, [r4, #12]
 8007bf2:	2a24      	cmp	r2, #36	; 0x24
 8007bf4:	f8c9 1014 	str.w	r1, [r9, #20]
 8007bf8:	d003      	beq.n	8007c02 <_realloc_r+0x3d6>
 8007bfa:	f109 0218 	add.w	r2, r9, #24
 8007bfe:	3410      	adds	r4, #16
 8007c00:	e799      	b.n	8007b36 <_realloc_r+0x30a>
 8007c02:	6922      	ldr	r2, [r4, #16]
 8007c04:	f8c9 2018 	str.w	r2, [r9, #24]
 8007c08:	6961      	ldr	r1, [r4, #20]
 8007c0a:	f109 0220 	add.w	r2, r9, #32
 8007c0e:	f8c9 101c 	str.w	r1, [r9, #28]
 8007c12:	3418      	adds	r4, #24
 8007c14:	e78f      	b.n	8007b36 <_realloc_r+0x30a>
 8007c16:	bf00      	nop

08007c18 <__aeabi_drsub>:
 8007c18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007c1c:	e002      	b.n	8007c24 <__adddf3>
 8007c1e:	bf00      	nop

08007c20 <__aeabi_dsub>:
 8007c20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007c24 <__adddf3>:
 8007c24:	b530      	push	{r4, r5, lr}
 8007c26:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007c2a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007c2e:	ea94 0f05 	teq	r4, r5
 8007c32:	bf08      	it	eq
 8007c34:	ea90 0f02 	teqeq	r0, r2
 8007c38:	bf1f      	itttt	ne
 8007c3a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007c3e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007c42:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007c46:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007c4a:	f000 80e2 	beq.w	8007e12 <__adddf3+0x1ee>
 8007c4e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007c52:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007c56:	bfb8      	it	lt
 8007c58:	426d      	neglt	r5, r5
 8007c5a:	dd0c      	ble.n	8007c76 <__adddf3+0x52>
 8007c5c:	442c      	add	r4, r5
 8007c5e:	ea80 0202 	eor.w	r2, r0, r2
 8007c62:	ea81 0303 	eor.w	r3, r1, r3
 8007c66:	ea82 0000 	eor.w	r0, r2, r0
 8007c6a:	ea83 0101 	eor.w	r1, r3, r1
 8007c6e:	ea80 0202 	eor.w	r2, r0, r2
 8007c72:	ea81 0303 	eor.w	r3, r1, r3
 8007c76:	2d36      	cmp	r5, #54	; 0x36
 8007c78:	bf88      	it	hi
 8007c7a:	bd30      	pophi	{r4, r5, pc}
 8007c7c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007c80:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007c84:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007c88:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007c8c:	d002      	beq.n	8007c94 <__adddf3+0x70>
 8007c8e:	4240      	negs	r0, r0
 8007c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007c94:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007c98:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007c9c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007ca0:	d002      	beq.n	8007ca8 <__adddf3+0x84>
 8007ca2:	4252      	negs	r2, r2
 8007ca4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007ca8:	ea94 0f05 	teq	r4, r5
 8007cac:	f000 80a7 	beq.w	8007dfe <__adddf3+0x1da>
 8007cb0:	f1a4 0401 	sub.w	r4, r4, #1
 8007cb4:	f1d5 0e20 	rsbs	lr, r5, #32
 8007cb8:	db0d      	blt.n	8007cd6 <__adddf3+0xb2>
 8007cba:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007cbe:	fa22 f205 	lsr.w	r2, r2, r5
 8007cc2:	1880      	adds	r0, r0, r2
 8007cc4:	f141 0100 	adc.w	r1, r1, #0
 8007cc8:	fa03 f20e 	lsl.w	r2, r3, lr
 8007ccc:	1880      	adds	r0, r0, r2
 8007cce:	fa43 f305 	asr.w	r3, r3, r5
 8007cd2:	4159      	adcs	r1, r3
 8007cd4:	e00e      	b.n	8007cf4 <__adddf3+0xd0>
 8007cd6:	f1a5 0520 	sub.w	r5, r5, #32
 8007cda:	f10e 0e20 	add.w	lr, lr, #32
 8007cde:	2a01      	cmp	r2, #1
 8007ce0:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007ce4:	bf28      	it	cs
 8007ce6:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007cea:	fa43 f305 	asr.w	r3, r3, r5
 8007cee:	18c0      	adds	r0, r0, r3
 8007cf0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007cf4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007cf8:	d507      	bpl.n	8007d0a <__adddf3+0xe6>
 8007cfa:	f04f 0e00 	mov.w	lr, #0
 8007cfe:	f1dc 0c00 	rsbs	ip, ip, #0
 8007d02:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007d06:	eb6e 0101 	sbc.w	r1, lr, r1
 8007d0a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007d0e:	d31b      	bcc.n	8007d48 <__adddf3+0x124>
 8007d10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007d14:	d30c      	bcc.n	8007d30 <__adddf3+0x10c>
 8007d16:	0849      	lsrs	r1, r1, #1
 8007d18:	ea5f 0030 	movs.w	r0, r0, rrx
 8007d1c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007d20:	f104 0401 	add.w	r4, r4, #1
 8007d24:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007d28:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007d2c:	f080 809a 	bcs.w	8007e64 <__adddf3+0x240>
 8007d30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007d34:	bf08      	it	eq
 8007d36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007d3a:	f150 0000 	adcs.w	r0, r0, #0
 8007d3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007d42:	ea41 0105 	orr.w	r1, r1, r5
 8007d46:	bd30      	pop	{r4, r5, pc}
 8007d48:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007d4c:	4140      	adcs	r0, r0
 8007d4e:	eb41 0101 	adc.w	r1, r1, r1
 8007d52:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007d56:	f1a4 0401 	sub.w	r4, r4, #1
 8007d5a:	d1e9      	bne.n	8007d30 <__adddf3+0x10c>
 8007d5c:	f091 0f00 	teq	r1, #0
 8007d60:	bf04      	itt	eq
 8007d62:	4601      	moveq	r1, r0
 8007d64:	2000      	moveq	r0, #0
 8007d66:	fab1 f381 	clz	r3, r1
 8007d6a:	bf08      	it	eq
 8007d6c:	3320      	addeq	r3, #32
 8007d6e:	f1a3 030b 	sub.w	r3, r3, #11
 8007d72:	f1b3 0220 	subs.w	r2, r3, #32
 8007d76:	da0c      	bge.n	8007d92 <__adddf3+0x16e>
 8007d78:	320c      	adds	r2, #12
 8007d7a:	dd08      	ble.n	8007d8e <__adddf3+0x16a>
 8007d7c:	f102 0c14 	add.w	ip, r2, #20
 8007d80:	f1c2 020c 	rsb	r2, r2, #12
 8007d84:	fa01 f00c 	lsl.w	r0, r1, ip
 8007d88:	fa21 f102 	lsr.w	r1, r1, r2
 8007d8c:	e00c      	b.n	8007da8 <__adddf3+0x184>
 8007d8e:	f102 0214 	add.w	r2, r2, #20
 8007d92:	bfd8      	it	le
 8007d94:	f1c2 0c20 	rsble	ip, r2, #32
 8007d98:	fa01 f102 	lsl.w	r1, r1, r2
 8007d9c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007da0:	bfdc      	itt	le
 8007da2:	ea41 010c 	orrle.w	r1, r1, ip
 8007da6:	4090      	lslle	r0, r2
 8007da8:	1ae4      	subs	r4, r4, r3
 8007daa:	bfa2      	ittt	ge
 8007dac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8007db0:	4329      	orrge	r1, r5
 8007db2:	bd30      	popge	{r4, r5, pc}
 8007db4:	ea6f 0404 	mvn.w	r4, r4
 8007db8:	3c1f      	subs	r4, #31
 8007dba:	da1c      	bge.n	8007df6 <__adddf3+0x1d2>
 8007dbc:	340c      	adds	r4, #12
 8007dbe:	dc0e      	bgt.n	8007dde <__adddf3+0x1ba>
 8007dc0:	f104 0414 	add.w	r4, r4, #20
 8007dc4:	f1c4 0220 	rsb	r2, r4, #32
 8007dc8:	fa20 f004 	lsr.w	r0, r0, r4
 8007dcc:	fa01 f302 	lsl.w	r3, r1, r2
 8007dd0:	ea40 0003 	orr.w	r0, r0, r3
 8007dd4:	fa21 f304 	lsr.w	r3, r1, r4
 8007dd8:	ea45 0103 	orr.w	r1, r5, r3
 8007ddc:	bd30      	pop	{r4, r5, pc}
 8007dde:	f1c4 040c 	rsb	r4, r4, #12
 8007de2:	f1c4 0220 	rsb	r2, r4, #32
 8007de6:	fa20 f002 	lsr.w	r0, r0, r2
 8007dea:	fa01 f304 	lsl.w	r3, r1, r4
 8007dee:	ea40 0003 	orr.w	r0, r0, r3
 8007df2:	4629      	mov	r1, r5
 8007df4:	bd30      	pop	{r4, r5, pc}
 8007df6:	fa21 f004 	lsr.w	r0, r1, r4
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	bd30      	pop	{r4, r5, pc}
 8007dfe:	f094 0f00 	teq	r4, #0
 8007e02:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8007e06:	bf06      	itte	eq
 8007e08:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007e0c:	3401      	addeq	r4, #1
 8007e0e:	3d01      	subne	r5, #1
 8007e10:	e74e      	b.n	8007cb0 <__adddf3+0x8c>
 8007e12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007e16:	bf18      	it	ne
 8007e18:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007e1c:	d029      	beq.n	8007e72 <__adddf3+0x24e>
 8007e1e:	ea94 0f05 	teq	r4, r5
 8007e22:	bf08      	it	eq
 8007e24:	ea90 0f02 	teqeq	r0, r2
 8007e28:	d005      	beq.n	8007e36 <__adddf3+0x212>
 8007e2a:	ea54 0c00 	orrs.w	ip, r4, r0
 8007e2e:	bf04      	itt	eq
 8007e30:	4619      	moveq	r1, r3
 8007e32:	4610      	moveq	r0, r2
 8007e34:	bd30      	pop	{r4, r5, pc}
 8007e36:	ea91 0f03 	teq	r1, r3
 8007e3a:	bf1e      	ittt	ne
 8007e3c:	2100      	movne	r1, #0
 8007e3e:	2000      	movne	r0, #0
 8007e40:	bd30      	popne	{r4, r5, pc}
 8007e42:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8007e46:	d105      	bne.n	8007e54 <__adddf3+0x230>
 8007e48:	0040      	lsls	r0, r0, #1
 8007e4a:	4149      	adcs	r1, r1
 8007e4c:	bf28      	it	cs
 8007e4e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8007e52:	bd30      	pop	{r4, r5, pc}
 8007e54:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007e58:	bf3c      	itt	cc
 8007e5a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007e5e:	bd30      	popcc	{r4, r5, pc}
 8007e60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007e64:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007e68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e6c:	f04f 0000 	mov.w	r0, #0
 8007e70:	bd30      	pop	{r4, r5, pc}
 8007e72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007e76:	bf1a      	itte	ne
 8007e78:	4619      	movne	r1, r3
 8007e7a:	4610      	movne	r0, r2
 8007e7c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007e80:	bf1c      	itt	ne
 8007e82:	460b      	movne	r3, r1
 8007e84:	4602      	movne	r2, r0
 8007e86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007e8a:	bf06      	itte	eq
 8007e8c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007e90:	ea91 0f03 	teqeq	r1, r3
 8007e94:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007e98:	bd30      	pop	{r4, r5, pc}
 8007e9a:	bf00      	nop

08007e9c <__aeabi_ui2d>:
 8007e9c:	f090 0f00 	teq	r0, #0
 8007ea0:	bf04      	itt	eq
 8007ea2:	2100      	moveq	r1, #0
 8007ea4:	4770      	bxeq	lr
 8007ea6:	b530      	push	{r4, r5, lr}
 8007ea8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007eac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007eb0:	f04f 0500 	mov.w	r5, #0
 8007eb4:	f04f 0100 	mov.w	r1, #0
 8007eb8:	e750      	b.n	8007d5c <__adddf3+0x138>
 8007eba:	bf00      	nop

08007ebc <__aeabi_i2d>:
 8007ebc:	f090 0f00 	teq	r0, #0
 8007ec0:	bf04      	itt	eq
 8007ec2:	2100      	moveq	r1, #0
 8007ec4:	4770      	bxeq	lr
 8007ec6:	b530      	push	{r4, r5, lr}
 8007ec8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007ecc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007ed0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007ed4:	bf48      	it	mi
 8007ed6:	4240      	negmi	r0, r0
 8007ed8:	f04f 0100 	mov.w	r1, #0
 8007edc:	e73e      	b.n	8007d5c <__adddf3+0x138>
 8007ede:	bf00      	nop

08007ee0 <__aeabi_f2d>:
 8007ee0:	0042      	lsls	r2, r0, #1
 8007ee2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007ee6:	ea4f 0131 	mov.w	r1, r1, rrx
 8007eea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007eee:	bf1f      	itttt	ne
 8007ef0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007ef4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007ef8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007efc:	4770      	bxne	lr
 8007efe:	f092 0f00 	teq	r2, #0
 8007f02:	bf14      	ite	ne
 8007f04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007f08:	4770      	bxeq	lr
 8007f0a:	b530      	push	{r4, r5, lr}
 8007f0c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007f10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007f14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007f18:	e720      	b.n	8007d5c <__adddf3+0x138>
 8007f1a:	bf00      	nop

08007f1c <__aeabi_ul2d>:
 8007f1c:	ea50 0201 	orrs.w	r2, r0, r1
 8007f20:	bf08      	it	eq
 8007f22:	4770      	bxeq	lr
 8007f24:	b530      	push	{r4, r5, lr}
 8007f26:	f04f 0500 	mov.w	r5, #0
 8007f2a:	e00a      	b.n	8007f42 <__aeabi_l2d+0x16>

08007f2c <__aeabi_l2d>:
 8007f2c:	ea50 0201 	orrs.w	r2, r0, r1
 8007f30:	bf08      	it	eq
 8007f32:	4770      	bxeq	lr
 8007f34:	b530      	push	{r4, r5, lr}
 8007f36:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007f3a:	d502      	bpl.n	8007f42 <__aeabi_l2d+0x16>
 8007f3c:	4240      	negs	r0, r0
 8007f3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007f42:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007f46:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007f4a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8007f4e:	f43f aedc 	beq.w	8007d0a <__adddf3+0xe6>
 8007f52:	f04f 0203 	mov.w	r2, #3
 8007f56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007f5a:	bf18      	it	ne
 8007f5c:	3203      	addne	r2, #3
 8007f5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007f62:	bf18      	it	ne
 8007f64:	3203      	addne	r2, #3
 8007f66:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8007f6a:	f1c2 0320 	rsb	r3, r2, #32
 8007f6e:	fa00 fc03 	lsl.w	ip, r0, r3
 8007f72:	fa20 f002 	lsr.w	r0, r0, r2
 8007f76:	fa01 fe03 	lsl.w	lr, r1, r3
 8007f7a:	ea40 000e 	orr.w	r0, r0, lr
 8007f7e:	fa21 f102 	lsr.w	r1, r1, r2
 8007f82:	4414      	add	r4, r2
 8007f84:	e6c1      	b.n	8007d0a <__adddf3+0xe6>
 8007f86:	bf00      	nop

08007f88 <__aeabi_dmul>:
 8007f88:	b570      	push	{r4, r5, r6, lr}
 8007f8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007f8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007f92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007f96:	bf1d      	ittte	ne
 8007f98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007f9c:	ea94 0f0c 	teqne	r4, ip
 8007fa0:	ea95 0f0c 	teqne	r5, ip
 8007fa4:	f000 f8de 	bleq	8008164 <__aeabi_dmul+0x1dc>
 8007fa8:	442c      	add	r4, r5
 8007faa:	ea81 0603 	eor.w	r6, r1, r3
 8007fae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8007fb2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8007fb6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8007fba:	bf18      	it	ne
 8007fbc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007fc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007fc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fc8:	d038      	beq.n	800803c <__aeabi_dmul+0xb4>
 8007fca:	fba0 ce02 	umull	ip, lr, r0, r2
 8007fce:	f04f 0500 	mov.w	r5, #0
 8007fd2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8007fd6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8007fda:	fbe0 e503 	umlal	lr, r5, r0, r3
 8007fde:	f04f 0600 	mov.w	r6, #0
 8007fe2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8007fe6:	f09c 0f00 	teq	ip, #0
 8007fea:	bf18      	it	ne
 8007fec:	f04e 0e01 	orrne.w	lr, lr, #1
 8007ff0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007ff4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007ff8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8007ffc:	d204      	bcs.n	8008008 <__aeabi_dmul+0x80>
 8007ffe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008002:	416d      	adcs	r5, r5
 8008004:	eb46 0606 	adc.w	r6, r6, r6
 8008008:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800800c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008010:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008014:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008018:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800801c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008020:	bf88      	it	hi
 8008022:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008026:	d81e      	bhi.n	8008066 <__aeabi_dmul+0xde>
 8008028:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800802c:	bf08      	it	eq
 800802e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008032:	f150 0000 	adcs.w	r0, r0, #0
 8008036:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800803a:	bd70      	pop	{r4, r5, r6, pc}
 800803c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008040:	ea46 0101 	orr.w	r1, r6, r1
 8008044:	ea40 0002 	orr.w	r0, r0, r2
 8008048:	ea81 0103 	eor.w	r1, r1, r3
 800804c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008050:	bfc2      	ittt	gt
 8008052:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008056:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800805a:	bd70      	popgt	{r4, r5, r6, pc}
 800805c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008060:	f04f 0e00 	mov.w	lr, #0
 8008064:	3c01      	subs	r4, #1
 8008066:	f300 80ab 	bgt.w	80081c0 <__aeabi_dmul+0x238>
 800806a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800806e:	bfde      	ittt	le
 8008070:	2000      	movle	r0, #0
 8008072:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008076:	bd70      	pople	{r4, r5, r6, pc}
 8008078:	f1c4 0400 	rsb	r4, r4, #0
 800807c:	3c20      	subs	r4, #32
 800807e:	da35      	bge.n	80080ec <__aeabi_dmul+0x164>
 8008080:	340c      	adds	r4, #12
 8008082:	dc1b      	bgt.n	80080bc <__aeabi_dmul+0x134>
 8008084:	f104 0414 	add.w	r4, r4, #20
 8008088:	f1c4 0520 	rsb	r5, r4, #32
 800808c:	fa00 f305 	lsl.w	r3, r0, r5
 8008090:	fa20 f004 	lsr.w	r0, r0, r4
 8008094:	fa01 f205 	lsl.w	r2, r1, r5
 8008098:	ea40 0002 	orr.w	r0, r0, r2
 800809c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80080a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80080a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80080a8:	fa21 f604 	lsr.w	r6, r1, r4
 80080ac:	eb42 0106 	adc.w	r1, r2, r6
 80080b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80080b4:	bf08      	it	eq
 80080b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80080ba:	bd70      	pop	{r4, r5, r6, pc}
 80080bc:	f1c4 040c 	rsb	r4, r4, #12
 80080c0:	f1c4 0520 	rsb	r5, r4, #32
 80080c4:	fa00 f304 	lsl.w	r3, r0, r4
 80080c8:	fa20 f005 	lsr.w	r0, r0, r5
 80080cc:	fa01 f204 	lsl.w	r2, r1, r4
 80080d0:	ea40 0002 	orr.w	r0, r0, r2
 80080d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80080d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80080dc:	f141 0100 	adc.w	r1, r1, #0
 80080e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80080e4:	bf08      	it	eq
 80080e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	f1c4 0520 	rsb	r5, r4, #32
 80080f0:	fa00 f205 	lsl.w	r2, r0, r5
 80080f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80080f8:	fa20 f304 	lsr.w	r3, r0, r4
 80080fc:	fa01 f205 	lsl.w	r2, r1, r5
 8008100:	ea43 0302 	orr.w	r3, r3, r2
 8008104:	fa21 f004 	lsr.w	r0, r1, r4
 8008108:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800810c:	fa21 f204 	lsr.w	r2, r1, r4
 8008110:	ea20 0002 	bic.w	r0, r0, r2
 8008114:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008118:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800811c:	bf08      	it	eq
 800811e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	f094 0f00 	teq	r4, #0
 8008128:	d10f      	bne.n	800814a <__aeabi_dmul+0x1c2>
 800812a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800812e:	0040      	lsls	r0, r0, #1
 8008130:	eb41 0101 	adc.w	r1, r1, r1
 8008134:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008138:	bf08      	it	eq
 800813a:	3c01      	subeq	r4, #1
 800813c:	d0f7      	beq.n	800812e <__aeabi_dmul+0x1a6>
 800813e:	ea41 0106 	orr.w	r1, r1, r6
 8008142:	f095 0f00 	teq	r5, #0
 8008146:	bf18      	it	ne
 8008148:	4770      	bxne	lr
 800814a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800814e:	0052      	lsls	r2, r2, #1
 8008150:	eb43 0303 	adc.w	r3, r3, r3
 8008154:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008158:	bf08      	it	eq
 800815a:	3d01      	subeq	r5, #1
 800815c:	d0f7      	beq.n	800814e <__aeabi_dmul+0x1c6>
 800815e:	ea43 0306 	orr.w	r3, r3, r6
 8008162:	4770      	bx	lr
 8008164:	ea94 0f0c 	teq	r4, ip
 8008168:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800816c:	bf18      	it	ne
 800816e:	ea95 0f0c 	teqne	r5, ip
 8008172:	d00c      	beq.n	800818e <__aeabi_dmul+0x206>
 8008174:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008178:	bf18      	it	ne
 800817a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800817e:	d1d1      	bne.n	8008124 <__aeabi_dmul+0x19c>
 8008180:	ea81 0103 	eor.w	r1, r1, r3
 8008184:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008188:	f04f 0000 	mov.w	r0, #0
 800818c:	bd70      	pop	{r4, r5, r6, pc}
 800818e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008192:	bf06      	itte	eq
 8008194:	4610      	moveq	r0, r2
 8008196:	4619      	moveq	r1, r3
 8008198:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800819c:	d019      	beq.n	80081d2 <__aeabi_dmul+0x24a>
 800819e:	ea94 0f0c 	teq	r4, ip
 80081a2:	d102      	bne.n	80081aa <__aeabi_dmul+0x222>
 80081a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80081a8:	d113      	bne.n	80081d2 <__aeabi_dmul+0x24a>
 80081aa:	ea95 0f0c 	teq	r5, ip
 80081ae:	d105      	bne.n	80081bc <__aeabi_dmul+0x234>
 80081b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80081b4:	bf1c      	itt	ne
 80081b6:	4610      	movne	r0, r2
 80081b8:	4619      	movne	r1, r3
 80081ba:	d10a      	bne.n	80081d2 <__aeabi_dmul+0x24a>
 80081bc:	ea81 0103 	eor.w	r1, r1, r3
 80081c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80081c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80081c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081cc:	f04f 0000 	mov.w	r0, #0
 80081d0:	bd70      	pop	{r4, r5, r6, pc}
 80081d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80081d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80081da:	bd70      	pop	{r4, r5, r6, pc}

080081dc <__aeabi_ddiv>:
 80081dc:	b570      	push	{r4, r5, r6, lr}
 80081de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80081e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80081e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80081ea:	bf1d      	ittte	ne
 80081ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80081f0:	ea94 0f0c 	teqne	r4, ip
 80081f4:	ea95 0f0c 	teqne	r5, ip
 80081f8:	f000 f8a7 	bleq	800834a <__aeabi_ddiv+0x16e>
 80081fc:	eba4 0405 	sub.w	r4, r4, r5
 8008200:	ea81 0e03 	eor.w	lr, r1, r3
 8008204:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008208:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800820c:	f000 8088 	beq.w	8008320 <__aeabi_ddiv+0x144>
 8008210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008214:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008218:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800821c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008220:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008224:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008228:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800822c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008230:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008234:	429d      	cmp	r5, r3
 8008236:	bf08      	it	eq
 8008238:	4296      	cmpeq	r6, r2
 800823a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800823e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008242:	d202      	bcs.n	800824a <__aeabi_ddiv+0x6e>
 8008244:	085b      	lsrs	r3, r3, #1
 8008246:	ea4f 0232 	mov.w	r2, r2, rrx
 800824a:	1ab6      	subs	r6, r6, r2
 800824c:	eb65 0503 	sbc.w	r5, r5, r3
 8008250:	085b      	lsrs	r3, r3, #1
 8008252:	ea4f 0232 	mov.w	r2, r2, rrx
 8008256:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800825a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800825e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008262:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008266:	bf22      	ittt	cs
 8008268:	1ab6      	subcs	r6, r6, r2
 800826a:	4675      	movcs	r5, lr
 800826c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008270:	085b      	lsrs	r3, r3, #1
 8008272:	ea4f 0232 	mov.w	r2, r2, rrx
 8008276:	ebb6 0e02 	subs.w	lr, r6, r2
 800827a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800827e:	bf22      	ittt	cs
 8008280:	1ab6      	subcs	r6, r6, r2
 8008282:	4675      	movcs	r5, lr
 8008284:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008288:	085b      	lsrs	r3, r3, #1
 800828a:	ea4f 0232 	mov.w	r2, r2, rrx
 800828e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008292:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008296:	bf22      	ittt	cs
 8008298:	1ab6      	subcs	r6, r6, r2
 800829a:	4675      	movcs	r5, lr
 800829c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80082a0:	085b      	lsrs	r3, r3, #1
 80082a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80082a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80082aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80082ae:	bf22      	ittt	cs
 80082b0:	1ab6      	subcs	r6, r6, r2
 80082b2:	4675      	movcs	r5, lr
 80082b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80082b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80082bc:	d018      	beq.n	80082f0 <__aeabi_ddiv+0x114>
 80082be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80082c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80082c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80082ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80082ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80082d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80082d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80082da:	d1c0      	bne.n	800825e <__aeabi_ddiv+0x82>
 80082dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80082e0:	d10b      	bne.n	80082fa <__aeabi_ddiv+0x11e>
 80082e2:	ea41 0100 	orr.w	r1, r1, r0
 80082e6:	f04f 0000 	mov.w	r0, #0
 80082ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80082ee:	e7b6      	b.n	800825e <__aeabi_ddiv+0x82>
 80082f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80082f4:	bf04      	itt	eq
 80082f6:	4301      	orreq	r1, r0
 80082f8:	2000      	moveq	r0, #0
 80082fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80082fe:	bf88      	it	hi
 8008300:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008304:	f63f aeaf 	bhi.w	8008066 <__aeabi_dmul+0xde>
 8008308:	ebb5 0c03 	subs.w	ip, r5, r3
 800830c:	bf04      	itt	eq
 800830e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008312:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008316:	f150 0000 	adcs.w	r0, r0, #0
 800831a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800831e:	bd70      	pop	{r4, r5, r6, pc}
 8008320:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008324:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008328:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800832c:	bfc2      	ittt	gt
 800832e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008332:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008336:	bd70      	popgt	{r4, r5, r6, pc}
 8008338:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800833c:	f04f 0e00 	mov.w	lr, #0
 8008340:	3c01      	subs	r4, #1
 8008342:	e690      	b.n	8008066 <__aeabi_dmul+0xde>
 8008344:	ea45 0e06 	orr.w	lr, r5, r6
 8008348:	e68d      	b.n	8008066 <__aeabi_dmul+0xde>
 800834a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800834e:	ea94 0f0c 	teq	r4, ip
 8008352:	bf08      	it	eq
 8008354:	ea95 0f0c 	teqeq	r5, ip
 8008358:	f43f af3b 	beq.w	80081d2 <__aeabi_dmul+0x24a>
 800835c:	ea94 0f0c 	teq	r4, ip
 8008360:	d10a      	bne.n	8008378 <__aeabi_ddiv+0x19c>
 8008362:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008366:	f47f af34 	bne.w	80081d2 <__aeabi_dmul+0x24a>
 800836a:	ea95 0f0c 	teq	r5, ip
 800836e:	f47f af25 	bne.w	80081bc <__aeabi_dmul+0x234>
 8008372:	4610      	mov	r0, r2
 8008374:	4619      	mov	r1, r3
 8008376:	e72c      	b.n	80081d2 <__aeabi_dmul+0x24a>
 8008378:	ea95 0f0c 	teq	r5, ip
 800837c:	d106      	bne.n	800838c <__aeabi_ddiv+0x1b0>
 800837e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008382:	f43f aefd 	beq.w	8008180 <__aeabi_dmul+0x1f8>
 8008386:	4610      	mov	r0, r2
 8008388:	4619      	mov	r1, r3
 800838a:	e722      	b.n	80081d2 <__aeabi_dmul+0x24a>
 800838c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008390:	bf18      	it	ne
 8008392:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008396:	f47f aec5 	bne.w	8008124 <__aeabi_dmul+0x19c>
 800839a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800839e:	f47f af0d 	bne.w	80081bc <__aeabi_dmul+0x234>
 80083a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80083a6:	f47f aeeb 	bne.w	8008180 <__aeabi_dmul+0x1f8>
 80083aa:	e712      	b.n	80081d2 <__aeabi_dmul+0x24a>

080083ac <__gedf2>:
 80083ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80083b0:	e006      	b.n	80083c0 <__cmpdf2+0x4>
 80083b2:	bf00      	nop

080083b4 <__ledf2>:
 80083b4:	f04f 0c01 	mov.w	ip, #1
 80083b8:	e002      	b.n	80083c0 <__cmpdf2+0x4>
 80083ba:	bf00      	nop

080083bc <__cmpdf2>:
 80083bc:	f04f 0c01 	mov.w	ip, #1
 80083c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80083c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80083c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80083cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80083d0:	bf18      	it	ne
 80083d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80083d6:	d01b      	beq.n	8008410 <__cmpdf2+0x54>
 80083d8:	b001      	add	sp, #4
 80083da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80083de:	bf0c      	ite	eq
 80083e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80083e4:	ea91 0f03 	teqne	r1, r3
 80083e8:	bf02      	ittt	eq
 80083ea:	ea90 0f02 	teqeq	r0, r2
 80083ee:	2000      	moveq	r0, #0
 80083f0:	4770      	bxeq	lr
 80083f2:	f110 0f00 	cmn.w	r0, #0
 80083f6:	ea91 0f03 	teq	r1, r3
 80083fa:	bf58      	it	pl
 80083fc:	4299      	cmppl	r1, r3
 80083fe:	bf08      	it	eq
 8008400:	4290      	cmpeq	r0, r2
 8008402:	bf2c      	ite	cs
 8008404:	17d8      	asrcs	r0, r3, #31
 8008406:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800840a:	f040 0001 	orr.w	r0, r0, #1
 800840e:	4770      	bx	lr
 8008410:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008414:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008418:	d102      	bne.n	8008420 <__cmpdf2+0x64>
 800841a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800841e:	d107      	bne.n	8008430 <__cmpdf2+0x74>
 8008420:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008424:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008428:	d1d6      	bne.n	80083d8 <__cmpdf2+0x1c>
 800842a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800842e:	d0d3      	beq.n	80083d8 <__cmpdf2+0x1c>
 8008430:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop

08008438 <__aeabi_cdrcmple>:
 8008438:	4684      	mov	ip, r0
 800843a:	4610      	mov	r0, r2
 800843c:	4662      	mov	r2, ip
 800843e:	468c      	mov	ip, r1
 8008440:	4619      	mov	r1, r3
 8008442:	4663      	mov	r3, ip
 8008444:	e000      	b.n	8008448 <__aeabi_cdcmpeq>
 8008446:	bf00      	nop

08008448 <__aeabi_cdcmpeq>:
 8008448:	b501      	push	{r0, lr}
 800844a:	f7ff ffb7 	bl	80083bc <__cmpdf2>
 800844e:	2800      	cmp	r0, #0
 8008450:	bf48      	it	mi
 8008452:	f110 0f00 	cmnmi.w	r0, #0
 8008456:	bd01      	pop	{r0, pc}

08008458 <__aeabi_dcmpeq>:
 8008458:	f84d ed08 	str.w	lr, [sp, #-8]!
 800845c:	f7ff fff4 	bl	8008448 <__aeabi_cdcmpeq>
 8008460:	bf0c      	ite	eq
 8008462:	2001      	moveq	r0, #1
 8008464:	2000      	movne	r0, #0
 8008466:	f85d fb08 	ldr.w	pc, [sp], #8
 800846a:	bf00      	nop

0800846c <__aeabi_dcmplt>:
 800846c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008470:	f7ff ffea 	bl	8008448 <__aeabi_cdcmpeq>
 8008474:	bf34      	ite	cc
 8008476:	2001      	movcc	r0, #1
 8008478:	2000      	movcs	r0, #0
 800847a:	f85d fb08 	ldr.w	pc, [sp], #8
 800847e:	bf00      	nop

08008480 <__aeabi_dcmple>:
 8008480:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008484:	f7ff ffe0 	bl	8008448 <__aeabi_cdcmpeq>
 8008488:	bf94      	ite	ls
 800848a:	2001      	movls	r0, #1
 800848c:	2000      	movhi	r0, #0
 800848e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008492:	bf00      	nop

08008494 <__aeabi_dcmpge>:
 8008494:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008498:	f7ff ffce 	bl	8008438 <__aeabi_cdrcmple>
 800849c:	bf94      	ite	ls
 800849e:	2001      	movls	r0, #1
 80084a0:	2000      	movhi	r0, #0
 80084a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80084a6:	bf00      	nop

080084a8 <__aeabi_dcmpgt>:
 80084a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80084ac:	f7ff ffc4 	bl	8008438 <__aeabi_cdrcmple>
 80084b0:	bf34      	ite	cc
 80084b2:	2001      	movcc	r0, #1
 80084b4:	2000      	movcs	r0, #0
 80084b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80084ba:	bf00      	nop

080084bc <__aeabi_d2iz>:
 80084bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80084c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80084c4:	d215      	bcs.n	80084f2 <__aeabi_d2iz+0x36>
 80084c6:	d511      	bpl.n	80084ec <__aeabi_d2iz+0x30>
 80084c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80084cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80084d0:	d912      	bls.n	80084f8 <__aeabi_d2iz+0x3c>
 80084d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80084d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80084de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80084e2:	fa23 f002 	lsr.w	r0, r3, r2
 80084e6:	bf18      	it	ne
 80084e8:	4240      	negne	r0, r0
 80084ea:	4770      	bx	lr
 80084ec:	f04f 0000 	mov.w	r0, #0
 80084f0:	4770      	bx	lr
 80084f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80084f6:	d105      	bne.n	8008504 <__aeabi_d2iz+0x48>
 80084f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80084fc:	bf08      	it	eq
 80084fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008502:	4770      	bx	lr
 8008504:	f04f 0000 	mov.w	r0, #0
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop

0800850c <Reset_Handler>:
 800850c:	2100      	movs	r1, #0
 800850e:	e003      	b.n	8008518 <LoopCopyDataInit>

08008510 <CopyDataInit>:
 8008510:	4b0a      	ldr	r3, [pc, #40]	; (800853c <LoopFillZerobss+0x10>)
 8008512:	585b      	ldr	r3, [r3, r1]
 8008514:	5043      	str	r3, [r0, r1]
 8008516:	3104      	adds	r1, #4

08008518 <LoopCopyDataInit>:
 8008518:	4809      	ldr	r0, [pc, #36]	; (8008540 <LoopFillZerobss+0x14>)
 800851a:	4b0a      	ldr	r3, [pc, #40]	; (8008544 <LoopFillZerobss+0x18>)
 800851c:	1842      	adds	r2, r0, r1
 800851e:	429a      	cmp	r2, r3
 8008520:	d3f6      	bcc.n	8008510 <CopyDataInit>
 8008522:	4a09      	ldr	r2, [pc, #36]	; (8008548 <LoopFillZerobss+0x1c>)
 8008524:	e002      	b.n	800852c <LoopFillZerobss>

08008526 <FillZerobss>:
 8008526:	2300      	movs	r3, #0
 8008528:	f842 3b04 	str.w	r3, [r2], #4

0800852c <LoopFillZerobss>:
 800852c:	4b07      	ldr	r3, [pc, #28]	; (800854c <LoopFillZerobss+0x20>)
 800852e:	429a      	cmp	r2, r3
 8008530:	d3f9      	bcc.n	8008526 <FillZerobss>
 8008532:	f7fa fddd 	bl	80030f0 <SystemInit>
 8008536:	f7fa fa9b 	bl	8002a70 <main>
 800853a:	4770      	bx	lr
 800853c:	08008804 	.word	0x08008804
 8008540:	20000000 	.word	0x20000000
 8008544:	20000994 	.word	0x20000994
 8008548:	20000994 	.word	0x20000994
 800854c:	2000100c 	.word	0x2000100c

08008550 <ADC_IRQHandler>:
 8008550:	e7fe      	b.n	8008550 <ADC_IRQHandler>
	...

08008554 <USARTPort>:
 8008554:	1000 4001 4400 4000 4800 4000 4c00 4000     ...@.D.@.H.@.L.@
 8008564:	5000 4000 1400 4001 6148 7070 2079 7261     .P.@...@Happy ar
 8008574:	2065 6874 736f 2065 6877 206f 6e6b 776f     e those who know
 8008584:	7420 6568 2079 7261 2065 7073 7269 7469      they are spirit
 8008594:	6175 6c6c 2079 6f70 726f 203b 000a 0000     ually poor; ....
 80085a4:	6854 2065 696b 676e 6f64 206d 666f 6820     The kingdom of h
 80085b4:	6165 6576 206e 6562 6f6c 676e 2073 6f74     eaven belongs to
 80085c4:	7420 6568 216d 000a 480a 776f 6d20 6e61      them!...How man
 80085d4:	2079 7965 7365 6420 656f 2073 694d 7373     y eyes does Miss
 80085e4:	7369 6973 6970 7220 7669 7265 6820 7661     issipi river hav
 80085f4:	3f65 000a 3025 5834 000a 0000 203a 6572     e?..%04X....: re
 8008604:	6461 203a 0000 0000 000a 0000 7865 7469     ad: ........exit
 8008614:	0000 0000 6548 7061 6120 646e 7320 6174     ....Heap and sta
 8008624:	6b63 6320 6c6f 696c 6973 6e6f 000a 0000     ck collision....

08008634 <blanks.3927>:
 8008634:	2020 2020 2020 2020 2020 2020 2020 2020                     

08008644 <zeroes.3928>:
 8008644:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

08008654 <_global_impure_ptr>:
 8008654:	00e0 2000                                   ... 

08008658 <p05.2449>:
 8008658:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

08008668 <__mprec_tens>:
 8008668:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8008678:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8008688:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8008698:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80086a8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80086b8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80086c8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80086d8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80086e8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80086f8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8008708:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8008718:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8008728:	9db4 79d9 7843 44ea                         ...yCx.D

08008730 <__mprec_tinytens>:
 8008730:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8008740:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8008750:	6f43 64ac 0628 0ac8                         Co.d(...

08008758 <__mprec_bigtens>:
 8008758:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8008768:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8008778:	bf3c 7f73 4fdd 7515                         <.s..O.u

08008780 <blanks.3871>:
 8008780:	2020 2020 2020 2020 2020 2020 2020 2020                     

08008790 <zeroes.3872>:
 8008790:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 80087a0:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
 80087b0:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 80087c0:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
 80087d0:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
 80087e0:	0030 0000 6e49 6966 696e 7974 0000 0000     0...Infinity....
 80087f0:	614e 004e 0043 0000 4f50 4953 0058 0000     NaN.C...POSIX...
 8008800:	002e 0000                                   ....
