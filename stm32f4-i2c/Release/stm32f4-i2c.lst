
stm32f4-i2c.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000188:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800018c:	4b02      	ldr	r3, [pc, #8]	; (8000198 <NVIC_PriorityGroupConfig+0x10>)
 800018e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000192:	60d8      	str	r0, [r3, #12]
}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	e000ed00 	.word	0xe000ed00

0800019c <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800019c:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800019e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001a0:	b30b      	cbz	r3, 80001e6 <NVIC_Init+0x4a>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001a2:	4b17      	ldr	r3, [pc, #92]	; (8000200 <NVIC_Init+0x64>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001a4:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001a6:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001a8:	7884      	ldrb	r4, [r0, #2]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001aa:	43db      	mvns	r3, r3
 80001ac:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 80001b0:	f1c3 0104 	rsb	r1, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001b4:	b2c9      	uxtb	r1, r1
 80001b6:	fa12 f101 	lsls.w	r1, r2, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80001ba:	220f      	movs	r2, #15
 80001bc:	411a      	asrs	r2, r3
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001be:	7803      	ldrb	r3, [r0, #0]
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001c0:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001c2:	4022      	ands	r2, r4
 80001c4:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001c6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80001ca:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 80001ce:	0112      	lsls	r2, r2, #4
 80001d0:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001d2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001d6:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001d8:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001da:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001dc:	f003 031f 	and.w	r3, r3, #31
 80001e0:	fa12 f303 	lsls.w	r3, r2, r3
 80001e4:	e007      	b.n	80001f6 <NVIC_Init+0x5a>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001e6:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001e8:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ea:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ec:	f003 031f 	and.w	r3, r3, #31
 80001f0:	fa12 f303 	lsls.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001f4:	3120      	adds	r1, #32
 80001f6:	4a03      	ldr	r2, [pc, #12]	; (8000204 <NVIC_Init+0x68>)
 80001f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80001fc:	bd10      	pop	{r4, pc}
 80001fe:	bf00      	nop
 8000200:	e000ed00 	.word	0xe000ed00
 8000204:	e000e100 	.word	0xe000e100

08000208 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000208:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 800020c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000210:	4b01      	ldr	r3, [pc, #4]	; (8000218 <NVIC_SetVectorTable+0x10>)
 8000212:	4301      	orrs	r1, r0
 8000214:	6099      	str	r1, [r3, #8]
}
 8000216:	4770      	bx	lr
 8000218:	e000ed00 	.word	0xe000ed00

0800021c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800021e:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000220:	b109      	cbz	r1, 8000226 <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 8000222:	4310      	orrs	r0, r2
 8000224:	e001      	b.n	800022a <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000226:	ea22 0000 	bic.w	r0, r2, r0
 800022a:	6118      	str	r0, [r3, #16]
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000234:	4b04      	ldr	r3, [pc, #16]	; (8000248 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000236:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000238:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800023a:	bf0c      	ite	eq
 800023c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000240:	f022 0204 	bicne.w	r2, r2, #4
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	4770      	bx	lr
 8000248:	e000e010 	.word	0xe000e010

0800024c <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 800024c:	b508      	push	{r3, lr}
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 800024e:	2101      	movs	r1, #1
 8000250:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000254:	f003 fada 	bl	800380c <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8000258:	f44f 7080 	mov.w	r0, #256	; 0x100
 800025c:	2100      	movs	r1, #0
}
 800025e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8000262:	f003 bad3 	b.w	800380c <RCC_APB2PeriphResetCmd>

08000266 <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000266:	6843      	ldr	r3, [r0, #4]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000268:	680a      	ldr	r2, [r1, #0]
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 800026a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800026e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000272:	4313      	orrs	r3, r2
 8000274:	790a      	ldrb	r2, [r1, #4]
 8000276:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800027a:	6043      	str	r3, [r0, #4]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800027c:	68ca      	ldr	r2, [r1, #12]
 800027e:	690b      	ldr	r3, [r1, #16]
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000280:	b530      	push	{r4, r5, lr}
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000282:	431a      	orrs	r2, r3
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000284:	6884      	ldr	r4, [r0, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000286:	688d      	ldr	r5, [r1, #8]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <ADC_Init+0x46>)
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800028a:	432a      	orrs	r2, r5
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800028c:	4023      	ands	r3, r4
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800028e:	4313      	orrs	r3, r2
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000290:	794a      	ldrb	r2, [r1, #5]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000292:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000296:	6083      	str	r3, [r0, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000298:	7d0b      	ldrb	r3, [r1, #20]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800029a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 800029c:	3b01      	subs	r3, #1
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800029e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80002a8:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	c0fff7fd 	.word	0xc0fff7fd

080002b0 <ADC_StructInit>:
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 80002b0:	2300      	movs	r3, #0
 80002b2:	6003      	str	r3, [r0, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80002b4:	7103      	strb	r3, [r0, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80002b6:	7143      	strb	r3, [r0, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80002b8:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 80002ba:	60c3      	str	r3, [r0, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 80002bc:	6103      	str	r3, [r0, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 80002be:	2301      	movs	r3, #1
 80002c0:	7503      	strb	r3, [r0, #20]
}
 80002c2:	4770      	bx	lr

080002c4 <ADC_CommonInit>:
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80002c4:	4a07      	ldr	r2, [pc, #28]	; (80002e4 <ADC_CommonInit+0x20>)
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <ADC_CommonInit+0x24>)
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80002c8:	6851      	ldr	r1, [r2, #4]
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80002ca:	b510      	push	{r4, lr}
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80002cc:	400b      	ands	r3, r1
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80002ce:	e890 0012 	ldmia.w	r0, {r1, r4}
 80002d2:	4321      	orrs	r1, r4
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80002d4:	6884      	ldr	r4, [r0, #8]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80002d6:	68c0      	ldr	r0, [r0, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80002d8:	4321      	orrs	r1, r4
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80002da:	4301      	orrs	r1, r0
 80002dc:	430b      	orrs	r3, r1
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80002de:	6053      	str	r3, [r2, #4]
}
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	bf00      	nop
 80002e4:	40012300 	.word	0x40012300
 80002e8:	fffc30e0 	.word	0xfffc30e0

080002ec <ADC_CommonStructInit>:
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80002ec:	2300      	movs	r3, #0
 80002ee:	6003      	str	r3, [r0, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 80002f0:	6043      	str	r3, [r0, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80002f2:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80002f4:	60c3      	str	r3, [r0, #12]
}
 80002f6:	4770      	bx	lr

080002f8 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80002f8:	6883      	ldr	r3, [r0, #8]
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80002fa:	b111      	cbz	r1, 8000302 <ADC_Cmd+0xa>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	e001      	b.n	8000306 <ADC_Cmd+0xe>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000302:	f023 0301 	bic.w	r3, r3, #1
 8000306:	6083      	str	r3, [r0, #8]
 8000308:	4770      	bx	lr

0800030a <ADC_AnalogWatchdogCmd>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 800030a:	6843      	ldr	r3, [r0, #4]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 800030c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8000314:	430b      	orrs	r3, r1
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000316:	6043      	str	r3, [r0, #4]
}
 8000318:	4770      	bx	lr

0800031a <ADC_AnalogWatchdogThresholdsConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 800031a:	6241      	str	r1, [r0, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 800031c:	6282      	str	r2, [r0, #40]	; 0x28
}
 800031e:	4770      	bx	lr

08000320 <ADC_AnalogWatchdogSingleChannelConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8000320:	6843      	ldr	r3, [r0, #4]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8000322:	f023 031f 	bic.w	r3, r3, #31
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 8000326:	430b      	orrs	r3, r1
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000328:	6043      	str	r3, [r0, #4]
}
 800032a:	4770      	bx	lr

0800032c <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <ADC_TempSensorVrefintCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 800032e:	685a      	ldr	r2, [r3, #4]
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000330:	b110      	cbz	r0, 8000338 <ADC_TempSensorVrefintCmd+0xc>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8000332:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000336:	e001      	b.n	800033c <ADC_TempSensorVrefintCmd+0x10>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 8000338:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800033c:	605a      	str	r2, [r3, #4]
 800033e:	4770      	bx	lr
 8000340:	40012300 	.word	0x40012300

08000344 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <ADC_VBATCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 8000346:	685a      	ldr	r2, [r3, #4]
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000348:	b110      	cbz	r0, 8000350 <ADC_VBATCmd+0xc>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 800034a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800034e:	e001      	b.n	8000354 <ADC_VBATCmd+0x10>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 8000350:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	4770      	bx	lr
 8000358:	40012300 	.word	0x40012300

0800035c <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800035c:	2909      	cmp	r1, #9
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800035e:	b570      	push	{r4, r5, r6, lr}
 8000360:	b20c      	sxth	r4, r1
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000362:	d90c      	bls.n	800037e <ADC_RegularChannelConfig+0x22>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000364:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000368:	3c1e      	subs	r4, #30
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800036a:	68c6      	ldr	r6, [r0, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800036c:	2507      	movs	r5, #7
 800036e:	40a5      	lsls	r5, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000370:	ea26 0505 	bic.w	r5, r6, r5
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000374:	40a3      	lsls	r3, r4
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000376:	ea45 0403 	orr.w	r4, r5, r3
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800037a:	60c4      	str	r4, [r0, #12]
 800037c:	e00a      	b.n	8000394 <ADC_RegularChannelConfig+0x38>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800037e:	6906      	ldr	r6, [r0, #16]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000380:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000384:	2507      	movs	r5, #7
 8000386:	40a5      	lsls	r5, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000388:	ea26 0505 	bic.w	r5, r6, r5
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800038c:	fa13 f404 	lsls.w	r4, r3, r4
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000390:	432c      	orrs	r4, r5
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000392:	6104      	str	r4, [r0, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000394:	2a06      	cmp	r2, #6
 8000396:	d80c      	bhi.n	80003b2 <ADC_RegularChannelConfig+0x56>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000398:	2305      	movs	r3, #5
 800039a:	3a01      	subs	r2, #1
 800039c:	435a      	muls	r2, r3
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 800039e:	6b44      	ldr	r4, [r0, #52]	; 0x34
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80003a0:	231f      	movs	r3, #31
 80003a2:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80003a4:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80003a8:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80003aa:	ea43 0201 	orr.w	r2, r3, r1
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80003ae:	6342      	str	r2, [r0, #52]	; 0x34
 80003b0:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80003b2:	2a0c      	cmp	r2, #12
 80003b4:	b212      	sxth	r2, r2
 80003b6:	d80c      	bhi.n	80003d2 <ADC_RegularChannelConfig+0x76>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80003b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80003bc:	3a23      	subs	r2, #35	; 0x23
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80003be:	6b04      	ldr	r4, [r0, #48]	; 0x30
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80003c0:	231f      	movs	r3, #31
 80003c2:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80003c4:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80003c8:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80003ca:	ea43 0201 	orr.w	r2, r3, r1
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80003ce:	6302      	str	r2, [r0, #48]	; 0x30
 80003d0:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80003d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80003d6:	3a41      	subs	r2, #65	; 0x41
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80003d8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80003da:	231f      	movs	r3, #31
 80003dc:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80003de:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80003e2:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80003e4:	ea43 0201 	orr.w	r2, r3, r1
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80003e8:	62c2      	str	r2, [r0, #44]	; 0x2c
 80003ea:	bd70      	pop	{r4, r5, r6, pc}

080003ec <ADC_SoftwareStartConv>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80003ec:	6883      	ldr	r3, [r0, #8]
 80003ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80003f2:	6083      	str	r3, [r0, #8]
}
 80003f4:	4770      	bx	lr

080003f6 <ADC_GetSoftwareStartConvStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 80003f6:	6880      	ldr	r0, [r0, #8]
    bitstatus = RESET;
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
}
 80003f8:	f3c0 5080 	ubfx	r0, r0, #22, #1
 80003fc:	4770      	bx	lr

080003fe <ADC_EOCOnEachRegularChannelCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 80003fe:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000400:	b111      	cbz	r1, 8000408 <ADC_EOCOnEachRegularChannelCmd+0xa>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 8000402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000406:	e001      	b.n	800040c <ADC_EOCOnEachRegularChannelCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8000408:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800040c:	6083      	str	r3, [r0, #8]
 800040e:	4770      	bx	lr

08000410 <ADC_ContinuousModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8000410:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000412:	b111      	cbz	r1, 800041a <ADC_ContinuousModeCmd+0xa>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8000414:	f043 0302 	orr.w	r3, r3, #2
 8000418:	e001      	b.n	800041e <ADC_ContinuousModeCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 800041a:	f023 0302 	bic.w	r3, r3, #2
 800041e:	6083      	str	r3, [r0, #8]
 8000420:	4770      	bx	lr

08000422 <ADC_DiscModeChannelCountConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8000422:	6843      	ldr	r3, [r0, #4]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8000424:	3901      	subs	r1, #1
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 8000426:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
  tmpreg1 |= tmpreg2 << 13;
 800042a:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 800042e:	6043      	str	r3, [r0, #4]
}
 8000430:	4770      	bx	lr

08000432 <ADC_DiscModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000432:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000434:	b111      	cbz	r1, 800043c <ADC_DiscModeCmd+0xa>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000436:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800043a:	e001      	b.n	8000440 <ADC_DiscModeCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 800043c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000440:	6043      	str	r3, [r0, #4]
 8000442:	4770      	bx	lr

08000444 <ADC_GetConversionValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000444:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
 8000446:	b280      	uxth	r0, r0
 8000448:	4770      	bx	lr

0800044a <ADC_GetMultiModeConversionValue>:
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 800044a:	4b01      	ldr	r3, [pc, #4]	; (8000450 <ADC_GetMultiModeConversionValue+0x6>)
 800044c:	6818      	ldr	r0, [r3, #0]
}
 800044e:	4770      	bx	lr
 8000450:	40012308 	.word	0x40012308

08000454 <ADC_DMACmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000454:	6883      	ldr	r3, [r0, #8]
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000456:	b111      	cbz	r1, 800045e <ADC_DMACmd+0xa>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800045c:	e001      	b.n	8000462 <ADC_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 800045e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000462:	6083      	str	r3, [r0, #8]
 8000464:	4770      	bx	lr

08000466 <ADC_DMARequestAfterLastTransferCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8000466:	6883      	ldr	r3, [r0, #8]
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000468:	b111      	cbz	r1, 8000470 <ADC_DMARequestAfterLastTransferCmd+0xa>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 800046a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800046e:	e001      	b.n	8000474 <ADC_DMARequestAfterLastTransferCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000474:	6083      	str	r3, [r0, #8]
 8000476:	4770      	bx	lr

08000478 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 8000478:	4b04      	ldr	r3, [pc, #16]	; (800048c <ADC_MultiModeDMARequestAfterLastTransferCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 800047a:	685a      	ldr	r2, [r3, #4]
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800047c:	b110      	cbz	r0, 8000484 <ADC_MultiModeDMARequestAfterLastTransferCmd+0xc>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 800047e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000482:	e001      	b.n	8000488 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x10>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 8000484:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	4770      	bx	lr
 800048c:	40012300 	.word	0x40012300

08000490 <ADC_InjectedChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000490:	2909      	cmp	r1, #9
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000492:	b570      	push	{r4, r5, r6, lr}
 8000494:	b20c      	sxth	r4, r1
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000496:	d90c      	bls.n	80004b2 <ADC_InjectedChannelConfig+0x22>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8000498:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800049c:	3c1e      	subs	r4, #30
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800049e:	68c6      	ldr	r6, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 80004a0:	2507      	movs	r5, #7
 80004a2:	40a5      	lsls	r5, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80004a4:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 80004a8:	40a3      	lsls	r3, r4
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80004aa:	ea45 0403 	orr.w	r4, r5, r3
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80004ae:	60c4      	str	r4, [r0, #12]
 80004b0:	e00a      	b.n	80004c8 <ADC_InjectedChannelConfig+0x38>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80004b2:	6906      	ldr	r6, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80004b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80004b8:	2507      	movs	r5, #7
 80004ba:	40a5      	lsls	r5, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80004bc:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80004c0:	fa13 f404 	lsls.w	r4, r3, r4
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80004c4:	432c      	orrs	r4, r5
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80004c6:	6104      	str	r4, [r0, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 80004c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 80004ca:	f3c3 5401 	ubfx	r4, r3, #20, #2
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80004ce:	1b12      	subs	r2, r2, r4
 80004d0:	3202      	adds	r2, #2
 80004d2:	b2d2      	uxtb	r2, r2
 80004d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80004d8:	241f      	movs	r4, #31
 80004da:	4094      	lsls	r4, r2
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 80004dc:	ea23 0304 	bic.w	r3, r3, r4
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80004e0:	4091      	lsls	r1, r2
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 80004e2:	430b      	orrs	r3, r1
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80004e4:	6383      	str	r3, [r0, #56]	; 0x38
}
 80004e6:	bd70      	pop	{r4, r5, r6, pc}

080004e8 <ADC_InjectedSequencerLengthConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 80004e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 80004ea:	3901      	subs	r1, #1
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 80004ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 80004f0:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80004f4:	6383      	str	r3, [r0, #56]	; 0x38
}
 80004f6:	4770      	bx	lr

080004f8 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 80004f8:	b082      	sub	sp, #8
    __IO uint32_t tmp = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 80004fe:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel;
 8000500:	9b01      	ldr	r3, [sp, #4]
 8000502:	18cb      	adds	r3, r1, r3
 8000504:	9301      	str	r3, [sp, #4]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8000506:	9b01      	ldr	r3, [sp, #4]
 8000508:	601a      	str	r2, [r3, #0]
}
 800050a:	b002      	add	sp, #8
 800050c:	4770      	bx	lr

0800050e <ADC_ExternalTrigInjectedConvConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 800050e:	6883      	ldr	r3, [r0, #8]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8000510:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8000514:	430b      	orrs	r3, r1
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8000516:	6083      	str	r3, [r0, #8]
}
 8000518:	4770      	bx	lr

0800051a <ADC_ExternalTrigInjectedConvEdgeConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 800051a:	6883      	ldr	r3, [r0, #8]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 800051c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8000520:	430b      	orrs	r3, r1
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8000522:	6083      	str	r3, [r0, #8]
}
 8000524:	4770      	bx	lr

08000526 <ADC_SoftwareStartInjectedConv>:
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 8000526:	6883      	ldr	r3, [r0, #8]
 8000528:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800052c:	6083      	str	r3, [r0, #8]
}
 800052e:	4770      	bx	lr

08000530 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8000530:	6880      	ldr	r0, [r0, #8]
    /* JSWSTART bit is reset */
    bitstatus = RESET;
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
}
 8000532:	f3c0 5080 	ubfx	r0, r0, #22, #1
 8000536:	4770      	bx	lr

08000538 <ADC_AutoInjectedConvCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8000538:	6843      	ldr	r3, [r0, #4]
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800053a:	b111      	cbz	r1, 8000542 <ADC_AutoInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 800053c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000540:	e001      	b.n	8000546 <ADC_AutoInjectedConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 8000542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000546:	6043      	str	r3, [r0, #4]
 8000548:	4770      	bx	lr

0800054a <ADC_InjectedDiscModeCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 800054a:	6843      	ldr	r3, [r0, #4]
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800054c:	b111      	cbz	r1, 8000554 <ADC_InjectedDiscModeCmd+0xa>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 800054e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000552:	e001      	b.n	8000558 <ADC_InjectedDiscModeCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8000554:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000558:	6043      	str	r3, [r0, #4]
 800055a:	4770      	bx	lr

0800055c <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 800055c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8000562:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8000564:	9b01      	ldr	r3, [sp, #4]
 8000566:	3328      	adds	r3, #40	; 0x28
 8000568:	185b      	adds	r3, r3, r1
 800056a:	9301      	str	r3, [sp, #4]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 800056c:	9b01      	ldr	r3, [sp, #4]
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	b280      	uxth	r0, r0
 8000572:	b002      	add	sp, #8
 8000574:	4770      	bx	lr

08000576 <ADC_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
  itmask = (uint32_t)0x01 << itmask;    
 8000576:	2301      	movs	r3, #1
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8000578:	b2c9      	uxtb	r1, r1
  itmask = (uint32_t)0x01 << itmask;    
 800057a:	fa13 f101 	lsls.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 800057e:	6843      	ldr	r3, [r0, #4]

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
  itmask = (uint32_t)0x01 << itmask;    

  if (NewState != DISABLE)
 8000580:	b10a      	cbz	r2, 8000586 <ADC_ITConfig+0x10>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8000582:	4319      	orrs	r1, r3
 8000584:	e001      	b.n	800058a <ADC_ITConfig+0x14>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000586:	ea23 0101 	bic.w	r1, r3, r1
 800058a:	6041      	str	r1, [r0, #4]
 800058c:	4770      	bx	lr

0800058e <ADC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 800058e:	6803      	ldr	r3, [r0, #0]
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000590:	4219      	tst	r1, r3
    /* ADC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
}
 8000592:	bf0c      	ite	eq
 8000594:	2000      	moveq	r0, #0
 8000596:	2001      	movne	r0, #1
 8000598:	4770      	bx	lr

0800059a <ADC_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 800059a:	43c9      	mvns	r1, r1
 800059c:	6001      	str	r1, [r0, #0]
}
 800059e:	4770      	bx	lr

080005a0 <ADC_GetITStatus>:

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 80005a0:	6843      	ldr	r3, [r0, #4]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 80005a2:	6800      	ldr	r0, [r0, #0]
 80005a4:	ea10 2011 	ands.w	r0, r0, r1, lsr #8
 80005a8:	d007      	beq.n	80005ba <ADC_GetITStatus+0x1a>

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 80005aa:	2201      	movs	r2, #1
 80005ac:	b2c9      	uxtb	r1, r1
 80005ae:	fa12 f101 	lsls.w	r1, r2, r1
  *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
 80005b2:	4219      	tst	r1, r3

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
  {
    /* ADC_IT is set */
    bitstatus = SET;
 80005b4:	bf0c      	ite	eq
 80005b6:	2000      	moveq	r0, #0
 80005b8:	2001      	movne	r0, #1
    /* ADC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_IT status */
  return  bitstatus;
}
 80005ba:	4770      	bx	lr

080005bc <ADC_ClearITPendingBit>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 80005bc:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80005c0:	6001      	str	r1, [r0, #0]
}                    
 80005c2:	4770      	bx	lr

080005c4 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 80005c4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <CAN_DeInit+0x30>)
 80005c8:	4298      	cmp	r0, r3
 80005ca:	d107      	bne.n	80005dc <CAN_DeInit+0x18>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 80005cc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80005d0:	2101      	movs	r1, #1
 80005d2:	f003 f90f 	bl	80037f4 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 80005d6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80005da:	e006      	b.n	80005ea <CAN_DeInit+0x26>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 80005dc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80005e0:	2101      	movs	r1, #1
 80005e2:	f003 f907 	bl	80037f4 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 80005e6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80005ea:	2100      	movs	r1, #0
  }
}
 80005ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 80005f0:	f003 b900 	b.w	80037f4 <RCC_APB1PeriphResetCmd>
 80005f4:	40006400 	.word	0x40006400

080005f8 <CAN_Init>:
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 80005f8:	6803      	ldr	r3, [r0, #0]
 80005fa:	f023 0302 	bic.w	r3, r3, #2
 80005fe:	6003      	str	r3, [r0, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8000600:	6803      	ldr	r3, [r0, #0]
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6003      	str	r3, [r0, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060c:	6842      	ldr	r2, [r0, #4]
 800060e:	07d2      	lsls	r2, r2, #31
 8000610:	d401      	bmi.n	8000616 <CAN_Init+0x1e>
 8000612:	3b01      	subs	r3, #1
 8000614:	d1fa      	bne.n	800060c <CAN_Init+0x14>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000616:	6843      	ldr	r3, [r0, #4]
 8000618:	f013 0301 	ands.w	r3, r3, #1
 800061c:	d056      	beq.n	80006cc <CAN_Init+0xd4>
    InitStatus = CAN_InitStatus_Failed;
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 800061e:	798b      	ldrb	r3, [r1, #6]
 8000620:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8000622:	6803      	ldr	r3, [r0, #0]
 8000624:	bf0c      	ite	eq
 8000626:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 800062a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 800062e:	6003      	str	r3, [r0, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8000630:	79cb      	ldrb	r3, [r1, #7]
 8000632:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8000634:	6803      	ldr	r3, [r0, #0]
 8000636:	bf0c      	ite	eq
 8000638:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 800063c:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8000640:	6003      	str	r3, [r0, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8000642:	7a0b      	ldrb	r3, [r1, #8]
 8000644:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8000646:	6803      	ldr	r3, [r0, #0]
 8000648:	bf0c      	ite	eq
 800064a:	f043 0320 	orreq.w	r3, r3, #32
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 800064e:	f023 0320 	bicne.w	r3, r3, #32
 8000652:	6003      	str	r3, [r0, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8000654:	7a4b      	ldrb	r3, [r1, #9]
 8000656:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_NART;
 8000658:	6803      	ldr	r3, [r0, #0]
 800065a:	bf0c      	ite	eq
 800065c:	f043 0310 	orreq.w	r3, r3, #16
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000660:	f023 0310 	bicne.w	r3, r3, #16
 8000664:	6003      	str	r3, [r0, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8000666:	7a8b      	ldrb	r3, [r1, #10]
 8000668:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_RFLM;
 800066a:	6803      	ldr	r3, [r0, #0]
 800066c:	bf0c      	ite	eq
 800066e:	f043 0308 	orreq.w	r3, r3, #8
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000672:	f023 0308 	bicne.w	r3, r3, #8
 8000676:	6003      	str	r3, [r0, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8000678:	7acb      	ldrb	r3, [r1, #11]
 800067a:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_TXFP;
 800067c:	6803      	ldr	r3, [r0, #0]
 800067e:	bf0c      	ite	eq
 8000680:	f043 0304 	orreq.w	r3, r3, #4
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000684:	f023 0304 	bicne.w	r3, r3, #4
 8000688:	6003      	str	r3, [r0, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 800068a:	788b      	ldrb	r3, [r1, #2]
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 800068c:	78ca      	ldrb	r2, [r1, #3]
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 800068e:	079b      	lsls	r3, r3, #30
 8000690:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000694:	790a      	ldrb	r2, [r1, #4]
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8000696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 800069a:	794a      	ldrb	r2, [r1, #5]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 800069c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 80006a0:	880a      	ldrh	r2, [r1, #0]
 80006a2:	3a01      	subs	r2, #1

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 80006a4:	4313      	orrs	r3, r2
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80006a6:	61c3      	str	r3, [r0, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 80006a8:	6803      	ldr	r3, [r0, #0]
 80006aa:	f023 0301 	bic.w	r3, r3, #1
 80006ae:	6003      	str	r3, [r0, #0]

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80006b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b4:	6842      	ldr	r2, [r0, #4]
 80006b6:	07d2      	lsls	r2, r2, #31
 80006b8:	d501      	bpl.n	80006be <CAN_Init+0xc6>
 80006ba:	3b01      	subs	r3, #1
 80006bc:	d1fa      	bne.n	80006b4 <CAN_Init+0xbc>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 80006be:	6843      	ldr	r3, [r0, #4]
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
  {
    InitStatus = CAN_InitStatus_Failed;
 80006c0:	f013 0f01 	tst.w	r3, #1
 80006c4:	bf14      	ite	ne
 80006c6:	2000      	movne	r0, #0
 80006c8:	2001      	moveq	r0, #1
 80006ca:	4770      	bx	lr
 80006cc:	4618      	mov	r0, r3
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
}
 80006ce:	4770      	bx	lr

080006d0 <CAN_FilterInit>:
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 80006d0:	7a83      	ldrb	r3, [r0, #10]
 80006d2:	2101      	movs	r1, #1
 80006d4:	4099      	lsls	r1, r3

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80006d6:	4b35      	ldr	r3, [pc, #212]	; (80007ac <CAN_FilterInit+0xdc>)
 80006d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80006dc:	f042 0201 	orr.w	r2, r2, #1
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 80006e0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80006e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 80006e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80006ea:	43cc      	mvns	r4, r1
 80006ec:	4022      	ands	r2, r4
 80006ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 80006f2:	7b02      	ldrb	r2, [r0, #12]
 80006f4:	b9aa      	cbnz	r2, 8000722 <CAN_FilterInit+0x52>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 80006f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 80006fa:	88c6      	ldrh	r6, [r0, #6]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 80006fc:	8845      	ldrh	r5, [r0, #2]

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 80006fe:	4022      	ands	r2, r4
 8000700:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000704:	7a82      	ldrb	r2, [r0, #10]
 8000706:	3248      	adds	r2, #72	; 0x48
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000708:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800070c:	f843 5032 	str.w	r5, [r3, r2, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8000710:	8803      	ldrh	r3, [r0, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000712:	8882      	ldrh	r2, [r0, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000714:	7a85      	ldrb	r5, [r0, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000716:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800071a:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <CAN_FilterInit+0xe0>)
 800071c:	00ed      	lsls	r5, r5, #3
 800071e:	18eb      	adds	r3, r5, r3
 8000720:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8000722:	7b03      	ldrb	r3, [r0, #12]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d116      	bne.n	8000756 <CAN_FilterInit+0x86>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000728:	4b20      	ldr	r3, [pc, #128]	; (80007ac <CAN_FilterInit+0xdc>)
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 800072a:	8806      	ldrh	r6, [r0, #0]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 800072c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8000730:	8845      	ldrh	r5, [r0, #2]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000732:	430a      	orrs	r2, r1
 8000734:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000738:	7a82      	ldrb	r2, [r0, #10]
 800073a:	3248      	adds	r2, #72	; 0x48
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 800073c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000740:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 8000744:	88c3      	ldrh	r3, [r0, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000746:	8882      	ldrh	r2, [r0, #4]
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000748:	7a85      	ldrb	r5, [r0, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800074a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <CAN_FilterInit+0xe0>)
 8000750:	00ed      	lsls	r5, r5, #3
 8000752:	18eb      	adds	r3, r5, r3
 8000754:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8000756:	7ac3      	ldrb	r3, [r0, #11]
 8000758:	4a14      	ldr	r2, [pc, #80]	; (80007ac <CAN_FilterInit+0xdc>)
 800075a:	b91b      	cbnz	r3, 8000764 <CAN_FilterInit+0x94>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 800075c:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8000760:	4023      	ands	r3, r4
 8000762:	e002      	b.n	800076a <CAN_FilterInit+0x9a>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8000764:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8000768:	430b      	orrs	r3, r1
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 800076a:	8905      	ldrh	r5, [r0, #8]
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 800076c:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <CAN_FilterInit+0xdc>)
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8000772:	b92d      	cbnz	r5, 8000780 <CAN_FilterInit+0xb0>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8000774:	f8d2 5214 	ldr.w	r5, [r2, #532]	; 0x214
 8000778:	402c      	ands	r4, r5
 800077a:	f8c2 4214 	str.w	r4, [r2, #532]	; 0x214
 800077e:	e006      	b.n	800078e <CAN_FilterInit+0xbe>
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8000780:	2d01      	cmp	r5, #1
 8000782:	d104      	bne.n	800078e <CAN_FilterInit+0xbe>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8000784:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000788:	430a      	orrs	r2, r1
 800078a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 800078e:	7b42      	ldrb	r2, [r0, #13]
 8000790:	2a01      	cmp	r2, #1
 8000792:	d104      	bne.n	800079e <CAN_FilterInit+0xce>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8000794:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000798:	4311      	orrs	r1, r2
 800079a:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 800079e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80007a2:	f022 0201 	bic.w	r2, r2, #1
 80007a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	40006400 	.word	0x40006400
 80007b0:	40006640 	.word	0x40006640

080007b4 <CAN_StructInit>:
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	7183      	strb	r3, [r0, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 80007b8:	71c3      	strb	r3, [r0, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 80007ba:	7203      	strb	r3, [r0, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 80007bc:	7243      	strb	r3, [r0, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 80007be:	7283      	strb	r3, [r0, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 80007c0:	72c3      	strb	r3, [r0, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 80007c2:	7083      	strb	r3, [r0, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 80007c4:	70c3      	strb	r3, [r0, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 80007c6:	2303      	movs	r3, #3
 80007c8:	7103      	strb	r3, [r0, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 80007ca:	2302      	movs	r3, #2
 80007cc:	7143      	strb	r3, [r0, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	8003      	strh	r3, [r0, #0]
}
 80007d2:	4770      	bx	lr

080007d4 <CAN_SlaveStartBank>:
{
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <CAN_SlaveStartBank+0x38>)
 80007d6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80007da:	f042 0201 	orr.w	r2, r2, #1
 80007de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 80007e2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80007e6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80007ea:	f022 020e 	bic.w	r2, r2, #14
 80007ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 80007f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80007f6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80007fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 80007fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000802:	f022 0201 	bic.w	r2, r2, #1
 8000806:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800080a:	4770      	bx	lr
 800080c:	40006400 	.word	0x40006400

08000810 <CAN_DBGFreeze>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8000810:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000812:	b111      	cbz	r1, 800081a <CAN_DBGFreeze+0xa>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8000814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000818:	e001      	b.n	800081e <CAN_DBGFreeze+0xe>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 800081a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800081e:	6003      	str	r3, [r0, #0]
 8000820:	4770      	bx	lr

08000822 <CAN_TTComModeCmd>:
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8000822:	6803      	ldr	r3, [r0, #0]
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000824:	b199      	cbz	r1, 800084e <CAN_TTComModeCmd+0x2c>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8000826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082a:	6003      	str	r3, [r0, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 800082c:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8000830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000834:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 8000838:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 800083c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000840:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 8000844:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8000848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800084c:	e012      	b.n	8000874 <CAN_TTComModeCmd+0x52>
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 800084e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000852:	6003      	str	r3, [r0, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 8000854:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8000858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800085c:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 8000860:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8000864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000868:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 800086c:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8000870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000874:	f8c0 31a4 	str.w	r3, [r0, #420]	; 0x1a4
 8000878:	4770      	bx	lr

0800087a <CAN_Transmit>:
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 800087a:	6882      	ldr	r2, [r0, #8]
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 800087c:	4603      	mov	r3, r0
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 800087e:	0150      	lsls	r0, r2, #5
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8000880:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8000882:	d407      	bmi.n	8000894 <CAN_Transmit+0x1a>
  {
    transmit_mailbox = 0;
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	0112      	lsls	r2, r2, #4
 8000888:	d406      	bmi.n	8000898 <CAN_Transmit+0x1e>
  {
    transmit_mailbox = 1;
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	00d0      	lsls	r0, r2, #3
 800088e:	d54a      	bpl.n	8000926 <CAN_Transmit+0xac>
  {
    transmit_mailbox = 2;
 8000890:	2002      	movs	r0, #2
 8000892:	e002      	b.n	800089a <CAN_Transmit+0x20>
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
  {
    transmit_mailbox = 0;
 8000894:	2000      	movs	r0, #0
 8000896:	e000      	b.n	800089a <CAN_Transmit+0x20>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
  {
    transmit_mailbox = 1;
 8000898:	2001      	movs	r0, #1
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 800089a:	f100 0218 	add.w	r2, r0, #24
 800089e:	0112      	lsls	r2, r2, #4
 80008a0:	589c      	ldr	r4, [r3, r2]
 80008a2:	f004 0401 	and.w	r4, r4, #1
 80008a6:	509c      	str	r4, [r3, r2]
    if (TxMessage->IDE == CAN_Id_Standard)
 80008a8:	7a0c      	ldrb	r4, [r1, #8]
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 80008aa:	589d      	ldr	r5, [r3, r2]

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
    if (TxMessage->IDE == CAN_Id_Standard)
 80008ac:	b924      	cbnz	r4, 80008b8 <CAN_Transmit+0x3e>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 80008ae:	680e      	ldr	r6, [r1, #0]
 80008b0:	7a4c      	ldrb	r4, [r1, #9]
 80008b2:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 80008b6:	e004      	b.n	80008c2 <CAN_Transmit+0x48>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80008b8:	684e      	ldr	r6, [r1, #4]
 80008ba:	ea44 04c6 	orr.w	r4, r4, r6, lsl #3
                                                  TxMessage->IDE | \
 80008be:	432c      	orrs	r4, r5
 80008c0:	7a4d      	ldrb	r5, [r1, #9]
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80008c2:	432c      	orrs	r4, r5
 80008c4:	509c      	str	r4, [r3, r2]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 80008c6:	7a8a      	ldrb	r2, [r1, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80008c8:	f100 0418 	add.w	r4, r0, #24
 80008cc:	0124      	lsls	r4, r4, #4
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 80008ce:	f002 020f 	and.w	r2, r2, #15
 80008d2:	728a      	strb	r2, [r1, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80008d4:	191a      	adds	r2, r3, r4
 80008d6:	6855      	ldr	r5, [r2, #4]
 80008d8:	f025 050f 	bic.w	r5, r5, #15
 80008dc:	6055      	str	r5, [r2, #4]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 80008de:	6855      	ldr	r5, [r2, #4]
 80008e0:	7a8e      	ldrb	r6, [r1, #10]
 80008e2:	4335      	orrs	r5, r6
 80008e4:	6055      	str	r5, [r2, #4]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80008e6:	7b4e      	ldrb	r6, [r1, #13]
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80008e8:	7b8a      	ldrb	r2, [r1, #14]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80008ea:	0436      	lsls	r6, r6, #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80008ec:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 80008f0:	7aca      	ldrb	r2, [r1, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80008f2:	4316      	orrs	r6, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80008f4:	7b0a      	ldrb	r2, [r1, #12]
 80008f6:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80008fa:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 80008fe:	f502 75c4 	add.w	r5, r2, #392	; 0x188
 8000902:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8000906:	7c4a      	ldrb	r2, [r1, #17]
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8000908:	7c8e      	ldrb	r6, [r1, #18]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 800090a:	0412      	lsls	r2, r2, #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800090c:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 8000910:	7bce      	ldrb	r6, [r1, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8000912:	7c09      	ldrb	r1, [r1, #16]
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8000914:	4332      	orrs	r2, r6
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8000916:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800091a:	606a      	str	r2, [r5, #4]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 800091c:	591a      	ldr	r2, [r3, r4]
 800091e:	f042 0201 	orr.w	r2, r2, #1
 8000922:	511a      	str	r2, [r3, r4]
 8000924:	bd70      	pop	{r4, r5, r6, pc}
  {
    transmit_mailbox = 2;
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8000926:	2004      	movs	r0, #4
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
  }
  return transmit_mailbox;
}
 8000928:	bd70      	pop	{r4, r5, r6, pc}

0800092a <CAN_TransmitStatus>:

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 800092a:	2901      	cmp	r1, #1
 800092c:	d006      	beq.n	800093c <CAN_TransmitStatus+0x12>
 800092e:	d302      	bcc.n	8000936 <CAN_TransmitStatus+0xc>
 8000930:	2902      	cmp	r1, #2
 8000932:	d10a      	bne.n	800094a <CAN_TransmitStatus+0x20>
 8000934:	e005      	b.n	8000942 <CAN_TransmitStatus+0x18>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 8000936:	6882      	ldr	r2, [r0, #8]
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <CAN_TransmitStatus+0x4a>)
 800093a:	e004      	b.n	8000946 <CAN_TransmitStatus+0x1c>
      break;
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 800093c:	6882      	ldr	r2, [r0, #8]
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <CAN_TransmitStatus+0x4e>)
 8000940:	e001      	b.n	8000946 <CAN_TransmitStatus+0x1c>
      break;
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 8000942:	6882      	ldr	r2, [r0, #8]
 8000944:	4b0d      	ldr	r3, [pc, #52]	; (800097c <CAN_TransmitStatus+0x52>)
 8000946:	4013      	ands	r3, r2
      break;
 8000948:	e000      	b.n	800094c <CAN_TransmitStatus+0x22>
    default:
      state = CAN_TxStatus_Failed;
 800094a:	2300      	movs	r3, #0
      break;
  }
  switch (state)
 800094c:	4a09      	ldr	r2, [pc, #36]	; (8000974 <CAN_TransmitStatus+0x4a>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d00b      	beq.n	800096a <CAN_TransmitStatus+0x40>
 8000952:	d801      	bhi.n	8000958 <CAN_TransmitStatus+0x2e>
 8000954:	b13b      	cbz	r3, 8000966 <CAN_TransmitStatus+0x3c>
 8000956:	e00a      	b.n	800096e <CAN_TransmitStatus+0x44>
 8000958:	4a07      	ldr	r2, [pc, #28]	; (8000978 <CAN_TransmitStatus+0x4e>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d005      	beq.n	800096a <CAN_TransmitStatus+0x40>
 800095e:	4a07      	ldr	r2, [pc, #28]	; (800097c <CAN_TransmitStatus+0x52>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d104      	bne.n	800096e <CAN_TransmitStatus+0x44>
 8000964:	e001      	b.n	800096a <CAN_TransmitStatus+0x40>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 8000966:	2002      	movs	r0, #2
 8000968:	4770      	bx	lr
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
      break;
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
      break;
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 800096a:	2001      	movs	r0, #1
      break;
 800096c:	4770      	bx	lr
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
      break;
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 800096e:	2000      	movs	r0, #0
      break;
    default: state = CAN_TxStatus_Failed;
      break;
  }
  return (uint8_t) state;
}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	04000003 	.word	0x04000003
 8000978:	08000300 	.word	0x08000300
 800097c:	10030000 	.word	0x10030000

08000980 <CAN_CancelTransmit>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 8000980:	2901      	cmp	r1, #1
 8000982:	d007      	beq.n	8000994 <CAN_CancelTransmit+0x14>
 8000984:	d302      	bcc.n	800098c <CAN_CancelTransmit+0xc>
 8000986:	2902      	cmp	r1, #2
 8000988:	d10d      	bne.n	80009a6 <CAN_CancelTransmit+0x26>
 800098a:	e008      	b.n	800099e <CAN_CancelTransmit+0x1e>
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 800098c:	6883      	ldr	r3, [r0, #8]
 800098e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000992:	e002      	b.n	800099a <CAN_CancelTransmit+0x1a>
      break;
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 8000994:	6883      	ldr	r3, [r0, #8]
 8000996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800099a:	6083      	str	r3, [r0, #8]
      break;
 800099c:	4770      	bx	lr
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 800099e:	6883      	ldr	r3, [r0, #8]
 80009a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009a4:	6083      	str	r3, [r0, #8]
 80009a6:	4770      	bx	lr

080009a8 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 80009a8:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80009aa:	f101 041b 	add.w	r4, r1, #27
 80009ae:	0123      	lsls	r3, r4, #4
 80009b0:	58c5      	ldr	r5, [r0, r3]
 80009b2:	f005 0504 	and.w	r5, r5, #4
 80009b6:	b2ed      	uxtb	r5, r5
 80009b8:	7215      	strb	r5, [r2, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 80009ba:	58c3      	ldr	r3, [r0, r3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
  if (RxMessage->IDE == CAN_Id_Standard)
 80009bc:	b915      	cbnz	r5, 80009c4 <CAN_Receive+0x1c>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 80009be:	0d5b      	lsrs	r3, r3, #21
 80009c0:	6013      	str	r3, [r2, #0]
 80009c2:	e001      	b.n	80009c8 <CAN_Receive+0x20>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 80009c4:	08db      	lsrs	r3, r3, #3
 80009c6:	6053      	str	r3, [r2, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80009c8:	0124      	lsls	r4, r4, #4
 80009ca:	1903      	adds	r3, r0, r4
 80009cc:	5904      	ldr	r4, [r0, r4]
 80009ce:	f004 0402 	and.w	r4, r4, #2
 80009d2:	7254      	strb	r4, [r2, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 80009d4:	685c      	ldr	r4, [r3, #4]
 80009d6:	f004 040f 	and.w	r4, r4, #15
 80009da:	7294      	strb	r4, [r2, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	0a1b      	lsrs	r3, r3, #8
 80009e0:	74d3      	strb	r3, [r2, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 80009e2:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80009e6:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 80009ea:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
 80009ee:	72d5      	strb	r5, [r2, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 80009f0:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
 80009f4:	0a2d      	lsrs	r5, r5, #8
 80009f6:	7315      	strb	r5, [r2, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 80009f8:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
 80009fc:	0c2d      	lsrs	r5, r5, #16
 80009fe:	7355      	strb	r5, [r2, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8000a00:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000a04:	0e1b      	lsrs	r3, r3, #24
 8000a06:	7393      	strb	r3, [r2, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8000a08:	6863      	ldr	r3, [r4, #4]
 8000a0a:	73d3      	strb	r3, [r2, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8000a0c:	6863      	ldr	r3, [r4, #4]
 8000a0e:	0a1b      	lsrs	r3, r3, #8
 8000a10:	7413      	strb	r3, [r2, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000a12:	6863      	ldr	r3, [r4, #4]
 8000a14:	0c1b      	lsrs	r3, r3, #16
 8000a16:	7453      	strb	r3, [r2, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8000a18:	6863      	ldr	r3, [r4, #4]
 8000a1a:	0e1b      	lsrs	r3, r3, #24
 8000a1c:	7493      	strb	r3, [r2, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000a1e:	b921      	cbnz	r1, 8000a2a <CAN_Receive+0x82>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8000a20:	68c3      	ldr	r3, [r0, #12]
 8000a22:	f043 0320 	orr.w	r3, r3, #32
 8000a26:	60c3      	str	r3, [r0, #12]
 8000a28:	bd30      	pop	{r4, r5, pc}
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8000a2a:	6903      	ldr	r3, [r0, #16]
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	6103      	str	r3, [r0, #16]
 8000a32:	bd30      	pop	{r4, r5, pc}

08000a34 <CAN_FIFORelease>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000a34:	b921      	cbnz	r1, 8000a40 <CAN_FIFORelease+0xc>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8000a36:	68c3      	ldr	r3, [r0, #12]
 8000a38:	f043 0320 	orr.w	r3, r3, #32
 8000a3c:	60c3      	str	r3, [r0, #12]
 8000a3e:	4770      	bx	lr
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8000a40:	6903      	ldr	r3, [r0, #16]
 8000a42:	f043 0320 	orr.w	r3, r3, #32
 8000a46:	6103      	str	r3, [r0, #16]
 8000a48:	4770      	bx	lr

08000a4a <CAN_MessagePending>:
{
  uint8_t message_pending=0;
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8000a4a:	b909      	cbnz	r1, 8000a50 <CAN_MessagePending+0x6>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8000a4c:	68c0      	ldr	r0, [r0, #12]
 8000a4e:	e002      	b.n	8000a56 <CAN_MessagePending+0xc>
  }
  else if (FIFONumber == CAN_FIFO1)
 8000a50:	2901      	cmp	r1, #1
 8000a52:	d103      	bne.n	8000a5c <CAN_MessagePending+0x12>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8000a54:	6900      	ldr	r0, [r0, #16]
 8000a56:	f000 0003 	and.w	r0, r0, #3
 8000a5a:	4770      	bx	lr
  }
  else
  {
    message_pending = 0;
 8000a5c:	2000      	movs	r0, #0
  }
  return message_pending;
}
 8000a5e:	4770      	bx	lr

08000a60 <CAN_OperatingModeRequest>:

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 8000a60:	b999      	cbnz	r1, 8000a8a <CAN_OperatingModeRequest+0x2a>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 8000a62:	6803      	ldr	r3, [r0, #0]
 8000a64:	f023 0303 	bic.w	r3, r3, #3
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8000a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a72:	6842      	ldr	r2, [r0, #4]
 8000a74:	f002 0203 	and.w	r2, r2, #3
 8000a78:	2a01      	cmp	r2, #1
 8000a7a:	d001      	beq.n	8000a80 <CAN_OperatingModeRequest+0x20>
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	d1f8      	bne.n	8000a72 <CAN_OperatingModeRequest+0x12>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 8000a80:	6840      	ldr	r0, [r0, #4]
 8000a82:	f000 0003 	and.w	r0, r0, #3
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8000a86:	2801      	cmp	r0, #1
 8000a88:	e028      	b.n	8000adc <CAN_OperatingModeRequest+0x7c>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 8000a8a:	2901      	cmp	r1, #1
 8000a8c:	d111      	bne.n	8000ab2 <CAN_OperatingModeRequest+0x52>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8000a8e:	6803      	ldr	r3, [r0, #0]
 8000a90:	f023 0303 	bic.w	r3, r3, #3
 8000a94:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8000a96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a9a:	6842      	ldr	r2, [r0, #4]
 8000a9c:	0792      	lsls	r2, r2, #30
 8000a9e:	d001      	beq.n	8000aa4 <CAN_OperatingModeRequest+0x44>
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	d1fa      	bne.n	8000a9a <CAN_OperatingModeRequest+0x3a>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8000aa4:	6843      	ldr	r3, [r0, #4]
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8000aa6:	f013 0f03 	tst.w	r3, #3
 8000aaa:	bf14      	ite	ne
 8000aac:	2000      	movne	r0, #0
 8000aae:	2001      	moveq	r0, #1
 8000ab0:	4770      	bx	lr
    else
    {
      status = CAN_ModeStatus_Success;
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 8000ab2:	2902      	cmp	r1, #2
 8000ab4:	d116      	bne.n	8000ae4 <CAN_OperatingModeRequest+0x84>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8000ab6:	6803      	ldr	r3, [r0, #0]
 8000ab8:	f023 0303 	bic.w	r3, r3, #3
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8000ac2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac6:	6842      	ldr	r2, [r0, #4]
 8000ac8:	f002 0203 	and.w	r2, r2, #3
 8000acc:	2a02      	cmp	r2, #2
 8000ace:	d001      	beq.n	8000ad4 <CAN_OperatingModeRequest+0x74>
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	d1f8      	bne.n	8000ac6 <CAN_OperatingModeRequest+0x66>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 8000ad4:	6840      	ldr	r0, [r0, #4]
 8000ad6:	f000 0003 	and.w	r0, r0, #3
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8000ada:	2802      	cmp	r0, #2
 8000adc:	bf14      	ite	ne
 8000ade:	2000      	movne	r0, #0
 8000ae0:	2001      	moveq	r0, #1
 8000ae2:	4770      	bx	lr
      status = CAN_ModeStatus_Success;
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 8000ae4:	2000      	movs	r0, #0
  }

  return  (uint8_t) status;
}
 8000ae6:	4770      	bx	lr

08000ae8 <CAN_Sleep>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8000ae8:	6803      	ldr	r3, [r0, #0]
 8000aea:	f023 0303 	bic.w	r3, r3, #3
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	6003      	str	r3, [r0, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 8000af4:	6840      	ldr	r0, [r0, #4]
 8000af6:	f000 0003 	and.w	r0, r0, #3
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
}
 8000afa:	f1a0 0102 	sub.w	r1, r0, #2
 8000afe:	4248      	negs	r0, r1
 8000b00:	eb40 0001 	adc.w	r0, r0, r1
 8000b04:	4770      	bx	lr

08000b06 <CAN_WakeUp>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 8000b06:	6803      	ldr	r3, [r0, #0]
 8000b08:	f023 0302 	bic.w	r3, r3, #2
 8000b0c:	6003      	str	r3, [r0, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8000b0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b12:	6842      	ldr	r2, [r0, #4]
 8000b14:	0792      	lsls	r2, r2, #30
 8000b16:	d501      	bpl.n	8000b1c <CAN_WakeUp+0x16>
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	d1fa      	bne.n	8000b12 <CAN_WakeUp+0xc>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 8000b1c:	6843      	ldr	r3, [r0, #4]
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
  uint32_t wait_slak = SLAK_TIMEOUT;
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 8000b1e:	f013 0f02 	tst.w	r3, #2
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
}
 8000b22:	bf14      	ite	ne
 8000b24:	2000      	movne	r0, #0
 8000b26:	2001      	moveq	r0, #1
 8000b28:	4770      	bx	lr

08000b2a <CAN_GetLastErrorCode>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8000b2a:	6980      	ldr	r0, [r0, #24]
  
  /* Return the error code*/
  return errorcode;
}
 8000b2c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8000b30:	4770      	bx	lr

08000b32 <CAN_GetReceiveErrorCounter>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 8000b32:	6980      	ldr	r0, [r0, #24]
  
  /* Return the Receive Error Counter*/
  return counter;
}
 8000b34:	0e00      	lsrs	r0, r0, #24
 8000b36:	4770      	bx	lr

08000b38 <CAN_GetLSBTransmitErrorCounter>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 8000b38:	6980      	ldr	r0, [r0, #24]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
}
 8000b3a:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000b3e:	4770      	bx	lr

08000b40 <CAN_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8000b40:	6943      	ldr	r3, [r0, #20]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b42:	b10a      	cbz	r2, 8000b48 <CAN_ITConfig+0x8>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8000b44:	4319      	orrs	r1, r3
 8000b46:	e001      	b.n	8000b4c <CAN_ITConfig+0xc>
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 8000b48:	ea23 0101 	bic.w	r1, r3, r1
 8000b4c:	6141      	str	r1, [r0, #20]
 8000b4e:	4770      	bx	lr

08000b50 <CAN_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 8000b50:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000b54:	d001      	beq.n	8000b5a <CAN_GetFlagStatus+0xa>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8000b56:	6983      	ldr	r3, [r0, #24]
 8000b58:	e00a      	b.n	8000b70 <CAN_GetFlagStatus+0x20>
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8000b5a:	01cb      	lsls	r3, r1, #7
 8000b5c:	d501      	bpl.n	8000b62 <CAN_GetFlagStatus+0x12>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8000b5e:	6843      	ldr	r3, [r0, #4]
 8000b60:	e006      	b.n	8000b70 <CAN_GetFlagStatus+0x20>
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8000b62:	010a      	lsls	r2, r1, #4
 8000b64:	d501      	bpl.n	8000b6a <CAN_GetFlagStatus+0x1a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8000b66:	6883      	ldr	r3, [r0, #8]
 8000b68:	e002      	b.n	8000b70 <CAN_GetFlagStatus+0x20>
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 8000b6a:	018b      	lsls	r3, r1, #6
 8000b6c:	d509      	bpl.n	8000b82 <CAN_GetFlagStatus+0x32>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8000b6e:	68c3      	ldr	r3, [r0, #12]
 8000b70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b74:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
      bitstatus = SET;
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8000b78:	420b      	tst	r3, r1
 8000b7a:	bf0c      	ite	eq
 8000b7c:	2000      	moveq	r0, #0
 8000b7e:	2001      	movne	r0, #1
 8000b80:	4770      	bx	lr
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8000b82:	6903      	ldr	r3, [r0, #16]
 8000b84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b88:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
      bitstatus = SET;
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8000b8c:	420b      	tst	r3, r1
 8000b8e:	bf0c      	ite	eq
 8000b90:	2000      	moveq	r0, #0
 8000b92:	2001      	movne	r0, #1
      bitstatus = RESET;
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
}
 8000b94:	4770      	bx	lr

08000b96 <CAN_ClearFlag>:
  uint32_t flagtmp=0;
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <CAN_ClearFlag+0x2e>)
 8000b98:	4299      	cmp	r1, r3
 8000b9a:	d102      	bne.n	8000ba2 <CAN_ClearFlag+0xc>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	6183      	str	r3, [r0, #24]
 8000ba0:	4770      	bx	lr
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8000ba2:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8000ba6:	018a      	lsls	r2, r1, #6
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8000ba8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8000bac:	d501      	bpl.n	8000bb2 <CAN_ClearFlag+0x1c>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 8000bae:	60c3      	str	r3, [r0, #12]
 8000bb0:	4770      	bx	lr
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 8000bb2:	014a      	lsls	r2, r1, #5
 8000bb4:	d501      	bpl.n	8000bba <CAN_ClearFlag+0x24>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 8000bb6:	6103      	str	r3, [r0, #16]
 8000bb8:	4770      	bx	lr
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8000bba:	010a      	lsls	r2, r1, #4
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 8000bbc:	bf4c      	ite	mi
 8000bbe:	6083      	strmi	r3, [r0, #8]
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 8000bc0:	6043      	strpl	r3, [r0, #4]
 8000bc2:	4770      	bx	lr
 8000bc4:	30f00070 	.word	0x30f00070

08000bc8 <CAN_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8000bc8:	6943      	ldr	r3, [r0, #20]
 8000bca:	400b      	ands	r3, r1
 8000bcc:	d05f      	beq.n	8000c8e <CAN_GetITStatus+0xc6>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8000bce:	2940      	cmp	r1, #64	; 0x40
 8000bd0:	d03e      	beq.n	8000c50 <CAN_GetITStatus+0x88>
 8000bd2:	d80e      	bhi.n	8000bf2 <CAN_GetITStatus+0x2a>
 8000bd4:	2904      	cmp	r1, #4
 8000bd6:	d02f      	beq.n	8000c38 <CAN_GetITStatus+0x70>
 8000bd8:	d804      	bhi.n	8000be4 <CAN_GetITStatus+0x1c>
 8000bda:	2901      	cmp	r1, #1
 8000bdc:	d021      	beq.n	8000c22 <CAN_GetITStatus+0x5a>
 8000bde:	2902      	cmp	r1, #2
 8000be0:	d157      	bne.n	8000c92 <CAN_GetITStatus+0xca>
 8000be2:	e027      	b.n	8000c34 <CAN_GetITStatus+0x6c>
 8000be4:	2910      	cmp	r1, #16
 8000be6:	d02b      	beq.n	8000c40 <CAN_GetITStatus+0x78>
 8000be8:	2920      	cmp	r1, #32
 8000bea:	d02f      	beq.n	8000c4c <CAN_GetITStatus+0x84>
 8000bec:	2908      	cmp	r1, #8
 8000bee:	d150      	bne.n	8000c92 <CAN_GetITStatus+0xca>
 8000bf0:	e024      	b.n	8000c3c <CAN_GetITStatus+0x74>
 8000bf2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8000bf6:	d03f      	beq.n	8000c78 <CAN_GetITStatus+0xb0>
 8000bf8:	d809      	bhi.n	8000c0e <CAN_GetITStatus+0x46>
 8000bfa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000bfe:	d035      	beq.n	8000c6c <CAN_GetITStatus+0xa4>
 8000c00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8000c04:	d036      	beq.n	8000c74 <CAN_GetITStatus+0xac>
 8000c06:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000c0a:	d142      	bne.n	8000c92 <CAN_GetITStatus+0xca>
 8000c0c:	e02a      	b.n	8000c64 <CAN_GetITStatus+0x9c>
 8000c0e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8000c12:	d01f      	beq.n	8000c54 <CAN_GetITStatus+0x8c>
 8000c14:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8000c18:	d020      	beq.n	8000c5c <CAN_GetITStatus+0x94>
 8000c1a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8000c1e:	d138      	bne.n	8000c92 <CAN_GetITStatus+0xca>
 8000c20:	e031      	b.n	8000c86 <CAN_GetITStatus+0xbe>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 8000c22:	6880      	ldr	r0, [r0, #8]
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
  ITStatus pendingbitstatus = RESET;
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8000c24:	f000 3001 	and.w	r0, r0, #16843009	; 0x1010101
 8000c28:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8000c2c:	3000      	adds	r0, #0
 8000c2e:	bf18      	it	ne
 8000c30:	2001      	movne	r0, #1
 8000c32:	4770      	bx	lr
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
        break;
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 8000c34:	68c0      	ldr	r0, [r0, #12]
 8000c36:	e004      	b.n	8000c42 <CAN_GetITStatus+0x7a>
        break;
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8000c38:	68c0      	ldr	r0, [r0, #12]
 8000c3a:	e00c      	b.n	8000c56 <CAN_GetITStatus+0x8e>
        break;
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8000c3c:	68c0      	ldr	r0, [r0, #12]
 8000c3e:	e00e      	b.n	8000c5e <CAN_GetITStatus+0x96>
        break;
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8000c40:	6900      	ldr	r0, [r0, #16]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000c42:	f010 0003 	ands.w	r0, r0, #3
 8000c46:	bf18      	it	ne
 8000c48:	2001      	movne	r0, #1
 8000c4a:	4770      	bx	lr
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
        break;
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8000c4c:	6900      	ldr	r0, [r0, #16]
 8000c4e:	e002      	b.n	8000c56 <CAN_GetITStatus+0x8e>
        break;
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8000c50:	6900      	ldr	r0, [r0, #16]
 8000c52:	e004      	b.n	8000c5e <CAN_GetITStatus+0x96>
        break;
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8000c54:	6840      	ldr	r0, [r0, #4]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000c56:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8000c5a:	4770      	bx	lr
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
        break;
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8000c5c:	6840      	ldr	r0, [r0, #4]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000c5e:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8000c62:	4770      	bx	lr
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
        break;
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8000c64:	6980      	ldr	r0, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000c66:	f000 0001 	and.w	r0, r0, #1
 8000c6a:	4770      	bx	lr
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
        break;
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8000c6c:	6980      	ldr	r0, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000c6e:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8000c72:	4770      	bx	lr
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
        break;
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 8000c74:	6980      	ldr	r0, [r0, #24]
 8000c76:	e007      	b.n	8000c88 <CAN_GetITStatus+0xc0>
        break;
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 8000c78:	6983      	ldr	r3, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000c7a:	f013 0f70 	tst.w	r3, #112	; 0x70
 8000c7e:	bf0c      	ite	eq
 8000c80:	2000      	moveq	r0, #0
 8000c82:	2001      	movne	r0, #1
 8000c84:	4770      	bx	lr
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
        break;
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8000c86:	6840      	ldr	r0, [r0, #4]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000c88:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8000c8c:	4770      	bx	lr
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 8000c8e:	4618      	mov	r0, r3
 8000c90:	4770      	bx	lr
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
        break;
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 8000c92:	2000      	movs	r0, #0
    itstatus  = RESET;
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
}
 8000c94:	4770      	bx	lr

08000c96 <CAN_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8000c96:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000c9a:	d035      	beq.n	8000d08 <CAN_ClearITPendingBit+0x72>
 8000c9c:	d80c      	bhi.n	8000cb8 <CAN_ClearITPendingBit+0x22>
 8000c9e:	2908      	cmp	r1, #8
 8000ca0:	d024      	beq.n	8000cec <CAN_ClearITPendingBit+0x56>
 8000ca2:	d804      	bhi.n	8000cae <CAN_ClearITPendingBit+0x18>
 8000ca4:	2901      	cmp	r1, #1
 8000ca6:	d01c      	beq.n	8000ce2 <CAN_ClearITPendingBit+0x4c>
 8000ca8:	2904      	cmp	r1, #4
 8000caa:	d134      	bne.n	8000d16 <CAN_ClearITPendingBit+0x80>
 8000cac:	e01c      	b.n	8000ce8 <CAN_ClearITPendingBit+0x52>
 8000cae:	2920      	cmp	r1, #32
 8000cb0:	d01f      	beq.n	8000cf2 <CAN_ClearITPendingBit+0x5c>
 8000cb2:	2940      	cmp	r1, #64	; 0x40
 8000cb4:	d12f      	bne.n	8000d16 <CAN_ClearITPendingBit+0x80>
 8000cb6:	e01e      	b.n	8000cf6 <CAN_ClearITPendingBit+0x60>
 8000cb8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8000cbc:	d022      	beq.n	8000d04 <CAN_ClearITPendingBit+0x6e>
 8000cbe:	d806      	bhi.n	8000cce <CAN_ClearITPendingBit+0x38>
 8000cc0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000cc4:	d020      	beq.n	8000d08 <CAN_ClearITPendingBit+0x72>
 8000cc6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8000cca:	d124      	bne.n	8000d16 <CAN_ClearITPendingBit+0x80>
 8000ccc:	e01c      	b.n	8000d08 <CAN_ClearITPendingBit+0x72>
 8000cce:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8000cd2:	d013      	beq.n	8000cfc <CAN_ClearITPendingBit+0x66>
 8000cd4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8000cd8:	d012      	beq.n	8000d00 <CAN_ClearITPendingBit+0x6a>
 8000cda:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8000cde:	d11a      	bne.n	8000d16 <CAN_ClearITPendingBit+0x80>
 8000ce0:	e015      	b.n	8000d0e <CAN_ClearITPendingBit+0x78>
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <CAN_ClearITPendingBit+0x82>)
 8000ce4:	6083      	str	r3, [r0, #8]
      break;
 8000ce6:	4770      	bx	lr
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 8000ce8:	2308      	movs	r3, #8
 8000cea:	e000      	b.n	8000cee <CAN_ClearITPendingBit+0x58>
      break;
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 8000cec:	2310      	movs	r3, #16
 8000cee:	60c3      	str	r3, [r0, #12]
      break;
 8000cf0:	4770      	bx	lr
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 8000cf2:	2308      	movs	r3, #8
 8000cf4:	e000      	b.n	8000cf8 <CAN_ClearITPendingBit+0x62>
      break;
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 8000cf6:	2310      	movs	r3, #16
 8000cf8:	6103      	str	r3, [r0, #16]
      break;
 8000cfa:	4770      	bx	lr
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	e004      	b.n	8000d0a <CAN_ClearITPendingBit+0x74>
      break;
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 8000d00:	2310      	movs	r3, #16
 8000d02:	e002      	b.n	8000d0a <CAN_ClearITPendingBit+0x74>
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 8000d04:	2300      	movs	r3, #0
 8000d06:	6183      	str	r3, [r0, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8000d08:	2304      	movs	r3, #4
 8000d0a:	6043      	str	r3, [r0, #4]
      break;
 8000d0c:	4770      	bx	lr
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 8000d0e:	2300      	movs	r3, #0
 8000d10:	6183      	str	r3, [r0, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8000d12:	2304      	movs	r3, #4
 8000d14:	6043      	str	r3, [r0, #4]
 8000d16:	4770      	bx	lr
 8000d18:	00010101 	.word	0x00010101

08000d1c <CRC_ResetDR>:
  * @retval None
  */
void CRC_ResetDR(void)
{
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8000d1c:	4b01      	ldr	r3, [pc, #4]	; (8000d24 <CRC_ResetDR+0x8>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	609a      	str	r2, [r3, #8]
}
 8000d22:	4770      	bx	lr
 8000d24:	40023000 	.word	0x40023000

08000d28 <CRC_CalcCRC>:
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
  CRC->DR = Data;
 8000d28:	4b01      	ldr	r3, [pc, #4]	; (8000d30 <CRC_CalcCRC+0x8>)
 8000d2a:	6018      	str	r0, [r3, #0]
  
  return (CRC->DR);
 8000d2c:	6818      	ldr	r0, [r3, #0]
}
 8000d2e:	4770      	bx	lr
 8000d30:	40023000 	.word	0x40023000

08000d34 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8000d34:	b510      	push	{r4, lr}
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <CRC_CalcBlockCRC+0x1c>)
 8000d3a:	e003      	b.n	8000d44 <CRC_CalcBlockCRC+0x10>
  {
    CRC->DR = pBuffer[index];
 8000d3c:	f850 4b04 	ldr.w	r4, [r0], #4
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8000d40:	3301      	adds	r3, #1
  {
    CRC->DR = pBuffer[index];
 8000d42:	6014      	str	r4, [r2, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d1f9      	bne.n	8000d3c <CRC_CalcBlockCRC+0x8>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 8000d48:	4b01      	ldr	r3, [pc, #4]	; (8000d50 <CRC_CalcBlockCRC+0x1c>)
 8000d4a:	6818      	ldr	r0, [r3, #0]
}
 8000d4c:	bd10      	pop	{r4, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023000 	.word	0x40023000

08000d54 <CRC_GetCRC>:
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
  return (CRC->DR);
 8000d54:	4b01      	ldr	r3, [pc, #4]	; (8000d5c <CRC_GetCRC+0x8>)
 8000d56:	6818      	ldr	r0, [r3, #0]
}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40023000 	.word	0x40023000

08000d60 <CRC_SetIDRegister>:
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
  CRC->IDR = IDValue;
 8000d60:	4b01      	ldr	r3, [pc, #4]	; (8000d68 <CRC_SetIDRegister+0x8>)
 8000d62:	7118      	strb	r0, [r3, #4]
}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40023000 	.word	0x40023000

08000d6c <CRC_GetIDRegister>:
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
  return (CRC->IDR);
 8000d6c:	4b01      	ldr	r3, [pc, #4]	; (8000d74 <CRC_GetIDRegister+0x8>)
 8000d6e:	7918      	ldrb	r0, [r3, #4]
}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40023000 	.word	0x40023000

08000d78 <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 8000d78:	b508      	push	{r3, lr}
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 8000d7a:	2010      	movs	r0, #16
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	f002 fd21 	bl	80037c4 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 8000d82:	2010      	movs	r0, #16
 8000d84:	2100      	movs	r1, #0
}
 8000d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 8000d8a:	f002 bd1b 	b.w	80037c4 <RCC_AHB2PeriphResetCmd>

08000d8e <CRYP_Init>:
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 8000d8e:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <CRYP_Init+0x5a>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	f022 0238 	bic.w	r2, r2, #56	; 0x38
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8000d96:	b510      	push	{r4, lr}
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 8000d98:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 8000d9a:	6819      	ldr	r1, [r3, #0]
 8000d9c:	8842      	ldrh	r2, [r0, #2]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8000d9e:	8884      	ldrh	r4, [r0, #4]
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 8000da0:	4311      	orrs	r1, r2
 8000da2:	6019      	str	r1, [r3, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 8000da4:	6819      	ldr	r1, [r3, #0]
 8000da6:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000daa:	6019      	str	r1, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8000dac:	6819      	ldr	r1, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8000dae:	2a20      	cmp	r2, #32
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8000db0:	ea44 0101 	orr.w	r1, r4, r1
 8000db4:	6019      	str	r1, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8000db6:	d005      	beq.n	8000dc4 <CRYP_Init+0x36>
 8000db8:	2a28      	cmp	r2, #40	; 0x28
 8000dba:	d003      	beq.n	8000dc4 <CRYP_Init+0x36>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 8000dbc:	2a30      	cmp	r2, #48	; 0x30
 8000dbe:	d001      	beq.n	8000dc4 <CRYP_Init+0x36>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 8000dc0:	2a38      	cmp	r2, #56	; 0x38
 8000dc2:	d107      	bne.n	8000dd4 <CRYP_Init+0x46>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8000dc4:	681a      	ldr	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8000dc6:	88c1      	ldrh	r1, [r0, #6]
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8000dc8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000dcc:	601a      	str	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <CRYP_Init+0x5a>)
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 8000dd6:	8801      	ldrh	r1, [r0, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	f022 0204 	bic.w	r2, r2, #4
 8000dde:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	601a      	str	r2, [r3, #0]
}
 8000de6:	bd10      	pop	{r4, pc}
 8000de8:	50060000 	.word	0x50060000

08000dec <CRYP_StructInit>:
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8000dec:	2300      	movs	r3, #0
 8000dee:	8003      	strh	r3, [r0, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8000df0:	8043      	strh	r3, [r0, #2]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 8000df2:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 8000df4:	80c3      	strh	r3, [r0, #6]
}
 8000df6:	4770      	bx	lr

08000df8 <CRYP_KeyInit>:
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 8000df8:	6802      	ldr	r2, [r0, #0]
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <CRYP_KeyInit+0x24>)
 8000dfc:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 8000dfe:	6842      	ldr	r2, [r0, #4]
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 8000e02:	6882      	ldr	r2, [r0, #8]
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 8000e06:	68c2      	ldr	r2, [r0, #12]
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 8000e0a:	6902      	ldr	r2, [r0, #16]
 8000e0c:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 8000e0e:	6942      	ldr	r2, [r0, #20]
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 8000e12:	6982      	ldr	r2, [r0, #24]
 8000e14:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 8000e16:	69c2      	ldr	r2, [r0, #28]
 8000e18:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e1a:	4770      	bx	lr
 8000e1c:	50060000 	.word	0x50060000

08000e20 <CRYP_KeyStructInit>:
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	6003      	str	r3, [r0, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 8000e24:	6043      	str	r3, [r0, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 8000e26:	6083      	str	r3, [r0, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 8000e28:	60c3      	str	r3, [r0, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 8000e2a:	6103      	str	r3, [r0, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 8000e2c:	6143      	str	r3, [r0, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 8000e2e:	6183      	str	r3, [r0, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 8000e30:	61c3      	str	r3, [r0, #28]
}
 8000e32:	4770      	bx	lr

08000e34 <CRYP_IVInit>:
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 8000e34:	6802      	ldr	r2, [r0, #0]
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <CRYP_IVInit+0x14>)
 8000e38:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 8000e3a:	6842      	ldr	r2, [r0, #4]
 8000e3c:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 8000e3e:	6882      	ldr	r2, [r0, #8]
 8000e40:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 8000e42:	68c2      	ldr	r2, [r0, #12]
 8000e44:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000e46:	4770      	bx	lr
 8000e48:	50060000 	.word	0x50060000

08000e4c <CRYP_IVStructInit>:
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	6003      	str	r3, [r0, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 8000e50:	6043      	str	r3, [r0, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 8000e52:	6083      	str	r3, [r0, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 8000e54:	60c3      	str	r3, [r0, #12]
}
 8000e56:	4770      	bx	lr

08000e58 <CRYP_FIFOFlush>:
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 8000e58:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <CRYP_FIFOFlush+0xc>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e60:	601a      	str	r2, [r3, #0]
}
 8000e62:	4770      	bx	lr
 8000e64:	50060000 	.word	0x50060000

08000e68 <CRYP_Cmd>:
  * @param  NewState: new state of the CRYP peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_Cmd(FunctionalState NewState)
{
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <CRYP_Cmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 8000e6a:	681a      	ldr	r2, [r3, #0]
void CRYP_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e6c:	b110      	cbz	r0, 8000e74 <CRYP_Cmd+0xc>
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 8000e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e72:	e001      	b.n	8000e78 <CRYP_Cmd+0x10>
  }
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 8000e74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	4770      	bx	lr
 8000e7c:	50060000 	.word	0x50060000

08000e80 <CRYP_DataIn>:
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
  CRYP->DR = Data;
 8000e80:	4b01      	ldr	r3, [pc, #4]	; (8000e88 <CRYP_DataIn+0x8>)
 8000e82:	6098      	str	r0, [r3, #8]
}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	50060000 	.word	0x50060000

08000e8c <CRYP_DataOut>:
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
  return CRYP->DOUT;
 8000e8c:	4b01      	ldr	r3, [pc, #4]	; (8000e94 <CRYP_DataOut+0x8>)
 8000e8e:	68d8      	ldr	r0, [r3, #12]
}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	50060000 	.word	0x50060000

08000e98 <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8000e98:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t timeout = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	9301      	str	r3, [sp, #4]
  uint32_t ckeckmask = 0, bitstatus;    
  ErrorStatus status = ERROR;

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 8000e9e:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <CRYP_SaveContext+0x90>)
 8000ea0:	691a      	ldr	r2, [r3, #16]
 8000ea2:	f022 0201 	bic.w	r2, r2, #1
 8000ea6:	611a      	str	r2, [r3, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 8000ea8:	681a      	ldr	r2, [r3, #0]
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 8000eaa:	f012 0f08 	tst.w	r2, #8
 8000eae:	bf0c      	ite	eq
 8000eb0:	2215      	moveq	r2, #21
 8000eb2:	2211      	movne	r2, #17
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
    timeout++;
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8000eb4:	f64f 74ff 	movw	r4, #65535	; 0xffff
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8000eb8:	685d      	ldr	r5, [r3, #4]
    timeout++;
 8000eba:	9e01      	ldr	r6, [sp, #4]
 8000ebc:	3601      	adds	r6, #1
 8000ebe:	9601      	str	r6, [sp, #4]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8000ec0:	9e01      	ldr	r6, [sp, #4]
 8000ec2:	42a6      	cmp	r6, r4
 8000ec4:	d002      	beq.n	8000ecc <CRYP_SaveContext+0x34>
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8000ec6:	4015      	ands	r5, r2
    timeout++;
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8000ec8:	2d01      	cmp	r5, #1
 8000eca:	d1f5      	bne.n	8000eb8 <CRYP_SaveContext+0x20>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <CRYP_SaveContext+0x90>)
 8000ece:	685c      	ldr	r4, [r3, #4]
 8000ed0:	4022      	ands	r2, r4
 8000ed2:	2a01      	cmp	r2, #1
 8000ed4:	d125      	bne.n	8000f22 <CRYP_SaveContext+0x8a>
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 8000ed6:	691c      	ldr	r4, [r3, #16]
 8000ed8:	f024 0402 	bic.w	r4, r4, #2
 8000edc:	611c      	str	r4, [r3, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 8000ede:	681c      	ldr	r4, [r3, #0]
 8000ee0:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 8000ee4:	601c      	str	r4, [r3, #0]

    /* Save the current configuration (bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_bits9to2  = CRYP->CR & (CRYP_CR_KEYSIZE  | 
 8000ee6:	681c      	ldr	r4, [r3, #0]
 8000ee8:	f404 747f 	and.w	r4, r4, #1020	; 0x3fc
 8000eec:	6004      	str	r4, [r0, #0]
                                                 CRYP_CR_DATATYPE | 
                                                 CRYP_CR_ALGOMODE |
                                                 CRYP_CR_ALGODIR); 

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 8000eee:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8000ef0:	6044      	str	r4, [r0, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 8000ef2:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8000ef4:	6084      	str	r4, [r0, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 8000ef6:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8000ef8:	60c4      	str	r4, [r0, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 8000efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efc:	6103      	str	r3, [r0, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 8000efe:	680b      	ldr	r3, [r1, #0]
 8000f00:	6143      	str	r3, [r0, #20]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 8000f02:	684b      	ldr	r3, [r1, #4]
 8000f04:	6183      	str	r3, [r0, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 8000f06:	688b      	ldr	r3, [r1, #8]
 8000f08:	61c3      	str	r3, [r0, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 8000f0a:	68cb      	ldr	r3, [r1, #12]
 8000f0c:	6203      	str	r3, [r0, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 8000f0e:	690b      	ldr	r3, [r1, #16]
 8000f10:	6243      	str	r3, [r0, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 8000f12:	694b      	ldr	r3, [r1, #20]
 8000f14:	6283      	str	r3, [r0, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 8000f16:	698b      	ldr	r3, [r1, #24]
 8000f18:	62c3      	str	r3, [r0, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 8000f1a:	69cb      	ldr	r3, [r1, #28]
 8000f1c:	6303      	str	r3, [r0, #48]	; 0x30

   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 8000f1e:	4610      	mov	r0, r2
 8000f20:	e000      	b.n	8000f24 <CRYP_SaveContext+0x8c>
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
  {
    status = ERROR;
 8000f22:	2000      	movs	r0, #0
     
    status = SUCCESS;
  }

   return status;
}
 8000f24:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8000f26:	bf00      	nop
 8000f28:	50060000 	.word	0x50060000

08000f2c <CRYP_RestoreContext>:
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_bits9to2;
 8000f2c:	6802      	ldr	r2, [r0, #0]
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <CRYP_RestoreContext+0x40>)
 8000f30:	601a      	str	r2, [r3, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 8000f32:	6942      	ldr	r2, [r0, #20]
 8000f34:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 8000f36:	6982      	ldr	r2, [r0, #24]
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 8000f3a:	69c2      	ldr	r2, [r0, #28]
 8000f3c:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 8000f3e:	6a02      	ldr	r2, [r0, #32]
 8000f40:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 8000f42:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000f44:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 8000f46:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000f48:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 8000f4a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000f4c:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 8000f4e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000f50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 8000f52:	6842      	ldr	r2, [r0, #4]
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 8000f56:	6882      	ldr	r2, [r0, #8]
 8000f58:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 8000f5a:	68c2      	ldr	r2, [r0, #12]
 8000f5c:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 8000f5e:	6902      	ldr	r2, [r0, #16]
 8000f60:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f68:	601a      	str	r2, [r3, #0]
}
 8000f6a:	4770      	bx	lr
 8000f6c:	50060000 	.word	0x50060000

08000f70 <CRYP_DMACmd>:
  * @param  NewState: new state of the selected CRYP DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
{
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <CRYP_DMACmd+0x18>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 8000f72:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f74:	b109      	cbz	r1, 8000f7a <CRYP_DMACmd+0xa>
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 8000f76:	4310      	orrs	r0, r2
 8000f78:	e003      	b.n	8000f82 <CRYP_DMACmd+0x12>
  }
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 8000f7a:	ea22 0000 	bic.w	r0, r2, r0
 8000f7e:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 8000f82:	6118      	str	r0, [r3, #16]
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	50060000 	.word	0x50060000

08000f8c <CRYP_ITConfig>:
  * @param  NewState: new state of the specified CRYP interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
{
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <CRYP_ITConfig+0x18>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 8000f8e:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f90:	b109      	cbz	r1, 8000f96 <CRYP_ITConfig+0xa>
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 8000f92:	4310      	orrs	r0, r2
 8000f94:	e003      	b.n	8000f9e <CRYP_ITConfig+0x12>
  }
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 8000f96:	ea22 0000 	bic.w	r0, r2, r0
 8000f9a:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 8000f9e:	6158      	str	r0, [r3, #20]
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	50060000 	.word	0x50060000

08000fa8 <CRYP_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <CRYP_GetITStatus+0x10>)
 8000faa:	69db      	ldr	r3, [r3, #28]
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 8000fac:	4218      	tst	r0, r3
    /* CRYP_IT is reset */
    bitstatus = RESET;
  }
  /* Return the CRYP_IT status */
  return bitstatus;
}
 8000fae:	bf0c      	ite	eq
 8000fb0:	2000      	moveq	r0, #0
 8000fb2:	2001      	movne	r0, #1
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	50060000 	.word	0x50060000

08000fbc <CRYP_GetFlagStatus>:
  *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
  *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
  * @retval The new state of CRYP_FLAG (SET or RESET).
  */
FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
{
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <CRYP_GetFlagStatus+0x18>)

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 8000fbe:	f010 0f20 	tst.w	r0, #32
  {
    tempreg = CRYP->RISR;
 8000fc2:	bf14      	ite	ne
 8000fc4:	699b      	ldrne	r3, [r3, #24]
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 8000fc6:	685b      	ldreq	r3, [r3, #4]

  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 8000fc8:	4203      	tst	r3, r0
    bitstatus = RESET;
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
}
 8000fca:	bf0c      	ite	eq
 8000fcc:	2000      	moveq	r0, #0
 8000fce:	2001      	movne	r0, #1
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	50060000 	.word	0x50060000

08000fd8 <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8000fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fdc:	b08d      	sub	sp, #52	; 0x34
 8000fde:	4616      	mov	r6, r2
 8000fe0:	4604      	mov	r4, r0
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8000fe2:	f04f 0a00 	mov.w	sl, #0
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8000fe6:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8000fe8:	460d      	mov	r5, r1
 8000fea:	4699      	mov	r9, r3
 8000fec:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8000ff0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 8000ff4:	4698      	mov	r8, r3
  uint32_t outputaddr = (uint32_t)Output;
 8000ff6:	9f17      	ldr	r7, [sp, #92]	; 0x5c
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8000ff8:	f7ff ff12 	bl	8000e20 <CRYP_KeyStructInit>

  switch(Keysize)
 8000ffc:	2ec0      	cmp	r6, #192	; 0xc0
 8000ffe:	d011      	beq.n	8001024 <CRYP_AES_ECB+0x4c>
 8001000:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8001004:	d023      	beq.n	800104e <CRYP_AES_ECB+0x76>
 8001006:	2e80      	cmp	r6, #128	; 0x80
 8001008:	d13d      	bne.n	8001086 <CRYP_AES_ECB+0xae>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 800100a:	f8ad a02a 	strh.w	sl, [sp, #42]	; 0x2a
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800100e:	682b      	ldr	r3, [r5, #0]
 8001010:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8001012:	9305      	str	r3, [sp, #20]
 8001014:	686b      	ldr	r3, [r5, #4]
 8001016:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8001018:	9306      	str	r3, [sp, #24]
 800101a:	68ab      	ldr	r3, [r5, #8]
 800101c:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800101e:	9307      	str	r3, [sp, #28]
 8001020:	68eb      	ldr	r3, [r5, #12]
 8001022:	e02e      	b.n	8001082 <CRYP_AES_ECB+0xaa>
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8001024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001028:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8001030:	9303      	str	r3, [sp, #12]
 8001032:	686b      	ldr	r3, [r5, #4]
 8001034:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8001036:	9304      	str	r3, [sp, #16]
 8001038:	68ab      	ldr	r3, [r5, #8]
 800103a:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800103c:	9305      	str	r3, [sp, #20]
 800103e:	68eb      	ldr	r3, [r5, #12]
 8001040:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8001042:	9306      	str	r3, [sp, #24]
 8001044:	692b      	ldr	r3, [r5, #16]
 8001046:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8001048:	9307      	str	r3, [sp, #28]
 800104a:	696b      	ldr	r3, [r5, #20]
 800104c:	e019      	b.n	8001082 <CRYP_AES_ECB+0xaa>
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 800104e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001052:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8001056:	682b      	ldr	r3, [r5, #0]
 8001058:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	686b      	ldr	r3, [r5, #4]
 800105e:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8001060:	9302      	str	r3, [sp, #8]
 8001062:	68ab      	ldr	r3, [r5, #8]
 8001064:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8001066:	9303      	str	r3, [sp, #12]
 8001068:	68eb      	ldr	r3, [r5, #12]
 800106a:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800106c:	9304      	str	r3, [sp, #16]
 800106e:	692b      	ldr	r3, [r5, #16]
 8001070:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8001072:	9305      	str	r3, [sp, #20]
 8001074:	696b      	ldr	r3, [r5, #20]
 8001076:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8001078:	9306      	str	r3, [sp, #24]
 800107a:	69ab      	ldr	r3, [r5, #24]
 800107c:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800107e:	9307      	str	r3, [sp, #28]
 8001080:	69eb      	ldr	r3, [r5, #28]
 8001082:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8001084:	9308      	str	r3, [sp, #32]
    default:
    break;
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8001086:	bb14      	cbnz	r4, 80010ce <CRYP_AES_ECB+0xf6>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8001088:	f7ff fee6 	bl	8000e58 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800108c:	2304      	movs	r3, #4
 800108e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
    CRYP_Init(&AES_CRYP_InitStructure);
 8001092:	a809      	add	r0, sp, #36	; 0x24
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8001094:	2338      	movs	r3, #56	; 0x38
 8001096:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 800109a:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
    CRYP_Init(&AES_CRYP_InitStructure);
 800109e:	f7ff fe76 	bl	8000d8e <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80010a2:	a801      	add	r0, sp, #4
 80010a4:	f7ff fea8 	bl	8000df8 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f7ff fedd 	bl	8000e68 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80010ae:	2010      	movs	r0, #16
 80010b0:	f7ff ff84 	bl	8000fbc <CRYP_GetFlagStatus>
      counter++;
 80010b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80010b6:	3301      	adds	r3, #1
 80010b8:	930b      	str	r3, [sp, #44]	; 0x2c
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80010ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c0:	d002      	beq.n	80010c8 <CRYP_AES_ECB+0xf0>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	d1f3      	bne.n	80010ae <CRYP_AES_ECB+0xd6>
 80010c6:	e000      	b.n	80010ca <CRYP_AES_ECB+0xf2>

    if (busystatus != RESET)
 80010c8:	b948      	cbnz	r0, 80010de <CRYP_AES_ECB+0x106>
       status = ERROR;
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80010ca:	2304      	movs	r3, #4
 80010cc:	e003      	b.n	80010d6 <CRYP_AES_ECB+0xfe>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80010ce:	a801      	add	r0, sp, #4
 80010d0:	f7ff fe92 	bl	8000df8 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
{
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 80010da:	2401      	movs	r4, #1
 80010dc:	e000      	b.n	80010e0 <CRYP_AES_ECB+0x108>
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 80010de:	2400      	movs	r4, #0

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 80010e0:	2320      	movs	r3, #32
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 80010e2:	a809      	add	r0, sp, #36	; 0x24

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 80010e4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80010ee:	2500      	movs	r5, #0
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 80010f0:	f7ff fe4d 	bl	8000d8e <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80010f4:	f7ff feb0 	bl	8000e58 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80010f8:	2001      	movs	r0, #1
 80010fa:	f7ff feb5 	bl	8000e68 <CRYP_Cmd>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 80010fe:	462e      	mov	r6, r5
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8001100:	e031      	b.n	8001166 <CRYP_AES_ECB+0x18e>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001102:	f859 0005 	ldr.w	r0, [r9, r5]
 8001106:	f7ff febb 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800110a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800110e:	f7ff feb7 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001112:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8001116:	f7ff feb3 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800111a:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800111e:	f7ff feaf 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
 8001122:	f108 0810 	add.w	r8, r8, #16

    /* Wait until the complete message has been processed */
    counter = 0;
 8001126:	960b      	str	r6, [sp, #44]	; 0x2c
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8001128:	2010      	movs	r0, #16
 800112a:	f7ff ff47 	bl	8000fbc <CRYP_GetFlagStatus>
      counter++;
 800112e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001130:	3301      	adds	r3, #1
 8001132:	930b      	str	r3, [sp, #44]	; 0x2c
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8001134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113a:	d002      	beq.n	8001142 <CRYP_AES_ECB+0x16a>
 800113c:	2800      	cmp	r0, #0
 800113e:	d1f3      	bne.n	8001128 <CRYP_AES_ECB+0x150>
 8001140:	e000      	b.n	8001144 <CRYP_AES_ECB+0x16c>

    if (busystatus != RESET)
 8001142:	b970      	cbnz	r0, 8001162 <CRYP_AES_ECB+0x18a>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001144:	f7ff fea2 	bl	8000e8c <CRYP_DataOut>
 8001148:	6038      	str	r0, [r7, #0]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800114a:	f7ff fe9f 	bl	8000e8c <CRYP_DataOut>
 800114e:	6078      	str	r0, [r7, #4]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001150:	f7ff fe9c 	bl	8000e8c <CRYP_DataOut>
 8001154:	60b8      	str	r0, [r7, #8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 8001156:	f7ff fe99 	bl	8000e8c <CRYP_DataOut>
      outputaddr+=4;
 800115a:	2401      	movs	r4, #1
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 800115c:	60f8      	str	r0, [r7, #12]
      outputaddr+=4;
 800115e:	3710      	adds	r7, #16
 8001160:	e000      	b.n	8001164 <CRYP_AES_ECB+0x18c>
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 8001162:	2400      	movs	r4, #0
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8001164:	3510      	adds	r5, #16
 8001166:	455d      	cmp	r5, fp
 8001168:	d201      	bcs.n	800116e <CRYP_AES_ECB+0x196>
 800116a:	2c00      	cmp	r4, #0
 800116c:	d1c9      	bne.n	8001102 <CRYP_AES_ECB+0x12a>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800116e:	2000      	movs	r0, #0
 8001170:	f7ff fe7a 	bl	8000e68 <CRYP_Cmd>

  return status; 
}
 8001174:	4620      	mov	r0, r4
 8001176:	b00d      	add	sp, #52	; 0x34
 8001178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800117c <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 800117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001180:	b093      	sub	sp, #76	; 0x4c
 8001182:	4699      	mov	r9, r3
 8001184:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8001188:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
 800118c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
                         uint8_t *Output)
{
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800118e:	2300      	movs	r3, #0
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8001190:	4604      	mov	r4, r0
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8001192:	a803      	add	r0, sp, #12
                         uint8_t *Output)
{
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8001194:	9311      	str	r3, [sp, #68]	; 0x44
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8001196:	9301      	str	r3, [sp, #4]
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8001198:	460d      	mov	r5, r1
 800119a:	4616      	mov	r6, r2
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 800119c:	f7ff fe40 	bl	8000e20 <CRYP_KeyStructInit>

  switch(Keysize)
 80011a0:	f1b9 0fc0 	cmp.w	r9, #192	; 0xc0
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 80011a4:	46d0      	mov	r8, sl
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
 80011a6:	9b01      	ldr	r3, [sp, #4]
 80011a8:	d012      	beq.n	80011d0 <CRYP_AES_CBC+0x54>
 80011aa:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
 80011ae:	d024      	beq.n	80011fa <CRYP_AES_CBC+0x7e>
 80011b0:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80011b4:	d13d      	bne.n	8001232 <CRYP_AES_CBC+0xb6>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 80011b6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80011ba:	6833      	ldr	r3, [r6, #0]
 80011bc:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80011be:	9307      	str	r3, [sp, #28]
 80011c0:	6873      	ldr	r3, [r6, #4]
 80011c2:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80011c4:	9308      	str	r3, [sp, #32]
 80011c6:	68b3      	ldr	r3, [r6, #8]
 80011c8:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80011ca:	9309      	str	r3, [sp, #36]	; 0x24
 80011cc:	68f3      	ldr	r3, [r6, #12]
 80011ce:	e02e      	b.n	800122e <CRYP_AES_CBC+0xb2>
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80011d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80011d8:	6833      	ldr	r3, [r6, #0]
 80011da:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80011dc:	9305      	str	r3, [sp, #20]
 80011de:	6873      	ldr	r3, [r6, #4]
 80011e0:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80011e2:	9306      	str	r3, [sp, #24]
 80011e4:	68b3      	ldr	r3, [r6, #8]
 80011e6:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80011e8:	9307      	str	r3, [sp, #28]
 80011ea:	68f3      	ldr	r3, [r6, #12]
 80011ec:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80011ee:	9308      	str	r3, [sp, #32]
 80011f0:	6933      	ldr	r3, [r6, #16]
 80011f2:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80011f4:	9309      	str	r3, [sp, #36]	; 0x24
 80011f6:	6973      	ldr	r3, [r6, #20]
 80011f8:	e019      	b.n	800122e <CRYP_AES_CBC+0xb2>
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80011fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011fe:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8001202:	6833      	ldr	r3, [r6, #0]
 8001204:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8001206:	9303      	str	r3, [sp, #12]
 8001208:	6873      	ldr	r3, [r6, #4]
 800120a:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 800120c:	9304      	str	r3, [sp, #16]
 800120e:	68b3      	ldr	r3, [r6, #8]
 8001210:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8001212:	9305      	str	r3, [sp, #20]
 8001214:	68f3      	ldr	r3, [r6, #12]
 8001216:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8001218:	9306      	str	r3, [sp, #24]
 800121a:	6933      	ldr	r3, [r6, #16]
 800121c:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800121e:	9307      	str	r3, [sp, #28]
 8001220:	6973      	ldr	r3, [r6, #20]
 8001222:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8001224:	9308      	str	r3, [sp, #32]
 8001226:	69b3      	ldr	r3, [r6, #24]
 8001228:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800122a:	9309      	str	r3, [sp, #36]	; 0x24
 800122c:	69f3      	ldr	r3, [r6, #28]
 800122e:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8001230:	930a      	str	r3, [sp, #40]	; 0x28
 8001232:	682b      	ldr	r3, [r5, #0]
 8001234:	ba1b      	rev	r3, r3
    default:
    break;
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8001236:	930b      	str	r3, [sp, #44]	; 0x2c
 8001238:	686b      	ldr	r3, [r5, #4]
 800123a:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 800123c:	930c      	str	r3, [sp, #48]	; 0x30
 800123e:	68ab      	ldr	r3, [r5, #8]
 8001240:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8001242:	930d      	str	r3, [sp, #52]	; 0x34
 8001244:	68eb      	ldr	r3, [r5, #12]
 8001246:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8001248:	930e      	str	r3, [sp, #56]	; 0x38


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 800124a:	bb14      	cbnz	r4, 8001292 <CRYP_AES_CBC+0x116>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 800124c:	f7ff fe04 	bl	8000e58 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8001250:	2304      	movs	r3, #4
 8001252:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;

    CRYP_Init(&AES_CRYP_InitStructure);
 8001256:	a80f      	add	r0, sp, #60	; 0x3c
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8001258:	2338      	movs	r3, #56	; 0x38
 800125a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 800125e:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40

    CRYP_Init(&AES_CRYP_InitStructure);
 8001262:	f7ff fd94 	bl	8000d8e <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8001266:	a803      	add	r0, sp, #12
 8001268:	f7ff fdc6 	bl	8000df8 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff fdfb 	bl	8000e68 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8001272:	2010      	movs	r0, #16
 8001274:	f7ff fea2 	bl	8000fbc <CRYP_GetFlagStatus>
      counter++;
 8001278:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800127a:	3301      	adds	r3, #1
 800127c:	9311      	str	r3, [sp, #68]	; 0x44
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800127e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001284:	d002      	beq.n	800128c <CRYP_AES_CBC+0x110>
 8001286:	2800      	cmp	r0, #0
 8001288:	d1f3      	bne.n	8001272 <CRYP_AES_CBC+0xf6>
 800128a:	e000      	b.n	800128e <CRYP_AES_CBC+0x112>

    if (busystatus != RESET)
 800128c:	b948      	cbnz	r0, 80012a2 <CRYP_AES_CBC+0x126>
       status = ERROR;
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800128e:	2304      	movs	r3, #4
 8001290:	e003      	b.n	800129a <CRYP_AES_CBC+0x11e>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8001292:	a803      	add	r0, sp, #12
 8001294:	f7ff fdb0 	bl	8000df8 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8001298:	2300      	movs	r3, #0
 800129a:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 800129e:	2401      	movs	r4, #1
 80012a0:	e000      	b.n	80012a4 <CRYP_AES_CBC+0x128>
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 80012a2:	2400      	movs	r4, #0
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 80012a4:	2328      	movs	r3, #40	; 0x28
 80012a6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 80012aa:	a80f      	add	r0, sp, #60	; 0x3c

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  CRYP_Init(&AES_CRYP_InitStructure);
 80012b2:	f7ff fd6c 	bl	8000d8e <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 80012b6:	a80b      	add	r0, sp, #44	; 0x2c
 80012b8:	f7ff fdbc 	bl	8000e34 <CRYP_IVInit>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80012bc:	2500      	movs	r5, #0

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80012be:	f7ff fdcb 	bl	8000e58 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f7ff fdd0 	bl	8000e68 <CRYP_Cmd>
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;
    /* Wait until the complete message has been processed */
    counter = 0;
 80012c8:	462e      	mov	r6, r5

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80012ca:	e031      	b.n	8001330 <CRYP_AES_CBC+0x1b4>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80012cc:	f85a 0005 	ldr.w	r0, [sl, r5]
 80012d0:	f7ff fdd6 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80012d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80012d8:	f7ff fdd2 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80012dc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80012e0:	f7ff fdce 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80012e4:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80012e8:	f7ff fdca 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
 80012ec:	f108 0810 	add.w	r8, r8, #16
    /* Wait until the complete message has been processed */
    counter = 0;
 80012f0:	9611      	str	r6, [sp, #68]	; 0x44
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80012f2:	2010      	movs	r0, #16
 80012f4:	f7ff fe62 	bl	8000fbc <CRYP_GetFlagStatus>
      counter++;
 80012f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80012fa:	3301      	adds	r3, #1
 80012fc:	9311      	str	r3, [sp, #68]	; 0x44
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80012fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001304:	d002      	beq.n	800130c <CRYP_AES_CBC+0x190>
 8001306:	2800      	cmp	r0, #0
 8001308:	d1f3      	bne.n	80012f2 <CRYP_AES_CBC+0x176>
 800130a:	e000      	b.n	800130e <CRYP_AES_CBC+0x192>

    if (busystatus != RESET)
 800130c:	b970      	cbnz	r0, 800132c <CRYP_AES_CBC+0x1b0>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800130e:	f7ff fdbd 	bl	8000e8c <CRYP_DataOut>
 8001312:	6038      	str	r0, [r7, #0]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001314:	f7ff fdba 	bl	8000e8c <CRYP_DataOut>
 8001318:	6078      	str	r0, [r7, #4]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800131a:	f7ff fdb7 	bl	8000e8c <CRYP_DataOut>
 800131e:	60b8      	str	r0, [r7, #8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001320:	f7ff fdb4 	bl	8000e8c <CRYP_DataOut>
      outputaddr+=4;
 8001324:	2401      	movs	r4, #1
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001326:	60f8      	str	r0, [r7, #12]
      outputaddr+=4;
 8001328:	3710      	adds	r7, #16
 800132a:	e000      	b.n	800132e <CRYP_AES_CBC+0x1b2>
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 800132c:	2400      	movs	r4, #0

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800132e:	3510      	adds	r5, #16
 8001330:	455d      	cmp	r5, fp
 8001332:	d201      	bcs.n	8001338 <CRYP_AES_CBC+0x1bc>
 8001334:	2c00      	cmp	r4, #0
 8001336:	d1c9      	bne.n	80012cc <CRYP_AES_CBC+0x150>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fd95 	bl	8000e68 <CRYP_Cmd>

  return status;
}
 800133e:	4620      	mov	r0, r4
 8001340:	b013      	add	sp, #76	; 0x4c
 8001342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001346 <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8001346:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800134a:	b093      	sub	sp, #76	; 0x4c
 800134c:	4699      	mov	r9, r3
 800134e:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8001352:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
 8001356:	9f1e      	ldr	r7, [sp, #120]	; 0x78
                         uint8_t *Output)
{
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8001358:	2300      	movs	r3, #0
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 800135a:	4604      	mov	r4, r0
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 800135c:	a803      	add	r0, sp, #12
                         uint8_t *Output)
{
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800135e:	9311      	str	r3, [sp, #68]	; 0x44
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8001360:	9301      	str	r3, [sp, #4]
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8001362:	460d      	mov	r5, r1
 8001364:	4616      	mov	r6, r2
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8001366:	f7ff fd5b 	bl	8000e20 <CRYP_KeyStructInit>

  switch(Keysize)
 800136a:	f1b9 0fc0 	cmp.w	r9, #192	; 0xc0
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 800136e:	46d0      	mov	r8, sl
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
 8001370:	9b01      	ldr	r3, [sp, #4]
 8001372:	d012      	beq.n	800139a <CRYP_AES_CTR+0x54>
 8001374:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
 8001378:	d024      	beq.n	80013c4 <CRYP_AES_CTR+0x7e>
 800137a:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 800137e:	d13d      	bne.n	80013fc <CRYP_AES_CTR+0xb6>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8001380:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8001384:	6833      	ldr	r3, [r6, #0]
 8001386:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8001388:	9307      	str	r3, [sp, #28]
 800138a:	6873      	ldr	r3, [r6, #4]
 800138c:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800138e:	9308      	str	r3, [sp, #32]
 8001390:	68b3      	ldr	r3, [r6, #8]
 8001392:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8001394:	9309      	str	r3, [sp, #36]	; 0x24
 8001396:	68f3      	ldr	r3, [r6, #12]
 8001398:	e02e      	b.n	80013f8 <CRYP_AES_CTR+0xb2>
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 800139a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80013a2:	6833      	ldr	r3, [r6, #0]
 80013a4:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80013a6:	9305      	str	r3, [sp, #20]
 80013a8:	6873      	ldr	r3, [r6, #4]
 80013aa:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80013ac:	9306      	str	r3, [sp, #24]
 80013ae:	68b3      	ldr	r3, [r6, #8]
 80013b0:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80013b2:	9307      	str	r3, [sp, #28]
 80013b4:	68f3      	ldr	r3, [r6, #12]
 80013b6:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80013b8:	9308      	str	r3, [sp, #32]
 80013ba:	6933      	ldr	r3, [r6, #16]
 80013bc:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80013be:	9309      	str	r3, [sp, #36]	; 0x24
 80013c0:	6973      	ldr	r3, [r6, #20]
 80013c2:	e019      	b.n	80013f8 <CRYP_AES_CTR+0xb2>
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80013c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80013cc:	6833      	ldr	r3, [r6, #0]
 80013ce:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80013d0:	9303      	str	r3, [sp, #12]
 80013d2:	6873      	ldr	r3, [r6, #4]
 80013d4:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 80013d6:	9304      	str	r3, [sp, #16]
 80013d8:	68b3      	ldr	r3, [r6, #8]
 80013da:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80013dc:	9305      	str	r3, [sp, #20]
 80013de:	68f3      	ldr	r3, [r6, #12]
 80013e0:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80013e2:	9306      	str	r3, [sp, #24]
 80013e4:	6933      	ldr	r3, [r6, #16]
 80013e6:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80013e8:	9307      	str	r3, [sp, #28]
 80013ea:	6973      	ldr	r3, [r6, #20]
 80013ec:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80013ee:	9308      	str	r3, [sp, #32]
 80013f0:	69b3      	ldr	r3, [r6, #24]
 80013f2:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80013f4:	9309      	str	r3, [sp, #36]	; 0x24
 80013f6:	69f3      	ldr	r3, [r6, #28]
 80013f8:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80013fa:	930a      	str	r3, [sp, #40]	; 0x28
 80013fc:	682b      	ldr	r3, [r5, #0]
 80013fe:	ba1b      	rev	r3, r3
    break;
    default:
    break;
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8001400:	930b      	str	r3, [sp, #44]	; 0x2c
 8001402:	686b      	ldr	r3, [r5, #4]
 8001404:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8001406:	930c      	str	r3, [sp, #48]	; 0x30
 8001408:	68ab      	ldr	r3, [r5, #8]
 800140a:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 800140c:	930d      	str	r3, [sp, #52]	; 0x34
 800140e:	68eb      	ldr	r3, [r5, #12]
 8001410:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8001412:	a803      	add	r0, sp, #12
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8001414:	930e      	str	r3, [sp, #56]	; 0x38

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8001416:	f7ff fcef 	bl	8000df8 <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 800141a:	b90c      	cbnz	r4, 8001420 <CRYP_AES_CTR+0xda>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800141c:	2304      	movs	r3, #4
 800141e:	e000      	b.n	8001422 <CRYP_AES_CTR+0xdc>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8001420:	2300      	movs	r3, #0
 8001422:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 8001426:	2330      	movs	r3, #48	; 0x30
 8001428:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 800142c:	a80f      	add	r0, sp, #60	; 0x3c
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  CRYP_Init(&AES_CRYP_InitStructure);
 8001434:	f7ff fcab 	bl	8000d8e <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8001438:	a80b      	add	r0, sp, #44	; 0x2c
 800143a:	f7ff fcfb 	bl	8000e34 <CRYP_IVInit>
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800143e:	2400      	movs	r4, #0

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8001440:	f7ff fd0a 	bl	8000e58 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fd0f 	bl	8000e68 <CRYP_Cmd>
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 800144a:	2501      	movs	r5, #1
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;
    /* Wait until the complete message has been processed */
    counter = 0;
 800144c:	4626      	mov	r6, r4
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800144e:	e031      	b.n	80014b4 <CRYP_AES_CTR+0x16e>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001450:	f85a 0004 	ldr.w	r0, [sl, r4]
 8001454:	f7ff fd14 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001458:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800145c:	f7ff fd10 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001460:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8001464:	f7ff fd0c 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001468:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800146c:	f7ff fd08 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
 8001470:	f108 0810 	add.w	r8, r8, #16
    /* Wait until the complete message has been processed */
    counter = 0;
 8001474:	9611      	str	r6, [sp, #68]	; 0x44
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8001476:	2010      	movs	r0, #16
 8001478:	f7ff fda0 	bl	8000fbc <CRYP_GetFlagStatus>
      counter++;
 800147c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800147e:	3301      	adds	r3, #1
 8001480:	9311      	str	r3, [sp, #68]	; 0x44
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8001482:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001488:	d002      	beq.n	8001490 <CRYP_AES_CTR+0x14a>
 800148a:	2800      	cmp	r0, #0
 800148c:	d1f3      	bne.n	8001476 <CRYP_AES_CTR+0x130>
 800148e:	e000      	b.n	8001492 <CRYP_AES_CTR+0x14c>

    if (busystatus != RESET)
 8001490:	b970      	cbnz	r0, 80014b0 <CRYP_AES_CTR+0x16a>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001492:	f7ff fcfb 	bl	8000e8c <CRYP_DataOut>
 8001496:	6038      	str	r0, [r7, #0]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001498:	f7ff fcf8 	bl	8000e8c <CRYP_DataOut>
 800149c:	6078      	str	r0, [r7, #4]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800149e:	f7ff fcf5 	bl	8000e8c <CRYP_DataOut>
 80014a2:	60b8      	str	r0, [r7, #8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80014a4:	f7ff fcf2 	bl	8000e8c <CRYP_DataOut>
      outputaddr+=4;
 80014a8:	2501      	movs	r5, #1
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80014aa:	60f8      	str	r0, [r7, #12]
      outputaddr+=4;
 80014ac:	3710      	adds	r7, #16
 80014ae:	e000      	b.n	80014b2 <CRYP_AES_CTR+0x16c>
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 80014b0:	2500      	movs	r5, #0
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80014b2:	3410      	adds	r4, #16
 80014b4:	455c      	cmp	r4, fp
 80014b6:	d201      	bcs.n	80014bc <CRYP_AES_CTR+0x176>
 80014b8:	2d00      	cmp	r5, #0
 80014ba:	d1c9      	bne.n	8001450 <CRYP_AES_CTR+0x10a>
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff fcd3 	bl	8000e68 <CRYP_Cmd>

  return status;
}
 80014c2:	4628      	mov	r0, r5
 80014c4:	b013      	add	sp, #76	; 0x4c
 80014c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080014ca <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 80014ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014ce:	b08c      	sub	sp, #48	; 0x30
 80014d0:	4604      	mov	r4, r0
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80014d2:	f04f 0900 	mov.w	r9, #0
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 80014d6:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 80014d8:	460d      	mov	r5, r1
 80014da:	4616      	mov	r6, r2
 80014dc:	469a      	mov	sl, r3
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80014de:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 80014e2:	4690      	mov	r8, r2
  uint32_t outputaddr = (uint32_t)Output;
 80014e4:	9f14      	ldr	r7, [sp, #80]	; 0x50
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 80014e6:	f7ff fc9b 	bl	8000e20 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 80014ea:	2c01      	cmp	r4, #1
 80014ec:	d102      	bne.n	80014f4 <CRYP_DES_ECB+0x2a>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80014ee:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 80014f2:	e002      	b.n	80014fa <CRYP_DES_ECB+0x30>
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 80014f4:	2304      	movs	r3, #4
 80014f6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 80014fa:	2310      	movs	r3, #16
 80014fc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&DES_CRYP_InitStructure);
 8001500:	a809      	add	r0, sp, #36	; 0x24
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  CRYP_Init(&DES_CRYP_InitStructure);
 8001508:	f7ff fc41 	bl	8000d8e <CRYP_Init>
 800150c:	682b      	ldr	r3, [r5, #0]
 800150e:	ba1b      	rev	r3, r3

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8001510:	9303      	str	r3, [sp, #12]
 8001512:	686b      	ldr	r3, [r5, #4]
 8001514:	ba1b      	rev	r3, r3
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8001516:	a801      	add	r0, sp, #4
  CRYP_Init(&DES_CRYP_InitStructure);

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8001518:	9304      	str	r3, [sp, #16]
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800151a:	2400      	movs	r4, #0

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 800151c:	f7ff fc6c 	bl	8000df8 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8001520:	f7ff fc9a 	bl	8000e58 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8001524:	2001      	movs	r0, #1
 8001526:	f7ff fc9f 	bl	8000e68 <CRYP_Cmd>
{
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 800152a:	2501      	movs	r5, #1
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

/* Wait until the complete message has been processed */
    counter = 0;
 800152c:	46a1      	mov	r9, r4
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800152e:	e023      	b.n	8001578 <CRYP_DES_ECB+0xae>
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001530:	5930      	ldr	r0, [r6, r4]
 8001532:	f7ff fca5 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001536:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800153a:	f7ff fca1 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
 800153e:	f108 0808 	add.w	r8, r8, #8

/* Wait until the complete message has been processed */
    counter = 0;
 8001542:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8001546:	2010      	movs	r0, #16
 8001548:	f7ff fd38 	bl	8000fbc <CRYP_GetFlagStatus>
      counter++;
 800154c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800154e:	3301      	adds	r3, #1
 8001550:	930b      	str	r3, [sp, #44]	; 0x2c
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8001552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001558:	d002      	beq.n	8001560 <CRYP_DES_ECB+0x96>
 800155a:	2800      	cmp	r0, #0
 800155c:	d1f3      	bne.n	8001546 <CRYP_DES_ECB+0x7c>
 800155e:	e000      	b.n	8001562 <CRYP_DES_ECB+0x98>

    if (busystatus != RESET)
 8001560:	b940      	cbnz	r0, 8001574 <CRYP_DES_ECB+0xaa>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001562:	f7ff fc93 	bl	8000e8c <CRYP_DataOut>
 8001566:	6038      	str	r0, [r7, #0]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001568:	f7ff fc90 	bl	8000e8c <CRYP_DataOut>
      outputaddr+=4;
 800156c:	2501      	movs	r5, #1
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800156e:	6078      	str	r0, [r7, #4]
      outputaddr+=4;
 8001570:	3708      	adds	r7, #8
 8001572:	e000      	b.n	8001576 <CRYP_DES_ECB+0xac>
      counter++;
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 8001574:	2500      	movs	r5, #0
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8001576:	3408      	adds	r4, #8
 8001578:	4554      	cmp	r4, sl
 800157a:	d201      	bcs.n	8001580 <CRYP_DES_ECB+0xb6>
 800157c:	2d00      	cmp	r5, #0
 800157e:	d1d7      	bne.n	8001530 <CRYP_DES_ECB+0x66>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff fc71 	bl	8000e68 <CRYP_Cmd>

  return status; 
}
 8001586:	4628      	mov	r0, r5
 8001588:	b00c      	add	sp, #48	; 0x30
 800158a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800158e <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 800158e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001592:	b091      	sub	sp, #68	; 0x44
 8001594:	4604      	mov	r4, r0
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8001596:	f04f 0a00 	mov.w	sl, #0
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 800159a:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 800159c:	460d      	mov	r5, r1
 800159e:	4616      	mov	r6, r2
 80015a0:	4699      	mov	r9, r3
 80015a2:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80015a6:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 80015aa:	4698      	mov	r8, r3
  uint32_t outputaddr = (uint32_t)Output;
 80015ac:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 80015ae:	f7ff fc37 	bl	8000e20 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 80015b2:	2c01      	cmp	r4, #1
 80015b4:	d102      	bne.n	80015bc <CRYP_DES_CBC+0x2e>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80015b6:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
 80015ba:	e002      	b.n	80015c2 <CRYP_DES_CBC+0x34>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 80015bc:	2304      	movs	r3, #4
 80015be:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 80015c2:	2318      	movs	r3, #24
 80015c4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&DES_CRYP_InitStructure);
 80015c8:	a80d      	add	r0, sp, #52	; 0x34
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  CRYP_Init(&DES_CRYP_InitStructure);
 80015d0:	f7ff fbdd 	bl	8000d8e <CRYP_Init>
 80015d4:	682b      	ldr	r3, [r5, #0]
 80015d6:	ba1b      	rev	r3, r3

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80015d8:	9303      	str	r3, [sp, #12]
 80015da:	686b      	ldr	r3, [r5, #4]
 80015dc:	ba1b      	rev	r3, r3
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 80015de:	a801      	add	r0, sp, #4
  CRYP_Init(&DES_CRYP_InitStructure);

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80015e0:	9304      	str	r3, [sp, #16]
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 80015e2:	f7ff fc09 	bl	8000df8 <CRYP_KeyInit>
 80015e6:	6833      	ldr	r3, [r6, #0]
 80015e8:	ba1b      	rev	r3, r3

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80015ea:	9309      	str	r3, [sp, #36]	; 0x24
 80015ec:	6873      	ldr	r3, [r6, #4]
 80015ee:	ba1b      	rev	r3, r3
  ivaddr+=4;
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 80015f0:	a809      	add	r0, sp, #36	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 80015f2:	930a      	str	r3, [sp, #40]	; 0x28
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80015f4:	2400      	movs	r4, #0

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 80015f6:	f7ff fc1d 	bl	8000e34 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80015fa:	f7ff fc2d 	bl	8000e58 <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff fc32 	bl	8000e68 <CRYP_Cmd>
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8001604:	2501      	movs	r5, #1
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 8001606:	4626      	mov	r6, r4
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8001608:	e023      	b.n	8001652 <CRYP_DES_CBC+0xc4>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800160a:	f859 0004 	ldr.w	r0, [r9, r4]
 800160e:	f7ff fc37 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001612:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8001616:	f7ff fc33 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
 800161a:	f108 0808 	add.w	r8, r8, #8

    /* Wait until the complete message has been processed */
    counter = 0;
 800161e:	960f      	str	r6, [sp, #60]	; 0x3c
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8001620:	2010      	movs	r0, #16
 8001622:	f7ff fccb 	bl	8000fbc <CRYP_GetFlagStatus>
      counter++;
 8001626:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001628:	3301      	adds	r3, #1
 800162a:	930f      	str	r3, [sp, #60]	; 0x3c
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 800162c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800162e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001632:	d002      	beq.n	800163a <CRYP_DES_CBC+0xac>
 8001634:	2800      	cmp	r0, #0
 8001636:	d1f3      	bne.n	8001620 <CRYP_DES_CBC+0x92>
 8001638:	e000      	b.n	800163c <CRYP_DES_CBC+0xae>

    if (busystatus != RESET)
 800163a:	b940      	cbnz	r0, 800164e <CRYP_DES_CBC+0xc0>
       status = ERROR;
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800163c:	f7ff fc26 	bl	8000e8c <CRYP_DataOut>
 8001640:	6038      	str	r0, [r7, #0]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001642:	f7ff fc23 	bl	8000e8c <CRYP_DataOut>
      outputaddr+=4;
 8001646:	2501      	movs	r5, #1
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001648:	6078      	str	r0, [r7, #4]
      outputaddr+=4;
 800164a:	3708      	adds	r7, #8
 800164c:	e000      	b.n	8001650 <CRYP_DES_CBC+0xc2>
      counter++;
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 800164e:	2500      	movs	r5, #0
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8001650:	3408      	adds	r4, #8
 8001652:	455c      	cmp	r4, fp
 8001654:	d201      	bcs.n	800165a <CRYP_DES_CBC+0xcc>
 8001656:	2d00      	cmp	r5, #0
 8001658:	d1d7      	bne.n	800160a <CRYP_DES_CBC+0x7c>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff fc04 	bl	8000e68 <CRYP_Cmd>

  return status; 
}
 8001660:	4628      	mov	r0, r5
 8001662:	b011      	add	sp, #68	; 0x44
 8001664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001668 <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 8001668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800166c:	b08c      	sub	sp, #48	; 0x30
 800166e:	4604      	mov	r4, r0
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8001670:	f04f 0900 	mov.w	r9, #0
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8001674:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 8001676:	460d      	mov	r5, r1
 8001678:	4616      	mov	r6, r2
 800167a:	469a      	mov	sl, r3
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 800167c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 8001680:	4690      	mov	r8, r2
  uint32_t outputaddr = (uint32_t)Output;
 8001682:	9f14      	ldr	r7, [sp, #80]	; 0x50
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8001684:	f7ff fbcc 	bl	8000e20 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8001688:	2c01      	cmp	r4, #1
 800168a:	d102      	bne.n	8001692 <CRYP_TDES_ECB+0x2a>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 800168c:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 8001690:	e002      	b.n	8001698 <CRYP_TDES_ECB+0x30>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8001692:	2304      	movs	r3, #4
 8001694:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8001698:	2380      	movs	r3, #128	; 0x80
  CRYP_Init(&TDES_CRYP_InitStructure);
 800169a:	a809      	add	r0, sp, #36	; 0x24
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800169c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 80016a0:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&TDES_CRYP_InitStructure);
 80016a4:	f7ff fb73 	bl	8000d8e <CRYP_Init>
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	ba1b      	rev	r3, r3

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80016ac:	9303      	str	r3, [sp, #12]
 80016ae:	686b      	ldr	r3, [r5, #4]
 80016b0:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80016b2:	9304      	str	r3, [sp, #16]
 80016b4:	68ab      	ldr	r3, [r5, #8]
 80016b6:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80016b8:	9305      	str	r3, [sp, #20]
 80016ba:	68eb      	ldr	r3, [r5, #12]
 80016bc:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80016be:	9306      	str	r3, [sp, #24]
 80016c0:	692b      	ldr	r3, [r5, #16]
 80016c2:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80016c4:	9307      	str	r3, [sp, #28]
 80016c6:	696b      	ldr	r3, [r5, #20]
 80016c8:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 80016ca:	a801      	add	r0, sp, #4
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80016cc:	9308      	str	r3, [sp, #32]
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80016ce:	2400      	movs	r4, #0
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 80016d0:	f7ff fb92 	bl	8000df8 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80016d4:	f7ff fbc0 	bl	8000e58 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80016d8:	2001      	movs	r0, #1
 80016da:	f7ff fbc5 	bl	8000e68 <CRYP_Cmd>
{
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 80016de:	2501      	movs	r5, #1
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 80016e0:	46a1      	mov	r9, r4
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80016e2:	e023      	b.n	800172c <CRYP_TDES_ECB+0xc4>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80016e4:	5930      	ldr	r0, [r6, r4]
 80016e6:	f7ff fbcb 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80016ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80016ee:	f7ff fbc7 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
 80016f2:	f108 0808 	add.w	r8, r8, #8

    /* Wait until the complete message has been processed */
    counter = 0;
 80016f6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80016fa:	2010      	movs	r0, #16
 80016fc:	f7ff fc5e 	bl	8000fbc <CRYP_GetFlagStatus>
      counter++;
 8001700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001702:	3301      	adds	r3, #1
 8001704:	930b      	str	r3, [sp, #44]	; 0x2c
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8001706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170c:	d002      	beq.n	8001714 <CRYP_TDES_ECB+0xac>
 800170e:	2800      	cmp	r0, #0
 8001710:	d1f3      	bne.n	80016fa <CRYP_TDES_ECB+0x92>
 8001712:	e000      	b.n	8001716 <CRYP_TDES_ECB+0xae>

    if (busystatus != RESET)
 8001714:	b940      	cbnz	r0, 8001728 <CRYP_TDES_ECB+0xc0>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001716:	f7ff fbb9 	bl	8000e8c <CRYP_DataOut>
 800171a:	6038      	str	r0, [r7, #0]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800171c:	f7ff fbb6 	bl	8000e8c <CRYP_DataOut>
      outputaddr+=4;
 8001720:	2501      	movs	r5, #1
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001722:	6078      	str	r0, [r7, #4]
      outputaddr+=4;
 8001724:	3708      	adds	r7, #8
 8001726:	e000      	b.n	800172a <CRYP_TDES_ECB+0xc2>
      counter++;
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
    {
       status = ERROR;
 8001728:	2500      	movs	r5, #0
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800172a:	3408      	adds	r4, #8
 800172c:	4554      	cmp	r4, sl
 800172e:	d201      	bcs.n	8001734 <CRYP_TDES_ECB+0xcc>
 8001730:	2d00      	cmp	r5, #0
 8001732:	d1d7      	bne.n	80016e4 <CRYP_TDES_ECB+0x7c>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff fb97 	bl	8000e68 <CRYP_Cmd>

  return status; 
}
 800173a:	4628      	mov	r0, r5
 800173c:	b00c      	add	sp, #48	; 0x30
 800173e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001742 <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8001742:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001746:	b091      	sub	sp, #68	; 0x44
 8001748:	4604      	mov	r4, r0
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800174a:	f04f 0a00 	mov.w	sl, #0
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 800174e:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8001750:	460d      	mov	r5, r1
 8001752:	4616      	mov	r6, r2
 8001754:	4699      	mov	r9, r3
 8001756:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800175a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 800175e:	4698      	mov	r8, r3
  uint32_t outputaddr = (uint32_t)Output;
 8001760:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8001762:	f7ff fb5d 	bl	8000e20 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8001766:	2c01      	cmp	r4, #1
 8001768:	d102      	bne.n	8001770 <CRYP_TDES_CBC+0x2e>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 800176a:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
 800176e:	e002      	b.n	8001776 <CRYP_TDES_CBC+0x34>
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8001770:	2304      	movs	r3, #4
 8001772:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 8001776:	2308      	movs	r3, #8
 8001778:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;

  CRYP_Init(&TDES_CRYP_InitStructure);
 800177c:	a80d      	add	r0, sp, #52	; 0x34
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38

  CRYP_Init(&TDES_CRYP_InitStructure);
 8001784:	f7ff fb03 	bl	8000d8e <CRYP_Init>
 8001788:	682b      	ldr	r3, [r5, #0]
 800178a:	ba1b      	rev	r3, r3

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800178c:	9303      	str	r3, [sp, #12]
 800178e:	686b      	ldr	r3, [r5, #4]
 8001790:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8001792:	9304      	str	r3, [sp, #16]
 8001794:	68ab      	ldr	r3, [r5, #8]
 8001796:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8001798:	9305      	str	r3, [sp, #20]
 800179a:	68eb      	ldr	r3, [r5, #12]
 800179c:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800179e:	9306      	str	r3, [sp, #24]
 80017a0:	692b      	ldr	r3, [r5, #16]
 80017a2:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80017a4:	9307      	str	r3, [sp, #28]
 80017a6:	696b      	ldr	r3, [r5, #20]
 80017a8:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 80017aa:	a801      	add	r0, sp, #4
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80017ac:	9308      	str	r3, [sp, #32]
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 80017ae:	f7ff fb23 	bl	8000df8 <CRYP_KeyInit>
 80017b2:	6833      	ldr	r3, [r6, #0]
 80017b4:	ba1b      	rev	r3, r3

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80017b6:	9309      	str	r3, [sp, #36]	; 0x24
 80017b8:	6873      	ldr	r3, [r6, #4]
 80017ba:	ba1b      	rev	r3, r3
  ivaddr+=4;
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 80017bc:	a809      	add	r0, sp, #36	; 0x24
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 80017be:	930a      	str	r3, [sp, #40]	; 0x28
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80017c0:	2400      	movs	r4, #0

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 80017c2:	f7ff fb37 	bl	8000e34 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80017c6:	f7ff fb47 	bl	8000e58 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f7ff fb4c 	bl	8000e68 <CRYP_Cmd>
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 80017d0:	2501      	movs	r5, #1
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 80017d2:	4626      	mov	r6, r4
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80017d4:	e023      	b.n	800181e <CRYP_TDES_CBC+0xdc>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80017d6:	f859 0004 	ldr.w	r0, [r9, r4]
 80017da:	f7ff fb51 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80017de:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80017e2:	f7ff fb4d 	bl	8000e80 <CRYP_DataIn>
    inputaddr+=4;
 80017e6:	f108 0808 	add.w	r8, r8, #8

    /* Wait until the complete message has been processed */
    counter = 0;
 80017ea:	960f      	str	r6, [sp, #60]	; 0x3c
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80017ec:	2010      	movs	r0, #16
 80017ee:	f7ff fbe5 	bl	8000fbc <CRYP_GetFlagStatus>
      counter++;
 80017f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80017f4:	3301      	adds	r3, #1
 80017f6:	930f      	str	r3, [sp, #60]	; 0x3c
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 80017f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80017fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fe:	d002      	beq.n	8001806 <CRYP_TDES_CBC+0xc4>
 8001800:	2800      	cmp	r0, #0
 8001802:	d1f3      	bne.n	80017ec <CRYP_TDES_CBC+0xaa>
 8001804:	e000      	b.n	8001808 <CRYP_TDES_CBC+0xc6>

    if (busystatus != RESET)
 8001806:	b940      	cbnz	r0, 800181a <CRYP_TDES_CBC+0xd8>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001808:	f7ff fb40 	bl	8000e8c <CRYP_DataOut>
 800180c:	6038      	str	r0, [r7, #0]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800180e:	f7ff fb3d 	bl	8000e8c <CRYP_DataOut>
      outputaddr+=4;
 8001812:	2501      	movs	r5, #1
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001814:	6078      	str	r0, [r7, #4]
      outputaddr+=4;
 8001816:	3708      	adds	r7, #8
 8001818:	e000      	b.n	800181c <CRYP_TDES_CBC+0xda>
      counter++;
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 800181a:	2500      	movs	r5, #0
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800181c:	3408      	adds	r4, #8
 800181e:	455c      	cmp	r4, fp
 8001820:	d201      	bcs.n	8001826 <CRYP_TDES_CBC+0xe4>
 8001822:	2d00      	cmp	r5, #0
 8001824:	d1d7      	bne.n	80017d6 <CRYP_TDES_CBC+0x94>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8001826:	2000      	movs	r0, #0
 8001828:	f7ff fb1e 	bl	8000e68 <CRYP_Cmd>

  return status; 
}
 800182c:	4628      	mov	r0, r5
 800182e:	b011      	add	sp, #68	; 0x44
 8001830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001834 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8001834:	b508      	push	{r3, lr}
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8001836:	2101      	movs	r1, #1
 8001838:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800183c:	f001 ffda 	bl	80037f4 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8001840:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001844:	2100      	movs	r1, #0
}
 8001846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void DAC_DeInit(void)
{
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 800184a:	f001 bfd3 	b.w	80037f4 <RCC_APB1PeriphResetCmd>

0800184e <DAC_Init>:
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <DAC_Init+0x2a>)
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8001850:	b530      	push	{r4, r5, lr}

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8001852:	f640 72fe 	movw	r2, #4094	; 0xffe
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8001856:	681c      	ldr	r4, [r3, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8001858:	4082      	lsls	r2, r0
 800185a:	ea24 0202 	bic.w	r2, r4, r2
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800185e:	e891 0030 	ldmia.w	r1, {r4, r5}
 8001862:	4325      	orrs	r5, r4
 8001864:	688c      	ldr	r4, [r1, #8]
 8001866:	4325      	orrs	r5, r4
 8001868:	68cc      	ldr	r4, [r1, #12]
 800186a:	ea45 0104 	orr.w	r1, r5, r4
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 800186e:	fa11 f000 	lsls.w	r0, r1, r0
 8001872:	4310      	orrs	r0, r2
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8001874:	6018      	str	r0, [r3, #0]
}
 8001876:	bd30      	pop	{r4, r5, pc}
 8001878:	40007400 	.word	0x40007400

0800187c <DAC_StructInit>:
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 800187c:	2300      	movs	r3, #0
 800187e:	6003      	str	r3, [r0, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8001880:	6043      	str	r3, [r0, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8001882:	6083      	str	r3, [r0, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8001884:	60c3      	str	r3, [r0, #12]
}
 8001886:	4770      	bx	lr

08001888 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <DAC_Cmd+0x1c>)
 800188a:	2201      	movs	r2, #1
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800188c:	b119      	cbz	r1, 8001896 <DAC_Cmd+0xe>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 800188e:	6819      	ldr	r1, [r3, #0]
 8001890:	4082      	lsls	r2, r0
 8001892:	430a      	orrs	r2, r1
 8001894:	e003      	b.n	800189e <DAC_Cmd+0x16>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	4082      	lsls	r2, r0
 800189a:	ea21 0202 	bic.w	r2, r1, r2
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40007400 	.word	0x40007400

080018a8 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <DAC_SoftwareTriggerCmd+0x1c>)
 80018aa:	0900      	lsrs	r0, r0, #4
 80018ac:	2201      	movs	r2, #1
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018ae:	b119      	cbz	r1, 80018b8 <DAC_SoftwareTriggerCmd+0x10>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 80018b0:	6859      	ldr	r1, [r3, #4]
 80018b2:	4082      	lsls	r2, r0
 80018b4:	430a      	orrs	r2, r1
 80018b6:	e003      	b.n	80018c0 <DAC_SoftwareTriggerCmd+0x18>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 80018b8:	6859      	ldr	r1, [r3, #4]
 80018ba:	4082      	lsls	r2, r0
 80018bc:	ea21 0202 	bic.w	r2, r1, r2
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	4770      	bx	lr
 80018c4:	40007400 	.word	0x40007400

080018c8 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <DAC_DualSoftwareTriggerCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 80018ca:	685a      	ldr	r2, [r3, #4]
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018cc:	b110      	cbz	r0, 80018d4 <DAC_DualSoftwareTriggerCmd+0xc>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 80018ce:	f042 0203 	orr.w	r2, r2, #3
 80018d2:	e001      	b.n	80018d8 <DAC_DualSoftwareTriggerCmd+0x10>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 80018d4:	f022 0203 	bic.w	r2, r2, #3
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	4770      	bx	lr
 80018dc:	40007400 	.word	0x40007400

080018e0 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <DAC_WaveGenerationCmd+0x18>)
 80018e2:	4081      	lsls	r1, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018e4:	b112      	cbz	r2, 80018ec <DAC_WaveGenerationCmd+0xc>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4311      	orrs	r1, r2
 80018ea:	e002      	b.n	80018f2 <DAC_WaveGenerationCmd+0x12>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	ea22 0101 	bic.w	r1, r2, r1
 80018f2:	6019      	str	r1, [r3, #0]
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40007400 	.word	0x40007400

080018fc <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80018fc:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <DAC_SetChannel1Data+0x1c>)
 8001904:	9301      	str	r3, [sp, #4]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8001906:	9b01      	ldr	r3, [sp, #4]
 8001908:	3308      	adds	r3, #8
 800190a:	181b      	adds	r3, r3, r0
 800190c:	9301      	str	r3, [sp, #4]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800190e:	9b01      	ldr	r3, [sp, #4]
 8001910:	6019      	str	r1, [r3, #0]
}
 8001912:	b002      	add	sp, #8
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40007400 	.word	0x40007400

0800191c <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 800191c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <DAC_SetChannel2Data+0x1c>)
 8001924:	9301      	str	r3, [sp, #4]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8001926:	9b01      	ldr	r3, [sp, #4]
 8001928:	3314      	adds	r3, #20
 800192a:	181b      	adds	r3, r3, r0
 800192c:	9301      	str	r3, [sp, #4]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 800192e:	9b01      	ldr	r3, [sp, #4]
 8001930:	6019      	str	r1, [r3, #0]
}
 8001932:	b002      	add	sp, #8
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40007400 	.word	0x40007400

0800193c <DAC_SetDualChannelData>:
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 800193c:	2808      	cmp	r0, #8
  {
    data = ((uint32_t)Data2 << 16) | Data1;
  }
  
  tmp = (uint32_t)DAC_BASE;
  tmp += DHR12RD_OFFSET + DAC_Align;
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <DAC_SetDualChannelData+0x14>)
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 8001940:	bf0c      	ite	eq
 8001942:	ea42 2101 	orreq.w	r1, r2, r1, lsl #8
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 8001946:	ea42 4101 	orrne.w	r1, r2, r1, lsl #16
  
  tmp = (uint32_t)DAC_BASE;
  tmp += DHR12RD_OFFSET + DAC_Align;

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 800194a:	50c1      	str	r1, [r0, r3]
}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40007420 	.word	0x40007420

08001954 <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8001954:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <DAC_GetDataOutputValue+0x20>)
 800195c:	9301      	str	r3, [sp, #4]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 800195e:	9b01      	ldr	r3, [sp, #4]
 8001960:	332c      	adds	r3, #44	; 0x2c
 8001962:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 8001966:	9301      	str	r3, [sp, #4]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8001968:	9b01      	ldr	r3, [sp, #4]
 800196a:	6818      	ldr	r0, [r3, #0]
}
 800196c:	b280      	uxth	r0, r0
 800196e:	b002      	add	sp, #8
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40007400 	.word	0x40007400

08001978 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <DAC_DMACmd+0x1c>)
 800197a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800197e:	b119      	cbz	r1, 8001988 <DAC_DMACmd+0x10>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8001980:	6819      	ldr	r1, [r3, #0]
 8001982:	4082      	lsls	r2, r0
 8001984:	430a      	orrs	r2, r1
 8001986:	e003      	b.n	8001990 <DAC_DMACmd+0x18>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8001988:	6819      	ldr	r1, [r3, #0]
 800198a:	4082      	lsls	r2, r0
 800198c:	ea21 0202 	bic.w	r2, r1, r2
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	4770      	bx	lr
 8001994:	40007400 	.word	0x40007400

08001998 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <DAC_ITConfig+0x18>)
 800199a:	4081      	lsls	r1, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 800199c:	b112      	cbz	r2, 80019a4 <DAC_ITConfig+0xc>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4311      	orrs	r1, r2
 80019a2:	e002      	b.n	80019aa <DAC_ITConfig+0x12>
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	ea22 0101 	bic.w	r1, r2, r1
 80019aa:	6019      	str	r1, [r3, #0]
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40007400 	.word	0x40007400

080019b4 <DAC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <DAC_GetFlagStatus+0x10>)
 80019b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b8:	4081      	lsls	r1, r0
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 80019ba:	4219      	tst	r1, r3
    /* DAC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
}
 80019bc:	bf0c      	ite	eq
 80019be:	2000      	moveq	r0, #0
 80019c0:	2001      	movne	r0, #1
 80019c2:	4770      	bx	lr
 80019c4:	40007400 	.word	0x40007400

080019c8 <DAC_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 80019c8:	4b01      	ldr	r3, [pc, #4]	; (80019d0 <DAC_ClearFlag+0x8>)
 80019ca:	4081      	lsls	r1, r0
 80019cc:	6359      	str	r1, [r3, #52]	; 0x34
}
 80019ce:	4770      	bx	lr
 80019d0:	40007400 	.word	0x40007400

080019d4 <DAC_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <DAC_GetITStatus+0x18>)
 80019d6:	4081      	lsls	r1, r0
 80019d8:	681a      	ldr	r2, [r3, #0]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 80019da:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80019dc:	4008      	ands	r0, r1
 80019de:	d003      	beq.n	80019e8 <DAC_GetITStatus+0x14>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 80019e0:	4211      	tst	r1, r2
 80019e2:	bf0c      	ite	eq
 80019e4:	2000      	moveq	r0, #0
 80019e6:	2001      	movne	r0, #1
    /* DAC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the DAC_IT status */
  return  bitstatus;
}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40007400 	.word	0x40007400

080019f0 <DAC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 80019f0:	4b01      	ldr	r3, [pc, #4]	; (80019f8 <DAC_ClearITPendingBit+0x8>)
 80019f2:	4081      	lsls	r1, r0
 80019f4:	6359      	str	r1, [r3, #52]	; 0x34
}
 80019f6:	4770      	bx	lr
 80019f8:	40007400 	.word	0x40007400

080019fc <DBGMCU_GetREVID>:
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
   return(DBGMCU->IDCODE >> 16);
 80019fc:	4b01      	ldr	r3, [pc, #4]	; (8001a04 <DBGMCU_GetREVID+0x8>)
 80019fe:	6818      	ldr	r0, [r3, #0]
}
 8001a00:	0c00      	lsrs	r0, r0, #16
 8001a02:	4770      	bx	lr
 8001a04:	e0042000 	.word	0xe0042000

08001a08 <DBGMCU_GetDEVID>:
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 8001a08:	4b02      	ldr	r3, [pc, #8]	; (8001a14 <DBGMCU_GetDEVID+0xc>)
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	0500      	lsls	r0, r0, #20
}
 8001a0e:	0d00      	lsrs	r0, r0, #20
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e0042000 	.word	0xe0042000

08001a18 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <DBGMCU_Config+0x14>)
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8001a1a:	685a      	ldr	r2, [r3, #4]
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a1c:	b109      	cbz	r1, 8001a22 <DBGMCU_Config+0xa>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8001a1e:	4310      	orrs	r0, r2
 8001a20:	e001      	b.n	8001a26 <DBGMCU_Config+0xe>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 8001a22:	ea22 0000 	bic.w	r0, r2, r0
 8001a26:	6058      	str	r0, [r3, #4]
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e0042000 	.word	0xe0042000

08001a30 <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <DBGMCU_APB1PeriphConfig+0x14>)
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 8001a32:	689a      	ldr	r2, [r3, #8]
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a34:	b109      	cbz	r1, 8001a3a <DBGMCU_APB1PeriphConfig+0xa>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 8001a36:	4310      	orrs	r0, r2
 8001a38:	e001      	b.n	8001a3e <DBGMCU_APB1PeriphConfig+0xe>
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 8001a3a:	ea22 0000 	bic.w	r0, r2, r0
 8001a3e:	6098      	str	r0, [r3, #8]
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e0042000 	.word	0xe0042000

08001a48 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <DBGMCU_APB2PeriphConfig+0x14>)
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 8001a4a:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a4c:	b109      	cbz	r1, 8001a52 <DBGMCU_APB2PeriphConfig+0xa>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 8001a4e:	4310      	orrs	r0, r2
 8001a50:	e001      	b.n	8001a56 <DBGMCU_APB2PeriphConfig+0xe>
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 8001a52:	ea22 0000 	bic.w	r0, r2, r0
 8001a56:	60d8      	str	r0, [r3, #12]
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e0042000 	.word	0xe0042000

08001a60 <DCMI_DeInit>:
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
  DCMI->CR = 0x0;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <DCMI_DeInit+0x18>)
 8001a62:	2200      	movs	r2, #0
  DCMI->IER = 0x0;
  DCMI->ICR = 0x1F;
 8001a64:	211f      	movs	r1, #31
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
  DCMI->CR = 0x0;
 8001a66:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 8001a68:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 8001a6a:	6159      	str	r1, [r3, #20]
  DCMI->ESCR = 0x0;
 8001a6c:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 8001a6e:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 8001a70:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 8001a72:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	50050000 	.word	0x50050000

08001a7c <DCMI_Init>:
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <DCMI_Init+0x3c>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a84:	f022 0201 	bic.w	r2, r2, #1
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8001a88:	b510      	push	{r4, lr}
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001a8a:	8844      	ldrh	r4, [r0, #2]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8001a8c:	601a      	str	r2, [r3, #0]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001a8e:	8802      	ldrh	r2, [r0, #0]
  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 8001a90:	6819      	ldr	r1, [r3, #0]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001a92:	4322      	orrs	r2, r4
 8001a94:	8884      	ldrh	r4, [r0, #4]
 8001a96:	4322      	orrs	r2, r4
 8001a98:	88c4      	ldrh	r4, [r0, #6]
 8001a9a:	4322      	orrs	r2, r4
 8001a9c:	8904      	ldrh	r4, [r0, #8]
 8001a9e:	4322      	orrs	r2, r4
 8001aa0:	8944      	ldrh	r4, [r0, #10]
 8001aa2:	8980      	ldrh	r0, [r0, #12]
 8001aa4:	4322      	orrs	r2, r4
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 8001aa6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001aaa:	4302      	orrs	r2, r0
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 8001aac:	f021 0102 	bic.w	r1, r1, #2
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001ab0:	b292      	uxth	r2, r2
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8001ab2:	430a      	orrs	r2, r1
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
                     DCMI_InitStruct->DCMI_ExtendedDataMode);

  DCMI->CR = temp;                              
 8001ab4:	601a      	str	r2, [r3, #0]
}
 8001ab6:	bd10      	pop	{r4, pc}
 8001ab8:	50050000 	.word	0x50050000

08001abc <DCMI_StructInit>:
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 8001abc:	2300      	movs	r3, #0
 8001abe:	8003      	strh	r3, [r0, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 8001ac0:	8043      	strh	r3, [r0, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 8001ac2:	8083      	strh	r3, [r0, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 8001ac4:	80c3      	strh	r3, [r0, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 8001ac6:	8103      	strh	r3, [r0, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 8001ac8:	8143      	strh	r3, [r0, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 8001aca:	8183      	strh	r3, [r0, #12]
}
 8001acc:	4770      	bx	lr

08001ace <DCMI_CROPConfig>:
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8001ace:	8843      	ldrh	r3, [r0, #2]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 8001ad0:	8802      	ldrh	r2, [r0, #0]

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 8001ad2:	8881      	ldrh	r1, [r0, #4]
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8001ad4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <DCMI_CROPConfig+0x1a>)
 8001ada:	621a      	str	r2, [r3, #32]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8001adc:	88c2      	ldrh	r2, [r0, #6]
 8001ade:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	50050000 	.word	0x50050000

08001aec <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <DCMI_CROPCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 8001aee:	681a      	ldr	r2, [r3, #0]
void DCMI_CROPCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8001af0:	b110      	cbz	r0, 8001af8 <DCMI_CROPCmd+0xc>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 8001af2:	f042 0204 	orr.w	r2, r2, #4
 8001af6:	e001      	b.n	8001afc <DCMI_CROPCmd+0x10>
  }
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 8001af8:	f022 0204 	bic.w	r2, r2, #4
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	4770      	bx	lr
 8001b00:	50050000 	.word	0x50050000

08001b04 <DCMI_SetEmbeddedSynchroCodes>:
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 8001b04:	7882      	ldrb	r2, [r0, #2]
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8001b06:	7843      	ldrb	r3, [r0, #1]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 8001b08:	0412      	lsls	r2, r2, #16
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8001b0a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001b0e:	7803      	ldrb	r3, [r0, #0]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8001b10:	431a      	orrs	r2, r3
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 8001b12:	78c3      	ldrb	r3, [r0, #3]
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8001b14:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8001b18:	4b01      	ldr	r3, [pc, #4]	; (8001b20 <DCMI_SetEmbeddedSynchroCodes+0x1c>)
 8001b1a:	619a      	str	r2, [r3, #24]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	50050000 	.word	0x50050000

08001b24 <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <DCMI_JPEGCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 8001b26:	681a      	ldr	r2, [r3, #0]
void DCMI_JPEGCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 8001b28:	b110      	cbz	r0, 8001b30 <DCMI_JPEGCmd+0xc>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 8001b2a:	f042 0208 	orr.w	r2, r2, #8
 8001b2e:	e001      	b.n	8001b34 <DCMI_JPEGCmd+0x10>
  }
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 8001b30:	f022 0208 	bic.w	r2, r2, #8
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	4770      	bx	lr
 8001b38:	50050000 	.word	0x50050000

08001b3c <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <DCMI_Cmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8001b3e:	681a      	ldr	r2, [r3, #0]
void DCMI_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001b40:	b110      	cbz	r0, 8001b48 <DCMI_Cmd+0xc>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8001b42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b46:	e001      	b.n	8001b4c <DCMI_Cmd+0x10>
  }
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 8001b48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	4770      	bx	lr
 8001b50:	50050000 	.word	0x50050000

08001b54 <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <DCMI_CaptureCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8001b56:	681a      	ldr	r2, [r3, #0]
void DCMI_CaptureCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8001b58:	b110      	cbz	r0, 8001b60 <DCMI_CaptureCmd+0xc>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	e001      	b.n	8001b64 <DCMI_CaptureCmd+0x10>
  }
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 8001b60:	f022 0201 	bic.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	4770      	bx	lr
 8001b68:	50050000 	.word	0x50050000

08001b6c <DCMI_ReadData>:
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
  return DCMI->DR;
 8001b6c:	4b01      	ldr	r3, [pc, #4]	; (8001b74 <DCMI_ReadData+0x8>)
 8001b6e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	50050000 	.word	0x50050000

08001b78 <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <DCMI_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 8001b7a:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001b7c:	b109      	cbz	r1, 8001b82 <DCMI_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 8001b7e:	4310      	orrs	r0, r2
 8001b80:	e002      	b.n	8001b88 <DCMI_ITConfig+0x10>
  }
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 8001b82:	43c0      	mvns	r0, r0
 8001b84:	b280      	uxth	r0, r0
 8001b86:	4010      	ands	r0, r2
 8001b88:	60d8      	str	r0, [r3, #12]
 8001b8a:	4770      	bx	lr
 8001b8c:	50050000 	.word	0x50050000

08001b90 <DCMI_GetFlagStatus>:
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
  
  if (dcmireg == 0x00) /* The FLAG is in RISR register */
 8001b90:	0b02      	lsrs	r2, r0, #12
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <DCMI_GetFlagStatus+0x1c>)
 8001b94:	d101      	bne.n	8001b9a <DCMI_GetFlagStatus+0xa>
  {
    tempreg= DCMI->RISR;
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	e003      	b.n	8001ba2 <DCMI_GetFlagStatus+0x12>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 8001b9a:	2a02      	cmp	r2, #2
  {
    tempreg = DCMI->SR;
 8001b9c:	bf0c      	ite	eq
 8001b9e:	685b      	ldreq	r3, [r3, #4]
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 8001ba0:	691b      	ldrne	r3, [r3, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
  {
    bitstatus = SET;
 8001ba2:	4203      	tst	r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
}
 8001ba4:	bf0c      	ite	eq
 8001ba6:	2000      	moveq	r0, #0
 8001ba8:	2001      	movne	r0, #1
 8001baa:	4770      	bx	lr
 8001bac:	50050000 	.word	0x50050000

08001bb0 <DCMI_ClearFlag>:
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 8001bb0:	4b01      	ldr	r3, [pc, #4]	; (8001bb8 <DCMI_ClearFlag+0x8>)
 8001bb2:	6158      	str	r0, [r3, #20]
}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	50050000 	.word	0x50050000

08001bbc <DCMI_GetITStatus>:
  uint32_t itstatus = 0;
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <DCMI_GetITStatus+0x10>)
 8001bbe:	691b      	ldr	r3, [r3, #16]
  
  if ((itstatus != (uint16_t)RESET))
  {
    bitstatus = SET;
 8001bc0:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001bc2:	bf0c      	ite	eq
 8001bc4:	2000      	moveq	r0, #0
 8001bc6:	2001      	movne	r0, #1
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	50050000 	.word	0x50050000

08001bd0 <DCMI_ClearITPendingBit>:
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 8001bd0:	4b01      	ldr	r3, [pc, #4]	; (8001bd8 <DCMI_ClearITPendingBit+0x8>)
 8001bd2:	6158      	str	r0, [r3, #20]
}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	50050000 	.word	0x50050000

08001bdc <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8001bdc:	6803      	ldr	r3, [r0, #0]
 8001bde:	f023 0301 	bic.w	r3, r3, #1
 8001be2:	6003      	str	r3, [r0, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8001be8:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8001bea:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8001bec:	60c3      	str	r3, [r0, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8001bee:	6103      	str	r3, [r0, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8001bf0:	2321      	movs	r3, #33	; 0x21
 8001bf2:	6143      	str	r3, [r0, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8001bf4:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <DMA_DeInit+0xcc>)
 8001bf6:	4298      	cmp	r0, r3
 8001bf8:	d01c      	beq.n	8001c34 <DMA_DeInit+0x58>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8001bfa:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <DMA_DeInit+0xd0>)
 8001bfc:	4298      	cmp	r0, r3
 8001bfe:	d020      	beq.n	8001c42 <DMA_DeInit+0x66>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8001c00:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <DMA_DeInit+0xd4>)
 8001c02:	4298      	cmp	r0, r3
 8001c04:	d025      	beq.n	8001c52 <DMA_DeInit+0x76>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8001c06:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <DMA_DeInit+0xd8>)
 8001c08:	4298      	cmp	r0, r3
 8001c0a:	d02a      	beq.n	8001c62 <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8001c0c:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <DMA_DeInit+0xdc>)
 8001c0e:	4298      	cmp	r0, r3
 8001c10:	d02f      	beq.n	8001c72 <DMA_DeInit+0x96>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8001c12:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <DMA_DeInit+0xe0>)
 8001c14:	4298      	cmp	r0, r3
 8001c16:	d033      	beq.n	8001c80 <DMA_DeInit+0xa4>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8001c18:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <DMA_DeInit+0xe4>)
 8001c1a:	4298      	cmp	r0, r3
 8001c1c:	d037      	beq.n	8001c8e <DMA_DeInit+0xb2>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <DMA_DeInit+0xe8>)
 8001c20:	4298      	cmp	r0, r3
 8001c22:	d104      	bne.n	8001c2e <DMA_DeInit+0x52>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8001c24:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8001c28:	f843 2cac 	str.w	r2, [r3, #-172]
 8001c2c:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8001c2e:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <DMA_DeInit+0xec>)
 8001c30:	4298      	cmp	r0, r3
 8001c32:	d103      	bne.n	8001c3c <DMA_DeInit+0x60>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8001c34:	223d      	movs	r2, #61	; 0x3d
 8001c36:	f843 2c08 	str.w	r2, [r3, #-8]
 8001c3a:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8001c3c:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <DMA_DeInit+0xf0>)
 8001c3e:	4298      	cmp	r0, r3
 8001c40:	d104      	bne.n	8001c4c <DMA_DeInit+0x70>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8001c42:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8001c46:	f843 2c20 	str.w	r2, [r3, #-32]
 8001c4a:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8001c4c:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <DMA_DeInit+0xf4>)
 8001c4e:	4298      	cmp	r0, r3
 8001c50:	d104      	bne.n	8001c5c <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8001c52:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001c56:	f843 2c38 	str.w	r2, [r3, #-56]
 8001c5a:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <DMA_DeInit+0xf8>)
 8001c5e:	4298      	cmp	r0, r3
 8001c60:	d104      	bne.n	8001c6c <DMA_DeInit+0x90>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8001c62:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8001c66:	f843 2c50 	str.w	r2, [r3, #-80]
 8001c6a:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <DMA_DeInit+0xfc>)
 8001c6e:	4298      	cmp	r0, r3
 8001c70:	d103      	bne.n	8001c7a <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8001c72:	4a1a      	ldr	r2, [pc, #104]	; (8001cdc <DMA_DeInit+0x100>)
 8001c74:	f843 2c64 	str.w	r2, [r3, #-100]
 8001c78:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <DMA_DeInit+0x104>)
 8001c7c:	4298      	cmp	r0, r3
 8001c7e:	d103      	bne.n	8001c88 <DMA_DeInit+0xac>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8001c80:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <DMA_DeInit+0x108>)
 8001c82:	f843 2c7c 	str.w	r2, [r3, #-124]
 8001c86:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <DMA_DeInit+0x10c>)
 8001c8a:	4298      	cmp	r0, r3
 8001c8c:	d103      	bne.n	8001c96 <DMA_DeInit+0xba>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8001c8e:	4a17      	ldr	r2, [pc, #92]	; (8001cec <DMA_DeInit+0x110>)
 8001c90:	f843 2c94 	str.w	r2, [r3, #-148]
 8001c94:	4770      	bx	lr
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <DMA_DeInit+0x114>)
 8001c98:	4298      	cmp	r0, r3
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8001c9a:	bf04      	itt	eq
 8001c9c:	f04f 523d 	moveq.w	r2, #792723456	; 0x2f400000
 8001ca0:	f843 2cac 	streq.w	r2, [r3, #-172]
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40026010 	.word	0x40026010
 8001cac:	40026028 	.word	0x40026028
 8001cb0:	40026040 	.word	0x40026040
 8001cb4:	40026058 	.word	0x40026058
 8001cb8:	40026070 	.word	0x40026070
 8001cbc:	40026088 	.word	0x40026088
 8001cc0:	400260a0 	.word	0x400260a0
 8001cc4:	400260b8 	.word	0x400260b8
 8001cc8:	40026410 	.word	0x40026410
 8001ccc:	40026428 	.word	0x40026428
 8001cd0:	40026440 	.word	0x40026440
 8001cd4:	40026458 	.word	0x40026458
 8001cd8:	40026470 	.word	0x40026470
 8001cdc:	2000003d 	.word	0x2000003d
 8001ce0:	40026488 	.word	0x40026488
 8001ce4:	20000f40 	.word	0x20000f40
 8001ce8:	400264a0 	.word	0x400264a0
 8001cec:	203d0000 	.word	0x203d0000
 8001cf0:	400264b8 	.word	0x400264b8

08001cf4 <DMA_Init>:
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8001cf4:	6802      	ldr	r2, [r0, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <DMA_Init+0x50>)
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001cf8:	b510      	push	{r4, lr}
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cfa:	4013      	ands	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001cfc:	68cc      	ldr	r4, [r1, #12]
 8001cfe:	680a      	ldr	r2, [r1, #0]
 8001d00:	4322      	orrs	r2, r4
 8001d02:	694c      	ldr	r4, [r1, #20]
 8001d04:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001d06:	698c      	ldr	r4, [r1, #24]
 8001d08:	4322      	orrs	r2, r4
 8001d0a:	69cc      	ldr	r4, [r1, #28]
 8001d0c:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001d0e:	6a0c      	ldr	r4, [r1, #32]
 8001d10:	4322      	orrs	r2, r4
 8001d12:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8001d14:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001d16:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8001d18:	4322      	orrs	r2, r4
 8001d1a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8001d1c:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001d1e:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8001d20:	4322      	orrs	r2, r4
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001d22:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8001d24:	6003      	str	r3, [r0, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8001d26:	6942      	ldr	r2, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001d28:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8001d2a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d2c:	f022 0207 	bic.w	r2, r2, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001d30:	4323      	orrs	r3, r4
 8001d32:	4313      	orrs	r3, r2

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8001d34:	6143      	str	r3, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8001d36:	690b      	ldr	r3, [r1, #16]
 8001d38:	6043      	str	r3, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8001d3a:	684b      	ldr	r3, [r1, #4]
 8001d3c:	6083      	str	r3, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8001d3e:	688b      	ldr	r3, [r1, #8]
 8001d40:	60c3      	str	r3, [r0, #12]
}
 8001d42:	bd10      	pop	{r4, pc}
 8001d44:	f01c803f 	.word	0xf01c803f

08001d48 <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	6003      	str	r3, [r0, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8001d4c:	6043      	str	r3, [r0, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8001d4e:	6083      	str	r3, [r0, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8001d50:	60c3      	str	r3, [r0, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8001d52:	6103      	str	r3, [r0, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001d54:	6143      	str	r3, [r0, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8001d56:	6183      	str	r3, [r0, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001d58:	61c3      	str	r3, [r0, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001d5a:	6203      	str	r3, [r0, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8001d5c:	6243      	str	r3, [r0, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001d5e:	6283      	str	r3, [r0, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8001d60:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8001d62:	6303      	str	r3, [r0, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001d64:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001d66:	6383      	str	r3, [r0, #56]	; 0x38
}
 8001d68:	4770      	bx	lr

08001d6a <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8001d6a:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001d6c:	b111      	cbz	r1, 8001d74 <DMA_Cmd+0xa>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	e001      	b.n	8001d78 <DMA_Cmd+0xe>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	6003      	str	r3, [r0, #0]
 8001d7a:	4770      	bx	lr

08001d7c <DMA_PeriphIncOffsetSizeConfig>:

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8001d7c:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 8001d7e:	b111      	cbz	r1, 8001d86 <DMA_PeriphIncOffsetSizeConfig+0xa>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8001d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d84:	e001      	b.n	8001d8a <DMA_PeriphIncOffsetSizeConfig+0xe>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 8001d86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d8a:	6003      	str	r3, [r0, #0]
 8001d8c:	4770      	bx	lr

08001d8e <DMA_FlowControllerConfig>:

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8001d8e:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8001d90:	b111      	cbz	r1, 8001d98 <DMA_FlowControllerConfig+0xa>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8001d92:	f043 0320 	orr.w	r3, r3, #32
 8001d96:	e001      	b.n	8001d9c <DMA_FlowControllerConfig+0xe>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 8001d98:	f023 0320 	bic.w	r3, r3, #32
 8001d9c:	6003      	str	r3, [r0, #0]
 8001d9e:	4770      	bx	lr

08001da0 <DMA_SetCurrDataCounter>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8001da0:	6041      	str	r1, [r0, #4]
}
 8001da2:	4770      	bx	lr

08001da4 <DMA_GetCurrDataCounter>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8001da4:	6840      	ldr	r0, [r0, #4]
}
 8001da6:	b280      	uxth	r0, r0
 8001da8:	4770      	bx	lr

08001daa <DMA_DoubleBufferModeConfig>:
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8001daa:	6803      	ldr	r3, [r0, #0]
{  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8001dac:	b112      	cbz	r2, 8001db4 <DMA_DoubleBufferModeConfig+0xa>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8001dae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001db2:	e001      	b.n	8001db8 <DMA_DoubleBufferModeConfig+0xe>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8001db4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001db8:	6003      	str	r3, [r0, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8001dba:	6101      	str	r1, [r0, #16]
}
 8001dbc:	4770      	bx	lr

08001dbe <DMA_DoubleBufferModeCmd>:

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8001dbe:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8001dc0:	b111      	cbz	r1, 8001dc8 <DMA_DoubleBufferModeCmd+0xa>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8001dc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc6:	e001      	b.n	8001dcc <DMA_DoubleBufferModeCmd+0xe>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8001dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dcc:	6003      	str	r3, [r0, #0]
 8001dce:	4770      	bx	lr

08001dd0 <DMA_MemoryTargetConfig>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8001dd0:	b10a      	cbz	r2, 8001dd6 <DMA_MemoryTargetConfig+0x6>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 8001dd2:	6101      	str	r1, [r0, #16]
 8001dd4:	4770      	bx	lr
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8001dd6:	60c1      	str	r1, [r0, #12]
 8001dd8:	4770      	bx	lr

08001dda <DMA_GetCurrentMemoryTarget>:
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8001dda:	6800      	ldr	r0, [r0, #0]
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
  }
  return tmp;
}
 8001ddc:	f3c0 40c0 	ubfx	r0, r0, #19, #1
 8001de0:	4770      	bx	lr

08001de2 <DMA_GetCmdStatus>:
  FunctionalState state = DISABLE;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8001de2:	6800      	ldr	r0, [r0, #0]
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
  }
  return state;
}
 8001de4:	f000 0001 	and.w	r0, r0, #1
 8001de8:	4770      	bx	lr

08001dea <DMA_GetFIFOStatus>:
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 8001dea:	6940      	ldr	r0, [r0, #20]
  
  return tmpreg;
}
 8001dec:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8001df0:	4770      	bx	lr

08001df2 <DMA_GetFlagStatus>:

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <DMA_GetFlagStatus+0x2a>)
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <DMA_GetFlagStatus+0x2e>)
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001df6:	b510      	push	{r4, lr}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001df8:	4c0a      	ldr	r4, [pc, #40]	; (8001e24 <DMA_GetFlagStatus+0x32>)
 8001dfa:	42a0      	cmp	r0, r4
 8001dfc:	bf88      	it	hi
 8001dfe:	4613      	movhi	r3, r2
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001e00:	008a      	lsls	r2, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8001e02:	bf4c      	ite	mi
 8001e04:	685b      	ldrmi	r3, [r3, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8001e06:	681b      	ldrpl	r3, [r3, #0]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001e08:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 8001e0c:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8001e10:	4219      	tst	r1, r3
    bitstatus = RESET;
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
}
 8001e12:	bf0c      	ite	eq
 8001e14:	2000      	moveq	r0, #0
 8001e16:	2001      	movne	r0, #1
 8001e18:	bd10      	pop	{r4, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40026400 	.word	0x40026400
 8001e20:	40026000 	.word	0x40026000
 8001e24:	4002640f 	.word	0x4002640f

08001e28 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001e28:	b510      	push	{r4, lr}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <DMA_ClearFlag+0x24>)
 8001e2c:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <DMA_ClearFlag+0x28>)
 8001e2e:	4c09      	ldr	r4, [pc, #36]	; (8001e54 <DMA_ClearFlag+0x2c>)
 8001e30:	42a0      	cmp	r0, r4
 8001e32:	bf88      	it	hi
 8001e34:	4613      	movhi	r3, r2
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001e36:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 8001e3a:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 8001e3e:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001e42:	bf14      	ite	ne
 8001e44:	60d9      	strne	r1, [r3, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001e46:	6099      	streq	r1, [r3, #8]
 8001e48:	bd10      	pop	{r4, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40026000 	.word	0x40026000
 8001e50:	40026400 	.word	0x40026400
 8001e54:	4002640f 	.word	0x4002640f

08001e58 <DMA_ITConfig>:
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8001e58:	060b      	lsls	r3, r1, #24
 8001e5a:	d507      	bpl.n	8001e6c <DMA_ITConfig+0x14>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8001e5c:	6943      	ldr	r3, [r0, #20]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
 8001e5e:	b112      	cbz	r2, 8001e66 <DMA_ITConfig+0xe>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8001e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e64:	e001      	b.n	8001e6a <DMA_ITConfig+0x12>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8001e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e6a:	6143      	str	r3, [r0, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8001e6c:	2980      	cmp	r1, #128	; 0x80
 8001e6e:	d009      	beq.n	8001e84 <DMA_ITConfig+0x2c>
 8001e70:	f001 011e 	and.w	r1, r1, #30
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8001e74:	6803      	ldr	r3, [r0, #0]
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
  {
    if (NewState != DISABLE)
 8001e76:	b112      	cbz	r2, 8001e7e <DMA_ITConfig+0x26>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8001e78:	4319      	orrs	r1, r3
 8001e7a:	6001      	str	r1, [r0, #0]
 8001e7c:	4770      	bx	lr
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8001e7e:	ea23 0101 	bic.w	r1, r3, r1
 8001e82:	6001      	str	r1, [r0, #0]
 8001e84:	4770      	bx	lr

08001e86 <DMA_GetITStatus>:
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <DMA_GetITStatus+0x4a>)
 8001e88:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <DMA_GetITStatus+0x4e>)
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8001e8a:	b510      	push	{r4, lr}
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001e8c:	4c12      	ldr	r4, [pc, #72]	; (8001ed8 <DMA_GetITStatus+0x52>)
 8001e8e:	42a0      	cmp	r0, r4
 8001e90:	bf8c      	ite	hi
 8001e92:	4614      	movhi	r4, r2
 8001e94:	461c      	movls	r4, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8001e96:	f021 23f0 	bic.w	r3, r1, #4026593280	; 0xf000f000
 8001e9a:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8001e9e:	b12b      	cbz	r3, 8001eac <DMA_GetITStatus+0x26>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8001ea0:	6802      	ldr	r2, [r0, #0]

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8001ea2:	f002 021e 	and.w	r2, r2, #30
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8001ea6:	ea02 22d1 	and.w	r2, r2, r1, lsr #11
 8001eaa:	e002      	b.n	8001eb2 <DMA_GetITStatus+0x2c>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8001eac:	6942      	ldr	r2, [r0, #20]
 8001eae:	f002 0280 	and.w	r2, r2, #128	; 0x80
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001eb2:	0088      	lsls	r0, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8001eb4:	bf4c      	ite	mi
 8001eb6:	6863      	ldrmi	r3, [r4, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8001eb8:	6823      	ldrpl	r3, [r4, #0]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001eba:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 8001ebe:	f021 1082 	bic.w	r0, r1, #8519810	; 0x820082

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8001ec2:	4018      	ands	r0, r3
 8001ec4:	d002      	beq.n	8001ecc <DMA_GetITStatus+0x46>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8001ec6:	1c10      	adds	r0, r2, #0
 8001ec8:	bf18      	it	ne
 8001eca:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the DMA_IT status */
  return  bitstatus;
}
 8001ecc:	bd10      	pop	{r4, pc}
 8001ece:	bf00      	nop
 8001ed0:	40026000 	.word	0x40026000
 8001ed4:	40026400 	.word	0x40026400
 8001ed8:	4002640f 	.word	0x4002640f

08001edc <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8001edc:	b510      	push	{r4, lr}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <DMA_ClearITPendingBit+0x24>)
 8001ee0:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <DMA_ClearITPendingBit+0x28>)
 8001ee2:	4c09      	ldr	r4, [pc, #36]	; (8001f08 <DMA_ClearITPendingBit+0x2c>)
 8001ee4:	42a0      	cmp	r0, r4
 8001ee6:	bf88      	it	hi
 8001ee8:	4613      	movhi	r3, r2
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001eea:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 8001eee:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 8001ef2:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8001ef6:	bf14      	ite	ne
 8001ef8:	60d9      	strne	r1, [r3, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8001efa:	6099      	streq	r1, [r3, #8]
 8001efc:	bd10      	pop	{r4, pc}
 8001efe:	bf00      	nop
 8001f00:	40026000 	.word	0x40026000
 8001f04:	40026400 	.word	0x40026400
 8001f08:	4002640f 	.word	0x4002640f

08001f0c <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <EXTI_DeInit+0x14>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8001f12:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8001f14:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8001f16:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8001f18:	4a02      	ldr	r2, [pc, #8]	; (8001f24 <EXTI_DeInit+0x18>)
 8001f1a:	615a      	str	r2, [r3, #20]
}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40013c00 	.word	0x40013c00
 8001f24:	007fffff 	.word	0x007fffff

08001f28 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001f28:	7983      	ldrb	r3, [r0, #6]
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8001f2a:	b510      	push	{r4, lr}
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d029      	beq.n	8001f84 <EXTI_Init+0x5c>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <EXTI_Init+0x74>)
 8001f32:	6801      	ldr	r1, [r0, #0]
 8001f34:	681c      	ldr	r4, [r3, #0]
 8001f36:	43ca      	mvns	r2, r1
 8001f38:	4014      	ands	r4, r2
 8001f3a:	601c      	str	r4, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001f3c:	685c      	ldr	r4, [r3, #4]
 8001f3e:	4022      	ands	r2, r4
 8001f40:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001f42:	7902      	ldrb	r2, [r0, #4]
 8001f44:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001f48:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001f4c:	6814      	ldr	r4, [r2, #0]
 8001f4e:	4321      	orrs	r1, r4
 8001f50:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001f52:	6802      	ldr	r2, [r0, #0]
 8001f54:	689c      	ldr	r4, [r3, #8]
 8001f56:	43d1      	mvns	r1, r2
 8001f58:	400c      	ands	r4, r1
 8001f5a:	609c      	str	r4, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001f5c:	68dc      	ldr	r4, [r3, #12]
 8001f5e:	4021      	ands	r1, r4
 8001f60:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001f62:	7941      	ldrb	r1, [r0, #5]
 8001f64:	2910      	cmp	r1, #16
 8001f66:	d106      	bne.n	8001f76 <EXTI_Init+0x4e>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8001f68:	6899      	ldr	r1, [r3, #8]
 8001f6a:	4311      	orrs	r1, r2
 8001f6c:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001f6e:	68d9      	ldr	r1, [r3, #12]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	bd10      	pop	{r4, pc}
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8001f76:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8001f7a:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001f7e:	6819      	ldr	r1, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	e008      	b.n	8001f96 <EXTI_Init+0x6e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001f84:	7903      	ldrb	r3, [r0, #4]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8001f86:	6801      	ldr	r1, [r0, #0]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001f88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f8c:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	ea22 0201 	bic.w	r2, r2, r1
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	bd10      	pop	{r4, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40013c00 	.word	0x40013c00

08001fa0 <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8001fa0:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8001fa2:	220c      	movs	r2, #12
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8001fa4:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8001fa6:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8001fa8:	7142      	strb	r2, [r0, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8001faa:	7183      	strb	r3, [r0, #6]
}
 8001fac:	4770      	bx	lr

08001fae <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8001fae:	4b02      	ldr	r3, [pc, #8]	; (8001fb8 <EXTI_GenerateSWInterrupt+0xa>)
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	4302      	orrs	r2, r0
 8001fb4:	611a      	str	r2, [r3, #16]
}
 8001fb6:	4770      	bx	lr
 8001fb8:	40013c00 	.word	0x40013c00

08001fbc <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <EXTI_GetFlagStatus+0x10>)
 8001fbe:	695b      	ldr	r3, [r3, #20]
  {
    bitstatus = SET;
 8001fc0:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2000      	moveq	r0, #0
 8001fc6:	2001      	movne	r0, #1
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40013c00 	.word	0x40013c00

08001fd0 <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001fd0:	4b01      	ldr	r3, [pc, #4]	; (8001fd8 <EXTI_ClearFlag+0x8>)
 8001fd2:	6158      	str	r0, [r3, #20]
}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40013c00 	.word	0x40013c00

08001fdc <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <EXTI_GetITStatus+0x18>)
 8001fde:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	4003      	ands	r3, r0
 8001fe4:	d004      	beq.n	8001ff0 <EXTI_GetITStatus+0x14>
  {
    bitstatus = SET;
 8001fe6:	4210      	tst	r0, r2
 8001fe8:	bf0c      	ite	eq
 8001fea:	2000      	moveq	r0, #0
 8001fec:	2001      	movne	r0, #1
 8001fee:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 8001ff0:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 8001ff2:	4770      	bx	lr
 8001ff4:	40013c00 	.word	0x40013c00

08001ff8 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001ff8:	4b01      	ldr	r3, [pc, #4]	; (8002000 <EXTI_ClearITPendingBit+0x8>)
 8001ffa:	6158      	str	r0, [r3, #20]
}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40013c00 	.word	0x40013c00

08002004 <FLASH_SetLatency>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 8002004:	4b01      	ldr	r3, [pc, #4]	; (800200c <FLASH_SetLatency+0x8>)
 8002006:	b2c0      	uxtb	r0, r0
 8002008:	7018      	strb	r0, [r3, #0]
}
 800200a:	4770      	bx	lr
 800200c:	40023c00 	.word	0x40023c00

08002010 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <FLASH_PrefetchBufferCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8002012:	681a      	ldr	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 8002014:	b110      	cbz	r0, 800201c <FLASH_PrefetchBufferCmd+0xc>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8002016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800201a:	e001      	b.n	8002020 <FLASH_PrefetchBufferCmd+0x10>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 800201c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	4770      	bx	lr
 8002024:	40023c00 	.word	0x40023c00

08002028 <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <FLASH_InstructionCacheCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 800202a:	681a      	ldr	r2, [r3, #0]
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800202c:	b110      	cbz	r0, 8002034 <FLASH_InstructionCacheCmd+0xc>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 800202e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002032:	e001      	b.n	8002038 <FLASH_InstructionCacheCmd+0x10>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 8002034:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	4770      	bx	lr
 800203c:	40023c00 	.word	0x40023c00

08002040 <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <FLASH_DataCacheCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 8002042:	681a      	ldr	r2, [r3, #0]
void FLASH_DataCacheCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8002044:	b110      	cbz	r0, 800204c <FLASH_DataCacheCmd+0xc>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 8002046:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800204a:	e001      	b.n	8002050 <FLASH_DataCacheCmd+0x10>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 800204c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	4770      	bx	lr
 8002054:	40023c00 	.word	0x40023c00

08002058 <FLASH_InstructionCacheReset>:
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
  FLASH->ACR |= FLASH_ACR_ICRST;
 8002058:	4b02      	ldr	r3, [pc, #8]	; (8002064 <FLASH_InstructionCacheReset+0xc>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002060:	601a      	str	r2, [r3, #0]
}
 8002062:	4770      	bx	lr
 8002064:	40023c00 	.word	0x40023c00

08002068 <FLASH_DataCacheReset>:
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
  FLASH->ACR |= FLASH_ACR_DCRST;
 8002068:	4b02      	ldr	r3, [pc, #8]	; (8002074 <FLASH_DataCacheReset+0xc>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002070:	601a      	str	r2, [r3, #0]
}
 8002072:	4770      	bx	lr
 8002074:	40023c00 	.word	0x40023c00

08002078 <FLASH_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <FLASH_Unlock+0x14>)
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	2a00      	cmp	r2, #0
 800207e:	da04      	bge.n	800208a <FLASH_Unlock+0x12>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8002080:	4a03      	ldr	r2, [pc, #12]	; (8002090 <FLASH_Unlock+0x18>)
 8002082:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8002084:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	4770      	bx	lr
 800208c:	40023c00 	.word	0x40023c00
 8002090:	45670123 	.word	0x45670123

08002094 <FLASH_Lock>:
  * @retval None
  */
void FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002094:	4b02      	ldr	r3, [pc, #8]	; (80020a0 <FLASH_Lock+0xc>)
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800209c:	611a      	str	r2, [r3, #16]
}
 800209e:	4770      	bx	lr
 80020a0:	40023c00 	.word	0x40023c00

080020a4 <FLASH_OB_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <FLASH_OB_Unlock+0x14>)
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	07d2      	lsls	r2, r2, #31
 80020aa:	d504      	bpl.n	80020b6 <FLASH_OB_Unlock+0x12>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80020ac:	4a03      	ldr	r2, [pc, #12]	; (80020bc <FLASH_OB_Unlock+0x18>)
 80020ae:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80020b0:	f102 3244 	add.w	r2, r2, #1145324612	; 0x44444444
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	4770      	bx	lr
 80020b8:	40023c00 	.word	0x40023c00
 80020bc:	08192a3b 	.word	0x08192a3b

080020c0 <FLASH_OB_Lock>:
  * @retval None
  */
void FLASH_OB_Lock(void)
{
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80020c0:	4b02      	ldr	r3, [pc, #8]	; (80020cc <FLASH_OB_Lock+0xc>)
 80020c2:	695a      	ldr	r2, [r3, #20]
 80020c4:	f042 0201 	orr.w	r2, r2, #1
 80020c8:	615a      	str	r2, [r3, #20]
}
 80020ca:	4770      	bx	lr
 80020cc:	40023c00 	.word	0x40023c00

080020d0 <FLASH_OB_BORConfig>:
{
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <FLASH_OB_BORConfig+0x14>)
 80020d2:	781a      	ldrb	r2, [r3, #0]
 80020d4:	f002 02f3 	and.w	r2, r2, #243	; 0xf3
 80020d8:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	4302      	orrs	r2, r0
 80020de:	701a      	strb	r2, [r3, #0]

}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40023c14 	.word	0x40023c14

080020e8 <FLASH_OB_GetUser>:
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 80020e8:	4b02      	ldr	r3, [pc, #8]	; (80020f4 <FLASH_OB_GetUser+0xc>)
 80020ea:	6958      	ldr	r0, [r3, #20]
}
 80020ec:	f3c0 1047 	ubfx	r0, r0, #5, #8
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40023c00 	.word	0x40023c00

080020f8 <FLASH_OB_GetWRP>:
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80020f8:	4b01      	ldr	r3, [pc, #4]	; (8002100 <FLASH_OB_GetWRP+0x8>)
 80020fa:	8818      	ldrh	r0, [r3, #0]
}
 80020fc:	b280      	uxth	r0, r0
 80020fe:	4770      	bx	lr
 8002100:	40023c16 	.word	0x40023c16

08002104 <FLASH_OB_GetRDP>:
  */
FlagStatus FLASH_OB_GetRDP(void)
{
  FlagStatus readstatus = RESET;

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 8002104:	4b02      	ldr	r3, [pc, #8]	; (8002110 <FLASH_OB_GetRDP+0xc>)
 8002106:	7818      	ldrb	r0, [r3, #0]
  else
  {
    readstatus = RESET;
  }
  return readstatus;
}
 8002108:	38aa      	subs	r0, #170	; 0xaa
 800210a:	bf18      	it	ne
 800210c:	2001      	movne	r0, #1
 800210e:	4770      	bx	lr
 8002110:	40023c15 	.word	0x40023c15

08002114 <FLASH_OB_GetBOR>:
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002114:	4b02      	ldr	r3, [pc, #8]	; (8002120 <FLASH_OB_GetBOR+0xc>)
 8002116:	7818      	ldrb	r0, [r3, #0]
}
 8002118:	f000 000c 	and.w	r0, r0, #12
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40023c14 	.word	0x40023c14

08002124 <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <FLASH_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8002126:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8002128:	b109      	cbz	r1, 800212e <FLASH_ITConfig+0xa>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 800212a:	4310      	orrs	r0, r2
 800212c:	e001      	b.n	8002132 <FLASH_ITConfig+0xe>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 800212e:	ea22 0000 	bic.w	r0, r2, r0
 8002132:	6118      	str	r0, [r3, #16]
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40023c00 	.word	0x40023c00

0800213c <FLASH_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <FLASH_GetFlagStatus+0x10>)
 800213e:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8002140:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
}
 8002142:	bf0c      	ite	eq
 8002144:	2000      	moveq	r0, #0
 8002146:	2001      	movne	r0, #1
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40023c00 	.word	0x40023c00

08002150 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8002150:	4b01      	ldr	r3, [pc, #4]	; (8002158 <FLASH_ClearFlag+0x8>)
 8002152:	60d8      	str	r0, [r3, #12]
}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40023c00 	.word	0x40023c00

0800215c <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <FLASH_GetStatus+0x30>)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	03d0      	lsls	r0, r2, #15
 8002162:	d40d      	bmi.n	8002180 <FLASH_GetStatus+0x24>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	06d1      	lsls	r1, r2, #27
 8002168:	d40c      	bmi.n	8002184 <FLASH_GetStatus+0x28>
    { 
      flashstatus = FLASH_ERROR_WRP;
    }
    else 
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	f012 0fef 	tst.w	r2, #239	; 0xef
 8002170:	d10a      	bne.n	8002188 <FLASH_GetStatus+0x2c>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f013 0f02 	tst.w	r3, #2
        {
          flashstatus = FLASH_ERROR_OPERATION;
 8002178:	bf0c      	ite	eq
 800217a:	2008      	moveq	r0, #8
 800217c:	2007      	movne	r0, #7
 800217e:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 8002180:	2001      	movs	r0, #1
 8002182:	4770      	bx	lr
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
    { 
      flashstatus = FLASH_ERROR_WRP;
 8002184:	2005      	movs	r0, #5
 8002186:	4770      	bx	lr
    }
    else 
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 8002188:	2006      	movs	r0, #6
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
}
 800218a:	4770      	bx	lr
 800218c:	40023c00 	.word	0x40023c00

08002190 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8002190:	b507      	push	{r0, r1, r2, lr}
  __IO FLASH_Status status = FLASH_COMPLETE;
 8002192:	2308      	movs	r3, #8
 8002194:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
  {
    status = FLASH_GetStatus();
 8002198:	f7ff ffe0 	bl	800215c <FLASH_GetStatus>
 800219c:	f88d 0007 	strb.w	r0, [sp, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 80021a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d0f7      	beq.n	8002198 <FLASH_WaitForLastOperation+0x8>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 80021a8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80021ac:	bd0e      	pop	{r1, r2, r3, pc}

080021ae <FLASH_OB_Launch>:
FLASH_Status FLASH_OB_Launch(void)
{
  FLASH_Status status = FLASH_COMPLETE;

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 80021ae:	4b03      	ldr	r3, [pc, #12]	; (80021bc <FLASH_OB_Launch+0xe>)
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	f042 0202 	orr.w	r2, r2, #2
 80021b6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80021b8:	e7ea      	b.n	8002190 <FLASH_WaitForLastOperation>
 80021ba:	bf00      	nop
 80021bc:	40023c14 	.word	0x40023c14

080021c0 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 80021c0:	b570      	push	{r4, r5, r6, lr}
 80021c2:	4604      	mov	r4, r0
 80021c4:	460d      	mov	r5, r1
 80021c6:	4616      	mov	r6, r2
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80021c8:	f7ff ffe2 	bl	8002190 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80021cc:	2808      	cmp	r0, #8
 80021ce:	d107      	bne.n	80021e0 <FLASH_OB_UserConfig+0x20>
  { 
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <FLASH_OB_UserConfig+0x24>)
 80021d2:	781a      	ldrb	r2, [r3, #0]
 80021d4:	f002 020f 	and.w	r2, r2, #15

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 80021d8:	4314      	orrs	r4, r2
 80021da:	4325      	orrs	r5, r4
 80021dc:	432e      	orrs	r6, r5
 80021de:	701e      	strb	r6, [r3, #0]
 80021e0:	bd70      	pop	{r4, r5, r6, pc}
 80021e2:	bf00      	nop
 80021e4:	40023c14 	.word	0x40023c14

080021e8 <FLASH_OB_RDPConfig>:
  * !!!Warning!!! When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 80021e8:	b510      	push	{r4, lr}
 80021ea:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 80021ec:	f7ff ffd0 	bl	8002190 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 80021f0:	2808      	cmp	r0, #8
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 80021f2:	bf04      	itt	eq
 80021f4:	4b01      	ldreq	r3, [pc, #4]	; (80021fc <FLASH_OB_RDPConfig+0x14>)
 80021f6:	701c      	strbeq	r4, [r3, #0]
 80021f8:	bd10      	pop	{r4, pc}
 80021fa:	bf00      	nop
 80021fc:	40023c15 	.word	0x40023c15

08002200 <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 8002200:	b538      	push	{r3, r4, r5, lr}
 8002202:	4604      	mov	r4, r0
 8002204:	460d      	mov	r5, r1
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 8002206:	f7ff ffc3 	bl	8002190 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 800220a:	2808      	cmp	r0, #8
 800220c:	d10a      	bne.n	8002224 <FLASH_OB_WRPConfig+0x24>
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <FLASH_OB_WRPConfig+0x28>)
  { 
    if(NewState != DISABLE)
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 8002210:	881a      	ldrh	r2, [r3, #0]
    
  status = FLASH_WaitForLastOperation();

  if(status == FLASH_COMPLETE)
  { 
    if(NewState != DISABLE)
 8002212:	b125      	cbz	r5, 800221e <FLASH_OB_WRPConfig+0x1e>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 8002214:	b292      	uxth	r2, r2
 8002216:	ea22 0404 	bic.w	r4, r2, r4
 800221a:	801c      	strh	r4, [r3, #0]
 800221c:	bd38      	pop	{r3, r4, r5, pc}
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 800221e:	4314      	orrs	r4, r2
 8002220:	b2a4      	uxth	r4, r4
 8002222:	801c      	strh	r4, [r3, #0]
 8002224:	bd38      	pop	{r3, r4, r5, pc}
 8002226:	bf00      	nop
 8002228:	40023c16 	.word	0x40023c16

0800222c <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 800222c:	b570      	push	{r4, r5, r6, lr}
 800222e:	4604      	mov	r4, r0
 8002230:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8002232:	f7ff ffad 	bl	8002190 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8002236:	2808      	cmp	r0, #8
 8002238:	d111      	bne.n	800225e <FLASH_ProgramByte+0x32>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800223a:	4d09      	ldr	r5, [pc, #36]	; (8002260 <FLASH_ProgramByte+0x34>)
 800223c:	692b      	ldr	r3, [r5, #16]
 800223e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002242:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 8002244:	692b      	ldr	r3, [r5, #16]
 8002246:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_PG;
 8002248:	692b      	ldr	r3, [r5, #16]
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	612b      	str	r3, [r5, #16]
  
    *(__IO uint8_t*)Address = Data;
 8002250:	7026      	strb	r6, [r4, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8002252:	f7ff ff9d 	bl	8002190 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002256:	692b      	ldr	r3, [r5, #16]
 8002258:	f023 0301 	bic.w	r3, r3, #1
 800225c:	612b      	str	r3, [r5, #16]
  } 

  /* Return the Program Status */
  return status;
}
 800225e:	bd70      	pop	{r4, r5, r6, pc}
 8002260:	40023c00 	.word	0x40023c00

08002264 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	4604      	mov	r4, r0
 8002268:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800226a:	f7ff ff91 	bl	8002190 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800226e:	2808      	cmp	r0, #8
 8002270:	d113      	bne.n	800229a <FLASH_ProgramHalfWord+0x36>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8002272:	4d0a      	ldr	r5, [pc, #40]	; (800229c <FLASH_ProgramHalfWord+0x38>)
 8002274:	692b      	ldr	r3, [r5, #16]
 8002276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800227a:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800227c:	692b      	ldr	r3, [r5, #16]
 800227e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002282:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_PG;
 8002284:	692b      	ldr	r3, [r5, #16]
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	612b      	str	r3, [r5, #16]
  
    *(__IO uint16_t*)Address = Data;
 800228c:	8026      	strh	r6, [r4, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800228e:	f7ff ff7f 	bl	8002190 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002292:	692b      	ldr	r3, [r5, #16]
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	612b      	str	r3, [r5, #16]
  } 
  /* Return the Program Status */
  return status;
}
 800229a:	bd70      	pop	{r4, r5, r6, pc}
 800229c:	40023c00 	.word	0x40023c00

080022a0 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	4604      	mov	r4, r0
 80022a4:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80022a6:	f7ff ff73 	bl	8002190 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80022aa:	2808      	cmp	r0, #8
 80022ac:	d113      	bne.n	80022d6 <FLASH_ProgramWord+0x36>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80022ae:	4d0a      	ldr	r5, [pc, #40]	; (80022d8 <FLASH_ProgramWord+0x38>)
 80022b0:	692b      	ldr	r3, [r5, #16]
 80022b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b6:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 80022b8:	692b      	ldr	r3, [r5, #16]
 80022ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022be:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_PG;
 80022c0:	692b      	ldr	r3, [r5, #16]
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	612b      	str	r3, [r5, #16]
  
    *(__IO uint32_t*)Address = Data;
 80022c8:	6026      	str	r6, [r4, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80022ca:	f7ff ff61 	bl	8002190 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80022ce:	692b      	ldr	r3, [r5, #16]
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	612b      	str	r3, [r5, #16]
  } 
  /* Return the Program Status */
  return status;
}
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
 80022d8:	40023c00 	.word	0x40023c00

080022dc <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 80022dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022de:	4606      	mov	r6, r0
 80022e0:	4614      	mov	r4, r2
 80022e2:	461d      	mov	r5, r3

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80022e4:	f7ff ff54 	bl	8002190 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80022e8:	2808      	cmp	r0, #8
 80022ea:	d114      	bne.n	8002316 <FLASH_ProgramDoubleWord+0x3a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80022ec:	4f0a      	ldr	r7, [pc, #40]	; (8002318 <FLASH_ProgramDoubleWord+0x3c>)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f4:	613b      	str	r3, [r7, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80022fc:	613b      	str	r3, [r7, #16]
    FLASH->CR |= FLASH_CR_PG;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	613b      	str	r3, [r7, #16]
  
    *(__IO uint64_t*)Address = Data;
 8002306:	e9c6 4500 	strd	r4, r5, [r6]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800230a:	f7ff ff41 	bl	8002190 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	613b      	str	r3, [r7, #16]
  } 
  /* Return the Program Status */
  return status;
}
 8002316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002318:	40023c00 	.word	0x40023c00

0800231c <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 800231c:	b510      	push	{r4, lr}
 800231e:	4604      	mov	r4, r0
  uint32_t tmp_psize = 0x0;
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8002320:	f7ff ff36 	bl	8002190 <FLASH_WaitForLastOperation>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8002324:	b144      	cbz	r4, 8002338 <FLASH_EraseAllSectors+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == VoltageRange_2)
 8002326:	2c01      	cmp	r4, #1
 8002328:	d008      	beq.n	800233c <FLASH_EraseAllSectors+0x20>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == VoltageRange_3)
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800232a:	2c02      	cmp	r4, #2
 800232c:	bf14      	ite	ne
 800232e:	f44f 7340 	movne.w	r3, #768	; 0x300
 8002332:	f44f 7300 	moveq.w	r3, #512	; 0x200
 8002336:	e003      	b.n	8002340 <FLASH_EraseAllSectors+0x24>
  status = FLASH_WaitForLastOperation();
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002338:	4623      	mov	r3, r4
 800233a:	e001      	b.n	8002340 <FLASH_EraseAllSectors+0x24>
  }
  else if(VoltageRange == VoltageRange_2)
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800233c:	f44f 7380 	mov.w	r3, #256	; 0x100
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }  
  if(status == FLASH_COMPLETE)
 8002340:	2808      	cmp	r0, #8
 8002342:	d115      	bne.n	8002370 <FLASH_EraseAllSectors+0x54>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 8002344:	4c0b      	ldr	r4, [pc, #44]	; (8002374 <FLASH_EraseAllSectors+0x58>)
 8002346:	6922      	ldr	r2, [r4, #16]
 8002348:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800234c:	6122      	str	r2, [r4, #16]
     FLASH->CR |= tmp_psize;
 800234e:	6922      	ldr	r2, [r4, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	6123      	str	r3, [r4, #16]
     FLASH->CR |= FLASH_CR_MER;
 8002354:	6923      	ldr	r3, [r4, #16]
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	6123      	str	r3, [r4, #16]
     FLASH->CR |= FLASH_CR_STRT;
 800235c:	6923      	ldr	r3, [r4, #16]
 800235e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002362:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8002364:	f7ff ff14 	bl	8002190 <FLASH_WaitForLastOperation>

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER);
 8002368:	6923      	ldr	r3, [r4, #16]
 800236a:	f023 0304 	bic.w	r3, r3, #4
 800236e:	6123      	str	r3, [r4, #16]

  }   
  /* Return the Erase Status */
  return status;
}
 8002370:	bd10      	pop	{r4, pc}
 8002372:	bf00      	nop
 8002374:	40023c00 	.word	0x40023c00

08002378 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8002378:	b570      	push	{r4, r5, r6, lr}
 800237a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800237c:	b141      	cbz	r1, 8002390 <FLASH_EraseSector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == VoltageRange_2)
 800237e:	2901      	cmp	r1, #1
 8002380:	d008      	beq.n	8002394 <FLASH_EraseSector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == VoltageRange_3)
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002382:	2902      	cmp	r1, #2
 8002384:	bf14      	ite	ne
 8002386:	f44f 7640 	movne.w	r6, #768	; 0x300
 800238a:	f44f 7600 	moveq.w	r6, #512	; 0x200
 800238e:	e003      	b.n	8002398 <FLASH_EraseSector+0x20>
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002390:	460e      	mov	r6, r1
 8002392:	e001      	b.n	8002398 <FLASH_EraseSector+0x20>
  }
  else if(VoltageRange == VoltageRange_2)
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002394:	f44f 7680 	mov.w	r6, #256	; 0x100
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8002398:	f7ff fefa 	bl	8002190 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800239c:	2808      	cmp	r0, #8
 800239e:	d11e      	bne.n	80023de <FLASH_EraseSector+0x66>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 80023a0:	4d0f      	ldr	r5, [pc, #60]	; (80023e0 <FLASH_EraseSector+0x68>)
 80023a2:	692b      	ldr	r3, [r5, #16]
 80023a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a8:	612b      	str	r3, [r5, #16]
    FLASH->CR |= tmp_psize;
 80023aa:	692b      	ldr	r3, [r5, #16]
 80023ac:	431e      	orrs	r6, r3
 80023ae:	612e      	str	r6, [r5, #16]
    FLASH->CR &= SECTOR_MASK;
 80023b0:	692b      	ldr	r3, [r5, #16]
 80023b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023b6:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 80023b8:	692b      	ldr	r3, [r5, #16]
 80023ba:	f043 0302 	orr.w	r3, r3, #2
 80023be:	431c      	orrs	r4, r3
 80023c0:	612c      	str	r4, [r5, #16]
    FLASH->CR |= FLASH_CR_STRT;
 80023c2:	692b      	ldr	r3, [r5, #16]
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c8:	612b      	str	r3, [r5, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80023ca:	f7ff fee1 	bl	8002190 <FLASH_WaitForLastOperation>
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 80023ce:	692b      	ldr	r3, [r5, #16]
 80023d0:	f023 0302 	bic.w	r3, r3, #2
 80023d4:	612b      	str	r3, [r5, #16]
    FLASH->CR &= SECTOR_MASK; 
 80023d6:	692b      	ldr	r3, [r5, #16]
 80023d8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023dc:	612b      	str	r3, [r5, #16]
  }
  /* Return the Erase Status */
  return status;
}
 80023de:	bd70      	pop	{r4, r5, r6, pc}
 80023e0:	40023c00 	.word	0x40023c00

080023e4 <FSMC_NORSRAMDeInit>:
  *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 80023e4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 80023e8:	b918      	cbnz	r0, 80023f2 <FSMC_NORSRAMDeInit+0xe>
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 80023ea:	f243 02db 	movw	r2, #12507	; 0x30db
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	e003      	b.n	80023fa <FSMC_NORSRAMDeInit+0x16>
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 80023f2:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80023f6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 80023fa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80023fe:	1c41      	adds	r1, r0, #1
 8002400:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8002404:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 8002408:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800240c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8002410:	4770      	bx	lr

08002412 <FSMC_NORSRAMInit>:
  *         that contains the configuration information for the FSMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 8002412:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8002414:	6884      	ldr	r4, [r0, #8]
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8002416:	6845      	ldr	r5, [r0, #4]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8002418:	68c3      	ldr	r3, [r0, #12]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 800241a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 800241c:	6802      	ldr	r2, [r0, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 800241e:	4325      	orrs	r5, r4
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8002420:	431d      	orrs	r5, r3
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8002422:	6903      	ldr	r3, [r0, #16]
 8002424:	431d      	orrs	r5, r3
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8002426:	6943      	ldr	r3, [r0, #20]
 8002428:	431d      	orrs	r5, r3
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 800242a:	6983      	ldr	r3, [r0, #24]
 800242c:	431d      	orrs	r5, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 800242e:	69c3      	ldr	r3, [r0, #28]
 8002430:	431d      	orrs	r5, r3
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 8002432:	6a03      	ldr	r3, [r0, #32]
 8002434:	431d      	orrs	r5, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8002436:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002438:	431d      	orrs	r5, r3
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 800243a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800243c:	431d      	orrs	r5, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 800243e:	6b03      	ldr	r3, [r0, #48]	; 0x30
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 8002440:	430d      	orrs	r5, r1
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8002442:	431d      	orrs	r5, r3
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8002444:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 8002448:	2c08      	cmp	r4, #8
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 800244a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 800244e:	d105      	bne.n	800245c <FSMC_NORSRAMInit+0x4a>
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 8002450:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8002454:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8002458:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 800245c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800245e:	699e      	ldr	r6, [r3, #24]
 8002460:	681d      	ldr	r5, [r3, #0]
 8002462:	4335      	orrs	r5, r6
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 8002464:	685e      	ldr	r6, [r3, #4]
 8002466:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 800246a:	689e      	ldr	r6, [r3, #8]
 800246c:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 8002470:	68de      	ldr	r6, [r3, #12]
 8002472:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 8002476:	691e      	ldr	r6, [r3, #16]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8002478:	695b      	ldr	r3, [r3, #20]
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 800247a:	ea45 5506 	orr.w	r5, r5, r6, lsl #20
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 800247e:	1c54      	adds	r4, r2, #1
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8002480:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8002484:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8002488:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 800248c:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8002490:	d110      	bne.n	80024b4 <FSMC_NORSRAMInit+0xa2>
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 8002492:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002494:	6998      	ldr	r0, [r3, #24]
 8002496:	6819      	ldr	r1, [r3, #0]
 8002498:	4301      	orrs	r1, r0
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 800249a:	6858      	ldr	r0, [r3, #4]
 800249c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 80024a0:	6898      	ldr	r0, [r3, #8]
 80024a2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 80024a6:	6918      	ldr	r0, [r3, #16]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 80024a8:	695b      	ldr	r3, [r3, #20]
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 80024aa:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 80024ae:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 80024b2:	e001      	b.n	80024b8 <FSMC_NORSRAMInit+0xa6>
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 80024b4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80024b8:	4b01      	ldr	r3, [pc, #4]	; (80024c0 <FSMC_NORSRAMInit+0xae>)
 80024ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80024be:	bd70      	pop	{r4, r5, r6, pc}
 80024c0:	a0000104 	.word	0xa0000104

080024c4 <FSMC_NORSRAMStructInit>:
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 80024c4:	2202      	movs	r2, #2
 80024c6:	6042      	str	r2, [r0, #4]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 80024c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024cc:	6242      	str	r2, [r0, #36]	; 0x24
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 80024ce:	6b41      	ldr	r1, [r0, #52]	; 0x34
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 80024d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 80024d4:	b510      	push	{r4, lr}
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 80024d6:	6282      	str	r2, [r0, #40]	; 0x28
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 80024d8:	2300      	movs	r3, #0
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 80024da:	220f      	movs	r2, #15
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 80024dc:	24ff      	movs	r4, #255	; 0xff
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 80024de:	6003      	str	r3, [r0, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 80024e0:	6083      	str	r3, [r0, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 80024e2:	60c3      	str	r3, [r0, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 80024e4:	6103      	str	r3, [r0, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 80024e6:	6143      	str	r3, [r0, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 80024e8:	6183      	str	r3, [r0, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 80024ea:	61c3      	str	r3, [r0, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 80024ec:	6203      	str	r3, [r0, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 80024ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 80024f0:	6303      	str	r3, [r0, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 80024f2:	600a      	str	r2, [r1, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 80024f4:	604a      	str	r2, [r1, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 80024f6:	608c      	str	r4, [r1, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 80024f8:	60ca      	str	r2, [r1, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 80024fa:	610a      	str	r2, [r1, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 80024fc:	614a      	str	r2, [r1, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 80024fe:	618b      	str	r3, [r1, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8002500:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002502:	600a      	str	r2, [r1, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8002504:	604a      	str	r2, [r1, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8002506:	608c      	str	r4, [r1, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8002508:	60ca      	str	r2, [r1, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 800250a:	610a      	str	r2, [r1, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 800250c:	614a      	str	r2, [r1, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 800250e:	618b      	str	r3, [r1, #24]
}
 8002510:	bd10      	pop	{r4, pc}

08002512 <FSMC_NORSRAMCmd>:
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8002512:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002516:	b121      	cbz	r1, 8002522 <FSMC_NORSRAMCmd+0x10>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 8002518:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800251c:	f042 0201 	orr.w	r2, r2, #1
 8002520:	e003      	b.n	800252a <FSMC_NORSRAMCmd+0x18>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 8002522:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8002526:	4a02      	ldr	r2, [pc, #8]	; (8002530 <FSMC_NORSRAMCmd+0x1e>)
 8002528:	400a      	ands	r2, r1
 800252a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 800252e:	4770      	bx	lr
 8002530:	000ffffe 	.word	0x000ffffe

08002534 <FSMC_NANDDeInit>:
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002534:	2810      	cmp	r0, #16
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 8002536:	bf0c      	ite	eq
 8002538:	4b06      	ldreq	r3, [pc, #24]	; (8002554 <FSMC_NANDDeInit+0x20>)
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
 800253a:	4b07      	ldrne	r3, [pc, #28]	; (8002558 <FSMC_NANDDeInit+0x24>)
 800253c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8002540:	f04f 0118 	mov.w	r1, #24
 8002544:	6019      	str	r1, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
 8002546:	605a      	str	r2, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8002548:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800254c:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 800254e:	60da      	str	r2, [r3, #12]
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	a0000060 	.word	0xa0000060
 8002558:	a0000080 	.word	0xa0000080

0800255c <FSMC_NANDInit>:
  * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FSMC NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 800255c:	b530      	push	{r4, r5, lr}
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 800255e:	6883      	ldr	r3, [r0, #8]
 8002560:	6844      	ldr	r4, [r0, #4]
 8002562:	431c      	orrs	r4, r3
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 8002564:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 8002566:	f044 0408 	orr.w	r4, r4, #8
            FSMC_NANDInitStruct->FSMC_ECC |
 800256a:	431c      	orrs	r4, r3
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 800256c:	6903      	ldr	r3, [r0, #16]
 800256e:	431c      	orrs	r4, r3
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 8002570:	6943      	ldr	r3, [r0, #20]
 8002572:	ea44 2443 	orr.w	r4, r4, r3, lsl #9
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 8002576:	6983      	ldr	r3, [r0, #24]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8002578:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800257c:	69c3      	ldr	r3, [r0, #28]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800257e:	6899      	ldr	r1, [r3, #8]
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002580:	685a      	ldr	r2, [r3, #4]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002582:	0409      	lsls	r1, r1, #16
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8002584:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002588:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 800258a:	68db      	ldr	r3, [r3, #12]
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800258c:	4311      	orrs	r1, r2
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800258e:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8002592:	6a03      	ldr	r3, [r0, #32]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002594:	689a      	ldr	r2, [r3, #8]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002596:	685d      	ldr	r5, [r3, #4]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002598:	0412      	lsls	r2, r2, #16
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800259a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800259e:	681d      	ldr	r5, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
 80025a0:	68db      	ldr	r3, [r3, #12]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80025a2:	432a      	orrs	r2, r5
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 80025a4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 80025a8:	6803      	ldr	r3, [r0, #0]
 80025aa:	2b10      	cmp	r3, #16
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 80025ac:	bf0c      	ite	eq
 80025ae:	4b03      	ldreq	r3, [pc, #12]	; (80025bc <FSMC_NANDInit+0x60>)
    FSMC_Bank2->PATT2 = tmppatt;
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 80025b0:	4b03      	ldrne	r3, [pc, #12]	; (80025c0 <FSMC_NANDInit+0x64>)
 80025b2:	601c      	str	r4, [r3, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 80025b4:	6099      	str	r1, [r3, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 80025b6:	60da      	str	r2, [r3, #12]
 80025b8:	bd30      	pop	{r4, r5, pc}
 80025ba:	bf00      	nop
 80025bc:	a0000060 	.word	0xa0000060
 80025c0:	a0000080 	.word	0xa0000080

080025c4 <FSMC_NANDStructInit>:
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 80025c4:	2310      	movs	r3, #16
 80025c6:	6003      	str	r3, [r0, #0]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80025c8:	69c2      	ldr	r2, [r0, #28]
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 80025ca:	2300      	movs	r3, #0
 80025cc:	6043      	str	r3, [r0, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 80025ce:	6083      	str	r3, [r0, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 80025d0:	60c3      	str	r3, [r0, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 80025d2:	6103      	str	r3, [r0, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 80025d4:	6143      	str	r3, [r0, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 80025d6:	6183      	str	r3, [r0, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80025d8:	23fc      	movs	r3, #252	; 0xfc
 80025da:	6013      	str	r3, [r2, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 80025dc:	6053      	str	r3, [r2, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 80025de:	6093      	str	r3, [r2, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 80025e0:	60d3      	str	r3, [r2, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80025e2:	6a02      	ldr	r2, [r0, #32]
 80025e4:	6013      	str	r3, [r2, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 80025e6:	6053      	str	r3, [r2, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 80025e8:	6093      	str	r3, [r2, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 80025ea:	60d3      	str	r3, [r2, #12]
}
 80025ec:	4770      	bx	lr

080025ee <FSMC_NANDCmd>:
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80025ee:	b141      	cbz	r1, 8002602 <FSMC_NANDCmd+0x14>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 80025f0:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 80025f2:	bf0c      	ite	eq
 80025f4:	4b07      	ldreq	r3, [pc, #28]	; (8002614 <FSMC_NANDCmd+0x26>)
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 80025f6:	4b08      	ldrne	r3, [pc, #32]	; (8002618 <FSMC_NANDCmd+0x2a>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	f042 0204 	orr.w	r2, r2, #4
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	4770      	bx	lr
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8002602:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 8002604:	bf0c      	ite	eq
 8002606:	4a03      	ldreq	r2, [pc, #12]	; (8002614 <FSMC_NANDCmd+0x26>)
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 8002608:	4a03      	ldrne	r2, [pc, #12]	; (8002618 <FSMC_NANDCmd+0x2a>)
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <FSMC_NANDCmd+0x2e>)
 800260c:	6811      	ldr	r1, [r2, #0]
 800260e:	400b      	ands	r3, r1
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	4770      	bx	lr
 8002614:	a0000060 	.word	0xa0000060
 8002618:	a0000080 	.word	0xa0000080
 800261c:	000ffffb 	.word	0x000ffffb

08002620 <FSMC_NANDECCCmd>:
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002620:	b141      	cbz	r1, 8002634 <FSMC_NANDECCCmd+0x14>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8002622:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 8002624:	bf0c      	ite	eq
 8002626:	4b08      	ldreq	r3, [pc, #32]	; (8002648 <FSMC_NANDECCCmd+0x28>)
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 8002628:	4b08      	ldrne	r3, [pc, #32]	; (800264c <FSMC_NANDECCCmd+0x2c>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	4770      	bx	lr
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8002634:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8002636:	bf0c      	ite	eq
 8002638:	4a03      	ldreq	r2, [pc, #12]	; (8002648 <FSMC_NANDECCCmd+0x28>)
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 800263a:	4a04      	ldrne	r2, [pc, #16]	; (800264c <FSMC_NANDECCCmd+0x2c>)
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <FSMC_NANDECCCmd+0x30>)
 800263e:	6811      	ldr	r1, [r2, #0]
 8002640:	400b      	ands	r3, r1
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	a0000060 	.word	0xa0000060
 800264c:	a0000080 	.word	0xa0000080
 8002650:	000fffbf 	.word	0x000fffbf

08002654 <FSMC_GetECC>:
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
  uint32_t eccval = 0x00000000;
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002654:	2810      	cmp	r0, #16
 8002656:	d102      	bne.n	800265e <FSMC_GetECC+0xa>
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 8002658:	4b02      	ldr	r3, [pc, #8]	; (8002664 <FSMC_GetECC+0x10>)
 800265a:	6958      	ldr	r0, [r3, #20]
 800265c:	4770      	bx	lr
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 800265e:	4b02      	ldr	r3, [pc, #8]	; (8002668 <FSMC_GetECC+0x14>)
 8002660:	6958      	ldr	r0, [r3, #20]
  }
  /* Return the error correction code value */
  return(eccval);
}
 8002662:	4770      	bx	lr
 8002664:	a0000060 	.word	0xa0000060
 8002668:	a0000080 	.word	0xa0000080

0800266c <FSMC_PCCARDDeInit>:
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <FSMC_PCCARDDeInit+0x18>)
 800266e:	2218      	movs	r2, #24
 8002670:	601a      	str	r2, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
 8002672:	2200      	movs	r2, #0
 8002674:	605a      	str	r2, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8002676:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800267a:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 800267c:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 800267e:	611a      	str	r2, [r3, #16]
}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	a00000a0 	.word	0xa00000a0

08002688 <FSMC_PCCARDInit>:
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
 8002688:	6802      	ldr	r2, [r0, #0]
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 800268a:	6843      	ldr	r3, [r0, #4]
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
 800268c:	f042 0210 	orr.w	r2, r2, #16
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8002690:	ea42 2243 	orr.w	r2, r2, r3, lsl #9
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 8002694:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8002696:	ea42 3243 	orr.w	r2, r2, r3, lsl #13
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <FSMC_PCCARDInit+0x64>)
  * @param  FSMC_PCCARDInitStruct : pointer to a FSMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FSMC PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 800269c:	b510      	push	{r4, lr}
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 800269e:	601a      	str	r2, [r3, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80026a0:	68c2      	ldr	r2, [r0, #12]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80026a2:	6891      	ldr	r1, [r2, #8]
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80026a4:	6854      	ldr	r4, [r2, #4]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80026a6:	0409      	lsls	r1, r1, #16
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80026a8:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80026ac:	6814      	ldr	r4, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 80026ae:	68d2      	ldr	r2, [r2, #12]
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80026b0:	4321      	orrs	r1, r4
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80026b2:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80026b6:	609a      	str	r2, [r3, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 80026b8:	6902      	ldr	r2, [r0, #16]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80026ba:	6891      	ldr	r1, [r2, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80026bc:	6854      	ldr	r4, [r2, #4]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80026be:	0409      	lsls	r1, r1, #16
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 80026c0:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80026c4:	6814      	ldr	r4, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
 80026c6:	68d2      	ldr	r2, [r2, #12]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80026c8:	4321      	orrs	r1, r4
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80026ca:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 80026ce:	60da      	str	r2, [r3, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 80026d0:	6942      	ldr	r2, [r0, #20]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80026d2:	6891      	ldr	r1, [r2, #8]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80026d4:	6850      	ldr	r0, [r2, #4]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80026d6:	0409      	lsls	r1, r1, #16
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 80026d8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80026dc:	6810      	ldr	r0, [r2, #0]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
 80026de:	68d2      	ldr	r2, [r2, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80026e0:	4301      	orrs	r1, r0
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80026e2:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 80026e6:	611a      	str	r2, [r3, #16]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
}
 80026e8:	bd10      	pop	{r4, pc}
 80026ea:	bf00      	nop
 80026ec:	a00000a0 	.word	0xa00000a0

080026f0 <FSMC_PCCARDStructInit>:
{
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80026f0:	68c2      	ldr	r2, [r0, #12]
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 80026f2:	2300      	movs	r3, #0
 80026f4:	6003      	str	r3, [r0, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 80026f6:	6043      	str	r3, [r0, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 80026f8:	6083      	str	r3, [r0, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80026fa:	23fc      	movs	r3, #252	; 0xfc
 80026fc:	6013      	str	r3, [r2, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 80026fe:	6053      	str	r3, [r2, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8002700:	6093      	str	r3, [r2, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8002702:	60d3      	str	r3, [r2, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002704:	6902      	ldr	r2, [r0, #16]
 8002706:	6013      	str	r3, [r2, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8002708:	6053      	str	r3, [r2, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800270a:	6093      	str	r3, [r2, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 800270c:	60d3      	str	r3, [r2, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 800270e:	6942      	ldr	r2, [r0, #20]
 8002710:	6013      	str	r3, [r2, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8002712:	6053      	str	r3, [r2, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8002714:	6093      	str	r3, [r2, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8002716:	60d3      	str	r3, [r2, #12]
}
 8002718:	4770      	bx	lr

0800271a <FSMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <FSMC_PCCARDCmd+0x16>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800271c:	b118      	cbz	r0, 8002726 <FSMC_PCCARDCmd+0xc>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	f042 0204 	orr.w	r2, r2, #4
 8002724:	e002      	b.n	800272c <FSMC_PCCARDCmd+0x12>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 8002726:	6819      	ldr	r1, [r3, #0]
 8002728:	4a02      	ldr	r2, [pc, #8]	; (8002734 <FSMC_PCCARDCmd+0x1a>)
 800272a:	400a      	ands	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	4770      	bx	lr
 8002730:	a00000a0 	.word	0xa00000a0
 8002734:	000ffffb 	.word	0x000ffffb

08002738 <FSMC_ITConfig>:
{
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002738:	b162      	cbz	r2, 8002754 <FSMC_ITConfig+0x1c>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800273a:	2810      	cmp	r0, #16
 800273c:	d101      	bne.n	8002742 <FSMC_ITConfig+0xa>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <FSMC_ITConfig+0x40>)
 8002740:	e003      	b.n	800274a <FSMC_ITConfig+0x12>
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8002742:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002746:	d103      	bne.n	8002750 <FSMC_ITConfig+0x18>
    {
      FSMC_Bank3->SR3 |= FSMC_IT;
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <FSMC_ITConfig+0x44>)
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	4311      	orrs	r1, r2
 800274e:	e011      	b.n	8002774 <FSMC_ITConfig+0x3c>
    }
    /* Enable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 |= FSMC_IT;    
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <FSMC_ITConfig+0x48>)
 8002752:	e7fa      	b.n	800274a <FSMC_ITConfig+0x12>
    }
  }
  else
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8002754:	2810      	cmp	r0, #16
 8002756:	d104      	bne.n	8002762 <FSMC_ITConfig+0x2a>
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <FSMC_ITConfig+0x40>)
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	ea22 0101 	bic.w	r1, r2, r1
 8002760:	e008      	b.n	8002774 <FSMC_ITConfig+0x3c>
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8002762:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    {
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 8002766:	bf0c      	ite	eq
 8002768:	4b04      	ldreq	r3, [pc, #16]	; (800277c <FSMC_ITConfig+0x44>)
    }
    /* Disable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 800276a:	4b05      	ldrne	r3, [pc, #20]	; (8002780 <FSMC_ITConfig+0x48>)
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	ea6f 0101 	mvn.w	r1, r1
 8002772:	4011      	ands	r1, r2
 8002774:	6059      	str	r1, [r3, #4]
 8002776:	4770      	bx	lr
 8002778:	a0000060 	.word	0xa0000060
 800277c:	a0000080 	.word	0xa0000080
 8002780:	a00000a0 	.word	0xa00000a0

08002784 <FSMC_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002784:	2810      	cmp	r0, #16
 8002786:	d101      	bne.n	800278c <FSMC_GetFlagStatus+0x8>
  {
    tmpsr = FSMC_Bank2->SR2;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <FSMC_GetFlagStatus+0x20>)
 800278a:	e004      	b.n	8002796 <FSMC_GetFlagStatus+0x12>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800278c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    tmpsr = FSMC_Bank3->SR3;
 8002790:	bf0c      	ite	eq
 8002792:	4b05      	ldreq	r3, [pc, #20]	; (80027a8 <FSMC_GetFlagStatus+0x24>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8002794:	4b05      	ldrne	r3, [pc, #20]	; (80027ac <FSMC_GetFlagStatus+0x28>)
 8002796:	685b      	ldr	r3, [r3, #4]
  } 
  
  /* Get the flag status */
  if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
  {
    bitstatus = SET;
 8002798:	420b      	tst	r3, r1
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 800279a:	bf0c      	ite	eq
 800279c:	2000      	moveq	r0, #0
 800279e:	2001      	movne	r0, #1
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	a0000060 	.word	0xa0000060
 80027a8:	a0000080 	.word	0xa0000080
 80027ac:	a00000a0 	.word	0xa00000a0

080027b0 <FSMC_ClearFlag>:
{
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 80027b0:	2810      	cmp	r0, #16
 80027b2:	d104      	bne.n	80027be <FSMC_ClearFlag+0xe>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 80027b4:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <FSMC_ClearFlag+0x24>)
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	ea22 0101 	bic.w	r1, r2, r1
 80027bc:	e008      	b.n	80027d0 <FSMC_ClearFlag+0x20>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 80027be:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 80027c2:	bf0c      	ite	eq
 80027c4:	4b04      	ldreq	r3, [pc, #16]	; (80027d8 <FSMC_ClearFlag+0x28>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 80027c6:	4b05      	ldrne	r3, [pc, #20]	; (80027dc <FSMC_ClearFlag+0x2c>)
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	ea6f 0101 	mvn.w	r1, r1
 80027ce:	4011      	ands	r1, r2
 80027d0:	6059      	str	r1, [r3, #4]
 80027d2:	4770      	bx	lr
 80027d4:	a0000060 	.word	0xa0000060
 80027d8:	a0000080 	.word	0xa0000080
 80027dc:	a00000a0 	.word	0xa00000a0

080027e0 <FSMC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 80027e0:	2810      	cmp	r0, #16
 80027e2:	d101      	bne.n	80027e8 <FSMC_GetITStatus+0x8>
  {
    tmpsr = FSMC_Bank2->SR2;
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <FSMC_GetITStatus+0x28>)
 80027e6:	e004      	b.n	80027f2 <FSMC_GetITStatus+0x12>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 80027e8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    tmpsr = FSMC_Bank3->SR3;
 80027ec:	bf0c      	ite	eq
 80027ee:	4b07      	ldreq	r3, [pc, #28]	; (800280c <FSMC_GetITStatus+0x2c>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 80027f0:	4b07      	ldrne	r3, [pc, #28]	; (8002810 <FSMC_GetITStatus+0x30>)
 80027f2:	685b      	ldr	r3, [r3, #4]
  } 
  
  itstatus = tmpsr & FSMC_IT;
  
  itenable = tmpsr & (FSMC_IT >> 3);
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 80027f4:	ea13 0001 	ands.w	r0, r3, r1
 80027f8:	d004      	beq.n	8002804 <FSMC_GetITStatus+0x24>
  {
    bitstatus = SET;
 80027fa:	ea13 01d1 	ands.w	r1, r3, r1, lsr #3
 80027fe:	bf0c      	ite	eq
 8002800:	2000      	moveq	r0, #0
 8002802:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus; 
}
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	a0000060 	.word	0xa0000060
 800280c:	a0000080 	.word	0xa0000080
 8002810:	a00000a0 	.word	0xa00000a0

08002814 <FSMC_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002814:	2810      	cmp	r0, #16
 8002816:	d104      	bne.n	8002822 <FSMC_ClearITPendingBit+0xe>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <FSMC_ClearITPendingBit+0x28>)
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	ea22 01d1 	bic.w	r1, r2, r1, lsr #3
 8002820:	e009      	b.n	8002836 <FSMC_ClearITPendingBit+0x22>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8002822:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 8002826:	bf0c      	ite	eq
 8002828:	4b05      	ldreq	r3, [pc, #20]	; (8002840 <FSMC_ClearITPendingBit+0x2c>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 800282a:	4b06      	ldrne	r3, [pc, #24]	; (8002844 <FSMC_ClearITPendingBit+0x30>)
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	ea4f 01d1 	mov.w	r1, r1, lsr #3
 8002832:	ea22 0101 	bic.w	r1, r2, r1
 8002836:	6059      	str	r1, [r3, #4]
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	a0000060 	.word	0xa0000060
 8002840:	a0000080 	.word	0xa0000080
 8002844:	a00000a0 	.word	0xa00000a0

08002848 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8002848:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <GPIO_DeInit+0xb4>)
 800284c:	4298      	cmp	r0, r3
 800284e:	d105      	bne.n	800285c <GPIO_DeInit+0x14>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002850:	2001      	movs	r0, #1
 8002852:	4601      	mov	r1, r0
 8002854:	f000 ffaa 	bl	80037ac <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8002858:	2001      	movs	r0, #1
 800285a:	e048      	b.n	80028ee <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOB)
 800285c:	4b28      	ldr	r3, [pc, #160]	; (8002900 <GPIO_DeInit+0xb8>)
 800285e:	4298      	cmp	r0, r3
 8002860:	d105      	bne.n	800286e <GPIO_DeInit+0x26>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8002862:	2002      	movs	r0, #2
 8002864:	2101      	movs	r1, #1
 8002866:	f000 ffa1 	bl	80037ac <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800286a:	2002      	movs	r0, #2
 800286c:	e03f      	b.n	80028ee <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOC)
 800286e:	4b25      	ldr	r3, [pc, #148]	; (8002904 <GPIO_DeInit+0xbc>)
 8002870:	4298      	cmp	r0, r3
 8002872:	d105      	bne.n	8002880 <GPIO_DeInit+0x38>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8002874:	2004      	movs	r0, #4
 8002876:	2101      	movs	r1, #1
 8002878:	f000 ff98 	bl	80037ac <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800287c:	2004      	movs	r0, #4
 800287e:	e036      	b.n	80028ee <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOD)
 8002880:	4b21      	ldr	r3, [pc, #132]	; (8002908 <GPIO_DeInit+0xc0>)
 8002882:	4298      	cmp	r0, r3
 8002884:	d105      	bne.n	8002892 <GPIO_DeInit+0x4a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8002886:	2008      	movs	r0, #8
 8002888:	2101      	movs	r1, #1
 800288a:	f000 ff8f 	bl	80037ac <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800288e:	2008      	movs	r0, #8
 8002890:	e02d      	b.n	80028ee <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOE)
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <GPIO_DeInit+0xc4>)
 8002894:	4298      	cmp	r0, r3
 8002896:	d105      	bne.n	80028a4 <GPIO_DeInit+0x5c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8002898:	2010      	movs	r0, #16
 800289a:	2101      	movs	r1, #1
 800289c:	f000 ff86 	bl	80037ac <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80028a0:	2010      	movs	r0, #16
 80028a2:	e024      	b.n	80028ee <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOF)
 80028a4:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <GPIO_DeInit+0xc8>)
 80028a6:	4298      	cmp	r0, r3
 80028a8:	d105      	bne.n	80028b6 <GPIO_DeInit+0x6e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80028aa:	2020      	movs	r0, #32
 80028ac:	2101      	movs	r1, #1
 80028ae:	f000 ff7d 	bl	80037ac <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80028b2:	2020      	movs	r0, #32
 80028b4:	e01b      	b.n	80028ee <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOG)
 80028b6:	4b17      	ldr	r3, [pc, #92]	; (8002914 <GPIO_DeInit+0xcc>)
 80028b8:	4298      	cmp	r0, r3
 80028ba:	d105      	bne.n	80028c8 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80028bc:	2040      	movs	r0, #64	; 0x40
 80028be:	2101      	movs	r1, #1
 80028c0:	f000 ff74 	bl	80037ac <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80028c4:	2040      	movs	r0, #64	; 0x40
 80028c6:	e012      	b.n	80028ee <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOH)
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <GPIO_DeInit+0xd0>)
 80028ca:	4298      	cmp	r0, r3
 80028cc:	d105      	bne.n	80028da <GPIO_DeInit+0x92>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80028ce:	2080      	movs	r0, #128	; 0x80
 80028d0:	2101      	movs	r1, #1
 80028d2:	f000 ff6b 	bl	80037ac <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80028d6:	2080      	movs	r0, #128	; 0x80
 80028d8:	e009      	b.n	80028ee <GPIO_DeInit+0xa6>
  }
  else
  {
    if (GPIOx == GPIOI)
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <GPIO_DeInit+0xd4>)
 80028dc:	4298      	cmp	r0, r3
 80028de:	d10b      	bne.n	80028f8 <GPIO_DeInit+0xb0>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80028e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80028e4:	2101      	movs	r1, #1
 80028e6:	f000 ff61 	bl	80037ac <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80028ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80028ee:	2100      	movs	r1, #0
    }
  }
}
 80028f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80028f4:	f000 bf5a 	b.w	80037ac <RCC_AHB1PeriphResetCmd>
 80028f8:	bd08      	pop	{r3, pc}
 80028fa:	bf00      	nop
 80028fc:	40020000 	.word	0x40020000
 8002900:	40020400 	.word	0x40020400
 8002904:	40020800 	.word	0x40020800
 8002908:	40020c00 	.word	0x40020c00
 800290c:	40021000 	.word	0x40021000
 8002910:	40021400 	.word	0x40021400
 8002914:	40021800 	.word	0x40021800
 8002918:	40021c00 	.word	0x40021c00
 800291c:	40022000 	.word	0x40022000

08002920 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002924:	2300      	movs	r3, #0
 8002926:	f8d1 8000 	ldr.w	r8, [r1]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800292a:	461a      	mov	r2, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 800292c:	f04f 0c01 	mov.w	ip, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002930:	2703      	movs	r7, #3

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002932:	fa0c f402 	lsl.w	r4, ip, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002936:	ea04 0508 	and.w	r5, r4, r8

    if (currentpin == pos)
 800293a:	42a5      	cmp	r5, r4
 800293c:	d12e      	bne.n	800299c <GPIO_Init+0x7c>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800293e:	6806      	ldr	r6, [r0, #0]
 8002940:	fa17 f403 	lsls.w	r4, r7, r3
 8002944:	43e4      	mvns	r4, r4
 8002946:	4026      	ands	r6, r4
 8002948:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800294a:	790e      	ldrb	r6, [r1, #4]
 800294c:	f8d0 9000 	ldr.w	r9, [r0]
 8002950:	fa06 fa03 	lsl.w	sl, r6, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002954:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002956:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800295a:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800295c:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002960:	d814      	bhi.n	800298c <GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002962:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002964:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002968:	4026      	ands	r6, r4
 800296a:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800296c:	6886      	ldr	r6, [r0, #8]
 800296e:	fa09 f903 	lsl.w	r9, r9, r3
 8002972:	ea49 0606 	orr.w	r6, r9, r6
 8002976:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002978:	6846      	ldr	r6, [r0, #4]
 800297a:	ea26 0505 	bic.w	r5, r6, r5
 800297e:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002980:	798d      	ldrb	r5, [r1, #6]
 8002982:	6846      	ldr	r6, [r0, #4]
 8002984:	4095      	lsls	r5, r2
 8002986:	b2ad      	uxth	r5, r5
 8002988:	4335      	orrs	r5, r6
 800298a:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800298c:	68c5      	ldr	r5, [r0, #12]
 800298e:	402c      	ands	r4, r5
 8002990:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002992:	79cc      	ldrb	r4, [r1, #7]
 8002994:	68c5      	ldr	r5, [r0, #12]
 8002996:	409c      	lsls	r4, r3
 8002998:	432c      	orrs	r4, r5
 800299a:	60c4      	str	r4, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800299c:	3201      	adds	r2, #1
 800299e:	3302      	adds	r3, #2
 80029a0:	2a10      	cmp	r2, #16
 80029a2:	d1c6      	bne.n	8002932 <GPIO_Init+0x12>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80029a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080029a8 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80029a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ac:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80029ae:	2300      	movs	r3, #0
 80029b0:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80029b2:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80029b4:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80029b6:	71c3      	strb	r3, [r0, #7]
}
 80029b8:	4770      	bx	lr

080029ba <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029ba:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 80029bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029c0:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 80029c2:	9b01      	ldr	r3, [sp, #4]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80029c8:	9b01      	ldr	r3, [sp, #4]
 80029ca:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80029cc:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80029ce:	9b01      	ldr	r3, [sp, #4]
 80029d0:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80029d2:	69c3      	ldr	r3, [r0, #28]
 80029d4:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80029d6:	69c3      	ldr	r3, [r0, #28]
 80029d8:	9301      	str	r3, [sp, #4]
}
 80029da:	b002      	add	sp, #8
 80029dc:	4770      	bx	lr

080029de <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80029de:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 80029e0:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80029e2:	bf0c      	ite	eq
 80029e4:	2000      	moveq	r0, #0
 80029e6:	2001      	movne	r0, #1
 80029e8:	4770      	bx	lr

080029ea <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80029ea:	6900      	ldr	r0, [r0, #16]
}
 80029ec:	b280      	uxth	r0, r0
 80029ee:	4770      	bx	lr

080029f0 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80029f0:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 80029f2:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80029f4:	bf0c      	ite	eq
 80029f6:	2000      	moveq	r0, #0
 80029f8:	2001      	movne	r0, #1
 80029fa:	4770      	bx	lr

080029fc <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 80029fc:	6940      	ldr	r0, [r0, #20]
}
 80029fe:	b280      	uxth	r0, r0
 8002a00:	4770      	bx	lr

08002a02 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8002a02:	8301      	strh	r1, [r0, #24]
}
 8002a04:	4770      	bx	lr

08002a06 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8002a06:	8341      	strh	r1, [r0, #26]
}
 8002a08:	4770      	bx	lr

08002a0a <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8002a0a:	b10a      	cbz	r2, 8002a10 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8002a0c:	8301      	strh	r1, [r0, #24]
 8002a0e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8002a10:	8341      	strh	r1, [r0, #26]
 8002a12:	4770      	bx	lr

08002a14 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8002a14:	6141      	str	r1, [r0, #20]
}
 8002a16:	4770      	bx	lr

08002a18 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8002a18:	6943      	ldr	r3, [r0, #20]
 8002a1a:	404b      	eors	r3, r1
 8002a1c:	6143      	str	r3, [r0, #20]
}
 8002a1e:	4770      	bx	lr

08002a20 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002a20:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002a24:	08c9      	lsrs	r1, r1, #3
 8002a26:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8002a28:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002a2a:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002a2c:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8002a30:	240f      	movs	r4, #15
 8002a32:	409c      	lsls	r4, r3
 8002a34:	ea25 0404 	bic.w	r4, r5, r4
 8002a38:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002a3c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002a40:	fa12 f303 	lsls.w	r3, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002a44:	431c      	orrs	r4, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8002a46:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
 8002a4a:	bd30      	pop	{r4, r5, pc}

08002a4c <HASH_DeInit>:
  * @brief  Deinitializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 8002a4c:	b508      	push	{r3, lr}
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 8002a4e:	2020      	movs	r0, #32
 8002a50:	2101      	movs	r1, #1
 8002a52:	f000 feb7 	bl	80037c4 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 8002a56:	2020      	movs	r0, #32
 8002a58:	2100      	movs	r1, #0
}
 8002a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void HASH_DeInit(void)
{
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 8002a5e:	f000 beb1 	b.w	80037c4 <RCC_AHB2PeriphResetCmd>

08002a62 <HASH_Init>:
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <HASH_Init+0x3a>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 8002a6a:	b510      	push	{r4, lr}
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 8002a6c:	601a      	str	r2, [r3, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8002a6e:	e890 0006 	ldmia.w	r0, {r1, r2}
 8002a72:	681c      	ldr	r4, [r3, #0]
 8002a74:	4321      	orrs	r1, r4
               HASH_InitStruct->HASH_DataType | \
 8002a76:	6884      	ldr	r4, [r0, #8]
 8002a78:	4321      	orrs	r1, r4
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8002a7a:	4311      	orrs	r1, r2
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 8002a7c:	2a40      	cmp	r2, #64	; 0x40
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8002a7e:	6019      	str	r1, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 8002a80:	d107      	bne.n	8002a92 <HASH_Init+0x30>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a88:	601a      	str	r2, [r3, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 8002a8a:	6819      	ldr	r1, [r3, #0]
 8002a8c:	68c2      	ldr	r2, [r0, #12]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	f042 0204 	orr.w	r2, r2, #4
 8002a98:	601a      	str	r2, [r3, #0]
}
 8002a9a:	bd10      	pop	{r4, pc}
 8002a9c:	50060400 	.word	0x50060400

08002aa0 <HASH_StructInit>:
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	6003      	str	r3, [r0, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 8002aa4:	6043      	str	r3, [r0, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 8002aa6:	6083      	str	r3, [r0, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8002aa8:	60c3      	str	r3, [r0, #12]
}
 8002aaa:	4770      	bx	lr

08002aac <HASH_Reset>:
  * @retval None
  */
void HASH_Reset(void)
{
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 8002aac:	4b02      	ldr	r3, [pc, #8]	; (8002ab8 <HASH_Reset+0xc>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	f042 0204 	orr.w	r2, r2, #4
 8002ab4:	601a      	str	r2, [r3, #0]
}
 8002ab6:	4770      	bx	lr
 8002ab8:	50060400 	.word	0x50060400

08002abc <HASH_SetLastWordValidBitsNbr>:
{
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <HASH_SetLastWordValidBitsNbr+0x14>)
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	f022 021f 	bic.w	r2, r2, #31
 8002ac4:	609a      	str	r2, [r3, #8]
  HASH->STR |= ValidNumber;
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	4302      	orrs	r2, r0
 8002aca:	609a      	str	r2, [r3, #8]
}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	50060400 	.word	0x50060400

08002ad4 <HASH_DataIn>:
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 8002ad4:	4b01      	ldr	r3, [pc, #4]	; (8002adc <HASH_DataIn+0x8>)
 8002ad6:	6058      	str	r0, [r3, #4]
}
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	50060400 	.word	0x50060400

08002ae0 <HASH_GetInFIFOWordsNbr>:
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 8002ae0:	4b02      	ldr	r3, [pc, #8]	; (8002aec <HASH_GetInFIFOWordsNbr+0xc>)
 8002ae2:	6818      	ldr	r0, [r3, #0]
}
 8002ae4:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	50060400 	.word	0x50060400

08002af0 <HASH_GetDigest>:
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HASH_GetDigest+0x18>)
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	6002      	str	r2, [r0, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	6042      	str	r2, [r0, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	6082      	str	r2, [r0, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 8002afe:	699a      	ldr	r2, [r3, #24]
 8002b00:	60c2      	str	r2, [r0, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	6103      	str	r3, [r0, #16]
}
 8002b06:	4770      	bx	lr
 8002b08:	50060400 	.word	0x50060400

08002b0c <HASH_StartDigest>:
  * @retval None
  */
void HASH_StartDigest(void)
{
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 8002b0c:	4b02      	ldr	r3, [pc, #8]	; (8002b18 <HASH_StartDigest+0xc>)
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b14:	609a      	str	r2, [r3, #8]
}
 8002b16:	4770      	bx	lr
 8002b18:	50060400 	.word	0x50060400

08002b1c <HASH_SaveContext>:
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
  uint8_t i = 0;
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 8002b1c:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <HASH_SaveContext+0x24>)
 8002b1e:	6a1a      	ldr	r2, [r3, #32]
 8002b20:	6002      	str	r2, [r0, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	6042      	str	r2, [r0, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	6082      	str	r2, [r0, #8]
 8002b2a:	2200      	movs	r2, #0
  for(i=0; i<=50;i++)
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 8002b2c:	f102 013e 	add.w	r1, r2, #62	; 0x3e
 8002b30:	3201      	adds	r2, #1
 8002b32:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002b36:	60c1      	str	r1, [r0, #12]
 8002b38:	3004      	adds	r0, #4
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=50;i++)
 8002b3a:	2a33      	cmp	r2, #51	; 0x33
 8002b3c:	d1f6      	bne.n	8002b2c <HASH_SaveContext+0x10>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
  }   
}
 8002b3e:	4770      	bx	lr
 8002b40:	50060400 	.word	0x50060400

08002b44 <HASH_RestoreContext>:
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
  uint8_t i = 0;
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 8002b44:	6802      	ldr	r2, [r0, #0]
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HASH_RestoreContext+0x30>)
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 8002b48:	b510      	push	{r4, lr}
  uint8_t i = 0;
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 8002b4a:	621a      	str	r2, [r3, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 8002b4c:	6842      	ldr	r2, [r0, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 8002b50:	6882      	ldr	r2, [r0, #8]
 8002b52:	601a      	str	r2, [r3, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	f042 0204 	orr.w	r2, r2, #4
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	2200      	movs	r2, #0
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 8002b5e:	68c4      	ldr	r4, [r0, #12]
 8002b60:	f102 013e 	add.w	r1, r2, #62	; 0x3e
 8002b64:	3201      	adds	r2, #1
 8002b66:	3004      	adds	r0, #4
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 8002b68:	2a33      	cmp	r2, #51	; 0x33
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 8002b6a:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 8002b6e:	d1f6      	bne.n	8002b5e <HASH_RestoreContext+0x1a>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
  }   
}
 8002b70:	bd10      	pop	{r4, pc}
 8002b72:	bf00      	nop
 8002b74:	50060400 	.word	0x50060400

08002b78 <HASH_DMACmd>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_DMACmd(FunctionalState NewState)
{
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <HASH_DMACmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 8002b7a:	681a      	ldr	r2, [r3, #0]
void HASH_DMACmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002b7c:	b110      	cbz	r0, 8002b84 <HASH_DMACmd+0xc>
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 8002b7e:	f042 0208 	orr.w	r2, r2, #8
 8002b82:	e001      	b.n	8002b88 <HASH_DMACmd+0x10>
  }
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
 8002b84:	f022 0208 	bic.w	r2, r2, #8
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	4770      	bx	lr
 8002b8c:	50060400 	.word	0x50060400

08002b90 <HASH_ITConfig>:
  * @param  NewState: new state of the specified HASH interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_ITConfig(uint8_t HASH_IT, FunctionalState NewState)
{
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HASH_ITConfig+0x18>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 8002b92:	6a1a      	ldr	r2, [r3, #32]
{
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002b94:	b109      	cbz	r1, 8002b9a <HASH_ITConfig+0xa>
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 8002b96:	4310      	orrs	r0, r2
 8002b98:	e003      	b.n	8002ba2 <HASH_ITConfig+0x12>
  }
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint8_t) ~HASH_IT;
 8002b9a:	ea22 0000 	bic.w	r0, r2, r0
 8002b9e:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 8002ba2:	6218      	str	r0, [r3, #32]
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	50060400 	.word	0x50060400

08002bac <HASH_GetFlagStatus>:
  *            @arg HASH_FLAG_DMAS: DMAS Status flag
  *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
  * @retval The new state of HASH_FLAG (SET or RESET)
  */
FlagStatus HASH_GetFlagStatus(uint16_t HASH_FLAG)
{
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HASH_GetFlagStatus+0x18>)

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint16_t)RESET ) 
 8002bae:	f410 5f80 	tst.w	r0, #4096	; 0x1000
  {
    tempreg = HASH->CR;
 8002bb2:	bf14      	ite	ne
 8002bb4:	681b      	ldrne	r3, [r3, #0]
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 8002bb6:	6a5b      	ldreq	r3, [r3, #36]	; 0x24

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint16_t)RESET)
  {
    /* HASH is set */
    bitstatus = SET;
 8002bb8:	4203      	tst	r3, r0
    bitstatus = RESET;
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
}
 8002bba:	bf0c      	ite	eq
 8002bbc:	2000      	moveq	r0, #0
 8002bbe:	2001      	movne	r0, #1
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	50060400 	.word	0x50060400

08002bc8 <HASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 8002bc8:	4b01      	ldr	r3, [pc, #4]	; (8002bd0 <HASH_ClearFlag+0x8>)
 8002bca:	43c0      	mvns	r0, r0
 8002bcc:	6258      	str	r0, [r3, #36]	; 0x24
}
 8002bce:	4770      	bx	lr
 8002bd0:	50060400 	.word	0x50060400

08002bd4 <HASH_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <HASH_GetITStatus+0x14>)
 8002bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4013      	ands	r3, r2
  {
    /* HASH_IT is set */
    bitstatus = SET;
 8002bdc:	4203      	tst	r3, r0
    /* HASH_IT is reset */
    bitstatus = RESET;
  }
  /* Return the HASH_IT status */
  return bitstatus;
}
 8002bde:	bf0c      	ite	eq
 8002be0:	2000      	moveq	r0, #0
 8002be2:	2001      	movne	r0, #1
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	50060400 	.word	0x50060400

08002bec <HASH_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint8_t)~HASH_IT;
 8002bec:	43c0      	mvns	r0, r0
 8002bee:	4b02      	ldr	r3, [pc, #8]	; (8002bf8 <HASH_ClearITPendingBit+0xc>)
 8002bf0:	b2c0      	uxtb	r0, r0
 8002bf2:	6258      	str	r0, [r3, #36]	; 0x24
}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	50060400 	.word	0x50060400

08002bfc <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 8002bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8002bfe:	f001 0303 	and.w	r3, r1, #3
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 8002c02:	b08d      	sub	sp, #52	; 0x34
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8002c04:	2700      	movs	r7, #0
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8002c06:	00db      	lsls	r3, r3, #3
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8002c08:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	460d      	mov	r5, r1
 8002c10:	4616      	mov	r6, r2
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
 8002c12:	970a      	str	r7, [sp, #40]	; 0x28
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8002c14:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e

  /* HASH peripheral initialization */
  HASH_DeInit();
 8002c18:	f7ff ff18 	bl	8002a4c <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	9306      	str	r3, [sp, #24]
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  HASH_Init(&MD5_HASH_InitStructure);
 8002c20:	a806      	add	r0, sp, #24
  HASH_DeInit();

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8002c22:	2320      	movs	r3, #32
  /* HASH peripheral initialization */
  HASH_DeInit();

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 8002c24:	9707      	str	r7, [sp, #28]
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8002c26:	9308      	str	r3, [sp, #32]
  HASH_Init(&MD5_HASH_InitStructure);
 8002c28:	f7ff ff1b 	bl	8002a62 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8002c2c:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8002c30:	b280      	uxth	r0, r0
 8002c32:	f7ff ff43 	bl	8002abc <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8002c36:	e003      	b.n	8002c40 <HASH_MD5+0x44>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 8002c38:	59e0      	ldr	r0, [r4, r7]
 8002c3a:	f7ff ff4b 	bl	8002ad4 <HASH_DataIn>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8002c3e:	3704      	adds	r7, #4
 8002c40:	42af      	cmp	r7, r5
 8002c42:	d3f9      	bcc.n	8002c38 <HASH_MD5+0x3c>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8002c44:	f7ff ff62 	bl	8002b0c <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8002c48:	2008      	movs	r0, #8
 8002c4a:	f7ff ffaf 	bl	8002bac <HASH_GetFlagStatus>
    counter++;
 8002c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c50:	3301      	adds	r3, #1
 8002c52:	930a      	str	r3, [sp, #40]	; 0x28
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8002c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5a:	d002      	beq.n	8002c62 <HASH_MD5+0x66>
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	d1f3      	bne.n	8002c48 <HASH_MD5+0x4c>
 8002c60:	e000      	b.n	8002c64 <HASH_MD5+0x68>

  if (busystatus != RESET)
 8002c62:	b980      	cbnz	r0, 8002c86 <HASH_MD5+0x8a>
     status = ERROR;
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 8002c64:	a801      	add	r0, sp, #4
 8002c66:	f7ff ff43 	bl	8002af0 <HASH_GetDigest>
 8002c6a:	9b01      	ldr	r3, [sp, #4]
 8002c6c:	ba1b      	rev	r3, r3
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 8002c6e:	6033      	str	r3, [r6, #0]
 8002c70:	9b02      	ldr	r3, [sp, #8]
 8002c72:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 8002c74:	6073      	str	r3, [r6, #4]
 8002c76:	9b03      	ldr	r3, [sp, #12]
 8002c78:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 8002c7a:	60b3      	str	r3, [r6, #8]
 8002c7c:	9b04      	ldr	r3, [sp, #16]
 8002c7e:	ba1b      	rev	r3, r3
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8002c80:	2001      	movs	r0, #1
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 8002c82:	60f3      	str	r3, [r6, #12]
 8002c84:	e000      	b.n	8002c88 <HASH_MD5+0x8c>
    counter++;
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));

  if (busystatus != RESET)
  {
     status = ERROR;
 8002c86:	2000      	movs	r0, #0
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
  }
  return status; 
}
 8002c88:	b00d      	add	sp, #52	; 0x34
 8002c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c8c <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 8002c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c90:	4699      	mov	r9, r3
 8002c92:	b08d      	sub	sp, #52	; 0x34
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8002c94:	f003 0303 	and.w	r3, r3, #3
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8002c98:	f04f 0800 	mov.w	r8, #0
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8002c9c:	00db      	lsls	r3, r3, #3
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8002c9e:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  __IO uint16_t nbvalidbitskey = 0;
 8002ca2:	f8ad 802e 	strh.w	r8, [sp, #46]	; 0x2e
  uint32_t i = 0;
  __IO uint32_t counter = 0;
 8002ca6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8002caa:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8002cae:	f001 0303 	and.w	r3, r1, #3
 8002cb2:	00db      	lsls	r3, r3, #3
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 8002cb4:	460d      	mov	r5, r1
 8002cb6:	4616      	mov	r6, r2
 8002cb8:	4604      	mov	r4, r0

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8002cba:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 8002cbe:	9f14      	ldr	r7, [sp, #80]	; 0x50

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 8002cc0:	f7ff fec4 	bl	8002a4c <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	9306      	str	r3, [sp, #24]
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 8002cc8:	2340      	movs	r3, #64	; 0x40
 8002cca:	9307      	str	r3, [sp, #28]
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8002ccc:	2320      	movs	r3, #32
  if(Keylen > 64)
 8002cce:	2d40      	cmp	r5, #64	; 0x40
  HASH_DeInit();

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8002cd0:	9308      	str	r3, [sp, #32]
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
  }
  HASH_Init(&MD5_HASH_InitStructure);
 8002cd2:	a806      	add	r0, sp, #24
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  if(Keylen > 64)
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 8002cd4:	bf8a      	itet	hi
 8002cd6:	f44f 3380 	movhi.w	r3, #65536	; 0x10000
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8002cda:	f8cd 8024 	strls.w	r8, [sp, #36]	; 0x24
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  if(Keylen > 64)
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 8002cde:	9309      	strhi	r3, [sp, #36]	; 0x24
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
  }
  HASH_Init(&MD5_HASH_InitStructure);
 8002ce0:	f7ff febf 	bl	8002a62 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8002ce4:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8002ce8:	b280      	uxth	r0, r0
 8002cea:	f7ff fee7 	bl	8002abc <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8002cee:	f04f 0800 	mov.w	r8, #0
 8002cf2:	e005      	b.n	8002d00 <HMAC_MD5+0x74>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 8002cf4:	f854 0008 	ldr.w	r0, [r4, r8]
 8002cf8:	f7ff feec 	bl	8002ad4 <HASH_DataIn>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8002cfc:	f108 0804 	add.w	r8, r8, #4
 8002d00:	45a8      	cmp	r8, r5
 8002d02:	d3f7      	bcc.n	8002cf4 <HMAC_MD5+0x68>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 8002d04:	f7ff ff02 	bl	8002b0c <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8002d08:	2008      	movs	r0, #8
 8002d0a:	f7ff ff4f 	bl	8002bac <HASH_GetFlagStatus>
    counter++;
 8002d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d10:	3301      	adds	r3, #1
 8002d12:	930a      	str	r3, [sp, #40]	; 0x28
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8002d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1a:	d002      	beq.n	8002d22 <HMAC_MD5+0x96>
 8002d1c:	2800      	cmp	r0, #0
 8002d1e:	d1f3      	bne.n	8002d08 <HMAC_MD5+0x7c>
 8002d20:	e001      	b.n	8002d26 <HMAC_MD5+0x9a>

  if (busystatus != RESET)
 8002d22:	2800      	cmp	r0, #0
 8002d24:	d152      	bne.n	8002dcc <HMAC_MD5+0x140>
     status = ERROR;
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8002d26:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 8002d2a:	b280      	uxth	r0, r0
 8002d2c:	f7ff fec6 	bl	8002abc <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8002d30:	f04f 0800 	mov.w	r8, #0
 8002d34:	e005      	b.n	8002d42 <HMAC_MD5+0xb6>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 8002d36:	f856 0008 	ldr.w	r0, [r6, r8]
 8002d3a:	f7ff fecb 	bl	8002ad4 <HASH_DataIn>
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8002d3e:	f108 0804 	add.w	r8, r8, #4
 8002d42:	45c8      	cmp	r8, r9
 8002d44:	d3f7      	bcc.n	8002d36 <HMAC_MD5+0xaa>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 8002d46:	f7ff fee1 	bl	8002b0c <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	930a      	str	r3, [sp, #40]	; 0x28
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8002d4e:	2008      	movs	r0, #8
 8002d50:	f7ff ff2c 	bl	8002bac <HASH_GetFlagStatus>
       counter++;
 8002d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d56:	3301      	adds	r3, #1
 8002d58:	930a      	str	r3, [sp, #40]	; 0x28
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8002d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d60:	d002      	beq.n	8002d68 <HMAC_MD5+0xdc>
 8002d62:	2800      	cmp	r0, #0
 8002d64:	d1f3      	bne.n	8002d4e <HMAC_MD5+0xc2>
 8002d66:	e001      	b.n	8002d6c <HMAC_MD5+0xe0>

    if (busystatus != RESET)
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	d12f      	bne.n	8002dcc <HMAC_MD5+0x140>
      status = ERROR;
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8002d6c:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8002d70:	b280      	uxth	r0, r0
 8002d72:	f7ff fea3 	bl	8002abc <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 8002d76:	2600      	movs	r6, #0
 8002d78:	e003      	b.n	8002d82 <HMAC_MD5+0xf6>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 8002d7a:	59a0      	ldr	r0, [r4, r6]
 8002d7c:	f7ff feaa 	bl	8002ad4 <HASH_DataIn>
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 8002d80:	3604      	adds	r6, #4
 8002d82:	42ae      	cmp	r6, r5
 8002d84:	d3f9      	bcc.n	8002d7a <HMAC_MD5+0xee>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 8002d86:	f7ff fec1 	bl	8002b0c <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	930a      	str	r3, [sp, #40]	; 0x28
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8002d8e:	2008      	movs	r0, #8
 8002d90:	f7ff ff0c 	bl	8002bac <HASH_GetFlagStatus>
          counter++;
 8002d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d96:	3301      	adds	r3, #1
 8002d98:	930a      	str	r3, [sp, #40]	; 0x28
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8002d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da0:	d002      	beq.n	8002da8 <HMAC_MD5+0x11c>
 8002da2:	2800      	cmp	r0, #0
 8002da4:	d1f3      	bne.n	8002d8e <HMAC_MD5+0x102>
 8002da6:	e000      	b.n	8002daa <HMAC_MD5+0x11e>

      if (busystatus != RESET)
 8002da8:	b980      	cbnz	r0, 8002dcc <HMAC_MD5+0x140>
         status = ERROR;
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 8002daa:	a801      	add	r0, sp, #4
 8002dac:	f7ff fea0 	bl	8002af0 <HASH_GetDigest>
 8002db0:	9b01      	ldr	r3, [sp, #4]
 8002db2:	ba1b      	rev	r3, r3
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	9b02      	ldr	r3, [sp, #8]
 8002db8:	ba1b      	rev	r3, r3
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	9b03      	ldr	r3, [sp, #12]
 8002dbe:	ba1b      	rev	r3, r3
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	9b04      	ldr	r3, [sp, #16]
 8002dc4:	ba1b      	rev	r3, r3
  __IO uint16_t nbvalidbitsdata = 0;
  __IO uint16_t nbvalidbitskey = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8002dc6:	2001      	movs	r0, #1
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	e000      	b.n	8002dce <HMAC_MD5+0x142>
          counter++;
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));

      if (busystatus != RESET)
      {
         status = ERROR;
 8002dcc:	2000      	movs	r0, #0
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
      }
    }
  }
  return status;  
}
 8002dce:	b00d      	add	sp, #52	; 0x34
 8002dd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002dd4 <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 8002dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  ErrorStatus status = SUCCESS;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8002dd6:	f001 0303 	and.w	r3, r1, #3
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 8002dda:	b08d      	sub	sp, #52	; 0x34
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8002ddc:	2700      	movs	r7, #0
  ErrorStatus status = SUCCESS;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8002dde:	00db      	lsls	r3, r3, #3
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8002de0:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 8002de4:	4604      	mov	r4, r0
 8002de6:	460d      	mov	r5, r1
 8002de8:	4616      	mov	r6, r2
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
 8002dea:	970a      	str	r7, [sp, #40]	; 0x28
  ErrorStatus status = SUCCESS;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8002dec:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e

  /* HASH peripheral initialization */
  HASH_DeInit();
 8002df0:	f7ff fe2c 	bl	8002a4c <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8002df4:	2320      	movs	r3, #32
  HASH_Init(&SHA1_HASH_InitStructure);
 8002df6:	a806      	add	r0, sp, #24

  /* HASH peripheral initialization */
  HASH_DeInit();

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8002df8:	9706      	str	r7, [sp, #24]
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 8002dfa:	9707      	str	r7, [sp, #28]
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8002dfc:	9308      	str	r3, [sp, #32]
  HASH_Init(&SHA1_HASH_InitStructure);
 8002dfe:	f7ff fe30 	bl	8002a62 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8002e02:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8002e06:	b280      	uxth	r0, r0
 8002e08:	f7ff fe58 	bl	8002abc <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8002e0c:	e003      	b.n	8002e16 <HASH_SHA1+0x42>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 8002e0e:	59e0      	ldr	r0, [r4, r7]
 8002e10:	f7ff fe60 	bl	8002ad4 <HASH_DataIn>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8002e14:	3704      	adds	r7, #4
 8002e16:	42af      	cmp	r7, r5
 8002e18:	d3f9      	bcc.n	8002e0e <HASH_SHA1+0x3a>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8002e1a:	f7ff fe77 	bl	8002b0c <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8002e1e:	2008      	movs	r0, #8
 8002e20:	f7ff fec4 	bl	8002bac <HASH_GetFlagStatus>
    counter++;
 8002e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e26:	3301      	adds	r3, #1
 8002e28:	930a      	str	r3, [sp, #40]	; 0x28
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8002e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e30:	d002      	beq.n	8002e38 <HASH_SHA1+0x64>
 8002e32:	2800      	cmp	r0, #0
 8002e34:	d1f3      	bne.n	8002e1e <HASH_SHA1+0x4a>
 8002e36:	e000      	b.n	8002e3a <HASH_SHA1+0x66>

  if (busystatus != RESET)
 8002e38:	b998      	cbnz	r0, 8002e62 <HASH_SHA1+0x8e>
     status = ERROR;
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 8002e3a:	a801      	add	r0, sp, #4
 8002e3c:	f7ff fe58 	bl	8002af0 <HASH_GetDigest>
 8002e40:	9b01      	ldr	r3, [sp, #4]
 8002e42:	ba1b      	rev	r3, r3
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 8002e44:	6033      	str	r3, [r6, #0]
 8002e46:	9b02      	ldr	r3, [sp, #8]
 8002e48:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 8002e4a:	6073      	str	r3, [r6, #4]
 8002e4c:	9b03      	ldr	r3, [sp, #12]
 8002e4e:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 8002e50:	60b3      	str	r3, [r6, #8]
 8002e52:	9b04      	ldr	r3, [sp, #16]
 8002e54:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 8002e56:	60f3      	str	r3, [r6, #12]
 8002e58:	9b05      	ldr	r3, [sp, #20]
 8002e5a:	ba1b      	rev	r3, r3
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8002e5c:	2001      	movs	r0, #1
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 8002e5e:	6133      	str	r3, [r6, #16]
 8002e60:	e000      	b.n	8002e64 <HASH_SHA1+0x90>
    counter++;
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));

  if (busystatus != RESET)
  {
     status = ERROR;
 8002e62:	2000      	movs	r0, #0
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
  }
  return status;
}
 8002e64:	b00d      	add	sp, #52	; 0x34
 8002e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e68 <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 8002e68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e6c:	4699      	mov	r9, r3
 8002e6e:	b08d      	sub	sp, #52	; 0x34
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8002e70:	f003 0303 	and.w	r3, r3, #3
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8002e74:	f04f 0800 	mov.w	r8, #0
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8002e78:	00db      	lsls	r3, r3, #3
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8002e7a:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  __IO uint16_t nbvalidbitskey = 0;
 8002e7e:	f8ad 802e 	strh.w	r8, [sp, #46]	; 0x2e
  uint32_t i = 0;
  __IO uint32_t counter = 0;
 8002e82:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8002e86:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8002e8a:	f001 0303 	and.w	r3, r1, #3
 8002e8e:	00db      	lsls	r3, r3, #3
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 8002e90:	460d      	mov	r5, r1
 8002e92:	4616      	mov	r6, r2
 8002e94:	4604      	mov	r4, r0

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8002e96:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 8002e9a:	9f14      	ldr	r7, [sp, #80]	; 0x50

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);

  /* HASH peripheral initialization */
  HASH_DeInit();
 8002e9c:	f7ff fdd6 	bl	8002a4c <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 8002ea0:	2340      	movs	r3, #64	; 0x40
 8002ea2:	9307      	str	r3, [sp, #28]
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8002ea4:	2320      	movs	r3, #32
  if(Keylen > 64)
 8002ea6:	2d40      	cmp	r5, #64	; 0x40
  HASH_DeInit();

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8002ea8:	9308      	str	r3, [sp, #32]
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 8002eaa:	a806      	add	r0, sp, #24
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  if(Keylen > 64)
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 8002eac:	bf8c      	ite	hi
 8002eae:	f44f 3380 	movhi.w	r3, #65536	; 0x10000
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8002eb2:	f8cd 8024 	strls.w	r8, [sp, #36]	; 0x24

  /* HASH peripheral initialization */
  HASH_DeInit();

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8002eb6:	f8cd 8018 	str.w	r8, [sp, #24]
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  if(Keylen > 64)
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 8002eba:	bf88      	it	hi
 8002ebc:	9309      	strhi	r3, [sp, #36]	; 0x24
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 8002ebe:	f7ff fdd0 	bl	8002a62 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8002ec2:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8002ec6:	b280      	uxth	r0, r0
 8002ec8:	f7ff fdf8 	bl	8002abc <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8002ecc:	f04f 0800 	mov.w	r8, #0
 8002ed0:	e005      	b.n	8002ede <HMAC_SHA1+0x76>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 8002ed2:	f854 0008 	ldr.w	r0, [r4, r8]
 8002ed6:	f7ff fdfd 	bl	8002ad4 <HASH_DataIn>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8002eda:	f108 0804 	add.w	r8, r8, #4
 8002ede:	45a8      	cmp	r8, r5
 8002ee0:	d3f7      	bcc.n	8002ed2 <HMAC_SHA1+0x6a>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8002ee2:	f7ff fe13 	bl	8002b0c <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8002ee6:	2008      	movs	r0, #8
 8002ee8:	f7ff fe60 	bl	8002bac <HASH_GetFlagStatus>
    counter++;
 8002eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002eee:	3301      	adds	r3, #1
 8002ef0:	930a      	str	r3, [sp, #40]	; 0x28
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8002ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef8:	d002      	beq.n	8002f00 <HMAC_SHA1+0x98>
 8002efa:	2800      	cmp	r0, #0
 8002efc:	d1f3      	bne.n	8002ee6 <HMAC_SHA1+0x7e>
 8002efe:	e001      	b.n	8002f04 <HMAC_SHA1+0x9c>

  if (busystatus != RESET)
 8002f00:	2800      	cmp	r0, #0
 8002f02:	d155      	bne.n	8002fb0 <HMAC_SHA1+0x148>
     status = ERROR;
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8002f04:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 8002f08:	b280      	uxth	r0, r0
 8002f0a:	f7ff fdd7 	bl	8002abc <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8002f0e:	f04f 0800 	mov.w	r8, #0
 8002f12:	e005      	b.n	8002f20 <HMAC_SHA1+0xb8>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 8002f14:	f856 0008 	ldr.w	r0, [r6, r8]
 8002f18:	f7ff fddc 	bl	8002ad4 <HASH_DataIn>
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8002f1c:	f108 0804 	add.w	r8, r8, #4
 8002f20:	45c8      	cmp	r8, r9
 8002f22:	d3f7      	bcc.n	8002f14 <HMAC_SHA1+0xac>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 8002f24:	f7ff fdf2 	bl	8002b0c <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	930a      	str	r3, [sp, #40]	; 0x28
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8002f2c:	2008      	movs	r0, #8
 8002f2e:	f7ff fe3d 	bl	8002bac <HASH_GetFlagStatus>
      counter++;
 8002f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f34:	3301      	adds	r3, #1
 8002f36:	930a      	str	r3, [sp, #40]	; 0x28
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8002f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3e:	d002      	beq.n	8002f46 <HMAC_SHA1+0xde>
 8002f40:	2800      	cmp	r0, #0
 8002f42:	d1f3      	bne.n	8002f2c <HMAC_SHA1+0xc4>
 8002f44:	e001      	b.n	8002f4a <HMAC_SHA1+0xe2>

    if (busystatus != RESET)
 8002f46:	2800      	cmp	r0, #0
 8002f48:	d132      	bne.n	8002fb0 <HMAC_SHA1+0x148>
      status = ERROR;
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8002f4a:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8002f4e:	b280      	uxth	r0, r0
 8002f50:	f7ff fdb4 	bl	8002abc <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 8002f54:	2600      	movs	r6, #0
 8002f56:	e003      	b.n	8002f60 <HMAC_SHA1+0xf8>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 8002f58:	59a0      	ldr	r0, [r4, r6]
 8002f5a:	f7ff fdbb 	bl	8002ad4 <HASH_DataIn>
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 8002f5e:	3604      	adds	r6, #4
 8002f60:	42ae      	cmp	r6, r5
 8002f62:	d3f9      	bcc.n	8002f58 <HMAC_SHA1+0xf0>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 8002f64:	f7ff fdd2 	bl	8002b0c <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	930a      	str	r3, [sp, #40]	; 0x28
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8002f6c:	2008      	movs	r0, #8
 8002f6e:	f7ff fe1d 	bl	8002bac <HASH_GetFlagStatus>
        counter++;
 8002f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f74:	3301      	adds	r3, #1
 8002f76:	930a      	str	r3, [sp, #40]	; 0x28
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8002f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7e:	d002      	beq.n	8002f86 <HMAC_SHA1+0x11e>
 8002f80:	2800      	cmp	r0, #0
 8002f82:	d1f3      	bne.n	8002f6c <HMAC_SHA1+0x104>
 8002f84:	e000      	b.n	8002f88 <HMAC_SHA1+0x120>

      if (busystatus != RESET)
 8002f86:	b998      	cbnz	r0, 8002fb0 <HMAC_SHA1+0x148>
        status = ERROR;
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 8002f88:	a801      	add	r0, sp, #4
 8002f8a:	f7ff fdb1 	bl	8002af0 <HASH_GetDigest>
 8002f8e:	9b01      	ldr	r3, [sp, #4]
 8002f90:	ba1b      	rev	r3, r3
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	ba1b      	rev	r3, r3
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	9b03      	ldr	r3, [sp, #12]
 8002f9c:	ba1b      	rev	r3, r3
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	9b04      	ldr	r3, [sp, #16]
 8002fa2:	ba1b      	rev	r3, r3
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	9b05      	ldr	r3, [sp, #20]
 8002fa8:	ba1b      	rev	r3, r3
  __IO uint16_t nbvalidbitsdata = 0;
  __IO uint16_t nbvalidbitskey = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8002faa:	2001      	movs	r0, #1
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	e000      	b.n	8002fb2 <HMAC_SHA1+0x14a>
        counter++;
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));

      if (busystatus != RESET)
      {
        status = ERROR;
 8002fb0:	2000      	movs	r0, #0
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
      }
    }  
  }
  return status;  
}
 8002fb2:	b00d      	add	sp, #52	; 0x34
 8002fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002fb8 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8002fb8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <I2C_DeInit+0x50>)
 8002fbc:	4298      	cmp	r0, r3
 8002fbe:	d107      	bne.n	8002fd0 <I2C_DeInit+0x18>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8002fc0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	f000 fc15 	bl	80037f4 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8002fca:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002fce:	e014      	b.n	8002ffa <I2C_DeInit+0x42>
  }
  else if (I2Cx == I2C2)
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	; (800300c <I2C_DeInit+0x54>)
 8002fd2:	4298      	cmp	r0, r3
 8002fd4:	d107      	bne.n	8002fe6 <I2C_DeInit+0x2e>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8002fd6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002fda:	2101      	movs	r1, #1
 8002fdc:	f000 fc0a 	bl	80037f4 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8002fe0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002fe4:	e009      	b.n	8002ffa <I2C_DeInit+0x42>
  }
  else 
  {
    if (I2Cx == I2C3)
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <I2C_DeInit+0x58>)
 8002fe8:	4298      	cmp	r0, r3
 8002fea:	d10b      	bne.n	8003004 <I2C_DeInit+0x4c>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8002fec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	f000 fbff 	bl	80037f4 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8002ff6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002ffa:	2100      	movs	r1, #0
    }
  }
}
 8002ffc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8003000:	f000 bbf8 	b.w	80037f4 <RCC_APB1PeriphResetCmd>
 8003004:	bd08      	pop	{r3, pc}
 8003006:	bf00      	nop
 8003008:	40005400 	.word	0x40005400
 800300c:	40005800 	.word	0x40005800
 8003010:	40005c00 	.word	0x40005c00

08003014 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8003014:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003016:	4604      	mov	r4, r0
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8003018:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800301a:	4668      	mov	r0, sp
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800301c:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800301e:	f000 fb19 	bl	8003654 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8003022:	9902      	ldr	r1, [sp, #8]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8003024:	482c      	ldr	r0, [pc, #176]	; (80030d8 <I2C_Init+0xc4>)
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8003026:	682b      	ldr	r3, [r5, #0]

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8003028:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 800302c:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800302e:	fbb1 f0f0 	udiv	r0, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8003032:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8003034:	b280      	uxth	r0, r0
  tmpreg |= freqrange;
 8003036:	4306      	orrs	r6, r0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8003038:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800303a:	8822      	ldrh	r2, [r4, #0]
 800303c:	f022 0201 	bic.w	r2, r2, #1
 8003040:	0412      	lsls	r2, r2, #16
 8003042:	0c12      	lsrs	r2, r2, #16
 8003044:	8022      	strh	r2, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8003046:	4a25      	ldr	r2, [pc, #148]	; (80030dc <I2C_Init+0xc8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d80a      	bhi.n	8003062 <I2C_Init+0x4e>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	fbb1 f3f3 	udiv	r3, r1, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8003052:	3001      	adds	r0, #1

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8003054:	b29b      	uxth	r3, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8003056:	b280      	uxth	r0, r0
 8003058:	8420      	strh	r0, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800305a:	2b03      	cmp	r3, #3
 800305c:	bf98      	it	ls
 800305e:	2304      	movls	r3, #4
 8003060:	e021      	b.n	80030a6 <I2C_Init+0x92>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8003062:	88ee      	ldrh	r6, [r5, #6]
 8003064:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8003068:	4296      	cmp	r6, r2
 800306a:	d105      	bne.n	8003078 <I2C_Init+0x64>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800306c:	2203      	movs	r2, #3
 800306e:	4353      	muls	r3, r2
 8003070:	fbb1 f3f3 	udiv	r3, r1, r3
 8003074:	b29b      	uxth	r3, r3
 8003076:	e006      	b.n	8003086 <I2C_Init+0x72>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8003078:	2219      	movs	r2, #25
 800307a:	4353      	muls	r3, r2
 800307c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003080:	b29b      	uxth	r3, r3
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8003082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8003086:	051a      	lsls	r2, r3, #20
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8003088:	f44f 7296 	mov.w	r2, #300	; 0x12c

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800308c:	bf08      	it	eq
 800308e:	f043 0301 	orreq.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8003092:	4350      	muls	r0, r2
 8003094:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003098:	fb90 f0f2 	sdiv	r0, r0, r2
 800309c:	3001      	adds	r0, #1
 800309e:	b280      	uxth	r0, r0
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80030a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80030a4:	8420      	strh	r0, [r4, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80030a6:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80030a8:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80030aa:	8969      	ldrh	r1, [r5, #10]
 80030ac:	88aa      	ldrh	r2, [r5, #4]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80030b6:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80030b8:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80030bc:	f023 0302 	bic.w	r3, r3, #2
 80030c0:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80030c2:	430a      	orrs	r2, r1

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80030c4:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80030c6:	4313      	orrs	r3, r2
 80030c8:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80030ca:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80030cc:	892a      	ldrh	r2, [r5, #8]
 80030ce:	89ab      	ldrh	r3, [r5, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	8123      	strh	r3, [r4, #8]
}
 80030d6:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80030d8:	000f4240 	.word	0x000f4240
 80030dc:	000186a0 	.word	0x000186a0

080030e0 <I2C_StructInit>:
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 80030e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80030e4:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 80030e6:	2300      	movs	r3, #0
 80030e8:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80030ea:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 80030ee:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 80030f0:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80030f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80030f6:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80030f8:	8183      	strh	r3, [r0, #12]
}
 80030fa:	4770      	bx	lr

080030fc <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80030fc:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80030fe:	b119      	cbz	r1, 8003108 <I2C_Cmd+0xc>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8003100:	b29b      	uxth	r3, r3
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	e003      	b.n	8003110 <I2C_Cmd+0x14>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	041b      	lsls	r3, r3, #16
 800310e:	0c1b      	lsrs	r3, r3, #16
 8003110:	8003      	strh	r3, [r0, #0]
 8003112:	4770      	bx	lr

08003114 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8003114:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003116:	b119      	cbz	r1, 8003120 <I2C_GenerateSTART+0xc>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8003118:	b29b      	uxth	r3, r3
 800311a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311e:	e003      	b.n	8003128 <I2C_GenerateSTART+0x14>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8003120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003124:	041b      	lsls	r3, r3, #16
 8003126:	0c1b      	lsrs	r3, r3, #16
 8003128:	8003      	strh	r3, [r0, #0]
 800312a:	4770      	bx	lr

0800312c <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800312c:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800312e:	b119      	cbz	r1, 8003138 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8003130:	b29b      	uxth	r3, r3
 8003132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003136:	e003      	b.n	8003140 <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8003138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800313c:	041b      	lsls	r3, r3, #16
 800313e:	0c1b      	lsrs	r3, r3, #16
 8003140:	8003      	strh	r3, [r0, #0]
 8003142:	4770      	bx	lr

08003144 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8003144:	b112      	cbz	r2, 800314c <I2C_Send7bitAddress+0x8>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8003146:	f041 0101 	orr.w	r1, r1, #1
 800314a:	e001      	b.n	8003150 <I2C_Send7bitAddress+0xc>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800314c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 8003150:	8201      	strh	r1, [r0, #16]
}
 8003152:	4770      	bx	lr

08003154 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8003154:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003156:	b119      	cbz	r1, 8003160 <I2C_AcknowledgeConfig+0xc>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8003158:	b29b      	uxth	r3, r3
 800315a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800315e:	e003      	b.n	8003168 <I2C_AcknowledgeConfig+0x14>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8003160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003164:	041b      	lsls	r3, r3, #16
 8003166:	0c1b      	lsrs	r3, r3, #16
 8003168:	8003      	strh	r3, [r0, #0]
 800316a:	4770      	bx	lr

0800316c <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800316c:	8983      	ldrh	r3, [r0, #12]
 800316e:	b29b      	uxth	r3, r3

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8003170:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8003174:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8003178:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800317a:	8183      	strh	r3, [r0, #12]
}
 800317c:	4770      	bx	lr

0800317e <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800317e:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003180:	b119      	cbz	r1, 800318a <I2C_DualAddressCmd+0xc>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8003182:	b29b      	uxth	r3, r3
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	e003      	b.n	8003192 <I2C_DualAddressCmd+0x14>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	041b      	lsls	r3, r3, #16
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	8183      	strh	r3, [r0, #12]
 8003194:	4770      	bx	lr

08003196 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8003196:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003198:	b119      	cbz	r1, 80031a2 <I2C_GeneralCallCmd+0xc>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800319a:	b29b      	uxth	r3, r3
 800319c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031a0:	e003      	b.n	80031aa <I2C_GeneralCallCmd+0x14>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 80031a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a6:	041b      	lsls	r3, r3, #16
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	8003      	strh	r3, [r0, #0]
 80031ac:	4770      	bx	lr

080031ae <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80031ae:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80031b0:	b129      	cbz	r1, 80031be <I2C_SoftwareResetCmd+0x10>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80031b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	e001      	b.n	80031c2 <I2C_SoftwareResetCmd+0x14>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 80031be:	045b      	lsls	r3, r3, #17
 80031c0:	0c5b      	lsrs	r3, r3, #17
 80031c2:	8003      	strh	r3, [r0, #0]
 80031c4:	4770      	bx	lr

080031c6 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80031c6:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 80031c8:	b919      	cbnz	r1, 80031d2 <I2C_StretchClockCmd+0xc>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d0:	e003      	b.n	80031da <I2C_StretchClockCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 80031d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d6:	041b      	lsls	r3, r3, #16
 80031d8:	0c1b      	lsrs	r3, r3, #16
 80031da:	8003      	strh	r3, [r0, #0]
 80031dc:	4770      	bx	lr

080031de <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80031de:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80031e2:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80031e4:	d004      	beq.n	80031f0 <I2C_FastModeDutyCycleConfig+0x12>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80031e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ea:	041b      	lsls	r3, r3, #16
 80031ec:	0c1b      	lsrs	r3, r3, #16
 80031ee:	e002      	b.n	80031f6 <I2C_FastModeDutyCycleConfig+0x18>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f6:	8383      	strh	r3, [r0, #28]
 80031f8:	4770      	bx	lr

080031fa <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80031fa:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80031fe:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8003200:	d103      	bne.n	800320a <I2C_NACKPositionConfig+0x10>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8003202:	b29b      	uxth	r3, r3
 8003204:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003208:	e003      	b.n	8003212 <I2C_NACKPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 800320a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800320e:	041b      	lsls	r3, r3, #16
 8003210:	0c1b      	lsrs	r3, r3, #16
 8003212:	8003      	strh	r3, [r0, #0]
 8003214:	4770      	bx	lr

08003216 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8003216:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800321a:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800321c:	d103      	bne.n	8003226 <I2C_SMBusAlertConfig+0x10>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800321e:	b29b      	uxth	r3, r3
 8003220:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003224:	e003      	b.n	800322e <I2C_SMBusAlertConfig+0x18>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8003226:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800322a:	041b      	lsls	r3, r3, #16
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	8003      	strh	r3, [r0, #0]
 8003230:	4770      	bx	lr

08003232 <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8003232:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003234:	b119      	cbz	r1, 800323e <I2C_ARPCmd+0xc>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8003236:	b29b      	uxth	r3, r3
 8003238:	f043 0310 	orr.w	r3, r3, #16
 800323c:	e003      	b.n	8003246 <I2C_ARPCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800323e:	f023 0310 	bic.w	r3, r3, #16
 8003242:	041b      	lsls	r3, r3, #16
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	8003      	strh	r3, [r0, #0]
 8003248:	4770      	bx	lr

0800324a <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800324a:	8201      	strh	r1, [r0, #16]
}
 800324c:	4770      	bx	lr

0800324e <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800324e:	8a00      	ldrh	r0, [r0, #16]
}
 8003250:	b2c0      	uxtb	r0, r0
 8003252:	4770      	bx	lr

08003254 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8003254:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003256:	b119      	cbz	r1, 8003260 <I2C_TransmitPEC+0xc>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8003258:	b29b      	uxth	r3, r3
 800325a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800325e:	e003      	b.n	8003268 <I2C_TransmitPEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8003260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003264:	041b      	lsls	r3, r3, #16
 8003266:	0c1b      	lsrs	r3, r3, #16
 8003268:	8003      	strh	r3, [r0, #0]
 800326a:	4770      	bx	lr

0800326c <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800326c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8003270:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8003272:	d103      	bne.n	800327c <I2C_PECPositionConfig+0x10>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8003274:	b29b      	uxth	r3, r3
 8003276:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800327a:	e003      	b.n	8003284 <I2C_PECPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800327c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	0c1b      	lsrs	r3, r3, #16
 8003284:	8003      	strh	r3, [r0, #0]
 8003286:	4770      	bx	lr

08003288 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8003288:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800328a:	b119      	cbz	r1, 8003294 <I2C_CalculatePEC+0xc>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 800328c:	b29b      	uxth	r3, r3
 800328e:	f043 0320 	orr.w	r3, r3, #32
 8003292:	e003      	b.n	800329c <I2C_CalculatePEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8003294:	f023 0320 	bic.w	r3, r3, #32
 8003298:	041b      	lsls	r3, r3, #16
 800329a:	0c1b      	lsrs	r3, r3, #16
 800329c:	8003      	strh	r3, [r0, #0]
 800329e:	4770      	bx	lr

080032a0 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 80032a0:	8b00      	ldrh	r0, [r0, #24]
}
 80032a2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80032a6:	4770      	bx	lr

080032a8 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80032a8:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80032aa:	b119      	cbz	r1, 80032b4 <I2C_DMACmd+0xc>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032b2:	e003      	b.n	80032bc <I2C_DMACmd+0x14>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80032b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032b8:	041b      	lsls	r3, r3, #16
 80032ba:	0c1b      	lsrs	r3, r3, #16
 80032bc:	8083      	strh	r3, [r0, #4]
 80032be:	4770      	bx	lr

080032c0 <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80032c0:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80032c2:	b119      	cbz	r1, 80032cc <I2C_DMALastTransferCmd+0xc>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032ca:	e003      	b.n	80032d4 <I2C_DMALastTransferCmd+0x14>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 80032cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032d0:	041b      	lsls	r3, r3, #16
 80032d2:	0c1b      	lsrs	r3, r3, #16
 80032d4:	8083      	strh	r3, [r0, #4]
 80032d6:	4770      	bx	lr

080032d8 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80032d8:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 80032de:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 80032e0:	9b01      	ldr	r3, [sp, #4]
 80032e2:	18cb      	adds	r3, r1, r3
 80032e4:	9301      	str	r3, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 80032e6:	9b01      	ldr	r3, [sp, #4]
 80032e8:	8818      	ldrh	r0, [r3, #0]
}
 80032ea:	b280      	uxth	r0, r0
 80032ec:	b002      	add	sp, #8
 80032ee:	4770      	bx	lr

080032f0 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80032f0:	8883      	ldrh	r3, [r0, #4]
 80032f2:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80032f4:	b10a      	cbz	r2, 80032fa <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80032f6:	4319      	orrs	r1, r3
 80032f8:	e001      	b.n	80032fe <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80032fa:	ea23 0101 	bic.w	r1, r3, r1
 80032fe:	8081      	strh	r1, [r0, #4]
 8003300:	4770      	bx	lr

08003302 <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003302:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8003304:	8b00      	ldrh	r0, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003306:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8003308:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800330c:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800330e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 8003312:	1a43      	subs	r3, r0, r1
 8003314:	4258      	negs	r0, r3
 8003316:	eb40 0003 	adc.w	r0, r0, r3
 800331a:	4770      	bx	lr

0800331c <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800331c:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 800331e:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003320:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8003322:	ea43 4000 	orr.w	r0, r3, r0, lsl #16

  /* Return status */
  return lastevent;
}
 8003326:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800332a:	4770      	bx	lr

0800332c <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800332c:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	9301      	str	r3, [sp, #4]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8003334:	0f0b      	lsrs	r3, r1, #28
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8003336:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8003338:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 800333a:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800333c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 8003340:	b113      	cbz	r3, 8003348 <I2C_GetFlagStatus+0x1c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8003342:	9b01      	ldr	r3, [sp, #4]
 8003344:	3314      	adds	r3, #20
 8003346:	e002      	b.n	800334e <I2C_GetFlagStatus+0x22>
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8003348:	9b01      	ldr	r3, [sp, #4]
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800334a:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800334c:	3318      	adds	r3, #24
 800334e:	9301      	str	r3, [sp, #4]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8003350:	9b01      	ldr	r3, [sp, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8003354:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8003356:	bf0c      	ite	eq
 8003358:	2000      	moveq	r0, #0
 800335a:	2001      	movne	r0, #1
 800335c:	b002      	add	sp, #8
 800335e:	4770      	bx	lr

08003360 <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8003360:	43c9      	mvns	r1, r1
 8003362:	b289      	uxth	r1, r1
 8003364:	8281      	strh	r1, [r0, #20]
}
 8003366:	4770      	bx	lr

08003368 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8003368:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800336a:	8a80      	ldrh	r0, [r0, #20]
 800336c:	b280      	uxth	r0, r0
 800336e:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8003370:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8003372:	d006      	beq.n	8003382 <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8003374:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 8003378:	ea13 4111 	ands.w	r1, r3, r1, lsr #16

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
  {
    /* I2C_IT is set */
    bitstatus = SET;
 800337c:	bf0c      	ite	eq
 800337e:	2000      	moveq	r0, #0
 8003380:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 8003382:	4770      	bx	lr

08003384 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8003384:	43c9      	mvns	r1, r1
 8003386:	b289      	uxth	r1, r1
 8003388:	8281      	strh	r1, [r0, #20]
}
 800338a:	4770      	bx	lr

0800338c <IWDG_WriteAccessCmd>:
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 800338c:	4b01      	ldr	r3, [pc, #4]	; (8003394 <IWDG_WriteAccessCmd+0x8>)
 800338e:	6018      	str	r0, [r3, #0]
}
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40003000 	.word	0x40003000

08003398 <IWDG_SetPrescaler>:
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 8003398:	4b01      	ldr	r3, [pc, #4]	; (80033a0 <IWDG_SetPrescaler+0x8>)
 800339a:	6058      	str	r0, [r3, #4]
}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40003000 	.word	0x40003000

080033a4 <IWDG_SetReload>:
  */
void IWDG_SetReload(uint16_t Reload)
{
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 80033a4:	4b01      	ldr	r3, [pc, #4]	; (80033ac <IWDG_SetReload+0x8>)
 80033a6:	6098      	str	r0, [r3, #8]
}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40003000 	.word	0x40003000

080033b0 <IWDG_ReloadCounter>:
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
  IWDG->KR = KR_KEY_RELOAD;
 80033b0:	4b02      	ldr	r3, [pc, #8]	; (80033bc <IWDG_ReloadCounter+0xc>)
 80033b2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80033b6:	601a      	str	r2, [r3, #0]
}
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40003000 	.word	0x40003000

080033c0 <IWDG_Enable>:
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
  IWDG->KR = KR_KEY_ENABLE;
 80033c0:	4b02      	ldr	r3, [pc, #8]	; (80033cc <IWDG_Enable+0xc>)
 80033c2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80033c6:	601a      	str	r2, [r3, #0]
}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40003000 	.word	0x40003000

080033d0 <IWDG_GetFlagStatus>:
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <IWDG_GetFlagStatus+0x10>)
 80033d2:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 80033d4:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 80033d6:	bf0c      	ite	eq
 80033d8:	2000      	moveq	r0, #0
 80033da:	2001      	movne	r0, #1
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40003000 	.word	0x40003000

080033e4 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 80033e4:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 80033e6:	2101      	movs	r1, #1
 80033e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80033ec:	f000 fa02 	bl	80037f4 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 80033f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80033f4:	2100      	movs	r1, #0
}
 80033f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void PWR_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 80033fa:	f000 b9fb 	b.w	80037f4 <RCC_APB1PeriphResetCmd>

080033fe <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 80033fe:	4b01      	ldr	r3, [pc, #4]	; (8003404 <PWR_BackupAccessCmd+0x6>)
 8003400:	6018      	str	r0, [r3, #0]
}
 8003402:	4770      	bx	lr
 8003404:	420e0020 	.word	0x420e0020

08003408 <PWR_PVDLevelConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <PWR_PVDLevelConfig+0x10>)
 800340a:	681a      	ldr	r2, [r3, #0]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 800340c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8003410:	4302      	orrs	r2, r0
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8003412:	601a      	str	r2, [r3, #0]
}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40007000 	.word	0x40007000

0800341c <PWR_PVDCmd>:
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 800341c:	4b01      	ldr	r3, [pc, #4]	; (8003424 <PWR_PVDCmd+0x8>)
 800341e:	6018      	str	r0, [r3, #0]
}
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	420e0010 	.word	0x420e0010

08003428 <PWR_WakeUpPinCmd>:
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 8003428:	4b01      	ldr	r3, [pc, #4]	; (8003430 <PWR_WakeUpPinCmd+0x8>)
 800342a:	6018      	str	r0, [r3, #0]
}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	420e00a0 	.word	0x420e00a0

08003434 <PWR_BackupRegulatorCmd>:
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 8003434:	4b01      	ldr	r3, [pc, #4]	; (800343c <PWR_BackupRegulatorCmd+0x8>)
 8003436:	6018      	str	r0, [r3, #0]
}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	420e00a4 	.word	0x420e00a4

08003440 <PWR_MainRegulatorModeConfig>:
  *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
  *                                                System frequency up to 144 MHz.    
  * @retval None
  */
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <PWR_MainRegulatorModeConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
  {
    PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 8003442:	681a      	ldr	r2, [r3, #0]
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
 8003444:	b910      	cbnz	r0, 800344c <PWR_MainRegulatorModeConfig+0xc>
  {
    PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 8003446:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800344a:	e001      	b.n	8003450 <PWR_MainRegulatorModeConfig+0x10>
  }
  else
  {    
    PWR->CR |= PWR_Regulator_Voltage_Scale1;
 800344c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	4770      	bx	lr
 8003454:	40007000 	.word	0x40007000

08003458 <PWR_FlashPowerDownCmd>:
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 8003458:	4b01      	ldr	r3, [pc, #4]	; (8003460 <PWR_FlashPowerDownCmd+0x8>)
 800345a:	6018      	str	r0, [r3, #0]
}
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	420e0024 	.word	0x420e0024

08003464 <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003464:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <PWR_EnterSTOPMode+0x2c>)
 8003466:	681a      	ldr	r2, [r3, #0]
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 8003468:	f022 0203 	bic.w	r2, r2, #3
  
  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800346c:	4302      	orrs	r2, r0
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800346e:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <PWR_EnterSTOPMode+0x30>)
 8003472:	691a      	ldr	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8003474:	2901      	cmp	r1, #1
  
  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003476:	f042 0204 	orr.w	r2, r2, #4
 800347a:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800347c:	d101      	bne.n	8003482 <PWR_EnterSTOPMode+0x1e>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800347e:	bf30      	wfi
 8003480:	e000      	b.n	8003484 <PWR_EnterSTOPMode+0x20>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 8003482:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	f022 0204 	bic.w	r2, r2, #4
 800348a:	611a      	str	r2, [r3, #16]
}
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40007000 	.word	0x40007000
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <PWR_EnterSTANDBYMode>:
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 8003498:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <PWR_EnterSTANDBYMode+0x20>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	f042 0204 	orr.w	r2, r2, #4
 80034a0:	601a      	str	r2, [r3, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	f042 0202 	orr.w	r2, r2, #2
 80034a8:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80034aa:	4b04      	ldr	r3, [pc, #16]	; (80034bc <PWR_EnterSTANDBYMode+0x24>)
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	f042 0204 	orr.w	r2, r2, #4
 80034b2:	611a      	str	r2, [r3, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80034b4:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 80034b6:	4770      	bx	lr
 80034b8:	40007000 	.word	0x40007000
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <PWR_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <PWR_GetFlagStatus+0x10>)
 80034c2:	685b      	ldr	r3, [r3, #4]
  {
    bitstatus = SET;
 80034c4:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 80034c6:	bf0c      	ite	eq
 80034c8:	2000      	moveq	r0, #0
 80034ca:	2001      	movne	r0, #1
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40007000 	.word	0x40007000

080034d4 <PWR_ClearFlag>:
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 80034d4:	4b02      	ldr	r3, [pc, #8]	; (80034e0 <PWR_ClearFlag+0xc>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
 80034dc:	601a      	str	r2, [r3, #0]
}
 80034de:	4770      	bx	lr
 80034e0:	40007000 	.word	0x40007000

080034e4 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80034e4:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <RCC_DeInit+0x2c>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80034f2:	6819      	ldr	r1, [r3, #0]
 80034f4:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80034f8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80034fc:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80034fe:	4905      	ldr	r1, [pc, #20]	; (8003514 <RCC_DeInit+0x30>)
 8003500:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003502:	6819      	ldr	r1, [r3, #0]
 8003504:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003508:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800350a:	60da      	str	r2, [r3, #12]
}
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800
 8003514:	24003010 	.word	0x24003010

08003518 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8003518:	4b02      	ldr	r3, [pc, #8]	; (8003524 <RCC_HSEConfig+0xc>)
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800351e:	7018      	strb	r0, [r3, #0]
}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40023802 	.word	0x40023802

08003528 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8003528:	4b03      	ldr	r3, [pc, #12]	; (8003538 <RCC_AdjustHSICalibrationValue+0x10>)
 800352a:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800352c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8003530:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8003534:	601a      	str	r2, [r3, #0]
}
 8003536:	4770      	bx	lr
 8003538:	40023800 	.word	0x40023800

0800353c <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800353c:	4b01      	ldr	r3, [pc, #4]	; (8003544 <RCC_HSICmd+0x8>)
 800353e:	6018      	str	r0, [r3, #0]
}
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	42470000 	.word	0x42470000

08003548 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <RCC_LSEConfig+0x1c>)
 800354a:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800354c:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800354e:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8003550:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8003552:	d002      	beq.n	800355a <RCC_LSEConfig+0x12>
 8003554:	2804      	cmp	r0, #4
 8003556:	d104      	bne.n	8003562 <RCC_LSEConfig+0x1a>
 8003558:	e001      	b.n	800355e <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800355a:	7018      	strb	r0, [r3, #0]
      break;
 800355c:	4770      	bx	lr
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800355e:	2205      	movs	r2, #5
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	4770      	bx	lr
 8003564:	40023870 	.word	0x40023870

08003568 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8003568:	4b01      	ldr	r3, [pc, #4]	; (8003570 <RCC_LSICmd+0x8>)
 800356a:	6018      	str	r0, [r3, #0]
}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	42470e80 	.word	0x42470e80

08003574 <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8003574:	4301      	orrs	r1, r0
 8003576:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 800357a:	9900      	ldr	r1, [sp, #0]
 800357c:	085b      	lsrs	r3, r3, #1
 800357e:	3b01      	subs	r3, #1
 8003580:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8003584:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8003588:	4b01      	ldr	r3, [pc, #4]	; (8003590 <RCC_PLLConfig+0x1c>)
 800358a:	6059      	str	r1, [r3, #4]
                 (PLLQ << 24);
}
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800

08003594 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8003594:	4b01      	ldr	r3, [pc, #4]	; (800359c <RCC_PLLCmd+0x8>)
 8003596:	6018      	str	r0, [r3, #0]
}
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	42470060 	.word	0x42470060

080035a0 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80035a0:	0180      	lsls	r0, r0, #6
 80035a2:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <RCC_PLLI2SConfig+0x10>)
 80035a4:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 80035a8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800

080035b4 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80035b4:	4b01      	ldr	r3, [pc, #4]	; (80035bc <RCC_PLLI2SCmd+0x8>)
 80035b6:	6018      	str	r0, [r3, #0]
}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	42470068 	.word	0x42470068

080035c0 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80035c0:	4b01      	ldr	r3, [pc, #4]	; (80035c8 <RCC_ClockSecuritySystemCmd+0x8>)
 80035c2:	6018      	str	r0, [r3, #0]
}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	4247004c 	.word	0x4247004c

080035cc <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 80035cc:	4b03      	ldr	r3, [pc, #12]	; (80035dc <RCC_MCO1Config+0x10>)
 80035ce:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 80035d0:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 80035d4:	4302      	orrs	r2, r0
 80035d6:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80035d8:	609a      	str	r2, [r3, #8]
}
 80035da:	4770      	bx	lr
 80035dc:	40023800 	.word	0x40023800

080035e0 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <RCC_MCO2Config+0x10>)
 80035e2:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 80035e4:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 80035e8:	4302      	orrs	r2, r0
 80035ea:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80035ec:	609a      	str	r2, [r3, #8]
}
 80035ee:	4770      	bx	lr
 80035f0:	40023800 	.word	0x40023800

080035f4 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80035f4:	4b03      	ldr	r3, [pc, #12]	; (8003604 <RCC_SYSCLKConfig+0x10>)
 80035f6:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80035f8:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80035fc:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80035fe:	609a      	str	r2, [r3, #8]
}
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40023800 	.word	0x40023800

08003608 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8003608:	4b02      	ldr	r3, [pc, #8]	; (8003614 <RCC_GetSYSCLKSource+0xc>)
 800360a:	6898      	ldr	r0, [r3, #8]
}
 800360c:	f000 000c 	and.w	r0, r0, #12
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800

08003618 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8003618:	4b03      	ldr	r3, [pc, #12]	; (8003628 <RCC_HCLKConfig+0x10>)
 800361a:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800361c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8003620:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003622:	609a      	str	r2, [r3, #8]
}
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800

0800362c <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <RCC_PCLK1Config+0x10>)
 800362e:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8003630:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8003634:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003636:	609a      	str	r2, [r3, #8]
}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40023800 	.word	0x40023800

08003640 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8003640:	4b03      	ldr	r3, [pc, #12]	; (8003650 <RCC_PCLK2Config+0x10>)
 8003642:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8003644:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8003648:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800364c:	609a      	str	r2, [r3, #8]
}
 800364e:	4770      	bx	lr
 8003650:	40023800 	.word	0x40023800

08003654 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003654:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <RCC_GetClocksFreq+0x7c>)
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 800365c:	2a04      	cmp	r2, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800365e:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8003660:	d003      	beq.n	800366a <RCC_GetClocksFreq+0x16>
 8003662:	2a08      	cmp	r2, #8
 8003664:	d003      	beq.n	800366e <RCC_GetClocksFreq+0x1a>
 8003666:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <RCC_GetClocksFreq+0x80>)
 8003668:	e018      	b.n	800369c <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800366a:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <RCC_GetClocksFreq+0x84>)
 800366c:	e016      	b.n	800369c <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800366e:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003670:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8003672:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003676:	6859      	ldr	r1, [r3, #4]
 8003678:	bf14      	ite	ne
 800367a:	4b17      	ldrne	r3, [pc, #92]	; (80036d8 <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800367c:	4b15      	ldreq	r3, [pc, #84]	; (80036d4 <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800367e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003682:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003686:	4a12      	ldr	r2, [pc, #72]	; (80036d0 <RCC_GetClocksFreq+0x7c>)
 8003688:	6852      	ldr	r2, [r2, #4]
 800368a:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800368e:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003692:	3201      	adds	r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003694:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003696:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8003698:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800369c:	490c      	ldr	r1, [pc, #48]	; (80036d0 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800369e:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80036a0:	688b      	ldr	r3, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 80036a2:	4a0e      	ldr	r2, [pc, #56]	; (80036dc <RCC_GetClocksFreq+0x88>)
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80036a4:	6804      	ldr	r4, [r0, #0]
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 80036a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 80036aa:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80036ac:	fa34 f303 	lsrs.w	r3, r4, r3
 80036b0:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80036b2:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 80036b4:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 80036b8:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80036ba:	fa33 f404 	lsrs.w	r4, r3, r4
 80036be:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80036c0:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 80036c2:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 80036c6:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80036c8:	40d3      	lsrs	r3, r2
 80036ca:	60c3      	str	r3, [r0, #12]
}
 80036cc:	bd10      	pop	{r4, pc}
 80036ce:	bf00      	nop
 80036d0:	40023800 	.word	0x40023800
 80036d4:	00f42400 	.word	0x00f42400
 80036d8:	007a1200 	.word	0x007a1200
 80036dc:	20000000 	.word	0x20000000

080036e0 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 80036e0:	f400 7340 	and.w	r3, r0, #768	; 0x300
 80036e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036e8:	4b08      	ldr	r3, [pc, #32]	; (800370c <RCC_RTCCLKConfig+0x2c>)
 80036ea:	d108      	bne.n	80036fe <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 80036ec:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80036ee:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 80036f2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80036f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80036fa:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 80036fc:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 80036fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003700:	0500      	lsls	r0, r0, #20
 8003702:	ea42 5010 	orr.w	r0, r2, r0, lsr #20
 8003706:	6718      	str	r0, [r3, #112]	; 0x70
}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40023800 	.word	0x40023800

08003710 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8003710:	4b01      	ldr	r3, [pc, #4]	; (8003718 <RCC_RTCCLKCmd+0x8>)
 8003712:	6018      	str	r0, [r3, #0]
}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	42470e3c 	.word	0x42470e3c

0800371c <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800371c:	4b01      	ldr	r3, [pc, #4]	; (8003724 <RCC_BackupResetCmd+0x8>)
 800371e:	6018      	str	r0, [r3, #0]
}
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	42470e40 	.word	0x42470e40

08003728 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8003728:	4b01      	ldr	r3, [pc, #4]	; (8003730 <RCC_I2SCLKConfig+0x8>)
 800372a:	6018      	str	r0, [r3, #0]
}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	4247015c 	.word	0x4247015c

08003734 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003738:	b109      	cbz	r1, 800373e <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800373a:	4310      	orrs	r0, r2
 800373c:	e001      	b.n	8003742 <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800373e:	ea22 0000 	bic.w	r0, r2, r0
 8003742:	6318      	str	r0, [r3, #48]	; 0x30
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800

0800374c <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800374c:	4b04      	ldr	r3, [pc, #16]	; (8003760 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800374e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003750:	b109      	cbz	r1, 8003756 <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8003752:	4310      	orrs	r0, r2
 8003754:	e001      	b.n	800375a <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8003756:	ea22 0000 	bic.w	r0, r2, r0
 800375a:	6358      	str	r0, [r3, #52]	; 0x34
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40023800 	.word	0x40023800

08003764 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8003764:	4b04      	ldr	r3, [pc, #16]	; (8003778 <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8003766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003768:	b109      	cbz	r1, 800376e <RCC_AHB3PeriphClockCmd+0xa>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800376a:	4310      	orrs	r0, r2
 800376c:	e001      	b.n	8003772 <RCC_AHB3PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800376e:	ea22 0000 	bic.w	r0, r2, r0
 8003772:	6398      	str	r0, [r3, #56]	; 0x38
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800

0800377c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800377c:	4b04      	ldr	r3, [pc, #16]	; (8003790 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800377e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003780:	b109      	cbz	r1, 8003786 <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003782:	4310      	orrs	r0, r2
 8003784:	e001      	b.n	800378a <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8003786:	ea22 0000 	bic.w	r0, r2, r0
 800378a:	6418      	str	r0, [r3, #64]	; 0x40
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800

08003794 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003798:	b109      	cbz	r1, 800379e <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800379a:	4310      	orrs	r0, r2
 800379c:	e001      	b.n	80037a2 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800379e:	ea22 0000 	bic.w	r0, r2, r0
 80037a2:	6458      	str	r0, [r3, #68]	; 0x44
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800

080037ac <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80037ac:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80037ae:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80037b0:	b109      	cbz	r1, 80037b6 <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80037b2:	4310      	orrs	r0, r2
 80037b4:	e001      	b.n	80037ba <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 80037b6:	ea22 0000 	bic.w	r0, r2, r0
 80037ba:	6118      	str	r0, [r3, #16]
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800

080037c4 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80037c4:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80037c6:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80037c8:	b109      	cbz	r1, 80037ce <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80037ca:	4310      	orrs	r0, r2
 80037cc:	e001      	b.n	80037d2 <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80037ce:	ea22 0000 	bic.w	r0, r2, r0
 80037d2:	6158      	str	r0, [r3, #20]
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40023800 	.word	0x40023800

080037dc <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <RCC_AHB3PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80037de:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80037e0:	b109      	cbz	r1, 80037e6 <RCC_AHB3PeriphResetCmd+0xa>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80037e2:	4310      	orrs	r0, r2
 80037e4:	e001      	b.n	80037ea <RCC_AHB3PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 80037e6:	ea22 0000 	bic.w	r0, r2, r0
 80037ea:	6198      	str	r0, [r3, #24]
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800

080037f4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80037f6:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80037f8:	b109      	cbz	r1, 80037fe <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80037fa:	4310      	orrs	r0, r2
 80037fc:	e001      	b.n	8003802 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80037fe:	ea22 0000 	bic.w	r0, r2, r0
 8003802:	6218      	str	r0, [r3, #32]
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40023800 	.word	0x40023800

0800380c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800380e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003810:	b109      	cbz	r1, 8003816 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8003812:	4310      	orrs	r0, r2
 8003814:	e001      	b.n	800381a <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8003816:	ea22 0000 	bic.w	r0, r2, r0
 800381a:	6258      	str	r0, [r3, #36]	; 0x24
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800

08003824 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8003826:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003828:	b109      	cbz	r1, 800382e <RCC_AHB1PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800382a:	4310      	orrs	r0, r2
 800382c:	e001      	b.n	8003832 <RCC_AHB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 800382e:	ea22 0000 	bic.w	r0, r2, r0
 8003832:	6518      	str	r0, [r3, #80]	; 0x50
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800

0800383c <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800383c:	4b04      	ldr	r3, [pc, #16]	; (8003850 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800383e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003840:	b109      	cbz	r1, 8003846 <RCC_AHB2PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8003842:	4310      	orrs	r0, r2
 8003844:	e001      	b.n	800384a <RCC_AHB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8003846:	ea22 0000 	bic.w	r0, r2, r0
 800384a:	6558      	str	r0, [r3, #84]	; 0x54
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800

08003854 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8003856:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003858:	b109      	cbz	r1, 800385e <RCC_AHB3PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800385a:	4310      	orrs	r0, r2
 800385c:	e001      	b.n	8003862 <RCC_AHB3PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 800385e:	ea22 0000 	bic.w	r0, r2, r0
 8003862:	6598      	str	r0, [r3, #88]	; 0x58
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800

0800386c <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <RCC_APB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800386e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003870:	b109      	cbz	r1, 8003876 <RCC_APB1PeriphClockLPModeCmd+0xa>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8003872:	4310      	orrs	r0, r2
 8003874:	e001      	b.n	800387a <RCC_APB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8003876:	ea22 0000 	bic.w	r0, r2, r0
 800387a:	6618      	str	r0, [r3, #96]	; 0x60
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800

08003884 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003884:	4b04      	ldr	r3, [pc, #16]	; (8003898 <RCC_APB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8003886:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003888:	b109      	cbz	r1, 800388e <RCC_APB2PeriphClockLPModeCmd+0xa>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800388a:	4310      	orrs	r0, r2
 800388c:	e001      	b.n	8003892 <RCC_APB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 800388e:	ea22 0000 	bic.w	r0, r2, r0
 8003892:	6658      	str	r0, [r3, #100]	; 0x64
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800

0800389c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800389e:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80038a0:	b109      	cbz	r1, 80038a6 <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80038a2:	4310      	orrs	r0, r2
 80038a4:	e001      	b.n	80038aa <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80038a6:	ea22 0000 	bic.w	r0, r2, r0
 80038aa:	7018      	strb	r0, [r3, #0]
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	4002380d 	.word	0x4002380d

080038b4 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80038b4:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	4a07      	ldr	r2, [pc, #28]	; (80038d8 <RCC_GetFlagStatus+0x24>)
 80038ba:	d101      	bne.n	80038c0 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 80038bc:	6813      	ldr	r3, [r2, #0]
 80038be:	e003      	b.n	80038c8 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80038c0:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 80038c2:	bf0c      	ite	eq
 80038c4:	6f13      	ldreq	r3, [r2, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80038c6:	6f53      	ldrne	r3, [r2, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80038c8:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80038cc:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 80038d0:	f000 0001 	and.w	r0, r0, #1
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800

080038dc <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80038dc:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t startupcounter = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80038e2:	2031      	movs	r0, #49	; 0x31
 80038e4:	f7ff ffe6 	bl	80038b4 <RCC_GetFlagStatus>
    startupcounter++;
 80038e8:	9b01      	ldr	r3, [sp, #4]
 80038ea:	3301      	adds	r3, #1
 80038ec:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80038ee:	9b01      	ldr	r3, [sp, #4]
 80038f0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80038f4:	d001      	beq.n	80038fa <RCC_WaitForHSEStartUp+0x1e>
 80038f6:	2800      	cmp	r0, #0
 80038f8:	d0f3      	beq.n	80038e2 <RCC_WaitForHSEStartUp+0x6>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80038fa:	2031      	movs	r0, #49	; 0x31
 80038fc:	f7ff ffda 	bl	80038b4 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }
  return (status);
}
 8003900:	3000      	adds	r0, #0
 8003902:	bf18      	it	ne
 8003904:	2001      	movne	r0, #1
 8003906:	bd0e      	pop	{r1, r2, r3, pc}

08003908 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8003908:	4b02      	ldr	r3, [pc, #8]	; (8003914 <RCC_ClearFlag+0xc>)
 800390a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800390c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003910:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003912:	4770      	bx	lr
 8003914:	40023800 	.word	0x40023800

08003918 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8003918:	4b03      	ldr	r3, [pc, #12]	; (8003928 <RCC_GetITStatus+0x10>)
 800391a:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 800391c:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 800391e:	bf0c      	ite	eq
 8003920:	2000      	moveq	r0, #0
 8003922:	2001      	movne	r0, #1
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800

0800392c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800392c:	4b01      	ldr	r3, [pc, #4]	; (8003934 <RCC_ClearITPendingBit+0x8>)
 800392e:	7018      	strb	r0, [r3, #0]
}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	4002380e 	.word	0x4002380e

08003938 <RNG_DeInit>:
  * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 8003938:	b508      	push	{r3, lr}
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 800393a:	2040      	movs	r0, #64	; 0x40
 800393c:	2101      	movs	r1, #1
 800393e:	f7ff ff41 	bl	80037c4 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 8003942:	2040      	movs	r0, #64	; 0x40
 8003944:	2100      	movs	r1, #0
}
 8003946:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 800394a:	f7ff bf3b 	b.w	80037c4 <RCC_AHB2PeriphResetCmd>

0800394e <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <RNG_Cmd+0x16>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8003950:	681a      	ldr	r2, [r3, #0]
void RNG_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003952:	b110      	cbz	r0, 800395a <RNG_Cmd+0xc>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8003954:	f042 0204 	orr.w	r2, r2, #4
 8003958:	e001      	b.n	800395e <RNG_Cmd+0x10>
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 800395a:	f022 0204 	bic.w	r2, r2, #4
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	50060800 	.word	0x50060800

08003968 <RNG_GetRandomNumber>:
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8003968:	4b01      	ldr	r3, [pc, #4]	; (8003970 <RNG_GetRandomNumber+0x8>)
 800396a:	6898      	ldr	r0, [r3, #8]
}
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	50060800 	.word	0x50060800

08003974 <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 8003974:	4b04      	ldr	r3, [pc, #16]	; (8003988 <RNG_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8003976:	681a      	ldr	r2, [r3, #0]
void RNG_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003978:	b110      	cbz	r0, 8003980 <RNG_ITConfig+0xc>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 800397a:	f042 0208 	orr.w	r2, r2, #8
 800397e:	e001      	b.n	8003984 <RNG_ITConfig+0x10>
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 8003980:	f022 0208 	bic.w	r2, r2, #8
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	4770      	bx	lr
 8003988:	50060800 	.word	0x50060800

0800398c <RNG_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <RNG_GetFlagStatus+0x10>)
 800398e:	685b      	ldr	r3, [r3, #4]
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 8003990:	4218      	tst	r0, r3
    /* RNG_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
}
 8003992:	bf0c      	ite	eq
 8003994:	2000      	moveq	r0, #0
 8003996:	2001      	movne	r0, #1
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	50060800 	.word	0x50060800

080039a0 <RNG_ClearFlag>:
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 80039a0:	4b02      	ldr	r3, [pc, #8]	; (80039ac <RNG_ClearFlag+0xc>)
 80039a2:	ea6f 1000 	mvn.w	r0, r0, lsl #4
 80039a6:	6058      	str	r0, [r3, #4]
}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	50060800 	.word	0x50060800

080039b0 <RNG_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <RNG_GetITStatus+0x10>)
 80039b2:	685b      	ldr	r3, [r3, #4]
  {
    /* RNG_IT is set */
    bitstatus = SET;
 80039b4:	4218      	tst	r0, r3
    /* RNG_IT is reset */
    bitstatus = RESET;
  }
  /* Return the RNG_IT status */
  return bitstatus;
}
 80039b6:	bf0c      	ite	eq
 80039b8:	2000      	moveq	r0, #0
 80039ba:	2001      	movne	r0, #1
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	50060800 	.word	0x50060800

080039c4 <RNG_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 80039c4:	43c0      	mvns	r0, r0
 80039c6:	4b02      	ldr	r3, [pc, #8]	; (80039d0 <RNG_ClearITPendingBit+0xc>)
 80039c8:	b2c0      	uxtb	r0, r0
 80039ca:	6058      	str	r0, [r3, #4]
}
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	50060800 	.word	0x50060800

080039d4 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
 80039d4:	2300      	movs	r3, #0
  
  while (Value >= 10)
 80039d6:	e003      	b.n	80039e0 <RTC_ByteToBcd2+0xc>
  {
    bcdhigh++;
 80039d8:	3301      	adds	r3, #1
    Value -= 10;
 80039da:	380a      	subs	r0, #10
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 80039dc:	b2db      	uxtb	r3, r3
    Value -= 10;
 80039de:	b2c0      	uxtb	r0, r0
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80039e0:	2809      	cmp	r0, #9
 80039e2:	d8f9      	bhi.n	80039d8 <RTC_ByteToBcd2+0x4>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80039e4:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80039e8:	b2c0      	uxtb	r0, r0
 80039ea:	4770      	bx	lr

080039ec <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80039ec:	0902      	lsrs	r2, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80039ee:	f000 030f 	and.w	r3, r0, #15
 80039f2:	200a      	movs	r0, #10
 80039f4:	fb00 3002 	mla	r0, r0, r2, r3
}
 80039f8:	b2c0      	uxtb	r0, r0
 80039fa:	4770      	bx	lr

080039fc <RTC_StructInit>:
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 80039fc:	2100      	movs	r1, #0
 80039fe:	227f      	movs	r2, #127	; 0x7f
 8003a00:	23ff      	movs	r3, #255	; 0xff
 8003a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
}
 8003a06:	4770      	bx	lr

08003a08 <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 8003a08:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <RTC_WriteProtectionCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8003a0a:	b108      	cbz	r0, 8003a10 <RTC_WriteProtectionCmd+0x8>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 8003a0c:	22ff      	movs	r2, #255	; 0xff
 8003a0e:	e002      	b.n	8003a16 <RTC_WriteProtectionCmd+0xe>
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 8003a10:	22ca      	movs	r2, #202	; 0xca
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 8003a14:	2253      	movs	r2, #83	; 0x53
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40002800 	.word	0x40002800

08003a20 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8003a20:	b082      	sub	sp, #8
  __IO uint32_t initcounter = 0x00;
 8003a22:	2300      	movs	r3, #0
 8003a24:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a26:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <RTC_EnterInitMode+0x38>)
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	0652      	lsls	r2, r2, #25
 8003a2c:	d411      	bmi.n	8003a52 <RTC_EnterInitMode+0x32>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8003a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a32:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8003a34:	68da      	ldr	r2, [r3, #12]
      initcounter++;  
 8003a36:	9901      	ldr	r1, [sp, #4]
 8003a38:	3101      	adds	r1, #1
 8003a3a:	9101      	str	r1, [sp, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8003a3c:	9901      	ldr	r1, [sp, #4]
 8003a3e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8003a42:	d001      	beq.n	8003a48 <RTC_EnterInitMode+0x28>
 8003a44:	0650      	lsls	r0, r2, #25
 8003a46:	d5f5      	bpl.n	8003a34 <RTC_EnterInitMode+0x14>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <RTC_EnterInitMode+0x38>)
 8003a4a:	68d8      	ldr	r0, [r3, #12]
    {
      status = SUCCESS;
 8003a4c:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8003a50:	e000      	b.n	8003a54 <RTC_EnterInitMode+0x34>
      status = ERROR;
    }        
  }
  else
  {
    status = SUCCESS;  
 8003a52:	2001      	movs	r0, #1
  } 
    
  return (status);  
}
 8003a54:	b002      	add	sp, #8
 8003a56:	4770      	bx	lr
 8003a58:	40002800 	.word	0x40002800

08003a5c <RTC_ExitInitMode>:
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8003a5c:	4b02      	ldr	r3, [pc, #8]	; (8003a68 <RTC_ExitInitMode+0xc>)
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a64:	60da      	str	r2, [r3, #12]
}
 8003a66:	4770      	bx	lr
 8003a68:	40002800 	.word	0x40002800

08003a6c <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8003a6c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003a6e:	4c0f      	ldr	r4, [pc, #60]	; (8003aac <RTC_Init+0x40>)
 8003a70:	23ca      	movs	r3, #202	; 0xca
 8003a72:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8003a74:	2353      	movs	r3, #83	; 0x53
 8003a76:	6263      	str	r3, [r4, #36]	; 0x24
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8003a78:	4605      	mov	r5, r0
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8003a7a:	f7ff ffd1 	bl	8003a20 <RTC_EnterInitMode>
 8003a7e:	b188      	cbz	r0, 8003aa4 <RTC_Init+0x38>
    status = ERROR;
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8003a80:	68a3      	ldr	r3, [r4, #8]
 8003a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a86:	60a3      	str	r3, [r4, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 8003a88:	68a2      	ldr	r2, [r4, #8]
 8003a8a:	682b      	ldr	r3, [r5, #0]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60a3      	str	r3, [r4, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 8003a90:	68ab      	ldr	r3, [r5, #8]
 8003a92:	6123      	str	r3, [r4, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8003a94:	6923      	ldr	r3, [r4, #16]
 8003a96:	686a      	ldr	r2, [r5, #4]
 8003a98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a9c:	6123      	str	r3, [r4, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8003a9e:	f7ff ffdd 	bl	8003a5c <RTC_ExitInitMode>

    status = SUCCESS;    
 8003aa2:	2001      	movs	r0, #1
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8003aa4:	4b01      	ldr	r3, [pc, #4]	; (8003aac <RTC_Init+0x40>)
 8003aa6:	22ff      	movs	r2, #255	; 0xff
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8003aaa:	bd38      	pop	{r3, r4, r5, pc}
 8003aac:	40002800 	.word	0x40002800

08003ab0 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 8003ab0:	b082      	sub	sp, #8
  __IO uint32_t synchrocounter = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <RTC_WaitForSynchro+0x3c>)
 8003ab8:	22ca      	movs	r2, #202	; 0xca
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8003abc:	2253      	movs	r2, #83	; 0x53
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ac6:	60da      	str	r2, [r3, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8003ac8:	68d9      	ldr	r1, [r3, #12]
    synchrocounter++;  
 8003aca:	9a01      	ldr	r2, [sp, #4]
 8003acc:	3201      	adds	r2, #1
 8003ace:	9201      	str	r2, [sp, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8003ad0:	9a01      	ldr	r2, [sp, #4]
 8003ad2:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8003ad6:	4a05      	ldr	r2, [pc, #20]	; (8003aec <RTC_WaitForSynchro+0x3c>)
 8003ad8:	d001      	beq.n	8003ade <RTC_WaitForSynchro+0x2e>
 8003ada:	0689      	lsls	r1, r1, #26
 8003adc:	d5f4      	bpl.n	8003ac8 <RTC_WaitForSynchro+0x18>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8003ade:	68d0      	ldr	r0, [r2, #12]
  {
    status = ERROR;
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8003ae0:	23ff      	movs	r3, #255	; 0xff
 8003ae2:	6253      	str	r3, [r2, #36]	; 0x24
    
  return (status); 
}
 8003ae4:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8003ae8:	b002      	add	sp, #8
 8003aea:	4770      	bx	lr
 8003aec:	40002800 	.word	0x40002800

08003af0 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 8003af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wutcounter = 0x00;
  uint32_t wutwfstatus = 0x00;
  ErrorStatus status = ERROR;
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003af2:	4c1e      	ldr	r4, [pc, #120]	; (8003b6c <RTC_DeInit+0x7c>)
 8003af4:	23ca      	movs	r3, #202	; 0xca
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
  __IO uint32_t wutcounter = 0x00;
 8003af6:	2500      	movs	r5, #0
 8003af8:	9501      	str	r5, [sp, #4]
  uint32_t wutwfstatus = 0x00;
  ErrorStatus status = ERROR;
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003afa:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8003afc:	2353      	movs	r3, #83	; 0x53
 8003afe:	6263      	str	r3, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8003b00:	f7ff ff8e 	bl	8003a20 <RTC_EnterInitMode>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d02c      	beq.n	8003b62 <RTC_DeInit+0x72>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
    RTC->DR = (uint32_t)0x00002101;
 8003b08:	f242 1301 	movw	r3, #8449	; 0x2101
    status = ERROR;
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 8003b0c:	6025      	str	r5, [r4, #0]
    RTC->DR = (uint32_t)0x00002101;
 8003b0e:	6063      	str	r3, [r4, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 8003b10:	68a3      	ldr	r3, [r4, #8]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	60a3      	str	r3, [r4, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8003b18:	68e3      	ldr	r3, [r4, #12]
      wutcounter++;  
 8003b1a:	9a01      	ldr	r2, [sp, #4]
 8003b1c:	3201      	adds	r2, #1
 8003b1e:	9201      	str	r2, [sp, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8003b20:	9a01      	ldr	r2, [sp, #4]
 8003b22:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003b26:	d001      	beq.n	8003b2c <RTC_DeInit+0x3c>
 8003b28:	0758      	lsls	r0, r3, #29
 8003b2a:	d5f5      	bpl.n	8003b18 <RTC_DeInit+0x28>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <RTC_DeInit+0x7c>)
 8003b2e:	68d8      	ldr	r0, [r3, #12]
 8003b30:	f010 0004 	ands.w	r0, r0, #4
 8003b34:	d015      	beq.n	8003b62 <RTC_DeInit+0x72>
      status = ERROR;
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 8003b36:	689a      	ldr	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 8003b38:	f64f 71ff 	movw	r1, #65535	; 0xffff
      status = ERROR;
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 8003b40:	6159      	str	r1, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 8003b42:	490b      	ldr	r1, [pc, #44]	; (8003b70 <RTC_DeInit+0x80>)
 8003b44:	6119      	str	r1, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 8003b46:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 8003b48:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 8003b4a:	621a      	str	r2, [r3, #32]
      RTC->SHIFTR = (uint32_t)0x00000000;
 8003b4c:	62da      	str	r2, [r3, #44]	; 0x2c
      RTC->CALR = (uint32_t)0x00000000;
 8003b4e:	63da      	str	r2, [r3, #60]	; 0x3c
      RTC->ALRMASSR = (uint32_t)0x00000000;
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44
      RTC->ALRMBSSR = (uint32_t)0x00000000;
 8003b52:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 8003b54:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 8003b58:	f7ff ffaa 	bl	8003ab0 <RTC_WaitForSynchro>
      {
        status = ERROR;
 8003b5c:	3000      	adds	r0, #0
 8003b5e:	bf18      	it	ne
 8003b60:	2001      	movne	r0, #1
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 8003b62:	4b02      	ldr	r3, [pc, #8]	; (8003b6c <RTC_DeInit+0x7c>)
 8003b64:	22ff      	movs	r2, #255	; 0xff
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8003b68:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40002800 	.word	0x40002800
 8003b70:	007f00ff 	.word	0x007f00ff

08003b74 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 8003b74:	b538      	push	{r3, r4, r5, lr}
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003b76:	4c0b      	ldr	r4, [pc, #44]	; (8003ba4 <RTC_RefClockCmd+0x30>)
 8003b78:	23ca      	movs	r3, #202	; 0xca
 8003b7a:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8003b7c:	2353      	movs	r3, #83	; 0x53
 8003b7e:	6263      	str	r3, [r4, #36]	; 0x24
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 8003b80:	4605      	mov	r5, r0
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8003b82:	f7ff ff4d 	bl	8003a20 <RTC_EnterInitMode>
 8003b86:	b150      	cbz	r0, 8003b9e <RTC_RefClockCmd+0x2a>
  else
  {  
    if (NewState != DISABLE)
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 8003b88:	68a3      	ldr	r3, [r4, #8]
  {
    status = ERROR;
  } 
  else
  {  
    if (NewState != DISABLE)
 8003b8a:	b115      	cbz	r5, 8003b92 <RTC_RefClockCmd+0x1e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 8003b8c:	f043 0310 	orr.w	r3, r3, #16
 8003b90:	e001      	b.n	8003b96 <RTC_RefClockCmd+0x22>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 8003b92:	f023 0310 	bic.w	r3, r3, #16
 8003b96:	60a3      	str	r3, [r4, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8003b98:	f7ff ff60 	bl	8003a5c <RTC_ExitInitMode>
    
    status = SUCCESS;
 8003b9c:	2001      	movs	r0, #1
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 8003b9e:	23ff      	movs	r3, #255	; 0xff
 8003ba0:	6263      	str	r3, [r4, #36]	; 0x24
  
  return status; 
}
 8003ba2:	bd38      	pop	{r3, r4, r5, pc}
 8003ba4:	40002800 	.word	0x40002800

08003ba8 <RTC_BypassShadowCmd>:
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003ba8:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <RTC_BypassShadowCmd+0x20>)
 8003baa:	22ca      	movs	r2, #202	; 0xca
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8003bae:	2253      	movs	r2, #83	; 0x53
 8003bb0:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8003bb2:	689a      	ldr	r2, [r3, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
  
  if (NewState != DISABLE)
 8003bb4:	b110      	cbz	r0, 8003bbc <RTC_BypassShadowCmd+0x14>
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8003bb6:	f042 0220 	orr.w	r2, r2, #32
 8003bba:	e001      	b.n	8003bc0 <RTC_BypassShadowCmd+0x18>
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 8003bbc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003bc0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8003bc2:	22ff      	movs	r2, #255	; 0xff
 8003bc4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003bc6:	4770      	bx	lr
 8003bc8:	40002800 	.word	0x40002800

08003bcc <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8003bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bce:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <RTC_SetTime+0x94>)
 8003bd0:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003bd2:	689b      	ldr	r3, [r3, #8]
  ErrorStatus status = ERROR;
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 8003bd4:	b920      	cbnz	r0, 8003be0 <RTC_SetTime+0x14>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003bd6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003bda:	d106      	bne.n	8003bea <RTC_SetTime+0x1e>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8003bdc:	70cb      	strb	r3, [r1, #3]
 8003bde:	e004      	b.n	8003bea <RTC_SetTime+0x1e>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003be0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003be4:	d130      	bne.n	8003c48 <RTC_SetTime+0x7c>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8003be6:	70cb      	strb	r3, [r1, #3]
 8003be8:	e02e      	b.n	8003c48 <RTC_SetTime+0x7c>
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003bea:	7820      	ldrb	r0, [r4, #0]
 8003bec:	f7ff fef2 	bl	80039d4 <RTC_ByteToBcd2>
 8003bf0:	4607      	mov	r7, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8003bf2:	7860      	ldrb	r0, [r4, #1]
 8003bf4:	f7ff feee 	bl	80039d4 <RTC_ByteToBcd2>
 8003bf8:	4606      	mov	r6, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8003bfa:	78a0      	ldrb	r0, [r4, #2]
 8003bfc:	f7ff feea 	bl	80039d4 <RTC_ByteToBcd2>
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8003c00:	78e5      	ldrb	r5, [r4, #3]
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003c02:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8003c06:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003c0a:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003c0e:	4c14      	ldr	r4, [pc, #80]	; (8003c60 <RTC_SetTime+0x94>)
 8003c10:	23ca      	movs	r3, #202	; 0xca
 8003c12:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8003c14:	2353      	movs	r3, #83	; 0x53
 8003c16:	6263      	str	r3, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8003c18:	f7ff ff02 	bl	8003a20 <RTC_EnterInitMode>
 8003c1c:	b180      	cbz	r0, 8003c40 <RTC_SetTime+0x74>
    status = ERROR;
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003c1e:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8003c22:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8003c26:	6025      	str	r5, [r4, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8003c28:	f7ff ff18 	bl	8003a5c <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 8003c2c:	68a3      	ldr	r3, [r4, #8]
 8003c2e:	069b      	lsls	r3, r3, #26
 8003c30:	d405      	bmi.n	8003c3e <RTC_SetTime+0x72>
    {
      if (RTC_WaitForSynchro() == ERROR)
 8003c32:	f7ff ff3d 	bl	8003ab0 <RTC_WaitForSynchro>
      {
        status = ERROR;
 8003c36:	3000      	adds	r0, #0
 8003c38:	bf18      	it	ne
 8003c3a:	2001      	movne	r0, #1
 8003c3c:	e000      	b.n	8003c40 <RTC_SetTime+0x74>
        status = SUCCESS;
      }
    }
    else
    {
      status = SUCCESS;
 8003c3e:	2001      	movs	r0, #1
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8003c40:	4b07      	ldr	r3, [pc, #28]	; (8003c60 <RTC_SetTime+0x94>)
 8003c42:	22ff      	movs	r2, #255	; 0xff
 8003c44:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
}
 8003c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8003c48:	7865      	ldrb	r5, [r4, #1]
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003c4a:	7823      	ldrb	r3, [r4, #0]
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8003c4c:	022d      	lsls	r5, r5, #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003c4e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8003c52:	78a3      	ldrb	r3, [r4, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8003c54:	431d      	orrs	r5, r3
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 8003c56:	78e3      	ldrb	r3, [r4, #3]
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003c58:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8003c5c:	e7d7      	b.n	8003c0e <RTC_SetTime+0x42>
 8003c5e:	bf00      	nop
 8003c60:	40002800 	.word	0x40002800

08003c64 <RTC_TimeStructInit>:
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 8003c64:	2300      	movs	r3, #0
 8003c66:	70c3      	strb	r3, [r0, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 8003c68:	7003      	strb	r3, [r0, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 8003c6a:	7043      	strb	r3, [r0, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 8003c6c:	7083      	strb	r3, [r0, #2]
}
 8003c6e:	4770      	bx	lr

08003c70 <RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8003c70:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <RTC_GetTime+0x40>)
 8003c72:	681b      	ldr	r3, [r3, #0]
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8003c74:	b570      	push	{r4, r5, r6, lr}

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8003c76:	f3c3 4205 	ubfx	r2, r3, #16, #6
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8003c7a:	f3c3 2606 	ubfx	r6, r3, #8, #7
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003c7e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8003c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c86:	0c1b      	lsrs	r3, r3, #16
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8003c88:	460c      	mov	r4, r1

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8003c8a:	700a      	strb	r2, [r1, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8003c8c:	704e      	strb	r6, [r1, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003c8e:	708d      	strb	r5, [r1, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8003c90:	70cb      	strb	r3, [r1, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8003c92:	b958      	cbnz	r0, 8003cac <RTC_GetTime+0x3c>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8003c94:	4610      	mov	r0, r2
 8003c96:	f7ff fea9 	bl	80039ec <RTC_Bcd2ToByte>
 8003c9a:	7020      	strb	r0, [r4, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 8003c9c:	4630      	mov	r0, r6
 8003c9e:	f7ff fea5 	bl	80039ec <RTC_Bcd2ToByte>
 8003ca2:	7060      	strb	r0, [r4, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	f7ff fea1 	bl	80039ec <RTC_Bcd2ToByte>
 8003caa:	70a0      	strb	r0, [r4, #2]
 8003cac:	bd70      	pop	{r4, r5, r6, pc}
 8003cae:	bf00      	nop
 8003cb0:	40002800 	.word	0x40002800

08003cb4 <RTC_GetSubSecond>:
uint32_t RTC_GetSubSecond(void)
{
  uint32_t tmpreg = 0;
  
  /* Get subseconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 8003cb4:	4b01      	ldr	r3, [pc, #4]	; (8003cbc <RTC_GetSubSecond+0x8>)
 8003cb6:	6a98      	ldr	r0, [r3, #40]	; 0x28
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 8003cb8:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
}
 8003cba:	4770      	bx	lr
 8003cbc:	40002800 	.word	0x40002800

08003cc0 <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	460c      	mov	r4, r1
 8003cc4:	784b      	ldrb	r3, [r1, #1]
  ErrorStatus status = ERROR;
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 8003cc6:	b930      	cbnz	r0, 8003cd6 <RTC_SetDate+0x16>
 8003cc8:	06d9      	lsls	r1, r3, #27
 8003cca:	d52a      	bpl.n	8003d22 <RTC_SetDate+0x62>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 8003ccc:	f023 0310 	bic.w	r3, r3, #16
 8003cd0:	330a      	adds	r3, #10
 8003cd2:	7063      	strb	r3, [r4, #1]
 8003cd4:	e025      	b.n	8003d22 <RTC_SetDate+0x62>
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8003cd6:	78cd      	ldrb	r5, [r1, #3]
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 8003cd8:	788a      	ldrb	r2, [r1, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8003cda:	021b      	lsls	r3, r3, #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8003cdc:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 8003ce0:	780b      	ldrb	r3, [r1, #0]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8003ce2:	4315      	orrs	r5, r2
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8003ce4:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003ce8:	4c17      	ldr	r4, [pc, #92]	; (8003d48 <RTC_SetDate+0x88>)
 8003cea:	23ca      	movs	r3, #202	; 0xca
 8003cec:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8003cee:	2353      	movs	r3, #83	; 0x53
 8003cf0:	6263      	str	r3, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8003cf2:	f7ff fe95 	bl	8003a20 <RTC_EnterInitMode>
 8003cf6:	b180      	cbz	r0, 8003d1a <RTC_SetDate+0x5a>
    status = ERROR;
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 8003cf8:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8003cfc:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8003d00:	6065      	str	r5, [r4, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8003d02:	f7ff feab 	bl	8003a5c <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 8003d06:	68a3      	ldr	r3, [r4, #8]
 8003d08:	069a      	lsls	r2, r3, #26
 8003d0a:	d405      	bmi.n	8003d18 <RTC_SetDate+0x58>
    {
      if (RTC_WaitForSynchro() == ERROR)
 8003d0c:	f7ff fed0 	bl	8003ab0 <RTC_WaitForSynchro>
      {
        status = ERROR;
 8003d10:	3000      	adds	r0, #0
 8003d12:	bf18      	it	ne
 8003d14:	2001      	movne	r0, #1
 8003d16:	e000      	b.n	8003d1a <RTC_SetDate+0x5a>
        status = SUCCESS;
      }
    }
    else
    {
      status = SUCCESS;
 8003d18:	2001      	movs	r0, #1
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <RTC_SetDate+0x88>)
 8003d1c:	22ff      	movs	r2, #255	; 0xff
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8003d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8003d22:	78e0      	ldrb	r0, [r4, #3]
 8003d24:	f7ff fe56 	bl	80039d4 <RTC_ByteToBcd2>
 8003d28:	4607      	mov	r7, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8003d2a:	7860      	ldrb	r0, [r4, #1]
 8003d2c:	f7ff fe52 	bl	80039d4 <RTC_ByteToBcd2>
 8003d30:	4606      	mov	r6, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 8003d32:	78a0      	ldrb	r0, [r4, #2]
 8003d34:	f7ff fe4e 	bl	80039d4 <RTC_ByteToBcd2>
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 8003d38:	7825      	ldrb	r5, [r4, #0]
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8003d3a:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8003d3e:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8003d42:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8003d46:	e7cf      	b.n	8003ce8 <RTC_SetDate+0x28>
 8003d48:	40002800 	.word	0x40002800

08003d4c <RTC_DateStructInit>:
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	7003      	strb	r3, [r0, #0]
  RTC_DateStruct->RTC_Date = 1;
 8003d50:	7083      	strb	r3, [r0, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 8003d52:	7043      	strb	r3, [r0, #1]
  RTC_DateStruct->RTC_Year = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	70c3      	strb	r3, [r0, #3]
}
 8003d58:	4770      	bx	lr

08003d5a <RTC_GetDate>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 8003d5a:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <RTC_GetDate+0x3e>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8003d5e:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8003d60:	f3c3 4207 	ubfx	r2, r3, #16, #8
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8003d64:	f3c3 2604 	ubfx	r6, r3, #8, #5
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003d68:	f003 053f 	and.w	r5, r3, #63	; 0x3f
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 8003d6c:	f3c3 3342 	ubfx	r3, r3, #13, #3
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8003d70:	460c      	mov	r4, r1
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8003d72:	70ca      	strb	r2, [r1, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8003d74:	704e      	strb	r6, [r1, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003d76:	708d      	strb	r5, [r1, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 8003d78:	700b      	strb	r3, [r1, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8003d7a:	b958      	cbnz	r0, 8003d94 <RTC_GetDate+0x3a>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	f7ff fe35 	bl	80039ec <RTC_Bcd2ToByte>
 8003d82:	70e0      	strb	r0, [r4, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 8003d84:	4630      	mov	r0, r6
 8003d86:	f7ff fe31 	bl	80039ec <RTC_Bcd2ToByte>
 8003d8a:	7060      	strb	r0, [r4, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	f7ff fe2d 	bl	80039ec <RTC_Bcd2ToByte>
 8003d92:	70a0      	strb	r0, [r4, #2]
 8003d94:	bd70      	pop	{r4, r5, r6, pc}
 8003d96:	bf00      	nop
 8003d98:	40002800 	.word	0x40002800

08003d9c <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 8003d9c:	4b26      	ldr	r3, [pc, #152]	; (8003e38 <RTC_SetAlarm+0x9c>)
 8003d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003da2:	689b      	ldr	r3, [r3, #8]
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 8003da4:	460c      	mov	r4, r1
 8003da6:	4615      	mov	r5, r2
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 8003da8:	b920      	cbnz	r0, 8003db4 <RTC_SetAlarm+0x18>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003daa:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003dae:	d106      	bne.n	8003dbe <RTC_SetAlarm+0x22>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 8003db0:	70d3      	strb	r3, [r2, #3]
 8003db2:	e004      	b.n	8003dbe <RTC_SetAlarm+0x22>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003db4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003db8:	d12c      	bne.n	8003e14 <RTC_SetAlarm+0x78>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 8003dba:	70d3      	strb	r3, [r2, #3]
 8003dbc:	e02a      	b.n	8003e14 <RTC_SetAlarm+0x78>
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8003dbe:	7828      	ldrb	r0, [r5, #0]
 8003dc0:	f7ff fe08 	bl	80039d4 <RTC_ByteToBcd2>
 8003dc4:	4607      	mov	r7, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8003dc6:	7868      	ldrb	r0, [r5, #1]
 8003dc8:	f7ff fe04 	bl	80039d4 <RTC_ByteToBcd2>
 8003dcc:	4606      	mov	r6, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8003dce:	78a8      	ldrb	r0, [r5, #2]
 8003dd0:	f7ff fe00 	bl	80039d4 <RTC_ByteToBcd2>
 8003dd4:	4680      	mov	r8, r0
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8003dd6:	7b28      	ldrb	r0, [r5, #12]
 8003dd8:	f7ff fdfc 	bl	80039d4 <RTC_ByteToBcd2>
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8003ddc:	686a      	ldr	r2, [r5, #4]
 8003dde:	68ab      	ldr	r3, [r5, #8]
 8003de0:	4313      	orrs	r3, r2
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8003de2:	78ea      	ldrb	r2, [r5, #3]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8003de4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8003de8:	ea43 0308 	orr.w	r3, r3, r8
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8003dec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8003df0:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8003df4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003df8:	4a0f      	ldr	r2, [pc, #60]	; (8003e38 <RTC_SetAlarm+0x9c>)
 8003dfa:	21ca      	movs	r1, #202	; 0xca
 8003dfc:	6251      	str	r1, [r2, #36]	; 0x24
  RTC->WPR = 0x53;
 8003dfe:	2153      	movs	r1, #83	; 0x53

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 8003e00:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
 8003e04:	6251      	str	r1, [r2, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 8003e06:	bf0c      	ite	eq
 8003e08:	61d3      	streq	r3, [r2, #28]
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 8003e0a:	6213      	strne	r3, [r2, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 8003e0c:	23ff      	movs	r3, #255	; 0xff
 8003e0e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8003e14:	686a      	ldr	r2, [r5, #4]
 8003e16:	68ab      	ldr	r3, [r5, #8]
 8003e18:	4313      	orrs	r3, r2
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 8003e1a:	78aa      	ldrb	r2, [r5, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8003e1c:	4313      	orrs	r3, r2
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8003e1e:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 8003e20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8003e24:	786a      	ldrb	r2, [r5, #1]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8003e26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e2a:	78ea      	ldrb	r2, [r5, #3]
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8003e2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e30:	7b2a      	ldrb	r2, [r5, #12]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8003e32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003e36:	e7df      	b.n	8003df8 <RTC_SetAlarm+0x5c>
 8003e38:	40002800 	.word	0x40002800

08003e3c <RTC_AlarmStructInit>:
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 8003e3c:	2300      	movs	r3, #0
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 8003e3e:	2201      	movs	r2, #1
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 8003e40:	70c3      	strb	r3, [r0, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 8003e42:	7003      	strb	r3, [r0, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 8003e44:	7043      	strb	r3, [r0, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 8003e46:	7083      	strb	r3, [r0, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 8003e48:	6083      	str	r3, [r0, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 8003e4a:	7302      	strb	r2, [r0, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 8003e4c:	6043      	str	r3, [r0, #4]
}
 8003e4e:	4770      	bx	lr

08003e50 <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	4614      	mov	r4, r2
 8003e54:	4a16      	ldr	r2, [pc, #88]	; (8003eb0 <RTC_GetAlarm+0x60>)
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 8003e56:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 8003e5a:	bf0c      	ite	eq
 8003e5c:	69d2      	ldreq	r2, [r2, #28]
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 8003e5e:	6a12      	ldrne	r2, [r2, #32]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 8003e60:	f402 0180 	and.w	r1, r2, #4194304	; 0x400000
 8003e64:	0c09      	lsrs	r1, r1, #16
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 8003e66:	f3c2 2706 	ubfx	r7, r2, #8, #7
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 8003e6a:	f002 067f 	and.w	r6, r2, #127	; 0x7f
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 8003e6e:	f3c2 6505 	ubfx	r5, r2, #24, #6
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 8003e72:	4603      	mov	r3, r0
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 8003e74:	70e1      	strb	r1, [r4, #3]
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 8003e76:	f3c2 4005 	ubfx	r0, r2, #16, #6
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8003e7a:	f002 4180 	and.w	r1, r2, #1073741824	; 0x40000000
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 8003e7e:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 8003e82:	7020      	strb	r0, [r4, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 8003e84:	7067      	strb	r7, [r4, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 8003e86:	70a6      	strb	r6, [r4, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 8003e88:	7325      	strb	r5, [r4, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8003e8a:	60a1      	str	r1, [r4, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 8003e8c:	6062      	str	r2, [r4, #4]

  if (RTC_Format == RTC_Format_BIN)
 8003e8e:	b973      	cbnz	r3, 8003eae <RTC_GetAlarm+0x5e>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8003e90:	f7ff fdac 	bl	80039ec <RTC_Bcd2ToByte>
 8003e94:	7020      	strb	r0, [r4, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8003e96:	4638      	mov	r0, r7
 8003e98:	f7ff fda8 	bl	80039ec <RTC_Bcd2ToByte>
 8003e9c:	7060      	strb	r0, [r4, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	f7ff fda4 	bl	80039ec <RTC_Bcd2ToByte>
 8003ea4:	70a0      	strb	r0, [r4, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	f7ff fda0 	bl	80039ec <RTC_Bcd2ToByte>
 8003eac:	7320      	strb	r0, [r4, #12]
 8003eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eb0:	40002800 	.word	0x40002800

08003eb4 <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 8003eb4:	b082      	sub	sp, #8
  __IO uint32_t alarmcounter = 0x00;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <RTC_AlarmCmd+0x4c>)
 8003ebc:	22ca      	movs	r2, #202	; 0xca
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8003ec0:	2253      	movs	r2, #83	; 0x53
 8003ec2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 8003ec4:	689a      	ldr	r2, [r3, #8]
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 8003ec6:	b119      	cbz	r1, 8003ed0 <RTC_AlarmCmd+0x1c>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 8003ec8:	4310      	orrs	r0, r2
 8003eca:	6098      	str	r0, [r3, #8]

    status = SUCCESS;    
 8003ecc:	2001      	movs	r0, #1
 8003ece:	e012      	b.n	8003ef6 <RTC_AlarmCmd+0x42>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 8003ed0:	ea22 0200 	bic.w	r2, r2, r0
 8003ed4:	609a      	str	r2, [r3, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 8003ed6:	0a00      	lsrs	r0, r0, #8
 8003ed8:	68da      	ldr	r2, [r3, #12]
      alarmcounter++;  
 8003eda:	9901      	ldr	r1, [sp, #4]
 8003edc:	3101      	adds	r1, #1
 8003ede:	9101      	str	r1, [sp, #4]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 8003ee0:	9901      	ldr	r1, [sp, #4]
 8003ee2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8003ee6:	d001      	beq.n	8003eec <RTC_AlarmCmd+0x38>
 8003ee8:	4210      	tst	r0, r2
 8003eea:	d0f5      	beq.n	8003ed8 <RTC_AlarmCmd+0x24>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <RTC_AlarmCmd+0x4c>)
 8003eee:	68db      	ldr	r3, [r3, #12]
    {
      status = ERROR;
 8003ef0:	4018      	ands	r0, r3
 8003ef2:	bf18      	it	ne
 8003ef4:	2001      	movne	r0, #1
      status = SUCCESS;
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8003ef6:	4b02      	ldr	r3, [pc, #8]	; (8003f00 <RTC_AlarmCmd+0x4c>)
 8003ef8:	22ff      	movs	r2, #255	; 0xff
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8003efc:	b002      	add	sp, #8
 8003efe:	4770      	bx	lr
 8003f00:	40002800 	.word	0x40002800

08003f04 <RTC_AlarmSubSecondConfig>:
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003f04:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <RTC_AlarmSubSecondConfig+0x20>)
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 8003f06:	b510      	push	{r4, lr}
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003f08:	24ca      	movs	r4, #202	; 0xca
 8003f0a:	625c      	str	r4, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
  
  /* Configure the Alarm A or Alarm B SubSecond registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 8003f0c:	430a      	orrs	r2, r1
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
 8003f0e:	2453      	movs	r4, #83	; 0x53
  
  /* Configure the Alarm A or Alarm B SubSecond registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
  
  if (RTC_Alarm == RTC_Alarm_A)
 8003f10:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
 8003f14:	625c      	str	r4, [r3, #36]	; 0x24
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
  
  if (RTC_Alarm == RTC_Alarm_A)
  {
    /* Configure the AlarmA SubSecond register */
    RTC->ALRMASSR = tmpreg;
 8003f16:	bf0c      	ite	eq
 8003f18:	645a      	streq	r2, [r3, #68]	; 0x44
  }
  else
  {
    /* Configure the Alarm B SubSecond register */
    RTC->ALRMBSSR = tmpreg;
 8003f1a:	649a      	strne	r2, [r3, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8003f1c:	22ff      	movs	r2, #255	; 0xff
 8003f1e:	625a      	str	r2, [r3, #36]	; 0x24

}
 8003f20:	bd10      	pop	{r4, pc}
 8003f22:	bf00      	nop
 8003f24:	40002800 	.word	0x40002800

08003f28 <RTC_GetAlarmSubSecond>:
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
  uint32_t tmpreg = 0;
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 8003f28:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003f2c:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <RTC_GetAlarmSubSecond+0x18>)
 8003f2e:	d103      	bne.n	8003f38 <RTC_GetAlarmSubSecond+0x10>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 8003f30:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003f32:	0440      	lsls	r0, r0, #17
 8003f34:	0c40      	lsrs	r0, r0, #17
 8003f36:	4770      	bx	lr
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8003f38:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003f3a:	0440      	lsls	r0, r0, #17
 8003f3c:	0c40      	lsrs	r0, r0, #17
  } 
  
  return (tmpreg);
}
 8003f3e:	4770      	bx	lr
 8003f40:	40002800 	.word	0x40002800

08003f44 <RTC_WakeUpClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003f44:	4b07      	ldr	r3, [pc, #28]	; (8003f64 <RTC_WakeUpClockConfig+0x20>)
 8003f46:	22ca      	movs	r2, #202	; 0xca
 8003f48:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8003f4a:	2253      	movs	r2, #83	; 0x53
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	f022 0207 	bic.w	r2, r2, #7
 8003f54:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	4302      	orrs	r2, r0
 8003f5a:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8003f5c:	22ff      	movs	r2, #255	; 0xff
 8003f5e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40002800 	.word	0x40002800

08003f68 <RTC_SetWakeUpCounter>:
{
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003f68:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <RTC_SetWakeUpCounter+0x14>)
 8003f6a:	22ca      	movs	r2, #202	; 0xca
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8003f6e:	2253      	movs	r2, #83	; 0x53
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8003f72:	22ff      	movs	r2, #255	; 0xff
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 8003f74:	6158      	str	r0, [r3, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40002800 	.word	0x40002800

08003f80 <RTC_GetWakeUpCounter>:
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 8003f80:	4b01      	ldr	r3, [pc, #4]	; (8003f88 <RTC_GetWakeUpCounter+0x8>)
 8003f82:	6958      	ldr	r0, [r3, #20]
}
 8003f84:	b280      	uxth	r0, r0
 8003f86:	4770      	bx	lr
 8003f88:	40002800 	.word	0x40002800

08003f8c <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 8003f8c:	b082      	sub	sp, #8
  __IO uint32_t wutcounter = 0x00;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003f92:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <RTC_WakeUpCmd+0x4c>)
 8003f94:	22ca      	movs	r2, #202	; 0xca
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8003f98:	2253      	movs	r2, #83	; 0x53
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 8003f9c:	689a      	ldr	r2, [r3, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  if (NewState != DISABLE)
 8003f9e:	b120      	cbz	r0, 8003faa <RTC_WakeUpCmd+0x1e>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 8003fa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fa4:	609a      	str	r2, [r3, #8]
    status = SUCCESS;    
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	e010      	b.n	8003fcc <RTC_WakeUpCmd+0x40>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 8003faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fae:	609a      	str	r2, [r3, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8003fb0:	68da      	ldr	r2, [r3, #12]
      wutcounter++;  
 8003fb2:	9901      	ldr	r1, [sp, #4]
 8003fb4:	3101      	adds	r1, #1
 8003fb6:	9101      	str	r1, [sp, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8003fb8:	9901      	ldr	r1, [sp, #4]
 8003fba:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8003fbe:	d001      	beq.n	8003fc4 <RTC_WakeUpCmd+0x38>
 8003fc0:	0750      	lsls	r0, r2, #29
 8003fc2:	d5f5      	bpl.n	8003fb0 <RTC_WakeUpCmd+0x24>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 8003fc4:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <RTC_WakeUpCmd+0x4c>)
 8003fc6:	68d8      	ldr	r0, [r3, #12]
    {
      status = ERROR;
 8003fc8:	f3c0 0080 	ubfx	r0, r0, #2, #1
      status = SUCCESS;
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8003fcc:	4b02      	ldr	r3, [pc, #8]	; (8003fd8 <RTC_WakeUpCmd+0x4c>)
 8003fce:	22ff      	movs	r2, #255	; 0xff
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8003fd2:	b002      	add	sp, #8
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40002800 	.word	0x40002800

08003fdc <RTC_DayLightSavingConfig>:
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003fdc:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <RTC_DayLightSavingConfig+0x20>)
 8003fde:	22ca      	movs	r2, #202	; 0xca
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8003fe2:	2253      	movs	r2, #83	; 0x53
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fec:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	4302      	orrs	r2, r0
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8003ff6:	22ff      	movs	r2, #255	; 0xff
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003ffa:	4770      	bx	lr
 8003ffc:	40002800 	.word	0x40002800

08004000 <RTC_GetStoreOperation>:
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
  return (RTC->CR & RTC_CR_BCK);
 8004000:	4b02      	ldr	r3, [pc, #8]	; (800400c <RTC_GetStoreOperation+0xc>)
 8004002:	6898      	ldr	r0, [r3, #8]
}
 8004004:	f400 2080 	and.w	r0, r0, #262144	; 0x40000
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40002800 	.word	0x40002800

08004010 <RTC_OutputConfig>:
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004010:	4b07      	ldr	r3, [pc, #28]	; (8004030 <RTC_OutputConfig+0x20>)
 8004012:	22ca      	movs	r2, #202	; 0xca
 8004014:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004016:	2253      	movs	r2, #83	; 0x53
 8004018:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8004020:	609a      	str	r2, [r3, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	4302      	orrs	r2, r0
 8004026:	430a      	orrs	r2, r1
 8004028:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800402a:	22ff      	movs	r2, #255	; 0xff
 800402c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800402e:	4770      	bx	lr
 8004030:	40002800 	.word	0x40002800

08004034 <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 8004034:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004036:	4d09      	ldr	r5, [pc, #36]	; (800405c <RTC_CoarseCalibConfig+0x28>)
 8004038:	23ca      	movs	r3, #202	; 0xca
 800403a:	626b      	str	r3, [r5, #36]	; 0x24
  RTC->WPR = 0x53;
 800403c:	2353      	movs	r3, #83	; 0x53
 800403e:	626b      	str	r3, [r5, #36]	; 0x24
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 8004040:	4604      	mov	r4, r0
 8004042:	460e      	mov	r6, r1
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8004044:	f7ff fcec 	bl	8003a20 <RTC_EnterInitMode>
 8004048:	b120      	cbz	r0, 8004054 <RTC_CoarseCalibConfig+0x20>
    status = ERROR;
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 800404a:	4334      	orrs	r4, r6
 800404c:	61ac      	str	r4, [r5, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800404e:	f7ff fd05 	bl	8003a5c <RTC_ExitInitMode>
    
    status = SUCCESS;
 8004052:	2001      	movs	r0, #1
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8004054:	23ff      	movs	r3, #255	; 0xff
 8004056:	626b      	str	r3, [r5, #36]	; 0x24
  
  return status;
}
 8004058:	bd70      	pop	{r4, r5, r6, pc}
 800405a:	bf00      	nop
 800405c:	40002800 	.word	0x40002800

08004060 <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 8004060:	b538      	push	{r3, r4, r5, lr}
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004062:	4c0b      	ldr	r4, [pc, #44]	; (8004090 <RTC_CoarseCalibCmd+0x30>)
 8004064:	23ca      	movs	r3, #202	; 0xca
 8004066:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8004068:	2353      	movs	r3, #83	; 0x53
 800406a:	6263      	str	r3, [r4, #36]	; 0x24
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 800406c:	4605      	mov	r5, r0
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800406e:	f7ff fcd7 	bl	8003a20 <RTC_EnterInitMode>
 8004072:	b150      	cbz	r0, 800408a <RTC_CoarseCalibCmd+0x2a>
  else
  {
    if (NewState != DISABLE)
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 8004074:	68a3      	ldr	r3, [r4, #8]
  {
    status =  ERROR;
  }
  else
  {
    if (NewState != DISABLE)
 8004076:	b115      	cbz	r5, 800407e <RTC_CoarseCalibCmd+0x1e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 8004078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800407c:	e001      	b.n	8004082 <RTC_CoarseCalibCmd+0x22>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 800407e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004082:	60a3      	str	r3, [r4, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8004084:	f7ff fcea 	bl	8003a5c <RTC_ExitInitMode>
    
    status = SUCCESS;
 8004088:	2001      	movs	r0, #1
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800408a:	23ff      	movs	r3, #255	; 0xff
 800408c:	6263      	str	r3, [r4, #36]	; 0x24
  
  return status;
}
 800408e:	bd38      	pop	{r3, r4, r5, pc}
 8004090:	40002800 	.word	0x40002800

08004094 <RTC_CalibOutputCmd>:
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004094:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <RTC_CalibOutputCmd+0x20>)
 8004096:	22ca      	movs	r2, #202	; 0xca
 8004098:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800409a:	2253      	movs	r2, #83	; 0x53
 800409c:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 800409e:	689a      	ldr	r2, [r3, #8]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
  
  if (NewState != DISABLE)
 80040a0:	b110      	cbz	r0, 80040a8 <RTC_CalibOutputCmd+0x14>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 80040a2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80040a6:	e001      	b.n	80040ac <RTC_CalibOutputCmd+0x18>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 80040a8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80040ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80040ae:	22ff      	movs	r2, #255	; 0xff
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80040b2:	4770      	bx	lr
 80040b4:	40002800 	.word	0x40002800

080040b8 <RTC_CalibOutputConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80040b8:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <RTC_CalibOutputConfig+0x20>)
 80040ba:	22ca      	movs	r2, #202	; 0xca
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80040be:	2253      	movs	r2, #83	; 0x53
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before config*/
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80040c8:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	4302      	orrs	r2, r0
 80040ce:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 80040d0:	22ff      	movs	r2, #255	; 0xff
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40002800 	.word	0x40002800

080040dc <RTC_SmoothCalibConfig>:
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80040dc:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <RTC_SmoothCalibConfig+0x3c>)
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 80040de:	b530      	push	{r4, r5, lr}
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80040e0:	24ca      	movs	r4, #202	; 0xca
 80040e2:	625c      	str	r4, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80040e4:	2453      	movs	r4, #83	; 0x53
 80040e6:	625c      	str	r4, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 80040e8:	68dc      	ldr	r4, [r3, #12]
 80040ea:	03e4      	lsls	r4, r4, #15
 80040ec:	d506      	bpl.n	80040fc <RTC_SmoothCalibConfig+0x20>
 80040ee:	4c0b      	ldr	r4, [pc, #44]	; (800411c <RTC_SmoothCalibConfig+0x40>)
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 80040f0:	68dd      	ldr	r5, [r3, #12]
 80040f2:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 80040f6:	d001      	beq.n	80040fc <RTC_SmoothCalibConfig+0x20>
 80040f8:	3c01      	subs	r4, #1
 80040fa:	d1f9      	bne.n	80040f0 <RTC_SmoothCalibConfig+0x14>
      recalpfcount++;
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <RTC_SmoothCalibConfig+0x3c>)
 80040fe:	68dc      	ldr	r4, [r3, #12]
 8004100:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8004104:	d104      	bne.n	8004110 <RTC_SmoothCalibConfig+0x34>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 8004106:	4301      	orrs	r1, r0
 8004108:	4311      	orrs	r1, r2
 800410a:	63d9      	str	r1, [r3, #60]	; 0x3c

    status = SUCCESS;
 800410c:	2001      	movs	r0, #1
 800410e:	e000      	b.n	8004112 <RTC_SmoothCalibConfig+0x36>
  }
  else
  {
    status = ERROR;
 8004110:	2000      	movs	r0, #0
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8004112:	22ff      	movs	r2, #255	; 0xff
 8004114:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
}
 8004116:	bd30      	pop	{r4, r5, pc}
 8004118:	40002800 	.word	0x40002800
 800411c:	00020001 	.word	0x00020001

08004120 <RTC_TimeStampCmd>:
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8004120:	4b08      	ldr	r3, [pc, #32]	; (8004144 <RTC_TimeStampCmd+0x24>)
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004128:	f022 0208 	bic.w	r2, r2, #8

  /* Get the new configuration */
  if (NewState != DISABLE)
 800412c:	b109      	cbz	r1, 8004132 <RTC_TimeStampCmd+0x12>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 800412e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 8004132:	4310      	orrs	r0, r2
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004134:	22ca      	movs	r2, #202	; 0xca
 8004136:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004138:	2253      	movs	r2, #83	; 0x53
 800413a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800413c:	22ff      	movs	r2, #255	; 0xff
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 800413e:	6098      	str	r0, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8004140:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004142:	4770      	bx	lr
 8004144:	40002800 	.word	0x40002800

08004148 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 8004148:	b538      	push	{r3, r4, r5, lr}
 800414a:	4615      	mov	r5, r2

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 800414c:	4a1a      	ldr	r2, [pc, #104]	; (80041b8 <RTC_GetTimeStamp+0x70>)
 800414e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 8004150:	6b52      	ldr	r2, [r2, #52]	; 0x34
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 8004152:	460c      	mov	r4, r1
  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8004154:	f3c3 4105 	ubfx	r1, r3, #16, #6
 8004158:	7021      	strb	r1, [r4, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 800415a:	f3c3 2106 	ubfx	r1, r3, #8, #7
 800415e:	7061      	strb	r1, [r4, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 8004160:	f003 017f 	and.w	r1, r3, #127	; 0x7f
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 8004164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004168:	0c1b      	lsrs	r3, r3, #16
 800416a:	70e3      	strb	r3, [r4, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 800416c:	2300      	movs	r3, #0
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 800416e:	70a1      	strb	r1, [r4, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 8004170:	70eb      	strb	r3, [r5, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8004172:	f3c2 2304 	ubfx	r3, r2, #8, #5
 8004176:	706b      	strb	r3, [r5, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 8004178:	f002 033f 	and.w	r3, r2, #63	; 0x3f
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 800417c:	f3c2 3242 	ubfx	r2, r2, #13, #3
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 8004180:	70ab      	strb	r3, [r5, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 8004182:	702a      	strb	r2, [r5, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8004184:	b9b8      	cbnz	r0, 80041b6 <RTC_GetTimeStamp+0x6e>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 8004186:	7820      	ldrb	r0, [r4, #0]
 8004188:	f7ff fc30 	bl	80039ec <RTC_Bcd2ToByte>
 800418c:	7020      	strb	r0, [r4, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 800418e:	7860      	ldrb	r0, [r4, #1]
 8004190:	f7ff fc2c 	bl	80039ec <RTC_Bcd2ToByte>
 8004194:	7060      	strb	r0, [r4, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 8004196:	78a0      	ldrb	r0, [r4, #2]
 8004198:	f7ff fc28 	bl	80039ec <RTC_Bcd2ToByte>
 800419c:	70a0      	strb	r0, [r4, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 800419e:	7868      	ldrb	r0, [r5, #1]
 80041a0:	f7ff fc24 	bl	80039ec <RTC_Bcd2ToByte>
 80041a4:	7068      	strb	r0, [r5, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 80041a6:	78a8      	ldrb	r0, [r5, #2]
 80041a8:	f7ff fc20 	bl	80039ec <RTC_Bcd2ToByte>
 80041ac:	70a8      	strb	r0, [r5, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 80041ae:	7828      	ldrb	r0, [r5, #0]
 80041b0:	f7ff fc1c 	bl	80039ec <RTC_Bcd2ToByte>
 80041b4:	7028      	strb	r0, [r5, #0]
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
 80041b8:	40002800 	.word	0x40002800

080041bc <RTC_GetTimeStampSubSecond>:
  * @retval RTC current timestamp Subseconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
  /* Get timestamp subseconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 80041bc:	4b01      	ldr	r3, [pc, #4]	; (80041c4 <RTC_GetTimeStampSubSecond+0x8>)
 80041be:	6b98      	ldr	r0, [r3, #56]	; 0x38
}
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40002800 	.word	0x40002800

080041c8 <RTC_TamperTriggerConfig>:
  *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 80041c8:	4b04      	ldr	r3, [pc, #16]	; (80041dc <RTC_TamperTriggerConfig+0x14>)
 80041ca:	0040      	lsls	r0, r0, #1
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 80041cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 80041ce:	b911      	cbnz	r1, 80041d6 <RTC_TamperTriggerConfig+0xe>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 80041d0:	ea22 0000 	bic.w	r0, r2, r0
 80041d4:	e000      	b.n	80041d8 <RTC_TamperTriggerConfig+0x10>
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 80041d6:	4310      	orrs	r0, r2
 80041d8:	6418      	str	r0, [r3, #64]	; 0x40
 80041da:	4770      	bx	lr
 80041dc:	40002800 	.word	0x40002800

080041e0 <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <RTC_TamperCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 80041e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80041e4:	b109      	cbz	r1, 80041ea <RTC_TamperCmd+0xa>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 80041e6:	4310      	orrs	r0, r2
 80041e8:	e001      	b.n	80041ee <RTC_TamperCmd+0xe>
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 80041ea:	ea22 0000 	bic.w	r0, r2, r0
 80041ee:	6418      	str	r0, [r3, #64]	; 0x40
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40002800 	.word	0x40002800

080041f8 <RTC_TamperFilterConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 80041f8:	4b04      	ldr	r3, [pc, #16]	; (800420c <RTC_TamperFilterConfig+0x14>)
 80041fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041fc:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8004200:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 8004202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004204:	4302      	orrs	r2, r0
 8004206:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40002800 	.word	0x40002800

08004210 <RTC_TamperSamplingFreqConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 8004210:	4b04      	ldr	r3, [pc, #16]	; (8004224 <RTC_TamperSamplingFreqConfig+0x14>)
 8004212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004214:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004218:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 800421a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800421c:	4302      	orrs	r2, r0
 800421e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40002800 	.word	0x40002800

08004228 <RTC_TamperPinsPrechargeDuration>:
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 8004228:	4b04      	ldr	r3, [pc, #16]	; (800423c <RTC_TamperPinsPrechargeDuration+0x14>)
 800422a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800422c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004230:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 8004232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004234:	4302      	orrs	r2, r0
 8004236:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40002800 	.word	0x40002800

08004240 <RTC_TimeStampOnTamperDetectionCmd>:
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 8004240:	4b04      	ldr	r3, [pc, #16]	; (8004254 <RTC_TimeStampOnTamperDetectionCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 8004242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 8004244:	b110      	cbz	r0, 800424c <RTC_TimeStampOnTamperDetectionCmd+0xc>
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 8004246:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800424a:	e001      	b.n	8004250 <RTC_TimeStampOnTamperDetectionCmd+0x10>
  }
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 800424c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004250:	641a      	str	r2, [r3, #64]	; 0x40
 8004252:	4770      	bx	lr
 8004254:	40002800 	.word	0x40002800

08004258 <RTC_TamperPullUpCmd>:
  * @param  NewState: new state of tamper pull up.
  *   This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 8004258:	4b04      	ldr	r3, [pc, #16]	; (800426c <RTC_TamperPullUpCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 800425a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 800425c:	b110      	cbz	r0, 8004264 <RTC_TamperPullUpCmd+0xc>
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 800425e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004262:	e001      	b.n	8004268 <RTC_TamperPullUpCmd+0x10>
  }
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 8004264:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
 800426a:	4770      	bx	lr
 800426c:	40002800 	.word	0x40002800

08004270 <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 8004270:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <RTC_WriteBackupRegister+0x1c>)
 8004278:	9301      	str	r3, [sp, #4]
  tmp += (RTC_BKP_DR * 4);
 800427a:	9b01      	ldr	r3, [sp, #4]
 800427c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004280:	9301      	str	r3, [sp, #4]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004282:	9b01      	ldr	r3, [sp, #4]
 8004284:	6019      	str	r1, [r3, #0]
}
 8004286:	b002      	add	sp, #8
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40002850 	.word	0x40002850

08004290 <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 8004290:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8004292:	2300      	movs	r3, #0
 8004294:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <RTC_ReadBackupRegister+0x1c>)
 8004298:	9301      	str	r3, [sp, #4]
  tmp += (RTC_BKP_DR * 4);
 800429a:	9b01      	ldr	r3, [sp, #4]
 800429c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80042a0:	9301      	str	r3, [sp, #4]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80042a2:	9b01      	ldr	r3, [sp, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
}
 80042a6:	b002      	add	sp, #8
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40002850 	.word	0x40002850

080042b0 <RTC_TamperPinSelection>:
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <RTC_TamperPinSelection+0x14>)
 80042b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 80042ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042bc:	4302      	orrs	r2, r0
 80042be:	641a      	str	r2, [r3, #64]	; 0x40
}
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40002800 	.word	0x40002800

080042c8 <RTC_TimeStampPinSelection>:
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <RTC_TimeStampPinSelection+0x14>)
 80042ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042cc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80042d0:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 80042d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042d4:	4302      	orrs	r2, r0
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40002800 	.word	0x40002800

080042e0 <RTC_OutputTypeConfig>:
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 80042e0:	4b04      	ldr	r3, [pc, #16]	; (80042f4 <RTC_OutputTypeConfig+0x14>)
 80042e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 80042ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ec:	4302      	orrs	r2, r0
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40
}
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40002800 	.word	0x40002800

080042f8 <RTC_SynchroShiftConfig>:
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80042f8:	4b14      	ldr	r3, [pc, #80]	; (800434c <RTC_SynchroShiftConfig+0x54>)
 80042fa:	22ca      	movs	r2, #202	; 0xca
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 80042fc:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80042fe:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004300:	2253      	movs	r2, #83	; 0x53
 8004302:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	0712      	lsls	r2, r2, #28
 8004308:	d507      	bpl.n	800431a <RTC_SynchroShiftConfig+0x22>
 800430a:	f241 0201 	movw	r2, #4097	; 0x1001
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800430e:	68dc      	ldr	r4, [r3, #12]
 8004310:	f014 0f08 	tst.w	r4, #8
 8004314:	d001      	beq.n	800431a <RTC_SynchroShiftConfig+0x22>
 8004316:	3a01      	subs	r2, #1
 8004318:	d1f9      	bne.n	800430e <RTC_SynchroShiftConfig+0x16>
      shpfcount++;
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 800431a:	4b0c      	ldr	r3, [pc, #48]	; (800434c <RTC_SynchroShiftConfig+0x54>)
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	f012 0208 	ands.w	r2, r2, #8
 8004322:	d10b      	bne.n	800433c <RTC_SynchroShiftConfig+0x44>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 8004324:	689c      	ldr	r4, [r3, #8]
 8004326:	f014 0f10 	tst.w	r4, #16
 800432a:	d109      	bne.n	8004340 <RTC_SynchroShiftConfig+0x48>
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 800432c:	4308      	orrs	r0, r1
 800432e:	62d8      	str	r0, [r3, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 8004330:	f7ff fbbe 	bl	8003ab0 <RTC_WaitForSynchro>
      {
        status = ERROR;
 8004334:	3000      	adds	r0, #0
 8004336:	bf18      	it	ne
 8004338:	2001      	movne	r0, #1
 800433a:	e002      	b.n	8004342 <RTC_SynchroShiftConfig+0x4a>
      status = ERROR;
    }
  }
  else
  {
    status = ERROR;
 800433c:	2000      	movs	r0, #0
 800433e:	e000      	b.n	8004342 <RTC_SynchroShiftConfig+0x4a>
        status = SUCCESS;
      }
    }
    else
    {
      status = ERROR;
 8004340:	4610      	mov	r0, r2
  {
    status = ERROR;
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8004342:	4b02      	ldr	r3, [pc, #8]	; (800434c <RTC_SynchroShiftConfig+0x54>)
 8004344:	22ff      	movs	r2, #255	; 0xff
 8004346:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
}
 8004348:	bd10      	pop	{r4, pc}
 800434a:	bf00      	nop
 800434c:	40002800 	.word	0x40002800

08004350 <RTC_ITConfig>:
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004350:	4b0e      	ldr	r3, [pc, #56]	; (800438c <RTC_ITConfig+0x3c>)
 8004352:	22ca      	movs	r2, #202	; 0xca
 8004354:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004356:	2253      	movs	r2, #83	; 0x53
 8004358:	625a      	str	r2, [r3, #36]	; 0x24
 800435a:	f020 0204 	bic.w	r2, r0, #4

  if (NewState != DISABLE)
 800435e:	b139      	cbz	r1, 8004370 <RTC_ITConfig+0x20>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 8004360:	6899      	ldr	r1, [r3, #8]
 8004362:	430a      	orrs	r2, r1
 8004364:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 8004366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004368:	f000 0004 	and.w	r0, r0, #4
 800436c:	4310      	orrs	r0, r2
 800436e:	e008      	b.n	8004382 <RTC_ITConfig+0x32>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 8004370:	6899      	ldr	r1, [r3, #8]
 8004372:	ea21 0202 	bic.w	r2, r1, r2
 8004376:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 8004378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800437a:	f000 0004 	and.w	r0, r0, #4
 800437e:	ea22 0000 	bic.w	r0, r2, r0
 8004382:	6418      	str	r0, [r3, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8004384:	4b01      	ldr	r3, [pc, #4]	; (800438c <RTC_ITConfig+0x3c>)
 8004386:	22ff      	movs	r2, #255	; 0xff
 8004388:	625a      	str	r2, [r3, #36]	; 0x24
}
 800438a:	4770      	bx	lr
 800438c:	40002800 	.word	0x40002800

08004390 <RTC_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 8004390:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <RTC_GetFlagStatus+0x14>)
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <RTC_GetFlagStatus+0x18>)
 8004396:	4013      	ands	r3, r2
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
  {
    bitstatus = SET;
 8004398:	4203      	tst	r3, r0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800439a:	bf0c      	ite	eq
 800439c:	2000      	moveq	r0, #0
 800439e:	2001      	movne	r0, #1
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40002800 	.word	0x40002800
 80043a8:	00013f7f 	.word	0x00013f7f

080043ac <RTC_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <RTC_ClearFlag+0x18>)
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	b280      	uxth	r0, r0
 80043b2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80043b6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80043ba:	ea62 0200 	orn	r2, r2, r0
 80043be:	60da      	str	r2, [r3, #12]
}
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40002800 	.word	0x40002800

080043c8 <RTC_GetITStatus>:
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <RTC_GetITStatus+0x2c>)
 80043ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 80043cc:	b510      	push	{r4, lr}
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 80043ce:	689c      	ldr	r4, [r3, #8]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 80043d0:	68d9      	ldr	r1, [r3, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 80043d2:	f002 0204 	and.w	r2, r2, #4
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 80043d6:	ea02 32d0 	and.w	r2, r2, r0, lsr #15
 80043da:	ea00 0304 	and.w	r3, r0, r4
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 80043de:	4313      	orrs	r3, r2
 80043e0:	d006      	beq.n	80043f0 <RTC_GetITStatus+0x28>
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 80043e2:	b28b      	uxth	r3, r1
  *            @arg RTC_IT_ALRB: Alarm B interrupt 
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
 80043e4:	ea13 1310 	ands.w	r3, r3, r0, lsr #4
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
  {
    bitstatus = SET;
 80043e8:	bf0c      	ite	eq
 80043ea:	2000      	moveq	r0, #0
 80043ec:	2001      	movne	r0, #1
 80043ee:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 80043f0:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 80043f2:	bd10      	pop	{r4, pc}
 80043f4:	40002800 	.word	0x40002800

080043f8 <RTC_ClearITPendingBit>:

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <RTC_ClearITPendingBit+0x18>)
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	f3c0 100f 	ubfx	r0, r0, #4, #16
 8004400:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8004404:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004408:	ea62 0200 	orn	r2, r2, r0
 800440c:	60da      	str	r2, [r3, #12]
}
 800440e:	4770      	bx	lr
 8004410:	40002800 	.word	0x40002800

08004414 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 8004414:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 8004416:	2101      	movs	r1, #1
 8004418:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800441c:	f7ff f9f6 	bl	800380c <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 8004420:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004424:	2100      	movs	r1, #0
}
 8004426:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SDIO_DeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 800442a:	f7ff b9ef 	b.w	800380c <RCC_APB2PeriphResetCmd>

0800442e <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800442e:	b510      	push	{r4, lr}
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8004430:	6881      	ldr	r1, [r0, #8]
 8004432:	6844      	ldr	r4, [r0, #4]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8004434:	4a08      	ldr	r2, [pc, #32]	; (8004458 <SDIO_Init+0x2a>)
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8004436:	4321      	orrs	r1, r4
 8004438:	68c4      	ldr	r4, [r0, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 800443a:	6853      	ldr	r3, [r2, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800443c:	4321      	orrs	r1, r4
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800443e:	6804      	ldr	r4, [r0, #0]
 8004440:	4321      	orrs	r1, r4
 8004442:	6904      	ldr	r4, [r0, #16]
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 8004444:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8004448:	4321      	orrs	r1, r4
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 800444a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800444e:	430b      	orrs	r3, r1
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8004450:	7d01      	ldrb	r1, [r0, #20]
 8004452:	430b      	orrs	r3, r1
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 8004454:	6053      	str	r3, [r2, #4]
}
 8004456:	bd10      	pop	{r4, pc}
 8004458:	40012c00 	.word	0x40012c00

0800445c <SDIO_StructInit>:
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 800445c:	2300      	movs	r3, #0
 800445e:	7503      	strb	r3, [r0, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8004460:	6003      	str	r3, [r0, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8004462:	6043      	str	r3, [r0, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8004464:	6083      	str	r3, [r0, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 8004466:	60c3      	str	r3, [r0, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8004468:	6103      	str	r3, [r0, #16]
}
 800446a:	4770      	bx	lr

0800446c <SDIO_ClockCmd>:
void SDIO_ClockCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 800446c:	4b01      	ldr	r3, [pc, #4]	; (8004474 <SDIO_ClockCmd+0x8>)
 800446e:	6018      	str	r0, [r3, #0]
}
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	422580a0 	.word	0x422580a0

08004478 <SDIO_SetPowerState>:
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 8004478:	4b01      	ldr	r3, [pc, #4]	; (8004480 <SDIO_SetPowerState+0x8>)
 800447a:	6018      	str	r0, [r3, #0]
}
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40012c00 	.word	0x40012c00

08004484 <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 8004484:	4b02      	ldr	r3, [pc, #8]	; (8004490 <SDIO_GetPowerState+0xc>)
 8004486:	6818      	ldr	r0, [r3, #0]
}
 8004488:	f000 0003 	and.w	r0, r0, #3
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40012c00 	.word	0x40012c00

08004494 <SDIO_SendCommand>:
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8004494:	6802      	ldr	r2, [r0, #0]
 8004496:	4b09      	ldr	r3, [pc, #36]	; (80044bc <SDIO_SendCommand+0x28>)
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8004498:	b510      	push	{r4, lr}
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 800449a:	609a      	str	r2, [r3, #8]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800449c:	6884      	ldr	r4, [r0, #8]
 800449e:	6841      	ldr	r1, [r0, #4]
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 80044a0:	68da      	ldr	r2, [r3, #12]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 80044a2:	4321      	orrs	r1, r4
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 80044a4:	68c4      	ldr	r4, [r0, #12]
 80044a6:	6900      	ldr	r0, [r0, #16]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 80044a8:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 80044ac:	4321      	orrs	r1, r4
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 80044ae:	f022 0207 	bic.w	r2, r2, #7
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 80044b2:	4301      	orrs	r1, r0
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 80044b4:	430a      	orrs	r2, r1
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 80044b6:	60da      	str	r2, [r3, #12]
}
 80044b8:	bd10      	pop	{r4, pc}
 80044ba:	bf00      	nop
 80044bc:	40012c00 	.word	0x40012c00

080044c0 <SDIO_CmdStructInit>:
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 80044c0:	2300      	movs	r3, #0
 80044c2:	6003      	str	r3, [r0, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 80044c4:	6043      	str	r3, [r0, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 80044c6:	6083      	str	r3, [r0, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 80044c8:	60c3      	str	r3, [r0, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 80044ca:	6103      	str	r3, [r0, #16]
}
 80044cc:	4770      	bx	lr

080044ce <SDIO_GetCommandResponse>:
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
  return (uint8_t)(SDIO->RESPCMD);
 80044ce:	4b02      	ldr	r3, [pc, #8]	; (80044d8 <SDIO_GetCommandResponse+0xa>)
 80044d0:	6918      	ldr	r0, [r3, #16]
}
 80044d2:	b2c0      	uxtb	r0, r0
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40012c00 	.word	0x40012c00

080044dc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 80044dc:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 80044e2:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <SDIO_GetResponse+0x14>)
 80044e4:	18c3      	adds	r3, r0, r3
 80044e6:	9301      	str	r3, [sp, #4]
  
  return (*(__IO uint32_t *) tmp); 
 80044e8:	9b01      	ldr	r3, [sp, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
}
 80044ec:	b002      	add	sp, #8
 80044ee:	4770      	bx	lr
 80044f0:	40012c14 	.word	0x40012c14

080044f4 <SDIO_DataConfig>:
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 80044f4:	6802      	ldr	r2, [r0, #0]
 80044f6:	4b09      	ldr	r3, [pc, #36]	; (800451c <SDIO_DataConfig+0x28>)
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 80044f8:	b510      	push	{r4, lr}
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 80044fc:	6842      	ldr	r2, [r0, #4]
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8004500:	68c4      	ldr	r4, [r0, #12]
 8004502:	6882      	ldr	r2, [r0, #8]
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 8004504:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8004506:	4322      	orrs	r2, r4
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8004508:	6904      	ldr	r4, [r0, #16]
 800450a:	6940      	ldr	r0, [r0, #20]
 800450c:	4322      	orrs	r2, r4

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 800450e:	f021 01f7 	bic.w	r1, r1, #247	; 0xf7
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8004512:	4302      	orrs	r2, r0
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8004514:	430a      	orrs	r2, r1
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 8004516:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004518:	bd10      	pop	{r4, pc}
 800451a:	bf00      	nop
 800451c:	40012c00 	.word	0x40012c00

08004520 <SDIO_DataStructInit>:
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 8004520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004524:	6003      	str	r3, [r0, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 8004526:	2300      	movs	r3, #0
 8004528:	6043      	str	r3, [r0, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 800452a:	6083      	str	r3, [r0, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 800452c:	60c3      	str	r3, [r0, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 800452e:	6103      	str	r3, [r0, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 8004530:	6143      	str	r3, [r0, #20]
}
 8004532:	4770      	bx	lr

08004534 <SDIO_GetDataCounter>:
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
  return SDIO->DCOUNT;
 8004534:	4b01      	ldr	r3, [pc, #4]	; (800453c <SDIO_GetDataCounter+0x8>)
 8004536:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40012c00 	.word	0x40012c00

08004540 <SDIO_ReadData>:
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
  return SDIO->FIFO;
 8004540:	4b01      	ldr	r3, [pc, #4]	; (8004548 <SDIO_ReadData+0x8>)
 8004542:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 8004546:	4770      	bx	lr
 8004548:	40012c00 	.word	0x40012c00

0800454c <SDIO_WriteData>:
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
  SDIO->FIFO = Data;
 800454c:	4b01      	ldr	r3, [pc, #4]	; (8004554 <SDIO_WriteData+0x8>)
 800454e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
}
 8004552:	4770      	bx	lr
 8004554:	40012c00 	.word	0x40012c00

08004558 <SDIO_GetFIFOCount>:
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
  return SDIO->FIFOCNT;
 8004558:	4b01      	ldr	r3, [pc, #4]	; (8004560 <SDIO_GetFIFOCount+0x8>)
 800455a:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40012c00 	.word	0x40012c00

08004564 <SDIO_StartSDIOReadWait>:
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 8004564:	4b01      	ldr	r3, [pc, #4]	; (800456c <SDIO_StartSDIOReadWait+0x8>)
 8004566:	6018      	str	r0, [r3, #0]
}
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	422585a0 	.word	0x422585a0

08004570 <SDIO_StopSDIOReadWait>:
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 8004570:	4b01      	ldr	r3, [pc, #4]	; (8004578 <SDIO_StopSDIOReadWait+0x8>)
 8004572:	6018      	str	r0, [r3, #0]
}
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	422585a4 	.word	0x422585a4

0800457c <SDIO_SetSDIOReadWaitMode>:
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 800457c:	4b01      	ldr	r3, [pc, #4]	; (8004584 <SDIO_SetSDIOReadWaitMode+0x8>)
 800457e:	6018      	str	r0, [r3, #0]
}
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	422585a8 	.word	0x422585a8

08004588 <SDIO_SetSDIOOperation>:
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 8004588:	4b01      	ldr	r3, [pc, #4]	; (8004590 <SDIO_SetSDIOOperation+0x8>)
 800458a:	6018      	str	r0, [r3, #0]
}
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	422585ac 	.word	0x422585ac

08004594 <SDIO_SendSDIOSuspendCmd>:
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 8004594:	4b01      	ldr	r3, [pc, #4]	; (800459c <SDIO_SendSDIOSuspendCmd+0x8>)
 8004596:	6018      	str	r0, [r3, #0]
}
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	422581ac 	.word	0x422581ac

080045a0 <SDIO_CommandCompletionCmd>:
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 80045a0:	4b01      	ldr	r3, [pc, #4]	; (80045a8 <SDIO_CommandCompletionCmd+0x8>)
 80045a2:	6018      	str	r0, [r3, #0]
}
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	422581b0 	.word	0x422581b0

080045ac <SDIO_CEATAITCmd>:
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 80045ac:	f000 0001 	and.w	r0, r0, #1
 80045b0:	4b02      	ldr	r3, [pc, #8]	; (80045bc <SDIO_CEATAITCmd+0x10>)
 80045b2:	f080 0001 	eor.w	r0, r0, #1
 80045b6:	6018      	str	r0, [r3, #0]
}
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	422581b4 	.word	0x422581b4

080045c0 <SDIO_SendCEATACmd>:
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 80045c0:	4b01      	ldr	r3, [pc, #4]	; (80045c8 <SDIO_SendCEATACmd+0x8>)
 80045c2:	6018      	str	r0, [r3, #0]
}
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	422581b8 	.word	0x422581b8

080045cc <SDIO_DMACmd>:
void SDIO_DMACmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 80045cc:	4b01      	ldr	r3, [pc, #4]	; (80045d4 <SDIO_DMACmd+0x8>)
 80045ce:	6018      	str	r0, [r3, #0]
}
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	4225858c 	.word	0x4225858c

080045d8 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 80045d8:	4b04      	ldr	r3, [pc, #16]	; (80045ec <SDIO_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 80045da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
{
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80045dc:	b109      	cbz	r1, 80045e2 <SDIO_ITConfig+0xa>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 80045de:	4310      	orrs	r0, r2
 80045e0:	e001      	b.n	80045e6 <SDIO_ITConfig+0xe>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 80045e2:	ea22 0000 	bic.w	r0, r2, r0
 80045e6:	63d8      	str	r0, [r3, #60]	; 0x3c
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40012c00 	.word	0x40012c00

080045f0 <SDIO_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 80045f0:	4b03      	ldr	r3, [pc, #12]	; (8004600 <SDIO_GetFlagStatus+0x10>)
 80045f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  {
    bitstatus = SET;
 80045f4:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80045f6:	bf0c      	ite	eq
 80045f8:	2000      	moveq	r0, #0
 80045fa:	2001      	movne	r0, #1
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40012c00 	.word	0x40012c00

08004604 <SDIO_ClearFlag>:
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 8004604:	4b01      	ldr	r3, [pc, #4]	; (800460c <SDIO_ClearFlag+0x8>)
 8004606:	6398      	str	r0, [r3, #56]	; 0x38
}
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40012c00 	.word	0x40012c00

08004610 <SDIO_GetITStatus>:
{ 
  ITStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <SDIO_GetITStatus+0x10>)
 8004612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  {
    bitstatus = SET;
 8004614:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004616:	bf0c      	ite	eq
 8004618:	2000      	moveq	r0, #0
 800461a:	2001      	movne	r0, #1
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40012c00 	.word	0x40012c00

08004624 <SDIO_ClearITPendingBit>:
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 8004624:	4b01      	ldr	r3, [pc, #4]	; (800462c <SDIO_ClearITPendingBit+0x8>)
 8004626:	6398      	str	r0, [r3, #56]	; 0x38
}
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40012c00 	.word	0x40012c00

08004630 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8004630:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8004632:	4b15      	ldr	r3, [pc, #84]	; (8004688 <SPI_I2S_DeInit+0x58>)
 8004634:	4298      	cmp	r0, r3
 8004636:	d10b      	bne.n	8004650 <SPI_I2S_DeInit+0x20>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8004638:	2101      	movs	r1, #1
 800463a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800463e:	f7ff f8e5 	bl	800380c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8004642:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004646:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8004648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800464c:	f7ff b8de 	b.w	800380c <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
 8004650:	4b0e      	ldr	r3, [pc, #56]	; (800468c <SPI_I2S_DeInit+0x5c>)
 8004652:	4298      	cmp	r0, r3
 8004654:	d107      	bne.n	8004666 <SPI_I2S_DeInit+0x36>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8004656:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800465a:	2101      	movs	r1, #1
 800465c:	f7ff f8ca 	bl	80037f4 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8004660:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004664:	e009      	b.n	800467a <SPI_I2S_DeInit+0x4a>
    }
  else
  {
    if (SPIx == SPI3)
 8004666:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <SPI_I2S_DeInit+0x60>)
 8004668:	4298      	cmp	r0, r3
 800466a:	d10b      	bne.n	8004684 <SPI_I2S_DeInit+0x54>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800466c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004670:	2101      	movs	r1, #1
 8004672:	f7ff f8bf 	bl	80037f4 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8004676:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800467a:	2100      	movs	r1, #0
    }
  }
}
 800467c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8004680:	f7ff b8b8 	b.w	80037f4 <RCC_APB1PeriphResetCmd>
 8004684:	bd08      	pop	{r3, pc}
 8004686:	bf00      	nop
 8004688:	40013000 	.word	0x40013000
 800468c:	40003800 	.word	0x40003800
 8004690:	40003c00 	.word	0x40003c00

08004694 <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004694:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8004696:	8802      	ldrh	r2, [r0, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8004698:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800469a:	884c      	ldrh	r4, [r1, #2]
 800469c:	4323      	orrs	r3, r4
 800469e:	888c      	ldrh	r4, [r1, #4]
 80046a0:	4323      	orrs	r3, r4
 80046a2:	88cc      	ldrh	r4, [r1, #6]
 80046a4:	4323      	orrs	r3, r4
 80046a6:	890c      	ldrh	r4, [r1, #8]
 80046a8:	4323      	orrs	r3, r4
 80046aa:	894c      	ldrh	r4, [r1, #10]
 80046ac:	4323      	orrs	r3, r4
 80046ae:	898c      	ldrh	r4, [r1, #12]
 80046b0:	4323      	orrs	r3, r4
 80046b2:	89cc      	ldrh	r4, [r1, #14]

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80046b4:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80046b8:	4323      	orrs	r3, r4
 80046ba:	4313      	orrs	r3, r2
 80046bc:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80046be:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80046c0:	8b83      	ldrh	r3, [r0, #28]
 80046c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046c6:	041b      	lsls	r3, r3, #16
 80046c8:	0c1b      	lsrs	r3, r3, #16
 80046ca:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80046cc:	8a0b      	ldrh	r3, [r1, #16]
 80046ce:	8203      	strh	r3, [r0, #16]
}
 80046d0:	bd10      	pop	{r4, pc}

080046d2 <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80046d2:	8b83      	ldrh	r3, [r0, #28]
 80046d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80046d8:	f023 030f 	bic.w	r3, r3, #15
 80046dc:	041b      	lsls	r3, r3, #16
 80046de:	0c1b      	lsrs	r3, r3, #16
 80046e0:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 80046e2:	2302      	movs	r3, #2
 80046e4:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80046e6:	688b      	ldr	r3, [r1, #8]
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 80046e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80046ea:	8b85      	ldrh	r5, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80046ec:	2b02      	cmp	r3, #2
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80046ee:	b2ad      	uxth	r5, r5
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80046f0:	d038      	beq.n	8004764 <I2S_Init+0x92>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80046f2:	4a29      	ldr	r2, [pc, #164]	; (8004798 <I2S_Init+0xc6>)
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 80046f4:	888e      	ldrh	r6, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80046f6:	6894      	ldr	r4, [r2, #8]
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 80046f8:	2e00      	cmp	r6, #0
 80046fa:	bf14      	ite	ne
 80046fc:	2602      	movne	r6, #2
 80046fe:	2601      	moveq	r6, #1
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8004700:	0224      	lsls	r4, r4, #8
 8004702:	d503      	bpl.n	800470c <I2S_Init+0x3a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8004704:	6894      	ldr	r4, [r2, #8]
 8004706:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
 800470a:	6094      	str	r4, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800470c:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8004710:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8004714:	6852      	ldr	r2, [r2, #4]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8004716:	f8df c084 	ldr.w	ip, [pc, #132]	; 800479c <I2S_Init+0xca>
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 800471a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800471e:	fbbc f2f2 	udiv	r2, ip, r2
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8004722:	f3c4 1488 	ubfx	r4, r4, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8004726:	4354      	muls	r4, r2
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8004728:	f3c7 7202 	ubfx	r2, r7, #28, #3
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800472c:	fbb4 f4f2 	udiv	r4, r4, r2
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8004730:	88ca      	ldrh	r2, [r1, #6]
 8004732:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004736:	f04f 020a 	mov.w	r2, #10
 800473a:	d101      	bne.n	8004740 <I2S_Init+0x6e>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800473c:	0a24      	lsrs	r4, r4, #8
 800473e:	e002      	b.n	8004746 <I2S_Init+0x74>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004740:	0176      	lsls	r6, r6, #5
 8004742:	fbb4 f4f6 	udiv	r4, r4, r6
 8004746:	4362      	muls	r2, r4
 8004748:	fbb2 f3f3 	udiv	r3, r2, r3
 800474c:	3305      	adds	r3, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800474e:	220a      	movs	r2, #10
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004750:	b29b      	uxth	r3, r3
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8004752:	fbb3 f3f2 	udiv	r3, r3, r2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8004756:	f003 0201 	and.w	r2, r3, #1
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800475a:	0212      	lsls	r2, r2, #8
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800475c:	f3c3 034f 	ubfx	r3, r3, #1, #16
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8004760:	b292      	uxth	r2, r2
 8004762:	e000      	b.n	8004766 <I2S_Init+0x94>
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
 8004764:	2200      	movs	r2, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8004766:	1e9c      	subs	r4, r3, #2
 8004768:	b2a4      	uxth	r4, r4
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 800476a:	2cfe      	cmp	r4, #254	; 0xfe
 800476c:	bf28      	it	cs
 800476e:	2200      	movcs	r2, #0
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8004770:	88cc      	ldrh	r4, [r1, #6]
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8004772:	bf28      	it	cs
 8004774:	2302      	movcs	r3, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8004776:	4313      	orrs	r3, r2
 8004778:	4323      	orrs	r3, r4
 800477a:	b29b      	uxth	r3, r3
 800477c:	8403      	strh	r3, [r0, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800477e:	880b      	ldrh	r3, [r1, #0]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8004780:	884a      	ldrh	r2, [r1, #2]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8004782:	432b      	orrs	r3, r5
 8004784:	f443 6300 	orr.w	r3, r3, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8004788:	4313      	orrs	r3, r2
 800478a:	888a      	ldrh	r2, [r1, #4]
 800478c:	4313      	orrs	r3, r2
 800478e:	898a      	ldrh	r2, [r1, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	b29b      	uxth	r3, r3
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8004794:	8383      	strh	r3, [r0, #28]
}
 8004796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004798:	40023800 	.word	0x40023800
 800479c:	007a1200 	.word	0x007a1200

080047a0 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80047a0:	2300      	movs	r3, #0
 80047a2:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 80047a4:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80047a6:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80047a8:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80047aa:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80047ac:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80047ae:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80047b0:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80047b2:	2307      	movs	r3, #7
 80047b4:	8203      	strh	r3, [r0, #16]
}
 80047b6:	4770      	bx	lr

080047b8 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 80047b8:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 80047ba:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 80047bc:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 80047be:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 80047c0:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 80047c2:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 80047c4:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 80047c6:	8183      	strh	r3, [r0, #12]
}
 80047c8:	4770      	bx	lr

080047ca <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80047ca:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80047cc:	b119      	cbz	r1, 80047d6 <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047d4:	e003      	b.n	80047de <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80047d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047da:	041b      	lsls	r3, r3, #16
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	8003      	strh	r3, [r0, #0]
 80047e0:	4770      	bx	lr

080047e2 <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 80047e2:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80047e4:	b119      	cbz	r1, 80047ee <I2S_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047ec:	e003      	b.n	80047f6 <I2S_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 80047ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047f2:	041b      	lsls	r3, r3, #16
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	8383      	strh	r3, [r0, #28]
 80047f8:	4770      	bx	lr

080047fa <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 80047fa:	8803      	ldrh	r3, [r0, #0]
 80047fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004800:	041b      	lsls	r3, r3, #16
 8004802:	0c1b      	lsrs	r3, r3, #16
 8004804:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8004806:	8803      	ldrh	r3, [r0, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	430b      	orrs	r3, r1
 800480c:	8003      	strh	r3, [r0, #0]
}
 800480e:	4770      	bx	lr

08004810 <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8004810:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8004814:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8004816:	d103      	bne.n	8004820 <SPI_BiDirectionalLineConfig+0x10>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8004818:	b29b      	uxth	r3, r3
 800481a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800481e:	e003      	b.n	8004828 <SPI_BiDirectionalLineConfig+0x18>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8004820:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004824:	041b      	lsls	r3, r3, #16
 8004826:	0c1b      	lsrs	r3, r3, #16
 8004828:	8003      	strh	r3, [r0, #0]
 800482a:	4770      	bx	lr

0800482c <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800482c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8004830:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8004832:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8004834:	d003      	beq.n	800483e <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8004836:	b29b      	uxth	r3, r3
 8004838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800483c:	e003      	b.n	8004846 <SPI_NSSInternalSoftwareConfig+0x1a>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 800483e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004842:	041b      	lsls	r3, r3, #16
 8004844:	0c1b      	lsrs	r3, r3, #16
 8004846:	8003      	strh	r3, [r0, #0]
 8004848:	4770      	bx	lr

0800484a <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800484a:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800484c:	b119      	cbz	r1, 8004856 <SPI_SSOutputCmd+0xc>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800484e:	b29b      	uxth	r3, r3
 8004850:	f043 0304 	orr.w	r3, r3, #4
 8004854:	e003      	b.n	800485e <SPI_SSOutputCmd+0x14>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8004856:	f023 0304 	bic.w	r3, r3, #4
 800485a:	041b      	lsls	r3, r3, #16
 800485c:	0c1b      	lsrs	r3, r3, #16
 800485e:	8083      	strh	r3, [r0, #4]
 8004860:	4770      	bx	lr

08004862 <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8004862:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004864:	b119      	cbz	r1, 800486e <SPI_TIModeCmd+0xc>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8004866:	b29b      	uxth	r3, r3
 8004868:	f043 0310 	orr.w	r3, r3, #16
 800486c:	e003      	b.n	8004876 <SPI_TIModeCmd+0x14>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 800486e:	f023 0310 	bic.w	r3, r3, #16
 8004872:	041b      	lsls	r3, r3, #16
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	8083      	strh	r3, [r0, #4]
 8004878:	4770      	bx	lr

0800487a <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800487a:	8b83      	ldrh	r3, [r0, #28]
 800487c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004880:	f023 030f 	bic.w	r3, r3, #15
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	0c1b      	lsrs	r3, r3, #16
 8004888:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 800488a:	2302      	movs	r3, #2
 800488c:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 800488e:	880b      	ldrh	r3, [r1, #0]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8004890:	8b82      	ldrh	r2, [r0, #28]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8004892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8004896:	b510      	push	{r4, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8004898:	b292      	uxth	r2, r2
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 800489a:	d005      	beq.n	80048a8 <I2S_FullDuplexConfig+0x2e>
  {
    tmp = I2S_Mode_SlaveRx;
 800489c:	2b00      	cmp	r3, #0
 800489e:	bf0c      	ite	eq
 80048a0:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80048a4:	2300      	movne	r3, #0
 80048a6:	e001      	b.n	80048ac <I2S_FullDuplexConfig+0x32>
 80048a8:	f44f 7380 	mov.w	r3, #256	; 0x100
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80048ac:	884c      	ldrh	r4, [r1, #2]
 80048ae:	4322      	orrs	r2, r4
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80048b0:	888c      	ldrh	r4, [r1, #4]
 80048b2:	8989      	ldrh	r1, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80048b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80048b8:	4322      	orrs	r2, r4
 80048ba:	430a      	orrs	r2, r1
 80048bc:	b292      	uxth	r2, r2
 80048be:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 80048c0:	8383      	strh	r3, [r0, #28]
}
 80048c2:	bd10      	pop	{r4, pc}

080048c4 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80048c4:	8980      	ldrh	r0, [r0, #12]
}
 80048c6:	b280      	uxth	r0, r0
 80048c8:	4770      	bx	lr

080048ca <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80048ca:	8181      	strh	r1, [r0, #12]
}
 80048cc:	4770      	bx	lr

080048ce <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 80048ce:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80048d0:	b119      	cbz	r1, 80048da <SPI_CalculateCRC+0xc>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048d8:	e003      	b.n	80048e2 <SPI_CalculateCRC+0x14>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 80048da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048de:	041b      	lsls	r3, r3, #16
 80048e0:	0c1b      	lsrs	r3, r3, #16
 80048e2:	8003      	strh	r3, [r0, #0]
 80048e4:	4770      	bx	lr

080048e6 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 80048e6:	8803      	ldrh	r3, [r0, #0]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048ee:	8003      	strh	r3, [r0, #0]
}
 80048f0:	4770      	bx	lr

080048f2 <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 80048f2:	2901      	cmp	r1, #1
 80048f4:	d002      	beq.n	80048fc <SPI_GetCRC+0xa>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 80048f6:	8b00      	ldrh	r0, [r0, #24]
 80048f8:	b280      	uxth	r0, r0
 80048fa:	4770      	bx	lr
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 80048fc:	8a80      	ldrh	r0, [r0, #20]
 80048fe:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8004900:	4770      	bx	lr

08004902 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8004902:	8a00      	ldrh	r0, [r0, #16]
}
 8004904:	b280      	uxth	r0, r0
 8004906:	4770      	bx	lr

08004908 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8004908:	8883      	ldrh	r3, [r0, #4]
 800490a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 800490c:	b10a      	cbz	r2, 8004912 <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800490e:	4319      	orrs	r1, r3
 8004910:	e001      	b.n	8004916 <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8004912:	ea23 0101 	bic.w	r1, r3, r1
 8004916:	8081      	strh	r1, [r0, #4]
 8004918:	4770      	bx	lr

0800491a <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800491a:	0909      	lsrs	r1, r1, #4
 800491c:	2301      	movs	r3, #1
 800491e:	408b      	lsls	r3, r1
 8004920:	b29b      	uxth	r3, r3

  if (NewState != DISABLE)
 8004922:	b11a      	cbz	r2, 800492c <SPI_I2S_ITConfig+0x12>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8004924:	8882      	ldrh	r2, [r0, #4]
 8004926:	b292      	uxth	r2, r2
 8004928:	4313      	orrs	r3, r2
 800492a:	e003      	b.n	8004934 <SPI_I2S_ITConfig+0x1a>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 800492c:	8882      	ldrh	r2, [r0, #4]
 800492e:	b292      	uxth	r2, r2
 8004930:	ea22 0303 	bic.w	r3, r2, r3
 8004934:	8083      	strh	r3, [r0, #4]
 8004936:	4770      	bx	lr

08004938 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8004938:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800493a:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 800493c:	bf0c      	ite	eq
 800493e:	2000      	moveq	r0, #0
 8004940:	2001      	movne	r0, #1
 8004942:	4770      	bx	lr

08004944 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8004944:	43c9      	mvns	r1, r1
 8004946:	b289      	uxth	r1, r1
 8004948:	8101      	strh	r1, [r0, #8]
}
 800494a:	4770      	bx	lr

0800494c <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800494c:	b510      	push	{r4, lr}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 800494e:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8004950:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8004952:	2301      	movs	r3, #1
 8004954:	f001 020f 	and.w	r2, r1, #15

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8004958:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800495a:	fa13 f202 	lsls.w	r2, r3, r2

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800495e:	4010      	ands	r0, r2

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8004960:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8004962:	d005      	beq.n	8004970 <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8004964:	0909      	lsrs	r1, r1, #4
 8004966:	408b      	lsls	r3, r1
  *            @arg SPI_IT_CRCERR: CRC Error interrupt.
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 8004968:	421c      	tst	r4, r3

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 800496a:	bf0c      	ite	eq
 800496c:	2000      	moveq	r0, #0
 800496e:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8004970:	bd10      	pop	{r4, pc}

08004972 <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8004972:	f001 010f 	and.w	r1, r1, #15
 8004976:	2301      	movs	r3, #1
 8004978:	408b      	lsls	r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800497a:	43db      	mvns	r3, r3
 800497c:	b29b      	uxth	r3, r3
 800497e:	8103      	strh	r3, [r0, #8]
}
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop

08004984 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 8004984:	b508      	push	{r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8004986:	2101      	movs	r1, #1
 8004988:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800498c:	f7fe ff3e 	bl	800380c <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8004990:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004994:	2100      	movs	r1, #0
}
 8004996:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SYSCFG_DeInit(void)
{
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 800499a:	f7fe bf37 	b.w	800380c <RCC_APB2PeriphResetCmd>

0800499e <SYSCFG_MemoryRemapConfig>:
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800499e:	4b01      	ldr	r3, [pc, #4]	; (80049a4 <SYSCFG_MemoryRemapConfig+0x6>)
 80049a0:	6018      	str	r0, [r3, #0]
}
 80049a2:	4770      	bx	lr
 80049a4:	40013800 	.word	0x40013800

080049a8 <SYSCFG_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80049a8:	f001 0203 	and.w	r2, r1, #3
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80049ac:	0889      	lsrs	r1, r1, #2
 80049ae:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <SYSCFG_EXTILineConfig+0x30>)
 80049b0:	3102      	adds	r1, #2
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80049b2:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80049b4:	0092      	lsls	r2, r2, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80049b6:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80049ba:	240f      	movs	r4, #15
 80049bc:	4094      	lsls	r4, r2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80049be:	ea25 0404 	bic.w	r4, r5, r4
 80049c2:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80049c6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 80049ca:	fa10 f202 	lsls.w	r2, r0, r2
 80049ce:	4314      	orrs	r4, r2
 80049d0:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
}
 80049d4:	bd30      	pop	{r4, r5, pc}
 80049d6:	bf00      	nop
 80049d8:	40013800 	.word	0x40013800

080049dc <SYSCFG_ETH_MediaInterfaceConfig>:
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 80049dc:	4b01      	ldr	r3, [pc, #4]	; (80049e4 <SYSCFG_ETH_MediaInterfaceConfig+0x8>)
 80049de:	6018      	str	r0, [r3, #0]
}
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	422700dc 	.word	0x422700dc

080049e8 <SYSCFG_CompensationCellCmd>:
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 80049e8:	4b01      	ldr	r3, [pc, #4]	; (80049f0 <SYSCFG_CompensationCellCmd+0x8>)
 80049ea:	6018      	str	r0, [r3, #0]
}
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	42270400 	.word	0x42270400

080049f4 <SYSCFG_GetCompensationCellStatus>:
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 80049f4:	4b02      	ldr	r3, [pc, #8]	; (8004a00 <SYSCFG_GetCompensationCellStatus+0xc>)
 80049f6:	6a18      	ldr	r0, [r3, #32]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80049f8:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40013800 	.word	0x40013800

08004a04 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8004a04:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8004a06:	8c04      	ldrh	r4, [r0, #32]
 8004a08:	f024 0401 	bic.w	r4, r4, #1
 8004a0c:	0424      	lsls	r4, r4, #16
 8004a0e:	0c24      	lsrs	r4, r4, #16
 8004a10:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a12:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8004a14:	8c04      	ldrh	r4, [r0, #32]
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 8004a16:	b2ad      	uxth	r5, r5
  tmpccer = TIMx->CCER;
 8004a18:	b2a4      	uxth	r4, r4

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8004a1a:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8004a1e:	4315      	orrs	r5, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a20:	f024 040a 	bic.w	r4, r4, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8004a24:	ea45 1503 	orr.w	r5, r5, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8004a28:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8004a2c:	b2ad      	uxth	r5, r5

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8004a2e:	430c      	orrs	r4, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a30:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 8004a32:	8404      	strh	r4, [r0, #32]
}
 8004a34:	bd30      	pop	{r4, r5, pc}

08004a36 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8004a36:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8004a38:	8c04      	ldrh	r4, [r0, #32]
 8004a3a:	f024 0410 	bic.w	r4, r4, #16
 8004a3e:	0424      	lsls	r4, r4, #16
 8004a40:	0c24      	lsrs	r4, r4, #16
 8004a42:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a44:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004a46:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8004a48:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8004a4c:	b2ad      	uxth	r5, r5
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8004a4e:	0524      	lsls	r4, r4, #20
 8004a50:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a52:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8004a56:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8004a5a:	f045 0510 	orr.w	r5, r5, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8004a5e:	ea44 3403 	orr.w	r4, r4, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8004a62:	ea45 1501 	orr.w	r5, r5, r1, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8004a66:	b2a4      	uxth	r4, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8004a68:	b2ad      	uxth	r5, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a6a:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8004a6c:	8405      	strh	r5, [r0, #32]
}
 8004a6e:	bd30      	pop	{r4, r5, pc}

08004a70 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8004a70:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8004a72:	4b47      	ldr	r3, [pc, #284]	; (8004b90 <TIM_DeInit+0x120>)
 8004a74:	4298      	cmp	r0, r3
 8004a76:	d105      	bne.n	8004a84 <TIM_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8004a78:	2001      	movs	r0, #1
 8004a7a:	4601      	mov	r1, r0
 8004a7c:	f7fe fec6 	bl	800380c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8004a80:	2001      	movs	r0, #1
 8004a82:	e03d      	b.n	8004b00 <TIM_DeInit+0x90>
  } 
  else if (TIMx == TIM2) 
 8004a84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004a88:	d105      	bne.n	8004a96 <TIM_DeInit+0x26>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	4601      	mov	r1, r0
 8004a8e:	f7fe feb1 	bl	80037f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8004a92:	2001      	movs	r0, #1
 8004a94:	e076      	b.n	8004b84 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM3)
 8004a96:	4b3f      	ldr	r3, [pc, #252]	; (8004b94 <TIM_DeInit+0x124>)
 8004a98:	4298      	cmp	r0, r3
 8004a9a:	d105      	bne.n	8004aa8 <TIM_DeInit+0x38>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8004a9c:	2002      	movs	r0, #2
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	f7fe fea8 	bl	80037f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8004aa4:	2002      	movs	r0, #2
 8004aa6:	e06d      	b.n	8004b84 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM4)
 8004aa8:	4b3b      	ldr	r3, [pc, #236]	; (8004b98 <TIM_DeInit+0x128>)
 8004aaa:	4298      	cmp	r0, r3
 8004aac:	d105      	bne.n	8004aba <TIM_DeInit+0x4a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8004aae:	2004      	movs	r0, #4
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	f7fe fe9f 	bl	80037f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8004ab6:	2004      	movs	r0, #4
 8004ab8:	e064      	b.n	8004b84 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM5)
 8004aba:	4b38      	ldr	r3, [pc, #224]	; (8004b9c <TIM_DeInit+0x12c>)
 8004abc:	4298      	cmp	r0, r3
 8004abe:	d105      	bne.n	8004acc <TIM_DeInit+0x5c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8004ac0:	2008      	movs	r0, #8
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	f7fe fe96 	bl	80037f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8004ac8:	2008      	movs	r0, #8
 8004aca:	e05b      	b.n	8004b84 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM6)  
 8004acc:	4b34      	ldr	r3, [pc, #208]	; (8004ba0 <TIM_DeInit+0x130>)
 8004ace:	4298      	cmp	r0, r3
 8004ad0:	d105      	bne.n	8004ade <TIM_DeInit+0x6e>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8004ad2:	2010      	movs	r0, #16
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	f7fe fe8d 	bl	80037f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8004ada:	2010      	movs	r0, #16
 8004adc:	e052      	b.n	8004b84 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM7)
 8004ade:	4b31      	ldr	r3, [pc, #196]	; (8004ba4 <TIM_DeInit+0x134>)
 8004ae0:	4298      	cmp	r0, r3
 8004ae2:	d105      	bne.n	8004af0 <TIM_DeInit+0x80>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8004ae4:	2020      	movs	r0, #32
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	f7fe fe84 	bl	80037f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8004aec:	2020      	movs	r0, #32
 8004aee:	e049      	b.n	8004b84 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM8)
 8004af0:	4b2d      	ldr	r3, [pc, #180]	; (8004ba8 <TIM_DeInit+0x138>)
 8004af2:	4298      	cmp	r0, r3
 8004af4:	d109      	bne.n	8004b0a <TIM_DeInit+0x9a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8004af6:	2002      	movs	r0, #2
 8004af8:	2101      	movs	r1, #1
 8004afa:	f7fe fe87 	bl	800380c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8004afe:	2002      	movs	r0, #2
 8004b00:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8004b02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8004b06:	f7fe be81 	b.w	800380c <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
 8004b0a:	4b28      	ldr	r3, [pc, #160]	; (8004bac <TIM_DeInit+0x13c>)
 8004b0c:	4298      	cmp	r0, r3
 8004b0e:	d107      	bne.n	8004b20 <TIM_DeInit+0xb0>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8004b10:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004b14:	2101      	movs	r1, #1
 8004b16:	f7fe fe79 	bl	800380c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8004b1a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004b1e:	e7ef      	b.n	8004b00 <TIM_DeInit+0x90>
   }  
  else if (TIMx == TIM10)
 8004b20:	4b23      	ldr	r3, [pc, #140]	; (8004bb0 <TIM_DeInit+0x140>)
 8004b22:	4298      	cmp	r0, r3
 8004b24:	d107      	bne.n	8004b36 <TIM_DeInit+0xc6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8004b26:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	f7fe fe6e 	bl	800380c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8004b30:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004b34:	e7e4      	b.n	8004b00 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM11) 
 8004b36:	4b1f      	ldr	r3, [pc, #124]	; (8004bb4 <TIM_DeInit+0x144>)
 8004b38:	4298      	cmp	r0, r3
 8004b3a:	d107      	bne.n	8004b4c <TIM_DeInit+0xdc>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8004b3c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004b40:	2101      	movs	r1, #1
 8004b42:	f7fe fe63 	bl	800380c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8004b46:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004b4a:	e7d9      	b.n	8004b00 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM12)
 8004b4c:	4b1a      	ldr	r3, [pc, #104]	; (8004bb8 <TIM_DeInit+0x148>)
 8004b4e:	4298      	cmp	r0, r3
 8004b50:	d105      	bne.n	8004b5e <TIM_DeInit+0xee>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8004b52:	2040      	movs	r0, #64	; 0x40
 8004b54:	2101      	movs	r1, #1
 8004b56:	f7fe fe4d 	bl	80037f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8004b5a:	2040      	movs	r0, #64	; 0x40
 8004b5c:	e012      	b.n	8004b84 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM13) 
 8004b5e:	4b17      	ldr	r3, [pc, #92]	; (8004bbc <TIM_DeInit+0x14c>)
 8004b60:	4298      	cmp	r0, r3
 8004b62:	d105      	bne.n	8004b70 <TIM_DeInit+0x100>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8004b64:	2080      	movs	r0, #128	; 0x80
 8004b66:	2101      	movs	r1, #1
 8004b68:	f7fe fe44 	bl	80037f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8004b6c:	2080      	movs	r0, #128	; 0x80
 8004b6e:	e009      	b.n	8004b84 <TIM_DeInit+0x114>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8004b70:	4b13      	ldr	r3, [pc, #76]	; (8004bc0 <TIM_DeInit+0x150>)
 8004b72:	4298      	cmp	r0, r3
 8004b74:	d10b      	bne.n	8004b8e <TIM_DeInit+0x11e>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8004b76:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	f7fe fe3a 	bl	80037f4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8004b80:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004b84:	2100      	movs	r1, #0
    }   
  }
}
 8004b86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8004b8a:	f7fe be33 	b.w	80037f4 <RCC_APB1PeriphResetCmd>
 8004b8e:	bd08      	pop	{r3, pc}
 8004b90:	40010000 	.word	0x40010000
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40000800 	.word	0x40000800
 8004b9c:	40000c00 	.word	0x40000c00
 8004ba0:	40001000 	.word	0x40001000
 8004ba4:	40001400 	.word	0x40001400
 8004ba8:	40010400 	.word	0x40010400
 8004bac:	40014000 	.word	0x40014000
 8004bb0:	40014400 	.word	0x40014400
 8004bb4:	40014800 	.word	0x40014800
 8004bb8:	40001800 	.word	0x40001800
 8004bbc:	40001c00 	.word	0x40001c00
 8004bc0:	40002000 	.word	0x40002000

08004bc4 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8004bc4:	4a1c      	ldr	r2, [pc, #112]	; (8004c38 <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8004bc6:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8004bc8:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8004bca:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8004bcc:	d012      	beq.n	8004bf4 <TIM_TimeBaseInit+0x30>
 8004bce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bd2:	4290      	cmp	r0, r2
 8004bd4:	d00e      	beq.n	8004bf4 <TIM_TimeBaseInit+0x30>
 8004bd6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004bda:	d00b      	beq.n	8004bf4 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8004bdc:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8004be0:	4290      	cmp	r0, r2
 8004be2:	d007      	beq.n	8004bf4 <TIM_TimeBaseInit+0x30>
 8004be4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004be8:	4290      	cmp	r0, r2
 8004bea:	d003      	beq.n	8004bf4 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8004bec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bf0:	4290      	cmp	r0, r2
 8004bf2:	d103      	bne.n	8004bfc <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8004bf4:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8004bfa:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8004bfc:	4a0f      	ldr	r2, [pc, #60]	; (8004c3c <TIM_TimeBaseInit+0x78>)
 8004bfe:	4290      	cmp	r0, r2
 8004c00:	d008      	beq.n	8004c14 <TIM_TimeBaseInit+0x50>
 8004c02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c06:	4290      	cmp	r0, r2
 8004c08:	d004      	beq.n	8004c14 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8004c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8004c0e:	890a      	ldrh	r2, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8004c10:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8004c12:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8004c14:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8004c16:	684b      	ldr	r3, [r1, #4]
 8004c18:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8004c1a:	880b      	ldrh	r3, [r1, #0]
 8004c1c:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8004c1e:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <TIM_TimeBaseInit+0x74>)
 8004c20:	4298      	cmp	r0, r3
 8004c22:	d003      	beq.n	8004c2c <TIM_TimeBaseInit+0x68>
 8004c24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c28:	4298      	cmp	r0, r3
 8004c2a:	d101      	bne.n	8004c30 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8004c2c:	7a8b      	ldrb	r3, [r1, #10]
 8004c2e:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8004c30:	2301      	movs	r3, #1
 8004c32:	8283      	strh	r3, [r0, #20]
}
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40010000 	.word	0x40010000
 8004c3c:	40001000 	.word	0x40001000

08004c40 <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8004c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c44:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8004c46:	2300      	movs	r3, #0
 8004c48:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8004c4a:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8004c4c:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8004c4e:	7283      	strb	r3, [r0, #10]
}
 8004c50:	4770      	bx	lr

08004c52 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8004c52:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8004c54:	8282      	strh	r2, [r0, #20]
}
 8004c56:	4770      	bx	lr

08004c58 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8004c58:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	041b      	lsls	r3, r3, #16
 8004c60:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8004c62:	430b      	orrs	r3, r1

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8004c64:	8003      	strh	r3, [r0, #0]
}
 8004c66:	4770      	bx	lr

08004c68 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8004c68:	6241      	str	r1, [r0, #36]	; 0x24
}
 8004c6a:	4770      	bx	lr

08004c6c <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8004c6c:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 8004c6e:	4770      	bx	lr

08004c70 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8004c70:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8004c72:	4770      	bx	lr

08004c74 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8004c74:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8004c76:	b280      	uxth	r0, r0
 8004c78:	4770      	bx	lr

08004c7a <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8004c7a:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004c7c:	b119      	cbz	r1, 8004c86 <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	f043 0302 	orr.w	r3, r3, #2
 8004c84:	e003      	b.n	8004c8e <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8004c86:	f023 0302 	bic.w	r3, r3, #2
 8004c8a:	041b      	lsls	r3, r3, #16
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	8003      	strh	r3, [r0, #0]
 8004c90:	4770      	bx	lr

08004c92 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8004c92:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8004c94:	b119      	cbz	r1, 8004c9e <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f043 0304 	orr.w	r3, r3, #4
 8004c9c:	e003      	b.n	8004ca6 <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8004c9e:	f023 0304 	bic.w	r3, r3, #4
 8004ca2:	041b      	lsls	r3, r3, #16
 8004ca4:	0c1b      	lsrs	r3, r3, #16
 8004ca6:	8003      	strh	r3, [r0, #0]
 8004ca8:	4770      	bx	lr

08004caa <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8004caa:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004cac:	b119      	cbz	r1, 8004cb6 <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb4:	e003      	b.n	8004cbe <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8004cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	8003      	strh	r3, [r0, #0]
 8004cc0:	4770      	bx	lr

08004cc2 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8004cc2:	8803      	ldrh	r3, [r0, #0]
 8004cc4:	f023 0308 	bic.w	r3, r3, #8
 8004cc8:	041b      	lsls	r3, r3, #16
 8004cca:	0c1b      	lsrs	r3, r3, #16
 8004ccc:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8004cce:	8803      	ldrh	r3, [r0, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	8003      	strh	r3, [r0, #0]
}
 8004cd6:	4770      	bx	lr

08004cd8 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8004cd8:	8803      	ldrh	r3, [r0, #0]
 8004cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cde:	041b      	lsls	r3, r3, #16
 8004ce0:	0c1b      	lsrs	r3, r3, #16
 8004ce2:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8004ce4:	8803      	ldrh	r3, [r0, #0]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	430b      	orrs	r3, r1
 8004cea:	8003      	strh	r3, [r0, #0]
}
 8004cec:	4770      	bx	lr

08004cee <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8004cee:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004cf0:	b119      	cbz	r1, 8004cfa <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f043 0301 	orr.w	r3, r3, #1
 8004cf8:	e003      	b.n	8004d02 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	041b      	lsls	r3, r3, #16
 8004d00:	0c1b      	lsrs	r3, r3, #16
 8004d02:	8003      	strh	r3, [r0, #0]
 8004d04:	4770      	bx	lr

08004d06 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8004d06:	8c03      	ldrh	r3, [r0, #32]
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	0c1b      	lsrs	r3, r3, #16
 8004d10:	8403      	strh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004d12:	b570      	push	{r4, r5, r6, lr}

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d14:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d16:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d18:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8004d1a:	880d      	ldrh	r5, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8004d1c:	884e      	ldrh	r6, [r1, #2]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8004d1e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8004d22:	0412      	lsls	r2, r2, #16
 8004d24:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8004d26:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8004d28:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8004d2a:	f023 0302 	bic.w	r3, r3, #2
 8004d2e:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8004d30:	4335      	orrs	r5, r6
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8004d32:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8004d34:	b2ad      	uxth	r5, r5
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8004d36:	432b      	orrs	r3, r5
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8004d38:	4d0e      	ldr	r5, [pc, #56]	; (8004d74 <TIM_OC1Init+0x6e>)
 8004d3a:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d3c:	b2a4      	uxth	r4, r4
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8004d3e:	d003      	beq.n	8004d48 <TIM_OC1Init+0x42>
 8004d40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d44:	42a8      	cmp	r0, r5
 8004d46:	d10e      	bne.n	8004d66 <TIM_OC1Init+0x60>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8004d48:	89cd      	ldrh	r5, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8004d4a:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8004d4c:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8004d50:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8004d52:	888d      	ldrh	r5, [r1, #4]
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8004d54:	f023 0304 	bic.w	r3, r3, #4
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8004d58:	432b      	orrs	r3, r5
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8004d5a:	8a0d      	ldrh	r5, [r1, #16]
 8004d5c:	4335      	orrs	r5, r6
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8004d5e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8004d62:	b2ad      	uxth	r5, r5
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8004d64:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d66:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d68:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8004d6a:	688a      	ldr	r2, [r1, #8]
 8004d6c:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6e:	8403      	strh	r3, [r0, #32]
}
 8004d70:	bd70      	pop	{r4, r5, r6, pc}
 8004d72:	bf00      	nop
 8004d74:	40010000 	.word	0x40010000

08004d78 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8004d78:	8c03      	ldrh	r3, [r0, #32]
 8004d7a:	f023 0310 	bic.w	r3, r3, #16
 8004d7e:	041b      	lsls	r3, r3, #16
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8004d84:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d86:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004d88:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d8a:	8b04      	ldrh	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8004d8c:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8004d8e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8004d92:	0424      	lsls	r4, r4, #16
 8004d94:	0c24      	lsrs	r4, r4, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8004d96:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8004d9a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8004d9e:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8004da0:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8004da2:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8004da4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8004da8:	884d      	ldrh	r5, [r1, #2]
 8004daa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8004dae:	4d13      	ldr	r5, [pc, #76]	; (8004dfc <TIM_OC2Init+0x84>)
 8004db0:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db2:	b292      	uxth	r2, r2
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8004db4:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8004db6:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8004db8:	d003      	beq.n	8004dc2 <TIM_OC2Init+0x4a>
 8004dba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004dbe:	42a8      	cmp	r0, r5
 8004dc0:	d115      	bne.n	8004dee <TIM_OC2Init+0x76>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8004dc2:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8004dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dc8:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8004dca:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8004dce:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 8004dd2:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8004dd4:	888b      	ldrh	r3, [r1, #4]
 8004dd6:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8004dda:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8004ddc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8004de0:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8004de4:	8a4d      	ldrh	r5, [r1, #18]
 8004de6:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8004dea:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8004dec:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dee:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8004df0:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004df2:	8304      	strh	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8004df4:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df6:	8403      	strh	r3, [r0, #32]
}
 8004df8:	bd30      	pop	{r4, r5, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40010000 	.word	0x40010000

08004e00 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8004e00:	8c03      	ldrh	r3, [r0, #32]
 8004e02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e06:	041b      	lsls	r3, r3, #16
 8004e08:	0c1b      	lsrs	r3, r3, #16
 8004e0a:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0c:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e0e:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004e10:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e12:	8b84      	ldrh	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8004e14:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8004e16:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8004e1a:	0424      	lsls	r4, r4, #16
 8004e1c:	0c24      	lsrs	r4, r4, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8004e1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e22:	041b      	lsls	r3, r3, #16
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8004e24:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8004e26:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8004e28:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8004e2a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8004e2e:	884d      	ldrh	r5, [r1, #2]
 8004e30:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8004e34:	4d12      	ldr	r5, [pc, #72]	; (8004e80 <TIM_OC3Init+0x80>)
 8004e36:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e38:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8004e3a:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8004e3c:	d003      	beq.n	8004e46 <TIM_OC3Init+0x46>
 8004e3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004e42:	42a8      	cmp	r0, r5
 8004e44:	d115      	bne.n	8004e72 <TIM_OC3Init+0x72>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8004e46:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8004e48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e4c:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8004e4e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8004e52:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 8004e56:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8004e58:	888b      	ldrh	r3, [r1, #4]
 8004e5a:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8004e5e:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8004e60:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8004e64:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8004e68:	8a4d      	ldrh	r5, [r1, #18]
 8004e6a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8004e6e:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8004e70:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e72:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8004e74:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e76:	8384      	strh	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8004e78:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7a:	8403      	strh	r3, [r0, #32]
}
 8004e7c:	bd30      	pop	{r4, r5, pc}
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000

08004e84 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8004e84:	8c03      	ldrh	r3, [r0, #32]
 8004e86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e8a:	041b      	lsls	r3, r3, #16
 8004e8c:	0c1b      	lsrs	r3, r3, #16
 8004e8e:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e90:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004e92:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e96:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8004e98:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8004e9a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8004e9e:	0412      	lsls	r2, r2, #16
 8004ea0:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8004ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8004ea6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8004eaa:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8004eac:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8004eae:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8004eb0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8004eb4:	884d      	ldrh	r5, [r1, #2]
 8004eb6:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8004eba:	4d0b      	ldr	r5, [pc, #44]	; (8004ee8 <TIM_OC4Init+0x64>)
 8004ebc:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ebe:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8004ec0:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8004ec2:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8004ec4:	d003      	beq.n	8004ece <TIM_OC4Init+0x4a>
 8004ec6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004eca:	42a8      	cmp	r0, r5
 8004ecc:	d105      	bne.n	8004eda <TIM_OC4Init+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8004ece:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8004ed0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8004ed4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004ed8:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eda:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8004edc:	8382      	strh	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8004ede:	688a      	ldr	r2, [r1, #8]
 8004ee0:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee2:	8403      	strh	r3, [r0, #32]
}
 8004ee4:	bd30      	pop	{r4, r5, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40010000 	.word	0x40010000

08004eec <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8004eec:	2300      	movs	r3, #0
 8004eee:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8004ef0:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8004ef2:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8004ef4:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8004ef6:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8004ef8:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8004efa:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8004efc:	8243      	strh	r3, [r0, #18]
}
 8004efe:	4770      	bx	lr

08004f00 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8004f00:	b530      	push	{r4, r5, lr}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8004f02:	8c05      	ldrh	r5, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8004f04:	2401      	movs	r4, #1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8004f06:	b2ad      	uxth	r5, r5
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8004f08:	408c      	lsls	r4, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8004f0a:	ea25 0404 	bic.w	r4, r5, r4
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8004f0e:	f100 0318 	add.w	r3, r0, #24

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8004f12:	8404      	strh	r4, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8004f14:	b109      	cbz	r1, 8004f1a <TIM_SelectOCxM+0x1a>
 8004f16:	2908      	cmp	r1, #8
 8004f18:	d107      	bne.n	8004f2a <TIM_SelectOCxM+0x2a>
  {
    tmp += (TIM_Channel>>1);
 8004f1a:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8004f1c:	f64f 708f 	movw	r0, #65423	; 0xff8f
 8004f20:	58cc      	ldr	r4, [r1, r3]
 8004f22:	4020      	ands	r0, r4
 8004f24:	50c8      	str	r0, [r1, r3]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8004f26:	58c8      	ldr	r0, [r1, r3]
 8004f28:	e00a      	b.n	8004f40 <TIM_SelectOCxM+0x40>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8004f2a:	3904      	subs	r1, #4
 8004f2c:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8004f30:	f648 70ff 	movw	r0, #36863	; 0x8fff
 8004f34:	58cc      	ldr	r4, [r1, r3]
 8004f36:	4020      	ands	r0, r4
 8004f38:	50c8      	str	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8004f3a:	0212      	lsls	r2, r2, #8
 8004f3c:	58c8      	ldr	r0, [r1, r3]
 8004f3e:	b292      	uxth	r2, r2
 8004f40:	4302      	orrs	r2, r0
 8004f42:	50ca      	str	r2, [r1, r3]
 8004f44:	bd30      	pop	{r4, r5, pc}

08004f46 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8004f46:	6341      	str	r1, [r0, #52]	; 0x34
}
 8004f48:	4770      	bx	lr

08004f4a <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8004f4a:	6381      	str	r1, [r0, #56]	; 0x38
}
 8004f4c:	4770      	bx	lr

08004f4e <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8004f4e:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8004f50:	4770      	bx	lr

08004f52 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8004f52:	6401      	str	r1, [r0, #64]	; 0x40
}
 8004f54:	4770      	bx	lr

08004f56 <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8004f56:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8004f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5c:	041b      	lsls	r3, r3, #16
 8004f5e:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8004f60:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8004f62:	8303      	strh	r3, [r0, #24]
}
 8004f64:	4770      	bx	lr

08004f66 <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8004f66:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8004f68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f6c:	041b      	lsls	r3, r3, #16
 8004f6e:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8004f70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004f74:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8004f76:	8303      	strh	r3, [r0, #24]
}
 8004f78:	4770      	bx	lr

08004f7a <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8004f7a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8004f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8004f84:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8004f86:	8383      	strh	r3, [r0, #28]
}
 8004f88:	4770      	bx	lr

08004f8a <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8004f8a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8004f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f90:	041b      	lsls	r3, r3, #16
 8004f92:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8004f94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004f98:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8004f9a:	8383      	strh	r3, [r0, #28]
}
 8004f9c:	4770      	bx	lr

08004f9e <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8004f9e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8004fa0:	f023 0308 	bic.w	r3, r3, #8
 8004fa4:	041b      	lsls	r3, r3, #16
 8004fa6:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8004fa8:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8004faa:	8303      	strh	r3, [r0, #24]
}
 8004fac:	4770      	bx	lr

08004fae <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8004fae:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8004fb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fb4:	041b      	lsls	r3, r3, #16
 8004fb6:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8004fb8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004fbc:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8004fbe:	8303      	strh	r3, [r0, #24]
}
 8004fc0:	4770      	bx	lr

08004fc2 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8004fc2:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8004fc4:	f023 0308 	bic.w	r3, r3, #8
 8004fc8:	041b      	lsls	r3, r3, #16
 8004fca:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8004fcc:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8004fce:	8383      	strh	r3, [r0, #28]
}
 8004fd0:	4770      	bx	lr

08004fd2 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8004fd2:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8004fd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fd8:	041b      	lsls	r3, r3, #16
 8004fda:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8004fdc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004fe0:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8004fe2:	8383      	strh	r3, [r0, #28]
}
 8004fe4:	4770      	bx	lr

08004fe6 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8004fe6:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8004fe8:	f023 0304 	bic.w	r3, r3, #4
 8004fec:	041b      	lsls	r3, r3, #16
 8004fee:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8004ff0:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8004ff2:	8303      	strh	r3, [r0, #24]
}
 8004ff4:	4770      	bx	lr

08004ff6 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8004ff6:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8004ff8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ffc:	041b      	lsls	r3, r3, #16
 8004ffe:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8005000:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005004:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8005006:	8303      	strh	r3, [r0, #24]
}
 8005008:	4770      	bx	lr

0800500a <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800500a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 800500c:	f023 0304 	bic.w	r3, r3, #4
 8005010:	041b      	lsls	r3, r3, #16
 8005012:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8005014:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8005016:	8383      	strh	r3, [r0, #28]
}
 8005018:	4770      	bx	lr

0800501a <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800501a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 800501c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005020:	041b      	lsls	r3, r3, #16
 8005022:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8005024:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005028:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800502a:	8383      	strh	r3, [r0, #28]
}
 800502c:	4770      	bx	lr

0800502e <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800502e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8005030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005034:	041b      	lsls	r3, r3, #16
 8005036:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8005038:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800503a:	8303      	strh	r3, [r0, #24]
}
 800503c:	4770      	bx	lr

0800503e <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800503e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8005040:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8005042:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8005044:	ea41 4353 	orr.w	r3, r1, r3, lsr #17
 8005048:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800504a:	8303      	strh	r3, [r0, #24]
}
 800504c:	4770      	bx	lr

0800504e <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800504e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8005050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005054:	041b      	lsls	r3, r3, #16
 8005056:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8005058:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800505a:	8383      	strh	r3, [r0, #28]
}
 800505c:	4770      	bx	lr

0800505e <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800505e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8005060:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8005062:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8005064:	ea41 4353 	orr.w	r3, r1, r3, lsr #17
 8005068:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800506a:	8383      	strh	r3, [r0, #28]
}
 800506c:	4770      	bx	lr

0800506e <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800506e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8005070:	f023 0302 	bic.w	r3, r3, #2
 8005074:	041b      	lsls	r3, r3, #16
 8005076:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8005078:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800507a:	8403      	strh	r3, [r0, #32]
}
 800507c:	4770      	bx	lr

0800507e <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800507e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8005080:	f023 0308 	bic.w	r3, r3, #8
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8005088:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800508a:	8403      	strh	r3, [r0, #32]
}
 800508c:	4770      	bx	lr

0800508e <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800508e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8005090:	f023 0320 	bic.w	r3, r3, #32
 8005094:	041b      	lsls	r3, r3, #16
 8005096:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8005098:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800509c:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800509e:	8403      	strh	r3, [r0, #32]
}
 80050a0:	4770      	bx	lr

080050a2 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 80050a2:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80050a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050a8:	041b      	lsls	r3, r3, #16
 80050aa:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 80050ac:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80050b0:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80050b2:	8403      	strh	r3, [r0, #32]
}
 80050b4:	4770      	bx	lr

080050b6 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80050b6:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80050b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050bc:	041b      	lsls	r3, r3, #16
 80050be:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 80050c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80050c4:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80050c6:	8403      	strh	r3, [r0, #32]
}
 80050c8:	4770      	bx	lr

080050ca <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80050ca:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80050cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050d0:	041b      	lsls	r3, r3, #16
 80050d2:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 80050d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80050d8:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80050da:	8403      	strh	r3, [r0, #32]
}
 80050dc:	4770      	bx	lr

080050de <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80050de:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80050e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050e4:	041b      	lsls	r3, r3, #16
 80050e6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 80050e8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80050ec:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80050ee:	8403      	strh	r3, [r0, #32]
}
 80050f0:	4770      	bx	lr

080050f2 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 80050f2:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 80050f4:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 80050f6:	2301      	movs	r3, #1
 80050f8:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 80050fa:	b2a4      	uxth	r4, r4
 80050fc:	ea24 0303 	bic.w	r3, r4, r3
 8005100:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8005102:	8c03      	ldrh	r3, [r0, #32]
 8005104:	fa12 f101 	lsls.w	r1, r2, r1
 8005108:	430b      	orrs	r3, r1
 800510a:	b29b      	uxth	r3, r3
 800510c:	8403      	strh	r3, [r0, #32]
}
 800510e:	bd10      	pop	{r4, pc}

08005110 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8005110:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8005112:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8005114:	2304      	movs	r3, #4
 8005116:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8005118:	b2a4      	uxth	r4, r4
 800511a:	ea24 0303 	bic.w	r3, r4, r3
 800511e:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8005120:	8c03      	ldrh	r3, [r0, #32]
 8005122:	fa12 f101 	lsls.w	r1, r2, r1
 8005126:	430b      	orrs	r3, r1
 8005128:	b29b      	uxth	r3, r3
 800512a:	8403      	strh	r3, [r0, #32]
}
 800512c:	bd10      	pop	{r4, pc}

0800512e <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800512e:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8005130:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8005132:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8005134:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8005136:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8005138:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800513a:	8103      	strh	r3, [r0, #8]
}
 800513c:	4770      	bx	lr

0800513e <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800513e:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8005140:	4770      	bx	lr

08005142 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8005142:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8005144:	4770      	bx	lr

08005146 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8005146:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8005148:	4770      	bx	lr

0800514a <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800514a:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 800514c:	4770      	bx	lr

0800514e <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800514e:	8b03      	ldrh	r3, [r0, #24]
 8005150:	f023 030c 	bic.w	r3, r3, #12
 8005154:	041b      	lsls	r3, r3, #16
 8005156:	0c1b      	lsrs	r3, r3, #16
 8005158:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800515a:	8b03      	ldrh	r3, [r0, #24]
 800515c:	b29b      	uxth	r3, r3
 800515e:	430b      	orrs	r3, r1
 8005160:	8303      	strh	r3, [r0, #24]
}
 8005162:	4770      	bx	lr

08005164 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8005164:	8b03      	ldrh	r3, [r0, #24]
 8005166:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800516a:	041b      	lsls	r3, r3, #16
 800516c:	0c1b      	lsrs	r3, r3, #16
 800516e:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8005170:	8b03      	ldrh	r3, [r0, #24]
 8005172:	b29b      	uxth	r3, r3
 8005174:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005178:	b29b      	uxth	r3, r3
 800517a:	8303      	strh	r3, [r0, #24]
}
 800517c:	4770      	bx	lr

0800517e <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800517e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005180:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8005182:	8849      	ldrh	r1, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8005184:	88a2      	ldrh	r2, [r4, #4]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005186:	f8b4 e000 	ldrh.w	lr, [r4]
 800518a:	8923      	ldrh	r3, [r4, #8]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800518c:	4605      	mov	r5, r0
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800518e:	2900      	cmp	r1, #0
 8005190:	bf0c      	ite	eq
 8005192:	2702      	moveq	r7, #2
 8005194:	2700      	movne	r7, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8005196:	2a01      	cmp	r2, #1
 8005198:	bf14      	ite	ne
 800519a:	2601      	movne	r6, #1
 800519c:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800519e:	f1be 0f00 	cmp.w	lr, #0
 80051a2:	d110      	bne.n	80051c6 <TIM_PWMIConfig+0x48>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80051a4:	f7ff fc2e 	bl	8004a04 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80051a8:	4628      	mov	r0, r5
 80051aa:	88e1      	ldrh	r1, [r4, #6]
 80051ac:	f7ff ffcf 	bl	800514e <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80051b0:	4628      	mov	r0, r5
 80051b2:	4639      	mov	r1, r7
 80051b4:	4632      	mov	r2, r6
 80051b6:	8923      	ldrh	r3, [r4, #8]
 80051b8:	f7ff fc3d 	bl	8004a36 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80051bc:	88e1      	ldrh	r1, [r4, #6]
 80051be:	4628      	mov	r0, r5
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80051c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80051c4:	e7ce      	b.n	8005164 <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80051c6:	f7ff fc36 	bl	8004a36 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80051ca:	4628      	mov	r0, r5
 80051cc:	88e1      	ldrh	r1, [r4, #6]
 80051ce:	f7ff ffc9 	bl	8005164 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80051d2:	4628      	mov	r0, r5
 80051d4:	4639      	mov	r1, r7
 80051d6:	4632      	mov	r2, r6
 80051d8:	8923      	ldrh	r3, [r4, #8]
 80051da:	f7ff fc13 	bl	8004a04 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80051de:	88e1      	ldrh	r1, [r4, #6]
 80051e0:	4628      	mov	r0, r5
  }
}
 80051e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80051e6:	e7b2      	b.n	800514e <TIM_SetIC1Prescaler>

080051e8 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 80051e8:	8b83      	ldrh	r3, [r0, #28]
 80051ea:	f023 030c 	bic.w	r3, r3, #12
 80051ee:	041b      	lsls	r3, r3, #16
 80051f0:	0c1b      	lsrs	r3, r3, #16
 80051f2:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80051f4:	8b83      	ldrh	r3, [r0, #28]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	430b      	orrs	r3, r1
 80051fa:	8383      	strh	r3, [r0, #28]
}
 80051fc:	4770      	bx	lr

080051fe <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 80051fe:	8b83      	ldrh	r3, [r0, #28]
 8005200:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005204:	041b      	lsls	r3, r3, #16
 8005206:	0c1b      	lsrs	r3, r3, #16
 8005208:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800520a:	8b83      	ldrh	r3, [r0, #28]
 800520c:	b29b      	uxth	r3, r3
 800520e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005212:	b29b      	uxth	r3, r3
 8005214:	8383      	strh	r3, [r0, #28]
}
 8005216:	4770      	bx	lr

08005218 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800521c:	880b      	ldrh	r3, [r1, #0]
 800521e:	88aa      	ldrh	r2, [r5, #4]
 8005220:	8849      	ldrh	r1, [r1, #2]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005222:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005224:	b93b      	cbnz	r3, 8005236 <TIM_ICInit+0x1e>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8005226:	892b      	ldrh	r3, [r5, #8]
 8005228:	f7ff fbec 	bl	8004a04 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800522c:	88e9      	ldrh	r1, [r5, #6]
 800522e:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8005230:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005234:	e78b      	b.n	800514e <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8005236:	2b04      	cmp	r3, #4
 8005238:	d107      	bne.n	800524a <TIM_ICInit+0x32>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800523a:	892b      	ldrh	r3, [r5, #8]
 800523c:	f7ff fbfb 	bl	8004a36 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005240:	88e9      	ldrh	r1, [r5, #6]
 8005242:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8005244:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005248:	e78c      	b.n	8005164 <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800524a:	2b08      	cmp	r3, #8
 800524c:	f8b5 c008 	ldrh.w	ip, [r5, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8005250:	8c07      	ldrh	r7, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8005252:	d11d      	bne.n	8005290 <TIM_ICInit+0x78>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8005254:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 8005258:	043f      	lsls	r7, r7, #16
 800525a:	0c3f      	lsrs	r7, r7, #16
 800525c:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800525e:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 8005260:	8c03      	ldrh	r3, [r0, #32]
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
 8005262:	b2b6      	uxth	r6, r6
  tmpccer = TIMx->CCER;
 8005264:	b29b      	uxth	r3, r3
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8005266:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800526a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800526e:	ea46 1c0c 	orr.w	ip, r6, ip, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8005272:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8005276:	fa1f fc8c 	uxth.w	ip, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800527a:	b289      	uxth	r1, r1
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800527c:	ea4c 0202 	orr.w	r2, ip, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8005280:	f441 7180 	orr.w	r1, r1, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005284:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8005286:	8401      	strh	r1, [r0, #32]
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005288:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800528a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800528e:	e7ab      	b.n	80051e8 <TIM_SetIC3Prescaler>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8005290:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 8005294:	043f      	lsls	r7, r7, #16
 8005296:	0c3f      	lsrs	r7, r7, #16
 8005298:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800529a:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 800529c:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800529e:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80052a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80052a6:	0536      	lsls	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80052a8:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80052aa:	0d36      	lsrs	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80052ac:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80052ae:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80052b2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80052b6:	ea42 320c 	orr.w	r2, r2, ip, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80052ba:	b29b      	uxth	r3, r3
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80052bc:	88e9      	ldrh	r1, [r5, #6]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80052be:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80052c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052c4:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 80052c6:	8403      	strh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80052c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80052cc:	e797      	b.n	80051fe <TIM_SetIC4Prescaler>

080052ce <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80052ce:	884a      	ldrh	r2, [r1, #2]
 80052d0:	880b      	ldrh	r3, [r1, #0]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	888a      	ldrh	r2, [r1, #4]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	88ca      	ldrh	r2, [r1, #6]
 80052da:	4313      	orrs	r3, r2
 80052dc:	890a      	ldrh	r2, [r1, #8]
 80052de:	4313      	orrs	r3, r2
 80052e0:	894a      	ldrh	r2, [r1, #10]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	898a      	ldrh	r2, [r1, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 80052ee:	4770      	bx	lr

080052f0 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 80052f0:	2300      	movs	r3, #0
 80052f2:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 80052f4:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 80052f6:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 80052f8:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 80052fa:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 80052fc:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 80052fe:	8183      	strh	r3, [r0, #12]
}
 8005300:	4770      	bx	lr

08005302 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8005302:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005306:	b129      	cbz	r1, 8005314 <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8005308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800530c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005310:	b29b      	uxth	r3, r3
 8005312:	e001      	b.n	8005318 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8005314:	045b      	lsls	r3, r3, #17
 8005316:	0c5b      	lsrs	r3, r3, #17
 8005318:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800531c:	4770      	bx	lr

0800531e <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800531e:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005320:	b119      	cbz	r1, 800532a <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8005322:	b29b      	uxth	r3, r3
 8005324:	f043 0304 	orr.w	r3, r3, #4
 8005328:	e003      	b.n	8005332 <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800532a:	f023 0304 	bic.w	r3, r3, #4
 800532e:	041b      	lsls	r3, r3, #16
 8005330:	0c1b      	lsrs	r3, r3, #16
 8005332:	8083      	strh	r3, [r0, #4]
 8005334:	4770      	bx	lr

08005336 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8005336:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005338:	b119      	cbz	r1, 8005342 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800533a:	b29b      	uxth	r3, r3
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	e003      	b.n	800534a <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8005342:	f023 0301 	bic.w	r3, r3, #1
 8005346:	041b      	lsls	r3, r3, #16
 8005348:	0c1b      	lsrs	r3, r3, #16
 800534a:	8083      	strh	r3, [r0, #4]
 800534c:	4770      	bx	lr

0800534e <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800534e:	8983      	ldrh	r3, [r0, #12]
 8005350:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005352:	b10a      	cbz	r2, 8005358 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8005354:	4319      	orrs	r1, r3
 8005356:	e001      	b.n	800535c <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8005358:	ea23 0101 	bic.w	r1, r3, r1
 800535c:	8181      	strh	r1, [r0, #12]
 800535e:	4770      	bx	lr

08005360 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8005360:	8281      	strh	r1, [r0, #20]
}
 8005362:	4770      	bx	lr

08005364 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8005364:	8a03      	ldrh	r3, [r0, #16]
  {
    bitstatus = SET;
 8005366:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005368:	bf0c      	ite	eq
 800536a:	2000      	moveq	r0, #0
 800536c:	2001      	movne	r0, #1
 800536e:	4770      	bx	lr

08005370 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8005370:	43c9      	mvns	r1, r1
 8005372:	b289      	uxth	r1, r1
 8005374:	8201      	strh	r1, [r0, #16]
}
 8005376:	4770      	bx	lr

08005378 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8005378:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 800537a:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800537c:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8005380:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8005382:	d003      	beq.n	800538c <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
 8005384:	4211      	tst	r1, r2
 8005386:	bf0c      	ite	eq
 8005388:	2000      	moveq	r0, #0
 800538a:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800538c:	4770      	bx	lr

0800538e <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800538e:	43c9      	mvns	r1, r1
 8005390:	b289      	uxth	r1, r1
 8005392:	8201      	strh	r1, [r0, #16]
}
 8005394:	4770      	bx	lr

08005396 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8005396:	430a      	orrs	r2, r1
 8005398:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
}
 800539c:	4770      	bx	lr

0800539e <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800539e:	8983      	ldrh	r3, [r0, #12]
 80053a0:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80053a2:	b10a      	cbz	r2, 80053a8 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80053a4:	4319      	orrs	r1, r3
 80053a6:	e001      	b.n	80053ac <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80053a8:	ea23 0101 	bic.w	r1, r3, r1
 80053ac:	8181      	strh	r1, [r0, #12]
 80053ae:	4770      	bx	lr

080053b0 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80053b0:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80053b2:	b119      	cbz	r1, 80053bc <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f043 0308 	orr.w	r3, r3, #8
 80053ba:	e003      	b.n	80053c4 <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 80053bc:	f023 0308 	bic.w	r3, r3, #8
 80053c0:	041b      	lsls	r3, r3, #16
 80053c2:	0c1b      	lsrs	r3, r3, #16
 80053c4:	8083      	strh	r3, [r0, #4]
 80053c6:	4770      	bx	lr

080053c8 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 80053c8:	8903      	ldrh	r3, [r0, #8]
 80053ca:	f023 0307 	bic.w	r3, r3, #7
 80053ce:	041b      	lsls	r3, r3, #16
 80053d0:	0c1b      	lsrs	r3, r3, #16
 80053d2:	8103      	strh	r3, [r0, #8]
}
 80053d4:	4770      	bx	lr

080053d6 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053d6:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80053d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053dc:	041b      	lsls	r3, r3, #16
 80053de:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80053e0:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053e2:	8103      	strh	r3, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80053e4:	8903      	ldrh	r3, [r0, #8]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f043 0307 	orr.w	r3, r3, #7
 80053ec:	8103      	strh	r3, [r0, #8]
}
 80053ee:	4770      	bx	lr

080053f0 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	460d      	mov	r5, r1
 80053f4:	4611      	mov	r1, r2
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80053f6:	2201      	movs	r2, #1
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80053f8:	2d60      	cmp	r5, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80053fa:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80053fc:	d102      	bne.n	8005404 <TIM_TIxExternalClockConfig+0x14>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80053fe:	f7ff fb1a 	bl	8004a36 <TI2_Config>
 8005402:	e001      	b.n	8005408 <TIM_TIxExternalClockConfig+0x18>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8005404:	f7ff fafe 	bl	8004a04 <TI1_Config>
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005408:	8923      	ldrh	r3, [r4, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	041b      	lsls	r3, r3, #16
 8005410:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8005412:	431d      	orrs	r5, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005414:	8125      	strh	r5, [r4, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8005416:	8923      	ldrh	r3, [r4, #8]
 8005418:	b29b      	uxth	r3, r3
 800541a:	f043 0307 	orr.w	r3, r3, #7
 800541e:	8123      	strh	r3, [r4, #8]
}
 8005420:	bd38      	pop	{r3, r4, r5, pc}

08005422 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005422:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8005424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005428:	041b      	lsls	r3, r3, #16
 800542a:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800542c:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800542e:	8103      	strh	r3, [r0, #8]
}
 8005430:	4770      	bx	lr

08005432 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8005432:	8883      	ldrh	r3, [r0, #4]
 8005434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005438:	041b      	lsls	r3, r3, #16
 800543a:	0c1b      	lsrs	r3, r3, #16
 800543c:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800543e:	8883      	ldrh	r3, [r0, #4]
 8005440:	b29b      	uxth	r3, r3
 8005442:	430b      	orrs	r3, r1
 8005444:	8083      	strh	r3, [r0, #4]
}
 8005446:	4770      	bx	lr

08005448 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8005448:	8903      	ldrh	r3, [r0, #8]
 800544a:	f023 0307 	bic.w	r3, r3, #7
 800544e:	041b      	lsls	r3, r3, #16
 8005450:	0c1b      	lsrs	r3, r3, #16
 8005452:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8005454:	8903      	ldrh	r3, [r0, #8]
 8005456:	b29b      	uxth	r3, r3
 8005458:	430b      	orrs	r3, r1
 800545a:	8103      	strh	r3, [r0, #8]
}
 800545c:	4770      	bx	lr

0800545e <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 800545e:	8903      	ldrh	r3, [r0, #8]
 8005460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005464:	041b      	lsls	r3, r3, #16
 8005466:	0c1b      	lsrs	r3, r3, #16
 8005468:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 800546a:	8903      	ldrh	r3, [r0, #8]
 800546c:	b29b      	uxth	r3, r3
 800546e:	430b      	orrs	r3, r1
 8005470:	8103      	strh	r3, [r0, #8]
}
 8005472:	4770      	bx	lr

08005474 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8005474:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8005476:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8005478:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800547a:	430c      	orrs	r4, r1
 800547c:	4314      	orrs	r4, r2
 800547e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8005482:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005484:	8104      	strh	r4, [r0, #8]
}
 8005486:	bd10      	pop	{r4, pc}

08005488 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8005488:	b510      	push	{r4, lr}
 800548a:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800548c:	f7ff fff2 	bl	8005474 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8005490:	8923      	ldrh	r3, [r4, #8]
 8005492:	b29b      	uxth	r3, r3
 8005494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005498:	8123      	strh	r3, [r4, #8]
}
 800549a:	bd10      	pop	{r4, pc}

0800549c <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800549c:	b510      	push	{r4, lr}
 800549e:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80054a0:	f7ff ffe8 	bl	8005474 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054a4:	8923      	ldrh	r3, [r4, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 80054a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054aa:	041b      	lsls	r3, r3, #16
 80054ac:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;
 80054ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054b2:	8123      	strh	r3, [r4, #8]
}
 80054b4:	bd10      	pop	{r4, pc}

080054b6 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80054b6:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054b8:	8904      	ldrh	r4, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80054ba:	8b06      	ldrh	r6, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054bc:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80054be:	f426 7640 	bic.w	r6, r6, #768	; 0x300

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c2:	b2ad      	uxth	r5, r5
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80054c4:	f026 0603 	bic.w	r6, r6, #3

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80054c8:	f024 0407 	bic.w	r4, r4, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80054cc:	0436      	lsls	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80054ce:	f025 0522 	bic.w	r5, r5, #34	; 0x22

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80054d2:	0424      	lsls	r4, r4, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80054d4:	0c36      	lsrs	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80054d6:	4315      	orrs	r5, r2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80054d8:	0c24      	lsrs	r4, r4, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80054da:	f446 7680 	orr.w	r6, r6, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80054de:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 80054e2:	4321      	orrs	r1, r4

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80054e4:	f046 0601 	orr.w	r6, r6, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80054e8:	b2ad      	uxth	r5, r5

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ea:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80054ec:	8306      	strh	r6, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ee:	8405      	strh	r5, [r0, #32]
}
 80054f0:	bd70      	pop	{r4, r5, r6, pc}

080054f2 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80054f2:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80054f4:	b119      	cbz	r1, 80054fe <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054fc:	e003      	b.n	8005506 <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 80054fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005502:	041b      	lsls	r3, r3, #16
 8005504:	0c1b      	lsrs	r3, r3, #16
 8005506:	8083      	strh	r3, [r0, #4]
 8005508:	4770      	bx	lr

0800550a <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 800550a:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
}
 800550e:	4770      	bx	lr

08005510 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8005510:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8005512:	4b23      	ldr	r3, [pc, #140]	; (80055a0 <USART_DeInit+0x90>)
 8005514:	4298      	cmp	r0, r3
 8005516:	d105      	bne.n	8005524 <USART_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8005518:	2010      	movs	r0, #16
 800551a:	2101      	movs	r1, #1
 800551c:	f7fe f976 	bl	800380c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8005520:	2010      	movs	r0, #16
 8005522:	e037      	b.n	8005594 <USART_DeInit+0x84>
  }
  else if (USARTx == USART2)
 8005524:	4b1f      	ldr	r3, [pc, #124]	; (80055a4 <USART_DeInit+0x94>)
 8005526:	4298      	cmp	r0, r3
 8005528:	d107      	bne.n	800553a <USART_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800552a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800552e:	2101      	movs	r1, #1
 8005530:	f7fe f960 	bl	80037f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8005534:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005538:	e009      	b.n	800554e <USART_DeInit+0x3e>
  }
  else if (USARTx == USART3)
 800553a:	4b1b      	ldr	r3, [pc, #108]	; (80055a8 <USART_DeInit+0x98>)
 800553c:	4298      	cmp	r0, r3
 800553e:	d10b      	bne.n	8005558 <USART_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8005540:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005544:	2101      	movs	r1, #1
 8005546:	f7fe f955 	bl	80037f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800554a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800554e:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8005550:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8005554:	f7fe b94e 	b.w	80037f4 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
 8005558:	4b14      	ldr	r3, [pc, #80]	; (80055ac <USART_DeInit+0x9c>)
 800555a:	4298      	cmp	r0, r3
 800555c:	d107      	bne.n	800556e <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800555e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005562:	2101      	movs	r1, #1
 8005564:	f7fe f946 	bl	80037f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8005568:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800556c:	e7ef      	b.n	800554e <USART_DeInit+0x3e>
  }
  else if (USARTx == UART5)
 800556e:	4b10      	ldr	r3, [pc, #64]	; (80055b0 <USART_DeInit+0xa0>)
 8005570:	4298      	cmp	r0, r3
 8005572:	d107      	bne.n	8005584 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8005574:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005578:	2101      	movs	r1, #1
 800557a:	f7fe f93b 	bl	80037f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800557e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005582:	e7e4      	b.n	800554e <USART_DeInit+0x3e>
  }     
  else
  {
    if (USARTx == USART6)
 8005584:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <USART_DeInit+0xa4>)
 8005586:	4298      	cmp	r0, r3
 8005588:	d109      	bne.n	800559e <USART_DeInit+0x8e>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 800558a:	2020      	movs	r0, #32
 800558c:	2101      	movs	r1, #1
 800558e:	f7fe f93d 	bl	800380c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8005592:	2020      	movs	r0, #32
 8005594:	2100      	movs	r1, #0
    }
  }
}
 8005596:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800559a:	f7fe b937 	b.w	800380c <RCC_APB2PeriphResetCmd>
 800559e:	bd08      	pop	{r3, pc}
 80055a0:	40011000 	.word	0x40011000
 80055a4:	40004400 	.word	0x40004400
 80055a8:	40004800 	.word	0x40004800
 80055ac:	40004c00 	.word	0x40004c00
 80055b0:	40005000 	.word	0x40005000
 80055b4:	40011400 	.word	0x40011400

080055b8 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80055b8:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80055ba:	88ca      	ldrh	r2, [r1, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80055bc:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80055be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80055c2:	b530      	push	{r4, r5, lr}
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80055c4:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80055c6:	460d      	mov	r5, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80055c8:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80055ca:	8983      	ldrh	r3, [r0, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80055cc:	8909      	ldrh	r1, [r1, #8]
 80055ce:	88aa      	ldrh	r2, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80055d0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80055d4:	430a      	orrs	r2, r1
 80055d6:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80055d8:	f023 030c 	bic.w	r3, r3, #12
 80055dc:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80055de:	430a      	orrs	r2, r1

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80055e0:	0c1b      	lsrs	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80055e2:	b292      	uxth	r2, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80055e4:	4313      	orrs	r3, r2
 80055e6:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80055e8:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80055ea:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80055ec:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80055ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80055f2:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80055f4:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80055f6:	8283      	strh	r3, [r0, #20]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80055f8:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80055fa:	4668      	mov	r0, sp
 80055fc:	f7fe f82a 	bl	8003654 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8005600:	4b1a      	ldr	r3, [pc, #104]	; (800566c <USART_Init+0xb4>)
 8005602:	429c      	cmp	r4, r3
 8005604:	d003      	beq.n	800560e <USART_Init+0x56>
 8005606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800560a:	429c      	cmp	r4, r3
 800560c:	d101      	bne.n	8005612 <USART_Init+0x5a>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800560e:	9b03      	ldr	r3, [sp, #12]
 8005610:	e000      	b.n	8005614 <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8005612:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8005614:	89a2      	ldrh	r2, [r4, #12]
 8005616:	b212      	sxth	r2, r2
 8005618:	2a00      	cmp	r2, #0
 800561a:	f04f 0119 	mov.w	r1, #25
 800561e:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8005620:	fb01 f103 	mul.w	r1, r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8005624:	da01      	bge.n	800562a <USART_Init+0x72>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8005626:	0052      	lsls	r2, r2, #1
 8005628:	e000      	b.n	800562c <USART_Init+0x74>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800562a:	0092      	lsls	r2, r2, #2
  }
  tmpreg = (integerdivider / 100) << 4;
 800562c:	2364      	movs	r3, #100	; 0x64
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800562e:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8005632:	fbb1 f2f3 	udiv	r2, r1, r3
 8005636:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8005638:	0910      	lsrs	r0, r2, #4
 800563a:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800563e:	89a0      	ldrh	r0, [r4, #12]
 8005640:	b200      	sxth	r0, r0
 8005642:	2800      	cmp	r0, #0
 8005644:	da06      	bge.n	8005654 <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8005646:	00c9      	lsls	r1, r1, #3
 8005648:	3132      	adds	r1, #50	; 0x32
 800564a:	fbb1 f3f3 	udiv	r3, r1, r3
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	e005      	b.n	8005660 <USART_Init+0xa8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8005654:	0109      	lsls	r1, r1, #4
 8005656:	3132      	adds	r1, #50	; 0x32
 8005658:	fbb1 f3f3 	udiv	r3, r1, r3
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8005662:	b292      	uxth	r2, r2
 8005664:	8122      	strh	r2, [r4, #8]
}
 8005666:	b005      	add	sp, #20
 8005668:	bd30      	pop	{r4, r5, pc}
 800566a:	bf00      	nop
 800566c:	40011000 	.word	0x40011000

08005670 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8005670:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005674:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8005676:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8005678:	2300      	movs	r3, #0
 800567a:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800567c:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800567e:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8005680:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8005682:	8183      	strh	r3, [r0, #12]
}
 8005684:	4770      	bx	lr

08005686 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8005686:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005688:	8a02      	ldrh	r2, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800568a:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800568c:	884c      	ldrh	r4, [r1, #2]
 800568e:	4323      	orrs	r3, r4
 8005690:	888c      	ldrh	r4, [r1, #4]
 8005692:	88c9      	ldrh	r1, [r1, #6]
 8005694:	4323      	orrs	r3, r4
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005696:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8005698:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800569a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800569e:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80056a0:	4313      	orrs	r3, r2
 80056a2:	8203      	strh	r3, [r0, #16]
}
 80056a4:	bd10      	pop	{r4, pc}

080056a6 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80056a6:	2300      	movs	r3, #0
 80056a8:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80056aa:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80056ac:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80056ae:	80c3      	strh	r3, [r0, #6]
}
 80056b0:	4770      	bx	lr

080056b2 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80056b2:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80056b4:	b119      	cbz	r1, 80056be <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056bc:	e003      	b.n	80056c6 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80056be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056c2:	041b      	lsls	r3, r3, #16
 80056c4:	0c1b      	lsrs	r3, r3, #16
 80056c6:	8183      	strh	r3, [r0, #12]
 80056c8:	4770      	bx	lr

080056ca <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 80056ca:	8b03      	ldrh	r3, [r0, #24]
 80056cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80056d0:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80056d2:	8b03      	ldrh	r3, [r0, #24]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	430b      	orrs	r3, r1
 80056d8:	8303      	strh	r3, [r0, #24]
}
 80056da:	4770      	bx	lr

080056dc <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80056dc:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80056de:	b129      	cbz	r1, 80056ec <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80056e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	e001      	b.n	80056f0 <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 80056ec:	045b      	lsls	r3, r3, #17
 80056ee:	0c5b      	lsrs	r3, r3, #17
 80056f0:	8183      	strh	r3, [r0, #12]
 80056f2:	4770      	bx	lr

080056f4 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80056f4:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80056f6:	b119      	cbz	r1, 8005700 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80056fe:	e003      	b.n	8005708 <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8005700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005704:	041b      	lsls	r3, r3, #16
 8005706:	0c1b      	lsrs	r3, r3, #16
 8005708:	8283      	strh	r3, [r0, #20]
 800570a:	4770      	bx	lr

0800570c <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800570c:	05c9      	lsls	r1, r1, #23
 800570e:	0dc9      	lsrs	r1, r1, #23
 8005710:	8081      	strh	r1, [r0, #4]
}
 8005712:	4770      	bx	lr

08005714 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8005714:	8880      	ldrh	r0, [r0, #4]
 8005716:	05c0      	lsls	r0, r0, #23
}
 8005718:	0dc0      	lsrs	r0, r0, #23
 800571a:	4770      	bx	lr

0800571c <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 800571c:	8a03      	ldrh	r3, [r0, #16]
 800571e:	f023 030f 	bic.w	r3, r3, #15
 8005722:	041b      	lsls	r3, r3, #16
 8005724:	0c1b      	lsrs	r3, r3, #16
 8005726:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8005728:	8a03      	ldrh	r3, [r0, #16]
 800572a:	b29b      	uxth	r3, r3
 800572c:	430b      	orrs	r3, r1
 800572e:	8203      	strh	r3, [r0, #16]
}
 8005730:	4770      	bx	lr

08005732 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8005732:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8005734:	b119      	cbz	r1, 800573e <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8005736:	b29b      	uxth	r3, r3
 8005738:	f043 0302 	orr.w	r3, r3, #2
 800573c:	e003      	b.n	8005746 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 800573e:	f023 0302 	bic.w	r3, r3, #2
 8005742:	041b      	lsls	r3, r3, #16
 8005744:	0c1b      	lsrs	r3, r3, #16
 8005746:	8183      	strh	r3, [r0, #12]
 8005748:	4770      	bx	lr

0800574a <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 800574a:	8983      	ldrh	r3, [r0, #12]
 800574c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005750:	041b      	lsls	r3, r3, #16
 8005752:	0c1b      	lsrs	r3, r3, #16
 8005754:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8005756:	8983      	ldrh	r3, [r0, #12]
 8005758:	b29b      	uxth	r3, r3
 800575a:	430b      	orrs	r3, r1
 800575c:	8183      	strh	r3, [r0, #12]
}
 800575e:	4770      	bx	lr

08005760 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8005760:	8a03      	ldrh	r3, [r0, #16]
 8005762:	f023 0320 	bic.w	r3, r3, #32
 8005766:	041b      	lsls	r3, r3, #16
 8005768:	0c1b      	lsrs	r3, r3, #16
 800576a:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800576c:	8a03      	ldrh	r3, [r0, #16]
 800576e:	b29b      	uxth	r3, r3
 8005770:	430b      	orrs	r3, r1
 8005772:	8203      	strh	r3, [r0, #16]
}
 8005774:	4770      	bx	lr

08005776 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8005776:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005778:	b119      	cbz	r1, 8005782 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800577a:	b29b      	uxth	r3, r3
 800577c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005780:	e003      	b.n	800578a <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8005782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005786:	041b      	lsls	r3, r3, #16
 8005788:	0c1b      	lsrs	r3, r3, #16
 800578a:	8203      	strh	r3, [r0, #16]
 800578c:	4770      	bx	lr

0800578e <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 800578e:	8983      	ldrh	r3, [r0, #12]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f043 0301 	orr.w	r3, r3, #1
 8005796:	8183      	strh	r3, [r0, #12]
}
 8005798:	4770      	bx	lr

0800579a <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800579a:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800579c:	b119      	cbz	r1, 80057a6 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f043 0308 	orr.w	r3, r3, #8
 80057a4:	e003      	b.n	80057ae <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 80057a6:	f023 0308 	bic.w	r3, r3, #8
 80057aa:	041b      	lsls	r3, r3, #16
 80057ac:	0c1b      	lsrs	r3, r3, #16
 80057ae:	8283      	strh	r3, [r0, #20]
 80057b0:	4770      	bx	lr

080057b2 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 80057b2:	8b03      	ldrh	r3, [r0, #24]
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 80057b8:	8b03      	ldrh	r3, [r0, #24]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80057c0:	8303      	strh	r3, [r0, #24]
}
 80057c2:	4770      	bx	lr

080057c4 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80057c4:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80057c6:	b119      	cbz	r1, 80057d0 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	f043 0320 	orr.w	r3, r3, #32
 80057ce:	e003      	b.n	80057d8 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 80057d0:	f023 0320 	bic.w	r3, r3, #32
 80057d4:	041b      	lsls	r3, r3, #16
 80057d6:	0c1b      	lsrs	r3, r3, #16
 80057d8:	8283      	strh	r3, [r0, #20]
 80057da:	4770      	bx	lr

080057dc <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80057dc:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80057de:	b119      	cbz	r1, 80057e8 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f043 0310 	orr.w	r3, r3, #16
 80057e6:	e003      	b.n	80057f0 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 80057e8:	f023 0310 	bic.w	r3, r3, #16
 80057ec:	041b      	lsls	r3, r3, #16
 80057ee:	0c1b      	lsrs	r3, r3, #16
 80057f0:	8283      	strh	r3, [r0, #20]
 80057f2:	4770      	bx	lr

080057f4 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 80057f4:	8a83      	ldrh	r3, [r0, #20]
 80057f6:	f023 0304 	bic.w	r3, r3, #4
 80057fa:	041b      	lsls	r3, r3, #16
 80057fc:	0c1b      	lsrs	r3, r3, #16
 80057fe:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8005800:	8a83      	ldrh	r3, [r0, #20]
 8005802:	b29b      	uxth	r3, r3
 8005804:	430b      	orrs	r3, r1
 8005806:	8283      	strh	r3, [r0, #20]
}
 8005808:	4770      	bx	lr

0800580a <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800580a:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800580c:	b119      	cbz	r1, 8005816 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800580e:	b29b      	uxth	r3, r3
 8005810:	f043 0302 	orr.w	r3, r3, #2
 8005814:	e003      	b.n	800581e <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8005816:	f023 0302 	bic.w	r3, r3, #2
 800581a:	041b      	lsls	r3, r3, #16
 800581c:	0c1b      	lsrs	r3, r3, #16
 800581e:	8283      	strh	r3, [r0, #20]
 8005820:	4770      	bx	lr

08005822 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8005822:	8a83      	ldrh	r3, [r0, #20]
 8005824:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8005826:	b10a      	cbz	r2, 800582c <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8005828:	4319      	orrs	r1, r3
 800582a:	e001      	b.n	8005830 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800582c:	ea23 0101 	bic.w	r1, r3, r1
 8005830:	8281      	strh	r1, [r0, #20]
 8005832:	4770      	bx	lr

08005834 <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8005834:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8005838:	b510      	push	{r4, lr}

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800583a:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 800583e:	2401      	movs	r4, #1
 8005840:	fa14 f101 	lsls.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8005844:	42a3      	cmp	r3, r4
 8005846:	d101      	bne.n	800584c <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8005848:	300c      	adds	r0, #12
 800584a:	e004      	b.n	8005856 <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800584c:	2b02      	cmp	r3, #2
 800584e:	d101      	bne.n	8005854 <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8005850:	3010      	adds	r0, #16
 8005852:	e000      	b.n	8005856 <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8005854:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8005856:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8005858:	b10a      	cbz	r2, 800585e <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800585a:	4319      	orrs	r1, r3
 800585c:	e001      	b.n	8005862 <USART_ITConfig+0x2e>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800585e:	ea23 0101 	bic.w	r1, r3, r1
 8005862:	6001      	str	r1, [r0, #0]
 8005864:	bd10      	pop	{r4, pc}

08005866 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8005866:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 8005868:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800586a:	bf0c      	ite	eq
 800586c:	2000      	moveq	r0, #0
 800586e:	2001      	movne	r0, #1
 8005870:	4770      	bx	lr

08005872 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8005872:	43c9      	mvns	r1, r1
 8005874:	b289      	uxth	r1, r1
 8005876:	8001      	strh	r1, [r0, #0]
}
 8005878:	4770      	bx	lr

0800587a <USART_GetITStatus>:
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 800587a:	2201      	movs	r2, #1
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800587c:	b510      	push	{r4, lr}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800587e:	f001 031f 	and.w	r3, r1, #31
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8005882:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8005886:	409a      	lsls	r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8005888:	2c01      	cmp	r4, #1
 800588a:	d101      	bne.n	8005890 <USART_GetITStatus+0x16>
  {
    itmask &= USARTx->CR1;
 800588c:	8983      	ldrh	r3, [r0, #12]
 800588e:	e003      	b.n	8005898 <USART_GetITStatus+0x1e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8005890:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8005892:	bf0c      	ite	eq
 8005894:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8005896:	8a83      	ldrhne	r3, [r0, #20]
 8005898:	b29b      	uxth	r3, r3
 800589a:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 800589c:	8802      	ldrh	r2, [r0, #0]
 800589e:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80058a0:	b143      	cbz	r3, 80058b4 <USART_GetITStatus+0x3a>
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 80058a2:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 80058a4:	2301      	movs	r3, #1
 80058a6:	fa13 f101 	lsls.w	r1, r3, r1
  *            @arg USART_IT_NE:   Noise Error interrupt
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
 80058aa:	4211      	tst	r1, r2
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 80058ac:	bf0c      	ite	eq
 80058ae:	2000      	moveq	r0, #0
 80058b0:	2001      	movne	r0, #1
 80058b2:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 80058b4:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 80058b6:	bd10      	pop	{r4, pc}

080058b8 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80058b8:	0a09      	lsrs	r1, r1, #8
 80058ba:	2301      	movs	r3, #1
 80058bc:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 80058be:	43db      	mvns	r3, r3
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	8003      	strh	r3, [r0, #0]
}
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop

080058c8 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 80058c8:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 80058ca:	2101      	movs	r1, #1
 80058cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80058d0:	f7fd ff90 	bl	80037f4 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 80058d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80058d8:	2100      	movs	r1, #0
}
 80058da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void WWDG_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 80058de:	f7fd bf89 	b.w	80037f4 <RCC_APB1PeriphResetCmd>

080058e2 <WWDG_SetPrescaler>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 80058e2:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <WWDG_SetPrescaler+0xe>)
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 80058ea:	4302      	orrs	r2, r0
  /* Store the new value */
  WWDG->CFR = tmpreg;
 80058ec:	605a      	str	r2, [r3, #4]
}
 80058ee:	4770      	bx	lr
 80058f0:	40002c00 	.word	0x40002c00

080058f4 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 80058f4:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0;
 80058f6:	2300      	movs	r3, #0
 80058f8:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 80058fa:	4b07      	ldr	r3, [pc, #28]	; (8005918 <WWDG_SetWindowValue+0x24>)
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8005902:	9201      	str	r2, [sp, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 8005904:	9a01      	ldr	r2, [sp, #4]
 8005906:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800590a:	4302      	orrs	r2, r0
 800590c:	9201      	str	r2, [sp, #4]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 800590e:	9a01      	ldr	r2, [sp, #4]
 8005910:	605a      	str	r2, [r3, #4]
}
 8005912:	b002      	add	sp, #8
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40002c00 	.word	0x40002c00

0800591c <WWDG_EnableIT>:
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 800591c:	4b01      	ldr	r3, [pc, #4]	; (8005924 <WWDG_EnableIT+0x8>)
 800591e:	2201      	movs	r2, #1
 8005920:	601a      	str	r2, [r3, #0]
}
 8005922:	4770      	bx	lr
 8005924:	420580a4 	.word	0x420580a4

08005928 <WWDG_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 8005928:	4b02      	ldr	r3, [pc, #8]	; (8005934 <WWDG_SetCounter+0xc>)
 800592a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800592e:	6018      	str	r0, [r3, #0]
}
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40002c00 	.word	0x40002c00

08005938 <WWDG_Enable>:
  */
void WWDG_Enable(uint8_t Counter)
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 8005938:	4b02      	ldr	r3, [pc, #8]	; (8005944 <WWDG_Enable+0xc>)
 800593a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800593e:	6018      	str	r0, [r3, #0]
}
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	40002c00 	.word	0x40002c00

08005948 <WWDG_GetFlagStatus>:
  */
FlagStatus WWDG_GetFlagStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((WWDG->SR) != (uint32_t)RESET)
 8005948:	4b02      	ldr	r3, [pc, #8]	; (8005954 <WWDG_GetFlagStatus+0xc>)
 800594a:	6898      	ldr	r0, [r3, #8]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800594c:	3000      	adds	r0, #0
 800594e:	bf18      	it	ne
 8005950:	2001      	movne	r0, #1
 8005952:	4770      	bx	lr
 8005954:	40002c00 	.word	0x40002c00

08005958 <WWDG_ClearFlag>:
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
  WWDG->SR = (uint32_t)RESET;
 8005958:	4b01      	ldr	r3, [pc, #4]	; (8005960 <WWDG_ClearFlag+0x8>)
 800595a:	2200      	movs	r2, #0
 800595c:	609a      	str	r2, [r3, #8]
}
 800595e:	4770      	bx	lr
 8005960:	40002c00 	.word	0x40002c00

08005964 <delay_us>:
  * @brief  wait micro second
  * @param  wait_time : time to wait in micro second
  * @retval None
  */
void delay_us(uint16_t waittime)
{
 8005964:	b510      	push	{r4, lr}
 8005966:	4604      	mov	r4, r0
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);
 8005968:	2001      	movs	r0, #1
 800596a:	4601      	mov	r1, r0
 800596c:	f7fd ff06 	bl	800377c <RCC_APB1PeriphClockCmd>

  /* Time base configuration */
  TIM_TimeBaseStructureMicro.TIM_Period = ((waittime+1) * 1)-1;
 8005970:	4910      	ldr	r1, [pc, #64]	; (80059b4 <delay_us+0x50>)
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMicro);
 8005972:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
{
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);

  /* Time base configuration */
  TIM_TimeBaseStructureMicro.TIM_Period = ((waittime+1) * 1)-1;
 8005976:	604c      	str	r4, [r1, #4]
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMicro);
 8005978:	f7ff f924 	bl	8004bc4 <TIM_TimeBaseInit>

  TIM_SelectOnePulseMode(TIM_NUM, TIM_OPMode_Single);
 800597c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005980:	2108      	movs	r1, #8
 8005982:	f7ff f99e 	bl	8004cc2 <TIM_SelectOnePulseMode>

  TIM_SetCounter(TIM_NUM,2);
 8005986:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800598a:	2102      	movs	r1, #2
 800598c:	f7ff f96c 	bl	8004c68 <TIM_SetCounter>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, ENABLE);
 8005990:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005994:	2101      	movs	r1, #1
 8005996:	f7ff f9aa 	bl	8004cee <TIM_Cmd>

  while (TIM_GetCounter(TIM_NUM)){};
 800599a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800599e:	f7ff f967 	bl	8004c70 <TIM_GetCounter>
 80059a2:	4601      	mov	r1, r0
 80059a4:	2800      	cmp	r0, #0
 80059a6:	d1f8      	bne.n	800599a <delay_us+0x36>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 80059a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

}
 80059ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TIM_Cmd(TIM_NUM, ENABLE);

  while (TIM_GetCounter(TIM_NUM)){};

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 80059b0:	f7ff b99d 	b.w	8004cee <TIM_Cmd>
 80059b4:	20000010 	.word	0x20000010

080059b8 <delay_ms>:
  * @brief  wait millisecond
  * @param  wait_time : time to wait in millisecond
  * @retval None
  */
void delay_ms(uint16_t waittime)
{
 80059b8:	b510      	push	{r4, lr}
 80059ba:	4604      	mov	r4, r0
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);
 80059bc:	2001      	movs	r0, #1
 80059be:	4601      	mov	r1, r0
 80059c0:	f7fd fedc 	bl	800377c <RCC_APB1PeriphClockCmd>

  /* Time base configuration */
  TIM_TimeBaseStructureMili.TIM_Period = ((waittime+1) * 1)-1;
 80059c4:	4911      	ldr	r1, [pc, #68]	; (8005a0c <delay_ms+0x54>)
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMili);
 80059c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
{
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);

  /* Time base configuration */
  TIM_TimeBaseStructureMili.TIM_Period = ((waittime+1) * 1)-1;
 80059ca:	610c      	str	r4, [r1, #16]
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMili);
 80059cc:	310c      	adds	r1, #12
 80059ce:	f7ff f8f9 	bl	8004bc4 <TIM_TimeBaseInit>

  TIM_SelectOnePulseMode(TIM_NUM, TIM_OPMode_Single);
 80059d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80059d6:	2108      	movs	r1, #8
 80059d8:	f7ff f973 	bl	8004cc2 <TIM_SelectOnePulseMode>

  TIM_SetCounter(TIM_NUM,2);
 80059dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80059e0:	2102      	movs	r1, #2
 80059e2:	f7ff f941 	bl	8004c68 <TIM_SetCounter>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, ENABLE);
 80059e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80059ea:	2101      	movs	r1, #1
 80059ec:	f7ff f97f 	bl	8004cee <TIM_Cmd>

  while (TIM_GetCounter(TIM_NUM)){};
 80059f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80059f4:	f7ff f93c 	bl	8004c70 <TIM_GetCounter>
 80059f8:	4601      	mov	r1, r0
 80059fa:	2800      	cmp	r0, #0
 80059fc:	d1f8      	bne.n	80059f0 <delay_ms+0x38>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 80059fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
}
 8005a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TIM_Cmd(TIM_NUM, ENABLE);

  while (TIM_GetCounter(TIM_NUM)){};

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 8005a06:	f7ff b972 	b.w	8004cee <TIM_Cmd>
 8005a0a:	bf00      	nop
 8005a0c:	20000010 	.word	0x20000010

08005a10 <pinsrc>:
 static const uint8_t SCK  = 13; // PB7
 static const uint8_t LED_BUILTIN = 14;
 */

uint8_t pinsrc(uint32_t pin) {
	uint16_t pinbit = pin & 0xffff;
 8005a10:	b282      	uxth	r2, r0
	uint16_t bit = 1;
 8005a12:	2301      	movs	r3, #1
	uint8_t i;
	for(i = 0; i < 16; i++) {
 8005a14:	2000      	movs	r0, #0
		if ( bit == pinbit )
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d005      	beq.n	8005a26 <pinsrc+0x16>

uint8_t pinsrc(uint32_t pin) {
	uint16_t pinbit = pin & 0xffff;
	uint16_t bit = 1;
	uint8_t i;
	for(i = 0; i < 16; i++) {
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	b2c0      	uxtb	r0, r0
		if ( bit == pinbit )
			return i;
		bit <<= 1;
 8005a1e:	005b      	lsls	r3, r3, #1

uint8_t pinsrc(uint32_t pin) {
	uint16_t pinbit = pin & 0xffff;
	uint16_t bit = 1;
	uint8_t i;
	for(i = 0; i < 16; i++) {
 8005a20:	2810      	cmp	r0, #16
		if ( bit == pinbit )
			return i;
		bit <<= 1;
 8005a22:	b29b      	uxth	r3, r3

uint8_t pinsrc(uint32_t pin) {
	uint16_t pinbit = pin & 0xffff;
	uint16_t bit = 1;
	uint8_t i;
	for(i = 0; i < 16; i++) {
 8005a24:	d1f7      	bne.n	8005a16 <pinsrc+0x6>
		if ( bit == pinbit )
			return i;
		bit <<= 1;
	}
	return 16;
}
 8005a26:	4770      	bx	lr

08005a28 <pinMode>:


void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 8005a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 8005a2a:	f3c0 4503 	ubfx	r5, r0, #16, #4
 8005a2e:	4c0d      	ldr	r4, [pc, #52]	; (8005a64 <pinMode+0x3c>)
	}
	return 16;
}


void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 8005a30:	460f      	mov	r7, r1
 8005a32:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 8005a34:	2101      	movs	r1, #1
 8005a36:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 8005a3a:	eb04 0485 	add.w	r4, r4, r5, lsl #2

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 8005a3e:	f7fd fe79 	bl	8003734 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8005a42:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 8005a44:	b2b6      	uxth	r6, r6
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8005a46:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8005a4a:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 8005a4e:	6aa0      	ldr	r0, [r4, #40]	; 0x28

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 8005a50:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005a52:	2302      	movs	r3, #2
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 8005a54:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
 8005a56:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005a5a:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 8005a5e:	f7fc ff5f 	bl	8002920 <GPIO_Init>
}
 8005a62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a64:	20000028 	.word	0x20000028

08005a68 <GPIOMode>:


void GPIOMode(GPIO_TypeDef * port, uint16_t pinbits, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8005a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a6a:	461f      	mov	r7, r3

	GPIO_InitTypeDef GPIO_InitStructure;
	// waking up the port
    if ( port == GPIOB )
 8005a6c:	4b10      	ldr	r3, [pc, #64]	; (8005ab0 <GPIOMode+0x48>)
 8005a6e:	4298      	cmp	r0, r3
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
}


void GPIOMode(GPIO_TypeDef * port, uint16_t pinbits, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8005a70:	4604      	mov	r4, r0
 8005a72:	460d      	mov	r5, r1
 8005a74:	4616      	mov	r6, r2

	GPIO_InitTypeDef GPIO_InitStructure;
	// waking up the port
    if ( port == GPIOB )
 8005a76:	d101      	bne.n	8005a7c <GPIOMode+0x14>
    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8005a78:	2002      	movs	r0, #2
 8005a7a:	e003      	b.n	8005a84 <GPIOMode+0x1c>
    else if ( port == GPIOD )
 8005a7c:	4b0d      	ldr	r3, [pc, #52]	; (8005ab4 <GPIOMode+0x4c>)
 8005a7e:	4298      	cmp	r0, r3
 8005a80:	d103      	bne.n	8005a8a <GPIOMode+0x22>
    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8005a82:	2008      	movs	r0, #8
 8005a84:	2101      	movs	r1, #1
 8005a86:	f7fd fe55 	bl	8003734 <RCC_AHB1PeriphClockCmd>
        
	GPIO_InitStructure.GPIO_Pin = pinbits;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 8005a8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    if ( port == GPIOB )
    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    else if ( port == GPIOD )
    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
        
	GPIO_InitStructure.GPIO_Pin = pinbits;
 8005a8e:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 8005a90:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8005a94:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    else if ( port == GPIOD )
    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
        
	GPIO_InitStructure.GPIO_Pin = pinbits;
	GPIO_InitStructure.GPIO_Mode = mode;
 8005a98:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	4669      	mov	r1, sp
    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
        
	GPIO_InitStructure.GPIO_Pin = pinbits;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8005aa0:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 8005aa4:	f88d 7005 	strb.w	r7, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 8005aa8:	f7fc ff3a 	bl	8002920 <GPIO_Init>
}
 8005aac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	40020400 	.word	0x40020400
 8005ab4:	40020c00 	.word	0x40020c00

08005ab8 <digitalWrite>:

/*
 static void turnOffPWM(uint8_t timer) {
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
 8005ab8:	4603      	mov	r3, r0
 8005aba:	4a07      	ldr	r2, [pc, #28]	; (8005ad8 <digitalWrite+0x20>)
 8005abc:	0c00      	lsrs	r0, r0, #16
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 8005abe:	f000 000f 	and.w	r0, r0, #15
 8005ac2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8005ac6:	6a90      	ldr	r0, [r2, #40]	; 0x28
/*
 static void turnOffPWM(uint8_t timer) {
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
	if (bit) {
 8005ac8:	b111      	cbz	r1, 8005ad0 <digitalWrite+0x18>
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 8005aca:	b299      	uxth	r1, r3
 8005acc:	f7fc bf99 	b.w	8002a02 <GPIO_SetBits>
	} else {
		GPIO_ResetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 8005ad0:	b299      	uxth	r1, r3
 8005ad2:	f7fc bf98 	b.w	8002a06 <GPIO_ResetBits>
 8005ad6:	bf00      	nop
 8005ad8:	20000028 	.word	0x20000028

08005adc <portWrite>:
	}
}

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 8005adc:	f7fc bf9a 	b.w	8002a14 <GPIO_Write>

08005ae0 <digitalRead>:
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
	uint8_t mode = (port->MODER) >> (pin * 2);
 8005ae0:	6802      	ldr	r2, [r0, #0]

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
 8005ae2:	b508      	push	{r3, lr}
	uint8_t mode = (port->MODER) >> (pin * 2);
 8005ae4:	004b      	lsls	r3, r1, #1
 8005ae6:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d105      	bne.n	8005afc <digitalRead+0x1c>
		return (GPIO_ReadOutputDataBit(port, pin) ? SET : RESET);
 8005af0:	f7fc ff7e 	bl	80029f0 <GPIO_ReadOutputDataBit>
 8005af4:	3000      	adds	r0, #0
 8005af6:	bf18      	it	ne
 8005af8:	2001      	movne	r0, #1
 8005afa:	bd08      	pop	{r3, pc}
	return (GPIO_ReadInputDataBit(port, pin) ? SET : RESET);
 8005afc:	f7fc ff6f 	bl	80029de <GPIO_ReadInputDataBit>
 8005b00:	3000      	adds	r0, #0
 8005b02:	bf18      	it	ne
 8005b04:	2001      	movne	r0, #1
}
 8005b06:	bd08      	pop	{r3, pc}

08005b08 <i2c_id>:
enum I2CPortNumber {
	I2C_1 = 0, I2C_2, I2C_3,
};

uint8_t i2c_id(I2C_TypeDef * I2Cx) {
	if (I2Cx == I2C1 )
 8005b08:	4b08      	ldr	r3, [pc, #32]	; (8005b2c <i2c_id+0x24>)
 8005b0a:	4298      	cmp	r0, r3
 8005b0c:	d00a      	beq.n	8005b24 <i2c_id+0x1c>
		return I2C_1;
	if (I2Cx == I2C2 )
 8005b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b12:	4298      	cmp	r0, r3
 8005b14:	d008      	beq.n	8005b28 <i2c_id+0x20>
		return I2C_2;
	if (I2Cx == I2C3 )
		return I2C_3;
 8005b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b1a:	4298      	cmp	r0, r3
 8005b1c:	bf0c      	ite	eq
 8005b1e:	2002      	moveq	r0, #2
 8005b20:	2000      	movne	r0, #0
 8005b22:	4770      	bx	lr
	I2C_1 = 0, I2C_2, I2C_3,
};

uint8_t i2c_id(I2C_TypeDef * I2Cx) {
	if (I2Cx == I2C1 )
		return I2C_1;
 8005b24:	2000      	movs	r0, #0
 8005b26:	4770      	bx	lr
	if (I2Cx == I2C2 )
		return I2C_2;
 8005b28:	2001      	movs	r0, #1
	if (I2Cx == I2C3 )
		return I2C_3;
	return 0;
}
 8005b2a:	4770      	bx	lr
 8005b2c:	40005400 	.word	0x40005400

08005b30 <i2c_begin>:
/**
 * @brief  I2C Configuration
 * @param  None
 * @retval None
 */
void i2c_begin(I2C_TypeDef * I2Cx, uint32_t clkspeed) {
 8005b30:	b570      	push	{r4, r5, r6, lr}
//  GPIO_InitTypeDef  GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	uint8_t portid = 0; //i2c_id(I2Cx);

	GPIOMode(GPIOB, GPIO_Pin_7 | GPIO_Pin_8, ALTFUNC,
 8005b32:	4d2c      	ldr	r5, [pc, #176]	; (8005be4 <i2c_begin+0xb4>)
			GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
	digitalWrite(PB7, LOW);
 8005b34:	4e2c      	ldr	r6, [pc, #176]	; (8005be8 <i2c_begin+0xb8>)
/**
 * @brief  I2C Configuration
 * @param  None
 * @retval None
 */
void i2c_begin(I2C_TypeDef * I2Cx, uint32_t clkspeed) {
 8005b36:	b086      	sub	sp, #24
//  GPIO_InitTypeDef  GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	uint8_t portid = 0; //i2c_id(I2Cx);

	GPIOMode(GPIOB, GPIO_Pin_7 | GPIO_Pin_8, ALTFUNC,
 8005b38:	2202      	movs	r2, #2
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	2400      	movs	r4, #0
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8005b44:	9400      	str	r4, [sp, #0]
 8005b46:	9401      	str	r4, [sp, #4]
 8005b48:	f7ff ff8e 	bl	8005a68 <GPIOMode>
			GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
	digitalWrite(PB7, LOW);
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f7ff ffb2 	bl	8005ab8 <digitalWrite>
	delay_ms(10);
 8005b54:	200a      	movs	r0, #10
 8005b56:	f7ff ff2f 	bl	80059b8 <delay_ms>
	digitalWrite(PB7, HIGH);
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	f7ff ffab 	bl	8005ab8 <digitalWrite>
	delay_ms(10);
 8005b62:	200a      	movs	r0, #10
 8005b64:	f7ff ff28 	bl	80059b8 <delay_ms>
	digitalWrite(PB7, LOW);
 8005b68:	4621      	mov	r1, r4
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7ff ffa4 	bl	8005ab8 <digitalWrite>
	delay_ms(100);
 8005b70:	2064      	movs	r0, #100	; 0x64
 8005b72:	f7ff ff21 	bl	80059b8 <delay_ms>

	/* I2C Periph clock enable */
	// if ( I2CPortInfo[portid].periph == RCC_APB1Periph_I2C1 )
//	RCC_APB1PeriphClockCmd(I2CPortInfo[portid].periph, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8005b76:	2101      	movs	r1, #1
 8005b78:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005b7c:	f7fd fdfe 	bl	800377c <RCC_APB1PeriphClockCmd>

//	GPIOMode(I2CPortInfo[portid].scl | I2CPortInfo[portid].sda, ALTFUNC,
	GPIOMode(GPIOB, GPIO_Pin_7 | GPIO_Pin_8, ALTFUNC,
 8005b80:	2202      	movs	r2, #2
 8005b82:	4613      	mov	r3, r2
 8005b84:	2601      	movs	r6, #1
 8005b86:	4628      	mov	r0, r5
 8005b88:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8005b8c:	9600      	str	r6, [sp, #0]
 8005b8e:	9601      	str	r6, [sp, #4]
 8005b90:	f7ff ff6a 	bl	8005a68 <GPIOMode>
			I2CPortInfo[portid].afmapping);
	GPIO_PinAFConfig(I2CPortInfo[portid].gpio_scl,
			I2CPortInfo[portid].sclsrc, //GPIO_PinSource8,
			//pinsrc(I2CPortInfo[portid].scl),
			I2CPortInfo[portid].afmapping);
*/	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1);
 8005b94:	4628      	mov	r0, r5
 8005b96:	2107      	movs	r1, #7
 8005b98:	2204      	movs	r2, #4
 8005b9a:	f7fc ff41 	bl	8002a20 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_I2C1);
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	2108      	movs	r1, #8
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	f7fc ff3c 	bl	8002a20 <GPIO_PinAFConfig>

	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8005ba8:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8005bac:	f8ad 300e 	strh.w	r3, [sp, #14]
//  I2C_InitStructure.I2C_OwnAddress1 = I2C_SLAVE_ADDRESS7;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8005bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bb4:	f8ad 3012 	strh.w	r3, [sp, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8005bb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
			I2CPortInfo[portid].afmapping);
*/	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1);
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_I2C1);

	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8005bbc:	f8ad 400c 	strh.w	r4, [sp, #12]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
//  I2C_InitStructure.I2C_OwnAddress1 = I2C_SLAVE_ADDRESS7;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8005bc0:	f8ad 3014 	strh.w	r3, [sp, #20]
	I2C_InitStructure.I2C_ClockSpeed = 100000; //clkspeed;
 8005bc4:	ac06      	add	r4, sp, #24
 8005bc6:	4b09      	ldr	r3, [pc, #36]	; (8005bec <i2c_begin+0xbc>)

	/* I2C Peripheral Enable */
//	I2C_Cmd(I2Cx, ENABLE);
	I2C_Cmd(I2C1, ENABLE);
 8005bc8:	f5a5 35d8 	sub.w	r5, r5, #110592	; 0x1b000
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
//  I2C_InitStructure.I2C_OwnAddress1 = I2C_SLAVE_ADDRESS7;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = 100000; //clkspeed;
 8005bcc:	f844 3d10 	str.w	r3, [r4, #-16]!

	/* I2C Peripheral Enable */
//	I2C_Cmd(I2Cx, ENABLE);
	I2C_Cmd(I2C1, ENABLE);
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	4631      	mov	r1, r6
 8005bd4:	f7fd fa92 	bl	80030fc <I2C_Cmd>
	/* Apply I2C configuration after enabling it */
//	I2C_Init(I2Cx, &I2C_InitStructure);
	I2C_Init(I2C1, &I2C_InitStructure);
 8005bd8:	4628      	mov	r0, r5
 8005bda:	4621      	mov	r1, r4
 8005bdc:	f7fd fa1a 	bl	8003014 <I2C_Init>
}
 8005be0:	b006      	add	sp, #24
 8005be2:	bd70      	pop	{r4, r5, r6, pc}
 8005be4:	40020400 	.word	0x40020400
 8005be8:	00020080 	.word	0x00020080
 8005bec:	000186a0 	.word	0x000186a0

08005bf0 <i2c_transmit>:
/**
 * @brief  Write Command to ST7032i
 * @param  Data : Command Data
 * @retval None
 */
void i2c_transmit(I2C_TypeDef * I2Cx, uint8_t addr, uint8_t * data, uint16_t n) {
 8005bf0:	b570      	push	{r4, r5, r6, lr}
	uint16_t i;

	/* Send STRAT condition */
//	I2C_GenerateSTART(I2Cx, ENABLE);
	I2C_GenerateSTART(I2C1, ENABLE);
 8005bf2:	4817      	ldr	r0, [pc, #92]	; (8005c50 <i2c_transmit+0x60>)
/**
 * @brief  Write Command to ST7032i
 * @param  Data : Command Data
 * @retval None
 */
void i2c_transmit(I2C_TypeDef * I2Cx, uint8_t addr, uint8_t * data, uint16_t n) {
 8005bf4:	460d      	mov	r5, r1
	uint16_t i;

	/* Send STRAT condition */
//	I2C_GenerateSTART(I2Cx, ENABLE);
	I2C_GenerateSTART(I2C1, ENABLE);
 8005bf6:	2101      	movs	r1, #1
/**
 * @brief  Write Command to ST7032i
 * @param  Data : Command Data
 * @retval None
 */
void i2c_transmit(I2C_TypeDef * I2Cx, uint8_t addr, uint8_t * data, uint16_t n) {
 8005bf8:	4614      	mov	r4, r2
 8005bfa:	461e      	mov	r6, r3
	uint16_t i;

	/* Send STRAT condition */
//	I2C_GenerateSTART(I2Cx, ENABLE);
	I2C_GenerateSTART(I2C1, ENABLE);
 8005bfc:	f7fd fa8a 	bl	8003114 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
//	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT ))
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 8005c00:	4813      	ldr	r0, [pc, #76]	; (8005c50 <i2c_transmit+0x60>)
 8005c02:	4914      	ldr	r1, [pc, #80]	; (8005c54 <i2c_transmit+0x64>)
 8005c04:	f7fd fb7d 	bl	8003302 <I2C_CheckEvent>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	d0f9      	beq.n	8005c00 <i2c_transmit+0x10>
		;
	/* Send EEPROM address for write */
//		I2C_Send7bitAddress(I2Cx, addr << 1, I2C_Direction_Transmitter );
		I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8005c0c:	0069      	lsls	r1, r5, #1
 8005c0e:	4810      	ldr	r0, [pc, #64]	; (8005c50 <i2c_transmit+0x60>)
 8005c10:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8005c14:	2200      	movs	r2, #0
 8005c16:	f7fd fa95 	bl	8003144 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
//		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
			while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
 8005c1a:	480d      	ldr	r0, [pc, #52]	; (8005c50 <i2c_transmit+0x60>)
 8005c1c:	490e      	ldr	r1, [pc, #56]	; (8005c58 <i2c_transmit+0x68>)
 8005c1e:	f7fd fb70 	bl	8003302 <I2C_CheckEvent>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	d0f9      	beq.n	8005c1a <i2c_transmit+0x2a>
 8005c26:	2500      	movs	r5, #0
 8005c28:	e009      	b.n	8005c3e <i2c_transmit+0x4e>
		;

	for (i = 0; i < n; i++) {
//		I2C_SendData(I2Cx, data[i]);
		I2C_SendData(I2C1, data[i]);
 8005c2a:	5d61      	ldrb	r1, [r4, r5]
 8005c2c:	f7fd fb0d 	bl	800324a <I2C_SendData>
		/* Test on EV8 and clear it */
//		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
 8005c30:	4807      	ldr	r0, [pc, #28]	; (8005c50 <i2c_transmit+0x60>)
 8005c32:	490a      	ldr	r1, [pc, #40]	; (8005c5c <i2c_transmit+0x6c>)
 8005c34:	f7fd fb65 	bl	8003302 <I2C_CheckEvent>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	d0f9      	beq.n	8005c30 <i2c_transmit+0x40>
 8005c3c:	3501      	adds	r5, #1
	/* Test on EV6 and clear it */
//		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
			while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
		;

	for (i = 0; i < n; i++) {
 8005c3e:	b2ab      	uxth	r3, r5
 8005c40:	42b3      	cmp	r3, r6
//		I2C_SendData(I2Cx, data[i]);
		I2C_SendData(I2C1, data[i]);
 8005c42:	4803      	ldr	r0, [pc, #12]	; (8005c50 <i2c_transmit+0x60>)
	/* Test on EV6 and clear it */
//		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
			while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
		;

	for (i = 0; i < n; i++) {
 8005c44:	d3f1      	bcc.n	8005c2a <i2c_transmit+0x3a>
//		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			;
	}
//	I2C_GenerateSTOP(I2Cx, ENABLE);
	I2C_GenerateSTOP(I2C1, ENABLE);
 8005c46:	2101      	movs	r1, #1
}
 8005c48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
//		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			;
	}
//	I2C_GenerateSTOP(I2Cx, ENABLE);
	I2C_GenerateSTOP(I2C1, ENABLE);
 8005c4c:	f7fd ba6e 	b.w	800312c <I2C_GenerateSTOP>
 8005c50:	40005400 	.word	0x40005400
 8005c54:	00030001 	.word	0x00030001
 8005c58:	00070082 	.word	0x00070082
 8005c5c:	00070084 	.word	0x00070084

08005c60 <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 8005c60:	4b02      	ldr	r3, [pc, #8]	; (8005c6c <SysTick_Handler+0xc>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	3201      	adds	r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
}
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	20000a68 	.word	0x20000a68

08005c70 <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 8005c70:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <SysTick_delay+0x10>)
 8005c72:	681a      	ldr	r2, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 8005c74:	6819      	ldr	r1, [r3, #0]
 8005c76:	1a89      	subs	r1, r1, r2
 8005c78:	4281      	cmp	r1, r0
 8005c7a:	d3fb      	bcc.n	8005c74 <SysTick_delay+0x4>
		;
}
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	20000a68 	.word	0x20000a68

08005c84 <SysTick_Start>:

void SysTick_Start(void) {
 8005c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 8005c86:	4668      	mov	r0, sp
 8005c88:	f7fd fce4 	bl	8003654 <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8005c8c:	9a01      	ldr	r2, [sp, #4]
 8005c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c92:	fbb2 f2f3 	udiv	r2, r2, r3
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8005c96:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <SysTick_Start+0x2c>)
 8005c98:	3a01      	subs	r2, #1
 8005c9a:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8005c9c:	4a05      	ldr	r2, [pc, #20]	; (8005cb4 <SysTick_Start+0x30>)
 8005c9e:	21f0      	movs	r1, #240	; 0xf0
 8005ca0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ca8:	2207      	movs	r2, #7
 8005caa:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 8005cac:	b005      	add	sp, #20
 8005cae:	bd00      	pop	{pc}
 8005cb0:	e000e010 	.word	0xe000e010
 8005cb4:	e000ed00 	.word	0xe000ed00

08005cb8 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 8005cb8:	4b01      	ldr	r3, [pc, #4]	; (8005cc0 <SysTick_count+0x8>)
 8005cba:	6818      	ldr	r0, [r3, #0]
}
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	20000a68 	.word	0x20000a68

08005cc4 <buffer_clear>:
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 8005cca:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 8005cce:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 8005cd2:	4770      	bx	lr

08005cd4 <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 8005cd4:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8005cd8:	4770      	bx	lr

08005cda <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8005cda:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 8005cde:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d105      	bne.n	8005cf2 <buffer_is_full+0x18>

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
 8005ce6:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
	if ( (r->head == r->tail) && (r->count > 0) ) {
		return 1;
 8005cea:	3000      	adds	r0, #0
 8005cec:	bf18      	it	ne
 8005cee:	2001      	movne	r0, #1
 8005cf0:	4770      	bx	lr
	}
	return 0;
 8005cf2:	2000      	movs	r0, #0
}
 8005cf4:	4770      	bx	lr

08005cf6 <buffer_enque>:

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8005cf6:	b538      	push	{r3, r4, r5, lr}
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	460d      	mov	r5, r1
	if ( buffer_is_full(r) )
 8005cfc:	f7ff ffed 	bl	8005cda <buffer_is_full>
 8005d00:	b9b0      	cbnz	r0, 8005d30 <buffer_enque+0x3a>
		return 0xffff;
	r->buf[r->head++] = w;
 8005d02:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
 8005d06:	b21a      	sxth	r2, r3
 8005d08:	3301      	adds	r3, #1
 8005d0a:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
	r->count++;
 8005d0e:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
 8005d12:	3201      	adds	r2, #1
 8005d14:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8005d18:	b21a      	sxth	r2, r3
 8005d1a:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <buffer_enque+0x42>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	da03      	bge.n	8005d2a <buffer_enque+0x34>
 8005d22:	3b01      	subs	r3, #1
 8005d24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d28:	3301      	adds	r3, #1
 8005d2a:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8005d2e:	e001      	b.n	8005d34 <buffer_enque+0x3e>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
 8005d30:	f64f 75ff 	movw	r5, #65535	; 0xffff
	r->buf[r->head++] = w;
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}
 8005d34:	4628      	mov	r0, r5
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	8000007f 	.word	0x8000007f

08005d3c <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8005d3c:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8005d40:	4602      	mov	r2, r0
	uint16_t w;
	if ( buffer_count(r) == 0 )
 8005d42:	b1a1      	cbz	r1, 8005d6e <buffer_deque+0x32>
		return 0xffff;
	w = r->buf[r->tail++];
 8005d44:	f8b0 3102 	ldrh.w	r3, [r0, #258]	; 0x102
	r->count--;
 8005d48:	3901      	subs	r1, #1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8005d4a:	b218      	sxth	r0, r3
 8005d4c:	3301      	adds	r3, #1
	r->count--;
 8005d4e:	f8a2 1104 	strh.w	r1, [r2, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 8005d52:	b219      	sxth	r1, r3
 8005d54:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <buffer_deque+0x38>)

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8005d56:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8005d5a:	400b      	ands	r3, r1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	da03      	bge.n	8005d68 <buffer_deque+0x2c>
 8005d60:	3b01      	subs	r3, #1
 8005d62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d66:	3301      	adds	r3, #1
 8005d68:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
 8005d6c:	4770      	bx	lr
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
 8005d6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 8005d72:	4770      	bx	lr
 8005d74:	8000007f 	.word	0x8000007f

08005d78 <usart_id>:
  USART6,
};
*/

uint8_t usart_id(USART_TypeDef * USARTx) {
	if ( USARTx == USART1 )
 8005d78:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <usart_id+0x30>)
 8005d7a:	4298      	cmp	r0, r3
 8005d7c:	d00e      	beq.n	8005d9c <usart_id+0x24>
			return USART_1;
	if ( USARTx == USART2 )
 8005d7e:	f5a3 434c 	sub.w	r3, r3, #52224	; 0xcc00
 8005d82:	4298      	cmp	r0, r3
 8005d84:	d00c      	beq.n	8005da0 <usart_id+0x28>
			return USART_2;
	if ( USARTx == USART3 )
 8005d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d8a:	4298      	cmp	r0, r3
 8005d8c:	d00a      	beq.n	8005da4 <usart_id+0x2c>
			return USART_3;
	if ( USARTx == USART6 )
			return USART_6;
 8005d8e:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
 8005d92:	4298      	cmp	r0, r3
 8005d94:	bf0c      	ite	eq
 8005d96:	2005      	moveq	r0, #5
 8005d98:	2000      	movne	r0, #0
 8005d9a:	4770      	bx	lr
};
*/

uint8_t usart_id(USART_TypeDef * USARTx) {
	if ( USARTx == USART1 )
			return USART_1;
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	4770      	bx	lr
	if ( USARTx == USART2 )
			return USART_2;
 8005da0:	2001      	movs	r0, #1
 8005da2:	4770      	bx	lr
	if ( USARTx == USART3 )
			return USART_3;
 8005da4:	2002      	movs	r0, #2
	if ( USARTx == USART6 )
			return USART_6;
	return 0;
}
 8005da6:	4770      	bx	lr
 8005da8:	40011000 	.word	0x40011000

08005dac <usart_begin>:
				((uint32_t) RCC_APB1Periph_UART4), GPIOA, GPIO_PinSource1, GPIO_PinSource0, GPIO_AF_USART3,
				UART4_IRQn
		}
};

void usart_begin(USART_TypeDef * USARTx, const uint32_t baud) {
 8005dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db0:	b088      	sub	sp, #32
 8005db2:	4680      	mov	r8, r0
 8005db4:	468a      	mov	sl, r1
	//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	uint8_t portid = usart_id(USARTx);
 8005db6:	f7ff ffdf 	bl	8005d78 <usart_id>
	if ( portid == 6 )
 8005dba:	2806      	cmp	r0, #6
void usart_begin(USART_TypeDef * USARTx, const uint32_t baud) {
	//	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	uint8_t portid = usart_id(USARTx);
 8005dbc:	4681      	mov	r9, r0
	if ( portid == 6 )
 8005dbe:	d100      	bne.n	8005dc2 <usart_begin+0x16>
 8005dc0:	e7fe      	b.n	8005dc0 <usart_begin+0x14>
		while(1);

	//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
	GPIOMode(uPortInfo[portid].afgpio, uPortInfo[portid].rxpin | uPortInfo[portid].txpin, GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP,
 8005dc2:	4a33      	ldr	r2, [pc, #204]	; (8005e90 <usart_begin+0xe4>)
 8005dc4:	ea4f 1300 	mov.w	r3, r0, lsl #4
 8005dc8:	18d5      	adds	r5, r2, r3
 8005dca:	2400      	movs	r4, #0
 8005dcc:	2601      	movs	r6, #1
 8005dce:	5ad3      	ldrh	r3, [r2, r3]
 8005dd0:	8869      	ldrh	r1, [r5, #2]
 8005dd2:	e88d 0050 	stmia.w	sp, {r4, r6}
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	4319      	orrs	r1, r3
 8005dda:	68a8      	ldr	r0, [r5, #8]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	b289      	uxth	r1, r1
 8005de0:	f7ff fe42 	bl	8005a68 <GPIOMode>
			GPIO_PuPd_UP);
	/* USART3 clock enable */
	RCC_APB1PeriphClockCmd(uPortInfo[portid].usart_periph, (FunctionalState) ENABLE);
 8005de4:	6868      	ldr	r0, [r5, #4]
 8005de6:	4631      	mov	r1, r6
 8005de8:	f7fd fcc8 	bl	800377c <RCC_APB1PeriphClockCmd>

	GPIO_PinAFConfig(uPortInfo[portid].afgpio, uPortInfo[portid].txsource, uPortInfo[portid].afmapping ); // TX -- PB10
 8005dec:	68a8      	ldr	r0, [r5, #8]
 8005dee:	7b69      	ldrb	r1, [r5, #13]
 8005df0:	7baa      	ldrb	r2, [r5, #14]
 8005df2:	f7fc fe15 	bl	8002a20 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(uPortInfo[portid].afgpio, uPortInfo[portid].rxsource,  uPortInfo[portid].afmapping ); // RX -- PB11
 8005df6:	7baa      	ldrb	r2, [r5, #14]
 8005df8:	68a8      	ldr	r0, [r5, #8]
 8005dfa:	7b29      	ldrb	r1, [r5, #12]
 8005dfc:	f7fc fe10 	bl	8002a20 <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8005e00:	230c      	movs	r3, #12

	USART_Init(USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8005e02:	eb0d 0103 	add.w	r1, sp, r3
 8005e06:	4640      	mov	r0, r8
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8005e08:	f8ad 3016 	strh.w	r3, [sp, #22]
	uint8_t portid = usart_id(USARTx);
	if ( portid == 6 )
		while(1);

	//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
	GPIOMode(uPortInfo[portid].afgpio, uPortInfo[portid].rxpin | uPortInfo[portid].txpin, GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP,
 8005e0c:	f105 0708 	add.w	r7, r5, #8
	RCC_APB1PeriphClockCmd(uPortInfo[portid].usart_periph, (FunctionalState) ENABLE);

	GPIO_PinAFConfig(uPortInfo[portid].afgpio, uPortInfo[portid].txsource, uPortInfo[portid].afmapping ); // TX -- PB10
	GPIO_PinAFConfig(uPortInfo[portid].afgpio, uPortInfo[portid].rxsource,  uPortInfo[portid].afmapping ); // RX -- PB11

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8005e10:	f8cd a00c 	str.w	sl, [sp, #12]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8005e14:	f8ad 4010 	strh.w	r4, [sp, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8005e18:	f8ad 4012 	strh.w	r4, [sp, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8005e1c:	f8ad 4014 	strh.w	r4, [sp, #20]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8005e20:	f8ad 4018 	strh.w	r4, [sp, #24]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8005e24:	f7ff fbc8 	bl	80055b8 <USART_Init>

	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
 8005e28:	4640      	mov	r0, r8
 8005e2a:	4632      	mov	r2, r6
 8005e2c:	f240 5125 	movw	r1, #1317	; 0x525
 8005e30:	f7ff fd00 	bl	8005834 <USART_ITConfig>
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 8005e34:	4622      	mov	r2, r4
 8005e36:	4640      	mov	r0, r8
 8005e38:	f240 7127 	movw	r1, #1831	; 0x727
 8005e3c:	f7ff fcfa 	bl	8005834 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = uPortInfo[portid].irq_channel;
 8005e40:	79fb      	ldrb	r3, [r7, #7]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8005e42:	f88d 401d 	strb.w	r4, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = (FunctionalState) ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8005e46:	a807      	add	r0, sp, #28
	USART_Init(USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = uPortInfo[portid].irq_channel;
 8005e48:	f88d 301c 	strb.w	r3, [sp, #28]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8005e4c:	f88d 401e 	strb.w	r4, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = (FunctionalState) ENABLE;	// the USART3 interrupts are globally enabled
 8005e50:	f88d 601f 	strb.w	r6, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8005e54:	f7fa f9a2 	bl	800019c <NVIC_Init>

	buffer_clear(&rxring[portid]);
 8005e58:	f44f 7383 	mov.w	r3, #262	; 0x106
 8005e5c:	fb03 f909 	mul.w	r9, r3, r9
 8005e60:	4a0c      	ldr	r2, [pc, #48]	; (8005e94 <usart_begin+0xe8>)
	buffer_clear(&txring[portid]);
 8005e62:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <usart_begin+0xec>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = (FunctionalState) ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff

	buffer_clear(&rxring[portid]);
 8005e64:	444a      	add	r2, r9
	buffer_clear(&txring[portid]);
 8005e66:	444b      	add	r3, r9
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8005e68:	f8a2 4100 	strh.w	r4, [r2, #256]	; 0x100
	r->tail = 0;
 8005e6c:	f8a2 4102 	strh.w	r4, [r2, #258]	; 0x102
	r->count = 0;
 8005e70:	f8a2 4104 	strh.w	r4, [r2, #260]	; 0x104
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8005e74:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	r->tail = 0;
 8005e78:	f8a3 4102 	strh.w	r4, [r3, #258]	; 0x102
	r->count = 0;
 8005e7c:	f8a3 4104 	strh.w	r4, [r3, #260]	; 0x104

	buffer_clear(&rxring[portid]);
	buffer_clear(&txring[portid]);

	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx, (FunctionalState) ENABLE);
 8005e80:	4640      	mov	r0, r8
 8005e82:	4631      	mov	r1, r6

	GPIO_PinAFConfig(uPortInfo[portid].afgpio, uPortInfo[portid].txsource, uPortInfo[portid].afmapping ); // TX -- PB10
	GPIO_PinAFConfig(uPortInfo[portid].afgpio, uPortInfo[portid].rxsource,  uPortInfo[portid].afmapping ); // RX -- PB11

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8005e84:	4625      	mov	r5, r4

	buffer_clear(&rxring[portid]);
	buffer_clear(&txring[portid]);

	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx, (FunctionalState) ENABLE);
 8005e86:	f7ff fc14 	bl	80056b2 <USART_Cmd>
}
 8005e8a:	b008      	add	sp, #32
 8005e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e90:	200000e4 	.word	0x200000e4
 8005e94:	20000d7e 	.word	0x20000d7e
 8005e98:	20000a6c 	.word	0x20000a6c

08005e9c <usart_bare_write>:

void usart_bare_write(USART_TypeDef * USARTx, const uint16_t w) {
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET)
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	2180      	movs	r1, #128	; 0x80
 8005ea6:	f7ff fcde 	bl	8005866 <USART_GetFlagStatus>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d0f9      	beq.n	8005ea2 <usart_bare_write+0x6>
		;
	USART_SendData(USARTx, w);
 8005eae:	4620      	mov	r0, r4
 8005eb0:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
}
 8005eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void usart_bare_write(USART_TypeDef * USARTx, const uint16_t w) {
	while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET)
		;
	USART_SendData(USARTx, w);
 8005eb6:	f7ff bc29 	b.w	800570c <USART_SendData>

08005eba <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
}

void usart_write(USART_TypeDef * USARTx, const uint16_t w) {
 8005eba:	b570      	push	{r4, r5, r6, lr}
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 8005ebc:	f240 7427 	movw	r4, #1831	; 0x727
 8005ec0:	2200      	movs	r2, #0
		;
	USART_SendData(USARTx, w);
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
}

void usart_write(USART_TypeDef * USARTx, const uint16_t w) {
 8005ec2:	460e      	mov	r6, r1
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 8005ec4:	4621      	mov	r1, r4
		;
	USART_SendData(USARTx, w);
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
}

void usart_write(USART_TypeDef * USARTx, const uint16_t w) {
 8005ec6:	4605      	mov	r5, r0
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 8005ec8:	f7ff fcb4 	bl	8005834 <USART_ITConfig>
	buffer_enque(&txring[USART_3], w);
 8005ecc:	4631      	mov	r1, r6
 8005ece:	4805      	ldr	r0, [pc, #20]	; (8005ee4 <usart_write+0x2a>)
 8005ed0:	f7ff ff11 	bl	8005cf6 <buffer_enque>
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) ENABLE);
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	2201      	movs	r2, #1
}
 8005eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

void usart_write(USART_TypeDef * USARTx, const uint16_t w) {
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
	buffer_enque(&txring[USART_3], w);
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) ENABLE);
 8005ede:	f7ff bca9 	b.w	8005834 <USART_ITConfig>
 8005ee2:	bf00      	nop
 8005ee4:	20000c78 	.word	0x20000c78

08005ee8 <usart_print>:
}

void usart_print(USART_TypeDef * USARTx, const char * s) {
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	4605      	mov	r5, r0
 8005eec:	460c      	mov	r4, r1
	while (*s)
 8005eee:	e002      	b.n	8005ef6 <usart_print+0xe>
		usart_write(USARTx, (uint16_t) *s++);
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	f7ff ffe2 	bl	8005eba <usart_write>
	buffer_enque(&txring[USART_3], w);
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) ENABLE);
}

void usart_print(USART_TypeDef * USARTx, const char * s) {
	while (*s)
 8005ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005efa:	2900      	cmp	r1, #0
 8005efc:	d1f8      	bne.n	8005ef0 <usart_print+0x8>
		usart_write(USARTx, (uint16_t) *s++);
}
 8005efe:	bd38      	pop	{r3, r4, r5, pc}

08005f00 <usart_bare_read>:

uint16_t usart_bare_read(USART_TypeDef * USARTx) {
	return USART_ReceiveData(USARTx );
 8005f00:	f7ff bc08 	b.w	8005714 <USART_ReceiveData>

08005f04 <usart_read>:
}

uint16_t usart_read(USART_TypeDef * USARTx) {
 8005f04:	b508      	push	{r3, lr}
	uint16_t w = buffer_deque(&rxring[USART_3]);
 8005f06:	4804      	ldr	r0, [pc, #16]	; (8005f18 <usart_read+0x14>)
 8005f08:	f7ff ff18 	bl	8005d3c <buffer_deque>
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}
 8005f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f10:	4298      	cmp	r0, r3
 8005f12:	bf08      	it	eq
 8005f14:	2000      	moveq	r0, #0
 8005f16:	bd08      	pop	{r3, pc}
 8005f18:	20000f8a 	.word	0x20000f8a

08005f1c <usart_flush>:

void usart_flush(USART_TypeDef * USARTx) {
 8005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f240 5125 	movw	r1, #1317	; 0x525
	uint16_t w = buffer_deque(&rxring[USART_3]);
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}

void usart_flush(USART_TypeDef * USARTx) {
 8005f24:	4604      	mov	r4, r0
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
 8005f26:	f7ff fc85 	bl	8005834 <USART_ITConfig>
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8005f2a:	4b1f      	ldr	r3, [pc, #124]	; (8005fa8 <usart_flush+0x8c>)
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8005f2c:	4f1f      	ldr	r7, [pc, #124]	; (8005fac <usart_flush+0x90>)
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8005f2e:	2500      	movs	r5, #0
 8005f30:	f8a3 530c 	strh.w	r5, [r3, #780]	; 0x30c
	r->tail = 0;
 8005f34:	f8a3 530e 	strh.w	r5, [r3, #782]	; 0x30e
	r->count = 0;
 8005f38:	f8a3 5310 	strh.w	r5, [r3, #784]	; 0x310
}

void usart_flush(USART_TypeDef * USARTx) {
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[USART_3]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f240 5125 	movw	r1, #1317	; 0x525
 8005f42:	f7ff fcb9 	bl	80058b8 <USART_ClearITPendingBit>
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
 8005f46:	4620      	mov	r0, r4
 8005f48:	f240 5125 	movw	r1, #1317	; 0x525
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f7ff fc71 	bl	8005834 <USART_ITConfig>
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 8005f52:	4620      	mov	r0, r4
 8005f54:	f240 7127 	movw	r1, #1831	; 0x727
 8005f58:	462a      	mov	r2, r5
 8005f5a:	f7ff fc6b 	bl	8005834 <USART_ITConfig>
	while ( buffer_count(&txring[USART_3]) > 0 ) {
 8005f5e:	e012      	b.n	8005f86 <usart_flush+0x6a>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
 8005f60:	4620      	mov	r0, r4
 8005f62:	2180      	movs	r1, #128	; 0x80
 8005f64:	f7ff fc7f 	bl	8005866 <USART_GetFlagStatus>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d0f9      	beq.n	8005f60 <usart_flush+0x44>
		USART_SendData(USARTx, buffer_deque(&txring[USART_3]));
 8005f6c:	4810      	ldr	r0, [pc, #64]	; (8005fb0 <usart_flush+0x94>)
 8005f6e:	f7ff fee5 	bl	8005d3c <buffer_deque>
 8005f72:	4601      	mov	r1, r0
 8005f74:	4620      	mov	r0, r4
 8005f76:	f7ff fbc9 	bl	800570c <USART_SendData>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	2140      	movs	r1, #64	; 0x40
 8005f7e:	f7ff fc72 	bl	8005866 <USART_GetFlagStatus>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	d0f9      	beq.n	8005f7a <usart_flush+0x5e>
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[USART_3]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
	while ( buffer_count(&txring[USART_3]) > 0 ) {
 8005f86:	f8b7 5310 	ldrh.w	r5, [r7, #784]	; 0x310
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8005f8a:	4e08      	ldr	r6, [pc, #32]	; (8005fac <usart_flush+0x90>)
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[USART_3]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
	while ( buffer_count(&txring[USART_3]) > 0 ) {
 8005f8c:	2d00      	cmp	r5, #0
 8005f8e:	d1e7      	bne.n	8005f60 <usart_flush+0x44>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
		USART_SendData(USARTx, buffer_deque(&txring[USART_3]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
 8005f90:	4620      	mov	r0, r4
 8005f92:	f240 7127 	movw	r1, #1831	; 0x727
 8005f96:	f7ff fc8f 	bl	80058b8 <USART_ClearITPendingBit>
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8005f9a:	f8a6 530c 	strh.w	r5, [r6, #780]	; 0x30c
	r->tail = 0;
 8005f9e:	f8a6 530e 	strh.w	r5, [r6, #782]	; 0x30e
	r->count = 0;
 8005fa2:	f8a6 5310 	strh.w	r5, [r6, #784]	; 0x310
		USART_SendData(USARTx, buffer_deque(&txring[USART_3]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
	buffer_clear(&txring[USART_3]);
}
 8005fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fa8:	20000d7e 	.word	0x20000d7e
 8005fac:	20000a6c 	.word	0x20000a6c
 8005fb0:	20000c78 	.word	0x20000c78

08005fb4 <usart_peek>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8005fb4:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <usart_peek+0x1c>)
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
	buffer_clear(&txring[USART_3]);
}

uint16_t usart_peek(USART_TypeDef * uport) {
	if ( ! buffer_count(&rxring[USART_3]) == 0 )
 8005fb6:	f8b3 2310 	ldrh.w	r2, [r3, #784]	; 0x310
 8005fba:	b132      	cbz	r2, 8005fca <usart_peek+0x16>
		return rxring[USART_3].buf[rxring[USART_3].tail];
 8005fbc:	f9b3 230e 	ldrsh.w	r2, [r3, #782]	; 0x30e
 8005fc0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005fc4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8005fc8:	4770      	bx	lr
	return 0xffff;
 8005fca:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8005fce:	4770      	bx	lr
 8005fd0:	20000d7e 	.word	0x20000d7e

08005fd4 <usart_available>:

uint16_t usart_available(USART_TypeDef * uport) {
	return buffer_count(&rxring[USART_3]);
}
 8005fd4:	4b01      	ldr	r3, [pc, #4]	; (8005fdc <usart_available+0x8>)
 8005fd6:	f8b3 0310 	ldrh.w	r0, [r3, #784]	; 0x310
 8005fda:	4770      	bx	lr
 8005fdc:	20000d7e 	.word	0x20000d7e

08005fe0 <USART3_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART3_IRQHandler(void) {
 8005fe0:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8005fe2:	4817      	ldr	r0, [pc, #92]	; (8006040 <USART3_IRQHandler+0x60>)
 8005fe4:	f240 5125 	movw	r1, #1317	; 0x525
 8005fe8:	f7ff fc47 	bl	800587a <USART_GetITStatus>
 8005fec:	b130      	cbz	r0, 8005ffc <USART3_IRQHandler+0x1c>
		buffer_enque(&rxring[USART_3], USART_ReceiveData(USART3) );
 8005fee:	4814      	ldr	r0, [pc, #80]	; (8006040 <USART3_IRQHandler+0x60>)
 8005ff0:	f7ff fb90 	bl	8005714 <USART_ReceiveData>
 8005ff4:	4601      	mov	r1, r0
 8005ff6:	4813      	ldr	r0, [pc, #76]	; (8006044 <USART3_IRQHandler+0x64>)
 8005ff8:	f7ff fe7d 	bl	8005cf6 <buffer_enque>
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8005ffc:	4810      	ldr	r0, [pc, #64]	; (8006040 <USART3_IRQHandler+0x60>)
 8005ffe:	f240 7127 	movw	r1, #1831	; 0x727
 8006002:	f7ff fc3a 	bl	800587a <USART_GetITStatus>
 8006006:	2800      	cmp	r0, #0
 8006008:	d019      	beq.n	800603e <USART3_IRQHandler+0x5e>
		if (txring[USART_3].count == 0) {
 800600a:	480f      	ldr	r0, [pc, #60]	; (8006048 <USART3_IRQHandler+0x68>)
 800600c:	f8b0 2310 	ldrh.w	r2, [r0, #784]	; 0x310
 8006010:	b95a      	cbnz	r2, 800602a <USART3_IRQHandler+0x4a>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8006012:	480b      	ldr	r0, [pc, #44]	; (8006040 <USART3_IRQHandler+0x60>)
 8006014:	f240 7127 	movw	r1, #1831	; 0x727
 8006018:	f7ff fc0c 	bl	8005834 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 800601c:	4808      	ldr	r0, [pc, #32]	; (8006040 <USART3_IRQHandler+0x60>)
 800601e:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART_3]));
		}
	}
}
 8006022:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART_3].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8006026:	f7ff bc47 	b.w	80058b8 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART_3]));
 800602a:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 800602e:	f7ff fe85 	bl	8005d3c <buffer_deque>
 8006032:	4601      	mov	r1, r0
 8006034:	4802      	ldr	r0, [pc, #8]	; (8006040 <USART3_IRQHandler+0x60>)
		}
	}
}
 8006036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART_3].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART_3]));
 800603a:	f7ff bb67 	b.w	800570c <USART_SendData>
 800603e:	bd08      	pop	{r3, pc}
 8006040:	40004800 	.word	0x40004800
 8006044:	20000f8a 	.word	0x20000f8a
 8006048:	20000a6c 	.word	0x20000a6c

0800604c <ST7032i_command>:
/**
 * @brief  Write Command to ST7032i
 * @param  Data : Command Data
 * @retval None
 */
void ST7032i_command(uint8_t d) {
 800604c:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[2];
	data[0] = 0;
 800604e:	2300      	movs	r3, #0
 8006050:	f88d 3004 	strb.w	r3, [sp, #4]
	data[1] = d;
 8006054:	f88d 0005 	strb.w	r0, [sp, #5]
	i2c_transmit(I2C1, ST7032I_ADDR, data, 2);
 8006058:	213e      	movs	r1, #62	; 0x3e
 800605a:	4803      	ldr	r0, [pc, #12]	; (8006068 <ST7032i_command+0x1c>)
 800605c:	aa01      	add	r2, sp, #4
 800605e:	2302      	movs	r3, #2
 8006060:	f7ff fdc6 	bl	8005bf0 <i2c_transmit>
}
 8006064:	bd0e      	pop	{r1, r2, r3, pc}
 8006066:	bf00      	nop
 8006068:	40005400 	.word	0x40005400

0800606c <ST7032i_data>:
/**
 * @brief  Write Data to ST7032i
 * @param  Data : "Data" Data
 * @retval None
 */
void ST7032i_data(uint8_t data) {
 800606c:	b507      	push	{r0, r1, r2, lr}
	uint8_t t[2];
	t[0] = 0x40 ; //0b01000000;
 800606e:	2340      	movs	r3, #64	; 0x40
 8006070:	f88d 3004 	strb.w	r3, [sp, #4]
	t[1] = data;
 8006074:	f88d 0005 	strb.w	r0, [sp, #5]
	i2c_transmit(I2C1, ST7032I_ADDR, t, 2);
 8006078:	213e      	movs	r1, #62	; 0x3e
 800607a:	4803      	ldr	r0, [pc, #12]	; (8006088 <ST7032i_data+0x1c>)
 800607c:	aa01      	add	r2, sp, #4
 800607e:	2302      	movs	r3, #2
 8006080:	f7ff fdb6 	bl	8005bf0 <i2c_transmit>
}
 8006084:	bd0e      	pop	{r1, r2, r3, pc}
 8006086:	bf00      	nop
 8006088:	40005400 	.word	0x40005400

0800608c <ST7032i_print>:

void ST7032i_print(char * str) {
 800608c:	b510      	push	{r4, lr}
 800608e:	4604      	mov	r4, r0
	while (*str)
 8006090:	e001      	b.n	8006096 <ST7032i_print+0xa>
		ST7032i_data(*str++);
 8006092:	f7ff ffeb 	bl	800606c <ST7032i_data>
	t[1] = data;
	i2c_transmit(I2C1, ST7032I_ADDR, t, 2);
}

void ST7032i_print(char * str) {
	while (*str)
 8006096:	f814 0b01 	ldrb.w	r0, [r4], #1
 800609a:	2800      	cmp	r0, #0
 800609c:	d1f9      	bne.n	8006092 <ST7032i_print+0x6>
		ST7032i_data(*str++);
}
 800609e:	bd10      	pop	{r4, pc}

080060a0 <_close>:
	}
}

int _close(int file) {
	return -1;
}
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060a4:	4770      	bx	lr

080060a6 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 80060a6:	4b03      	ldr	r3, [pc, #12]	; (80060b4 <_execve+0xe>)
 80060a8:	220c      	movs	r2, #12
 80060aa:	601a      	str	r2, [r3, #0]
	return -1;
}
 80060ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	200010c0 	.word	0x200010c0

080060b8 <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 80060b8:	4b02      	ldr	r3, [pc, #8]	; (80060c4 <_fork+0xc>)
 80060ba:	220b      	movs	r2, #11
 80060bc:	601a      	str	r2, [r3, #0]
	return -1;
}
 80060be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060c2:	4770      	bx	lr
 80060c4:	200010c0 	.word	0x200010c0

080060c8 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 80060c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060cc:	604b      	str	r3, [r1, #4]
	return 0;
}
 80060ce:	2000      	movs	r0, #0
 80060d0:	4770      	bx	lr

080060d2 <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 80060d2:	2001      	movs	r0, #1
 80060d4:	4770      	bx	lr

080060d6 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 80060d6:	2802      	cmp	r0, #2
 80060d8:	d904      	bls.n	80060e4 <_isatty+0xe>
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 80060da:	4b03      	ldr	r3, [pc, #12]	; (80060e8 <_isatty+0x12>)
 80060dc:	2209      	movs	r2, #9
 80060de:	601a      	str	r2, [r3, #0]
		return 0;
 80060e0:	2000      	movs	r0, #0
 80060e2:	4770      	bx	lr
int _isatty(int file) {
	switch (file) {
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 80060e4:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 80060e6:	4770      	bx	lr
 80060e8:	200010c0 	.word	0x200010c0

080060ec <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 80060ec:	4b02      	ldr	r3, [pc, #8]	; (80060f8 <_kill+0xc>)
 80060ee:	2216      	movs	r2, #22
 80060f0:	601a      	str	r2, [r3, #0]
	return (-1);
}
 80060f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060f6:	4770      	bx	lr
 80060f8:	200010c0 	.word	0x200010c0

080060fc <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 80060fc:	4b02      	ldr	r3, [pc, #8]	; (8006108 <_link+0xc>)
 80060fe:	221f      	movs	r2, #31
 8006100:	601a      	str	r2, [r3, #0]
	return -1;
}
 8006102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006106:	4770      	bx	lr
 8006108:	200010c0 	.word	0x200010c0

0800610c <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 800610c:	2000      	movs	r0, #0
 800610e:	4770      	bx	lr

08006110 <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8006110:	b530      	push	{r4, r5, lr}
	int n;
	int num = 0;
	switch (file) {
 8006112:	b138      	cbz	r0, 8006124 <_read+0x14>
 8006114:	e00d      	b.n	8006132 <_read+0x22>
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8006116:	881d      	ldrh	r5, [r3, #0]
 8006118:	06ad      	lsls	r5, r5, #26
 800611a:	d5fc      	bpl.n	8006116 <_read+0x6>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 800611c:	88a5      	ldrh	r5, [r4, #4]
 800611e:	540d      	strb	r5, [r1, r0]
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8006120:	3001      	adds	r0, #1
 8006122:	e001      	b.n	8006128 <_read+0x18>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8006124:	4b06      	ldr	r3, [pc, #24]	; (8006140 <_read+0x30>)
 8006126:	461c      	mov	r4, r3
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8006128:	4290      	cmp	r0, r2
 800612a:	dbf4      	blt.n	8006116 <_read+0x6>
 800612c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006130:	bd30      	pop	{r4, r5, pc}
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 8006132:	4b04      	ldr	r3, [pc, #16]	; (8006144 <_read+0x34>)
 8006134:	2209      	movs	r2, #9
 8006136:	601a      	str	r2, [r3, #0]
				return -1;
 8006138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 800613c:	bd30      	pop	{r4, r5, pc}
 800613e:	bf00      	nop
 8006140:	40011000 	.word	0x40011000
 8006144:	200010c0 	.word	0x200010c0

08006148 <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 8006148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800614c:	604b      	str	r3, [r1, #4]
	return 0;
}
 800614e:	2000      	movs	r0, #0
 8006150:	4770      	bx	lr

08006152 <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8006152:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006156:	4770      	bx	lr

08006158 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8006158:	4b02      	ldr	r3, [pc, #8]	; (8006164 <_unlink+0xc>)
 800615a:	2202      	movs	r2, #2
 800615c:	601a      	str	r2, [r3, #0]
	return -1;
}
 800615e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006162:	4770      	bx	lr
 8006164:	200010c0 	.word	0x200010c0

08006168 <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 8006168:	4b02      	ldr	r3, [pc, #8]	; (8006174 <_wait+0xc>)
 800616a:	220a      	movs	r2, #10
 800616c:	601a      	str	r2, [r3, #0]
	return -1;
}
 800616e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006172:	4770      	bx	lr
 8006174:	200010c0 	.word	0x200010c0

08006178 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8006178:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 800617a:	b530      	push	{r4, r5, lr}
	int n;
	switch (file) {
 800617c:	d009      	beq.n	8006192 <_write+0x1a>
 800617e:	2802      	cmp	r0, #2
 8006180:	d11a      	bne.n	80061b8 <_write+0x40>
 8006182:	e013      	b.n	80061ac <_write+0x34>
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8006184:	8805      	ldrh	r5, [r0, #0]
 8006186:	066d      	lsls	r5, r5, #25
 8006188:	d5fc      	bpl.n	8006184 <_write+0xc>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 800618a:	5ccd      	ldrb	r5, [r1, r3]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 800618c:	3301      	adds	r3, #1
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 800618e:	80a5      	strh	r5, [r4, #4]
 8006190:	e002      	b.n	8006198 <_write+0x20>
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8006192:	480d      	ldr	r0, [pc, #52]	; (80061c8 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8006194:	2300      	movs	r3, #0
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8006196:	4604      	mov	r4, r0
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8006198:	4293      	cmp	r3, r2
 800619a:	dbf3      	blt.n	8006184 <_write+0xc>
 800619c:	e011      	b.n	80061c2 <_write+0x4a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 800619e:	8805      	ldrh	r5, [r0, #0]
 80061a0:	066d      	lsls	r5, r5, #25
 80061a2:	d5fc      	bpl.n	800619e <_write+0x26>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 80061a4:	5ccd      	ldrb	r5, [r1, r3]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 80061a6:	3301      	adds	r3, #1
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 80061a8:	80a5      	strh	r5, [r4, #4]
 80061aa:	e002      	b.n	80061b2 <_write+0x3a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80061ac:	4806      	ldr	r0, [pc, #24]	; (80061c8 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 80061ae:	2300      	movs	r3, #0
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80061b0:	4604      	mov	r4, r0
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 80061b2:	4293      	cmp	r3, r2
 80061b4:	dbf3      	blt.n	800619e <_write+0x26>
 80061b6:	e004      	b.n	80061c2 <_write+0x4a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 80061b8:	4b04      	ldr	r3, [pc, #16]	; (80061cc <_write+0x54>)
 80061ba:	2209      	movs	r2, #9
 80061bc:	601a      	str	r2, [r3, #0]
				return -1;
 80061be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 80061c2:	4610      	mov	r0, r2
 80061c4:	bd30      	pop	{r4, r5, pc}
 80061c6:	bf00      	nop
 80061c8:	40011000 	.word	0x40011000
 80061cc:	200010c0 	.word	0x200010c0

080061d0 <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 80061d0:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 80061d2:	4b0d      	ldr	r3, [pc, #52]	; (8006208 <_sbrk+0x38>)
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	b90a      	cbnz	r2, 80061dc <_sbrk+0xc>
		heap_end = &_ebss;
 80061d8:	4a0c      	ldr	r2, [pc, #48]	; (800620c <_sbrk+0x3c>)
 80061da:	601a      	str	r2, [r3, #0]
	}
	prev_heap_end = heap_end;
 80061dc:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 80061de:	f3ef 8208 	mrs	r2, MSP

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 80061e2:	1818      	adds	r0, r3, r0
 80061e4:	4290      	cmp	r0, r2
 80061e6:	d90a      	bls.n	80061fe <_sbrk+0x2e>
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 80061e8:	2219      	movs	r2, #25
 80061ea:	2002      	movs	r0, #2
 80061ec:	4908      	ldr	r1, [pc, #32]	; (8006210 <_sbrk+0x40>)
 80061ee:	f7ff ffc3 	bl	8006178 <_write>
		errno = ENOMEM;
 80061f2:	4b08      	ldr	r3, [pc, #32]	; (8006214 <_sbrk+0x44>)
 80061f4:	220c      	movs	r2, #12
 80061f6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80061f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061fc:	e001      	b.n	8006202 <_sbrk+0x32>
		//abort ();
	}

	heap_end += incr;
 80061fe:	4a02      	ldr	r2, [pc, #8]	; (8006208 <_sbrk+0x38>)
 8006200:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap_end;

}
 8006202:	4618      	mov	r0, r3
 8006204:	bd08      	pop	{r3, pc}
 8006206:	bf00      	nop
 8006208:	20000a1c 	.word	0x20000a1c
 800620c:	200010c4 	.word	0x200010c4
 8006210:	0800bdde 	.word	0x0800bdde
 8006214:	200010c0 	.word	0x200010c0

08006218 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8006218:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 800621a:	2001      	movs	r0, #1
 800621c:	4902      	ldr	r1, [pc, #8]	; (8006228 <_exit+0x10>)
 800621e:	2204      	movs	r2, #4
 8006220:	f7ff ffaa 	bl	8006178 <_write>
 8006224:	e7fe      	b.n	8006224 <_exit+0xc>
 8006226:	bf00      	nop
 8006228:	0800bdf8 	.word	0x0800bdf8

0800622c <I2C_Configuration>:
  * @brief  I2C Configuration
  * @param  None
  * @retval None
  */
void I2C_Configuration(void)
{
 800622c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  I2C_InitTypeDef  I2C_InitStructure;

  /* I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 800622e:	2101      	movs	r1, #1
  * @brief  I2C Configuration
  * @param  None
  * @retval None
  */
void I2C_Configuration(void)
{
 8006230:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStructure;
  I2C_InitTypeDef  I2C_InitStructure;

  /* I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8006232:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006236:	f7fd faa1 	bl	800377c <RCC_APB1PeriphClockCmd>
  /* GPIO Periph clock enable */
  RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
 800623a:	2002      	movs	r0, #2
 800623c:	2101      	movs	r1, #1
 800623e:	f7fd faa9 	bl	8003794 <RCC_APB2PeriphClockCmd>

  /* Configure I2C pins: SCL and SDA */
  GPIO_InitStructure.GPIO_Pin =  I2C1_SCL_PIN | I2C1_SDA_PIN;
 8006242:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006246:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init(I2C1_PORT, &GPIO_InitStructure);
 8006248:	a904      	add	r1, sp, #16
  /* GPIO Periph clock enable */
  RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);

  /* Configure I2C pins: SCL and SDA */
  GPIO_InitStructure.GPIO_Pin =  I2C1_SCL_PIN | I2C1_SDA_PIN;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800624a:	2302      	movs	r3, #2
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init(I2C1_PORT, &GPIO_InitStructure);
 800624c:	4812      	ldr	r0, [pc, #72]	; (8006298 <I2C_Configuration+0x6c>)
  /* GPIO Periph clock enable */
  RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);

  /* Configure I2C pins: SCL and SDA */
  GPIO_InitStructure.GPIO_Pin =  I2C1_SCL_PIN | I2C1_SDA_PIN;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800624e:	f88d 3015 	strb.w	r3, [sp, #21]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006252:	f88d 3014 	strb.w	r3, [sp, #20]
  GPIO_Init(I2C1_PORT, &GPIO_InitStructure);
 8006256:	f7fc fb63 	bl	8002920 <GPIO_Init>
#if defined (REMAP_I2C1)
Remap_I2C1_Configuration();
#endif

  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800625a:	2300      	movs	r3, #0
 800625c:	f8ad 3004 	strh.w	r3, [sp, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8006260:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8006264:	f8ad 3006 	strh.w	r3, [sp, #6]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8006268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800626c:	f8ad 300a 	strh.w	r3, [sp, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
  I2C_InitStructure.I2C_ClockSpeed = I2C_CLOCK;

  /* I2C Peripheral Enable */
  I2C_Cmd(I2C1, ENABLE);
 8006270:	4d0a      	ldr	r5, [pc, #40]	; (800629c <I2C_Configuration+0x70>)

  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8006272:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006276:	f8ad 300c 	strh.w	r3, [sp, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_CLOCK;
 800627a:	ac06      	add	r4, sp, #24
 800627c:	4b08      	ldr	r3, [pc, #32]	; (80062a0 <I2C_Configuration+0x74>)

  /* I2C Peripheral Enable */
  I2C_Cmd(I2C1, ENABLE);
 800627e:	4628      	mov	r0, r5
 8006280:	2101      	movs	r1, #1
  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
  I2C_InitStructure.I2C_ClockSpeed = I2C_CLOCK;
 8006282:	f844 3d18 	str.w	r3, [r4, #-24]!

  /* I2C Peripheral Enable */
  I2C_Cmd(I2C1, ENABLE);
 8006286:	f7fc ff39 	bl	80030fc <I2C_Cmd>
  /* Apply I2C configuration after enabling it */
  I2C_Init(I2C1, &I2C_InitStructure);
 800628a:	4628      	mov	r0, r5
 800628c:	4669      	mov	r1, sp
 800628e:	f7fc fec1 	bl	8003014 <I2C_Init>
}
 8006292:	b007      	add	sp, #28
 8006294:	bd30      	pop	{r4, r5, pc}
 8006296:	bf00      	nop
 8006298:	40020400 	.word	0x40020400
 800629c:	40005400 	.word	0x40005400
 80062a0:	000186a0 	.word	0x000186a0

080062a4 <ST7032i_Command_Write>:
  * @brief  Write Command to ST7032i
  * @param  Data : Command Data
  * @retval None
  */
void ST7032i_Command_Write(uint8_t Data)
{
 80062a4:	b510      	push	{r4, lr}

  /* Send STRAT condition */
  I2C_GenerateSTART(I2C1, ENABLE);
 80062a6:	2101      	movs	r1, #1
  * @brief  Write Command to ST7032i
  * @param  Data : Command Data
  * @retval None
  */
void ST7032i_Command_Write(uint8_t Data)
{
 80062a8:	4604      	mov	r4, r0

  /* Send STRAT condition */
  I2C_GenerateSTART(I2C1, ENABLE);
 80062aa:	4817      	ldr	r0, [pc, #92]	; (8006308 <ST7032i_Command_Write+0x64>)
 80062ac:	f7fc ff32 	bl	8003114 <I2C_GenerateSTART>
  /* Test on EV5 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 80062b0:	4815      	ldr	r0, [pc, #84]	; (8006308 <ST7032i_Command_Write+0x64>)
 80062b2:	4916      	ldr	r1, [pc, #88]	; (800630c <ST7032i_Command_Write+0x68>)
 80062b4:	f7fd f825 	bl	8003302 <I2C_CheckEvent>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d0f9      	beq.n	80062b0 <ST7032i_Command_Write+0xc>
  /* Send EEPROM address for write */
  I2C_Send7bitAddress(I2C1, ST7032I_ADDR << 1, I2C_Direction_Transmitter);
 80062bc:	4812      	ldr	r0, [pc, #72]	; (8006308 <ST7032i_Command_Write+0x64>)
 80062be:	217c      	movs	r1, #124	; 0x7c
 80062c0:	2200      	movs	r2, #0
 80062c2:	f7fc ff3f 	bl	8003144 <I2C_Send7bitAddress>
  /* Test on EV6 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 80062c6:	4810      	ldr	r0, [pc, #64]	; (8006308 <ST7032i_Command_Write+0x64>)
 80062c8:	4911      	ldr	r1, [pc, #68]	; (8006310 <ST7032i_Command_Write+0x6c>)
 80062ca:	f7fd f81a 	bl	8003302 <I2C_CheckEvent>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d0f9      	beq.n	80062c6 <ST7032i_Command_Write+0x22>
  /* Send the EEPROM's internal address to write to : MSB of the address first */
  I2C_SendData(I2C1, 0b00000000);
 80062d2:	480d      	ldr	r0, [pc, #52]	; (8006308 <ST7032i_Command_Write+0x64>)
 80062d4:	2100      	movs	r1, #0
 80062d6:	f7fc ffb8 	bl	800324a <I2C_SendData>
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80062da:	480b      	ldr	r0, [pc, #44]	; (8006308 <ST7032i_Command_Write+0x64>)
 80062dc:	490d      	ldr	r1, [pc, #52]	; (8006314 <ST7032i_Command_Write+0x70>)
 80062de:	f7fd f810 	bl	8003302 <I2C_CheckEvent>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d0f9      	beq.n	80062da <ST7032i_Command_Write+0x36>
  /* Send the EEPROM's internal address to write to : MSB of the address first */
  I2C_SendData(I2C1, Data);
 80062e6:	4808      	ldr	r0, [pc, #32]	; (8006308 <ST7032i_Command_Write+0x64>)
 80062e8:	4621      	mov	r1, r4
 80062ea:	f7fc ffae 	bl	800324a <I2C_SendData>
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80062ee:	4806      	ldr	r0, [pc, #24]	; (8006308 <ST7032i_Command_Write+0x64>)
 80062f0:	4908      	ldr	r1, [pc, #32]	; (8006314 <ST7032i_Command_Write+0x70>)
 80062f2:	f7fd f806 	bl	8003302 <I2C_CheckEvent>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d0f9      	beq.n	80062ee <ST7032i_Command_Write+0x4a>
  /* Send STOP condition */
  I2C_GenerateSTOP(I2C1, ENABLE);
 80062fa:	4803      	ldr	r0, [pc, #12]	; (8006308 <ST7032i_Command_Write+0x64>)
 80062fc:	2101      	movs	r1, #1
}
 80062fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Send the EEPROM's internal address to write to : MSB of the address first */
  I2C_SendData(I2C1, Data);
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
  /* Send STOP condition */
  I2C_GenerateSTOP(I2C1, ENABLE);
 8006302:	f7fc bf13 	b.w	800312c <I2C_GenerateSTOP>
 8006306:	bf00      	nop
 8006308:	40005400 	.word	0x40005400
 800630c:	00030001 	.word	0x00030001
 8006310:	00070082 	.word	0x00070082
 8006314:	00070084 	.word	0x00070084

08006318 <ST7032i_Icon_Off>:
  * @brief  Put off icon whili Icon RAM is kept
  * @param  None
  * @retval None
  */
void ST7032i_Icon_Off(void)
{
 8006318:	b508      	push	{r3, lr}
  //Power/Icon/Contrast control
  ST7032i_Command_Write( (Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 )) & 0b11110111);
 800631a:	4b07      	ldr	r3, [pc, #28]	; (8006338 <ST7032i_Icon_Off+0x20>)
 800631c:	781a      	ldrb	r2, [r3, #0]
 800631e:	7858      	ldrb	r0, [r3, #1]
 8006320:	f3c0 1001 	ubfx	r0, r0, #4, #2
 8006324:	4310      	orrs	r0, r2
 8006326:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 800632a:	f7ff ffbb 	bl	80062a4 <ST7032i_Command_Write>
  delay_us(27);
 800632e:	201b      	movs	r0, #27
}
 8006330:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Icon_Off(void)
{
  //Power/Icon/Contrast control
  ST7032i_Command_Write( (Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 )) & 0b11110111);
  delay_us(27);
 8006334:	f7ff bb16 	b.w	8005964 <delay_us>
 8006338:	20000128 	.word	0x20000128

0800633c <ST7032i_Icon_On>:
  * @brief  Display icon
  * @param  None
  * @retval None
  */
void ST7032i_Icon_On(void)
{
 800633c:	b508      	push	{r3, lr}
  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 ) | 0b00001000 );
 800633e:	4b07      	ldr	r3, [pc, #28]	; (800635c <ST7032i_Icon_On+0x20>)
 8006340:	7818      	ldrb	r0, [r3, #0]
 8006342:	785b      	ldrb	r3, [r3, #1]
 8006344:	f040 0008 	orr.w	r0, r0, #8
 8006348:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800634c:	4318      	orrs	r0, r3
 800634e:	f7ff ffa9 	bl	80062a4 <ST7032i_Command_Write>
  delay_us(27);
 8006352:	201b      	movs	r0, #27
}
 8006354:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Icon_On(void)
{
  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 ) | 0b00001000 );
  delay_us(27);
 8006358:	f7ff bb04 	b.w	8005964 <delay_us>
 800635c:	20000128 	.word	0x20000128

08006360 <ST7032i_Set_Contrast>:
  * @brief  Set display contrast. value is to be 0 - 63
  * @param  contrast: contrast
  * @retval None
  */
void ST7032i_Set_Contrast(uint8_t contrast)
{
 8006360:	b510      	push	{r4, lr}
 8006362:	4604      	mov	r4, r0
  //Contrast set
  ST7032i_Command_Write(0b01110000 | (contrast & 0b00001111));
 8006364:	f000 000f 	and.w	r0, r0, #15
 8006368:	f040 0070 	orr.w	r0, r0, #112	; 0x70
 800636c:	f7ff ff9a 	bl	80062a4 <ST7032i_Command_Write>

  delay_us(27);
 8006370:	201b      	movs	r0, #27
 8006372:	f7ff faf7 	bl	8005964 <delay_us>

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (contrast >> 4) & 0b00000011 ) );
 8006376:	4b06      	ldr	r3, [pc, #24]	; (8006390 <ST7032i_Set_Contrast+0x30>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	f3c4 1001 	ubfx	r0, r4, #4, #2
 800637e:	4318      	orrs	r0, r3
 8006380:	f7ff ff90 	bl	80062a4 <ST7032i_Command_Write>

  delay_us(27);
 8006384:	201b      	movs	r0, #27
}
 8006386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_us(27);

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (contrast >> 4) & 0b00000011 ) );

  delay_us(27);
 800638a:	f7ff baeb 	b.w	8005964 <delay_us>
 800638e:	bf00      	nop
 8006390:	20000128 	.word	0x20000128

08006394 <ST7032i_Set_DDRAM>:
  * @brief  set DDRAM address
  * @param  address : DDRAM address
  * @retval None
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
 8006394:	b510      	push	{r4, lr}
 8006396:	4604      	mov	r4, r0
  ST7032i_Command_Write(0b10000000 | address);
 8006398:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800639c:	f7ff ff82 	bl	80062a4 <ST7032i_Command_Write>
  DDRAM_Address = address;
 80063a0:	4b03      	ldr	r3, [pc, #12]	; (80063b0 <ST7032i_Set_DDRAM+0x1c>)
  delay_us(27);
 80063a2:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
  ST7032i_Command_Write(0b10000000 | address);
  DDRAM_Address = address;
 80063a4:	701c      	strb	r4, [r3, #0]
  delay_us(27);
}
 80063a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
  ST7032i_Command_Write(0b10000000 | address);
  DDRAM_Address = address;
  delay_us(27);
 80063aa:	f7ff badb 	b.w	8005964 <delay_us>
 80063ae:	bf00      	nop
 80063b0:	20000a24 	.word	0x20000a24

080063b4 <ST7032i_Cursor_Blink_Off>:
  * @brief  display square cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Blink_Off(void)
{
 80063b4:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000000);
 80063b6:	4b05      	ldr	r3, [pc, #20]	; (80063cc <ST7032i_Cursor_Blink_Off+0x18>)
 80063b8:	7898      	ldrb	r0, [r3, #2]
 80063ba:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 80063be:	f7ff ff71 	bl	80062a4 <ST7032i_Command_Write>
  delay_us(27);
 80063c2:	201b      	movs	r0, #27
}
 80063c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Blink_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000000);
  delay_us(27);
 80063c8:	f7ff bacc 	b.w	8005964 <delay_us>
 80063cc:	20000128 	.word	0x20000128

080063d0 <ST7032i_Cursor_Blink_On>:
  * @brief  make square cursor brink
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Blink_On(void)
{
 80063d0:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000001);
 80063d2:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <ST7032i_Cursor_Blink_On+0x18>)
 80063d4:	7898      	ldrb	r0, [r3, #2]
 80063d6:	f040 0001 	orr.w	r0, r0, #1
 80063da:	f7ff ff63 	bl	80062a4 <ST7032i_Command_Write>
  delay_us(27);
 80063de:	201b      	movs	r0, #27
}
 80063e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Blink_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000001);
  delay_us(27);
 80063e4:	f7ff babe 	b.w	8005964 <delay_us>
 80063e8:	20000128 	.word	0x20000128

080063ec <ST7032i_Cursor_Off>:
  * @brief  put off cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Off(void)
{
 80063ec:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000000);
 80063ee:	4b05      	ldr	r3, [pc, #20]	; (8006404 <ST7032i_Cursor_Off+0x18>)
 80063f0:	7898      	ldrb	r0, [r3, #2]
 80063f2:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 80063f6:	f7ff ff55 	bl	80062a4 <ST7032i_Command_Write>
  delay_us(27);
 80063fa:	201b      	movs	r0, #27
}
 80063fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000000);
  delay_us(27);
 8006400:	f7ff bab0 	b.w	8005964 <delay_us>
 8006404:	20000128 	.word	0x20000128

08006408 <ST7032i_Cursor_On>:
  * @brief  display under line cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_On(void)
{
 8006408:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000010);
 800640a:	4b05      	ldr	r3, [pc, #20]	; (8006420 <ST7032i_Cursor_On+0x18>)
 800640c:	7898      	ldrb	r0, [r3, #2]
 800640e:	f040 0002 	orr.w	r0, r0, #2
 8006412:	f7ff ff47 	bl	80062a4 <ST7032i_Command_Write>
  delay_us(27);
 8006416:	201b      	movs	r0, #27
}
 8006418:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000010);
  delay_us(27);
 800641c:	f7ff baa2 	b.w	8005964 <delay_us>
 8006420:	20000128 	.word	0x20000128

08006424 <ST7032i_Display_Off>:
  * @brief  put off display while DDRAM is kept
  * @param  None
  * @retval None
  */
void ST7032i_Display_Off(void)
{
 8006424:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000000);
 8006426:	4b05      	ldr	r3, [pc, #20]	; (800643c <ST7032i_Display_Off+0x18>)
 8006428:	7898      	ldrb	r0, [r3, #2]
 800642a:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
 800642e:	f7ff ff39 	bl	80062a4 <ST7032i_Command_Write>
  delay_us(27);
 8006432:	201b      	movs	r0, #27
}
 8006434:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Display_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000000);
  delay_us(27);
 8006438:	f7ff ba94 	b.w	8005964 <delay_us>
 800643c:	20000128 	.word	0x20000128

08006440 <ST7032i_Display_On>:
  * @brief  put on display
  * @param  None
  * @retval None
  */
void ST7032i_Display_On(void)
{
 8006440:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000100);
 8006442:	4b05      	ldr	r3, [pc, #20]	; (8006458 <ST7032i_Display_On+0x18>)
 8006444:	7898      	ldrb	r0, [r3, #2]
 8006446:	f040 0004 	orr.w	r0, r0, #4
 800644a:	f7ff ff2b 	bl	80062a4 <ST7032i_Command_Write>
  delay_us(27);
 800644e:	201b      	movs	r0, #27
}
 8006450:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Display_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000100);
  delay_us(27);
 8006454:	f7ff ba86 	b.w	8005964 <delay_us>
 8006458:	20000128 	.word	0x20000128

0800645c <ST7032i_Shift_Disable>:
  * @brief  disables shift fucntion
  * @param  None
  * @retval None
  */
void ST7032i_Shift_Disable(void)
{
 800645c:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
 800645e:	4b07      	ldr	r3, [pc, #28]	; (800647c <ST7032i_Shift_Disable+0x20>)
 8006460:	78d8      	ldrb	r0, [r3, #3]
 8006462:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8006466:	f7ff ff1d 	bl	80062a4 <ST7032i_Command_Write>
  Shift = 0;
 800646a:	4b05      	ldr	r3, [pc, #20]	; (8006480 <ST7032i_Shift_Disable+0x24>)
 800646c:	2200      	movs	r2, #0
  delay_us(27);
 800646e:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Shift_Disable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
  Shift = 0;
 8006470:	705a      	strb	r2, [r3, #1]
  delay_us(27);
}
 8006472:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Shift_Disable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
  Shift = 0;
  delay_us(27);
 8006476:	f7ff ba75 	b.w	8005964 <delay_us>
 800647a:	bf00      	nop
 800647c:	20000128 	.word	0x20000128
 8006480:	20000a24 	.word	0x20000a24

08006484 <ST7032i_Shift_Enable>:
  * @brief  shift entire display data is send
  * @param  None
  * @retval None
  */
void ST7032i_Shift_Enable(void)
{
 8006484:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
 8006486:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <ST7032i_Shift_Enable+0x20>)
 8006488:	78d8      	ldrb	r0, [r3, #3]
 800648a:	f040 0001 	orr.w	r0, r0, #1
 800648e:	f7ff ff09 	bl	80062a4 <ST7032i_Command_Write>
  Shift = 1;
 8006492:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <ST7032i_Shift_Enable+0x24>)
 8006494:	2201      	movs	r2, #1
  delay_us(27);
 8006496:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Shift_Enable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
  Shift = 1;
 8006498:	705a      	strb	r2, [r3, #1]
  delay_us(27);
}
 800649a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Shift_Enable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
  Shift = 1;
  delay_us(27);
 800649e:	f7ff ba61 	b.w	8005964 <delay_us>
 80064a2:	bf00      	nop
 80064a4:	20000128 	.word	0x20000128
 80064a8:	20000a24 	.word	0x20000a24

080064ac <ST7032i_Decrement>:
  * @brief  decrement address when data is send and put
  * @param  None
  * @retval None
  */
void ST7032i_Decrement(void)
{
 80064ac:	b510      	push	{r4, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
 80064ae:	4c06      	ldr	r4, [pc, #24]	; (80064c8 <ST7032i_Decrement+0x1c>)
 80064b0:	78e0      	ldrb	r0, [r4, #3]
 80064b2:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 80064b6:	f7ff fef5 	bl	80062a4 <ST7032i_Command_Write>
  Increment = -1;
 80064ba:	23ff      	movs	r3, #255	; 0xff
  delay_us(27);
 80064bc:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Decrement(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
  Increment = -1;
 80064be:	7123      	strb	r3, [r4, #4]
  delay_us(27);
}
 80064c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Decrement(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
  Increment = -1;
  delay_us(27);
 80064c4:	f7ff ba4e 	b.w	8005964 <delay_us>
 80064c8:	20000128 	.word	0x20000128

080064cc <ST7032i_Increment>:
  * @brief  increment address when data is send and put
  * @param  None
  * @retval None
  */
void ST7032i_Increment(void)
{
 80064cc:	b510      	push	{r4, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
 80064ce:	4c06      	ldr	r4, [pc, #24]	; (80064e8 <ST7032i_Increment+0x1c>)
 80064d0:	78e0      	ldrb	r0, [r4, #3]
 80064d2:	f040 0002 	orr.w	r0, r0, #2
 80064d6:	f7ff fee5 	bl	80062a4 <ST7032i_Command_Write>
  Increment = 1;
 80064da:	2301      	movs	r3, #1
  delay_us(27);
 80064dc:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Increment(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
  Increment = 1;
 80064de:	7123      	strb	r3, [r4, #4]
  delay_us(27);
}
 80064e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Increment(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
  Increment = 1;
  delay_us(27);
 80064e4:	f7ff ba3e 	b.w	8005964 <delay_us>
 80064e8:	20000128 	.word	0x20000128

080064ec <ST7032i_Return>:
  * @brief  Return to home position
  * @param  None
  * @retval None
  */
void ST7032i_Return(void)
{
 80064ec:	b508      	push	{r3, lr}
  ST7032i_Command_Write(0b00000010);
 80064ee:	2002      	movs	r0, #2
 80064f0:	f7ff fed8 	bl	80062a4 <ST7032i_Command_Write>
  DDRAM_Address = 0;
 80064f4:	4b03      	ldr	r3, [pc, #12]	; (8006504 <ST7032i_Return+0x18>)
 80064f6:	2200      	movs	r2, #0
  delay_ms(2);
 80064f8:	2002      	movs	r0, #2
  * @retval None
  */
void ST7032i_Return(void)
{
  ST7032i_Command_Write(0b00000010);
  DDRAM_Address = 0;
 80064fa:	701a      	strb	r2, [r3, #0]
  delay_ms(2);
}
 80064fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Return(void)
{
  ST7032i_Command_Write(0b00000010);
  DDRAM_Address = 0;
  delay_ms(2);
 8006500:	f7ff ba5a 	b.w	80059b8 <delay_ms>
 8006504:	20000a24 	.word	0x20000a24

08006508 <ST7032i_Clear>:
  * @brief  Clear Display
  * @param  None
  * @retval None
  */
void ST7032i_Clear(void)
{
 8006508:	b508      	push	{r3, lr}
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
 800650a:	2001      	movs	r0, #1
 800650c:	f7ff feca 	bl	80062a4 <ST7032i_Command_Write>
  DDRAM_Address = 0;
 8006510:	4a07      	ldr	r2, [pc, #28]	; (8006530 <ST7032i_Clear+0x28>)
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
 8006512:	4908      	ldr	r1, [pc, #32]	; (8006534 <ST7032i_Clear+0x2c>)
void ST7032i_Clear(void)
{
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	7013      	strb	r3, [r2, #0]
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
 8006518:	2220      	movs	r2, #32
 800651a:	54ca      	strb	r2, [r1, r3]
      DDRAM_Data[1][i] =  ' ';
 800651c:	18c8      	adds	r0, r1, r3
{
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
  for(i=0;i<16;i++)
 800651e:	3301      	adds	r3, #1
 8006520:	2b10      	cmp	r3, #16
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
 8006522:	7402      	strb	r2, [r0, #16]
{
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
  for(i=0;i<16;i++)
 8006524:	d1f9      	bne.n	800651a <ST7032i_Clear+0x12>
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
    }
  delay_ms(2);
 8006526:	2002      	movs	r0, #2
}
 8006528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
    }
  delay_ms(2);
 800652c:	f7ff ba44 	b.w	80059b8 <delay_ms>
 8006530:	20000a24 	.word	0x20000a24
 8006534:	20001090 	.word	0x20001090

08006538 <ST7032i_Init>:
  * @brief  Initialize ST7032i LCD and I2C interface
  * @param  None
  * @retval None
  */
void ST7032i_Init(void)
{
 8006538:	b510      	push	{r4, lr}

  delay_ms(40);
 800653a:	2028      	movs	r0, #40	; 0x28
 800653c:	f7ff fa3c 	bl	80059b8 <delay_ms>

  I2C_Configuration();
 8006540:	f7ff fe74 	bl	800622c <I2C_Configuration>

  //Function Set
  ST7032i_Command_Write(0b00111000);
 8006544:	2038      	movs	r0, #56	; 0x38
 8006546:	f7ff fead 	bl	80062a4 <ST7032i_Command_Write>

  delay_us(27);
 800654a:	201b      	movs	r0, #27
 800654c:	f7ff fa0a 	bl	8005964 <delay_us>

  //Function Set
  ST7032i_Command_Write(0b00111001);
 8006550:	2039      	movs	r0, #57	; 0x39
 8006552:	f7ff fea7 	bl	80062a4 <ST7032i_Command_Write>

  delay_us(27);
 8006556:	201b      	movs	r0, #27
 8006558:	f7ff fa04 	bl	8005964 <delay_us>

  //Bias and OSC frequency
  ST7032i_Command_Write(0b00010100);
 800655c:	2014      	movs	r0, #20
 800655e:	f7ff fea1 	bl	80062a4 <ST7032i_Command_Write>

  delay_us(27);
 8006562:	201b      	movs	r0, #27
  ST7032i_Command_Write(0b01110000);

  delay_us(27);

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast);
 8006564:	4c16      	ldr	r4, [pc, #88]	; (80065c0 <ST7032i_Init+0x88>)
  delay_us(27);

  //Bias and OSC frequency
  ST7032i_Command_Write(0b00010100);

  delay_us(27);
 8006566:	f7ff f9fd 	bl	8005964 <delay_us>

  //Contrast set
  ST7032i_Command_Write(0b01110000);
 800656a:	2070      	movs	r0, #112	; 0x70
 800656c:	f7ff fe9a 	bl	80062a4 <ST7032i_Command_Write>

  delay_us(27);
 8006570:	201b      	movs	r0, #27
 8006572:	f7ff f9f7 	bl	8005964 <delay_us>

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast);
 8006576:	7820      	ldrb	r0, [r4, #0]
 8006578:	f7ff fe94 	bl	80062a4 <ST7032i_Command_Write>

  delay_us(27);
 800657c:	201b      	movs	r0, #27
 800657e:	f7ff f9f1 	bl	8005964 <delay_us>

  //Contrast set
  ST7032i_Set_Contrast(Contrast);
 8006582:	7860      	ldrb	r0, [r4, #1]
 8006584:	f7ff feec 	bl	8006360 <ST7032i_Set_Contrast>

  //Follower control
  ST7032i_Command_Write(0b01101100);
 8006588:	206c      	movs	r0, #108	; 0x6c
 800658a:	f7ff fe8b 	bl	80062a4 <ST7032i_Command_Write>

  delay_ms(200);
 800658e:	20c8      	movs	r0, #200	; 0xc8
 8006590:	f7ff fa12 	bl	80059b8 <delay_ms>

  //Function Set
  ST7032i_Command_Write(0b00111001);
 8006594:	2039      	movs	r0, #57	; 0x39
 8006596:	f7ff fe85 	bl	80062a4 <ST7032i_Command_Write>

  delay_us(27);
 800659a:	201b      	movs	r0, #27
 800659c:	f7ff f9e2 	bl	8005964 <delay_us>

  //Entry mode
  ST7032i_Command_Write(Entry_Mode);
 80065a0:	78e0      	ldrb	r0, [r4, #3]
 80065a2:	f7ff fe7f 	bl	80062a4 <ST7032i_Command_Write>

  delay_us(27);
 80065a6:	201b      	movs	r0, #27
 80065a8:	f7ff f9dc 	bl	8005964 <delay_us>

  //Display control : on
  ST7032i_Command_Write(Display);
 80065ac:	78a0      	ldrb	r0, [r4, #2]
 80065ae:	f7ff fe79 	bl	80062a4 <ST7032i_Command_Write>

  delay_us(27);
 80065b2:	201b      	movs	r0, #27
 80065b4:	f7ff f9d6 	bl	8005964 <delay_us>

  //Clear
  ST7032i_Clear();
}
 80065b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ST7032i_Command_Write(Display);

  delay_us(27);

  //Clear
  ST7032i_Clear();
 80065bc:	e7a4      	b.n	8006508 <ST7032i_Clear>
 80065be:	bf00      	nop
 80065c0:	20000128 	.word	0x20000128

080065c4 <ST7032i_Data_Write>:
  * @brief  Write Data to ST7032i
  * @param  Data : "Data" Data
  * @retval None
  */
void ST7032i_Data_Write(uint8_t Data)
{
 80065c4:	b510      	push	{r4, lr}

  /* Send STRAT condition */
  I2C_GenerateSTART(I2C1, ENABLE);
 80065c6:	2101      	movs	r1, #1
  * @brief  Write Data to ST7032i
  * @param  Data : "Data" Data
  * @retval None
  */
void ST7032i_Data_Write(uint8_t Data)
{
 80065c8:	4604      	mov	r4, r0

  /* Send STRAT condition */
  I2C_GenerateSTART(I2C1, ENABLE);
 80065ca:	4817      	ldr	r0, [pc, #92]	; (8006628 <ST7032i_Data_Write+0x64>)
 80065cc:	f7fc fda2 	bl	8003114 <I2C_GenerateSTART>
  /* Test on EV5 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 80065d0:	4815      	ldr	r0, [pc, #84]	; (8006628 <ST7032i_Data_Write+0x64>)
 80065d2:	4916      	ldr	r1, [pc, #88]	; (800662c <ST7032i_Data_Write+0x68>)
 80065d4:	f7fc fe95 	bl	8003302 <I2C_CheckEvent>
 80065d8:	2800      	cmp	r0, #0
 80065da:	d0f9      	beq.n	80065d0 <ST7032i_Data_Write+0xc>
  /* Send EEPROM address for write */
  I2C_Send7bitAddress(I2C1, ST7032I_ADDR << 1, I2C_Direction_Transmitter);
 80065dc:	4812      	ldr	r0, [pc, #72]	; (8006628 <ST7032i_Data_Write+0x64>)
 80065de:	217c      	movs	r1, #124	; 0x7c
 80065e0:	2200      	movs	r2, #0
 80065e2:	f7fc fdaf 	bl	8003144 <I2C_Send7bitAddress>
  /* Test on EV6 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 80065e6:	4810      	ldr	r0, [pc, #64]	; (8006628 <ST7032i_Data_Write+0x64>)
 80065e8:	4911      	ldr	r1, [pc, #68]	; (8006630 <ST7032i_Data_Write+0x6c>)
 80065ea:	f7fc fe8a 	bl	8003302 <I2C_CheckEvent>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d0f9      	beq.n	80065e6 <ST7032i_Data_Write+0x22>
  /* Send the EEPROM's internal address to write to : MSB of the address first */
  I2C_SendData(I2C1, 0b01000000);
 80065f2:	480d      	ldr	r0, [pc, #52]	; (8006628 <ST7032i_Data_Write+0x64>)
 80065f4:	2140      	movs	r1, #64	; 0x40
 80065f6:	f7fc fe28 	bl	800324a <I2C_SendData>
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80065fa:	480b      	ldr	r0, [pc, #44]	; (8006628 <ST7032i_Data_Write+0x64>)
 80065fc:	490d      	ldr	r1, [pc, #52]	; (8006634 <ST7032i_Data_Write+0x70>)
 80065fe:	f7fc fe80 	bl	8003302 <I2C_CheckEvent>
 8006602:	2800      	cmp	r0, #0
 8006604:	d0f9      	beq.n	80065fa <ST7032i_Data_Write+0x36>
  /* Send the EEPROM's internal address to write to : MSB of the address first */
  I2C_SendData(I2C1, Data);
 8006606:	4808      	ldr	r0, [pc, #32]	; (8006628 <ST7032i_Data_Write+0x64>)
 8006608:	4621      	mov	r1, r4
 800660a:	f7fc fe1e 	bl	800324a <I2C_SendData>
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 800660e:	4806      	ldr	r0, [pc, #24]	; (8006628 <ST7032i_Data_Write+0x64>)
 8006610:	4908      	ldr	r1, [pc, #32]	; (8006634 <ST7032i_Data_Write+0x70>)
 8006612:	f7fc fe76 	bl	8003302 <I2C_CheckEvent>
 8006616:	2800      	cmp	r0, #0
 8006618:	d0f9      	beq.n	800660e <ST7032i_Data_Write+0x4a>
  /* Send STOP condition */
  I2C_GenerateSTOP(I2C1, ENABLE);
 800661a:	4803      	ldr	r0, [pc, #12]	; (8006628 <ST7032i_Data_Write+0x64>)
 800661c:	2101      	movs	r1, #1
}
 800661e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Send the EEPROM's internal address to write to : MSB of the address first */
  I2C_SendData(I2C1, Data);
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
  /* Send STOP condition */
  I2C_GenerateSTOP(I2C1, ENABLE);
 8006622:	f7fc bd83 	b.w	800312c <I2C_GenerateSTOP>
 8006626:	bf00      	nop
 8006628:	40005400 	.word	0x40005400
 800662c:	00030001 	.word	0x00030001
 8006630:	00070082 	.word	0x00070082
 8006634:	00070084 	.word	0x00070084

08006638 <ST7032i_Putchar>:
  * @brief  put character on st7032i lcd
  * @param  None
  * @retval None
  */
void ST7032i_Putchar(int8_t chardata)
{
 8006638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800663c:	4604      	mov	r4, r0
  uint32_t i;

  ST7032i_Data_Write((uint8_t)chardata);
 800663e:	b2c0      	uxtb	r0, r0
 8006640:	f7ff ffc0 	bl	80065c4 <ST7032i_Data_Write>
  delay_us(27);
 8006644:	201b      	movs	r0, #27
 8006646:	f7ff f98d 	bl	8005964 <delay_us>
  if(DDRAM_Address < 0x10)
 800664a:	4b57      	ldr	r3, [pc, #348]	; (80067a8 <ST7032i_Putchar+0x170>)
 800664c:	781a      	ldrb	r2, [r3, #0]
 800664e:	2a0f      	cmp	r2, #15
    {
      DDRAM_Data[0][DDRAM_Address] = chardata;
 8006650:	781a      	ldrb	r2, [r3, #0]
{
  uint32_t i;

  ST7032i_Data_Write((uint8_t)chardata);
  delay_us(27);
  if(DDRAM_Address < 0x10)
 8006652:	d802      	bhi.n	800665a <ST7032i_Putchar+0x22>
    {
      DDRAM_Data[0][DDRAM_Address] = chardata;
 8006654:	4955      	ldr	r1, [pc, #340]	; (80067ac <ST7032i_Putchar+0x174>)
 8006656:	548c      	strb	r4, [r1, r2]
 8006658:	e008      	b.n	800666c <ST7032i_Putchar+0x34>
    }
  else if (DDRAM_Address >= 0x40 && DDRAM_Address < 0x50)
 800665a:	2a3f      	cmp	r2, #63	; 0x3f
 800665c:	d906      	bls.n	800666c <ST7032i_Putchar+0x34>
 800665e:	781a      	ldrb	r2, [r3, #0]
 8006660:	2a4f      	cmp	r2, #79	; 0x4f
 8006662:	d803      	bhi.n	800666c <ST7032i_Putchar+0x34>
    {
      DDRAM_Data[1][DDRAM_Address - 0x40] = chardata;
 8006664:	7819      	ldrb	r1, [r3, #0]
 8006666:	4a52      	ldr	r2, [pc, #328]	; (80067b0 <ST7032i_Putchar+0x178>)
 8006668:	188a      	adds	r2, r1, r2
 800666a:	7414      	strb	r4, [r2, #16]
    }
  if (Shift == 0)
 800666c:	785b      	ldrb	r3, [r3, #1]
 800666e:	4a4e      	ldr	r2, [pc, #312]	; (80067a8 <ST7032i_Putchar+0x170>)
 8006670:	b933      	cbnz	r3, 8006680 <ST7032i_Putchar+0x48>
    {
      DDRAM_Address = DDRAM_Address + Increment;
 8006672:	4b50      	ldr	r3, [pc, #320]	; (80067b4 <ST7032i_Putchar+0x17c>)
 8006674:	7811      	ldrb	r1, [r2, #0]
 8006676:	791b      	ldrb	r3, [r3, #4]
 8006678:	18cb      	adds	r3, r1, r3
 800667a:	b2db      	uxtb	r3, r3
 800667c:	7013      	strb	r3, [r2, #0]
 800667e:	e032      	b.n	80066e6 <ST7032i_Putchar+0xae>
    }
  else if (Shift == 1 && Increment == 1)
 8006680:	7853      	ldrb	r3, [r2, #1]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d116      	bne.n	80066b4 <ST7032i_Putchar+0x7c>
 8006686:	4b4b      	ldr	r3, [pc, #300]	; (80067b4 <ST7032i_Putchar+0x17c>)
 8006688:	791b      	ldrb	r3, [r3, #4]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d112      	bne.n	80066b4 <ST7032i_Putchar+0x7c>
 800668e:	2200      	movs	r2, #0
    {
      for (i = 0 ; i< 15; i++)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
 8006690:	4b46      	ldr	r3, [pc, #280]	; (80067ac <ST7032i_Putchar+0x174>)
 8006692:	e000      	b.n	8006696 <ST7032i_Putchar+0x5e>
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
 8006694:	460a      	mov	r2, r1
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
 8006696:	1c51      	adds	r1, r2, #1
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
 8006698:	290f      	cmp	r1, #15
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
 800669a:	5c5c      	ldrb	r4, [r3, r1]
 800669c:	4843      	ldr	r0, [pc, #268]	; (80067ac <ST7032i_Putchar+0x174>)
 800669e:	549c      	strb	r4, [r3, r2]
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
 80066a0:	eb03 0401 	add.w	r4, r3, r1
 80066a4:	441a      	add	r2, r3
 80066a6:	7c24      	ldrb	r4, [r4, #16]
 80066a8:	7414      	strb	r4, [r2, #16]
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
 80066aa:	d1f3      	bne.n	8006694 <ST7032i_Putchar+0x5c>
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
        }
      DDRAM_Data[0][15] = ' ';
 80066ac:	2320      	movs	r3, #32
 80066ae:	73c3      	strb	r3, [r0, #15]
      DDRAM_Data[1][15] = ' ';
 80066b0:	77c3      	strb	r3, [r0, #31]
 80066b2:	e018      	b.n	80066e6 <ST7032i_Putchar+0xae>
    }
  else if (Shift == 1 && Increment == -1)
 80066b4:	4b3c      	ldr	r3, [pc, #240]	; (80067a8 <ST7032i_Putchar+0x170>)
 80066b6:	785b      	ldrb	r3, [r3, #1]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d114      	bne.n	80066e6 <ST7032i_Putchar+0xae>
 80066bc:	4b3d      	ldr	r3, [pc, #244]	; (80067b4 <ST7032i_Putchar+0x17c>)
 80066be:	791b      	ldrb	r3, [r3, #4]
 80066c0:	b25b      	sxtb	r3, r3
 80066c2:	3301      	adds	r3, #1
 80066c4:	d10f      	bne.n	80066e6 <ST7032i_Putchar+0xae>
    {
      for (i = 15 ; i> 0; i--)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
 80066c6:	4a39      	ldr	r2, [pc, #228]	; (80067ac <ST7032i_Putchar+0x174>)
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
        }
      DDRAM_Data[0][15] = ' ';
      DDRAM_Data[1][15] = ' ';
    }
  else if (Shift == 1 && Increment == -1)
 80066c8:	230f      	movs	r3, #15
/**
  * @brief  put character on st7032i lcd
  * @param  None
  * @retval None
  */
void ST7032i_Putchar(int8_t chardata)
 80066ca:	1e59      	subs	r1, r3, #1
    }
  else if (Shift == 1 && Increment == -1)
    {
      for (i = 15 ; i> 0; i--)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
 80066cc:	4837      	ldr	r0, [pc, #220]	; (80067ac <ST7032i_Putchar+0x174>)
 80066ce:	5c54      	ldrb	r4, [r2, r1]
 80066d0:	54d4      	strb	r4, [r2, r3]
          DDRAM_Data[1][i] = DDRAM_Data[1][i-1];
 80066d2:	1854      	adds	r4, r2, r1
 80066d4:	18d3      	adds	r3, r2, r3
 80066d6:	7c24      	ldrb	r4, [r4, #16]
 80066d8:	741c      	strb	r4, [r3, #16]
      DDRAM_Data[0][15] = ' ';
      DDRAM_Data[1][15] = ' ';
    }
  else if (Shift == 1 && Increment == -1)
    {
      for (i = 15 ; i> 0; i--)
 80066da:	460b      	mov	r3, r1
 80066dc:	2900      	cmp	r1, #0
 80066de:	d1f4      	bne.n	80066ca <ST7032i_Putchar+0x92>
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
          DDRAM_Data[1][i] = DDRAM_Data[1][i-1];
        }
      DDRAM_Data[0][0] = ' ';
 80066e0:	2320      	movs	r3, #32
 80066e2:	7003      	strb	r3, [r0, #0]
      DDRAM_Data[1][0] = ' ';
 80066e4:	7403      	strb	r3, [r0, #16]
    }

  if (DDRAM_Address == 0x10)
 80066e6:	4b30      	ldr	r3, [pc, #192]	; (80067a8 <ST7032i_Putchar+0x170>)
 80066e8:	781a      	ldrb	r2, [r3, #0]
 80066ea:	2a10      	cmp	r2, #16
 80066ec:	d109      	bne.n	8006702 <ST7032i_Putchar+0xca>
    {
      DDRAM_Address = 0x40;
 80066ee:	2240      	movs	r2, #64	; 0x40
 80066f0:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 80066f2:	7818      	ldrb	r0, [r3, #0]
 80066f4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80066f8:	f7ff fdd4 	bl	80062a4 <ST7032i_Command_Write>
      delay_us(27);
 80066fc:	201b      	movs	r0, #27
 80066fe:	f7ff f931 	bl	8005964 <delay_us>
    }

  if (DDRAM_Address == 0x3F)
 8006702:	4b29      	ldr	r3, [pc, #164]	; (80067a8 <ST7032i_Putchar+0x170>)
 8006704:	781a      	ldrb	r2, [r3, #0]
 8006706:	2a3f      	cmp	r2, #63	; 0x3f
 8006708:	d109      	bne.n	800671e <ST7032i_Putchar+0xe6>
    {
      DDRAM_Address = 0x0F;
 800670a:	220f      	movs	r2, #15
 800670c:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 800670e:	7818      	ldrb	r0, [r3, #0]
 8006710:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8006714:	f7ff fdc6 	bl	80062a4 <ST7032i_Command_Write>
      delay_us(27);
 8006718:	201b      	movs	r0, #27
 800671a:	f7ff f923 	bl	8005964 <delay_us>
    }

  if (DDRAM_Address == 0xFF)
 800671e:	4b22      	ldr	r3, [pc, #136]	; (80067a8 <ST7032i_Putchar+0x170>)
 8006720:	781a      	ldrb	r2, [r3, #0]
 8006722:	2aff      	cmp	r2, #255	; 0xff
 8006724:	d109      	bne.n	800673a <ST7032i_Putchar+0x102>
    {
      DDRAM_Address = 0x0;
 8006726:	2200      	movs	r2, #0
 8006728:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 800672a:	7818      	ldrb	r0, [r3, #0]
 800672c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8006730:	f7ff fdb8 	bl	80062a4 <ST7032i_Command_Write>
      delay_us(27);
 8006734:	201b      	movs	r0, #27
 8006736:	f7ff f915 	bl	8005964 <delay_us>
    }

  if (DDRAM_Address == 0x50)
 800673a:	4b1b      	ldr	r3, [pc, #108]	; (80067a8 <ST7032i_Putchar+0x170>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2b50      	cmp	r3, #80	; 0x50
 8006740:	d130      	bne.n	80067a4 <ST7032i_Putchar+0x16c>
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 8006742:	4d1a      	ldr	r5, [pc, #104]	; (80067ac <ST7032i_Putchar+0x174>)
      DDRAM_Address = 0x0;
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
 8006744:	2400      	movs	r4, #0
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 8006746:	192b      	adds	r3, r5, r4
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 8006748:	f064 007f 	orn	r0, r4, #127	; 0x7f

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 800674c:	7c1b      	ldrb	r3, [r3, #16]
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 800674e:	b2c0      	uxtb	r0, r0

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 8006750:	552b      	strb	r3, [r5, r4]
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 8006752:	f7ff fda7 	bl	80062a4 <ST7032i_Command_Write>
          ST7032i_Data_Write(DDRAM_Data[0][i]);
 8006756:	5d28      	ldrb	r0, [r5, r4]
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
 8006758:	3401      	adds	r4, #1
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
 800675a:	f7ff ff33 	bl	80065c4 <ST7032i_Data_Write>
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
 800675e:	2c10      	cmp	r4, #16
 8006760:	d1f1      	bne.n	8006746 <ST7032i_Putchar+0x10e>
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
 8006762:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80067ac <ST7032i_Putchar+0x174>
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
 8006766:	2540      	movs	r5, #64	; 0x40
 8006768:	2400      	movs	r4, #0
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
 800676a:	2720      	movs	r7, #32
 800676c:	eb08 0604 	add.w	r6, r8, r4
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
 8006770:	f045 0080 	orr.w	r0, r5, #128	; 0x80
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
 8006774:	7437      	strb	r7, [r6, #16]
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
 8006776:	f7ff fd95 	bl	80062a4 <ST7032i_Command_Write>
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
 800677a:	3401      	adds	r4, #1
        {
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
          ST7032i_Data_Write(DDRAM_Data[1][i]);
 800677c:	7c30      	ldrb	r0, [r6, #16]
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
 800677e:	3501      	adds	r5, #1
        {
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
          ST7032i_Data_Write(DDRAM_Data[1][i]);
 8006780:	f7ff ff20 	bl	80065c4 <ST7032i_Data_Write>
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
 8006784:	2c10      	cmp	r4, #16
 8006786:	b2ed      	uxtb	r5, r5
 8006788:	d1f0      	bne.n	800676c <ST7032i_Putchar+0x134>
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
          ST7032i_Data_Write(DDRAM_Data[1][i]);
        }

      DDRAM_Address = 0x40;
 800678a:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <ST7032i_Putchar+0x170>)
 800678c:	2240      	movs	r2, #64	; 0x40
 800678e:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8006790:	7818      	ldrb	r0, [r3, #0]
 8006792:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8006796:	f7ff fd85 	bl	80062a4 <ST7032i_Command_Write>
      delay_us(27);
 800679a:	201b      	movs	r0, #27
    }
}
 800679c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          ST7032i_Data_Write(DDRAM_Data[1][i]);
        }

      DDRAM_Address = 0x40;
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
      delay_us(27);
 80067a0:	f7ff b8e0 	b.w	8005964 <delay_us>
 80067a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a8:	20000a24 	.word	0x20000a24
 80067ac:	20001090 	.word	0x20001090
 80067b0:	20001050 	.word	0x20001050
 80067b4:	20000128 	.word	0x20000128

080067b8 <ST7032i_Print_String>:
  * @brief  Print string to LCD
  * @param  String: Array which contain string
  * @retval None
  */
void ST7032i_Print_String(const int8_t String[])
{
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4605      	mov	r5, r0
  uint8_t i = 0;
 80067bc:	2400      	movs	r4, #0
  while(String[i] != '\0')
 80067be:	e004      	b.n	80067ca <ST7032i_Print_String+0x12>
    {
      ST7032i_Putchar(String[i]);
 80067c0:	b240      	sxtb	r0, r0
 80067c2:	f7ff ff39 	bl	8006638 <ST7032i_Putchar>
      i++;
 80067c6:	3401      	adds	r4, #1
 80067c8:	b2e4      	uxtb	r4, r4
  * @retval None
  */
void ST7032i_Print_String(const int8_t String[])
{
  uint8_t i = 0;
  while(String[i] != '\0')
 80067ca:	5d28      	ldrb	r0, [r5, r4]
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d1f7      	bne.n	80067c0 <ST7032i_Print_String+0x8>
    {
      ST7032i_Putchar(String[i]);
      i++;
    }
}
 80067d0:	bd38      	pop	{r3, r4, r5, pc}

080067d2 <ST7032i_Icon_Clear>:
  * @brief  Clear icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Clear(uint8_t number)
{
 80067d2:	b538      	push	{r3, r4, r5, lr}
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 80067d4:	4c10      	ldr	r4, [pc, #64]	; (8006818 <ST7032i_Icon_Clear+0x46>)
 80067d6:	eb04 0440 	add.w	r4, r4, r0, lsl #1
  * @brief  Clear icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Clear(uint8_t number)
{
 80067da:	4605      	mov	r5, r0
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 80067dc:	7960      	ldrb	r0, [r4, #5]
 80067de:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80067e2:	f7ff fd5f 	bl	80062a4 <ST7032i_Command_Write>
  delay_us(27);
 80067e6:	201b      	movs	r0, #27
 80067e8:	f7ff f8bc 	bl	8005964 <delay_us>

  //icon data reset
  ST7032i_Data_Write(IconRAM[number] & (~Icon_Table[number][1]));
 80067ec:	4b0b      	ldr	r3, [pc, #44]	; (800681c <ST7032i_Icon_Clear+0x4a>)
 80067ee:	5d5b      	ldrb	r3, [r3, r5]
 80067f0:	79a0      	ldrb	r0, [r4, #6]
 80067f2:	ea23 0000 	bic.w	r0, r3, r0
 80067f6:	f7ff fee5 	bl	80065c4 <ST7032i_Data_Write>
  delay_us(27);
 80067fa:	201b      	movs	r0, #27
 80067fc:	f7ff f8b2 	bl	8005964 <delay_us>

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8006800:	4b07      	ldr	r3, [pc, #28]	; (8006820 <ST7032i_Icon_Clear+0x4e>)
 8006802:	7818      	ldrb	r0, [r3, #0]
 8006804:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8006808:	f7ff fd4c 	bl	80062a4 <ST7032i_Command_Write>
  delay_us(27);
 800680c:	201b      	movs	r0, #27

}
 800680e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ST7032i_Data_Write(IconRAM[number] & (~Icon_Table[number][1]));
  delay_us(27);

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
  delay_us(27);
 8006812:	f7ff b8a7 	b.w	8005964 <delay_us>
 8006816:	bf00      	nop
 8006818:	20000128 	.word	0x20000128
 800681c:	200010b0 	.word	0x200010b0
 8006820:	20000a24 	.word	0x20000a24

08006824 <ST7032i_Icon_Set>:
  * @brief  Put icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Set(uint8_t number)
{
 8006824:	b538      	push	{r3, r4, r5, lr}
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 8006826:	4c10      	ldr	r4, [pc, #64]	; (8006868 <ST7032i_Icon_Set+0x44>)
 8006828:	eb04 0440 	add.w	r4, r4, r0, lsl #1
  * @brief  Put icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Set(uint8_t number)
{
 800682c:	4605      	mov	r5, r0
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 800682e:	7960      	ldrb	r0, [r4, #5]
 8006830:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006834:	f7ff fd36 	bl	80062a4 <ST7032i_Command_Write>
  delay_us(27);
 8006838:	201b      	movs	r0, #27
 800683a:	f7ff f893 	bl	8005964 <delay_us>

  //icon data set
  ST7032i_Data_Write(IconRAM[number] | Icon_Table[number][1]);
 800683e:	4b0b      	ldr	r3, [pc, #44]	; (800686c <ST7032i_Icon_Set+0x48>)
 8006840:	5d58      	ldrb	r0, [r3, r5]
 8006842:	79a3      	ldrb	r3, [r4, #6]
 8006844:	4318      	orrs	r0, r3
 8006846:	f7ff febd 	bl	80065c4 <ST7032i_Data_Write>
  delay_us(27);
 800684a:	201b      	movs	r0, #27
 800684c:	f7ff f88a 	bl	8005964 <delay_us>

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8006850:	4b07      	ldr	r3, [pc, #28]	; (8006870 <ST7032i_Icon_Set+0x4c>)
 8006852:	7818      	ldrb	r0, [r3, #0]
 8006854:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8006858:	f7ff fd24 	bl	80062a4 <ST7032i_Command_Write>
  delay_us(27);
 800685c:	201b      	movs	r0, #27
}
 800685e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ST7032i_Data_Write(IconRAM[number] | Icon_Table[number][1]);
  delay_us(27);

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
  delay_us(27);
 8006862:	f7ff b87f 	b.w	8005964 <delay_us>
 8006866:	bf00      	nop
 8006868:	20000128 	.word	0x20000128
 800686c:	200010b0 	.word	0x200010b0
 8006870:	20000a24 	.word	0x20000a24
 8006874:	0800be64 	.word	0x0800be64
 8006878:	20000000 	.word	0x20000000
 800687c:	20000a1c 	.word	0x20000a1c
 8006880:	20000a1c 	.word	0x20000a1c
 8006884:	200010c4 	.word	0x200010c4

08006888 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8006888:	4770      	bx	lr

0800688a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800688a:	e7fe      	b.n	800688a <HardFault_Handler>

0800688c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800688c:	e7fe      	b.n	800688c <MemManage_Handler>

0800688e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800688e:	e7fe      	b.n	800688e <BusFault_Handler>

08006890 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8006890:	e7fe      	b.n	8006890 <UsageFault_Handler>

08006892 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8006892:	4770      	bx	lr

08006894 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8006894:	4770      	bx	lr

08006896 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8006896:	4770      	bx	lr

08006898 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006898:	4b33      	ldr	r3, [pc, #204]	; (8006968 <SystemInit+0xd0>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	f042 0201 	orr.w	r2, r2, #1
 80068a0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80068a2:	2200      	movs	r2, #0
 80068a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80068a6:	6819      	ldr	r1, [r3, #0]
 80068a8:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80068ac:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80068b0:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80068b2:	492e      	ldr	r1, [pc, #184]	; (800696c <SystemInit+0xd4>)
 80068b4:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80068b6:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80068b8:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80068ba:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80068be:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80068c0:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80068c2:	9200      	str	r2, [sp, #0]
 80068c4:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80068cc:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80068d4:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 80068d6:	9a00      	ldr	r2, [sp, #0]
 80068d8:	3201      	adds	r2, #1
 80068da:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80068dc:	9a01      	ldr	r2, [sp, #4]
 80068de:	b91a      	cbnz	r2, 80068e8 <SystemInit+0x50>
 80068e0:	9a00      	ldr	r2, [sp, #0]
 80068e2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80068e6:	d1f2      	bne.n	80068ce <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80068e8:	4b1f      	ldr	r3, [pc, #124]	; (8006968 <SystemInit+0xd0>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80068f0:	bf18      	it	ne
 80068f2:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80068f4:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 80068f6:	9b01      	ldr	r3, [sp, #4]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d12e      	bne.n	800695a <SystemInit+0xc2>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80068fc:	4b1a      	ldr	r3, [pc, #104]	; (8006968 <SystemInit+0xd0>)
 80068fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006900:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006904:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8006906:	4a1a      	ldr	r2, [pc, #104]	; (8006970 <SystemInit+0xd8>)
 8006908:	6811      	ldr	r1, [r2, #0]
 800690a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800690e:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8006910:	689a      	ldr	r2, [r3, #8]
 8006912:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800691a:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8006922:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8006924:	4a13      	ldr	r2, [pc, #76]	; (8006974 <SystemInit+0xdc>)
 8006926:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800692e:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8006930:	6819      	ldr	r1, [r3, #0]
 8006932:	4a0d      	ldr	r2, [pc, #52]	; (8006968 <SystemInit+0xd0>)
 8006934:	0189      	lsls	r1, r1, #6
 8006936:	d5fb      	bpl.n	8006930 <SystemInit+0x98>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8006938:	4b0f      	ldr	r3, [pc, #60]	; (8006978 <SystemInit+0xe0>)
 800693a:	f240 6105 	movw	r1, #1541	; 0x605
 800693e:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8006940:	6893      	ldr	r3, [r2, #8]
 8006942:	f023 0303 	bic.w	r3, r3, #3
 8006946:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8006948:	6893      	ldr	r3, [r2, #8]
 800694a:	f043 0302 	orr.w	r3, r3, #2
 800694e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8006950:	6893      	ldr	r3, [r2, #8]
 8006952:	f003 030c 	and.w	r3, r3, #12
 8006956:	2b08      	cmp	r3, #8
 8006958:	d1fa      	bne.n	8006950 <SystemInit+0xb8>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800695a:	4b08      	ldr	r3, [pc, #32]	; (800697c <SystemInit+0xe4>)
 800695c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006960:	609a      	str	r2, [r3, #8]
#endif
}
 8006962:	b002      	add	sp, #8
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40023800 	.word	0x40023800
 800696c:	24003010 	.word	0x24003010
 8006970:	40007000 	.word	0x40007000
 8006974:	07405419 	.word	0x07405419
 8006978:	40023c00 	.word	0x40023c00
 800697c:	e000ed00 	.word	0xe000ed00

08006980 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8006980:	4b18      	ldr	r3, [pc, #96]	; (80069e4 <SystemCoreClockUpdate+0x64>)
 8006982:	4a19      	ldr	r2, [pc, #100]	; (80069e8 <SystemCoreClockUpdate+0x68>)
 8006984:	6899      	ldr	r1, [r3, #8]
 8006986:	f001 010c 	and.w	r1, r1, #12

  switch (tmp)
 800698a:	2904      	cmp	r1, #4
 800698c:	d003      	beq.n	8006996 <SystemCoreClockUpdate+0x16>
 800698e:	2908      	cmp	r1, #8
 8006990:	d003      	beq.n	800699a <SystemCoreClockUpdate+0x1a>
 8006992:	4b16      	ldr	r3, [pc, #88]	; (80069ec <SystemCoreClockUpdate+0x6c>)
 8006994:	e019      	b.n	80069ca <SystemCoreClockUpdate+0x4a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8006996:	4b16      	ldr	r3, [pc, #88]	; (80069f0 <SystemCoreClockUpdate+0x70>)
 8006998:	e017      	b.n	80069ca <SystemCoreClockUpdate+0x4a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800699a:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800699c:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 800699e:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80069a2:	6859      	ldr	r1, [r3, #4]
 80069a4:	bf14      	ite	ne
 80069a6:	4b12      	ldrne	r3, [pc, #72]	; (80069f0 <SystemCoreClockUpdate+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80069a8:	4b10      	ldreq	r3, [pc, #64]	; (80069ec <SystemCoreClockUpdate+0x6c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80069ae:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80069b2:	4a0c      	ldr	r2, [pc, #48]	; (80069e4 <SystemCoreClockUpdate+0x64>)
 80069b4:	6852      	ldr	r2, [r2, #4]
 80069b6:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80069ba:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80069be:	3201      	adds	r2, #1
 80069c0:	0052      	lsls	r2, r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80069c2:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 80069c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80069c8:	4a07      	ldr	r2, [pc, #28]	; (80069e8 <SystemCoreClockUpdate+0x68>)
 80069ca:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <SystemCoreClockUpdate+0x64>)
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <SystemCoreClockUpdate+0x68>)
 80069d2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80069d6:	189a      	adds	r2, r3, r2
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80069d8:	6819      	ldr	r1, [r3, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80069da:	7912      	ldrb	r2, [r2, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80069dc:	fa31 f202 	lsrs.w	r2, r1, r2
 80069e0:	601a      	str	r2, [r3, #0]
}
 80069e2:	4770      	bx	lr
 80069e4:	40023800 	.word	0x40023800
 80069e8:	20000148 	.word	0x20000148
 80069ec:	00f42400 	.word	0x00f42400
 80069f0:	007a1200 	.word	0x007a1200

080069f4 <cleanup_glue>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	460c      	mov	r4, r1
 80069f8:	6809      	ldr	r1, [r1, #0]
 80069fa:	4605      	mov	r5, r0
 80069fc:	b109      	cbz	r1, 8006a02 <cleanup_glue+0xe>
 80069fe:	f7ff fff9 	bl	80069f4 <cleanup_glue>
 8006a02:	4628      	mov	r0, r5
 8006a04:	4621      	mov	r1, r4
 8006a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a0a:	f002 ba21 	b.w	8008e50 <_free_r>
 8006a0e:	bf00      	nop

08006a10 <_reclaim_reent>:
 8006a10:	4b22      	ldr	r3, [pc, #136]	; (8006a9c <_reclaim_reent+0x8c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4298      	cmp	r0, r3
 8006a16:	b570      	push	{r4, r5, r6, lr}
 8006a18:	4605      	mov	r5, r0
 8006a1a:	d032      	beq.n	8006a82 <_reclaim_reent+0x72>
 8006a1c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006a1e:	b1ab      	cbz	r3, 8006a4c <_reclaim_reent+0x3c>
 8006a20:	2200      	movs	r2, #0
 8006a22:	4616      	mov	r6, r2
 8006a24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a28:	b909      	cbnz	r1, 8006a2e <_reclaim_reent+0x1e>
 8006a2a:	e007      	b.n	8006a3c <_reclaim_reent+0x2c>
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	680c      	ldr	r4, [r1, #0]
 8006a30:	4628      	mov	r0, r5
 8006a32:	f002 fa0d 	bl	8008e50 <_free_r>
 8006a36:	2c00      	cmp	r4, #0
 8006a38:	d1f8      	bne.n	8006a2c <_reclaim_reent+0x1c>
 8006a3a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8006a3c:	3601      	adds	r6, #1
 8006a3e:	2e20      	cmp	r6, #32
 8006a40:	4632      	mov	r2, r6
 8006a42:	d1ef      	bne.n	8006a24 <_reclaim_reent+0x14>
 8006a44:	4628      	mov	r0, r5
 8006a46:	4619      	mov	r1, r3
 8006a48:	f002 fa02 	bl	8008e50 <_free_r>
 8006a4c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8006a4e:	b111      	cbz	r1, 8006a56 <_reclaim_reent+0x46>
 8006a50:	4628      	mov	r0, r5
 8006a52:	f002 f9fd 	bl	8008e50 <_free_r>
 8006a56:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 8006a5a:	b159      	cbz	r1, 8006a74 <_reclaim_reent+0x64>
 8006a5c:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8006a60:	42b1      	cmp	r1, r6
 8006a62:	d101      	bne.n	8006a68 <_reclaim_reent+0x58>
 8006a64:	e006      	b.n	8006a74 <_reclaim_reent+0x64>
 8006a66:	4621      	mov	r1, r4
 8006a68:	680c      	ldr	r4, [r1, #0]
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f002 f9f0 	bl	8008e50 <_free_r>
 8006a70:	42a6      	cmp	r6, r4
 8006a72:	d1f8      	bne.n	8006a66 <_reclaim_reent+0x56>
 8006a74:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8006a76:	b111      	cbz	r1, 8006a7e <_reclaim_reent+0x6e>
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f002 f9e9 	bl	8008e50 <_free_r>
 8006a7e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006a80:	b903      	cbnz	r3, 8006a84 <_reclaim_reent+0x74>
 8006a82:	bd70      	pop	{r4, r5, r6, pc}
 8006a84:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006a86:	4628      	mov	r0, r5
 8006a88:	4798      	blx	r3
 8006a8a:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 8006a8e:	2900      	cmp	r1, #0
 8006a90:	d0f7      	beq.n	8006a82 <_reclaim_reent+0x72>
 8006a92:	4628      	mov	r0, r5
 8006a94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a98:	e7ac      	b.n	80069f4 <cleanup_glue>
 8006a9a:	bf00      	nop
 8006a9c:	20000160 	.word	0x20000160

08006aa0 <_wrapup_reent>:
 8006aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa2:	4607      	mov	r7, r0
 8006aa4:	b1b0      	cbz	r0, 8006ad4 <_wrapup_reent+0x34>
 8006aa6:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 8006aaa:	b176      	cbz	r6, 8006aca <_wrapup_reent+0x2a>
 8006aac:	6875      	ldr	r5, [r6, #4]
 8006aae:	1e6c      	subs	r4, r5, #1
 8006ab0:	d408      	bmi.n	8006ac4 <_wrapup_reent+0x24>
 8006ab2:	3502      	adds	r5, #2
 8006ab4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8006ab8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006abc:	3c01      	subs	r4, #1
 8006abe:	4798      	blx	r3
 8006ac0:	1c63      	adds	r3, r4, #1
 8006ac2:	d1f9      	bne.n	8006ab8 <_wrapup_reent+0x18>
 8006ac4:	6836      	ldr	r6, [r6, #0]
 8006ac6:	2e00      	cmp	r6, #0
 8006ac8:	d1f0      	bne.n	8006aac <_wrapup_reent+0xc>
 8006aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006acc:	b10b      	cbz	r3, 8006ad2 <_wrapup_reent+0x32>
 8006ace:	4638      	mov	r0, r7
 8006ad0:	4798      	blx	r3
 8006ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ad4:	4b01      	ldr	r3, [pc, #4]	; (8006adc <_wrapup_reent+0x3c>)
 8006ad6:	681f      	ldr	r7, [r3, #0]
 8006ad8:	e7e5      	b.n	8006aa6 <_wrapup_reent+0x6>
 8006ada:	bf00      	nop
 8006adc:	20000160 	.word	0x20000160

08006ae0 <_sprintf_r>:
 8006ae0:	b40c      	push	{r2, r3}
 8006ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ae4:	b09d      	sub	sp, #116	; 0x74
 8006ae6:	ac22      	add	r4, sp, #136	; 0x88
 8006ae8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8006aec:	f854 2b04 	ldr.w	r2, [r4], #4
 8006af0:	9101      	str	r1, [sp, #4]
 8006af2:	460e      	mov	r6, r1
 8006af4:	4623      	mov	r3, r4
 8006af6:	9503      	str	r5, [sp, #12]
 8006af8:	9506      	str	r5, [sp, #24]
 8006afa:	a901      	add	r1, sp, #4
 8006afc:	f44f 7702 	mov.w	r7, #520	; 0x208
 8006b00:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8006b04:	f8ad 7010 	strh.w	r7, [sp, #16]
 8006b08:	9605      	str	r6, [sp, #20]
 8006b0a:	f8ad 5012 	strh.w	r5, [sp, #18]
 8006b0e:	941b      	str	r4, [sp, #108]	; 0x6c
 8006b10:	f000 f830 	bl	8006b74 <_svfprintf_r>
 8006b14:	9b01      	ldr	r3, [sp, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	b01d      	add	sp, #116	; 0x74
 8006b1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006b20:	b002      	add	sp, #8
 8006b22:	4770      	bx	lr

08006b24 <sprintf>:
 8006b24:	b40e      	push	{r1, r2, r3}
 8006b26:	b570      	push	{r4, r5, r6, lr}
 8006b28:	b09d      	sub	sp, #116	; 0x74
 8006b2a:	ac21      	add	r4, sp, #132	; 0x84
 8006b2c:	f240 1360 	movw	r3, #352	; 0x160
 8006b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006b34:	f854 2b04 	ldr.w	r2, [r4], #4
 8006b38:	4606      	mov	r6, r0
 8006b3a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	9503      	str	r5, [sp, #12]
 8006b42:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006b46:	f8ad 3010 	strh.w	r3, [sp, #16]
 8006b4a:	9506      	str	r5, [sp, #24]
 8006b4c:	4623      	mov	r3, r4
 8006b4e:	a901      	add	r1, sp, #4
 8006b50:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8006b54:	9601      	str	r6, [sp, #4]
 8006b56:	9605      	str	r6, [sp, #20]
 8006b58:	f8ad 5012 	strh.w	r5, [sp, #18]
 8006b5c:	941b      	str	r4, [sp, #108]	; 0x6c
 8006b5e:	f000 f809 	bl	8006b74 <_svfprintf_r>
 8006b62:	9b01      	ldr	r3, [sp, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	b01d      	add	sp, #116	; 0x74
 8006b6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b6e:	b003      	add	sp, #12
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop

08006b74 <_svfprintf_r>:
 8006b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b78:	b0c5      	sub	sp, #276	; 0x114
 8006b7a:	468a      	mov	sl, r1
 8006b7c:	4614      	mov	r4, r2
 8006b7e:	930e      	str	r3, [sp, #56]	; 0x38
 8006b80:	900f      	str	r0, [sp, #60]	; 0x3c
 8006b82:	f002 fa5d 	bl	8009040 <_localeconv_r>
 8006b86:	6800      	ldr	r0, [r0, #0]
 8006b88:	9017      	str	r0, [sp, #92]	; 0x5c
 8006b8a:	f003 fb33 	bl	800a1f4 <strlen>
 8006b8e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006b92:	901a      	str	r0, [sp, #104]	; 0x68
 8006b94:	2100      	movs	r1, #0
 8006b96:	2000      	movs	r0, #0
 8006b98:	061a      	lsls	r2, r3, #24
 8006b9a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8006b9e:	d504      	bpl.n	8006baa <_svfprintf_r+0x36>
 8006ba0:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f001 8004 	beq.w	8007bb2 <_svfprintf_r+0x103e>
 8006baa:	2300      	movs	r3, #0
 8006bac:	f10d 00e3 	add.w	r0, sp, #227	; 0xe3
 8006bb0:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8006bb4:	a91f      	add	r1, sp, #124	; 0x7c
 8006bb6:	9310      	str	r3, [sp, #64]	; 0x40
 8006bb8:	933b      	str	r3, [sp, #236]	; 0xec
 8006bba:	933a      	str	r3, [sp, #232]	; 0xe8
 8006bbc:	931c      	str	r3, [sp, #112]	; 0x70
 8006bbe:	931b      	str	r3, [sp, #108]	; 0x6c
 8006bc0:	930c      	str	r3, [sp, #48]	; 0x30
 8006bc2:	ebc0 030b 	rsb	r3, r0, fp
 8006bc6:	9007      	str	r0, [sp, #28]
 8006bc8:	9139      	str	r1, [sp, #228]	; 0xe4
 8006bca:	9409      	str	r4, [sp, #36]	; 0x24
 8006bcc:	460e      	mov	r6, r1
 8006bce:	931d      	str	r3, [sp, #116]	; 0x74
 8006bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bd2:	7803      	ldrb	r3, [r0, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	bf18      	it	ne
 8006bd8:	2b25      	cmpne	r3, #37	; 0x25
 8006bda:	f000 80af 	beq.w	8006d3c <_svfprintf_r+0x1c8>
 8006bde:	4607      	mov	r7, r0
 8006be0:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8006be4:	2b25      	cmp	r3, #37	; 0x25
 8006be6:	bf18      	it	ne
 8006be8:	2b00      	cmpne	r3, #0
 8006bea:	d1f9      	bne.n	8006be0 <_svfprintf_r+0x6c>
 8006bec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bee:	ebb7 0801 	subs.w	r8, r7, r1
 8006bf2:	d00e      	beq.n	8006c12 <_svfprintf_r+0x9e>
 8006bf4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8006bf6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8006bf8:	6031      	str	r1, [r6, #0]
 8006bfa:	3401      	adds	r4, #1
 8006bfc:	4445      	add	r5, r8
 8006bfe:	2c07      	cmp	r4, #7
 8006c00:	f8c6 8004 	str.w	r8, [r6, #4]
 8006c04:	953b      	str	r5, [sp, #236]	; 0xec
 8006c06:	943a      	str	r4, [sp, #232]	; 0xe8
 8006c08:	dc7c      	bgt.n	8006d04 <_svfprintf_r+0x190>
 8006c0a:	3608      	adds	r6, #8
 8006c0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c0e:	4442      	add	r2, r8
 8006c10:	920c      	str	r2, [sp, #48]	; 0x30
 8006c12:	783b      	ldrb	r3, [r7, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d07d      	beq.n	8006d14 <_svfprintf_r+0x1a0>
 8006c18:	3701      	adds	r7, #1
 8006c1a:	9709      	str	r7, [sp, #36]	; 0x24
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c20:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c22:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8006c26:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006c2a:	9308      	str	r3, [sp, #32]
 8006c2c:	2720      	movs	r7, #32
 8006c2e:	252b      	movs	r5, #43	; 0x2b
 8006c30:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006c34:	f1a3 0220 	sub.w	r2, r3, #32
 8006c38:	2a58      	cmp	r2, #88	; 0x58
 8006c3a:	f200 823b 	bhi.w	80070b4 <_svfprintf_r+0x540>
 8006c3e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006c42:	024c      	.short	0x024c
 8006c44:	02390239 	.word	0x02390239
 8006c48:	02390254 	.word	0x02390254
 8006c4c:	02390239 	.word	0x02390239
 8006c50:	02390239 	.word	0x02390239
 8006c54:	02590239 	.word	0x02590239
 8006c58:	0239007f 	.word	0x0239007f
 8006c5c:	0082005c 	.word	0x0082005c
 8006c60:	009d0239 	.word	0x009d0239
 8006c64:	00a200a2 	.word	0x00a200a2
 8006c68:	00a200a2 	.word	0x00a200a2
 8006c6c:	00a200a2 	.word	0x00a200a2
 8006c70:	00a200a2 	.word	0x00a200a2
 8006c74:	023900a2 	.word	0x023900a2
 8006c78:	02390239 	.word	0x02390239
 8006c7c:	02390239 	.word	0x02390239
 8006c80:	02390239 	.word	0x02390239
 8006c84:	02390239 	.word	0x02390239
 8006c88:	00b50239 	.word	0x00b50239
 8006c8c:	02390154 	.word	0x02390154
 8006c90:	02390154 	.word	0x02390154
 8006c94:	02390239 	.word	0x02390239
 8006c98:	018b0239 	.word	0x018b0239
 8006c9c:	02390239 	.word	0x02390239
 8006ca0:	02390190 	.word	0x02390190
 8006ca4:	02390239 	.word	0x02390239
 8006ca8:	02390239 	.word	0x02390239
 8006cac:	023901a7 	.word	0x023901a7
 8006cb0:	01ba0239 	.word	0x01ba0239
 8006cb4:	02390239 	.word	0x02390239
 8006cb8:	02390239 	.word	0x02390239
 8006cbc:	02390239 	.word	0x02390239
 8006cc0:	02390239 	.word	0x02390239
 8006cc4:	02390239 	.word	0x02390239
 8006cc8:	02780293 	.word	0x02780293
 8006ccc:	01540154 	.word	0x01540154
 8006cd0:	028e0154 	.word	0x028e0154
 8006cd4:	02390278 	.word	0x02390278
 8006cd8:	02130239 	.word	0x02130239
 8006cdc:	02180239 	.word	0x02180239
 8006ce0:	02a50224 	.word	0x02a50224
 8006ce4:	023901de 	.word	0x023901de
 8006ce8:	023901e3 	.word	0x023901e3
 8006cec:	02390264 	.word	0x02390264
 8006cf0:	02c70239 	.word	0x02c70239
 8006cf4:	4252      	negs	r2, r2
 8006cf6:	920b      	str	r2, [sp, #44]	; 0x2c
 8006cf8:	930e      	str	r3, [sp, #56]	; 0x38
 8006cfa:	9b08      	ldr	r3, [sp, #32]
 8006cfc:	f043 0304 	orr.w	r3, r3, #4
 8006d00:	9308      	str	r3, [sp, #32]
 8006d02:	e795      	b.n	8006c30 <_svfprintf_r+0xbc>
 8006d04:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006d06:	4651      	mov	r1, sl
 8006d08:	465a      	mov	r2, fp
 8006d0a:	f003 faa3 	bl	800a254 <__ssprint_r>
 8006d0e:	b940      	cbnz	r0, 8006d22 <_svfprintf_r+0x1ae>
 8006d10:	ae1f      	add	r6, sp, #124	; 0x7c
 8006d12:	e77b      	b.n	8006c0c <_svfprintf_r+0x98>
 8006d14:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8006d16:	b123      	cbz	r3, 8006d22 <_svfprintf_r+0x1ae>
 8006d18:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006d1a:	4651      	mov	r1, sl
 8006d1c:	aa39      	add	r2, sp, #228	; 0xe4
 8006d1e:	f003 fa99 	bl	800a254 <__ssprint_r>
 8006d22:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006d26:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006d2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d2c:	bf18      	it	ne
 8006d2e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8006d32:	930c      	str	r3, [sp, #48]	; 0x30
 8006d34:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006d36:	b045      	add	sp, #276	; 0x114
 8006d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d3c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006d3e:	e768      	b.n	8006c12 <_svfprintf_r+0x9e>
 8006d40:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8006d44:	e774      	b.n	8006c30 <_svfprintf_r+0xbc>
 8006d46:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d4c:	f001 804c 	beq.w	8007de8 <_svfprintf_r+0x1274>
 8006d50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006d54:	2400      	movs	r4, #0
 8006d56:	2a09      	cmp	r2, #9
 8006d58:	f63f af6c 	bhi.w	8006c34 <_svfprintf_r+0xc0>
 8006d5c:	4601      	mov	r1, r0
 8006d5e:	2400      	movs	r4, #0
 8006d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d64:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8006d68:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8006d6c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006d70:	2a09      	cmp	r2, #9
 8006d72:	4608      	mov	r0, r1
 8006d74:	d9f4      	bls.n	8006d60 <_svfprintf_r+0x1ec>
 8006d76:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8006d7a:	e75b      	b.n	8006c34 <_svfprintf_r+0xc0>
 8006d7c:	9a08      	ldr	r2, [sp, #32]
 8006d7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d82:	9208      	str	r2, [sp, #32]
 8006d84:	e754      	b.n	8006c30 <_svfprintf_r+0xbc>
 8006d86:	4601      	mov	r1, r0
 8006d88:	2200      	movs	r2, #0
 8006d8a:	46b4      	mov	ip, r6
 8006d8c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006d90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d94:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006d98:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006d9c:	2e09      	cmp	r6, #9
 8006d9e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006da2:	4608      	mov	r0, r1
 8006da4:	d9f2      	bls.n	8006d8c <_svfprintf_r+0x218>
 8006da6:	4666      	mov	r6, ip
 8006da8:	920b      	str	r2, [sp, #44]	; 0x2c
 8006daa:	e743      	b.n	8006c34 <_svfprintf_r+0xc0>
 8006dac:	9315      	str	r3, [sp, #84]	; 0x54
 8006dae:	9b08      	ldr	r3, [sp, #32]
 8006db0:	9009      	str	r0, [sp, #36]	; 0x24
 8006db2:	f043 0310 	orr.w	r3, r3, #16
 8006db6:	9308      	str	r3, [sp, #32]
 8006db8:	9808      	ldr	r0, [sp, #32]
 8006dba:	06c3      	lsls	r3, r0, #27
 8006dbc:	f100 81bf 	bmi.w	800713e <_svfprintf_r+0x5ca>
 8006dc0:	9a08      	ldr	r2, [sp, #32]
 8006dc2:	0655      	lsls	r5, r2, #25
 8006dc4:	f140 81bb 	bpl.w	800713e <_svfprintf_r+0x5ca>
 8006dc8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006dca:	f9b0 3000 	ldrsh.w	r3, [r0]
 8006dce:	3004      	adds	r0, #4
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	900e      	str	r0, [sp, #56]	; 0x38
 8006dd4:	f2c0 81ba 	blt.w	800714c <_svfprintf_r+0x5d8>
 8006dd8:	bf0c      	ite	eq
 8006dda:	2100      	moveq	r1, #0
 8006ddc:	2101      	movne	r1, #1
 8006dde:	2201      	movs	r2, #1
 8006de0:	2c00      	cmp	r4, #0
 8006de2:	bfa2      	ittt	ge
 8006de4:	9808      	ldrge	r0, [sp, #32]
 8006de6:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8006dea:	9008      	strge	r0, [sp, #32]
 8006dec:	2c00      	cmp	r4, #0
 8006dee:	bf18      	it	ne
 8006df0:	f041 0101 	orrne.w	r1, r1, #1
 8006df4:	2900      	cmp	r1, #0
 8006df6:	f000 8323 	beq.w	8007440 <_svfprintf_r+0x8cc>
 8006dfa:	2a01      	cmp	r2, #1
 8006dfc:	f000 845f 	beq.w	80076be <_svfprintf_r+0xb4a>
 8006e00:	2a02      	cmp	r2, #2
 8006e02:	bf18      	it	ne
 8006e04:	465a      	movne	r2, fp
 8006e06:	d102      	bne.n	8006e0e <_svfprintf_r+0x29a>
 8006e08:	f000 bc48 	b.w	800769c <_svfprintf_r+0xb28>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	f003 0107 	and.w	r1, r3, #7
 8006e12:	3130      	adds	r1, #48	; 0x30
 8006e14:	1e50      	subs	r0, r2, #1
 8006e16:	08db      	lsrs	r3, r3, #3
 8006e18:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e1c:	d1f6      	bne.n	8006e0c <_svfprintf_r+0x298>
 8006e1e:	9b08      	ldr	r3, [sp, #32]
 8006e20:	9011      	str	r0, [sp, #68]	; 0x44
 8006e22:	07dd      	lsls	r5, r3, #31
 8006e24:	d507      	bpl.n	8006e36 <_svfprintf_r+0x2c2>
 8006e26:	2930      	cmp	r1, #48	; 0x30
 8006e28:	f000 8733 	beq.w	8007c92 <_svfprintf_r+0x111e>
 8006e2c:	1e90      	subs	r0, r2, #2
 8006e2e:	2330      	movs	r3, #48	; 0x30
 8006e30:	9011      	str	r0, [sp, #68]	; 0x44
 8006e32:	f802 3c02 	strb.w	r3, [r2, #-2]
 8006e36:	ebc0 030b 	rsb	r3, r0, fp
 8006e3a:	930d      	str	r3, [sp, #52]	; 0x34
 8006e3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e3e:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8006e42:	9412      	str	r4, [sp, #72]	; 0x48
 8006e44:	42a3      	cmp	r3, r4
 8006e46:	bfb8      	it	lt
 8006e48:	4623      	movlt	r3, r4
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	930a      	str	r3, [sp, #40]	; 0x28
 8006e4e:	9016      	str	r0, [sp, #88]	; 0x58
 8006e50:	b111      	cbz	r1, 8006e58 <_svfprintf_r+0x2e4>
 8006e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e54:	3301      	adds	r3, #1
 8006e56:	930a      	str	r3, [sp, #40]	; 0x28
 8006e58:	9b08      	ldr	r3, [sp, #32]
 8006e5a:	f013 0302 	ands.w	r3, r3, #2
 8006e5e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e60:	d002      	beq.n	8006e68 <_svfprintf_r+0x2f4>
 8006e62:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006e64:	3002      	adds	r0, #2
 8006e66:	900a      	str	r0, [sp, #40]	; 0x28
 8006e68:	9b08      	ldr	r3, [sp, #32]
 8006e6a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8006e6e:	9314      	str	r3, [sp, #80]	; 0x50
 8006e70:	f040 81bb 	bne.w	80071ea <_svfprintf_r+0x676>
 8006e74:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006e76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e78:	1a47      	subs	r7, r0, r1
 8006e7a:	2f00      	cmp	r7, #0
 8006e7c:	f340 81b5 	ble.w	80071ea <_svfprintf_r+0x676>
 8006e80:	2f10      	cmp	r7, #16
 8006e82:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8006e84:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8006e86:	f8df 8344 	ldr.w	r8, [pc, #836]	; 80071cc <_svfprintf_r+0x658>
 8006e8a:	dd22      	ble.n	8006ed2 <_svfprintf_r+0x35e>
 8006e8c:	4623      	mov	r3, r4
 8006e8e:	f04f 0910 	mov.w	r9, #16
 8006e92:	4644      	mov	r4, r8
 8006e94:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8006e98:	e003      	b.n	8006ea2 <_svfprintf_r+0x32e>
 8006e9a:	3f10      	subs	r7, #16
 8006e9c:	3608      	adds	r6, #8
 8006e9e:	2f10      	cmp	r7, #16
 8006ea0:	dd15      	ble.n	8006ece <_svfprintf_r+0x35a>
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	3510      	adds	r5, #16
 8006ea6:	2b07      	cmp	r3, #7
 8006ea8:	e886 0210 	stmia.w	r6, {r4, r9}
 8006eac:	953b      	str	r5, [sp, #236]	; 0xec
 8006eae:	933a      	str	r3, [sp, #232]	; 0xe8
 8006eb0:	ddf3      	ble.n	8006e9a <_svfprintf_r+0x326>
 8006eb2:	4640      	mov	r0, r8
 8006eb4:	4651      	mov	r1, sl
 8006eb6:	465a      	mov	r2, fp
 8006eb8:	f003 f9cc 	bl	800a254 <__ssprint_r>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	f47f af30 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 8006ec2:	3f10      	subs	r7, #16
 8006ec4:	2f10      	cmp	r7, #16
 8006ec6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8006ec8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8006eca:	ae1f      	add	r6, sp, #124	; 0x7c
 8006ecc:	dce9      	bgt.n	8006ea2 <_svfprintf_r+0x32e>
 8006ece:	46a0      	mov	r8, r4
 8006ed0:	461c      	mov	r4, r3
 8006ed2:	3401      	adds	r4, #1
 8006ed4:	19ed      	adds	r5, r5, r7
 8006ed6:	2c07      	cmp	r4, #7
 8006ed8:	f8c6 8000 	str.w	r8, [r6]
 8006edc:	6077      	str	r7, [r6, #4]
 8006ede:	953b      	str	r5, [sp, #236]	; 0xec
 8006ee0:	943a      	str	r4, [sp, #232]	; 0xe8
 8006ee2:	f300 8414 	bgt.w	800770e <_svfprintf_r+0xb9a>
 8006ee6:	3608      	adds	r6, #8
 8006ee8:	e180      	b.n	80071ec <_svfprintf_r+0x678>
 8006eea:	9009      	str	r0, [sp, #36]	; 0x24
 8006eec:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006eee:	9315      	str	r3, [sp, #84]	; 0x54
 8006ef0:	1dc3      	adds	r3, r0, #7
 8006ef2:	f023 0307 	bic.w	r3, r3, #7
 8006ef6:	f103 0108 	add.w	r1, r3, #8
 8006efa:	910e      	str	r1, [sp, #56]	; 0x38
 8006efc:	f8d3 8000 	ldr.w	r8, [r3]
 8006f00:	685d      	ldr	r5, [r3, #4]
 8006f02:	4642      	mov	r2, r8
 8006f04:	462b      	mov	r3, r5
 8006f06:	4629      	mov	r1, r5
 8006f08:	4640      	mov	r0, r8
 8006f0a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8006f0e:	f003 f839 	bl	8009f84 <__fpclassifyd>
 8006f12:	2801      	cmp	r0, #1
 8006f14:	4629      	mov	r1, r5
 8006f16:	4640      	mov	r0, r8
 8006f18:	f040 84d0 	bne.w	80078bc <_svfprintf_r+0xd48>
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2300      	movs	r3, #0
 8006f20:	f004 fd60 	bl	800b9e4 <__aeabi_dcmplt>
 8006f24:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8006f28:	b110      	cbz	r0, 8006f30 <_svfprintf_r+0x3bc>
 8006f2a:	212d      	movs	r1, #45	; 0x2d
 8006f2c:	f88d 110f 	strb.w	r1, [sp, #271]	; 0x10f
 8006f30:	2303      	movs	r3, #3
 8006f32:	930a      	str	r3, [sp, #40]	; 0x28
 8006f34:	2300      	movs	r3, #0
 8006f36:	9312      	str	r3, [sp, #72]	; 0x48
 8006f38:	4aa0      	ldr	r2, [pc, #640]	; (80071bc <_svfprintf_r+0x648>)
 8006f3a:	4ba1      	ldr	r3, [pc, #644]	; (80071c0 <_svfprintf_r+0x64c>)
 8006f3c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006f3e:	2847      	cmp	r0, #71	; 0x47
 8006f40:	bfd8      	it	le
 8006f42:	461a      	movle	r2, r3
 8006f44:	9211      	str	r2, [sp, #68]	; 0x44
 8006f46:	9a08      	ldr	r2, [sp, #32]
 8006f48:	2303      	movs	r3, #3
 8006f4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f4e:	930d      	str	r3, [sp, #52]	; 0x34
 8006f50:	2300      	movs	r3, #0
 8006f52:	9208      	str	r2, [sp, #32]
 8006f54:	9316      	str	r3, [sp, #88]	; 0x58
 8006f56:	e77b      	b.n	8006e50 <_svfprintf_r+0x2dc>
 8006f58:	9b08      	ldr	r3, [sp, #32]
 8006f5a:	f043 0308 	orr.w	r3, r3, #8
 8006f5e:	9308      	str	r3, [sp, #32]
 8006f60:	e666      	b.n	8006c30 <_svfprintf_r+0xbc>
 8006f62:	9908      	ldr	r1, [sp, #32]
 8006f64:	9009      	str	r0, [sp, #36]	; 0x24
 8006f66:	f041 0110 	orr.w	r1, r1, #16
 8006f6a:	9108      	str	r1, [sp, #32]
 8006f6c:	9a08      	ldr	r2, [sp, #32]
 8006f6e:	9315      	str	r3, [sp, #84]	; 0x54
 8006f70:	f012 0110 	ands.w	r1, r2, #16
 8006f74:	f000 8090 	beq.w	8007098 <_svfprintf_r+0x524>
 8006f78:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006f7a:	6803      	ldr	r3, [r0, #0]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	1a99      	subs	r1, r3, r2
 8006f80:	bf18      	it	ne
 8006f82:	2101      	movne	r1, #1
 8006f84:	3004      	adds	r0, #4
 8006f86:	900e      	str	r0, [sp, #56]	; 0x38
 8006f88:	2000      	movs	r0, #0
 8006f8a:	f88d 010f 	strb.w	r0, [sp, #271]	; 0x10f
 8006f8e:	e727      	b.n	8006de0 <_svfprintf_r+0x26c>
 8006f90:	9908      	ldr	r1, [sp, #32]
 8006f92:	9009      	str	r0, [sp, #36]	; 0x24
 8006f94:	f041 0110 	orr.w	r1, r1, #16
 8006f98:	9108      	str	r1, [sp, #32]
 8006f9a:	9a08      	ldr	r2, [sp, #32]
 8006f9c:	9315      	str	r3, [sp, #84]	; 0x54
 8006f9e:	06d0      	lsls	r0, r2, #27
 8006fa0:	f140 80b9 	bpl.w	8007116 <_svfprintf_r+0x5a2>
 8006fa4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006fa6:	6803      	ldr	r3, [r0, #0]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	1c19      	adds	r1, r3, #0
 8006fac:	bf18      	it	ne
 8006fae:	2101      	movne	r1, #1
 8006fb0:	3004      	adds	r0, #4
 8006fb2:	900e      	str	r0, [sp, #56]	; 0x38
 8006fb4:	e7e8      	b.n	8006f88 <_svfprintf_r+0x414>
 8006fb6:	4a83      	ldr	r2, [pc, #524]	; (80071c4 <_svfprintf_r+0x650>)
 8006fb8:	9315      	str	r3, [sp, #84]	; 0x54
 8006fba:	9b08      	ldr	r3, [sp, #32]
 8006fbc:	921c      	str	r2, [sp, #112]	; 0x70
 8006fbe:	06da      	lsls	r2, r3, #27
 8006fc0:	9009      	str	r0, [sp, #36]	; 0x24
 8006fc2:	f100 810d 	bmi.w	80071e0 <_svfprintf_r+0x66c>
 8006fc6:	9908      	ldr	r1, [sp, #32]
 8006fc8:	064b      	lsls	r3, r1, #25
 8006fca:	f140 8109 	bpl.w	80071e0 <_svfprintf_r+0x66c>
 8006fce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fd0:	8813      	ldrh	r3, [r2, #0]
 8006fd2:	3204      	adds	r2, #4
 8006fd4:	920e      	str	r2, [sp, #56]	; 0x38
 8006fd6:	1c19      	adds	r1, r3, #0
 8006fd8:	9a08      	ldr	r2, [sp, #32]
 8006fda:	bf18      	it	ne
 8006fdc:	2101      	movne	r1, #1
 8006fde:	420a      	tst	r2, r1
 8006fe0:	f000 83ca 	beq.w	8007778 <_svfprintf_r+0xc04>
 8006fe4:	9908      	ldr	r1, [sp, #32]
 8006fe6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006fe8:	2230      	movs	r2, #48	; 0x30
 8006fea:	f041 0102 	orr.w	r1, r1, #2
 8006fee:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8006ff2:	9108      	str	r1, [sp, #32]
 8006ff4:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	e7c4      	b.n	8006f88 <_svfprintf_r+0x414>
 8006ffe:	9b08      	ldr	r3, [sp, #32]
 8007000:	f043 0310 	orr.w	r3, r3, #16
 8007004:	9308      	str	r3, [sp, #32]
 8007006:	e613      	b.n	8006c30 <_svfprintf_r+0xbc>
 8007008:	2500      	movs	r5, #0
 800700a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800700c:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8007010:	9315      	str	r3, [sp, #84]	; 0x54
 8007012:	6812      	ldr	r2, [r2, #0]
 8007014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007016:	9009      	str	r0, [sp, #36]	; 0x24
 8007018:	9211      	str	r2, [sp, #68]	; 0x44
 800701a:	1d1f      	adds	r7, r3, #4
 800701c:	2a00      	cmp	r2, #0
 800701e:	f000 864b 	beq.w	8007cb8 <_svfprintf_r+0x1144>
 8007022:	2c00      	cmp	r4, #0
 8007024:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007026:	f2c0 8602 	blt.w	8007c2e <_svfprintf_r+0x10ba>
 800702a:	4629      	mov	r1, r5
 800702c:	4622      	mov	r2, r4
 800702e:	f002 facf 	bl	80095d0 <memchr>
 8007032:	2800      	cmp	r0, #0
 8007034:	f000 866f 	beq.w	8007d16 <_svfprintf_r+0x11a2>
 8007038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800703a:	9512      	str	r5, [sp, #72]	; 0x48
 800703c:	1ac0      	subs	r0, r0, r3
 800703e:	42a0      	cmp	r0, r4
 8007040:	900d      	str	r0, [sp, #52]	; 0x34
 8007042:	bfd1      	iteee	le
 8007044:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 8007046:	f89d 110f 	ldrbgt.w	r1, [sp, #271]	; 0x10f
 800704a:	970e      	strgt	r7, [sp, #56]	; 0x38
 800704c:	ea24 70e4 	bicgt.w	r0, r4, r4, asr #31
 8007050:	bfd3      	iteet	le
 8007052:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8007056:	900a      	strgt	r0, [sp, #40]	; 0x28
 8007058:	940d      	strgt	r4, [sp, #52]	; 0x34
 800705a:	930a      	strle	r3, [sp, #40]	; 0x28
 800705c:	bfdc      	itt	le
 800705e:	f89d 110f 	ldrble.w	r1, [sp, #271]	; 0x10f
 8007062:	970e      	strle	r7, [sp, #56]	; 0x38
 8007064:	9516      	str	r5, [sp, #88]	; 0x58
 8007066:	e6f3      	b.n	8006e50 <_svfprintf_r+0x2dc>
 8007068:	9a08      	ldr	r2, [sp, #32]
 800706a:	f042 0210 	orr.w	r2, r2, #16
 800706e:	9208      	str	r2, [sp, #32]
 8007070:	e5de      	b.n	8006c30 <_svfprintf_r+0xbc>
 8007072:	9009      	str	r0, [sp, #36]	; 0x24
 8007074:	9808      	ldr	r0, [sp, #32]
 8007076:	06c3      	lsls	r3, r0, #27
 8007078:	f140 843f 	bpl.w	80078fa <_svfprintf_r+0xd86>
 800707c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800707e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007080:	680b      	ldr	r3, [r1, #0]
 8007082:	3104      	adds	r1, #4
 8007084:	910e      	str	r1, [sp, #56]	; 0x38
 8007086:	601a      	str	r2, [r3, #0]
 8007088:	e5a2      	b.n	8006bd0 <_svfprintf_r+0x5c>
 800708a:	9a08      	ldr	r2, [sp, #32]
 800708c:	9009      	str	r0, [sp, #36]	; 0x24
 800708e:	f012 0110 	ands.w	r1, r2, #16
 8007092:	9315      	str	r3, [sp, #84]	; 0x54
 8007094:	f47f af70 	bne.w	8006f78 <_svfprintf_r+0x404>
 8007098:	9b08      	ldr	r3, [sp, #32]
 800709a:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 800709e:	f000 8437 	beq.w	8007910 <_svfprintf_r+0xd9c>
 80070a2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80070a4:	8803      	ldrh	r3, [r0, #0]
 80070a6:	460a      	mov	r2, r1
 80070a8:	1c19      	adds	r1, r3, #0
 80070aa:	bf18      	it	ne
 80070ac:	2101      	movne	r1, #1
 80070ae:	3004      	adds	r0, #4
 80070b0:	900e      	str	r0, [sp, #56]	; 0x38
 80070b2:	e769      	b.n	8006f88 <_svfprintf_r+0x414>
 80070b4:	9009      	str	r0, [sp, #36]	; 0x24
 80070b6:	9315      	str	r3, [sp, #84]	; 0x54
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f43f ae2b 	beq.w	8006d14 <_svfprintf_r+0x1a0>
 80070be:	2101      	movs	r1, #1
 80070c0:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 80070c4:	aa2f      	add	r2, sp, #188	; 0xbc
 80070c6:	2300      	movs	r3, #0
 80070c8:	910a      	str	r1, [sp, #40]	; 0x28
 80070ca:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 80070ce:	910d      	str	r1, [sp, #52]	; 0x34
 80070d0:	9211      	str	r2, [sp, #68]	; 0x44
 80070d2:	2300      	movs	r3, #0
 80070d4:	9312      	str	r3, [sp, #72]	; 0x48
 80070d6:	9316      	str	r3, [sp, #88]	; 0x58
 80070d8:	e6be      	b.n	8006e58 <_svfprintf_r+0x2e4>
 80070da:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f47f ada6 	bne.w	8006c30 <_svfprintf_r+0xbc>
 80070e4:	f88d 710f 	strb.w	r7, [sp, #271]	; 0x10f
 80070e8:	e5a2      	b.n	8006c30 <_svfprintf_r+0xbc>
 80070ea:	9a08      	ldr	r2, [sp, #32]
 80070ec:	f042 0201 	orr.w	r2, r2, #1
 80070f0:	9208      	str	r2, [sp, #32]
 80070f2:	e59d      	b.n	8006c30 <_svfprintf_r+0xbc>
 80070f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070f6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80070fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070fe:	1d0b      	adds	r3, r1, #4
 8007100:	2a00      	cmp	r2, #0
 8007102:	f6ff adf7 	blt.w	8006cf4 <_svfprintf_r+0x180>
 8007106:	930e      	str	r3, [sp, #56]	; 0x38
 8007108:	e592      	b.n	8006c30 <_svfprintf_r+0xbc>
 800710a:	9a08      	ldr	r2, [sp, #32]
 800710c:	9009      	str	r0, [sp, #36]	; 0x24
 800710e:	06d0      	lsls	r0, r2, #27
 8007110:	9315      	str	r3, [sp, #84]	; 0x54
 8007112:	f53f af47 	bmi.w	8006fa4 <_svfprintf_r+0x430>
 8007116:	9908      	ldr	r1, [sp, #32]
 8007118:	0649      	lsls	r1, r1, #25
 800711a:	f140 83ea 	bpl.w	80078f2 <_svfprintf_r+0xd7e>
 800711e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007120:	8813      	ldrh	r3, [r2, #0]
 8007122:	2201      	movs	r2, #1
 8007124:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007126:	1c19      	adds	r1, r3, #0
 8007128:	bf18      	it	ne
 800712a:	2101      	movne	r1, #1
 800712c:	3004      	adds	r0, #4
 800712e:	900e      	str	r0, [sp, #56]	; 0x38
 8007130:	e72a      	b.n	8006f88 <_svfprintf_r+0x414>
 8007132:	9009      	str	r0, [sp, #36]	; 0x24
 8007134:	9808      	ldr	r0, [sp, #32]
 8007136:	9315      	str	r3, [sp, #84]	; 0x54
 8007138:	06c3      	lsls	r3, r0, #27
 800713a:	f57f ae41 	bpl.w	8006dc0 <_svfprintf_r+0x24c>
 800713e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007140:	680b      	ldr	r3, [r1, #0]
 8007142:	3104      	adds	r1, #4
 8007144:	2b00      	cmp	r3, #0
 8007146:	910e      	str	r1, [sp, #56]	; 0x38
 8007148:	f6bf ae46 	bge.w	8006dd8 <_svfprintf_r+0x264>
 800714c:	425b      	negs	r3, r3
 800714e:	222d      	movs	r2, #45	; 0x2d
 8007150:	1c19      	adds	r1, r3, #0
 8007152:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8007156:	bf18      	it	ne
 8007158:	2101      	movne	r1, #1
 800715a:	2201      	movs	r2, #1
 800715c:	e640      	b.n	8006de0 <_svfprintf_r+0x26c>
 800715e:	9908      	ldr	r1, [sp, #32]
 8007160:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007164:	9108      	str	r1, [sp, #32]
 8007166:	e563      	b.n	8006c30 <_svfprintf_r+0xbc>
 8007168:	9315      	str	r3, [sp, #84]	; 0x54
 800716a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800716c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	9009      	str	r0, [sp, #36]	; 0x24
 8007172:	2200      	movs	r2, #0
 8007174:	2001      	movs	r0, #1
 8007176:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 800717a:	3104      	adds	r1, #4
 800717c:	aa2f      	add	r2, sp, #188	; 0xbc
 800717e:	900a      	str	r0, [sp, #40]	; 0x28
 8007180:	910e      	str	r1, [sp, #56]	; 0x38
 8007182:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8007186:	900d      	str	r0, [sp, #52]	; 0x34
 8007188:	9211      	str	r2, [sp, #68]	; 0x44
 800718a:	e7a2      	b.n	80070d2 <_svfprintf_r+0x55e>
 800718c:	490e      	ldr	r1, [pc, #56]	; (80071c8 <_svfprintf_r+0x654>)
 800718e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007192:	911c      	str	r1, [sp, #112]	; 0x70
 8007194:	9908      	ldr	r1, [sp, #32]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	9009      	str	r0, [sp, #36]	; 0x24
 800719a:	3204      	adds	r2, #4
 800719c:	f041 0102 	orr.w	r1, r1, #2
 80071a0:	2078      	movs	r0, #120	; 0x78
 80071a2:	920e      	str	r2, [sp, #56]	; 0x38
 80071a4:	9108      	str	r1, [sp, #32]
 80071a6:	2230      	movs	r2, #48	; 0x30
 80071a8:	1c19      	adds	r1, r3, #0
 80071aa:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 80071ae:	bf18      	it	ne
 80071b0:	2101      	movne	r1, #1
 80071b2:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 80071b6:	2202      	movs	r2, #2
 80071b8:	9015      	str	r0, [sp, #84]	; 0x54
 80071ba:	e6e5      	b.n	8006f88 <_svfprintf_r+0x414>
 80071bc:	0800be04 	.word	0x0800be04
 80071c0:	0800be00 	.word	0x0800be00
 80071c4:	0800be10 	.word	0x0800be10
 80071c8:	0800be24 	.word	0x0800be24
 80071cc:	0800bc50 	.word	0x0800bc50
 80071d0:	9315      	str	r3, [sp, #84]	; 0x54
 80071d2:	9b08      	ldr	r3, [sp, #32]
 80071d4:	49a4      	ldr	r1, [pc, #656]	; (8007468 <_svfprintf_r+0x8f4>)
 80071d6:	9009      	str	r0, [sp, #36]	; 0x24
 80071d8:	06da      	lsls	r2, r3, #27
 80071da:	911c      	str	r1, [sp, #112]	; 0x70
 80071dc:	f57f aef3 	bpl.w	8006fc6 <_svfprintf_r+0x452>
 80071e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80071e2:	6803      	ldr	r3, [r0, #0]
 80071e4:	3004      	adds	r0, #4
 80071e6:	900e      	str	r0, [sp, #56]	; 0x38
 80071e8:	e6f5      	b.n	8006fd6 <_svfprintf_r+0x462>
 80071ea:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80071ec:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 80071f0:	b16b      	cbz	r3, 800720e <_svfprintf_r+0x69a>
 80071f2:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80071f4:	f20d 130f 	addw	r3, sp, #271	; 0x10f
 80071f8:	3401      	adds	r4, #1
 80071fa:	6033      	str	r3, [r6, #0]
 80071fc:	3501      	adds	r5, #1
 80071fe:	2301      	movs	r3, #1
 8007200:	2c07      	cmp	r4, #7
 8007202:	6073      	str	r3, [r6, #4]
 8007204:	953b      	str	r5, [sp, #236]	; 0xec
 8007206:	943a      	str	r4, [sp, #232]	; 0xe8
 8007208:	f300 81f5 	bgt.w	80075f6 <_svfprintf_r+0xa82>
 800720c:	3608      	adds	r6, #8
 800720e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007210:	b163      	cbz	r3, 800722c <_svfprintf_r+0x6b8>
 8007212:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007214:	ab43      	add	r3, sp, #268	; 0x10c
 8007216:	3401      	adds	r4, #1
 8007218:	6033      	str	r3, [r6, #0]
 800721a:	3502      	adds	r5, #2
 800721c:	2302      	movs	r3, #2
 800721e:	2c07      	cmp	r4, #7
 8007220:	6073      	str	r3, [r6, #4]
 8007222:	953b      	str	r5, [sp, #236]	; 0xec
 8007224:	943a      	str	r4, [sp, #232]	; 0xe8
 8007226:	f300 81db 	bgt.w	80075e0 <_svfprintf_r+0xa6c>
 800722a:	3608      	adds	r6, #8
 800722c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800722e:	2b80      	cmp	r3, #128	; 0x80
 8007230:	f000 8122 	beq.w	8007478 <_svfprintf_r+0x904>
 8007234:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007238:	1ac7      	subs	r7, r0, r3
 800723a:	2f00      	cmp	r7, #0
 800723c:	dd32      	ble.n	80072a4 <_svfprintf_r+0x730>
 800723e:	2f10      	cmp	r7, #16
 8007240:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007242:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8007470 <_svfprintf_r+0x8fc>
 8007246:	dd22      	ble.n	800728e <_svfprintf_r+0x71a>
 8007248:	4623      	mov	r3, r4
 800724a:	f04f 0910 	mov.w	r9, #16
 800724e:	4644      	mov	r4, r8
 8007250:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8007254:	e003      	b.n	800725e <_svfprintf_r+0x6ea>
 8007256:	3f10      	subs	r7, #16
 8007258:	3608      	adds	r6, #8
 800725a:	2f10      	cmp	r7, #16
 800725c:	dd15      	ble.n	800728a <_svfprintf_r+0x716>
 800725e:	3301      	adds	r3, #1
 8007260:	3510      	adds	r5, #16
 8007262:	2b07      	cmp	r3, #7
 8007264:	e886 0210 	stmia.w	r6, {r4, r9}
 8007268:	953b      	str	r5, [sp, #236]	; 0xec
 800726a:	933a      	str	r3, [sp, #232]	; 0xe8
 800726c:	ddf3      	ble.n	8007256 <_svfprintf_r+0x6e2>
 800726e:	4640      	mov	r0, r8
 8007270:	4651      	mov	r1, sl
 8007272:	465a      	mov	r2, fp
 8007274:	f002 ffee 	bl	800a254 <__ssprint_r>
 8007278:	2800      	cmp	r0, #0
 800727a:	f47f ad52 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 800727e:	3f10      	subs	r7, #16
 8007280:	2f10      	cmp	r7, #16
 8007282:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007284:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8007286:	ae1f      	add	r6, sp, #124	; 0x7c
 8007288:	dce9      	bgt.n	800725e <_svfprintf_r+0x6ea>
 800728a:	46a0      	mov	r8, r4
 800728c:	461c      	mov	r4, r3
 800728e:	3401      	adds	r4, #1
 8007290:	19ed      	adds	r5, r5, r7
 8007292:	2c07      	cmp	r4, #7
 8007294:	f8c6 8000 	str.w	r8, [r6]
 8007298:	6077      	str	r7, [r6, #4]
 800729a:	953b      	str	r5, [sp, #236]	; 0xec
 800729c:	943a      	str	r4, [sp, #232]	; 0xe8
 800729e:	f300 8194 	bgt.w	80075ca <_svfprintf_r+0xa56>
 80072a2:	3608      	adds	r6, #8
 80072a4:	9908      	ldr	r1, [sp, #32]
 80072a6:	05ca      	lsls	r2, r1, #23
 80072a8:	d472      	bmi.n	8007390 <_svfprintf_r+0x81c>
 80072aa:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80072ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80072b0:	6073      	str	r3, [r6, #4]
 80072b2:	3401      	adds	r4, #1
 80072b4:	18ed      	adds	r5, r5, r3
 80072b6:	2c07      	cmp	r4, #7
 80072b8:	6032      	str	r2, [r6, #0]
 80072ba:	953b      	str	r5, [sp, #236]	; 0xec
 80072bc:	943a      	str	r4, [sp, #232]	; 0xe8
 80072be:	dc5c      	bgt.n	800737a <_svfprintf_r+0x806>
 80072c0:	3608      	adds	r6, #8
 80072c2:	9908      	ldr	r1, [sp, #32]
 80072c4:	074b      	lsls	r3, r1, #29
 80072c6:	d53e      	bpl.n	8007346 <_svfprintf_r+0x7d2>
 80072c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072cc:	1ad7      	subs	r7, r2, r3
 80072ce:	2f00      	cmp	r7, #0
 80072d0:	dd39      	ble.n	8007346 <_svfprintf_r+0x7d2>
 80072d2:	2f10      	cmp	r7, #16
 80072d4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80072d6:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8007474 <_svfprintf_r+0x900>
 80072da:	dd22      	ble.n	8007322 <_svfprintf_r+0x7ae>
 80072dc:	4623      	mov	r3, r4
 80072de:	f04f 0910 	mov.w	r9, #16
 80072e2:	4644      	mov	r4, r8
 80072e4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80072e8:	e003      	b.n	80072f2 <_svfprintf_r+0x77e>
 80072ea:	3f10      	subs	r7, #16
 80072ec:	3608      	adds	r6, #8
 80072ee:	2f10      	cmp	r7, #16
 80072f0:	dd15      	ble.n	800731e <_svfprintf_r+0x7aa>
 80072f2:	3301      	adds	r3, #1
 80072f4:	3510      	adds	r5, #16
 80072f6:	2b07      	cmp	r3, #7
 80072f8:	e886 0210 	stmia.w	r6, {r4, r9}
 80072fc:	953b      	str	r5, [sp, #236]	; 0xec
 80072fe:	933a      	str	r3, [sp, #232]	; 0xe8
 8007300:	ddf3      	ble.n	80072ea <_svfprintf_r+0x776>
 8007302:	4640      	mov	r0, r8
 8007304:	4651      	mov	r1, sl
 8007306:	465a      	mov	r2, fp
 8007308:	f002 ffa4 	bl	800a254 <__ssprint_r>
 800730c:	2800      	cmp	r0, #0
 800730e:	f47f ad08 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 8007312:	3f10      	subs	r7, #16
 8007314:	2f10      	cmp	r7, #16
 8007316:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007318:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800731a:	ae1f      	add	r6, sp, #124	; 0x7c
 800731c:	dce9      	bgt.n	80072f2 <_svfprintf_r+0x77e>
 800731e:	46a0      	mov	r8, r4
 8007320:	461c      	mov	r4, r3
 8007322:	3401      	adds	r4, #1
 8007324:	197d      	adds	r5, r7, r5
 8007326:	2c07      	cmp	r4, #7
 8007328:	f8c6 8000 	str.w	r8, [r6]
 800732c:	6077      	str	r7, [r6, #4]
 800732e:	953b      	str	r5, [sp, #236]	; 0xec
 8007330:	943a      	str	r4, [sp, #232]	; 0xe8
 8007332:	dd08      	ble.n	8007346 <_svfprintf_r+0x7d2>
 8007334:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007336:	4651      	mov	r1, sl
 8007338:	465a      	mov	r2, fp
 800733a:	f002 ff8b 	bl	800a254 <__ssprint_r>
 800733e:	2800      	cmp	r0, #0
 8007340:	f47f acef 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 8007344:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007346:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800734a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800734c:	428a      	cmp	r2, r1
 800734e:	bfac      	ite	ge
 8007350:	1880      	addge	r0, r0, r2
 8007352:	1840      	addlt	r0, r0, r1
 8007354:	900c      	str	r0, [sp, #48]	; 0x30
 8007356:	2d00      	cmp	r5, #0
 8007358:	f040 8129 	bne.w	80075ae <_svfprintf_r+0xa3a>
 800735c:	2300      	movs	r3, #0
 800735e:	933a      	str	r3, [sp, #232]	; 0xe8
 8007360:	ae1f      	add	r6, sp, #124	; 0x7c
 8007362:	e435      	b.n	8006bd0 <_svfprintf_r+0x5c>
 8007364:	46a0      	mov	r8, r4
 8007366:	461c      	mov	r4, r3
 8007368:	3401      	adds	r4, #1
 800736a:	19ed      	adds	r5, r5, r7
 800736c:	2c07      	cmp	r4, #7
 800736e:	f8c6 8000 	str.w	r8, [r6]
 8007372:	6077      	str	r7, [r6, #4]
 8007374:	953b      	str	r5, [sp, #236]	; 0xec
 8007376:	943a      	str	r4, [sp, #232]	; 0xe8
 8007378:	dda2      	ble.n	80072c0 <_svfprintf_r+0x74c>
 800737a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800737c:	4651      	mov	r1, sl
 800737e:	465a      	mov	r2, fp
 8007380:	f002 ff68 	bl	800a254 <__ssprint_r>
 8007384:	2800      	cmp	r0, #0
 8007386:	f47f accc 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 800738a:	ae1f      	add	r6, sp, #124	; 0x7c
 800738c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800738e:	e798      	b.n	80072c2 <_svfprintf_r+0x74e>
 8007390:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007392:	2865      	cmp	r0, #101	; 0x65
 8007394:	f340 80aa 	ble.w	80074ec <_svfprintf_r+0x978>
 8007398:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800739c:	2200      	movs	r2, #0
 800739e:	2300      	movs	r3, #0
 80073a0:	f004 fb16 	bl	800b9d0 <__aeabi_dcmpeq>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	f000 8131 	beq.w	800760c <_svfprintf_r+0xa98>
 80073aa:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80073ac:	4b2f      	ldr	r3, [pc, #188]	; (800746c <_svfprintf_r+0x8f8>)
 80073ae:	3401      	adds	r4, #1
 80073b0:	6033      	str	r3, [r6, #0]
 80073b2:	3501      	adds	r5, #1
 80073b4:	2301      	movs	r3, #1
 80073b6:	2c07      	cmp	r4, #7
 80073b8:	6073      	str	r3, [r6, #4]
 80073ba:	953b      	str	r5, [sp, #236]	; 0xec
 80073bc:	943a      	str	r4, [sp, #232]	; 0xe8
 80073be:	f300 82b8 	bgt.w	8007932 <_svfprintf_r+0xdbe>
 80073c2:	3608      	adds	r6, #8
 80073c4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80073c6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80073c8:	4299      	cmp	r1, r3
 80073ca:	dc03      	bgt.n	80073d4 <_svfprintf_r+0x860>
 80073cc:	9a08      	ldr	r2, [sp, #32]
 80073ce:	07d3      	lsls	r3, r2, #31
 80073d0:	f57f af77 	bpl.w	80072c2 <_svfprintf_r+0x74e>
 80073d4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80073d6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80073d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073da:	6070      	str	r0, [r6, #4]
 80073dc:	3401      	adds	r4, #1
 80073de:	182d      	adds	r5, r5, r0
 80073e0:	2c07      	cmp	r4, #7
 80073e2:	6033      	str	r3, [r6, #0]
 80073e4:	953b      	str	r5, [sp, #236]	; 0xec
 80073e6:	943a      	str	r4, [sp, #232]	; 0xe8
 80073e8:	f300 8300 	bgt.w	80079ec <_svfprintf_r+0xe78>
 80073ec:	3608      	adds	r6, #8
 80073ee:	9910      	ldr	r1, [sp, #64]	; 0x40
 80073f0:	1e4f      	subs	r7, r1, #1
 80073f2:	2f00      	cmp	r7, #0
 80073f4:	f77f af65 	ble.w	80072c2 <_svfprintf_r+0x74e>
 80073f8:	2f10      	cmp	r7, #16
 80073fa:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80073fc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8007470 <_svfprintf_r+0x8fc>
 8007400:	ddb2      	ble.n	8007368 <_svfprintf_r+0x7f4>
 8007402:	4623      	mov	r3, r4
 8007404:	f04f 0910 	mov.w	r9, #16
 8007408:	4644      	mov	r4, r8
 800740a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800740e:	e003      	b.n	8007418 <_svfprintf_r+0x8a4>
 8007410:	3608      	adds	r6, #8
 8007412:	3f10      	subs	r7, #16
 8007414:	2f10      	cmp	r7, #16
 8007416:	dda5      	ble.n	8007364 <_svfprintf_r+0x7f0>
 8007418:	3301      	adds	r3, #1
 800741a:	3510      	adds	r5, #16
 800741c:	2b07      	cmp	r3, #7
 800741e:	e886 0210 	stmia.w	r6, {r4, r9}
 8007422:	953b      	str	r5, [sp, #236]	; 0xec
 8007424:	933a      	str	r3, [sp, #232]	; 0xe8
 8007426:	ddf3      	ble.n	8007410 <_svfprintf_r+0x89c>
 8007428:	4640      	mov	r0, r8
 800742a:	4651      	mov	r1, sl
 800742c:	465a      	mov	r2, fp
 800742e:	f002 ff11 	bl	800a254 <__ssprint_r>
 8007432:	2800      	cmp	r0, #0
 8007434:	f47f ac75 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 8007438:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800743a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800743c:	ae1f      	add	r6, sp, #124	; 0x7c
 800743e:	e7e8      	b.n	8007412 <_svfprintf_r+0x89e>
 8007440:	2a00      	cmp	r2, #0
 8007442:	f040 80be 	bne.w	80075c2 <_svfprintf_r+0xa4e>
 8007446:	9808      	ldr	r0, [sp, #32]
 8007448:	07c1      	lsls	r1, r0, #31
 800744a:	bf5c      	itt	pl
 800744c:	920d      	strpl	r2, [sp, #52]	; 0x34
 800744e:	f8cd b044 	strpl.w	fp, [sp, #68]	; 0x44
 8007452:	f57f acf3 	bpl.w	8006e3c <_svfprintf_r+0x2c8>
 8007456:	991d      	ldr	r1, [sp, #116]	; 0x74
 8007458:	2330      	movs	r3, #48	; 0x30
 800745a:	f10d 02e3 	add.w	r2, sp, #227	; 0xe3
 800745e:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8007462:	910d      	str	r1, [sp, #52]	; 0x34
 8007464:	9211      	str	r2, [sp, #68]	; 0x44
 8007466:	e4e9      	b.n	8006e3c <_svfprintf_r+0x2c8>
 8007468:	0800be24 	.word	0x0800be24
 800746c:	0800be40 	.word	0x0800be40
 8007470:	0800bc60 	.word	0x0800bc60
 8007474:	0800bc50 	.word	0x0800bc50
 8007478:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800747a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800747c:	1a47      	subs	r7, r0, r1
 800747e:	2f00      	cmp	r7, #0
 8007480:	f77f aed8 	ble.w	8007234 <_svfprintf_r+0x6c0>
 8007484:	2f10      	cmp	r7, #16
 8007486:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007488:	f8df 86d8 	ldr.w	r8, [pc, #1752]	; 8007b64 <_svfprintf_r+0xff0>
 800748c:	dd22      	ble.n	80074d4 <_svfprintf_r+0x960>
 800748e:	4623      	mov	r3, r4
 8007490:	f04f 0910 	mov.w	r9, #16
 8007494:	4644      	mov	r4, r8
 8007496:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800749a:	e003      	b.n	80074a4 <_svfprintf_r+0x930>
 800749c:	3f10      	subs	r7, #16
 800749e:	3608      	adds	r6, #8
 80074a0:	2f10      	cmp	r7, #16
 80074a2:	dd15      	ble.n	80074d0 <_svfprintf_r+0x95c>
 80074a4:	3301      	adds	r3, #1
 80074a6:	3510      	adds	r5, #16
 80074a8:	2b07      	cmp	r3, #7
 80074aa:	e886 0210 	stmia.w	r6, {r4, r9}
 80074ae:	953b      	str	r5, [sp, #236]	; 0xec
 80074b0:	933a      	str	r3, [sp, #232]	; 0xe8
 80074b2:	ddf3      	ble.n	800749c <_svfprintf_r+0x928>
 80074b4:	4640      	mov	r0, r8
 80074b6:	4651      	mov	r1, sl
 80074b8:	465a      	mov	r2, fp
 80074ba:	f002 fecb 	bl	800a254 <__ssprint_r>
 80074be:	2800      	cmp	r0, #0
 80074c0:	f47f ac2f 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 80074c4:	3f10      	subs	r7, #16
 80074c6:	2f10      	cmp	r7, #16
 80074c8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80074ca:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80074cc:	ae1f      	add	r6, sp, #124	; 0x7c
 80074ce:	dce9      	bgt.n	80074a4 <_svfprintf_r+0x930>
 80074d0:	46a0      	mov	r8, r4
 80074d2:	461c      	mov	r4, r3
 80074d4:	3401      	adds	r4, #1
 80074d6:	19ed      	adds	r5, r5, r7
 80074d8:	2c07      	cmp	r4, #7
 80074da:	f8c6 8000 	str.w	r8, [r6]
 80074de:	6077      	str	r7, [r6, #4]
 80074e0:	953b      	str	r5, [sp, #236]	; 0xec
 80074e2:	943a      	str	r4, [sp, #232]	; 0xe8
 80074e4:	f300 81df 	bgt.w	80078a6 <_svfprintf_r+0xd32>
 80074e8:	3608      	adds	r6, #8
 80074ea:	e6a3      	b.n	8007234 <_svfprintf_r+0x6c0>
 80074ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074ee:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80074f0:	2a01      	cmp	r2, #1
 80074f2:	f340 81a5 	ble.w	8007840 <_svfprintf_r+0xccc>
 80074f6:	3401      	adds	r4, #1
 80074f8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80074fa:	3501      	adds	r5, #1
 80074fc:	2301      	movs	r3, #1
 80074fe:	2c07      	cmp	r4, #7
 8007500:	6030      	str	r0, [r6, #0]
 8007502:	6073      	str	r3, [r6, #4]
 8007504:	953b      	str	r5, [sp, #236]	; 0xec
 8007506:	943a      	str	r4, [sp, #232]	; 0xe8
 8007508:	f300 81c1 	bgt.w	800788e <_svfprintf_r+0xd1a>
 800750c:	3608      	adds	r6, #8
 800750e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007510:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007512:	6071      	str	r1, [r6, #4]
 8007514:	3401      	adds	r4, #1
 8007516:	186d      	adds	r5, r5, r1
 8007518:	2c07      	cmp	r4, #7
 800751a:	6032      	str	r2, [r6, #0]
 800751c:	953b      	str	r5, [sp, #236]	; 0xec
 800751e:	943a      	str	r4, [sp, #232]	; 0xe8
 8007520:	f300 81a9 	bgt.w	8007876 <_svfprintf_r+0xd02>
 8007524:	3608      	adds	r6, #8
 8007526:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800752a:	2200      	movs	r2, #0
 800752c:	2300      	movs	r3, #0
 800752e:	f004 fa4f 	bl	800b9d0 <__aeabi_dcmpeq>
 8007532:	2800      	cmp	r0, #0
 8007534:	f040 80f6 	bne.w	8007724 <_svfprintf_r+0xbb0>
 8007538:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800753a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800753c:	1e5a      	subs	r2, r3, #1
 800753e:	3401      	adds	r4, #1
 8007540:	1c43      	adds	r3, r0, #1
 8007542:	18ad      	adds	r5, r5, r2
 8007544:	2c07      	cmp	r4, #7
 8007546:	6033      	str	r3, [r6, #0]
 8007548:	6072      	str	r2, [r6, #4]
 800754a:	953b      	str	r5, [sp, #236]	; 0xec
 800754c:	943a      	str	r4, [sp, #232]	; 0xe8
 800754e:	dc22      	bgt.n	8007596 <_svfprintf_r+0xa22>
 8007550:	3608      	adds	r6, #8
 8007552:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007554:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007556:	3401      	adds	r4, #1
 8007558:	18ed      	adds	r5, r5, r3
 800755a:	2c07      	cmp	r4, #7
 800755c:	ab3c      	add	r3, sp, #240	; 0xf0
 800755e:	6033      	str	r3, [r6, #0]
 8007560:	6070      	str	r0, [r6, #4]
 8007562:	953b      	str	r5, [sp, #236]	; 0xec
 8007564:	943a      	str	r4, [sp, #232]	; 0xe8
 8007566:	f77f aeab 	ble.w	80072c0 <_svfprintf_r+0x74c>
 800756a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800756c:	4651      	mov	r1, sl
 800756e:	465a      	mov	r2, fp
 8007570:	f002 fe70 	bl	800a254 <__ssprint_r>
 8007574:	2800      	cmp	r0, #0
 8007576:	f47f abd4 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 800757a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800757c:	ae1f      	add	r6, sp, #124	; 0x7c
 800757e:	e6a0      	b.n	80072c2 <_svfprintf_r+0x74e>
 8007580:	46a0      	mov	r8, r4
 8007582:	461c      	mov	r4, r3
 8007584:	3401      	adds	r4, #1
 8007586:	19ed      	adds	r5, r5, r7
 8007588:	2c07      	cmp	r4, #7
 800758a:	f8c6 8000 	str.w	r8, [r6]
 800758e:	6077      	str	r7, [r6, #4]
 8007590:	953b      	str	r5, [sp, #236]	; 0xec
 8007592:	943a      	str	r4, [sp, #232]	; 0xe8
 8007594:	dddc      	ble.n	8007550 <_svfprintf_r+0x9dc>
 8007596:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007598:	4651      	mov	r1, sl
 800759a:	465a      	mov	r2, fp
 800759c:	f002 fe5a 	bl	800a254 <__ssprint_r>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	f47f abbe 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 80075a6:	ae1f      	add	r6, sp, #124	; 0x7c
 80075a8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80075aa:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80075ac:	e7d1      	b.n	8007552 <_svfprintf_r+0x9de>
 80075ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80075b0:	4651      	mov	r1, sl
 80075b2:	465a      	mov	r2, fp
 80075b4:	f002 fe4e 	bl	800a254 <__ssprint_r>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	f43f aecf 	beq.w	800735c <_svfprintf_r+0x7e8>
 80075be:	f7ff bbb0 	b.w	8006d22 <_svfprintf_r+0x1ae>
 80075c2:	910d      	str	r1, [sp, #52]	; 0x34
 80075c4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80075c8:	e438      	b.n	8006e3c <_svfprintf_r+0x2c8>
 80075ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80075cc:	4651      	mov	r1, sl
 80075ce:	465a      	mov	r2, fp
 80075d0:	f002 fe40 	bl	800a254 <__ssprint_r>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	f47f aba4 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 80075da:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80075dc:	ae1f      	add	r6, sp, #124	; 0x7c
 80075de:	e661      	b.n	80072a4 <_svfprintf_r+0x730>
 80075e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80075e2:	4651      	mov	r1, sl
 80075e4:	465a      	mov	r2, fp
 80075e6:	f002 fe35 	bl	800a254 <__ssprint_r>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	f47f ab99 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 80075f0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80075f2:	ae1f      	add	r6, sp, #124	; 0x7c
 80075f4:	e61a      	b.n	800722c <_svfprintf_r+0x6b8>
 80075f6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80075f8:	4651      	mov	r1, sl
 80075fa:	465a      	mov	r2, fp
 80075fc:	f002 fe2a 	bl	800a254 <__ssprint_r>
 8007600:	2800      	cmp	r0, #0
 8007602:	f47f ab8e 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 8007606:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007608:	ae1f      	add	r6, sp, #124	; 0x7c
 800760a:	e600      	b.n	800720e <_svfprintf_r+0x69a>
 800760c:	9f40      	ldr	r7, [sp, #256]	; 0x100
 800760e:	2f00      	cmp	r7, #0
 8007610:	f340 819a 	ble.w	8007948 <_svfprintf_r+0xdd4>
 8007614:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8007616:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007618:	9911      	ldr	r1, [sp, #68]	; 0x44
 800761a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800761c:	4287      	cmp	r7, r0
 800761e:	bfa8      	it	ge
 8007620:	4607      	movge	r7, r0
 8007622:	1889      	adds	r1, r1, r2
 8007624:	2f00      	cmp	r7, #0
 8007626:	910d      	str	r1, [sp, #52]	; 0x34
 8007628:	dd0b      	ble.n	8007642 <_svfprintf_r+0xace>
 800762a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800762c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800762e:	6077      	str	r7, [r6, #4]
 8007630:	3401      	adds	r4, #1
 8007632:	19ed      	adds	r5, r5, r7
 8007634:	2c07      	cmp	r4, #7
 8007636:	6032      	str	r2, [r6, #0]
 8007638:	953b      	str	r5, [sp, #236]	; 0xec
 800763a:	943a      	str	r4, [sp, #232]	; 0xe8
 800763c:	f300 8304 	bgt.w	8007c48 <_svfprintf_r+0x10d4>
 8007640:	3608      	adds	r6, #8
 8007642:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007644:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8007648:	1bdf      	subs	r7, r3, r7
 800764a:	2f00      	cmp	r7, #0
 800764c:	f340 80a0 	ble.w	8007790 <_svfprintf_r+0xc1c>
 8007650:	2f10      	cmp	r7, #16
 8007652:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007654:	f8df 850c 	ldr.w	r8, [pc, #1292]	; 8007b64 <_svfprintf_r+0xff0>
 8007658:	f340 815f 	ble.w	800791a <_svfprintf_r+0xda6>
 800765c:	4623      	mov	r3, r4
 800765e:	f04f 0910 	mov.w	r9, #16
 8007662:	4644      	mov	r4, r8
 8007664:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8007668:	e004      	b.n	8007674 <_svfprintf_r+0xb00>
 800766a:	3608      	adds	r6, #8
 800766c:	3f10      	subs	r7, #16
 800766e:	2f10      	cmp	r7, #16
 8007670:	f340 8151 	ble.w	8007916 <_svfprintf_r+0xda2>
 8007674:	3301      	adds	r3, #1
 8007676:	3510      	adds	r5, #16
 8007678:	2b07      	cmp	r3, #7
 800767a:	e886 0210 	stmia.w	r6, {r4, r9}
 800767e:	953b      	str	r5, [sp, #236]	; 0xec
 8007680:	933a      	str	r3, [sp, #232]	; 0xe8
 8007682:	ddf2      	ble.n	800766a <_svfprintf_r+0xaf6>
 8007684:	4640      	mov	r0, r8
 8007686:	4651      	mov	r1, sl
 8007688:	465a      	mov	r2, fp
 800768a:	f002 fde3 	bl	800a254 <__ssprint_r>
 800768e:	2800      	cmp	r0, #0
 8007690:	f47f ab47 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 8007694:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007696:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8007698:	ae1f      	add	r6, sp, #124	; 0x7c
 800769a:	e7e7      	b.n	800766c <_svfprintf_r+0xaf8>
 800769c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800769e:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 80076a2:	f003 000f 	and.w	r0, r3, #15
 80076a6:	460a      	mov	r2, r1
 80076a8:	5c28      	ldrb	r0, [r5, r0]
 80076aa:	3901      	subs	r1, #1
 80076ac:	091b      	lsrs	r3, r3, #4
 80076ae:	7010      	strb	r0, [r2, #0]
 80076b0:	d1f7      	bne.n	80076a2 <_svfprintf_r+0xb2e>
 80076b2:	ebc2 030b 	rsb	r3, r2, fp
 80076b6:	9211      	str	r2, [sp, #68]	; 0x44
 80076b8:	930d      	str	r3, [sp, #52]	; 0x34
 80076ba:	f7ff bbbf 	b.w	8006e3c <_svfprintf_r+0x2c8>
 80076be:	2b09      	cmp	r3, #9
 80076c0:	bf82      	ittt	hi
 80076c2:	f64c 45cd 	movwhi	r5, #52429	; 0xcccd
 80076c6:	f10d 01e3 	addhi.w	r1, sp, #227	; 0xe3
 80076ca:	f6cc 45cc 	movthi	r5, #52428	; 0xcccc
 80076ce:	d809      	bhi.n	80076e4 <_svfprintf_r+0xb70>
 80076d0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80076d2:	3330      	adds	r3, #48	; 0x30
 80076d4:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 80076d8:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 80076dc:	900d      	str	r0, [sp, #52]	; 0x34
 80076de:	9111      	str	r1, [sp, #68]	; 0x44
 80076e0:	f7ff bbac 	b.w	8006e3c <_svfprintf_r+0x2c8>
 80076e4:	fba5 0203 	umull	r0, r2, r5, r3
 80076e8:	08d2      	lsrs	r2, r2, #3
 80076ea:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 80076ee:	4608      	mov	r0, r1
 80076f0:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 80076f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076f8:	7001      	strb	r1, [r0, #0]
 80076fa:	4613      	mov	r3, r2
 80076fc:	1e41      	subs	r1, r0, #1
 80076fe:	2a00      	cmp	r2, #0
 8007700:	d1f0      	bne.n	80076e4 <_svfprintf_r+0xb70>
 8007702:	ebc0 030b 	rsb	r3, r0, fp
 8007706:	9011      	str	r0, [sp, #68]	; 0x44
 8007708:	930d      	str	r3, [sp, #52]	; 0x34
 800770a:	f7ff bb97 	b.w	8006e3c <_svfprintf_r+0x2c8>
 800770e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007710:	4651      	mov	r1, sl
 8007712:	465a      	mov	r2, fp
 8007714:	f002 fd9e 	bl	800a254 <__ssprint_r>
 8007718:	2800      	cmp	r0, #0
 800771a:	f47f ab02 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 800771e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007720:	ae1f      	add	r6, sp, #124	; 0x7c
 8007722:	e563      	b.n	80071ec <_svfprintf_r+0x678>
 8007724:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007726:	1e4f      	subs	r7, r1, #1
 8007728:	2f00      	cmp	r7, #0
 800772a:	f77f af12 	ble.w	8007552 <_svfprintf_r+0x9de>
 800772e:	2f10      	cmp	r7, #16
 8007730:	f8df 8430 	ldr.w	r8, [pc, #1072]	; 8007b64 <_svfprintf_r+0xff0>
 8007734:	f77f af26 	ble.w	8007584 <_svfprintf_r+0xa10>
 8007738:	4623      	mov	r3, r4
 800773a:	f04f 0910 	mov.w	r9, #16
 800773e:	4644      	mov	r4, r8
 8007740:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8007744:	e004      	b.n	8007750 <_svfprintf_r+0xbdc>
 8007746:	3608      	adds	r6, #8
 8007748:	3f10      	subs	r7, #16
 800774a:	2f10      	cmp	r7, #16
 800774c:	f77f af18 	ble.w	8007580 <_svfprintf_r+0xa0c>
 8007750:	3301      	adds	r3, #1
 8007752:	3510      	adds	r5, #16
 8007754:	2b07      	cmp	r3, #7
 8007756:	e886 0210 	stmia.w	r6, {r4, r9}
 800775a:	953b      	str	r5, [sp, #236]	; 0xec
 800775c:	933a      	str	r3, [sp, #232]	; 0xe8
 800775e:	ddf2      	ble.n	8007746 <_svfprintf_r+0xbd2>
 8007760:	4640      	mov	r0, r8
 8007762:	4651      	mov	r1, sl
 8007764:	465a      	mov	r2, fp
 8007766:	f002 fd75 	bl	800a254 <__ssprint_r>
 800776a:	2800      	cmp	r0, #0
 800776c:	f47f aad9 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 8007770:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007772:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8007774:	ae1f      	add	r6, sp, #124	; 0x7c
 8007776:	e7e7      	b.n	8007748 <_svfprintf_r+0xbd4>
 8007778:	2202      	movs	r2, #2
 800777a:	e405      	b.n	8006f88 <_svfprintf_r+0x414>
 800777c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800777e:	4651      	mov	r1, sl
 8007780:	465a      	mov	r2, fp
 8007782:	f002 fd67 	bl	800a254 <__ssprint_r>
 8007786:	2800      	cmp	r0, #0
 8007788:	f47f aacb 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 800778c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800778e:	ae1f      	add	r6, sp, #124	; 0x7c
 8007790:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8007792:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007794:	4298      	cmp	r0, r3
 8007796:	dc45      	bgt.n	8007824 <_svfprintf_r+0xcb0>
 8007798:	9908      	ldr	r1, [sp, #32]
 800779a:	07c9      	lsls	r1, r1, #31
 800779c:	d442      	bmi.n	8007824 <_svfprintf_r+0xcb0>
 800779e:	9911      	ldr	r1, [sp, #68]	; 0x44
 80077a0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80077a2:	180a      	adds	r2, r1, r0
 80077a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80077a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80077a8:	1a8f      	subs	r7, r1, r2
 80077aa:	1ac3      	subs	r3, r0, r3
 80077ac:	42bb      	cmp	r3, r7
 80077ae:	bfb8      	it	lt
 80077b0:	461f      	movlt	r7, r3
 80077b2:	2f00      	cmp	r7, #0
 80077b4:	dd0a      	ble.n	80077cc <_svfprintf_r+0xc58>
 80077b6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80077b8:	6032      	str	r2, [r6, #0]
 80077ba:	3401      	adds	r4, #1
 80077bc:	19ed      	adds	r5, r5, r7
 80077be:	2c07      	cmp	r4, #7
 80077c0:	6077      	str	r7, [r6, #4]
 80077c2:	953b      	str	r5, [sp, #236]	; 0xec
 80077c4:	943a      	str	r4, [sp, #232]	; 0xe8
 80077c6:	f300 8256 	bgt.w	8007c76 <_svfprintf_r+0x1102>
 80077ca:	3608      	adds	r6, #8
 80077cc:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 80077d0:	1bdf      	subs	r7, r3, r7
 80077d2:	2f00      	cmp	r7, #0
 80077d4:	f77f ad75 	ble.w	80072c2 <_svfprintf_r+0x74e>
 80077d8:	2f10      	cmp	r7, #16
 80077da:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80077dc:	f8df 8384 	ldr.w	r8, [pc, #900]	; 8007b64 <_svfprintf_r+0xff0>
 80077e0:	f77f adc2 	ble.w	8007368 <_svfprintf_r+0x7f4>
 80077e4:	4623      	mov	r3, r4
 80077e6:	f04f 0910 	mov.w	r9, #16
 80077ea:	4644      	mov	r4, r8
 80077ec:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80077f0:	e004      	b.n	80077fc <_svfprintf_r+0xc88>
 80077f2:	3608      	adds	r6, #8
 80077f4:	3f10      	subs	r7, #16
 80077f6:	2f10      	cmp	r7, #16
 80077f8:	f77f adb4 	ble.w	8007364 <_svfprintf_r+0x7f0>
 80077fc:	3301      	adds	r3, #1
 80077fe:	3510      	adds	r5, #16
 8007800:	2b07      	cmp	r3, #7
 8007802:	e886 0210 	stmia.w	r6, {r4, r9}
 8007806:	953b      	str	r5, [sp, #236]	; 0xec
 8007808:	933a      	str	r3, [sp, #232]	; 0xe8
 800780a:	ddf2      	ble.n	80077f2 <_svfprintf_r+0xc7e>
 800780c:	4640      	mov	r0, r8
 800780e:	4651      	mov	r1, sl
 8007810:	465a      	mov	r2, fp
 8007812:	f002 fd1f 	bl	800a254 <__ssprint_r>
 8007816:	2800      	cmp	r0, #0
 8007818:	f47f aa83 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 800781c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800781e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8007820:	ae1f      	add	r6, sp, #124	; 0x7c
 8007822:	e7e7      	b.n	80077f4 <_svfprintf_r+0xc80>
 8007824:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007826:	981a      	ldr	r0, [sp, #104]	; 0x68
 8007828:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800782a:	6070      	str	r0, [r6, #4]
 800782c:	3401      	adds	r4, #1
 800782e:	182d      	adds	r5, r5, r0
 8007830:	2c07      	cmp	r4, #7
 8007832:	6032      	str	r2, [r6, #0]
 8007834:	953b      	str	r5, [sp, #236]	; 0xec
 8007836:	943a      	str	r4, [sp, #232]	; 0xe8
 8007838:	f300 8211 	bgt.w	8007c5e <_svfprintf_r+0x10ea>
 800783c:	3608      	adds	r6, #8
 800783e:	e7ae      	b.n	800779e <_svfprintf_r+0xc2a>
 8007840:	9b08      	ldr	r3, [sp, #32]
 8007842:	07da      	lsls	r2, r3, #31
 8007844:	f53f ae57 	bmi.w	80074f6 <_svfprintf_r+0x982>
 8007848:	3401      	adds	r4, #1
 800784a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800784c:	3501      	adds	r5, #1
 800784e:	2301      	movs	r3, #1
 8007850:	2c07      	cmp	r4, #7
 8007852:	6032      	str	r2, [r6, #0]
 8007854:	6073      	str	r3, [r6, #4]
 8007856:	953b      	str	r5, [sp, #236]	; 0xec
 8007858:	943a      	str	r4, [sp, #232]	; 0xe8
 800785a:	f77f ae79 	ble.w	8007550 <_svfprintf_r+0x9dc>
 800785e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007860:	4651      	mov	r1, sl
 8007862:	465a      	mov	r2, fp
 8007864:	f002 fcf6 	bl	800a254 <__ssprint_r>
 8007868:	2800      	cmp	r0, #0
 800786a:	f47f aa5a 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 800786e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007870:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007872:	ae1f      	add	r6, sp, #124	; 0x7c
 8007874:	e66d      	b.n	8007552 <_svfprintf_r+0x9de>
 8007876:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007878:	4651      	mov	r1, sl
 800787a:	465a      	mov	r2, fp
 800787c:	f002 fcea 	bl	800a254 <__ssprint_r>
 8007880:	2800      	cmp	r0, #0
 8007882:	f47f aa4e 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 8007886:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007888:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800788a:	ae1f      	add	r6, sp, #124	; 0x7c
 800788c:	e64b      	b.n	8007526 <_svfprintf_r+0x9b2>
 800788e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007890:	4651      	mov	r1, sl
 8007892:	465a      	mov	r2, fp
 8007894:	f002 fcde 	bl	800a254 <__ssprint_r>
 8007898:	2800      	cmp	r0, #0
 800789a:	f47f aa42 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 800789e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80078a0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80078a2:	ae1f      	add	r6, sp, #124	; 0x7c
 80078a4:	e633      	b.n	800750e <_svfprintf_r+0x99a>
 80078a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80078a8:	4651      	mov	r1, sl
 80078aa:	465a      	mov	r2, fp
 80078ac:	f002 fcd2 	bl	800a254 <__ssprint_r>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	f47f aa36 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 80078b6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80078b8:	ae1f      	add	r6, sp, #124	; 0x7c
 80078ba:	e4bb      	b.n	8007234 <_svfprintf_r+0x6c0>
 80078bc:	f002 fb62 	bl	8009f84 <__fpclassifyd>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	f040 809e 	bne.w	8007a02 <_svfprintf_r+0xe8e>
 80078c6:	2203      	movs	r2, #3
 80078c8:	9012      	str	r0, [sp, #72]	; 0x48
 80078ca:	4ba3      	ldr	r3, [pc, #652]	; (8007b58 <_svfprintf_r+0xfe4>)
 80078cc:	920a      	str	r2, [sp, #40]	; 0x28
 80078ce:	9815      	ldr	r0, [sp, #84]	; 0x54
 80078d0:	4aa2      	ldr	r2, [pc, #648]	; (8007b5c <_svfprintf_r+0xfe8>)
 80078d2:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80078d6:	2847      	cmp	r0, #71	; 0x47
 80078d8:	bfd8      	it	le
 80078da:	461a      	movle	r2, r3
 80078dc:	9211      	str	r2, [sp, #68]	; 0x44
 80078de:	2303      	movs	r3, #3
 80078e0:	9a08      	ldr	r2, [sp, #32]
 80078e2:	930d      	str	r3, [sp, #52]	; 0x34
 80078e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078ea:	9208      	str	r2, [sp, #32]
 80078ec:	9316      	str	r3, [sp, #88]	; 0x58
 80078ee:	f7ff baaf 	b.w	8006e50 <_svfprintf_r+0x2dc>
 80078f2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80078f4:	2201      	movs	r2, #1
 80078f6:	680b      	ldr	r3, [r1, #0]
 80078f8:	e414      	b.n	8007124 <_svfprintf_r+0x5b0>
 80078fa:	9b08      	ldr	r3, [sp, #32]
 80078fc:	065f      	lsls	r7, r3, #25
 80078fe:	d56d      	bpl.n	80079dc <_svfprintf_r+0xe68>
 8007900:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007902:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007904:	6803      	ldr	r3, [r0, #0]
 8007906:	3004      	adds	r0, #4
 8007908:	900e      	str	r0, [sp, #56]	; 0x38
 800790a:	8019      	strh	r1, [r3, #0]
 800790c:	f7ff b960 	b.w	8006bd0 <_svfprintf_r+0x5c>
 8007910:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007912:	680b      	ldr	r3, [r1, #0]
 8007914:	e406      	b.n	8007124 <_svfprintf_r+0x5b0>
 8007916:	46a0      	mov	r8, r4
 8007918:	461c      	mov	r4, r3
 800791a:	3401      	adds	r4, #1
 800791c:	19ed      	adds	r5, r5, r7
 800791e:	2c07      	cmp	r4, #7
 8007920:	f8c6 8000 	str.w	r8, [r6]
 8007924:	6077      	str	r7, [r6, #4]
 8007926:	953b      	str	r5, [sp, #236]	; 0xec
 8007928:	943a      	str	r4, [sp, #232]	; 0xe8
 800792a:	f73f af27 	bgt.w	800777c <_svfprintf_r+0xc08>
 800792e:	3608      	adds	r6, #8
 8007930:	e72e      	b.n	8007790 <_svfprintf_r+0xc1c>
 8007932:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007934:	4651      	mov	r1, sl
 8007936:	465a      	mov	r2, fp
 8007938:	f002 fc8c 	bl	800a254 <__ssprint_r>
 800793c:	2800      	cmp	r0, #0
 800793e:	f47f a9f0 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 8007942:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007944:	ae1f      	add	r6, sp, #124	; 0x7c
 8007946:	e53d      	b.n	80073c4 <_svfprintf_r+0x850>
 8007948:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800794a:	4b85      	ldr	r3, [pc, #532]	; (8007b60 <_svfprintf_r+0xfec>)
 800794c:	3401      	adds	r4, #1
 800794e:	6033      	str	r3, [r6, #0]
 8007950:	3501      	adds	r5, #1
 8007952:	2301      	movs	r3, #1
 8007954:	2c07      	cmp	r4, #7
 8007956:	6073      	str	r3, [r6, #4]
 8007958:	953b      	str	r5, [sp, #236]	; 0xec
 800795a:	943a      	str	r4, [sp, #232]	; 0xe8
 800795c:	f300 8139 	bgt.w	8007bd2 <_svfprintf_r+0x105e>
 8007960:	3608      	adds	r6, #8
 8007962:	b92f      	cbnz	r7, 8007970 <_svfprintf_r+0xdfc>
 8007964:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007966:	b91a      	cbnz	r2, 8007970 <_svfprintf_r+0xdfc>
 8007968:	9b08      	ldr	r3, [sp, #32]
 800796a:	07d8      	lsls	r0, r3, #31
 800796c:	f57f aca9 	bpl.w	80072c2 <_svfprintf_r+0x74e>
 8007970:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007972:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007974:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007976:	6071      	str	r1, [r6, #4]
 8007978:	3401      	adds	r4, #1
 800797a:	186d      	adds	r5, r5, r1
 800797c:	2c07      	cmp	r4, #7
 800797e:	6030      	str	r0, [r6, #0]
 8007980:	953b      	str	r5, [sp, #236]	; 0xec
 8007982:	943a      	str	r4, [sp, #232]	; 0xe8
 8007984:	f300 81d2 	bgt.w	8007d2c <_svfprintf_r+0x11b8>
 8007988:	3608      	adds	r6, #8
 800798a:	427f      	negs	r7, r7
 800798c:	2f00      	cmp	r7, #0
 800798e:	f340 8141 	ble.w	8007c14 <_svfprintf_r+0x10a0>
 8007992:	2f10      	cmp	r7, #16
 8007994:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8007b64 <_svfprintf_r+0xff0>
 8007998:	f340 8183 	ble.w	8007ca2 <_svfprintf_r+0x112e>
 800799c:	4623      	mov	r3, r4
 800799e:	f04f 0910 	mov.w	r9, #16
 80079a2:	4644      	mov	r4, r8
 80079a4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80079a8:	e004      	b.n	80079b4 <_svfprintf_r+0xe40>
 80079aa:	3608      	adds	r6, #8
 80079ac:	3f10      	subs	r7, #16
 80079ae:	2f10      	cmp	r7, #16
 80079b0:	f340 8175 	ble.w	8007c9e <_svfprintf_r+0x112a>
 80079b4:	3301      	adds	r3, #1
 80079b6:	3510      	adds	r5, #16
 80079b8:	2b07      	cmp	r3, #7
 80079ba:	e886 0210 	stmia.w	r6, {r4, r9}
 80079be:	953b      	str	r5, [sp, #236]	; 0xec
 80079c0:	933a      	str	r3, [sp, #232]	; 0xe8
 80079c2:	ddf2      	ble.n	80079aa <_svfprintf_r+0xe36>
 80079c4:	4640      	mov	r0, r8
 80079c6:	4651      	mov	r1, sl
 80079c8:	465a      	mov	r2, fp
 80079ca:	f002 fc43 	bl	800a254 <__ssprint_r>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	f47f a9a7 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 80079d4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80079d6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80079d8:	ae1f      	add	r6, sp, #124	; 0x7c
 80079da:	e7e7      	b.n	80079ac <_svfprintf_r+0xe38>
 80079dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80079e0:	6813      	ldr	r3, [r2, #0]
 80079e2:	3204      	adds	r2, #4
 80079e4:	920e      	str	r2, [sp, #56]	; 0x38
 80079e6:	6018      	str	r0, [r3, #0]
 80079e8:	f7ff b8f2 	b.w	8006bd0 <_svfprintf_r+0x5c>
 80079ec:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80079ee:	4651      	mov	r1, sl
 80079f0:	465a      	mov	r2, fp
 80079f2:	f002 fc2f 	bl	800a254 <__ssprint_r>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	f47f a993 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 80079fc:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80079fe:	ae1f      	add	r6, sp, #124	; 0x7c
 8007a00:	e4f5      	b.n	80073ee <_svfprintf_r+0x87a>
 8007a02:	1c60      	adds	r0, r4, #1
 8007a04:	f000 80f1 	beq.w	8007bea <_svfprintf_r+0x1076>
 8007a08:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007a0a:	2967      	cmp	r1, #103	; 0x67
 8007a0c:	bf18      	it	ne
 8007a0e:	2947      	cmpne	r1, #71	; 0x47
 8007a10:	bf14      	ite	ne
 8007a12:	2300      	movne	r3, #0
 8007a14:	2301      	moveq	r3, #1
 8007a16:	bf18      	it	ne
 8007a18:	930a      	strne	r3, [sp, #40]	; 0x28
 8007a1a:	d104      	bne.n	8007a26 <_svfprintf_r+0xeb2>
 8007a1c:	2c00      	cmp	r4, #0
 8007a1e:	f000 81ad 	beq.w	8007d7c <_svfprintf_r+0x1208>
 8007a22:	2201      	movs	r2, #1
 8007a24:	920a      	str	r2, [sp, #40]	; 0x28
 8007a26:	9808      	ldr	r0, [sp, #32]
 8007a28:	2d00      	cmp	r5, #0
 8007a2a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8007a2e:	9008      	str	r0, [sp, #32]
 8007a30:	f2c0 8189 	blt.w	8007d46 <_svfprintf_r+0x11d2>
 8007a34:	2200      	movs	r2, #0
 8007a36:	9212      	str	r2, [sp, #72]	; 0x48
 8007a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a3a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007a3c:	f1a3 0166 	sub.w	r1, r3, #102	; 0x66
 8007a40:	424b      	negs	r3, r1
 8007a42:	eb43 0301 	adc.w	r3, r3, r1
 8007a46:	469c      	mov	ip, r3
 8007a48:	2846      	cmp	r0, #70	; 0x46
 8007a4a:	bf08      	it	eq
 8007a4c:	f04c 0c01 	orreq.w	ip, ip, #1
 8007a50:	930d      	str	r3, [sp, #52]	; 0x34
 8007a52:	46a1      	mov	r9, r4
 8007a54:	2103      	movs	r1, #3
 8007a56:	f1bc 0f00 	cmp.w	ip, #0
 8007a5a:	d107      	bne.n	8007a6c <_svfprintf_r+0xef8>
 8007a5c:	2865      	cmp	r0, #101	; 0x65
 8007a5e:	bf18      	it	ne
 8007a60:	2845      	cmpne	r0, #69	; 0x45
 8007a62:	bf0c      	ite	eq
 8007a64:	f104 0901 	addeq.w	r9, r4, #1
 8007a68:	46a1      	movne	r9, r4
 8007a6a:	2102      	movs	r1, #2
 8007a6c:	e88d 0202 	stmia.w	sp, {r1, r9}
 8007a70:	a940      	add	r1, sp, #256	; 0x100
 8007a72:	9102      	str	r1, [sp, #8]
 8007a74:	a941      	add	r1, sp, #260	; 0x104
 8007a76:	9103      	str	r1, [sp, #12]
 8007a78:	4642      	mov	r2, r8
 8007a7a:	a942      	add	r1, sp, #264	; 0x108
 8007a7c:	462b      	mov	r3, r5
 8007a7e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007a80:	9104      	str	r1, [sp, #16]
 8007a82:	f8cd c018 	str.w	ip, [sp, #24]
 8007a86:	f000 fa6b 	bl	8007f60 <_dtoa_r>
 8007a8a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007a8c:	9011      	str	r0, [sp, #68]	; 0x44
 8007a8e:	2947      	cmp	r1, #71	; 0x47
 8007a90:	bf18      	it	ne
 8007a92:	2967      	cmpne	r1, #103	; 0x67
 8007a94:	f8dd c018 	ldr.w	ip, [sp, #24]
 8007a98:	d104      	bne.n	8007aa4 <_svfprintf_r+0xf30>
 8007a9a:	9a08      	ldr	r2, [sp, #32]
 8007a9c:	07d2      	lsls	r2, r2, #31
 8007a9e:	bf58      	it	pl
 8007aa0:	9f42      	ldrpl	r7, [sp, #264]	; 0x108
 8007aa2:	d515      	bpl.n	8007ad0 <_svfprintf_r+0xf5c>
 8007aa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007aa6:	eb03 0709 	add.w	r7, r3, r9
 8007aaa:	f1bc 0f00 	cmp.w	ip, #0
 8007aae:	d005      	beq.n	8007abc <_svfprintf_r+0xf48>
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2b30      	cmp	r3, #48	; 0x30
 8007ab4:	f000 8165 	beq.w	8007d82 <_svfprintf_r+0x120e>
 8007ab8:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8007aba:	18ff      	adds	r7, r7, r3
 8007abc:	4640      	mov	r0, r8
 8007abe:	4629      	mov	r1, r5
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f003 ff84 	bl	800b9d0 <__aeabi_dcmpeq>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	f000 8117 	beq.w	8007cfc <_svfprintf_r+0x1188>
 8007ace:	9742      	str	r7, [sp, #264]	; 0x108
 8007ad0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007ad2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ad4:	1a3f      	subs	r7, r7, r0
 8007ad6:	9710      	str	r7, [sp, #64]	; 0x40
 8007ad8:	2900      	cmp	r1, #0
 8007ada:	f000 80f9 	beq.w	8007cd0 <_svfprintf_r+0x115c>
 8007ade:	9940      	ldr	r1, [sp, #256]	; 0x100
 8007ae0:	1ccb      	adds	r3, r1, #3
 8007ae2:	db02      	blt.n	8007aea <_svfprintf_r+0xf76>
 8007ae4:	428c      	cmp	r4, r1
 8007ae6:	f280 80fa 	bge.w	8007cde <_svfprintf_r+0x116a>
 8007aea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007aec:	3a02      	subs	r2, #2
 8007aee:	9215      	str	r2, [sp, #84]	; 0x54
 8007af0:	3901      	subs	r1, #1
 8007af2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007af4:	9140      	str	r1, [sp, #256]	; 0x100
 8007af6:	2900      	cmp	r1, #0
 8007af8:	f88d 00f0 	strb.w	r0, [sp, #240]	; 0xf0
 8007afc:	f2c0 815d 	blt.w	8007dba <_svfprintf_r+0x1246>
 8007b00:	232b      	movs	r3, #43	; 0x2b
 8007b02:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8007b06:	2909      	cmp	r1, #9
 8007b08:	f340 8122 	ble.w	8007d50 <_svfprintf_r+0x11dc>
 8007b0c:	f10d 07ff 	add.w	r7, sp, #255	; 0xff
 8007b10:	f246 6467 	movw	r4, #26215	; 0x6667
 8007b14:	4638      	mov	r0, r7
 8007b16:	f2c6 6466 	movt	r4, #26214	; 0x6666
 8007b1a:	fb84 3201 	smull	r3, r2, r4, r1
 8007b1e:	17cb      	asrs	r3, r1, #31
 8007b20:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8007b24:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007b28:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8007b2c:	3230      	adds	r2, #48	; 0x30
 8007b2e:	2b09      	cmp	r3, #9
 8007b30:	4605      	mov	r5, r0
 8007b32:	4619      	mov	r1, r3
 8007b34:	f800 2d01 	strb.w	r2, [r0, #-1]!
 8007b38:	dcef      	bgt.n	8007b1a <_svfprintf_r+0xfa6>
 8007b3a:	3130      	adds	r1, #48	; 0x30
 8007b3c:	1eaa      	subs	r2, r5, #2
 8007b3e:	b2c9      	uxtb	r1, r1
 8007b40:	42ba      	cmp	r2, r7
 8007b42:	f805 1c02 	strb.w	r1, [r5, #-2]
 8007b46:	bf28      	it	cs
 8007b48:	f10d 01f2 	addcs.w	r1, sp, #242	; 0xf2
 8007b4c:	d213      	bcs.n	8007b76 <_svfprintf_r+0x1002>
 8007b4e:	f10d 03f2 	add.w	r3, sp, #242	; 0xf2
 8007b52:	f10d 00fe 	add.w	r0, sp, #254	; 0xfe
 8007b56:	e009      	b.n	8007b6c <_svfprintf_r+0xff8>
 8007b58:	0800be08 	.word	0x0800be08
 8007b5c:	0800be0c 	.word	0x0800be0c
 8007b60:	0800be40 	.word	0x0800be40
 8007b64:	0800bc60 	.word	0x0800bc60
 8007b68:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8007b6c:	f803 1b01 	strb.w	r1, [r3], #1
 8007b70:	4282      	cmp	r2, r0
 8007b72:	4619      	mov	r1, r3
 8007b74:	d1f8      	bne.n	8007b68 <_svfprintf_r+0xff4>
 8007b76:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007b78:	ab3c      	add	r3, sp, #240	; 0xf0
 8007b7a:	1acb      	subs	r3, r1, r3
 8007b7c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007b7e:	2801      	cmp	r0, #1
 8007b80:	4403      	add	r3, r0
 8007b82:	930d      	str	r3, [sp, #52]	; 0x34
 8007b84:	f340 8125 	ble.w	8007dd2 <_svfprintf_r+0x125e>
 8007b88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8007b90:	2100      	movs	r1, #0
 8007b92:	930d      	str	r3, [sp, #52]	; 0x34
 8007b94:	900a      	str	r0, [sp, #40]	; 0x28
 8007b96:	9116      	str	r1, [sp, #88]	; 0x58
 8007b98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b9a:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f43f a956 	beq.w	8006e50 <_svfprintf_r+0x2dc>
 8007ba4:	232d      	movs	r3, #45	; 0x2d
 8007ba6:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8007baa:	2300      	movs	r3, #0
 8007bac:	9312      	str	r3, [sp, #72]	; 0x48
 8007bae:	f7ff b950 	b.w	8006e52 <_svfprintf_r+0x2de>
 8007bb2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007bb4:	2140      	movs	r1, #64	; 0x40
 8007bb6:	f001 fa57 	bl	8009068 <_malloc_r>
 8007bba:	f8ca 0000 	str.w	r0, [sl]
 8007bbe:	f8ca 0010 	str.w	r0, [sl, #16]
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	f000 812b 	beq.w	8007e1e <_svfprintf_r+0x12aa>
 8007bc8:	2340      	movs	r3, #64	; 0x40
 8007bca:	f8ca 3014 	str.w	r3, [sl, #20]
 8007bce:	f7fe bfec 	b.w	8006baa <_svfprintf_r+0x36>
 8007bd2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007bd4:	4651      	mov	r1, sl
 8007bd6:	465a      	mov	r2, fp
 8007bd8:	f002 fb3c 	bl	800a254 <__ssprint_r>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	f47f a8a0 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 8007be2:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8007be4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007be6:	ae1f      	add	r6, sp, #124	; 0x7c
 8007be8:	e6bb      	b.n	8007962 <_svfprintf_r+0xdee>
 8007bea:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007bec:	2847      	cmp	r0, #71	; 0x47
 8007bee:	bf18      	it	ne
 8007bf0:	2867      	cmpne	r0, #103	; 0x67
 8007bf2:	bf14      	ite	ne
 8007bf4:	2000      	movne	r0, #0
 8007bf6:	2001      	moveq	r0, #1
 8007bf8:	900a      	str	r0, [sp, #40]	; 0x28
 8007bfa:	2406      	movs	r4, #6
 8007bfc:	e713      	b.n	8007a26 <_svfprintf_r+0xeb2>
 8007bfe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007c00:	4651      	mov	r1, sl
 8007c02:	465a      	mov	r2, fp
 8007c04:	f002 fb26 	bl	800a254 <__ssprint_r>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	f47f a88a 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 8007c0e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007c10:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007c12:	ae1f      	add	r6, sp, #124	; 0x7c
 8007c14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c18:	6072      	str	r2, [r6, #4]
 8007c1a:	3401      	adds	r4, #1
 8007c1c:	18ad      	adds	r5, r5, r2
 8007c1e:	2c07      	cmp	r4, #7
 8007c20:	6033      	str	r3, [r6, #0]
 8007c22:	953b      	str	r5, [sp, #236]	; 0xec
 8007c24:	943a      	str	r4, [sp, #232]	; 0xe8
 8007c26:	f77f ab4b 	ble.w	80072c0 <_svfprintf_r+0x74c>
 8007c2a:	f7ff bba6 	b.w	800737a <_svfprintf_r+0x806>
 8007c2e:	f002 fae1 	bl	800a1f4 <strlen>
 8007c32:	900d      	str	r0, [sp, #52]	; 0x34
 8007c34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007c38:	9512      	str	r5, [sp, #72]	; 0x48
 8007c3a:	900a      	str	r0, [sp, #40]	; 0x28
 8007c3c:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8007c40:	970e      	str	r7, [sp, #56]	; 0x38
 8007c42:	9516      	str	r5, [sp, #88]	; 0x58
 8007c44:	f7ff b904 	b.w	8006e50 <_svfprintf_r+0x2dc>
 8007c48:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007c4a:	4651      	mov	r1, sl
 8007c4c:	465a      	mov	r2, fp
 8007c4e:	f002 fb01 	bl	800a254 <__ssprint_r>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	f47f a865 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 8007c58:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007c5a:	ae1f      	add	r6, sp, #124	; 0x7c
 8007c5c:	e4f1      	b.n	8007642 <_svfprintf_r+0xace>
 8007c5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007c60:	4651      	mov	r1, sl
 8007c62:	465a      	mov	r2, fp
 8007c64:	f002 faf6 	bl	800a254 <__ssprint_r>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	f47f a85a 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 8007c6e:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8007c70:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007c72:	ae1f      	add	r6, sp, #124	; 0x7c
 8007c74:	e593      	b.n	800779e <_svfprintf_r+0xc2a>
 8007c76:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007c78:	4651      	mov	r1, sl
 8007c7a:	465a      	mov	r2, fp
 8007c7c:	f002 faea 	bl	800a254 <__ssprint_r>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	f47f a84e 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 8007c86:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8007c88:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007c8a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007c8c:	1acb      	subs	r3, r1, r3
 8007c8e:	ae1f      	add	r6, sp, #124	; 0x7c
 8007c90:	e59c      	b.n	80077cc <_svfprintf_r+0xc58>
 8007c92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c94:	ebc3 030b 	rsb	r3, r3, fp
 8007c98:	930d      	str	r3, [sp, #52]	; 0x34
 8007c9a:	f7ff b8cf 	b.w	8006e3c <_svfprintf_r+0x2c8>
 8007c9e:	46a0      	mov	r8, r4
 8007ca0:	461c      	mov	r4, r3
 8007ca2:	3401      	adds	r4, #1
 8007ca4:	19ed      	adds	r5, r5, r7
 8007ca6:	2c07      	cmp	r4, #7
 8007ca8:	f8c6 8000 	str.w	r8, [r6]
 8007cac:	6077      	str	r7, [r6, #4]
 8007cae:	953b      	str	r5, [sp, #236]	; 0xec
 8007cb0:	943a      	str	r4, [sp, #232]	; 0xe8
 8007cb2:	dca4      	bgt.n	8007bfe <_svfprintf_r+0x108a>
 8007cb4:	3608      	adds	r6, #8
 8007cb6:	e7ad      	b.n	8007c14 <_svfprintf_r+0x10a0>
 8007cb8:	2c06      	cmp	r4, #6
 8007cba:	bf28      	it	cs
 8007cbc:	2406      	movcs	r4, #6
 8007cbe:	495f      	ldr	r1, [pc, #380]	; (8007e3c <_svfprintf_r+0x12c8>)
 8007cc0:	940d      	str	r4, [sp, #52]	; 0x34
 8007cc2:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 8007cc6:	900a      	str	r0, [sp, #40]	; 0x28
 8007cc8:	970e      	str	r7, [sp, #56]	; 0x38
 8007cca:	9111      	str	r1, [sp, #68]	; 0x44
 8007ccc:	f7ff ba01 	b.w	80070d2 <_svfprintf_r+0x55e>
 8007cd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cd2:	2b65      	cmp	r3, #101	; 0x65
 8007cd4:	dd6f      	ble.n	8007db6 <_svfprintf_r+0x1242>
 8007cd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cd8:	9940      	ldr	r1, [sp, #256]	; 0x100
 8007cda:	2a00      	cmp	r2, #0
 8007cdc:	d15e      	bne.n	8007d9c <_svfprintf_r+0x1228>
 8007cde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ce0:	428a      	cmp	r2, r1
 8007ce2:	dc3d      	bgt.n	8007d60 <_svfprintf_r+0x11ec>
 8007ce4:	9b08      	ldr	r3, [sp, #32]
 8007ce6:	07da      	lsls	r2, r3, #31
 8007ce8:	d56c      	bpl.n	8007dc4 <_svfprintf_r+0x1250>
 8007cea:	1c4b      	adds	r3, r1, #1
 8007cec:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8007cf0:	2267      	movs	r2, #103	; 0x67
 8007cf2:	930d      	str	r3, [sp, #52]	; 0x34
 8007cf4:	900a      	str	r0, [sp, #40]	; 0x28
 8007cf6:	9215      	str	r2, [sp, #84]	; 0x54
 8007cf8:	9116      	str	r1, [sp, #88]	; 0x58
 8007cfa:	e74d      	b.n	8007b98 <_svfprintf_r+0x1024>
 8007cfc:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8007cfe:	429f      	cmp	r7, r3
 8007d00:	bf98      	it	ls
 8007d02:	461f      	movls	r7, r3
 8007d04:	f67f aee4 	bls.w	8007ad0 <_svfprintf_r+0xf5c>
 8007d08:	2230      	movs	r2, #48	; 0x30
 8007d0a:	f803 2b01 	strb.w	r2, [r3], #1
 8007d0e:	42bb      	cmp	r3, r7
 8007d10:	9342      	str	r3, [sp, #264]	; 0x108
 8007d12:	d1fa      	bne.n	8007d0a <_svfprintf_r+0x1196>
 8007d14:	e6dc      	b.n	8007ad0 <_svfprintf_r+0xf5c>
 8007d16:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 8007d1a:	9012      	str	r0, [sp, #72]	; 0x48
 8007d1c:	920a      	str	r2, [sp, #40]	; 0x28
 8007d1e:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8007d22:	970e      	str	r7, [sp, #56]	; 0x38
 8007d24:	940d      	str	r4, [sp, #52]	; 0x34
 8007d26:	9016      	str	r0, [sp, #88]	; 0x58
 8007d28:	f7ff b892 	b.w	8006e50 <_svfprintf_r+0x2dc>
 8007d2c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007d2e:	4651      	mov	r1, sl
 8007d30:	465a      	mov	r2, fp
 8007d32:	f002 fa8f 	bl	800a254 <__ssprint_r>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	f47e aff3 	bne.w	8006d22 <_svfprintf_r+0x1ae>
 8007d3c:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8007d3e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007d40:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007d42:	ae1f      	add	r6, sp, #124	; 0x7c
 8007d44:	e621      	b.n	800798a <_svfprintf_r+0xe16>
 8007d46:	212d      	movs	r1, #45	; 0x2d
 8007d48:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8007d4c:	9112      	str	r1, [sp, #72]	; 0x48
 8007d4e:	e673      	b.n	8007a38 <_svfprintf_r+0xec4>
 8007d50:	3130      	adds	r1, #48	; 0x30
 8007d52:	2330      	movs	r3, #48	; 0x30
 8007d54:	f88d 10f3 	strb.w	r1, [sp, #243]	; 0xf3
 8007d58:	f88d 30f2 	strb.w	r3, [sp, #242]	; 0xf2
 8007d5c:	a93d      	add	r1, sp, #244	; 0xf4
 8007d5e:	e70a      	b.n	8007b76 <_svfprintf_r+0x1002>
 8007d60:	2900      	cmp	r1, #0
 8007d62:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007d64:	bfd4      	ite	le
 8007d66:	f1c1 0302 	rsble	r3, r1, #2
 8007d6a:	2301      	movgt	r3, #1
 8007d6c:	181b      	adds	r3, r3, r0
 8007d6e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8007d72:	930d      	str	r3, [sp, #52]	; 0x34
 8007d74:	2367      	movs	r3, #103	; 0x67
 8007d76:	920a      	str	r2, [sp, #40]	; 0x28
 8007d78:	9315      	str	r3, [sp, #84]	; 0x54
 8007d7a:	e7bd      	b.n	8007cf8 <_svfprintf_r+0x1184>
 8007d7c:	2401      	movs	r4, #1
 8007d7e:	940a      	str	r4, [sp, #40]	; 0x28
 8007d80:	e651      	b.n	8007a26 <_svfprintf_r+0xeb2>
 8007d82:	4640      	mov	r0, r8
 8007d84:	4629      	mov	r1, r5
 8007d86:	2200      	movs	r2, #0
 8007d88:	2300      	movs	r3, #0
 8007d8a:	f003 fe21 	bl	800b9d0 <__aeabi_dcmpeq>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f47f ae92 	bne.w	8007ab8 <_svfprintf_r+0xf44>
 8007d94:	f1c9 0301 	rsb	r3, r9, #1
 8007d98:	9340      	str	r3, [sp, #256]	; 0x100
 8007d9a:	e68e      	b.n	8007aba <_svfprintf_r+0xf46>
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	dd38      	ble.n	8007e12 <_svfprintf_r+0x129e>
 8007da0:	bb74      	cbnz	r4, 8007e00 <_svfprintf_r+0x128c>
 8007da2:	9b08      	ldr	r3, [sp, #32]
 8007da4:	07dd      	lsls	r5, r3, #31
 8007da6:	d42b      	bmi.n	8007e00 <_svfprintf_r+0x128c>
 8007da8:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8007dac:	2266      	movs	r2, #102	; 0x66
 8007dae:	900a      	str	r0, [sp, #40]	; 0x28
 8007db0:	910d      	str	r1, [sp, #52]	; 0x34
 8007db2:	9215      	str	r2, [sp, #84]	; 0x54
 8007db4:	e7a0      	b.n	8007cf8 <_svfprintf_r+0x1184>
 8007db6:	9940      	ldr	r1, [sp, #256]	; 0x100
 8007db8:	e69a      	b.n	8007af0 <_svfprintf_r+0xf7c>
 8007dba:	232d      	movs	r3, #45	; 0x2d
 8007dbc:	4249      	negs	r1, r1
 8007dbe:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8007dc2:	e6a0      	b.n	8007b06 <_svfprintf_r+0xf92>
 8007dc4:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8007dc8:	2267      	movs	r2, #103	; 0x67
 8007dca:	900a      	str	r0, [sp, #40]	; 0x28
 8007dcc:	910d      	str	r1, [sp, #52]	; 0x34
 8007dce:	9215      	str	r2, [sp, #84]	; 0x54
 8007dd0:	e792      	b.n	8007cf8 <_svfprintf_r+0x1184>
 8007dd2:	9908      	ldr	r1, [sp, #32]
 8007dd4:	f011 0301 	ands.w	r3, r1, #1
 8007dd8:	f47f aed6 	bne.w	8007b88 <_svfprintf_r+0x1014>
 8007ddc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dde:	9316      	str	r3, [sp, #88]	; 0x58
 8007de0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8007de4:	920a      	str	r2, [sp, #40]	; 0x28
 8007de6:	e6d7      	b.n	8007b98 <_svfprintf_r+0x1024>
 8007de8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007dea:	680c      	ldr	r4, [r1, #0]
 8007dec:	1d0b      	adds	r3, r1, #4
 8007dee:	2c00      	cmp	r4, #0
 8007df0:	bfbc      	itt	lt
 8007df2:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007df4:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 8007df8:	f6bf a985 	bge.w	8007106 <_svfprintf_r+0x592>
 8007dfc:	f7fe bf18 	b.w	8006c30 <_svfprintf_r+0xbc>
 8007e00:	3401      	adds	r4, #1
 8007e02:	190c      	adds	r4, r1, r4
 8007e04:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8007e08:	2066      	movs	r0, #102	; 0x66
 8007e0a:	940d      	str	r4, [sp, #52]	; 0x34
 8007e0c:	930a      	str	r3, [sp, #40]	; 0x28
 8007e0e:	9015      	str	r0, [sp, #84]	; 0x54
 8007e10:	e772      	b.n	8007cf8 <_svfprintf_r+0x1184>
 8007e12:	b914      	cbnz	r4, 8007e1a <_svfprintf_r+0x12a6>
 8007e14:	9a08      	ldr	r2, [sp, #32]
 8007e16:	07d0      	lsls	r0, r2, #31
 8007e18:	d509      	bpl.n	8007e2e <_svfprintf_r+0x12ba>
 8007e1a:	3402      	adds	r4, #2
 8007e1c:	e7f2      	b.n	8007e04 <_svfprintf_r+0x1290>
 8007e1e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007e20:	230c      	movs	r3, #12
 8007e22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e26:	600b      	str	r3, [r1, #0]
 8007e28:	920c      	str	r2, [sp, #48]	; 0x30
 8007e2a:	f7fe bf83 	b.w	8006d34 <_svfprintf_r+0x1c0>
 8007e2e:	2001      	movs	r0, #1
 8007e30:	2266      	movs	r2, #102	; 0x66
 8007e32:	900a      	str	r0, [sp, #40]	; 0x28
 8007e34:	9215      	str	r2, [sp, #84]	; 0x54
 8007e36:	900d      	str	r0, [sp, #52]	; 0x34
 8007e38:	e75e      	b.n	8007cf8 <_svfprintf_r+0x1184>
 8007e3a:	bf00      	nop
 8007e3c:	0800be38 	.word	0x0800be38

08007e40 <quorem>:
 8007e40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	6903      	ldr	r3, [r0, #16]
 8007e46:	690d      	ldr	r5, [r1, #16]
 8007e48:	429d      	cmp	r5, r3
 8007e4a:	4681      	mov	r9, r0
 8007e4c:	f300 8084 	bgt.w	8007f58 <quorem+0x118>
 8007e50:	1ceb      	adds	r3, r5, #3
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	18cf      	adds	r7, r1, r3
 8007e56:	18c3      	adds	r3, r0, r3
 8007e58:	687e      	ldr	r6, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	3601      	adds	r6, #1
 8007e5e:	fbb3 f6f6 	udiv	r6, r3, r6
 8007e62:	f101 0414 	add.w	r4, r1, #20
 8007e66:	3d01      	subs	r5, #1
 8007e68:	3704      	adds	r7, #4
 8007e6a:	f100 0814 	add.w	r8, r0, #20
 8007e6e:	2e00      	cmp	r6, #0
 8007e70:	d03c      	beq.n	8007eec <quorem+0xac>
 8007e72:	f04f 0e00 	mov.w	lr, #0
 8007e76:	4642      	mov	r2, r8
 8007e78:	4623      	mov	r3, r4
 8007e7a:	46f4      	mov	ip, lr
 8007e7c:	f853 bb04 	ldr.w	fp, [r3], #4
 8007e80:	6810      	ldr	r0, [r2, #0]
 8007e82:	fa1f fa8b 	uxth.w	sl, fp
 8007e86:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 8007e8a:	fb06 ea0a 	mla	sl, r6, sl, lr
 8007e8e:	fb06 fe0b 	mul.w	lr, r6, fp
 8007e92:	eb0e 4e1a 	add.w	lr, lr, sl, lsr #16
 8007e96:	fa1c fc80 	uxtah	ip, ip, r0
 8007e9a:	fa1f fb8e 	uxth.w	fp, lr
 8007e9e:	fa1f fa8a 	uxth.w	sl, sl
 8007ea2:	ebca 0c0c 	rsb	ip, sl, ip
 8007ea6:	ebcb 4010 	rsb	r0, fp, r0, lsr #16
 8007eaa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007eae:	fa1f fc8c 	uxth.w	ip, ip
 8007eb2:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8007eb6:	429f      	cmp	r7, r3
 8007eb8:	f842 cb04 	str.w	ip, [r2], #4
 8007ebc:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8007ec0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ec4:	d2da      	bcs.n	8007e7c <quorem+0x3c>
 8007ec6:	1d2a      	adds	r2, r5, #4
 8007ec8:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8007ecc:	6858      	ldr	r0, [r3, #4]
 8007ece:	b968      	cbnz	r0, 8007eec <quorem+0xac>
 8007ed0:	4598      	cmp	r8, r3
 8007ed2:	d209      	bcs.n	8007ee8 <quorem+0xa8>
 8007ed4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8007ed8:	b112      	cbz	r2, 8007ee0 <quorem+0xa0>
 8007eda:	e005      	b.n	8007ee8 <quorem+0xa8>
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	b91a      	cbnz	r2, 8007ee8 <quorem+0xa8>
 8007ee0:	3b04      	subs	r3, #4
 8007ee2:	3d01      	subs	r5, #1
 8007ee4:	4598      	cmp	r8, r3
 8007ee6:	d3f9      	bcc.n	8007edc <quorem+0x9c>
 8007ee8:	f8c9 5010 	str.w	r5, [r9, #16]
 8007eec:	4648      	mov	r0, r9
 8007eee:	f001 fe4f 	bl	8009b90 <__mcmp>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	db2d      	blt.n	8007f52 <quorem+0x112>
 8007ef6:	3601      	adds	r6, #1
 8007ef8:	4643      	mov	r3, r8
 8007efa:	f04f 0c00 	mov.w	ip, #0
 8007efe:	f854 2b04 	ldr.w	r2, [r4], #4
 8007f02:	6818      	ldr	r0, [r3, #0]
 8007f04:	b291      	uxth	r1, r2
 8007f06:	fa1f fa80 	uxth.w	sl, r0
 8007f0a:	0c12      	lsrs	r2, r2, #16
 8007f0c:	ebc1 010a 	rsb	r1, r1, sl
 8007f10:	4461      	add	r1, ip
 8007f12:	ebc2 4210 	rsb	r2, r2, r0, lsr #16
 8007f16:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8007f1a:	b289      	uxth	r1, r1
 8007f1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f20:	42a7      	cmp	r7, r4
 8007f22:	f843 1b04 	str.w	r1, [r3], #4
 8007f26:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f2a:	d2e8      	bcs.n	8007efe <quorem+0xbe>
 8007f2c:	1d2a      	adds	r2, r5, #4
 8007f2e:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8007f32:	6859      	ldr	r1, [r3, #4]
 8007f34:	b969      	cbnz	r1, 8007f52 <quorem+0x112>
 8007f36:	4598      	cmp	r8, r3
 8007f38:	d209      	bcs.n	8007f4e <quorem+0x10e>
 8007f3a:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8007f3e:	b112      	cbz	r2, 8007f46 <quorem+0x106>
 8007f40:	e005      	b.n	8007f4e <quorem+0x10e>
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	b91a      	cbnz	r2, 8007f4e <quorem+0x10e>
 8007f46:	3b04      	subs	r3, #4
 8007f48:	3d01      	subs	r5, #1
 8007f4a:	4598      	cmp	r8, r3
 8007f4c:	d3f9      	bcc.n	8007f42 <quorem+0x102>
 8007f4e:	f8c9 5010 	str.w	r5, [r9, #16]
 8007f52:	4630      	mov	r0, r6
 8007f54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f58:	2000      	movs	r0, #0
 8007f5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5e:	bf00      	nop

08007f60 <_dtoa_r>:
 8007f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f64:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007f66:	b09d      	sub	sp, #116	; 0x74
 8007f68:	4607      	mov	r7, r0
 8007f6a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007f6c:	4692      	mov	sl, r2
 8007f6e:	469b      	mov	fp, r3
 8007f70:	b141      	cbz	r1, 8007f84 <_dtoa_r+0x24>
 8007f72:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007f74:	2201      	movs	r2, #1
 8007f76:	409a      	lsls	r2, r3
 8007f78:	604b      	str	r3, [r1, #4]
 8007f7a:	608a      	str	r2, [r1, #8]
 8007f7c:	f001 fbd4 	bl	8009728 <_Bfree>
 8007f80:	2300      	movs	r3, #0
 8007f82:	643b      	str	r3, [r7, #64]	; 0x40
 8007f84:	f1bb 0500 	subs.w	r5, fp, #0
 8007f88:	f2c0 80df 	blt.w	800814a <_dtoa_r+0x1ea>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	6023      	str	r3, [r4, #0]
 8007f90:	2300      	movs	r3, #0
 8007f92:	461a      	mov	r2, r3
 8007f94:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8007f98:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8007f9c:	402b      	ands	r3, r5
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	f000 80be 	beq.w	8008120 <_dtoa_r+0x1c0>
 8007fa4:	4650      	mov	r0, sl
 8007fa6:	4659      	mov	r1, fp
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2300      	movs	r3, #0
 8007fac:	46d0      	mov	r8, sl
 8007fae:	46d9      	mov	r9, fp
 8007fb0:	2401      	movs	r4, #1
 8007fb2:	f003 fd0d 	bl	800b9d0 <__aeabi_dcmpeq>
 8007fb6:	b978      	cbnz	r0, 8007fd8 <_dtoa_r+0x78>
 8007fb8:	f014 0fff 	tst.w	r4, #255	; 0xff
 8007fbc:	d110      	bne.n	8007fe0 <_dtoa_r+0x80>
 8007fbe:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8007fc0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	602b      	str	r3, [r5, #0]
 8007fc6:	4d78      	ldr	r5, [pc, #480]	; (80081a8 <_dtoa_r+0x248>)
 8007fc8:	b114      	cbz	r4, 8007fd0 <_dtoa_r+0x70>
 8007fca:	4d78      	ldr	r5, [pc, #480]	; (80081ac <_dtoa_r+0x24c>)
 8007fcc:	6025      	str	r5, [r4, #0]
 8007fce:	3d01      	subs	r5, #1
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	b01d      	add	sp, #116	; 0x74
 8007fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd8:	2400      	movs	r4, #0
 8007fda:	f014 0fff 	tst.w	r4, #255	; 0xff
 8007fde:	d0ee      	beq.n	8007fbe <_dtoa_r+0x5e>
 8007fe0:	a91b      	add	r1, sp, #108	; 0x6c
 8007fe2:	9100      	str	r1, [sp, #0]
 8007fe4:	4638      	mov	r0, r7
 8007fe6:	a91a      	add	r1, sp, #104	; 0x68
 8007fe8:	4642      	mov	r2, r8
 8007fea:	464b      	mov	r3, r9
 8007fec:	9101      	str	r1, [sp, #4]
 8007fee:	f001 fed1 	bl	8009d94 <__d2b>
 8007ff2:	f3c5 540a 	ubfx	r4, r5, #20, #11
 8007ff6:	900a      	str	r0, [sp, #40]	; 0x28
 8007ff8:	2c00      	cmp	r4, #0
 8007ffa:	f040 80b5 	bne.w	8008168 <_dtoa_r+0x208>
 8007ffe:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8008000:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8008002:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8008006:	1934      	adds	r4, r6, r4
 8008008:	429c      	cmp	r4, r3
 800800a:	f2c0 8281 	blt.w	8008510 <_dtoa_r+0x5b0>
 800800e:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8008012:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8008016:	1b1b      	subs	r3, r3, r4
 8008018:	f204 4212 	addw	r2, r4, #1042	; 0x412
 800801c:	fa15 f303 	lsls.w	r3, r5, r3
 8008020:	fa2a f002 	lsr.w	r0, sl, r2
 8008024:	4318      	orrs	r0, r3
 8008026:	f003 f9f5 	bl	800b414 <__aeabi_ui2d>
 800802a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800802e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008030:	2501      	movs	r5, #1
 8008032:	f1a0 70f8 	sub.w	r0, r0, #32505856	; 0x1f00000
 8008036:	900d      	str	r0, [sp, #52]	; 0x34
 8008038:	3c01      	subs	r4, #1
 800803a:	9516      	str	r5, [sp, #88]	; 0x58
 800803c:	2300      	movs	r3, #0
 800803e:	2200      	movs	r2, #0
 8008040:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8008044:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008048:	f003 f8a6 	bl	800b198 <__aeabi_dsub>
 800804c:	a350      	add	r3, pc, #320	; (adr r3, 8008190 <_dtoa_r+0x230>)
 800804e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008052:	f003 fa55 	bl	800b500 <__aeabi_dmul>
 8008056:	a350      	add	r3, pc, #320	; (adr r3, 8008198 <_dtoa_r+0x238>)
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	f003 f89e 	bl	800b19c <__adddf3>
 8008060:	4680      	mov	r8, r0
 8008062:	4620      	mov	r0, r4
 8008064:	4689      	mov	r9, r1
 8008066:	f003 f9e5 	bl	800b434 <__aeabi_i2d>
 800806a:	a34d      	add	r3, pc, #308	; (adr r3, 80081a0 <_dtoa_r+0x240>)
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	f003 fa46 	bl	800b500 <__aeabi_dmul>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4640      	mov	r0, r8
 800807a:	4649      	mov	r1, r9
 800807c:	f003 f88e 	bl	800b19c <__adddf3>
 8008080:	4680      	mov	r8, r0
 8008082:	4689      	mov	r9, r1
 8008084:	f003 fcd6 	bl	800ba34 <__aeabi_d2iz>
 8008088:	4649      	mov	r1, r9
 800808a:	9005      	str	r0, [sp, #20]
 800808c:	2200      	movs	r2, #0
 800808e:	4640      	mov	r0, r8
 8008090:	2300      	movs	r3, #0
 8008092:	f003 fca7 	bl	800b9e4 <__aeabi_dcmplt>
 8008096:	b150      	cbz	r0, 80080ae <_dtoa_r+0x14e>
 8008098:	9805      	ldr	r0, [sp, #20]
 800809a:	f003 f9cb 	bl	800b434 <__aeabi_i2d>
 800809e:	4642      	mov	r2, r8
 80080a0:	464b      	mov	r3, r9
 80080a2:	f003 fc95 	bl	800b9d0 <__aeabi_dcmpeq>
 80080a6:	b910      	cbnz	r0, 80080ae <_dtoa_r+0x14e>
 80080a8:	9d05      	ldr	r5, [sp, #20]
 80080aa:	3d01      	subs	r5, #1
 80080ac:	9505      	str	r5, [sp, #20]
 80080ae:	9d05      	ldr	r5, [sp, #20]
 80080b0:	2d16      	cmp	r5, #22
 80080b2:	f200 815e 	bhi.w	8008372 <_dtoa_r+0x412>
 80080b6:	4b3e      	ldr	r3, [pc, #248]	; (80081b0 <_dtoa_r+0x250>)
 80080b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80080bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80080c0:	4652      	mov	r2, sl
 80080c2:	465b      	mov	r3, fp
 80080c4:	f003 fcac 	bl	800ba20 <__aeabi_dcmpgt>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	f000 8229 	beq.w	8008520 <_dtoa_r+0x5c0>
 80080ce:	9d05      	ldr	r5, [sp, #20]
 80080d0:	3d01      	subs	r5, #1
 80080d2:	9505      	str	r5, [sp, #20]
 80080d4:	2500      	movs	r5, #0
 80080d6:	9514      	str	r5, [sp, #80]	; 0x50
 80080d8:	1b34      	subs	r4, r6, r4
 80080da:	3c01      	subs	r4, #1
 80080dc:	f100 8213 	bmi.w	8008506 <_dtoa_r+0x5a6>
 80080e0:	2500      	movs	r5, #0
 80080e2:	940b      	str	r4, [sp, #44]	; 0x2c
 80080e4:	950f      	str	r5, [sp, #60]	; 0x3c
 80080e6:	9c05      	ldr	r4, [sp, #20]
 80080e8:	2c00      	cmp	r4, #0
 80080ea:	f2c0 8203 	blt.w	80084f4 <_dtoa_r+0x594>
 80080ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80080f0:	9413      	str	r4, [sp, #76]	; 0x4c
 80080f2:	192d      	adds	r5, r5, r4
 80080f4:	2400      	movs	r4, #0
 80080f6:	950b      	str	r5, [sp, #44]	; 0x2c
 80080f8:	9410      	str	r4, [sp, #64]	; 0x40
 80080fa:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80080fc:	2d09      	cmp	r5, #9
 80080fe:	d85d      	bhi.n	80081bc <_dtoa_r+0x25c>
 8008100:	2401      	movs	r4, #1
 8008102:	2d05      	cmp	r5, #5
 8008104:	dd02      	ble.n	800810c <_dtoa_r+0x1ac>
 8008106:	3d04      	subs	r5, #4
 8008108:	9526      	str	r5, [sp, #152]	; 0x98
 800810a:	2400      	movs	r4, #0
 800810c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800810e:	1eab      	subs	r3, r5, #2
 8008110:	2b03      	cmp	r3, #3
 8008112:	d855      	bhi.n	80081c0 <_dtoa_r+0x260>
 8008114:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008118:	036d0382 	.word	0x036d0382
 800811c:	03850246 	.word	0x03850246
 8008120:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8008122:	f242 730f 	movw	r3, #9999	; 0x270f
 8008126:	6023      	str	r3, [r4, #0]
 8008128:	f1ba 0f00 	cmp.w	sl, #0
 800812c:	d013      	beq.n	8008156 <_dtoa_r+0x1f6>
 800812e:	4d21      	ldr	r5, [pc, #132]	; (80081b4 <_dtoa_r+0x254>)
 8008130:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8008132:	2c00      	cmp	r4, #0
 8008134:	f43f af4c 	beq.w	8007fd0 <_dtoa_r+0x70>
 8008138:	78eb      	ldrb	r3, [r5, #3]
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 8117 	beq.w	800836e <_dtoa_r+0x40e>
 8008140:	f105 0308 	add.w	r3, r5, #8
 8008144:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8008146:	6023      	str	r3, [r4, #0]
 8008148:	e742      	b.n	8007fd0 <_dtoa_r+0x70>
 800814a:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 800814e:	2301      	movs	r3, #1
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	46ab      	mov	fp, r5
 8008154:	e71c      	b.n	8007f90 <_dtoa_r+0x30>
 8008156:	4b17      	ldr	r3, [pc, #92]	; (80081b4 <_dtoa_r+0x254>)
 8008158:	4a17      	ldr	r2, [pc, #92]	; (80081b8 <_dtoa_r+0x258>)
 800815a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800815e:	2d00      	cmp	r5, #0
 8008160:	bf0c      	ite	eq
 8008162:	4615      	moveq	r5, r2
 8008164:	461d      	movne	r5, r3
 8008166:	e7e3      	b.n	8008130 <_dtoa_r+0x1d0>
 8008168:	4649      	mov	r1, r9
 800816a:	4640      	mov	r0, r8
 800816c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008170:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008172:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8008174:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 8008178:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800817c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008180:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008184:	2500      	movs	r5, #0
 8008186:	930d      	str	r3, [sp, #52]	; 0x34
 8008188:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800818c:	9516      	str	r5, [sp, #88]	; 0x58
 800818e:	e755      	b.n	800803c <_dtoa_r+0xdc>
 8008190:	636f4361 	.word	0x636f4361
 8008194:	3fd287a7 	.word	0x3fd287a7
 8008198:	8b60c8b3 	.word	0x8b60c8b3
 800819c:	3fc68a28 	.word	0x3fc68a28
 80081a0:	509f79fb 	.word	0x509f79fb
 80081a4:	3fd34413 	.word	0x3fd34413
 80081a8:	0800be40 	.word	0x0800be40
 80081ac:	0800be41 	.word	0x0800be41
 80081b0:	0800bc88 	.word	0x0800bc88
 80081b4:	0800be50 	.word	0x0800be50
 80081b8:	0800be44 	.word	0x0800be44
 80081bc:	2400      	movs	r4, #0
 80081be:	9426      	str	r4, [sp, #152]	; 0x98
 80081c0:	2400      	movs	r4, #0
 80081c2:	647c      	str	r4, [r7, #68]	; 0x44
 80081c4:	4638      	mov	r0, r7
 80081c6:	4621      	mov	r1, r4
 80081c8:	f001 fa88 	bl	80096dc <_Balloc>
 80081cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80081d0:	950e      	str	r5, [sp, #56]	; 0x38
 80081d2:	2501      	movs	r5, #1
 80081d4:	9512      	str	r5, [sp, #72]	; 0x48
 80081d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80081da:	9009      	str	r0, [sp, #36]	; 0x24
 80081dc:	6438      	str	r0, [r7, #64]	; 0x40
 80081de:	9515      	str	r5, [sp, #84]	; 0x54
 80081e0:	9427      	str	r4, [sp, #156]	; 0x9c
 80081e2:	9c05      	ldr	r4, [sp, #20]
 80081e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081e6:	2c0e      	cmp	r4, #14
 80081e8:	bfcc      	ite	gt
 80081ea:	2500      	movgt	r5, #0
 80081ec:	2501      	movle	r5, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	bfb8      	it	lt
 80081f2:	2500      	movlt	r5, #0
 80081f4:	2d00      	cmp	r5, #0
 80081f6:	f000 80c1 	beq.w	800837c <_dtoa_r+0x41c>
 80081fa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80081fc:	4b5e      	ldr	r3, [pc, #376]	; (8008378 <_dtoa_r+0x418>)
 80081fe:	0fe5      	lsrs	r5, r4, #31
 8008200:	9c05      	ldr	r4, [sp, #20]
 8008202:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008206:	e9d3 0100 	ldrd	r0, r1, [r3]
 800820a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800820c:	2c00      	cmp	r4, #0
 800820e:	bfcc      	ite	gt
 8008210:	2500      	movgt	r5, #0
 8008212:	f005 0501 	andle.w	r5, r5, #1
 8008216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800821a:	2d00      	cmp	r5, #0
 800821c:	f040 81a8 	bne.w	8008570 <_dtoa_r+0x610>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	4650      	mov	r0, sl
 8008226:	4659      	mov	r1, fp
 8008228:	f003 fa94 	bl	800b754 <__aeabi_ddiv>
 800822c:	f003 fc02 	bl	800ba34 <__aeabi_d2iz>
 8008230:	4606      	mov	r6, r0
 8008232:	f003 f8ff 	bl	800b434 <__aeabi_i2d>
 8008236:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800823a:	f003 f961 	bl	800b500 <__aeabi_dmul>
 800823e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008240:	460b      	mov	r3, r1
 8008242:	4602      	mov	r2, r0
 8008244:	4659      	mov	r1, fp
 8008246:	4650      	mov	r0, sl
 8008248:	f002 ffa6 	bl	800b198 <__aeabi_dsub>
 800824c:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8008250:	f804 3b01 	strb.w	r3, [r4], #1
 8008254:	9411      	str	r4, [sp, #68]	; 0x44
 8008256:	46a0      	mov	r8, r4
 8008258:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800825a:	2c01      	cmp	r4, #1
 800825c:	4682      	mov	sl, r0
 800825e:	468b      	mov	fp, r1
 8008260:	d04c      	beq.n	80082fc <_dtoa_r+0x39c>
 8008262:	2300      	movs	r3, #0
 8008264:	2200      	movs	r2, #0
 8008266:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800826a:	f003 f949 	bl	800b500 <__aeabi_dmul>
 800826e:	2200      	movs	r2, #0
 8008270:	2300      	movs	r3, #0
 8008272:	4682      	mov	sl, r0
 8008274:	468b      	mov	fp, r1
 8008276:	2401      	movs	r4, #1
 8008278:	f003 fbaa 	bl	800b9d0 <__aeabi_dcmpeq>
 800827c:	b100      	cbz	r0, 8008280 <_dtoa_r+0x320>
 800827e:	462c      	mov	r4, r5
 8008280:	f014 0fff 	tst.w	r4, #255	; 0xff
 8008284:	f000 8575 	beq.w	8008d72 <_dtoa_r+0xe12>
 8008288:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800828a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800828c:	1ca5      	adds	r5, r4, #2
 800828e:	eb04 0900 	add.w	r9, r4, r0
 8008292:	e00d      	b.n	80082b0 <_dtoa_r+0x350>
 8008294:	f003 f934 	bl	800b500 <__aeabi_dmul>
 8008298:	2200      	movs	r2, #0
 800829a:	2300      	movs	r3, #0
 800829c:	4682      	mov	sl, r0
 800829e:	468b      	mov	fp, r1
 80082a0:	f003 fb96 	bl	800b9d0 <__aeabi_dcmpeq>
 80082a4:	b100      	cbz	r0, 80082a8 <_dtoa_r+0x348>
 80082a6:	2400      	movs	r4, #0
 80082a8:	f014 0fff 	tst.w	r4, #255	; 0xff
 80082ac:	f000 8423 	beq.w	8008af6 <_dtoa_r+0xb96>
 80082b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082b4:	4650      	mov	r0, sl
 80082b6:	4659      	mov	r1, fp
 80082b8:	f003 fa4c 	bl	800b754 <__aeabi_ddiv>
 80082bc:	f003 fbba 	bl	800ba34 <__aeabi_d2iz>
 80082c0:	4606      	mov	r6, r0
 80082c2:	f003 f8b7 	bl	800b434 <__aeabi_i2d>
 80082c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ca:	f003 f919 	bl	800b500 <__aeabi_dmul>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4650      	mov	r0, sl
 80082d4:	4659      	mov	r1, fp
 80082d6:	f002 ff5f 	bl	800b198 <__aeabi_dsub>
 80082da:	f106 0430 	add.w	r4, r6, #48	; 0x30
 80082de:	2300      	movs	r3, #0
 80082e0:	2200      	movs	r2, #0
 80082e2:	454d      	cmp	r5, r9
 80082e4:	f805 4c01 	strb.w	r4, [r5, #-1]
 80082e8:	46a8      	mov	r8, r5
 80082ea:	4682      	mov	sl, r0
 80082ec:	468b      	mov	fp, r1
 80082ee:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80082f2:	f04f 0401 	mov.w	r4, #1
 80082f6:	f105 0501 	add.w	r5, r5, #1
 80082fa:	d1cb      	bne.n	8008294 <_dtoa_r+0x334>
 80082fc:	4652      	mov	r2, sl
 80082fe:	465b      	mov	r3, fp
 8008300:	4650      	mov	r0, sl
 8008302:	4659      	mov	r1, fp
 8008304:	f002 ff4a 	bl	800b19c <__adddf3>
 8008308:	4604      	mov	r4, r0
 800830a:	460d      	mov	r5, r1
 800830c:	4622      	mov	r2, r4
 800830e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008312:	462b      	mov	r3, r5
 8008314:	f003 fb66 	bl	800b9e4 <__aeabi_dcmplt>
 8008318:	b958      	cbnz	r0, 8008332 <_dtoa_r+0x3d2>
 800831a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800831e:	4622      	mov	r2, r4
 8008320:	462b      	mov	r3, r5
 8008322:	f003 fb55 	bl	800b9d0 <__aeabi_dcmpeq>
 8008326:	2800      	cmp	r0, #0
 8008328:	f000 83e5 	beq.w	8008af6 <_dtoa_r+0xb96>
 800832c:	07f3      	lsls	r3, r6, #31
 800832e:	f140 83e2 	bpl.w	8008af6 <_dtoa_r+0xb96>
 8008332:	9c05      	ldr	r4, [sp, #20]
 8008334:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8008338:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800833a:	9417      	str	r4, [sp, #92]	; 0x5c
 800833c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800833e:	e003      	b.n	8008348 <_dtoa_r+0x3e8>
 8008340:	f818 6c02 	ldrb.w	r6, [r8, #-2]
 8008344:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008348:	2e39      	cmp	r6, #57	; 0x39
 800834a:	4643      	mov	r3, r8
 800834c:	f040 8489 	bne.w	8008c62 <_dtoa_r+0xd02>
 8008350:	4590      	cmp	r8, r2
 8008352:	d1f5      	bne.n	8008340 <_dtoa_r+0x3e0>
 8008354:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8008356:	9309      	str	r3, [sp, #36]	; 0x24
 8008358:	3401      	adds	r4, #1
 800835a:	9405      	str	r4, [sp, #20]
 800835c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800835e:	2330      	movs	r3, #48	; 0x30
 8008360:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008364:	2231      	movs	r2, #49	; 0x31
 8008366:	4623      	mov	r3, r4
 8008368:	f803 2c01 	strb.w	r2, [r3, #-1]
 800836c:	e0b0      	b.n	80084d0 <_dtoa_r+0x570>
 800836e:	1ceb      	adds	r3, r5, #3
 8008370:	e6e8      	b.n	8008144 <_dtoa_r+0x1e4>
 8008372:	2501      	movs	r5, #1
 8008374:	9514      	str	r5, [sp, #80]	; 0x50
 8008376:	e6af      	b.n	80080d8 <_dtoa_r+0x178>
 8008378:	0800bc88 	.word	0x0800bc88
 800837c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800837e:	2c00      	cmp	r4, #0
 8008380:	f040 80d1 	bne.w	8008526 <_dtoa_r+0x5c6>
 8008384:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008386:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008388:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800838a:	9306      	str	r3, [sp, #24]
 800838c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800838e:	2800      	cmp	r0, #0
 8008390:	bfc8      	it	gt
 8008392:	2c00      	cmpgt	r4, #0
 8008394:	dd09      	ble.n	80083aa <_dtoa_r+0x44a>
 8008396:	4603      	mov	r3, r0
 8008398:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800839a:	42a3      	cmp	r3, r4
 800839c:	bfa8      	it	ge
 800839e:	4623      	movge	r3, r4
 80083a0:	1ac9      	subs	r1, r1, r3
 80083a2:	1ac0      	subs	r0, r0, r3
 80083a4:	910f      	str	r1, [sp, #60]	; 0x3c
 80083a6:	1ae4      	subs	r4, r4, r3
 80083a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80083aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083ac:	2a00      	cmp	r2, #0
 80083ae:	dd1a      	ble.n	80083e6 <_dtoa_r+0x486>
 80083b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 841d 	beq.w	8008bf2 <_dtoa_r+0xc92>
 80083b8:	2d00      	cmp	r5, #0
 80083ba:	dd10      	ble.n	80083de <_dtoa_r+0x47e>
 80083bc:	9906      	ldr	r1, [sp, #24]
 80083be:	462a      	mov	r2, r5
 80083c0:	4638      	mov	r0, r7
 80083c2:	f001 fb39 	bl	8009a38 <__pow5mult>
 80083c6:	9006      	str	r0, [sp, #24]
 80083c8:	9906      	ldr	r1, [sp, #24]
 80083ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083cc:	4638      	mov	r0, r7
 80083ce:	f001 fa9b 	bl	8009908 <__multiply>
 80083d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80083d4:	4606      	mov	r6, r0
 80083d6:	4638      	mov	r0, r7
 80083d8:	f001 f9a6 	bl	8009728 <_Bfree>
 80083dc:	960a      	str	r6, [sp, #40]	; 0x28
 80083de:	9810      	ldr	r0, [sp, #64]	; 0x40
 80083e0:	1b42      	subs	r2, r0, r5
 80083e2:	f040 8429 	bne.w	8008c38 <_dtoa_r+0xcd8>
 80083e6:	2101      	movs	r1, #1
 80083e8:	4638      	mov	r0, r7
 80083ea:	f001 fa83 	bl	80098f4 <__i2b>
 80083ee:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80083f0:	2d00      	cmp	r5, #0
 80083f2:	4606      	mov	r6, r0
 80083f4:	dd05      	ble.n	8008402 <_dtoa_r+0x4a2>
 80083f6:	4631      	mov	r1, r6
 80083f8:	4638      	mov	r0, r7
 80083fa:	462a      	mov	r2, r5
 80083fc:	f001 fb1c 	bl	8009a38 <__pow5mult>
 8008400:	4606      	mov	r6, r0
 8008402:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8008404:	2d01      	cmp	r5, #1
 8008406:	f340 820f 	ble.w	8008828 <_dtoa_r+0x8c8>
 800840a:	2500      	movs	r5, #0
 800840c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800840e:	2301      	movs	r3, #1
 8008410:	2800      	cmp	r0, #0
 8008412:	f040 838c 	bne.w	8008b2e <_dtoa_r+0xbce>
 8008416:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008418:	185b      	adds	r3, r3, r1
 800841a:	f013 031f 	ands.w	r3, r3, #31
 800841e:	f000 82cb 	beq.w	80089b8 <_dtoa_r+0xa58>
 8008422:	f1c3 0220 	rsb	r2, r3, #32
 8008426:	2a04      	cmp	r2, #4
 8008428:	f340 84bf 	ble.w	8008daa <_dtoa_r+0xe4a>
 800842c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800842e:	f1c3 031c 	rsb	r3, r3, #28
 8008432:	18d2      	adds	r2, r2, r3
 8008434:	18c9      	adds	r1, r1, r3
 8008436:	920f      	str	r2, [sp, #60]	; 0x3c
 8008438:	18e4      	adds	r4, r4, r3
 800843a:	910b      	str	r1, [sp, #44]	; 0x2c
 800843c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800843e:	2a00      	cmp	r2, #0
 8008440:	dd04      	ble.n	800844c <_dtoa_r+0x4ec>
 8008442:	4638      	mov	r0, r7
 8008444:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008446:	f001 fb43 	bl	8009ad0 <__lshift>
 800844a:	900a      	str	r0, [sp, #40]	; 0x28
 800844c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800844e:	2b00      	cmp	r3, #0
 8008450:	dd05      	ble.n	800845e <_dtoa_r+0x4fe>
 8008452:	4631      	mov	r1, r6
 8008454:	4638      	mov	r0, r7
 8008456:	461a      	mov	r2, r3
 8008458:	f001 fb3a 	bl	8009ad0 <__lshift>
 800845c:	4606      	mov	r6, r0
 800845e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008460:	2800      	cmp	r0, #0
 8008462:	f040 834c 	bne.w	8008afe <_dtoa_r+0xb9e>
 8008466:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008468:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800846a:	2900      	cmp	r1, #0
 800846c:	bfcc      	ite	gt
 800846e:	2300      	movgt	r3, #0
 8008470:	2301      	movle	r3, #1
 8008472:	2a02      	cmp	r2, #2
 8008474:	bfd8      	it	le
 8008476:	2300      	movle	r3, #0
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 8226 	beq.w	80088ca <_dtoa_r+0x96a>
 800847e:	2900      	cmp	r1, #0
 8008480:	f040 808a 	bne.w	8008598 <_dtoa_r+0x638>
 8008484:	4631      	mov	r1, r6
 8008486:	2205      	movs	r2, #5
 8008488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800848a:	4638      	mov	r0, r7
 800848c:	f001 f956 	bl	800973c <__multadd>
 8008490:	4606      	mov	r6, r0
 8008492:	4631      	mov	r1, r6
 8008494:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008496:	f001 fb7b 	bl	8009b90 <__mcmp>
 800849a:	2800      	cmp	r0, #0
 800849c:	dd7c      	ble.n	8008598 <_dtoa_r+0x638>
 800849e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a0:	9c05      	ldr	r4, [sp, #20]
 80084a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80084a4:	2231      	movs	r2, #49	; 0x31
 80084a6:	f803 2b01 	strb.w	r2, [r3], #1
 80084aa:	3401      	adds	r4, #1
 80084ac:	9405      	str	r4, [sp, #20]
 80084ae:	9309      	str	r3, [sp, #36]	; 0x24
 80084b0:	2400      	movs	r4, #0
 80084b2:	4638      	mov	r0, r7
 80084b4:	4631      	mov	r1, r6
 80084b6:	f001 f937 	bl	8009728 <_Bfree>
 80084ba:	9806      	ldr	r0, [sp, #24]
 80084bc:	b140      	cbz	r0, 80084d0 <_dtoa_r+0x570>
 80084be:	4284      	cmp	r4, r0
 80084c0:	bf18      	it	ne
 80084c2:	2c00      	cmpne	r4, #0
 80084c4:	f040 8273 	bne.w	80089ae <_dtoa_r+0xa4e>
 80084c8:	4638      	mov	r0, r7
 80084ca:	9906      	ldr	r1, [sp, #24]
 80084cc:	f001 f92c 	bl	8009728 <_Bfree>
 80084d0:	4638      	mov	r0, r7
 80084d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80084d4:	f001 f928 	bl	8009728 <_Bfree>
 80084d8:	9c05      	ldr	r4, [sp, #20]
 80084da:	1c63      	adds	r3, r4, #1
 80084dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80084de:	2200      	movs	r2, #0
 80084e0:	7022      	strb	r2, [r4, #0]
 80084e2:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80084e8:	2c00      	cmp	r4, #0
 80084ea:	f43f ad71 	beq.w	8007fd0 <_dtoa_r+0x70>
 80084ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084f0:	6020      	str	r0, [r4, #0]
 80084f2:	e56d      	b.n	8007fd0 <_dtoa_r+0x70>
 80084f4:	9c05      	ldr	r4, [sp, #20]
 80084f6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80084f8:	1b2d      	subs	r5, r5, r4
 80084fa:	950f      	str	r5, [sp, #60]	; 0x3c
 80084fc:	4265      	negs	r5, r4
 80084fe:	2400      	movs	r4, #0
 8008500:	9510      	str	r5, [sp, #64]	; 0x40
 8008502:	9413      	str	r4, [sp, #76]	; 0x4c
 8008504:	e5f9      	b.n	80080fa <_dtoa_r+0x19a>
 8008506:	4264      	negs	r4, r4
 8008508:	940f      	str	r4, [sp, #60]	; 0x3c
 800850a:	2400      	movs	r4, #0
 800850c:	940b      	str	r4, [sp, #44]	; 0x2c
 800850e:	e5ea      	b.n	80080e6 <_dtoa_r+0x186>
 8008510:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8008514:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8008518:	1b00      	subs	r0, r0, r4
 800851a:	fa0a f000 	lsl.w	r0, sl, r0
 800851e:	e582      	b.n	8008026 <_dtoa_r+0xc6>
 8008520:	2500      	movs	r5, #0
 8008522:	9514      	str	r5, [sp, #80]	; 0x50
 8008524:	e5d8      	b.n	80080d8 <_dtoa_r+0x178>
 8008526:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8008528:	2c01      	cmp	r4, #1
 800852a:	f340 838f 	ble.w	8008c4c <_dtoa_r+0xcec>
 800852e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008530:	1e62      	subs	r2, r4, #1
 8008532:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008534:	4294      	cmp	r4, r2
 8008536:	bfbf      	itttt	lt
 8008538:	9c10      	ldrlt	r4, [sp, #64]	; 0x40
 800853a:	9210      	strlt	r2, [sp, #64]	; 0x40
 800853c:	ebc4 0302 	rsblt	r3, r4, r2
 8008540:	9c13      	ldrlt	r4, [sp, #76]	; 0x4c
 8008542:	bfb6      	itet	lt
 8008544:	18e4      	addlt	r4, r4, r3
 8008546:	ebc2 0504 	rsbge	r5, r2, r4
 800854a:	9413      	strlt	r4, [sp, #76]	; 0x4c
 800854c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800854e:	2c00      	cmp	r4, #0
 8008550:	f2c0 838f 	blt.w	8008c72 <_dtoa_r+0xd12>
 8008554:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8008556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800855a:	18d2      	adds	r2, r2, r3
 800855c:	920f      	str	r2, [sp, #60]	; 0x3c
 800855e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008560:	4638      	mov	r0, r7
 8008562:	18d2      	adds	r2, r2, r3
 8008564:	2101      	movs	r1, #1
 8008566:	920b      	str	r2, [sp, #44]	; 0x2c
 8008568:	f001 f9c4 	bl	80098f4 <__i2b>
 800856c:	9006      	str	r0, [sp, #24]
 800856e:	e70d      	b.n	800838c <_dtoa_r+0x42c>
 8008570:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008572:	2d00      	cmp	r5, #0
 8008574:	f040 8367 	bne.w	8008c46 <_dtoa_r+0xce6>
 8008578:	2300      	movs	r3, #0
 800857a:	2200      	movs	r2, #0
 800857c:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8008580:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008584:	f002 ffbc 	bl	800b500 <__aeabi_dmul>
 8008588:	4652      	mov	r2, sl
 800858a:	465b      	mov	r3, fp
 800858c:	f003 fa3e 	bl	800ba0c <__aeabi_dcmpge>
 8008590:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008592:	9606      	str	r6, [sp, #24]
 8008594:	2800      	cmp	r0, #0
 8008596:	d082      	beq.n	800849e <_dtoa_r+0x53e>
 8008598:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800859a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800859c:	43e4      	mvns	r4, r4
 800859e:	9405      	str	r4, [sp, #20]
 80085a0:	2400      	movs	r4, #0
 80085a2:	e786      	b.n	80084b2 <_dtoa_r+0x552>
 80085a4:	2501      	movs	r5, #1
 80085a6:	9512      	str	r5, [sp, #72]	; 0x48
 80085a8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80085aa:	2d00      	cmp	r5, #0
 80085ac:	f340 82d3 	ble.w	8008b56 <_dtoa_r+0xbf6>
 80085b0:	46a9      	mov	r9, r5
 80085b2:	2d0e      	cmp	r5, #14
 80085b4:	bf8c      	ite	hi
 80085b6:	2400      	movhi	r4, #0
 80085b8:	f004 0401 	andls.w	r4, r4, #1
 80085bc:	9515      	str	r5, [sp, #84]	; 0x54
 80085be:	950e      	str	r5, [sp, #56]	; 0x38
 80085c0:	2100      	movs	r1, #0
 80085c2:	f1b9 0f17 	cmp.w	r9, #23
 80085c6:	6479      	str	r1, [r7, #68]	; 0x44
 80085c8:	d909      	bls.n	80085de <_dtoa_r+0x67e>
 80085ca:	2201      	movs	r2, #1
 80085cc:	2304      	movs	r3, #4
 80085ce:	005b      	lsls	r3, r3, #1
 80085d0:	f103 0014 	add.w	r0, r3, #20
 80085d4:	4611      	mov	r1, r2
 80085d6:	3201      	adds	r2, #1
 80085d8:	4548      	cmp	r0, r9
 80085da:	d9f8      	bls.n	80085ce <_dtoa_r+0x66e>
 80085dc:	6479      	str	r1, [r7, #68]	; 0x44
 80085de:	4638      	mov	r0, r7
 80085e0:	f001 f87c 	bl	80096dc <_Balloc>
 80085e4:	9009      	str	r0, [sp, #36]	; 0x24
 80085e6:	6438      	str	r0, [r7, #64]	; 0x40
 80085e8:	2c00      	cmp	r4, #0
 80085ea:	f43f adfa 	beq.w	80081e2 <_dtoa_r+0x282>
 80085ee:	9c05      	ldr	r4, [sp, #20]
 80085f0:	4652      	mov	r2, sl
 80085f2:	465b      	mov	r3, fp
 80085f4:	2c00      	cmp	r4, #0
 80085f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80085fa:	f340 81f8 	ble.w	80089ee <_dtoa_r+0xa8e>
 80085fe:	4b97      	ldr	r3, [pc, #604]	; (800885c <_dtoa_r+0x8fc>)
 8008600:	f004 020f 	and.w	r2, r4, #15
 8008604:	1124      	asrs	r4, r4, #4
 8008606:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800860a:	2602      	movs	r6, #2
 800860c:	06e2      	lsls	r2, r4, #27
 800860e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008612:	d50b      	bpl.n	800862c <_dtoa_r+0x6cc>
 8008614:	4b92      	ldr	r3, [pc, #584]	; (8008860 <_dtoa_r+0x900>)
 8008616:	4650      	mov	r0, sl
 8008618:	4659      	mov	r1, fp
 800861a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800861e:	f003 f899 	bl	800b754 <__aeabi_ddiv>
 8008622:	f004 040f 	and.w	r4, r4, #15
 8008626:	4682      	mov	sl, r0
 8008628:	468b      	mov	fp, r1
 800862a:	2603      	movs	r6, #3
 800862c:	b174      	cbz	r4, 800864c <_dtoa_r+0x6ec>
 800862e:	4d8c      	ldr	r5, [pc, #560]	; (8008860 <_dtoa_r+0x900>)
 8008630:	4640      	mov	r0, r8
 8008632:	4649      	mov	r1, r9
 8008634:	07e3      	lsls	r3, r4, #31
 8008636:	d504      	bpl.n	8008642 <_dtoa_r+0x6e2>
 8008638:	e9d5 2300 	ldrd	r2, r3, [r5]
 800863c:	f002 ff60 	bl	800b500 <__aeabi_dmul>
 8008640:	3601      	adds	r6, #1
 8008642:	3508      	adds	r5, #8
 8008644:	1064      	asrs	r4, r4, #1
 8008646:	d1f5      	bne.n	8008634 <_dtoa_r+0x6d4>
 8008648:	4680      	mov	r8, r0
 800864a:	4689      	mov	r9, r1
 800864c:	4650      	mov	r0, sl
 800864e:	4659      	mov	r1, fp
 8008650:	4642      	mov	r2, r8
 8008652:	464b      	mov	r3, r9
 8008654:	f003 f87e 	bl	800b754 <__aeabi_ddiv>
 8008658:	4682      	mov	sl, r0
 800865a:	468b      	mov	fp, r1
 800865c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800865e:	2c00      	cmp	r4, #0
 8008660:	f000 8100 	beq.w	8008864 <_dtoa_r+0x904>
 8008664:	2300      	movs	r3, #0
 8008666:	4650      	mov	r0, sl
 8008668:	4659      	mov	r1, fp
 800866a:	2200      	movs	r2, #0
 800866c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8008670:	2401      	movs	r4, #1
 8008672:	f003 f9b7 	bl	800b9e4 <__aeabi_dcmplt>
 8008676:	b900      	cbnz	r0, 800867a <_dtoa_r+0x71a>
 8008678:	2400      	movs	r4, #0
 800867a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800867c:	2d00      	cmp	r5, #0
 800867e:	bfd4      	ite	le
 8008680:	2400      	movle	r4, #0
 8008682:	f004 0401 	andgt.w	r4, r4, #1
 8008686:	2c00      	cmp	r4, #0
 8008688:	f000 80ec 	beq.w	8008864 <_dtoa_r+0x904>
 800868c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800868e:	2c00      	cmp	r4, #0
 8008690:	f340 819b 	ble.w	80089ca <_dtoa_r+0xa6a>
 8008694:	2300      	movs	r3, #0
 8008696:	2200      	movs	r2, #0
 8008698:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800869c:	4650      	mov	r0, sl
 800869e:	4659      	mov	r1, fp
 80086a0:	f002 ff2e 	bl	800b500 <__aeabi_dmul>
 80086a4:	4682      	mov	sl, r0
 80086a6:	1c70      	adds	r0, r6, #1
 80086a8:	468b      	mov	fp, r1
 80086aa:	f002 fec3 	bl	800b434 <__aeabi_i2d>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4650      	mov	r0, sl
 80086b4:	4659      	mov	r1, fp
 80086b6:	f002 ff23 	bl	800b500 <__aeabi_dmul>
 80086ba:	2300      	movs	r3, #0
 80086bc:	2200      	movs	r2, #0
 80086be:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80086c2:	f002 fd6b 	bl	800b19c <__adddf3>
 80086c6:	9d05      	ldr	r5, [sp, #20]
 80086c8:	3d01      	subs	r5, #1
 80086ca:	9517      	str	r5, [sp, #92]	; 0x5c
 80086cc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80086ce:	4680      	mov	r8, r0
 80086d0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80086d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80086d6:	2c00      	cmp	r4, #0
 80086d8:	f000 81b0 	beq.w	8008a3c <_dtoa_r+0xadc>
 80086dc:	4b5f      	ldr	r3, [pc, #380]	; (800885c <_dtoa_r+0x8fc>)
 80086de:	2100      	movs	r1, #0
 80086e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80086e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086e8:	2000      	movs	r0, #0
 80086ea:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 80086ee:	f003 f831 	bl	800b754 <__aeabi_ddiv>
 80086f2:	4642      	mov	r2, r8
 80086f4:	464b      	mov	r3, r9
 80086f6:	f002 fd4f 	bl	800b198 <__aeabi_dsub>
 80086fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80086fe:	4659      	mov	r1, fp
 8008700:	4650      	mov	r0, sl
 8008702:	f003 f997 	bl	800ba34 <__aeabi_d2iz>
 8008706:	4606      	mov	r6, r0
 8008708:	f002 fe94 	bl	800b434 <__aeabi_i2d>
 800870c:	4602      	mov	r2, r0
 800870e:	460b      	mov	r3, r1
 8008710:	4650      	mov	r0, sl
 8008712:	4659      	mov	r1, fp
 8008714:	f002 fd40 	bl	800b198 <__aeabi_dsub>
 8008718:	3630      	adds	r6, #48	; 0x30
 800871a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800871c:	b2f6      	uxtb	r6, r6
 800871e:	4682      	mov	sl, r0
 8008720:	468b      	mov	fp, r1
 8008722:	f804 6b01 	strb.w	r6, [r4], #1
 8008726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800872a:	4652      	mov	r2, sl
 800872c:	465b      	mov	r3, fp
 800872e:	9411      	str	r4, [sp, #68]	; 0x44
 8008730:	46a0      	mov	r8, r4
 8008732:	f003 f975 	bl	800ba20 <__aeabi_dcmpgt>
 8008736:	2800      	cmp	r0, #0
 8008738:	f040 8325 	bne.w	8008d86 <_dtoa_r+0xe26>
 800873c:	2100      	movs	r1, #0
 800873e:	4652      	mov	r2, sl
 8008740:	465b      	mov	r3, fp
 8008742:	2000      	movs	r0, #0
 8008744:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8008748:	f002 fd26 	bl	800b198 <__aeabi_dsub>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008754:	f003 f964 	bl	800ba20 <__aeabi_dcmpgt>
 8008758:	2800      	cmp	r0, #0
 800875a:	f040 827f 	bne.w	8008c5c <_dtoa_r+0xcfc>
 800875e:	2d01      	cmp	r5, #1
 8008760:	f340 8133 	ble.w	80089ca <_dtoa_r+0xa6a>
 8008764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008766:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008768:	1945      	adds	r5, r0, r5
 800876a:	e00f      	b.n	800878c <_dtoa_r+0x82c>
 800876c:	2100      	movs	r1, #0
 800876e:	2000      	movs	r0, #0
 8008770:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8008774:	f002 fd10 	bl	800b198 <__aeabi_dsub>
 8008778:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800877c:	f003 f932 	bl	800b9e4 <__aeabi_dcmplt>
 8008780:	2800      	cmp	r0, #0
 8008782:	f040 826b 	bne.w	8008c5c <_dtoa_r+0xcfc>
 8008786:	42ac      	cmp	r4, r5
 8008788:	f000 811f 	beq.w	80089ca <_dtoa_r+0xa6a>
 800878c:	2300      	movs	r3, #0
 800878e:	2200      	movs	r2, #0
 8008790:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8008794:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008798:	f002 feb2 	bl	800b500 <__aeabi_dmul>
 800879c:	2300      	movs	r3, #0
 800879e:	2200      	movs	r2, #0
 80087a0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80087a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80087a8:	4650      	mov	r0, sl
 80087aa:	4659      	mov	r1, fp
 80087ac:	f002 fea8 	bl	800b500 <__aeabi_dmul>
 80087b0:	4680      	mov	r8, r0
 80087b2:	4689      	mov	r9, r1
 80087b4:	f003 f93e 	bl	800ba34 <__aeabi_d2iz>
 80087b8:	4606      	mov	r6, r0
 80087ba:	f002 fe3b 	bl	800b434 <__aeabi_i2d>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4640      	mov	r0, r8
 80087c4:	4649      	mov	r1, r9
 80087c6:	f002 fce7 	bl	800b198 <__aeabi_dsub>
 80087ca:	3630      	adds	r6, #48	; 0x30
 80087cc:	b2f6      	uxtb	r6, r6
 80087ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087d2:	f804 6b01 	strb.w	r6, [r4], #1
 80087d6:	4682      	mov	sl, r0
 80087d8:	468b      	mov	fp, r1
 80087da:	f003 f903 	bl	800b9e4 <__aeabi_dcmplt>
 80087de:	46a0      	mov	r8, r4
 80087e0:	4652      	mov	r2, sl
 80087e2:	465b      	mov	r3, fp
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d0c1      	beq.n	800876c <_dtoa_r+0x80c>
 80087e8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80087ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80087ec:	9005      	str	r0, [sp, #20]
 80087ee:	9409      	str	r4, [sp, #36]	; 0x24
 80087f0:	e66e      	b.n	80084d0 <_dtoa_r+0x570>
 80087f2:	2500      	movs	r5, #0
 80087f4:	9512      	str	r5, [sp, #72]	; 0x48
 80087f6:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80087f8:	9805      	ldr	r0, [sp, #20]
 80087fa:	182d      	adds	r5, r5, r0
 80087fc:	f105 0901 	add.w	r9, r5, #1
 8008800:	f1b9 0f00 	cmp.w	r9, #0
 8008804:	9515      	str	r5, [sp, #84]	; 0x54
 8008806:	f340 819b 	ble.w	8008b40 <_dtoa_r+0xbe0>
 800880a:	f1b9 0f0e 	cmp.w	r9, #14
 800880e:	bf8c      	ite	hi
 8008810:	2400      	movhi	r4, #0
 8008812:	f004 0401 	andls.w	r4, r4, #1
 8008816:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800881a:	e6d1      	b.n	80085c0 <_dtoa_r+0x660>
 800881c:	2500      	movs	r5, #0
 800881e:	9512      	str	r5, [sp, #72]	; 0x48
 8008820:	e6c2      	b.n	80085a8 <_dtoa_r+0x648>
 8008822:	2501      	movs	r5, #1
 8008824:	9512      	str	r5, [sp, #72]	; 0x48
 8008826:	e7e6      	b.n	80087f6 <_dtoa_r+0x896>
 8008828:	f1ba 0f00 	cmp.w	sl, #0
 800882c:	f47f aded 	bne.w	800840a <_dtoa_r+0x4aa>
 8008830:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008834:	4655      	mov	r5, sl
 8008836:	2b00      	cmp	r3, #0
 8008838:	f47f ade8 	bne.w	800840c <_dtoa_r+0x4ac>
 800883c:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8008840:	ea0b 0303 	and.w	r3, fp, r3
 8008844:	461d      	mov	r5, r3
 8008846:	2b00      	cmp	r3, #0
 8008848:	f43f ade0 	beq.w	800840c <_dtoa_r+0x4ac>
 800884c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800884e:	3501      	adds	r5, #1
 8008850:	950f      	str	r5, [sp, #60]	; 0x3c
 8008852:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008854:	3501      	adds	r5, #1
 8008856:	950b      	str	r5, [sp, #44]	; 0x2c
 8008858:	2501      	movs	r5, #1
 800885a:	e5d7      	b.n	800840c <_dtoa_r+0x4ac>
 800885c:	0800bc88 	.word	0x0800bc88
 8008860:	0800bd78 	.word	0x0800bd78
 8008864:	4630      	mov	r0, r6
 8008866:	f002 fde5 	bl	800b434 <__aeabi_i2d>
 800886a:	4652      	mov	r2, sl
 800886c:	465b      	mov	r3, fp
 800886e:	f002 fe47 	bl	800b500 <__aeabi_dmul>
 8008872:	2300      	movs	r3, #0
 8008874:	2200      	movs	r2, #0
 8008876:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800887a:	f002 fc8f 	bl	800b19c <__adddf3>
 800887e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008880:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 8008884:	4680      	mov	r8, r0
 8008886:	46a1      	mov	r9, r4
 8008888:	2d00      	cmp	r5, #0
 800888a:	f040 80ac 	bne.w	80089e6 <_dtoa_r+0xa86>
 800888e:	2300      	movs	r3, #0
 8008890:	2200      	movs	r2, #0
 8008892:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8008896:	4650      	mov	r0, sl
 8008898:	4659      	mov	r1, fp
 800889a:	f002 fc7d 	bl	800b198 <__aeabi_dsub>
 800889e:	4642      	mov	r2, r8
 80088a0:	4623      	mov	r3, r4
 80088a2:	4682      	mov	sl, r0
 80088a4:	468b      	mov	fp, r1
 80088a6:	f003 f8bb 	bl	800ba20 <__aeabi_dcmpgt>
 80088aa:	2800      	cmp	r0, #0
 80088ac:	f040 80c3 	bne.w	8008a36 <_dtoa_r+0xad6>
 80088b0:	4642      	mov	r2, r8
 80088b2:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 80088b6:	4650      	mov	r0, sl
 80088b8:	4659      	mov	r1, fp
 80088ba:	f003 f893 	bl	800b9e4 <__aeabi_dcmplt>
 80088be:	2800      	cmp	r0, #0
 80088c0:	f000 8083 	beq.w	80089ca <_dtoa_r+0xa6a>
 80088c4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80088c6:	9606      	str	r6, [sp, #24]
 80088c8:	e666      	b.n	8008598 <_dtoa_r+0x638>
 80088ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80088cc:	2800      	cmp	r0, #0
 80088ce:	f000 8147 	beq.w	8008b60 <_dtoa_r+0xc00>
 80088d2:	2c00      	cmp	r4, #0
 80088d4:	dd05      	ble.n	80088e2 <_dtoa_r+0x982>
 80088d6:	4638      	mov	r0, r7
 80088d8:	9906      	ldr	r1, [sp, #24]
 80088da:	4622      	mov	r2, r4
 80088dc:	f001 f8f8 	bl	8009ad0 <__lshift>
 80088e0:	9006      	str	r0, [sp, #24]
 80088e2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80088e6:	2d00      	cmp	r5, #0
 80088e8:	f040 8201 	bne.w	8008cee <_dtoa_r+0xd8e>
 80088ec:	f00a 0001 	and.w	r0, sl, #1
 80088f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80088f2:	9c06      	ldr	r4, [sp, #24]
 80088f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80088f6:	4631      	mov	r1, r6
 80088f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088fa:	f7ff faa1 	bl	8007e40 <quorem>
 80088fe:	4621      	mov	r1, r4
 8008900:	9008      	str	r0, [sp, #32]
 8008902:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008904:	f001 f944 	bl	8009b90 <__mcmp>
 8008908:	4642      	mov	r2, r8
 800890a:	4681      	mov	r9, r0
 800890c:	4631      	mov	r1, r6
 800890e:	4638      	mov	r0, r7
 8008910:	f001 f95e 	bl	8009bd0 <__mdiff>
 8008914:	9a08      	ldr	r2, [sp, #32]
 8008916:	68c3      	ldr	r3, [r0, #12]
 8008918:	3230      	adds	r2, #48	; 0x30
 800891a:	4682      	mov	sl, r0
 800891c:	9206      	str	r2, [sp, #24]
 800891e:	f04f 0b01 	mov.w	fp, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	d03d      	beq.n	80089a2 <_dtoa_r+0xa42>
 8008926:	4638      	mov	r0, r7
 8008928:	4651      	mov	r1, sl
 800892a:	f000 fefd 	bl	8009728 <_Bfree>
 800892e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008930:	ea5b 0303 	orrs.w	r3, fp, r3
 8008934:	d103      	bne.n	800893e <_dtoa_r+0x9de>
 8008936:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008938:	2800      	cmp	r0, #0
 800893a:	f000 8211 	beq.w	8008d60 <_dtoa_r+0xe00>
 800893e:	f1b9 0f00 	cmp.w	r9, #0
 8008942:	f2c0 819f 	blt.w	8008c84 <_dtoa_r+0xd24>
 8008946:	9826      	ldr	r0, [sp, #152]	; 0x98
 8008948:	ea59 0000 	orrs.w	r0, r9, r0
 800894c:	d103      	bne.n	8008956 <_dtoa_r+0x9f6>
 800894e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008950:	2900      	cmp	r1, #0
 8008952:	f000 8197 	beq.w	8008c84 <_dtoa_r+0xd24>
 8008956:	f1bb 0f00 	cmp.w	fp, #0
 800895a:	f300 81ea 	bgt.w	8008d32 <_dtoa_r+0xdd2>
 800895e:	9a06      	ldr	r2, [sp, #24]
 8008960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008962:	f805 2b01 	strb.w	r2, [r5], #1
 8008966:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008968:	1a2b      	subs	r3, r5, r0
 800896a:	428b      	cmp	r3, r1
 800896c:	46aa      	mov	sl, r5
 800896e:	f000 81db 	beq.w	8008d28 <_dtoa_r+0xdc8>
 8008972:	220a      	movs	r2, #10
 8008974:	2300      	movs	r3, #0
 8008976:	4638      	mov	r0, r7
 8008978:	990a      	ldr	r1, [sp, #40]	; 0x28
 800897a:	f000 fedf 	bl	800973c <__multadd>
 800897e:	4544      	cmp	r4, r8
 8008980:	900a      	str	r0, [sp, #40]	; 0x28
 8008982:	d027      	beq.n	80089d4 <_dtoa_r+0xa74>
 8008984:	4621      	mov	r1, r4
 8008986:	220a      	movs	r2, #10
 8008988:	2300      	movs	r3, #0
 800898a:	4638      	mov	r0, r7
 800898c:	f000 fed6 	bl	800973c <__multadd>
 8008990:	4641      	mov	r1, r8
 8008992:	4604      	mov	r4, r0
 8008994:	220a      	movs	r2, #10
 8008996:	4638      	mov	r0, r7
 8008998:	2300      	movs	r3, #0
 800899a:	f000 fecf 	bl	800973c <__multadd>
 800899e:	4680      	mov	r8, r0
 80089a0:	e7a9      	b.n	80088f6 <_dtoa_r+0x996>
 80089a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80089a4:	4651      	mov	r1, sl
 80089a6:	f001 f8f3 	bl	8009b90 <__mcmp>
 80089aa:	4683      	mov	fp, r0
 80089ac:	e7bb      	b.n	8008926 <_dtoa_r+0x9c6>
 80089ae:	4638      	mov	r0, r7
 80089b0:	4621      	mov	r1, r4
 80089b2:	f000 feb9 	bl	8009728 <_Bfree>
 80089b6:	e587      	b.n	80084c8 <_dtoa_r+0x568>
 80089b8:	231c      	movs	r3, #28
 80089ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80089bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089be:	18c0      	adds	r0, r0, r3
 80089c0:	18c9      	adds	r1, r1, r3
 80089c2:	900f      	str	r0, [sp, #60]	; 0x3c
 80089c4:	18e4      	adds	r4, r4, r3
 80089c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80089c8:	e538      	b.n	800843c <_dtoa_r+0x4dc>
 80089ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089ce:	4682      	mov	sl, r0
 80089d0:	468b      	mov	fp, r1
 80089d2:	e406      	b.n	80081e2 <_dtoa_r+0x282>
 80089d4:	4621      	mov	r1, r4
 80089d6:	4638      	mov	r0, r7
 80089d8:	220a      	movs	r2, #10
 80089da:	2300      	movs	r3, #0
 80089dc:	f000 feae 	bl	800973c <__multadd>
 80089e0:	4604      	mov	r4, r0
 80089e2:	4680      	mov	r8, r0
 80089e4:	e787      	b.n	80088f6 <_dtoa_r+0x996>
 80089e6:	9c05      	ldr	r4, [sp, #20]
 80089e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80089ea:	9417      	str	r4, [sp, #92]	; 0x5c
 80089ec:	e672      	b.n	80086d4 <_dtoa_r+0x774>
 80089ee:	9d05      	ldr	r5, [sp, #20]
 80089f0:	426c      	negs	r4, r5
 80089f2:	2c00      	cmp	r4, #0
 80089f4:	f000 80fb 	beq.w	8008bee <_dtoa_r+0xc8e>
 80089f8:	4ba0      	ldr	r3, [pc, #640]	; (8008c7c <_dtoa_r+0xd1c>)
 80089fa:	f004 020f 	and.w	r2, r4, #15
 80089fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a02:	4650      	mov	r0, sl
 8008a04:	4659      	mov	r1, fp
 8008a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0a:	f002 fd79 	bl	800b500 <__aeabi_dmul>
 8008a0e:	1124      	asrs	r4, r4, #4
 8008a10:	4682      	mov	sl, r0
 8008a12:	468b      	mov	fp, r1
 8008a14:	f000 80eb 	beq.w	8008bee <_dtoa_r+0xc8e>
 8008a18:	4d99      	ldr	r5, [pc, #612]	; (8008c80 <_dtoa_r+0xd20>)
 8008a1a:	2602      	movs	r6, #2
 8008a1c:	07e2      	lsls	r2, r4, #31
 8008a1e:	d504      	bpl.n	8008a2a <_dtoa_r+0xaca>
 8008a20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a24:	f002 fd6c 	bl	800b500 <__aeabi_dmul>
 8008a28:	3601      	adds	r6, #1
 8008a2a:	3508      	adds	r5, #8
 8008a2c:	1064      	asrs	r4, r4, #1
 8008a2e:	d1f5      	bne.n	8008a1c <_dtoa_r+0xabc>
 8008a30:	4682      	mov	sl, r0
 8008a32:	468b      	mov	fp, r1
 8008a34:	e612      	b.n	800865c <_dtoa_r+0x6fc>
 8008a36:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008a38:	9606      	str	r6, [sp, #24]
 8008a3a:	e530      	b.n	800849e <_dtoa_r+0x53e>
 8008a3c:	498f      	ldr	r1, [pc, #572]	; (8008c7c <_dtoa_r+0xd1c>)
 8008a3e:	1e6c      	subs	r4, r5, #1
 8008a40:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8008a44:	4642      	mov	r2, r8
 8008a46:	464b      	mov	r3, r9
 8008a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a4c:	9406      	str	r4, [sp, #24]
 8008a4e:	f002 fd57 	bl	800b500 <__aeabi_dmul>
 8008a52:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8008a56:	4659      	mov	r1, fp
 8008a58:	4650      	mov	r0, sl
 8008a5a:	f002 ffeb 	bl	800ba34 <__aeabi_d2iz>
 8008a5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a60:	4604      	mov	r4, r0
 8008a62:	9111      	str	r1, [sp, #68]	; 0x44
 8008a64:	f002 fce6 	bl	800b434 <__aeabi_i2d>
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	4659      	mov	r1, fp
 8008a6e:	4650      	mov	r0, sl
 8008a70:	f002 fb92 	bl	800b198 <__aeabi_dsub>
 8008a74:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8008a78:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008a7a:	f804 3b01 	strb.w	r3, [r4], #1
 8008a7e:	2d01      	cmp	r5, #1
 8008a80:	4682      	mov	sl, r0
 8008a82:	468b      	mov	fp, r1
 8008a84:	9411      	str	r4, [sp, #68]	; 0x44
 8008a86:	46a0      	mov	r8, r4
 8008a88:	d020      	beq.n	8008acc <_dtoa_r+0xb6c>
 8008a8a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008a8c:	1e66      	subs	r6, r4, #1
 8008a8e:	1976      	adds	r6, r6, r5
 8008a90:	2300      	movs	r3, #0
 8008a92:	2200      	movs	r2, #0
 8008a94:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8008a98:	f002 fd32 	bl	800b500 <__aeabi_dmul>
 8008a9c:	4689      	mov	r9, r1
 8008a9e:	4680      	mov	r8, r0
 8008aa0:	f002 ffc8 	bl	800ba34 <__aeabi_d2iz>
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	f002 fcc5 	bl	800b434 <__aeabi_i2d>
 8008aaa:	3530      	adds	r5, #48	; 0x30
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4640      	mov	r0, r8
 8008ab2:	4649      	mov	r1, r9
 8008ab4:	f002 fb70 	bl	800b198 <__aeabi_dsub>
 8008ab8:	f804 5f01 	strb.w	r5, [r4, #1]!
 8008abc:	42b4      	cmp	r4, r6
 8008abe:	d1e7      	bne.n	8008a90 <_dtoa_r+0xb30>
 8008ac0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008ac2:	9c06      	ldr	r4, [sp, #24]
 8008ac4:	4682      	mov	sl, r0
 8008ac6:	468b      	mov	fp, r1
 8008ac8:	eb05 0804 	add.w	r8, r5, r4
 8008acc:	2300      	movs	r3, #0
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8008ad4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8008ad8:	f002 fb60 	bl	800b19c <__adddf3>
 8008adc:	4602      	mov	r2, r0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4650      	mov	r0, sl
 8008ae2:	4659      	mov	r1, fp
 8008ae4:	f002 ff9c 	bl	800ba20 <__aeabi_dcmpgt>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	f000 808a 	beq.w	8008c02 <_dtoa_r+0xca2>
 8008aee:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8008af2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008af4:	e422      	b.n	800833c <_dtoa_r+0x3dc>
 8008af6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008af8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8008afc:	e4e8      	b.n	80084d0 <_dtoa_r+0x570>
 8008afe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b00:	4631      	mov	r1, r6
 8008b02:	f001 f845 	bl	8009b90 <__mcmp>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	f6bf acad 	bge.w	8008466 <_dtoa_r+0x506>
 8008b0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b0e:	220a      	movs	r2, #10
 8008b10:	4638      	mov	r0, r7
 8008b12:	2300      	movs	r3, #0
 8008b14:	f000 fe12 	bl	800973c <__multadd>
 8008b18:	9905      	ldr	r1, [sp, #20]
 8008b1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b1c:	900a      	str	r0, [sp, #40]	; 0x28
 8008b1e:	3901      	subs	r1, #1
 8008b20:	9105      	str	r1, [sp, #20]
 8008b22:	2a00      	cmp	r2, #0
 8008b24:	f040 8136 	bne.w	8008d94 <_dtoa_r+0xe34>
 8008b28:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008b2a:	900e      	str	r0, [sp, #56]	; 0x38
 8008b2c:	e49b      	b.n	8008466 <_dtoa_r+0x506>
 8008b2e:	6933      	ldr	r3, [r6, #16]
 8008b30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b34:	6918      	ldr	r0, [r3, #16]
 8008b36:	f000 fe91 	bl	800985c <__hi0bits>
 8008b3a:	f1c0 0320 	rsb	r3, r0, #32
 8008b3e:	e46a      	b.n	8008416 <_dtoa_r+0x4b6>
 8008b40:	f1b9 0f0e 	cmp.w	r9, #14
 8008b44:	bf8c      	ite	hi
 8008b46:	2300      	movhi	r3, #0
 8008b48:	2301      	movls	r3, #1
 8008b4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008b4e:	2100      	movs	r1, #0
 8008b50:	6479      	str	r1, [r7, #68]	; 0x44
 8008b52:	401c      	ands	r4, r3
 8008b54:	e543      	b.n	80085de <_dtoa_r+0x67e>
 8008b56:	2301      	movs	r3, #1
 8008b58:	9315      	str	r3, [sp, #84]	; 0x54
 8008b5a:	930e      	str	r3, [sp, #56]	; 0x38
 8008b5c:	9327      	str	r3, [sp, #156]	; 0x9c
 8008b5e:	e7f6      	b.n	8008b4e <_dtoa_r+0xbee>
 8008b60:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8008b62:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8008b66:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008b6a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b6c:	e006      	b.n	8008b7c <_dtoa_r+0xc1c>
 8008b6e:	4651      	mov	r1, sl
 8008b70:	4638      	mov	r0, r7
 8008b72:	220a      	movs	r2, #10
 8008b74:	2300      	movs	r3, #0
 8008b76:	f000 fde1 	bl	800973c <__multadd>
 8008b7a:	4682      	mov	sl, r0
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	4650      	mov	r0, sl
 8008b80:	f7ff f95e 	bl	8007e40 <quorem>
 8008b84:	3030      	adds	r0, #48	; 0x30
 8008b86:	5528      	strb	r0, [r5, r4]
 8008b88:	3401      	adds	r4, #1
 8008b8a:	45a0      	cmp	r8, r4
 8008b8c:	dcef      	bgt.n	8008b6e <_dtoa_r+0xc0e>
 8008b8e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008b90:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008b94:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008b98:	4681      	mov	r9, r0
 8008b9a:	2c01      	cmp	r4, #1
 8008b9c:	bfac      	ite	ge
 8008b9e:	44a2      	addge	sl, r4
 8008ba0:	f10a 0a01 	addlt.w	sl, sl, #1
 8008ba4:	2400      	movs	r4, #0
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008baa:	4638      	mov	r0, r7
 8008bac:	f000 ff90 	bl	8009ad0 <__lshift>
 8008bb0:	4631      	mov	r1, r6
 8008bb2:	900a      	str	r0, [sp, #40]	; 0x28
 8008bb4:	f000 ffec 	bl	8009b90 <__mcmp>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	f340 8082 	ble.w	8008cc2 <_dtoa_r+0xd62>
 8008bbe:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8008bc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008bc4:	1c6a      	adds	r2, r5, #1
 8008bc6:	e003      	b.n	8008bd0 <_dtoa_r+0xc70>
 8008bc8:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 8008bcc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008bd0:	2b39      	cmp	r3, #57	; 0x39
 8008bd2:	f040 8084 	bne.w	8008cde <_dtoa_r+0xd7e>
 8008bd6:	4592      	cmp	sl, r2
 8008bd8:	d1f6      	bne.n	8008bc8 <_dtoa_r+0xc68>
 8008bda:	9805      	ldr	r0, [sp, #20]
 8008bdc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008bde:	3001      	adds	r0, #1
 8008be0:	2331      	movs	r3, #49	; 0x31
 8008be2:	9005      	str	r0, [sp, #20]
 8008be4:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8008be8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008bec:	e461      	b.n	80084b2 <_dtoa_r+0x552>
 8008bee:	2602      	movs	r6, #2
 8008bf0:	e534      	b.n	800865c <_dtoa_r+0x6fc>
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008bf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bf8:	f000 ff1e 	bl	8009a38 <__pow5mult>
 8008bfc:	900a      	str	r0, [sp, #40]	; 0x28
 8008bfe:	f7ff bbf2 	b.w	80083e6 <_dtoa_r+0x486>
 8008c02:	2100      	movs	r1, #0
 8008c04:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008c08:	2000      	movs	r0, #0
 8008c0a:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8008c0e:	f002 fac3 	bl	800b198 <__aeabi_dsub>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	4650      	mov	r0, sl
 8008c18:	4659      	mov	r1, fp
 8008c1a:	f002 fee3 	bl	800b9e4 <__aeabi_dcmplt>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	f43f aed3 	beq.w	80089ca <_dtoa_r+0xa6a>
 8008c24:	4642      	mov	r2, r8
 8008c26:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
 8008c2a:	2b30      	cmp	r3, #48	; 0x30
 8008c2c:	d0fa      	beq.n	8008c24 <_dtoa_r+0xcc4>
 8008c2e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8008c30:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008c32:	9405      	str	r4, [sp, #20]
 8008c34:	9209      	str	r2, [sp, #36]	; 0x24
 8008c36:	e44b      	b.n	80084d0 <_dtoa_r+0x570>
 8008c38:	4638      	mov	r0, r7
 8008c3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c3c:	f000 fefc 	bl	8009a38 <__pow5mult>
 8008c40:	900a      	str	r0, [sp, #40]	; 0x28
 8008c42:	f7ff bbd0 	b.w	80083e6 <_dtoa_r+0x486>
 8008c46:	2600      	movs	r6, #0
 8008c48:	9606      	str	r6, [sp, #24]
 8008c4a:	e4a5      	b.n	8008598 <_dtoa_r+0x638>
 8008c4c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8008c4e:	2d00      	cmp	r5, #0
 8008c50:	d064      	beq.n	8008d1c <_dtoa_r+0xdbc>
 8008c52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c56:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008c58:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8008c5a:	e47d      	b.n	8008558 <_dtoa_r+0x5f8>
 8008c5c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008c5e:	f7ff bb6d 	b.w	800833c <_dtoa_r+0x3dc>
 8008c62:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8008c64:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8008c68:	1c72      	adds	r2, r6, #1
 8008c6a:	b2d2      	uxtb	r2, r2
 8008c6c:	9405      	str	r4, [sp, #20]
 8008c6e:	f7ff bb7b 	b.w	8008368 <_dtoa_r+0x408>
 8008c72:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008c74:	2300      	movs	r3, #0
 8008c76:	1b04      	subs	r4, r0, r4
 8008c78:	e46e      	b.n	8008558 <_dtoa_r+0x5f8>
 8008c7a:	bf00      	nop
 8008c7c:	0800bc88 	.word	0x0800bc88
 8008c80:	0800bd78 	.word	0x0800bd78
 8008c84:	f1bb 0f00 	cmp.w	fp, #0
 8008c88:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8008c8c:	dd10      	ble.n	8008cb0 <_dtoa_r+0xd50>
 8008c8e:	2201      	movs	r2, #1
 8008c90:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c92:	4638      	mov	r0, r7
 8008c94:	f000 ff1c 	bl	8009ad0 <__lshift>
 8008c98:	4631      	mov	r1, r6
 8008c9a:	900a      	str	r0, [sp, #40]	; 0x28
 8008c9c:	f000 ff78 	bl	8009b90 <__mcmp>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	dd6b      	ble.n	8008d7c <_dtoa_r+0xe1c>
 8008ca4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ca8:	d053      	beq.n	8008d52 <_dtoa_r+0xdf2>
 8008caa:	9b08      	ldr	r3, [sp, #32]
 8008cac:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008cb0:	462b      	mov	r3, r5
 8008cb2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008cb4:	f803 9b01 	strb.w	r9, [r3], #1
 8008cb8:	f8cd 8018 	str.w	r8, [sp, #24]
 8008cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8008cbe:	f7ff bbf8 	b.w	80084b2 <_dtoa_r+0x552>
 8008cc2:	d103      	bne.n	8008ccc <_dtoa_r+0xd6c>
 8008cc4:	f019 0f01 	tst.w	r9, #1
 8008cc8:	f47f af79 	bne.w	8008bbe <_dtoa_r+0xc5e>
 8008ccc:	4652      	mov	r2, sl
 8008cce:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 8008cd2:	2b30      	cmp	r3, #48	; 0x30
 8008cd4:	d0fa      	beq.n	8008ccc <_dtoa_r+0xd6c>
 8008cd6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008cd8:	9209      	str	r2, [sp, #36]	; 0x24
 8008cda:	f7ff bbea 	b.w	80084b2 <_dtoa_r+0x552>
 8008cde:	3301      	adds	r3, #1
 8008ce0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ce2:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8008ce6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008cea:	f7ff bbe2 	b.w	80084b2 <_dtoa_r+0x552>
 8008cee:	9c06      	ldr	r4, [sp, #24]
 8008cf0:	4638      	mov	r0, r7
 8008cf2:	6861      	ldr	r1, [r4, #4]
 8008cf4:	f000 fcf2 	bl	80096dc <_Balloc>
 8008cf8:	9d06      	ldr	r5, [sp, #24]
 8008cfa:	692a      	ldr	r2, [r5, #16]
 8008cfc:	3202      	adds	r2, #2
 8008cfe:	4604      	mov	r4, r0
 8008d00:	0092      	lsls	r2, r2, #2
 8008d02:	f105 010c 	add.w	r1, r5, #12
 8008d06:	f100 000c 	add.w	r0, r0, #12
 8008d0a:	f000 fc9f 	bl	800964c <memcpy>
 8008d0e:	4638      	mov	r0, r7
 8008d10:	4621      	mov	r1, r4
 8008d12:	2201      	movs	r2, #1
 8008d14:	f000 fedc 	bl	8009ad0 <__lshift>
 8008d18:	4680      	mov	r8, r0
 8008d1a:	e5e7      	b.n	80088ec <_dtoa_r+0x98c>
 8008d1c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008d1e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008d20:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8008d22:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008d26:	e417      	b.n	8008558 <_dtoa_r+0x5f8>
 8008d28:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8008d2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d30:	e739      	b.n	8008ba6 <_dtoa_r+0xc46>
 8008d32:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8008d36:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d3a:	d00a      	beq.n	8008d52 <_dtoa_r+0xdf2>
 8008d3c:	462b      	mov	r3, r5
 8008d3e:	f109 0901 	add.w	r9, r9, #1
 8008d42:	f803 9b01 	strb.w	r9, [r3], #1
 8008d46:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d48:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d4e:	f7ff bbb0 	b.w	80084b2 <_dtoa_r+0x552>
 8008d52:	46aa      	mov	sl, r5
 8008d54:	2339      	movs	r3, #57	; 0x39
 8008d56:	f80a 3b01 	strb.w	r3, [sl], #1
 8008d5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d5e:	e730      	b.n	8008bc2 <_dtoa_r+0xc62>
 8008d60:	464b      	mov	r3, r9
 8008d62:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8008d66:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d6a:	d0f2      	beq.n	8008d52 <_dtoa_r+0xdf2>
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	dc9c      	bgt.n	8008caa <_dtoa_r+0xd4a>
 8008d70:	e79e      	b.n	8008cb0 <_dtoa_r+0xd50>
 8008d72:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008d74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d76:	9409      	str	r4, [sp, #36]	; 0x24
 8008d78:	f7ff bbaa 	b.w	80084d0 <_dtoa_r+0x570>
 8008d7c:	d198      	bne.n	8008cb0 <_dtoa_r+0xd50>
 8008d7e:	f019 0f01 	tst.w	r9, #1
 8008d82:	d095      	beq.n	8008cb0 <_dtoa_r+0xd50>
 8008d84:	e78e      	b.n	8008ca4 <_dtoa_r+0xd44>
 8008d86:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8008d88:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d8a:	9405      	str	r4, [sp, #20]
 8008d8c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008d8e:	9409      	str	r4, [sp, #36]	; 0x24
 8008d90:	f7ff bb9e 	b.w	80084d0 <_dtoa_r+0x570>
 8008d94:	2300      	movs	r3, #0
 8008d96:	4638      	mov	r0, r7
 8008d98:	9906      	ldr	r1, [sp, #24]
 8008d9a:	220a      	movs	r2, #10
 8008d9c:	f000 fcce 	bl	800973c <__multadd>
 8008da0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008da2:	9006      	str	r0, [sp, #24]
 8008da4:	930e      	str	r3, [sp, #56]	; 0x38
 8008da6:	f7ff bb5e 	b.w	8008466 <_dtoa_r+0x506>
 8008daa:	f43f ab47 	beq.w	800843c <_dtoa_r+0x4dc>
 8008dae:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8008db2:	e602      	b.n	80089ba <_dtoa_r+0xa5a>
 8008db4:	f3af 8000 	nop.w

08008db8 <_malloc_trim_r>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	4d22      	ldr	r5, [pc, #136]	; (8008e44 <_malloc_trim_r+0x8c>)
 8008dbc:	460f      	mov	r7, r1
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	f000 fc88 	bl	80096d4 <__malloc_lock>
 8008dc4:	68ab      	ldr	r3, [r5, #8]
 8008dc6:	685e      	ldr	r6, [r3, #4]
 8008dc8:	f026 0603 	bic.w	r6, r6, #3
 8008dcc:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 8008dd0:	1bdf      	subs	r7, r3, r7
 8008dd2:	0b3f      	lsrs	r7, r7, #12
 8008dd4:	3f01      	subs	r7, #1
 8008dd6:	033f      	lsls	r7, r7, #12
 8008dd8:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8008ddc:	4620      	mov	r0, r4
 8008dde:	db07      	blt.n	8008df0 <_malloc_trim_r+0x38>
 8008de0:	2100      	movs	r1, #0
 8008de2:	f001 f907 	bl	8009ff4 <_sbrk_r>
 8008de6:	68ab      	ldr	r3, [r5, #8]
 8008de8:	199b      	adds	r3, r3, r6
 8008dea:	4298      	cmp	r0, r3
 8008dec:	4620      	mov	r0, r4
 8008dee:	d003      	beq.n	8008df8 <_malloc_trim_r+0x40>
 8008df0:	f000 fc72 	bl	80096d8 <__malloc_unlock>
 8008df4:	2000      	movs	r0, #0
 8008df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008df8:	4279      	negs	r1, r7
 8008dfa:	f001 f8fb 	bl	8009ff4 <_sbrk_r>
 8008dfe:	3001      	adds	r0, #1
 8008e00:	d00d      	beq.n	8008e1e <_malloc_trim_r+0x66>
 8008e02:	4b11      	ldr	r3, [pc, #68]	; (8008e48 <_malloc_trim_r+0x90>)
 8008e04:	68aa      	ldr	r2, [r5, #8]
 8008e06:	6819      	ldr	r1, [r3, #0]
 8008e08:	1bf6      	subs	r6, r6, r7
 8008e0a:	f046 0601 	orr.w	r6, r6, #1
 8008e0e:	1bcf      	subs	r7, r1, r7
 8008e10:	4620      	mov	r0, r4
 8008e12:	6056      	str	r6, [r2, #4]
 8008e14:	601f      	str	r7, [r3, #0]
 8008e16:	f000 fc5f 	bl	80096d8 <__malloc_unlock>
 8008e1a:	2001      	movs	r0, #1
 8008e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e1e:	2100      	movs	r1, #0
 8008e20:	4620      	mov	r0, r4
 8008e22:	f001 f8e7 	bl	8009ff4 <_sbrk_r>
 8008e26:	68ab      	ldr	r3, [r5, #8]
 8008e28:	1ac2      	subs	r2, r0, r3
 8008e2a:	2a0f      	cmp	r2, #15
 8008e2c:	dd07      	ble.n	8008e3e <_malloc_trim_r+0x86>
 8008e2e:	4907      	ldr	r1, [pc, #28]	; (8008e4c <_malloc_trim_r+0x94>)
 8008e30:	6809      	ldr	r1, [r1, #0]
 8008e32:	1a40      	subs	r0, r0, r1
 8008e34:	4904      	ldr	r1, [pc, #16]	; (8008e48 <_malloc_trim_r+0x90>)
 8008e36:	f042 0201 	orr.w	r2, r2, #1
 8008e3a:	6008      	str	r0, [r1, #0]
 8008e3c:	605a      	str	r2, [r3, #4]
 8008e3e:	4620      	mov	r0, r4
 8008e40:	e7d6      	b.n	8008df0 <_malloc_trim_r+0x38>
 8008e42:	bf00      	nop
 8008e44:	2000060c 	.word	0x2000060c
 8008e48:	20000a38 	.word	0x20000a38
 8008e4c:	20000a14 	.word	0x20000a14

08008e50 <_free_r>:
 8008e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e54:	460d      	mov	r5, r1
 8008e56:	4604      	mov	r4, r0
 8008e58:	2900      	cmp	r1, #0
 8008e5a:	d06f      	beq.n	8008f3c <_free_r+0xec>
 8008e5c:	f000 fc3a 	bl	80096d4 <__malloc_lock>
 8008e60:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8008e64:	4e58      	ldr	r6, [pc, #352]	; (8008fc8 <_free_r+0x178>)
 8008e66:	f1a5 0108 	sub.w	r1, r5, #8
 8008e6a:	f020 0301 	bic.w	r3, r0, #1
 8008e6e:	18ca      	adds	r2, r1, r3
 8008e70:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8008e74:	6857      	ldr	r7, [r2, #4]
 8008e76:	4594      	cmp	ip, r2
 8008e78:	f027 0703 	bic.w	r7, r7, #3
 8008e7c:	d07c      	beq.n	8008f78 <_free_r+0x128>
 8008e7e:	f010 0001 	ands.w	r0, r0, #1
 8008e82:	6057      	str	r7, [r2, #4]
 8008e84:	d049      	beq.n	8008f1a <_free_r+0xca>
 8008e86:	2000      	movs	r0, #0
 8008e88:	19d5      	adds	r5, r2, r7
 8008e8a:	686d      	ldr	r5, [r5, #4]
 8008e8c:	f015 0f01 	tst.w	r5, #1
 8008e90:	d106      	bne.n	8008ea0 <_free_r+0x50>
 8008e92:	19db      	adds	r3, r3, r7
 8008e94:	6895      	ldr	r5, [r2, #8]
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d062      	beq.n	8008f60 <_free_r+0x110>
 8008e9a:	68d2      	ldr	r2, [r2, #12]
 8008e9c:	60ea      	str	r2, [r5, #12]
 8008e9e:	6095      	str	r5, [r2, #8]
 8008ea0:	f043 0201 	orr.w	r2, r3, #1
 8008ea4:	604a      	str	r2, [r1, #4]
 8008ea6:	50cb      	str	r3, [r1, r3]
 8008ea8:	bb90      	cbnz	r0, 8008f10 <_free_r+0xc0>
 8008eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eae:	d347      	bcc.n	8008f40 <_free_r+0xf0>
 8008eb0:	099d      	lsrs	r5, r3, #6
 8008eb2:	3538      	adds	r5, #56	; 0x38
 8008eb4:	0a5a      	lsrs	r2, r3, #9
 8008eb6:	00e8      	lsls	r0, r5, #3
 8008eb8:	2a04      	cmp	r2, #4
 8008eba:	d916      	bls.n	8008eea <_free_r+0x9a>
 8008ebc:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8008ec0:	00e8      	lsls	r0, r5, #3
 8008ec2:	2a14      	cmp	r2, #20
 8008ec4:	d911      	bls.n	8008eea <_free_r+0x9a>
 8008ec6:	0b1d      	lsrs	r5, r3, #12
 8008ec8:	356e      	adds	r5, #110	; 0x6e
 8008eca:	00e8      	lsls	r0, r5, #3
 8008ecc:	2a54      	cmp	r2, #84	; 0x54
 8008ece:	d90c      	bls.n	8008eea <_free_r+0x9a>
 8008ed0:	0bdd      	lsrs	r5, r3, #15
 8008ed2:	3577      	adds	r5, #119	; 0x77
 8008ed4:	00e8      	lsls	r0, r5, #3
 8008ed6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008eda:	d906      	bls.n	8008eea <_free_r+0x9a>
 8008edc:	f240 5054 	movw	r0, #1364	; 0x554
 8008ee0:	4282      	cmp	r2, r0
 8008ee2:	d86d      	bhi.n	8008fc0 <_free_r+0x170>
 8008ee4:	0c9d      	lsrs	r5, r3, #18
 8008ee6:	357c      	adds	r5, #124	; 0x7c
 8008ee8:	00e8      	lsls	r0, r5, #3
 8008eea:	1986      	adds	r6, r0, r6
 8008eec:	4836      	ldr	r0, [pc, #216]	; (8008fc8 <_free_r+0x178>)
 8008eee:	68b2      	ldr	r2, [r6, #8]
 8008ef0:	42b2      	cmp	r2, r6
 8008ef2:	d103      	bne.n	8008efc <_free_r+0xac>
 8008ef4:	e05b      	b.n	8008fae <_free_r+0x15e>
 8008ef6:	6892      	ldr	r2, [r2, #8]
 8008ef8:	4296      	cmp	r6, r2
 8008efa:	d004      	beq.n	8008f06 <_free_r+0xb6>
 8008efc:	6850      	ldr	r0, [r2, #4]
 8008efe:	f020 0003 	bic.w	r0, r0, #3
 8008f02:	4283      	cmp	r3, r0
 8008f04:	d3f7      	bcc.n	8008ef6 <_free_r+0xa6>
 8008f06:	68d3      	ldr	r3, [r2, #12]
 8008f08:	60cb      	str	r3, [r1, #12]
 8008f0a:	608a      	str	r2, [r1, #8]
 8008f0c:	60d1      	str	r1, [r2, #12]
 8008f0e:	6099      	str	r1, [r3, #8]
 8008f10:	4620      	mov	r0, r4
 8008f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f16:	f000 bbdf 	b.w	80096d8 <__malloc_unlock>
 8008f1a:	f855 cc08 	ldr.w	ip, [r5, #-8]
 8008f1e:	ebcc 0101 	rsb	r1, ip, r1
 8008f22:	f106 0808 	add.w	r8, r6, #8
 8008f26:	688d      	ldr	r5, [r1, #8]
 8008f28:	4545      	cmp	r5, r8
 8008f2a:	4463      	add	r3, ip
 8008f2c:	d03d      	beq.n	8008faa <_free_r+0x15a>
 8008f2e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8008f32:	f8c5 c00c 	str.w	ip, [r5, #12]
 8008f36:	f8cc 5008 	str.w	r5, [ip, #8]
 8008f3a:	e7a5      	b.n	8008e88 <_free_r+0x38>
 8008f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f40:	08db      	lsrs	r3, r3, #3
 8008f42:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8008f46:	6875      	ldr	r5, [r6, #4]
 8008f48:	6890      	ldr	r0, [r2, #8]
 8008f4a:	60ca      	str	r2, [r1, #12]
 8008f4c:	109b      	asrs	r3, r3, #2
 8008f4e:	2701      	movs	r7, #1
 8008f50:	fa17 f303 	lsls.w	r3, r7, r3
 8008f54:	432b      	orrs	r3, r5
 8008f56:	6088      	str	r0, [r1, #8]
 8008f58:	6073      	str	r3, [r6, #4]
 8008f5a:	6091      	str	r1, [r2, #8]
 8008f5c:	60c1      	str	r1, [r0, #12]
 8008f5e:	e7d7      	b.n	8008f10 <_free_r+0xc0>
 8008f60:	4f1a      	ldr	r7, [pc, #104]	; (8008fcc <_free_r+0x17c>)
 8008f62:	42bd      	cmp	r5, r7
 8008f64:	d199      	bne.n	8008e9a <_free_r+0x4a>
 8008f66:	f043 0201 	orr.w	r2, r3, #1
 8008f6a:	6171      	str	r1, [r6, #20]
 8008f6c:	6131      	str	r1, [r6, #16]
 8008f6e:	60cd      	str	r5, [r1, #12]
 8008f70:	608d      	str	r5, [r1, #8]
 8008f72:	604a      	str	r2, [r1, #4]
 8008f74:	50cb      	str	r3, [r1, r3]
 8008f76:	e7cb      	b.n	8008f10 <_free_r+0xc0>
 8008f78:	07c2      	lsls	r2, r0, #31
 8008f7a:	443b      	add	r3, r7
 8008f7c:	d407      	bmi.n	8008f8e <_free_r+0x13e>
 8008f7e:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8008f82:	1a89      	subs	r1, r1, r2
 8008f84:	189b      	adds	r3, r3, r2
 8008f86:	6888      	ldr	r0, [r1, #8]
 8008f88:	68ca      	ldr	r2, [r1, #12]
 8008f8a:	60c2      	str	r2, [r0, #12]
 8008f8c:	6090      	str	r0, [r2, #8]
 8008f8e:	4a10      	ldr	r2, [pc, #64]	; (8008fd0 <_free_r+0x180>)
 8008f90:	60b1      	str	r1, [r6, #8]
 8008f92:	6812      	ldr	r2, [r2, #0]
 8008f94:	f043 0001 	orr.w	r0, r3, #1
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	6048      	str	r0, [r1, #4]
 8008f9c:	d3b8      	bcc.n	8008f10 <_free_r+0xc0>
 8008f9e:	4b0d      	ldr	r3, [pc, #52]	; (8008fd4 <_free_r+0x184>)
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	6819      	ldr	r1, [r3, #0]
 8008fa4:	f7ff ff08 	bl	8008db8 <_malloc_trim_r>
 8008fa8:	e7b2      	b.n	8008f10 <_free_r+0xc0>
 8008faa:	2001      	movs	r0, #1
 8008fac:	e76c      	b.n	8008e88 <_free_r+0x38>
 8008fae:	6843      	ldr	r3, [r0, #4]
 8008fb0:	10ad      	asrs	r5, r5, #2
 8008fb2:	2601      	movs	r6, #1
 8008fb4:	fa16 f505 	lsls.w	r5, r6, r5
 8008fb8:	432b      	orrs	r3, r5
 8008fba:	6043      	str	r3, [r0, #4]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	e7a3      	b.n	8008f08 <_free_r+0xb8>
 8008fc0:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8008fc4:	257e      	movs	r5, #126	; 0x7e
 8008fc6:	e790      	b.n	8008eea <_free_r+0x9a>
 8008fc8:	2000060c 	.word	0x2000060c
 8008fcc:	20000614 	.word	0x20000614
 8008fd0:	20000a18 	.word	0x20000a18
 8008fd4:	20000a34 	.word	0x20000a34

08008fd8 <_setlocale_r>:
 8008fd8:	b510      	push	{r4, lr}
 8008fda:	4614      	mov	r4, r2
 8008fdc:	b122      	cbz	r2, 8008fe8 <_setlocale_r+0x10>
 8008fde:	4610      	mov	r0, r2
 8008fe0:	490b      	ldr	r1, [pc, #44]	; (8009010 <_setlocale_r+0x38>)
 8008fe2:	f001 f819 	bl	800a018 <strcmp>
 8008fe6:	b908      	cbnz	r0, 8008fec <_setlocale_r+0x14>
 8008fe8:	480a      	ldr	r0, [pc, #40]	; (8009014 <_setlocale_r+0x3c>)
 8008fea:	bd10      	pop	{r4, pc}
 8008fec:	4620      	mov	r0, r4
 8008fee:	4909      	ldr	r1, [pc, #36]	; (8009014 <_setlocale_r+0x3c>)
 8008ff0:	f001 f812 	bl	800a018 <strcmp>
 8008ff4:	b908      	cbnz	r0, 8008ffa <_setlocale_r+0x22>
 8008ff6:	4807      	ldr	r0, [pc, #28]	; (8009014 <_setlocale_r+0x3c>)
 8008ff8:	bd10      	pop	{r4, pc}
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	4906      	ldr	r1, [pc, #24]	; (8009018 <_setlocale_r+0x40>)
 8008ffe:	f001 f80b 	bl	800a018 <strcmp>
 8009002:	4b04      	ldr	r3, [pc, #16]	; (8009014 <_setlocale_r+0x3c>)
 8009004:	2800      	cmp	r0, #0
 8009006:	bf0c      	ite	eq
 8009008:	4618      	moveq	r0, r3
 800900a:	2000      	movne	r0, #0
 800900c:	bd10      	pop	{r4, pc}
 800900e:	bf00      	nop
 8009010:	0800be58 	.word	0x0800be58
 8009014:	0800be54 	.word	0x0800be54
 8009018:	0800be20 	.word	0x0800be20

0800901c <__locale_charset>:
 800901c:	f240 5090 	movw	r0, #1424	; 0x590
 8009020:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop

08009028 <__locale_mb_cur_max>:
 8009028:	f240 5390 	movw	r3, #1424	; 0x590
 800902c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009030:	6a18      	ldr	r0, [r3, #32]
 8009032:	4770      	bx	lr

08009034 <__locale_msgcharset>:
 8009034:	4800      	ldr	r0, [pc, #0]	; (8009038 <__locale_msgcharset+0x4>)
 8009036:	4770      	bx	lr
 8009038:	200005b4 	.word	0x200005b4

0800903c <__locale_cjk_lang>:
 800903c:	2000      	movs	r0, #0
 800903e:	4770      	bx	lr

08009040 <_localeconv_r>:
 8009040:	4800      	ldr	r0, [pc, #0]	; (8009044 <_localeconv_r+0x4>)
 8009042:	4770      	bx	lr
 8009044:	200005d4 	.word	0x200005d4

08009048 <setlocale>:
 8009048:	b410      	push	{r4}
 800904a:	f240 1360 	movw	r3, #352	; 0x160
 800904e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009052:	4604      	mov	r4, r0
 8009054:	6818      	ldr	r0, [r3, #0]
 8009056:	460a      	mov	r2, r1
 8009058:	4621      	mov	r1, r4
 800905a:	bc10      	pop	{r4}
 800905c:	e7bc      	b.n	8008fd8 <_setlocale_r>
 800905e:	bf00      	nop

08009060 <localeconv>:
 8009060:	4800      	ldr	r0, [pc, #0]	; (8009064 <localeconv+0x4>)
 8009062:	4770      	bx	lr
 8009064:	200005d4 	.word	0x200005d4

08009068 <_malloc_r>:
 8009068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	f101 040b 	add.w	r4, r1, #11
 8009070:	2c16      	cmp	r4, #22
 8009072:	4605      	mov	r5, r0
 8009074:	d92a      	bls.n	80090cc <_malloc_r+0x64>
 8009076:	f024 0407 	bic.w	r4, r4, #7
 800907a:	0fe3      	lsrs	r3, r4, #31
 800907c:	428c      	cmp	r4, r1
 800907e:	bf2c      	ite	cs
 8009080:	4619      	movcs	r1, r3
 8009082:	f043 0101 	orrcc.w	r1, r3, #1
 8009086:	bb51      	cbnz	r1, 80090de <_malloc_r+0x76>
 8009088:	4628      	mov	r0, r5
 800908a:	f000 fb23 	bl	80096d4 <__malloc_lock>
 800908e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8009092:	d22a      	bcs.n	80090ea <_malloc_r+0x82>
 8009094:	4e7d      	ldr	r6, [pc, #500]	; (800928c <_malloc_r+0x224>)
 8009096:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 800909a:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 800909e:	68df      	ldr	r7, [r3, #12]
 80090a0:	429f      	cmp	r7, r3
 80090a2:	f000 8235 	beq.w	8009510 <_malloc_r+0x4a8>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	68b9      	ldr	r1, [r7, #8]
 80090ac:	f023 0303 	bic.w	r3, r3, #3
 80090b0:	18fb      	adds	r3, r7, r3
 80090b2:	60ca      	str	r2, [r1, #12]
 80090b4:	6858      	ldr	r0, [r3, #4]
 80090b6:	6091      	str	r1, [r2, #8]
 80090b8:	f040 0201 	orr.w	r2, r0, #1
 80090bc:	605a      	str	r2, [r3, #4]
 80090be:	4628      	mov	r0, r5
 80090c0:	f000 fb0a 	bl	80096d8 <__malloc_unlock>
 80090c4:	3708      	adds	r7, #8
 80090c6:	4638      	mov	r0, r7
 80090c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090cc:	2300      	movs	r3, #0
 80090ce:	2410      	movs	r4, #16
 80090d0:	428c      	cmp	r4, r1
 80090d2:	bf2c      	ite	cs
 80090d4:	4619      	movcs	r1, r3
 80090d6:	f043 0101 	orrcc.w	r1, r3, #1
 80090da:	2900      	cmp	r1, #0
 80090dc:	d0d4      	beq.n	8009088 <_malloc_r+0x20>
 80090de:	230c      	movs	r3, #12
 80090e0:	2700      	movs	r7, #0
 80090e2:	602b      	str	r3, [r5, #0]
 80090e4:	4638      	mov	r0, r7
 80090e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ea:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 80090ee:	bf04      	itt	eq
 80090f0:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 80090f4:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 80090f8:	f040 8081 	bne.w	80091fe <_malloc_r+0x196>
 80090fc:	4e63      	ldr	r6, [pc, #396]	; (800928c <_malloc_r+0x224>)
 80090fe:	1871      	adds	r1, r6, r1
 8009100:	68cf      	ldr	r7, [r1, #12]
 8009102:	42b9      	cmp	r1, r7
 8009104:	d106      	bne.n	8009114 <_malloc_r+0xac>
 8009106:	e00d      	b.n	8009124 <_malloc_r+0xbc>
 8009108:	2b00      	cmp	r3, #0
 800910a:	f280 8169 	bge.w	80093e0 <_malloc_r+0x378>
 800910e:	68ff      	ldr	r7, [r7, #12]
 8009110:	42b9      	cmp	r1, r7
 8009112:	d007      	beq.n	8009124 <_malloc_r+0xbc>
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	f022 0203 	bic.w	r2, r2, #3
 800911a:	1b13      	subs	r3, r2, r4
 800911c:	2b0f      	cmp	r3, #15
 800911e:	ddf3      	ble.n	8009108 <_malloc_r+0xa0>
 8009120:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8009124:	f10e 0e01 	add.w	lr, lr, #1
 8009128:	4a58      	ldr	r2, [pc, #352]	; (800928c <_malloc_r+0x224>)
 800912a:	6937      	ldr	r7, [r6, #16]
 800912c:	f102 0c08 	add.w	ip, r2, #8
 8009130:	4567      	cmp	r7, ip
 8009132:	bf08      	it	eq
 8009134:	6853      	ldreq	r3, [r2, #4]
 8009136:	d023      	beq.n	8009180 <_malloc_r+0x118>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f023 0303 	bic.w	r3, r3, #3
 800913e:	1b19      	subs	r1, r3, r4
 8009140:	290f      	cmp	r1, #15
 8009142:	f300 81b4 	bgt.w	80094ae <_malloc_r+0x446>
 8009146:	2900      	cmp	r1, #0
 8009148:	f8c2 c014 	str.w	ip, [r2, #20]
 800914c:	f8c2 c010 	str.w	ip, [r2, #16]
 8009150:	f280 808f 	bge.w	8009272 <_malloc_r+0x20a>
 8009154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009158:	f080 8161 	bcs.w	800941e <_malloc_r+0x3b6>
 800915c:	08db      	lsrs	r3, r3, #3
 800915e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009162:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8009166:	6888      	ldr	r0, [r1, #8]
 8009168:	60f9      	str	r1, [r7, #12]
 800916a:	109b      	asrs	r3, r3, #2
 800916c:	f04f 0901 	mov.w	r9, #1
 8009170:	fa09 f303 	lsl.w	r3, r9, r3
 8009174:	ea43 0308 	orr.w	r3, r3, r8
 8009178:	60b8      	str	r0, [r7, #8]
 800917a:	6053      	str	r3, [r2, #4]
 800917c:	608f      	str	r7, [r1, #8]
 800917e:	60c7      	str	r7, [r0, #12]
 8009180:	2001      	movs	r0, #1
 8009182:	ea4f 02ae 	mov.w	r2, lr, asr #2
 8009186:	4090      	lsls	r0, r2
 8009188:	4298      	cmp	r0, r3
 800918a:	f200 8081 	bhi.w	8009290 <_malloc_r+0x228>
 800918e:	4203      	tst	r3, r0
 8009190:	d106      	bne.n	80091a0 <_malloc_r+0x138>
 8009192:	f02e 0e03 	bic.w	lr, lr, #3
 8009196:	0040      	lsls	r0, r0, #1
 8009198:	4203      	tst	r3, r0
 800919a:	f10e 0e04 	add.w	lr, lr, #4
 800919e:	d0fa      	beq.n	8009196 <_malloc_r+0x12e>
 80091a0:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 80091a4:	464f      	mov	r7, r9
 80091a6:	46f0      	mov	r8, lr
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	429f      	cmp	r7, r3
 80091ac:	d107      	bne.n	80091be <_malloc_r+0x156>
 80091ae:	e191      	b.n	80094d4 <_malloc_r+0x46c>
 80091b0:	2a00      	cmp	r2, #0
 80091b2:	f280 81b7 	bge.w	8009524 <_malloc_r+0x4bc>
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	429f      	cmp	r7, r3
 80091ba:	f000 818b 	beq.w	80094d4 <_malloc_r+0x46c>
 80091be:	6859      	ldr	r1, [r3, #4]
 80091c0:	f021 0103 	bic.w	r1, r1, #3
 80091c4:	1b0a      	subs	r2, r1, r4
 80091c6:	2a0f      	cmp	r2, #15
 80091c8:	ddf2      	ble.n	80091b0 <_malloc_r+0x148>
 80091ca:	461f      	mov	r7, r3
 80091cc:	1919      	adds	r1, r3, r4
 80091ce:	68d8      	ldr	r0, [r3, #12]
 80091d0:	f857 ef08 	ldr.w	lr, [r7, #8]!
 80091d4:	508a      	str	r2, [r1, r2]
 80091d6:	f044 0401 	orr.w	r4, r4, #1
 80091da:	f042 0201 	orr.w	r2, r2, #1
 80091de:	f8ce 000c 	str.w	r0, [lr, #12]
 80091e2:	f8c0 e008 	str.w	lr, [r0, #8]
 80091e6:	605c      	str	r4, [r3, #4]
 80091e8:	6171      	str	r1, [r6, #20]
 80091ea:	6131      	str	r1, [r6, #16]
 80091ec:	f8c1 c00c 	str.w	ip, [r1, #12]
 80091f0:	f8c1 c008 	str.w	ip, [r1, #8]
 80091f4:	604a      	str	r2, [r1, #4]
 80091f6:	4628      	mov	r0, r5
 80091f8:	f000 fa6e 	bl	80096d8 <__malloc_unlock>
 80091fc:	e763      	b.n	80090c6 <_malloc_r+0x5e>
 80091fe:	f1be 0f04 	cmp.w	lr, #4
 8009202:	bf9e      	ittt	ls
 8009204:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 8009208:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 800920c:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8009210:	f67f af74 	bls.w	80090fc <_malloc_r+0x94>
 8009214:	f1be 0f14 	cmp.w	lr, #20
 8009218:	bf9c      	itt	ls
 800921a:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 800921e:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8009222:	f67f af6b 	bls.w	80090fc <_malloc_r+0x94>
 8009226:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 800922a:	bf9e      	ittt	ls
 800922c:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8009230:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 8009234:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8009238:	f67f af60 	bls.w	80090fc <_malloc_r+0x94>
 800923c:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8009240:	bf9e      	ittt	ls
 8009242:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 8009246:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 800924a:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 800924e:	f67f af55 	bls.w	80090fc <_malloc_r+0x94>
 8009252:	f240 5354 	movw	r3, #1364	; 0x554
 8009256:	459e      	cmp	lr, r3
 8009258:	bf9d      	ittte	ls
 800925a:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 800925e:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 8009262:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8009266:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 800926a:	bf88      	it	hi
 800926c:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8009270:	e744      	b.n	80090fc <_malloc_r+0x94>
 8009272:	18fb      	adds	r3, r7, r3
 8009274:	4628      	mov	r0, r5
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	f042 0201 	orr.w	r2, r2, #1
 800927c:	605a      	str	r2, [r3, #4]
 800927e:	3708      	adds	r7, #8
 8009280:	f000 fa2a 	bl	80096d8 <__malloc_unlock>
 8009284:	4638      	mov	r0, r7
 8009286:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800928a:	bf00      	nop
 800928c:	2000060c 	.word	0x2000060c
 8009290:	68b7      	ldr	r7, [r6, #8]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f023 0803 	bic.w	r8, r3, #3
 8009298:	4544      	cmp	r4, r8
 800929a:	ebc4 0208 	rsb	r2, r4, r8
 800929e:	bf94      	ite	ls
 80092a0:	2300      	movls	r3, #0
 80092a2:	2301      	movhi	r3, #1
 80092a4:	2a0f      	cmp	r2, #15
 80092a6:	bfd8      	it	le
 80092a8:	f043 0301 	orrle.w	r3, r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 80a7 	beq.w	8009400 <_malloc_r+0x398>
 80092b2:	4bb3      	ldr	r3, [pc, #716]	; (8009580 <_malloc_r+0x518>)
 80092b4:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 8009584 <_malloc_r+0x51c>
 80092b8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80092bc:	f8da 3000 	ldr.w	r3, [sl]
 80092c0:	3201      	adds	r2, #1
 80092c2:	4423      	add	r3, r4
 80092c4:	bf08      	it	eq
 80092c6:	f103 0b10 	addeq.w	fp, r3, #16
 80092ca:	d006      	beq.n	80092da <_malloc_r+0x272>
 80092cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092d0:	330f      	adds	r3, #15
 80092d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80092d6:	f023 0b0f 	bic.w	fp, r3, #15
 80092da:	4628      	mov	r0, r5
 80092dc:	4659      	mov	r1, fp
 80092de:	f000 fe89 	bl	8009ff4 <_sbrk_r>
 80092e2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80092e6:	4681      	mov	r9, r0
 80092e8:	f000 8144 	beq.w	8009574 <_malloc_r+0x50c>
 80092ec:	eb07 0208 	add.w	r2, r7, r8
 80092f0:	4282      	cmp	r2, r0
 80092f2:	f200 8126 	bhi.w	8009542 <_malloc_r+0x4da>
 80092f6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80092fa:	454a      	cmp	r2, r9
 80092fc:	445b      	add	r3, fp
 80092fe:	f8ca 3004 	str.w	r3, [sl, #4]
 8009302:	f000 8141 	beq.w	8009588 <_malloc_r+0x520>
 8009306:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 800930a:	3101      	adds	r1, #1
 800930c:	bf15      	itete	ne
 800930e:	ebc2 0209 	rsbne	r2, r2, r9
 8009312:	4b9b      	ldreq	r3, [pc, #620]	; (8009580 <_malloc_r+0x518>)
 8009314:	189b      	addne	r3, r3, r2
 8009316:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 800931a:	bf18      	it	ne
 800931c:	f8ca 3004 	strne.w	r3, [sl, #4]
 8009320:	f019 0307 	ands.w	r3, r9, #7
 8009324:	bf1f      	itttt	ne
 8009326:	f1c3 0208 	rsbne	r2, r3, #8
 800932a:	4491      	addne	r9, r2
 800932c:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8009330:	f103 0208 	addne.w	r2, r3, #8
 8009334:	eb09 030b 	add.w	r3, r9, fp
 8009338:	bf08      	it	eq
 800933a:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 800933e:	051b      	lsls	r3, r3, #20
 8009340:	0d1b      	lsrs	r3, r3, #20
 8009342:	ebc3 0b02 	rsb	fp, r3, r2
 8009346:	4628      	mov	r0, r5
 8009348:	4659      	mov	r1, fp
 800934a:	f000 fe53 	bl	8009ff4 <_sbrk_r>
 800934e:	1c43      	adds	r3, r0, #1
 8009350:	f000 8126 	beq.w	80095a0 <_malloc_r+0x538>
 8009354:	ebc9 0200 	rsb	r2, r9, r0
 8009358:	445a      	add	r2, fp
 800935a:	f042 0201 	orr.w	r2, r2, #1
 800935e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009362:	f8c6 9008 	str.w	r9, [r6, #8]
 8009366:	445b      	add	r3, fp
 8009368:	42b7      	cmp	r7, r6
 800936a:	f8ca 3004 	str.w	r3, [sl, #4]
 800936e:	f8c9 2004 	str.w	r2, [r9, #4]
 8009372:	d015      	beq.n	80093a0 <_malloc_r+0x338>
 8009374:	f1b8 0f0f 	cmp.w	r8, #15
 8009378:	f240 80f6 	bls.w	8009568 <_malloc_r+0x500>
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f1a8 020c 	sub.w	r2, r8, #12
 8009382:	f022 0207 	bic.w	r2, r2, #7
 8009386:	18b9      	adds	r1, r7, r2
 8009388:	f000 0e01 	and.w	lr, r0, #1
 800938c:	ea42 0e0e 	orr.w	lr, r2, lr
 8009390:	2005      	movs	r0, #5
 8009392:	2a0f      	cmp	r2, #15
 8009394:	f8c7 e004 	str.w	lr, [r7, #4]
 8009398:	6048      	str	r0, [r1, #4]
 800939a:	6088      	str	r0, [r1, #8]
 800939c:	f200 8104 	bhi.w	80095a8 <_malloc_r+0x540>
 80093a0:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 80093a4:	68b7      	ldr	r7, [r6, #8]
 80093a6:	4293      	cmp	r3, r2
 80093a8:	bf84      	itt	hi
 80093aa:	4a76      	ldrhi	r2, [pc, #472]	; (8009584 <_malloc_r+0x51c>)
 80093ac:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 80093ae:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 80093b2:	4293      	cmp	r3, r2
 80093b4:	bf84      	itt	hi
 80093b6:	4a73      	ldrhi	r2, [pc, #460]	; (8009584 <_malloc_r+0x51c>)
 80093b8:	6313      	strhi	r3, [r2, #48]	; 0x30
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f023 0303 	bic.w	r3, r3, #3
 80093c0:	429c      	cmp	r4, r3
 80093c2:	ebc4 0203 	rsb	r2, r4, r3
 80093c6:	bf94      	ite	ls
 80093c8:	2300      	movls	r3, #0
 80093ca:	2301      	movhi	r3, #1
 80093cc:	2a0f      	cmp	r2, #15
 80093ce:	bfd8      	it	le
 80093d0:	f043 0301 	orrle.w	r3, r3, #1
 80093d4:	b1a3      	cbz	r3, 8009400 <_malloc_r+0x398>
 80093d6:	4628      	mov	r0, r5
 80093d8:	f000 f97e 	bl	80096d8 <__malloc_unlock>
 80093dc:	2700      	movs	r7, #0
 80093de:	e672      	b.n	80090c6 <_malloc_r+0x5e>
 80093e0:	18ba      	adds	r2, r7, r2
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6850      	ldr	r0, [r2, #4]
 80093e6:	68b9      	ldr	r1, [r7, #8]
 80093e8:	f040 0001 	orr.w	r0, r0, #1
 80093ec:	6050      	str	r0, [r2, #4]
 80093ee:	60cb      	str	r3, [r1, #12]
 80093f0:	4628      	mov	r0, r5
 80093f2:	6099      	str	r1, [r3, #8]
 80093f4:	3708      	adds	r7, #8
 80093f6:	f000 f96f 	bl	80096d8 <__malloc_unlock>
 80093fa:	4638      	mov	r0, r7
 80093fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009400:	193b      	adds	r3, r7, r4
 8009402:	f042 0201 	orr.w	r2, r2, #1
 8009406:	f044 0401 	orr.w	r4, r4, #1
 800940a:	607c      	str	r4, [r7, #4]
 800940c:	4628      	mov	r0, r5
 800940e:	605a      	str	r2, [r3, #4]
 8009410:	3708      	adds	r7, #8
 8009412:	60b3      	str	r3, [r6, #8]
 8009414:	f000 f960 	bl	80096d8 <__malloc_unlock>
 8009418:	4638      	mov	r0, r7
 800941a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941e:	0a5a      	lsrs	r2, r3, #9
 8009420:	2a04      	cmp	r2, #4
 8009422:	bf9e      	ittt	ls
 8009424:	ea4f 1893 	movls.w	r8, r3, lsr #6
 8009428:	f108 0838 	addls.w	r8, r8, #56	; 0x38
 800942c:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8009430:	d928      	bls.n	8009484 <_malloc_r+0x41c>
 8009432:	2a14      	cmp	r2, #20
 8009434:	bf9c      	itt	ls
 8009436:	f102 085b 	addls.w	r8, r2, #91	; 0x5b
 800943a:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800943e:	d921      	bls.n	8009484 <_malloc_r+0x41c>
 8009440:	2a54      	cmp	r2, #84	; 0x54
 8009442:	bf9e      	ittt	ls
 8009444:	ea4f 3813 	movls.w	r8, r3, lsr #12
 8009448:	f108 086e 	addls.w	r8, r8, #110	; 0x6e
 800944c:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8009450:	d918      	bls.n	8009484 <_malloc_r+0x41c>
 8009452:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009456:	bf9e      	ittt	ls
 8009458:	ea4f 38d3 	movls.w	r8, r3, lsr #15
 800945c:	f108 0877 	addls.w	r8, r8, #119	; 0x77
 8009460:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8009464:	d90e      	bls.n	8009484 <_malloc_r+0x41c>
 8009466:	f240 5154 	movw	r1, #1364	; 0x554
 800946a:	428a      	cmp	r2, r1
 800946c:	bf9d      	ittte	ls
 800946e:	ea4f 4893 	movls.w	r8, r3, lsr #18
 8009472:	f108 087c 	addls.w	r8, r8, #124	; 0x7c
 8009476:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800947a:	f44f 707c 	movhi.w	r0, #1008	; 0x3f0
 800947e:	bf88      	it	hi
 8009480:	f04f 087e 	movhi.w	r8, #126	; 0x7e
 8009484:	1830      	adds	r0, r6, r0
 8009486:	493e      	ldr	r1, [pc, #248]	; (8009580 <_malloc_r+0x518>)
 8009488:	6882      	ldr	r2, [r0, #8]
 800948a:	4282      	cmp	r2, r0
 800948c:	d103      	bne.n	8009496 <_malloc_r+0x42e>
 800948e:	e061      	b.n	8009554 <_malloc_r+0x4ec>
 8009490:	6892      	ldr	r2, [r2, #8]
 8009492:	4290      	cmp	r0, r2
 8009494:	d004      	beq.n	80094a0 <_malloc_r+0x438>
 8009496:	6851      	ldr	r1, [r2, #4]
 8009498:	f021 0103 	bic.w	r1, r1, #3
 800949c:	428b      	cmp	r3, r1
 800949e:	d3f7      	bcc.n	8009490 <_malloc_r+0x428>
 80094a0:	68d1      	ldr	r1, [r2, #12]
 80094a2:	6873      	ldr	r3, [r6, #4]
 80094a4:	60f9      	str	r1, [r7, #12]
 80094a6:	60ba      	str	r2, [r7, #8]
 80094a8:	60d7      	str	r7, [r2, #12]
 80094aa:	608f      	str	r7, [r1, #8]
 80094ac:	e668      	b.n	8009180 <_malloc_r+0x118>
 80094ae:	193b      	adds	r3, r7, r4
 80094b0:	f041 0001 	orr.w	r0, r1, #1
 80094b4:	f044 0401 	orr.w	r4, r4, #1
 80094b8:	607c      	str	r4, [r7, #4]
 80094ba:	6153      	str	r3, [r2, #20]
 80094bc:	6113      	str	r3, [r2, #16]
 80094be:	6058      	str	r0, [r3, #4]
 80094c0:	f8c3 c00c 	str.w	ip, [r3, #12]
 80094c4:	f8c3 c008 	str.w	ip, [r3, #8]
 80094c8:	5059      	str	r1, [r3, r1]
 80094ca:	4628      	mov	r0, r5
 80094cc:	f000 f904 	bl	80096d8 <__malloc_unlock>
 80094d0:	3708      	adds	r7, #8
 80094d2:	e5f8      	b.n	80090c6 <_malloc_r+0x5e>
 80094d4:	f108 0801 	add.w	r8, r8, #1
 80094d8:	3708      	adds	r7, #8
 80094da:	f018 0f03 	tst.w	r8, #3
 80094de:	f47f ae63 	bne.w	80091a8 <_malloc_r+0x140>
 80094e2:	464b      	mov	r3, r9
 80094e4:	f01e 0f03 	tst.w	lr, #3
 80094e8:	f1a3 0208 	sub.w	r2, r3, #8
 80094ec:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80094f0:	d062      	beq.n	80095b8 <_malloc_r+0x550>
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d0f5      	beq.n	80094e4 <_malloc_r+0x47c>
 80094f8:	6873      	ldr	r3, [r6, #4]
 80094fa:	0040      	lsls	r0, r0, #1
 80094fc:	4298      	cmp	r0, r3
 80094fe:	f63f aec7 	bhi.w	8009290 <_malloc_r+0x228>
 8009502:	2800      	cmp	r0, #0
 8009504:	f43f aec4 	beq.w	8009290 <_malloc_r+0x228>
 8009508:	4218      	tst	r0, r3
 800950a:	d05a      	beq.n	80095c2 <_malloc_r+0x55a>
 800950c:	46c6      	mov	lr, r8
 800950e:	e647      	b.n	80091a0 <_malloc_r+0x138>
 8009510:	f107 0308 	add.w	r3, r7, #8
 8009514:	697f      	ldr	r7, [r7, #20]
 8009516:	42bb      	cmp	r3, r7
 8009518:	bf08      	it	eq
 800951a:	f10e 0e02 	addeq.w	lr, lr, #2
 800951e:	f43f ae03 	beq.w	8009128 <_malloc_r+0xc0>
 8009522:	e5c0      	b.n	80090a6 <_malloc_r+0x3e>
 8009524:	1859      	adds	r1, r3, r1
 8009526:	461f      	mov	r7, r3
 8009528:	6848      	ldr	r0, [r1, #4]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	f857 2f08 	ldr.w	r2, [r7, #8]!
 8009530:	f040 0001 	orr.w	r0, r0, #1
 8009534:	6048      	str	r0, [r1, #4]
 8009536:	60d3      	str	r3, [r2, #12]
 8009538:	609a      	str	r2, [r3, #8]
 800953a:	4628      	mov	r0, r5
 800953c:	f000 f8cc 	bl	80096d8 <__malloc_unlock>
 8009540:	e5c1      	b.n	80090c6 <_malloc_r+0x5e>
 8009542:	42b7      	cmp	r7, r6
 8009544:	f43f aed7 	beq.w	80092f6 <_malloc_r+0x28e>
 8009548:	4b0d      	ldr	r3, [pc, #52]	; (8009580 <_malloc_r+0x518>)
 800954a:	689f      	ldr	r7, [r3, #8]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f023 0303 	bic.w	r3, r3, #3
 8009552:	e735      	b.n	80093c0 <_malloc_r+0x358>
 8009554:	684b      	ldr	r3, [r1, #4]
 8009556:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800955a:	2001      	movs	r0, #1
 800955c:	fa00 f008 	lsl.w	r0, r0, r8
 8009560:	4303      	orrs	r3, r0
 8009562:	604b      	str	r3, [r1, #4]
 8009564:	4611      	mov	r1, r2
 8009566:	e79d      	b.n	80094a4 <_malloc_r+0x43c>
 8009568:	2301      	movs	r3, #1
 800956a:	f8c9 3004 	str.w	r3, [r9, #4]
 800956e:	464f      	mov	r7, r9
 8009570:	2300      	movs	r3, #0
 8009572:	e725      	b.n	80093c0 <_malloc_r+0x358>
 8009574:	68b7      	ldr	r7, [r6, #8]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f023 0303 	bic.w	r3, r3, #3
 800957c:	e720      	b.n	80093c0 <_malloc_r+0x358>
 800957e:	bf00      	nop
 8009580:	2000060c 	.word	0x2000060c
 8009584:	20000a34 	.word	0x20000a34
 8009588:	0511      	lsls	r1, r2, #20
 800958a:	0d09      	lsrs	r1, r1, #20
 800958c:	2900      	cmp	r1, #0
 800958e:	f47f aeba 	bne.w	8009306 <_malloc_r+0x29e>
 8009592:	68b2      	ldr	r2, [r6, #8]
 8009594:	eb0b 0108 	add.w	r1, fp, r8
 8009598:	f041 0101 	orr.w	r1, r1, #1
 800959c:	6051      	str	r1, [r2, #4]
 800959e:	e6ff      	b.n	80093a0 <_malloc_r+0x338>
 80095a0:	2201      	movs	r2, #1
 80095a2:	f04f 0b00 	mov.w	fp, #0
 80095a6:	e6da      	b.n	800935e <_malloc_r+0x2f6>
 80095a8:	4628      	mov	r0, r5
 80095aa:	f107 0108 	add.w	r1, r7, #8
 80095ae:	f7ff fc4f 	bl	8008e50 <_free_r>
 80095b2:	4b06      	ldr	r3, [pc, #24]	; (80095cc <_malloc_r+0x564>)
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	e6f3      	b.n	80093a0 <_malloc_r+0x338>
 80095b8:	6873      	ldr	r3, [r6, #4]
 80095ba:	ea23 0300 	bic.w	r3, r3, r0
 80095be:	6073      	str	r3, [r6, #4]
 80095c0:	e79b      	b.n	80094fa <_malloc_r+0x492>
 80095c2:	0040      	lsls	r0, r0, #1
 80095c4:	f108 0804 	add.w	r8, r8, #4
 80095c8:	e79e      	b.n	8009508 <_malloc_r+0x4a0>
 80095ca:	bf00      	nop
 80095cc:	20000a34 	.word	0x20000a34

080095d0 <memchr>:
 80095d0:	0783      	lsls	r3, r0, #30
 80095d2:	b470      	push	{r4, r5, r6}
 80095d4:	b2c9      	uxtb	r1, r1
 80095d6:	d00f      	beq.n	80095f8 <memchr+0x28>
 80095d8:	2a00      	cmp	r2, #0
 80095da:	d033      	beq.n	8009644 <memchr+0x74>
 80095dc:	7803      	ldrb	r3, [r0, #0]
 80095de:	3a01      	subs	r2, #1
 80095e0:	428b      	cmp	r3, r1
 80095e2:	d106      	bne.n	80095f2 <memchr+0x22>
 80095e4:	e01d      	b.n	8009622 <memchr+0x52>
 80095e6:	2a00      	cmp	r2, #0
 80095e8:	d02c      	beq.n	8009644 <memchr+0x74>
 80095ea:	7803      	ldrb	r3, [r0, #0]
 80095ec:	3a01      	subs	r2, #1
 80095ee:	428b      	cmp	r3, r1
 80095f0:	d017      	beq.n	8009622 <memchr+0x52>
 80095f2:	3001      	adds	r0, #1
 80095f4:	0783      	lsls	r3, r0, #30
 80095f6:	d1f6      	bne.n	80095e6 <memchr+0x16>
 80095f8:	2a03      	cmp	r2, #3
 80095fa:	bf84      	itt	hi
 80095fc:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 8009600:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 8009604:	d80f      	bhi.n	8009626 <memchr+0x56>
 8009606:	b1ea      	cbz	r2, 8009644 <memchr+0x74>
 8009608:	7803      	ldrb	r3, [r0, #0]
 800960a:	3a01      	subs	r2, #1
 800960c:	428b      	cmp	r3, r1
 800960e:	4402      	add	r2, r0
 8009610:	d104      	bne.n	800961c <memchr+0x4c>
 8009612:	e006      	b.n	8009622 <memchr+0x52>
 8009614:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8009618:	428b      	cmp	r3, r1
 800961a:	d002      	beq.n	8009622 <memchr+0x52>
 800961c:	4290      	cmp	r0, r2
 800961e:	d1f9      	bne.n	8009614 <memchr+0x44>
 8009620:	2000      	movs	r0, #0
 8009622:	bc70      	pop	{r4, r5, r6}
 8009624:	4770      	bx	lr
 8009626:	4604      	mov	r4, r0
 8009628:	3004      	adds	r0, #4
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	4073      	eors	r3, r6
 800962e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8009632:	ea25 0303 	bic.w	r3, r5, r3
 8009636:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800963a:	d105      	bne.n	8009648 <memchr+0x78>
 800963c:	3a04      	subs	r2, #4
 800963e:	2a03      	cmp	r2, #3
 8009640:	d8f1      	bhi.n	8009626 <memchr+0x56>
 8009642:	e7e0      	b.n	8009606 <memchr+0x36>
 8009644:	4610      	mov	r0, r2
 8009646:	e7ec      	b.n	8009622 <memchr+0x52>
 8009648:	4620      	mov	r0, r4
 800964a:	e7dc      	b.n	8009606 <memchr+0x36>

0800964c <memcpy>:
 800964c:	2a0f      	cmp	r2, #15
 800964e:	b4f0      	push	{r4, r5, r6, r7}
 8009650:	bf98      	it	ls
 8009652:	4603      	movls	r3, r0
 8009654:	d931      	bls.n	80096ba <memcpy+0x6e>
 8009656:	ea41 0300 	orr.w	r3, r1, r0
 800965a:	079b      	lsls	r3, r3, #30
 800965c:	d137      	bne.n	80096ce <memcpy+0x82>
 800965e:	460c      	mov	r4, r1
 8009660:	4603      	mov	r3, r0
 8009662:	4615      	mov	r5, r2
 8009664:	6826      	ldr	r6, [r4, #0]
 8009666:	601e      	str	r6, [r3, #0]
 8009668:	6866      	ldr	r6, [r4, #4]
 800966a:	605e      	str	r6, [r3, #4]
 800966c:	68a6      	ldr	r6, [r4, #8]
 800966e:	609e      	str	r6, [r3, #8]
 8009670:	68e6      	ldr	r6, [r4, #12]
 8009672:	3d10      	subs	r5, #16
 8009674:	60de      	str	r6, [r3, #12]
 8009676:	3410      	adds	r4, #16
 8009678:	3310      	adds	r3, #16
 800967a:	2d0f      	cmp	r5, #15
 800967c:	d8f2      	bhi.n	8009664 <memcpy+0x18>
 800967e:	f1a2 0410 	sub.w	r4, r2, #16
 8009682:	f024 040f 	bic.w	r4, r4, #15
 8009686:	f002 020f 	and.w	r2, r2, #15
 800968a:	3410      	adds	r4, #16
 800968c:	2a03      	cmp	r2, #3
 800968e:	eb00 0304 	add.w	r3, r0, r4
 8009692:	4421      	add	r1, r4
 8009694:	d911      	bls.n	80096ba <memcpy+0x6e>
 8009696:	1f0e      	subs	r6, r1, #4
 8009698:	461d      	mov	r5, r3
 800969a:	4614      	mov	r4, r2
 800969c:	f856 7f04 	ldr.w	r7, [r6, #4]!
 80096a0:	3c04      	subs	r4, #4
 80096a2:	2c03      	cmp	r4, #3
 80096a4:	f845 7b04 	str.w	r7, [r5], #4
 80096a8:	d8f8      	bhi.n	800969c <memcpy+0x50>
 80096aa:	1f14      	subs	r4, r2, #4
 80096ac:	f024 0403 	bic.w	r4, r4, #3
 80096b0:	3404      	adds	r4, #4
 80096b2:	f002 0203 	and.w	r2, r2, #3
 80096b6:	1909      	adds	r1, r1, r4
 80096b8:	191b      	adds	r3, r3, r4
 80096ba:	b132      	cbz	r2, 80096ca <memcpy+0x7e>
 80096bc:	3901      	subs	r1, #1
 80096be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80096c2:	3a01      	subs	r2, #1
 80096c4:	f803 4b01 	strb.w	r4, [r3], #1
 80096c8:	d1f9      	bne.n	80096be <memcpy+0x72>
 80096ca:	bcf0      	pop	{r4, r5, r6, r7}
 80096cc:	4770      	bx	lr
 80096ce:	4603      	mov	r3, r0
 80096d0:	e7f4      	b.n	80096bc <memcpy+0x70>
 80096d2:	bf00      	nop

080096d4 <__malloc_lock>:
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop

080096d8 <__malloc_unlock>:
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop

080096dc <_Balloc>:
 80096dc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80096de:	b570      	push	{r4, r5, r6, lr}
 80096e0:	4605      	mov	r5, r0
 80096e2:	460c      	mov	r4, r1
 80096e4:	b14b      	cbz	r3, 80096fa <_Balloc+0x1e>
 80096e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80096ea:	b178      	cbz	r0, 800970c <_Balloc+0x30>
 80096ec:	6802      	ldr	r2, [r0, #0]
 80096ee:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80096f2:	2300      	movs	r3, #0
 80096f4:	6103      	str	r3, [r0, #16]
 80096f6:	60c3      	str	r3, [r0, #12]
 80096f8:	bd70      	pop	{r4, r5, r6, pc}
 80096fa:	2104      	movs	r1, #4
 80096fc:	2221      	movs	r2, #33	; 0x21
 80096fe:	f001 fa7f 	bl	800ac00 <_calloc_r>
 8009702:	4603      	mov	r3, r0
 8009704:	64e8      	str	r0, [r5, #76]	; 0x4c
 8009706:	2800      	cmp	r0, #0
 8009708:	d1ed      	bne.n	80096e6 <_Balloc+0xa>
 800970a:	bd70      	pop	{r4, r5, r6, pc}
 800970c:	2101      	movs	r1, #1
 800970e:	fa11 f604 	lsls.w	r6, r1, r4
 8009712:	1d72      	adds	r2, r6, #5
 8009714:	4628      	mov	r0, r5
 8009716:	0092      	lsls	r2, r2, #2
 8009718:	f001 fa72 	bl	800ac00 <_calloc_r>
 800971c:	2800      	cmp	r0, #0
 800971e:	d0f4      	beq.n	800970a <_Balloc+0x2e>
 8009720:	6044      	str	r4, [r0, #4]
 8009722:	6086      	str	r6, [r0, #8]
 8009724:	e7e5      	b.n	80096f2 <_Balloc+0x16>
 8009726:	bf00      	nop

08009728 <_Bfree>:
 8009728:	b131      	cbz	r1, 8009738 <_Bfree+0x10>
 800972a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800972c:	684a      	ldr	r2, [r1, #4]
 800972e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009732:	6008      	str	r0, [r1, #0]
 8009734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop

0800973c <__multadd>:
 800973c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800973e:	460d      	mov	r5, r1
 8009740:	4606      	mov	r6, r0
 8009742:	690c      	ldr	r4, [r1, #16]
 8009744:	f101 0014 	add.w	r0, r1, #20
 8009748:	b083      	sub	sp, #12
 800974a:	2100      	movs	r1, #0
 800974c:	6807      	ldr	r7, [r0, #0]
 800974e:	fa1f fc87 	uxth.w	ip, r7
 8009752:	0c3f      	lsrs	r7, r7, #16
 8009754:	fb02 330c 	mla	r3, r2, ip, r3
 8009758:	fb02 f707 	mul.w	r7, r2, r7
 800975c:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009760:	b29b      	uxth	r3, r3
 8009762:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 8009766:	3101      	adds	r1, #1
 8009768:	f840 3b04 	str.w	r3, [r0], #4
 800976c:	0c3b      	lsrs	r3, r7, #16
 800976e:	428c      	cmp	r4, r1
 8009770:	dcec      	bgt.n	800974c <__multadd+0x10>
 8009772:	b13b      	cbz	r3, 8009784 <__multadd+0x48>
 8009774:	68aa      	ldr	r2, [r5, #8]
 8009776:	4294      	cmp	r4, r2
 8009778:	da07      	bge.n	800978a <__multadd+0x4e>
 800977a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800977e:	3401      	adds	r4, #1
 8009780:	6153      	str	r3, [r2, #20]
 8009782:	612c      	str	r4, [r5, #16]
 8009784:	4628      	mov	r0, r5
 8009786:	b003      	add	sp, #12
 8009788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800978a:	6869      	ldr	r1, [r5, #4]
 800978c:	9301      	str	r3, [sp, #4]
 800978e:	3101      	adds	r1, #1
 8009790:	4630      	mov	r0, r6
 8009792:	f7ff ffa3 	bl	80096dc <_Balloc>
 8009796:	692a      	ldr	r2, [r5, #16]
 8009798:	3202      	adds	r2, #2
 800979a:	f105 010c 	add.w	r1, r5, #12
 800979e:	4607      	mov	r7, r0
 80097a0:	0092      	lsls	r2, r2, #2
 80097a2:	f100 000c 	add.w	r0, r0, #12
 80097a6:	f7ff ff51 	bl	800964c <memcpy>
 80097aa:	6869      	ldr	r1, [r5, #4]
 80097ac:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80097ae:	9b01      	ldr	r3, [sp, #4]
 80097b0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80097b4:	6028      	str	r0, [r5, #0]
 80097b6:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80097ba:	463d      	mov	r5, r7
 80097bc:	e7dd      	b.n	800977a <__multadd+0x3e>
 80097be:	bf00      	nop

080097c0 <__s2b>:
 80097c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097c4:	461e      	mov	r6, r3
 80097c6:	f648 6339 	movw	r3, #36409	; 0x8e39
 80097ca:	f106 0408 	add.w	r4, r6, #8
 80097ce:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 80097d2:	fb83 5304 	smull	r5, r3, r3, r4
 80097d6:	17e4      	asrs	r4, r4, #31
 80097d8:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 80097dc:	460f      	mov	r7, r1
 80097de:	2100      	movs	r1, #0
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	4604      	mov	r4, r0
 80097e4:	4690      	mov	r8, r2
 80097e6:	dd05      	ble.n	80097f4 <__s2b+0x34>
 80097e8:	2201      	movs	r2, #1
 80097ea:	2100      	movs	r1, #0
 80097ec:	0052      	lsls	r2, r2, #1
 80097ee:	3101      	adds	r1, #1
 80097f0:	4293      	cmp	r3, r2
 80097f2:	dcfb      	bgt.n	80097ec <__s2b+0x2c>
 80097f4:	4620      	mov	r0, r4
 80097f6:	f7ff ff71 	bl	80096dc <_Balloc>
 80097fa:	9b08      	ldr	r3, [sp, #32]
 80097fc:	6143      	str	r3, [r0, #20]
 80097fe:	2301      	movs	r3, #1
 8009800:	f1b8 0f09 	cmp.w	r8, #9
 8009804:	4601      	mov	r1, r0
 8009806:	6103      	str	r3, [r0, #16]
 8009808:	dd23      	ble.n	8009852 <__s2b+0x92>
 800980a:	f107 0909 	add.w	r9, r7, #9
 800980e:	464d      	mov	r5, r9
 8009810:	4447      	add	r7, r8
 8009812:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009816:	220a      	movs	r2, #10
 8009818:	3b30      	subs	r3, #48	; 0x30
 800981a:	4620      	mov	r0, r4
 800981c:	f7ff ff8e 	bl	800973c <__multadd>
 8009820:	42bd      	cmp	r5, r7
 8009822:	4601      	mov	r1, r0
 8009824:	d1f5      	bne.n	8009812 <__s2b+0x52>
 8009826:	eb09 0708 	add.w	r7, r9, r8
 800982a:	3f08      	subs	r7, #8
 800982c:	4546      	cmp	r6, r8
 800982e:	dd0d      	ble.n	800984c <__s2b+0x8c>
 8009830:	ebc8 0707 	rsb	r7, r8, r7
 8009834:	f817 3008 	ldrb.w	r3, [r7, r8]
 8009838:	220a      	movs	r2, #10
 800983a:	3b30      	subs	r3, #48	; 0x30
 800983c:	4620      	mov	r0, r4
 800983e:	f7ff ff7d 	bl	800973c <__multadd>
 8009842:	f108 0801 	add.w	r8, r8, #1
 8009846:	45b0      	cmp	r8, r6
 8009848:	4601      	mov	r1, r0
 800984a:	d1f3      	bne.n	8009834 <__s2b+0x74>
 800984c:	4608      	mov	r0, r1
 800984e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009852:	370a      	adds	r7, #10
 8009854:	f04f 0809 	mov.w	r8, #9
 8009858:	e7e8      	b.n	800982c <__s2b+0x6c>
 800985a:	bf00      	nop

0800985c <__hi0bits>:
 800985c:	4603      	mov	r3, r0
 800985e:	2000      	movs	r0, #0
 8009860:	0c1a      	lsrs	r2, r3, #16
 8009862:	d101      	bne.n	8009868 <__hi0bits+0xc>
 8009864:	041b      	lsls	r3, r3, #16
 8009866:	2010      	movs	r0, #16
 8009868:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800986c:	d101      	bne.n	8009872 <__hi0bits+0x16>
 800986e:	3008      	adds	r0, #8
 8009870:	021b      	lsls	r3, r3, #8
 8009872:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009876:	d101      	bne.n	800987c <__hi0bits+0x20>
 8009878:	3004      	adds	r0, #4
 800987a:	011b      	lsls	r3, r3, #4
 800987c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009880:	d101      	bne.n	8009886 <__hi0bits+0x2a>
 8009882:	3002      	adds	r0, #2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	2b00      	cmp	r3, #0
 8009888:	db02      	blt.n	8009890 <__hi0bits+0x34>
 800988a:	005b      	lsls	r3, r3, #1
 800988c:	d401      	bmi.n	8009892 <__hi0bits+0x36>
 800988e:	2020      	movs	r0, #32
 8009890:	4770      	bx	lr
 8009892:	3001      	adds	r0, #1
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop

08009898 <__lo0bits>:
 8009898:	6803      	ldr	r3, [r0, #0]
 800989a:	4602      	mov	r2, r0
 800989c:	f013 0007 	ands.w	r0, r3, #7
 80098a0:	d007      	beq.n	80098b2 <__lo0bits+0x1a>
 80098a2:	07d9      	lsls	r1, r3, #31
 80098a4:	d41f      	bmi.n	80098e6 <__lo0bits+0x4e>
 80098a6:	0798      	lsls	r0, r3, #30
 80098a8:	d41f      	bmi.n	80098ea <__lo0bits+0x52>
 80098aa:	089b      	lsrs	r3, r3, #2
 80098ac:	6013      	str	r3, [r2, #0]
 80098ae:	2002      	movs	r0, #2
 80098b0:	4770      	bx	lr
 80098b2:	b299      	uxth	r1, r3
 80098b4:	b909      	cbnz	r1, 80098ba <__lo0bits+0x22>
 80098b6:	0c1b      	lsrs	r3, r3, #16
 80098b8:	2010      	movs	r0, #16
 80098ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80098be:	d101      	bne.n	80098c4 <__lo0bits+0x2c>
 80098c0:	3008      	adds	r0, #8
 80098c2:	0a1b      	lsrs	r3, r3, #8
 80098c4:	0719      	lsls	r1, r3, #28
 80098c6:	d101      	bne.n	80098cc <__lo0bits+0x34>
 80098c8:	3004      	adds	r0, #4
 80098ca:	091b      	lsrs	r3, r3, #4
 80098cc:	0799      	lsls	r1, r3, #30
 80098ce:	d101      	bne.n	80098d4 <__lo0bits+0x3c>
 80098d0:	3002      	adds	r0, #2
 80098d2:	089b      	lsrs	r3, r3, #2
 80098d4:	07d9      	lsls	r1, r3, #31
 80098d6:	d404      	bmi.n	80098e2 <__lo0bits+0x4a>
 80098d8:	085b      	lsrs	r3, r3, #1
 80098da:	d101      	bne.n	80098e0 <__lo0bits+0x48>
 80098dc:	2020      	movs	r0, #32
 80098de:	4770      	bx	lr
 80098e0:	3001      	adds	r0, #1
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	4770      	bx	lr
 80098e6:	2000      	movs	r0, #0
 80098e8:	4770      	bx	lr
 80098ea:	085b      	lsrs	r3, r3, #1
 80098ec:	6013      	str	r3, [r2, #0]
 80098ee:	2001      	movs	r0, #1
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop

080098f4 <__i2b>:
 80098f4:	b510      	push	{r4, lr}
 80098f6:	460c      	mov	r4, r1
 80098f8:	2101      	movs	r1, #1
 80098fa:	f7ff feef 	bl	80096dc <_Balloc>
 80098fe:	2201      	movs	r2, #1
 8009900:	6144      	str	r4, [r0, #20]
 8009902:	6102      	str	r2, [r0, #16]
 8009904:	bd10      	pop	{r4, pc}
 8009906:	bf00      	nop

08009908 <__multiply>:
 8009908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990c:	690f      	ldr	r7, [r1, #16]
 800990e:	6916      	ldr	r6, [r2, #16]
 8009910:	42b7      	cmp	r7, r6
 8009912:	b085      	sub	sp, #20
 8009914:	460d      	mov	r5, r1
 8009916:	4692      	mov	sl, r2
 8009918:	da04      	bge.n	8009924 <__multiply+0x1c>
 800991a:	463a      	mov	r2, r7
 800991c:	4655      	mov	r5, sl
 800991e:	4637      	mov	r7, r6
 8009920:	468a      	mov	sl, r1
 8009922:	4616      	mov	r6, r2
 8009924:	68ab      	ldr	r3, [r5, #8]
 8009926:	6869      	ldr	r1, [r5, #4]
 8009928:	19bc      	adds	r4, r7, r6
 800992a:	429c      	cmp	r4, r3
 800992c:	bfc8      	it	gt
 800992e:	3101      	addgt	r1, #1
 8009930:	f7ff fed4 	bl	80096dc <_Balloc>
 8009934:	1d21      	adds	r1, r4, #4
 8009936:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
 800993a:	f100 0914 	add.w	r9, r0, #20
 800993e:	f10b 0b04 	add.w	fp, fp, #4
 8009942:	45d9      	cmp	r9, fp
 8009944:	9000      	str	r0, [sp, #0]
 8009946:	9101      	str	r1, [sp, #4]
 8009948:	d205      	bcs.n	8009956 <__multiply+0x4e>
 800994a:	464b      	mov	r3, r9
 800994c:	2200      	movs	r2, #0
 800994e:	f843 2b04 	str.w	r2, [r3], #4
 8009952:	459b      	cmp	fp, r3
 8009954:	d8fb      	bhi.n	800994e <__multiply+0x46>
 8009956:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 800995a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800995e:	f10a 0a14 	add.w	sl, sl, #20
 8009962:	f106 0814 	add.w	r8, r6, #20
 8009966:	3514      	adds	r5, #20
 8009968:	3714      	adds	r7, #20
 800996a:	45c2      	cmp	sl, r8
 800996c:	d24f      	bcs.n	8009a0e <__multiply+0x106>
 800996e:	f8cd b008 	str.w	fp, [sp, #8]
 8009972:	9403      	str	r4, [sp, #12]
 8009974:	46ab      	mov	fp, r5
 8009976:	f85a 5b04 	ldr.w	r5, [sl], #4
 800997a:	b2ac      	uxth	r4, r5
 800997c:	b1e4      	cbz	r4, 80099b8 <__multiply+0xb0>
 800997e:	465a      	mov	r2, fp
 8009980:	464b      	mov	r3, r9
 8009982:	2100      	movs	r1, #0
 8009984:	f852 6b04 	ldr.w	r6, [r2], #4
 8009988:	681d      	ldr	r5, [r3, #0]
 800998a:	b2b0      	uxth	r0, r6
 800998c:	fa11 f185 	uxtah	r1, r1, r5
 8009990:	0c36      	lsrs	r6, r6, #16
 8009992:	0c2d      	lsrs	r5, r5, #16
 8009994:	fb04 1000 	mla	r0, r4, r0, r1
 8009998:	fb04 5106 	mla	r1, r4, r6, r5
 800999c:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 80099a0:	b280      	uxth	r0, r0
 80099a2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80099a6:	0c09      	lsrs	r1, r1, #16
 80099a8:	4297      	cmp	r7, r2
 80099aa:	461d      	mov	r5, r3
 80099ac:	f843 0b04 	str.w	r0, [r3], #4
 80099b0:	d8e8      	bhi.n	8009984 <__multiply+0x7c>
 80099b2:	6069      	str	r1, [r5, #4]
 80099b4:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 80099b8:	0c2d      	lsrs	r5, r5, #16
 80099ba:	d021      	beq.n	8009a00 <__multiply+0xf8>
 80099bc:	f8d9 6000 	ldr.w	r6, [r9]
 80099c0:	465b      	mov	r3, fp
 80099c2:	4630      	mov	r0, r6
 80099c4:	4649      	mov	r1, r9
 80099c6:	f04f 0c00 	mov.w	ip, #0
 80099ca:	e000      	b.n	80099ce <__multiply+0xc6>
 80099cc:	4611      	mov	r1, r2
 80099ce:	881a      	ldrh	r2, [r3, #0]
 80099d0:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
 80099d4:	fb05 cc02 	mla	ip, r5, r2, ip
 80099d8:	b2b6      	uxth	r6, r6
 80099da:	460a      	mov	r2, r1
 80099dc:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 80099e0:	f842 6b04 	str.w	r6, [r2], #4
 80099e4:	f853 6b04 	ldr.w	r6, [r3], #4
 80099e8:	6848      	ldr	r0, [r1, #4]
 80099ea:	0c36      	lsrs	r6, r6, #16
 80099ec:	b284      	uxth	r4, r0
 80099ee:	fb05 4606 	mla	r6, r5, r6, r4
 80099f2:	eb06 461c 	add.w	r6, r6, ip, lsr #16
 80099f6:	429f      	cmp	r7, r3
 80099f8:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 80099fc:	d8e6      	bhi.n	80099cc <__multiply+0xc4>
 80099fe:	604e      	str	r6, [r1, #4]
 8009a00:	45d0      	cmp	r8, sl
 8009a02:	f109 0904 	add.w	r9, r9, #4
 8009a06:	d8b6      	bhi.n	8009976 <__multiply+0x6e>
 8009a08:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009a0c:	9c03      	ldr	r4, [sp, #12]
 8009a0e:	2c00      	cmp	r4, #0
 8009a10:	dd0c      	ble.n	8009a2c <__multiply+0x124>
 8009a12:	e89d 0006 	ldmia.w	sp, {r1, r2}
 8009a16:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8009a1a:	b93b      	cbnz	r3, 8009a2c <__multiply+0x124>
 8009a1c:	f1ab 0b04 	sub.w	fp, fp, #4
 8009a20:	e002      	b.n	8009a28 <__multiply+0x120>
 8009a22:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
 8009a26:	b90b      	cbnz	r3, 8009a2c <__multiply+0x124>
 8009a28:	3c01      	subs	r4, #1
 8009a2a:	d1fa      	bne.n	8009a22 <__multiply+0x11a>
 8009a2c:	9a00      	ldr	r2, [sp, #0]
 8009a2e:	6114      	str	r4, [r2, #16]
 8009a30:	4610      	mov	r0, r2
 8009a32:	b005      	add	sp, #20
 8009a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a38 <__pow5mult>:
 8009a38:	f012 0303 	ands.w	r3, r2, #3
 8009a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a40:	4615      	mov	r5, r2
 8009a42:	4604      	mov	r4, r0
 8009a44:	4688      	mov	r8, r1
 8009a46:	d12d      	bne.n	8009aa4 <__pow5mult+0x6c>
 8009a48:	10ad      	asrs	r5, r5, #2
 8009a4a:	d01d      	beq.n	8009a88 <__pow5mult+0x50>
 8009a4c:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8009a4e:	b92f      	cbnz	r7, 8009a5c <__pow5mult+0x24>
 8009a50:	e031      	b.n	8009ab6 <__pow5mult+0x7e>
 8009a52:	106d      	asrs	r5, r5, #1
 8009a54:	d018      	beq.n	8009a88 <__pow5mult+0x50>
 8009a56:	683e      	ldr	r6, [r7, #0]
 8009a58:	b1ce      	cbz	r6, 8009a8e <__pow5mult+0x56>
 8009a5a:	4637      	mov	r7, r6
 8009a5c:	07e8      	lsls	r0, r5, #31
 8009a5e:	d5f8      	bpl.n	8009a52 <__pow5mult+0x1a>
 8009a60:	4641      	mov	r1, r8
 8009a62:	463a      	mov	r2, r7
 8009a64:	4620      	mov	r0, r4
 8009a66:	f7ff ff4f 	bl	8009908 <__multiply>
 8009a6a:	f1b8 0f00 	cmp.w	r8, #0
 8009a6e:	d017      	beq.n	8009aa0 <__pow5mult+0x68>
 8009a70:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009a74:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009a76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a7a:	106d      	asrs	r5, r5, #1
 8009a7c:	f8c8 1000 	str.w	r1, [r8]
 8009a80:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 8009a84:	4680      	mov	r8, r0
 8009a86:	d1e6      	bne.n	8009a56 <__pow5mult+0x1e>
 8009a88:	4640      	mov	r0, r8
 8009a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a8e:	4639      	mov	r1, r7
 8009a90:	463a      	mov	r2, r7
 8009a92:	4620      	mov	r0, r4
 8009a94:	f7ff ff38 	bl	8009908 <__multiply>
 8009a98:	6038      	str	r0, [r7, #0]
 8009a9a:	6006      	str	r6, [r0, #0]
 8009a9c:	4607      	mov	r7, r0
 8009a9e:	e7dd      	b.n	8009a5c <__pow5mult+0x24>
 8009aa0:	4680      	mov	r8, r0
 8009aa2:	e7d6      	b.n	8009a52 <__pow5mult+0x1a>
 8009aa4:	1e5e      	subs	r6, r3, #1
 8009aa6:	4a09      	ldr	r2, [pc, #36]	; (8009acc <__pow5mult+0x94>)
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8009aae:	f7ff fe45 	bl	800973c <__multadd>
 8009ab2:	4680      	mov	r8, r0
 8009ab4:	e7c8      	b.n	8009a48 <__pow5mult+0x10>
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f240 2171 	movw	r1, #625	; 0x271
 8009abc:	f7ff ff1a 	bl	80098f4 <__i2b>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	64a0      	str	r0, [r4, #72]	; 0x48
 8009ac4:	4607      	mov	r7, r0
 8009ac6:	6003      	str	r3, [r0, #0]
 8009ac8:	e7c8      	b.n	8009a5c <__pow5mult+0x24>
 8009aca:	bf00      	nop
 8009acc:	0800bc78 	.word	0x0800bc78

08009ad0 <__lshift>:
 8009ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad4:	4691      	mov	r9, r2
 8009ad6:	690a      	ldr	r2, [r1, #16]
 8009ad8:	688b      	ldr	r3, [r1, #8]
 8009ada:	ea4f 1769 	mov.w	r7, r9, asr #5
 8009ade:	eb07 0b02 	add.w	fp, r7, r2
 8009ae2:	f10b 0501 	add.w	r5, fp, #1
 8009ae6:	429d      	cmp	r5, r3
 8009ae8:	460c      	mov	r4, r1
 8009aea:	4606      	mov	r6, r0
 8009aec:	6849      	ldr	r1, [r1, #4]
 8009aee:	dd03      	ble.n	8009af8 <__lshift+0x28>
 8009af0:	005b      	lsls	r3, r3, #1
 8009af2:	3101      	adds	r1, #1
 8009af4:	429d      	cmp	r5, r3
 8009af6:	dcfb      	bgt.n	8009af0 <__lshift+0x20>
 8009af8:	4630      	mov	r0, r6
 8009afa:	f7ff fdef 	bl	80096dc <_Balloc>
 8009afe:	2f00      	cmp	r7, #0
 8009b00:	f100 0314 	add.w	r3, r0, #20
 8009b04:	dd09      	ble.n	8009b1a <__lshift+0x4a>
 8009b06:	2200      	movs	r2, #0
 8009b08:	4611      	mov	r1, r2
 8009b0a:	3201      	adds	r2, #1
 8009b0c:	42ba      	cmp	r2, r7
 8009b0e:	f843 1b04 	str.w	r1, [r3], #4
 8009b12:	d1fa      	bne.n	8009b0a <__lshift+0x3a>
 8009b14:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8009b18:	3314      	adds	r3, #20
 8009b1a:	6922      	ldr	r2, [r4, #16]
 8009b1c:	f019 091f 	ands.w	r9, r9, #31
 8009b20:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8009b24:	f104 0114 	add.w	r1, r4, #20
 8009b28:	f10c 0c14 	add.w	ip, ip, #20
 8009b2c:	d022      	beq.n	8009b74 <__lshift+0xa4>
 8009b2e:	f1c9 0a20 	rsb	sl, r9, #32
 8009b32:	2200      	movs	r2, #0
 8009b34:	e000      	b.n	8009b38 <__lshift+0x68>
 8009b36:	463b      	mov	r3, r7
 8009b38:	f8d1 8000 	ldr.w	r8, [r1]
 8009b3c:	461f      	mov	r7, r3
 8009b3e:	fa08 f809 	lsl.w	r8, r8, r9
 8009b42:	ea48 0202 	orr.w	r2, r8, r2
 8009b46:	f847 2b04 	str.w	r2, [r7], #4
 8009b4a:	f851 2b04 	ldr.w	r2, [r1], #4
 8009b4e:	458c      	cmp	ip, r1
 8009b50:	fa22 f20a 	lsr.w	r2, r2, sl
 8009b54:	d8ef      	bhi.n	8009b36 <__lshift+0x66>
 8009b56:	605a      	str	r2, [r3, #4]
 8009b58:	b10a      	cbz	r2, 8009b5e <__lshift+0x8e>
 8009b5a:	f10b 0502 	add.w	r5, fp, #2
 8009b5e:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8009b60:	6862      	ldr	r2, [r4, #4]
 8009b62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b66:	3d01      	subs	r5, #1
 8009b68:	6105      	str	r5, [r0, #16]
 8009b6a:	6021      	str	r1, [r4, #0]
 8009b6c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b74:	f851 2b04 	ldr.w	r2, [r1], #4
 8009b78:	458c      	cmp	ip, r1
 8009b7a:	f843 2b04 	str.w	r2, [r3], #4
 8009b7e:	d9ee      	bls.n	8009b5e <__lshift+0x8e>
 8009b80:	f851 2b04 	ldr.w	r2, [r1], #4
 8009b84:	458c      	cmp	ip, r1
 8009b86:	f843 2b04 	str.w	r2, [r3], #4
 8009b8a:	d8f3      	bhi.n	8009b74 <__lshift+0xa4>
 8009b8c:	e7e7      	b.n	8009b5e <__lshift+0x8e>
 8009b8e:	bf00      	nop

08009b90 <__mcmp>:
 8009b90:	4603      	mov	r3, r0
 8009b92:	690a      	ldr	r2, [r1, #16]
 8009b94:	6900      	ldr	r0, [r0, #16]
 8009b96:	1a80      	subs	r0, r0, r2
 8009b98:	b430      	push	{r4, r5}
 8009b9a:	d111      	bne.n	8009bc0 <__mcmp+0x30>
 8009b9c:	3204      	adds	r2, #4
 8009b9e:	0094      	lsls	r4, r2, #2
 8009ba0:	191a      	adds	r2, r3, r4
 8009ba2:	1909      	adds	r1, r1, r4
 8009ba4:	3314      	adds	r3, #20
 8009ba6:	3204      	adds	r2, #4
 8009ba8:	3104      	adds	r1, #4
 8009baa:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8009bae:	f851 4c04 	ldr.w	r4, [r1, #-4]
 8009bb2:	3a04      	subs	r2, #4
 8009bb4:	42a5      	cmp	r5, r4
 8009bb6:	f1a1 0104 	sub.w	r1, r1, #4
 8009bba:	d103      	bne.n	8009bc4 <__mcmp+0x34>
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d3f4      	bcc.n	8009baa <__mcmp+0x1a>
 8009bc0:	bc30      	pop	{r4, r5}
 8009bc2:	4770      	bx	lr
 8009bc4:	bf38      	it	cc
 8009bc6:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
 8009bca:	d3f9      	bcc.n	8009bc0 <__mcmp+0x30>
 8009bcc:	2001      	movs	r0, #1
 8009bce:	e7f7      	b.n	8009bc0 <__mcmp+0x30>

08009bd0 <__mdiff>:
 8009bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	4611      	mov	r1, r2
 8009bda:	4620      	mov	r0, r4
 8009bdc:	4615      	mov	r5, r2
 8009bde:	f7ff ffd7 	bl	8009b90 <__mcmp>
 8009be2:	1e07      	subs	r7, r0, #0
 8009be4:	d058      	beq.n	8009c98 <__mdiff+0xc8>
 8009be6:	db52      	blt.n	8009c8e <__mdiff+0xbe>
 8009be8:	2700      	movs	r7, #0
 8009bea:	4630      	mov	r0, r6
 8009bec:	6861      	ldr	r1, [r4, #4]
 8009bee:	f7ff fd75 	bl	80096dc <_Balloc>
 8009bf2:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8009bf6:	692b      	ldr	r3, [r5, #16]
 8009bf8:	60c7      	str	r7, [r0, #12]
 8009bfa:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 8009bfe:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8009c02:	3714      	adds	r7, #20
 8009c04:	f108 0814 	add.w	r8, r8, #20
 8009c08:	3414      	adds	r4, #20
 8009c0a:	3514      	adds	r5, #20
 8009c0c:	f100 0914 	add.w	r9, r0, #20
 8009c10:	2600      	movs	r6, #0
 8009c12:	f854 3b04 	ldr.w	r3, [r4], #4
 8009c16:	f855 2b04 	ldr.w	r2, [r5], #4
 8009c1a:	fa16 f183 	uxtah	r1, r6, r3
 8009c1e:	fa1f fa82 	uxth.w	sl, r2
 8009c22:	0c12      	lsrs	r2, r2, #16
 8009c24:	ebc2 4613 	rsb	r6, r2, r3, lsr #16
 8009c28:	ebca 0101 	rsb	r1, sl, r1
 8009c2c:	eb06 4621 	add.w	r6, r6, r1, asr #16
 8009c30:	464b      	mov	r3, r9
 8009c32:	b289      	uxth	r1, r1
 8009c34:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8009c38:	f843 1b04 	str.w	r1, [r3], #4
 8009c3c:	1436      	asrs	r6, r6, #16
 8009c3e:	45a8      	cmp	r8, r5
 8009c40:	4622      	mov	r2, r4
 8009c42:	4699      	mov	r9, r3
 8009c44:	d8e5      	bhi.n	8009c12 <__mdiff+0x42>
 8009c46:	42a7      	cmp	r7, r4
 8009c48:	4698      	mov	r8, r3
 8009c4a:	d914      	bls.n	8009c76 <__mdiff+0xa6>
 8009c4c:	f852 5b04 	ldr.w	r5, [r2], #4
 8009c50:	fa16 f685 	uxtah	r6, r6, r5
 8009c54:	0c2d      	lsrs	r5, r5, #16
 8009c56:	eb05 4526 	add.w	r5, r5, r6, asr #16
 8009c5a:	b2b6      	uxth	r6, r6
 8009c5c:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 8009c60:	142e      	asrs	r6, r5, #16
 8009c62:	4297      	cmp	r7, r2
 8009c64:	f843 1b04 	str.w	r1, [r3], #4
 8009c68:	d8f0      	bhi.n	8009c4c <__mdiff+0x7c>
 8009c6a:	43e3      	mvns	r3, r4
 8009c6c:	19db      	adds	r3, r3, r7
 8009c6e:	f023 0303 	bic.w	r3, r3, #3
 8009c72:	3304      	adds	r3, #4
 8009c74:	4443      	add	r3, r8
 8009c76:	b931      	cbnz	r1, 8009c86 <__mdiff+0xb6>
 8009c78:	3b04      	subs	r3, #4
 8009c7a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009c7e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8009c82:	2a00      	cmp	r2, #0
 8009c84:	d0f9      	beq.n	8009c7a <__mdiff+0xaa>
 8009c86:	f8c0 c010 	str.w	ip, [r0, #16]
 8009c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c8e:	4623      	mov	r3, r4
 8009c90:	2701      	movs	r7, #1
 8009c92:	462c      	mov	r4, r5
 8009c94:	461d      	mov	r5, r3
 8009c96:	e7a8      	b.n	8009bea <__mdiff+0x1a>
 8009c98:	4630      	mov	r0, r6
 8009c9a:	4639      	mov	r1, r7
 8009c9c:	f7ff fd1e 	bl	80096dc <_Balloc>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	6103      	str	r3, [r0, #16]
 8009ca4:	6147      	str	r7, [r0, #20]
 8009ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009caa:	bf00      	nop

08009cac <__ulp>:
 8009cac:	2300      	movs	r3, #0
 8009cae:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8009cb2:	400b      	ands	r3, r1
 8009cb4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	dd02      	ble.n	8009cc2 <__ulp+0x16>
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	4770      	bx	lr
 8009cc2:	425b      	negs	r3, r3
 8009cc4:	151b      	asrs	r3, r3, #20
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	2b13      	cmp	r3, #19
 8009cca:	dd0b      	ble.n	8009ce4 <__ulp+0x38>
 8009ccc:	2b32      	cmp	r3, #50	; 0x32
 8009cce:	dd02      	ble.n	8009cd6 <__ulp+0x2a>
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	4770      	bx	lr
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8009cdc:	fa12 f303 	lsls.w	r3, r2, r3
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	4770      	bx	lr
 8009ce4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009ce8:	fa52 f103 	asrs.w	r1, r2, r3
 8009cec:	2000      	movs	r0, #0
 8009cee:	4770      	bx	lr

08009cf0 <__b2d>:
 8009cf0:	6902      	ldr	r2, [r0, #16]
 8009cf2:	3204      	adds	r2, #4
 8009cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8009d00:	4628      	mov	r0, r5
 8009d02:	460f      	mov	r7, r1
 8009d04:	f103 0614 	add.w	r6, r3, #20
 8009d08:	f7ff fda8 	bl	800985c <__hi0bits>
 8009d0c:	f1c0 0320 	rsb	r3, r0, #32
 8009d10:	280a      	cmp	r0, #10
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	4623      	mov	r3, r4
 8009d16:	dc14      	bgt.n	8009d42 <__b2d+0x52>
 8009d18:	f1c0 010b 	rsb	r1, r0, #11
 8009d1c:	fa35 f701 	lsrs.w	r7, r5, r1
 8009d20:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 8009d24:	42a6      	cmp	r6, r4
 8009d26:	f447 1340 	orr.w	r3, r7, #3145728	; 0x300000
 8009d2a:	d22e      	bcs.n	8009d8a <__b2d+0x9a>
 8009d2c:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8009d30:	fa34 f101 	lsrs.w	r1, r4, r1
 8009d34:	3015      	adds	r0, #21
 8009d36:	4085      	lsls	r5, r0
 8009d38:	ea41 0205 	orr.w	r2, r1, r5
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	4619      	mov	r1, r3
 8009d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d42:	2100      	movs	r1, #0
 8009d44:	42a6      	cmp	r6, r4
 8009d46:	d202      	bcs.n	8009d4e <__b2d+0x5e>
 8009d48:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8009d4c:	3c04      	subs	r4, #4
 8009d4e:	f1b0 070b 	subs.w	r7, r0, #11
 8009d52:	bf02      	ittt	eq
 8009d54:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
 8009d58:	f445 1340 	orreq.w	r3, r5, #3145728	; 0x300000
 8009d5c:	460a      	moveq	r2, r1
 8009d5e:	d0ed      	beq.n	8009d3c <__b2d+0x4c>
 8009d60:	40bd      	lsls	r5, r7
 8009d62:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 8009d66:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 8009d6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009d6e:	fa21 fc00 	lsr.w	ip, r1, r0
 8009d72:	42b4      	cmp	r4, r6
 8009d74:	ea45 030c 	orr.w	r3, r5, ip
 8009d78:	d909      	bls.n	8009d8e <__b2d+0x9e>
 8009d7a:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8009d7e:	fa34 f000 	lsrs.w	r0, r4, r0
 8009d82:	40b9      	lsls	r1, r7
 8009d84:	ea40 0201 	orr.w	r2, r0, r1
 8009d88:	e7d8      	b.n	8009d3c <__b2d+0x4c>
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	e7d2      	b.n	8009d34 <__b2d+0x44>
 8009d8e:	2000      	movs	r0, #0
 8009d90:	e7f7      	b.n	8009d82 <__b2d+0x92>
 8009d92:	bf00      	nop

08009d94 <__d2b>:
 8009d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	461d      	mov	r5, r3
 8009d9e:	4614      	mov	r4, r2
 8009da0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009da2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009da4:	f7ff fc9a 	bl	80096dc <_Balloc>
 8009da8:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 8009dac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009db0:	f3c5 590a 	ubfx	r9, r5, #20, #11
 8009db4:	4680      	mov	r8, r0
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	f1b9 0f00 	cmp.w	r9, #0
 8009dbc:	d002      	beq.n	8009dc4 <__d2b+0x30>
 8009dbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dc2:	9301      	str	r3, [sp, #4]
 8009dc4:	2c00      	cmp	r4, #0
 8009dc6:	d025      	beq.n	8009e14 <__d2b+0x80>
 8009dc8:	a802      	add	r0, sp, #8
 8009dca:	f840 4d08 	str.w	r4, [r0, #-8]!
 8009dce:	4668      	mov	r0, sp
 8009dd0:	f7ff fd62 	bl	8009898 <__lo0bits>
 8009dd4:	9b01      	ldr	r3, [sp, #4]
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d132      	bne.n	8009e40 <__d2b+0xac>
 8009dda:	9a00      	ldr	r2, [sp, #0]
 8009ddc:	f8c8 2014 	str.w	r2, [r8, #20]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	bf0c      	ite	eq
 8009de4:	2401      	moveq	r4, #1
 8009de6:	2402      	movne	r4, #2
 8009de8:	f8c8 3018 	str.w	r3, [r8, #24]
 8009dec:	f8c8 4010 	str.w	r4, [r8, #16]
 8009df0:	f1b9 0f00 	cmp.w	r9, #0
 8009df4:	d11b      	bne.n	8009e2e <__d2b+0x9a>
 8009df6:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8009dfa:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 8009dfe:	6910      	ldr	r0, [r2, #16]
 8009e00:	603b      	str	r3, [r7, #0]
 8009e02:	f7ff fd2b 	bl	800985c <__hi0bits>
 8009e06:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8009e0a:	6030      	str	r0, [r6, #0]
 8009e0c:	4640      	mov	r0, r8
 8009e0e:	b003      	add	sp, #12
 8009e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e14:	a801      	add	r0, sp, #4
 8009e16:	f7ff fd3f 	bl	8009898 <__lo0bits>
 8009e1a:	9b01      	ldr	r3, [sp, #4]
 8009e1c:	2401      	movs	r4, #1
 8009e1e:	f8c8 3014 	str.w	r3, [r8, #20]
 8009e22:	f8c8 4010 	str.w	r4, [r8, #16]
 8009e26:	3020      	adds	r0, #32
 8009e28:	f1b9 0f00 	cmp.w	r9, #0
 8009e2c:	d0e3      	beq.n	8009df6 <__d2b+0x62>
 8009e2e:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 8009e32:	eb09 0300 	add.w	r3, r9, r0
 8009e36:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e3a:	603b      	str	r3, [r7, #0]
 8009e3c:	6030      	str	r0, [r6, #0]
 8009e3e:	e7e5      	b.n	8009e0c <__d2b+0x78>
 8009e40:	f1c0 0220 	rsb	r2, r0, #32
 8009e44:	9900      	ldr	r1, [sp, #0]
 8009e46:	fa13 f202 	lsls.w	r2, r3, r2
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	40c3      	lsrs	r3, r0
 8009e4e:	f8c8 2014 	str.w	r2, [r8, #20]
 8009e52:	9301      	str	r3, [sp, #4]
 8009e54:	e7c4      	b.n	8009de0 <__d2b+0x4c>
 8009e56:	bf00      	nop

08009e58 <__ratio>:
 8009e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e5c:	b083      	sub	sp, #12
 8009e5e:	460d      	mov	r5, r1
 8009e60:	4669      	mov	r1, sp
 8009e62:	4604      	mov	r4, r0
 8009e64:	f7ff ff44 	bl	8009cf0 <__b2d>
 8009e68:	4689      	mov	r9, r1
 8009e6a:	4680      	mov	r8, r0
 8009e6c:	a901      	add	r1, sp, #4
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f7ff ff3e 	bl	8009cf0 <__b2d>
 8009e74:	460f      	mov	r7, r1
 8009e76:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8009e7a:	692a      	ldr	r2, [r5, #16]
 8009e7c:	6924      	ldr	r4, [r4, #16]
 8009e7e:	1acb      	subs	r3, r1, r3
 8009e80:	1aa4      	subs	r4, r4, r2
 8009e82:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8009e86:	2c00      	cmp	r4, #0
 8009e88:	4606      	mov	r6, r0
 8009e8a:	464b      	mov	r3, r9
 8009e8c:	4639      	mov	r1, r7
 8009e8e:	bfcb      	itete	gt
 8009e90:	eb09 5304 	addgt.w	r3, r9, r4, lsl #20
 8009e94:	eba7 5104 	suble.w	r1, r7, r4, lsl #20
 8009e98:	4699      	movgt	r9, r3
 8009e9a:	460f      	movle	r7, r1
 8009e9c:	bfcc      	ite	gt
 8009e9e:	46c0      	nopgt			; (mov r8, r8)
 8009ea0:	4636      	movle	r6, r6
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	4632      	mov	r2, r6
 8009ea8:	463b      	mov	r3, r7
 8009eaa:	f001 fc53 	bl	800b754 <__aeabi_ddiv>
 8009eae:	b003      	add	sp, #12
 8009eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009eb4 <_mprec_log10>:
 8009eb4:	b510      	push	{r4, lr}
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	2100      	movs	r1, #0
 8009eba:	2000      	movs	r0, #0
 8009ebc:	2c17      	cmp	r4, #23
 8009ebe:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8009ec2:	dd08      	ble.n	8009ed6 <_mprec_log10+0x22>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8009ecc:	f001 fb18 	bl	800b500 <__aeabi_dmul>
 8009ed0:	3c01      	subs	r4, #1
 8009ed2:	d1f7      	bne.n	8009ec4 <_mprec_log10+0x10>
 8009ed4:	bd10      	pop	{r4, pc}
 8009ed6:	4b03      	ldr	r3, [pc, #12]	; (8009ee4 <_mprec_log10+0x30>)
 8009ed8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009edc:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8009ee0:	bd10      	pop	{r4, pc}
 8009ee2:	bf00      	nop
 8009ee4:	0800bc78 	.word	0x0800bc78

08009ee8 <__copybits>:
 8009ee8:	6913      	ldr	r3, [r2, #16]
 8009eea:	3901      	subs	r1, #1
 8009eec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ef0:	1149      	asrs	r1, r1, #5
 8009ef2:	b470      	push	{r4, r5, r6}
 8009ef4:	3314      	adds	r3, #20
 8009ef6:	f102 0414 	add.w	r4, r2, #20
 8009efa:	3101      	adds	r1, #1
 8009efc:	429c      	cmp	r4, r3
 8009efe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009f02:	d20c      	bcs.n	8009f1e <__copybits+0x36>
 8009f04:	4605      	mov	r5, r0
 8009f06:	f854 6b04 	ldr.w	r6, [r4], #4
 8009f0a:	42a3      	cmp	r3, r4
 8009f0c:	f845 6b04 	str.w	r6, [r5], #4
 8009f10:	d8f9      	bhi.n	8009f06 <__copybits+0x1e>
 8009f12:	1a9b      	subs	r3, r3, r2
 8009f14:	3b15      	subs	r3, #21
 8009f16:	f023 0303 	bic.w	r3, r3, #3
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	18c0      	adds	r0, r0, r3
 8009f1e:	4281      	cmp	r1, r0
 8009f20:	d904      	bls.n	8009f2c <__copybits+0x44>
 8009f22:	2300      	movs	r3, #0
 8009f24:	f840 3b04 	str.w	r3, [r0], #4
 8009f28:	4281      	cmp	r1, r0
 8009f2a:	d8fb      	bhi.n	8009f24 <__copybits+0x3c>
 8009f2c:	bc70      	pop	{r4, r5, r6}
 8009f2e:	4770      	bx	lr

08009f30 <__any_on>:
 8009f30:	6902      	ldr	r2, [r0, #16]
 8009f32:	114b      	asrs	r3, r1, #5
 8009f34:	429a      	cmp	r2, r3
 8009f36:	b410      	push	{r4}
 8009f38:	db01      	blt.n	8009f3e <__any_on+0xe>
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	dc13      	bgt.n	8009f66 <__any_on+0x36>
 8009f3e:	3204      	adds	r2, #4
 8009f40:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8009f44:	f100 0114 	add.w	r1, r0, #20
 8009f48:	1d1c      	adds	r4, r3, #4
 8009f4a:	42a1      	cmp	r1, r4
 8009f4c:	d218      	bcs.n	8009f80 <__any_on+0x50>
 8009f4e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8009f52:	b92a      	cbnz	r2, 8009f60 <__any_on+0x30>
 8009f54:	4299      	cmp	r1, r3
 8009f56:	d213      	bcs.n	8009f80 <__any_on+0x50>
 8009f58:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009f5c:	2a00      	cmp	r2, #0
 8009f5e:	d0f9      	beq.n	8009f54 <__any_on+0x24>
 8009f60:	2001      	movs	r0, #1
 8009f62:	bc10      	pop	{r4}
 8009f64:	4770      	bx	lr
 8009f66:	f011 011f 	ands.w	r1, r1, #31
 8009f6a:	d0e8      	beq.n	8009f3e <__any_on+0xe>
 8009f6c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	fa33 f401 	lsrs.w	r4, r3, r1
 8009f76:	fa14 f101 	lsls.w	r1, r4, r1
 8009f7a:	4299      	cmp	r1, r3
 8009f7c:	d1f0      	bne.n	8009f60 <__any_on+0x30>
 8009f7e:	e7de      	b.n	8009f3e <__any_on+0xe>
 8009f80:	2000      	movs	r0, #0
 8009f82:	e7ee      	b.n	8009f62 <__any_on+0x32>

08009f84 <__fpclassifyd>:
 8009f84:	ea50 0201 	orrs.w	r2, r0, r1
 8009f88:	b410      	push	{r4}
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	d102      	bne.n	8009f94 <__fpclassifyd+0x10>
 8009f8e:	2002      	movs	r0, #2
 8009f90:	bc10      	pop	{r4}
 8009f92:	4770      	bx	lr
 8009f94:	f1d0 0101 	rsbs	r1, r0, #1
 8009f98:	bf38      	it	cc
 8009f9a:	2100      	movcc	r1, #0
 8009f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fa0:	bf08      	it	eq
 8009fa2:	2800      	cmpeq	r0, #0
 8009fa4:	d0f3      	beq.n	8009f8e <__fpclassifyd+0xa>
 8009fa6:	f103 44ff 	add.w	r4, r3, #2139095040	; 0x7f800000
 8009faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009fae:	f504 04e0 	add.w	r4, r4, #7340032	; 0x700000
 8009fb2:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 8009fb6:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 8009fba:	4290      	cmp	r0, r2
 8009fbc:	bf88      	it	hi
 8009fbe:	4294      	cmphi	r4, r2
 8009fc0:	d801      	bhi.n	8009fc6 <__fpclassifyd+0x42>
 8009fc2:	2004      	movs	r0, #4
 8009fc4:	e7e4      	b.n	8009f90 <__fpclassifyd+0xc>
 8009fc6:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8009fca:	2003      	movs	r0, #3
 8009fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fd0:	bf28      	it	cs
 8009fd2:	f5b2 1f80 	cmpcs.w	r2, #1048576	; 0x100000
 8009fd6:	d3db      	bcc.n	8009f90 <__fpclassifyd+0xc>
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8009fde:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8009fe2:	bf18      	it	ne
 8009fe4:	4293      	cmpne	r3, r2
 8009fe6:	bf14      	ite	ne
 8009fe8:	2300      	movne	r3, #0
 8009fea:	2301      	moveq	r3, #1
 8009fec:	ea01 0003 	and.w	r0, r1, r3
 8009ff0:	e7ce      	b.n	8009f90 <__fpclassifyd+0xc>
 8009ff2:	bf00      	nop

08009ff4 <_sbrk_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	4c07      	ldr	r4, [pc, #28]	; (800a014 <_sbrk_r+0x20>)
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	4608      	mov	r0, r1
 8009ffe:	6023      	str	r3, [r4, #0]
 800a000:	f7fc f8e6 	bl	80061d0 <_sbrk>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	d000      	beq.n	800a00a <_sbrk_r+0x16>
 800a008:	bd38      	pop	{r3, r4, r5, pc}
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d0fb      	beq.n	800a008 <_sbrk_r+0x14>
 800a010:	602b      	str	r3, [r5, #0]
 800a012:	bd38      	pop	{r3, r4, r5, pc}
 800a014:	200010c0 	.word	0x200010c0

0800a018 <strcmp>:
 800a018:	ea80 0201 	eor.w	r2, r0, r1
 800a01c:	f012 0f03 	tst.w	r2, #3
 800a020:	d13a      	bne.n	800a098 <strcmp_unaligned>
 800a022:	f010 0203 	ands.w	r2, r0, #3
 800a026:	f020 0003 	bic.w	r0, r0, #3
 800a02a:	f021 0103 	bic.w	r1, r1, #3
 800a02e:	f850 cb04 	ldr.w	ip, [r0], #4
 800a032:	bf08      	it	eq
 800a034:	f851 3b04 	ldreq.w	r3, [r1], #4
 800a038:	d00d      	beq.n	800a056 <strcmp+0x3e>
 800a03a:	f082 0203 	eor.w	r2, r2, #3
 800a03e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800a042:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800a046:	fa23 f202 	lsr.w	r2, r3, r2
 800a04a:	f851 3b04 	ldr.w	r3, [r1], #4
 800a04e:	ea4c 0c02 	orr.w	ip, ip, r2
 800a052:	ea43 0302 	orr.w	r3, r3, r2
 800a056:	bf00      	nop
 800a058:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 800a05c:	459c      	cmp	ip, r3
 800a05e:	bf01      	itttt	eq
 800a060:	ea22 020c 	biceq.w	r2, r2, ip
 800a064:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 800a068:	f850 cb04 	ldreq.w	ip, [r0], #4
 800a06c:	f851 3b04 	ldreq.w	r3, [r1], #4
 800a070:	d0f2      	beq.n	800a058 <strcmp+0x40>
 800a072:	ea4f 600c 	mov.w	r0, ip, lsl #24
 800a076:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800a07a:	2801      	cmp	r0, #1
 800a07c:	bf28      	it	cs
 800a07e:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 800a082:	bf08      	it	eq
 800a084:	0a1b      	lsreq	r3, r3, #8
 800a086:	d0f4      	beq.n	800a072 <strcmp+0x5a>
 800a088:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800a08c:	ea4f 6010 	mov.w	r0, r0, lsr #24
 800a090:	eba0 0003 	sub.w	r0, r0, r3
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop

0800a098 <strcmp_unaligned>:
 800a098:	f010 0f03 	tst.w	r0, #3
 800a09c:	d00a      	beq.n	800a0b4 <strcmp_unaligned+0x1c>
 800a09e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0a6:	2a01      	cmp	r2, #1
 800a0a8:	bf28      	it	cs
 800a0aa:	429a      	cmpcs	r2, r3
 800a0ac:	d0f4      	beq.n	800a098 <strcmp_unaligned>
 800a0ae:	eba2 0003 	sub.w	r0, r2, r3
 800a0b2:	4770      	bx	lr
 800a0b4:	f84d 5d04 	str.w	r5, [sp, #-4]!
 800a0b8:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800a0bc:	f04f 0201 	mov.w	r2, #1
 800a0c0:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 800a0c4:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 800a0c8:	f001 0c03 	and.w	ip, r1, #3
 800a0cc:	f021 0103 	bic.w	r1, r1, #3
 800a0d0:	f850 4b04 	ldr.w	r4, [r0], #4
 800a0d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a0d8:	f1bc 0f02 	cmp.w	ip, #2
 800a0dc:	d026      	beq.n	800a12c <strcmp_unaligned+0x94>
 800a0de:	d84b      	bhi.n	800a178 <strcmp_unaligned+0xe0>
 800a0e0:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 800a0e4:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 800a0e8:	eba4 0302 	sub.w	r3, r4, r2
 800a0ec:	ea23 0304 	bic.w	r3, r3, r4
 800a0f0:	d10d      	bne.n	800a10e <strcmp_unaligned+0x76>
 800a0f2:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800a0f6:	bf08      	it	eq
 800a0f8:	f851 5b04 	ldreq.w	r5, [r1], #4
 800a0fc:	d10a      	bne.n	800a114 <strcmp_unaligned+0x7c>
 800a0fe:	ea8c 0c04 	eor.w	ip, ip, r4
 800a102:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 800a106:	d10c      	bne.n	800a122 <strcmp_unaligned+0x8a>
 800a108:	f850 4b04 	ldr.w	r4, [r0], #4
 800a10c:	e7e8      	b.n	800a0e0 <strcmp_unaligned+0x48>
 800a10e:	ea4f 2515 	mov.w	r5, r5, lsr #8
 800a112:	e05c      	b.n	800a1ce <strcmp_unaligned+0x136>
 800a114:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 800a118:	d152      	bne.n	800a1c0 <strcmp_unaligned+0x128>
 800a11a:	780d      	ldrb	r5, [r1, #0]
 800a11c:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 800a120:	e055      	b.n	800a1ce <strcmp_unaligned+0x136>
 800a122:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 800a126:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 800a12a:	e050      	b.n	800a1ce <strcmp_unaligned+0x136>
 800a12c:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 800a130:	eba4 0302 	sub.w	r3, r4, r2
 800a134:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a138:	ea23 0304 	bic.w	r3, r3, r4
 800a13c:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 800a140:	d117      	bne.n	800a172 <strcmp_unaligned+0xda>
 800a142:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800a146:	bf08      	it	eq
 800a148:	f851 5b04 	ldreq.w	r5, [r1], #4
 800a14c:	d107      	bne.n	800a15e <strcmp_unaligned+0xc6>
 800a14e:	ea8c 0c04 	eor.w	ip, ip, r4
 800a152:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 800a156:	d108      	bne.n	800a16a <strcmp_unaligned+0xd2>
 800a158:	f850 4b04 	ldr.w	r4, [r0], #4
 800a15c:	e7e6      	b.n	800a12c <strcmp_unaligned+0x94>
 800a15e:	041b      	lsls	r3, r3, #16
 800a160:	d12e      	bne.n	800a1c0 <strcmp_unaligned+0x128>
 800a162:	880d      	ldrh	r5, [r1, #0]
 800a164:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800a168:	e031      	b.n	800a1ce <strcmp_unaligned+0x136>
 800a16a:	ea4f 4505 	mov.w	r5, r5, lsl #16
 800a16e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800a172:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800a176:	e02a      	b.n	800a1ce <strcmp_unaligned+0x136>
 800a178:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 800a17c:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 800a180:	eba4 0302 	sub.w	r3, r4, r2
 800a184:	ea23 0304 	bic.w	r3, r3, r4
 800a188:	d10d      	bne.n	800a1a6 <strcmp_unaligned+0x10e>
 800a18a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800a18e:	bf08      	it	eq
 800a190:	f851 5b04 	ldreq.w	r5, [r1], #4
 800a194:	d10a      	bne.n	800a1ac <strcmp_unaligned+0x114>
 800a196:	ea8c 0c04 	eor.w	ip, ip, r4
 800a19a:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 800a19e:	d10a      	bne.n	800a1b6 <strcmp_unaligned+0x11e>
 800a1a0:	f850 4b04 	ldr.w	r4, [r0], #4
 800a1a4:	e7e8      	b.n	800a178 <strcmp_unaligned+0xe0>
 800a1a6:	ea4f 6515 	mov.w	r5, r5, lsr #24
 800a1aa:	e010      	b.n	800a1ce <strcmp_unaligned+0x136>
 800a1ac:	f014 0fff 	tst.w	r4, #255	; 0xff
 800a1b0:	d006      	beq.n	800a1c0 <strcmp_unaligned+0x128>
 800a1b2:	f851 5b04 	ldr.w	r5, [r1], #4
 800a1b6:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 800a1ba:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800a1be:	e006      	b.n	800a1ce <strcmp_unaligned+0x136>
 800a1c0:	f04f 0000 	mov.w	r0, #0
 800a1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1c8:	f85d 5b04 	ldr.w	r5, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 800a1d2:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 800a1d6:	2801      	cmp	r0, #1
 800a1d8:	bf28      	it	cs
 800a1da:	4290      	cmpcs	r0, r2
 800a1dc:	bf04      	itt	eq
 800a1de:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 800a1e2:	0a2d      	lsreq	r5, r5, #8
 800a1e4:	d0f3      	beq.n	800a1ce <strcmp_unaligned+0x136>
 800a1e6:	eba2 0000 	sub.w	r0, r2, r0
 800a1ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1ee:	f85d 5b04 	ldr.w	r5, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <strlen>:
 800a1f4:	f020 0103 	bic.w	r1, r0, #3
 800a1f8:	f010 0003 	ands.w	r0, r0, #3
 800a1fc:	f1c0 0000 	rsb	r0, r0, #0
 800a200:	f851 3b04 	ldr.w	r3, [r1], #4
 800a204:	f100 0c04 	add.w	ip, r0, #4
 800a208:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800a20c:	f06f 0200 	mvn.w	r2, #0
 800a210:	bf1c      	itt	ne
 800a212:	fa22 f20c 	lsrne.w	r2, r2, ip
 800a216:	4313      	orrne	r3, r2
 800a218:	f04f 0c01 	mov.w	ip, #1
 800a21c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800a220:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800a224:	eba3 020c 	sub.w	r2, r3, ip
 800a228:	ea22 0203 	bic.w	r2, r2, r3
 800a22c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800a230:	bf04      	itt	eq
 800a232:	f851 3b04 	ldreq.w	r3, [r1], #4
 800a236:	3004      	addeq	r0, #4
 800a238:	d0f4      	beq.n	800a224 <strlen+0x30>
 800a23a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a23e:	bf1f      	itttt	ne
 800a240:	3001      	addne	r0, #1
 800a242:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 800a246:	3001      	addne	r0, #1
 800a248:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 800a24c:	bf18      	it	ne
 800a24e:	3001      	addne	r0, #1
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop

0800a254 <__ssprint_r>:
 800a254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a258:	b083      	sub	sp, #12
 800a25a:	4691      	mov	r9, r2
 800a25c:	9001      	str	r0, [sp, #4]
 800a25e:	6890      	ldr	r0, [r2, #8]
 800a260:	6817      	ldr	r7, [r2, #0]
 800a262:	460d      	mov	r5, r1
 800a264:	2800      	cmp	r0, #0
 800a266:	d072      	beq.n	800a34e <__ssprint_r+0xfa>
 800a268:	f04f 0a00 	mov.w	sl, #0
 800a26c:	6808      	ldr	r0, [r1, #0]
 800a26e:	688b      	ldr	r3, [r1, #8]
 800a270:	4654      	mov	r4, sl
 800a272:	2c00      	cmp	r4, #0
 800a274:	d048      	beq.n	800a308 <__ssprint_r+0xb4>
 800a276:	429c      	cmp	r4, r3
 800a278:	461e      	mov	r6, r3
 800a27a:	4698      	mov	r8, r3
 800a27c:	bf3c      	itt	cc
 800a27e:	4626      	movcc	r6, r4
 800a280:	46a0      	movcc	r8, r4
 800a282:	d331      	bcc.n	800a2e8 <__ssprint_r+0x94>
 800a284:	89ab      	ldrh	r3, [r5, #12]
 800a286:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800a28a:	d02d      	beq.n	800a2e8 <__ssprint_r+0x94>
 800a28c:	696e      	ldr	r6, [r5, #20]
 800a28e:	6929      	ldr	r1, [r5, #16]
 800a290:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800a294:	ebc1 0800 	rsb	r8, r1, r0
 800a298:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800a29c:	1c60      	adds	r0, r4, #1
 800a29e:	1076      	asrs	r6, r6, #1
 800a2a0:	4440      	add	r0, r8
 800a2a2:	4286      	cmp	r6, r0
 800a2a4:	4632      	mov	r2, r6
 800a2a6:	bf3c      	itt	cc
 800a2a8:	4606      	movcc	r6, r0
 800a2aa:	4632      	movcc	r2, r6
 800a2ac:	055b      	lsls	r3, r3, #21
 800a2ae:	9801      	ldr	r0, [sp, #4]
 800a2b0:	d52f      	bpl.n	800a312 <__ssprint_r+0xbe>
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	f7fe fed8 	bl	8009068 <_malloc_r>
 800a2b8:	4683      	mov	fp, r0
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	d032      	beq.n	800a324 <__ssprint_r+0xd0>
 800a2be:	6929      	ldr	r1, [r5, #16]
 800a2c0:	4642      	mov	r2, r8
 800a2c2:	f7ff f9c3 	bl	800964c <memcpy>
 800a2c6:	89ab      	ldrh	r3, [r5, #12]
 800a2c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2d0:	81ab      	strh	r3, [r5, #12]
 800a2d2:	ebc8 0306 	rsb	r3, r8, r6
 800a2d6:	eb0b 0008 	add.w	r0, fp, r8
 800a2da:	616e      	str	r6, [r5, #20]
 800a2dc:	f8c5 b010 	str.w	fp, [r5, #16]
 800a2e0:	6028      	str	r0, [r5, #0]
 800a2e2:	4626      	mov	r6, r4
 800a2e4:	60ab      	str	r3, [r5, #8]
 800a2e6:	46a0      	mov	r8, r4
 800a2e8:	4642      	mov	r2, r8
 800a2ea:	4651      	mov	r1, sl
 800a2ec:	f000 fcb8 	bl	800ac60 <memmove>
 800a2f0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800a2f4:	68ab      	ldr	r3, [r5, #8]
 800a2f6:	6828      	ldr	r0, [r5, #0]
 800a2f8:	1b9b      	subs	r3, r3, r6
 800a2fa:	4440      	add	r0, r8
 800a2fc:	1b14      	subs	r4, r2, r4
 800a2fe:	60ab      	str	r3, [r5, #8]
 800a300:	6028      	str	r0, [r5, #0]
 800a302:	f8c9 4008 	str.w	r4, [r9, #8]
 800a306:	b1e4      	cbz	r4, 800a342 <__ssprint_r+0xee>
 800a308:	f8d7 a000 	ldr.w	sl, [r7]
 800a30c:	687c      	ldr	r4, [r7, #4]
 800a30e:	3708      	adds	r7, #8
 800a310:	e7af      	b.n	800a272 <__ssprint_r+0x1e>
 800a312:	f000 fd47 	bl	800ada4 <_realloc_r>
 800a316:	4683      	mov	fp, r0
 800a318:	2800      	cmp	r0, #0
 800a31a:	d1da      	bne.n	800a2d2 <__ssprint_r+0x7e>
 800a31c:	9801      	ldr	r0, [sp, #4]
 800a31e:	6929      	ldr	r1, [r5, #16]
 800a320:	f7fe fd96 	bl	8008e50 <_free_r>
 800a324:	9a01      	ldr	r2, [sp, #4]
 800a326:	230c      	movs	r3, #12
 800a328:	6013      	str	r3, [r2, #0]
 800a32a:	89aa      	ldrh	r2, [r5, #12]
 800a32c:	2300      	movs	r3, #0
 800a32e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a332:	81aa      	strh	r2, [r5, #12]
 800a334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a338:	f8c9 3008 	str.w	r3, [r9, #8]
 800a33c:	f8c9 3004 	str.w	r3, [r9, #4]
 800a340:	e002      	b.n	800a348 <__ssprint_r+0xf4>
 800a342:	f8c9 4004 	str.w	r4, [r9, #4]
 800a346:	4620      	mov	r0, r4
 800a348:	b003      	add	sp, #12
 800a34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a34e:	6050      	str	r0, [r2, #4]
 800a350:	e7fa      	b.n	800a348 <__ssprint_r+0xf4>
 800a352:	bf00      	nop

0800a354 <_svfiprintf_r>:
 800a354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a358:	468a      	mov	sl, r1
 800a35a:	8989      	ldrh	r1, [r1, #12]
 800a35c:	b0ad      	sub	sp, #180	; 0xb4
 800a35e:	0609      	lsls	r1, r1, #24
 800a360:	9007      	str	r0, [sp, #28]
 800a362:	9305      	str	r3, [sp, #20]
 800a364:	d504      	bpl.n	800a370 <_svfiprintf_r+0x1c>
 800a366:	f8da 3010 	ldr.w	r3, [sl, #16]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f000 8422 	beq.w	800abb4 <_svfiprintf_r+0x860>
 800a370:	2300      	movs	r3, #0
 800a372:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 800a376:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 800a37a:	a90e      	add	r1, sp, #56	; 0x38
 800a37c:	930c      	str	r3, [sp, #48]	; 0x30
 800a37e:	932a      	str	r3, [sp, #168]	; 0xa8
 800a380:	9329      	str	r3, [sp, #164]	; 0xa4
 800a382:	9304      	str	r3, [sp, #16]
 800a384:	ebc0 0308 	rsb	r3, r0, r8
 800a388:	9001      	str	r0, [sp, #4]
 800a38a:	9128      	str	r1, [sp, #160]	; 0xa0
 800a38c:	4617      	mov	r7, r2
 800a38e:	460c      	mov	r4, r1
 800a390:	930d      	str	r3, [sp, #52]	; 0x34
 800a392:	783b      	ldrb	r3, [r7, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	bf18      	it	ne
 800a398:	2b25      	cmpne	r3, #37	; 0x25
 800a39a:	463d      	mov	r5, r7
 800a39c:	d016      	beq.n	800a3cc <_svfiprintf_r+0x78>
 800a39e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800a3a2:	2b25      	cmp	r3, #37	; 0x25
 800a3a4:	bf18      	it	ne
 800a3a6:	2b00      	cmpne	r3, #0
 800a3a8:	d1f9      	bne.n	800a39e <_svfiprintf_r+0x4a>
 800a3aa:	1bee      	subs	r6, r5, r7
 800a3ac:	d00e      	beq.n	800a3cc <_svfiprintf_r+0x78>
 800a3ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800a3b0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a3b2:	6027      	str	r7, [r4, #0]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	1992      	adds	r2, r2, r6
 800a3b8:	2b07      	cmp	r3, #7
 800a3ba:	6066      	str	r6, [r4, #4]
 800a3bc:	922a      	str	r2, [sp, #168]	; 0xa8
 800a3be:	9329      	str	r3, [sp, #164]	; 0xa4
 800a3c0:	f300 832a 	bgt.w	800aa18 <_svfiprintf_r+0x6c4>
 800a3c4:	3408      	adds	r4, #8
 800a3c6:	9b04      	ldr	r3, [sp, #16]
 800a3c8:	199b      	adds	r3, r3, r6
 800a3ca:	9304      	str	r3, [sp, #16]
 800a3cc:	782b      	ldrb	r3, [r5, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f000 82c5 	beq.w	800a95e <_svfiprintf_r+0x60a>
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	1c6f      	adds	r7, r5, #1
 800a3d8:	4613      	mov	r3, r2
 800a3da:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 800a3de:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a3e2:	9206      	str	r2, [sp, #24]
 800a3e4:	4693      	mov	fp, r2
 800a3e6:	f817 2b01 	ldrb.w	r2, [r7], #1
 800a3ea:	f1a2 0120 	sub.w	r1, r2, #32
 800a3ee:	2958      	cmp	r1, #88	; 0x58
 800a3f0:	f200 8178 	bhi.w	800a6e4 <_svfiprintf_r+0x390>
 800a3f4:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a3f8:	01760172 	.word	0x01760172
 800a3fc:	016f0176 	.word	0x016f0176
 800a400:	01760176 	.word	0x01760176
 800a404:	01760176 	.word	0x01760176
 800a408:	01760176 	.word	0x01760176
 800a40c:	01d800af 	.word	0x01d800af
 800a410:	00ba0176 	.word	0x00ba0176
 800a414:	017601da 	.word	0x017601da
 800a418:	01c401d5 	.word	0x01c401d5
 800a41c:	01c401c4 	.word	0x01c401c4
 800a420:	01c401c4 	.word	0x01c401c4
 800a424:	01c401c4 	.word	0x01c401c4
 800a428:	01c401c4 	.word	0x01c401c4
 800a42c:	01760176 	.word	0x01760176
 800a430:	01760176 	.word	0x01760176
 800a434:	01760176 	.word	0x01760176
 800a438:	01760176 	.word	0x01760176
 800a43c:	01760176 	.word	0x01760176
 800a440:	017601a7 	.word	0x017601a7
 800a444:	01760176 	.word	0x01760176
 800a448:	01760176 	.word	0x01760176
 800a44c:	01760176 	.word	0x01760176
 800a450:	01760176 	.word	0x01760176
 800a454:	005c0176 	.word	0x005c0176
 800a458:	01760176 	.word	0x01760176
 800a45c:	01760176 	.word	0x01760176
 800a460:	00a00176 	.word	0x00a00176
 800a464:	01760176 	.word	0x01760176
 800a468:	0176016a 	.word	0x0176016a
 800a46c:	01760176 	.word	0x01760176
 800a470:	01760176 	.word	0x01760176
 800a474:	01760176 	.word	0x01760176
 800a478:	01760176 	.word	0x01760176
 800a47c:	01170176 	.word	0x01170176
 800a480:	01760105 	.word	0x01760105
 800a484:	01760176 	.word	0x01760176
 800a488:	01050102 	.word	0x01050102
 800a48c:	01760176 	.word	0x01760176
 800a490:	01760059 	.word	0x01760059
 800a494:	005e00d1 	.word	0x005e00d1
 800a498:	005900bd 	.word	0x005900bd
 800a49c:	01870176 	.word	0x01870176
 800a4a0:	00a20176 	.word	0x00a20176
 800a4a4:	01760176 	.word	0x01760176
 800a4a8:	00e2      	.short	0x00e2
 800a4aa:	f04b 0b10 	orr.w	fp, fp, #16
 800a4ae:	e79a      	b.n	800a3e6 <_svfiprintf_r+0x92>
 800a4b0:	f04b 0b10 	orr.w	fp, fp, #16
 800a4b4:	f01b 0210 	ands.w	r2, fp, #16
 800a4b8:	f000 8313 	beq.w	800aae2 <_svfiprintf_r+0x78e>
 800a4bc:	9805      	ldr	r0, [sp, #20]
 800a4be:	6803      	ldr	r3, [r0, #0]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	1a99      	subs	r1, r3, r2
 800a4c4:	bf18      	it	ne
 800a4c6:	2101      	movne	r1, #1
 800a4c8:	3004      	adds	r0, #4
 800a4ca:	9005      	str	r0, [sp, #20]
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 800a4d2:	2d00      	cmp	r5, #0
 800a4d4:	bfa8      	it	ge
 800a4d6:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 800a4da:	2d00      	cmp	r5, #0
 800a4dc:	bf18      	it	ne
 800a4de:	f041 0101 	orrne.w	r1, r1, #1
 800a4e2:	2900      	cmp	r1, #0
 800a4e4:	f000 8228 	beq.w	800a938 <_svfiprintf_r+0x5e4>
 800a4e8:	2a01      	cmp	r2, #1
 800a4ea:	f000 82cf 	beq.w	800aa8c <_svfiprintf_r+0x738>
 800a4ee:	2a02      	cmp	r2, #2
 800a4f0:	bf18      	it	ne
 800a4f2:	4642      	movne	r2, r8
 800a4f4:	d101      	bne.n	800a4fa <_svfiprintf_r+0x1a6>
 800a4f6:	e2b9      	b.n	800aa6c <_svfiprintf_r+0x718>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	f003 0107 	and.w	r1, r3, #7
 800a4fe:	3130      	adds	r1, #48	; 0x30
 800a500:	1e50      	subs	r0, r2, #1
 800a502:	08db      	lsrs	r3, r3, #3
 800a504:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a508:	d1f6      	bne.n	800a4f8 <_svfiprintf_r+0x1a4>
 800a50a:	f01b 0f01 	tst.w	fp, #1
 800a50e:	9009      	str	r0, [sp, #36]	; 0x24
 800a510:	f040 831a 	bne.w	800ab48 <_svfiprintf_r+0x7f4>
 800a514:	ebc0 0308 	rsb	r3, r0, r8
 800a518:	9303      	str	r3, [sp, #12]
 800a51a:	9508      	str	r5, [sp, #32]
 800a51c:	9803      	ldr	r0, [sp, #12]
 800a51e:	9908      	ldr	r1, [sp, #32]
 800a520:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 800a524:	4288      	cmp	r0, r1
 800a526:	bfb8      	it	lt
 800a528:	4608      	movlt	r0, r1
 800a52a:	9002      	str	r0, [sp, #8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 808b 	beq.w	800a648 <_svfiprintf_r+0x2f4>
 800a532:	3001      	adds	r0, #1
 800a534:	9002      	str	r0, [sp, #8]
 800a536:	e087      	b.n	800a648 <_svfiprintf_r+0x2f4>
 800a538:	f04b 0b10 	orr.w	fp, fp, #16
 800a53c:	f01b 0f10 	tst.w	fp, #16
 800a540:	f000 82c1 	beq.w	800aac6 <_svfiprintf_r+0x772>
 800a544:	9805      	ldr	r0, [sp, #20]
 800a546:	6803      	ldr	r3, [r0, #0]
 800a548:	2201      	movs	r2, #1
 800a54a:	1c19      	adds	r1, r3, #0
 800a54c:	bf18      	it	ne
 800a54e:	2101      	movne	r1, #1
 800a550:	3004      	adds	r0, #4
 800a552:	9005      	str	r0, [sp, #20]
 800a554:	e7ba      	b.n	800a4cc <_svfiprintf_r+0x178>
 800a556:	9805      	ldr	r0, [sp, #20]
 800a558:	9905      	ldr	r1, [sp, #20]
 800a55a:	6800      	ldr	r0, [r0, #0]
 800a55c:	1d0a      	adds	r2, r1, #4
 800a55e:	2800      	cmp	r0, #0
 800a560:	9006      	str	r0, [sp, #24]
 800a562:	f280 82e0 	bge.w	800ab26 <_svfiprintf_r+0x7d2>
 800a566:	4240      	negs	r0, r0
 800a568:	9006      	str	r0, [sp, #24]
 800a56a:	9205      	str	r2, [sp, #20]
 800a56c:	f04b 0b04 	orr.w	fp, fp, #4
 800a570:	e739      	b.n	800a3e6 <_svfiprintf_r+0x92>
 800a572:	9b05      	ldr	r3, [sp, #20]
 800a574:	9905      	ldr	r1, [sp, #20]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2230      	movs	r2, #48	; 0x30
 800a57a:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 800a57e:	2278      	movs	r2, #120	; 0x78
 800a580:	3104      	adds	r1, #4
 800a582:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 800a586:	4aaf      	ldr	r2, [pc, #700]	; (800a844 <_svfiprintf_r+0x4f0>)
 800a588:	9105      	str	r1, [sp, #20]
 800a58a:	1c19      	adds	r1, r3, #0
 800a58c:	bf18      	it	ne
 800a58e:	2101      	movne	r1, #1
 800a590:	920c      	str	r2, [sp, #48]	; 0x30
 800a592:	f04b 0b02 	orr.w	fp, fp, #2
 800a596:	2202      	movs	r2, #2
 800a598:	e798      	b.n	800a4cc <_svfiprintf_r+0x178>
 800a59a:	f01b 0f10 	tst.w	fp, #16
 800a59e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800a5a2:	f040 82dd 	bne.w	800ab60 <_svfiprintf_r+0x80c>
 800a5a6:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800a5aa:	f000 82fb 	beq.w	800aba4 <_svfiprintf_r+0x850>
 800a5ae:	9a05      	ldr	r2, [sp, #20]
 800a5b0:	9804      	ldr	r0, [sp, #16]
 800a5b2:	6813      	ldr	r3, [r2, #0]
 800a5b4:	3204      	adds	r2, #4
 800a5b6:	9205      	str	r2, [sp, #20]
 800a5b8:	8018      	strh	r0, [r3, #0]
 800a5ba:	e6ea      	b.n	800a392 <_svfiprintf_r+0x3e>
 800a5bc:	49a1      	ldr	r1, [pc, #644]	; (800a844 <_svfiprintf_r+0x4f0>)
 800a5be:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800a5c2:	910c      	str	r1, [sp, #48]	; 0x30
 800a5c4:	f01b 0f10 	tst.w	fp, #16
 800a5c8:	d103      	bne.n	800a5d2 <_svfiprintf_r+0x27e>
 800a5ca:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800a5ce:	f040 82d3 	bne.w	800ab78 <_svfiprintf_r+0x824>
 800a5d2:	9805      	ldr	r0, [sp, #20]
 800a5d4:	6803      	ldr	r3, [r0, #0]
 800a5d6:	3004      	adds	r0, #4
 800a5d8:	9005      	str	r0, [sp, #20]
 800a5da:	1c19      	adds	r1, r3, #0
 800a5dc:	bf18      	it	ne
 800a5de:	2101      	movne	r1, #1
 800a5e0:	ea1b 0f01 	tst.w	fp, r1
 800a5e4:	f000 8287 	beq.w	800aaf6 <_svfiprintf_r+0x7a2>
 800a5e8:	2130      	movs	r1, #48	; 0x30
 800a5ea:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800a5ee:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 800a5f2:	f04b 0b02 	orr.w	fp, fp, #2
 800a5f6:	2101      	movs	r1, #1
 800a5f8:	2202      	movs	r2, #2
 800a5fa:	e767      	b.n	800a4cc <_svfiprintf_r+0x178>
 800a5fc:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 800a600:	e6f1      	b.n	800a3e6 <_svfiprintf_r+0x92>
 800a602:	f01b 0f10 	tst.w	fp, #16
 800a606:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800a60a:	f000 80a4 	beq.w	800a756 <_svfiprintf_r+0x402>
 800a60e:	9805      	ldr	r0, [sp, #20]
 800a610:	6803      	ldr	r3, [r0, #0]
 800a612:	3004      	adds	r0, #4
 800a614:	9005      	str	r0, [sp, #20]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f2c0 80a9 	blt.w	800a76e <_svfiprintf_r+0x41a>
 800a61c:	bf0c      	ite	eq
 800a61e:	2100      	moveq	r1, #0
 800a620:	2101      	movne	r1, #1
 800a622:	2201      	movs	r2, #1
 800a624:	e755      	b.n	800a4d2 <_svfiprintf_r+0x17e>
 800a626:	9b05      	ldr	r3, [sp, #20]
 800a628:	9905      	ldr	r1, [sp, #20]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2001      	movs	r0, #1
 800a62e:	2200      	movs	r2, #0
 800a630:	3104      	adds	r1, #4
 800a632:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 800a636:	ab1e      	add	r3, sp, #120	; 0x78
 800a638:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 800a63c:	9002      	str	r0, [sp, #8]
 800a63e:	9105      	str	r1, [sp, #20]
 800a640:	9003      	str	r0, [sp, #12]
 800a642:	9309      	str	r3, [sp, #36]	; 0x24
 800a644:	2300      	movs	r3, #0
 800a646:	9308      	str	r3, [sp, #32]
 800a648:	f01b 0302 	ands.w	r3, fp, #2
 800a64c:	930a      	str	r3, [sp, #40]	; 0x28
 800a64e:	d002      	beq.n	800a656 <_svfiprintf_r+0x302>
 800a650:	9b02      	ldr	r3, [sp, #8]
 800a652:	3302      	adds	r3, #2
 800a654:	9302      	str	r3, [sp, #8]
 800a656:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800a65a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a65c:	f040 80c1 	bne.w	800a7e2 <_svfiprintf_r+0x48e>
 800a660:	9b06      	ldr	r3, [sp, #24]
 800a662:	9802      	ldr	r0, [sp, #8]
 800a664:	1a1d      	subs	r5, r3, r0
 800a666:	2d00      	cmp	r5, #0
 800a668:	f340 80bb 	ble.w	800a7e2 <_svfiprintf_r+0x48e>
 800a66c:	2d10      	cmp	r5, #16
 800a66e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a670:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800a672:	4e75      	ldr	r6, [pc, #468]	; (800a848 <_svfiprintf_r+0x4f4>)
 800a674:	dd1f      	ble.n	800a6b6 <_svfiprintf_r+0x362>
 800a676:	4621      	mov	r1, r4
 800a678:	f04f 0910 	mov.w	r9, #16
 800a67c:	9c07      	ldr	r4, [sp, #28]
 800a67e:	e002      	b.n	800a686 <_svfiprintf_r+0x332>
 800a680:	3d10      	subs	r5, #16
 800a682:	2d10      	cmp	r5, #16
 800a684:	dd16      	ble.n	800a6b4 <_svfiprintf_r+0x360>
 800a686:	3301      	adds	r3, #1
 800a688:	3210      	adds	r2, #16
 800a68a:	e881 0240 	stmia.w	r1, {r6, r9}
 800a68e:	3108      	adds	r1, #8
 800a690:	2b07      	cmp	r3, #7
 800a692:	922a      	str	r2, [sp, #168]	; 0xa8
 800a694:	9329      	str	r3, [sp, #164]	; 0xa4
 800a696:	ddf3      	ble.n	800a680 <_svfiprintf_r+0x32c>
 800a698:	4620      	mov	r0, r4
 800a69a:	4651      	mov	r1, sl
 800a69c:	4642      	mov	r2, r8
 800a69e:	f7ff fdd9 	bl	800a254 <__ssprint_r>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	f040 8162 	bne.w	800a96c <_svfiprintf_r+0x618>
 800a6a8:	3d10      	subs	r5, #16
 800a6aa:	2d10      	cmp	r5, #16
 800a6ac:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a6ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800a6b0:	a90e      	add	r1, sp, #56	; 0x38
 800a6b2:	dce8      	bgt.n	800a686 <_svfiprintf_r+0x332>
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	1952      	adds	r2, r2, r5
 800a6ba:	2b07      	cmp	r3, #7
 800a6bc:	6026      	str	r6, [r4, #0]
 800a6be:	6065      	str	r5, [r4, #4]
 800a6c0:	922a      	str	r2, [sp, #168]	; 0xa8
 800a6c2:	9329      	str	r3, [sp, #164]	; 0xa4
 800a6c4:	f300 8219 	bgt.w	800aafa <_svfiprintf_r+0x7a6>
 800a6c8:	3408      	adds	r4, #8
 800a6ca:	e08c      	b.n	800a7e6 <_svfiprintf_r+0x492>
 800a6cc:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800a6d0:	4b5e      	ldr	r3, [pc, #376]	; (800a84c <_svfiprintf_r+0x4f8>)
 800a6d2:	930c      	str	r3, [sp, #48]	; 0x30
 800a6d4:	e776      	b.n	800a5c4 <_svfiprintf_r+0x270>
 800a6d6:	f04b 0b01 	orr.w	fp, fp, #1
 800a6da:	e684      	b.n	800a3e6 <_svfiprintf_r+0x92>
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	bf08      	it	eq
 800a6e0:	2320      	moveq	r3, #32
 800a6e2:	e680      	b.n	800a3e6 <_svfiprintf_r+0x92>
 800a6e4:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800a6e8:	2a00      	cmp	r2, #0
 800a6ea:	f000 8138 	beq.w	800a95e <_svfiprintf_r+0x60a>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	9302      	str	r3, [sp, #8]
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	9303      	str	r3, [sp, #12]
 800a6fc:	ab1e      	add	r3, sp, #120	; 0x78
 800a6fe:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800a702:	9309      	str	r3, [sp, #36]	; 0x24
 800a704:	e79e      	b.n	800a644 <_svfiprintf_r+0x2f0>
 800a706:	9b05      	ldr	r3, [sp, #20]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	9309      	str	r3, [sp, #36]	; 0x24
 800a70c:	9b05      	ldr	r3, [sp, #20]
 800a70e:	3304      	adds	r3, #4
 800a710:	9305      	str	r3, [sp, #20]
 800a712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a714:	2600      	movs	r6, #0
 800a716:	f88d 60af 	strb.w	r6, [sp, #175]	; 0xaf
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	f000 8259 	beq.w	800abd2 <_svfiprintf_r+0x87e>
 800a720:	2d00      	cmp	r5, #0
 800a722:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a724:	f2c0 822d 	blt.w	800ab82 <_svfiprintf_r+0x82e>
 800a728:	4631      	mov	r1, r6
 800a72a:	462a      	mov	r2, r5
 800a72c:	f7fe ff50 	bl	80095d0 <memchr>
 800a730:	2800      	cmp	r0, #0
 800a732:	f000 8258 	beq.w	800abe6 <_svfiprintf_r+0x892>
 800a736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a738:	9608      	str	r6, [sp, #32]
 800a73a:	1ac0      	subs	r0, r0, r3
 800a73c:	42a8      	cmp	r0, r5
 800a73e:	9003      	str	r0, [sp, #12]
 800a740:	bfc8      	it	gt
 800a742:	9503      	strgt	r5, [sp, #12]
 800a744:	e6ea      	b.n	800a51c <_svfiprintf_r+0x1c8>
 800a746:	f04b 0b10 	orr.w	fp, fp, #16
 800a74a:	f01b 0f10 	tst.w	fp, #16
 800a74e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800a752:	f47f af5c 	bne.w	800a60e <_svfiprintf_r+0x2ba>
 800a756:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800a75a:	f000 8208 	beq.w	800ab6e <_svfiprintf_r+0x81a>
 800a75e:	9905      	ldr	r1, [sp, #20]
 800a760:	f9b1 3000 	ldrsh.w	r3, [r1]
 800a764:	3104      	adds	r1, #4
 800a766:	2b00      	cmp	r3, #0
 800a768:	9105      	str	r1, [sp, #20]
 800a76a:	f6bf af57 	bge.w	800a61c <_svfiprintf_r+0x2c8>
 800a76e:	425b      	negs	r3, r3
 800a770:	222d      	movs	r2, #45	; 0x2d
 800a772:	1c19      	adds	r1, r3, #0
 800a774:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 800a778:	bf18      	it	ne
 800a77a:	2101      	movne	r1, #1
 800a77c:	2201      	movs	r2, #1
 800a77e:	e6a8      	b.n	800a4d2 <_svfiprintf_r+0x17e>
 800a780:	4638      	mov	r0, r7
 800a782:	2100      	movs	r1, #0
 800a784:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800a788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a78c:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a790:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a794:	2e09      	cmp	r6, #9
 800a796:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 800a79a:	4607      	mov	r7, r0
 800a79c:	d9f2      	bls.n	800a784 <_svfiprintf_r+0x430>
 800a79e:	9106      	str	r1, [sp, #24]
 800a7a0:	e623      	b.n	800a3ea <_svfiprintf_r+0x96>
 800a7a2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800a7a6:	e61e      	b.n	800a3e6 <_svfiprintf_r+0x92>
 800a7a8:	232b      	movs	r3, #43	; 0x2b
 800a7aa:	e61c      	b.n	800a3e6 <_svfiprintf_r+0x92>
 800a7ac:	f817 2b01 	ldrb.w	r2, [r7], #1
 800a7b0:	2a2a      	cmp	r2, #42	; 0x2a
 800a7b2:	f000 81ae 	beq.w	800ab12 <_svfiprintf_r+0x7be>
 800a7b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a7ba:	2500      	movs	r5, #0
 800a7bc:	2909      	cmp	r1, #9
 800a7be:	f63f ae14 	bhi.w	800a3ea <_svfiprintf_r+0x96>
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	2500      	movs	r5, #0
 800a7c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7ca:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800a7ce:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 800a7d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a7d6:	2909      	cmp	r1, #9
 800a7d8:	4607      	mov	r7, r0
 800a7da:	d9f4      	bls.n	800a7c6 <_svfiprintf_r+0x472>
 800a7dc:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800a7e0:	e603      	b.n	800a3ea <_svfiprintf_r+0x96>
 800a7e2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a7e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800a7e6:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
 800a7ea:	b161      	cbz	r1, 800a806 <_svfiprintf_r+0x4b2>
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
 800a7f2:	3201      	adds	r2, #1
 800a7f4:	6021      	str	r1, [r4, #0]
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	2b07      	cmp	r3, #7
 800a7fa:	6061      	str	r1, [r4, #4]
 800a7fc:	922a      	str	r2, [sp, #168]	; 0xa8
 800a7fe:	9329      	str	r3, [sp, #164]	; 0xa4
 800a800:	f300 811e 	bgt.w	800aa40 <_svfiprintf_r+0x6ec>
 800a804:	3408      	adds	r4, #8
 800a806:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a808:	b159      	cbz	r1, 800a822 <_svfiprintf_r+0x4ce>
 800a80a:	3301      	adds	r3, #1
 800a80c:	a92b      	add	r1, sp, #172	; 0xac
 800a80e:	3202      	adds	r2, #2
 800a810:	6021      	str	r1, [r4, #0]
 800a812:	2102      	movs	r1, #2
 800a814:	2b07      	cmp	r3, #7
 800a816:	6061      	str	r1, [r4, #4]
 800a818:	922a      	str	r2, [sp, #168]	; 0xa8
 800a81a:	9329      	str	r3, [sp, #164]	; 0xa4
 800a81c:	f300 811b 	bgt.w	800aa56 <_svfiprintf_r+0x702>
 800a820:	3408      	adds	r4, #8
 800a822:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a824:	2880      	cmp	r0, #128	; 0x80
 800a826:	f000 80ae 	beq.w	800a986 <_svfiprintf_r+0x632>
 800a82a:	9808      	ldr	r0, [sp, #32]
 800a82c:	9903      	ldr	r1, [sp, #12]
 800a82e:	1a45      	subs	r5, r0, r1
 800a830:	2d00      	cmp	r5, #0
 800a832:	dd33      	ble.n	800a89c <_svfiprintf_r+0x548>
 800a834:	2d10      	cmp	r5, #16
 800a836:	4e06      	ldr	r6, [pc, #24]	; (800a850 <_svfiprintf_r+0x4fc>)
 800a838:	dd26      	ble.n	800a888 <_svfiprintf_r+0x534>
 800a83a:	4621      	mov	r1, r4
 800a83c:	f04f 0910 	mov.w	r9, #16
 800a840:	9c07      	ldr	r4, [sp, #28]
 800a842:	e00a      	b.n	800a85a <_svfiprintf_r+0x506>
 800a844:	0800be24 	.word	0x0800be24
 800a848:	0800bda0 	.word	0x0800bda0
 800a84c:	0800be10 	.word	0x0800be10
 800a850:	0800bdb0 	.word	0x0800bdb0
 800a854:	3d10      	subs	r5, #16
 800a856:	2d10      	cmp	r5, #16
 800a858:	dd15      	ble.n	800a886 <_svfiprintf_r+0x532>
 800a85a:	3301      	adds	r3, #1
 800a85c:	3210      	adds	r2, #16
 800a85e:	e881 0240 	stmia.w	r1, {r6, r9}
 800a862:	3108      	adds	r1, #8
 800a864:	2b07      	cmp	r3, #7
 800a866:	922a      	str	r2, [sp, #168]	; 0xa8
 800a868:	9329      	str	r3, [sp, #164]	; 0xa4
 800a86a:	ddf3      	ble.n	800a854 <_svfiprintf_r+0x500>
 800a86c:	4620      	mov	r0, r4
 800a86e:	4651      	mov	r1, sl
 800a870:	4642      	mov	r2, r8
 800a872:	f7ff fcef 	bl	800a254 <__ssprint_r>
 800a876:	2800      	cmp	r0, #0
 800a878:	d178      	bne.n	800a96c <_svfiprintf_r+0x618>
 800a87a:	3d10      	subs	r5, #16
 800a87c:	2d10      	cmp	r5, #16
 800a87e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a880:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800a882:	a90e      	add	r1, sp, #56	; 0x38
 800a884:	dce9      	bgt.n	800a85a <_svfiprintf_r+0x506>
 800a886:	460c      	mov	r4, r1
 800a888:	3301      	adds	r3, #1
 800a88a:	1952      	adds	r2, r2, r5
 800a88c:	2b07      	cmp	r3, #7
 800a88e:	6026      	str	r6, [r4, #0]
 800a890:	6065      	str	r5, [r4, #4]
 800a892:	922a      	str	r2, [sp, #168]	; 0xa8
 800a894:	9329      	str	r3, [sp, #164]	; 0xa4
 800a896:	f300 80c8 	bgt.w	800aa2a <_svfiprintf_r+0x6d6>
 800a89a:	3408      	adds	r4, #8
 800a89c:	9903      	ldr	r1, [sp, #12]
 800a89e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	1852      	adds	r2, r2, r1
 800a8a4:	2b07      	cmp	r3, #7
 800a8a6:	e884 0003 	stmia.w	r4, {r0, r1}
 800a8aa:	922a      	str	r2, [sp, #168]	; 0xa8
 800a8ac:	9329      	str	r3, [sp, #164]	; 0xa4
 800a8ae:	bfd8      	it	le
 800a8b0:	f104 0108 	addle.w	r1, r4, #8
 800a8b4:	f300 809a 	bgt.w	800a9ec <_svfiprintf_r+0x698>
 800a8b8:	f01b 0f04 	tst.w	fp, #4
 800a8bc:	d02e      	beq.n	800a91c <_svfiprintf_r+0x5c8>
 800a8be:	9b06      	ldr	r3, [sp, #24]
 800a8c0:	9802      	ldr	r0, [sp, #8]
 800a8c2:	1a1d      	subs	r5, r3, r0
 800a8c4:	2d00      	cmp	r5, #0
 800a8c6:	dd29      	ble.n	800a91c <_svfiprintf_r+0x5c8>
 800a8c8:	2d10      	cmp	r5, #16
 800a8ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800a8cc:	4e97      	ldr	r6, [pc, #604]	; (800ab2c <_svfiprintf_r+0x7d8>)
 800a8ce:	dd1c      	ble.n	800a90a <_svfiprintf_r+0x5b6>
 800a8d0:	2410      	movs	r4, #16
 800a8d2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800a8d6:	e002      	b.n	800a8de <_svfiprintf_r+0x58a>
 800a8d8:	3d10      	subs	r5, #16
 800a8da:	2d10      	cmp	r5, #16
 800a8dc:	dd15      	ble.n	800a90a <_svfiprintf_r+0x5b6>
 800a8de:	3301      	adds	r3, #1
 800a8e0:	3210      	adds	r2, #16
 800a8e2:	600e      	str	r6, [r1, #0]
 800a8e4:	604c      	str	r4, [r1, #4]
 800a8e6:	3108      	adds	r1, #8
 800a8e8:	2b07      	cmp	r3, #7
 800a8ea:	922a      	str	r2, [sp, #168]	; 0xa8
 800a8ec:	9329      	str	r3, [sp, #164]	; 0xa4
 800a8ee:	ddf3      	ble.n	800a8d8 <_svfiprintf_r+0x584>
 800a8f0:	4648      	mov	r0, r9
 800a8f2:	4651      	mov	r1, sl
 800a8f4:	4642      	mov	r2, r8
 800a8f6:	f7ff fcad 	bl	800a254 <__ssprint_r>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d136      	bne.n	800a96c <_svfiprintf_r+0x618>
 800a8fe:	3d10      	subs	r5, #16
 800a900:	2d10      	cmp	r5, #16
 800a902:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a904:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800a906:	a90e      	add	r1, sp, #56	; 0x38
 800a908:	dce9      	bgt.n	800a8de <_svfiprintf_r+0x58a>
 800a90a:	3301      	adds	r3, #1
 800a90c:	18aa      	adds	r2, r5, r2
 800a90e:	2b07      	cmp	r3, #7
 800a910:	600e      	str	r6, [r1, #0]
 800a912:	604d      	str	r5, [r1, #4]
 800a914:	922a      	str	r2, [sp, #168]	; 0xa8
 800a916:	9329      	str	r3, [sp, #164]	; 0xa4
 800a918:	f300 810c 	bgt.w	800ab34 <_svfiprintf_r+0x7e0>
 800a91c:	9b04      	ldr	r3, [sp, #16]
 800a91e:	9902      	ldr	r1, [sp, #8]
 800a920:	9806      	ldr	r0, [sp, #24]
 800a922:	4281      	cmp	r1, r0
 800a924:	bfac      	ite	ge
 800a926:	185b      	addge	r3, r3, r1
 800a928:	181b      	addlt	r3, r3, r0
 800a92a:	9304      	str	r3, [sp, #16]
 800a92c:	2a00      	cmp	r2, #0
 800a92e:	d167      	bne.n	800aa00 <_svfiprintf_r+0x6ac>
 800a930:	2300      	movs	r3, #0
 800a932:	9329      	str	r3, [sp, #164]	; 0xa4
 800a934:	ac0e      	add	r4, sp, #56	; 0x38
 800a936:	e52c      	b.n	800a392 <_svfiprintf_r+0x3e>
 800a938:	2a00      	cmp	r2, #0
 800a93a:	d169      	bne.n	800aa10 <_svfiprintf_r+0x6bc>
 800a93c:	f01b 0f01 	tst.w	fp, #1
 800a940:	bf04      	itt	eq
 800a942:	9203      	streq	r2, [sp, #12]
 800a944:	f8cd 8024 	streq.w	r8, [sp, #36]	; 0x24
 800a948:	f43f ade7 	beq.w	800a51a <_svfiprintf_r+0x1c6>
 800a94c:	2330      	movs	r3, #48	; 0x30
 800a94e:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 800a952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a954:	9303      	str	r3, [sp, #12]
 800a956:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 800a95a:	9309      	str	r3, [sp, #36]	; 0x24
 800a95c:	e5dd      	b.n	800a51a <_svfiprintf_r+0x1c6>
 800a95e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800a960:	b123      	cbz	r3, 800a96c <_svfiprintf_r+0x618>
 800a962:	9807      	ldr	r0, [sp, #28]
 800a964:	4651      	mov	r1, sl
 800a966:	aa28      	add	r2, sp, #160	; 0xa0
 800a968:	f7ff fc74 	bl	800a254 <__ssprint_r>
 800a96c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800a970:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a974:	9b04      	ldr	r3, [sp, #16]
 800a976:	bf18      	it	ne
 800a978:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800a97c:	9304      	str	r3, [sp, #16]
 800a97e:	9804      	ldr	r0, [sp, #16]
 800a980:	b02d      	add	sp, #180	; 0xb4
 800a982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a986:	9906      	ldr	r1, [sp, #24]
 800a988:	9802      	ldr	r0, [sp, #8]
 800a98a:	1a0d      	subs	r5, r1, r0
 800a98c:	2d00      	cmp	r5, #0
 800a98e:	f77f af4c 	ble.w	800a82a <_svfiprintf_r+0x4d6>
 800a992:	2d10      	cmp	r5, #16
 800a994:	4e66      	ldr	r6, [pc, #408]	; (800ab30 <_svfiprintf_r+0x7dc>)
 800a996:	dd1e      	ble.n	800a9d6 <_svfiprintf_r+0x682>
 800a998:	4621      	mov	r1, r4
 800a99a:	f04f 0910 	mov.w	r9, #16
 800a99e:	9c07      	ldr	r4, [sp, #28]
 800a9a0:	e002      	b.n	800a9a8 <_svfiprintf_r+0x654>
 800a9a2:	3d10      	subs	r5, #16
 800a9a4:	2d10      	cmp	r5, #16
 800a9a6:	dd15      	ble.n	800a9d4 <_svfiprintf_r+0x680>
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	3210      	adds	r2, #16
 800a9ac:	e881 0240 	stmia.w	r1, {r6, r9}
 800a9b0:	3108      	adds	r1, #8
 800a9b2:	2b07      	cmp	r3, #7
 800a9b4:	922a      	str	r2, [sp, #168]	; 0xa8
 800a9b6:	9329      	str	r3, [sp, #164]	; 0xa4
 800a9b8:	ddf3      	ble.n	800a9a2 <_svfiprintf_r+0x64e>
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	4651      	mov	r1, sl
 800a9be:	4642      	mov	r2, r8
 800a9c0:	f7ff fc48 	bl	800a254 <__ssprint_r>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d1d1      	bne.n	800a96c <_svfiprintf_r+0x618>
 800a9c8:	3d10      	subs	r5, #16
 800a9ca:	2d10      	cmp	r5, #16
 800a9cc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a9ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800a9d0:	a90e      	add	r1, sp, #56	; 0x38
 800a9d2:	dce9      	bgt.n	800a9a8 <_svfiprintf_r+0x654>
 800a9d4:	460c      	mov	r4, r1
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	1952      	adds	r2, r2, r5
 800a9da:	2b07      	cmp	r3, #7
 800a9dc:	6026      	str	r6, [r4, #0]
 800a9de:	6065      	str	r5, [r4, #4]
 800a9e0:	922a      	str	r2, [sp, #168]	; 0xa8
 800a9e2:	9329      	str	r3, [sp, #164]	; 0xa4
 800a9e4:	f300 80d2 	bgt.w	800ab8c <_svfiprintf_r+0x838>
 800a9e8:	3408      	adds	r4, #8
 800a9ea:	e71e      	b.n	800a82a <_svfiprintf_r+0x4d6>
 800a9ec:	9807      	ldr	r0, [sp, #28]
 800a9ee:	4651      	mov	r1, sl
 800a9f0:	4642      	mov	r2, r8
 800a9f2:	f7ff fc2f 	bl	800a254 <__ssprint_r>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d1b8      	bne.n	800a96c <_svfiprintf_r+0x618>
 800a9fa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a9fc:	a90e      	add	r1, sp, #56	; 0x38
 800a9fe:	e75b      	b.n	800a8b8 <_svfiprintf_r+0x564>
 800aa00:	9807      	ldr	r0, [sp, #28]
 800aa02:	4651      	mov	r1, sl
 800aa04:	4642      	mov	r2, r8
 800aa06:	f7ff fc25 	bl	800a254 <__ssprint_r>
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	d090      	beq.n	800a930 <_svfiprintf_r+0x5dc>
 800aa0e:	e7ad      	b.n	800a96c <_svfiprintf_r+0x618>
 800aa10:	9103      	str	r1, [sp, #12]
 800aa12:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800aa16:	e580      	b.n	800a51a <_svfiprintf_r+0x1c6>
 800aa18:	9807      	ldr	r0, [sp, #28]
 800aa1a:	4651      	mov	r1, sl
 800aa1c:	4642      	mov	r2, r8
 800aa1e:	f7ff fc19 	bl	800a254 <__ssprint_r>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d1a2      	bne.n	800a96c <_svfiprintf_r+0x618>
 800aa26:	ac0e      	add	r4, sp, #56	; 0x38
 800aa28:	e4cd      	b.n	800a3c6 <_svfiprintf_r+0x72>
 800aa2a:	9807      	ldr	r0, [sp, #28]
 800aa2c:	4651      	mov	r1, sl
 800aa2e:	4642      	mov	r2, r8
 800aa30:	f7ff fc10 	bl	800a254 <__ssprint_r>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d199      	bne.n	800a96c <_svfiprintf_r+0x618>
 800aa38:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800aa3a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800aa3c:	ac0e      	add	r4, sp, #56	; 0x38
 800aa3e:	e72d      	b.n	800a89c <_svfiprintf_r+0x548>
 800aa40:	9807      	ldr	r0, [sp, #28]
 800aa42:	4651      	mov	r1, sl
 800aa44:	4642      	mov	r2, r8
 800aa46:	f7ff fc05 	bl	800a254 <__ssprint_r>
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d18e      	bne.n	800a96c <_svfiprintf_r+0x618>
 800aa4e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800aa50:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800aa52:	ac0e      	add	r4, sp, #56	; 0x38
 800aa54:	e6d7      	b.n	800a806 <_svfiprintf_r+0x4b2>
 800aa56:	9807      	ldr	r0, [sp, #28]
 800aa58:	4651      	mov	r1, sl
 800aa5a:	4642      	mov	r2, r8
 800aa5c:	f7ff fbfa 	bl	800a254 <__ssprint_r>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d183      	bne.n	800a96c <_svfiprintf_r+0x618>
 800aa64:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800aa66:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800aa68:	ac0e      	add	r4, sp, #56	; 0x38
 800aa6a:	e6da      	b.n	800a822 <_svfiprintf_r+0x4ce>
 800aa6c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aa6e:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 800aa72:	f003 000f 	and.w	r0, r3, #15
 800aa76:	4611      	mov	r1, r2
 800aa78:	5c30      	ldrb	r0, [r6, r0]
 800aa7a:	3a01      	subs	r2, #1
 800aa7c:	091b      	lsrs	r3, r3, #4
 800aa7e:	7008      	strb	r0, [r1, #0]
 800aa80:	d1f7      	bne.n	800aa72 <_svfiprintf_r+0x71e>
 800aa82:	ebc1 0308 	rsb	r3, r1, r8
 800aa86:	9109      	str	r1, [sp, #36]	; 0x24
 800aa88:	9303      	str	r3, [sp, #12]
 800aa8a:	e546      	b.n	800a51a <_svfiprintf_r+0x1c6>
 800aa8c:	2b09      	cmp	r3, #9
 800aa8e:	bf82      	ittt	hi
 800aa90:	f64c 46cd 	movwhi	r6, #52429	; 0xcccd
 800aa94:	f10d 019f 	addhi.w	r1, sp, #159	; 0x9f
 800aa98:	f6cc 46cc 	movthi	r6, #52428	; 0xcccc
 800aa9c:	d801      	bhi.n	800aaa2 <_svfiprintf_r+0x74e>
 800aa9e:	3330      	adds	r3, #48	; 0x30
 800aaa0:	e755      	b.n	800a94e <_svfiprintf_r+0x5fa>
 800aaa2:	fba6 0203 	umull	r0, r2, r6, r3
 800aaa6:	08d2      	lsrs	r2, r2, #3
 800aaa8:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 800aaac:	eba3 0c4c 	sub.w	ip, r3, ip, lsl #1
 800aab0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800aab4:	4608      	mov	r0, r1
 800aab6:	f881 c000 	strb.w	ip, [r1]
 800aaba:	4613      	mov	r3, r2
 800aabc:	3901      	subs	r1, #1
 800aabe:	2a00      	cmp	r2, #0
 800aac0:	d1ef      	bne.n	800aaa2 <_svfiprintf_r+0x74e>
 800aac2:	9009      	str	r0, [sp, #36]	; 0x24
 800aac4:	e526      	b.n	800a514 <_svfiprintf_r+0x1c0>
 800aac6:	9905      	ldr	r1, [sp, #20]
 800aac8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800aacc:	bf14      	ite	ne
 800aace:	880b      	ldrhne	r3, [r1, #0]
 800aad0:	680b      	ldreq	r3, [r1, #0]
 800aad2:	2201      	movs	r2, #1
 800aad4:	9805      	ldr	r0, [sp, #20]
 800aad6:	1c19      	adds	r1, r3, #0
 800aad8:	bf18      	it	ne
 800aada:	2101      	movne	r1, #1
 800aadc:	3004      	adds	r0, #4
 800aade:	9005      	str	r0, [sp, #20]
 800aae0:	e4f4      	b.n	800a4cc <_svfiprintf_r+0x178>
 800aae2:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 800aae6:	bf0b      	itete	eq
 800aae8:	9a05      	ldreq	r2, [sp, #20]
 800aaea:	9905      	ldrne	r1, [sp, #20]
 800aaec:	6813      	ldreq	r3, [r2, #0]
 800aaee:	880b      	ldrhne	r3, [r1, #0]
 800aaf0:	bf08      	it	eq
 800aaf2:	460a      	moveq	r2, r1
 800aaf4:	e7ee      	b.n	800aad4 <_svfiprintf_r+0x780>
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	e4e8      	b.n	800a4cc <_svfiprintf_r+0x178>
 800aafa:	9807      	ldr	r0, [sp, #28]
 800aafc:	4651      	mov	r1, sl
 800aafe:	4642      	mov	r2, r8
 800ab00:	f7ff fba8 	bl	800a254 <__ssprint_r>
 800ab04:	2800      	cmp	r0, #0
 800ab06:	f47f af31 	bne.w	800a96c <_svfiprintf_r+0x618>
 800ab0a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800ab0c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ab0e:	ac0e      	add	r4, sp, #56	; 0x38
 800ab10:	e669      	b.n	800a7e6 <_svfiprintf_r+0x492>
 800ab12:	9a05      	ldr	r2, [sp, #20]
 800ab14:	6815      	ldr	r5, [r2, #0]
 800ab16:	3204      	adds	r2, #4
 800ab18:	2d00      	cmp	r5, #0
 800ab1a:	bfbc      	itt	lt
 800ab1c:	9205      	strlt	r2, [sp, #20]
 800ab1e:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 800ab22:	f6ff ac60 	blt.w	800a3e6 <_svfiprintf_r+0x92>
 800ab26:	9205      	str	r2, [sp, #20]
 800ab28:	e45d      	b.n	800a3e6 <_svfiprintf_r+0x92>
 800ab2a:	bf00      	nop
 800ab2c:	0800bda0 	.word	0x0800bda0
 800ab30:	0800bdb0 	.word	0x0800bdb0
 800ab34:	9807      	ldr	r0, [sp, #28]
 800ab36:	4651      	mov	r1, sl
 800ab38:	4642      	mov	r2, r8
 800ab3a:	f7ff fb8b 	bl	800a254 <__ssprint_r>
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	f47f af14 	bne.w	800a96c <_svfiprintf_r+0x618>
 800ab44:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800ab46:	e6e9      	b.n	800a91c <_svfiprintf_r+0x5c8>
 800ab48:	2930      	cmp	r1, #48	; 0x30
 800ab4a:	d004      	beq.n	800ab56 <_svfiprintf_r+0x802>
 800ab4c:	1e93      	subs	r3, r2, #2
 800ab4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab50:	2330      	movs	r3, #48	; 0x30
 800ab52:	f802 3c02 	strb.w	r3, [r2, #-2]
 800ab56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab58:	ebc3 0308 	rsb	r3, r3, r8
 800ab5c:	9303      	str	r3, [sp, #12]
 800ab5e:	e4dc      	b.n	800a51a <_svfiprintf_r+0x1c6>
 800ab60:	9805      	ldr	r0, [sp, #20]
 800ab62:	9904      	ldr	r1, [sp, #16]
 800ab64:	6803      	ldr	r3, [r0, #0]
 800ab66:	3004      	adds	r0, #4
 800ab68:	9005      	str	r0, [sp, #20]
 800ab6a:	6019      	str	r1, [r3, #0]
 800ab6c:	e411      	b.n	800a392 <_svfiprintf_r+0x3e>
 800ab6e:	9a05      	ldr	r2, [sp, #20]
 800ab70:	6813      	ldr	r3, [r2, #0]
 800ab72:	3204      	adds	r2, #4
 800ab74:	9205      	str	r2, [sp, #20]
 800ab76:	e54e      	b.n	800a616 <_svfiprintf_r+0x2c2>
 800ab78:	9905      	ldr	r1, [sp, #20]
 800ab7a:	880b      	ldrh	r3, [r1, #0]
 800ab7c:	3104      	adds	r1, #4
 800ab7e:	9105      	str	r1, [sp, #20]
 800ab80:	e52b      	b.n	800a5da <_svfiprintf_r+0x286>
 800ab82:	f7ff fb37 	bl	800a1f4 <strlen>
 800ab86:	9608      	str	r6, [sp, #32]
 800ab88:	9003      	str	r0, [sp, #12]
 800ab8a:	e4c7      	b.n	800a51c <_svfiprintf_r+0x1c8>
 800ab8c:	9807      	ldr	r0, [sp, #28]
 800ab8e:	4651      	mov	r1, sl
 800ab90:	4642      	mov	r2, r8
 800ab92:	f7ff fb5f 	bl	800a254 <__ssprint_r>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	f47f aee8 	bne.w	800a96c <_svfiprintf_r+0x618>
 800ab9c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800ab9e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800aba0:	ac0e      	add	r4, sp, #56	; 0x38
 800aba2:	e642      	b.n	800a82a <_svfiprintf_r+0x4d6>
 800aba4:	9905      	ldr	r1, [sp, #20]
 800aba6:	9a04      	ldr	r2, [sp, #16]
 800aba8:	680b      	ldr	r3, [r1, #0]
 800abaa:	3104      	adds	r1, #4
 800abac:	9105      	str	r1, [sp, #20]
 800abae:	601a      	str	r2, [r3, #0]
 800abb0:	f7ff bbef 	b.w	800a392 <_svfiprintf_r+0x3e>
 800abb4:	2140      	movs	r1, #64	; 0x40
 800abb6:	9200      	str	r2, [sp, #0]
 800abb8:	f7fe fa56 	bl	8009068 <_malloc_r>
 800abbc:	9a00      	ldr	r2, [sp, #0]
 800abbe:	f8ca 0000 	str.w	r0, [sl]
 800abc2:	f8ca 0010 	str.w	r0, [sl, #16]
 800abc6:	b188      	cbz	r0, 800abec <_svfiprintf_r+0x898>
 800abc8:	2340      	movs	r3, #64	; 0x40
 800abca:	f8ca 3014 	str.w	r3, [sl, #20]
 800abce:	f7ff bbcf 	b.w	800a370 <_svfiprintf_r+0x1c>
 800abd2:	2d06      	cmp	r5, #6
 800abd4:	bf28      	it	cs
 800abd6:	2506      	movcs	r5, #6
 800abd8:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800abdc:	9302      	str	r3, [sp, #8]
 800abde:	4b07      	ldr	r3, [pc, #28]	; (800abfc <_svfiprintf_r+0x8a8>)
 800abe0:	9503      	str	r5, [sp, #12]
 800abe2:	9309      	str	r3, [sp, #36]	; 0x24
 800abe4:	e52e      	b.n	800a644 <_svfiprintf_r+0x2f0>
 800abe6:	9503      	str	r5, [sp, #12]
 800abe8:	9008      	str	r0, [sp, #32]
 800abea:	e497      	b.n	800a51c <_svfiprintf_r+0x1c8>
 800abec:	9807      	ldr	r0, [sp, #28]
 800abee:	230c      	movs	r3, #12
 800abf0:	6003      	str	r3, [r0, #0]
 800abf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abf6:	9304      	str	r3, [sp, #16]
 800abf8:	e6c1      	b.n	800a97e <_svfiprintf_r+0x62a>
 800abfa:	bf00      	nop
 800abfc:	0800be38 	.word	0x0800be38

0800ac00 <_calloc_r>:
 800ac00:	b510      	push	{r4, lr}
 800ac02:	fb01 f102 	mul.w	r1, r1, r2
 800ac06:	f7fe fa2f 	bl	8009068 <_malloc_r>
 800ac0a:	4604      	mov	r4, r0
 800ac0c:	b300      	cbz	r0, 800ac50 <_calloc_r+0x50>
 800ac0e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ac12:	f022 0203 	bic.w	r2, r2, #3
 800ac16:	3a04      	subs	r2, #4
 800ac18:	2a24      	cmp	r2, #36	; 0x24
 800ac1a:	d81b      	bhi.n	800ac54 <_calloc_r+0x54>
 800ac1c:	2a13      	cmp	r2, #19
 800ac1e:	bf98      	it	ls
 800ac20:	4602      	movls	r2, r0
 800ac22:	d911      	bls.n	800ac48 <_calloc_r+0x48>
 800ac24:	2300      	movs	r3, #0
 800ac26:	2a1b      	cmp	r2, #27
 800ac28:	6003      	str	r3, [r0, #0]
 800ac2a:	6043      	str	r3, [r0, #4]
 800ac2c:	bf98      	it	ls
 800ac2e:	f100 0208 	addls.w	r2, r0, #8
 800ac32:	d909      	bls.n	800ac48 <_calloc_r+0x48>
 800ac34:	2a24      	cmp	r2, #36	; 0x24
 800ac36:	6083      	str	r3, [r0, #8]
 800ac38:	60c3      	str	r3, [r0, #12]
 800ac3a:	bf11      	iteee	ne
 800ac3c:	f100 0210 	addne.w	r2, r0, #16
 800ac40:	6103      	streq	r3, [r0, #16]
 800ac42:	6143      	streq	r3, [r0, #20]
 800ac44:	f100 0218 	addeq.w	r2, r0, #24
 800ac48:	2300      	movs	r3, #0
 800ac4a:	6013      	str	r3, [r2, #0]
 800ac4c:	6053      	str	r3, [r2, #4]
 800ac4e:	6093      	str	r3, [r2, #8]
 800ac50:	4620      	mov	r0, r4
 800ac52:	bd10      	pop	{r4, pc}
 800ac54:	2100      	movs	r1, #0
 800ac56:	f000 f85b 	bl	800ad10 <memset>
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	bd10      	pop	{r4, pc}
 800ac5e:	bf00      	nop

0800ac60 <memmove>:
 800ac60:	4288      	cmp	r0, r1
 800ac62:	b4f0      	push	{r4, r5, r6, r7}
 800ac64:	d912      	bls.n	800ac8c <memmove+0x2c>
 800ac66:	188d      	adds	r5, r1, r2
 800ac68:	42a8      	cmp	r0, r5
 800ac6a:	d20f      	bcs.n	800ac8c <memmove+0x2c>
 800ac6c:	b162      	cbz	r2, 800ac88 <memmove+0x28>
 800ac6e:	4251      	negs	r1, r2
 800ac70:	4613      	mov	r3, r2
 800ac72:	1882      	adds	r2, r0, r2
 800ac74:	186d      	adds	r5, r5, r1
 800ac76:	1852      	adds	r2, r2, r1
 800ac78:	18ec      	adds	r4, r5, r3
 800ac7a:	18d1      	adds	r1, r2, r3
 800ac7c:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	f801 4c01 	strb.w	r4, [r1, #-1]
 800ac86:	d1f7      	bne.n	800ac78 <memmove+0x18>
 800ac88:	bcf0      	pop	{r4, r5, r6, r7}
 800ac8a:	4770      	bx	lr
 800ac8c:	2a0f      	cmp	r2, #15
 800ac8e:	bf98      	it	ls
 800ac90:	4603      	movls	r3, r0
 800ac92:	d931      	bls.n	800acf8 <memmove+0x98>
 800ac94:	ea41 0300 	orr.w	r3, r1, r0
 800ac98:	079b      	lsls	r3, r3, #30
 800ac9a:	d137      	bne.n	800ad0c <memmove+0xac>
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	4603      	mov	r3, r0
 800aca0:	4615      	mov	r5, r2
 800aca2:	6826      	ldr	r6, [r4, #0]
 800aca4:	601e      	str	r6, [r3, #0]
 800aca6:	6866      	ldr	r6, [r4, #4]
 800aca8:	605e      	str	r6, [r3, #4]
 800acaa:	68a6      	ldr	r6, [r4, #8]
 800acac:	609e      	str	r6, [r3, #8]
 800acae:	68e6      	ldr	r6, [r4, #12]
 800acb0:	3d10      	subs	r5, #16
 800acb2:	60de      	str	r6, [r3, #12]
 800acb4:	3410      	adds	r4, #16
 800acb6:	3310      	adds	r3, #16
 800acb8:	2d0f      	cmp	r5, #15
 800acba:	d8f2      	bhi.n	800aca2 <memmove+0x42>
 800acbc:	f1a2 0410 	sub.w	r4, r2, #16
 800acc0:	f024 040f 	bic.w	r4, r4, #15
 800acc4:	f002 020f 	and.w	r2, r2, #15
 800acc8:	3410      	adds	r4, #16
 800acca:	2a03      	cmp	r2, #3
 800accc:	eb00 0304 	add.w	r3, r0, r4
 800acd0:	4421      	add	r1, r4
 800acd2:	d911      	bls.n	800acf8 <memmove+0x98>
 800acd4:	1f0e      	subs	r6, r1, #4
 800acd6:	461d      	mov	r5, r3
 800acd8:	4614      	mov	r4, r2
 800acda:	f856 7f04 	ldr.w	r7, [r6, #4]!
 800acde:	3c04      	subs	r4, #4
 800ace0:	2c03      	cmp	r4, #3
 800ace2:	f845 7b04 	str.w	r7, [r5], #4
 800ace6:	d8f8      	bhi.n	800acda <memmove+0x7a>
 800ace8:	1f14      	subs	r4, r2, #4
 800acea:	f024 0403 	bic.w	r4, r4, #3
 800acee:	3404      	adds	r4, #4
 800acf0:	f002 0203 	and.w	r2, r2, #3
 800acf4:	1909      	adds	r1, r1, r4
 800acf6:	191b      	adds	r3, r3, r4
 800acf8:	2a00      	cmp	r2, #0
 800acfa:	d0c5      	beq.n	800ac88 <memmove+0x28>
 800acfc:	3901      	subs	r1, #1
 800acfe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad02:	3a01      	subs	r2, #1
 800ad04:	f803 4b01 	strb.w	r4, [r3], #1
 800ad08:	d1f9      	bne.n	800acfe <memmove+0x9e>
 800ad0a:	e7bd      	b.n	800ac88 <memmove+0x28>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	e7f5      	b.n	800acfc <memmove+0x9c>

0800ad10 <memset>:
 800ad10:	f010 0f03 	tst.w	r0, #3
 800ad14:	b470      	push	{r4, r5, r6}
 800ad16:	4603      	mov	r3, r0
 800ad18:	d042      	beq.n	800ada0 <memset+0x90>
 800ad1a:	2a00      	cmp	r2, #0
 800ad1c:	d03e      	beq.n	800ad9c <memset+0x8c>
 800ad1e:	3a01      	subs	r2, #1
 800ad20:	b2cd      	uxtb	r5, r1
 800ad22:	e003      	b.n	800ad2c <memset+0x1c>
 800ad24:	1e54      	subs	r4, r2, #1
 800ad26:	2a00      	cmp	r2, #0
 800ad28:	d038      	beq.n	800ad9c <memset+0x8c>
 800ad2a:	4622      	mov	r2, r4
 800ad2c:	f803 5b01 	strb.w	r5, [r3], #1
 800ad30:	f013 0f03 	tst.w	r3, #3
 800ad34:	461c      	mov	r4, r3
 800ad36:	d1f5      	bne.n	800ad24 <memset+0x14>
 800ad38:	2a03      	cmp	r2, #3
 800ad3a:	d929      	bls.n	800ad90 <memset+0x80>
 800ad3c:	b2cd      	uxtb	r5, r1
 800ad3e:	2a0f      	cmp	r2, #15
 800ad40:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800ad44:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800ad48:	bf84      	itt	hi
 800ad4a:	4623      	movhi	r3, r4
 800ad4c:	4616      	movhi	r6, r2
 800ad4e:	d911      	bls.n	800ad74 <memset+0x64>
 800ad50:	3e10      	subs	r6, #16
 800ad52:	601d      	str	r5, [r3, #0]
 800ad54:	605d      	str	r5, [r3, #4]
 800ad56:	609d      	str	r5, [r3, #8]
 800ad58:	60dd      	str	r5, [r3, #12]
 800ad5a:	3310      	adds	r3, #16
 800ad5c:	2e0f      	cmp	r6, #15
 800ad5e:	d8f7      	bhi.n	800ad50 <memset+0x40>
 800ad60:	f1a2 0310 	sub.w	r3, r2, #16
 800ad64:	f023 030f 	bic.w	r3, r3, #15
 800ad68:	f002 020f 	and.w	r2, r2, #15
 800ad6c:	3310      	adds	r3, #16
 800ad6e:	2a03      	cmp	r2, #3
 800ad70:	441c      	add	r4, r3
 800ad72:	d90d      	bls.n	800ad90 <memset+0x80>
 800ad74:	4626      	mov	r6, r4
 800ad76:	4613      	mov	r3, r2
 800ad78:	3b04      	subs	r3, #4
 800ad7a:	2b03      	cmp	r3, #3
 800ad7c:	f846 5b04 	str.w	r5, [r6], #4
 800ad80:	d8fa      	bhi.n	800ad78 <memset+0x68>
 800ad82:	1f13      	subs	r3, r2, #4
 800ad84:	f023 0303 	bic.w	r3, r3, #3
 800ad88:	3304      	adds	r3, #4
 800ad8a:	f002 0203 	and.w	r2, r2, #3
 800ad8e:	18e4      	adds	r4, r4, r3
 800ad90:	b2c9      	uxtb	r1, r1
 800ad92:	b11a      	cbz	r2, 800ad9c <memset+0x8c>
 800ad94:	3a01      	subs	r2, #1
 800ad96:	f804 1b01 	strb.w	r1, [r4], #1
 800ad9a:	d1fb      	bne.n	800ad94 <memset+0x84>
 800ad9c:	bc70      	pop	{r4, r5, r6}
 800ad9e:	4770      	bx	lr
 800ada0:	4604      	mov	r4, r0
 800ada2:	e7c9      	b.n	800ad38 <memset+0x28>

0800ada4 <_realloc_r>:
 800ada4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada8:	460c      	mov	r4, r1
 800adaa:	b083      	sub	sp, #12
 800adac:	4607      	mov	r7, r0
 800adae:	4690      	mov	r8, r2
 800adb0:	2900      	cmp	r1, #0
 800adb2:	f000 80fe 	beq.w	800afb2 <_realloc_r+0x20e>
 800adb6:	f108 050b 	add.w	r5, r8, #11
 800adba:	f7fe fc8b 	bl	80096d4 <__malloc_lock>
 800adbe:	2d16      	cmp	r5, #22
 800adc0:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800adc4:	d87d      	bhi.n	800aec2 <_realloc_r+0x11e>
 800adc6:	2210      	movs	r2, #16
 800adc8:	2600      	movs	r6, #0
 800adca:	4615      	mov	r5, r2
 800adcc:	4545      	cmp	r5, r8
 800adce:	bf38      	it	cc
 800add0:	f046 0601 	orrcc.w	r6, r6, #1
 800add4:	2e00      	cmp	r6, #0
 800add6:	f040 80f2 	bne.w	800afbe <_realloc_r+0x21a>
 800adda:	f021 0a03 	bic.w	sl, r1, #3
 800adde:	4592      	cmp	sl, r2
 800ade0:	f1a4 0b08 	sub.w	fp, r4, #8
 800ade4:	bfa8      	it	ge
 800ade6:	4656      	movge	r6, sl
 800ade8:	da55      	bge.n	800ae96 <_realloc_r+0xf2>
 800adea:	4ba0      	ldr	r3, [pc, #640]	; (800b06c <_realloc_r+0x2c8>)
 800adec:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800adf0:	eb0b 000a 	add.w	r0, fp, sl
 800adf4:	4584      	cmp	ip, r0
 800adf6:	f000 80e7 	beq.w	800afc8 <_realloc_r+0x224>
 800adfa:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800adfe:	f02e 0901 	bic.w	r9, lr, #1
 800ae02:	4481      	add	r9, r0
 800ae04:	f8d9 9004 	ldr.w	r9, [r9, #4]
 800ae08:	f019 0f01 	tst.w	r9, #1
 800ae0c:	bf1c      	itt	ne
 800ae0e:	46b6      	movne	lr, r6
 800ae10:	4670      	movne	r0, lr
 800ae12:	d05b      	beq.n	800aecc <_realloc_r+0x128>
 800ae14:	07c9      	lsls	r1, r1, #31
 800ae16:	d479      	bmi.n	800af0c <_realloc_r+0x168>
 800ae18:	f854 1c08 	ldr.w	r1, [r4, #-8]
 800ae1c:	ebc1 090b 	rsb	r9, r1, fp
 800ae20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ae24:	f021 0103 	bic.w	r1, r1, #3
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	f000 8097 	beq.w	800af5c <_realloc_r+0x1b8>
 800ae2e:	4560      	cmp	r0, ip
 800ae30:	eb01 0c0a 	add.w	ip, r1, sl
 800ae34:	eb0e 060c 	add.w	r6, lr, ip
 800ae38:	f000 811a 	beq.w	800b070 <_realloc_r+0x2cc>
 800ae3c:	42b2      	cmp	r2, r6
 800ae3e:	f300 808f 	bgt.w	800af60 <_realloc_r+0x1bc>
 800ae42:	68c3      	ldr	r3, [r0, #12]
 800ae44:	6882      	ldr	r2, [r0, #8]
 800ae46:	46c8      	mov	r8, r9
 800ae48:	609a      	str	r2, [r3, #8]
 800ae4a:	60d3      	str	r3, [r2, #12]
 800ae4c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ae50:	f858 1f08 	ldr.w	r1, [r8, #8]!
 800ae54:	f1aa 0204 	sub.w	r2, sl, #4
 800ae58:	2a24      	cmp	r2, #36	; 0x24
 800ae5a:	60cb      	str	r3, [r1, #12]
 800ae5c:	6099      	str	r1, [r3, #8]
 800ae5e:	f200 8144 	bhi.w	800b0ea <_realloc_r+0x346>
 800ae62:	2a13      	cmp	r2, #19
 800ae64:	bf98      	it	ls
 800ae66:	4643      	movls	r3, r8
 800ae68:	d90b      	bls.n	800ae82 <_realloc_r+0xde>
 800ae6a:	6823      	ldr	r3, [r4, #0]
 800ae6c:	f8c9 3008 	str.w	r3, [r9, #8]
 800ae70:	6863      	ldr	r3, [r4, #4]
 800ae72:	2a1b      	cmp	r2, #27
 800ae74:	f8c9 300c 	str.w	r3, [r9, #12]
 800ae78:	f200 8140 	bhi.w	800b0fc <_realloc_r+0x358>
 800ae7c:	f109 0310 	add.w	r3, r9, #16
 800ae80:	3408      	adds	r4, #8
 800ae82:	6822      	ldr	r2, [r4, #0]
 800ae84:	601a      	str	r2, [r3, #0]
 800ae86:	6862      	ldr	r2, [r4, #4]
 800ae88:	605a      	str	r2, [r3, #4]
 800ae8a:	68a2      	ldr	r2, [r4, #8]
 800ae8c:	609a      	str	r2, [r3, #8]
 800ae8e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ae92:	4644      	mov	r4, r8
 800ae94:	46cb      	mov	fp, r9
 800ae96:	1b72      	subs	r2, r6, r5
 800ae98:	2a0f      	cmp	r2, #15
 800ae9a:	d822      	bhi.n	800aee2 <_realloc_r+0x13e>
 800ae9c:	f001 0101 	and.w	r1, r1, #1
 800aea0:	eb0b 0306 	add.w	r3, fp, r6
 800aea4:	430e      	orrs	r6, r1
 800aea6:	f8cb 6004 	str.w	r6, [fp, #4]
 800aeaa:	685a      	ldr	r2, [r3, #4]
 800aeac:	f042 0201 	orr.w	r2, r2, #1
 800aeb0:	605a      	str	r2, [r3, #4]
 800aeb2:	4638      	mov	r0, r7
 800aeb4:	f7fe fc10 	bl	80096d8 <__malloc_unlock>
 800aeb8:	46a0      	mov	r8, r4
 800aeba:	4640      	mov	r0, r8
 800aebc:	b003      	add	sp, #12
 800aebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec2:	f025 0507 	bic.w	r5, r5, #7
 800aec6:	462a      	mov	r2, r5
 800aec8:	0fee      	lsrs	r6, r5, #31
 800aeca:	e77f      	b.n	800adcc <_realloc_r+0x28>
 800aecc:	f02e 0e03 	bic.w	lr, lr, #3
 800aed0:	eb0e 060a 	add.w	r6, lr, sl
 800aed4:	42b2      	cmp	r2, r6
 800aed6:	dc9d      	bgt.n	800ae14 <_realloc_r+0x70>
 800aed8:	68c3      	ldr	r3, [r0, #12]
 800aeda:	6882      	ldr	r2, [r0, #8]
 800aedc:	60d3      	str	r3, [r2, #12]
 800aede:	609a      	str	r2, [r3, #8]
 800aee0:	e7d9      	b.n	800ae96 <_realloc_r+0xf2>
 800aee2:	eb0b 0305 	add.w	r3, fp, r5
 800aee6:	f001 0101 	and.w	r1, r1, #1
 800aeea:	1898      	adds	r0, r3, r2
 800aeec:	430d      	orrs	r5, r1
 800aeee:	f042 0201 	orr.w	r2, r2, #1
 800aef2:	f8cb 5004 	str.w	r5, [fp, #4]
 800aef6:	605a      	str	r2, [r3, #4]
 800aef8:	6842      	ldr	r2, [r0, #4]
 800aefa:	f042 0201 	orr.w	r2, r2, #1
 800aefe:	6042      	str	r2, [r0, #4]
 800af00:	f103 0108 	add.w	r1, r3, #8
 800af04:	4638      	mov	r0, r7
 800af06:	f7fd ffa3 	bl	8008e50 <_free_r>
 800af0a:	e7d2      	b.n	800aeb2 <_realloc_r+0x10e>
 800af0c:	4641      	mov	r1, r8
 800af0e:	4638      	mov	r0, r7
 800af10:	f7fe f8aa 	bl	8009068 <_malloc_r>
 800af14:	4680      	mov	r8, r0
 800af16:	b1e8      	cbz	r0, 800af54 <_realloc_r+0x1b0>
 800af18:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800af1c:	f021 0301 	bic.w	r3, r1, #1
 800af20:	f1a0 0208 	sub.w	r2, r0, #8
 800af24:	445b      	add	r3, fp
 800af26:	429a      	cmp	r2, r3
 800af28:	f000 80d9 	beq.w	800b0de <_realloc_r+0x33a>
 800af2c:	f1aa 0204 	sub.w	r2, sl, #4
 800af30:	2a24      	cmp	r2, #36	; 0x24
 800af32:	f200 8096 	bhi.w	800b062 <_realloc_r+0x2be>
 800af36:	2a13      	cmp	r2, #19
 800af38:	bf9c      	itt	ls
 800af3a:	4603      	movls	r3, r0
 800af3c:	4622      	movls	r2, r4
 800af3e:	d863      	bhi.n	800b008 <_realloc_r+0x264>
 800af40:	6811      	ldr	r1, [r2, #0]
 800af42:	6019      	str	r1, [r3, #0]
 800af44:	6851      	ldr	r1, [r2, #4]
 800af46:	6059      	str	r1, [r3, #4]
 800af48:	6892      	ldr	r2, [r2, #8]
 800af4a:	609a      	str	r2, [r3, #8]
 800af4c:	4638      	mov	r0, r7
 800af4e:	4621      	mov	r1, r4
 800af50:	f7fd ff7e 	bl	8008e50 <_free_r>
 800af54:	4638      	mov	r0, r7
 800af56:	f7fe fbbf 	bl	80096d8 <__malloc_unlock>
 800af5a:	e7ae      	b.n	800aeba <_realloc_r+0x116>
 800af5c:	eb01 0c0a 	add.w	ip, r1, sl
 800af60:	4562      	cmp	r2, ip
 800af62:	dcd3      	bgt.n	800af0c <_realloc_r+0x168>
 800af64:	464e      	mov	r6, r9
 800af66:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800af6a:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800af6e:	f1aa 0204 	sub.w	r2, sl, #4
 800af72:	2a24      	cmp	r2, #36	; 0x24
 800af74:	60cb      	str	r3, [r1, #12]
 800af76:	6099      	str	r1, [r3, #8]
 800af78:	d865      	bhi.n	800b046 <_realloc_r+0x2a2>
 800af7a:	2a13      	cmp	r2, #19
 800af7c:	bf98      	it	ls
 800af7e:	4633      	movls	r3, r6
 800af80:	d90b      	bls.n	800af9a <_realloc_r+0x1f6>
 800af82:	6823      	ldr	r3, [r4, #0]
 800af84:	f8c9 3008 	str.w	r3, [r9, #8]
 800af88:	6863      	ldr	r3, [r4, #4]
 800af8a:	2a1b      	cmp	r2, #27
 800af8c:	f8c9 300c 	str.w	r3, [r9, #12]
 800af90:	f200 80c0 	bhi.w	800b114 <_realloc_r+0x370>
 800af94:	f109 0310 	add.w	r3, r9, #16
 800af98:	3408      	adds	r4, #8
 800af9a:	6822      	ldr	r2, [r4, #0]
 800af9c:	601a      	str	r2, [r3, #0]
 800af9e:	6862      	ldr	r2, [r4, #4]
 800afa0:	605a      	str	r2, [r3, #4]
 800afa2:	68a2      	ldr	r2, [r4, #8]
 800afa4:	609a      	str	r2, [r3, #8]
 800afa6:	4634      	mov	r4, r6
 800afa8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800afac:	4666      	mov	r6, ip
 800afae:	46cb      	mov	fp, r9
 800afb0:	e771      	b.n	800ae96 <_realloc_r+0xf2>
 800afb2:	4611      	mov	r1, r2
 800afb4:	b003      	add	sp, #12
 800afb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afba:	f7fe b855 	b.w	8009068 <_malloc_r>
 800afbe:	230c      	movs	r3, #12
 800afc0:	603b      	str	r3, [r7, #0]
 800afc2:	f04f 0800 	mov.w	r8, #0
 800afc6:	e778      	b.n	800aeba <_realloc_r+0x116>
 800afc8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800afcc:	f026 0e03 	bic.w	lr, r6, #3
 800afd0:	eb0e 000a 	add.w	r0, lr, sl
 800afd4:	f105 0610 	add.w	r6, r5, #16
 800afd8:	42b0      	cmp	r0, r6
 800afda:	bfb8      	it	lt
 800afdc:	4660      	movlt	r0, ip
 800afde:	f6ff af19 	blt.w	800ae14 <_realloc_r+0x70>
 800afe2:	eb0b 0205 	add.w	r2, fp, r5
 800afe6:	1b41      	subs	r1, r0, r5
 800afe8:	f041 0101 	orr.w	r1, r1, #1
 800afec:	6051      	str	r1, [r2, #4]
 800afee:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800aff2:	609a      	str	r2, [r3, #8]
 800aff4:	f001 0301 	and.w	r3, r1, #1
 800aff8:	431d      	orrs	r5, r3
 800affa:	f844 5c04 	str.w	r5, [r4, #-4]
 800affe:	4638      	mov	r0, r7
 800b000:	f7fe fb6a 	bl	80096d8 <__malloc_unlock>
 800b004:	46a0      	mov	r8, r4
 800b006:	e758      	b.n	800aeba <_realloc_r+0x116>
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	6003      	str	r3, [r0, #0]
 800b00c:	6863      	ldr	r3, [r4, #4]
 800b00e:	2a1b      	cmp	r2, #27
 800b010:	6043      	str	r3, [r0, #4]
 800b012:	bf9c      	itt	ls
 800b014:	f104 0208 	addls.w	r2, r4, #8
 800b018:	f100 0308 	addls.w	r3, r0, #8
 800b01c:	d990      	bls.n	800af40 <_realloc_r+0x19c>
 800b01e:	68a3      	ldr	r3, [r4, #8]
 800b020:	6083      	str	r3, [r0, #8]
 800b022:	68e3      	ldr	r3, [r4, #12]
 800b024:	2a24      	cmp	r2, #36	; 0x24
 800b026:	60c3      	str	r3, [r0, #12]
 800b028:	bf03      	ittte	eq
 800b02a:	6923      	ldreq	r3, [r4, #16]
 800b02c:	6103      	streq	r3, [r0, #16]
 800b02e:	6962      	ldreq	r2, [r4, #20]
 800b030:	f100 0310 	addne.w	r3, r0, #16
 800b034:	bf09      	itett	eq
 800b036:	6142      	streq	r2, [r0, #20]
 800b038:	f104 0210 	addne.w	r2, r4, #16
 800b03c:	f100 0318 	addeq.w	r3, r0, #24
 800b040:	f104 0218 	addeq.w	r2, r4, #24
 800b044:	e77c      	b.n	800af40 <_realloc_r+0x19c>
 800b046:	4621      	mov	r1, r4
 800b048:	4630      	mov	r0, r6
 800b04a:	f8cd c004 	str.w	ip, [sp, #4]
 800b04e:	f7ff fe07 	bl	800ac60 <memmove>
 800b052:	f8dd c004 	ldr.w	ip, [sp, #4]
 800b056:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b05a:	4634      	mov	r4, r6
 800b05c:	46cb      	mov	fp, r9
 800b05e:	4666      	mov	r6, ip
 800b060:	e719      	b.n	800ae96 <_realloc_r+0xf2>
 800b062:	4621      	mov	r1, r4
 800b064:	f7ff fdfc 	bl	800ac60 <memmove>
 800b068:	e770      	b.n	800af4c <_realloc_r+0x1a8>
 800b06a:	bf00      	nop
 800b06c:	2000060c 	.word	0x2000060c
 800b070:	f105 0110 	add.w	r1, r5, #16
 800b074:	428e      	cmp	r6, r1
 800b076:	f6ff af73 	blt.w	800af60 <_realloc_r+0x1bc>
 800b07a:	46c8      	mov	r8, r9
 800b07c:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800b080:	f858 0f08 	ldr.w	r0, [r8, #8]!
 800b084:	f1aa 0204 	sub.w	r2, sl, #4
 800b088:	2a24      	cmp	r2, #36	; 0x24
 800b08a:	60c1      	str	r1, [r0, #12]
 800b08c:	6088      	str	r0, [r1, #8]
 800b08e:	d861      	bhi.n	800b154 <_realloc_r+0x3b0>
 800b090:	2a13      	cmp	r2, #19
 800b092:	bf98      	it	ls
 800b094:	4642      	movls	r2, r8
 800b096:	d90a      	bls.n	800b0ae <_realloc_r+0x30a>
 800b098:	6821      	ldr	r1, [r4, #0]
 800b09a:	f8c9 1008 	str.w	r1, [r9, #8]
 800b09e:	6861      	ldr	r1, [r4, #4]
 800b0a0:	2a1b      	cmp	r2, #27
 800b0a2:	f8c9 100c 	str.w	r1, [r9, #12]
 800b0a6:	d85c      	bhi.n	800b162 <_realloc_r+0x3be>
 800b0a8:	f109 0210 	add.w	r2, r9, #16
 800b0ac:	3408      	adds	r4, #8
 800b0ae:	6821      	ldr	r1, [r4, #0]
 800b0b0:	6011      	str	r1, [r2, #0]
 800b0b2:	6861      	ldr	r1, [r4, #4]
 800b0b4:	6051      	str	r1, [r2, #4]
 800b0b6:	68a1      	ldr	r1, [r4, #8]
 800b0b8:	6091      	str	r1, [r2, #8]
 800b0ba:	eb09 0205 	add.w	r2, r9, r5
 800b0be:	1b71      	subs	r1, r6, r5
 800b0c0:	f041 0101 	orr.w	r1, r1, #1
 800b0c4:	6051      	str	r1, [r2, #4]
 800b0c6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b0ca:	609a      	str	r2, [r3, #8]
 800b0cc:	f001 0301 	and.w	r3, r1, #1
 800b0d0:	431d      	orrs	r5, r3
 800b0d2:	f8c9 5004 	str.w	r5, [r9, #4]
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	f7fe fafe 	bl	80096d8 <__malloc_unlock>
 800b0dc:	e6ed      	b.n	800aeba <_realloc_r+0x116>
 800b0de:	f850 6c04 	ldr.w	r6, [r0, #-4]
 800b0e2:	f026 0603 	bic.w	r6, r6, #3
 800b0e6:	4456      	add	r6, sl
 800b0e8:	e6d5      	b.n	800ae96 <_realloc_r+0xf2>
 800b0ea:	4621      	mov	r1, r4
 800b0ec:	4640      	mov	r0, r8
 800b0ee:	f7ff fdb7 	bl	800ac60 <memmove>
 800b0f2:	4644      	mov	r4, r8
 800b0f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b0f8:	46cb      	mov	fp, r9
 800b0fa:	e6cc      	b.n	800ae96 <_realloc_r+0xf2>
 800b0fc:	68a3      	ldr	r3, [r4, #8]
 800b0fe:	f8c9 3010 	str.w	r3, [r9, #16]
 800b102:	68e3      	ldr	r3, [r4, #12]
 800b104:	2a24      	cmp	r2, #36	; 0x24
 800b106:	f8c9 3014 	str.w	r3, [r9, #20]
 800b10a:	d00f      	beq.n	800b12c <_realloc_r+0x388>
 800b10c:	f109 0318 	add.w	r3, r9, #24
 800b110:	3410      	adds	r4, #16
 800b112:	e6b6      	b.n	800ae82 <_realloc_r+0xde>
 800b114:	68a3      	ldr	r3, [r4, #8]
 800b116:	f8c9 3010 	str.w	r3, [r9, #16]
 800b11a:	68e3      	ldr	r3, [r4, #12]
 800b11c:	2a24      	cmp	r2, #36	; 0x24
 800b11e:	f8c9 3014 	str.w	r3, [r9, #20]
 800b122:	d00d      	beq.n	800b140 <_realloc_r+0x39c>
 800b124:	f109 0318 	add.w	r3, r9, #24
 800b128:	3410      	adds	r4, #16
 800b12a:	e736      	b.n	800af9a <_realloc_r+0x1f6>
 800b12c:	6923      	ldr	r3, [r4, #16]
 800b12e:	f8c9 3018 	str.w	r3, [r9, #24]
 800b132:	6962      	ldr	r2, [r4, #20]
 800b134:	f109 0320 	add.w	r3, r9, #32
 800b138:	f8c9 201c 	str.w	r2, [r9, #28]
 800b13c:	3418      	adds	r4, #24
 800b13e:	e6a0      	b.n	800ae82 <_realloc_r+0xde>
 800b140:	6923      	ldr	r3, [r4, #16]
 800b142:	f8c9 3018 	str.w	r3, [r9, #24]
 800b146:	6962      	ldr	r2, [r4, #20]
 800b148:	f109 0320 	add.w	r3, r9, #32
 800b14c:	f8c9 201c 	str.w	r2, [r9, #28]
 800b150:	3418      	adds	r4, #24
 800b152:	e722      	b.n	800af9a <_realloc_r+0x1f6>
 800b154:	4640      	mov	r0, r8
 800b156:	4621      	mov	r1, r4
 800b158:	9301      	str	r3, [sp, #4]
 800b15a:	f7ff fd81 	bl	800ac60 <memmove>
 800b15e:	9b01      	ldr	r3, [sp, #4]
 800b160:	e7ab      	b.n	800b0ba <_realloc_r+0x316>
 800b162:	68a1      	ldr	r1, [r4, #8]
 800b164:	f8c9 1010 	str.w	r1, [r9, #16]
 800b168:	68e1      	ldr	r1, [r4, #12]
 800b16a:	2a24      	cmp	r2, #36	; 0x24
 800b16c:	f8c9 1014 	str.w	r1, [r9, #20]
 800b170:	d003      	beq.n	800b17a <_realloc_r+0x3d6>
 800b172:	f109 0218 	add.w	r2, r9, #24
 800b176:	3410      	adds	r4, #16
 800b178:	e799      	b.n	800b0ae <_realloc_r+0x30a>
 800b17a:	6922      	ldr	r2, [r4, #16]
 800b17c:	f8c9 2018 	str.w	r2, [r9, #24]
 800b180:	6961      	ldr	r1, [r4, #20]
 800b182:	f109 0220 	add.w	r2, r9, #32
 800b186:	f8c9 101c 	str.w	r1, [r9, #28]
 800b18a:	3418      	adds	r4, #24
 800b18c:	e78f      	b.n	800b0ae <_realloc_r+0x30a>
 800b18e:	bf00      	nop

0800b190 <__aeabi_drsub>:
 800b190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800b194:	e002      	b.n	800b19c <__adddf3>
 800b196:	bf00      	nop

0800b198 <__aeabi_dsub>:
 800b198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800b19c <__adddf3>:
 800b19c:	b530      	push	{r4, r5, lr}
 800b19e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800b1a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800b1a6:	ea94 0f05 	teq	r4, r5
 800b1aa:	bf08      	it	eq
 800b1ac:	ea90 0f02 	teqeq	r0, r2
 800b1b0:	bf1f      	itttt	ne
 800b1b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 800b1b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 800b1ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800b1be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800b1c2:	f000 80e2 	beq.w	800b38a <__adddf3+0x1ee>
 800b1c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800b1ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800b1ce:	bfb8      	it	lt
 800b1d0:	426d      	neglt	r5, r5
 800b1d2:	dd0c      	ble.n	800b1ee <__adddf3+0x52>
 800b1d4:	442c      	add	r4, r5
 800b1d6:	ea80 0202 	eor.w	r2, r0, r2
 800b1da:	ea81 0303 	eor.w	r3, r1, r3
 800b1de:	ea82 0000 	eor.w	r0, r2, r0
 800b1e2:	ea83 0101 	eor.w	r1, r3, r1
 800b1e6:	ea80 0202 	eor.w	r2, r0, r2
 800b1ea:	ea81 0303 	eor.w	r3, r1, r3
 800b1ee:	2d36      	cmp	r5, #54	; 0x36
 800b1f0:	bf88      	it	hi
 800b1f2:	bd30      	pophi	{r4, r5, pc}
 800b1f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800b1f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800b1fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800b200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800b204:	d002      	beq.n	800b20c <__adddf3+0x70>
 800b206:	4240      	negs	r0, r0
 800b208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b20c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800b210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800b214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800b218:	d002      	beq.n	800b220 <__adddf3+0x84>
 800b21a:	4252      	negs	r2, r2
 800b21c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800b220:	ea94 0f05 	teq	r4, r5
 800b224:	f000 80a7 	beq.w	800b376 <__adddf3+0x1da>
 800b228:	f1a4 0401 	sub.w	r4, r4, #1
 800b22c:	f1d5 0e20 	rsbs	lr, r5, #32
 800b230:	db0d      	blt.n	800b24e <__adddf3+0xb2>
 800b232:	fa02 fc0e 	lsl.w	ip, r2, lr
 800b236:	fa22 f205 	lsr.w	r2, r2, r5
 800b23a:	1880      	adds	r0, r0, r2
 800b23c:	f141 0100 	adc.w	r1, r1, #0
 800b240:	fa03 f20e 	lsl.w	r2, r3, lr
 800b244:	1880      	adds	r0, r0, r2
 800b246:	fa43 f305 	asr.w	r3, r3, r5
 800b24a:	4159      	adcs	r1, r3
 800b24c:	e00e      	b.n	800b26c <__adddf3+0xd0>
 800b24e:	f1a5 0520 	sub.w	r5, r5, #32
 800b252:	f10e 0e20 	add.w	lr, lr, #32
 800b256:	2a01      	cmp	r2, #1
 800b258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800b25c:	bf28      	it	cs
 800b25e:	f04c 0c02 	orrcs.w	ip, ip, #2
 800b262:	fa43 f305 	asr.w	r3, r3, r5
 800b266:	18c0      	adds	r0, r0, r3
 800b268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800b26c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b270:	d507      	bpl.n	800b282 <__adddf3+0xe6>
 800b272:	f04f 0e00 	mov.w	lr, #0
 800b276:	f1dc 0c00 	rsbs	ip, ip, #0
 800b27a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800b27e:	eb6e 0101 	sbc.w	r1, lr, r1
 800b282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b286:	d31b      	bcc.n	800b2c0 <__adddf3+0x124>
 800b288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b28c:	d30c      	bcc.n	800b2a8 <__adddf3+0x10c>
 800b28e:	0849      	lsrs	r1, r1, #1
 800b290:	ea5f 0030 	movs.w	r0, r0, rrx
 800b294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800b298:	f104 0401 	add.w	r4, r4, #1
 800b29c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800b2a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800b2a4:	f080 809a 	bcs.w	800b3dc <__adddf3+0x240>
 800b2a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800b2ac:	bf08      	it	eq
 800b2ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800b2b2:	f150 0000 	adcs.w	r0, r0, #0
 800b2b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800b2ba:	ea41 0105 	orr.w	r1, r1, r5
 800b2be:	bd30      	pop	{r4, r5, pc}
 800b2c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800b2c4:	4140      	adcs	r0, r0
 800b2c6:	eb41 0101 	adc.w	r1, r1, r1
 800b2ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b2ce:	f1a4 0401 	sub.w	r4, r4, #1
 800b2d2:	d1e9      	bne.n	800b2a8 <__adddf3+0x10c>
 800b2d4:	f091 0f00 	teq	r1, #0
 800b2d8:	bf04      	itt	eq
 800b2da:	4601      	moveq	r1, r0
 800b2dc:	2000      	moveq	r0, #0
 800b2de:	fab1 f381 	clz	r3, r1
 800b2e2:	bf08      	it	eq
 800b2e4:	3320      	addeq	r3, #32
 800b2e6:	f1a3 030b 	sub.w	r3, r3, #11
 800b2ea:	f1b3 0220 	subs.w	r2, r3, #32
 800b2ee:	da0c      	bge.n	800b30a <__adddf3+0x16e>
 800b2f0:	320c      	adds	r2, #12
 800b2f2:	dd08      	ble.n	800b306 <__adddf3+0x16a>
 800b2f4:	f102 0c14 	add.w	ip, r2, #20
 800b2f8:	f1c2 020c 	rsb	r2, r2, #12
 800b2fc:	fa01 f00c 	lsl.w	r0, r1, ip
 800b300:	fa21 f102 	lsr.w	r1, r1, r2
 800b304:	e00c      	b.n	800b320 <__adddf3+0x184>
 800b306:	f102 0214 	add.w	r2, r2, #20
 800b30a:	bfd8      	it	le
 800b30c:	f1c2 0c20 	rsble	ip, r2, #32
 800b310:	fa01 f102 	lsl.w	r1, r1, r2
 800b314:	fa20 fc0c 	lsr.w	ip, r0, ip
 800b318:	bfdc      	itt	le
 800b31a:	ea41 010c 	orrle.w	r1, r1, ip
 800b31e:	4090      	lslle	r0, r2
 800b320:	1ae4      	subs	r4, r4, r3
 800b322:	bfa2      	ittt	ge
 800b324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800b328:	4329      	orrge	r1, r5
 800b32a:	bd30      	popge	{r4, r5, pc}
 800b32c:	ea6f 0404 	mvn.w	r4, r4
 800b330:	3c1f      	subs	r4, #31
 800b332:	da1c      	bge.n	800b36e <__adddf3+0x1d2>
 800b334:	340c      	adds	r4, #12
 800b336:	dc0e      	bgt.n	800b356 <__adddf3+0x1ba>
 800b338:	f104 0414 	add.w	r4, r4, #20
 800b33c:	f1c4 0220 	rsb	r2, r4, #32
 800b340:	fa20 f004 	lsr.w	r0, r0, r4
 800b344:	fa01 f302 	lsl.w	r3, r1, r2
 800b348:	ea40 0003 	orr.w	r0, r0, r3
 800b34c:	fa21 f304 	lsr.w	r3, r1, r4
 800b350:	ea45 0103 	orr.w	r1, r5, r3
 800b354:	bd30      	pop	{r4, r5, pc}
 800b356:	f1c4 040c 	rsb	r4, r4, #12
 800b35a:	f1c4 0220 	rsb	r2, r4, #32
 800b35e:	fa20 f002 	lsr.w	r0, r0, r2
 800b362:	fa01 f304 	lsl.w	r3, r1, r4
 800b366:	ea40 0003 	orr.w	r0, r0, r3
 800b36a:	4629      	mov	r1, r5
 800b36c:	bd30      	pop	{r4, r5, pc}
 800b36e:	fa21 f004 	lsr.w	r0, r1, r4
 800b372:	4629      	mov	r1, r5
 800b374:	bd30      	pop	{r4, r5, pc}
 800b376:	f094 0f00 	teq	r4, #0
 800b37a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800b37e:	bf06      	itte	eq
 800b380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800b384:	3401      	addeq	r4, #1
 800b386:	3d01      	subne	r5, #1
 800b388:	e74e      	b.n	800b228 <__adddf3+0x8c>
 800b38a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800b38e:	bf18      	it	ne
 800b390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800b394:	d029      	beq.n	800b3ea <__adddf3+0x24e>
 800b396:	ea94 0f05 	teq	r4, r5
 800b39a:	bf08      	it	eq
 800b39c:	ea90 0f02 	teqeq	r0, r2
 800b3a0:	d005      	beq.n	800b3ae <__adddf3+0x212>
 800b3a2:	ea54 0c00 	orrs.w	ip, r4, r0
 800b3a6:	bf04      	itt	eq
 800b3a8:	4619      	moveq	r1, r3
 800b3aa:	4610      	moveq	r0, r2
 800b3ac:	bd30      	pop	{r4, r5, pc}
 800b3ae:	ea91 0f03 	teq	r1, r3
 800b3b2:	bf1e      	ittt	ne
 800b3b4:	2100      	movne	r1, #0
 800b3b6:	2000      	movne	r0, #0
 800b3b8:	bd30      	popne	{r4, r5, pc}
 800b3ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800b3be:	d105      	bne.n	800b3cc <__adddf3+0x230>
 800b3c0:	0040      	lsls	r0, r0, #1
 800b3c2:	4149      	adcs	r1, r1
 800b3c4:	bf28      	it	cs
 800b3c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800b3ca:	bd30      	pop	{r4, r5, pc}
 800b3cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800b3d0:	bf3c      	itt	cc
 800b3d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800b3d6:	bd30      	popcc	{r4, r5, pc}
 800b3d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b3dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800b3e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b3e4:	f04f 0000 	mov.w	r0, #0
 800b3e8:	bd30      	pop	{r4, r5, pc}
 800b3ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800b3ee:	bf1a      	itte	ne
 800b3f0:	4619      	movne	r1, r3
 800b3f2:	4610      	movne	r0, r2
 800b3f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800b3f8:	bf1c      	itt	ne
 800b3fa:	460b      	movne	r3, r1
 800b3fc:	4602      	movne	r2, r0
 800b3fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800b402:	bf06      	itte	eq
 800b404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800b408:	ea91 0f03 	teqeq	r1, r3
 800b40c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800b410:	bd30      	pop	{r4, r5, pc}
 800b412:	bf00      	nop

0800b414 <__aeabi_ui2d>:
 800b414:	f090 0f00 	teq	r0, #0
 800b418:	bf04      	itt	eq
 800b41a:	2100      	moveq	r1, #0
 800b41c:	4770      	bxeq	lr
 800b41e:	b530      	push	{r4, r5, lr}
 800b420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b428:	f04f 0500 	mov.w	r5, #0
 800b42c:	f04f 0100 	mov.w	r1, #0
 800b430:	e750      	b.n	800b2d4 <__adddf3+0x138>
 800b432:	bf00      	nop

0800b434 <__aeabi_i2d>:
 800b434:	f090 0f00 	teq	r0, #0
 800b438:	bf04      	itt	eq
 800b43a:	2100      	moveq	r1, #0
 800b43c:	4770      	bxeq	lr
 800b43e:	b530      	push	{r4, r5, lr}
 800b440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800b44c:	bf48      	it	mi
 800b44e:	4240      	negmi	r0, r0
 800b450:	f04f 0100 	mov.w	r1, #0
 800b454:	e73e      	b.n	800b2d4 <__adddf3+0x138>
 800b456:	bf00      	nop

0800b458 <__aeabi_f2d>:
 800b458:	0042      	lsls	r2, r0, #1
 800b45a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800b45e:	ea4f 0131 	mov.w	r1, r1, rrx
 800b462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800b466:	bf1f      	itttt	ne
 800b468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800b46c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800b470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800b474:	4770      	bxne	lr
 800b476:	f092 0f00 	teq	r2, #0
 800b47a:	bf14      	ite	ne
 800b47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800b480:	4770      	bxeq	lr
 800b482:	b530      	push	{r4, r5, lr}
 800b484:	f44f 7460 	mov.w	r4, #896	; 0x380
 800b488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b48c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b490:	e720      	b.n	800b2d4 <__adddf3+0x138>
 800b492:	bf00      	nop

0800b494 <__aeabi_ul2d>:
 800b494:	ea50 0201 	orrs.w	r2, r0, r1
 800b498:	bf08      	it	eq
 800b49a:	4770      	bxeq	lr
 800b49c:	b530      	push	{r4, r5, lr}
 800b49e:	f04f 0500 	mov.w	r5, #0
 800b4a2:	e00a      	b.n	800b4ba <__aeabi_l2d+0x16>

0800b4a4 <__aeabi_l2d>:
 800b4a4:	ea50 0201 	orrs.w	r2, r0, r1
 800b4a8:	bf08      	it	eq
 800b4aa:	4770      	bxeq	lr
 800b4ac:	b530      	push	{r4, r5, lr}
 800b4ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800b4b2:	d502      	bpl.n	800b4ba <__aeabi_l2d+0x16>
 800b4b4:	4240      	negs	r0, r0
 800b4b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b4ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b4be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b4c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800b4c6:	f43f aedc 	beq.w	800b282 <__adddf3+0xe6>
 800b4ca:	f04f 0203 	mov.w	r2, #3
 800b4ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b4d2:	bf18      	it	ne
 800b4d4:	3203      	addne	r2, #3
 800b4d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b4da:	bf18      	it	ne
 800b4dc:	3203      	addne	r2, #3
 800b4de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800b4e2:	f1c2 0320 	rsb	r3, r2, #32
 800b4e6:	fa00 fc03 	lsl.w	ip, r0, r3
 800b4ea:	fa20 f002 	lsr.w	r0, r0, r2
 800b4ee:	fa01 fe03 	lsl.w	lr, r1, r3
 800b4f2:	ea40 000e 	orr.w	r0, r0, lr
 800b4f6:	fa21 f102 	lsr.w	r1, r1, r2
 800b4fa:	4414      	add	r4, r2
 800b4fc:	e6c1      	b.n	800b282 <__adddf3+0xe6>
 800b4fe:	bf00      	nop

0800b500 <__aeabi_dmul>:
 800b500:	b570      	push	{r4, r5, r6, lr}
 800b502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800b506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800b50a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800b50e:	bf1d      	ittte	ne
 800b510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800b514:	ea94 0f0c 	teqne	r4, ip
 800b518:	ea95 0f0c 	teqne	r5, ip
 800b51c:	f000 f8de 	bleq	800b6dc <__aeabi_dmul+0x1dc>
 800b520:	442c      	add	r4, r5
 800b522:	ea81 0603 	eor.w	r6, r1, r3
 800b526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800b52a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800b52e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800b532:	bf18      	it	ne
 800b534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800b538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b53c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b540:	d038      	beq.n	800b5b4 <__aeabi_dmul+0xb4>
 800b542:	fba0 ce02 	umull	ip, lr, r0, r2
 800b546:	f04f 0500 	mov.w	r5, #0
 800b54a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800b54e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800b552:	fbe0 e503 	umlal	lr, r5, r0, r3
 800b556:	f04f 0600 	mov.w	r6, #0
 800b55a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800b55e:	f09c 0f00 	teq	ip, #0
 800b562:	bf18      	it	ne
 800b564:	f04e 0e01 	orrne.w	lr, lr, #1
 800b568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800b56c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800b570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800b574:	d204      	bcs.n	800b580 <__aeabi_dmul+0x80>
 800b576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800b57a:	416d      	adcs	r5, r5
 800b57c:	eb46 0606 	adc.w	r6, r6, r6
 800b580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800b584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800b588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800b58c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800b590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800b594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800b598:	bf88      	it	hi
 800b59a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800b59e:	d81e      	bhi.n	800b5de <__aeabi_dmul+0xde>
 800b5a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800b5a4:	bf08      	it	eq
 800b5a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800b5aa:	f150 0000 	adcs.w	r0, r0, #0
 800b5ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800b5b2:	bd70      	pop	{r4, r5, r6, pc}
 800b5b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800b5b8:	ea46 0101 	orr.w	r1, r6, r1
 800b5bc:	ea40 0002 	orr.w	r0, r0, r2
 800b5c0:	ea81 0103 	eor.w	r1, r1, r3
 800b5c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800b5c8:	bfc2      	ittt	gt
 800b5ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 800b5ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800b5d2:	bd70      	popgt	{r4, r5, r6, pc}
 800b5d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b5d8:	f04f 0e00 	mov.w	lr, #0
 800b5dc:	3c01      	subs	r4, #1
 800b5de:	f300 80ab 	bgt.w	800b738 <__aeabi_dmul+0x238>
 800b5e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800b5e6:	bfde      	ittt	le
 800b5e8:	2000      	movle	r0, #0
 800b5ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800b5ee:	bd70      	pople	{r4, r5, r6, pc}
 800b5f0:	f1c4 0400 	rsb	r4, r4, #0
 800b5f4:	3c20      	subs	r4, #32
 800b5f6:	da35      	bge.n	800b664 <__aeabi_dmul+0x164>
 800b5f8:	340c      	adds	r4, #12
 800b5fa:	dc1b      	bgt.n	800b634 <__aeabi_dmul+0x134>
 800b5fc:	f104 0414 	add.w	r4, r4, #20
 800b600:	f1c4 0520 	rsb	r5, r4, #32
 800b604:	fa00 f305 	lsl.w	r3, r0, r5
 800b608:	fa20 f004 	lsr.w	r0, r0, r4
 800b60c:	fa01 f205 	lsl.w	r2, r1, r5
 800b610:	ea40 0002 	orr.w	r0, r0, r2
 800b614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800b618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b61c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800b620:	fa21 f604 	lsr.w	r6, r1, r4
 800b624:	eb42 0106 	adc.w	r1, r2, r6
 800b628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800b62c:	bf08      	it	eq
 800b62e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800b632:	bd70      	pop	{r4, r5, r6, pc}
 800b634:	f1c4 040c 	rsb	r4, r4, #12
 800b638:	f1c4 0520 	rsb	r5, r4, #32
 800b63c:	fa00 f304 	lsl.w	r3, r0, r4
 800b640:	fa20 f005 	lsr.w	r0, r0, r5
 800b644:	fa01 f204 	lsl.w	r2, r1, r4
 800b648:	ea40 0002 	orr.w	r0, r0, r2
 800b64c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800b654:	f141 0100 	adc.w	r1, r1, #0
 800b658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800b65c:	bf08      	it	eq
 800b65e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800b662:	bd70      	pop	{r4, r5, r6, pc}
 800b664:	f1c4 0520 	rsb	r5, r4, #32
 800b668:	fa00 f205 	lsl.w	r2, r0, r5
 800b66c:	ea4e 0e02 	orr.w	lr, lr, r2
 800b670:	fa20 f304 	lsr.w	r3, r0, r4
 800b674:	fa01 f205 	lsl.w	r2, r1, r5
 800b678:	ea43 0302 	orr.w	r3, r3, r2
 800b67c:	fa21 f004 	lsr.w	r0, r1, r4
 800b680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b684:	fa21 f204 	lsr.w	r2, r1, r4
 800b688:	ea20 0002 	bic.w	r0, r0, r2
 800b68c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800b690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800b694:	bf08      	it	eq
 800b696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800b69a:	bd70      	pop	{r4, r5, r6, pc}
 800b69c:	f094 0f00 	teq	r4, #0
 800b6a0:	d10f      	bne.n	800b6c2 <__aeabi_dmul+0x1c2>
 800b6a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800b6a6:	0040      	lsls	r0, r0, #1
 800b6a8:	eb41 0101 	adc.w	r1, r1, r1
 800b6ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b6b0:	bf08      	it	eq
 800b6b2:	3c01      	subeq	r4, #1
 800b6b4:	d0f7      	beq.n	800b6a6 <__aeabi_dmul+0x1a6>
 800b6b6:	ea41 0106 	orr.w	r1, r1, r6
 800b6ba:	f095 0f00 	teq	r5, #0
 800b6be:	bf18      	it	ne
 800b6c0:	4770      	bxne	lr
 800b6c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800b6c6:	0052      	lsls	r2, r2, #1
 800b6c8:	eb43 0303 	adc.w	r3, r3, r3
 800b6cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800b6d0:	bf08      	it	eq
 800b6d2:	3d01      	subeq	r5, #1
 800b6d4:	d0f7      	beq.n	800b6c6 <__aeabi_dmul+0x1c6>
 800b6d6:	ea43 0306 	orr.w	r3, r3, r6
 800b6da:	4770      	bx	lr
 800b6dc:	ea94 0f0c 	teq	r4, ip
 800b6e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800b6e4:	bf18      	it	ne
 800b6e6:	ea95 0f0c 	teqne	r5, ip
 800b6ea:	d00c      	beq.n	800b706 <__aeabi_dmul+0x206>
 800b6ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800b6f0:	bf18      	it	ne
 800b6f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800b6f6:	d1d1      	bne.n	800b69c <__aeabi_dmul+0x19c>
 800b6f8:	ea81 0103 	eor.w	r1, r1, r3
 800b6fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b700:	f04f 0000 	mov.w	r0, #0
 800b704:	bd70      	pop	{r4, r5, r6, pc}
 800b706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800b70a:	bf06      	itte	eq
 800b70c:	4610      	moveq	r0, r2
 800b70e:	4619      	moveq	r1, r3
 800b710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800b714:	d019      	beq.n	800b74a <__aeabi_dmul+0x24a>
 800b716:	ea94 0f0c 	teq	r4, ip
 800b71a:	d102      	bne.n	800b722 <__aeabi_dmul+0x222>
 800b71c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800b720:	d113      	bne.n	800b74a <__aeabi_dmul+0x24a>
 800b722:	ea95 0f0c 	teq	r5, ip
 800b726:	d105      	bne.n	800b734 <__aeabi_dmul+0x234>
 800b728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800b72c:	bf1c      	itt	ne
 800b72e:	4610      	movne	r0, r2
 800b730:	4619      	movne	r1, r3
 800b732:	d10a      	bne.n	800b74a <__aeabi_dmul+0x24a>
 800b734:	ea81 0103 	eor.w	r1, r1, r3
 800b738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b73c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800b740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b744:	f04f 0000 	mov.w	r0, #0
 800b748:	bd70      	pop	{r4, r5, r6, pc}
 800b74a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800b74e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800b752:	bd70      	pop	{r4, r5, r6, pc}

0800b754 <__aeabi_ddiv>:
 800b754:	b570      	push	{r4, r5, r6, lr}
 800b756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800b75a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800b75e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800b762:	bf1d      	ittte	ne
 800b764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800b768:	ea94 0f0c 	teqne	r4, ip
 800b76c:	ea95 0f0c 	teqne	r5, ip
 800b770:	f000 f8a7 	bleq	800b8c2 <__aeabi_ddiv+0x16e>
 800b774:	eba4 0405 	sub.w	r4, r4, r5
 800b778:	ea81 0e03 	eor.w	lr, r1, r3
 800b77c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800b780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800b784:	f000 8088 	beq.w	800b898 <__aeabi_ddiv+0x144>
 800b788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800b78c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800b790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800b794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800b798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800b79c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800b7a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800b7a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800b7a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800b7ac:	429d      	cmp	r5, r3
 800b7ae:	bf08      	it	eq
 800b7b0:	4296      	cmpeq	r6, r2
 800b7b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800b7b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800b7ba:	d202      	bcs.n	800b7c2 <__aeabi_ddiv+0x6e>
 800b7bc:	085b      	lsrs	r3, r3, #1
 800b7be:	ea4f 0232 	mov.w	r2, r2, rrx
 800b7c2:	1ab6      	subs	r6, r6, r2
 800b7c4:	eb65 0503 	sbc.w	r5, r5, r3
 800b7c8:	085b      	lsrs	r3, r3, #1
 800b7ca:	ea4f 0232 	mov.w	r2, r2, rrx
 800b7ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b7d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800b7d6:	ebb6 0e02 	subs.w	lr, r6, r2
 800b7da:	eb75 0e03 	sbcs.w	lr, r5, r3
 800b7de:	bf22      	ittt	cs
 800b7e0:	1ab6      	subcs	r6, r6, r2
 800b7e2:	4675      	movcs	r5, lr
 800b7e4:	ea40 000c 	orrcs.w	r0, r0, ip
 800b7e8:	085b      	lsrs	r3, r3, #1
 800b7ea:	ea4f 0232 	mov.w	r2, r2, rrx
 800b7ee:	ebb6 0e02 	subs.w	lr, r6, r2
 800b7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800b7f6:	bf22      	ittt	cs
 800b7f8:	1ab6      	subcs	r6, r6, r2
 800b7fa:	4675      	movcs	r5, lr
 800b7fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800b800:	085b      	lsrs	r3, r3, #1
 800b802:	ea4f 0232 	mov.w	r2, r2, rrx
 800b806:	ebb6 0e02 	subs.w	lr, r6, r2
 800b80a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800b80e:	bf22      	ittt	cs
 800b810:	1ab6      	subcs	r6, r6, r2
 800b812:	4675      	movcs	r5, lr
 800b814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800b818:	085b      	lsrs	r3, r3, #1
 800b81a:	ea4f 0232 	mov.w	r2, r2, rrx
 800b81e:	ebb6 0e02 	subs.w	lr, r6, r2
 800b822:	eb75 0e03 	sbcs.w	lr, r5, r3
 800b826:	bf22      	ittt	cs
 800b828:	1ab6      	subcs	r6, r6, r2
 800b82a:	4675      	movcs	r5, lr
 800b82c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800b830:	ea55 0e06 	orrs.w	lr, r5, r6
 800b834:	d018      	beq.n	800b868 <__aeabi_ddiv+0x114>
 800b836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800b83a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800b83e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800b842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800b846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800b84a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800b84e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800b852:	d1c0      	bne.n	800b7d6 <__aeabi_ddiv+0x82>
 800b854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b858:	d10b      	bne.n	800b872 <__aeabi_ddiv+0x11e>
 800b85a:	ea41 0100 	orr.w	r1, r1, r0
 800b85e:	f04f 0000 	mov.w	r0, #0
 800b862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800b866:	e7b6      	b.n	800b7d6 <__aeabi_ddiv+0x82>
 800b868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b86c:	bf04      	itt	eq
 800b86e:	4301      	orreq	r1, r0
 800b870:	2000      	moveq	r0, #0
 800b872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800b876:	bf88      	it	hi
 800b878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800b87c:	f63f aeaf 	bhi.w	800b5de <__aeabi_dmul+0xde>
 800b880:	ebb5 0c03 	subs.w	ip, r5, r3
 800b884:	bf04      	itt	eq
 800b886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800b88a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800b88e:	f150 0000 	adcs.w	r0, r0, #0
 800b892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800b896:	bd70      	pop	{r4, r5, r6, pc}
 800b898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800b89c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800b8a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800b8a4:	bfc2      	ittt	gt
 800b8a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 800b8aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800b8ae:	bd70      	popgt	{r4, r5, r6, pc}
 800b8b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b8b4:	f04f 0e00 	mov.w	lr, #0
 800b8b8:	3c01      	subs	r4, #1
 800b8ba:	e690      	b.n	800b5de <__aeabi_dmul+0xde>
 800b8bc:	ea45 0e06 	orr.w	lr, r5, r6
 800b8c0:	e68d      	b.n	800b5de <__aeabi_dmul+0xde>
 800b8c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800b8c6:	ea94 0f0c 	teq	r4, ip
 800b8ca:	bf08      	it	eq
 800b8cc:	ea95 0f0c 	teqeq	r5, ip
 800b8d0:	f43f af3b 	beq.w	800b74a <__aeabi_dmul+0x24a>
 800b8d4:	ea94 0f0c 	teq	r4, ip
 800b8d8:	d10a      	bne.n	800b8f0 <__aeabi_ddiv+0x19c>
 800b8da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800b8de:	f47f af34 	bne.w	800b74a <__aeabi_dmul+0x24a>
 800b8e2:	ea95 0f0c 	teq	r5, ip
 800b8e6:	f47f af25 	bne.w	800b734 <__aeabi_dmul+0x234>
 800b8ea:	4610      	mov	r0, r2
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	e72c      	b.n	800b74a <__aeabi_dmul+0x24a>
 800b8f0:	ea95 0f0c 	teq	r5, ip
 800b8f4:	d106      	bne.n	800b904 <__aeabi_ddiv+0x1b0>
 800b8f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800b8fa:	f43f aefd 	beq.w	800b6f8 <__aeabi_dmul+0x1f8>
 800b8fe:	4610      	mov	r0, r2
 800b900:	4619      	mov	r1, r3
 800b902:	e722      	b.n	800b74a <__aeabi_dmul+0x24a>
 800b904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800b908:	bf18      	it	ne
 800b90a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800b90e:	f47f aec5 	bne.w	800b69c <__aeabi_dmul+0x19c>
 800b912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800b916:	f47f af0d 	bne.w	800b734 <__aeabi_dmul+0x234>
 800b91a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800b91e:	f47f aeeb 	bne.w	800b6f8 <__aeabi_dmul+0x1f8>
 800b922:	e712      	b.n	800b74a <__aeabi_dmul+0x24a>

0800b924 <__gedf2>:
 800b924:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b928:	e006      	b.n	800b938 <__cmpdf2+0x4>
 800b92a:	bf00      	nop

0800b92c <__ledf2>:
 800b92c:	f04f 0c01 	mov.w	ip, #1
 800b930:	e002      	b.n	800b938 <__cmpdf2+0x4>
 800b932:	bf00      	nop

0800b934 <__cmpdf2>:
 800b934:	f04f 0c01 	mov.w	ip, #1
 800b938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800b93c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800b940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800b944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800b948:	bf18      	it	ne
 800b94a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800b94e:	d01b      	beq.n	800b988 <__cmpdf2+0x54>
 800b950:	b001      	add	sp, #4
 800b952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800b956:	bf0c      	ite	eq
 800b958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800b95c:	ea91 0f03 	teqne	r1, r3
 800b960:	bf02      	ittt	eq
 800b962:	ea90 0f02 	teqeq	r0, r2
 800b966:	2000      	moveq	r0, #0
 800b968:	4770      	bxeq	lr
 800b96a:	f110 0f00 	cmn.w	r0, #0
 800b96e:	ea91 0f03 	teq	r1, r3
 800b972:	bf58      	it	pl
 800b974:	4299      	cmppl	r1, r3
 800b976:	bf08      	it	eq
 800b978:	4290      	cmpeq	r0, r2
 800b97a:	bf2c      	ite	cs
 800b97c:	17d8      	asrcs	r0, r3, #31
 800b97e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800b982:	f040 0001 	orr.w	r0, r0, #1
 800b986:	4770      	bx	lr
 800b988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800b98c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800b990:	d102      	bne.n	800b998 <__cmpdf2+0x64>
 800b992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800b996:	d107      	bne.n	800b9a8 <__cmpdf2+0x74>
 800b998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800b99c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800b9a0:	d1d6      	bne.n	800b950 <__cmpdf2+0x1c>
 800b9a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800b9a6:	d0d3      	beq.n	800b950 <__cmpdf2+0x1c>
 800b9a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop

0800b9b0 <__aeabi_cdrcmple>:
 800b9b0:	4684      	mov	ip, r0
 800b9b2:	4610      	mov	r0, r2
 800b9b4:	4662      	mov	r2, ip
 800b9b6:	468c      	mov	ip, r1
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	4663      	mov	r3, ip
 800b9bc:	e000      	b.n	800b9c0 <__aeabi_cdcmpeq>
 800b9be:	bf00      	nop

0800b9c0 <__aeabi_cdcmpeq>:
 800b9c0:	b501      	push	{r0, lr}
 800b9c2:	f7ff ffb7 	bl	800b934 <__cmpdf2>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	bf48      	it	mi
 800b9ca:	f110 0f00 	cmnmi.w	r0, #0
 800b9ce:	bd01      	pop	{r0, pc}

0800b9d0 <__aeabi_dcmpeq>:
 800b9d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800b9d4:	f7ff fff4 	bl	800b9c0 <__aeabi_cdcmpeq>
 800b9d8:	bf0c      	ite	eq
 800b9da:	2001      	moveq	r0, #1
 800b9dc:	2000      	movne	r0, #0
 800b9de:	f85d fb08 	ldr.w	pc, [sp], #8
 800b9e2:	bf00      	nop

0800b9e4 <__aeabi_dcmplt>:
 800b9e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800b9e8:	f7ff ffea 	bl	800b9c0 <__aeabi_cdcmpeq>
 800b9ec:	bf34      	ite	cc
 800b9ee:	2001      	movcc	r0, #1
 800b9f0:	2000      	movcs	r0, #0
 800b9f2:	f85d fb08 	ldr.w	pc, [sp], #8
 800b9f6:	bf00      	nop

0800b9f8 <__aeabi_dcmple>:
 800b9f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800b9fc:	f7ff ffe0 	bl	800b9c0 <__aeabi_cdcmpeq>
 800ba00:	bf94      	ite	ls
 800ba02:	2001      	movls	r0, #1
 800ba04:	2000      	movhi	r0, #0
 800ba06:	f85d fb08 	ldr.w	pc, [sp], #8
 800ba0a:	bf00      	nop

0800ba0c <__aeabi_dcmpge>:
 800ba0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ba10:	f7ff ffce 	bl	800b9b0 <__aeabi_cdrcmple>
 800ba14:	bf94      	ite	ls
 800ba16:	2001      	movls	r0, #1
 800ba18:	2000      	movhi	r0, #0
 800ba1a:	f85d fb08 	ldr.w	pc, [sp], #8
 800ba1e:	bf00      	nop

0800ba20 <__aeabi_dcmpgt>:
 800ba20:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ba24:	f7ff ffc4 	bl	800b9b0 <__aeabi_cdrcmple>
 800ba28:	bf34      	ite	cc
 800ba2a:	2001      	movcc	r0, #1
 800ba2c:	2000      	movcs	r0, #0
 800ba2e:	f85d fb08 	ldr.w	pc, [sp], #8
 800ba32:	bf00      	nop

0800ba34 <__aeabi_d2iz>:
 800ba34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800ba38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800ba3c:	d215      	bcs.n	800ba6a <__aeabi_d2iz+0x36>
 800ba3e:	d511      	bpl.n	800ba64 <__aeabi_d2iz+0x30>
 800ba40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800ba44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800ba48:	d912      	bls.n	800ba70 <__aeabi_d2iz+0x3c>
 800ba4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800ba4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800ba56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800ba5a:	fa23 f002 	lsr.w	r0, r3, r2
 800ba5e:	bf18      	it	ne
 800ba60:	4240      	negne	r0, r0
 800ba62:	4770      	bx	lr
 800ba64:	f04f 0000 	mov.w	r0, #0
 800ba68:	4770      	bx	lr
 800ba6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800ba6e:	d105      	bne.n	800ba7c <__aeabi_d2iz+0x48>
 800ba70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800ba74:	bf08      	it	eq
 800ba76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800ba7a:	4770      	bx	lr
 800ba7c:	f04f 0000 	mov.w	r0, #0
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop

0800ba84 <main>:
/**
 * @brief  Main program.
 * @param  None
 * @retval : None
 */
int main(void) {
 800ba84:	b510      	push	{r4, lr}
 800ba86:	b08a      	sub	sp, #40	; 0x28
	GPIOPin_Type led = PD12;
	char tmp[32];
	int32_t i = 0;

	GPIOMode(GPIOD, GPIO_Pin_12, OUTPUT,
 800ba88:	2201      	movs	r2, #1
 800ba8a:	2302      	movs	r3, #2
 800ba8c:	2400      	movs	r4, #0
 800ba8e:	484b      	ldr	r0, [pc, #300]	; (800bbbc <main+0x138>)
 800ba90:	9400      	str	r4, [sp, #0]
 800ba92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ba96:	9401      	str	r4, [sp, #4]
 800ba98:	f7f9 ffe6 	bl	8005a68 <GPIOMode>
			GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
	digitalWrite(led, LOW);
 800ba9c:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 800baa0:	4621      	mov	r1, r4
 800baa2:	f7fa f809 	bl	8005ab8 <digitalWrite>
//  COM_Configuration();

	//Send welcome messages
	// cprintf(Welcome_Message);

	digitalWrite(led, HIGH);
 800baa6:	2101      	movs	r1, #1
 800baa8:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 800baac:	f7fa f804 	bl	8005ab8 <digitalWrite>
	delay_ms(10);
 800bab0:	200a      	movs	r0, #10
 800bab2:	f7f9 ff81 	bl	80059b8 <delay_ms>
	digitalWrite(led, LOW);
 800bab6:	4621      	mov	r1, r4
 800bab8:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 800babc:	f7f9 fffc 	bl	8005ab8 <digitalWrite>
	delay_ms(20);
 800bac0:	2014      	movs	r0, #20
 800bac2:	f7f9 ff79 	bl	80059b8 <delay_ms>
	digitalWrite(led, HIGH);
 800bac6:	2101      	movs	r1, #1
 800bac8:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 800bacc:	f7f9 fff4 	bl	8005ab8 <digitalWrite>
	delay_ms(40);
 800bad0:	2028      	movs	r0, #40	; 0x28
 800bad2:	f7f9 ff71 	bl	80059b8 <delay_ms>
	digitalWrite(led, LOW);
 800bad6:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 800bada:	4621      	mov	r1, r4
 800badc:	f7f9 ffec 	bl	8005ab8 <digitalWrite>
	/*
	digitalWrite(PE2, HIGH);
	delay_ms(5);
	digitalWrite(PE2, LOW);
*/
	i2c_begin(I2C1, 100000);
 800bae0:	4837      	ldr	r0, [pc, #220]	; (800bbc0 <main+0x13c>)
 800bae2:	4938      	ldr	r1, [pc, #224]	; (800bbc4 <main+0x140>)
 800bae4:	f7fa f824 	bl	8005b30 <i2c_begin>
	digitalWrite(led, HIGH);
 800bae8:	2101      	movs	r1, #1
 800baea:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 800baee:	f7f9 ffe3 	bl	8005ab8 <digitalWrite>
	delay_us(27);
 800baf2:	201b      	movs	r0, #27
 800baf4:	f7f9 ff36 	bl	8005964 <delay_us>
	digitalWrite(led, LOW);
 800baf8:	4621      	mov	r1, r4
 800bafa:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 800bafe:	f7f9 ffdb 	bl	8005ab8 <digitalWrite>

	//Function Set
	ST7032i_command(0x38); //(0b00111000);
 800bb02:	2038      	movs	r0, #56	; 0x38
 800bb04:	f7fa faa2 	bl	800604c <ST7032i_command>
	digitalWrite(led, HIGH);
 800bb08:	2101      	movs	r1, #1
 800bb0a:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 800bb0e:	f7f9 ffd3 	bl	8005ab8 <digitalWrite>
	delay_us(27);
 800bb12:	201b      	movs	r0, #27
 800bb14:	f7f9 ff26 	bl	8005964 <delay_us>
	digitalWrite(led, LOW);
 800bb18:	4621      	mov	r1, r4
 800bb1a:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 800bb1e:	f7f9 ffcb 	bl	8005ab8 <digitalWrite>

	//Function Set
	ST7032i_command(0x39); //(0b00111001);
 800bb22:	2039      	movs	r0, #57	; 0x39
 800bb24:	f7fa fa92 	bl	800604c <ST7032i_command>

	delay_us(27);
 800bb28:	201b      	movs	r0, #27
 800bb2a:	f7f9 ff1b 	bl	8005964 <delay_us>

	//Bias and OSC frequency
	ST7032i_command(0x14); //(0b00010100);
 800bb2e:	2014      	movs	r0, #20
 800bb30:	f7fa fa8c 	bl	800604c <ST7032i_command>

	delay_us(27);
 800bb34:	201b      	movs	r0, #27
 800bb36:	f7f9 ff15 	bl	8005964 <delay_us>

	//Contrast set
	ST7032i_command(0x70 | (40 & 0x0f));
 800bb3a:	2078      	movs	r0, #120	; 0x78
 800bb3c:	f7fa fa86 	bl	800604c <ST7032i_command>

	delay_us(27);
 800bb40:	201b      	movs	r0, #27
 800bb42:	f7f9 ff0f 	bl	8005964 <delay_us>

	//Power/Icon/Contrast control
	ST7032i_command(0x56 | (40 >> 4 & 0x03));
 800bb46:	2056      	movs	r0, #86	; 0x56
 800bb48:	f7fa fa80 	bl	800604c <ST7032i_command>

	delay_us(27);
 800bb4c:	201b      	movs	r0, #27
 800bb4e:	f7f9 ff09 	bl	8005964 <delay_us>

	//Follower control
	ST7032i_command(0x6c);
 800bb52:	206c      	movs	r0, #108	; 0x6c
 800bb54:	f7fa fa7a 	bl	800604c <ST7032i_command>

	delay_ms(200);
 800bb58:	20c8      	movs	r0, #200	; 0xc8
 800bb5a:	f7f9 ff2d 	bl	80059b8 <delay_ms>

	//Function Set
	ST7032i_command(0x38);
 800bb5e:	2038      	movs	r0, #56	; 0x38
 800bb60:	f7fa fa74 	bl	800604c <ST7032i_command>

	//Display control : on
	ST7032i_command(0x0c);
 800bb64:	200c      	movs	r0, #12
 800bb66:	f7fa fa71 	bl	800604c <ST7032i_command>

	delay_us(27);
 800bb6a:	201b      	movs	r0, #27
 800bb6c:	f7f9 fefa 	bl	8005964 <delay_us>

	//Clear
	ST7032i_command(0x01);
 800bb70:	2001      	movs	r0, #1
 800bb72:	f7fa fa6b 	bl	800604c <ST7032i_command>

	delay_ms(2);
 800bb76:	2002      	movs	r0, #2
 800bb78:	f7f9 ff1e 	bl	80059b8 <delay_ms>

	ST7032i_print("Buggy gcc! ");
 800bb7c:	4812      	ldr	r0, [pc, #72]	; (800bbc8 <main+0x144>)
 800bb7e:	f7fa fa85 	bl	800608c <ST7032i_print>

	ST7032i_command(0x80 | 0x40);
 800bb82:	20c0      	movs	r0, #192	; 0xc0
 800bb84:	f7fa fa62 	bl	800604c <ST7032i_command>

	ST7032i_print("Go!");
 800bb88:	4810      	ldr	r0, [pc, #64]	; (800bbcc <main+0x148>)
 800bb8a:	f7fa fa7f 	bl	800608c <ST7032i_print>

//  cprintf("Done! Confirm a message is on LCD.");

	while (1) {
		//Clear
		ST7032i_command(0x80 | 0x40);
 800bb8e:	20c0      	movs	r0, #192	; 0xc0
 800bb90:	f7fa fa5c 	bl	800604c <ST7032i_command>
		ST7032i_print("        ");
 800bb94:	480e      	ldr	r0, [pc, #56]	; (800bbd0 <main+0x14c>)
 800bb96:	f7fa fa79 	bl	800608c <ST7032i_print>
		ST7032i_command(0x80 | 0x40);
 800bb9a:	20c0      	movs	r0, #192	; 0xc0
 800bb9c:	f7fa fa56 	bl	800604c <ST7032i_command>
		sprintf(tmp, (char *)"> %d", (int16_t)i);
 800bba0:	b222      	sxth	r2, r4
 800bba2:	490c      	ldr	r1, [pc, #48]	; (800bbd4 <main+0x150>)
 800bba4:	a802      	add	r0, sp, #8
 800bba6:	f7fa ffbd 	bl	8006b24 <sprintf>
		ST7032i_print(tmp);
 800bbaa:	a802      	add	r0, sp, #8
 800bbac:	f7fa fa6e 	bl	800608c <ST7032i_print>
		i++;
		delay_ms(100);
 800bbb0:	2064      	movs	r0, #100	; 0x64
		ST7032i_command(0x80 | 0x40);
		ST7032i_print("        ");
		ST7032i_command(0x80 | 0x40);
		sprintf(tmp, (char *)"> %d", (int16_t)i);
		ST7032i_print(tmp);
		i++;
 800bbb2:	3401      	adds	r4, #1
		delay_ms(100);
 800bbb4:	f7f9 ff00 	bl	80059b8 <delay_ms>
 800bbb8:	e7e9      	b.n	800bb8e <main+0x10a>
 800bbba:	bf00      	nop
 800bbbc:	40020c00 	.word	0x40020c00
 800bbc0:	40005400 	.word	0x40005400
 800bbc4:	000186a0 	.word	0x000186a0
 800bbc8:	0800bdc0 	.word	0x0800bdc0
 800bbcc:	0800bdcc 	.word	0x0800bdcc
 800bbd0:	0800bdd0 	.word	0x0800bdd0
 800bbd4:	0800bdd9 	.word	0x0800bdd9

0800bbd8 <Reset_Handler>:
 800bbd8:	2100      	movs	r1, #0
 800bbda:	e003      	b.n	800bbe4 <LoopCopyDataInit>

0800bbdc <CopyDataInit>:
 800bbdc:	4b0a      	ldr	r3, [pc, #40]	; (800bc08 <LoopFillZerobss+0x10>)
 800bbde:	585b      	ldr	r3, [r3, r1]
 800bbe0:	5043      	str	r3, [r0, r1]
 800bbe2:	3104      	adds	r1, #4

0800bbe4 <LoopCopyDataInit>:
 800bbe4:	4809      	ldr	r0, [pc, #36]	; (800bc0c <LoopFillZerobss+0x14>)
 800bbe6:	4b0a      	ldr	r3, [pc, #40]	; (800bc10 <LoopFillZerobss+0x18>)
 800bbe8:	1842      	adds	r2, r0, r1
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d3f6      	bcc.n	800bbdc <CopyDataInit>
 800bbee:	4a09      	ldr	r2, [pc, #36]	; (800bc14 <LoopFillZerobss+0x1c>)
 800bbf0:	e002      	b.n	800bbf8 <LoopFillZerobss>

0800bbf2 <FillZerobss>:
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	f842 3b04 	str.w	r3, [r2], #4

0800bbf8 <LoopFillZerobss>:
 800bbf8:	4b07      	ldr	r3, [pc, #28]	; (800bc18 <LoopFillZerobss+0x20>)
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d3f9      	bcc.n	800bbf2 <FillZerobss>
 800bbfe:	f7fa fe4b 	bl	8006898 <SystemInit>
 800bc02:	f7ff ff3f 	bl	800ba84 <main>
 800bc06:	4770      	bx	lr
 800bc08:	0800be64 	.word	0x0800be64
 800bc0c:	20000000 	.word	0x20000000
 800bc10:	20000a1c 	.word	0x20000a1c
 800bc14:	20000a1c 	.word	0x20000a1c
 800bc18:	200010c4 	.word	0x200010c4

0800bc1c <ADC_IRQHandler>:
 800bc1c:	e7fe      	b.n	800bc1c <ADC_IRQHandler>

0800bc1e <Welcome_Message>:
 800bc1e:	6e49 7469 6169 696c 657a 6120 646e 7020     Initialize and p
 800bc2e:	7475 6320 6168 6172 7463 7265 6f20 206e     ut character on 
 800bc3e:	5453 3037 3233 2069 434c 2e44 0a0d 0a0d     ST7032i LCD.....
	...

0800bc50 <blanks.3927>:
 800bc50:	2020 2020 2020 2020 2020 2020 2020 2020                     

0800bc60 <zeroes.3928>:
 800bc60:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0800bc70 <_global_impure_ptr>:
 800bc70:	0168 2000 0000 0000                         h.. ....

0800bc78 <p05.2449>:
 800bc78:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

0800bc88 <__mprec_tens>:
 800bc88:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 800bc98:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 800bca8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 800bcb8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 800bcc8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 800bcd8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 800bce8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 800bcf8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 800bd08:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 800bd18:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 800bd28:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 800bd38:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 800bd48:	9db4 79d9 7843 44ea                         ...yCx.D

0800bd50 <__mprec_tinytens>:
 800bd50:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 800bd60:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 800bd70:	6f43 64ac 0628 0ac8                         Co.d(...

0800bd78 <__mprec_bigtens>:
 800bd78:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 800bd88:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 800bd98:	bf3c 7f73 4fdd 7515                         <.s..O.u

0800bda0 <blanks.3871>:
 800bda0:	2020 2020 2020 2020 2020 2020 2020 2020                     

0800bdb0 <zeroes.3872>:
 800bdb0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 800bdc0:	7542 6767 2079 6367 2163 0020 6f47 0021     Buggy gcc! .Go!.
 800bdd0:	2020 2020 2020 2020 3e00 2520 0064 6548             .> %d.He
 800bde0:	7061 6120 646e 7320 6174 6b63 6320 6c6f     ap and stack col
 800bdf0:	696c 6973 6e6f 000a 7865 7469 0000 0000     lision..exit....
 800be00:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
 800be10:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 800be20:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
 800be30:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
 800be40:	0030 0000 6e49 6966 696e 7974 0000 0000     0...Infinity....
 800be50:	614e 004e 0043 0000 4f50 4953 0058 0000     NaN.C...POSIX...
 800be60:	002e 0000                                   ....
